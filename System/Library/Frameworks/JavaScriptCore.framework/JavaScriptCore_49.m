uint64_t JSC::trimString(JSC::JSGlobalObject *a1, unint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  char v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v57;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSC::VM *v61;
  unint64_t v62;

  v9 = (char)a3;
  v10 = *((_QWORD *)a1 + 7);
  v61 = (JSC::VM *)v10;
  v62 = a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(a1, &v61);
LABEL_24:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, a1, a3, a4, a5, a6, a7, a8, (int **)&v60);
    goto LABEL_8;
  }
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 != 2)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2 || (v11 - 51) < 5)
      return JSC::throwTypeError(a1, &v61);
    goto LABEL_24;
  }
  v12 = *(WTF::StringImpl **)(a2 + 8);
  if ((v12 & 1) != 0)
    v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v12)
    *(_DWORD *)v12 += 2;
  v60 = v12;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v22 = *(_DWORD *)(v10 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
      v23 = 0;
      goto LABEL_52;
    }
  }
  v13 = v60;
  if ((v9 & 1) != 0)
  {
    if (v60)
    {
      v14 = 0;
      while (1)
      {
        v15 = *((unsigned int *)v13 + 1);
        if (v14 >= v15)
          goto LABEL_41;
        v16 = *((_QWORD *)v13 + 1);
        if ((*((_BYTE *)v13 + 16) & 4) != 0)
          break;
        v19 = *(unsigned __int16 *)(v16 + 2 * v14);
        if (v19 <= 0xFF)
        {
          v17 = *(_WORD *)(v16 + 2 * v14);
LABEL_15:
          v18 = v17 > 0x20 || ((1 << v17) & 0x100003E00) == 0;
          if (v18 && v17 != 160)
            goto LABEL_40;
          goto LABEL_19;
        }
        if (u_charType(*(unsigned __int16 *)(v16 + 2 * v14)) != 12 && v19 - 8232 >= 2 && v19 != 65279)
        {
          v13 = v60;
          goto LABEL_39;
        }
LABEL_19:
        ++v14;
        v13 = v60;
        if (!v60)
        {
          LODWORD(v15) = 0;
          goto LABEL_57;
        }
      }
      v17 = *(unsigned __int8 *)(v16 + v14);
      goto LABEL_15;
    }
    LODWORD(v15) = 0;
  }
  else
  {
    LODWORD(v14) = 0;
LABEL_39:
    if (v13)
    {
LABEL_40:
      LODWORD(v15) = *((_DWORD *)v13 + 1);
LABEL_41:
      if ((v9 & 2) != 0 && v15 > v14)
      {
        do
        {
          v24 = v15;
          if (!v60 || (a2 = (v15 - 1), *((_DWORD *)v60 + 1) <= a2))
          {
LABEL_45:
            LODWORD(v15) = v24;
            goto LABEL_46;
          }
          v51 = v15 - 1;
          v52 = WTF::StringImpl::at(v60, a2);
          v53 = v52;
          if (v52 <= 0xFF)
          {
            if (v52 > 0x20u || ((1 << v52) & 0x100001A00) == 0)
            {
              v57 = v52 == 160 || v52 == 13;
              if (!v57 && v52 != 10)
                goto LABEL_45;
            }
          }
          else if (u_charType(v52) != 12 && v53 - 8232 >= 2 && v53 != 65279)
          {
            goto LABEL_45;
          }
          LODWORD(v15) = v51;
        }
        while (v51 > v14);
        LODWORD(v15) = v14;
      }
    }
    else
    {
      LODWORD(v15) = 0;
    }
LABEL_46:
    if ((_DWORD)v14)
      goto LABEL_57;
    v25 = (int)v60;
    if (v60)
      v25 = *((_DWORD *)v60 + 1);
    if ((_DWORD)v15 != v25)
    {
LABEL_56:
      LODWORD(v14) = 0;
LABEL_57:
      WTF::String::substringSharingImpl((int **)&v60, v14, v15 - v14, (int **)&v59);
      v23 = JSC::jsString(v10, (JSC::VM *)&v59, v28, v29, v30, v31, v32, v33);
      v34 = v59;
      v59 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
      goto LABEL_52;
    }
  }
  v23 = v62;
  if ((v62 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v62 + 5) != 2)
    goto LABEL_56;
LABEL_52:
  v26 = v60;
  v60 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v23;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 32);
    do
    {
      *((_OWORD *)v18 - 1) = xmmword_1991593B0;
      *v18 = 0;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_QWORD *)(v6 + 24 * v19);
      if (*v21 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = (*v21 + ~(*v21 << 32)) ^ ((*v21 + ~(*v21 << 32)) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((unint64_t)(v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        v28 = 1;
        do
        {
          v29 = (_QWORD *)(v22 + 24 * v27);
          v27 = (v27 + v28++) & v23;
        }
        while (*v29 != -1);
        v30 = *(_OWORD *)v21;
        v29[2] = v21[2];
        *(_OWORD *)v29 = v30;
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
    goto LABEL_16;
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

_QWORD *WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      result += 3;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t JSC::Structure::markIfCheap<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 40) && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
    || (*(_QWORD *)(a1 + 48) | 2) != 2 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) == 0)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
  return 1;
}

uint64_t JSC::Structure::markIfCheap<JSC::SlotVisitor>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;

  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    if ((v10 & 8) != 0)
    {
      if ((*(_BYTE *)(v10 - 79) & 1) == 0)
        goto LABEL_21;
    }
    else if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*(_QWORD *)(a2 + 80) + 240)
           || ((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) == 0)
    {
      goto LABEL_21;
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    v12 = v11 == 2;
  else
    v12 = 1;
  if (v12)
  {
LABEL_12:
    if ((a1 & 8) != 0)
    {
      if ((*(_BYTE *)(a1 - 79) & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      v13 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a1 & 0xFFFFFFFFFFFFC000), v13, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 8 * ((a1 >> 10) & 0xF) + 0x28) >> (a1 >> 4)) & 1) == 0)
        goto LABEL_26;
    }
    if (!*(_QWORD *)(a2 + 168))
      return 1;
LABEL_26:
    JSC::SlotVisitor::appendSlow(a2, a1, 0, a4, a5, a6, a7, a8);
    return 1;
  }
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a2 + 80) + 240)
         && ((*(_QWORD *)((v11 & 0xFFFFFFFFFFFFC000) + 8 * ((v11 >> 10) & 0xF) + 0x28) >> (v11 >> 4)) & 1) != 0)
  {
    goto LABEL_12;
  }
LABEL_21:
  if ((a1 & 8) != 0)
    return *(_BYTE *)(a1 - 79) & 1;
  if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a2 + 80) + 240))
    return (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 8 * ((a1 >> 10) & 0xF) + 0x28) >> (a1 >> 4)) & 1;
  return 0;
}

void JSC::StructureTransitionTable::add(JSC::StructureTransitionTable *this, JSC::VM *a2, JSC::JSCell *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::Structure *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  char v63[24];
  _QWORD *v64;

  v9 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v13 = (JSC::Structure *)(v9 & 0xFFFFFFFFFFFFFFFELL);
    if (!v13)
    {
      *(_QWORD *)this = a4 | 1;
      if (a3 && a4 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)a3 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a3);
      return;
    }
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E35AF420;
    v14[1] = 0;
    v14[2] = a2;
    v64 = v14;
    WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add((uint64_t *)a2 + 115, (uint64_t *)&v64, v15, v16, v17, v18, v19, (uint64_t)v63);
    *(_QWORD *)this = v14;
    JSC::StructureTransitionTable::add(this, a2, a3, v13);
    v9 = *(_QWORD *)this;
  }
  v20 = (*(_DWORD *)(a4 + 16) >> 13) & 0x1F;
  if ((_DWORD)v20 == 16)
  {
    v21 = *(_QWORD *)(a4 + 48);
    if (v21 == 2)
      v22 = 0x1000000000000000;
    else
      v22 = v21 | 0x1000000000000000;
  }
  else
  {
    v22 = (v20 << 56) | (16 * *(unsigned int *)(a4 + 72));
  }
  v23 = a4 & 0xFFFFFFFFFFFFC000;
  if ((a4 & 8) != 0)
    v23 = (a4 - 112) | 1;
  if ((v23 & 1) != 0)
    v24 = (_QWORD *)(v23 + 47);
  else
    v24 = (_QWORD *)(*(_QWORD *)v23 + 32);
  v25 = (unint64_t)*(unsigned __int8 *)(a4 + 20) << 48;
  v26 = (uint64_t *)v24[2];
  if (!v26)
  {
    while (1)
    {
      v49 = (_QWORD *)v24[3];
      if (!v49)
        break;
      v24[3] = v49[2];
      v26 = (uint64_t *)v49[4];
      v49[3] = 257;
      v49[4] = 0;
      if (v26)
        goto LABEL_17;
    }
    v62 = v25;
    v50 = v23;
    v51 = v24[6];
    if (!v24[1])
    {
      v52 = *(_QWORD **)(v51 + 488);
      *v24 = v51 + 480;
      v24[1] = v52;
      *v52 = v24;
      *(_QWORD *)(v51 + 488) = v24;
    }
    *(_QWORD *)(v51 + 1072) += 1024;
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v53, v50);
    JSC::Heap::didAllocate((JSC::Heap *)(v24[6] + 192), 0x400uLL, v54, v55, v56, v57, v58, v59);
    v60 = v24 + 4;
    v61 = v24[5];
    if (v61)
      v60 = (_QWORD *)(v61 + 16);
    *v60 = v53;
    v24[5] = v53;
    v53[1] = v61;
    v53[2] = 0;
    v26 = (uint64_t *)v53[4];
    v53[3] = 257;
    v53[4] = 0;
    v25 = v62;
  }
LABEL_17:
  v27 = v22 | v25;
  v24[2] = *v26;
  *v26 = a4;
  v26[1] = 0;
  v26[2] = 0;
  v30 = *(_QWORD *)(v9 + 8);
  v29 = (uint64_t *)(v9 + 8);
  v28 = v30;
  if (v30
    || (WTF::HashTable<JSC::StructureTransitionTable::Hash::Key,WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>>,JSC::StructureTransitionTable::Hash,WTF::HashMap<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::rehash(v29, 8uLL, 0, a4, a5, a6, a7, a8), (v28 = *v29) != 0))
  {
    v31 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    v31 = 0;
  }
  v32 = (v27 + ~(v22 << 32)) ^ ((v27 + ~(v22 << 32)) >> 22);
  v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
  v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
  v35 = v31 & ((v34 >> 31) ^ v34);
  v36 = (unint64_t *)(v28 + 16 * v35);
  v37 = *v36;
  if (!*v36)
  {
LABEL_20:
    v38 = v36[1];
    *v36 = v27;
    v36[1] = (unint64_t)v26;
    if (v38)
      *(_QWORD *)(v38 + 8) = 3;
    v39 = *v29;
    if (*v29)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v29;
    if (*v29)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        return;
    }
    else
    {
      if (3 * v44 > 4 * v43)
        return;
      if (!(_DWORD)v44)
      {
        v45 = 8;
LABEL_30:
        WTF::HashTable<JSC::StructureTransitionTable::Hash::Key,WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>>,JSC::StructureTransitionTable::Hash,WTF::HashMap<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::rehash(v29, v45, (uint64_t)v36, a4, a5, a6, a7, a8);
        return;
      }
    }
    v45 = ((_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44)));
    goto LABEL_30;
  }
  v46 = 0;
  v47 = 1;
  while (v37 != v27)
  {
    if (v37 == 2)
      v46 = v36;
    v35 = (v35 + v47) & v31;
    v36 = (unint64_t *)(v28 + 16 * v35);
    v37 = *v36;
    ++v47;
    if (!*v36)
    {
      if (v46)
      {
        *v46 = 0;
        v46[1] = 0;
        --*(_DWORD *)(*v29 - 16);
        v36 = v46;
      }
      goto LABEL_20;
    }
  }
  v48 = v36[1];
  v36[1] = (unint64_t)v26;
  if (v48)
    *(_QWORD *)(v48 + 8) = 3;
}

uint64_t JSC::Structure::Structure(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7, char a8)
{
  unint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;

  v8 = *(_QWORD *)(a2 + 41496);
  v9 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)result = v8 >> 4;
  *(_DWORD *)(result + 4) = v9;
  *(_DWORD *)(result + 8) = -1146241297;
  *(_BYTE *)(result + 8) = a7;
  *(_BYTE *)(result + 9) = *(_BYTE *)a5;
  *(_BYTE *)(result + 10) = *(_BYTE *)(a5 + 1);
  *(_BYTE *)(result + 11) = 1;
  v10 = *(_WORD *)(a5 + 2);
  *(_WORD *)(result + 12) = v10;
  *(_BYTE *)(result + 14) = a8;
  *(_BYTE *)(result + 15) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 76) = a6 >> 4;
  *(_QWORD *)(result + 80) = 1;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 3;
  v11 = a6 & 0xFFFFFFFF0;
  if ((a6 & 0xFFFFFFFF0) != 0)
  {
    v12 = a6 & 0xFFFFFFFF0;
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 4) != 0)
          break;
      }
      v12 = *(_QWORD *)(v12 + 16);
      if (!v12)
        goto LABEL_8;
    }
    LOBYTE(v12) = 1;
LABEL_8:
    while (1)
    {
      v14 = *(_QWORD *)(v11 + 24);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 8) & 8) != 0)
          break;
      }
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
        goto LABEL_14;
    }
    LOBYTE(v11) = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
LABEL_14:
  if (a6)
  {
    v15 = a6;
    do
    {
      v16 = *(_QWORD *)(v15 + 24);
      if (v16 && (*(_BYTE *)(v16 + 8) & 0x70) != 0)
      {
        v17 = 16;
        v18 = 8;
        goto LABEL_26;
      }
      v15 = *(_QWORD *)(v15 + 16);
    }
    while (v15);
    while (1)
    {
      v19 = *(_QWORD *)(a6 + 24);
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 8) & 2) != 0)
          break;
      }
      a6 = *(_QWORD *)(a6 + 16);
      if (!a6)
        goto LABEL_25;
    }
    v18 = 0;
    v17 = 16;
  }
  else
  {
LABEL_25:
    v18 = 0;
    v17 = 0;
  }
LABEL_26:
  v20 = v17 | v18;
  if ((v12 & 1) != 0 || (*(_BYTE *)(a5 + 1) & 8) != 0)
    v21 = 64;
  else
    v21 = 0;
  v22 = v20 | v21;
  if ((v11 & 1) != 0)
  {
    v23 = v22 | 0x40000000;
LABEL_35:
    v24 = -2147483616;
    goto LABEL_33;
  }
  v23 = v22 & 0xBFFFFFFF | ((((*(_BYTE *)(a5 + 1) & 8) >> 3) & 1) << 30);
  v24 = 32;
  if ((*(_BYTE *)(a5 + 1) & 8) != 0 && *(_BYTE *)a5 != 36)
    goto LABEL_35;
LABEL_33:
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = v24 | v23 & 0x43841FDF | ((v10 & 0x2000) << 7);
  *(_DWORD *)(result + 22) = -65538;
  return result;
}

uint64_t JSC::ClassInfo::hasStaticPropertyWithAnyOfAttributes(uint64_t this, unsigned __int8 a2)
{
  uint64_t v2;

  if (this)
  {
    while (1)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 8) & a2) != 0)
          break;
      }
      this = *(_QWORD *)(this + 16);
      if (!this)
        return this;
    }
    return 1;
  }
  return this;
}

JSC::VM *JSC::Structure::setMaxOffset(JSC::VM *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  int v9;

  if ((_DWORD)a3 == -1)
  {
    *((_WORD *)this + 12) = -2;
  }
  else if ((int)a3 > 65533)
  {
    if (*((__int16 *)this + 12) == -1)
    {
      *(_DWORD *)(*((_QWORD *)this + 8) + 84) = (_DWORD)a3;
    }
    else
    {
      v8 = this;
      v9 = (int)a3;
      this = JSC::Structure::ensureRareData(this, a2, a3, a4, a5, a6, a7, a8);
      *((_DWORD *)this + 21) = v9;
      __dmb(0xAu);
      *((_WORD *)v8 + 12) = -1;
    }
  }
  else
  {
    *((_WORD *)this + 12) = (_WORD)a3;
  }
  return this;
}

void JSC::Structure::destroy(JSC::Structure *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t *i;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  if ((*((_WORD *)this + 6) & 0x200) == 0 && (*((_BYTE *)this + 19) & 1) != 0)
  {
    v36 = *((unsigned int *)this + 26);
    *((_DWORD *)this + 26) = 0;
    if ((_DWORD)v36)
    {
      v37 = (WTF::StringImpl *)(16 * v36);
      v38 = *(_DWORD *)(16 * v36) - 2;
      if (v38)
      {
        *(_DWORD *)v37 = v38;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
    }
  }
  v9 = *((_QWORD *)this + 12);
  if ((v9 & 1) == 0)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v9));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = (uint64_t **)(v9 + 8);
      for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v16; i = *v16)
      {
        v48 = *i;
        v47 = (uint64_t *)i[1];
        *v47 = *i;
        *(_QWORD *)(v48 + 8) = v47;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v10 = *((_QWORD *)this + 10);
  if ((v10 & 1) == 0 && v10)
  {
    JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(v10 + 16) + 192), *((_QWORD *)this + 10), a3, a4, a5, a6, a7, a8);
    v33 = *(_QWORD *)(v10 + 8);
    if (v33)
    {
      v34 = *(unsigned int *)(v33 - 4);
      if ((_DWORD)v34)
      {
        v35 = v33 + 8;
        do
        {
          if (*(_QWORD *)(v35 - 8) != 2 && *(_QWORD *)v35)
          {
            *(_QWORD *)(*(_QWORD *)v35 + 8) = 3;
            *(_QWORD *)v35 = 0;
          }
          v35 += 16;
          --v34;
        }
        while (v34);
      }
      WTF::fastFree(v33 - 16, v26, v27, v28, v29, v30, v31, v32);
    }
    WTF::fastFree(v10, v26, v27, v28, v29, v30, v31, v32);
  }
  v11 = *((unsigned int *)this + 18);
  *((_DWORD *)this + 18) = 0;
  if ((_DWORD)v11)
  {
    v12 = (WTF::StringImpl *)(16 * v11);
    v13 = *(_DWORD *)(16 * v11) - 2;
    if (v13)
    {
      *(_DWORD *)v12 = v13;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
}

void JSC::Structure::visitChildren(JSC::Structure *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned __int8 *)this + 15;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
    goto LABEL_9;
  }
  if (__stxr(1u, v12))
    goto LABEL_8;
LABEL_9:
  v14 = *((_QWORD *)this + 5);
  if (!v14)
    goto LABEL_15;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v15 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_14:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_15;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v14, 0, a4, a5, a6, a7, a8);
LABEL_15:
  if (*((unsigned __int8 *)this + 9) <= 0x16u)
  {
    *((_QWORD *)this + 7) = 0;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 0xFFFE000000000002) == 0 && v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_22:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_23;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, a4, a5, a6, a7, a8);
  }
LABEL_23:
  v18 = *((_QWORD *)this + 7);
  if (!v18)
    goto LABEL_29;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_28:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_29;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, a4, a5, a6, a7, a8);
LABEL_29:
  v20 = *((_QWORD *)this + 8);
  if (!v20)
    goto LABEL_35;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_34;
  }
  else
  {
    v21 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_34:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_35;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, a4, a5, a6, a7, a8);
LABEL_35:
  if ((*((_DWORD *)this + 4) & 0x10000004) == 0)
  {
    v22 = *((_QWORD *)this + 11);
    if (!*(_QWORD *)(*((_QWORD *)a2 + 10) + 92936))
    {
      if (v22)
        *((_QWORD *)this + 11) = 0;
      goto LABEL_42;
    }
    if (!v22)
      goto LABEL_42;
    if ((v22 & 8) != 0)
    {
      v31 = 0;
      if ((*(_BYTE *)(v22 - 79) & 1) != 0)
      {
LABEL_86:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_42;
      }
    }
    else
    {
      v31 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + v31 + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) != 0)
        goto LABEL_86;
    }
    v30 = v31;
    goto LABEL_73;
  }
  v22 = *((_QWORD *)this + 11);
  if (v22)
  {
    if ((v22 & 8) != 0)
    {
      if ((*(_BYTE *)(v22 - 79) & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      v23 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v23, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) != 0)
      {
LABEL_41:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_42;
      }
    }
    v30 = 0;
LABEL_73:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v22, v30, a4, a5, a6, a7, a8);
  }
LABEL_42:
  if ((*((_BYTE *)this + 19) & 1) != 0)
  {
    v27 = *((_DWORD *)this + 27);
    v28 = v27 & 0xFFFFFFFE;
    if ((v27 & 0xFFFFFFFE) != 0)
    {
      v29 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)((16 * v28) & 0xFFFFFC000 | 0x20) != v29)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v28) & 0xFFFFFC000), v29, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)(((16 * v28) & 0xFFFFFC000) + 8 * ((v28 >> 6) & 0xF) + 0x28) >> (v28 & 0x3E)) & 1) == 0
        || *((_QWORD *)a2 + 21))
      {
        JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v28, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 155) != 1)
  {
    v25 = *((_QWORD *)this + 10);
    if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      if ((v25 & 8) != 0)
      {
        if ((*(_BYTE *)((v25 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v26 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v26)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v26, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) != 0)
        {
LABEL_55:
          if (!*((_QWORD *)a2 + 21))
            goto LABEL_44;
        }
      }
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v25 & 0xFFFFFFFFFFFFFFFELL, 0, a4, a5, a6, a7, a8);
    }
  }
LABEL_44:
  v24 = __ldxr(v12);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, v12))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::Structure::visitChildren(JSC::Structure *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  uint64_t v20;
  char v21;
  _QWORD v22[2];
  _QWORD *v23;
  char v24;

  v19[0] = a2;
  v19[1] = this;
  v21 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v20 = v5;
  if (!v5 || !*(_BYTE *)(v5 + 24))
  {
    v22[0] = a2;
    v22[1] = this;
    v24 = 0;
    v23 = v19;
    *((_QWORD *)a2 + 11) = v22;
    v6 = (unsigned __int8 *)this + 15;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v22[0] + 88) = v23;
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_7;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
LABEL_7:
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 5));
    if (*((unsigned __int8 *)this + 9) <= 0x16u)
    {
      *((_QWORD *)this + 7) = 0;
    }
    else
    {
      if ((*((_QWORD *)this + 6) & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 7));
    }
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 8));
    if ((*((_DWORD *)this + 4) & 0x10000004) != 0)
    {
      v14 = *((_QWORD *)this + 11);
    }
    else
    {
      v14 = *((_QWORD *)this + 11);
      if (!*(_QWORD *)(*((_QWORD *)a2 + 10) + 92936))
      {
        if (v14)
          *((_QWORD *)this + 11) = 0;
LABEL_16:
        if ((*((_BYTE *)this + 19) & 1) != 0)
        {
          v15 = *((_DWORD *)this + 27);
          if (v15)
            v16 = 16 * (v15 & 0xFFFFFFFE);
          else
            v16 = 0;
          (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v16);
        }
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 155) != 1)
        {
          v17 = *((_QWORD *)this + 10);
          if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFFFFFFFFFELL) != 0)
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        }
        v18 = __ldxr(v6);
        if (v18 == 1)
        {
          if (!__stlxr(0, v6))
            goto LABEL_30;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, v8, v9, v10, v11, v12, v13);
LABEL_30:
        *(_QWORD *)(v19[0] + 88) = v20;
        return;
      }
    }
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v14);
    goto LABEL_16;
  }
  __break(0xC471u);
}

uint64_t JSC::Structure::Structure(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_DWORD *)result = 0;
  *(_BYTE *)(result + 7) = 1;
  *(_DWORD *)(result + 8) = -1146241297;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 14) = 0;
  *(_DWORD *)(result + 17) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 2;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 76) = (unint64_t)&JSC::Structure::s_info >> 4;
  *(_QWORD *)(result + 80) = 1;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 3;
  if (((unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0) != 0)
  {
    v1 = (unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0;
    while (1)
    {
      v2 = *(_QWORD *)(v1 + 24);
      if (v2)
      {
        if ((*(_BYTE *)(v2 + 8) & 4) != 0)
          break;
      }
      v1 = *(_QWORD *)(v1 + 16);
      if (!v1)
        goto LABEL_9;
    }
    LODWORD(v1) = 1;
  }
  else
  {
    LODWORD(v1) = 0;
  }
LABEL_9:
  if (((unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0) != 0)
  {
    v3 = (unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0;
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 8) & 8) != 0)
          break;
      }
      v3 = *(_QWORD *)(v3 + 16);
      if (!v3)
        goto LABEL_17;
    }
    LODWORD(v3) = 1;
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (((unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0) == 0)
    goto LABEL_31;
LABEL_17:
  v5 = (unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0;
  do
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 && (*(_BYTE *)(v6 + 8) & 0x70) != 0)
    {
      v7 = 16;
      LODWORD(v8) = 8;
      goto LABEL_33;
    }
    v5 = *(_QWORD *)(v5 + 16);
  }
  while (v5);
  if (((unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0) != 0)
  {
    v8 = (unint64_t)&JSC::Structure::s_info & 0xFFFFFFFF0;
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        if ((*(_BYTE *)(v9 + 8) & 2) != 0)
          break;
      }
      v8 = *(_QWORD *)(v8 + 16);
      if (!v8)
        goto LABEL_32;
    }
    LODWORD(v8) = 0;
    v7 = 16;
  }
  else
  {
LABEL_31:
    LODWORD(v8) = 0;
LABEL_32:
    v7 = 0;
  }
LABEL_33:
  v10 = v7 | v8;
  if ((_DWORD)v1)
    v11 = 64;
  else
    v11 = 0;
  v12 = v10 | v11;
  if ((_DWORD)v3)
  {
    v12 |= 0x40000000u;
    v13 = -2147483616;
  }
  else
  {
    v13 = 32;
  }
  *(_DWORD *)(result + 16) = v13 | v12 & 0x43841FDF;
  *(_DWORD *)(result + 22) = -65538;
  *(_DWORD *)(result + 8) = 16777472;
  *(_WORD *)(result + 12) = 512;
  return result;
}

JSC::Structure *JSC::Structure::Structure(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v14;

  v6 = *((_QWORD *)a2 + 5187);
  v7 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)this = v6 >> 4;
  *((_DWORD *)this + 1) = v7;
  *((_DWORD *)this + 2) = -1146241297;
  *((_BYTE *)this + 14) = *((_BYTE *)a3 + 14);
  *((_BYTE *)this + 15) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 7) = *((_DWORD *)a3 + 7);
  *((_DWORD *)this + 8) = *((_DWORD *)a3 + 8);
  v8 = *((_QWORD *)a3 + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = v8;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 19) = *((_DWORD *)a3 + 19);
  *((_QWORD *)this + 10) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 3;
  LOBYTE(v8) = *((_DWORD *)a3 + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4) & 3;
  v9 = *((_DWORD *)a3 + 4) & 0x800000 | v8 & 3;
  *((_DWORD *)this + 4) = v9;
  LODWORD(v8) = *((_DWORD *)a3 + 4) & 8 | v9;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 4) & 0x10 | v8;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 4) & 0x40 | v8;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 4) & 0x40000000 | v8;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 4) & 0x80000000 | v8;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = v8 & 0xDFFFFFFF | (((*((_DWORD *)a3 + 4) >> 29) & 1) << 29);
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = v8 & 0xFFFFFFDF | (32 * ((*((_DWORD *)a3 + 4) >> 5) & 1));
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 4) = v8 & 0xFFFC1FFF;
  LODWORD(v8) = *((_DWORD *)a3 + 4) & 0x80000 | v8 & 0xFFF41FFF;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = v8 & 0xFFCC1FFF | *((_DWORD *)a3 + 4) & 0x100000 | 0x200000;
  *((_DWORD *)this + 4) = v8;
  LODWORD(v8) = v8 & 0xFFBFFFFF | *((_DWORD *)a3 + 4) & 0x400000;
  *((_DWORD *)this + 4) = v8;
  *((_DWORD *)this + 4) = v8 & 0xE7FFFFFF | *((_DWORD *)a3 + 4) & 0x8000000;
  *(_DWORD *)((char *)this + 22) = -65538;
  LOWORD(v8) = *((_WORD *)a3 + 6);
  *((_DWORD *)this + 2) = (*((unsigned __int8 *)a3 + 10) << 16) | (*((unsigned __int8 *)a3 + 9) << 8) | *((unsigned __int8 *)a3 + 8) | 0x1000000;
  *((_WORD *)this + 6) = v8;
  *((_QWORD *)this + 8) = a3;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  v10 = *((_QWORD *)a3 + 12);
  if ((v10 & 1) != 0)
  {
    v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v14 = *(unsigned __int8 *)(v10 + 5);
    v11 = *((_DWORD *)a3 + 4);
    if (v14)
    {
      v11 |= 0x4000000u;
      *((_DWORD *)a3 + 4) = v11;
    }
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0xFBFFFFFF | (((v11 >> 26) & 1) << 26);
  v12 = *((_QWORD *)a3 + 5);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  return this;
}

unint64_t JSC::Structure::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  uint64_t v11;
  const JSC::PropertyTable *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  JSC::Structure *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  char v77;

  v10 = JSC::Structure::create((JSC::VM *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v17 = v10;
  v18 = *(unsigned __int16 *)(v10 + 24);
  if (v18 == 65534)
    goto LABEL_5;
  if (v18 == 0xFFFF)
    v18 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 84);
  if (v18 < 64)
  {
LABEL_5:
    v19 = 0;
  }
  else
  {
    v61 = (v18 - 64) | ((v18 - 64) >> 1) | (((v18 - 64) | ((v18 - 64) >> 1)) >> 2);
    v62 = v61 | (v61 >> 4) | ((v61 | (v61 >> 4)) >> 8);
    v63 = v62 | HIWORD(v62);
    if ((v18 - 63) >= 5)
      v19 = v63 + 1;
    else
      v19 = 4;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 41952) + 48) + 4336);
  JSC::Structure::ensurePropertyTable((JSC::Structure *)v10, (JSC::VM *)a1, v11, v12, v13, v14, v15, v16);
  v29 = v28;
  v30 = (unsigned __int8 *)(v17 + 15);
  if (__ldaxr((unsigned __int8 *)(v17 + 15)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 15);
    goto LABEL_9;
  }
  if (__stxr(1u, v30))
    goto LABEL_8;
LABEL_9:
  ++*(_DWORD *)(a1 + 916);
  *(_DWORD *)(v17 + 16) |= 4u;
  if (v29)
  {
    *(_QWORD *)(v17 + 88) = v29;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v17 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, v17);
  }
  else
  {
    *(_QWORD *)(v17 + 88) = 0;
  }
  v32 = *(_QWORD *)(v17 + 64);
  if (v32 && *(_BYTE *)(v32 + 5) != 1)
    *(_DWORD *)(v32 + 80) = 0;
  else
    *(_QWORD *)(v17 + 64) = 0;
  v33 = *(unsigned int *)(v17 + 72);
  *(_DWORD *)(v17 + 72) = 0;
  if ((_DWORD)v33)
  {
    v34 = (WTF::StringImpl *)(16 * v33);
    v35 = *(_DWORD *)(16 * v33) - 2;
    if (v35)
    {
      *(_DWORD *)v34 = v35;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v34, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
  v36 = *(_DWORD *)(v17 + 16) & 0xFFFFFF9F;
  *(_DWORD *)(v17 + 16) = v36 | 0x40;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 41952) + 16) == v20)
    *(_DWORD *)(v17 + 16) = v36 | 0x20000040;
  v37 = *(unsigned __int8 *)(v17 + 14);
  v38 = *(_QWORD *)(v29 + 32);
  if (v38 && (v74 = *(unsigned int *)(v38 + 12), (_DWORD)v74))
  {
    v44 = *(_DWORD *)(*(_QWORD *)v38 + 4 * v74 - 4);
    *(_DWORD *)(v38 + 12) = v74 - 1;
  }
  else
  {
    v39 = *(_DWORD *)(v29 + 24);
    v40 = __OFSUB__(v39, v37);
    v42 = v39 - v37;
    v41 = (v42 < 0) ^ v40;
    v43 = v42 + 64;
    if (v41)
      v44 = *(_DWORD *)(v29 + 24);
    else
      v44 = v43;
  }
  v45 = *(_DWORD *)(v20 + 16);
  if ((v45 & 0x20) != 0)
    v45 = *(_DWORD *)(v20 + 32);
  v46 = *(_DWORD *)(v17 + 28) ^ (v45 >> 8);
  v47 = *(_DWORD *)(v17 + 32) | (v20 >> 4);
  *(_DWORD *)(v17 + 28) = v46;
  *(_DWORD *)(v17 + 32) = v47;
  v75 = v20;
  v76 = v44;
  v77 = 4;
  JSC::PropertyTable::add((JSC::PropertyTable *)v29, (JSC::VM *)a1, (int *)&v75, v23, v24, v25, v26, v27);
  v54 = *(unsigned __int16 *)(v17 + 24);
  if (v54 == 65534)
  {
    v55 = -1;
  }
  else if (v54 == 0xFFFF)
  {
    v55 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84);
  }
  else
  {
    v55 = *(unsigned __int16 *)(v17 + 24);
  }
  if (v44 <= v55)
    v56 = v55;
  else
    v56 = v44;
  if (v56 >= 64)
  {
    if ((v56 - 63) >= 5)
    {
      v72 = (v56 - 64) | ((v56 - 64) >> 1) | (((v56 - 64) | ((v56 - 64) >> 1)) >> 2);
      v73 = v72 | (v72 >> 4) | ((v72 | (v72 >> 4)) >> 8);
      v57 = (v73 | HIWORD(v73)) + 1;
    }
    else
    {
      v57 = 4;
    }
  }
  else
  {
    v57 = 0;
  }
  if (v57 != v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198BE2BF8);
  }
  if (v44)
  {
    __break(0xC471u);
    JUMPOUT(0x198BE2C18);
  }
  *(_QWORD *)(v17 + 48) = 0;
  if (v56 == -1)
  {
    *(_WORD *)(v17 + 24) = -2;
  }
  else if (v56 > 65533)
  {
    if (v54 == 0xFFFF)
    {
      *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84) = v56;
    }
    else
    {
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v17, (JSC::VM *)a1, v48, v49, v50, v51, v52, v53) + 21) = v56;
      __dmb(0xAu);
      *(_WORD *)(v17 + 24) = -1;
    }
  }
  else
  {
    *(_WORD *)(v17 + 24) = v56;
  }
  v58 = __ldxr(v30);
  if (v58 == 1)
  {
    if (!__stlxr(0, v30))
      goto LABEL_44;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v17 + 15), 0, (uint64_t)v48, v49, v50, v51, v52, v53);
LABEL_44:
  v59 = *(_DWORD *)(a1 + 916) - 1;
  *(_DWORD *)(a1 + 916) = v59;
  if (*(unsigned __int8 *)(a1 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v59)
  {
    *(_BYTE *)(a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a1 + 192, 0);
  }
  return v17;
}

uint64_t JSC::Structure::isValidPrototype(unint64_t a1)
{
  if (a1 == 2)
    return 1;
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) < 0x17u)
    return 0;
  return (*(unsigned __int8 *)((16 * *(unsigned int *)a1) | 0x12) >> 3) & 1;
}

void JSC::Structure::materializePropertyTable(JSC::Structure *this, JSC::VM *a2, int a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v11;
  JSC::Structure *v12;
  unsigned __int8 *v13;
  JSC::Structure *v15;
  JSC::VM *v16;
  _BOOL4 v17;
  int v18;
  JSC::Structure **v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  JSC::Structure **v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  WTF *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  int v91;
  int v92;
  int v93;
  BOOL v94;
  WTF *v95;
  int v96;
  const char *v97;
  _QWORD v98[2];
  JSC::Structure *v99;
  WTF *v100;
  uint64_t v101;
  _BYTE v102[64];
  JSC::Structure *v103;
  unint64_t *v104;
  unsigned int *v105;
  int *v106;
  _QWORD *v107;
  int v108;
  unsigned int v109;
  unint64_t v110;

  ++*((_DWORD *)a2 + 229);
  v11 = (WTF *)v102;
  v99 = this;
  v100 = (WTF *)v102;
  v101 = 8;
  if (!this)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_24;
  }
  v12 = this;
  while (1)
  {
    v13 = (unsigned __int8 *)v12 + 15;
    if (__ldaxr((unsigned __int8 *)v12 + 15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_7;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
LABEL_7:
    v15 = v99;
    v16 = (JSC::VM *)*((_QWORD *)v99 + 11);
    v17 = v16 != 0;
    if (v16)
      goto LABEL_24;
    v18 = HIDWORD(v101);
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v23 = (JSC::Structure **)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, HIDWORD(v101) + 1, (unint64_t)&v99);
      v18 = HIDWORD(v101);
      v19 = (JSC::Structure **)((char *)v100 + 8 * HIDWORD(v101));
      v15 = *v23;
    }
    else
    {
      v19 = (JSC::Structure **)((char *)v100 + 8 * HIDWORD(v101));
    }
    *v19 = v15;
    HIDWORD(v101) = v18 + 1;
    v20 = (unsigned __int8 *)v99 + 15;
    v21 = __ldxr((unsigned __int8 *)v99 + 15);
    if (v21 != 1)
    {
      __clrex();
LABEL_14:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v20, 0, (uint64_t)v16, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_15;
    }
    if (__stlxr(0, v20))
      goto LABEL_14;
LABEL_15:
    v12 = (JSC::Structure *)*((_QWORD *)v99 + 8);
    if (!v12)
      goto LABEL_23;
    if (*((_BYTE *)v12 + 5) != 1)
      break;
LABEL_19:
    v16 = 0;
    v99 = v12;
    if (!v12)
      goto LABEL_24;
  }
  v22 = *((_DWORD *)v12 + 20);
  if (v22)
  {
    v12 = (JSC::Structure *)(16 * (v22 & 0xFFFFFFFE));
    goto LABEL_19;
  }
LABEL_23:
  v16 = 0;
  v17 = 0;
  v99 = 0;
LABEL_24:
  v24 = *((unsigned __int16 *)this + 12);
  if (v24 == 65534)
  {
    v24 = -1;
    goto LABEL_34;
  }
  if (v24 == 0xFFFF)
    v24 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  v25 = *((unsigned __int8 *)this + 14);
  if (v24 < v25)
  {
LABEL_34:
    v27 = (v24 + 1);
    if (!v17)
      goto LABEL_32;
    goto LABEL_35;
  }
  if (v24 >= 64)
    v26 = v24 - 63;
  else
    v26 = 0;
  v27 = (v26 + v25);
  if (!v17)
  {
LABEL_32:
    v35 = JSC::PropertyTable::create(a2, (JSC::VM *)v27, (uint64_t)v16, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_45;
  }
LABEL_35:
  v36 = v27 | (v27 >> 1) | ((v27 | (v27 >> 1)) >> 2);
  v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
  v38 = 2 * (v37 | HIWORD(v37)) + 2;
  if (v27 >= 8)
    v39 = v38;
  else
    v39 = 16;
  if (v39 == *((_DWORD *)v16 + 2))
    v40 = JSC::PropertyTable::clone(a2, v16, v16, (uint64_t)a4, a5, a6, a7, a8);
  else
    v40 = JSC::PropertyTable::clone(a2, (JSC::VM *)v27, v16, a4, a5, a6, a7, a8);
  v35 = v40;
  v41 = (unsigned __int8 *)v99 + 15;
  v42 = __ldxr((unsigned __int8 *)v99 + 15);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, v41))
LABEL_44:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, v29, v30, v31, v32, v33, v34);
LABEL_45:
  v43 = (unsigned __int8 *)this + 15;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stxr(1u, v43))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
  ++*((_DWORD *)a2 + 229);
  if (a3)
  {
    if (v35)
    {
      *((_QWORD *)this + 11) = v35;
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    }
    else
    {
      *((_QWORD *)this + 11) = 0;
    }
  }
  v45 = HIDWORD(v101);
  if (HIDWORD(v101))
  {
    do
    {
      while (1)
      {
LABEL_54:
        if (--v45 >= (unint64_t)HIDWORD(v101))
        {
          __break(0xC471u);
          return;
        }
        v46 = *((_QWORD *)v100 + v45);
        v99 = (JSC::Structure *)v46;
        v47 = *(unsigned int *)(v46 + 72);
        if (!(_DWORD)v47)
          goto LABEL_91;
        v48 = (*(_DWORD *)(v46 + 16) >> 13) & 0x1F;
        if (v48 == 3)
          break;
        if (v48 == 2)
        {
          v103 = (JSC::Structure *)(16 * v47);
          JSC::PropertyTable::take((JSC::PropertyTable *)v35, a2, (uint64_t)&v103, v30, v31, v32, v33, v34);
          v52 = *((unsigned __int16 *)v99 + 11);
          if (v52 == 65534)
          {
            v52 = -1;
          }
          else if (v52 == 0xFFFF)
          {
            v52 = *(_DWORD *)(*((_QWORD *)v99 + 8) + 88);
          }
          LODWORD(v103) = v52;
          v53 = *(_QWORD *)(v35 + 32);
          if (!v53)
          {
            v75 = v11;
            v76 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v76 = 0;
            v76[1] = 0;
            v77 = *(_QWORD *)(v35 + 32);
            *(_QWORD *)(v35 + 32) = v76;
            if (v77)
            {
              v78 = *(_QWORD *)v77;
              if (*(_QWORD *)v77)
              {
                *(_QWORD *)v77 = 0;
                *(_DWORD *)(v77 + 8) = 0;
                WTF::fastFree(v78, v28, v29, v30, v31, v32, v33, v34);
              }
              WTF::fastFree(v77, v28, v29, v30, v31, v32, v33, v34);
              v53 = *(_QWORD *)(v35 + 32);
            }
            else
            {
              v53 = (uint64_t)v76;
            }
            v11 = v75;
          }
          v54 = *(unsigned int *)(v53 + 12);
          if ((_DWORD)v54 == *(_DWORD *)(v53 + 8))
            *(_DWORD *)(*(_QWORD *)v53 + 4 * *(unsigned int *)(v53 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v103);
          else
            *(_DWORD *)(*(_QWORD *)v53 + 4 * v54) = v52;
          ++*(_DWORD *)(v53 + 12);
          if (!v45)
            goto LABEL_105;
        }
        else
        {
          if (v48 != 1)
            goto LABEL_91;
          v49 = *(unsigned __int16 *)(v46 + 22);
          if (v49 == 65534)
          {
            v49 = -1;
          }
          else if (v49 == 0xFFFF)
          {
            v49 = *(_DWORD *)(*(_QWORD *)(v46 + 64) + 88);
          }
          v50 = *(_BYTE *)(v46 + 20);
          v103 = (JSC::Structure *)(16 * v47);
          LODWORD(v104) = v49;
          BYTE4(v104) = v50;
          v51 = *(_QWORD *)(v35 + 32);
          if (v51)
          {
            v79 = *(_DWORD *)(v51 + 12);
            if (v79)
              *(_DWORD *)(v51 + 12) = v79 - 1;
          }
          JSC::PropertyTable::add((JSC::PropertyTable *)v35, a2, (int *)&v103, v30, v31, v32, v33, v34);
          if (!v45)
            goto LABEL_105;
        }
      }
      v55 = 16 * v47;
      v56 = *(_BYTE *)(v46 + 20);
      v57 = *(_QWORD *)(v35 + 16);
      v58 = v57 & 0xFFFFFFFFFFFFFFFELL;
      v59 = *(unsigned int *)(v35 + 8);
      v60 = *(_DWORD *)(v55 + 16);
      if ((v57 & 1) == 0)
      {
        if ((v60 & 0x20) != 0)
          v60 = *(_DWORD *)(v55 + 32);
        v68 = *(_DWORD *)(v35 + 12);
        v69 = v68 & (v60 >> 8);
        v70 = *(_DWORD *)(v58 + 4 * v69);
        if (v70)
        {
          v71 = v58 + 4 * v59;
          v72 = 1;
          while (1)
          {
            v73 = (v70 - 1);
            if (*(_QWORD *)(v71 + 16 * v73) == v55)
              break;
            v69 = (v69 + v72) & v68;
            v70 = *(_DWORD *)(v58 + 4 * v69);
            ++v72;
            if (!v70)
              goto LABEL_91;
          }
          v74 = v71 + 16 * v73;
          if (*(_DWORD *)(v74 + 8) != -1)
            *(_BYTE *)(v74 + 12) = v56;
        }
LABEL_91:
        if (!v45)
          break;
        goto LABEL_54;
      }
      if ((v60 & 0x20) != 0)
        v60 = *(_DWORD *)(v55 + 32);
      v61 = *(_DWORD *)(v35 + 12);
      v62 = (v60 >> 8) & *(_QWORD *)&v61;
      v63 = *(unsigned __int8 *)(v58 + v62);
      if (!*(_BYTE *)(v58 + v62))
        goto LABEL_91;
      v64 = v58 + v59;
      v65 = 1;
      while (1)
      {
        v66 = (v63 - 1);
        v67 = *(_QWORD *)(v64 + 8 * v66);
        if (v55 == (v67 & 0xFFFFFFFFFFFFLL))
          break;
        v62 = ((_DWORD)v62 + v65) & v61;
        v63 = *(unsigned __int8 *)(v58 + v62);
        ++v65;
        if (!*(_BYTE *)(v58 + v62))
          goto LABEL_91;
      }
      *(_QWORD *)(v64 + 8 * v66) = v67 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v56 << 48);
    }
    while (v45);
  }
LABEL_105:
  v98[0] = &v99;
  v98[1] = &v100;
  v110 = v35;
  v80 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v80)
    v80 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v80 + 5) & 8) == 0)
  {
    v81 = *(_DWORD *)(v35 + 24);
    v82 = *(_QWORD *)(v35 + 32);
    if (v82)
      LODWORD(v82) = *(_DWORD *)(v82 + 12);
    v83 = v82 + v81;
    v84 = *((unsigned __int8 *)this + 14);
    v85 = v82 + v81 - v84;
    if (v83 < v84)
      v85 = 0;
    v108 = v85;
    v109 = v83;
    v103 = this;
    v104 = &v110;
    v105 = &v109;
    v106 = &v108;
    v107 = v98;
    v86 = *((unsigned __int16 *)this + 12);
    if (v86 == 65534)
    {
      v87 = -1;
    }
    else
    {
      if (v86 == 0xFFFF)
        v87 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
      else
        v87 = *((unsigned __int16 *)this + 12);
      if (v87 >= (int)v84)
      {
        if (v87 >= 64)
          v88 = (v87 - 63);
        else
          v88 = 0;
        v89 = v88 + v84;
LABEL_122:
        if (v89 == v83)
        {
          if (v86 == 65534)
            goto LABEL_128;
          if (v86 == 0xFFFF)
            v86 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
          v90 = __OFSUB__(v86, 63);
          v91 = v86 - 63;
          if ((v91 < 0) ^ v90 | (v91 == 0))
LABEL_128:
            v91 = 0;
          if (v91 == v85)
            goto LABEL_130;
          v97 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
        }
        else
        {
          v97 = "numberOfSlotsForMaxOffset doesn't match totalSize";
        }
        JSC::Structure::checkOffsetConsistency<JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0>(JSC::PropertyTable *,JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0 const&)const::{lambda(char const*)#1}::operator()((uint64_t *)&v103, v97);
      }
    }
    v89 = v87 + 1;
    goto LABEL_122;
  }
LABEL_130:
  v92 = __ldxr(v43);
  if (v92 == 1)
  {
    if (!__stlxr(0, v43))
      goto LABEL_135;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, v29, v30, v31, v32, v33, v34);
LABEL_135:
  v93 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v93;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v94 = v93 == 0;
  else
    v94 = 0;
  if (v94)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  v95 = v100;
  if (v11 != v100 && v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree((unint64_t)v95, v28, v29, v30, v31, v32, v33, v34);
  }
  v96 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v96;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
  {
    if (!v96)
    {
      *((_BYTE *)a2 + 1198) = 0;
      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
    }
  }
}

uint64_t JSC::Structure::holesMustForwardToPrototypeSlow(JSC::Structure *this, JSC::JSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 8) & 0x20) == 0)
  {
    v2 = *((_QWORD *)this + 5);
    if (!v2 || *(_BYTE *)(*(_QWORD *)(v2 + 2048) + 4) != 2)
    {
      v3 = *((_QWORD *)this + 6);
      if (!v3)
        v3 = *((_QWORD *)a2 + 2);
      if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) < 0x17u)
        return 0;
      while ((*(_BYTE *)(v3 + 4) & 0xE) == 0)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 8) & 0x20) != 0)
          break;
        v4 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
        if (v4)
        {
          if (*(_BYTE *)(*(_QWORD *)(v4 + 2048) + 4) == 2)
            break;
        }
        v5 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x30);
        if (!v5)
          v5 = *(_QWORD *)(v3 + 16);
        if ((v5 & 0xFFFE000000000002) == 0)
        {
          v3 = v5;
          if (*(unsigned __int8 *)(v5 + 5) > 0x16u)
            continue;
        }
        return 0;
      }
    }
  }
  return 1;
}

unint64_t JSC::Structure::addPropertyTransition(JSC::VM *a1, uint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, int *a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t result;
  int v15;

  *a5 = -1;
  if ((*(_BYTE *)(a2 + 19) & 8) != 0)
    return JSC::Structure::addNewPropertyTransition(a1, (unsigned int **)a2, a3, a4, a5, 0, 0, a9, a6);
  result = JSC::StructureTransitionTable::get((uint64_t *)(a2 + 80), a3, (uint64_t)a4, 1);
  if (!result)
    return JSC::Structure::addNewPropertyTransition(a1, (unsigned int **)a2, a3, a4, a5, 0, 0, a9, a6);
  v15 = *(unsigned __int16 *)(result + 22);
  if (v15 == 65534)
  {
    v15 = -1;
  }
  else if (v15 == 0xFFFF)
  {
    v15 = *(_DWORD *)(*(_QWORD *)(result + 64) + 88);
  }
  *a5 = v15;
  return result;
}

unint64_t JSC::Structure::addNewPropertyTransition(JSC::VM *a1, unsigned int **a2, unint64_t a3, const JSC::PropertyTable *a4, int *a5, uint64_t a6, JSC::Structure *a7, uint64_t a8, double a9)
{
  unsigned __int8 v11;
  int64_t v13;
  unint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t SlowCase;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  JSC::VM *v40;
  unsigned __int8 *v41;
  int v43;
  uint64_t *v44;
  int v45;
  __int16 v46;
  JSC::Structure *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  char v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  BOOL v91;
  __int16 v92;
  unsigned __int8 *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unint64_t v142;
  JSC::VM *v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  JSC::Structure **v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  const JSC::PropertyTable *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::Structure *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  unsigned int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  BOOL v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  BOOL v212;
  uint64_t v213;
  __int16 v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  JSC::Heap *v230;
  int *v231;
  char v232;
  void (**v233)(JSC::StructureFireDetail *__hidden);
  uint64_t *v234;
  unsigned int *v235;
  int *v236;
  char *v237;
  int v238;
  unsigned int v239;
  uint64_t v240;

  v11 = a4;
  v13 = (int64_t)a2;
  v15 = (unint64_t *)((char *)a1 + 40136);
  v16 = *((unsigned __int16 *)a2 + 12);
  if (v16 == 65534)
  {
    v16 = -1;
LABEL_10:
    v19 = v16 + 1;
    goto LABEL_11;
  }
  if (v16 == 0xFFFF)
    v16 = a2[8][21];
  v17 = *((unsigned __int8 *)a2 + 14);
  if (v16 < v17)
    goto LABEL_10;
  if (v16 >= 64)
    v18 = v16 - 63;
  else
    v18 = 0;
  v19 = v18 + v17;
LABEL_11:
  if ((_DWORD)a6 == 1)
    v20 = 512;
  else
    v20 = 64;
  v21 = a3 >> 4;
  if (v19 > v20)
  {
    SlowCase = JSC::Structure::toDictionaryTransition((uint64_t)a1, (unint64_t)a2, 1, a7, (uint64_t)a5, a6, (uint64_t)a7, a8, a9);
    JSC::Structure::ensurePropertyTable((JSC::Structure *)SlowCase, a1, v161, v162, v163, v164, v165, v166);
    v174 = v173;
    v175 = (unsigned __int8 *)(SlowCase + 15);
    if (__ldaxr((unsigned __int8 *)(SlowCase + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v175))
    {
LABEL_272:
      ++*((_DWORD *)a1 + 229);
      if (v174)
      {
        *(_QWORD *)(SlowCase + 88) = v174;
        if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
      }
      else
      {
        *(_QWORD *)(SlowCase + 88) = 0;
      }
      if ((v11 & 4) != 0)
      {
        v177 = *(_DWORD *)(SlowCase + 16) & 0xFFFFFF9F | 0x40;
      }
      else
      {
        if (!a3 || (*(_BYTE *)(a3 + 16) & 0x20) == 0)
        {
LABEL_282:
          if ((v11 & 8) != 0)
          {
            v178 = *(_DWORD *)(SlowCase + 16);
            *(_DWORD *)(SlowCase + 16) = v178 | 0x40000000;
            if ((v11 & 0x72) != 0)
              *(_DWORD *)(SlowCase + 16) = v178 | 0xC0000000;
          }
          if (*(_QWORD *)(v15[227] + 16) == a3)
            *(_DWORD *)(SlowCase + 16) |= 0x20000000u;
          v179 = *(unsigned __int8 *)(SlowCase + 14);
          v180 = *(_QWORD *)(v174 + 32);
          if (v180 && (v227 = *(unsigned int *)(v180 + 12), (_DWORD)v227))
          {
            v184 = *(_DWORD *)(*(_QWORD *)v180 + 4 * v227 - 4);
            *(_DWORD *)(v180 + 12) = v227 - 1;
          }
          else
          {
            v181 = *(_DWORD *)(v174 + 24);
            v61 = __OFSUB__(v181, v179);
            v182 = v181 - v179;
            v82 = (v182 < 0) ^ v61;
            v183 = v182 + 64;
            if (v82)
              v184 = *(_DWORD *)(v174 + 24);
            else
              v184 = v183;
          }
          v185 = *(_DWORD *)(a3 + 16);
          v186 = v185;
          if ((v185 & 0x20) != 0)
            v186 = *(_DWORD *)(a3 + 32);
          v187 = *(_DWORD *)(SlowCase + 28) ^ (v186 >> 8);
          v188 = *(_DWORD *)(SlowCase + 32) | v21;
          *(_DWORD *)(SlowCase + 28) = v187;
          *(_DWORD *)(SlowCase + 32) = v188;
          v189 = *(_QWORD *)(v174 + 16);
          v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
          v191 = *(unsigned int *)(v174 + 8);
          if ((v189 & 1) != 0)
          {
            if ((v185 & 0x20) != 0)
              v185 = *(_DWORD *)(a3 + 32);
            v192 = *(_DWORD *)(v174 + 12);
            v193 = (v185 >> 8) & *(_QWORD *)&v192;
            v194 = *(unsigned __int8 *)(v190 + v193);
            if (*(_BYTE *)(v190 + v193))
            {
              v195 = 1;
              while (a3 != (*(_QWORD *)(v190 + v191 + 8 * (v194 - 1)) & 0xFFFFFFFFFFFFLL))
              {
                v193 = ((_DWORD)v193 + v195) & v192;
                v194 = *(unsigned __int8 *)(v190 + v193);
                ++v195;
                if (!*(_BYTE *)(v190 + v193))
                  goto LABEL_313;
              }
              goto LABEL_324;
            }
          }
          else
          {
            if ((v185 & 0x20) != 0)
              v185 = *(_DWORD *)(a3 + 32);
            v197 = *(_DWORD *)(v174 + 12);
            LODWORD(v193) = v197 & (v185 >> 8);
            v198 = *(_DWORD *)(v190 + 4 * v193);
            if (v198)
            {
              v199 = v190 + 4 * v191;
              v200 = 1;
              while (1)
              {
                v201 = (v198 - 1);
                if (*(_QWORD *)(v199 + 16 * v201) == a3)
                  break;
                LODWORD(v193) = (v193 + v200) & v197;
                v198 = *(_DWORD *)(v190 + 4 * v193);
                ++v200;
                if (!v198)
                  goto LABEL_313;
              }
              if (*(_DWORD *)(v199 + 16 * v201 + 8) != -1)
              {
LABEL_324:
                v207 = *(unsigned __int16 *)(SlowCase + 24);
                if (v207 == 65534)
                {
                  v208 = -1;
                }
                else if (v207 == 0xFFFF)
                {
                  v208 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
                }
                else
                {
                  v208 = *(unsigned __int16 *)(SlowCase + 24);
                }
                if (v184 <= v208)
                  v209 = v208;
                else
                  v209 = v184;
                if (v209 == -1)
                {
                  v214 = -2;
                }
                else
                {
                  if (v209 <= 65533)
                  {
                    *(_WORD *)(SlowCase + 24) = v209;
                    goto LABEL_333;
                  }
                  v229 = *(_QWORD *)(SlowCase + 64);
                  if (v207 == 0xFFFF)
                  {
                    *(_DWORD *)(v229 + 84) = v209;
LABEL_333:
                    v210 = __ldxr(v175);
                    if (v210 == 1)
                    {
                      if (!__stlxr(0, v175))
                        goto LABEL_338;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(SlowCase + 15), 0, (uint64_t)v167, v168, v169, v170, v171, v172);
LABEL_338:
                    v211 = *((_DWORD *)a1 + 229) - 1;
                    *((_DWORD *)a1 + 229) = v211;
                    if (*((unsigned __int8 *)a1 + 1198) | HIBYTE(dword_1ECF4C5CE))
                      v212 = v211 == 0;
                    else
                      v212 = 0;
                    if (v212)
                    {
                      *((_BYTE *)a1 + 1198) = 0;
                      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a1 + 192, 0);
                    }
                    *a5 = v184;
                    return SlowCase;
                  }
                  if (!v229 || *(_BYTE *)(v229 + 5) == 1)
                  {
                    v229 = JSC::StructureRareData::create(a1, (JSC::VM *)v229, v167, v168, v169, v170, v171, v172);
                    __dmb(0xAu);
                    *(_QWORD *)(SlowCase + 64) = v229;
                    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
                    {
                      JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
                      v229 = *(_QWORD *)(SlowCase + 64);
                    }
                  }
                  *(_DWORD *)(v229 + 84) = v209;
                  __dmb(0xAu);
                  v214 = -1;
                }
                *(_WORD *)(SlowCase + 24) = v214;
                goto LABEL_333;
              }
            }
          }
LABEL_313:
          *(_DWORD *)a3 += 2;
          v202 = *(_DWORD *)(v174 + 24);
          v204 = (v189 & 1) == 0 || v184 < 256;
          if (*(_DWORD *)(v174 + 28) + v202 >= v191 >> 1 || !v204)
          {
            JSC::PropertyTable::rehash((JSC::PropertyTable *)v174, a1, (v202 + 1), v184 < 256, v169, v170, v171, v172);
            v189 = *(_QWORD *)(v174 + 16);
            v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
            v217 = *(unsigned int *)(v174 + 8);
            v218 = *(_DWORD *)(a3 + 16);
            if ((v189 & 1) != 0)
            {
              if ((v218 & 0x20) != 0)
                v218 = *(_DWORD *)(a3 + 32);
              v219 = *(_DWORD *)(v174 + 12);
              v193 = (v218 >> 8) & *(_QWORD *)&v219;
              v220 = *(unsigned __int8 *)(v190 + v193);
              if (*(_BYTE *)(v190 + v193))
              {
                v221 = v190 + v217;
                v222 = 1;
                do
                {
                  if (a3 == (*(_QWORD *)(v221 + 8 * (v220 - 1)) & 0xFFFFFFFFFFFFLL))
                    break;
                  v193 = ((_DWORD)v193 + v222) & v219;
                  v220 = *(unsigned __int8 *)(v190 + v193);
                  ++v222;
                }
                while (*(_BYTE *)(v190 + v193));
              }
            }
            else
            {
              if ((v218 & 0x20) != 0)
                v218 = *(_DWORD *)(a3 + 32);
              v223 = *(_DWORD *)(v174 + 12);
              LODWORD(v193) = v223 & (v218 >> 8);
              v224 = *(_DWORD *)(v190 + 4 * v193);
              if (v224)
              {
                v225 = v190 + 4 * v217;
                v226 = 1;
                do
                {
                  if (*(_QWORD *)(v225 + 16 * (v224 - 1)) == a3)
                    break;
                  LODWORD(v193) = (v193 + v226) & v223;
                  v224 = *(_DWORD *)(v190 + 4 * v193);
                  ++v226;
                }
                while (v224);
              }
            }
          }
          v205 = *(_DWORD *)(v174 + 28) + *(_DWORD *)(v174 + 24);
          v206 = v205 + 1;
          if ((v189 & 1) != 0)
          {
            *(_BYTE *)(v190 + v193) = v206;
            *(_QWORD *)(v190 + *(unsigned int *)(v174 + 8) + 8 * v205) = a3 | ((unint64_t)(v11 | (v184 << 8)) << 48);
          }
          else
          {
            *(_DWORD *)(v190 + 4 * v193) = v206;
            v213 = v190 + 4 * *(unsigned int *)(v174 + 8) + 16 * v205;
            *(_QWORD *)v213 = a3;
            *(_DWORD *)(v213 + 8) = v184;
            *(_BYTE *)(v213 + 12) = v11;
          }
          ++*(_DWORD *)(v174 + 24);
          goto LABEL_324;
        }
        v177 = *(_DWORD *)(SlowCase + 16) & 0xFFFFFFDF;
      }
      *(_DWORD *)(SlowCase + 16) = v177;
      goto LABEL_282;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(SlowCase + 15);
    goto LABEL_272;
  }
  v230 = (JSC::VM *)((char *)a1 + 192);
  if ((*((_BYTE *)a2 + 19) & 1) == 0)
  {
    SlowCase = *v15;
    if (*v15 >= *((_QWORD *)a1 + 5018))
    {
      SlowCase = *((_QWORD *)a1 + 5019);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(a1, (JSC::VM *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a1 + 40112, v230, 128, 0, 0);
        goto LABEL_18;
      }
      v215 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a1 + 5020);
      *((_QWORD *)a1 + 5018) = SlowCase + HIDWORD(v215);
      *((_QWORD *)a1 + 5019) = SlowCase + (int)v215;
    }
    *v15 = SlowCase + 128;
LABEL_18:
    *(_DWORD *)SlowCase = 0;
    v23 = v15[170];
    v24 = *(_DWORD *)(v23 + 8);
    *(_DWORD *)SlowCase = v23 >> 4;
    *(_DWORD *)(SlowCase + 4) = v24;
    *(_DWORD *)(SlowCase + 8) = -1146241297;
    *(_BYTE *)(SlowCase + 14) = *(_BYTE *)(v13 + 14);
    *(_BYTE *)(SlowCase + 15) = 0;
    *(_DWORD *)(SlowCase + 16) = 0;
    *(_DWORD *)(SlowCase + 28) = *(_DWORD *)(v13 + 28);
    *(_DWORD *)(SlowCase + 32) = *(_DWORD *)(v13 + 32);
    *(_QWORD *)(SlowCase + 40) = 0;
    v25 = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(SlowCase + 56) = 0;
    *(_QWORD *)(SlowCase + 64) = 0;
    *(_QWORD *)(SlowCase + 48) = v25;
    *(_DWORD *)(SlowCase + 72) = 0;
    *(_DWORD *)(SlowCase + 76) = *(_DWORD *)(v13 + 76);
    *(_QWORD *)(SlowCase + 80) = 1;
    *(_QWORD *)(SlowCase + 88) = 0;
    *(_QWORD *)(SlowCase + 96) = 3;
    LOBYTE(v25) = *(_DWORD *)(v13 + 16);
    *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(v13 + 16) & 3;
    v26 = *(_DWORD *)(v13 + 16) & 0x800000 | v25 & 3;
    *(_DWORD *)(SlowCase + 16) = v26;
    LODWORD(v25) = *(_DWORD *)(v13 + 16) & 8 | v26;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = *(_DWORD *)(v13 + 16) & 0x10 | v25;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = *(_DWORD *)(v13 + 16) & 0x40 | v25;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = *(_DWORD *)(v13 + 16) & 0x40000000 | v25;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = *(_DWORD *)(v13 + 16) & 0x80000000 | v25;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = v25 & 0xDFFFFFFF | (((*(_DWORD *)(v13 + 16) >> 29) & 1) << 29);
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = v25 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(v13 + 16) >> 5) & 1));
    *(_BYTE *)(SlowCase + 20) = 0;
    *(_DWORD *)(SlowCase + 16) = v25 & 0xFFFC1FFF;
    LODWORD(v25) = *(_DWORD *)(v13 + 16) & 0x80000 | v25 & 0xFFF41FFF;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = v25 & 0xFFCC1FFF | *(_DWORD *)(v13 + 16) & 0x100000 | 0x200000;
    *(_DWORD *)(SlowCase + 16) = v25;
    LODWORD(v25) = v25 & 0xFFBFFFFF | *(_DWORD *)(v13 + 16) & 0x400000;
    *(_DWORD *)(SlowCase + 16) = v25;
    *(_DWORD *)(SlowCase + 16) = v25 & 0xE7FFFFFF | *(_DWORD *)(v13 + 16) & 0x8000000;
    *(_DWORD *)(SlowCase + 22) = -65538;
    LOWORD(v25) = *(_WORD *)(v13 + 12);
    *(_DWORD *)(SlowCase + 8) = (*(unsigned __int8 *)(v13 + 10) << 16) | (*(unsigned __int8 *)(v13 + 9) << 8) | *(unsigned __int8 *)(v13 + 8) | 0x1000000;
    *(_WORD *)(SlowCase + 12) = v25;
    *(_QWORD *)(SlowCase + 64) = v13;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
    v27 = *(_QWORD *)(v13 + 96);
    if ((v27 & 1) != 0)
    {
      v28 = *(_DWORD *)(v13 + 16);
    }
    else
    {
      v153 = *(unsigned __int8 *)(v27 + 5);
      v28 = *(_DWORD *)(v13 + 16);
      if (v153)
      {
        v28 |= 0x4000000u;
        *(_DWORD *)(v13 + 16) = v28;
      }
    }
    *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0xFBFFFFFF | (((v28 >> 26) & 1) << 26);
    v29 = *(_QWORD *)(v13 + 40);
    if (v29)
    {
      *(_QWORD *)(SlowCase + 40) = v29;
      if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
    }
    goto LABEL_25;
  }
  SlowCase = *((_QWORD *)a1 + 5028);
  if (SlowCase >= *((_QWORD *)a1 + 5029))
  {
    SlowCase = *((_QWORD *)a1 + 5030);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(a1, (JSC::VM *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a1 + 40200, v230, 128, 0, 0);
      goto LABEL_258;
    }
    v228 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a1 + 5031);
    *((_QWORD *)a1 + 5029) = SlowCase + HIDWORD(v228);
    *((_QWORD *)a1 + 5030) = SlowCase + (int)v228;
  }
  *((_QWORD *)a1 + 5028) = SlowCase + 128;
LABEL_258:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure((JSC::Structure *)SlowCase, a1, (JSC::Structure *)v13);
  v156 = *(unsigned int *)(v13 + 104);
  if ((_DWORD)v156)
    *(_DWORD *)(16 * v156) += 2;
  *(_DWORD *)(SlowCase + 104) = v156;
  *(_DWORD *)(SlowCase + 108) = *(_DWORD *)(v13 + 108) & 0xFFFFFFFE;
  *(_DWORD *)(SlowCase + 16) |= 0x1000000u;
LABEL_25:
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  v30 = *(_QWORD *)(v13 + 64);
  if (v30 && *(_BYTE *)(v30 + 5) != 1 && *(_QWORD *)(v30 + 72))
  {
    a2 = *(unsigned int ***)(SlowCase + 64);
    if (!a2 || *((_BYTE *)a2 + 5) == 1)
    {
      a2 = (unsigned int **)JSC::StructureRareData::create(a1, (JSC::VM *)a2, (JSC::Structure *)a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 64) = a2;
      if (a2)
      {
        if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
          a2 = *(unsigned int ***)(SlowCase + 64);
        }
      }
    }
    v137 = *(unsigned int **)(v30 + 72);
    if (v137)
    {
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 + 1, v137));
    }
    v139 = a2[9];
    a2[9] = v137;
    if (v139)
    {
      do
      {
        v140 = __ldaxr(v139);
        v141 = v140 - 1;
      }
      while (__stlxr(v141, v139));
      if (!v141)
      {
        atomic_store(1u, v139);
        if ((v139[2] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v139 + 2), a2, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
        WTF::fastFree((unint64_t)v139, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
      }
    }
  }
  if (a7)
  {
    if ((v13 & 8) != 0)
      v31 = (uint64_t *)(v13 - 16);
    else
      v31 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    v32 = *(_QWORD *)(v13 + 96);
    if ((v32 & 1) != 0)
    {
      if ((v32 & 6) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
    if (*(_BYTE *)(v32 + 4) == 1)
      JSC::WatchpointSet::fireAllSlow(v32, *v31, (uint64_t)a7);
  }
  else
  {
    if ((v13 & 8) != 0)
      v154 = (JSC::Structure **)(v13 - 16);
    else
      v154 = (JSC::Structure **)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    a2 = (unsigned int **)*v154;
    v233 = &off_1E35AF330;
    v234 = (uint64_t *)v13;
    v155 = *(_QWORD *)(v13 + 96);
    if ((v155 & 1) != 0)
    {
      if ((v155 & 6) != 0)
      {
LABEL_34:
        *(_QWORD *)(v13 + 96) = 5;
        __dmb(0xAu);
      }
    }
    else if (*(_BYTE *)(v155 + 4) == 1)
    {
      JSC::WatchpointSet::fireAllSlow(v155, (JSC::VM *)a2, &v233, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a9);
    }
  }
LABEL_35:
  v33 = *(_QWORD *)(v13 + 56);
  if (v33)
  {
    *(_QWORD *)(SlowCase + 56) = v33;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
  }
  else
  {
    *(_QWORD *)(SlowCase + 56) = 0;
  }
  v34 = (unsigned __int8 *)(SlowCase + 15);
  if (__ldaxr((unsigned __int8 *)(SlowCase + 15)))
  {
    __clrex();
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(SlowCase + 15);
    goto LABEL_40;
  }
  if (__stxr(1u, v34))
    goto LABEL_39;
LABEL_40:
  *(_DWORD *)(SlowCase + 16) |= 0x10000000u;
  v36 = __ldxr(v34);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, v34))
LABEL_44:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(SlowCase + 15), 0, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
  *(_BYTE *)(SlowCase + 8) = *(_BYTE *)(v13 + 8) & 0xEF;
  if (a3)
    *(_DWORD *)a3 += 2;
  v37 = *(unsigned int *)(SlowCase + 72);
  *(_DWORD *)(SlowCase + 72) = v21;
  if ((_DWORD)v37)
  {
    v38 = (WTF::StringImpl *)(16 * v37);
    v39 = *(_DWORD *)(16 * v37) - 2;
    if (v39)
    {
      *(_DWORD *)v38 = v39;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v38, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
  }
  *(_BYTE *)(SlowCase + 20) = v11;
  *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0xFFFC1FFF | 0x2000;
  v40 = *(JSC::VM **)(v13 + 88);
  v231 = a5;
  if (v40)
  {
    if ((*(_BYTE *)(v13 + 16) & 4) == 0)
    {
      v41 = (unsigned __int8 *)(v13 + 15);
      if (__ldaxr((unsigned __int8 *)(v13 + 15)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v41))
      {
LABEL_55:
        *(_QWORD *)(v13 + 88) = 0;
        v43 = __ldxr(v41);
        if (v43 == 1)
        {
          if (!__stlxr(0, v41))
            goto LABEL_60;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v13 + 15), 0, a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
LABEL_60:
        v44 = (uint64_t *)(SlowCase + 88);
        goto LABEL_61;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 15);
      goto LABEL_55;
    }
    v143 = (JSC::VM *)(*((_DWORD *)v40 + 6) + 1);
    if (v143 >= 8)
    {
      v145 = v143 | (v143 >> 1) | ((v143 | (v143 >> 1)) >> 2);
      v146 = v145 | (v145 >> 4) | ((v145 | (v145 >> 4)) >> 8);
      v144 = 2 * (v146 | HIWORD(v146)) + 2;
    }
    else
    {
      v144 = 16;
    }
    if (v144 == *((_DWORD *)v40 + 2))
      v142 = JSC::PropertyTable::clone(a1, v40, (const JSC::PropertyTable *)a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
    else
      v142 = JSC::PropertyTable::clone(a1, v143, v40, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
  }
  else
  {
    JSC::Structure::materializePropertyTable((JSC::Structure *)v13, a1, 0, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
  }
  v40 = (JSC::VM *)v142;
  v44 = (uint64_t *)(SlowCase + 88);
  if (v142)
  {
LABEL_61:
    *(_QWORD *)(SlowCase + 88) = v40;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
    goto LABEL_63;
  }
  *v44 = 0;
LABEL_63:
  v45 = *(unsigned __int16 *)(v13 + 24);
  v46 = -2;
  if (v45 != 65534)
  {
    if (v45 != 0xFFFF)
    {
LABEL_65:
      *(_WORD *)(SlowCase + 24) = v45;
      goto LABEL_66;
    }
    v45 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
    if (v45 != -1)
    {
      if (v45 <= 65533)
        goto LABEL_65;
      if (*(__int16 *)(SlowCase + 24) == -1)
      {
        *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84) = v45;
        goto LABEL_66;
      }
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)SlowCase, a1, (JSC::Structure *)a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8)+ 21) = v45;
      __dmb(0xAu);
      v46 = -1;
    }
  }
  *(_WORD *)(SlowCase + 24) = v46;
LABEL_66:
  JSC::Structure::ensurePropertyTable((JSC::Structure *)SlowCase, a1, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
  v54 = v53;
  if (__ldaxr(v34))
  {
    __clrex();
LABEL_68:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(SlowCase + 15);
    goto LABEL_69;
  }
  if (__stxr(1u, v34))
    goto LABEL_68;
LABEL_69:
  ++*((_DWORD *)a1 + 229);
  if (v54)
  {
    *(_QWORD *)(SlowCase + 88) = v54;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
  }
  else
  {
    *v44 = 0;
  }
  if ((v11 & 4) != 0)
  {
    v56 = *(_DWORD *)(SlowCase + 16) & 0xFFFFFF9F | 0x40;
    goto LABEL_77;
  }
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
    v56 = *(_DWORD *)(SlowCase + 16) & 0xFFFFFFDF;
LABEL_77:
    *(_DWORD *)(SlowCase + 16) = v56;
  }
  if ((v11 & 8) != 0)
  {
    v57 = *(_DWORD *)(SlowCase + 16);
    *(_DWORD *)(SlowCase + 16) = v57 | 0x40000000;
    if ((v11 & 0x72) != 0)
      *(_DWORD *)(SlowCase + 16) = v57 | 0xC0000000;
  }
  if (*(_QWORD *)(v15[227] + 16) == a3)
    *(_DWORD *)(SlowCase + 16) |= 0x20000000u;
  v58 = *(unsigned __int8 *)(SlowCase + 14);
  v59 = *(_QWORD *)(v54 + 32);
  if (v59 && (v196 = *(unsigned int *)(v59 + 12), (_DWORD)v196))
  {
    v64 = *(_DWORD *)(*(_QWORD *)v59 + 4 * v196 - 4);
    *(_DWORD *)(v59 + 12) = v196 - 1;
  }
  else
  {
    v60 = *(_DWORD *)(v54 + 24);
    v61 = __OFSUB__(v60, v58);
    v62 = v60 - v58;
    v82 = (v62 < 0) ^ v61;
    v63 = v62 + 64;
    if (v82)
      v64 = *(_DWORD *)(v54 + 24);
    else
      v64 = v63;
  }
  v65 = *(_DWORD *)(a3 + 16);
  v66 = v65;
  if ((v65 & 0x20) != 0)
    v66 = *(_DWORD *)(a3 + 32);
  v67 = *(_DWORD *)(SlowCase + 28) ^ (v66 >> 8);
  v68 = *(_DWORD *)(SlowCase + 32) | v21;
  *(_DWORD *)(SlowCase + 28) = v67;
  *(_DWORD *)(SlowCase + 32) = v68;
  v69 = *(_QWORD *)(v54 + 16);
  v70 = v69 & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned int *)(v54 + 8);
  if ((v69 & 1) != 0)
  {
    if ((v65 & 0x20) != 0)
      v65 = *(_DWORD *)(a3 + 32);
    v72 = *(_DWORD *)(v54 + 12);
    v73 = (v65 >> 8) & *(_QWORD *)&v72;
    v74 = *(unsigned __int8 *)(v70 + v73);
    if (*(_BYTE *)(v70 + v73))
    {
      v75 = 1;
      while (a3 != (*(_QWORD *)(v70 + v71 + 8 * (v74 - 1)) & 0xFFFFFFFFFFFFLL))
      {
        v73 = ((_DWORD)v73 + v75) & v72;
        v74 = *(unsigned __int8 *)(v70 + v73);
        ++v75;
        if (!*(_BYTE *)(v70 + v73))
          goto LABEL_111;
      }
      goto LABEL_122;
    }
LABEL_111:
    *(_DWORD *)a3 += 2;
    v81 = *(_DWORD *)(v54 + 24);
    v82 = (v69 & 1) == 0 || v64 < 256;
    if (v82)
      v83 = 1;
    else
      v83 = 0;
    if (*(_DWORD *)(v54 + 28) + v81 >= v71 >> 1 || (v83 & 1) == 0)
    {
      JSC::PropertyTable::rehash((JSC::PropertyTable *)v54, a1, (v81 + 1), v64 < 256, v49, v50, v51, v52);
      v69 = *(_QWORD *)(v54 + 16);
      v70 = v69 & 0xFFFFFFFFFFFFFFFELL;
      v147 = *(unsigned int *)(v54 + 8);
      v148 = *(_DWORD *)(a3 + 16);
      if ((v69 & 1) != 0)
      {
        if ((v148 & 0x20) != 0)
          v148 = *(_DWORD *)(a3 + 32);
        v149 = *(_DWORD *)(v54 + 12);
        v73 = (v148 >> 8) & *(_QWORD *)&v149;
        v150 = *(unsigned __int8 *)(v70 + v73);
        if (*(_BYTE *)(v70 + v73))
        {
          v151 = v70 + v147;
          v152 = 1;
          do
          {
            if (a3 == (*(_QWORD *)(v151 + 8 * (v150 - 1)) & 0xFFFFFFFFFFFFLL))
              break;
            v73 = ((_DWORD)v73 + v152) & v149;
            v150 = *(unsigned __int8 *)(v70 + v73);
            ++v152;
          }
          while (*(_BYTE *)(v70 + v73));
        }
      }
      else
      {
        if ((v148 & 0x20) != 0)
          v148 = *(_DWORD *)(a3 + 32);
        v157 = *(_DWORD *)(v54 + 12);
        LODWORD(v73) = v157 & (v148 >> 8);
        v158 = *(_DWORD *)(v70 + 4 * v73);
        if (v158)
        {
          v159 = v70 + 4 * v147;
          v160 = 1;
          do
          {
            if (*(_QWORD *)(v159 + 16 * (v158 - 1)) == a3)
              break;
            LODWORD(v73) = (v73 + v160) & v157;
            v158 = *(_DWORD *)(v70 + 4 * v73);
            ++v160;
          }
          while (v158);
        }
      }
    }
    v84 = *(_DWORD *)(v54 + 28) + *(_DWORD *)(v54 + 24);
    v85 = v84 + 1;
    if ((v69 & 1) != 0)
    {
      *(_BYTE *)(v70 + v73) = v85;
      *(_QWORD *)(v70 + *(unsigned int *)(v54 + 8) + 8 * v84) = a3 | ((unint64_t)(v11 | (v64 << 8)) << 48);
    }
    else
    {
      *(_DWORD *)(v70 + 4 * v73) = v85;
      v113 = v70 + 4 * *(unsigned int *)(v54 + 8) + 16 * v84;
      *(_QWORD *)v113 = a3;
      *(_DWORD *)(v113 + 8) = v64;
      *(_BYTE *)(v113 + 12) = v11;
    }
    ++*(_DWORD *)(v54 + 24);
    goto LABEL_122;
  }
  if ((v65 & 0x20) != 0)
    v65 = *(_DWORD *)(a3 + 32);
  v76 = *(_DWORD *)(v54 + 12);
  LODWORD(v73) = v76 & (v65 >> 8);
  v77 = *(_DWORD *)(v70 + 4 * v73);
  if (!v77)
    goto LABEL_111;
  v78 = v70 + 4 * v71;
  v79 = 1;
  while (1)
  {
    v80 = (v77 - 1);
    if (*(_QWORD *)(v78 + 16 * v80) == a3)
      break;
    LODWORD(v73) = (v73 + v79) & v76;
    v77 = *(_DWORD *)(v70 + 4 * v73);
    ++v79;
    if (!v77)
      goto LABEL_111;
  }
  if (*(_DWORD *)(v78 + 16 * v80 + 8) == -1)
    goto LABEL_111;
LABEL_122:
  v86 = *(unsigned __int16 *)(SlowCase + 24);
  if (v86 == 65534)
  {
    v87 = -1;
  }
  else if (v86 == 0xFFFF)
  {
    v87 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
  }
  else
  {
    v87 = *(unsigned __int16 *)(SlowCase + 24);
  }
  if (v64 <= v87)
    v88 = v87;
  else
    v88 = v64;
  if (v88 == -1)
  {
    v114 = -2;
LABEL_177:
    *(_WORD *)(SlowCase + 24) = v114;
    goto LABEL_131;
  }
  if (v88 <= 65533)
  {
    *(_WORD *)(SlowCase + 24) = v88;
    goto LABEL_131;
  }
  v216 = *(_QWORD *)(SlowCase + 64);
  if (v86 != 0xFFFF)
  {
    if (!v216 || *(_BYTE *)(v216 + 5) == 1)
    {
      v216 = JSC::StructureRareData::create(a1, (JSC::VM *)v216, v47, v48, v49, v50, v51, v52);
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 64) = v216;
      if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v230, SlowCase);
        v216 = *(_QWORD *)(SlowCase + 64);
      }
    }
    *(_DWORD *)(v216 + 84) = v88;
    __dmb(0xAu);
    v114 = -1;
    goto LABEL_177;
  }
  *(_DWORD *)(v216 + 84) = v88;
LABEL_131:
  v89 = __ldxr(v34);
  if (v89 != 1)
  {
    __clrex();
    goto LABEL_135;
  }
  if (__stlxr(0, v34))
LABEL_135:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(SlowCase + 15), 0, (uint64_t)v47, v48, v49, v50, v51, v52);
  v90 = *((_DWORD *)a1 + 229) - 1;
  *((_DWORD *)a1 + 229) = v90;
  if (*((unsigned __int8 *)a1 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v91 = v90 == 0;
  else
    v91 = 0;
  if (v91)
  {
    *((_BYTE *)a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v230, 0);
  }
  *v231 = v64;
  if (v64 == -1)
  {
    v92 = -2;
LABEL_143:
    *(_WORD *)(SlowCase + 22) = v92;
    goto LABEL_144;
  }
  if (v64 > 65533)
  {
    if (*(__int16 *)(SlowCase + 22) != -1)
    {
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)SlowCase, a1, v47, v48, v49, v50, v51, v52) + 22) = v64;
      __dmb(0xAu);
      v92 = -1;
      goto LABEL_143;
    }
    *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 88) = v64;
  }
  else
  {
    *(_WORD *)(SlowCase + 22) = v64;
  }
LABEL_144:
  __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) &= ~0x10000000u;
  if ((*(_BYTE *)(v13 + 19) & 8) != 0)
    goto LABEL_154;
  v93 = (unsigned __int8 *)(v13 + 15);
  if (__ldaxr((unsigned __int8 *)(v13 + 15)))
  {
    __clrex();
LABEL_147:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 15);
    goto LABEL_148;
  }
  if (__stxr(1u, v93))
    goto LABEL_147;
LABEL_148:
  ++*((_DWORD *)a1 + 229);
  JSC::StructureTransitionTable::add((JSC::StructureTransitionTable *)(v13 + 80), a1, (JSC::JSCell *)v13, SlowCase, v49, v50, v51, v52);
  v101 = __ldxr(v93);
  if (v101 == 1)
  {
    if (!__stlxr(0, v93))
      goto LABEL_153;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v13 + 15), 0, v95, v96, v97, v98, v99, v100);
LABEL_153:
  v102 = *((_DWORD *)a1 + 229) - 1;
  *((_DWORD *)a1 + 229) = v102;
  if (*((unsigned __int8 *)a1 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v102)
  {
    *((_BYTE *)a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v230, 0);
  }
LABEL_154:
  if (!*v44)
    goto LABEL_188;
  v240 = *v44;
  v103 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v103)
    v103 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v103 + 5) & 8) != 0)
    goto LABEL_188;
  v104 = *(_DWORD *)(v240 + 24);
  v105 = *(_QWORD *)(v240 + 32);
  if (v105)
    LODWORD(v105) = *(_DWORD *)(v105 + 12);
  v106 = v105 + v104;
  v107 = *(unsigned __int8 *)(SlowCase + 14);
  v108 = v105 + v104 - v107;
  if (v106 < v107)
    v108 = 0;
  v238 = v108;
  v239 = v106;
  v233 = (void (**)(JSC::StructureFireDetail *__hidden))SlowCase;
  v234 = &v240;
  v235 = &v239;
  v236 = &v238;
  v237 = &v232;
  v109 = *(unsigned __int16 *)(SlowCase + 24);
  if (v109 == 65534)
  {
    v110 = -1;
  }
  else
  {
    if (v109 == 0xFFFF)
      v110 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
    else
      v110 = *(unsigned __int16 *)(SlowCase + 24);
    if (v110 >= (int)v107)
    {
      if (v110 >= 64)
        v111 = (v110 - 63);
      else
        v111 = 0;
      v112 = v111 + v107;
      goto LABEL_180;
    }
  }
  v112 = v110 + 1;
LABEL_180:
  if (v112 != v106)
    goto LABEL_385;
  if (v109 == 65534)
    goto LABEL_186;
  if (v109 == 0xFFFF)
    v109 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
  v61 = __OFSUB__(v109, 63);
  v115 = v109 - 63;
  if ((v115 < 0) ^ v61 | (v115 == 0))
LABEL_186:
    v115 = 0;
  if (v115 != v108)
    goto LABEL_386;
LABEL_188:
  v116 = *(_QWORD *)(v13 + 88);
  if (v116)
  {
    v240 = *(_QWORD *)(v13 + 88);
    v117 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v117)
      v117 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v117 + 5) & 8) == 0)
    {
      v118 = *(_DWORD *)(v116 + 24);
      v119 = *(_QWORD *)(v116 + 32);
      if (v119)
        LODWORD(v119) = *(_DWORD *)(v119 + 12);
      v120 = v119 + v118;
      v121 = *(unsigned __int8 *)(v13 + 14);
      v122 = v119 + v118 - v121;
      if (v120 < v121)
        v122 = 0;
      v238 = v122;
      v239 = v120;
      v233 = (void (**)(JSC::StructureFireDetail *__hidden))v13;
      v234 = &v240;
      v235 = &v239;
      v236 = &v238;
      v237 = &v232;
      v123 = *(unsigned __int16 *)(v13 + 24);
      if (v123 == 65534)
      {
        v124 = -1;
      }
      else
      {
        if (v123 == 0xFFFF)
          v124 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
        else
          v124 = *(unsigned __int16 *)(v13 + 24);
        if (v124 >= (int)v121)
        {
          if (v124 >= 64)
            v125 = (v124 - 63);
          else
            v125 = 0;
          v126 = v125 + v121;
LABEL_206:
          if (v126 == v120)
          {
            if (v123 == 65534)
              goto LABEL_212;
            if (v123 == 0xFFFF)
              v123 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
            v61 = __OFSUB__(v123, 63);
            v127 = v123 - 63;
            if ((v127 < 0) ^ v61 | (v127 == 0))
LABEL_212:
              v127 = 0;
            if (v127 == v122)
              return SlowCase;
LABEL_386:
            JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v233, "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset");
          }
LABEL_385:
          JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v233, "numberOfSlotsForMaxOffset doesn't match totalSize");
        }
      }
      v126 = v124 + 1;
      goto LABEL_206;
    }
  }
  return SlowCase;
}

unint64_t JSC::Structure::toCacheableDictionaryTransition(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, JSC::DeferredStructureTransitionWatchpointFire *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  return JSC::Structure::toDictionaryTransition((uint64_t)this, (unint64_t)a2, 1, a3, a5, a6, a7, a8, a9);
}

unint64_t JSC::Structure::create(JSC::Structure *this, unint64_t a2, JSC::Structure *a3, JSC::DeferredStructureTransitionWatchpointFire *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  char *v13;
  unint64_t SlowCase;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  JSC::VM *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD v39[2];

  v12 = (unint64_t *)((char *)this + 40136);
  v13 = (char *)this + 192;
  if ((*(_BYTE *)(a2 + 19) & 1) != 0)
  {
    SlowCase = *((_QWORD *)this + 5028);
    if (SlowCase >= *((_QWORD *)this + 5029))
    {
      SlowCase = *((_QWORD *)this + 5030);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)this + 40200, v13, 128, 0, 0);
      }
      else
      {
        v36 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5031);
        *((_QWORD *)this + 5029) = SlowCase + HIDWORD(v36);
        *((_QWORD *)this + 5030) = SlowCase + (int)v36;
        *((_QWORD *)this + 5028) = SlowCase + 128;
      }
    }
    else
    {
      *((_QWORD *)this + 5028) = SlowCase + 128;
    }
    *(_DWORD *)SlowCase = 0;
    JSC::BrandedStructure::BrandedStructure((JSC::Structure *)SlowCase, this, (unsigned int *)a2);
    goto LABEL_11;
  }
  SlowCase = *v12;
  if (*v12 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      v37 = (unint64_t *)((char *)this + 40136);
      JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v38 = JSC::LocalAllocator::allocateSlowCase((char *)this + 40112, v13, 128, 0, 0);
      v12 = v37;
      SlowCase = v38;
      goto LABEL_4;
    }
    v35 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v35);
    *((_QWORD *)this + 5019) = SlowCase + (int)v35;
  }
  *v12 = SlowCase + 128;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  v15 = v12[170];
  v16 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)SlowCase = v15 >> 4;
  *(_DWORD *)(SlowCase + 4) = v16;
  *(_DWORD *)(SlowCase + 8) = -1146241297;
  *(_BYTE *)(SlowCase + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(SlowCase + 15) = 0;
  *(_DWORD *)(SlowCase + 16) = 0;
  *(_DWORD *)(SlowCase + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(SlowCase + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(SlowCase + 40) = 0;
  v17 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(SlowCase + 56) = 0;
  *(_QWORD *)(SlowCase + 64) = 0;
  *(_QWORD *)(SlowCase + 48) = v17;
  *(_DWORD *)(SlowCase + 72) = 0;
  *(_DWORD *)(SlowCase + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(SlowCase + 80) = 1;
  *(_QWORD *)(SlowCase + 88) = 0;
  *(_QWORD *)(SlowCase + 96) = 3;
  LOBYTE(v17) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(a2 + 16) & 3;
  v18 = *(_DWORD *)(a2 + 16) & 0x800000 | v17 & 3;
  *(_DWORD *)(SlowCase + 16) = v18;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 8 | v18;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 0x10 | v17;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 0x40 | v17;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 0x40000000 | v17;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 0x80000000 | v17;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = v17 & 0xDFFFFFFF | (((*(_DWORD *)(a2 + 16) >> 29) & 1) << 29);
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = v17 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a2 + 16) >> 5) & 1));
  *(_BYTE *)(SlowCase + 20) = 0;
  *(_DWORD *)(SlowCase + 16) = v17 & 0xFFFC1FFF;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 0x80000 | v17 & 0xFFF41FFF;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 16) & 0x100000 | v17 & 0xFFCC1FFF | 0x200000;
  *(_DWORD *)(SlowCase + 16) = v17;
  LODWORD(v17) = v17 & 0xFFBFFFFF | *(_DWORD *)(a2 + 16) & 0x400000;
  *(_DWORD *)(SlowCase + 16) = v17;
  *(_DWORD *)(SlowCase + 16) = v17 & 0xE7FFFFFF | *(_DWORD *)(a2 + 16) & 0x8000000;
  *(_DWORD *)(SlowCase + 22) = -65538;
  LOWORD(v17) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(SlowCase + 8) = (*(unsigned __int8 *)(a2 + 10) << 16) | (*(unsigned __int8 *)(a2 + 9) << 8) | *(unsigned __int8 *)(a2 + 8) | 0x1000000;
  *(_WORD *)(SlowCase + 12) = v17;
  *(_QWORD *)(SlowCase + 64) = a2;
  if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v13, SlowCase);
  v19 = *(_QWORD *)(a2 + 96);
  if ((v19 & 1) != 0)
  {
    v20 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v32 = *(unsigned __int8 *)(v19 + 5);
    v20 = *(_DWORD *)(a2 + 16);
    if (v32)
    {
      v20 |= 0x4000000u;
      *(_DWORD *)(a2 + 16) = v20;
    }
  }
  *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0xFBFFFFFF | (((v20 >> 26) & 1) << 26);
  v21 = *(_QWORD *)(a2 + 40);
  if (v21)
  {
    *(_QWORD *)(SlowCase + 40) = v21;
    if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v13, SlowCase);
  }
LABEL_11:
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v22 = *(_QWORD *)(a2 + 64);
  if (v22 && *(_BYTE *)(v22 + 5) != 1 && *(_QWORD *)(v22 + 72))
  {
    v26 = *(_QWORD *)(SlowCase + 64);
    if (!v26 || *(_BYTE *)(v26 + 5) == 1)
    {
      v26 = JSC::StructureRareData::create(this, (JSC::VM *)v26, a3, (uint64_t)a4, a5, a6, a7, a8);
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 64) = v26;
      if (v26)
      {
        if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(SlowCase + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v13, SlowCase);
          v26 = *(_QWORD *)(SlowCase + 64);
        }
      }
    }
    v27 = *(unsigned int **)(v22 + 72);
    if (v27)
    {
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
    v29 = *(unsigned int **)(v26 + 72);
    *(_QWORD *)(v26 + 72) = v27;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        if ((v29[2] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v29 + 2), (void *)v26, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree((unint64_t)v29, (void *)v26, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  v23 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a2 & 8) != 0)
    v23 = (uint64_t *)(a2 - 16);
  if (a3)
  {
    v24 = *(_QWORD *)(a2 + 96);
    if ((v24 & 1) != 0)
    {
      if ((v24 & 6) != 0)
      {
LABEL_20:
        *(_QWORD *)(a2 + 96) = 5;
        __dmb(0xAu);
      }
    }
    else if (*(_BYTE *)(v24 + 4) == 1)
    {
      JSC::WatchpointSet::fireAllSlow(v24, *v23, (uint64_t)a3);
    }
  }
  else
  {
    v33 = (JSC::VM *)*v23;
    v39[0] = &off_1E35AF330;
    v39[1] = a2;
    v34 = *(_QWORD *)(a2 + 96);
    if ((v34 & 1) != 0)
    {
      if ((v34 & 6) == 0)
        return SlowCase;
      goto LABEL_20;
    }
    if (*(_BYTE *)(v34 + 4) == 1)
      JSC::WatchpointSet::fireAllSlow(v34, v33, v39, (uint64_t)a4, a5, a6, a7, a8, a9);
  }
  return SlowCase;
}

void JSC::Structure::takePropertyTableOrCloneIfPinned(JSC::Structure *this, JSC::VM *a2, const JSC::PropertyTable *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unsigned __int8 *v10;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v9 = (JSC::VM *)*((_QWORD *)this + 11);
  if (!v9)
  {
    JSC::Structure::materializePropertyTable(this, a2, 0, a4, a5, a6, a7, a8);
    return;
  }
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
    v10 = (unsigned __int8 *)this + 15;
    if (__ldaxr((unsigned __int8 *)this + 15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_6:
      *((_QWORD *)this + 11) = 0;
      v12 = __ldxr(v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, v10))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
    goto LABEL_6;
  }
  v13 = *((_DWORD *)v9 + 6) + 1;
  if (v13 >= 8)
  {
    v15 = v13 | (v13 >> 1) | ((v13 | (v13 >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v14 = 2 * (v16 | HIWORD(v16)) + 2;
  }
  else
  {
    v14 = 16;
  }
  if (v14 == *((_DWORD *)v9 + 2))
    JSC::PropertyTable::clone(a2, v9, a3, (uint64_t)a4, a5, a6, a7, a8);
  else
    JSC::PropertyTable::clone(a2, (JSC::VM *)(*((_DWORD *)v9 + 6) + 1), v9, a4, a5, a6, a7, a8);
}

unint64_t JSC::Structure::removeNewPropertyTransition(JSC::Structure *this, JSC::VM *a2, unint64_t a3, JSC::DeferredStructureTransitionWatchpointFire *a4, JSC::Structure *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v13;
  JSC::VM *v14;
  int v16;
  unint64_t v17;
  const JSC::PropertyTable *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  WTF::AtomStringImpl *v24;
  const JSC::PropertyTable *v25;
  const JSC::PropertyTable *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  JSC::Structure *v39;
  const JSC::PropertyTable *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  int v47;
  JSC::Structure *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  const char *v99;
  char v100;
  JSC::VM *v101;
  uint64_t *v102;
  unsigned int *v103;
  int *v104;
  char *v105;
  int v106;
  unsigned int v107;
  uint64_t v108;

  if (a2)
  {
    v13 = 0;
    v14 = a2;
    do
    {
      v14 = (JSC::VM *)*((_QWORD *)v14 + 8);
      if (!v14)
        goto LABEL_14;
      if (*((_BYTE *)v14 + 5) != 1)
      {
        v16 = *((_DWORD *)v14 + 20);
        if (v16)
          v14 = (JSC::VM *)(16 * (v16 & 0xFFFFFFFE));
        else
          v14 = 0;
      }
      if (!v14)
        break;
    }
    while (v13++ < 0x3F);
    if (v14)
    {
      v17 = JSC::Structure::toDictionaryTransition((uint64_t)this, (unint64_t)a2, 2, a5, (uint64_t)a5, a6, a7, a8, a9);
      *(_DWORD *)a4 = JSC::Structure::remove(v17, (uint64_t)this, a3, v18, v19, v20, v21, v22);
      return v17;
    }
  }
LABEL_14:
  v23 = JSC::Structure::create(this, (unint64_t)a2, a5, a4, (uint64_t)a5, a6, a7, a8, a9);
  v17 = v23;
  v31 = *((_QWORD *)a2 + 7);
  if (v31)
  {
    *(_QWORD *)(v23 + 56) = v31;
    if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v23 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, v23);
  }
  else
  {
    *(_QWORD *)(v23 + 56) = 0;
  }
  v32 = (unsigned __int8 *)(v17 + 15);
  if (__ldaxr((unsigned __int8 *)(v17 + 15)))
  {
    __clrex();
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 15);
    goto LABEL_19;
  }
  if (__stxr(1u, v32))
    goto LABEL_18;
LABEL_19:
  *(_DWORD *)(v17 + 16) |= 0x10000000u;
  v34 = __ldxr(v32);
  if (v34 == 1)
  {
    if (!__stlxr(0, v32))
      goto LABEL_24;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v17 + 15), 0, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
LABEL_24:
  *(_BYTE *)(v17 + 8) = *((_BYTE *)a2 + 8) & 0xEF;
  if (a3)
    *(_DWORD *)a3 += 2;
  v35 = *(unsigned int *)(v17 + 72);
  *(_DWORD *)(v17 + 72) = a3 >> 4;
  if ((_DWORD)v35)
  {
    v36 = (WTF::StringImpl *)(16 * v35);
    v37 = *(_DWORD *)(16 * v35) - 2;
    if (v37)
    {
      *(_DWORD *)v36 = v37;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v36, v24, (uint64_t)v25, (uint64_t)v26, v27, v28, v29, v30);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  *(_DWORD *)(v17 + 16) = *(_DWORD *)(v17 + 16) & 0xFFFC1FFF | 0x4000;
  JSC::Structure::takePropertyTableOrCloneIfPinned(a2, this, v25, v26, v27, v28, v29, v30);
  if (v38)
  {
    *(_QWORD *)(v17 + 88) = v38;
    if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v17 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, v17);
  }
  else
  {
    *(_QWORD *)(v17 + 88) = 0;
  }
  v45 = *((unsigned __int16 *)a2 + 12);
  v46 = -2;
  if (v45 != 65534)
  {
    if (v45 != 0xFFFF)
    {
LABEL_34:
      *(_WORD *)(v17 + 24) = v45;
      goto LABEL_35;
    }
    v45 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 84);
    if (v45 != -1)
    {
      if (v45 <= 65533)
        goto LABEL_34;
      if (*(__int16 *)(v17 + 24) == -1)
      {
        *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84) = v45;
        goto LABEL_35;
      }
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v17, this, v39, (uint64_t)v40, v41, v42, v43, v44) + 21) = v45;
      __dmb(0xAu);
      v46 = -1;
    }
  }
  *(_WORD *)(v17 + 24) = v46;
LABEL_35:
  v47 = JSC::Structure::remove(v17, (uint64_t)this, a3, v40, v41, v42, v43, v44);
  *(_DWORD *)a4 = v47;
  if (v47 == -1)
  {
    v54 = -2;
LABEL_37:
    *(_WORD *)(v17 + 22) = v54;
    goto LABEL_38;
  }
  if (v47 > 65533)
  {
    if (*(__int16 *)(v17 + 22) != -1)
    {
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v17, this, v48, v49, v50, v51, v52, v53) + 22) = v47;
      __dmb(0xAu);
      v54 = -1;
      goto LABEL_37;
    }
    *(_DWORD *)(*(_QWORD *)(v17 + 64) + 88) = v47;
  }
  else
  {
    *(_WORD *)(v17 + 22) = v47;
  }
LABEL_38:
  __dmb(0xAu);
  *(_DWORD *)(v17 + 16) &= ~0x10000000u;
  if ((*((_BYTE *)a2 + 19) & 8) != 0)
    goto LABEL_39;
  v89 = (unsigned __int8 *)a2 + 15;
  if (__ldaxr((unsigned __int8 *)a2 + 15))
  {
    __clrex();
LABEL_102:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 15);
    goto LABEL_103;
  }
  if (__stxr(1u, v89))
    goto LABEL_102;
LABEL_103:
  ++*((_DWORD *)this + 229);
  JSC::StructureTransitionTable::add((JSC::VM *)((char *)a2 + 80), this, a2, v17, v50, v51, v52, v53);
  v97 = __ldxr(v89);
  if (v97 == 1)
  {
    if (!__stlxr(0, v89))
      goto LABEL_108;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 15, 0, v91, v92, v93, v94, v95, v96);
LABEL_108:
  v98 = *((_DWORD *)this + 229) - 1;
  *((_DWORD *)this + 229) = v98;
  if (*((unsigned __int8 *)this + 1198) | HIBYTE(dword_1ECF4C5CE) && !v98)
  {
    *((_BYTE *)this + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)this + 192, 0);
  }
LABEL_39:
  v55 = *(_QWORD *)(v17 + 88);
  if (!v55)
    goto LABEL_69;
  v108 = *(_QWORD *)(v17 + 88);
  v56 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v56)
    v56 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v56 + 5) & 8) != 0)
    goto LABEL_69;
  v57 = *(_DWORD *)(v55 + 24);
  v58 = *(_QWORD *)(v55 + 32);
  if (v58)
    LODWORD(v58) = *(_DWORD *)(v58 + 12);
  v59 = v58 + v57;
  v60 = *(unsigned __int8 *)(v17 + 14);
  v61 = v58 + v57 - v60;
  if (v59 < v60)
    v61 = 0;
  v106 = v61;
  v107 = v59;
  v101 = (JSC::VM *)v17;
  v102 = &v108;
  v103 = &v107;
  v104 = &v106;
  v105 = &v100;
  v62 = *(unsigned __int16 *)(v17 + 24);
  if (v62 == 65534)
  {
    v63 = -1;
  }
  else
  {
    if (v62 == 0xFFFF)
      v63 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84);
    else
      v63 = *(unsigned __int16 *)(v17 + 24);
    if (v63 >= (int)v60)
    {
      if (v63 >= 64)
        v64 = (v63 - 63);
      else
        v64 = 0;
      v65 = v64 + v60;
      goto LABEL_61;
    }
  }
  v65 = v63 + 1;
LABEL_61:
  if (v65 != v59)
    goto LABEL_119;
  if (v62 == 65534)
    goto LABEL_67;
  if (v62 == 0xFFFF)
    v62 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84);
  v66 = __OFSUB__(v62, 63);
  v67 = v62 - 63;
  if ((v67 < 0) ^ v66 | (v67 == 0))
LABEL_67:
    v67 = 0;
  if (v67 != v61)
  {
LABEL_120:
    v99 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
LABEL_121:
    JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v101, v99);
  }
LABEL_69:
  v68 = *((_QWORD *)a2 + 11);
  if (v68)
  {
    v108 = *((_QWORD *)a2 + 11);
    v69 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v69)
      v69 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v69 + 5) & 8) == 0)
    {
      v70 = *(_DWORD *)(v68 + 24);
      v71 = *(_QWORD *)(v68 + 32);
      if (v71)
        LODWORD(v71) = *(_DWORD *)(v71 + 12);
      v72 = v71 + v70;
      v73 = *((unsigned __int8 *)a2 + 14);
      v74 = v71 + v70 - v73;
      if (v72 < v73)
        v74 = 0;
      v106 = v74;
      v107 = v72;
      v101 = a2;
      v102 = &v108;
      v103 = &v107;
      v104 = &v106;
      v105 = &v100;
      v75 = *((unsigned __int16 *)a2 + 12);
      if (v75 == 65534)
      {
        v76 = -1;
      }
      else
      {
        if (v75 == 0xFFFF)
          v76 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 84);
        else
          v76 = *((unsigned __int16 *)a2 + 12);
        if (v76 >= (int)v73)
        {
          if (v76 >= 64)
            v77 = (v76 - 63);
          else
            v77 = 0;
          v78 = v77 + v73;
LABEL_87:
          if (v78 == v72)
          {
            if (v75 == 65534)
              goto LABEL_93;
            if (v75 == 0xFFFF)
              v75 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 84);
            v66 = __OFSUB__(v75, 63);
            v79 = v75 - 63;
            if ((v79 < 0) ^ v66 | (v79 == 0))
LABEL_93:
              v79 = 0;
            if (v79 == v74)
              return v17;
            goto LABEL_120;
          }
LABEL_119:
          v99 = "numberOfSlotsForMaxOffset doesn't match totalSize";
          goto LABEL_121;
        }
      }
      v78 = v76 + 1;
      goto LABEL_87;
    }
  }
  return v17;
}

unint64_t JSC::StructureTransitionTable::get(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = *a1;
  if ((*a1 & 1) == 0)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (a3 << 48) | (a4 << 56) | a2;
      v7 = *(_DWORD *)(v5 - 8);
      v8 = (v6 + ~(a2 << 32)) ^ ((unint64_t)(v6 + ~(a2 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(_QWORD *)(v5 + 16 * v11);
      if (v12 == v6)
      {
LABEL_7:
        v14 = *(_BYTE **)(v5 + 16 * v11 + 8);
        if (v14 && (v14[8] & 3) == 0)
          return *(_QWORD *)v14;
      }
      else
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v7;
          v12 = *(_QWORD *)(v5 + 16 * v11);
          ++v13;
          if (v12 == v6)
            goto LABEL_7;
        }
      }
    }
    return 0;
  }
  v16 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (!v16)
    return 0;
  v17 = (*(_DWORD *)(v16 + 16) >> 13) & 0x1F;
  if ((_DWORD)v17 == 16)
  {
    v18 = *(_QWORD *)(v16 + 48);
    v19 = v18 | 0x1000000000000000;
    v20 = v18 == 2;
    v21 = 0x1000000000000000;
    if (!v20)
      v21 = v19;
  }
  else
  {
    v21 = (v17 << 56) | (16 * *(unsigned int *)(v16 + 72));
  }
  if ((v21 | ((unint64_t)*(unsigned __int8 *)(v16 + 20) << 48)) == ((a3 << 48) | (a4 << 56) | a2))
    return v16;
  else
    return 0;
}

unint64_t JSC::Structure::getConcurrently(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  int v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  int v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  _BYTE v56[64];

  v53 = a1;
  v54 = (WTF *)v56;
  v55 = 8;
  if (!a1)
    goto LABEL_19;
  while (1)
  {
    v10 = (unsigned __int8 *)(a1 + 15);
    if (__ldaxr(v10))
    {
      __clrex();
LABEL_4:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
      goto LABEL_5;
    }
    if (__stxr(1u, v10))
      goto LABEL_4;
LABEL_5:
    v12 = v53;
    v13 = *(_QWORD *)(v53 + 88);
    v14 = HIDWORD(v55);
    if (v13)
      break;
    if (HIDWORD(v55) == (_DWORD)v55)
    {
      v50 = (uint64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, HIDWORD(v55) + 1, (unint64_t)&v53);
      v14 = HIDWORD(v55);
      v15 = (uint64_t *)((char *)v54 + 8 * HIDWORD(v55));
      v12 = *v50;
    }
    else
    {
      v15 = (uint64_t *)((char *)v54 + 8 * HIDWORD(v55));
    }
    *v15 = v12;
    HIDWORD(v55) = v14 + 1;
    v16 = (unsigned __int8 *)(v53 + 15);
    v17 = __ldxr((unsigned __int8 *)(v53 + 15));
    if (v17 != 1)
    {
      __clrex();
LABEL_14:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_15;
    }
    if (__stlxr(0, v16))
      goto LABEL_14;
LABEL_15:
    a1 = *(_QWORD *)(v53 + 64);
    if (!a1)
      goto LABEL_66;
    if (*(_BYTE *)(a1 + 5) != 1)
    {
      v43 = *(_DWORD *)(a1 + 80);
      if (!v43)
      {
LABEL_66:
        v53 = 0;
LABEL_18:
        if (!HIDWORD(v55))
        {
LABEL_19:
          v18 = 0xFFFFFFFFLL;
          goto LABEL_20;
        }
        v32 = v54;
        v33 = (WTF *)((char *)v54 + 8 * HIDWORD(v55));
        while (1)
        {
LABEL_37:
          v34 = *(_QWORD *)v32;
          v35 = *(unsigned int *)(*(_QWORD *)v32 + 72);
          if (!(_DWORD)v35)
            goto LABEL_41;
          v36 = (*(_DWORD *)(v34 + 16) >> 13) & 0x1F;
          if (v36 != 2)
            break;
          v32 = (WTF *)((char *)v32 + 8);
          v18 = 0xFFFFFFFFLL;
          if (a2 == (_DWORD *)(16 * v35) || v32 == v33)
            goto LABEL_20;
        }
        if (v36 != 17 && a2 == (_DWORD *)(16 * v35))
        {
          v12 = 0;
          goto LABEL_69;
        }
LABEL_41:
        v32 = (WTF *)((char *)v32 + 8);
        v18 = 0xFFFFFFFFLL;
        if (v32 == v33)
          goto LABEL_20;
        goto LABEL_37;
      }
      a1 = 16 * (v43 & 0xFFFFFFFE);
    }
    v53 = a1;
    if (!a1)
      goto LABEL_18;
  }
  if (!HIDWORD(v55))
  {
LABEL_27:
    if (*(_DWORD *)(v13 + 24))
    {
      v22 = *(_QWORD *)(v13 + 16);
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(unsigned int *)(v13 + 8);
      v25 = a2[4];
      if ((v22 & 1) != 0)
      {
        if ((v25 & 0x20) != 0)
          v25 = a2[8];
        v26 = *(_DWORD *)(v13 + 12);
        v27 = (v25 >> 8) & *(_QWORD *)&v26;
        v28 = *(unsigned __int8 *)(v23 + v27);
        if (*(_BYTE *)(v23 + v27))
        {
          v29 = v23 + v24;
          v30 = 1;
          while (1)
          {
            v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
            if ((_DWORD *)(v31 & 0xFFFFFFFFFFFFLL) == a2)
              break;
            v27 = ((_DWORD)v27 + v30) & v26;
            v28 = *(unsigned __int8 *)(v23 + v27);
            ++v30;
            v18 = 0xFFFFFFFFLL;
            if (!*(_BYTE *)(v23 + v27))
              goto LABEL_53;
          }
          v18 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
LABEL_51:
          if ((_DWORD)v18 != -1)
          {
            *a3 = HIDWORD(v18);
            goto LABEL_53;
          }
        }
      }
      else
      {
        if ((v25 & 0x20) != 0)
          v25 = a2[8];
        v44 = *(_DWORD *)(v13 + 12);
        v45 = v44 & (v25 >> 8);
        v46 = *(_DWORD *)(v23 + 4 * v45);
        if (v46)
        {
          v47 = v23 + 4 * v24;
          v48 = 1;
          while (1)
          {
            v49 = (v46 - 1);
            if (*(_DWORD **)(v47 + 16 * v49) == a2)
              break;
            v45 = (v45 + v48) & v44;
            v46 = *(_DWORD *)(v23 + 4 * v45);
            ++v48;
            v18 = 0xFFFFFFFFLL;
            if (!v46)
              goto LABEL_53;
          }
          v18 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
          goto LABEL_51;
        }
      }
    }
    v18 = 0xFFFFFFFFLL;
    goto LABEL_53;
  }
  v37 = v54;
  v38 = 8 * HIDWORD(v55);
  while (2)
  {
    v34 = *(_QWORD *)v37;
    v39 = *(unsigned int *)(*(_QWORD *)v37 + 72);
    if (!(_DWORD)v39)
      goto LABEL_48;
    v40 = (*(_DWORD *)(v34 + 16) >> 13) & 0x1F;
    if (v40 == 2)
    {
      if (a2 == (_DWORD *)(16 * v39))
      {
        v41 = (unsigned __int8 *)(v53 + 15);
        v52 = __ldxr((unsigned __int8 *)(v53 + 15));
        if (v52 != 1)
        {
          v18 = 0xFFFFFFFFLL;
          goto LABEL_85;
        }
        v18 = 0xFFFFFFFFLL;
        if (__stlxr(0, v41))
          goto LABEL_86;
        goto LABEL_20;
      }
      goto LABEL_48;
    }
    if (v40 == 17 || a2 != (_DWORD *)(16 * v39))
    {
LABEL_48:
      v37 = (WTF *)((char *)v37 + 8);
      v38 -= 8;
      if (!v38)
        goto LABEL_27;
      continue;
    }
    break;
  }
LABEL_69:
  v18 = *(unsigned __int16 *)(v34 + 22);
  if ((_DWORD)v18 == 65534)
  {
    v18 = 0xFFFFFFFFLL;
  }
  else if ((_DWORD)v18 == 0xFFFF)
  {
    v18 = *(unsigned int *)(*(_QWORD *)(v34 + 64) + 88);
  }
  *a3 = *(unsigned __int8 *)(v34 + 20);
  if (!v13)
    goto LABEL_20;
LABEL_53:
  v41 = (unsigned __int8 *)(v12 + 15);
  v42 = __ldxr((unsigned __int8 *)(v12 + 15));
  if (v42 != 1)
  {
LABEL_85:
    __clrex();
    goto LABEL_86;
  }
  if (__stlxr(0, v41))
LABEL_86:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_20:
  v19 = v54;
  if (v56 != (_BYTE *)v54 && v54 != 0)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree((unint64_t)v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return v18;
}

unint64_t JSC::Structure::remove(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::PropertyTable *v16;
  JSC::PropertyTable *v17;
  unsigned __int8 *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  _QWORD *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;

  JSC::Structure::ensurePropertyTable((JSC::Structure *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v17 = v16;
  v18 = (unsigned __int8 *)(a1 + 15);
  if (__ldaxr((unsigned __int8 *)(a1 + 15)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 15);
    goto LABEL_4;
  }
  if (__stxr(1u, v18))
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a2 + 916);
  if (v17)
  {
    *(_QWORD *)(a1 + 88) = v17;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  v39 = a3;
  v20 = JSC::PropertyTable::take(v17, (JSC::VM *)a2, (uint64_t)&v39, v11, v12, v13, v14, v15);
  v27 = v20;
  if ((_DWORD)v20 != -1)
  {
    *(_DWORD *)(a1 + 16) &= ~0x20u;
    v40 = v20;
    v28 = *((_QWORD *)v17 + 4);
    if (!v28)
    {
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = 0;
      v35[1] = 0;
      v37 = *((_QWORD *)v17 + 4);
      *((_QWORD *)v17 + 4) = v35;
      if (v37)
      {
        v38 = *(_QWORD *)v37;
        if (*(_QWORD *)v37)
        {
          *(_QWORD *)v37 = 0;
          *(_DWORD *)(v37 + 8) = 0;
          WTF::fastFree(v38, v36, v21, v22, v23, v24, v25, v26);
        }
        WTF::fastFree(v37, v36, v21, v22, v23, v24, v25, v26);
        v28 = *((_QWORD *)v17 + 4);
      }
      else
      {
        v28 = (uint64_t)v35;
      }
    }
    v29 = *(unsigned int *)(v28 + 12);
    if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
      *(_DWORD *)(*(_QWORD *)v28 + 4 * *(unsigned int *)(v28 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, v29 + 1, (unint64_t)&v40);
    else
      *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v27;
    ++*(_DWORD *)(v28 + 12);
    v30 = *(unsigned __int16 *)(a1 + 24);
    if (v30 != 0xFFFF)
      goto LABEL_12;
    v30 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 84);
    if (v30 == -1)
    {
      LOWORD(v30) = -2;
    }
    else if (v30 > 65533)
    {
      goto LABEL_13;
    }
LABEL_12:
    *(_WORD *)(a1 + 24) = v30;
  }
LABEL_13:
  v31 = __ldxr(v18);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v18))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 15), 0, v21, v22, v23, v24, v25, v26);
  v32 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v32;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v33 = v32 == 0;
  else
    v33 = 0;
  if (v33)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  return v27;
}

unint64_t JSC::Structure::changePrototypeTransition(uint64_t a1, unint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  const JSC::PropertyTable *v26;
  const JSC::PropertyTable *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  JSC::Structure *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  int v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  BOOL v109;
  const char *v111;
  char v112;
  unint64_t v113;
  uint64_t *v114;
  unsigned int *v115;
  int *v116;
  char *v117;
  int v118;
  unsigned int v119;
  uint64_t v120;

  ++*(_DWORD *)(a1 + 916);
  if (!*(_QWORD *)(a2 + 48) || *(_BYTE *)(a2 + 9) == 51 || (*(_BYTE *)(a2 + 19) & 8) != 0)
  {
    v25 = 0;
    goto LABEL_18;
  }
  if (a3 == 2)
    v12 = 0;
  else
    v12 = a3;
  v13 = *(_QWORD *)(a2 + 80);
  if ((v13 & 1) != 0)
  {
    v24 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0)
      goto LABEL_66;
    v58 = (*(_DWORD *)(v24 + 16) >> 13) & 0x1F;
    if ((_DWORD)v58 == 16)
    {
      v59 = *(_QWORD *)(v24 + 48);
      v60 = v59 | 0x1000000000000000;
      v109 = v59 == 2;
      v61 = 0x1000000000000000;
      if (!v109)
        v61 = v60;
    }
    else
    {
      v61 = (v58 << 56) | (16 * *(unsigned int *)(v24 + 72));
    }
    if ((v61 | ((unint64_t)*(unsigned __int8 *)(v24 + 20) << 48)) != (v12 | 0x1000000000000000))
      goto LABEL_66;
LABEL_50:
    v62 = *(_QWORD *)(v24 + 88);
    if (!v62)
      goto LABEL_149;
    v120 = *(_QWORD *)(v24 + 88);
    v63 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v63)
      v63 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v63 + 5) & 8) != 0)
      goto LABEL_149;
    v64 = *(_DWORD *)(v62 + 24);
    v65 = *(_QWORD *)(v62 + 32);
    if (v65)
      LODWORD(v65) = *(_DWORD *)(v65 + 12);
    v66 = v65 + v64;
    v67 = *(unsigned __int8 *)(v24 + 14);
    v68 = v65 + v64 - v67;
    if (v66 < v67)
      v68 = 0;
    v118 = v68;
    v119 = v66;
    v113 = v24;
    v114 = &v120;
    v115 = &v119;
    v116 = &v118;
    v117 = &v112;
    v69 = *(unsigned __int16 *)(v24 + 24);
    if (v69 == 65534)
    {
      v70 = -1;
    }
    else
    {
      if (v69 == 0xFFFF)
        v70 = *(_DWORD *)(*(_QWORD *)(v24 + 64) + 84);
      else
        v70 = *(unsigned __int16 *)(v24 + 24);
      if (v70 >= (int)v67)
      {
        if (v70 >= 64)
          v71 = (v70 - 63);
        else
          v71 = 0;
        v72 = v71 + v67;
LABEL_69:
        if (v72 == v66)
        {
          if (v69 == 65534)
            goto LABEL_147;
          if (v69 != 0xFFFF)
          {
LABEL_145:
            v96 = __OFSUB__(v69, 63);
            v107 = v69 - 63;
            if (!((v107 < 0) ^ v96 | (v107 == 0)))
            {
LABEL_148:
              if (v107 == v68)
                goto LABEL_149;
              goto LABEL_162;
            }
LABEL_147:
            v107 = 0;
            goto LABEL_148;
          }
          v73 = *(_QWORD *)(v24 + 64);
LABEL_160:
          v69 = *(_DWORD *)(v73 + 84);
          goto LABEL_145;
        }
LABEL_161:
        v111 = "numberOfSlotsForMaxOffset doesn't match totalSize";
        goto LABEL_163;
      }
    }
    v72 = v70 + 1;
    goto LABEL_69;
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (v14)
  {
    v15 = v12 | 0x1000000000000000;
    v16 = *(_DWORD *)(v14 - 8);
    v17 = ((v12 | 0x1000000000000000) + ~(v12 << 32)) ^ (((v12 | 0x1000000000000000uLL) + ~(v12 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(_QWORD *)(v14 + 16 * v20);
    if (v21 != v15)
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(_QWORD *)(v14 + 16 * v20);
        ++v22;
        if (v21 == v15)
          goto LABEL_13;
      }
      goto LABEL_66;
    }
LABEL_13:
    v23 = *(_QWORD *)(v14 + 16 * v20 + 8);
    if (v23)
    {
      if ((*(_BYTE *)(v23 + 8) & 3) == 0)
      {
        v24 = *(_QWORD *)v23;
        if (*(_QWORD *)v23)
          goto LABEL_50;
      }
    }
  }
LABEL_66:
  v25 = 1;
LABEL_18:
  v24 = JSC::Structure::create((JSC::Structure *)a1, a2, a4, a4, a5, a6, a7, a8, a9);
  JSC::Structure::copyPropertyTableForPinning((JSC::Structure *)a2, (JSC::VM *)a1, v26, v27, v28, v29, v30, v31);
  v40 = v39;
  v41 = (unsigned __int8 *)(v24 + 15);
  if (__ldaxr((unsigned __int8 *)(v24 + 15)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v41))
  {
    goto LABEL_22;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v24 + 15);
LABEL_22:
  *(_DWORD *)(v24 + 16) |= 4u;
  if (v40)
  {
    *(_QWORD *)(v24 + 88) = v40;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v24 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, v24);
  }
  else
  {
    *(_QWORD *)(v24 + 88) = 0;
  }
  v43 = *(_QWORD *)(v24 + 64);
  if (v43 && *(_BYTE *)(v43 + 5) != 1)
    *(_DWORD *)(v43 + 80) = 0;
  else
    *(_QWORD *)(v24 + 64) = 0;
  v44 = *(unsigned int *)(v24 + 72);
  *(_DWORD *)(v24 + 72) = 0;
  if ((_DWORD)v44)
  {
    v45 = (WTF::StringImpl *)(16 * v44);
    v46 = *(_DWORD *)(16 * v44) - 2;
    if (v46)
    {
      *(_DWORD *)v45 = v46;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v45, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  v47 = __ldxr(v41);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v41))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v24 + 15), 0, (uint64_t)v33, v34, v35, v36, v37, v38);
  *(_QWORD *)(v24 + 48) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v24 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, v24);
  *(_DWORD *)(v24 + 16) = *(_DWORD *)(v24 + 16) & 0xFFFC1FFF | 0x20000;
  v48 = *(unsigned __int16 *)(a2 + 24);
  v49 = -2;
  if (v48 != 65534)
  {
    if (v48 != 0xFFFF)
    {
LABEL_40:
      *(_WORD *)(v24 + 24) = v48;
      goto LABEL_87;
    }
    v48 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v48 != -1)
    {
      if (v48 <= 65533)
        goto LABEL_40;
      v74 = *(_QWORD *)(v24 + 64);
      if (*(__int16 *)(v24 + 24) == -1)
      {
        *(_DWORD *)(v74 + 84) = v48;
        goto LABEL_87;
      }
      if (!v74 || *(_BYTE *)(v74 + 5) == 1)
      {
        v74 = JSC::StructureRareData::create((JSC::StructureRareData *)a1, (JSC::VM *)v74, v33, v34, v35, v36, v37, v38);
        __dmb(0xAu);
        *(_QWORD *)(v24 + 64) = v74;
        if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v24 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(a1 + 192, v24);
          v74 = *(_QWORD *)(v24 + 64);
        }
      }
      *(_DWORD *)(v74 + 84) = v48;
      __dmb(0xAu);
      v49 = -1;
    }
  }
  *(_WORD *)(v24 + 24) = v49;
LABEL_87:
  if (!v25)
    goto LABEL_98;
  v75 = (unsigned __int8 *)(a2 + 15);
  if (__ldaxr((unsigned __int8 *)(a2 + 15)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v75))
  {
    goto LABEL_92;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 15);
LABEL_92:
  ++*(_DWORD *)(a1 + 916);
  JSC::StructureTransitionTable::add((JSC::StructureTransitionTable *)(a2 + 80), (JSC::VM *)a1, (JSC::JSCell *)a2, v24, v35, v36, v37, v38);
  v83 = __ldxr(v75);
  if (v83 == 1)
  {
    if (!__stlxr(0, v75))
      goto LABEL_97;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 15), 0, v77, v78, v79, v80, v81, v82);
LABEL_97:
  v84 = *(_DWORD *)(a1 + 916) - 1;
  *(_DWORD *)(a1 + 916) = v84;
  if (*(unsigned __int8 *)(a1 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v84)
  {
    *(_BYTE *)(a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a1 + 192, 0);
  }
LABEL_98:
  v85 = *(_QWORD *)(v24 + 88);
  if (!v85)
    goto LABEL_124;
  v120 = *(_QWORD *)(v24 + 88);
  v86 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v86)
    v86 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v86 + 5) & 8) != 0)
    goto LABEL_124;
  v87 = *(_DWORD *)(v85 + 24);
  v88 = *(_QWORD *)(v85 + 32);
  if (v88)
    LODWORD(v88) = *(_DWORD *)(v88 + 12);
  v89 = v88 + v87;
  v90 = *(unsigned __int8 *)(v24 + 14);
  v91 = v88 + v87 - v90;
  if (v89 < v90)
    v91 = 0;
  v118 = v91;
  v119 = v89;
  v113 = v24;
  v114 = &v120;
  v115 = &v119;
  v116 = &v118;
  v117 = &v112;
  v92 = *(unsigned __int16 *)(v24 + 24);
  if (v92 == 65534)
  {
    v93 = -1;
  }
  else
  {
    if (v92 == 0xFFFF)
      v93 = *(_DWORD *)(*(_QWORD *)(v24 + 64) + 84);
    else
      v93 = *(unsigned __int16 *)(v24 + 24);
    if (v93 >= (int)v90)
    {
      if (v93 >= 64)
        v94 = (v93 - 63);
      else
        v94 = 0;
      v95 = v94 + v90;
      goto LABEL_116;
    }
  }
  v95 = v93 + 1;
LABEL_116:
  if (v95 != v89)
    goto LABEL_161;
  if (v92 == 65534)
    goto LABEL_122;
  if (v92 == 0xFFFF)
    v92 = *(_DWORD *)(*(_QWORD *)(v24 + 64) + 84);
  v96 = __OFSUB__(v92, 63);
  v97 = v92 - 63;
  if ((v97 < 0) ^ v96 | (v97 == 0))
LABEL_122:
    v97 = 0;
  if (v97 != v91)
  {
LABEL_162:
    v111 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
LABEL_163:
    JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v113, v111);
  }
LABEL_124:
  v98 = *(_QWORD *)(a2 + 88);
  if (v98)
  {
    v120 = *(_QWORD *)(a2 + 88);
    v99 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v99)
      v99 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v99 + 5) & 8) == 0)
    {
      v100 = *(_DWORD *)(v98 + 24);
      v101 = *(_QWORD *)(v98 + 32);
      if (v101)
        LODWORD(v101) = *(_DWORD *)(v101 + 12);
      v102 = v101 + v100;
      v103 = *(unsigned __int8 *)(a2 + 14);
      v68 = v101 + v100 - v103;
      if (v102 < v103)
        v68 = 0;
      v118 = v68;
      v119 = v102;
      v113 = a2;
      v114 = &v120;
      v115 = &v119;
      v116 = &v118;
      v117 = &v112;
      v69 = *(unsigned __int16 *)(a2 + 24);
      if (v69 == 65534)
      {
        v104 = -1;
      }
      else
      {
        if (v69 == 0xFFFF)
          v104 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
        else
          v104 = *(unsigned __int16 *)(a2 + 24);
        if (v104 >= (int)v103)
        {
          if (v104 >= 64)
            v105 = (v104 - 63);
          else
            v105 = 0;
          v106 = v105 + v103;
LABEL_142:
          if (v106 == v102)
          {
            if (v69 == 65534)
              goto LABEL_147;
            if (v69 != 0xFFFF)
              goto LABEL_145;
            v73 = *(_QWORD *)(a2 + 64);
            goto LABEL_160;
          }
          goto LABEL_161;
        }
      }
      v106 = v104 + 1;
      goto LABEL_142;
    }
  }
LABEL_149:
  v108 = *(_DWORD *)(a1 + 916) - 1;
  *(_DWORD *)(a1 + 916) = v108;
  if (*(unsigned __int8 *)(a1 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v109 = v108 == 0;
  else
    v109 = 0;
  if (v109)
  {
    *(_BYTE *)(a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a1 + 192, 0);
  }
  return v24;
}

void JSC::Structure::copyPropertyTableForPinning(JSC::Structure *this, JSC::VM *a2, const JSC::PropertyTable *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;

  v8 = (JSC::VM *)*((_QWORD *)this + 11);
  if (v8)
    JSC::PropertyTable::clone(a2, v8, a3, (uint64_t)a4, a5, a6, a7, a8);
  else
    JSC::Structure::materializePropertyTable(this, a2, 0, a4, a5, a6, a7, a8);
}

unint64_t JSC::Structure::attributeChangeTransitionToExistingStructure(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t result;
  int v6;

  *a4 = -1;
  if ((*(_BYTE *)(a1 + 19) & 8) != 0)
    return 0;
  result = JSC::StructureTransitionTable::get((uint64_t *)(a1 + 80), a2, a3, 3);
  if (result)
  {
    v6 = *(unsigned __int16 *)(result + 22);
    if (v6 == 65534)
    {
      v6 = -1;
    }
    else if (v6 == 0xFFFF)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(result + 64) + 88);
    }
    *a4 = v6;
  }
  return result;
}

unint64_t JSC::Structure::attributeChangeTransitionToExistingStructureConcurrently(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  v12 = (unsigned __int8 *)(a1 + 15);
  if (__ldaxr((unsigned __int8 *)(a1 + 15)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 15);
LABEL_5:
  *a4 = -1;
  if ((*(_BYTE *)(a1 + 19) & 8) != 0)
  {
    v15 = 0;
  }
  else
  {
    v14 = JSC::StructureTransitionTable::get((uint64_t *)(a1 + 80), a2, a3, 3);
    v15 = v14;
    if (v14)
    {
      v16 = *(unsigned __int16 *)(v14 + 22);
      if (v16 == 65534)
      {
        v16 = -1;
      }
      else if (v16 == 0xFFFF)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 88);
      }
      *a4 = v16;
    }
  }
  v17 = __ldxr(v12);
  if (v17 == 1)
  {
    if (!__stlxr(0, v12))
      return v15;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
  return v15;
}

JSC::VM *JSC::Structure::attributeChangeTransition(JSC::Structure *this, JSC::VM *a2, unint64_t a3, uint64_t a4, JSC::Structure *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  unsigned int v30;
  uint64_t v31;
  int v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  WTF::AtomStringImpl *v97;
  const JSC::PropertyTable *v98;
  const JSC::PropertyTable *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  uint64_t v111;
  JSC::Structure *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  __int16 v119;
  int v120;
  JSC::Structure *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  const char *v167;
  char v168;
  unint64_t v169;
  uint64_t *v170;
  unsigned int *v171;
  int *v172;
  char *v173;
  int v174;
  unsigned int v175;
  uint64_t v176;

  v11 = a2;
  if ((*((_DWORD *)a2 + 4) & 3) != 2)
  {
    if ((*((_DWORD *)a2 + 4) & 0x8000000) == 0)
    {
      v14 = JSC::StructureTransitionTable::get((uint64_t *)a2 + 10, a3, a4, 3);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)(v14 + 88);
        if (!v16)
          return (JSC::VM *)v15;
        v176 = *(_QWORD *)(v14 + 88);
        v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v17)
          v17 = WTF::Thread::initializeCurrentTLS(0);
        if ((*(_BYTE *)(v17 + 5) & 8) != 0)
          return (JSC::VM *)v15;
        v18 = *(_DWORD *)(v16 + 24);
        v19 = *(_QWORD *)(v16 + 32);
        if (v19)
          LODWORD(v19) = *(_DWORD *)(v19 + 12);
        v20 = v19 + v18;
        v21 = *(unsigned __int8 *)(v15 + 14);
        v22 = v19 + v18 - v21;
        if (v20 < v21)
          v22 = 0;
        v174 = v22;
        v175 = v20;
        v169 = v15;
        v170 = &v176;
        v171 = &v175;
        v172 = &v174;
        v173 = &v168;
        v23 = *(unsigned __int16 *)(v15 + 24);
        if (v23 == 65534)
        {
          v24 = -1;
        }
        else
        {
          if (v23 == 0xFFFF)
            v24 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
          else
            v24 = *(unsigned __int16 *)(v15 + 24);
          if (v24 >= (int)v21)
          {
            if (v24 >= 64)
              v25 = (v24 - 63);
            else
              v25 = 0;
            v26 = v25 + v21;
LABEL_22:
            if (v26 == v20)
            {
              if (v23 == 65534)
                goto LABEL_27;
              if (v23 != 0xFFFF)
              {
LABEL_25:
                v27 = __OFSUB__(v23, 63);
                v28 = v23 - 63;
                if (!((v28 < 0) ^ v27 | (v28 == 0)))
                {
LABEL_28:
                  if (v28 == v22)
                    return (JSC::VM *)v15;
                  goto LABEL_227;
                }
LABEL_27:
                v28 = 0;
                goto LABEL_28;
              }
              v91 = *(_QWORD *)(v15 + 64);
LABEL_122:
              v23 = *(_DWORD *)(v91 + 84);
              goto LABEL_25;
            }
            goto LABEL_226;
          }
        }
        v26 = v24 + 1;
        goto LABEL_22;
      }
    }
    v30 = 0;
    v31 = (uint64_t)v11;
    do
    {
      v31 = *(_QWORD *)(v31 + 64);
      if (!v31)
        goto LABEL_126;
      if (*(_BYTE *)(v31 + 5) != 1)
      {
        v33 = *(_DWORD *)(v31 + 80);
        if (v33)
          v31 = 16 * (v33 & 0xFFFFFFFE);
        else
          v31 = 0;
      }
      if (!v31)
        break;
    }
    while (v30++ < 0x3F);
    if (v31)
    {
      v11 = (JSC::VM *)JSC::Structure::toDictionaryTransition((uint64_t)this, (unint64_t)v11, 2, a5, (uint64_t)a5, a6, a7, a8, a9);
      JSC::Structure::attributeChange((unint64_t)v11, (uint64_t)this, a3, (const JSC::PropertyTable *)a4, v92, v93, v94, v95);
      return v11;
    }
LABEL_126:
    v96 = JSC::Structure::create(this, (unint64_t)v11, a5, (JSC::DeferredStructureTransitionWatchpointFire *)a4, (uint64_t)a5, a6, a7, a8, a9);
    v15 = v96;
    v104 = *((_QWORD *)v11 + 7);
    if (v104)
    {
      *(_QWORD *)(v96 + 56) = v104;
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v96 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, v96);
    }
    else
    {
      *(_QWORD *)(v96 + 56) = 0;
    }
    v105 = (unsigned __int8 *)(v15 + 15);
    if (__ldaxr((unsigned __int8 *)(v15 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v105))
    {
LABEL_131:
      *(_DWORD *)(v15 + 16) |= 0x10000000u;
      v107 = __ldxr(v105);
      if (v107 == 1)
      {
        if (!__stlxr(0, v105))
          goto LABEL_136;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v15 + 15), 0, (uint64_t)v98, (uint64_t)v99, v100, v101, v102, v103);
LABEL_136:
      *(_BYTE *)(v15 + 8) = *((_BYTE *)v11 + 8) & 0xEF;
      if (a3)
        *(_DWORD *)a3 += 2;
      v108 = *(unsigned int *)(v15 + 72);
      *(_DWORD *)(v15 + 72) = a3 >> 4;
      if ((_DWORD)v108)
      {
        v109 = (WTF::StringImpl *)(16 * v108);
        v110 = *(_DWORD *)(16 * v108) - 2;
        if (v110)
        {
          *(_DWORD *)v109 = v110;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v109, v97, (uint64_t)v98, (uint64_t)v99, v100, v101, v102, v103);
          WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
        }
      }
      *(_BYTE *)(v15 + 20) = a4;
      *(_DWORD *)(v15 + 16) = *(_DWORD *)(v15 + 16) & 0xFFFC1FFF | 0x6000;
      JSC::Structure::takePropertyTableOrCloneIfPinned(v11, this, v98, v99, v100, v101, v102, v103);
      if (v111)
      {
        *(_QWORD *)(v15 + 88) = v111;
        if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v15 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, v15);
      }
      else
      {
        *(_QWORD *)(v15 + 88) = 0;
      }
      v118 = *((unsigned __int16 *)v11 + 12);
      v119 = -2;
      if (v118 != 65534)
      {
        if (v118 != 0xFFFF)
        {
LABEL_146:
          *(_WORD *)(v15 + 24) = v118;
          goto LABEL_147;
        }
        v118 = *(_DWORD *)(*((_QWORD *)v11 + 8) + 84);
        if (v118 != -1)
        {
          if (v118 <= 65533)
            goto LABEL_146;
          if (*(__int16 *)(v15 + 24) == -1)
          {
            *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84) = v118;
            goto LABEL_147;
          }
          *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v15, this, v112, v113, v114, v115, v116, v117)
          + 21) = v118;
          __dmb(0xAu);
          v119 = -1;
        }
      }
      *(_WORD *)(v15 + 24) = v119;
LABEL_147:
      v120 = JSC::Structure::attributeChange(v15, (uint64_t)this, a3, (const JSC::PropertyTable *)a4, v114, v115, v116, v117);
      if (v120 == -1)
      {
        v127 = -2;
LABEL_149:
        *(_WORD *)(v15 + 22) = v127;
        goto LABEL_150;
      }
      if (v120 > 65533)
      {
        if (*(__int16 *)(v15 + 22) != -1)
        {
          *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v15, this, v121, v122, v123, v124, v125, v126)
          + 22) = v120;
          __dmb(0xAu);
          v127 = -1;
          goto LABEL_149;
        }
        *(_DWORD *)(*(_QWORD *)(v15 + 64) + 88) = v120;
      }
      else
      {
        *(_WORD *)(v15 + 22) = v120;
      }
LABEL_150:
      __dmb(0xAu);
      *(_DWORD *)(v15 + 16) &= ~0x10000000u;
      if ((*((_BYTE *)v11 + 19) & 8) != 0)
        goto LABEL_151;
      v157 = (unsigned __int8 *)v11 + 15;
      if (__ldaxr((unsigned __int8 *)v11 + 15))
      {
        __clrex();
      }
      else if (!__stxr(1u, v157))
      {
LABEL_209:
        ++*((_DWORD *)this + 229);
        JSC::StructureTransitionTable::add((JSC::VM *)((char *)v11 + 80), this, v11, v15, v123, v124, v125, v126);
        v165 = __ldxr(v157);
        if (v165 == 1)
        {
          if (!__stlxr(0, v157))
            goto LABEL_215;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v11 + 15, 0, v159, v160, v161, v162, v163, v164);
LABEL_215:
        v166 = *((_DWORD *)this + 229) - 1;
        *((_DWORD *)this + 229) = v166;
        if (*((unsigned __int8 *)this + 1198) | HIBYTE(dword_1ECF4C5CE) && !v166)
        {
          *((_BYTE *)this + 1198) = 0;
          JSC::Heap::collectIfNecessaryOrDefer((uint64_t)this + 192, 0);
        }
LABEL_151:
        v128 = *(_QWORD *)(v15 + 88);
        if (!v128)
          goto LABEL_181;
        v176 = *(_QWORD *)(v15 + 88);
        v129 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v129)
          v129 = WTF::Thread::initializeCurrentTLS(0);
        if ((*(_BYTE *)(v129 + 5) & 8) != 0)
          goto LABEL_181;
        v130 = *(_DWORD *)(v128 + 24);
        v131 = *(_QWORD *)(v128 + 32);
        if (v131)
          LODWORD(v131) = *(_DWORD *)(v131 + 12);
        v132 = v131 + v130;
        v133 = *(unsigned __int8 *)(v15 + 14);
        v134 = v131 + v130 - v133;
        if (v132 < v133)
          v134 = 0;
        v174 = v134;
        v175 = v132;
        v169 = v15;
        v170 = &v176;
        v171 = &v175;
        v172 = &v174;
        v173 = &v168;
        v135 = *(unsigned __int16 *)(v15 + 24);
        if (v135 == 65534)
        {
          v136 = -1;
        }
        else
        {
          if (v135 == 0xFFFF)
            v136 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
          else
            v136 = *(unsigned __int16 *)(v15 + 24);
          if (v136 >= (int)v133)
          {
            if (v136 >= 64)
              v137 = (v136 - 63);
            else
              v137 = 0;
            v138 = v137 + v133;
LABEL_173:
            if (v138 != v132)
              goto LABEL_226;
            if (v135 == 65534)
              goto LABEL_179;
            if (v135 == 0xFFFF)
              v135 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
            v27 = __OFSUB__(v135, 63);
            v139 = v135 - 63;
            if ((v139 < 0) ^ v27 | (v139 == 0))
LABEL_179:
              v139 = 0;
            if (v139 == v134)
            {
LABEL_181:
              v140 = *((_QWORD *)v11 + 11);
              if (!v140)
                return (JSC::VM *)v15;
              v176 = *((_QWORD *)v11 + 11);
              v141 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v141)
                v141 = WTF::Thread::initializeCurrentTLS(0);
              if ((*(_BYTE *)(v141 + 5) & 8) != 0)
                return (JSC::VM *)v15;
              v142 = *(_DWORD *)(v140 + 24);
              v143 = *(_QWORD *)(v140 + 32);
              if (v143)
                LODWORD(v143) = *(_DWORD *)(v143 + 12);
              v144 = v143 + v142;
              v145 = *((unsigned __int8 *)v11 + 14);
              v22 = v143 + v142 - v145;
              if (v144 < v145)
                v22 = 0;
              v174 = v22;
              v175 = v144;
              v169 = (unint64_t)v11;
              v170 = &v176;
              v171 = &v175;
              v172 = &v174;
              v173 = &v168;
              v23 = *((unsigned __int16 *)v11 + 12);
              if (v23 == 65534)
              {
                v146 = -1;
              }
              else
              {
                if (v23 == 0xFFFF)
                  v146 = *(_DWORD *)(*((_QWORD *)v11 + 8) + 84);
                else
                  v146 = *((unsigned __int16 *)v11 + 12);
                if (v146 >= (int)v145)
                {
                  if (v146 >= 64)
                    v147 = (v146 - 63);
                  else
                    v147 = 0;
                  v148 = v147 + v145;
LABEL_199:
                  if (v148 == v144)
                  {
                    if (v23 == 65534)
                      goto LABEL_27;
                    if (v23 != 0xFFFF)
                      goto LABEL_25;
                    v91 = *((_QWORD *)v11 + 8);
                    goto LABEL_122;
                  }
LABEL_226:
                  v167 = "numberOfSlotsForMaxOffset doesn't match totalSize";
                  goto LABEL_228;
                }
              }
              v148 = v146 + 1;
              goto LABEL_199;
            }
LABEL_227:
            v167 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
LABEL_228:
            JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v169, v167);
          }
        }
        v138 = v136 + 1;
        goto LABEL_173;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11 + 15);
      goto LABEL_209;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 15);
    goto LABEL_131;
  }
  JSC::Structure::ensurePropertyTable(a2, this, a3, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
  v42 = v41;
  v43 = (unsigned __int8 *)v11 + 15;
  if (__ldaxr((unsigned __int8 *)v11 + 15))
  {
    __clrex();
LABEL_43:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11 + 15);
    goto LABEL_44;
  }
  if (__stxr(1u, v43))
    goto LABEL_43;
LABEL_44:
  ++*((_DWORD *)this + 229);
  *((_DWORD *)v11 + 4) |= 4u;
  if (v42)
  {
    *((_QWORD *)v11 + 11) = v42;
    if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)v11 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, (unint64_t)v11);
  }
  else
  {
    *((_QWORD *)v11 + 11) = 0;
  }
  v45 = *((_QWORD *)v11 + 8);
  if (v45 && *(_BYTE *)(v45 + 5) != 1)
    *(_DWORD *)(v45 + 80) = 0;
  else
    *((_QWORD *)v11 + 8) = 0;
  v46 = *((unsigned int *)v11 + 18);
  *((_DWORD *)v11 + 18) = 0;
  if ((_DWORD)v46)
  {
    v47 = (WTF::StringImpl *)(16 * v46);
    v48 = *(_DWORD *)(16 * v46) - 2;
    if (v48)
    {
      *(_DWORD *)v47 = v48;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v47, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
  }
  v49 = *(_QWORD *)(v42 + 16);
  v50 = v49 & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(unsigned int *)(v42 + 8);
  v52 = *(_DWORD *)(a3 + 16);
  if ((v49 & 1) != 0)
  {
    if ((v52 & 0x20) != 0)
      v52 = *(_DWORD *)(a3 + 32);
    v53 = *(_DWORD *)(v42 + 12);
    v54 = (v52 >> 8) & *(_QWORD *)&v53;
    v55 = *(unsigned __int8 *)(v50 + v54);
    if (*(_BYTE *)(v50 + v54))
    {
      v56 = v50 + v51;
      v57 = 1;
      while (1)
      {
        v58 = (v55 - 1);
        v59 = *(_QWORD *)(v56 + 8 * v58);
        if (a3 == (v59 & 0xFFFFFFFFFFFFLL))
          break;
        v54 = ((_DWORD)v54 + v57) & v53;
        v55 = *(unsigned __int8 *)(v50 + v54);
        ++v57;
        if (!*(_BYTE *)(v50 + v54))
          goto LABEL_79;
      }
      *(_QWORD *)(v56 + 8 * v58) = v59 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)a4 << 48);
      goto LABEL_72;
    }
  }
  else
  {
    if ((v52 & 0x20) != 0)
      v52 = *(_DWORD *)(a3 + 32);
    v60 = *(_DWORD *)(v42 + 12);
    v61 = v60 & (v52 >> 8);
    v62 = *(_DWORD *)(v50 + 4 * v61);
    if (v62)
    {
      v63 = v50 + 4 * v51;
      v64 = 1;
      while (1)
      {
        v65 = (v62 - 1);
        if (*(_QWORD *)(v63 + 16 * v65) == a3)
          break;
        v61 = (v61 + v64) & v60;
        v62 = *(_DWORD *)(v50 + 4 * v61);
        ++v64;
        if (!v62)
          goto LABEL_79;
      }
      v66 = v63 + 16 * v65;
      if (*(_DWORD *)(v66 + 8) != -1)
      {
        *(_BYTE *)(v66 + 12) = a4;
LABEL_72:
        if ((a4 & 4) != 0)
          *((_DWORD *)v11 + 4) = *((_DWORD *)v11 + 4) & 0xFFFFFF9F | 0x40;
        if ((a4 & 8) != 0)
        {
          v67 = *((_DWORD *)v11 + 4);
          *((_DWORD *)v11 + 4) = v67 | 0x40000000;
          if ((a4 & 0x72) != 0)
            *((_DWORD *)v11 + 4) = v67 | 0xC0000000;
        }
        if ((a4 & 2) != 0)
          *((_DWORD *)v11 + 4) |= 0x10u;
      }
    }
  }
LABEL_79:
  v68 = __ldxr(v43);
  if (v68 != 1)
  {
    __clrex();
    goto LABEL_83;
  }
  if (__stlxr(0, v43))
LABEL_83:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v11 + 15, 0, v35, v36, v37, v38, v39, v40);
  v69 = *((_DWORD *)this + 229) - 1;
  *((_DWORD *)this + 229) = v69;
  if (*((unsigned __int8 *)this + 1198) | HIBYTE(dword_1ECF4C5CE))
    v70 = v69 == 0;
  else
    v70 = 0;
  if (v70)
  {
    *((_BYTE *)this + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)this + 192, 0);
  }
  v71 = *((_QWORD *)v11 + 11);
  if (!v71)
    return v11;
  v176 = *((_QWORD *)v11 + 11);
  v72 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v72)
    v72 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v72 + 5) & 8) != 0)
    return v11;
  v73 = *(_DWORD *)(v71 + 24);
  v74 = *(_QWORD *)(v71 + 32);
  if (v74)
    LODWORD(v74) = *(_DWORD *)(v74 + 12);
  v75 = v74 + v73;
  v76 = *((unsigned __int8 *)v11 + 14);
  v77 = v74 + v73 - v76;
  if (v75 < v76)
    v77 = 0;
  v174 = v77;
  v175 = v75;
  v169 = (unint64_t)v11;
  v170 = &v176;
  v171 = &v175;
  v172 = &v174;
  v173 = &v168;
  v78 = *((unsigned __int16 *)v11 + 12);
  if (v78 == 65534)
  {
    v79 = -1;
LABEL_107:
    v81 = v79 + 1;
    goto LABEL_108;
  }
  if (v78 == 0xFFFF)
    v79 = *(_DWORD *)(*((_QWORD *)v11 + 8) + 84);
  else
    v79 = *((unsigned __int16 *)v11 + 12);
  if (v79 < (int)v76)
    goto LABEL_107;
  if (v79 >= 64)
    v80 = (v79 - 63);
  else
    v80 = 0;
  v81 = v80 + v76;
LABEL_108:
  if (v81 != v75)
    goto LABEL_226;
  if (v78 == 65534)
    goto LABEL_114;
  if (v78 == 0xFFFF)
    v78 = *(_DWORD *)(*((_QWORD *)v11 + 8) + 84);
  v27 = __OFSUB__(v78, 63);
  v82 = v78 - 63;
  if ((v82 < 0) ^ v27 | (v82 == 0))
LABEL_114:
    v82 = 0;
  if (v82 != v77)
    goto LABEL_227;
  return v11;
}

uint64_t JSC::Structure::attributeChange(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;

  v8 = a4;
  JSC::Structure::ensurePropertyTable((JSC::Structure *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v19 = v18;
  v20 = (unsigned __int8 *)(a1 + 15);
  if (__ldaxr((unsigned __int8 *)(a1 + 15)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 15);
    goto LABEL_4;
  }
  if (__stxr(1u, v20))
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a2 + 916);
  if (v19)
  {
    *(_QWORD *)(a1 + 88) = v19;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  v22 = *(_QWORD *)(v19 + 16);
  v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
  v24 = *(unsigned int *)(v19 + 8);
  v25 = *(_DWORD *)(a3 + 16);
  if ((v22 & 1) == 0)
  {
    if ((v25 & 0x20) != 0)
      v25 = *(_DWORD *)(a3 + 32);
    v35 = *(_DWORD *)(v19 + 12);
    v36 = v35 & (v25 >> 8);
    v37 = *(_DWORD *)(v23 + 4 * v36);
    if (v37)
    {
      v38 = v23 + 4 * v24;
      v39 = 1;
      while (1)
      {
        v40 = (v37 - 1);
        if (*(_QWORD *)(v38 + 16 * v40) == a3)
          break;
        v36 = (v36 + v39) & v35;
        v37 = *(_DWORD *)(v23 + 4 * v36);
        ++v39;
        v34 = 0xFFFFFFFFLL;
        if (!v37)
          goto LABEL_35;
      }
      v41 = v38 + 16 * v40;
      v34 = *(unsigned int *)(v41 + 8);
      if ((_DWORD)v34 != -1)
      {
        *(_BYTE *)(v41 + 12) = v8;
        goto LABEL_26;
      }
    }
LABEL_46:
    v34 = 0xFFFFFFFFLL;
    goto LABEL_35;
  }
  if ((v25 & 0x20) != 0)
    v25 = *(_DWORD *)(a3 + 32);
  v26 = v25 >> 8;
  v27 = *(unsigned int *)(v19 + 12);
  LODWORD(v28) = v26 & v27;
  v29 = *(unsigned __int8 *)(v23 + (v26 & v27));
  if (!*(_BYTE *)(v23 + (v26 & v27)))
    goto LABEL_46;
  v30 = v23 + v24;
  v31 = 1;
  while (1)
  {
    v32 = (v29 - 1);
    v33 = *(_QWORD *)(v30 + 8 * v32);
    if (a3 == (v33 & 0xFFFFFFFFFFFFLL))
      break;
    v28 = ((_DWORD)v28 + v31) & v27;
    v29 = *(unsigned __int8 *)(v23 + v28);
    ++v31;
    v34 = 0xFFFFFFFFLL;
    if (!*(_BYTE *)(v23 + v28))
      goto LABEL_35;
  }
  v34 = HIBYTE(v33);
  *(_QWORD *)(v30 + 8 * v32) = v33 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v8 << 48);
LABEL_26:
  if ((v8 & 4) != 0)
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFFF9F | 0x40;
  if ((v8 & 8) != 0)
  {
    v42 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v42 | 0x40000000;
    if ((v8 & 0x72) != 0)
      *(_DWORD *)(a1 + 16) = v42 | 0xC0000000;
  }
  if ((v8 & 2) != 0)
    *(_DWORD *)(a1 + 16) |= 0x10u;
  v43 = *(unsigned __int16 *)(a1 + 24);
  if (v43 != 0xFFFF)
    goto LABEL_34;
  v43 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 84);
  if (v43 == -1)
  {
    LOWORD(v43) = -2;
    goto LABEL_34;
  }
  if (v43 <= 65533)
LABEL_34:
    *(_WORD *)(a1 + 24) = v43;
LABEL_35:
  v44 = __ldxr(v20);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, v20))
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 15), 0, v12, v13, v14, v15, v16, v17);
  v45 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v45;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v46 = v45 == 0;
  else
    v46 = 0;
  if (v46)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  return v34;
}

unint64_t JSC::Structure::toDictionaryTransition(uint64_t a1, unint64_t a2, char a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v12;
  const JSC::PropertyTable *v13;
  const JSC::PropertyTable *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  JSC::Structure *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  char v61;
  _QWORD v62[5];
  int v63;
  unsigned int v64;
  uint64_t v65;

  ++*(_DWORD *)(a1 + 916);
  v12 = JSC::Structure::create((JSC::Structure *)a1, a2, a4, a4, a5, a6, a7, a8, a9);
  JSC::Structure::copyPropertyTableForPinning((JSC::Structure *)a2, (JSC::VM *)a1, v13, v14, v15, v16, v17, v18);
  v27 = v26;
  v28 = (unsigned __int8 *)(v12 + 15);
  if (__ldaxr((unsigned __int8 *)(v12 + 15)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 15);
    goto LABEL_4;
  }
  if (__stxr(1u, v28))
    goto LABEL_3;
LABEL_4:
  *(_DWORD *)(v12 + 16) |= 4u;
  if (v27)
  {
    *(_QWORD *)(v12 + 88) = v27;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v12 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, v12);
  }
  else
  {
    *(_QWORD *)(v12 + 88) = 0;
  }
  v30 = *(_QWORD *)(v12 + 64);
  if (v30 && *(_BYTE *)(v30 + 5) != 1)
    *(_DWORD *)(v30 + 80) = 0;
  else
    *(_QWORD *)(v12 + 64) = 0;
  v31 = *(unsigned int *)(v12 + 72);
  *(_DWORD *)(v12 + 72) = 0;
  if ((_DWORD)v31)
  {
    v32 = (WTF::StringImpl *)(16 * v31);
    v33 = *(_DWORD *)(16 * v31) - 2;
    if (v33)
    {
      *(_DWORD *)v32 = v33;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v32, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
  }
  v34 = __ldxr(v28);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v28))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v12 + 15), 0, (uint64_t)v20, v21, v22, v23, v24, v25);
  v35 = *(unsigned __int16 *)(a2 + 24);
  v36 = -2;
  if (v35 == 65534)
    goto LABEL_65;
  if (v35 == 0xFFFF)
  {
    v35 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v35 != -1)
    {
      if (v35 <= 65533)
        goto LABEL_20;
      if (*(__int16 *)(v12 + 24) == -1)
      {
        *(_DWORD *)(*(_QWORD *)(v12 + 64) + 84) = v35;
        goto LABEL_21;
      }
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v12, (JSC::VM *)a1, v20, v21, v22, v23, v24, v25) + 21) = v35;
      __dmb(0xAu);
      v36 = -1;
    }
LABEL_65:
    *(_WORD *)(v12 + 24) = v36;
    goto LABEL_21;
  }
LABEL_20:
  *(_WORD *)(v12 + 24) = v35;
LABEL_21:
  *(_DWORD *)(v12 + 16) = a3 & 3 | *(_DWORD *)(v12 + 16) & 0xFFFFFFFC | 0x8000000;
  v37 = *(_QWORD *)(v12 + 88);
  if (v37)
  {
    v65 = *(_QWORD *)(v12 + 88);
    v38 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v38)
      v38 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v38 + 5) & 8) == 0)
    {
      v39 = *(_DWORD *)(v37 + 24);
      v40 = *(_QWORD *)(v37 + 32);
      if (v40)
        LODWORD(v40) = *(_DWORD *)(v40 + 12);
      v41 = v40 + v39;
      v42 = *(unsigned __int8 *)(v12 + 14);
      v43 = v40 + v39 - v42;
      if (v41 < v42)
        v43 = 0;
      v63 = v43;
      v64 = v41;
      v62[0] = v12;
      v62[1] = &v65;
      v62[2] = &v64;
      v62[3] = &v63;
      v62[4] = &v61;
      v44 = *(unsigned __int16 *)(v12 + 24);
      if (v44 == 65534)
      {
        v45 = -1;
      }
      else
      {
        if (v44 == 0xFFFF)
          v45 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 84);
        else
          v45 = *(unsigned __int16 *)(v12 + 24);
        if (v45 >= (int)v42)
        {
          if (v45 >= 64)
            v46 = (v45 - 63);
          else
            v46 = 0;
          v47 = v46 + v42;
LABEL_41:
          if (v47 == v41)
          {
            if (v44 == 65534)
              goto LABEL_47;
            if (v44 == 0xFFFF)
              v44 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 84);
            v48 = __OFSUB__(v44, 63);
            v49 = v44 - 63;
            if ((v49 < 0) ^ v48 | (v49 == 0))
LABEL_47:
              v49 = 0;
            if (v49 == v43)
              goto LABEL_49;
            v60 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
          }
          else
          {
            v60 = "numberOfSlotsForMaxOffset doesn't match totalSize";
          }
          JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)v62, v60);
        }
      }
      v47 = v45 + 1;
      goto LABEL_41;
    }
  }
LABEL_49:
  v50 = *(_DWORD *)(a1 + 916) - 1;
  *(_DWORD *)(a1 + 916) = v50;
  if (*(unsigned __int8 *)(a1 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v50)
  {
    *(_BYTE *)(a1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a1 + 192, 0);
  }
  return v12;
}

unint64_t JSC::Structure::sealTransition(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, JSC::DeferredStructureTransitionWatchpointFire *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  return JSC::Structure::nonPropertyTransitionSlow(this, (int64_t)a2, 13, (uint64_t)a3, a5, a6, a7, a8, a9);
}

unint64_t JSC::Structure::freezeTransition(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, JSC::DeferredStructureTransitionWatchpointFire *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  return JSC::Structure::nonPropertyTransitionSlow(this, (int64_t)a2, 14, (uint64_t)a3, a5, a6, a7, a8, a9);
}

unint64_t JSC::Structure::becomePrototypeTransition(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, JSC::DeferredStructureTransitionWatchpointFire *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  return JSC::Structure::nonPropertyTransitionSlow(this, (int64_t)a2, 15, (uint64_t)a3, a5, a6, a7, a8, a9);
}

unint64_t JSC::Structure::nonPropertyTransitionSlow(JSC::VM *a1, int64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  int v10;
  char v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t SlowCase;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unsigned __int8 *v45;
  int v47;
  int v48;
  __int16 v49;
  unsigned __int8 *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  int v72;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  JSC::VM *v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  JSC::VM **v86;
  JSC::VM *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  int v97;
  JSC::VM *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int64_t v102;
  JSC::VM *v103;
  int v104;
  int64_t *v105;
  unsigned __int8 *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  int v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  int v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  int v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  int v189;
  int v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  BOOL v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  _QWORD *v202;
  void *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  int v227;
  int v228;
  int v229;
  BOOL v230;
  WTF *v231;
  int v232;
  BOOL v233;
  unsigned __int8 *v234;
  uint64_t v236;
  WTF::StringImpl *v237;
  int v238;
  int v239;
  int v240;
  __int16 v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  char v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  int v271;
  int64_t *v272;
  int v273;
  int v274;
  unint64_t v275;
  int v276;
  int v277;
  unint64_t v278;
  int v279;
  unsigned __int8 *v280;
  _QWORD v281[2];
  int64_t v282;
  WTF *v283;
  uint64_t v284;
  _QWORD v285[8];
  uint64_t v286[5];
  int v287;
  unsigned int v288;
  _QWORD v289[2];

  v9 = a4;
  v10 = a3;
  v13 = *(_BYTE *)(this + 8);
  v14 = a3 - 4;
  switch((int)a3)
  {
    case 4:
      v13 |= 2u;
      break;
    case 5:
      v13 = v13 & 0xE1 | 4;
      break;
    case 6:
      v13 = v13 & 0xE1 | 6;
      break;
    case 7:
      v13 = v13 & 0xE1 | 8;
      break;
    case 8:
      v13 = v13 & 0xE1 | 0xA;
      break;
    case 9:
    case 10:
      v13 = v13 & 0xE1 | 0xC;
      break;
    case 11:
      v13 |= 0x20u;
      break;
    default:
      break;
  }
  v15 = *(_DWORD *)(this + 16);
  if ((v15 & 3) != 0)
    goto LABEL_23;
  v16 = *(_QWORD *)(this + 80);
  if ((v16 & 1) == 0)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = ((a3 << 56) - 1) ^ ((unint64_t)((a3 << 56) - 1) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = *(_QWORD *)(v17 + 16 * v22);
      if (v23 == a3 << 56)
      {
LABEL_7:
        v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
        if (v24)
        {
          if ((*(_BYTE *)(v24 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v24;
            if (*(_QWORD *)v24)
              return SlowCase;
          }
        }
      }
      else
      {
        v30 = 1;
        while (v23)
        {
          v22 = ((_DWORD)v22 + v30) & v18;
          v23 = *(_QWORD *)(v17 + 16 * v22);
          ++v30;
          if (v23 == a3 << 56)
            goto LABEL_7;
        }
      }
    }
LABEL_23:
    v31 = (unint64_t *)((char *)a1 + 40136);
    ++*((_DWORD *)a1 + 229);
    if ((v15 & 0x1000000) == 0)
    {
      SlowCase = *v31;
      if (*v31 >= *((_QWORD *)a1 + 5018))
      {
        SlowCase = *((_QWORD *)a1 + 5019);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM(a1, (JSC::VM *)this, a3, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a1 + 40112, (char *)a1 + 192, 128, 0, 0);
          goto LABEL_26;
        }
        v226 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a1 + 5020);
        *((_QWORD *)a1 + 5018) = SlowCase + HIDWORD(v226);
        *((_QWORD *)a1 + 5019) = SlowCase + (int)v226;
      }
      *v31 = SlowCase + 128;
LABEL_26:
      *(_DWORD *)SlowCase = 0;
      v32 = *((_QWORD *)a1 + 5187);
      v33 = *(_DWORD *)(v32 + 8);
      *(_DWORD *)SlowCase = v32 >> 4;
      *(_DWORD *)(SlowCase + 4) = v33;
      *(_DWORD *)(SlowCase + 8) = -1146241297;
      *(_BYTE *)(SlowCase + 14) = *(_BYTE *)(this + 14);
      *(_BYTE *)(SlowCase + 15) = 0;
      *(_DWORD *)(SlowCase + 16) = 0;
      *(_DWORD *)(SlowCase + 28) = *(_DWORD *)(this + 28);
      *(_DWORD *)(SlowCase + 32) = *(_DWORD *)(this + 32);
      *(_QWORD *)(SlowCase + 40) = 0;
      v34 = *(_QWORD *)(this + 48);
      *(_QWORD *)(SlowCase + 56) = 0;
      *(_QWORD *)(SlowCase + 64) = 0;
      *(_QWORD *)(SlowCase + 48) = v34;
      *(_DWORD *)(SlowCase + 72) = 0;
      *(_DWORD *)(SlowCase + 76) = *(_DWORD *)(this + 76);
      *(_QWORD *)(SlowCase + 80) = 1;
      *(_QWORD *)(SlowCase + 88) = 0;
      *(_QWORD *)(SlowCase + 96) = 3;
      LOBYTE(v34) = *(_DWORD *)(this + 16);
      *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(this + 16) & 3;
      v35 = *(_DWORD *)(this + 16) & 0x800000 | v34 & 3;
      *(_DWORD *)(SlowCase + 16) = v35;
      LODWORD(v34) = *(_DWORD *)(this + 16) & 8 | v35;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = *(_DWORD *)(this + 16) & 0x10 | v34;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = *(_DWORD *)(this + 16) & 0x40 | v34;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = *(_DWORD *)(this + 16) & 0x40000000 | v34;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = *(_DWORD *)(this + 16) & 0x80000000 | v34;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = v34 & 0xDFFFFFFF | (((*(_DWORD *)(this + 16) >> 29) & 1) << 29);
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = v34 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(this + 16) >> 5) & 1));
      *(_BYTE *)(SlowCase + 20) = 0;
      *(_DWORD *)(SlowCase + 16) = v34 & 0xFFFC1FFF;
      LODWORD(v34) = *(_DWORD *)(this + 16) & 0x80000 | v34 & 0xFFF41FFF;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = v34 & 0xFFCC1FFF | *(_DWORD *)(this + 16) & 0x100000 | 0x200000;
      *(_DWORD *)(SlowCase + 16) = v34;
      LODWORD(v34) = v34 & 0xFFBFFFFF | *(_DWORD *)(this + 16) & 0x400000;
      *(_DWORD *)(SlowCase + 16) = v34;
      *(_DWORD *)(SlowCase + 16) = v34 & 0xE7FFFFFF | *(_DWORD *)(this + 16) & 0x8000000;
      *(_DWORD *)(SlowCase + 22) = -65538;
      LOWORD(v34) = *(_WORD *)(this + 12);
      *(_DWORD *)(SlowCase + 8) = (*(unsigned __int8 *)(this + 10) << 16) | (*(unsigned __int8 *)(this + 9) << 8) | *(unsigned __int8 *)(this + 8) | 0x1000000;
      *(_WORD *)(SlowCase + 12) = v34;
      *(_QWORD *)(SlowCase + 64) = this;
      if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
      v36 = *(_QWORD *)(this + 96);
      if ((v36 & 1) != 0)
      {
        v37 = *(_DWORD *)(this + 16);
      }
      else
      {
        v85 = *(unsigned __int8 *)(v36 + 5);
        v37 = *(_DWORD *)(this + 16);
        if (v85)
        {
          v37 |= 0x4000000u;
          *(_DWORD *)(this + 16) = v37;
        }
      }
      *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0xFBFFFFFF | (((v37 >> 26) & 1) << 26);
      v38 = *(_QWORD *)(this + 40);
      if (v38)
      {
        *(_QWORD *)(SlowCase + 40) = v38;
        if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
      }
      goto LABEL_33;
    }
    SlowCase = *((_QWORD *)a1 + 5028);
    if (SlowCase >= *((_QWORD *)a1 + 5029))
    {
      SlowCase = *((_QWORD *)a1 + 5030);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(a1, (JSC::VM *)this, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a1 + 40200, (char *)a1 + 192, 128, 0, 0);
        goto LABEL_139;
      }
      v278 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a1 + 5031);
      *((_QWORD *)a1 + 5029) = SlowCase + HIDWORD(v278);
      *((_QWORD *)a1 + 5030) = SlowCase + (int)v278;
    }
    *((_QWORD *)a1 + 5028) = SlowCase + 128;
LABEL_139:
    *(_DWORD *)SlowCase = 0;
    JSC::Structure::Structure((JSC::Structure *)SlowCase, a1, (JSC::Structure *)this);
    v89 = *(unsigned int *)(this + 104);
    if ((_DWORD)v89)
      *(_DWORD *)(16 * v89) += 2;
    *(_DWORD *)(SlowCase + 104) = v89;
    *(_DWORD *)(SlowCase + 108) = *(_DWORD *)(this + 108) & 0xFFFFFFFE;
    *(_DWORD *)(SlowCase + 16) |= 0x1000000u;
LABEL_33:
    if (*((_BYTE *)a1 + 755))
      __dmb(0xAu);
    v39 = *(_QWORD *)(this + 64);
    if (v39 && *(_BYTE *)(v39 + 5) != 1 && *(_QWORD *)(v39 + 72))
    {
      v74 = *(_QWORD *)(SlowCase + 64);
      if (!v74 || *(_BYTE *)(v74 + 5) == 1)
      {
        v74 = JSC::StructureRareData::create(a1, (JSC::VM *)v74, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
        __dmb(0xAu);
        *(_QWORD *)(SlowCase + 64) = v74;
        if (v74)
        {
          if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
          {
            JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
            v74 = *(_QWORD *)(SlowCase + 64);
          }
        }
      }
      v75 = *(unsigned int **)(v39 + 72);
      if (v75)
      {
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 + 1, v75));
      }
      v77 = *(unsigned int **)(v74 + 72);
      *(_QWORD *)(v74 + 72) = v75;
      if (v77)
      {
        do
        {
          v78 = __ldaxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79)
        {
          atomic_store(1u, v77);
          if ((v77[2] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v77 + 2), (void *)v74, a3, a4, a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v77, (void *)v74, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    if (v9)
    {
      if ((this & 8) != 0)
        v40 = (uint64_t *)(this - 16);
      else
        v40 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v41 = *(_QWORD *)(this + 96);
      if ((v41 & 1) != 0)
      {
        if ((v41 & 6) == 0)
          goto LABEL_43;
        goto LABEL_42;
      }
      if (*(_BYTE *)(v41 + 4) == 1)
        JSC::WatchpointSet::fireAllSlow(v41, *v40, v9);
    }
    else
    {
      if ((this & 8) != 0)
        v86 = (JSC::VM **)(this - 16);
      else
        v86 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v87 = *v86;
      v283 = (WTF *)&off_1E35AF330;
      v284 = this;
      v88 = *(_QWORD *)(this + 96);
      if ((v88 & 1) != 0)
      {
        if ((v88 & 6) != 0)
        {
LABEL_42:
          *(_QWORD *)(this + 96) = 5;
          __dmb(0xAu);
        }
      }
      else if (*(_BYTE *)(v88 + 4) == 1)
      {
        JSC::WatchpointSet::fireAllSlow(v88, v87, &v283, a4, a5, a6, a7, a8, a9);
      }
    }
LABEL_43:
    v42 = *(_DWORD *)(SlowCase + 16) & 0xFFFC1FFF | ((v10 & 0x1F) << 13);
    *(_DWORD *)(SlowCase + 16) = v42;
    *(_BYTE *)(SlowCase + 8) = v13;
    if (v14 <= 7)
    {
      if ((v13 & 0xEu) > 9)
      {
        v43 = -1073741760;
LABEL_47:
        *(_DWORD *)(SlowCase + 16) = v43 | v42;
      }
    }
    else
    {
      if ((v10 - 12) >= 3)
      {
        if (v10 != 15)
          goto LABEL_48;
        v43 = 0x80000;
        goto LABEL_47;
      }
      *(_DWORD *)(SlowCase + 16) = v42 | 0x100000;
      if ((v10 - 13) <= 1)
      {
        v98 = *(JSC::VM **)(this + 88);
        if (v98)
        {
          v118 = JSC::PropertyTable::clone(a1, v98, (const JSC::PropertyTable *)a3, a4, a5, a6, a7, a8);
          goto LABEL_357;
        }
        ++*((_DWORD *)a1 + 229);
        v282 = this;
        v283 = (WTF *)v285;
        v284 = 8;
        v99 = this;
        while (1)
        {
          v100 = (unsigned __int8 *)(v99 + 15);
          if (__ldaxr((unsigned __int8 *)(v99 + 15)))
            break;
          if (__stxr(1u, v100))
            goto LABEL_160;
LABEL_161:
          v102 = v282;
          v103 = *(JSC::VM **)(v282 + 88);
          if (v103)
            goto LABEL_174;
          v104 = HIDWORD(v284);
          if (HIDWORD(v284) == (_DWORD)v284)
          {
            v272 = (int64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v283, HIDWORD(v284) + 1, (unint64_t)&v282);
            v104 = HIDWORD(v284);
            v105 = (int64_t *)((char *)v283 + 8 * HIDWORD(v284));
            v102 = *v272;
          }
          else
          {
            v105 = (int64_t *)((char *)v283 + 8 * HIDWORD(v284));
          }
          *v105 = v102;
          HIDWORD(v284) = v104 + 1;
          v106 = (unsigned __int8 *)(v282 + 15);
          v107 = __ldxr((unsigned __int8 *)(v282 + 15));
          if (v107 != 1)
          {
            __clrex();
LABEL_170:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v106, 0, a3, a4, a5, a6, a7, a8);
            goto LABEL_171;
          }
          if (__stlxr(0, v106))
            goto LABEL_170;
LABEL_171:
          v99 = *(_QWORD *)(v282 + 64);
          if (!v99)
            goto LABEL_405;
          if (*(_BYTE *)(v99 + 5) != 1)
          {
            v265 = *(_DWORD *)(v99 + 80);
            if (v265)
            {
              v99 = 16 * (v265 & 0xFFFFFFFE);
              goto LABEL_173;
            }
LABEL_405:
            v282 = 0;
LABEL_174:
            v108 = *(unsigned __int16 *)(this + 24);
            if (v108 == 65534)
            {
              v108 = -1;
            }
            else
            {
              if (v108 == 0xFFFF)
                v108 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
              v109 = *(unsigned __int8 *)(this + 14);
              if (v108 >= v109)
              {
                if (v108 >= 64)
                  v110 = v108 - 63;
                else
                  v110 = 0;
                v111 = (v110 + v109);
LABEL_188:
                if (!v103)
                {
                  v118 = JSC::PropertyTable::create(a1, (JSC::VM *)v111, a3, a4, a5, a6, a7, a8);
                  goto LABEL_201;
                }
                v112 = v111 | (v111 >> 1) | ((v111 | (v111 >> 1)) >> 2);
                v113 = v112 | (v112 >> 4) | ((v112 | (v112 >> 4)) >> 8);
                v114 = 2 * (v113 | HIWORD(v113)) + 2;
                if (v111 >= 8)
                  v115 = v114;
                else
                  v115 = 16;
                if (v115 == *((_DWORD *)v103 + 2))
                  v116 = JSC::PropertyTable::clone(a1, v103, (const JSC::PropertyTable *)a3, a4, a5, a6, a7, a8);
                else
                  v116 = JSC::PropertyTable::clone(a1, (JSC::VM *)v111, v103, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                v118 = v116;
                v119 = (unsigned __int8 *)(v282 + 15);
                v120 = __ldxr((unsigned __int8 *)(v282 + 15));
                if (v120 == 1)
                {
                  if (!__stlxr(0, v119))
                  {
LABEL_201:
                    if (__ldaxr((unsigned __int8 *)(this + 15)))
                    {
                      __clrex();
                      goto LABEL_203;
                    }
                    if (__stxr(1u, (unsigned __int8 *)(this + 15)))
LABEL_203:
                      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 15);
                    v280 = (unsigned __int8 *)(this + 15);
                    ++*((_DWORD *)a1 + 229);
                    v130 = HIDWORD(v284);
                    if (HIDWORD(v284))
                    {
                      v117 = 65534;
                      a4 = 0xFFFFLL;
                      while (2)
                      {
                        if (--v130 >= (unint64_t)HIDWORD(v284))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198BE8D74);
                        }
                        v131 = *((_QWORD *)v283 + v130);
                        v282 = v131;
                        v132 = *(unsigned int *)(v131 + 72);
                        if ((_DWORD)v132)
                        {
                          v133 = (*(_DWORD *)(v131 + 16) >> 13) & 0x1F;
                          switch(v133)
                          {
                            case 3:
                              v158 = 16 * v132;
                              v159 = *(_BYTE *)(v131 + 20);
                              v160 = *(_QWORD *)(v118 + 16);
                              v161 = v160 & 0xFFFFFFFFFFFFFFFELL;
                              v162 = *(unsigned int *)(v118 + 8);
                              v163 = *(_DWORD *)(v158 + 16);
                              if ((v160 & 1) != 0)
                              {
                                if ((v163 & 0x20) != 0)
                                  v163 = *(_DWORD *)(v158 + 32);
                                v164 = *(_DWORD *)(v118 + 12);
                                v165 = (v163 >> 8) & *(_QWORD *)&v164;
                                v166 = *(unsigned __int8 *)(v161 + v165);
                                if (*(_BYTE *)(v161 + v165))
                                {
                                  v167 = v161 + v162;
                                  v168 = 1;
                                  while (1)
                                  {
                                    v169 = (v166 - 1);
                                    v170 = *(_QWORD *)(v167 + 8 * v169);
                                    if (v158 == (v170 & 0xFFFFFFFFFFFFLL))
                                      break;
                                    v165 = ((_DWORD)v165 + v168) & v164;
                                    v166 = *(unsigned __int8 *)(v161 + v165);
                                    ++v168;
                                    if (!*(_BYTE *)(v161 + v165))
                                      goto LABEL_262;
                                  }
                                  *(_QWORD *)(v167 + 8 * v169) = v170 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v159 << 48);
                                }
                              }
                              else
                              {
                                if ((v163 & 0x20) != 0)
                                  v163 = *(_DWORD *)(v158 + 32);
                                v171 = *(_DWORD *)(v118 + 12);
                                v172 = v171 & (v163 >> 8);
                                v173 = *(_DWORD *)(v161 + 4 * v172);
                                if (v173)
                                {
                                  v174 = v161 + 4 * v162;
                                  v175 = 1;
                                  while (1)
                                  {
                                    v176 = (v173 - 1);
                                    if (*(_QWORD *)(v174 + 16 * v176) == v158)
                                      break;
                                    v172 = (v172 + v175) & v171;
                                    v173 = *(_DWORD *)(v161 + 4 * v172);
                                    ++v175;
                                    if (!v173)
                                      goto LABEL_262;
                                  }
                                  v194 = v174 + 16 * v176;
                                  if (*(_DWORD *)(v194 + 8) != -1)
                                    *(_BYTE *)(v194 + 12) = v159;
                                }
                              }
                              break;
                            case 2:
                              v146 = (WTF::StringImpl *)(16 * v132);
                              v147 = *(_QWORD *)(v118 + 16);
                              v148 = v147 & 0xFFFFFFFFFFFFFFFELL;
                              v149 = *(unsigned int *)(v118 + 8);
                              v150 = *((_DWORD *)v146 + 4);
                              if ((v147 & 1) != 0)
                              {
                                if ((v150 & 0x20) != 0)
                                  v150 = *((_DWORD *)v146 + 8);
                                v151 = *(_DWORD *)(v118 + 12);
                                v152 = (v150 >> 8) & *(_QWORD *)&v151;
                                v153 = *(unsigned __int8 *)(v148 + v152);
                                if (*(_BYTE *)(v148 + v152))
                                {
                                  v154 = 1;
                                  while (1)
                                  {
                                    v155 = *(_QWORD *)(v148 + v149 + 8 * (v153 - 1));
                                    if (v146 == (WTF::StringImpl *)(v155 & 0xFFFFFFFFFFFFLL))
                                      break;
                                    v156 = 0;
                                    v152 = ((_DWORD)v152 + v154) & v151;
                                    v153 = *(unsigned __int8 *)(v148 + v152);
                                    ++v154;
                                    v157 = 0xFFFFFFFFLL;
                                    if (!*(_BYTE *)(v148 + v152))
                                      goto LABEL_247;
                                  }
                                  v157 = HIBYTE(v155);
                                  v156 = v153;
                                  v152 = v152;
                                }
                                else
                                {
                                  v156 = 0;
                                  v157 = 0xFFFFFFFFLL;
                                }
LABEL_247:
                                v177 = v156;
                              }
                              else
                              {
                                if ((v150 & 0x20) != 0)
                                  v150 = *((_DWORD *)v146 + 8);
                                v186 = *(_DWORD *)(v118 + 12);
                                v152 = v186 & (v150 >> 8);
                                LODWORD(v177) = *(_DWORD *)(v148 + 4 * v152);
                                if ((_DWORD)v177)
                                {
                                  v187 = v148 + 4 * v149;
                                  v188 = 1;
                                  while (*(WTF::StringImpl **)(v187 + 16 * (v177 - 1)) != v146)
                                  {
                                    v152 = ((_DWORD)v152 + v188) & v186;
                                    LODWORD(v177) = *(_DWORD *)(v148 + 4 * v152);
                                    ++v188;
                                    if (!(_DWORD)v177)
                                      goto LABEL_271;
                                  }
                                  v157 = *(unsigned int *)(v187 + 16 * (v177 - 1) + 8);
                                  v152 = v152;
                                }
                                else
                                {
LABEL_271:
                                  v157 = 0xFFFFFFFFLL;
                                }
                                v177 = v177;
                              }
                              v178 = v177 | (v152 << 32);
                              if (v157 != 0xFFFFFFFFLL)
                              {
                                v179 = HIDWORD(v178);
                                if ((v147 & 1) != 0)
                                {
                                  *(_BYTE *)(v148 + v179) = (v149 >> 1) + 1;
                                  v180 = *(unsigned int *)(v118 + 8);
                                  v195 = v148 + v180 + 8 * (v178 - 1);
                                  *(_QWORD *)v195 = ((unint64_t)*(unsigned __int16 *)(v195 + 6) << 48) | 1;
                                }
                                else
                                {
                                  *(_DWORD *)(v148 + 4 * v179) = (v149 >> 1) + 1;
                                  v180 = *(unsigned int *)(v118 + 8);
                                  *(_QWORD *)(v148 + 4 * v180 + 16 * (v178 - 1)) = 1;
                                }
                                if (*(_DWORD *)v146 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v146, (WTF::AtomStringImpl *)0xFFFE, a3, 0xFFFFLL, a5, a6, a7, a8);
                                  WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
                                  a4 = 0xFFFFLL;
                                  v117 = 65534;
                                  LODWORD(v180) = *(_DWORD *)(v118 + 8);
                                }
                                else
                                {
                                  *(_DWORD *)v146 -= 2;
                                }
                                a3 = (*(_DWORD *)(v118 + 24) - 1);
                                v181 = *(_DWORD *)(v118 + 28) + 1;
                                *(_DWORD *)(v118 + 24) = a3;
                                *(_DWORD *)(v118 + 28) = v181;
                                if (v180 <= 4 * v181)
                                {
                                  JSC::PropertyTable::rehash((JSC::PropertyTable *)v118, a1, a3, 1, a5, a6, a7, a8);
                                  a4 = 0xFFFFLL;
                                  v117 = 65534;
                                }
                              }
                              v182 = *(unsigned __int16 *)(v282 + 22);
                              if (v182 == 65534)
                              {
                                v182 = -1;
                              }
                              else if (v182 == 0xFFFF)
                              {
                                v182 = *(_DWORD *)(*(_QWORD *)(v282 + 64) + 88);
                              }
                              LODWORD(v286[0]) = v182;
                              v183 = *(_QWORD *)(v118 + 32);
                              if (!v183)
                              {
                                v202 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                                *v202 = 0;
                                v202[1] = 0;
                                v205 = *(_QWORD *)(v118 + 32);
                                *(_QWORD *)(v118 + 32) = v202;
                                if (v205)
                                {
                                  v206 = *(_QWORD *)v205;
                                  if (*(_QWORD *)v205)
                                  {
                                    *(_QWORD *)v205 = 0;
                                    *(_DWORD *)(v205 + 8) = 0;
                                    v207 = v205;
                                    WTF::fastFree(v206, v203, a3, v204, a5, a6, a7, a8);
                                    v205 = v207;
                                  }
                                  WTF::fastFree(v205, v203, a3, v204, a5, a6, a7, a8);
                                  v183 = *(_QWORD *)(v118 + 32);
                                }
                                else
                                {
                                  v183 = (uint64_t)v202;
                                }
                                v117 = 65534;
                                a4 = 0xFFFFLL;
                              }
                              v184 = *(unsigned int *)(v183 + 12);
                              if ((_DWORD)v184 == *(_DWORD *)(v183 + 8))
                              {
                                v185 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v183, v184 + 1, (unint64_t)v286);
                                a4 = 0xFFFFLL;
                                v117 = 65534;
                                *(_DWORD *)(*(_QWORD *)v183 + 4 * *(unsigned int *)(v183 + 12)) = *v185;
                              }
                              else
                              {
                                *(_DWORD *)(*(_QWORD *)v183 + 4 * v184) = v182;
                              }
                              ++*(_DWORD *)(v183 + 12);
                              break;
                            case 1:
                              v134 = *(unsigned __int16 *)(v131 + 22);
                              if (v134 == 65534)
                              {
                                v134 = -1;
                              }
                              else if (v134 == 0xFFFF)
                              {
                                v134 = *(_DWORD *)(*(_QWORD *)(v131 + 64) + 88);
                              }
                              v135 = *(unsigned __int8 *)(v131 + 20);
                              v136 = *(_QWORD *)(v118 + 32);
                              if (v136)
                              {
                                v277 = *(_DWORD *)(v136 + 12);
                                if (v277)
                                  *(_DWORD *)(v136 + 12) = v277 - 1;
                              }
                              v137 = 16 * v132;
                              v138 = *(_QWORD *)(v118 + 16);
                              v139 = v138 & 0xFFFFFFFFFFFFFFFELL;
                              v140 = *(unsigned int *)(v118 + 8);
                              v141 = *(_DWORD *)(v137 + 16);
                              if ((v138 & 1) != 0)
                              {
                                if ((v141 & 0x20) != 0)
                                  v141 = *(_DWORD *)(v137 + 32);
                                v142 = *(_DWORD *)(v118 + 12);
                                v143 = (v141 >> 8) & *(_QWORD *)&v142;
                                v144 = *(unsigned __int8 *)(v139 + v143);
                                if (*(_BYTE *)(v139 + v143))
                                {
                                  v145 = 1;
                                  while (v137 != (*(_QWORD *)(v139 + v140 + 8 * (v144 - 1)) & 0xFFFFFFFFFFFFLL))
                                  {
                                    v143 = ((_DWORD)v143 + v145) & v142;
                                    v144 = *(unsigned __int8 *)(v139 + v143);
                                    ++v145;
                                    if (!*(_BYTE *)(v139 + v143))
                                      goto LABEL_287;
                                  }
                                  break;
                                }
LABEL_287:
                                *(_DWORD *)v137 += 2;
                                v196 = *(_DWORD *)(v118 + 24);
                                v198 = (v138 & 1) == 0 || v134 < 256;
                                if (*(_DWORD *)(v118 + 28) + v196 >= v140 >> 1 || !v198)
                                {
                                  v279 = v135;
                                  JSC::PropertyTable::rehash((JSC::PropertyTable *)v118, a1, (v196 + 1), v134 < 256, a5, a6, a7, a8);
                                  v138 = *(_QWORD *)(v118 + 16);
                                  v139 = v138 & 0xFFFFFFFFFFFFFFFELL;
                                  v266 = *(unsigned int *)(v118 + 8);
                                  v267 = *(_DWORD *)(v137 + 16);
                                  if ((v138 & 1) != 0)
                                  {
                                    if ((v267 & 0x20) != 0)
                                      v267 = *(_DWORD *)(v137 + 32);
                                    v268 = *(_DWORD *)(v118 + 12);
                                    v143 = (v267 >> 8) & *(_QWORD *)&v268;
                                    v269 = *(unsigned __int8 *)(v139 + v143);
                                    if (*(_BYTE *)(v139 + v143))
                                    {
                                      v270 = v139 + v266;
                                      v271 = 1;
                                      do
                                      {
                                        if (v137 == (*(_QWORD *)(v270 + 8 * (v269 - 1)) & 0xFFFFFFFFFFFFLL))
                                          break;
                                        v143 = ((_DWORD)v143 + v271) & v268;
                                        v269 = *(unsigned __int8 *)(v139 + v143);
                                        ++v271;
                                      }
                                      while (*(_BYTE *)(v139 + v143));
                                    }
                                  }
                                  else
                                  {
                                    if ((v267 & 0x20) != 0)
                                      v267 = *(_DWORD *)(v137 + 32);
                                    v273 = *(_DWORD *)(v118 + 12);
                                    LODWORD(v143) = v273 & (v267 >> 8);
                                    v274 = *(_DWORD *)(v139 + 4 * v143);
                                    if (v274)
                                    {
                                      v275 = v139 + 4 * v266;
                                      v276 = 1;
                                      do
                                      {
                                        if (*(_QWORD *)(v275 + 16 * (v274 - 1)) == v137)
                                          break;
                                        LODWORD(v143) = (v143 + v276) & v273;
                                        v274 = *(_DWORD *)(v139 + 4 * v143);
                                        ++v276;
                                      }
                                      while (v274);
                                    }
                                  }
                                  v117 = 65534;
                                  a4 = 0xFFFFLL;
                                  v135 = v279;
                                }
                                v199 = *(_DWORD *)(v118 + 28) + *(_DWORD *)(v118 + 24);
                                v200 = v199 + 1;
                                if ((v138 & 1) != 0)
                                {
                                  *(_BYTE *)(v139 + v143) = v200;
                                  *(_QWORD *)(v139 + *(unsigned int *)(v118 + 8) + 8 * v199) = v137 | ((unint64_t)(v135 | (v134 << 8)) << 48);
                                }
                                else
                                {
                                  *(_DWORD *)(v139 + 4 * v143) = v200;
                                  v201 = v139 + 4 * *(unsigned int *)(v118 + 8) + 16 * v199;
                                  *(_QWORD *)v201 = v137;
                                  *(_DWORD *)(v201 + 8) = v134;
                                  *(_BYTE *)(v201 + 12) = v135;
                                }
                                ++*(_DWORD *)(v118 + 24);
                                break;
                              }
                              if ((v141 & 0x20) != 0)
                                v141 = *(_DWORD *)(v137 + 32);
                              v189 = *(_DWORD *)(v118 + 12);
                              LODWORD(v143) = v189 & (v141 >> 8);
                              v190 = *(_DWORD *)(v139 + 4 * v143);
                              if (!v190)
                                goto LABEL_287;
                              v191 = v139 + 4 * v140;
                              v192 = 1;
                              while (1)
                              {
                                v193 = (v190 - 1);
                                if (*(_QWORD *)(v191 + 16 * v193) == v137)
                                  break;
                                LODWORD(v143) = (v143 + v192) & v189;
                                v190 = *(_DWORD *)(v139 + 4 * v143);
                                ++v192;
                                if (!v190)
                                  goto LABEL_287;
                              }
                              if (*(_DWORD *)(v191 + 16 * v193 + 8) == -1)
                                goto LABEL_287;
                              break;
                          }
                        }
LABEL_262:
                        if (!v130)
                          break;
                        continue;
                      }
                    }
                    v281[0] = &v282;
                    v281[1] = &v283;
                    v289[0] = v118;
                    v216 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                    if (!v216)
                      v216 = WTF::Thread::initializeCurrentTLS(0);
                    if ((*(_BYTE *)(v216 + 5) & 8) != 0)
                      goto LABEL_339;
                    v217 = *(_DWORD *)(v118 + 24);
                    v218 = *(_QWORD *)(v118 + 32);
                    if (v218)
                      LODWORD(v218) = *(_DWORD *)(v218 + 12);
                    v219 = v218 + v217;
                    v220 = *(unsigned __int8 *)(this + 14);
                    v221 = v218 + v217 - v220;
                    if (v219 < v220)
                      v221 = 0;
                    v287 = v221;
                    v288 = v219;
                    v286[0] = this;
                    v286[1] = (uint64_t)v289;
                    v286[2] = (uint64_t)&v288;
                    v286[3] = (uint64_t)&v287;
                    v286[4] = (uint64_t)v281;
                    v222 = *(unsigned __int16 *)(this + 24);
                    if (v222 == 65534)
                    {
                      v223 = -1;
                    }
                    else
                    {
                      if (v222 == 0xFFFF)
                        v223 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
                      else
                        v223 = *(unsigned __int16 *)(this + 24);
                      if (v223 >= (int)v220)
                      {
                        if (v223 >= 64)
                          v224 = (v223 - 63);
                        else
                          v224 = 0;
                        v225 = v224 + v220;
LABEL_331:
                        if (v225 != v219)
                          JSC::Structure::checkOffsetConsistency<JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0>(JSC::PropertyTable *,JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0 const&)const::{lambda(char const*)#1}::operator()(v286, "numberOfSlotsForMaxOffset doesn't match totalSize");
                        if (v222 == 65534)
                          goto LABEL_337;
                        if (v222 == 0xFFFF)
                          v222 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
                        v70 = __OFSUB__(v222, 63);
                        v227 = v222 - 63;
                        if ((v227 < 0) ^ v70 | (v227 == 0))
LABEL_337:
                          v227 = 0;
                        if (v227 != v221)
                          JSC::Structure::checkOffsetConsistency<JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0>(JSC::PropertyTable *,JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0 const&)const::{lambda(char const*)#1}::operator()(v286, "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset");
LABEL_339:
                        v228 = __ldxr(v280);
                        if (v228 == 1)
                        {
                          if (!__stlxr(0, v280))
                          {
LABEL_344:
                            v229 = *((_DWORD *)a1 + 229) - 1;
                            *((_DWORD *)a1 + 229) = v229;
                            if (*((unsigned __int8 *)a1 + 1198) | HIBYTE(dword_1ECF4C5CE))
                              v230 = v229 == 0;
                            else
                              v230 = 0;
                            if (v230)
                            {
                              *((_BYTE *)a1 + 1198) = 0;
                              JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a1 + 192, 0);
                            }
                            v231 = v283;
                            if (v285 != (_QWORD *)v283 && v283)
                            {
                              v283 = 0;
                              LODWORD(v284) = 0;
                              WTF::fastFree((unint64_t)v231, (void *)v117, a3, a4, a5, a6, a7, a8);
                            }
                            v232 = *((_DWORD *)a1 + 229) - 1;
                            *((_DWORD *)a1 + 229) = v232;
                            if (*((unsigned __int8 *)a1 + 1198) | HIBYTE(dword_1ECF4C5CE))
                              v233 = v232 == 0;
                            else
                              v233 = 0;
                            if (v233)
                            {
                              *((_BYTE *)a1 + 1198) = 0;
                              JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a1 + 192, 0);
                            }
LABEL_357:
                            v234 = (unsigned __int8 *)(SlowCase + 15);
                            if (__ldaxr((unsigned __int8 *)(SlowCase + 15)))
                            {
                              __clrex();
                              goto LABEL_359;
                            }
                            if (__stxr(1u, v234))
LABEL_359:
                              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(SlowCase + 15);
                            *(_DWORD *)(SlowCase + 16) |= 4u;
                            if (v118)
                            {
                              *(_QWORD *)(SlowCase + 88) = v118;
                              if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
                                JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
                            }
                            else
                            {
                              *(_QWORD *)(SlowCase + 88) = 0;
                            }
                            v236 = *(unsigned int *)(SlowCase + 72);
                            *(_DWORD *)(SlowCase + 72) = 0;
                            if ((_DWORD)v236)
                            {
                              v237 = (WTF::StringImpl *)(16 * v236);
                              v238 = *(_DWORD *)(16 * v236) - 2;
                              if (v238)
                              {
                                *(_DWORD *)v237 = v238;
                              }
                              else
                              {
                                WTF::StringImpl::~StringImpl(v237, (WTF::AtomStringImpl *)v117, a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
                              }
                            }
                            v239 = __ldxr(v234);
                            if (v239 == 1)
                            {
                              if (!__stlxr(0, v234))
                              {
LABEL_371:
                                v240 = *(unsigned __int16 *)(this + 24);
                                v241 = -2;
                                if (v240 != 65534)
                                {
                                  if (v240 != 0xFFFF)
                                    goto LABEL_373;
                                  v240 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
                                  if (v240 != -1)
                                  {
                                    if (v240 <= 65533)
                                    {
LABEL_373:
                                      *(_WORD *)(SlowCase + 24) = v240;
                                      goto LABEL_374;
                                    }
                                    if (*(__int16 *)(SlowCase + 24) == -1)
                                    {
                                      *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84) = v240;
                                      goto LABEL_374;
                                    }
                                    *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)SlowCase, a1, (JSC::Structure *)a3, a4, a5, a6, a7, a8)+ 21) = v240;
                                    __dmb(0xAu);
                                    v241 = -1;
                                  }
                                }
                                *(_WORD *)(SlowCase + 24) = v241;
LABEL_374:
                                v242 = *(_QWORD *)(SlowCase + 88);
                                if (!v242)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198BE8C04);
                                }
                                if (v10 == 13)
                                {
                                  JSC::PropertyTable::seal((JSC::PropertyTable *)v242);
                                  v256 = *(_DWORD *)(SlowCase + 16) | 0xC0000040;
                                }
                                else
                                {
                                  v243 = *(_QWORD *)(v242 + 16);
                                  v244 = v243 & 0xFFFFFFFFFFFFFFFELL;
                                  v245 = *(unsigned int *)(v242 + 8);
                                  v246 = *(_DWORD *)(v242 + 24);
                                  v247 = (*(_DWORD *)(v242 + 28) + v246);
                                  if ((v243 & 1) != 0)
                                  {
                                    if ((_DWORD)v247)
                                    {
                                      v251 = (uint64_t *)(v244 + v245);
                                      v252 = 8 * v247;
                                      do
                                      {
                                        v253 = *v251;
                                        if ((*v251 & 0xFFFFFFFFFFFFLL) != 1)
                                        {
                                          if ((v253 & 0x10000000000000) != 0)
                                            v254 = 0x8000000000000;
                                          else
                                            v254 = 0xA000000000000;
                                          *v251 = v254 | v253;
                                        }
                                        ++v251;
                                        v252 -= 8;
                                      }
                                      while (v252);
                                    }
                                  }
                                  else if ((_DWORD)v247)
                                  {
                                    v248 = 16 * v247;
                                    v249 = (_BYTE *)(v244 + 4 * v245 + 12);
                                    do
                                    {
                                      if (*(_QWORD *)(v249 - 12) != 1)
                                      {
                                        if ((*v249 & 0x10) != 0)
                                          v250 = 8;
                                        else
                                          v250 = 10;
                                        *v249 |= v250;
                                      }
                                      v249 += 16;
                                      v248 -= 16;
                                    }
                                    while (v248);
                                  }
                                  v255 = *(_DWORD *)(SlowCase + 16);
                                  *(_DWORD *)(SlowCase + 16) = v255 | 0xC0000040;
                                  if (v10 != 14 || !v246)
                                    goto LABEL_63;
                                  v256 = v255 | 0xC0000050;
                                }
                                *(_DWORD *)(SlowCase + 16) = v256;
                                goto LABEL_63;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(SlowCase + 15), 0, a3, a4, a5, a6, a7, a8);
                            goto LABEL_371;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v280, 0, a3, a4, a5, a6, a7, a8);
                        goto LABEL_344;
                      }
                    }
                    v225 = v223 + 1;
                    goto LABEL_331;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v119, 0, a3, a4, a5, a6, a7, a8);
                goto LABEL_201;
              }
            }
            v111 = (v108 + 1);
            goto LABEL_188;
          }
LABEL_173:
          v282 = v99;
          if (!v99)
            goto LABEL_174;
        }
        __clrex();
LABEL_160:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v100);
        goto LABEL_161;
      }
    }
LABEL_48:
    v44 = *(_QWORD *)(this + 88);
    if (v44)
    {
      if ((*(_BYTE *)(this + 16) & 4) == 0)
      {
        v45 = (unsigned __int8 *)(this + 15);
        if (__ldaxr((unsigned __int8 *)(this + 15)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v45))
        {
LABEL_53:
          *(_QWORD *)(this + 88) = 0;
          v47 = __ldxr(v45);
          if (v47 == 1)
          {
            if (!__stlxr(0, v45))
              goto LABEL_58;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(this + 15), 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_58;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 15);
        goto LABEL_53;
      }
      v81 = (JSC::VM *)(*(_DWORD *)(v44 + 24) + 1);
      if (v81 >= 8)
      {
        v83 = v81 | (v81 >> 1) | ((v81 | (v81 >> 1)) >> 2);
        v84 = v83 | (v83 >> 4) | ((v83 | (v83 >> 4)) >> 8);
        v82 = 2 * (v84 | HIWORD(v84)) + 2;
      }
      else
      {
        v82 = 16;
      }
      if (v82 == *(_DWORD *)(v44 + 8))
        v80 = JSC::PropertyTable::clone(a1, *(JSC::VM **)(this + 88), (const JSC::PropertyTable *)a3, a4, a5, a6, a7, a8);
      else
        v80 = JSC::PropertyTable::clone(a1, v81, *(const JSC::PropertyTable **)(this + 88), (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    }
    else
    {
      JSC::Structure::materializePropertyTable((JSC::Structure *)this, a1, 0, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    }
    v44 = v80;
    if (!v80)
    {
      *(_QWORD *)(SlowCase + 88) = 0;
      goto LABEL_60;
    }
LABEL_58:
    *(_QWORD *)(SlowCase + 88) = v44;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
LABEL_60:
    v48 = *(unsigned __int16 *)(this + 24);
    v49 = -2;
    if (v48 != 65534)
    {
      if (v48 != 0xFFFF)
      {
LABEL_62:
        *(_WORD *)(SlowCase + 24) = v48;
        goto LABEL_63;
      }
      v48 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
      if (v48 != -1)
      {
        if (v48 <= 65533)
          goto LABEL_62;
        if (*(__int16 *)(SlowCase + 24) == -1)
        {
          *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84) = v48;
          goto LABEL_63;
        }
        *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)SlowCase, a1, (JSC::Structure *)a3, a4, a5, a6, a7, a8)+ 21) = v48;
        __dmb(0xAu);
        v49 = -1;
      }
    }
    *(_WORD *)(SlowCase + 24) = v49;
LABEL_63:
    if ((*(_BYTE *)(this + 16) & 3) == 0)
    {
      v50 = (unsigned __int8 *)(this + 15);
      if (__ldaxr((unsigned __int8 *)(this + 15)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v50))
      {
        goto LABEL_67;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 15);
LABEL_67:
      JSC::StructureTransitionTable::add((JSC::StructureTransitionTable *)(this + 80), a1, (JSC::JSCell *)this, SlowCase, a5, a6, a7, a8);
      goto LABEL_68;
    }
    JSC::Structure::ensurePropertyTable((JSC::Structure *)SlowCase, a1, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v92 = v91;
    v50 = (unsigned __int8 *)(SlowCase + 15);
    if (__ldaxr((unsigned __int8 *)(SlowCase + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v50))
    {
      goto LABEL_146;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(SlowCase + 15);
LABEL_146:
    *(_DWORD *)(SlowCase + 16) |= 4u;
    if (v92)
    {
      *(_QWORD *)(SlowCase + 88) = v92;
      if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, SlowCase);
    }
    else
    {
      *(_QWORD *)(SlowCase + 88) = 0;
    }
    v94 = *(_QWORD *)(SlowCase + 64);
    if (v94 && *(_BYTE *)(v94 + 5) != 1)
      *(_DWORD *)(v94 + 80) = 0;
    else
      *(_QWORD *)(SlowCase + 64) = 0;
    v95 = *(unsigned int *)(SlowCase + 72);
    *(_DWORD *)(SlowCase + 72) = 0;
    if ((_DWORD)v95)
    {
      v96 = (WTF::StringImpl *)(16 * v95);
      v97 = *(_DWORD *)(16 * v95) - 2;
      if (v97)
      {
        *(_DWORD *)v96 = v97;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v96, v90, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      }
    }
LABEL_68:
    v58 = __ldxr(v50);
    if (v58 == 1)
    {
      if (!__stlxr(0, v50))
        goto LABEL_73;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v50, 0, v52, v53, v54, v55, v56, v57);
LABEL_73:
    v59 = *(_QWORD *)(SlowCase + 88);
    if (!v59)
      goto LABEL_103;
    v286[0] = *(_QWORD *)(SlowCase + 88);
    v60 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v60)
      v60 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v60 + 5) & 8) != 0)
      goto LABEL_103;
    v61 = *(_DWORD *)(v59 + 24);
    v62 = *(_QWORD *)(v59 + 32);
    if (v62)
      LODWORD(v62) = *(_DWORD *)(v62 + 12);
    v63 = v62 + v61;
    LODWORD(v281[0]) = v63;
    v64 = *(unsigned __int8 *)(SlowCase + 14);
    v65 = v62 + v61 - v64;
    if (v63 < v64)
      v65 = 0;
    LODWORD(v289[0]) = v65;
    v283 = (WTF *)SlowCase;
    v284 = (uint64_t)v286;
    v285[0] = v281;
    v285[1] = v289;
    v285[2] = &v282;
    v66 = *(unsigned __int16 *)(SlowCase + 24);
    if (v66 == 65534)
    {
      v67 = -1;
    }
    else
    {
      if (v66 == 0xFFFF)
        v67 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
      else
        v67 = *(unsigned __int16 *)(SlowCase + 24);
      if (v67 >= (int)v64)
      {
        if (v67 >= 64)
          v68 = (v67 - 63);
        else
          v68 = 0;
        v69 = v68 + v64;
        goto LABEL_95;
      }
    }
    v69 = v67 + 1;
LABEL_95:
    if (v69 != v63)
      JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v283, "numberOfSlotsForMaxOffset doesn't match totalSize");
    if (v66 == 65534)
      goto LABEL_101;
    if (v66 == 0xFFFF)
      v66 = *(_DWORD *)(*(_QWORD *)(SlowCase + 64) + 84);
    v70 = __OFSUB__(v66, 63);
    v71 = v66 - 63;
    if ((v71 < 0) ^ v70 | (v71 == 0))
LABEL_101:
      v71 = 0;
    if (v71 != v65)
      JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v283, "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset");
LABEL_103:
    v72 = *((_DWORD *)a1 + 229) - 1;
    *((_DWORD *)a1 + 229) = v72;
    if (*((unsigned __int8 *)a1 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v72)
    {
      *((_BYTE *)a1 + 1198) = 0;
      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a1 + 192, 0);
    }
    return SlowCase;
  }
  SlowCase = v16 & 0xFFFFFFFFFFFFFFFELL;
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_23;
  v26 = (*(_DWORD *)(SlowCase + 16) >> 13) & 0x1F;
  if ((_DWORD)v26 == 16)
  {
    v27 = *(_QWORD *)(SlowCase + 48);
    v28 = v27 | 0x1000000000000000;
    v230 = v27 == 2;
    v29 = 0x1000000000000000;
    if (!v230)
      v29 = v28;
  }
  else
  {
    v29 = (v26 << 56) | (16 * *(unsigned int *)(SlowCase + 72));
  }
  if ((v29 | ((unint64_t)*(unsigned __int8 *)(SlowCase + 20) << 48)) != a3 << 56)
    goto LABEL_23;
  return SlowCase;
}

void JSC::Structure::ensurePropertyTable(JSC::Structure *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  JSC::Structure *v11;
  unsigned __int8 *v12;
  JSC::Structure *v14;
  const JSC::PropertyTable *v15;
  int v16;
  JSC::Structure **v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t SlowCase;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t *v28;
  uint64_t v29;
  char v30;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t impl_casual_case;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  JSC::Structure **v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t casual;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  unint64_t *v171;
  unsigned int v172;
  unsigned int v173;
  _opaque_pthread_t *v174;
  unint64_t v176;
  BOOL v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  WTF *v182;
  int v183;
  BOOL v184;
  char *stackaddr_np;
  _opaque_pthread_t *v186;
  unint64_t v187;
  int v188;
  _opaque_pthread_t *v189;
  rlim_t rlim_cur;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  unint64_t v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t StatusReg;
  _QWORD v218[2];
  JSC::Structure *v219;
  WTF *v220;
  uint64_t v221;
  _BYTE v222[64];
  rlimit v223;
  _QWORD *v224;
  int *v225;
  _QWORD *v226;
  int v227;
  unint64_t v228;
  _QWORD v229[2];

  if (*((_QWORD *)this + 11))
    return;
  v10 = (unint64_t *)((char *)a2 + 39168);
  ++*((_DWORD *)a2 + 229);
  v219 = this;
  v220 = (WTF *)v222;
  v221 = 8;
  v11 = this;
  while (1)
  {
    v12 = (unsigned __int8 *)v11 + 15;
    if (__ldaxr((unsigned __int8 *)v11 + 15))
    {
      __clrex();
LABEL_5:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
      goto LABEL_6;
    }
    if (__stxr(1u, v12))
      goto LABEL_5;
LABEL_6:
    v14 = v219;
    v15 = (const JSC::PropertyTable *)*((_QWORD *)v219 + 11);
    if (v15)
      goto LABEL_19;
    v16 = HIDWORD(v221);
    if (HIDWORD(v221) == (_DWORD)v221)
    {
      v64 = (JSC::Structure **)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v220, HIDWORD(v221) + 1, (unint64_t)&v219);
      v16 = HIDWORD(v221);
      v17 = (JSC::Structure **)((char *)v220 + 8 * HIDWORD(v221));
      v14 = *v64;
    }
    else
    {
      v17 = (JSC::Structure **)((char *)v220 + 8 * HIDWORD(v221));
    }
    *v17 = v14;
    HIDWORD(v221) = v16 + 1;
    v18 = (unsigned __int8 *)v219 + 15;
    v19 = __ldxr((unsigned __int8 *)v219 + 15);
    if (v19 != 1)
    {
      __clrex();
LABEL_15:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_16;
    }
    if (__stlxr(0, v18))
      goto LABEL_15;
LABEL_16:
    v11 = (JSC::Structure *)*((_QWORD *)v219 + 8);
    if (!v11)
      goto LABEL_95;
    if (*((_BYTE *)v11 + 5) != 1)
      break;
LABEL_18:
    v219 = v11;
    if (!v11)
      goto LABEL_19;
  }
  v63 = *((_DWORD *)v11 + 20);
  if (v63)
  {
    v11 = (JSC::Structure *)(16 * (v63 & 0xFFFFFFFE));
    goto LABEL_18;
  }
LABEL_95:
  v219 = 0;
LABEL_19:
  v20 = *((unsigned __int16 *)this + 12);
  if (v20 == 65534)
  {
    v20 = -1;
    goto LABEL_39;
  }
  if (v20 == 0xFFFF)
    v20 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  v21 = *((unsigned __int8 *)this + 14);
  if (v20 < v21)
  {
LABEL_39:
    v23 = (v20 + 1);
    if (!v15)
      goto LABEL_27;
LABEL_40:
    v37 = v23 | (v23 >> 1) | ((v23 | (v23 >> 1)) >> 2);
    v38 = v37 | (v37 >> 4) | ((v37 | (v37 >> 4)) >> 8);
    v39 = 2 * (v38 | HIWORD(v38)) + 2;
    if (v23 >= 8)
      v40 = v39;
    else
      v40 = 16;
    if (v40 != *((_DWORD *)v15 + 2))
    {
      SlowCase = JSC::PropertyTable::clone(a2, (JSC::VM *)v23, v15, a4, a5, a6, a7, a8);
      goto LABEL_53;
    }
    SlowCase = *v10;
    if (*v10 >= v10[1])
    {
      SlowCase = v10[2];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(a2, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a2 + 39144, (char *)a2 + 192, 48, 0, 0);
        goto LABEL_46;
      }
      v65 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
      v10[1] = SlowCase + HIDWORD(v65);
      v10[2] = SlowCase + (int)v65;
    }
    *v10 = SlowCase + 48;
LABEL_46:
    *(_DWORD *)SlowCase = 0;
    JSC::PropertyTable::PropertyTable((JSC::PropertyTable *)SlowCase, a2, v15);
    if (*((_BYTE *)a2 + 755))
      __dmb(0xAu);
    v41 = *(unsigned int *)(SlowCase + 8);
    v42 = 4 * v41;
    v43 = 3;
    if ((*(_QWORD *)(SlowCase + 16) & 1) != 0)
      v42 = *(unsigned int *)(SlowCase + 8);
    else
      v43 = 4;
    v44 = (((v41 >> 1) + 1) << v43) + v42;
    if (v44 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, SlowCase, v44, a5, a6, a7, a8);
LABEL_53:
    v45 = (unsigned __int8 *)v219 + 15;
    v46 = __ldxr((unsigned __int8 *)v219 + 15);
    if (v46 == 1)
    {
      if (!__stlxr(0, v45))
        goto LABEL_58;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v45, 0, a3, v44, a5, a6, a7, a8);
    goto LABEL_58;
  }
  if (v20 >= 64)
    v22 = v20 - 63;
  else
    v22 = 0;
  v23 = (v22 + v21);
  if (v15)
    goto LABEL_40;
LABEL_27:
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_28;
  SlowCase = v10[2];
  if ((SlowCase & 1) != 0)
  {
    JSC::sanitizeStackForVM(a2, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a2 + 39144, (char *)a2 + 192, 48, 0, 0);
  }
  else
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v66);
    v10[2] = SlowCase + (int)v66;
LABEL_28:
    *v10 = SlowCase + 48;
  }
  *(_DWORD *)SlowCase = 0;
  v25 = v10[323];
  v26 = *(_DWORD *)(v25 + 8);
  *(_DWORD *)SlowCase = v25 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  if (v23 >= 8)
  {
    v61 = v23 | (v23 >> 1) | ((v23 | (v23 >> 1)) >> 2);
    v62 = v61 | (v61 >> 4) | ((v61 | (v61 >> 4)) >> 8);
    v27 = 2 * (v62 | HIWORD(v62)) + 2;
  }
  else
  {
    v27 = 16;
  }
  *(_QWORD *)(SlowCase + 16) = 0;
  v28 = (unint64_t *)(SlowCase + 16);
  *(_DWORD *)(SlowCase + 8) = v27;
  *(_DWORD *)(SlowCase + 12) = v27 - 1;
  v29 = v27;
  v30 = 3;
  if (v27 >= 0x1FE)
  {
    v30 = 4;
    v29 = 4 * v27;
  }
  v31 = ((unint64_t)((v27 >> 1) + 1) << v30) + v29;
  *(_QWORD *)(SlowCase + 24) = 0;
  *(_QWORD *)(SlowCase + 32) = 0;
  v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v32)
    goto LABEL_37;
  v33 = (v31 + 15) >> 4;
  if (v31 <= 0x1A0)
  {
    v34 = 23 * v33 + 7;
  }
  else
  {
    if (v31 > 0x2710)
      goto LABEL_37;
    v34 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v33 + 626);
    if (*(_DWORD *)(v32 + 8052) <= v34)
      goto LABEL_37;
  }
  v50 = v32 + 8 * v34;
  v51 = v50 + 8064;
  *(_BYTE *)(v50 + 8064) = 1;
  v52 = *(unsigned int *)(v50 + 8080);
  if ((_DWORD)v52)
  {
    *(_DWORD *)(v51 + 16) = v52 - *(_DWORD *)(v51 + 20);
    impl_casual_case = *(_QWORD *)(v51 + 8) - v52;
    goto LABEL_71;
  }
  v58 = *(_QWORD *)(v51 + 40);
  v59 = *(_QWORD *)(v51 + 24);
  if (!v58)
  {
    if (*(_BYTE *)(v51 + 5) == 6)
    {
      v67 = *(unsigned int *)(v51 + 32);
      v68 = *(_DWORD *)(v51 + 36);
      if (v67 < v68)
      {
        *(_QWORD *)(v51 + 8 * v67 + 56) = 0;
        v69 = (unint64_t *)(8 * v34 + 8 * v67 + v32 + 8128);
        v70 = v68 - 1 - v67;
        while (v70)
        {
          v59 += 1024;
          v72 = *v69++;
          v71 = v72;
          LODWORD(v67) = v67 + 1;
          --v70;
          if (v72)
          {
            v58 = __rbit64(v71);
            *(_DWORD *)(v51 + 32) = v67;
            *(_QWORD *)(v51 + 24) = v59;
            goto LABEL_90;
          }
        }
        *(_DWORD *)(v51 + 32) = v68;
      }
    }
    *(_BYTE *)v51 = 0;
LABEL_37:
    impl_casual_case = (unint64_t)bmalloc_allocate_impl_casual_case(v31, 1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_72;
  }
LABEL_90:
  v60 = __clz(v58);
  *(_QWORD *)(v51 + 40) = v58 & ~(0x8000000000000000 >> v60);
  impl_casual_case = v59 + 16 * v60;
LABEL_71:
  *(_BYTE *)v51 = 0;
  v35 = 1;
LABEL_72:
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    if (!(v31 >> 24))
      goto LABEL_81;
    v53 = pas_page_malloc_cached_alignment;
    if (!pas_page_malloc_cached_alignment)
    {
      v53 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v53;
    }
    if (((v53 - 1) & (v31 | impl_casual_case)) != 0)
    {
LABEL_81:
      bzero((void *)impl_casual_case, v31);
    }
    else
    {
      if (!v53)
        pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
      mmap((void *)impl_casual_case, v31, 3, 4114, 889192448, 0);
    }
  }
  v54 = impl_casual_case | (v27 < 0x1FE);
  *v28 = v54;
  if (*((_BYTE *)a2 + 755))
  {
    __dmb(0xAu);
    v54 = *v28;
  }
  v55 = *(unsigned int *)(SlowCase + 8);
  v56 = 4 * v55;
  v181 = (v54 & 1) == 0;
  v57 = 3;
  if (v181)
    v57 = 4;
  else
    v56 = *(unsigned int *)(SlowCase + 8);
  v44 = (((v55 >> 1) + 1) << v57) + v56;
  if (v44 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, SlowCase, v44, a5, a6, a7, a8);
LABEL_58:
  v47 = (unsigned __int8 *)this + 15;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stxr(1u, v47))
LABEL_60:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
  ++*((_DWORD *)a2 + 229);
  if (SlowCase)
  {
    *((_QWORD *)this + 11) = SlowCase;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
  }
  v49 = HIDWORD(v221);
  if (HIDWORD(v221))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (--v49 >= (unint64_t)HIDWORD(v221))
      {
        __break(0xC471u);
        return;
      }
      v73 = *((_QWORD *)v220 + v49);
      v219 = (JSC::Structure *)v73;
      v74 = *(unsigned int *)(v73 + 72);
      if (!(_DWORD)v74)
        goto LABEL_112;
      v75 = (*(_DWORD *)(v73 + 16) >> 13) & 0x1F;
      switch(v75)
      {
        case 3:
          v100 = 16 * v74;
          v101 = *(_BYTE *)(v73 + 20);
          v102 = *(_QWORD *)(SlowCase + 16);
          v103 = v102 & 0xFFFFFFFFFFFFFFFELL;
          v104 = *(unsigned int *)(SlowCase + 8);
          v105 = *(_DWORD *)(16 * v74 + 0x10);
          if ((v102 & 1) == 0)
          {
            if ((v105 & 0x20) != 0)
              v105 = *(_DWORD *)(16 * v74 + 0x20);
            v113 = *(_DWORD *)(SlowCase + 12);
            v114 = v113 & (v105 >> 8);
            v115 = *(_DWORD *)(v103 + 4 * v114);
            if (v115)
            {
              v116 = v103 + 4 * v104;
              v117 = 1;
              while (1)
              {
                v118 = (v115 - 1);
                if (*(_QWORD *)(v116 + 16 * v118) == v100)
                  break;
                v114 = (v114 + v117) & v113;
                v115 = *(_DWORD *)(v103 + 4 * v114);
                ++v117;
                if (!v115)
                  goto LABEL_112;
              }
              v135 = v116 + 16 * v118;
              if (*(_DWORD *)(v135 + 8) != -1)
                *(_BYTE *)(v135 + 12) = v101;
            }
            goto LABEL_112;
          }
          if ((v105 & 0x20) != 0)
            v105 = *(_DWORD *)(16 * v74 + 0x20);
          v106 = *(_DWORD *)(SlowCase + 12);
          v107 = (v105 >> 8) & *(_QWORD *)&v106;
          v108 = *(unsigned __int8 *)(v103 + v107);
          if (*(_BYTE *)(v103 + v107))
          {
            v109 = v103 + v104;
            v110 = 1;
            while (1)
            {
              v111 = (v108 - 1);
              v112 = *(_QWORD *)(v109 + 8 * v111);
              if (v100 == (v112 & 0xFFFFFFFFFFFFLL))
                break;
              v107 = ((_DWORD)v107 + v110) & v106;
              v108 = *(unsigned __int8 *)(v103 + v107);
              ++v110;
              if (!*(_BYTE *)(v103 + v107))
                goto LABEL_112;
            }
            *(_QWORD *)(v109 + 8 * v111) = v112 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v101 << 48);
            if (!v49)
              goto LABEL_225;
          }
          else
          {
LABEL_112:
            if (!v49)
              goto LABEL_225;
          }
          break;
        case 2:
          v88 = 16 * v74;
          v89 = *(_QWORD *)(SlowCase + 16);
          v90 = v89 & 0xFFFFFFFFFFFFFFFELL;
          v91 = *(unsigned int *)(SlowCase + 8);
          v92 = *(_DWORD *)(16 * v74 + 0x10);
          if ((v89 & 1) != 0)
          {
            if ((v92 & 0x20) != 0)
              v92 = *(_DWORD *)(16 * v74 + 0x20);
            v93 = *(_DWORD *)(SlowCase + 12);
            v94 = (v92 >> 8) & *(_QWORD *)&v93;
            v95 = *(unsigned __int8 *)(v90 + v94);
            if (*(_BYTE *)(v90 + v94))
            {
              v96 = 1;
              while (1)
              {
                v97 = *(_QWORD *)(v90 + v91 + 8 * (v95 - 1));
                if (v88 == (v97 & 0xFFFFFFFFFFFFLL))
                  break;
                v94 = ((_DWORD)v94 + v96) & v93;
                v95 = *(unsigned __int8 *)(v90 + v94);
                ++v96;
                v98 = 0xFFFFFFFFLL;
                if (!*(_BYTE *)(v90 + v94))
                {
                  v99 = 0;
                  goto LABEL_154;
                }
              }
              v98 = HIBYTE(v97);
              v94 = v94;
              v99 = v95;
            }
            else
            {
              v98 = 0xFFFFFFFFLL;
              v99 = 0;
            }
          }
          else
          {
            if ((v92 & 0x20) != 0)
              v92 = *(_DWORD *)(16 * v74 + 0x20);
            v127 = *(_DWORD *)(SlowCase + 12);
            v94 = v127 & (v92 >> 8);
            LODWORD(v99) = *(_DWORD *)(v90 + 4 * v94);
            if ((_DWORD)v99)
            {
              v128 = v90 + 4 * v91;
              v129 = 1;
              while (*(_QWORD *)(v128 + 16 * (v99 - 1)) != v88)
              {
                v94 = ((_DWORD)v94 + v129) & v127;
                LODWORD(v99) = *(_DWORD *)(v90 + 4 * v94);
                ++v129;
                if (!(_DWORD)v99)
                  goto LABEL_174;
              }
              v98 = *(unsigned int *)(v128 + 16 * (v99 - 1) + 8);
              v94 = v94;
            }
            else
            {
LABEL_174:
              v98 = 0xFFFFFFFFLL;
            }
            v99 = v99;
          }
LABEL_154:
          v119 = v99 | (v94 << 32);
          if (v98 != 0xFFFFFFFFLL)
          {
            v120 = HIDWORD(v119);
            if ((v89 & 1) != 0)
            {
              *(_BYTE *)(v90 + v120) = (v91 >> 1) + 1;
              v121 = *(unsigned int *)(SlowCase + 8);
              v136 = v90 + v121 + 8 * (v119 - 1);
              *(_QWORD *)v136 = ((unint64_t)*(unsigned __int16 *)(v136 + 6) << 48) | 1;
              v122 = *(_DWORD *)v88 - 2;
              if (*(_DWORD *)v88 == 2)
                goto LABEL_186;
LABEL_157:
              *(_DWORD *)v88 = v122;
            }
            else
            {
              *(_DWORD *)(v90 + 4 * v120) = (v91 >> 1) + 1;
              v121 = *(unsigned int *)(SlowCase + 8);
              *(_QWORD *)(v90 + 4 * v121 + 16 * (v119 - 1)) = 1;
              v122 = *(_DWORD *)v88 - 2;
              if (*(_DWORD *)v88 != 2)
                goto LABEL_157;
LABEL_186:
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)(16 * v74), (WTF::AtomStringImpl *)v35, a3, v44, a5, a6, a7, a8);
              v137 = *(_QWORD *)(StatusReg + 752);
              if (v137)
              {
                v138 = v74 >> 20;
                if (((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v74 >> 23) & 0x1FC)) >> (v74 >> 20)) & 1) != 0)
                {
LABEL_188:
                  v139 = *(unsigned int *)(v137 + 8000);
                  if (v139 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v137, 16 * v74, (os_unfair_lock_s *)5, v44, a5, a6, a7, a8);
                  }
                  else
                  {
                    *(_QWORD *)(v137 + 8 * v139) = v88 | 0x5000000000000;
                    *(_DWORD *)(v137 + 8000) = v139 + 1;
                  }
                }
                else
                {
                  if (v138 < *off_1ECF425F8 || off_1ECF425F8[1] <= v138)
                  {
                    v44 = 0;
                  }
                  else
                  {
                    v44 = (*(_DWORD *)((char *)off_1ECF425F8
                                     + (((v138 - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                     + 24) >> (2 * ((v138 - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v44 == 1)
                      goto LABEL_188;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v137, 16 * v74, 1, v44, a5, a6, a7, a8);
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(16 * v74, (uint64_t)&bmalloc_heap_config, 1);
              }
              LODWORD(v121) = *(_DWORD *)(SlowCase + 8);
            }
            a3 = (*(_DWORD *)(SlowCase + 24) - 1);
            v123 = *(_DWORD *)(SlowCase + 28) + 1;
            *(_DWORD *)(SlowCase + 24) = a3;
            *(_DWORD *)(SlowCase + 28) = v123;
            if (v121 <= 4 * v123)
              JSC::PropertyTable::rehash((JSC::PropertyTable *)SlowCase, a2, a3, 1, a5, a6, a7, a8);
          }
          v124 = *((unsigned __int16 *)v219 + 11);
          if (v124 == 65534)
          {
            v124 = -1;
          }
          else if (v124 == 0xFFFF)
          {
            v124 = *(_DWORD *)(*((_QWORD *)v219 + 8) + 88);
          }
          LODWORD(v223.rlim_cur) = v124;
          casual = *(_QWORD *)(SlowCase + 32);
          if (casual)
          {
LABEL_164:
            v126 = *(unsigned int *)(casual + 12);
            if ((_DWORD)v126 != *(_DWORD *)(casual + 8))
              goto LABEL_222;
            goto LABEL_165;
          }
          v146 = *(_QWORD *)(StatusReg + 752);
          if (v146)
          {
            v147 = (_BYTE *)(v146 + 8304);
            *(_BYTE *)(v146 + 8304) = 1;
            v148 = *(unsigned int *)(v146 + 8320);
            if ((_DWORD)v148)
            {
              *(_DWORD *)(v146 + 8320) = v148 - *(_DWORD *)(v146 + 8324);
              casual = *(_QWORD *)(v146 + 8312) - v148;
LABEL_212:
              *v147 = 0;
              goto LABEL_213;
            }
            v153 = *(_QWORD *)(v146 + 8344);
            v154 = *(_QWORD *)(v146 + 8328);
            if (v153)
            {
LABEL_224:
              v155 = __clz(v153);
              *(_QWORD *)(v146 + 8344) = v153 & ~(0x8000000000000000 >> v155);
              casual = v154 + 16 * v155;
              goto LABEL_212;
            }
            if (*(_BYTE *)(v146 + 8309) == 6)
            {
              v205 = *(_DWORD *)(v146 + 8340);
              v206 = *(unsigned int *)(v146 + 8336);
              if (v206 < v205)
              {
                *(_QWORD *)&v147[8 * v206 + 56] = 0;
                v207 = (unint64_t *)(v146 + 8 * v206 + 8368);
                v208 = v205 - 1 - v206;
                while (v208)
                {
                  v154 += 1024;
                  v210 = *v207++;
                  v209 = v210;
                  LODWORD(v206) = v206 + 1;
                  --v208;
                  if (v210)
                  {
                    v153 = __rbit64(v209);
                    *(_DWORD *)(v146 + 8336) = v206;
                    *(_QWORD *)(v146 + 8328) = v154;
                    goto LABEL_224;
                  }
                }
                *(_DWORD *)(v146 + 8336) = v205;
              }
            }
            *v147 = 0;
          }
          casual = bmalloc_allocate_casual(16, 1);
LABEL_213:
          *(_QWORD *)casual = 0;
          *(_QWORD *)(casual + 8) = 0;
          v149 = *(_QWORD *)(SlowCase + 32);
          *(_QWORD *)(SlowCase + 32) = casual;
          if (!v149)
            goto LABEL_164;
          v150 = *(_QWORD *)v149;
          if (*(_QWORD *)v149)
          {
            *(_QWORD *)v149 = 0;
            *(_DWORD *)(v149 + 8) = 0;
            WTF::fastFree(v150, (void *)v35, a3, v44, a5, a6, a7, a8);
          }
          v151 = *(_QWORD *)(StatusReg + 752);
          if (v151)
          {
            if (v149 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v149 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v149)) & 1) == 0)
            {
              if (v149 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v149 >> 24)
              {
                v44 = 0;
LABEL_322:
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v151, v149, 1, v44, a5, a6, a7, a8);
                goto LABEL_221;
              }
              v44 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v149 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v149) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v44 != 1)
                goto LABEL_322;
            }
            v152 = *(unsigned int *)(v151 + 8000);
            if (v152 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v151, v149, (os_unfair_lock_s *)5, v44, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v151 + 8 * v152) = v149 | 0x5000000000000;
              *(_DWORD *)(v151 + 8000) = v152 + 1;
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v149, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_221:
          casual = *(_QWORD *)(SlowCase + 32);
          v126 = *(unsigned int *)(casual + 12);
          if ((_DWORD)v126 != *(_DWORD *)(casual + 8))
          {
LABEL_222:
            *(_DWORD *)(*(_QWORD *)casual + 4 * v126) = v124;
            goto LABEL_166;
          }
LABEL_165:
          *(_DWORD *)(*(_QWORD *)casual + 4 * *(unsigned int *)(casual + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(casual, v126 + 1, (unint64_t)&v223);
LABEL_166:
          ++*(_DWORD *)(casual + 12);
          if (!v49)
            goto LABEL_225;
          break;
        case 1:
          v76 = *(unsigned __int16 *)(v73 + 22);
          if (v76 == 65534)
          {
            v76 = -1;
          }
          else if (v76 == 0xFFFF)
          {
            v76 = *(_DWORD *)(*(_QWORD *)(v73 + 64) + 88);
          }
          v77 = *(unsigned __int8 *)(v73 + 20);
          v78 = *(_QWORD *)(SlowCase + 32);
          if (v78)
          {
            v204 = *(_DWORD *)(v78 + 12);
            if (v204)
              *(_DWORD *)(v78 + 12) = v204 - 1;
          }
          v79 = 16 * v74;
          v80 = *(_QWORD *)(SlowCase + 16);
          v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
          v82 = *(unsigned int *)(SlowCase + 8);
          v83 = *(_DWORD *)(v79 + 16);
          if ((v80 & 1) != 0)
          {
            if ((v83 & 0x20) != 0)
              v83 = *(_DWORD *)(v79 + 32);
            v84 = *(_DWORD *)(SlowCase + 12);
            v85 = (v83 >> 8) & *(_QWORD *)&v84;
            v86 = *(unsigned __int8 *)(v81 + v85);
            if (*(_BYTE *)(v81 + v85))
            {
              v87 = 1;
              while (v79 != (*(_QWORD *)(v81 + v82 + 8 * (v86 - 1)) & 0xFFFFFFFFFFFFLL))
              {
                v85 = ((_DWORD)v85 + v87) & v84;
                v86 = *(unsigned __int8 *)(v81 + v85);
                ++v87;
                if (!*(_BYTE *)(v81 + v85))
                  goto LABEL_196;
              }
              goto LABEL_112;
            }
          }
          else
          {
            if ((v83 & 0x20) != 0)
              v83 = *(_DWORD *)(v79 + 32);
            v130 = *(_DWORD *)(SlowCase + 12);
            LODWORD(v85) = v130 & (v83 >> 8);
            v131 = *(_DWORD *)(v81 + 4 * v85);
            if (v131)
            {
              v132 = v81 + 4 * v82;
              v133 = 1;
              while (1)
              {
                v134 = (v131 - 1);
                if (*(_QWORD *)(v132 + 16 * v134) == v79)
                  break;
                LODWORD(v85) = (v85 + v133) & v130;
                v131 = *(_DWORD *)(v81 + 4 * v85);
                ++v133;
                if (!v131)
                  goto LABEL_196;
              }
              if (*(_DWORD *)(v132 + 16 * v134 + 8) != -1)
                goto LABEL_112;
            }
          }
LABEL_196:
          *(_DWORD *)v79 += 2;
          v140 = *(_DWORD *)(SlowCase + 24);
          v142 = (v80 & 1) == 0 || v76 < 256;
          if (*(_DWORD *)(SlowCase + 28) + v140 >= v82 >> 1 || !v142)
          {
            JSC::PropertyTable::rehash((JSC::PropertyTable *)SlowCase, a2, (v140 + 1), v76 < 256, a5, a6, a7, a8);
            v80 = *(_QWORD *)(SlowCase + 16);
            v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
            v194 = *(unsigned int *)(SlowCase + 8);
            v195 = *(_DWORD *)(v79 + 16);
            if ((v80 & 1) != 0)
            {
              if ((v195 & 0x20) != 0)
                v195 = *(_DWORD *)(v79 + 32);
              v196 = *(_DWORD *)(SlowCase + 12);
              v85 = (v195 >> 8) & *(_QWORD *)&v196;
              v197 = *(unsigned __int8 *)(v81 + v85);
              if (*(_BYTE *)(v81 + v85))
              {
                v198 = v81 + v194;
                v199 = 1;
                do
                {
                  if (v79 == (*(_QWORD *)(v198 + 8 * (v197 - 1)) & 0xFFFFFFFFFFFFLL))
                    break;
                  v85 = ((_DWORD)v85 + v199) & v196;
                  v197 = *(unsigned __int8 *)(v81 + v85);
                  ++v199;
                }
                while (*(_BYTE *)(v81 + v85));
              }
            }
            else
            {
              if ((v195 & 0x20) != 0)
                v195 = *(_DWORD *)(v79 + 32);
              v200 = *(_DWORD *)(SlowCase + 12);
              LODWORD(v85) = v200 & (v195 >> 8);
              v201 = *(_DWORD *)(v81 + 4 * v85);
              if (v201)
              {
                v202 = v81 + 4 * v194;
                v203 = 1;
                do
                {
                  if (*(_QWORD *)(v202 + 16 * (v201 - 1)) == v79)
                    break;
                  LODWORD(v85) = (v85 + v203) & v200;
                  v201 = *(_DWORD *)(v81 + 4 * v85);
                  ++v203;
                }
                while (v201);
              }
            }
          }
          v143 = *(_DWORD *)(SlowCase + 28) + *(_DWORD *)(SlowCase + 24);
          v144 = v143 + 1;
          if ((v80 & 1) != 0)
          {
            *(_BYTE *)(v81 + v85) = v144;
            *(_QWORD *)(v81 + *(unsigned int *)(SlowCase + 8) + 8 * v143) = v79 | ((unint64_t)(v77 | (v76 << 8)) << 48);
          }
          else
          {
            *(_DWORD *)(v81 + 4 * v85) = v144;
            v145 = v81 + 4 * *(unsigned int *)(SlowCase + 8) + 16 * v143;
            *(_QWORD *)v145 = v79;
            *(_DWORD *)(v145 + 8) = v76;
            *(_BYTE *)(v145 + 12) = v77;
          }
          ++*(_DWORD *)(SlowCase + 24);
          if (!v49)
            goto LABEL_225;
          break;
        default:
          goto LABEL_112;
      }
    }
  }
LABEL_225:
  v218[0] = &v219;
  v218[1] = &v220;
  v228 = SlowCase;
  v156 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v157 = *(_QWORD *)(v156 + 736);
  if (!v157)
  {
    v167 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v167 != -1)
    {
      v223.rlim_cur = (rlim_t)&v227;
      v229[0] = &v223;
      std::__call_once(&WTF::initialize(void)::onceKey, v229, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v168 = *(_QWORD *)(v156 + 752);
    if (v168)
    {
      v169 = (_BYTE *)(v168 + 9408);
      *(_BYTE *)(v168 + 9408) = 1;
      v170 = *(unsigned int *)(v168 + 9424);
      if ((_DWORD)v170)
      {
        *(_DWORD *)(v168 + 9424) = v170 - *(_DWORD *)(v168 + 9428);
        v157 = *(_QWORD *)(v168 + 9416) - v170;
LABEL_244:
        *v169 = 0;
LABEL_245:
        *(_OWORD *)v157 = 0u;
        *(_OWORD *)(v157 + 16) = 0u;
        *(_QWORD *)(v157 + 96) = 0;
        *(_OWORD *)(v157 + 64) = 0u;
        *(_OWORD *)(v157 + 80) = 0u;
        *(_OWORD *)(v157 + 32) = 0u;
        *(_OWORD *)(v157 + 48) = 0u;
        *(_DWORD *)v157 = 1;
        *(_OWORD *)(v157 + 8) = 0u;
        v171 = (unint64_t *)(v157 + 8);
        *(_OWORD *)(v157 + 24) = 0u;
        do
        {
          v172 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v173 = v172 + 1;
        }
        while (__stlxr(v173, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(v157 + 48) = v173;
        *(_QWORD *)(v157 + 52) = 0;
        *(_QWORD *)(v157 + 68) = 0;
        *(_QWORD *)(v157 + 60) = 0;
        *(_DWORD *)(v157 + 76) = 0;
        *(_QWORD *)(v157 + 88) = 0;
        *(_QWORD *)(v157 + 96) = 0;
        v174 = pthread_self();
        if (__ldaxr(v171))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, v171))
        {
LABEL_250:
          *(_QWORD *)(v157 + 40) = v174;
          *(_DWORD *)(v157 + 52) = pthread_mach_thread_np(v174);
          v176 = __ldxr(v171);
          if (v176 == 1)
          {
            if (!__stlxr(0, v171))
              goto LABEL_284;
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow((WTF::WordLock *)(v157 + 8));
LABEL_284:
          stackaddr_np = *(char **)(v157 + 16);
          if (!stackaddr_np)
          {
            v188 = pthread_main_np();
            v189 = pthread_self();
            stackaddr_np = (char *)pthread_get_stackaddr_np(v189);
            if (v188)
            {
              getrlimit(3, &v223);
              if (v223.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                rlim_cur = 0x800000;
              else
                rlim_cur = v223.rlim_cur;
            }
            else
            {
              rlim_cur = pthread_get_stacksize_np(v189);
            }
            *(_QWORD *)(v157 + 16) = stackaddr_np;
            *(_QWORD *)(v157 + 24) = &stackaddr_np[-rlim_cur];
          }
          *(_QWORD *)(v157 + 80) = stackaddr_np;
          *(_QWORD *)(v157 + 56) = v157 + 64;
          v186 = pthread_self();
          if (pthread_equal(v186, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
          {
            v187 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
            if (v187 != -1)
            {
              v223.rlim_cur = (rlim_t)&v227;
              v229[0] = &v223;
              std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, v229, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
            }
            *(_QWORD *)(v157 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
          }
          *(_QWORD *)(v156 + 736) = v157;
          pthread_key_init_np();
          goto LABEL_226;
        }
        WTF::WordLock::lockSlow((WTF::WordLock *)(v157 + 8));
        goto LABEL_250;
      }
      v191 = *(_QWORD *)(v168 + 9448);
      v192 = *(_QWORD *)(v168 + 9432);
      if (v191)
      {
LABEL_300:
        v193 = __clz(v191);
        *(_QWORD *)(v168 + 9448) = v191 & ~(0x8000000000000000 >> v193);
        v157 = v192 + 16 * v193;
        goto LABEL_244;
      }
      if (*(_BYTE *)(v168 + 9413) == 6)
      {
        v211 = *(_DWORD *)(v168 + 9444);
        v212 = *(unsigned int *)(v168 + 9440);
        if (v212 < v211)
        {
          *(_QWORD *)&v169[8 * v212 + 56] = 0;
          v213 = (unint64_t *)(v168 + 8 * v212 + 9472);
          v214 = v211 - 1 - v212;
          while (v214)
          {
            v192 += 1024;
            v216 = *v213++;
            v215 = v216;
            LODWORD(v212) = v212 + 1;
            --v214;
            if (v216)
            {
              v191 = __rbit64(v215);
              *(_DWORD *)(v168 + 9440) = v212;
              *(_QWORD *)(v168 + 9432) = v192;
              goto LABEL_300;
            }
          }
          *(_DWORD *)(v168 + 9440) = v211;
        }
      }
      *v169 = 0;
    }
    v157 = bmalloc_allocate_casual(104, 1);
    goto LABEL_245;
  }
LABEL_226:
  if ((*(_BYTE *)(v157 + 5) & 8) != 0)
    goto LABEL_263;
  v158 = *(_DWORD *)(SlowCase + 24);
  v159 = *(_QWORD *)(SlowCase + 32);
  if (v159)
    LODWORD(v159) = *(_DWORD *)(v159 + 12);
  v160 = v159 + v158;
  LODWORD(v229[0]) = v160;
  v161 = *((unsigned __int8 *)this + 14);
  v162 = v159 + v158 - v161;
  if (v160 < v161)
    v162 = 0;
  v227 = v162;
  v223.rlim_cur = (rlim_t)this;
  v223.rlim_max = (rlim_t)&v228;
  v224 = v229;
  v225 = &v227;
  v226 = v218;
  v163 = *((unsigned __int16 *)this + 12);
  if (v163 == 65534)
  {
    v164 = -1;
LABEL_254:
    v166 = v164 + 1;
    goto LABEL_255;
  }
  if (v163 == 0xFFFF)
    v164 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  else
    v164 = *((unsigned __int16 *)this + 12);
  if (v164 < (int)v161)
    goto LABEL_254;
  if (v164 >= 64)
    v165 = (v164 - 63);
  else
    v165 = 0;
  v166 = v165 + v161;
LABEL_255:
  if (v166 != v160)
    JSC::Structure::checkOffsetConsistency<JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0>(JSC::PropertyTable *,JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0 const&)const::{lambda(char const*)#1}::operator()((uint64_t *)&v223, "numberOfSlotsForMaxOffset doesn't match totalSize");
  if (v163 == 65534)
    goto LABEL_261;
  if (v163 == 0xFFFF)
    v163 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  v177 = __OFSUB__(v163, 63);
  v178 = v163 - 63;
  if ((v178 < 0) ^ v177 | (v178 == 0))
LABEL_261:
    v178 = 0;
  if (v178 != v162)
    JSC::Structure::checkOffsetConsistency<JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0>(JSC::PropertyTable *,JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0 const&)const::{lambda(char const*)#1}::operator()((uint64_t *)&v223, "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset");
LABEL_263:
  v179 = __ldxr(v47);
  if (v179 != 1)
  {
    __clrex();
    goto LABEL_267;
  }
  if (__stlxr(0, v47))
LABEL_267:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, a3, v44, a5, a6, a7, a8);
  v180 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v180;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v181 = v180 == 0;
  else
    v181 = 0;
  if (v181)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  v182 = v220;
  if (v222 != (_BYTE *)v220 && v220)
  {
    v220 = 0;
    LODWORD(v221) = 0;
    WTF::fastFree((unint64_t)v182, (void *)v35, a3, v44, a5, a6, a7, a8);
  }
  v183 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v183;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v184 = v183 == 0;
  else
    v184 = 0;
  if (v184)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
}

uint64_t JSC::Structure::isSealed(JSC::Structure *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::PropertyTable *v9;

  if ((*((_BYTE *)this + 18) & 0x10) == 0)
    return 0;
  JSC::Structure::ensurePropertyTableIfNotEmpty(this, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
    return JSC::PropertyTable::isSealed(v9);
  else
    return 1;
}

uint64_t JSC::Structure::isFrozen(JSC::Structure *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::PropertyTable *v9;

  if ((*((_BYTE *)this + 18) & 0x10) == 0)
    return 0;
  JSC::Structure::ensurePropertyTableIfNotEmpty(this, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
    return JSC::PropertyTable::isFrozen(v9);
  else
    return 1;
}

uint64_t JSC::Structure::flattenDictionaryStructure(unint64_t this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  JSC::JSObject *v28;
  char v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v33;
  char v34;
  unsigned __int8 *v35;
  int v36;
  JSC::VM *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t result;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  JSC::Structure *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  unint64_t v63;
  char *v64;
  int v65;
  char v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  _OWORD *v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  uint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  _OWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  WTF *v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  const char *v103;
  char *v104;
  WTF *v105;
  int v106;
  unsigned int v107;
  char v108;
  JSC::JSObject *v109;
  uint64_t *v110;
  WTF **v111;
  uint64_t *v112;
  unsigned int *v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  char v119;
  char v120;
  JSC::VM *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(this + 88);
  if (!v11)
    goto LABEL_27;
  v117 = *(_QWORD *)(this + 88);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v12 + 5) & 8) != 0)
    goto LABEL_27;
  v13 = *(_DWORD *)(v11 + 24);
  v14 = *(_QWORD *)(v11 + 32);
  if (v14)
    LODWORD(v14) = *(_DWORD *)(v14 + 12);
  v15 = v14 + v13;
  LODWORD(v105) = v15;
  v16 = *(unsigned __int8 *)(this + 14);
  v17 = v14 + v13 - v16;
  if (v15 < v16)
    v17 = 0;
  LODWORD(v116) = v17;
  v109 = (JSC::JSObject *)this;
  v110 = &v117;
  v111 = &v105;
  v112 = &v116;
  v113 = &v115;
  v18 = *(unsigned __int16 *)(this + 24);
  if (v18 == 65534)
  {
    v19 = -1;
  }
  else
  {
    if (v18 == 0xFFFF)
      v19 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
    else
      v19 = *(unsigned __int16 *)(this + 24);
    if (v19 >= (int)v16)
    {
      if (v19 >= 64)
        v20 = (v19 - 63);
      else
        v20 = 0;
      v21 = v20 + v16;
      goto LABEL_19;
    }
  }
  v21 = v19 + 1;
LABEL_19:
  if (v21 != v15)
    goto LABEL_165;
  if (v18 == 65534)
    goto LABEL_25;
  if (v18 == 0xFFFF)
    v18 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
  v22 = __OFSUB__(v18, 63);
  v23 = v18 - 63;
  if ((v23 < 0) ^ v22 | (v23 == 0))
LABEL_25:
    v23 = 0;
  if (v23 != v17)
  {
LABEL_166:
    v103 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
LABEL_167:
    JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v109, v103);
  }
LABEL_27:
  v24 = *(unsigned __int16 *)(this + 24);
  if (v24 == 65534)
    goto LABEL_31;
  if (v24 == 0xFFFF)
    v24 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
  if (v24 < 64)
  {
LABEL_31:
    v25 = 0;
  }
  else if ((v24 - 63) >= 5)
  {
    v42 = (v24 - 64) | ((v24 - 64) >> 1) | (((v24 - 64) | ((v24 - 64) >> 1)) >> 2);
    v43 = v42 | (v42 >> 4) | ((v42 | (v42 >> 4)) >> 8);
    v25 = (v43 | HIWORD(v43)) + 1;
  }
  else
  {
    v25 = 4;
  }
  v26 = v25;
  if ((*(_DWORD *)(this + 16) & 3) == 2)
  {
    v27 = *(_QWORD *)(this + 88);
    v47 = *(_DWORD *)(v27 + 24);
    if (v47)
    {
      v48 = v47 - 1;
      v49 = *(unsigned __int8 *)(this + 14);
      v50 = v47 - v49 + 63;
      if ((int)v48 >= v49)
        v51 = v50;
      else
        v51 = v48;
    }
    else
    {
      v51 = 0xFFFFFFFFLL;
    }
    v52 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v51);
    v30 = v52;
    if (v52 == (_DWORD)v26)
    {
      v28 = 0;
      v29 = 1;
    }
    else
    {
      v109 = a3;
      v100 = (unsigned __int8 *)a3 + 4;
      while (1)
      {
        v101 = *v100;
        if ((v101 & 0x40) != 0)
          break;
        v102 = __ldaxr(v100);
        if (v102 == v101)
        {
          if (!__stxr(v101 | 0x40, v100))
            goto LABEL_169;
        }
        else
        {
          __clrex();
        }
      }
      JSC::JSCellLock::lockSlow(a3);
LABEL_169:
      v28 = v109;
      v109 = 0;
      WTF::Locker<JSC::JSCellLock,void>::~Locker(&v109, v53, (uint64_t)a3, a4, a5, a6, a7, a8);
      v29 = 0;
    }
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v29 = 1;
    v30 = v25;
  }
  v31 = (unsigned __int8 *)(this + 15);
  v120 = 0;
  v118 = (unsigned __int8 *)(this + 15);
  v119 = 1;
  if (__ldaxr((unsigned __int8 *)(this + 15)))
  {
    __clrex();
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v31);
    goto LABEL_37;
  }
  if (__stxr(1u, v31))
    goto LABEL_36;
LABEL_37:
  v120 = 1;
  v121 = a2;
  ++*((_DWORD *)a2 + 229);
  *(_DWORD *)a3 = (this >> 4) | 1;
  __dmb(0xAu);
  v33 = *(_DWORD *)(this + 16);
  if ((v33 & 3) != 2)
    goto LABEL_38;
  v54 = *(unsigned int *)(v27 + 24);
  WTF::Vector<JSC::JSValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v105, v54);
  v55 = (JSC::Structure *)JSC::PropertyTable::renumberPropertyOffsets(v27, (uint64_t)a3, *(unsigned __int8 *)(this + 14), (uint64_t)&v105);
  result = (uint64_t)JSC::Structure::setMaxOffset((JSC::VM *)this, a2, v55, v56, v57, v58, v59, v60);
  if (!(_DWORD)v54)
  {
LABEL_93:
    v72 = (_OWORD *)((char *)a3 + 16);
    v73 = *(unsigned __int16 *)(this + 24);
    if (v73 == 65534)
    {
      v74 = *(unsigned __int8 *)(this + 14);
      v73 = -1;
    }
    else
    {
      if (v73 == 0xFFFF)
        v73 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
      v74 = *(unsigned __int8 *)(this + 14);
      if (v73 + 1 < v74)
        v75 = v73 + 1;
      else
        v75 = *(unsigned __int8 *)(this + 14);
      v72 = (_OWORD *)((char *)v72 + 8 * v75);
    }
    v76 = v73 + 1;
    v77 = v74 >= v76;
    v78 = v74 - v76;
    if (!v77)
      v78 = 0;
    v79 = 8 * v78;
    v80 = (_OWORD *)((char *)v72 + v79);
    v81 = (_OWORD *)((char *)v72 + (v79 & 0x7C0));
    *(_QWORD *)&v62 = 0;
    while (v72 != v81)
    {
      *v72 = v62;
      v72[1] = v62;
      v72[2] = v62;
      v72[3] = v62;
      v72 += 4;
    }
    while (v72 != v80)
    {
      *(_QWORD *)v72 = 0;
      v72 = (_OWORD *)((char *)v72 + 8);
    }
    v82 = (_OWORD *)(*((_QWORD *)a3 + 1) - 8 - 8 * v26);
    v83 = *(unsigned __int16 *)(this + 24);
    if (v83 == 65534)
      goto LABEL_112;
    if (v83 == 0xFFFF)
      v83 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
    v22 = __OFSUB__(v83, 63);
    v84 = v83 - 63;
    if ((v84 < 0) ^ v22 | (v84 == 0))
LABEL_112:
      v84 = 0;
    v85 = 8 * (v26 - v84);
    v86 = (_OWORD *)((char *)v82 + v85);
    v87 = (_OWORD *)((char *)v82 + (v85 & 0xFFFFFFFFFFFFFFC0));
    *(_QWORD *)&v62 = 0;
    while (v82 != v87)
    {
      *v82 = v62;
      v82[1] = v62;
      v82[2] = v62;
      v82[3] = v62;
      v82 += 4;
    }
    while (v82 != v86)
    {
      *(_QWORD *)v82 = 0;
      v82 = (_OWORD *)((char *)v82 + 8);
    }
    if (!*(_QWORD *)(this + 88))
      goto LABEL_145;
    v116 = *(_QWORD *)(this + 88);
    v88 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v88)
      v88 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v88 + 5) & 8) != 0)
      goto LABEL_145;
    v89 = *(_DWORD *)(v116 + 24);
    v90 = *(_QWORD *)(v116 + 32);
    if (v90)
      LODWORD(v90) = *(_DWORD *)(v90 + 12);
    v91 = v90 + v89;
    v92 = *(unsigned __int8 *)(this + 14);
    v93 = v90 + v89 - v92;
    if (v91 < v92)
      v93 = 0;
    v114 = v93;
    v115 = v91;
    v109 = (JSC::JSObject *)this;
    v110 = &v116;
    v111 = (WTF **)&v115;
    v112 = (uint64_t *)&v114;
    v113 = (unsigned int *)&v108;
    v94 = *(unsigned __int16 *)(this + 24);
    if (v94 == 65534)
    {
      v95 = -1;
    }
    else
    {
      if (v94 == 0xFFFF)
        v95 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
      else
        v95 = *(unsigned __int16 *)(this + 24);
      if (v95 >= (int)v92)
      {
        if (v95 >= 64)
          v96 = (v95 - 63);
        else
          v96 = 0;
        v97 = v96 + v92;
LABEL_137:
        if (v97 == v91)
        {
          if (v94 == 65534)
            goto LABEL_143;
          if (v94 == 0xFFFF)
            v94 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
          v22 = __OFSUB__(v94, 63);
          v98 = v94 - 63;
          if ((v98 < 0) ^ v22 | (v98 == 0))
LABEL_143:
            v98 = 0;
          if (v98 == v93)
          {
LABEL_145:
            v99 = v105;
            if (v105)
            {
              v105 = 0;
              v106 = 0;
              WTF::fastFree((unint64_t)v99, v61, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v33 = *(_DWORD *)(this + 16);
LABEL_38:
            *(_DWORD *)(this + 16) = v33 & 0xFF7FFFFC | 0x800000;
            if (*((_QWORD *)a3 + 1))
              v34 = v29;
            else
              v34 = 1;
            if ((v34 & 1) == 0)
            {
              if (v30
                || (*(_BYTE *)(this + 8) & 0xE) != 0
                || *(unsigned __int8 *)(this + 9) - 39 <= 0xA && (*((_BYTE *)a3 + 40) & 0x40) != 0)
              {
                JSC::JSObject::shiftButterflyAfterFlattening(a3, (const JSC::GCSafeConcurrentJSLocker *)&v117, a2, (JSC::Structure *)this, v30, a6, a7, a8);
              }
              else
              {
                JSC::JSObject::setButterfly(a3, a2, 0);
              }
            }
            __dmb(0xAu);
            *(_DWORD *)a3 = this >> 4;
            if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)a3 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a3);
            if (v120)
            {
              v119 = 0;
              v35 = v118;
              v36 = __ldxr(v118);
              if (v36 == 1)
              {
                if (!__stlxr(0, v118))
                  goto LABEL_50;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v35, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
LABEL_50:
            v37 = v121;
            v38 = *((_DWORD *)v121 + 229) - 1;
            *((_DWORD *)v121 + 229) = v38;
            if (*((unsigned __int8 *)v37 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v38)
            {
              *((_BYTE *)v37 + 1198) = 0;
              JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v37 + 192, 0);
            }
            if (!v120 || !v119)
              goto LABEL_62;
            v39 = v118;
            v40 = __ldxr(v118);
            if (v40 == 1)
            {
              if (!__stlxr(0, v118))
                goto LABEL_62;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_62:
            if (v28)
            {
              v44 = (unsigned __int8 *)v28 + 4;
              while (1)
              {
                v45 = *v44;
                if ((v45 & 0xC0) != 0x40)
                  break;
                v46 = __ldxr(v44);
                if (v46 == v45)
                {
                  if (!__stxr(v45 & 0xBF, v44))
                    return this;
                }
                else
                {
                  __clrex();
                }
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            return this;
          }
          goto LABEL_166;
        }
LABEL_165:
        v103 = "numberOfSlotsForMaxOffset doesn't match totalSize";
        goto LABEL_167;
      }
    }
    v97 = v95 + 1;
    goto LABEL_137;
  }
  v63 = 0;
  v64 = (char *)a3 + 16;
  while (1)
  {
    v65 = *(unsigned __int8 *)(this + 14);
    v22 = __OFSUB__((_DWORD)v63, v65);
    v67 = v63 - v65;
    v66 = (v67 < 0) ^ v22;
    v68 = v67 + 64;
    if (v66)
      v68 = v63;
    if (v63 >= v107)
      break;
    if (v68 < 64)
    {
      v69 = (uint64_t)v64;
    }
    else
    {
      v69 = *((_QWORD *)a3 + 1) - 8;
      v68 = 63 - v68;
    }
    v70 = *((_QWORD *)v105 + v63);
    *(_QWORD *)(v69 + 8 * v68) = v70;
    if (v70)
      v71 = (v70 & 0xFFFE000000000002) == 0;
    else
      v71 = 0;
    if (v71 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)a3 + 7))
    {
      v104 = v64;
      result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a3);
      v64 = v104;
    }
    if (v54 == ++v63)
      goto LABEL_93;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::JSValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  if (!a2)
    return v3;
  if (!(a2 >> 29))
  {
    v4 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v4;
    v5 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v5)
      bzero(v4, 8 * v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::Structure::allocateRareData(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t result;
  int v12;

  v10 = *((_QWORD *)this + 8);
  if (v10 && *(_BYTE *)(v10 + 5) != 1)
  {
    v12 = *(_DWORD *)(v10 + 80);
    if (v12)
      v10 = 16 * (v12 & 0xFFFFFFFE);
    else
      v10 = 0;
  }
  result = JSC::StructureRareData::create(a2, (JSC::VM *)v10, a3, a4, a5, a6, a7, a8);
  __dmb(0xAu);
  *((_QWORD *)this + 8) = result;
  if (result)
  {
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      return JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  return result;
}

unint64_t JSC::StructureRareData::create(JSC::StructureRareData *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::VM *v16;
  uint64_t SlowCase;
  JSC::StructureRareData *v18;

  v8 = (_QWORD *)((char *)this + 39960);
  v9 = *((_QWORD *)this + 4995);
  if (v9 < *((_QWORD *)this + 4996))
    goto LABEL_2;
  v9 = *((_QWORD *)this + 4997);
  if ((v9 & 1) == 0)
  {
    v13 = *(_QWORD *)(v9 + 8) ^ *((_QWORD *)this + 4998);
    *((_QWORD *)this + 4996) = v9 + HIDWORD(v13);
    *((_QWORD *)this + 4997) = v9 + (int)v13;
LABEL_2:
    *v8 = v9 + 96;
    goto LABEL_3;
  }
  v14 = (char *)this + 39936;
  v15 = (char *)this + 192;
  v18 = this;
  v16 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14, v15, 96, 0, 0);
  a2 = v16;
  v9 = SlowCase;
  this = v18;
LABEL_3:
  *(_DWORD *)v9 = 0;
  v10 = v8[193];
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)v9 = v10 >> 4;
  *(_DWORD *)(v9 + 4) = v11;
  *(_QWORD *)(v9 + 72) = 0;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_DWORD *)(v9 + 80) = (unint64_t)a2 >> 4;
  *(_QWORD *)(v9 + 84) = -1;
  *(_DWORD *)(v9 + 92) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v9;
}

uint64_t JSC::Structure::ensurePropertyReplacementWatchpointSet(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  JSC::VM *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v43;
  unsigned int v44;
  uint64_t **v45;
  uint64_t *i;
  uint64_t **v47;
  uint64_t *j;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;

  if ((_DWORD)a3 == -1)
    return 0;
  v8 = (int)a3;
  v11 = *((unsigned __int16 *)this + 12);
  if (v11 == 65534)
  {
    v11 = -1;
  }
  else if (v11 == 0xFFFF)
  {
    v11 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  }
  if (v11 < (int)a3 || (int)a3 <= 63 && *((unsigned __int8 *)this + 14) <= (int)a3)
    return 0;
  v12 = (JSC::VM *)*((_QWORD *)this + 8);
  if (!v12 || *((_BYTE *)v12 + 5) == 1)
  {
    v43 = JSC::StructureRareData::create(a2, v12, a3, a4, a5, a6, a7, a8);
    __dmb(0xAu);
    *((_QWORD *)this + 8) = v43;
    if (v43)
    {
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    }
  }
  v13 = (unsigned __int8 *)this + 15;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
LABEL_14:
  v15 = *((_QWORD *)this + 8);
  v17 = (uint64_t *)(v15 + 56);
  v16 = *(_QWORD *)(v15 + 56);
  if (v16
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v17, 8u, 0), (v16 = *v17) != 0))
  {
    v18 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
  v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
  v21 = v18 & (v20 ^ HIWORD(v20));
  v22 = v16 + 16 * v21;
  v23 = *(_DWORD *)v22;
  if (*(_DWORD *)v22 != 0x7FFFFFFF)
  {
    v24 = 0;
    v25 = 1;
    while (v23 != v8)
    {
      if (v23 == 2147483646)
        v24 = v22;
      v21 = (v21 + v25) & v18;
      v22 = v16 + 16 * v21;
      v23 = *(_DWORD *)v22;
      ++v25;
      if (*(_DWORD *)v22 == 0x7FFFFFFF)
      {
        if (!v24)
          goto LABEL_23;
        *(_DWORD *)v24 = 0x7FFFFFFF;
        *(_QWORD *)(v24 + 8) = 0;
        --*(_DWORD *)(*v17 - 16);
        *(_DWORD *)v24 = v8;
        *(_QWORD *)(v24 + 8) = 0;
        v22 = v24;
        goto LABEL_26;
      }
    }
    goto LABEL_36;
  }
LABEL_23:
  v26 = *(_QWORD *)(v22 + 8);
  *(_DWORD *)v22 = v8;
  *(_QWORD *)(v22 + 8) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v26));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v26);
      v45 = (uint64_t **)(v26 + 8);
      for (i = *(uint64_t **)(v26 + 8); i != (uint64_t *)v45; i = *v45)
      {
        v50 = *i;
        v49 = (uint64_t *)i[1];
        *v49 = *i;
        *(_QWORD *)(v50 + 8) = v49;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v26, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_26:
  v29 = *v17;
  if (*v17)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v17;
  if (*v17)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      goto LABEL_32;
    goto LABEL_52;
  }
  if (3 * v34 <= 4 * v33)
  {
    if (!(_DWORD)v34)
    {
      v44 = 8;
      goto LABEL_55;
    }
LABEL_52:
    v44 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_55:
    v22 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v17, v44, (int *)v22);
  }
LABEL_32:
  v36 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v36 = 1;
  *(_WORD *)(v36 + 4) = 1;
  *(_QWORD *)(v36 + 8) = v36 + 8;
  *(_QWORD *)(v36 + 16) = v36 + 8;
  v37 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v22 + 8) = v36;
  if (v37)
  {
    do
    {
      v38 = __ldaxr((unsigned int *)v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)v37));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)v37);
      v47 = (uint64_t **)(v37 + 8);
      for (j = *(uint64_t **)(v37 + 8); j != (uint64_t *)v47; j = *v47)
      {
        v52 = *j;
        v51 = (uint64_t *)j[1];
        *v51 = *j;
        *(_QWORD *)(v52 + 8) = v51;
        *j = 0;
        j[1] = 0;
      }
      WTF::fastFree(v37, v35, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  ++*(_DWORD *)(v15 + 92);
  *((_DWORD *)this + 4) |= 0x40000u;
LABEL_36:
  v40 = *(_QWORD *)(v22 + 8);
  v41 = __ldxr(v13);
  if (v41 == 1)
  {
    if (!__stlxr(0, v13))
      return v40;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v40;
}

uint64_t JSC::Structure::firePropertyReplacementWatchpointSet(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v12;
  JSC::VM *v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t **v47;
  int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t **v53;
  uint64_t *i;
  uint64_t **v55;
  uint64_t *j;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void (**v61)(JSC::StringFireDetail *__hidden);
  const char *v62;

  if ((_DWORD)a3 == -1)
    return 0;
  v9 = (int)a3;
  v12 = *((unsigned __int16 *)this + 12);
  if (v12 == 65534)
  {
    v12 = -1;
  }
  else if (v12 == 0xFFFF)
  {
    v12 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  }
  if (v12 < (int)a3 || (int)a3 <= 63 && *((unsigned __int8 *)this + 14) <= (int)a3)
    return 0;
  v13 = (JSC::VM *)*((_QWORD *)this + 8);
  if (!v13 || *((_BYTE *)v13 + 5) == 1)
  {
    v44 = JSC::StructureRareData::create(a2, v13, a3, (uint64_t)a4, a5, a6, a7, a8);
    __dmb(0xAu);
    *((_QWORD *)this + 8) = v44;
    if (v44)
    {
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    }
  }
  v14 = (unsigned __int8 *)this + 15;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
LABEL_14:
  v16 = *((_QWORD *)this + 8);
  v18 = (uint64_t *)(v16 + 56);
  v17 = *(_QWORD *)(v16 + 56);
  if (v17
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v18, 8u, 0), (v17 = *v18) != 0))
  {
    v19 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
  v22 = v19 & (v21 ^ HIWORD(v21));
  v23 = v17 + 16 * v22;
  v24 = *(_DWORD *)v23;
  if (*(_DWORD *)v23 == 0x7FFFFFFF)
  {
LABEL_23:
    v27 = *(_QWORD *)(v23 + 8);
    *(_DWORD *)v23 = v9;
    *(_QWORD *)(v23 + 8) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v53 = (uint64_t **)(v27 + 8);
        for (i = *(uint64_t **)(v27 + 8); i != (uint64_t *)v53; i = *v53)
        {
          v58 = *i;
          v57 = (uint64_t *)i[1];
          *v57 = *i;
          *(_QWORD *)(v58 + 8) = v57;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v27, v13, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
LABEL_26:
    v30 = *v18;
    if (*v18)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v32 = *v18;
    if (*v18)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34)
        goto LABEL_32;
    }
    else
    {
      if (3 * v35 > 4 * v34)
        goto LABEL_32;
      if (!(_DWORD)v35)
      {
        v52 = 8;
        goto LABEL_62;
      }
    }
    v52 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
LABEL_62:
    v23 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v18, v52, (int *)v23);
LABEL_32:
    v37 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v37 = 1;
    *(_WORD *)(v37 + 4) = 1;
    *(_QWORD *)(v37 + 8) = v37 + 8;
    *(_QWORD *)(v37 + 16) = v37 + 8;
    v38 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v37;
    if (v38)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v38));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)v38);
        v55 = (uint64_t **)(v38 + 8);
        for (j = *(uint64_t **)(v38 + 8); j != (uint64_t *)v55; j = *v55)
        {
          v60 = *j;
          v59 = (uint64_t *)j[1];
          *v59 = *j;
          *(_QWORD *)(v60 + 8) = v59;
          *j = 0;
          j[1] = 0;
        }
        WTF::fastFree(v38, v36, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
    ++*(_DWORD *)(v16 + 92);
    *((_DWORD *)this + 4) |= 0x40000u;
    goto LABEL_36;
  }
  v25 = 0;
  v26 = 1;
  while (v24 != v9)
  {
    if (v24 == 2147483646)
      v25 = v23;
    v22 = (v22 + v26) & v19;
    v23 = v17 + 16 * v22;
    v24 = *(_DWORD *)v23;
    ++v26;
    if (*(_DWORD *)v23 == 0x7FFFFFFF)
    {
      if (!v25)
        goto LABEL_23;
      *(_DWORD *)v25 = 0x7FFFFFFF;
      *(_QWORD *)(v25 + 8) = 0;
      --*(_DWORD *)(*v18 - 16);
      *(_DWORD *)v25 = v9;
      *(_QWORD *)(v25 + 8) = 0;
      v23 = v25;
      goto LABEL_26;
    }
  }
LABEL_36:
  v41 = *(_QWORD *)(v23 + 8);
  v42 = __ldxr(v14);
  if (v42 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_41;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_41:
  if (v41 && *(_BYTE *)(v41 + 4) == 1)
  {
    v45 = *((_QWORD *)this + 8);
    v61 = &off_1E3583C90;
    v62 = a4;
    __dmb(0xAu);
    v47 = (uint64_t **)(v41 + 8);
    v46 = *(uint64_t **)(v41 + 8);
    *(_BYTE *)(v41 + 4) = 2;
    v48 = *((_DWORD *)a2 + 229);
    *((_DWORD *)a2 + 229) = v48 + 1;
    if (v46 != (uint64_t *)(v41 + 8))
    {
      do
      {
        v51 = *v46;
        v50 = (uint64_t *)v46[1];
        *v50 = *v46;
        *(_QWORD *)(v51 + 8) = v50;
        *v46 = 0;
        v46[1] = 0;
        JSC::Watchpoint::fire(v46, a2);
        v46 = *v47;
      }
      while (*v47 != (uint64_t *)v47);
      v48 = *((_DWORD *)a2 + 229) - 1;
    }
    *((_DWORD *)a2 + 229) = v48;
    __dmb(0xAu);
    v49 = *(_DWORD *)(v45 + 92) - 1;
    *(_DWORD *)(v45 + 92) = v49;
    if (!v49)
      *((_DWORD *)this + 4) &= ~0x40000u;
  }
  return v41;
}

void JSC::Structure::startWatchingPropertyForReplacements(JSC::Structure *this, JSC::VM *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;

  if (!(a3 >> 4))
    goto LABEL_21;
  if (((a3 >> 4) & ~*((_DWORD *)this + 8)) != 0)
    goto LABEL_21;
  JSC::Structure::ensurePropertyTableIfNotEmpty(this, a2, a3, a4, a5, a6, a7, a8);
  if (!v11 || !*(_DWORD *)(v11 + 24))
    goto LABEL_21;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v14 = *(unsigned int *)(v11 + 8);
  v15 = *(_DWORD *)(a3 + 16);
  if ((v12 & 1) != 0)
  {
    if ((v15 & 0x20) != 0)
      v15 = *(_DWORD *)(a3 + 32);
    v16 = *(_DWORD *)(v11 + 12);
    v17 = (v15 >> 8) & *(_QWORD *)&v16;
    v18 = *(unsigned __int8 *)(v13 + v17);
    if (*(_BYTE *)(v13 + v17))
    {
      v19 = v13 + v14;
      v20 = 1;
      while (1)
      {
        v21 = *(_QWORD *)(v19 + 8 * (v18 - 1));
        if (a3 == (v21 & 0xFFFFFFFFFFFFLL))
          break;
        v17 = ((_DWORD)v17 + v20) & v16;
        v18 = *(unsigned __int8 *)(v13 + v17);
        ++v20;
        v22 = 0xFFFFFFFFLL;
        if (!*(_BYTE *)(v13 + v17))
          goto LABEL_22;
      }
      v22 = HIBYTE(v21);
      goto LABEL_22;
    }
LABEL_21:
    v22 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if ((v15 & 0x20) != 0)
    v15 = *(_DWORD *)(a3 + 32);
  v23 = *(_DWORD *)(v11 + 12);
  v24 = v23 & (v15 >> 8);
  v25 = *(_DWORD *)(v13 + 4 * v24);
  if (!v25)
    goto LABEL_21;
  v26 = v13 + 4 * v14;
  v27 = 1;
  while (1)
  {
    v28 = (v25 - 1);
    if (*(_QWORD *)(v26 + 16 * v28) == a3)
      break;
    v24 = (v24 + v27) & v23;
    v25 = *(_DWORD *)(v13 + 4 * v24);
    ++v27;
    v22 = 0xFFFFFFFFLL;
    if (!v25)
      goto LABEL_22;
  }
  v22 = *(unsigned int *)(v26 + 16 * v28 + 8);
LABEL_22:
  JSC::Structure::startWatchingPropertyForReplacements(this, a2, (JSC::Structure *)v22, (uint64_t)a4, a5, a6, a7, a8);
}

void JSC::Structure::startWatchingPropertyForReplacements(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  JSC::VM *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t **v43;
  uint64_t *i;
  uint64_t **v45;
  uint64_t *j;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  if ((_DWORD)a3 != -1)
  {
    v8 = (int)a3;
    v11 = *((unsigned __int16 *)this + 12);
    if (v11 == 65534)
    {
      v11 = -1;
    }
    else if (v11 == 0xFFFF)
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
    }
    if (v11 >= (int)a3 && ((int)a3 > 63 || *((unsigned __int8 *)this + 14) > (int)a3))
    {
      v12 = (JSC::VM *)*((_QWORD *)this + 8);
      if (!v12 || *((_BYTE *)v12 + 5) == 1)
      {
        v41 = JSC::StructureRareData::create(a2, v12, a3, a4, a5, a6, a7, a8);
        __dmb(0xAu);
        *((_QWORD *)this + 8) = v41;
        if (v41)
        {
          if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
        }
      }
      v13 = (unsigned __int8 *)this + 15;
      if (__ldaxr((unsigned __int8 *)this + 15))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
        goto LABEL_14;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
LABEL_14:
      v15 = *((_QWORD *)this + 8);
      v17 = (uint64_t *)(v15 + 56);
      v16 = *(_QWORD *)(v15 + 56);
      if (v16
        || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v17, 8u, 0), (v16 = *v17) != 0))
      {
        v18 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v18 = 0;
      }
      v19 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
      v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      v21 = v18 & (v20 ^ HIWORD(v20));
      v22 = v16 + 16 * v21;
      v23 = *(_DWORD *)v22;
      if (*(_DWORD *)v22 != 0x7FFFFFFF)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v8)
        {
          if (v23 == 2147483646)
            v24 = v22;
          v21 = (v21 + v25) & v18;
          v22 = v16 + 16 * v21;
          v23 = *(_DWORD *)v22;
          ++v25;
          if (*(_DWORD *)v22 == 0x7FFFFFFF)
          {
            if (!v24)
              goto LABEL_23;
            *(_DWORD *)v24 = 0x7FFFFFFF;
            *(_QWORD *)(v24 + 8) = 0;
            --*(_DWORD *)(*v17 - 16);
            *(_DWORD *)v24 = v8;
            *(_QWORD *)(v24 + 8) = 0;
            v22 = v24;
            goto LABEL_26;
          }
        }
LABEL_36:
        v40 = __ldxr(v13);
        if (v40 == 1)
        {
          if (!__stlxr(0, v13))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 15, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      }
LABEL_23:
      v26 = *(_QWORD *)(v22 + 8);
      *(_DWORD *)v22 = v8;
      *(_QWORD *)(v22 + 8) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v26);
          v43 = (uint64_t **)(v26 + 8);
          for (i = *(uint64_t **)(v26 + 8); i != (uint64_t *)v43; i = *v43)
          {
            v48 = *i;
            v47 = (uint64_t *)i[1];
            *v47 = *i;
            *(_QWORD *)(v48 + 8) = v47;
            *i = 0;
            i[1] = 0;
          }
          WTF::fastFree(v26, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
LABEL_26:
      v29 = *v17;
      if (*v17)
        v30 = *(_DWORD *)(v29 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *v17;
      if (*v17)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_32;
      }
      else
      {
        if (3 * v34 > 4 * v33)
        {
LABEL_32:
          v36 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v36 = 1;
          *(_WORD *)(v36 + 4) = 1;
          *(_QWORD *)(v36 + 8) = v36 + 8;
          *(_QWORD *)(v36 + 16) = v36 + 8;
          v37 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v36;
          if (v37)
          {
            do
            {
              v38 = __ldaxr((unsigned int *)v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, (unsigned int *)v37));
            if (!v39)
            {
              atomic_store(1u, (unsigned int *)v37);
              v45 = (uint64_t **)(v37 + 8);
              for (j = *(uint64_t **)(v37 + 8); j != (uint64_t *)v45; j = *v45)
              {
                v50 = *j;
                v49 = (uint64_t *)j[1];
                *v49 = *j;
                *(_QWORD *)(v50 + 8) = v49;
                *j = 0;
                j[1] = 0;
              }
              WTF::fastFree(v37, v35, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
          }
          ++*(_DWORD *)(v15 + 92);
          *((_DWORD *)this + 4) |= 0x40000u;
          goto LABEL_36;
        }
        if (!(_DWORD)v34)
        {
          v42 = 8;
          goto LABEL_54;
        }
      }
      v42 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_54:
      v22 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v17, v42, (int *)v22);
      goto LABEL_32;
    }
  }
}

void JSC::Structure::didReplacePropertySlow(int64_t this, int a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::StructureRareData **v10;
  int v12;
  JSC::StructureRareData *v13;
  JSC::VM *v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t **v54;
  uint64_t *i;
  uint64_t **v56;
  uint64_t *j;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD v62[2];

  v10 = (JSC::StructureRareData **)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v10 = (JSC::StructureRareData **)(this - 16);
  if (a2 != -1)
  {
    v12 = *(unsigned __int16 *)(this + 24);
    if (v12 == 65534)
    {
      v12 = -1;
    }
    else if (v12 == 0xFFFF)
    {
      v12 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
    }
    if (v12 >= a2)
    {
      v13 = *v10;
      if (a2 > 63 || *(unsigned __int8 *)(this + 14) > a2)
      {
        v14 = *(JSC::VM **)(this + 64);
        if (!v14 || *((_BYTE *)v14 + 5) == 1)
        {
          v44 = JSC::StructureRareData::create(v13, v14, a3, a4, a5, a6, a7, a8);
          __dmb(0xAu);
          *(_QWORD *)(this + 64) = v44;
          if (v44)
          {
            if (*((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(this + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, this);
          }
        }
        v15 = (unsigned __int8 *)(this + 15);
        if (__ldaxr((unsigned __int8 *)(this + 15)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v15))
        {
          goto LABEL_16;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 15);
LABEL_16:
        v17 = *(_QWORD *)(this + 64);
        v19 = (uint64_t *)(v17 + 56);
        v18 = *(_QWORD *)(v17 + 56);
        if (v18
          || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v19, 8u, 0), (v18 = *v19) != 0))
        {
          v20 = *(_DWORD *)(v18 - 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
        v22 = (v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11);
        v23 = v20 & (v22 ^ HIWORD(v22));
        v24 = v18 + 16 * v23;
        v25 = *(_DWORD *)v24;
        if (*(_DWORD *)v24 != 0x7FFFFFFF)
        {
          v26 = 0;
          v27 = 1;
          while (v25 != a2)
          {
            if (v25 == 2147483646)
              v26 = v24;
            v23 = (v23 + v27) & v20;
            v24 = v18 + 16 * v23;
            v25 = *(_DWORD *)v24;
            ++v27;
            if (*(_DWORD *)v24 == 0x7FFFFFFF)
            {
              if (!v26)
                goto LABEL_25;
              *(_DWORD *)v26 = 0x7FFFFFFF;
              *(_QWORD *)(v26 + 8) = 0;
              --*(_DWORD *)(*v19 - 16);
              *(_DWORD *)v26 = a2;
              *(_QWORD *)(v26 + 8) = 0;
              v24 = v26;
              goto LABEL_28;
            }
          }
LABEL_38:
          v42 = *(_QWORD *)(v24 + 8);
          v43 = __ldxr(v15);
          if (v43 == 1)
          {
            if (!__stlxr(0, v15))
              goto LABEL_43;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(this + 15), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_43:
          if (v42 && *(_BYTE *)(v42 + 4) == 1)
          {
            v45 = *(_QWORD *)(this + 64);
            v62[0] = &off_1E3583C90;
            v62[1] = "Property did get replaced";
            __dmb(0xAu);
            v48 = *(uint64_t **)(v42 + 8);
            v47 = (uint64_t *)(v42 + 8);
            v46 = v48;
            *((_BYTE *)v47 - 4) = 2;
            v49 = *((_DWORD *)v13 + 229);
            *((_DWORD *)v13 + 229) = v49 + 1;
            if (v48 != v47)
            {
              do
              {
                v52 = *v46;
                v51 = (uint64_t *)v46[1];
                *v51 = *v46;
                *(_QWORD *)(v52 + 8) = v51;
                *v46 = 0;
                v46[1] = 0;
                JSC::Watchpoint::fire((unint64_t)v46, v13, v62, a4, a5, a6, a7, a8, a9);
                v46 = (uint64_t *)*v47;
              }
              while ((uint64_t *)*v47 != v47);
              v49 = *((_DWORD *)v13 + 229) - 1;
            }
            *((_DWORD *)v13 + 229) = v49;
            __dmb(0xAu);
            v50 = *(_DWORD *)(v45 + 92) - 1;
            *(_DWORD *)(v45 + 92) = v50;
            if (!v50)
              *(_DWORD *)(this + 16) &= ~0x40000u;
          }
          return;
        }
LABEL_25:
        v28 = *(_QWORD *)(v24 + 8);
        *(_DWORD *)v24 = a2;
        *(_QWORD *)(v24 + 8) = 0;
        if (v28)
        {
          do
          {
            v29 = __ldaxr((unsigned int *)v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, (unsigned int *)v28));
          if (!v30)
          {
            atomic_store(1u, (unsigned int *)v28);
            v54 = (uint64_t **)(v28 + 8);
            for (i = *(uint64_t **)(v28 + 8); i != (uint64_t *)v54; i = *v54)
            {
              v59 = *i;
              v58 = (uint64_t *)i[1];
              *v58 = *i;
              *(_QWORD *)(v59 + 8) = v58;
              *i = 0;
              i[1] = 0;
            }
            WTF::fastFree(v28, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
        }
LABEL_28:
        v31 = *v19;
        if (*v19)
          v32 = *(_DWORD *)(v31 - 12) + 1;
        else
          v32 = 1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v19;
        if (*v19)
          v34 = *(_DWORD *)(v33 - 12);
        else
          v34 = 0;
        v35 = (*(_DWORD *)(v33 - 16) + v34);
        v36 = *(unsigned int *)(v33 - 4);
        if (v36 > 0x400)
        {
          if (v36 > 2 * v35)
            goto LABEL_34;
        }
        else
        {
          if (3 * v36 > 4 * v35)
            goto LABEL_34;
          if (!(_DWORD)v36)
          {
            v53 = 8;
            goto LABEL_64;
          }
        }
        v53 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_64:
        v24 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v19, v53, (int *)v24);
LABEL_34:
        v38 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v38 = 1;
        *(_WORD *)(v38 + 4) = 1;
        *(_QWORD *)(v38 + 8) = v38 + 8;
        *(_QWORD *)(v38 + 16) = v38 + 8;
        v39 = *(_QWORD *)(v24 + 8);
        *(_QWORD *)(v24 + 8) = v38;
        if (v39)
        {
          do
          {
            v40 = __ldaxr((unsigned int *)v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, (unsigned int *)v39));
          if (!v41)
          {
            atomic_store(1u, (unsigned int *)v39);
            v56 = (uint64_t **)(v39 + 8);
            for (j = *(uint64_t **)(v39 + 8); j != (uint64_t *)v56; j = *v56)
            {
              v61 = *j;
              v60 = (uint64_t *)j[1];
              *v60 = *j;
              *(_QWORD *)(v61 + 8) = v60;
              *j = 0;
              j[1] = 0;
            }
            WTF::fastFree(v39, v37, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
        }
        ++*(_DWORD *)(v17 + 92);
        *(_DWORD *)(this + 16) |= 0x40000u;
        goto LABEL_38;
      }
    }
  }
}

void JSC::Structure::getPropertiesConcurrently(JSC::Structure *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v8;

  *a8 = 0;
  a8[1] = 0;
  v8 = a8;
  JSC::Structure::forEachPropertyConcurrently<JSC::Structure::getPropertiesConcurrently(void)::$_0>((uint64_t)this, (uint64_t *)&v8, a2, a3, a4, a5, a6, a7);
}

void JSC::Structure::forEachPropertyConcurrently<JSC::Structure::getPropertiesConcurrently(void)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  WTF *v68;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  _BYTE v76[64];

  v73 = a1;
  v74 = (WTF *)v76;
  v75 = 8;
  if (!a1)
    goto LABEL_80;
  while (1)
  {
    v9 = (unsigned __int8 *)(a1 + 15);
    if (__ldaxr(v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_6:
    v11 = v73;
    v12 = *(_QWORD *)(v73 + 88);
    if (v12)
      goto LABEL_22;
    v13 = HIDWORD(v75);
    if (HIDWORD(v75) == (_DWORD)v75)
    {
      v18 = (uint64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, HIDWORD(v75) + 1, (unint64_t)&v73);
      v13 = HIDWORD(v75);
      v14 = (uint64_t *)((char *)v74 + 8 * HIDWORD(v75));
      v11 = *v18;
    }
    else
    {
      v14 = (uint64_t *)((char *)v74 + 8 * HIDWORD(v75));
    }
    *v14 = v11;
    HIDWORD(v75) = v13 + 1;
    v15 = (unsigned __int8 *)(v73 + 15);
    v16 = __ldxr((unsigned __int8 *)(v73 + 15));
    if (v16 != 1)
    {
      __clrex();
LABEL_13:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_14;
    }
    if (__stlxr(0, v15))
      goto LABEL_13;
LABEL_14:
    a1 = *(_QWORD *)(v73 + 64);
    if (!a1)
      goto LABEL_21;
    if (*(_BYTE *)(a1 + 5) != 1)
      break;
LABEL_18:
    v73 = a1;
    if (!a1)
      goto LABEL_22;
  }
  v17 = *(_DWORD *)(a1 + 80);
  if (v17)
  {
    a1 = 16 * (v17 & 0xFFFFFFFE);
    goto LABEL_18;
  }
LABEL_21:
  v73 = 0;
LABEL_22:
  v72 = 0;
  if (HIDWORD(v75))
  {
    v19 = v74;
    v20 = (WTF *)((char *)v74 + 8 * HIDWORD(v75));
    while (1)
    {
      v21 = *(_QWORD *)v19;
      v22 = *(unsigned int *)(*(_QWORD *)v19 + 72);
      if ((_DWORD)v22)
      {
        v23 = 16 * v22;
        if (!v72)
          goto LABEL_31;
        v24 = *(_DWORD *)(v72 - 8);
        v25 = (v23 + ~(v22 << 36)) ^ ((unint64_t)(v23 + ~(v22 << 36)) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = *(_QWORD *)(v72 + 8 * v28);
        if (v29 != v23)
          break;
      }
LABEL_41:
      v19 = (WTF *)((char *)v19 + 8);
      if (v19 == v20)
        goto LABEL_44;
    }
    v30 = 1;
    while (v29)
    {
      v28 = (v28 + v30) & v24;
      v29 = *(_QWORD *)(v72 + 8 * v28);
      ++v30;
      if (v29 == v23)
        goto LABEL_41;
    }
LABEL_31:
    v71 = v23;
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v72, &v71, a4, a5, a6, a7, a8, (uint64_t)&v70);
    v31 = (*(_DWORD *)(v21 + 16) >> 13) & 0x1F;
    if (v31 != 2 && v31 != 17)
    {
      v33 = *(unsigned __int16 *)(v21 + 22);
      if (v33 == 65534)
      {
        v33 = -1;
      }
      else if (v33 == 0xFFFF)
      {
        v33 = *(_DWORD *)(*(_QWORD *)(v21 + 64) + 88);
      }
      v34 = *(_BYTE *)(v21 + 20);
      *(_QWORD *)&v70 = 16 * *(unsigned int *)(v21 + 72);
      DWORD2(v70) = v33;
      BYTE12(v70) = v34;
      v35 = *a2;
      v36 = *(unsigned int *)(*a2 + 12);
      if ((_DWORD)v36 == *(_DWORD *)(*a2 + 8))
      {
        WTF::Vector<JSC::PropertyTableEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyTableEntry const&>(v35, (unint64_t)&v70);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)v35 + 16 * v36) = v70;
        ++*(_DWORD *)(v35 + 12);
      }
    }
    goto LABEL_41;
  }
LABEL_44:
  if (!v12)
    goto LABEL_78;
  v37 = *(_QWORD *)(v12 + 16);
  v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
  v39 = *(unsigned int *)(v12 + 8);
  v40 = (*(_DWORD *)(v12 + 28) + *(_DWORD *)(v12 + 24));
  if ((v37 & 1) != 0)
  {
    if (!(_DWORD)v40)
      goto LABEL_73;
    v53 = (unint64_t *)(v38 + v39);
    v54 = v38 + v39 + 8 * v40;
    while (1)
    {
      v55 = *v53;
      v56 = *v53 & 0xFFFFFFFFFFFFLL;
      if (v56 != 1)
      {
        if (!v72)
          goto LABEL_69;
        v57 = *(_DWORD *)(v72 - 8);
        v58 = (v56 + ~(v55 << 32)) ^ ((v56 + ~(v55 << 32)) >> 22);
        v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
        v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
        v61 = v57 & ((v60 >> 31) ^ v60);
        v62 = *(_QWORD *)(v72 + 8 * v61);
        if (v62 != v56)
          break;
      }
LABEL_72:
      if (++v53 == (unint64_t *)v54)
        goto LABEL_73;
    }
    v63 = 1;
    while (v62)
    {
      v61 = (v61 + v63) & v57;
      v62 = *(_QWORD *)(v72 + 8 * v61);
      ++v63;
      if (v62 == v56)
        goto LABEL_72;
    }
LABEL_69:
    *(_QWORD *)&v70 = *v53 & 0xFFFFFFFFFFFFLL;
    DWORD2(v70) = HIBYTE(v55);
    BYTE12(v70) = BYTE6(v55);
    v64 = *a2;
    v65 = *(unsigned int *)(*a2 + 12);
    if ((_DWORD)v65 == *(_DWORD *)(*a2 + 8))
    {
      WTF::Vector<JSC::PropertyTableEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyTableEntry const&>(v64, (unint64_t)&v70);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)v64 + 16 * v65) = v70;
      ++*(_DWORD *)(v64 + 12);
    }
    goto LABEL_72;
  }
  if ((_DWORD)v40)
  {
    v41 = (uint64_t *)(v38 + 4 * v39);
    v42 = &v41[2 * v40];
    while (1)
    {
      v43 = *v41;
      if (*v41 != 1)
      {
        if (!v72)
          goto LABEL_55;
        v44 = *(_DWORD *)(v72 - 8);
        v45 = (~(v43 << 32) + v43) ^ ((unint64_t)(~(v43 << 32) + v43) >> 22);
        v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
        v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
        v48 = v44 & ((v47 >> 31) ^ v47);
        v49 = *(_QWORD *)(v72 + 8 * v48);
        if (v49 != v43)
          break;
      }
LABEL_58:
      v41 += 2;
      if (v41 == v42)
        goto LABEL_73;
    }
    v50 = 1;
    while (v49)
    {
      v48 = (v48 + v50) & v44;
      v49 = *(_QWORD *)(v72 + 8 * v48);
      ++v50;
      if (v49 == v43)
        goto LABEL_58;
    }
LABEL_55:
    v51 = *a2;
    v52 = *(unsigned int *)(*a2 + 12);
    if ((_DWORD)v52 == *(_DWORD *)(*a2 + 8))
    {
      WTF::Vector<JSC::PropertyTableEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyTableEntry const&>(v51, (unint64_t)v41);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)v51 + 16 * v52) = *(_OWORD *)v41;
      ++*(_DWORD *)(v51 + 12);
    }
    goto LABEL_58;
  }
LABEL_73:
  v66 = (unsigned __int8 *)(v73 + 15);
  v67 = __ldxr((unsigned __int8 *)(v73 + 15));
  if (v67 == 1)
  {
    if (!__stlxr(0, v66))
      goto LABEL_78;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v66, 0, a3, a4, a5, a6, a7, a8);
LABEL_78:
  if (v72)
    WTF::fastFree(v72 - 16, a2, a3, a4, a5, a6, a7, a8);
LABEL_80:
  v68 = v74;
  if (v76 != (_BYTE *)v74 && v74 != 0)
  {
    v74 = 0;
    LODWORD(v75) = 0;
    WTF::fastFree((unint64_t)v68, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Structure::getPropertyNamesFromStructure(JSC::Structure *a1, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  unint64_t v52;
  WTF::StringImpl **v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  int v95;
  unint64_t v96;
  WTF::StringImpl **v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  _BYTE *v112;
  WTF::StringImpl *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  WTF::StringImpl *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl **v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  WTF::StringImpl *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl **v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  uint64_t *v249;
  WTF::AtomStringImpl *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WTF::StringImpl *v260;
  uint64_t *v261;
  WTF::AtomStringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  WTF::StringImpl *v272;
  unint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  WTF::StringImpl *v307[2];
  char v308;
  uint64_t v309;
  WTF::StringImpl *v310;

  v8 = (int)a4;
  JSC::Structure::ensurePropertyTableIfNotEmpty(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v10)
    return;
  v18 = *(_DWORD *)(*(_QWORD *)a3 + 20);
  v19 = *(_QWORD *)(v10 + 16);
  v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
  v21 = *(unsigned int *)(v10 + 8);
  v22 = (*(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 24));
  if ((v19 & 1) != 0)
  {
    if (!(_DWORD)v22)
      return;
    v305 = v10;
    v67 = (uint64_t *)(v20 + v21);
    v306 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    v23 = 0;
    if (v18)
    {
      v68 = (uint64_t *)(a3 + 8);
      v69 = &v67[v22];
      while (1)
      {
        v70 = *v67;
        v71 = (WTF::StringImpl *)(*v67 & 0xFFFFFFFFFFFFLL);
        if (v71 == (WTF::StringImpl *)1)
          goto LABEL_94;
        v72 = *(_DWORD *)((*v67 & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((v72 & 0x20) != 0)
        {
          if (*(_BYTE *)(a3 + 24) != 1 || v8 && (v70 & 0x4000000000000) != 0)
          {
            v23 = 1;
            goto LABEL_94;
          }
          v310 = (WTF::StringImpl *)(*v67 & 0xFFFFFFFFFFFFLL);
          if (*(_BYTE *)(a3 + 25))
          {
            v23 = 1;
            if ((*((_BYTE *)v71 + 36) & 4) != 0)
              goto LABEL_94;
          }
          else
          {
            v23 = 1;
          }
        }
        else
        {
          if (v8 && (v70 & 0x4000000000000) != 0)
            goto LABEL_94;
          v310 = (WTF::StringImpl *)(*v67 & 0xFFFFFFFFFFFFLL);
          if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            goto LABEL_94;
        }
        v73 = *(_QWORD *)a3;
        v74 = *(unsigned int *)(*(_QWORD *)a3 + 20);
        if (v74 <= 0x13)
        {
          if ((_DWORD)v74)
          {
            v97 = *(WTF::StringImpl ***)(v73 + 8);
            while (*v97 != v71)
            {
              ++v97;
              if (!--v74)
                goto LABEL_83;
            }
            goto LABEL_94;
          }
LABEL_83:
          if ((v72 & 0x20) != 0)
          {
            v75 = *(_DWORD *)v71 + 2;
          }
          else
          {
            if ((v72 & 0x10) != 0)
            {
              *(_DWORD *)v71 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v71, v12, v13, v14, v15, v16, v17, v307);
              v71 = v307[0];
            }
            v75 = *(_DWORD *)v71;
            *(_DWORD *)v71 += 2;
            if (!v75)
            {
              WTF::StringImpl::~StringImpl(v71, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
              WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
LABEL_88:
              v307[0] = v71;
              v76 = *(unsigned int *)(v73 + 20);
              if ((_DWORD)v76 == *(_DWORD *)(v73 + 16))
              {
                v106 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v73 + 8, v76 + 1, (unint64_t)v307);
                v107 = *(unsigned int *)(v73 + 20);
                v108 = *(_QWORD *)(v73 + 8);
                v109 = *v106;
                *v106 = 0;
                *(_QWORD *)(v108 + 8 * v107) = v109;
                v110 = v307[0];
                *(_DWORD *)(v73 + 20) = v107 + 1;
                v307[0] = 0;
                if (v110)
                {
                  if (*(_DWORD *)v110 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v110, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
                    WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
                  }
                  else
                  {
                    *(_DWORD *)v110 -= 2;
                  }
                }
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v76) = v71;
                *(_DWORD *)(v73 + 20) = v76 + 1;
              }
              goto LABEL_94;
            }
          }
          *(_DWORD *)v71 = v75;
          goto LABEL_88;
        }
        if (!*v68 || !*(_DWORD *)(*v68 - 12))
          break;
LABEL_81:
        WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v310, v13, v14, v15, v16, v17, (uint64_t)v307);
        if (v308)
        {
          v71 = v310;
          v73 = *(_QWORD *)a3;
          v72 = *((_DWORD *)v310 + 4);
          goto LABEL_83;
        }
LABEL_94:
        if (++v67 == v69)
          goto LABEL_189;
      }
      v77 = *(uint64_t **)(v73 + 8);
      v78 = &v77[v74];
      while (1)
      {
        v79 = *v77;
        v80 = *v68;
        if (*v68
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, v13, v14, v15, v16, v17), (v80 = *v68) != 0))
        {
          v81 = *(_DWORD *)(v80 - 8);
        }
        else
        {
          v81 = 0;
        }
        v82 = (~(v79 << 32) + v79) ^ ((unint64_t)(~(v79 << 32) + v79) >> 22);
        v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((v82 + ~(v82 << 13)) >> 8));
        v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
        v85 = v81 & ((v84 >> 31) ^ v84);
        v86 = (_QWORD *)(v80 + 8 * v85);
        v87 = *v86;
        if (*v86)
        {
          v94 = 0;
          v95 = 1;
          while (v87 != v79)
          {
            if (v87 == -1)
              v94 = v86;
            v85 = (v85 + v95) & v81;
            v86 = (_QWORD *)(v80 + 8 * v85);
            v87 = *v86;
            ++v95;
            if (!*v86)
            {
              if (v94)
              {
                *v94 = 0;
                --*(_DWORD *)(*v68 - 16);
                v86 = v94;
              }
              goto LABEL_100;
            }
          }
          goto LABEL_106;
        }
LABEL_100:
        *v86 = v79;
        v88 = *v68;
        v89 = *v68 ? *(_DWORD *)(v88 - 12) + 1 : 1;
        *(_DWORD *)(v88 - 12) = v89;
        v90 = *v68;
        v91 = *v68 ? *(_DWORD *)(v90 - 12) : 0;
        v92 = (*(_DWORD *)(v90 - 16) + v91);
        v93 = *(unsigned int *)(v90 - 4);
        if (v93 > 0x400)
          break;
        if (3 * v93 <= 4 * v92)
        {
          if (!(_DWORD)v93)
          {
            v96 = 8;
LABEL_119:
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v96, (uint64_t)v86, v13, v14, v15, v16, v17);
            goto LABEL_106;
          }
LABEL_123:
          v96 = ((_DWORD)v93 << (6 * *(_DWORD *)(v90 - 12) >= (2 * v93)));
          goto LABEL_119;
        }
LABEL_106:
        if (++v77 == v78)
          goto LABEL_81;
      }
      if (v93 > 2 * v92)
        goto LABEL_106;
      goto LABEL_123;
    }
    v132 = 8 * v22;
    while (1)
    {
      v133 = *v67;
      v134 = (WTF::StringImpl *)(*v67 & 0xFFFFFFFFFFFFLL);
      if (v134 != (WTF::StringImpl *)1)
      {
        v135 = *(_DWORD *)((*v67 & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((v135 & 0x20) != 0)
        {
          if (*(_BYTE *)(a3 + 24) == 1
            && (!v8 || (v133 & 0x4000000000000) == 0)
            && (!*(_BYTE *)(a3 + 25) || (*(_BYTE *)((*v67 & 0xFFFFFFFFFFFFLL) + 0x24) & 4) == 0))
          {
            v137 = *(_QWORD *)a3 + 8;
            *(_DWORD *)v134 += 2;
            v23 = 1;
            goto LABEL_173;
          }
          v23 = 1;
        }
        else if ((!v8 || (v133 & 0x4000000000000) == 0) && (*(_BYTE *)(a3 + 24) & 2) != 0)
        {
          v136 = *(_QWORD *)a3;
          if ((v135 & 0x10) != 0)
          {
            *(_DWORD *)v134 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), *v67 & 0xFFFFFFFFFFFFLL, v12, v13, v14, v15, v16, v17, v307);
            v134 = v307[0];
          }
          v137 = v136 + 8;
          v138 = *(_DWORD *)v134;
          *(_DWORD *)v134 += 2;
          if (v138)
          {
            *(_DWORD *)v134 = v138;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v134, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
          }
LABEL_173:
          v310 = v134;
          v139 = *(unsigned int *)(v137 + 12);
          if ((_DWORD)v139 == *(_DWORD *)(v137 + 8))
          {
            v148 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v137, v139 + 1, (unint64_t)&v310);
            v149 = *(unsigned int *)(v137 + 12);
            v150 = *(_QWORD *)v137;
            v151 = *v148;
            *v148 = 0;
            *(_QWORD *)(v150 + 8 * v149) = v151;
            v152 = v310;
            *(_DWORD *)(v137 + 12) = v149 + 1;
            v310 = 0;
            if (v152)
            {
              if (*(_DWORD *)v152 == 2)
              {
                WTF::StringImpl::~StringImpl(v152, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
                WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
              }
              else
              {
                *(_DWORD *)v152 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v137 + 8 * v139) = v134;
            *(_DWORD *)(v137 + 12) = v139 + 1;
          }
        }
      }
      ++v67;
      v132 -= 8;
      if (!v132)
      {
LABEL_189:
        if (!v23 || *(_BYTE *)(a3 + 24) != 3)
          return;
        v153 = *(_QWORD *)(v305 + 16);
        v154 = v153 & 0xFFFFFFFFFFFFFFFELL;
        v155 = *(unsigned int *)(v305 + 8);
        v156 = (*(_DWORD *)(v305 + 28) + *(_DWORD *)(v305 + 24));
        if ((v153 & 1) == 0)
        {
          if (!(_DWORD)v156)
            return;
          v157 = v154 + 4 * v155;
          if (!v306)
          {
            v231 = 16 * v156;
            do
            {
              v232 = *(WTF::StringImpl **)v157;
              if (*(_QWORD *)v157 != 1
                && (*((_BYTE *)v232 + 16) & 0x20) != 0
                && (!v8 || (*(_BYTE *)(v157 + 12) & 4) == 0)
                && (*(_BYTE *)(a3 + 24) & 1) != 0
                && (!*(_BYTE *)(a3 + 25) || (*((_BYTE *)v232 + 36) & 4) == 0))
              {
                v233 = *(_QWORD *)a3;
                *(_DWORD *)v232 += 2;
                v307[0] = v232;
                v234 = *(unsigned int *)(v233 + 20);
                if ((_DWORD)v234 == *(_DWORD *)(v233 + 16))
                {
                  v249 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v233 + 8, v234 + 1, (unint64_t)v307);
                  v257 = *(unsigned int *)(v233 + 20);
                  v258 = *(_QWORD *)(v233 + 8);
                  v259 = *v249;
                  *v249 = 0;
                  *(_QWORD *)(v258 + 8 * v257) = v259;
                  v260 = v307[0];
                  *(_DWORD *)(v233 + 20) = v257 + 1;
                  v307[0] = 0;
                  if (v260)
                  {
                    if (*(_DWORD *)v260 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v260, v250, v251, v252, v253, v254, v255, v256);
                      WTF::fastFree(v289, v290, v291, v292, v293, v294, v295, v296);
                    }
                    else
                    {
                      *(_DWORD *)v260 -= 2;
                    }
                  }
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v233 + 8) + 8 * v234) = v232;
                  *(_DWORD *)(v233 + 20) = v234 + 1;
                }
              }
              v157 += 16;
              v231 -= 16;
            }
            while (v231);
            return;
          }
          v158 = v157 + 16 * v156;
          v159 = (_QWORD *)(a3 + 8);
          while (2)
          {
            v160 = *(WTF::StringImpl **)v157;
            if (*(_QWORD *)v157 == 1)
              goto LABEL_198;
            v161 = *((_DWORD *)v160 + 4);
            if ((v161 & 0x20) == 0 || v8 && (*(_BYTE *)(v157 + 12) & 4) != 0)
              goto LABEL_198;
            v310 = *(WTF::StringImpl **)v157;
            if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v160 + 36) & 4) != 0)
              goto LABEL_198;
            v162 = *(_QWORD *)a3;
            v163 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v163 > 0x13)
            {
              if (!*v159 || !*(_DWORD *)(*v159 - 12))
              {
                v166 = *(uint64_t **)(v162 + 8);
                v167 = 8 * v163;
                do
                {
                  v168 = *v166++;
                  v309 = v168;
                  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v309, v13, v14, v15, v16, v17, (uint64_t)v307);
                  v167 -= 8;
                }
                while (v167);
              }
              WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v310, v13, v14, v15, v16, v17, (uint64_t)v307);
              if (v308)
              {
                v160 = v310;
                v162 = *(_QWORD *)a3;
                v161 = *((_DWORD *)v310 + 4);
                goto LABEL_210;
              }
LABEL_198:
              v157 += 16;
              if (v157 == v158)
                return;
              continue;
            }
            break;
          }
          if ((_DWORD)v163)
          {
            v169 = *(WTF::StringImpl ***)(v162 + 8);
            while (*v169 != v160)
            {
              ++v169;
              if (!--v163)
                goto LABEL_210;
            }
            goto LABEL_198;
          }
LABEL_210:
          if ((v161 & 0x20) == 0)
          {
            if ((v161 & 0x10) != 0)
            {
              *(_DWORD *)v160 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v160, v12, v13, v14, v15, v16, v17, v307);
              v160 = v307[0];
            }
            v164 = *(_DWORD *)v160;
            *(_DWORD *)v160 += 2;
            if (v164)
            {
LABEL_214:
              *(_DWORD *)v160 = v164;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v160, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
              WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
            }
            v307[0] = v160;
            v165 = *(unsigned int *)(v162 + 20);
            if ((_DWORD)v165 == *(_DWORD *)(v162 + 16))
            {
              v239 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162 + 8, v165 + 1, (unint64_t)v307);
              v240 = *(unsigned int *)(v162 + 20);
              v241 = *(_QWORD *)(v162 + 8);
              v242 = *v239;
              *v239 = 0;
              *(_QWORD *)(v241 + 8 * v240) = v242;
              v243 = v307[0];
              *(_DWORD *)(v162 + 20) = v240 + 1;
              v307[0] = 0;
              if (v243)
              {
                if (*(_DWORD *)v243 == 2)
                {
                  WTF::StringImpl::~StringImpl(v243, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
                  WTF::fastFree(v273, v274, v275, v276, v277, v278, v279, v280);
                }
                else
                {
                  *(_DWORD *)v243 -= 2;
                }
              }
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v162 + 8) + 8 * v165) = v160;
              *(_DWORD *)(v162 + 20) = v165 + 1;
            }
            goto LABEL_198;
          }
          v164 = *(_DWORD *)v160 + 2;
          goto LABEL_214;
        }
        if (!(_DWORD)v156)
          return;
        v210 = (_QWORD *)(v154 + v155);
        if (!v306)
        {
          v235 = 8 * v156;
          do
          {
            v236 = (WTF::StringImpl *)(*v210 & 0xFFFFFFFFFFFFLL);
            if (v236 != (WTF::StringImpl *)1
              && (*(_BYTE *)((*v210 & 0xFFFFFFFFFFFFLL) + 0x10) & 0x20) != 0
              && (!v8 || (*v210 & 0x4000000000000) == 0)
              && (*(_BYTE *)(a3 + 24) & 1) != 0
              && (!*(_BYTE *)(a3 + 25) || (*(_BYTE *)((*v210 & 0xFFFFFFFFFFFFLL) + 0x24) & 4) == 0))
            {
              v237 = *(_QWORD *)a3;
              *(_DWORD *)v236 += 2;
              v307[0] = v236;
              v238 = *(unsigned int *)(v237 + 20);
              if ((_DWORD)v238 == *(_DWORD *)(v237 + 16))
              {
                v261 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v237 + 8, v238 + 1, (unint64_t)v307);
                v269 = *(unsigned int *)(v237 + 20);
                v270 = *(_QWORD *)(v237 + 8);
                v271 = *v261;
                *v261 = 0;
                *(_QWORD *)(v270 + 8 * v269) = v271;
                v272 = v307[0];
                *(_DWORD *)(v237 + 20) = v269 + 1;
                v307[0] = 0;
                if (v272)
                {
                  if (*(_DWORD *)v272 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v272, v262, v263, v264, v265, v266, v267, v268);
                    WTF::fastFree(v297, v298, v299, v300, v301, v302, v303, v304);
                  }
                  else
                  {
                    *(_DWORD *)v272 -= 2;
                  }
                }
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v237 + 8) + 8 * v238) = v236;
                *(_DWORD *)(v237 + 20) = v238 + 1;
              }
            }
            ++v210;
            v235 -= 8;
          }
          while (v235);
          return;
        }
        v211 = &v210[v156];
        v212 = (_QWORD *)(a3 + 8);
        while (2)
        {
          v213 = (WTF::StringImpl *)(*v210 & 0xFFFFFFFFFFFFLL);
          if (v213 == (WTF::StringImpl *)1)
            goto LABEL_238;
          v214 = *(_DWORD *)((*v210 & 0xFFFFFFFFFFFFLL) + 0x10);
          if ((v214 & 0x20) == 0 || v8 && (*v210 & 0x4000000000000) != 0)
            goto LABEL_238;
          v310 = (WTF::StringImpl *)(*v210 & 0xFFFFFFFFFFFFLL);
          if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v213 + 36) & 4) != 0)
            goto LABEL_238;
          v215 = *(_QWORD *)a3;
          v216 = *(unsigned int *)(*(_QWORD *)a3 + 20);
          if (v216 > 0x13)
          {
            if (!*v212 || !*(_DWORD *)(*v212 - 12))
            {
              v219 = *(uint64_t **)(v215 + 8);
              v220 = 8 * v216;
              do
              {
                v221 = *v219++;
                v309 = v221;
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v309, v13, v14, v15, v16, v17, (uint64_t)v307);
                v220 -= 8;
              }
              while (v220);
            }
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v310, v13, v14, v15, v16, v17, (uint64_t)v307);
            if (v308)
            {
              v213 = v310;
              v215 = *(_QWORD *)a3;
              v214 = *((_DWORD *)v310 + 4);
              goto LABEL_250;
            }
LABEL_238:
            if (++v210 == v211)
              return;
            continue;
          }
          break;
        }
        if ((_DWORD)v216)
        {
          v222 = *(WTF::StringImpl ***)(v215 + 8);
          while (*v222 != v213)
          {
            ++v222;
            if (!--v216)
              goto LABEL_250;
          }
          goto LABEL_238;
        }
LABEL_250:
        if ((v214 & 0x20) == 0)
        {
          if ((v214 & 0x10) != 0)
          {
            *(_DWORD *)v213 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v213, v12, v13, v14, v15, v16, v17, v307);
            v213 = v307[0];
          }
          v217 = *(_DWORD *)v213;
          *(_DWORD *)v213 += 2;
          if (v217)
          {
LABEL_254:
            *(_DWORD *)v213 = v217;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v213, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
          }
          v307[0] = v213;
          v218 = *(unsigned int *)(v215 + 20);
          if ((_DWORD)v218 == *(_DWORD *)(v215 + 16))
          {
            v244 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v215 + 8, v218 + 1, (unint64_t)v307);
            v245 = *(unsigned int *)(v215 + 20);
            v246 = *(_QWORD *)(v215 + 8);
            v247 = *v244;
            *v244 = 0;
            *(_QWORD *)(v246 + 8 * v245) = v247;
            v248 = v307[0];
            *(_DWORD *)(v215 + 20) = v245 + 1;
            v307[0] = 0;
            if (v248)
            {
              if (*(_DWORD *)v248 == 2)
              {
                WTF::StringImpl::~StringImpl(v248, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
                WTF::fastFree(v281, v282, v283, v284, v285, v286, v287, v288);
              }
              else
              {
                *(_DWORD *)v248 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v215 + 8) + 8 * v218) = v213;
            *(_DWORD *)(v215 + 20) = v218 + 1;
          }
          goto LABEL_238;
        }
        v217 = *(_DWORD *)v213 + 2;
        goto LABEL_254;
      }
    }
  }
  if ((_DWORD)v22)
  {
    v305 = v10;
    v306 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    v23 = 0;
    if (v18)
    {
      v24 = v20 + 4 * v21;
      v25 = v24 + 16 * v22;
      v26 = (uint64_t *)(a3 + 8);
      while (1)
      {
        v27 = *(WTF::StringImpl **)v24;
        if (*(_QWORD *)v24 == 1)
          goto LABEL_27;
        v28 = *((_DWORD *)v27 + 4);
        if ((v28 & 0x20) != 0)
        {
          if (*(_BYTE *)(a3 + 24) != 1 || v8 && (*(_BYTE *)(v24 + 12) & 4) != 0)
          {
            v23 = 1;
            goto LABEL_27;
          }
          v310 = *(WTF::StringImpl **)v24;
          if (*(_BYTE *)(a3 + 25))
          {
            v23 = 1;
            if ((*((_BYTE *)v27 + 36) & 4) != 0)
              goto LABEL_27;
          }
          else
          {
            v23 = 1;
          }
        }
        else
        {
          if (v8 && (*(_BYTE *)(v24 + 12) & 4) != 0)
            goto LABEL_27;
          v310 = *(WTF::StringImpl **)v24;
          if ((*(_BYTE *)(a3 + 24) & 2) == 0)
            goto LABEL_27;
        }
        v29 = *(_QWORD *)a3;
        v30 = *(unsigned int *)(*(_QWORD *)a3 + 20);
        if (v30 <= 0x13)
        {
          if ((_DWORD)v30)
          {
            v53 = *(WTF::StringImpl ***)(v29 + 8);
            while (*v53 != v27)
            {
              ++v53;
              if (!--v30)
                goto LABEL_16;
            }
            goto LABEL_27;
          }
LABEL_16:
          if ((v28 & 0x20) != 0)
          {
            v31 = *(_DWORD *)v27 + 2;
          }
          else
          {
            if ((v28 & 0x10) != 0)
            {
              *(_DWORD *)v27 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v27, v12, v13, v14, v15, v16, v17, v307);
              v27 = v307[0];
            }
            v31 = *(_DWORD *)v27;
            *(_DWORD *)v27 += 2;
            if (!v31)
            {
              WTF::StringImpl::~StringImpl(v27, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
              WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
LABEL_21:
              v307[0] = v27;
              v32 = *(unsigned int *)(v29 + 20);
              if ((_DWORD)v32 == *(_DWORD *)(v29 + 16))
              {
                v62 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 8, v32 + 1, (unint64_t)v307);
                v63 = *(unsigned int *)(v29 + 20);
                v64 = *(_QWORD *)(v29 + 8);
                v65 = *v62;
                *v62 = 0;
                *(_QWORD *)(v64 + 8 * v63) = v65;
                v66 = v307[0];
                *(_DWORD *)(v29 + 20) = v63 + 1;
                v307[0] = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v66, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
                    WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
                  }
                  else
                  {
                    *(_DWORD *)v66 -= 2;
                  }
                }
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v32) = v27;
                *(_DWORD *)(v29 + 20) = v32 + 1;
              }
              goto LABEL_27;
            }
          }
          *(_DWORD *)v27 = v31;
          goto LABEL_21;
        }
        if (!*v26 || !*(_DWORD *)(*v26 - 12))
          break;
LABEL_14:
        WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v310, v13, v14, v15, v16, v17, (uint64_t)v307);
        if (v308)
        {
          v27 = v310;
          v29 = *(_QWORD *)a3;
          v28 = *((_DWORD *)v310 + 4);
          goto LABEL_16;
        }
LABEL_27:
        v24 += 16;
        if (v24 == v25)
          goto LABEL_189;
      }
      v33 = *(uint64_t **)(v29 + 8);
      v34 = &v33[v30];
      while (1)
      {
        v35 = *v33;
        v36 = *v26;
        if (*v26
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8uLL, 0, v13, v14, v15, v16, v17), (v36 = *v26) != 0))
        {
          v37 = *(_DWORD *)(v36 - 8);
        }
        else
        {
          v37 = 0;
        }
        v38 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
        v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
        v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
        v41 = v37 & ((v40 >> 31) ^ v40);
        v42 = (_QWORD *)(v36 + 8 * v41);
        v43 = *v42;
        if (*v42)
        {
          v50 = 0;
          v51 = 1;
          while (v43 != v35)
          {
            if (v43 == -1)
              v50 = v42;
            v41 = (v41 + v51) & v37;
            v42 = (_QWORD *)(v36 + 8 * v41);
            v43 = *v42;
            ++v51;
            if (!*v42)
            {
              if (v50)
              {
                *v50 = 0;
                --*(_DWORD *)(*v26 - 16);
                v42 = v50;
              }
              goto LABEL_33;
            }
          }
          goto LABEL_39;
        }
LABEL_33:
        *v42 = v35;
        v44 = *v26;
        v45 = *v26 ? *(_DWORD *)(v44 - 12) + 1 : 1;
        *(_DWORD *)(v44 - 12) = v45;
        v46 = *v26;
        v47 = *v26 ? *(_DWORD *)(v46 - 12) : 0;
        v48 = (*(_DWORD *)(v46 - 16) + v47);
        v49 = *(unsigned int *)(v46 - 4);
        if (v49 > 0x400)
          break;
        if (3 * v49 <= 4 * v48)
        {
          if (!(_DWORD)v49)
          {
            v52 = 8;
LABEL_52:
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v52, (uint64_t)v42, v13, v14, v15, v16, v17);
            goto LABEL_39;
          }
LABEL_56:
          v52 = ((_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49)));
          goto LABEL_52;
        }
LABEL_39:
        if (++v33 == v34)
          goto LABEL_14;
      }
      if (v49 > 2 * v48)
        goto LABEL_39;
      goto LABEL_56;
    }
    v111 = 16 * v22;
    v112 = (_BYTE *)(v20 + 4 * v21 + 12);
    while (1)
    {
      v113 = *(WTF::StringImpl **)(v112 - 12);
      if (v113 != (WTF::StringImpl *)1)
      {
        v114 = *((_DWORD *)v113 + 4);
        if ((v114 & 0x20) != 0)
        {
          if (*(_BYTE *)(a3 + 24) == 1
            && (!v8 || (*v112 & 4) == 0)
            && (!*(_BYTE *)(a3 + 25) || (*((_BYTE *)v113 + 36) & 4) == 0))
          {
            v116 = *(_QWORD *)a3 + 8;
            *(_DWORD *)v113 += 2;
            v23 = 1;
            goto LABEL_147;
          }
          v23 = 1;
        }
        else if ((!v8 || (*v112 & 4) == 0) && (*(_BYTE *)(a3 + 24) & 2) != 0)
        {
          v115 = *(_QWORD *)a3;
          if ((v114 & 0x10) != 0)
          {
            *(_DWORD *)v113 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), *(_QWORD *)(v112 - 12), v12, v13, v14, v15, v16, v17, v307);
            v113 = v307[0];
          }
          v116 = v115 + 8;
          v117 = *(_DWORD *)v113;
          *(_DWORD *)v113 += 2;
          if (v117)
          {
            *(_DWORD *)v113 = v117;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v113, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
          }
LABEL_147:
          v310 = v113;
          v118 = *(unsigned int *)(v116 + 12);
          if ((_DWORD)v118 == *(_DWORD *)(v116 + 8))
          {
            v127 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v116, v118 + 1, (unint64_t)&v310);
            v128 = *(unsigned int *)(v116 + 12);
            v129 = *(_QWORD *)v116;
            v130 = *v127;
            *v127 = 0;
            *(_QWORD *)(v129 + 8 * v128) = v130;
            v131 = v310;
            *(_DWORD *)(v116 + 12) = v128 + 1;
            v310 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2)
              {
                WTF::StringImpl::~StringImpl(v131, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
                WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
              }
              else
              {
                *(_DWORD *)v131 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v116 + 8 * v118) = v113;
            *(_DWORD *)(v116 + 12) = v118 + 1;
          }
        }
      }
      v112 += 16;
      v111 -= 16;
      if (!v111)
        goto LABEL_189;
    }
  }
}

uint64_t JSC::StructureFireDetail::dump(JSC::StructureFireDetail *this, WTF::PrintStream *a2)
{
  unint64_t v3;
  WTF::PrintStream *v4;

  v3 = *((_QWORD *)this + 1);
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Structure transition from ");
  JSC::Structure::dump(v3, v4);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Structure::fireStructureTransitionWatchpoint(uint64_t this, JSC::DeferredStructureTransitionWatchpointFire *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM **v9;
  uint64_t *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  _QWORD v14[2];

  v9 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
  v10 = (uint64_t *)(this - 16);
  if (a2)
  {
    if ((this & 8) == 0)
      v10 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v11 = *(_QWORD *)(this + 96);
    if ((v11 & 1) != 0)
    {
      if ((v11 & 6) == 0)
        return this;
      goto LABEL_6;
    }
    if (*(_BYTE *)(v11 + 4) == 1)
      return JSC::WatchpointSet::fireAllSlow(*(_QWORD *)(this + 96), *v10, (uint64_t)a2);
  }
  else
  {
    if ((this & 8) != 0)
      v9 = (JSC::VM **)(this - 16);
    v12 = *v9;
    v14[0] = &off_1E35AF330;
    v14[1] = this;
    v13 = *(_QWORD *)(this + 96);
    if ((v13 & 1) != 0)
    {
      if ((v13 & 6) != 0)
      {
LABEL_6:
        *(_QWORD *)(this + 96) = 5;
        __dmb(0xAu);
      }
    }
    else if (*(_BYTE *)(v13 + 4) == 1)
    {
      return (uint64_t)JSC::WatchpointSet::fireAllSlow(*(_QWORD *)(this + 96), v12, v14, a5, a6, a7, a8, a9, a3);
    }
  }
  return this;
}

uint64_t JSC::Structure::didTransitionFromThisStructure(unint64_t this, JSC::DeferredStructureTransitionWatchpointFire *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t *v11;
  JSC::VM *v12;
  _QWORD v13[2];

  result = *(_QWORD *)(this + 96);
  if ((result & 1) == 0 && *(_BYTE *)(result + 5))
    *(_DWORD *)(this + 16) |= 0x4000000u;
  v11 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v11 = (uint64_t *)(this - 16);
  if (a2)
  {
    if ((result & 1) != 0)
    {
      if ((result & 6) == 0)
        return result;
      goto LABEL_7;
    }
    if (*(_BYTE *)(result + 4) == 1)
      return JSC::WatchpointSet::fireAllSlow(result, *v11, (uint64_t)a2);
  }
  else
  {
    v12 = (JSC::VM *)*v11;
    v13[0] = &off_1E35AF330;
    v13[1] = this;
    if ((result & 1) != 0)
    {
      if ((result & 6) != 0)
      {
LABEL_7:
        *(_QWORD *)(this + 96) = 5;
        __dmb(0xAu);
      }
    }
    else if (*(_BYTE *)(result + 4) == 1)
    {
      return (uint64_t)JSC::WatchpointSet::fireAllSlow(result, v12, v13, a5, a6, a7, a8, a9, a3);
    }
  }
  return result;
}

void JSC::Structure::toStructureShape(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int v17;
  WTF *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  int v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  int v99;
  WTF *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  JSC::StructureShape *v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE v168[24];
  uint64_t v169[2];

  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v15 + 4) = 0;
  v16 = 0uLL;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_QWORD *)(v15 + 40) = 0;
  *a4 = v15;
  *(_DWORD *)v15 = 2;
  v17 = 1;
  v161 = a3;
  *a3 = 0;
  if (!a1)
  {
LABEL_149:
    *(_DWORD *)v15 = v17;
    return;
  }
  v18 = (WTF *)&v167;
  while (2)
  {
    v19 = a2;
    *v161 |= *(_QWORD *)(a1 + 48) == 0;
    v164 = a1;
    v165 = v18;
    v166 = 8;
    v20 = a1;
    while (1)
    {
      v21 = (unsigned __int8 *)(v20 + 15);
      if (__ldaxr((unsigned __int8 *)(v20 + 15)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v21))
      {
        goto LABEL_8;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_8:
      v23 = v164;
      v24 = *(_QWORD *)(v164 + 88);
      if (v24)
        goto LABEL_24;
      v25 = HIDWORD(v166);
      if (HIDWORD(v166) == (_DWORD)v166)
      {
        v30 = (uint64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, HIDWORD(v166) + 1, (unint64_t)&v164);
        v25 = HIDWORD(v166);
        v26 = (uint64_t *)((char *)v165 + 8 * HIDWORD(v166));
        v23 = *v30;
      }
      else
      {
        v26 = (uint64_t *)((char *)v165 + 8 * HIDWORD(v166));
      }
      *v26 = v23;
      HIDWORD(v166) = v25 + 1;
      v27 = (unsigned __int8 *)(v164 + 15);
      v28 = __ldxr((unsigned __int8 *)(v164 + 15));
      if (v28 != 1)
      {
        __clrex();
LABEL_15:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v9, v10, v11, v12, v13, v14);
        goto LABEL_16;
      }
      if (__stlxr(0, v27))
        goto LABEL_15;
LABEL_16:
      v20 = *(_QWORD *)(v164 + 64);
      if (!v20)
        goto LABEL_23;
      if (*(_BYTE *)(v20 + 5) != 1)
        break;
LABEL_20:
      v164 = v20;
      if (!v20)
        goto LABEL_24;
    }
    v29 = *(_DWORD *)(v20 + 80);
    if (v29)
    {
      v20 = 16 * (v29 & 0xFFFFFFFE);
      goto LABEL_20;
    }
LABEL_23:
    v164 = 0;
LABEL_24:
    v31 = v18;
    v163 = 0;
    if (HIDWORD(v166))
    {
      v32 = v165;
      v33 = (WTF *)((char *)v165 + 8 * HIDWORD(v166));
      while (1)
      {
        v34 = *(_QWORD *)v32;
        v35 = *(unsigned int *)(*(_QWORD *)v32 + 72);
        if ((_DWORD)v35)
        {
          v36 = 16 * v35;
          if (!v163)
            goto LABEL_33;
          v37 = *(_DWORD *)(v163 - 8);
          v38 = (v36 + ~(v35 << 36)) ^ ((unint64_t)(v36 + ~(v35 << 36)) >> 22);
          v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
          v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
          v41 = v37 & ((v40 >> 31) ^ v40);
          v42 = *(_QWORD *)(v163 + 8 * v41);
          if (v42 != v36)
            break;
        }
LABEL_42:
        v32 = (WTF *)((char *)v32 + 8);
        if (v32 == v33)
          goto LABEL_47;
      }
      v43 = 1;
      while (v42)
      {
        v41 = (v41 + v43) & v37;
        v42 = *(_QWORD *)(v163 + 8 * v41);
        ++v43;
        if (v42 == v36)
          goto LABEL_42;
      }
LABEL_33:
      v169[0] = v36;
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v163, v169, v10, v11, v12, v13, v14, (uint64_t)v168);
      v44 = (*(_DWORD *)(v34 + 16) >> 13) & 0x1F;
      if (v44 != 2 && v44 != 17)
      {
        v46 = *(unsigned int *)(v34 + 72);
        if (!(_DWORD)v46 || (*(_BYTE *)(16 * v46 + 0x10) & 0x20) == 0 || (*(_BYTE *)(16 * v46 + 0x24) & 4) == 0)
        {
          *(_DWORD *)(16 * v46) += 2;
          v169[0] = 16 * v46;
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v15 + 8), (WTF::AtomStringImpl *)v169, v9, v10, v11, v12, v13, v14, (uint64_t)v168);
          v47 = (WTF::StringImpl *)v169[0];
          v169[0] = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::~StringImpl(v47, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
        }
      }
      goto LABEL_42;
    }
LABEL_47:
    if (v24)
    {
      v56 = *(_QWORD *)(v24 + 16);
      v57 = v56 & 0xFFFFFFFFFFFFFFFELL;
      v58 = *(unsigned int *)(v24 + 8);
      v59 = (*(_DWORD *)(v24 + 28) + *(_DWORD *)(v24 + 24));
      if ((v56 & 1) == 0)
      {
        if ((_DWORD)v59)
        {
          v60 = (uint64_t *)(v57 + 4 * v58);
          v61 = &v60[2 * v59];
          while (1)
          {
            v62 = *v60;
            if (*v60 != 1)
            {
              if (!v163)
                goto LABEL_58;
              v63 = *(_DWORD *)(v163 - 8);
              v64 = (~(v62 << 32) + v62) ^ ((unint64_t)(~(v62 << 32) + v62) >> 22);
              v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
              v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
              v67 = v63 & ((v66 >> 31) ^ v66);
              v68 = *(_QWORD *)(v163 + 8 * v67);
              if (v68 != v62)
                break;
            }
LABEL_63:
            v60 += 2;
            if (v60 == v61)
              goto LABEL_87;
          }
          v69 = 1;
          while (v68)
          {
            v67 = (v67 + v69) & v63;
            v68 = *(_QWORD *)(v163 + 8 * v67);
            ++v69;
            if (v68 == v62)
              goto LABEL_63;
          }
LABEL_58:
          if (!v62 || (*(_BYTE *)(v62 + 16) & 0x20) == 0 || (*(_BYTE *)(v62 + 36) & 4) == 0)
          {
            *(_DWORD *)v62 += 2;
            v169[0] = v62;
            WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v15 + 8), (WTF::AtomStringImpl *)v169, v9, v10, v11, v12, v13, v14, (uint64_t)v168);
            v70 = (WTF::StringImpl *)v169[0];
            v169[0] = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
              {
                WTF::StringImpl::~StringImpl(v70, v8, v9, v10, v11, v12, v13, v14);
                WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
              }
              else
              {
                *(_DWORD *)v70 -= 2;
              }
            }
          }
          goto LABEL_63;
        }
LABEL_87:
        v98 = (unsigned __int8 *)(v164 + 15);
        v99 = __ldxr((unsigned __int8 *)(v164 + 15));
        if (v99 == 1)
        {
          if (!__stlxr(0, v98))
            goto LABEL_92;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v98, 0, v9, v10, v11, v12, v13, v14);
        goto LABEL_92;
      }
      if (!(_DWORD)v59)
        goto LABEL_87;
      v79 = (_QWORD *)(v57 + v58);
      v80 = v57 + v58 + 8 * v59;
      while (2)
      {
        v81 = (_DWORD *)(*v79 & 0xFFFFFFFFFFFFLL);
        if (v81 != (_DWORD *)1)
        {
          if (!v163)
            goto LABEL_77;
          v82 = *(_DWORD *)(v163 - 8);
          v83 = ((unint64_t)v81 + ~(*v79 << 32)) ^ (((unint64_t)v81 + ~(*v79 << 32)) >> 22);
          v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
          v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
          v86 = v82 & ((v85 >> 31) ^ v85);
          v87 = *(_DWORD **)(v163 + 8 * v86);
          if (v87 != v81)
          {
            v88 = 1;
            while (v87)
            {
              v86 = (v86 + v88) & v82;
              v87 = *(_DWORD **)(v163 + 8 * v86);
              ++v88;
              if (v87 == v81)
                goto LABEL_82;
            }
LABEL_77:
            if (!v81
              || (*(_BYTE *)((*v79 & 0xFFFFFFFFFFFFLL) + 0x10) & 0x20) == 0
              || (*(_BYTE *)((*v79 & 0xFFFFFFFFFFFFLL) + 0x24) & 4) == 0)
            {
              *v81 += 2;
              v169[0] = (uint64_t)v81;
              WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v15 + 8), (WTF::AtomStringImpl *)v169, v9, v10, v11, v12, v13, v14, (uint64_t)v168);
              v89 = (WTF::StringImpl *)v169[0];
              v169[0] = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                {
                  WTF::StringImpl::~StringImpl(v89, v8, v9, v10, v11, v12, v13, v14);
                  WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
                }
                else
                {
                  *(_DWORD *)v89 -= 2;
                }
              }
            }
          }
        }
LABEL_82:
        if (++v79 == (_QWORD *)v80)
          goto LABEL_87;
        continue;
      }
    }
LABEL_92:
    v18 = v31;
    if (v163)
      WTF::fastFree(v163 - 16, v8, v9, v10, v11, v12, v13, v14);
    v100 = v165;
    if (v31 != v165 && v165)
    {
      v165 = 0;
      LODWORD(v166) = 0;
      WTF::fastFree((unint64_t)v100, v8, v9, v10, v11, v12, v13, v14);
    }
    if ((a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) >= 0x17u && a2)
    {
      JSC::JSObject::calculatedClassName((JSC::JSObject *)a2, v8, v9, v10, v11, v12, v13, v14, &v162, v16);
      v101 = (uint64_t)v162;
      if (v162 && *((_DWORD *)v162 + 1))
      {
        *(_DWORD *)v162 += 2;
      }
      else
      {
        v101 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v101 = 0x600000002;
        *(_QWORD *)(v101 + 8) = "Object";
        *(_DWORD *)(v101 + 16) = 4;
      }
      v102 = *(WTF::StringImpl **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v101;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
        {
          WTF::StringImpl::~StringImpl(v102, v8, v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
        }
        else
        {
          *(_DWORD *)v102 -= 2;
        }
      }
      v103 = v162;
      v162 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 != 2)
        {
          *(_DWORD *)v103 -= 2;
          goto LABEL_129;
        }
LABEL_128:
        WTF::StringImpl::~StringImpl(v103, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
      }
      goto LABEL_129;
    }
    v104 = *(_QWORD *)(16 * *(unsigned int *)(a1 + 76) + 8);
    if (!v104)
    {
      v106 = 0;
      goto LABEL_118;
    }
    if (v104 == 1)
    {
      v106 = &WTF::StringImpl::s_emptyAtomString;
      v107 = WTF::StringImpl::s_emptyAtomString + 2;
      WTF::StringImpl::s_emptyAtomString += 2;
      if (!dword_1ECF2C424)
        goto LABEL_117;
LABEL_111:
      *v106 = v107 + 2;
      v108 = (uint64_t)v106;
      v18 = v31;
    }
    else
    {
      v105 = *(_QWORD *)(16 * *(unsigned int *)(a1 + 76));
      v106 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      v107 = 2;
      *v106 = 2;
      v106[1] = v104 - 1;
      *((_QWORD *)v106 + 1) = v105;
      v106[4] = 4;
      if ((_DWORD)v104 != 1)
        goto LABEL_111;
LABEL_117:
      v18 = v31;
LABEL_118:
      v108 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v108 = 0x600000002;
      *(_QWORD *)(v108 + 8) = "Object";
      *(_DWORD *)(v108 + 16) = 4;
    }
    v117 = *(WTF::StringImpl **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v108;
    if (v117)
    {
      if (*(_DWORD *)v117 != 2)
      {
        *(_DWORD *)v117 -= 2;
        goto LABEL_122;
      }
      WTF::StringImpl::~StringImpl(v117, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      if (!v104)
        goto LABEL_129;
    }
    else
    {
LABEL_122:
      if (!v104)
        goto LABEL_129;
    }
    if (*v106 == 2)
    {
      v103 = (WTF::StringImpl *)v106;
      goto LABEL_128;
    }
    *v106 -= 2;
LABEL_129:
    if ((*(_BYTE *)(a1 + 16) & 3) != 0)
      *(_BYTE *)(v15 + 5) = 1;
    *(_BYTE *)(v15 + 4) = 1;
    if ((v19 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    {
      a2 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
      if (a2 != 2)
      {
        if (a2 || (a2 = *(_QWORD *)(v19 + 16), a2 != 2))
        {
          if (a2)
          {
            v134 = WTF::fastMalloc((WTF *)0x30);
            *(_WORD *)(v134 + 4) = 0;
            v16 = 0uLL;
            *(_OWORD *)(v134 + 8) = 0u;
            *(_OWORD *)(v134 + 24) = 0u;
            *(_QWORD *)(v134 + 40) = 0;
            *(_DWORD *)v134 = 2;
            v135 = *(JSC::StructureShape **)(v15 + 24);
            *(_QWORD *)(v15 + 24) = v134;
            if (v135)
            {
              if (*(_DWORD *)v135 == 1)
              {
                JSC::StructureShape::~StructureShape(v135, v8, v9, v10, v11, v12, v13, v14);
                WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
              }
              else
              {
                --*(_DWORD *)v135;
              }
            }
            if (*(_DWORD *)v15 == 1)
            {
              JSC::StructureShape::~StructureShape((JSC::StructureShape *)v15, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
            }
            else
            {
              --*(_DWORD *)v15;
            }
            v15 = v134;
            v136 = *(_DWORD *)a2 & 0xFFFFFFFE;
            a1 = 16 * v136;
            if (!(_DWORD)v136)
              goto LABEL_147;
            continue;
          }
        }
      }
    }
    break;
  }
  v134 = v15;
LABEL_147:
  v17 = *(_DWORD *)v134 - 1;
  if (*(_DWORD *)v134 != 1)
  {
    v15 = v134;
    goto LABEL_149;
  }
  JSC::StructureShape::~StructureShape((JSC::StructureShape *)v134, v8, v9, v10, v11, v12, v13, v14);
  WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
}

uint64_t JSC::Structure::dump(unint64_t this, WTF::PrintStream *a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  WTF::PrintStream *v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unint64_t *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v53;
  uint64_t v54;
  WTF::PrintStream *v55;
  uint64_t v56;
  WTF::PrintStream *v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  char *v65;
  size_t v66;
  WTF::PrintStream *v67;
  float v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  WTF::PrintStream *v84;
  uint64_t v85;
  WTF::PrintStream *v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  char *v94;
  size_t v95;
  WTF::PrintStream *v96;
  float v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  WTF::PrintStream *v109;
  uint64_t v110;
  WTF::PrintStream *v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  char *v119;
  size_t v120;
  WTF::PrintStream *v121;
  float v122;
  unsigned __int8 *v123;
  int v124;
  WTF *v125;
  uint64_t v126;
  WTF::PrintStream *v127;
  WTF::PrintStream *v128;
  float v129;
  const char *v130;
  unsigned int v131;
  uint64_t v132;
  WTF::PrintStream *v133;
  float v134;
  const char *v135;
  WTF::PrintStream *v136;
  uint64_t v137;
  WTF::PrintStream *v138;
  WTF::PrintStream *v139;
  float v140;
  WTF::PrintStream *v141;
  WTF::PrintStream *v142;
  float v143;
  int v144;
  uint64_t v145;
  WTF::PrintStream *v146;
  float v147;
  char *v148;
  size_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  WTF::PrintStream *v153;
  float v154;
  char *v155;
  size_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::PrintStream *v159;
  float v160;
  uint64_t v162;
  WTF::PrintStream *v163;
  float v164;
  int v165;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  WTF *v174;
  uint64_t v175;
  _BYTE v176[72];

  v3 = this >> 4;
  v4 = 16 * *(unsigned int *)(this + 76);
  v5 = *(unsigned __int16 *)(this + 24);
  if (v5 == 65534)
  {
    v167 = 0;
    v6 = *(unsigned __int8 *)(this + 14);
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  if (v5 == 0xFFFF)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
    v6 = *(unsigned __int8 *)(this + 14);
    if (v8 + 1 < v6)
      v165 = v8 + 1;
    else
      v165 = *(unsigned __int8 *)(this + 14);
    v167 = v165;
  }
  else
  {
    v6 = *(unsigned __int8 *)(this + 14);
    if (v5 + 1 < v6)
      v7 = v5 + 1;
    else
      v7 = *(unsigned __int8 *)(this + 14);
    v167 = v7;
    v8 = *(unsigned __int16 *)(this + 24);
  }
  v9 = v8 - 63;
  if (v8 <= 63)
    goto LABEL_10;
LABEL_11:
  v10 = (this >> 4);
  if (v5 == 65534)
    goto LABEL_15;
  if (v5 == 0xFFFF)
    v5 = *(_DWORD *)(*(_QWORD *)(this + 64) + 84);
  if (v5 < 64)
  {
LABEL_15:
    v11 = 0;
  }
  else if ((v5 - 63) >= 5)
  {
    v12 = (v5 - 64) | ((v5 - 64) >> 1) | (((v5 - 64) | ((v5 - 64) >> 1)) >> 2);
    v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
    v11 = (v13 | HIWORD(v13)) + 1;
  }
  else
  {
    v11 = 4;
  }
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v14, "%p", (const void *)this);
  WTF::PrintStream::printf(v14, "%s", ":[");
  WTF::PrintStream::printf(v14, "%p", (const void *)v10);
  WTF::PrintStream::printf(v14, "%s", "/");
  WTF::PrintStream::printf(v14, "%u", v3);
  WTF::PrintStream::printf(v14, "%s", ", ");
  v15 = *(char **)v4;
  v16 = *(_QWORD *)(v4 + 8);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
  if (v15)
  {
    v19 = v16 - 1;
    if (!v16)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v174, v18);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v174 = (WTF *)v20;
    LODWORD(v175) = 0;
  }
  WTF::printExpectedCStringHelper(v17, "StringView", &v174);
  if ((_DWORD)v175 != -1)
    ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
  WTF::PrintStream::printf(v14, "%s", ", (");
  WTF::PrintStream::printf(v14, "%u", v167);
  WTF::PrintStream::printf(v14, "%s", "/");
  WTF::PrintStream::printf(v14, "%u", v6);
  WTF::PrintStream::printf(v14, "%s", ", ");
  WTF::PrintStream::printf(v14, "%u", v9);
  WTF::PrintStream::printf(v14, "%s", "/");
  WTF::PrintStream::printf(v14, "%u", v11);
  WTF::PrintStream::printf(v14, "%s", "){");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v175 = 8;
  v28 = this;
  v173 = this;
  v174 = (WTF *)v176;
  while (1)
  {
    v29 = (unsigned __int8 *)(v28 + 15);
    if (__ldaxr((unsigned __int8 *)(v28 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v29))
    {
      goto LABEL_31;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v29);
LABEL_31:
    v31 = v173;
    v32 = *(_QWORD *)(v173 + 88);
    if (v32)
      goto LABEL_47;
    v33 = HIDWORD(v175);
    if (HIDWORD(v175) == (_DWORD)v175)
    {
      v38 = (unint64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v174, HIDWORD(v175) + 1, (unint64_t)&v173);
      v33 = HIDWORD(v175);
      v34 = (unint64_t *)((char *)v174 + 8 * HIDWORD(v175));
      v31 = *v38;
    }
    else
    {
      v34 = (unint64_t *)((char *)v174 + 8 * HIDWORD(v175));
    }
    *v34 = v31;
    HIDWORD(v175) = v33 + 1;
    v35 = (unsigned __int8 *)(v173 + 15);
    v36 = __ldxr((unsigned __int8 *)(v173 + 15));
    if (v36 != 1)
    {
      __clrex();
LABEL_38:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v35, 0, v22, v23, v24, v25, v26, v27);
      goto LABEL_39;
    }
    if (__stlxr(0, v35))
      goto LABEL_38;
LABEL_39:
    v28 = *(_QWORD *)(v173 + 64);
    if (!v28)
      goto LABEL_46;
    if (*(_BYTE *)(v28 + 5) != 1)
      break;
LABEL_43:
    v173 = v28;
    if (!v28)
      goto LABEL_47;
  }
  v37 = *(_DWORD *)(v28 + 80);
  if (v37)
  {
    v28 = 16 * (v37 & 0xFFFFFFFE);
    goto LABEL_43;
  }
LABEL_46:
  v173 = 0;
LABEL_47:
  v172 = 0;
  if (HIDWORD(v175))
  {
    v168 = 0;
    v39 = v174;
    v40 = (WTF *)((char *)v174 + 8 * HIDWORD(v175));
    while (1)
    {
      v41 = *(_QWORD *)v39;
      v42 = *(unsigned int *)(*(_QWORD *)v39 + 72);
      if ((_DWORD)v42)
      {
        v43 = 16 * v42;
        if (!v172)
          goto LABEL_56;
        v44 = *(_DWORD *)(v172 - 8);
        v45 = (v43 + ~(v42 << 36)) ^ ((unint64_t)(v43 + ~(v42 << 36)) >> 22);
        v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
        v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
        v48 = v44 & ((v47 >> 31) ^ v47);
        v49 = *(_QWORD *)(v172 + 8 * v48);
        if (v49 != v43)
          break;
      }
LABEL_79:
      v39 = (WTF *)((char *)v39 + 8);
      if (v39 == v40)
        goto LABEL_83;
    }
    v50 = 1;
    while (v49)
    {
      v48 = (v48 + v50) & v44;
      v49 = *(_QWORD *)(v172 + 8 * v48);
      ++v50;
      if (v49 == v43)
        goto LABEL_79;
    }
LABEL_56:
    v171 = v43;
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v172, &v171, v23, v24, v25, v26, v27, (uint64_t)&v169);
    v51 = (*(_DWORD *)(v41 + 16) >> 13) & 0x1F;
    if (v51 != 2 && v51 != 17)
    {
      v53 = *(unsigned __int16 *)(v41 + 22);
      if (v53 == 65534)
      {
        v53 = -1;
      }
      else if (v53 == 0xFFFF)
      {
        v53 = *(_DWORD *)(*(_QWORD *)(v41 + 64) + 88);
      }
      v54 = *(unsigned int *)(v41 + 72);
      v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v56 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v55 + 32))(v55);
      v57 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
      if (v168)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v169, v58);
        WTF::printExpectedCStringHelper(v57, "StringView", &v169);
        if (v170 != -1)
          ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v169, v58);
        WTF::printExpectedCStringHelper(v57, "StringView", &v169);
        if (v170 != -1)
          ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
        v168 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v55 + 40))(v55);
      if ((_DWORD)v54)
      {
        v65 = *(char **)(16 * v54 + 8);
        v66 = *(unsigned int *)(16 * v54 + 4);
        if ((*(_BYTE *)(16 * v54 + 0x10) & 4) != 0)
          WTF::StringImpl::utf8ForCharacters(v65, v66, (uint64_t)&v169, v64);
        else
          WTF::StringImpl::utf8ForCharacters((uint64_t)v65, v66, 0, v59, v60, v61, v62, v63, (uint64_t)&v169);
        WTF::printExpectedCStringHelper(v55, "StringImpl*", &v169);
        if (v170 != -1)
          ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
      }
      else
      {
        WTF::PrintStream::printf(v55, "%s", "(null StringImpl*)");
      }
      v67 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v55 + 32))(v55);
      WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v169, v68);
      WTF::printExpectedCStringHelper(v67, "StringView", &v169);
      if (v170 != -1)
        ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v55 + 40))(v55);
      WTF::PrintStream::printf(v55, "%d", v53);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    goto LABEL_79;
  }
  v168 = 0;
LABEL_83:
  if (v32)
  {
    v69 = *(_QWORD *)(v32 + 16);
    v70 = v69 & 0xFFFFFFFFFFFFFFFELL;
    v71 = *(unsigned int *)(v32 + 8);
    v72 = (*(_DWORD *)(v32 + 28) + *(_DWORD *)(v32 + 24));
    if ((v69 & 1) == 0)
    {
      if ((_DWORD)v72)
      {
        v73 = v70 + 4 * v71;
        v74 = v73 + 16 * v72;
        while (1)
        {
          v75 = *(_QWORD *)v73;
          if (*(_QWORD *)v73 != 1)
          {
            v76 = *(_DWORD *)(v73 + 8);
            if (!v172)
              goto LABEL_94;
            v77 = *(_DWORD *)(v172 - 8);
            v78 = (~(v75 << 32) + v75) ^ ((unint64_t)(~(v75 << 32) + v75) >> 22);
            v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
            v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
            v81 = v77 & ((v80 >> 31) ^ v80);
            v82 = *(_QWORD *)(v172 + 8 * v81);
            if (v82 != v75)
              break;
          }
LABEL_110:
          v73 += 16;
          if (v73 == v74)
            goto LABEL_138;
        }
        v83 = 1;
        while (v82)
        {
          v81 = (v81 + v83) & v77;
          v82 = *(_QWORD *)(v172 + 8 * v81);
          ++v83;
          if (v82 == v75)
            goto LABEL_110;
        }
LABEL_94:
        v84 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v85 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v84 + 32))(v84);
        v86 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
        if (v168)
        {
          WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v169, v87);
          WTF::printExpectedCStringHelper(v86, "StringView", &v169);
          if (v170 != -1)
            ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
        }
        else
        {
          WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v169, v87);
          WTF::printExpectedCStringHelper(v86, "StringView", &v169);
          if (v170 != -1)
            ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
          v168 = 1;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v84 + 40))(v84);
        if (v75)
        {
          v94 = *(char **)(v75 + 8);
          v95 = *(unsigned int *)(v75 + 4);
          if ((*(_BYTE *)(v75 + 16) & 4) != 0)
            WTF::StringImpl::utf8ForCharacters(v94, v95, (uint64_t)&v169, v93);
          else
            WTF::StringImpl::utf8ForCharacters((uint64_t)v94, v95, 0, v88, v89, v90, v91, v92, (uint64_t)&v169);
          WTF::printExpectedCStringHelper(v84, "StringImpl*", &v169);
          if (v170 != -1)
            ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
        }
        else
        {
          WTF::PrintStream::printf(v84, "%s", "(null StringImpl*)");
        }
        v96 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v84 + 32))(v84);
        WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v169, v97);
        WTF::printExpectedCStringHelper(v96, "StringView", &v169);
        if (v170 != -1)
          ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v84 + 40))(v84);
        WTF::PrintStream::printf(v84, "%d", v76);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        goto LABEL_110;
      }
LABEL_138:
      v123 = (unsigned __int8 *)(v173 + 15);
      v124 = __ldxr((unsigned __int8 *)(v173 + 15));
      if (v124 == 1)
      {
        if (!__stlxr(0, v123))
          goto LABEL_143;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v123, 0, v22, v23, v24, v25, v26, v27);
      goto LABEL_143;
    }
    if (!(_DWORD)v72)
      goto LABEL_138;
    v98 = (unint64_t *)(v70 + v71);
    v99 = v70 + v71 + 8 * v72;
    while (2)
    {
      v100 = *v98;
      v101 = *v98 & 0xFFFFFFFFFFFFLL;
      if (v101 != 1)
      {
        if (!v172)
          goto LABEL_121;
        v102 = *(_DWORD *)(v172 - 8);
        v103 = (v101 + ~(v100 << 32)) ^ ((v101 + ~(v100 << 32)) >> 22);
        v104 = 9 * ((v103 + ~(v103 << 13)) ^ ((v103 + ~(v103 << 13)) >> 8));
        v105 = (v104 ^ (v104 >> 15)) + ~((v104 ^ (v104 >> 15)) << 27);
        v106 = v102 & ((v105 >> 31) ^ v105);
        v107 = *(_QWORD *)(v172 + 8 * v106);
        if (v107 != v101)
        {
          v108 = 1;
          while (v107)
          {
            v106 = (v106 + v108) & v102;
            v107 = *(_QWORD *)(v172 + 8 * v106);
            ++v108;
            if (v107 == v101)
              goto LABEL_137;
          }
LABEL_121:
          v109 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v110 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v109 + 32))(v109);
          v111 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 32))(v110);
          if (v168)
          {
            WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v169, v112);
            WTF::printExpectedCStringHelper(v111, "StringView", &v169);
            if (v170 != -1)
              ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
          }
          else
          {
            WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v169, v112);
            WTF::printExpectedCStringHelper(v111, "StringView", &v169);
            if (v170 != -1)
              ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
            v168 = 1;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 40))(v110);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v109 + 40))(v109);
          if (v101)
          {
            v119 = *(char **)(v101 + 8);
            v120 = *(unsigned int *)(v101 + 4);
            if ((*(_BYTE *)(v101 + 16) & 4) != 0)
              WTF::StringImpl::utf8ForCharacters(v119, v120, (uint64_t)&v169, v118);
            else
              WTF::StringImpl::utf8ForCharacters((uint64_t)v119, v120, 0, v113, v114, v115, v116, v117, (uint64_t)&v169);
            WTF::printExpectedCStringHelper(v109, "StringImpl*", &v169);
            if (v170 != -1)
              ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
          }
          else
          {
            WTF::PrintStream::printf(v109, "%s", "(null StringImpl*)");
          }
          v121 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v109 + 32))(v109);
          WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v169, v122);
          WTF::printExpectedCStringHelper(v121, "StringView", &v169);
          if (v170 != -1)
            ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v170])(&v171, &v169);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v109 + 40))(v109);
          WTF::PrintStream::printf(v109, "%d", HIBYTE(v100));
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        }
      }
LABEL_137:
      if (++v98 == (unint64_t *)v99)
        goto LABEL_138;
      continue;
    }
  }
LABEL_143:
  if (v172)
    WTF::fastFree(v172 - 16, v21, v22, v23, v24, v25, v26, v27);
  v125 = v174;
  if (v176 != (_BYTE *)v174 && v174)
  {
    v174 = 0;
    LODWORD(v175) = 0;
    WTF::fastFree((unint64_t)v125, v21, v22, v23, v24, v25, v26, v27);
  }
  v126 = *(_BYTE *)(this + 8) & 0x1F;
  v127 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v128 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v127 + 32))(v127);
  WTF::StringImpl::utf8ForCharacters("}, ", 3uLL, (uint64_t)&v174, v129);
  WTF::printExpectedCStringHelper(v128, "StringView", &v174);
  if ((_DWORD)v175 != -1)
    ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v127 + 40))(v127);
  if (v126 > 0x19)
    v130 = "Unknown!";
  else
    v130 = off_1E35AF740[v126];
  WTF::PrintStream::printf(v127, "%s%s", v130, "");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v131 = (*(_DWORD *)(this + 16) >> 13) & 0x1F;
  v132 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v133 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 32))(v132);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v174, v134);
  WTF::printExpectedCStringHelper(v133, "StringView", &v174);
  if ((_DWORD)v175 != -1)
    ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
  (*(void (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
  if (v131 > 0x11)
    v135 = 0;
  else
    v135 = off_1E35AF810[v131];
  v136 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 32))(v132);
  WTF::PrintStream::printf(v136, "%s", v135);
  (*(void (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v137 = *(_QWORD *)(this + 48);
  if (v137)
  {
    if ((v137 & 0xFFFE000000000002) == 0)
    {
      v138 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v139 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v138 + 32))(v138);
      WTF::StringImpl::utf8ForCharacters(", Proto:", 8uLL, (uint64_t)&v174, v140);
      WTF::printExpectedCStringHelper(v139, "StringView", &v174);
      if ((_DWORD)v175 != -1)
        ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v138 + 40))(v138);
      WTF::PrintStream::printf(v138, "%p");
      goto LABEL_166;
    }
  }
  else
  {
    v141 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v142 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v141 + 32))(v141);
    WTF::StringImpl::utf8ForCharacters(", PolyProto offset:", 0x13uLL, (uint64_t)&v174, v143);
    WTF::printExpectedCStringHelper(v142, "StringView", &v174);
    if ((_DWORD)v175 != -1)
      ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v141 + 40))(v141);
    WTF::PrintStream::printf(v141, "%d");
LABEL_166:
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v144 = *(_DWORD *)(this + 16) & 3;
  if (v144 == 2)
  {
    v145 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v146 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
    v148 = ", UncacheableDictionary";
    v149 = 23;
LABEL_174:
    WTF::StringImpl::utf8ForCharacters(v148, v149, (uint64_t)&v174, v147);
    WTF::printExpectedCStringHelper(v146, "StringView", &v174);
    if ((_DWORD)v175 != -1)
      ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 40))(v145);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    goto LABEL_177;
  }
  if (v144 == 1)
  {
    v145 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v146 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
    v148 = ", Dictionary";
    v149 = 12;
    goto LABEL_174;
  }
  if (!v144 && (*(_DWORD *)(this + 16) & 0x8000000) != 0)
  {
    v145 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v146 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
    v148 = ", Has been dictionary";
    v149 = 21;
    goto LABEL_174;
  }
LABEL_177:
  v150 = *(_QWORD *)(this + 96);
  if ((v150 & 1) != 0)
    v151 = (v150 >> 1) & 3;
  else
    v151 = *(unsigned __int8 *)(v150 + 4);
  if (v151 == 2)
  {
    if ((*(_BYTE *)(this + 19) & 4) != 0)
    {
      v152 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v153 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 32))(v152);
      v155 = ", Shady leaf";
      v156 = 12;
      goto LABEL_183;
    }
  }
  else
  {
    v152 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v153 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 32))(v152);
    v155 = ", Leaf";
    v156 = 6;
LABEL_183:
    WTF::StringImpl::utf8ForCharacters(v155, v156, (uint64_t)&v174, v154);
    WTF::printExpectedCStringHelper(v153, "StringView", &v174);
    if ((_DWORD)v175 != -1)
      ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v157 = *(_QWORD *)(this + 96);
  if ((v157 & 1) == 0 && *(_BYTE *)(v157 + 5))
  {
    v162 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v163 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 32))(v162);
    WTF::StringImpl::utf8ForCharacters(" (Watched)", 0xAuLL, (uint64_t)&v174, v164);
    WTF::printExpectedCStringHelper(v163, "StringView", &v174);
    if ((_DWORD)v175 != -1)
      ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 40))(v162);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v158 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v159 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 32))(v158);
  WTF::StringImpl::utf8ForCharacters("]", 1uLL, (uint64_t)&v174, v160);
  WTF::printExpectedCStringHelper(v159, "StringView", &v174);
  if ((_DWORD)v175 != -1)
    ((void (*)(int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v175])(&v169, &v174);
  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Structure::dumpBrief(JSC::Structure *this, WTF::PrintStream *a2, const WTF::CString *a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  WTF::PrintStream *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  char v21;

  v6 = 16 * *((unsigned int *)this + 19);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "%");
  if (*(_QWORD *)a3)
    v8 = (const char *)(*(_QWORD *)a3 + 16);
  else
    v8 = 0;
  WTF::PrintStream::printf(v7, "%s", v8);
  WTF::PrintStream::printf(v7, "%s", ":");
  v9 = *(char **)v6;
  v10 = *(_QWORD *)(v6 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v19, v12);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v19 = v14;
    v20 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v19);
  if (v20 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((*((_BYTE *)this + 8) & 0xE) != 0)
  {
    v16 = *((_BYTE *)this + 8) & 0xF;
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v17, "%s", ",");
    if (v16 > 0xD)
      v18 = "Unknown!";
    else
      v18 = off_1E35AF8A0[v16];
    WTF::PrintStream::printf(v17, "%s%s", v18, "");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::Structure::setCachedPropertyNameEnumerator(JSC::Structure *this, JSC::VM *a2, uint64_t a3, JSC::StructureChain *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int *v19;
  int v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v48;

  v12 = *((_QWORD *)this + 8);
  if (!v12 || *(_BYTE *)(v12 + 5) == 1)
  {
    v12 = JSC::StructureRareData::create(a2, (JSC::VM *)v12, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    __dmb(0xAu);
    *((_QWORD *)this + 8) = v12;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      v12 = *((_QWORD *)this + 8);
    }
  }
  v13 = *(unsigned int **)(v12 + 16);
  *(_QWORD *)(v12 + 16) = 0;
  if (v13)
  {
    v14 = (uint64_t *)(v13 + 2);
    v15 = *v13;
    if ((_DWORD)v15)
    {
      v16 = 24 * v15;
      do
      {
        v17 = (uint64_t *)v14[1];
        if (v17)
        {
          v18 = *v14;
          *v17 = *v14;
          *(_QWORD *)(v18 + 8) = v17;
          *v14 = 0;
          v14[1] = 0;
        }
        v14 += 3;
        v16 -= 24;
      }
      while (v16);
    }
    WTF::fastFree((unint64_t)v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (*((_QWORD *)this + 6))
  {
    v19 = (int *)*((_QWORD *)a4 + 1);
    v20 = *v19;
    if (*v19)
    {
      v31 = 0;
      v32 = v19 + 1;
      v30 = 1;
      while (1)
      {
        v33 = 16 * (v20 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v33 + 19) & 0xC) != 0)
          break;
        v34 = *(_QWORD *)(v33 + 96);
        v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
        if (v35 == 2 || !*(_QWORD *)(v33 + 48))
          break;
        v20 = v32[v31++];
        if (!v20)
        {
          if (!(_DWORD)v31)
            goto LABEL_14;
          v45 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v31 + 8));
          v21 = v45;
          *v45 = v31;
          v46 = 2;
          do
          {
            v47 = &v45[v46];
            *(_QWORD *)v47 = 0;
            *((_QWORD *)v47 + 1) = 0;
            *((_BYTE *)v47 + 16) = 6;
            *((_BYTE *)v47 + 21) = 0;
            *(_DWORD *)((char *)v47 + 17) = 0;
            v46 += 6;
          }
          while (v47 + 6 != &v45[6 * v31 + 2]);
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_14:
      v21 = 0;
LABEL_15:
      v22 = *(unsigned int **)(v12 + 16);
      *(_QWORD *)(v12 + 16) = v21;
      if (v22)
      {
        v23 = (uint64_t *)(v22 + 2);
        v24 = *v22;
        if ((_DWORD)v24)
        {
          v25 = 24 * v24;
          do
          {
            v26 = (uint64_t *)v23[1];
            if (v26)
            {
              v27 = *v23;
              *v26 = *v23;
              *(_QWORD *)(v27 + 8) = v26;
              *v23 = 0;
              v23[1] = 0;
            }
            v23 += 3;
            v25 -= 24;
          }
          while (v25);
        }
        WTF::fastFree((unint64_t)v22, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v28 = (int *)*((_QWORD *)a4 + 1);
      v29 = *v28;
      if (*v28)
      {
        v36 = 0;
        v37 = 0;
        v38 = v28 + 1;
        do
        {
          v39 = *(unsigned int **)(v12 + 16);
          if (v37 >= *v39)
          {
            __break(0xC471u);
            JUMPOUT(0x198BEF3A4);
          }
          v40 = 16 * (v29 & 0xFFFFFFFE);
          v41 = &v39[v36];
          *(unsigned int *)((char *)v41 + 25) = v12;
          *((_BYTE *)v41 + 29) = BYTE4(v12);
          v42 = *(_QWORD *)(v40 + 0x60);
          if ((v42 & 1) != 0)
          {
            v48 = (v42 >> 1) & 3;
            v42 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v42 = 1;
            *(_BYTE *)(v42 + 4) = v48;
            *(_BYTE *)(v42 + 5) = 0;
            *(_QWORD *)(v42 + 8) = v42 + 8;
            *(_QWORD *)(v42 + 16) = v42 + 8;
            __dmb(0xAu);
            *(_QWORD *)(v40 + 96) = v42;
          }
          v30 = 0;
          v44 = *(_QWORD *)(v42 + 8);
          v43 = (_QWORD *)(v42 + 8);
          *(_QWORD *)&v39[v36 + 4] = v43;
          *((_QWORD *)v41 + 1) = v44;
          *v43 = v41 + 2;
          *(_QWORD *)(v44 + 8) = v41 + 2;
          *((_WORD *)v43 - 2) = 257;
          v29 = v38[v37++];
          v36 += 6;
        }
        while (v29);
      }
      else
      {
        v30 = 0;
      }
    }
  }
  else
  {
    v30 = 1;
  }
  *(_QWORD *)(v12 + 8) = v30 | a3;
  if (a3 && v12 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v12);
}

BOOL JSC::Structure::canCachePropertyNameEnumerator(uint64_t a1)
{
  _DWORD *v1;
  _BOOL8 result;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 16) & 3) != 0 || (*(_BYTE *)(a1 + 8) & 0xE) != 0 || (*(_WORD *)(a1 + 12) & 6) != 0)
    return 0;
  v1 = *(_DWORD **)(*(_QWORD *)(a1 + 56) + 8);
  do
  {
    result = *v1 == 0;
    if (!*v1)
      break;
    v3 = 16 * (*v1 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v3 + 0x10) & 3) != 0)
      break;
    if ((*(_BYTE *)(16 * (*v1 & 0xFFFFFFFE) + 8) & 0xE) != 0)
      break;
    ++v1;
  }
  while ((*(_WORD *)(v3 + 12) & 6) == 0);
  return result;
}

uint64_t JSC::Structure::findPropertyHashEntry@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;

  v4 = *(unsigned int *)(result + 76);
  if ((_DWORD)v4)
    v5 = a2 == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_16;
  v7 = 16 * v4;
  do
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      goto LABEL_7;
    v9 = *(_DWORD *)(a2 + 16);
    if ((v9 & 0x20) != 0)
      goto LABEL_7;
    v10 = *(_DWORD *)(v8 + 4) & (v9 >> 8);
    v11 = *(_QWORD *)(v8 + 32);
    v12 = *(unsigned __int16 *)(v11 + 4 * v10);
    if (v12 == 0xFFFF)
      goto LABEL_7;
    while (1)
    {
      v13 = (__int16)v12;
      v14 = (unint64_t *)(*(_QWORD *)(v8 + 24) + 40 * (__int16)v12);
      v15 = v14[1];
      if (!v15)
        goto LABEL_14;
      result = WTF::equalInternal<unsigned char>(a2, *v14, v15 - 1);
      if ((result & 1) != 0)
        break;
      v11 = *(_QWORD *)(v8 + 32);
LABEL_14:
      v10 = *(__int16 *)(v11 + 4 * v10 + 2);
      if (v10 == -1)
        goto LABEL_7;
      LOWORD(v12) = *(_WORD *)(v11 + 4 * v10);
    }
    v17 = *(_QWORD *)(v8 + 24);
    if (v17)
    {
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v17 + 40 * v13;
      v16 = 1;
      goto LABEL_17;
    }
LABEL_7:
    v7 = *(_QWORD *)(v7 + 16);
  }
  while (v7);
LABEL_16:
  v16 = 0;
  *(_BYTE *)a3 = 0;
LABEL_17:
  *(_BYTE *)(a3 + 16) = v16;
  return result;
}

unint64_t JSC::Structure::setBrandTransitionFromExistingStructureImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if ((*(_BYTE *)(a1 + 19) & 8) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 80);
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = ((a2 | 0x1100000000000000) + ~(a2 << 32)) ^ (((a2 | 0x1100000000000000uLL) + ~(a2 << 32)) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      v9 = *(_QWORD *)(v3 + 16 * v8);
      if (v9 == (a2 | 0x1100000000000000))
      {
LABEL_8:
        v11 = *(_BYTE **)(v3 + 16 * v8 + 8);
        if (v11 && (v11[8] & 3) == 0)
          return *(_QWORD *)v11;
      }
      else
      {
        v10 = 1;
        while (v9)
        {
          v8 = ((_DWORD)v8 + v10) & v4;
          v9 = *(_QWORD *)(v3 + 16 * v8);
          ++v10;
          if (v9 == (a2 | 0x1100000000000000))
            goto LABEL_8;
        }
      }
    }
    return 0;
  }
  v13 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if (!v13)
    return 0;
  v14 = (*(_DWORD *)(v13 + 16) >> 13) & 0x1F;
  if ((_DWORD)v14 == 16)
  {
    v15 = *(_QWORD *)(v13 + 48);
    v16 = v15 | 0x1000000000000000;
    v17 = v15 == 2;
    v18 = 0x1000000000000000;
    if (!v17)
      v18 = v16;
  }
  else
  {
    v18 = (v14 << 56) | (16 * *(unsigned int *)(v13 + 72));
  }
  if ((v18 | ((unint64_t)*(unsigned __int8 *)(v13 + 20) << 48)) == (a2 | 0x1100000000000000))
    return v13;
  else
    return 0;
}

unint64_t JSC::Structure::setBrandTransitionFromExistingStructureConcurrently(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v4 = (unsigned __int8 *)(a1 + 15);
  if (__ldaxr((unsigned __int8 *)(a1 + 15)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 15);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v12 = JSC::Structure::setBrandTransitionFromExistingStructureImpl(a1, a2);
  v13 = __ldxr(v4);
  if (v13 == 1)
  {
    if (!__stlxr(0, v4))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

unint64_t JSC::Structure::setBrandTransition(JSC::VM *a1, unint64_t a2, uint64_t a3, JSC::DeferredStructureTransitionWatchpointFire *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  const JSC::PropertyTable *v16;
  const JSC::PropertyTable *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  JSC::Structure *v30;
  const JSC::PropertyTable *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  unsigned __int8 *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v78;
  const char *v79;
  char v80;
  unsigned __int8 *v81;
  uint64_t *v82;
  unsigned int *v83;
  int *v84;
  char *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = JSC::Structure::setBrandTransitionFromExistingStructureImpl(a2, v8);
  if (v9)
    return v9;
  v14 = JSC::BrandedStructure::create((uint64_t)a1, a2, v8, a4, v10, v11, v12, v13);
  v22 = v14;
  *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 16) & 0xFFFC1FFF | 0x22000;
  v23 = *(_QWORD *)(a2 + 56);
  if (v23)
  {
    *(_QWORD *)(v14 + 56) = v23;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(v14 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, v14);
  }
  else
  {
    *(_QWORD *)(v14 + 56) = 0;
  }
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(a2 + 8);
  v24 = *(_QWORD *)(a3 + 8);
  if (v24)
    *(_DWORD *)v24 += 2;
  v25 = v24 >> 4;
  v26 = *(unsigned int *)(v22 + 72);
  *(_DWORD *)(v22 + 72) = v25;
  if ((_DWORD)v26)
  {
    v27 = (WTF::StringImpl *)(16 * v26);
    v28 = *(_DWORD *)(16 * v26) - 2;
    if (v28)
    {
      *(_DWORD *)v27 = v28;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v27, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
  }
  *(_BYTE *)(v22 + 20) = 0;
  JSC::Structure::takePropertyTableOrCloneIfPinned((JSC::Structure *)a2, a1, v16, v17, v18, v19, v20, v21);
  if (v29)
  {
    *(_QWORD *)(v22 + 88) = v29;
    if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(v22 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, v22);
  }
  else
  {
    *(_QWORD *)(v22 + 88) = 0;
  }
  v36 = *(unsigned __int16 *)(a2 + 24);
  v37 = -2;
  if (v36 != 65534)
  {
    if (v36 != 0xFFFF)
    {
LABEL_14:
      *(_WORD *)(v22 + 24) = v36;
      goto LABEL_15;
    }
    v36 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v36 != -1)
    {
      if (v36 <= 65533)
        goto LABEL_14;
      if (*(__int16 *)(v22 + 24) == -1)
      {
        *(_DWORD *)(*(_QWORD *)(v22 + 64) + 84) = v36;
        goto LABEL_15;
      }
      *((_DWORD *)JSC::Structure::ensureRareData((JSC::Structure *)v22, a1, v30, (uint64_t)v31, v32, v33, v34, v35) + 21) = v36;
      __dmb(0xAu);
      v37 = -1;
    }
  }
  *(_WORD *)(v22 + 24) = v37;
LABEL_15:
  if ((*(_BYTE *)(a2 + 16) & 3) == 0)
  {
    v38 = (unsigned __int8 *)(a2 + 15);
    if (__ldaxr((unsigned __int8 *)(a2 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v38))
    {
      goto LABEL_19;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 15);
LABEL_19:
    JSC::StructureTransitionTable::add((JSC::StructureTransitionTable *)(a2 + 80), a1, (JSC::JSCell *)a2, v22, v32, v33, v34, v35);
    v46 = __ldxr(v38);
    if (v46 == 1)
    {
      if (!__stlxr(0, v38))
        goto LABEL_25;
    }
    else
    {
      __clrex();
    }
    v47 = (unsigned __int8 *)(a2 + 15);
    goto LABEL_24;
  }
  JSC::Structure::ensurePropertyTable((JSC::Structure *)v22, a1, (uint64_t)v30, v31, v32, v33, v34, v35);
  v75 = v74;
  v76 = (unsigned __int8 *)(v22 + 15);
  v81 = (unsigned __int8 *)(v22 + 15);
  LOBYTE(v82) = 1;
  if (__ldaxr((unsigned __int8 *)(v22 + 15)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v76))
  {
    goto LABEL_62;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v76);
LABEL_62:
  JSC::Structure::pin((JSC::JSCell *)v22, (WTF::AtomStringImpl *)&v81, (uint64_t)a1, v75, v70, v71, v72, v73);
  if (!(_BYTE)v82)
    goto LABEL_25;
  v47 = v81;
  v78 = __ldxr(v81);
  if (v78 == 1)
  {
    if (!__stlxr(0, v81))
      goto LABEL_25;
  }
  else
  {
    __clrex();
  }
LABEL_24:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v47, 0, v40, v41, v42, v43, v44, v45);
LABEL_25:
  v48 = *(_QWORD *)(v22 + 88);
  if (v48)
  {
    v88 = *(_QWORD *)(v22 + 88);
    v49 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v49)
      v49 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v49 + 5) & 8) == 0)
    {
      v50 = *(_DWORD *)(v48 + 24);
      v51 = *(_QWORD *)(v48 + 32);
      if (v51)
        LODWORD(v51) = *(_DWORD *)(v51 + 12);
      v52 = v51 + v50;
      v53 = *(unsigned __int8 *)(v22 + 14);
      v54 = v51 + v50 - v53;
      if (v52 < v53)
        v54 = 0;
      v86 = v54;
      v87 = v52;
      v81 = (unsigned __int8 *)v22;
      v82 = &v88;
      v83 = &v87;
      v84 = &v86;
      v85 = &v80;
      v55 = *(unsigned __int16 *)(v22 + 24);
      if (v55 == 65534)
      {
        v56 = -1;
      }
      else
      {
        if (v55 == 0xFFFF)
          v56 = *(_DWORD *)(*(_QWORD *)(v22 + 64) + 84);
        else
          v56 = *(unsigned __int16 *)(v22 + 24);
        if (v56 >= (int)v53)
        {
          if (v56 >= 64)
            v57 = (v56 - 63);
          else
            v57 = 0;
          v58 = v57 + v53;
LABEL_45:
          if (v58 == v52)
          {
            if (v55 == 65534)
              goto LABEL_51;
            if (v55 == 0xFFFF)
              v55 = *(_DWORD *)(*(_QWORD *)(v22 + 64) + 84);
            v59 = __OFSUB__(v55, 63);
            v60 = v55 - 63;
            if ((v60 < 0) ^ v59 | (v60 == 0))
LABEL_51:
              v60 = 0;
            if (v60 == v54)
              return v22;
            v79 = "inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset";
          }
          else
          {
            v79 = "numberOfSlotsForMaxOffset doesn't match totalSize";
          }
          JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()((uint64_t)&v81, v79);
        }
      }
      v58 = v56 + 1;
      goto LABEL_45;
    }
  }
  return v22;
}

uint64_t *JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(uint64_t *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD v10[2];

  v9 = this[4];
  v10[0] = &off_1E35AF330;
  v10[1] = v9;
  if (*((_BYTE *)this + 4) == 1)
    return JSC::WatchpointSet::fireAllSlow((uint64_t)this, (JSC::VM *)this[3], v10, a5, a6, a7, a8, a9, a2);
  return this;
}

uint64_t JSC::Structure::finalizeUnconditionally(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 80);
  if ((v2 & 1) != 0 && (v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((v2 & 8) != 0)
    {
      if ((*(_BYTE *)((v2 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) != 0)
        return result;
    }
    else if (*(_DWORD *)(v2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
           && ((*(_QWORD *)((v2 & 0xFFFFFFFFFFFFC000) + 8 * ((v2 >> 10) & 0xF) + 0x28) >> (v2 >> 4)) & 1) != 0)
    {
      return result;
    }
    *(_QWORD *)(result + 80) = 1;
  }
  return result;
}

void JSC::StructureCache::clear(JSC::StructureCache *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;

  v9 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 24);
LABEL_5:
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 1) = 0;
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = v11 + 32;
      do
      {
        if (*(_QWORD *)(v13 - 32))
          v14 = 0;
        else
          v14 = *(_QWORD *)(v13 - 24) == 0;
        v15 = v14 && *(_DWORD *)(v13 - 16) == 1;
        if (!v15 || *(_QWORD *)(v13 - 8))
        {
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
            *(_QWORD *)v13 = 0;
          }
        }
        v13 += 40;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = __ldxr(v9);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v9))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::StructureCache::emptyObjectStructureConcurrently(JSC::StructureCache *this, JSC::JSObject *a2, int a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15[2];
  int v16;
  char **v17;

  if (a2)
  {
    v15[0] = (uint64_t)a2;
    v15[1] = 0;
    v16 = a3;
    v17 = &JSC::JSFinalObject::s_info;
    v4 = (unsigned __int8 *)this + 24;
    if (__ldaxr((unsigned __int8 *)this + 24))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
LABEL_5:
      v12 = JSC::WeakGCMap<JSC::PrototypeKey,JSC::Structure,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>>::get(*((_QWORD *)this + 1), v15);
      v13 = __ldxr(v4);
      if (v13 == 1)
      {
        if (!__stlxr(0, v4))
          return v12;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v6, v7, v8, v9, v10, v11);
      return v12;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 24);
    goto LABEL_5;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t JSC::WeakGCMap<JSC::PrototypeKey,JSC::Structure,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>>::get(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v16;
  BOOL v17;
  _BYTE *v18;

  if (result)
  {
    v2 = 0;
    v3 = *a2;
    v4 = a2[1];
    v5 = a2[3];
    v6 = (v4 ^ *a2 ^ v5) + ~((v4 ^ *a2 ^ v5) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = *((_DWORD *)a2 + 4);
    for (i = v9 + (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27))); ; i = v2 + v11)
    {
      v11 = i & *(_DWORD *)(result - 8);
      v12 = result + 40 * v11;
      v13 = *(_QWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 16);
      if (*(_QWORD *)v12 == v3 && v13 == v4)
      {
        v13 = v4;
        if (v14 == v9)
        {
          v14 = v9;
          v13 = v4;
          if (*(_QWORD *)(v12 + 24) == v5)
            break;
        }
      }
      if (*(_QWORD *)v12)
        v16 = 0;
      else
        v16 = v13 == 0;
      v17 = v16 && v14 == 0;
      if (v17 && !*(_QWORD *)(v12 + 24))
        return 0;
      ++v2;
    }
    v18 = *(_BYTE **)(result + 40 * v11 + 32);
    if (v18 && (v18[8] & 3) == 0)
      return *(_QWORD *)v18;
    return 0;
  }
  return result;
}

unint64_t JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure(JSC::StructureCache *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::Structure *a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  JSC::JSObject *v7;
  uint64_t v8;
  JSC::JSObject *v9;
  int v11;

  v5 = *((_BYTE *)a4 + 8) & 0xF;
  v6 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v6 + 8) & 0x20) == 0)
  {
    v7 = a3;
    do
    {
      v8 = *(_QWORD *)(v6 + 40);
      if (v8)
      {
        if (*(_BYTE *)(*(_QWORD *)(v8 + 2048) + 4) == 2)
          break;
      }
      v9 = *(JSC::JSObject **)(v6 + 48);
      if (!v9)
        v9 = (JSC::JSObject *)*((_QWORD *)v7 + 2);
      if (v9 == (JSC::JSObject *)2)
        goto LABEL_12;
      v6 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
      v7 = v9;
    }
    while ((*(_BYTE *)(v6 + 8) & 0x20) == 0);
  }
  if ((*((_BYTE *)a4 + 8) & 0xE) != 0)
    v5 = *((_BYTE *)a4 + 8) & 1 | 0xCu;
  else
    v5 = *((_BYTE *)a4 + 8) & 0xF;
LABEL_12:
  v11 = *((unsigned __int8 *)a4 + 9) | (*((unsigned __int16 *)a4 + 6) << 16) | (*((unsigned __int8 *)a4 + 10) << 8);
  return JSC::StructureCache::createEmptyStructure((uint64_t)this, a2, a3, (uint64_t)&v11, 16 * *((unsigned int *)a4 + 19), v5, 0, 0, a5, 0);
}

unint64_t JSC::StructureCache::createEmptyStructure(uint64_t a1, JSC::VM *a2, JSC::JSObject *this, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  int v10;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int i;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _QWORD *Allocator;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[2];
  int v59;
  unint64_t v60;

  if (!this)
  {
    __break(0xC471u);
    JUMPOUT(0x198BF0108);
  }
  v10 = a8;
  v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((_DWORD)a8)
    v18 = 0;
  else
    v18 = (unint64_t)this;
  v58[0] = v18;
  v58[1] = a10;
  v59 = a7;
  v60 = a5;
  v20 = (uint64_t *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 8);
  if (v19)
  {
    v21 = 0;
    v22 = (v18 ^ a5 ^ a10) + ~((v18 ^ a5 ^ a10) << 32);
    v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
    v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
    for (i = (((v24 + ~(v24 << 27)) >> 31) ^ (v24 + ~((_DWORD)v24 << 27))) + a7; ; i = v21 + v26)
    {
      v26 = i & *(_DWORD *)(v19 - 8);
      v27 = v19 + 40 * v26;
      v28 = *(_QWORD *)(v27 + 8);
      v29 = *(_DWORD *)(v27 + 16);
      if (*(_QWORD *)v27 == v18 && v28 == a10)
      {
        v28 = a10;
        if (v29 == (_DWORD)a7)
        {
          v29 = a7;
          v28 = a10;
          if (*(_QWORD *)(v27 + 24) == a5)
            break;
        }
      }
      if (*(_QWORD *)v27)
        v31 = 0;
      else
        v31 = v28 == 0;
      v32 = v31 && v29 == 0;
      if (v32 && !*(_QWORD *)(v27 + 24))
        goto LABEL_30;
      ++v21;
    }
    v33 = *(_QWORD *)(v19 + 40 * v26 + 32);
    if (v33)
    {
      if ((*(_BYTE *)(v33 + 8) & 3) == 0)
      {
        v34 = *(_QWORD *)v33;
        if (*(_QWORD *)v33)
        {
          if ((_DWORD)a8)
          {
            JSC::JSObject::didBecomePrototype((unint64_t)this, v17, a9, (uint64_t)this, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v34 + 48))
            {
              __break(0xC471u);
              JUMPOUT(0x198BF0164);
            }
          }
          else if (!*(_QWORD *)(v34 + 48))
          {
            __break(0xC471u);
            JUMPOUT(0x198BF0128);
          }
          return v34;
        }
      }
    }
  }
LABEL_30:
  JSC::JSObject::didBecomePrototype((unint64_t)this, v17, a9, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v10)
    v39 = JSC::Structure::create((uint64_t)v17, a2, (uint64_t)this, a4, a5, a6, a7, v37, v38);
  else
    v39 = JSC::Structure::create(v17, a2, (uint64_t)this, a4, a5, a6, a7, v37, v38);
  v34 = v39;
  v44 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr(v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, v44))
  {
    goto LABEL_35;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v44);
LABEL_35:
  if (v34)
  {
    if ((v34 & 8) != 0)
      v54 = (v34 - 112) | 1;
    else
      v54 = v34 & 0xFFFFFFFFFFFFC000;
    if ((v54 & 1) != 0)
      v55 = (_QWORD *)(v54 + 47);
    else
      v55 = (_QWORD *)(*(_QWORD *)v54 + 32);
    Allocator = (_QWORD *)v55[2];
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v55, v54);
    v55[2] = *Allocator;
    *Allocator = v34;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  else
  {
    Allocator = 0;
  }
  v57 = Allocator;
  WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::inlineSet<JSC::PrototypeKey const&,JSC::Weak<JSC::Structure>>((uint64_t)&v56, v20, (uint64_t)v58, (uint64_t *)&v57, v40, v41, v42, v43);
  if (v57)
  {
    v57[1] = 3;
    v57 = 0;
  }
  v53 = __ldxr(v44);
  if (v53 == 1)
  {
    if (!__stlxr(0, v44))
      return v34;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, v47, v48, v49, v50, v51, v52);
  return v34;
}

unint64_t JSC::StructureCache::emptyObjectStructureForPrototype(JSC::StructureCache *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v9;
  JSC::VM *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int i;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _QWORD *Allocator;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  char v53[24];
  _QWORD *v54;
  _QWORD v55[2];
  int v56;
  char **v57;

  v52 = 24;
  if (!a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198BF03FCLL);
  }
  v9 = a5;
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((_DWORD)a5)
    v15 = 0;
  else
    v15 = (unint64_t)a3;
  v55[0] = v15;
  v55[1] = a6;
  v56 = a4;
  v57 = &JSC::JSFinalObject::s_info;
  v17 = (uint64_t *)((char *)this + 8);
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v18 = 0;
    v19 = (v15 ^ a6 ^ (unint64_t)&JSC::JSFinalObject::s_info)
        + ~((v15 ^ a6 ^ (unint64_t)&JSC::JSFinalObject::s_info) << 32);
    v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
    v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
    for (i = (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27))) + a4; ; i = v18 + v23)
    {
      v23 = i & *(_DWORD *)(v16 - 8);
      v24 = v16 + 40 * v23;
      v25 = *(_QWORD *)(v24 + 8);
      v26 = *(_DWORD *)(v24 + 16);
      if (*(_QWORD *)v24 == v15 && v25 == a6)
      {
        v25 = a6;
        if (v26 == (_DWORD)a4)
        {
          v26 = a4;
          v25 = a6;
          if (*(char ***)(v24 + 24) == &JSC::JSFinalObject::s_info)
            break;
        }
      }
      if (*(_QWORD *)v24)
        v28 = 0;
      else
        v28 = v25 == 0;
      v29 = v28 && v26 == 0;
      if (v29 && !*(_QWORD *)(v24 + 24))
        goto LABEL_30;
      ++v18;
    }
    v30 = *(_QWORD *)(v16 + 40 * v23 + 32);
    if (v30)
    {
      if ((*(_BYTE *)(v30 + 8) & 3) == 0)
      {
        v31 = *(_QWORD *)v30;
        if (*(_QWORD *)v30)
        {
          if ((_DWORD)a5)
          {
            JSC::JSObject::didBecomePrototype((unint64_t)a3, v14, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v31 + 48))
            {
              __break(0xC471u);
              JUMPOUT(0x198BF0458);
            }
          }
          else if (!*(_QWORD *)(v31 + 48))
          {
            __break(0xC471u);
            JUMPOUT(0x198BF041CLL);
          }
          return v31;
        }
      }
    }
  }
LABEL_30:
  JSC::JSObject::didBecomePrototype((unint64_t)a3, v14, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v9)
    v35 = JSC::Structure::create((uint64_t)v14, a2, (uint64_t)a3, (uint64_t)&v52, (unint64_t)&JSC::JSFinalObject::s_info, 0, a4, v33, v34);
  else
    v35 = JSC::Structure::create(v14, a2, (uint64_t)a3, (uint64_t)&v52, (unint64_t)&JSC::JSFinalObject::s_info, 0, a4, v33, v34);
  v31 = v35;
  v40 = (unsigned __int8 *)this + 24;
  if (__ldaxr(v40))
  {
    __clrex();
  }
  else if (!__stxr(1u, v40))
  {
    goto LABEL_35;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v40);
LABEL_35:
  if (v31)
  {
    if ((v31 & 8) != 0)
      v50 = (v31 - 112) | 1;
    else
      v50 = v31 & 0xFFFFFFFFFFFFC000;
    if ((v50 & 1) != 0)
      v51 = (_QWORD *)(v50 + 47);
    else
      v51 = (_QWORD *)(*(_QWORD *)v50 + 32);
    Allocator = (_QWORD *)v51[2];
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v51, v50);
    v51[2] = *Allocator;
    *Allocator = v31;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  else
  {
    Allocator = 0;
  }
  v54 = Allocator;
  WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::inlineSet<JSC::PrototypeKey const&,JSC::Weak<JSC::Structure>>((uint64_t)v53, v17, (uint64_t)v55, (uint64_t *)&v54, v36, v37, v38, v39);
  if (v54)
  {
    v54[1] = 3;
    v54 = 0;
  }
  v49 = __ldxr(v40);
  if (v49 == 1)
  {
    if (!__stlxr(0, v40))
      return v31;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v40, 0, v43, v44, v45, v46, v47, v48);
  return v31;
}

void JSC::StructureChain::visitChildren(JSC::StructureChain *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  JSC::SlotVisitor::markAuxiliary(a2, *((_QWORD *)this + 1), (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = (int *)*((_QWORD *)this + 1);
  v19 = *v18;
  if (*v18)
  {
    v20 = v18 + 1;
    do
    {
      v21 = v19 & 0xFFFFFFFE;
      if ((v19 & 0xFFFFFFFE) != 0)
      {
        v22 = 16 * (v19 & 0xFFFFFFFE);
        v23 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v22 & 0xFFFFFC000 | 0x20) != v23)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFC000), v23, v12, v13, v14, v15, v16, v17);
        if (((*(_QWORD *)((v22 & 0xFFFFFC000) + 8 * ((v21 >> 6) & 0xF) + 0x28) >> (v21 & 0x3E)) & 1) == 0
          || *((_QWORD *)a2 + 21))
        {
          JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v21, 0, v13, v14, v15, v16, v17);
        }
      }
      v24 = *v20++;
      v19 = v24;
    }
    while (v24);
  }
}

uint64_t JSC::StructureChain::visitChildren(JSC::StructureChain *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  int *v7;
  int v8;
  int *v9;
  int v10;
  _QWORD v11[2];
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  _QWORD *v15;
  char v16;

  v11[0] = a2;
  v11[1] = this;
  v13 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v12 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v14[0] = a2;
    v14[1] = this;
    v16 = 0;
    v15 = v11;
    *((_QWORD *)a2 + 11) = v14;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v14[0] + 88) = v15;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((_QWORD *)this + 1));
    v7 = (int *)*((_QWORD *)this + 1);
    v8 = *v7;
    if (*v7)
    {
      v9 = v7 + 1;
      do
      {
        result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16 * (v8 & 0xFFFFFFFE));
        v10 = *v9++;
        v8 = v10;
      }
      while (v10);
    }
    *(_QWORD *)(v11[0] + 88) = v12;
  }
  return result;
}

unint64_t JSC::StructureChain::create(JSC::StructureChain *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v10;
  uint64_t v11;
  JSC::VM *v12;
  unint64_t v13;
  unint64_t v14;
  JSC::VM *v15;
  char *v16;
  unint64_t SlowCase;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  JSC::VM *v31;
  unint64_t v33;
  unint64_t v34;

  v8 = a2;
  if (a2)
  {
    v10 = 8;
    v11 = 2;
    v12 = a2;
    do
    {
      v13 = v10;
      v14 = v11;
      v15 = *(JSC::VM **)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
      if (v15 == (JSC::VM *)2)
        break;
      if (!v15)
      {
        v15 = (JSC::VM *)*((_QWORD *)v12 + 2);
        if (v15 == (JSC::VM *)2)
          break;
      }
      v10 += 4;
      ++v11;
      v12 = v15;
    }
    while (v15);
    if (v14 >> 62)
    {
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x198BF0784);
    }
    v16 = (char *)this + 6648;
    if (v14 > 0x7D8)
      goto LABEL_8;
  }
  else
  {
    v16 = (char *)this + 6648;
    v13 = 4;
  }
  v18 = *((_QWORD *)this + ((v13 + 15) >> 4) + 842);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 + 60);
    SlowCase = *(_QWORD *)(v18 + 24);
    if (SlowCase >= *(_QWORD *)(v18 + 32))
    {
      SlowCase = *(_QWORD *)(v18 + 40);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v18, (char *)this + 192, v19, 0, 0);
        goto LABEL_14;
      }
      v34 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v18 + 48);
      *(_QWORD *)(v18 + 32) = SlowCase + HIDWORD(v34);
      *(_QWORD *)(v18 + 40) = SlowCase + (int)v34;
    }
    *(_QWORD *)(v18 + 24) = SlowCase + v19;
    goto LABEL_14;
  }
LABEL_8:
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v16, this, v13, 0, a5, a6, a7, a8);
  if (!SlowCase)
    goto LABEL_36;
LABEL_14:
  bzero((void *)SlowCase, v13);
  v27 = *((_QWORD *)this + 4984);
  if (v27 < *((_QWORD *)this + 4985))
  {
LABEL_15:
    *((_QWORD *)this + 4984) = v27 + 16;
    goto LABEL_16;
  }
  v27 = *((_QWORD *)this + 4986);
  if ((v27 & 1) == 0)
  {
    v33 = *(_QWORD *)(v27 + 8) ^ *((_QWORD *)this + 4987);
    *((_QWORD *)this + 4985) = v27 + HIDWORD(v33);
    *((_QWORD *)this + 4986) = v27 + (int)v33;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM(this, v20, v21, v22, v23, v24, v25, v26);
  v27 = JSC::LocalAllocator::allocateSlowCase((char *)this + 39848, (char *)this + 192, 16, 0, 0);
LABEL_16:
  *(_DWORD *)v27 = 0;
  v28 = *((_QWORD *)this + 5211);
  v29 = *(_DWORD *)(v28 + 8);
  *(_DWORD *)v27 = v28 >> 4;
  *(_DWORD *)(v27 + 4) = v29;
  *(_QWORD *)(v27 + 8) = SlowCase;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v8)
  {
    v30 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v27 + 8) + v30) = *(_DWORD *)v8 & 0xFFFFFFFE;
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(v27 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, v27);
      v31 = *(JSC::VM **)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
      if (v31 == (JSC::VM *)2)
        break;
      if (!v31)
      {
        v31 = (JSC::VM *)*((_QWORD *)v8 + 2);
        if (v31 == (JSC::VM *)2)
          break;
      }
      v30 += 4;
      v8 = v31;
    }
    while (v31);
  }
  return v27;
}

void JSC::StructureRareData::destroy(JSC::StructureRareData *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  JSC::SpecialPropertyCache *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t **v34;
  uint64_t *k;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t **v42;
  uint64_t *i;
  uint64_t *v44;
  uint64_t v45;

  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v36 = *(_QWORD *)(v9 + 8);
      if ((v36 & 1) == 0)
      {
        v39 = v9;
        do
        {
          v40 = __ldaxr((unsigned int *)v36);
          v41 = --v40 == 0;
        }
        while (__stlxr(v40, (unsigned int *)v36));
        v9 = v39;
        if (v41)
        {
          atomic_store(1u, (unsigned int *)v36);
          v42 = (uint64_t **)(v36 + 8);
          for (i = *(uint64_t **)(v36 + 8); i != (uint64_t *)v42; i = *v42)
          {
            v45 = *i;
            v44 = (uint64_t *)i[1];
            *v44 = *i;
            *(_QWORD *)(v45 + 8) = v44;
            *i = 0;
            i[1] = 0;
          }
          WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
          v9 = v39;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (JSC::SpecialPropertyCache *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    JSC::SpecialPropertyCache::~SpecialPropertyCache(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)this + 7);
  if (v21)
  {
    v28 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v28)
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_DWORD *)(v21 + 16 * j) != 2147483646)
        {
          v30 = v21 + 16 * j;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr((unsigned int *)v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, (unsigned int *)v31));
            if (!v33)
            {
              atomic_store(1u, (unsigned int *)v31);
              v34 = (uint64_t **)(v31 + 8);
              for (k = *(uint64_t **)(v31 + 8); k != (uint64_t *)v34; k = *v34)
              {
                v38 = *k;
                v37 = (uint64_t *)k[1];
                *v37 = *k;
                *(_QWORD *)(v38 + 8) = v37;
                *k = 0;
                k[1] = 0;
              }
              WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
      }
    }
    WTF::fastFree(v21 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v22)
  {
    v23 = (uint64_t *)(v22 + 2);
    v24 = *v22;
    if ((_DWORD)v24)
    {
      v25 = 24 * v24;
      do
      {
        v26 = (uint64_t *)v23[1];
        if (v26)
        {
          v27 = *v23;
          *v26 = *v23;
          *(_QWORD *)(v27 + 8) = v26;
          *v23 = 0;
          v23[1] = 0;
        }
        v23 += 3;
        v25 -= 24;
      }
      while (v25);
    }
    WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::StructureRareData::visitChildren(JSC::StructureRareData *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_DWORD *)this + 20);
  v13 = v12 & 0xFFFFFFFE;
  if ((v12 & 0xFFFFFFFE) != 0)
  {
    v14 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v13) & 0xFFFFFC000 | 0x20) != v14)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v13) & 0xFFFFFC000), v14, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v13) & 0xFFFFFC000) + 8 * ((v13 >> 6) & 0xF) + 0x28) >> (v13 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v13, 0, a4, a5, a6, a7, a8);
    }
  }
  v15 = *((_QWORD *)this + 8);
  if (v15)
  {
    v26 = *(_QWORD *)(v15 + 16);
    if (v26 == 1)
      v27 = 0;
    else
      v27 = v26;
    if ((v27 & 0xFFFE000000000002) != 0 || v27 == 0)
      goto LABEL_55;
    if ((v27 & 8) != 0)
    {
      if ((*(_BYTE *)(v27 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
        goto LABEL_55;
    }
    else
    {
      v29 = v27 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 33))
      {
        v48 = v27;
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
        v27 = v48;
      }
      if (((*(_QWORD *)(v29 + 8 * ((v27 >> 10) & 0xF) + 40) >> (v27 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
      {
LABEL_55:
        v30 = *((_QWORD *)this + 8);
        if (!v30)
          goto LABEL_12;
        v31 = *(_QWORD *)(v30 + 40);
        if (v31 == 1)
          v32 = 0;
        else
          v32 = v31;
        if ((v32 & 0xFFFE000000000002) == 0 && v32 != 0)
        {
          if ((v32 & 8) != 0)
          {
            if ((*(_BYTE *)(v32 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
              goto LABEL_68;
          }
          else
          {
            v34 = v32 & 0xFFFFFFFFFFFFC000;
            if (*(_DWORD *)(v32 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 33))
            {
              v49 = v32;
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v32 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
              v32 = v49;
            }
            if (((*(_QWORD *)(v34 + 8 * ((v32 >> 10) & 0xF) + 40) >> (v32 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
              goto LABEL_68;
          }
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v32, 0, a4, a5, a6, a7, a8);
        }
LABEL_68:
        v35 = *((_QWORD *)this + 8);
        if (!v35)
          goto LABEL_12;
        v36 = *(_QWORD *)(v35 + 64);
        if (v36 == 1)
          v37 = 0;
        else
          v37 = v36;
        if ((v37 & 0xFFFE000000000002) == 0 && v37 != 0)
        {
          if ((v37 & 8) != 0)
          {
            if ((*(_BYTE *)(v37 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
              goto LABEL_81;
          }
          else
          {
            v39 = v37 & 0xFFFFFFFFFFFFC000;
            if (*(_DWORD *)(v37 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 33))
            {
              v50 = v37;
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v37 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
              v37 = v50;
            }
            if (((*(_QWORD *)(v39 + 8 * ((v37 >> 10) & 0xF) + 40) >> (v37 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
              goto LABEL_81;
          }
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v37, 0, a4, a5, a6, a7, a8);
        }
LABEL_81:
        v40 = *((_QWORD *)this + 8);
        if (!v40)
          goto LABEL_12;
        v41 = *(_QWORD *)(v40 + 88);
        if (v41 == 1)
          v42 = 0;
        else
          v42 = v41;
        if ((v42 & 0xFFFE000000000002) == 0 && v42)
        {
          if ((v42 & 8) != 0)
          {
            if ((*(_BYTE *)(v42 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
              goto LABEL_92;
          }
          else
          {
            v43 = v42 & 0xFFFFFFFFFFFFC000;
            if (*(_DWORD *)(v42 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 33))
            {
              v51 = v42;
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v42 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
              v42 = v51;
            }
            if (((*(_QWORD *)(v43 + 8 * ((v42 >> 10) & 0xF) + 40) >> (v42 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
              goto LABEL_92;
          }
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v42, 0, a4, a5, a6, a7, a8);
        }
LABEL_92:
        v44 = *((_QWORD *)this + 8);
        if (!v44)
          goto LABEL_12;
        v45 = *(_QWORD *)(v44 + 112);
        v46 = v45 == 1 ? 0 : v45;
        if ((v46 & 0xFFFE000000000002) != 0 || !v46)
          goto LABEL_12;
        if ((v46 & 8) != 0)
        {
          if ((*(_BYTE *)(v46 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
            goto LABEL_12;
        }
        else
        {
          v47 = v46 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 33))
          {
            v52 = v46;
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v46 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
            v46 = v52;
          }
          if (((*(_QWORD *)(v47 + 8 * ((v46 >> 10) & 0xF) + 40) >> (v46 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
            goto LABEL_12;
        }
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v46, 0, a4, a5, a6, a7, a8);
        goto LABEL_12;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v27, 0, a4, a5, a6, a7, a8);
    goto LABEL_55;
  }
LABEL_12:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_18;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) != 0)
      goto LABEL_17;
  }
  else
  {
    v17 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_17:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_18;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFELL, 0, a4, a5, a6, a7, a8);
LABEL_18:
  v18 = *((_QWORD *)this + 3);
  if (v18 < 2)
    goto LABEL_24;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_23:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_24;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, a4, a5, a6, a7, a8);
LABEL_24:
  v20 = *((_QWORD *)this + 4);
  if (v20 < 2)
    goto LABEL_30;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_29;
  }
  else
  {
    v21 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_29:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_30;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, a4, a5, a6, a7, a8);
LABEL_30:
  v22 = *((_QWORD *)this + 5);
  if (v22 < 2)
    goto LABEL_36;
  if ((v22 & 8) != 0)
  {
    if ((*(_BYTE *)(v22 - 79) & 1) != 0)
      goto LABEL_35;
  }
  else
  {
    v23 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v23, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) != 0)
    {
LABEL_35:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_36;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v22, 0, a4, a5, a6, a7, a8);
LABEL_36:
  v24 = *((_QWORD *)this + 6);
  if (v24 < 2)
    return;
  if ((v24 & 8) != 0)
  {
    if ((*(_BYTE *)(v24 - 79) & 1) == 0)
      goto LABEL_115;
  }
  else
  {
    v25 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != v25)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000), v25, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v24 & 0xFFFFFFFFFFFFC000) + 8 * ((v24 >> 10) & 0xF) + 0x28) >> (v24 >> 4)) & 1) == 0)
      goto LABEL_115;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_115:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v24, 0, a4, a5, a6, a7, a8);
}

uint64_t JSC::StructureRareData::visitChildren(JSC::StructureRareData *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  _QWORD *v20;
  char v21;

  v16[0] = a2;
  v16[1] = this;
  v18 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v17 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198BF14BCLL);
  }
  v19[0] = a2;
  v19[1] = this;
  v21 = 0;
  v20 = v16;
  *((_QWORD *)a2 + 11) = v19;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v19[0] + 88) = v20;
  v6 = *((_DWORD *)this + 20);
  if (v6)
    v7 = 16 * (v6 & 0xFFFFFFFE);
  else
    v7 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  if (v8)
  {
    if ((v8[2] != 1 ? (v9 = v8[2]) : (v9 = 0),
          (v9 & 0xFFFE000000000002) == 0
       && ((*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2),
           (v8 = (_QWORD *)*((_QWORD *)this + 8)) == 0)
       || (v8[5] != 1 ? (v10 = v8[5]) : (v10 = 0), (v10 & 0xFFFE000000000002) == 0))
      && ((*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2),
          (v8 = (_QWORD *)*((_QWORD *)this + 8)) == 0)
      || (v8[8] != 1 ? (v11 = v8[8]) : (v11 = 0), (v11 & 0xFFFE000000000002) == 0))
    {
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      v8 = (_QWORD *)*((_QWORD *)this + 8);
      if (!v8)
        goto LABEL_49;
    }
    v12 = v8[11] == 1 ? 0 : v8[11];
    if ((v12 & 0xFFFE000000000002) == 0)
    {
LABEL_49:
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      v8 = (_QWORD *)*((_QWORD *)this + 8);
      if (!v8)
        goto LABEL_31;
    }
    v13 = v8[14];
    v14 = v13 == 1 ? 0 : v13;
    if ((v14 & 0xFFFE000000000002) == 0)
LABEL_31:
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  }
  result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFFELL);
  if (*((_QWORD *)this + 3) != 1)
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  if (*((_QWORD *)this + 4) != 1)
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  if (*((_QWORD *)this + 5) != 1)
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  if (*((_QWORD *)this + 6) != 1)
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(v16[0] + 88) = v17;
  return result;
}

uint64_t JSC::StructureRareData::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;

  v10 = 0x2000000;
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)&JSC::StructureRareData::s_info, 0, 0, a9, a4);
}

void JSC::StructureRareData::cacheSpecialPropertySlow(unint64_t a1, _QWORD *a2, JSC::VM *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  JSC::VM *v12;
  unint64_t *v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t EquivalenceWithoutBarrier;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::SpecialPropertyCache *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD **v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  const JSC::PropertyTable *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  unsigned int v103;
  unsigned int v104;
  JSC::SpecialPropertyCache *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  JSC::VM *v119;
  uint64_t *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;

  v9 = a6;
  v10 = a5;
  v12 = a3;
  if ((_DWORD)a6)
  {
    switch((int)a6)
    {
      case 1:
        v15 = (unint64_t *)(*((_QWORD *)a3 + 5244) + 2512);
        goto LABEL_3;
      case 2:
        v15 = (unint64_t *)(*((_QWORD *)a3 + 5244) + 2616);
        goto LABEL_3;
      case 3:
        v15 = (unint64_t *)(*((_QWORD *)a3 + 5244) + 2768);
        goto LABEL_3;
      case 4:
        v15 = (unint64_t *)(*((_QWORD *)a3 + 5244) + 2488);
        goto LABEL_3;
      default:
        v16 = 0;
        break;
    }
  }
  else
  {
    v15 = (unint64_t *)(*((_QWORD *)a3 + 5244) + 2776);
LABEL_3:
    v16 = *v15;
  }
  if ((*(_DWORD *)(a4 + 16) & 3) == 2
    || (v17 = *(_WORD *)(a4 + 12), (v17 & 8) != 0)
    || (v17 & 0x10) != 0 && (v17 & 0x20) == 0
    || (v18 = *(unsigned __int8 *)(a4 + 9), v18 == 61)
    || v18 == 32)
  {
    v19 = *(_QWORD *)(a1 + 64);
    if (!v19)
    {
      v19 = WTF::fastMalloc((WTF *)0x78);
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)(v19 + 64) = 0u;
      *(_OWORD *)(v19 + 80) = 0u;
      *(_OWORD *)(v19 + 96) = 0u;
      *(_QWORD *)(v19 + 112) = 0;
      __dmb(0xAu);
      v53 = *(JSC::SpecialPropertyCache **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v19;
      if (v53)
      {
        JSC::SpecialPropertyCache::~SpecialPropertyCache(v53, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        v19 = *(_QWORD *)(a1 + 64);
      }
    }
    *(_QWORD *)(v19 + 24 * v9 + 16) = 1;
    return;
  }
  if (!*(_BYTE *)(a7 + 49))
  {
    if ((v17 & 0x80) == 0
      && (JSC::prepareChainForCaching(a2, a4, v16, 0, a5, a6, a7, a8) & 0xFFFFFF) >= 0x10000)
    {
      JSC::generateConditionsForPropertyMiss((uint64_t)v12, (unsigned __int8 *)a1, a2, a4, v16, v20, v21, v22, (uint64_t *)&v122);
      goto LABEL_16;
    }
LABEL_73:
    JSC::StructureRareData::giveUpOnSpecialPropertyCache(a1, v9);
    return;
  }
  if (*(_BYTE *)(a7 + 49) != 1)
    return;
  if (*(_BYTE *)(a7 + 48) != 1)
    return;
  v62 = *(_DWORD **)(a7 + 32);
  if (a4 == 16 * (*v62 & 0xFFFFFFFE))
    return;
  if ((JSC::prepareChainForCaching(a2, a4, v16, (uint64_t)v62, a5, a6, a7, a8) & 0xFFFFFF) < 0x10000)
    goto LABEL_73;
  JSC::generateConditionsForPrototypePropertyHit(v12, (unsigned __int8 *)a1, a2, (const JSC::PropertyTable *)a4, *(_QWORD *)(a7 + 32), v16, v63, v64, (uint64_t *)&v122);
LABEL_16:
  v30 = (unsigned int *)v122;
  if (!(_QWORD)v122)
  {
    v32 = 0;
    v122 = 0uLL;
    v123 = 0;
LABEL_38:
    v65 = *(_QWORD *)(a1 + 64);
    if (!v65)
    {
      v65 = WTF::fastMalloc((WTF *)0x78);
      *(_OWORD *)v65 = 0u;
      *(_OWORD *)(v65 + 16) = 0u;
      *(_OWORD *)(v65 + 32) = 0u;
      *(_OWORD *)(v65 + 48) = 0u;
      *(_OWORD *)(v65 + 64) = 0u;
      *(_OWORD *)(v65 + 80) = 0u;
      *(_OWORD *)(v65 + 96) = 0u;
      *(_QWORD *)(v65 + 112) = 0;
      __dmb(0xAu);
      v105 = *(JSC::SpecialPropertyCache **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v65;
      if (v105)
      {
        JSC::SpecialPropertyCache::~SpecialPropertyCache(v105, v23, v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
        v65 = *(_QWORD *)(a1 + 64);
      }
    }
    v66 = v9;
    if (v30)
      v67 = (uint64_t)&v30[6 * v30[1] + 2];
    else
      v67 = 0;
    if (v32 != (unsigned int *)v67)
    {
      v120 = (uint64_t *)(v65 + 24 * v9);
      v118 = v65;
      v119 = v12;
      v117 = v9;
      v121 = v67;
      do
      {
        v68 = *((_QWORD *)v32 + 1);
        if ((v68 & 0xFF000000000000) != 0)
        {
          v69 = v32;
          v70 = v10;
          v71 = *((_QWORD *)v69 + 2);
          v72 = v69;
          v73 = *(_QWORD *)v69;
          v74 = WTF::fastMalloc((WTF *)0x38);
          *(_QWORD *)v74 = 0;
          *(_QWORD *)(v74 + 8) = 0;
          *(_BYTE *)(v74 + 16) = 5;
          *(_BYTE *)(v74 + 21) = BYTE4(a1);
          *(_DWORD *)(v74 + 17) = a1;
          *(_QWORD *)(v74 + 24) = v73;
          v81 = (_DWORD **)(v74 + 24);
          *(_QWORD *)(v74 + 32) = v68;
          *(_QWORD *)(v74 + 40) = v71;
          if ((v68 & 0xFFFFFFFFFFFFFFLL) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198BF1AB8);
          }
          if ((v68 & 0xFF000000000000) == 0x5000000000000)
          {
            __break(0xC471u);
            JUMPOUT(0x198BF1AD8);
          }
          v82 = (_QWORD *)v74;
          *(_QWORD *)(v74 + 48) = 0;
          *(_QWORD *)(v74 + 48) = *v120;
          *v120 = v74;
          JSC::ObjectPropertyCondition::isWatchable(v74 + 24, 0, v75, v76, v77, v78, v79, v80);
          if ((v83 & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198BF1AF8);
          }
          v84 = 16 * (**v81 & 0xFFFFFFFE);
          v85 = *(_QWORD *)(v84 + 0x60);
          if ((v85 & 1) != 0)
          {
            v116 = (v85 >> 1) & 3;
            v85 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v85 = 1;
            *(_BYTE *)(v85 + 4) = v116;
            *(_BYTE *)(v85 + 5) = 0;
            *(_QWORD *)(v85 + 8) = v85 + 8;
            *(_QWORD *)(v85 + 16) = v85 + 8;
            __dmb(0xAu);
            *(_QWORD *)(v84 + 96) = v85;
          }
          v10 = v70;
          v87 = *(_QWORD *)(v85 + 8);
          v86 = (_QWORD *)(v85 + 8);
          *v82 = v87;
          v82[1] = v86;
          *v86 = v82;
          *(_QWORD *)(v87 + 8) = v82;
          *((_WORD *)v86 - 2) = 257;
          v12 = v119;
          v32 = v72;
          v66 = v117;
          v65 = v118;
        }
        else
        {
          v88 = WTF::fastMalloc((WTF *)0x58);
          *(_QWORD *)v88 = off_1E3580B60;
          v96 = v123;
          *(_OWORD *)(v88 + 8) = v122;
          *(_QWORD *)(v88 + 32) = 0;
          *(_QWORD *)(v88 + 40) = 0;
          *(_QWORD *)(v88 + 24) = v96;
          *(_BYTE *)(v88 + 48) = 0;
          *(_QWORD *)(v88 + 56) = 0;
          *(_QWORD *)(v88 + 64) = 0;
          *(_BYTE *)(v88 + 72) = 1;
          if ((unint64_t)BYTE14(v122) << 48 != 0x5000000000000)
          {
            __break(0xC471u);
            JUMPOUT(0x198BF1B70);
          }
          v97 = v65 + 24 * v66;
          *(_QWORD *)(v88 + 80) = a1;
          v100 = *(_QWORD **)(v97 + 8);
          v99 = (uint64_t *)(v97 + 8);
          v98 = v100;
          *(_QWORD *)v88 = off_1E35AEFA0;
          *v99 = v88;
          if (v100)
          {
            *v98 = off_1E3580B60;
            v101 = (_QWORD *)v98[8];
            if (v101)
            {
              v114 = v98[7];
              *v101 = v114;
              *(_QWORD *)(v114 + 8) = v101;
              v98[7] = 0;
              v98[8] = 0;
            }
            v102 = (_QWORD *)v98[5];
            if (v102)
            {
              v115 = v98[4];
              *v102 = v115;
              *(_QWORD *)(v115 + 8) = v102;
              v98[4] = 0;
              v98[5] = 0;
            }
            WTF::fastFree((unint64_t)v98, v89, v90, (uint64_t)v91, v92, v93, v94, v95);
            v88 = *v99;
          }
          JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v88, v12, v90, v91, v92, v93, v94, v95);
        }
        v32 += 6;
      }
      while (v32 != (unsigned int *)v121);
    }
    *(_QWORD *)(v65 + 24 * v66 + 16) = v10;
    if ((v10 & 0xFFFE000000000002) == 0
      && a1
      && v10
      && *((_DWORD *)v12 + 190) >= *(unsigned __int8 *)(a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, a1);
    }
LABEL_63:
    if (!v30)
      return;
    goto LABEL_64;
  }
  v31 = *(unsigned int *)(v122 + 4);
  if ((_DWORD)v31)
  {
    v122 = 0uLL;
    v123 = 0;
    v32 = v30 + 2;
    v33 = v30 + 4;
    v34 = 24 * v31;
    while (1)
    {
      if (*((_BYTE *)v33 + 6))
      {
        v35 = v33 - 2;
      }
      else
      {
        JSC::Structure::startWatchingPropertyForReplacements((JSC::Structure *)(16 * (**((_DWORD **)v33 - 1) & 0xFFFFFFFE)), v12, (JSC::Structure *)v33[2], v25, v26, v27, v28, v29);
        v124 = *(_OWORD *)v33;
        EquivalenceWithoutBarrier = JSC::PropertyCondition::attemptToMakeEquivalenceWithoutBarrier((JSC::PropertyCondition *)&v124, *((JSC::JSObject **)v33 - 1), v37, v38, v39, v40, v41, v42);
        if ((EquivalenceWithoutBarrier & 0xFFFFFFFFFFFFFFLL) != 0)
        {
          v45 = *((_QWORD *)v33 - 1);
        }
        else
        {
          v44 = 0;
          EquivalenceWithoutBarrier = 0;
          v45 = 0;
        }
        *(_QWORD *)&v122 = v45;
        *((_QWORD *)&v122 + 1) = EquivalenceWithoutBarrier;
        v123 = v44;
        v35 = (unsigned int *)&v122;
      }
      JSC::ObjectPropertyCondition::isWatchable((uint64_t)v35, 0, v24, v25, v26, v27, v28, v29);
      if ((v36 & 1) == 0)
        break;
      v33 += 6;
      v34 -= 24;
      if (!v34)
        goto LABEL_38;
    }
    JSC::StructureRareData::giveUpOnSpecialPropertyCache(a1, v9);
    goto LABEL_63;
  }
  JSC::StructureRareData::giveUpOnSpecialPropertyCache(a1, v9);
  do
  {
LABEL_64:
    v103 = __ldaxr(v30);
    v104 = v103 - 1;
  }
  while (__stlxr(v104, v30));
  if (!v104)
  {
    atomic_store(1u, v30);
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  }
}

uint64_t JSC::StructureRareData::giveUpOnSpecialPropertyCache(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::SpecialPropertyCache *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = *(_QWORD *)(a1 + 64);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x78);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_QWORD *)(result + 112) = 0;
    __dmb(0xAu);
    v12 = *(JSC::SpecialPropertyCache **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = result;
    if (v12)
    {
      JSC::SpecialPropertyCache::~SpecialPropertyCache(v12, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      result = *(_QWORD *)(a1 + 64);
    }
  }
  *(_QWORD *)(result + 24 * a2 + 16) = 1;
  return result;
}

void JSC::StructureRareData::clearCachedSpecialProperty(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = v8 + 24 * a2;
    WTF::Bag<JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint,WTF::RawPtrTraits<JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint>,WTF::FastMalloc>::clear((uint64_t **)v9, a2, a3, a4, a5, a6, a7, a8);
    std::unique_ptr<JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint>::reset[abi:sn180100]((_QWORD **)(v9 + 8), 0, v10, v11, v12, v13, v14, v15);
    v17 = *(_QWORD *)(v9 + 16);
    v16 = (_QWORD *)(v9 + 16);
    if (v17 != 1)
      *v16 = 0;
  }
}

uint64_t *WTF::Bag<JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint,WTF::RawPtrTraits<JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint>,WTF::FastMalloc>::clear(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  result = *a1;
  if (result)
  {
    do
    {
      v10 = (uint64_t *)result[6];
      v11 = (uint64_t *)result[1];
      if (v11)
      {
        v12 = *result;
        *v11 = *result;
        *(_QWORD *)(v12 + 8) = v11;
        *result = 0;
        result[1] = 0;
      }
      WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
      result = v10;
    }
    while (v10);
  }
  *a1 = 0;
  return result;
}

void std::unique_ptr<JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint>::reset[abi:sn180100](_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v9 = *a1;
  *a1 = a2;
  if (v9)
  {
    *v9 = off_1E3580B60;
    v10 = (_QWORD *)v9[8];
    if (v10)
    {
      v11 = v9[7];
      *v10 = v11;
      *(_QWORD *)(v11 + 8) = v10;
      v9[7] = 0;
      v9[8] = 0;
    }
    v12 = (_QWORD *)v9[5];
    if (v12)
    {
      v13 = v9[4];
      *v12 = v13;
      *(_QWORD *)(v13 + 8) = v12;
      v9[4] = 0;
      v9[5] = 0;
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::StructureRareData::finalizeUnconditionally(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *(uint64_t **)(a1 + 64);
  if (v2)
  {
    v5 = v2[1];
    if (!v5 || (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v5 + 8), a2) & 1) != 0)
    {
      v12 = *v2;
      if (!v12)
      {
LABEL_10:
        v13 = *(_QWORD *)(a1 + 64);
        v14 = *(_QWORD *)(v13 + 32);
        if (!v14 || (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v14 + 8), a2) & 1) != 0)
        {
          v21 = *(_QWORD *)(v13 + 24);
          if (!v21)
          {
LABEL_17:
            v22 = *(unint64_t **)(a1 + 64);
            v23 = v22[7];
            if (!v23)
              goto LABEL_20;
            for (i = (unint64_t *)(v23 + 8);
                  (JSC::ObjectPropertyCondition::isStillLive(i, a2) & 1) != 0;
                  i = v22 + 3)
            {
LABEL_20:
              v22 = (unint64_t *)v22[6];
              if (!v22)
                goto LABEL_23;
            }
            JSC::StructureRareData::clearCachedSpecialProperty(a1, (void *)2, v25, v26, v27, v28, v29, v30);
LABEL_23:
            v31 = *(_QWORD *)(a1 + 64);
            v32 = *(_QWORD *)(v31 + 80);
            if (!v32 || (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v32 + 8), a2) & 1) != 0)
            {
              v39 = *(_QWORD *)(v31 + 72);
              if (!v39)
              {
LABEL_30:
                v40 = *(_QWORD *)(a1 + 64);
                v41 = *(_QWORD *)(v40 + 104);
                if (!v41 || (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v41 + 8), a2) & 1) != 0)
                {
                  v48 = *(_QWORD *)(v40 + 96);
                  if (!v48)
                    return;
                  while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v48 + 24), a2) & 1) != 0)
                  {
                    v48 = *(_QWORD *)(v48 + 48);
                    if (!v48)
                      return;
                  }
                }
                JSC::StructureRareData::clearCachedSpecialProperty(a1, (void *)4, v42, v43, v44, v45, v46, v47);
                return;
              }
              while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v39 + 24), a2) & 1) != 0)
              {
                v39 = *(_QWORD *)(v39 + 48);
                if (!v39)
                  goto LABEL_30;
              }
            }
            JSC::StructureRareData::clearCachedSpecialProperty(a1, (void *)3, v33, v34, v35, v36, v37, v38);
            goto LABEL_30;
          }
          while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v21 + 24), a2) & 1) != 0)
          {
            v21 = *(_QWORD *)(v21 + 48);
            if (!v21)
              goto LABEL_17;
          }
        }
        JSC::StructureRareData::clearCachedSpecialProperty(a1, (void *)1, v15, v16, v17, v18, v19, v20);
        goto LABEL_17;
      }
      while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v12 + 24), a2) & 1) != 0)
      {
        v12 = *(_QWORD *)(v12 + 48);
        if (!v12)
          goto LABEL_10;
      }
    }
    JSC::StructureRareData::clearCachedSpecialProperty(a1, 0, v6, v7, v8, v9, v10, v11);
    goto LABEL_10;
  }
}

unint64_t JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint::isValid(JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;

  v8 = *((_QWORD *)this + 10);
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) == 0)
      return *(_BYTE *)(v8 - 80) & 1;
    return 1;
  }
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFC000);
  if (!*(_BYTE *)(v9 + 10))
    return JSC::MarkedBlock::Handle::isLive(v9, v8, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD **)(v11 + 104);
  v13 = (_QWORD *)(v11 + 104);
  v12 = v14;
  if (v14 == v13)
    return 1;
  v15 = 0;
  do
  {
    v16 = (_QWORD *)*v12;
    v15 |= JSC::FreeList::contains(v12 + 3, v8);
    v12 = v16;
  }
  while (v16 != v13);
  return v15 == 0;
}

void JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint::handleFire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;

  v8 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  v9 = *(_QWORD **)(a2 + 41952);
  if (v9[347] == v8)
  {
    v10 = 0;
  }
  else if (v9[314] == v8)
  {
    v10 = 1;
  }
  else if (v9[327] == v8)
  {
    v10 = 2;
  }
  else if (v9[311] == v8)
  {
    v10 = 4;
  }
  else
  {
    v10 = 3;
  }
  JSC::StructureRareData::clearCachedSpecialProperty(*(_QWORD *)(a1 + 80), (void *)v10, a3, a4, a5, a6, a7, a8);
}

void JSC::Symbol::destroy(JSC::Symbol *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

unint64_t JSC::SymbolObject::create(JSC::SymbolObject *this, JSC::VM *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v11;
  char *v12;
  unint64_t SlowCase;
  int v14;
  unint64_t v16;
  unint64_t v17;

  v11 = (JSC::Heap *)*((_QWORD *)this + 5099);
  if (!v11)
    v11 = JSC::GCClient::Heap::symbolObjectSpaceSlow((JSC::Heap **)this + 4694);
  v12 = (char *)this + 192;
  SlowCase = *((_QWORD *)v11 + 3);
  if (SlowCase < *((_QWORD *)v11 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v11 + 5);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 4) = SlowCase + HIDWORD(v16);
    *((_QWORD *)v11 + 5) = SlowCase + (int)v16;
LABEL_4:
    *((_QWORD *)v11 + 3) = SlowCase + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, (char *)this + 192, 32, 0, 0);
  v12 = (char *)this + 192;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v14 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = a3;
  if (a3
    && (a3 & 0xFFFE000000000002) == 0
    && *((_DWORD *)this + 190) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    v17 = SlowCase;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12, SlowCase);
    return v17;
  }
  return SlowCase;
}

uint64_t JSC::Symbol::descriptiveString@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(this + 8);
  v4 = *(unsigned int *)(v3 + 4);
  if ((v4 & 0x80000000) != 0 || __OFADD__((_DWORD)v4, 1) || (this = (v4 + 8), __OFADD__(v4 + 1, 7)))
  {
    *a2 = 0;
    goto LABEL_7;
  }
  v5 = ((unint64_t)*(unsigned int *)(v3 + 16) >> 2) & 1;
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(this, v5, (int8x16_t *)"Symbol(", 7u, *(_BYTE **)(v3 + 8), v4 & 0xFFFFFFFEFFFFFFFFLL | (v5 << 32), 41, a2);
  if (!*a2)
LABEL_7:
    __break(0xC471u);
  return this;
}

uint64_t JSC::Symbol::tryGetDescriptiveString@<X0>(JSC::Symbol *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::StringView,char>((uint64_t)&v5, (int8x16_t *)"Symbol(", 8, *(_BYTE **)(*((_QWORD *)this + 1) + 8), *(unsigned int *)(*((_QWORD *)this + 1) + 4) | ((unint64_t)((*(_DWORD *)(*((_QWORD *)this + 1)+ 16) >> 2) & 1) << 32), 41);
  if (v5)
  {
    v4 = 0;
    *(_QWORD *)a2 = v5;
  }
  else
  {
    *(_BYTE *)a2 = 8;
    v4 = 1;
  }
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::StringView,char>(uint64_t result, int8x16_t *a2, uint64_t a3, _BYTE *a4, uint64_t a5, char a6)
{
  unsigned int v8;
  int v9;

  if (a3)
  {
    v8 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v8 = 0;
  }
  if ((a5 & 0x80000000) == 0)
  {
    v9 = a5 + 1;
    if (!__OFADD__((_DWORD)a5, 1) && !__OFADD__(v8, v9))
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(v8 + v9, (a5 & 0xFF00000000) != 0, a2, v8, a4, a5, a6, (int **)result);
  }
  *(_QWORD *)result = 0;
  return result;
}

unint64_t JSC::Symbol::create(JSC::Symbol *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  _QWORD *v10;
  unint64_t SlowCase;
  unint64_t v12;
  int v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *Allocator;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41[3];
  _QWORD *v42;
  uint64_t v43;

  v9 = (char *)this + 40784;
  v10 = (_QWORD *)*((_QWORD *)this + 5098);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::symbolSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v10[3];
  if (SlowCase < v10[4])
    goto LABEL_4;
  SlowCase = v10[5];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
    v10[4] = SlowCase + HIDWORD(v37);
    v10[5] = SlowCase + (int)v37;
LABEL_4:
    v10[3] = SlowCase + 16;
    goto LABEL_5;
  }
  v38 = v9;
  v39 = v10;
  JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
  v40 = v39;
  v9 = v38;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v40, (char *)this + 192, 16, 0, 0);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v12 = *((_QWORD *)v9 + 105);
  v13 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)SlowCase = v12 >> 4;
  *(_DWORD *)(SlowCase + 4) = v13;
  v14 = WTF::fastCompactMalloc((WTF *)0x30);
  v22 = off_1ECF2C428;
  v23 = dword_1ECF2C424;
  *(_DWORD *)v14 = 2;
  *(_DWORD *)(v14 + 4) = v23;
  *(_QWORD *)(v14 + 8) = v22;
  *(_DWORD *)(v14 + 16) = 38;
  *(_QWORD *)(v14 + 24) = &WTF::StringImpl::s_emptyAtomString;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol
                                                                 + 256) | 0x80000000;
  *(_DWORD *)(v14 + 32) = WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol;
  *(_DWORD *)(v14 + 36) = 1;
  v24 = *(_DWORD *)v14;
  *(_DWORD *)v14 += 2;
  *(_QWORD *)(SlowCase + 8) = v14;
  if (v24)
  {
    *(_DWORD *)v14 = v24;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
  }
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v43 = *(_QWORD *)(SlowCase + 8);
  if ((SlowCase & 8) != 0)
    v25 = (SlowCase - 112) | 1;
  else
    v25 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = (_QWORD *)(v25 + 47);
  else
    v26 = (_QWORD *)(*(_QWORD *)v25 + 32);
  Allocator = (_QWORD *)v26[2];
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v26, v25);
  v26[2] = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = 0;
  Allocator[2] = 0;
  v42 = Allocator;
  WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::inlineSet<WTF::SymbolImpl * const&,JSC::Weak<JSC::Symbol>>(v41, (uint64_t *)this + 11302, &v43, (uint64_t *)&v42, v18, v19, v20, v21);
  if (v42)
    v42[1] = 3;
  return SlowCase;
}

unint64_t JSC::Symbol::createWithDescription(JSC::Symbol *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  _QWORD *v11;
  unint64_t SlowCase;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *Allocator;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v10 = (char *)this + 40784;
  v11 = (_QWORD *)*((_QWORD *)this + 5098);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::symbolSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v11[3];
  if (SlowCase < v11[4])
    goto LABEL_4;
  SlowCase = v11[5];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v31);
    v11[5] = SlowCase + (int)v31;
LABEL_4:
    v11[3] = SlowCase + 16;
    goto LABEL_5;
  }
  v32 = v10;
  v33 = v11;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v34 = (uint64_t)v33;
  v10 = v32;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v34, (uint64_t)this + 192, 16, 0, 0, v35, v36, v37);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v13 = *((_QWORD *)v10 + 105);
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  v15 = *(_QWORD *)a2;
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v17 = *(_DWORD **)a2;
  if ((v16 & 3) == 2)
    v17 = *(_DWORD **)(v15 + 24);
  v18 = v16 & 4;
  v19 = WTF::fastCompactMalloc((WTF *)0x30);
  v24 = *(_QWORD *)(v15 + 8);
  v25 = *(_DWORD *)(v15 + 4);
  *v17 += 2;
  *(_DWORD *)v19 = 2;
  *(_DWORD *)(v19 + 4) = v25;
  *(_QWORD *)(v19 + 8) = v24;
  *(_DWORD *)(v19 + 16) = v18 | 0x22;
  *(_QWORD *)(v19 + 24) = v17;
  v26 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
  *(_QWORD *)(v19 + 32) = v26;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v26;
  *(_QWORD *)(SlowCase + 8) = v19;
  if (*((_BYTE *)this + 755))
  {
    __dmb(0xAu);
    v19 = *(_QWORD *)(SlowCase + 8);
  }
  v40 = v19;
  if ((SlowCase & 8) != 0)
    v27 = (SlowCase - 112) | 1;
  else
    v27 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v27 & 1) != 0)
    v28 = (_QWORD *)(v27 + 47);
  else
    v28 = (_QWORD *)(*(_QWORD *)v27 + 32);
  Allocator = (_QWORD *)v28[2];
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v28, v27);
  v28[2] = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = 0;
  Allocator[2] = 0;
  v39 = Allocator;
  WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::inlineSet<WTF::SymbolImpl * const&,JSC::Weak<JSC::Symbol>>(v38, (uint64_t *)this + 11302, &v40, (uint64_t *)&v39, v20, v21, v22, v23);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

unint64_t JSC::Symbol::create(JSC::Symbol *this, JSC::VM *a2, WTF::SymbolImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  int v18;
  uint64_t v19;
  unint64_t SlowCase;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *Allocator;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32[3];
  _QWORD *v33;
  JSC::VM *v34;

  v8 = a2;
  v10 = (uint64_t *)((char *)this + 90416);
  v11 = *((_QWORD *)this + 11302);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(JSC::VM **)(v11 + 16 * v16);
    if (v17 == a2)
    {
LABEL_6:
      v19 = *(_QWORD *)(v11 + 16 * v16 + 8);
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v19;
          if (*(_QWORD *)v19)
            return SlowCase;
        }
      }
    }
    else
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(JSC::VM **)(v11 + 16 * v16);
        ++v18;
        if (v17 == a2)
          goto LABEL_6;
      }
    }
  }
  v21 = (char *)this + 40784;
  v22 = (_QWORD *)*((_QWORD *)this + 5098);
  if (!v22)
    v22 = (_QWORD *)JSC::GCClient::Heap::symbolSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v22[3];
  if (SlowCase >= v22[4])
  {
    SlowCase = v22[5];
    if ((SlowCase & 1) != 0)
    {
      v30 = v22;
      JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v31 = v30;
      v21 = (char *)this + 40784;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v31, (char *)this + 192, 16, 0, 0);
      goto LABEL_13;
    }
    v29 = *(_QWORD *)(SlowCase + 8) ^ v22[6];
    v22[4] = SlowCase + HIDWORD(v29);
    v22[5] = SlowCase + (int)v29;
  }
  v22[3] = SlowCase + 16;
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  v23 = *((_QWORD *)v21 + 105);
  v24 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)SlowCase = v23 >> 4;
  *(_DWORD *)(SlowCase + 4) = v24;
  *(_DWORD *)v8 += 2;
  *(_QWORD *)(SlowCase + 8) = v8;
  if (*((_BYTE *)this + 755))
  {
    __dmb(0xAu);
    v8 = *(JSC::VM **)(SlowCase + 8);
  }
  v34 = v8;
  if ((SlowCase & 8) != 0)
    v25 = (SlowCase - 112) | 1;
  else
    v25 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = (_QWORD *)(v25 + 47);
  else
    v26 = (_QWORD *)(*(_QWORD *)v25 + 32);
  Allocator = (_QWORD *)v26[2];
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v26, v25);
  v26[2] = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = 0;
  Allocator[2] = 0;
  v33 = Allocator;
  WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::inlineSet<WTF::SymbolImpl * const&,JSC::Weak<JSC::Symbol>>(v32, v10, (uint64_t *)&v34, (uint64_t *)&v33, a5, a6, a7, a8);
  if (v33)
    v33[1] = 3;
  return SlowCase;
}

unint64_t JSC::callSymbol(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::Symbol *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;

  v9 = (JSC::Symbol *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::Symbol::create(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)a2 + 6);
  v25 = v10;
  if (v10 == 10)
    return JSC::Symbol::create(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, this, a3, a4, a5, a6, a7, a8, (int **)&v24);
  }
  else
  {
    v11 = *(WTF::StringImpl **)(v10 + 8);
    if ((v11 & 1) != 0)
      v11 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v10, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v11)
      *(_DWORD *)v11 += 2;
    v24 = v11;
  }
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v13 = 0;
  }
  else
  {
    v13 = JSC::Symbol::createWithDescription(v9, (JSC::VM *)&v24, a3, a4, a5, a6, a7, a8);
  }
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v13;
}

JSC::Exception *JSC::constructSymbol(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  v7.i64[0] = 0x1400000002;
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "is not a constructor";
  *(_DWORD *)(v6 + 16) = 4;
  v30 = v6;
  v19 = JSC::createError((unint64_t)this, v5, &v30, (uint64_t)JSC::defaultSourceAppender, v8, v9, v10, v11, v7);
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  if ((v19 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)))
  {
    v19 = JSC::Exception::create((uint64_t)v4, (JSC::VM *)v19, 0, v14, v15, v16, v17, v18);
  }
  return JSC::VM::throwException(v4, this, (JSC::Exception *)v19, v20, v14, v15, v16, v17, v18);
}

void JSC::SymbolConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::SymbolImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::SymbolImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::SymbolImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::SymbolImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::SymbolImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::SymbolImpl *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::SymbolImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  WTF::AtomStringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::SymbolImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  WTF::AtomStringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  WTF::SymbolImpl *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __n128 v184;
  WTF::AtomStringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  WTF::SymbolImpl *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __n128 v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  WTF::SymbolImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __n128 v222;
  WTF::AtomStringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  WTF::SymbolImpl *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __n128 v241;
  WTF::AtomStringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF::StringImpl *v249;
  WTF::SymbolImpl *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __n128 v260;
  WTF::AtomStringImpl *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  WTF::StringImpl *v372;

  v11 = (_QWORD *)((char *)a2 + 41952);
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)(*((_QWORD *)a2 + 5244) + 792), 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*v11 + 2160), a3, 14, v12, v13, v14, v15);
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasInstance", 0xBuLL, v16, v17, v18, v19, v20, &v372);
  v21 = v372;
  v28 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2688), v22, v23, v24, v25, v26, v27);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v21, v28, 14, v29, v30, v31, v32);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"isConcatSpreadable", 0x12uLL, v35, v36, v37, v38, v39, &v372);
  v40 = v372;
  v47 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2696), v41, v42, v43, v44, v45, v46);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v40, v47, 14, v48, v49, v50, v51);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"asyncIterator", 0xDuLL, v54, v55, v56, v57, v58, &v372);
  v59 = v372;
  v66 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2704), v60, v61, v62, v63, v64, v65);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v59, v66, 14, v67, v68, v69, v70);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"iterator", 8uLL, v73, v74, v75, v76, v77, &v372);
  v78 = v372;
  v85 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2712), v79, v80, v81, v82, v83, v84);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v78, v85, 14, v86, v87, v88, v89);
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"match", 5uLL, v92, v93, v94, v95, v96, &v372);
  v97 = v372;
  v104 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2720), v98, v99, v100, v101, v102, v103);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v97, v104, 14, v105, v106, v107, v108);
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v109, v110, v111, v112, v113, v114, v115);
      WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"matchAll", 8uLL, v111, v112, v113, v114, v115, &v372);
  v116 = v372;
  v123 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2728), v117, v118, v119, v120, v121, v122);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v116, v123, 14, v124, v125, v126, v127);
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v128, v129, v130, v131, v132, v133, v134);
      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"replace", 7uLL, v130, v131, v132, v133, v134, &v372);
  v135 = v372;
  v142 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2736), v136, v137, v138, v139, v140, v141);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v135, v142, 14, v143, v144, v145, v146);
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v147, v148, v149, v150, v151, v152, v153);
      WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"search", 6uLL, v149, v150, v151, v152, v153, &v372);
  v154 = v372;
  v161 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2744), v155, v156, v157, v158, v159, v160);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v154, v161, 14, v162, v163, v164, v165);
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
    {
      WTF::StringImpl::~StringImpl(v154, v166, v167, v168, v169, v170, v171, v172);
      WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
    }
    else
    {
      *(_DWORD *)v154 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"species", 7uLL, v168, v169, v170, v171, v172, &v372);
  v173 = v372;
  v180 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2752), v174, v175, v176, v177, v178, v179);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v173, v180, 14, v181, v182, v183, v184);
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v185, v186, v187, v188, v189, v190, v191);
      WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"split", 5uLL, v187, v188, v189, v190, v191, &v372);
  v192 = v372;
  v199 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2760), v193, v194, v195, v196, v197, v198);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v192, v199, 14, v200, v201, v202, v203);
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
    {
      WTF::StringImpl::~StringImpl(v192, v204, v205, v206, v207, v208, v209, v210);
      WTF::fastFree(v340, v341, v342, v343, v344, v345, v346, v347);
    }
    else
    {
      *(_DWORD *)v192 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toPrimitive", 0xBuLL, v206, v207, v208, v209, v210, &v372);
  v211 = v372;
  v218 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2768), v212, v213, v214, v215, v216, v217);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v211, v218, 14, v219, v220, v221, v222);
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
    {
      WTF::StringImpl::~StringImpl(v211, v223, v224, v225, v226, v227, v228, v229);
      WTF::fastFree(v348, v349, v350, v351, v352, v353, v354, v355);
    }
    else
    {
      *(_DWORD *)v211 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toStringTag", 0xBuLL, v225, v226, v227, v228, v229, &v372);
  v230 = v372;
  v237 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2776), v231, v232, v233, v234, v235, v236);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v230, v237, 14, v238, v239, v240, v241);
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
    {
      WTF::StringImpl::~StringImpl(v230, v242, v243, v244, v245, v246, v247, v248);
      WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
    }
    else
    {
      *(_DWORD *)v230 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"unscopables", 0xBuLL, v244, v245, v246, v247, v248, &v372);
  v249 = v372;
  v256 = JSC::Symbol::create(a2, *(JSC::VM **)(*v11 + 2784), v250, v251, v252, v253, v254, v255);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v249, v256, 14, v257, v258, v259, v260);
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
    {
      WTF::StringImpl::~StringImpl(v249, v261, v262, v263, v264, v265, v266, v267);
      WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
    }
    else
    {
      *(_DWORD *)v249 -= 2;
    }
  }
}

uint64_t JSC::SymbolObject::SymbolObject(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t JSC::SymbolObject::finishCreation(unint64_t this, JSC::VM *a2, unint64_t a3)
{
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 16) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    return JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, this);
  return this;
}

void JSC::SymbolPrototype::finishCreation(JSC::SymbolPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "[Symbol.toPrimitive]";
  *(_DWORD *)(v6 + 16) = 4;
  v54 = (WTF::StringImpl *)v6;
  v14 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v54, (uint64_t)JSC::symbolProtoFuncValueOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v16 = v54;
  v54 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2768), v14, 6, v11, v12, v13, v15);
  v17 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x600000002;
  *(_QWORD *)(v18 + 8) = "Symbol";
  *(_DWORD *)(v18 + 16) = 4;
  v54 = (WTF::StringImpl *)v18;
  v25 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v54, v19, v20, v21, v22, v23, v24);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v17, v25, 6, v26, v27, v28, v29);
  v37 = v54;
  v54 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
}

uint64_t JSC::symbolProtoFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int v4;
  JSC::VM *v6;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object", 77);
  v4 = *(unsigned __int8 *)(v3 + 5);
  if (v4 != 4)
  {
    if (v4 < 0x17)
      return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object", 77);
    if (&JSC::SymbolObject::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
      return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object", 77);
    v3 = *(_QWORD *)(v3 + 16);
    if (!v3)
      return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object", 77);
  }
  return v3;
}

uint64_t JSC::symbolProtoGetterDescription(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t Symbol;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;

  v3 = *(JSC::VM **)(a1 + 56);
  v31 = v3;
  Symbol = JSC::tryExtractSymbol(a2);
  if (!Symbol)
    return JSC::throwTypeError(a1, &v31, (uint64_t)"Symbol.prototype.description requires that |this| be a symbol or a symbol object", 81);
  v11 = *(WTF::StringImpl **)(Symbol + 8);
  if ((*((_BYTE *)v11 + 36) & 1) != 0)
    return 10;
  *(_DWORD *)v11 += 2;
  v30 = v11;
  v19 = JSC::jsString((uint64_t)v3, (JSC::VM *)&v30, v5, v6, v7, v8, v9, v10);
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v19;
}

uint64_t JSC::tryExtractSymbol(uint64_t result)
{
  unsigned int v1;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned __int8 *)(result + 5);
  if (v1 == 4)
    return result;
  if (v1 >= 0x17
    && &JSC::SymbolObject::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C)))
  {
    return *(_QWORD *)(result + 16);
  }
  else
  {
    return 0;
  }
}

void JSC::StructureFireDetail::~StructureFireDetail(JSC::StructureFireDetail *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint::~CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint(JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3580B60;
  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (v1)
  {
    v2 = *((_QWORD *)this + 7);
    *v1 = v2;
    *(_QWORD *)(v2 + 8) = v1;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    *v3 = v4;
    *(_QWORD *)(v4 + 8) = v3;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
}

void JSC::CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint::~CachedSpecialPropertyAdaptiveInferredPropertyValueWatchpoint(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E3580B60;
  v8 = *(_QWORD **)(this + 64);
  if (v8)
  {
    v9 = *(_QWORD *)(this + 56);
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 64) = 0;
  }
  v10 = *(_QWORD **)(this + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(this + 32);
    *v10 = v11;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
}

JSC::VM *JSC::Structure::ensureRareData(JSC::Structure *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;

  v10 = (JSC::VM *)*((_QWORD *)this + 8);
  if (!v10 || *((_BYTE *)v10 + 5) == 1)
  {
    v10 = (JSC::VM *)JSC::StructureRareData::create(a2, v10, a3, a4, a5, a6, a7, a8);
    __dmb(0xAu);
    *((_QWORD *)this + 8) = v10;
    if (v10 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      return (JSC::VM *)*((_QWORD *)this + 8);
    }
  }
  return v10;
}

uint64_t JSC::WeakGCMap<JSC::StructureTransitionTable::Hash::Key,JSC::Structure,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::~WeakGCMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != 2 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

void JSC::Structure::checkOffsetConsistency<JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1}>(JSC::PropertyTable *,JSC::Structure::checkOffsetConsistency(void)::{lambda(void)#1} const&)const::{lambda(char const*)#1}::operator()(uint64_t a1, const char *a2)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  const char *v14;

  v14 = a2;
  v3 = *(_QWORD *)a1;
  WTF::dataLog<char [32],char const*,char [3]>(&v14);
  v13 = v3;
  WTF::dataLog<char [8],WTF::RawPointer,char [2]>((const void **)&v13);
  v4 = *(unsigned __int16 *)(v3 + 22);
  if (v4 == 65534)
  {
    v4 = -1;
  }
  else if (v4 == 0xFFFF)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 88);
  }
  LODWORD(v13) = v4;
  WTF::dataLog<char [20],int,char [2]>(&v13);
  v5 = *(unsigned __int16 *)(v3 + 24);
  if (v5 == 65534)
  {
    v5 = -1;
  }
  else if (v5 == 0xFFFF)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
  }
  LODWORD(v13) = v5;
  WTF::dataLog<char [13],int,char [2]>(&v13);
  WTF::dataLog<char [20],unsigned char,char [2]>((unsigned __int8 *)(v3 + 14));
  v13 = **(_QWORD **)(a1 + 8);
  WTF::dataLog<char [17],WTF::RawPointer,char [2]>((const void **)&v13);
  v6 = *(unsigned __int16 *)(v3 + 24);
  if (v6 == 65534)
  {
    v6 = -1;
  }
  else
  {
    if (v6 == 0xFFFF)
      v6 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
    v7 = *(unsigned __int8 *)(v3 + 14);
    if (v6 >= (int)v7)
    {
      if (v6 >= 64)
        v8 = (v6 - 63);
      else
        v8 = 0;
      v9 = v8 + v7;
      goto LABEL_18;
    }
  }
  v9 = v6 + 1;
LABEL_18:
  v13 = v9;
  WTF::dataLog<char [29],unsigned long,char [2]>(&v13);
  WTF::dataLog<char [13],unsigned int,char [2]>(*(_DWORD **)(a1 + 16));
  WTF::dataLog<char [38],unsigned int,char [2]>(*(_DWORD **)(a1 + 24));
  v10 = *(unsigned __int16 *)(v3 + 24);
  if (v10 == 65534)
    goto LABEL_23;
  if (v10 == 0xFFFF)
    v10 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
  v11 = __OFSUB__(v10, 63);
  v12 = v10 - 63;
  if ((v12 < 0) ^ v11 | (v12 == 0))
LABEL_23:
    v12 = 0;
  v13 = v12;
  WTF::dataLog<char [38],unsigned long,char [2]>(&v13);
  __break(0xC471u);
  JUMPOUT(0x198BF3758);
}

uint64_t WTF::dataLog<char [32],char const*,char [3]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Detected offset inconsistency: ");
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", "!\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [8],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "this = ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [20],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "transitionOffset = ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "maxOffset = ");
  WTF::PrintStream::printf(v4, "%d", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [20],unsigned char,char [2]>(unsigned __int8 *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "m_inlineCapacity = ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [17],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "propertyTable = ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [29],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "numberOfSlotsForMaxOffset = ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "totalSize = ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [38],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "inlineOverflowAccordingToTotalSize = ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [38],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "numberOfOutOfLineSlotsForMaxOffset = ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::inlineSet<JSC::PrototypeKey const&,JSC::Weak<JSC::Structure>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t result;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = *(_QWORD *)(a3 + 24);
  v18 = (v16 ^ *(_QWORD *)a3 ^ v17) + ~((v16 ^ *(_QWORD *)a3 ^ v17) << 32);
  v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
  v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
  v21 = *(_DWORD *)(a3 + 16);
  v22 = v21 + (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
  v23 = 1;
  result = 40;
  while (1)
  {
    v25 = v22 & v14;
    v26 = v12 + 40 * v25;
    v27 = *(_QWORD *)v26;
    v28 = *(_QWORD *)(v26 + 8);
    v29 = *(_OWORD *)v26 == 0;
    v30 = *(unsigned int *)(v26 + 16);
    v31 = *(_OWORD *)v26 == 0 && (_DWORD)v30 == 0;
    if (v31 && !*(_QWORD *)(v26 + 24))
    {
      if (v15)
      {
        *(_QWORD *)(v15 + 32) = 0;
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        --*(_DWORD *)(*a2 - 16);
        v26 = v15;
      }
      v34 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v26 = *(_OWORD *)a3;
      *(_OWORD *)(v26 + 16) = v34;
      v35 = *a4;
      *a4 = 0;
      v36 = *(_QWORD *)(v26 + 32);
      *(_QWORD *)(v26 + 32) = v35;
      if (v36)
        *(_QWORD *)(v36 + 8) = 3;
      v37 = *a2;
      if (*a2)
        v38 = *(_DWORD *)(v37 - 12) + 1;
      else
        v38 = 1;
      *(_DWORD *)(v37 - 12) = v38;
      v39 = *a2;
      if (*a2)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      v41 = (*(_DWORD *)(v39 - 16) + v40);
      v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41)
          goto LABEL_35;
      }
      else
      {
        if (3 * v42 > 4 * v41)
        {
LABEL_35:
          *(_QWORD *)a1 = v26;
          *(_QWORD *)(a1 + 8) = v39 + 40 * v42;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v42)
        {
          v43 = 8;
LABEL_43:
          result = WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::rehash(a2, v43, v26, v30, v27, v28, 0, a8);
          v26 = result;
          v39 = *a2;
          if (*a2)
            LODWORD(v42) = *(_DWORD *)(v39 - 4);
          else
            LODWORD(v42) = 0;
          goto LABEL_35;
        }
      }
      v43 = ((_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42)));
      goto LABEL_43;
    }
    v32 = v27 == *(_QWORD *)a3 && v28 == v16;
    v33 = v32 && (_DWORD)v30 == v21;
    if (v33 && *(_QWORD *)(v26 + 24) == v17)
      break;
    if ((_DWORD)v30 != 1)
      v29 = 0;
    if (v29 && !*(_QWORD *)(v26 + 24))
      v15 = v12 + 40 * v25;
    v22 = v23 + v25;
    ++v23;
  }
  if ((v13 & 1) != 0)
    v44 = 0;
  else
    v44 = *(_DWORD *)(v12 - 4);
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v12 + 40 * v44;
  *(_BYTE *)(a1 + 16) = 0;
  v45 = v12 + 40 * v25;
  v46 = *a4;
  *a4 = 0;
  v47 = *(_QWORD *)(v45 + 32);
  *(_QWORD *)(v45 + 32) = v46;
  if (v47)
    *(_QWORD *)(v47 + 8) = 3;
  return result;
}

void JSC::SpecialPropertyCache::~SpecialPropertyCache(JSC::SpecialPropertyCache *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;

  v9 = (_QWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    *v9 = off_1E3580B60;
    v10 = (_QWORD *)v9[8];
    if (v10)
    {
      v11 = v9[7];
      *v10 = v11;
      *(_QWORD *)(v11 + 8) = v10;
      v9[7] = 0;
      v9[8] = 0;
    }
    v12 = (_QWORD *)v9[5];
    if (v12)
    {
      v13 = v9[4];
      *v12 = v13;
      *(_QWORD *)(v13 + 8) = v12;
      v9[4] = 0;
      v9[5] = 0;
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = (uint64_t *)*((_QWORD *)this + 12);
  if (v14)
  {
    do
    {
      v39 = (uint64_t *)v14[6];
      v40 = (uint64_t *)v14[1];
      if (v40)
      {
        v41 = *v14;
        *v40 = *v14;
        *(_QWORD *)(v41 + 8) = v40;
        *v14 = 0;
        v14[1] = 0;
      }
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
      v14 = v39;
    }
    while (v39);
  }
  *((_QWORD *)this + 12) = 0;
  v15 = (_QWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    *v15 = off_1E3580B60;
    v16 = (_QWORD *)v15[8];
    if (v16)
    {
      v17 = v15[7];
      *v16 = v17;
      *(_QWORD *)(v17 + 8) = v16;
      v15[7] = 0;
      v15[8] = 0;
    }
    v18 = (_QWORD *)v15[5];
    if (v18)
    {
      v19 = v15[4];
      *v18 = v19;
      *(_QWORD *)(v19 + 8) = v18;
      v15[4] = 0;
      v15[5] = 0;
    }
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = (uint64_t *)*((_QWORD *)this + 9);
  if (v20)
  {
    do
    {
      v42 = (uint64_t *)v20[6];
      v43 = (uint64_t *)v20[1];
      if (v43)
      {
        v44 = *v20;
        *v43 = *v20;
        *(_QWORD *)(v44 + 8) = v43;
        *v20 = 0;
        v20[1] = 0;
      }
      WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
      v20 = v42;
    }
    while (v42);
  }
  *((_QWORD *)this + 9) = 0;
  v21 = (_QWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
  {
    *v21 = off_1E3580B60;
    v22 = (_QWORD *)v21[8];
    if (v22)
    {
      v23 = v21[7];
      *v22 = v23;
      *(_QWORD *)(v23 + 8) = v22;
      v21[7] = 0;
      v21[8] = 0;
    }
    v24 = (_QWORD *)v21[5];
    if (v24)
    {
      v25 = v21[4];
      *v24 = v25;
      *(_QWORD *)(v25 + 8) = v24;
      v21[4] = 0;
      v21[5] = 0;
    }
    WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = (uint64_t *)*((_QWORD *)this + 6);
  if (v26)
  {
    do
    {
      v45 = (uint64_t *)v26[6];
      v46 = (uint64_t *)v26[1];
      if (v46)
      {
        v47 = *v26;
        *v46 = *v26;
        *(_QWORD *)(v47 + 8) = v46;
        *v26 = 0;
        v26[1] = 0;
      }
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
      v26 = v45;
    }
    while (v45);
  }
  *((_QWORD *)this + 6) = 0;
  v27 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v27)
  {
    *v27 = off_1E3580B60;
    v28 = (_QWORD *)v27[8];
    if (v28)
    {
      v29 = v27[7];
      *v28 = v29;
      *(_QWORD *)(v29 + 8) = v28;
      v27[7] = 0;
      v27[8] = 0;
    }
    v30 = (_QWORD *)v27[5];
    if (v30)
    {
      v31 = v27[4];
      *v30 = v31;
      *(_QWORD *)(v31 + 8) = v30;
      v27[4] = 0;
      v27[5] = 0;
    }
    WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = (uint64_t *)*((_QWORD *)this + 3);
  if (v32)
  {
    do
    {
      v48 = (uint64_t *)v32[6];
      v49 = (uint64_t *)v32[1];
      if (v49)
      {
        v50 = *v32;
        *v49 = *v32;
        *(_QWORD *)(v50 + 8) = v49;
        *v32 = 0;
        v32[1] = 0;
      }
      WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
      v32 = v48;
    }
    while (v48);
  }
  *((_QWORD *)this + 3) = 0;
  v33 = (_QWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v33)
  {
    *v33 = off_1E3580B60;
    v34 = (_QWORD *)v33[8];
    if (v34)
    {
      v35 = v33[7];
      *v34 = v35;
      *(_QWORD *)(v35 + 8) = v34;
      v33[7] = 0;
      v33[8] = 0;
    }
    v36 = (_QWORD *)v33[5];
    if (v36)
    {
      v37 = v33[4];
      *v36 = v37;
      *(_QWORD *)(v37 + 8) = v36;
      v33[4] = 0;
      v33[5] = 0;
    }
    WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *(uint64_t **)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v51 = (uint64_t *)v38[6];
      v52 = (uint64_t *)v38[1];
      if (v52)
      {
        v53 = *v38;
        *v52 = *v38;
        *(_QWORD *)(v53 + 8) = v52;
        *v38 = 0;
        v38[1] = 0;
      }
      WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
      v38 = v51;
    }
    while (v51);
  }
  *(_QWORD *)this = 0;
}

unint64_t JSC::symbolConstructorFor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _DWORD *v10;
  unint64_t v11;
  int **v12;
  WTF::StringImpl *v13;
  WTF::SymbolImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;

  v10 = (_DWORD *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v37 = (JSC::VM *)10;
LABEL_13:
    v11 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v37, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_4;
  }
  v11 = *((_QWORD *)a2 + 6);
  v37 = (JSC::VM *)v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    goto LABEL_13;
LABEL_4:
  if (v10[20] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  v12 = (int **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v10[20] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    return 0;
  WTF::SymbolRegistry::symbolForKey((WTF::SymbolRegistry *)(v10 + 10480), (WTF::StringImpl **)v12, a3, a4, a5, a6, a7, a8, &v37);
  v13 = v37;
  v27 = JSC::Symbol::create((JSC::Symbol *)v10, v37, v14, v15, v16, v17, v18, v19);
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl(v13, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
  }
  else
  {
    *(_DWORD *)v13 -= 2;
  }
  return v27;
}

uint64_t JSC::symbolConstructorKeyFor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v33, (uint64_t)"Symbol.keyFor requires that the first argument be a symbol", 59);
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 4)
    return JSC::throwTypeError((unint64_t)this, &v33, (uint64_t)"Symbol.keyFor requires that the first argument be a symbol", 59);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  if ((*(_BYTE *)(v11 + 36) & 2) != 0 && *(_QWORD *)(v11 + 40))
  {
    *(_DWORD *)v11 = v12 + 4;
    v32 = (WTF::StringImpl *)v11;
    v13 = JSC::jsString((uint64_t)v9, (JSC::VM *)&v32, (uint64_t)a3, a4, a5, a6, a7, a8);
    v14 = v32;
    v32 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_10;
LABEL_13:
    *(_DWORD *)v11 = v12;
    return v13;
  }
  v13 = 10;
  if (v12)
    goto LABEL_13;
LABEL_10:
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
  return v13;
}

uint64_t JSC::symbolProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"Symbol.prototype.toString requires that |this| be a symbol or a symbol object", 78);
  v5 = *(unsigned __int8 *)(v4 + 5);
  if (v5 != 4)
  {
    if (v5 < 0x17)
      return JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"Symbol.prototype.toString requires that |this| be a symbol or a symbol object", 78);
    if (&JSC::SymbolObject::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
      return JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"Symbol.prototype.toString requires that |this| be a symbol or a symbol object", 78);
    v4 = *(_QWORD *)(v4 + 16);
    if (!v4)
      return JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"Symbol.prototype.toString requires that |this| be a symbol or a symbol object", 78);
  }
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(unsigned int *)(v6 + 4);
  if ((v7 & 0x80000000) != 0 || __OFADD__((_DWORD)v7, 1) || __OFADD__(v7 + 1, 7))
  {
    v33 = 0;
    goto LABEL_13;
  }
  v8 = ((unint64_t)*(unsigned int *)(v6 + 16) >> 2) & 1;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((v7 + 8), v8, (int8x16_t *)"Symbol(", 7u, *(_BYTE **)(v6 + 8), v7 & 0xFFFFFFFEFFFFFFFFLL | (v8 << 32), 41, (int **)&v33);
  if (!v33)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198BF4838);
  }
  v22 = JSC::jsNontrivialString((uint64_t)v3, (JSC::VM *)&v33, v9, v10, v11, v12, v13, v14);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

void JSC::WeakGCMap<JSC::StructureTransitionTable::Hash::Key,JSC::Structure,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::~WeakGCMap(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != 2 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::WeakGCMap<JSC::StructureTransitionTable::Hash::Key,JSC::Structure,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::pruneStaleEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;

  v10 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  v9 = v10;
  if (!v10)
    return;
  v11 = *(_DWORD *)(v9 - 4);
  if (!v11)
    return;
  v12 = 0;
  v13 = v11 - 1;
  do
  {
    v14 = v13;
    v15 = (_QWORD *)(v9 + 16 * v13);
    if ((*v15 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      goto LABEL_5;
    v16 = v9 + 16 * v13;
    v19 = *(_QWORD **)(v16 + 8);
    v17 = (_QWORD *)(v16 + 8);
    v18 = v19;
    if (!v19)
    {
      *v15 = 2;
      goto LABEL_11;
    }
    if (!*v18 || (v18[1] & 3) != 0)
    {
      *v15 = 2;
      v18[1] = 3;
      *v17 = 0;
LABEL_11:
      ++v12;
    }
LABEL_5:
    --v13;
  }
  while (v14);
  v20 = *v8;
  if (v12)
  {
    *(_DWORD *)(v20 - 16) += v12;
    v21 = *v8;
    if (*v8)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    *(_DWORD *)(v21 - 12) = v22 - v12;
    v20 = *v8;
  }
  if (v20)
  {
    v23 = *(_DWORD *)(v20 - 4);
    v24 = *(unsigned int *)(v20 - 12);
    if (v23 >= 9 && 6 * (int)v24 < v23)
    {
      v26 = (v24 - 1) | ((v24 - 1) >> 1) | ((((_DWORD)v24 - 1) | ((v24 - 1) >> 1)) >> 2);
      v27 = v26 | (v26 >> 4) | ((v26 | (v26 >> 4)) >> 8);
      v28 = (v27 | HIWORD(v27)) + 1;
      if (v28 > 0x400)
      {
        if (v28 <= 2 * v24)
        {
LABEL_25:
          LODWORD(v28) = 2 * v28;
          if (v28 <= 0x400)
            goto LABEL_26;
        }
        v29 = (double)v24;
        v30 = (double)v28;
        v31 = 0.416666667;
      }
      else
      {
        if (3 * v28 <= 4 * v24)
          goto LABEL_25;
LABEL_26:
        v29 = (double)v24;
        v30 = (double)v28;
        v31 = 0.604166667;
      }
      if (v30 * v31 <= v29)
        LODWORD(v28) = 2 * v28;
      if (v28 <= 8)
        v32 = 8;
      else
        v32 = v28;
      WTF::HashTable<JSC::StructureTransitionTable::Hash::Key,WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>>,JSC::StructureTransitionTable::Hash,WTF::HashMap<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::rehash(v8, v32, 0, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::HashTable<JSC::StructureTransitionTable::Hash::Key,WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>>>,JSC::StructureTransitionTable::Hash,WTF::HashMap<JSC::StructureTransitionTable::Hash::Key,JSC::Weak<JSC::Structure>,JSC::StructureTransitionTable::Hash,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::StructureTransitionTable::Hash::Key>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (uint64_t *)(v10 + 16 * i);
      v23 = *v22;
      if (*v22)
      {
        if (v23 != 2)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          LODWORD(v14) = v25 & ((v28 >> 31) ^ v28);
          v29 = 1;
          do
          {
            v30 = v14;
            v15 = *(_QWORD *)(v24 + 16 * v14);
            v14 = (void *)(((_DWORD)v14 + v29++) & v25);
          }
          while (v15);
          v31 = (_QWORD *)(v24 + 16 * v30);
          v32 = v31 + 1;
          v33 = v31[1];
          if (v33)
          {
            *(_QWORD *)(v33 + 8) = 3;
            *v32 = 0;
          }
          *v31 = v23;
          v34 = v10 + 16 * i;
          v36 = *(_QWORD *)(v34 + 8);
          v35 = v34 + 8;
          *(_QWORD *)v35 = 0;
          *v32 = v36;
          if (*(_QWORD *)v35)
          {
            *(_QWORD *)(*(_QWORD *)v35 + 8) = 3;
            *(_QWORD *)v35 = 0;
          }
        }
      }
      else
      {
        v39 = v22[1];
        v37 = v22 + 1;
        v38 = v39;
        if (v39)
        {
          *(_QWORD *)(v38 + 8) = 3;
          *v37 = 0;
        }
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 > a3 || (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= a2)
      v9 = a2;
    else
      v9 = v8;
    if (v9 > v6)
    {
      v10 = *(unsigned int *)(a1 + 12);
      if (v9 < 9)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
      }
      else
      {
        if (v9 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198BF4D1CLL);
        }
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
        *(_DWORD *)(a1 + 8) = v9;
        *(_QWORD *)a1 = v11;
      }
      memcpy(v11, v5, 8 * v10);
      if ((const void *)(a1 + 16) != v5 && v5)
      {
        if (*(const void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
  else
  {
    WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v3 - (_QWORD)v5;
  }
  return v3;
}

void JSC::Structure::checkOffsetConsistency<JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0>(JSC::PropertyTable *,JSC::Structure::materializePropertyTable(JSC::VM &,BOOL)::$_0 const&)const::{lambda(char const*)#1}::operator()(uint64_t *a1, const char *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  const void *v18;
  const char *v19;
  const void *v20;
  const void *v21[4];
  char v22;

  v19 = a2;
  v3 = *a1;
  WTF::dataLog<char [32],char const*,char [3]>(&v19);
  v21[0] = (const void *)v3;
  WTF::dataLog<char [8],WTF::RawPointer,char [2]>(v21);
  v4 = *(unsigned __int16 *)(v3 + 22);
  if (v4 == 65534)
  {
    v4 = -1;
  }
  else if (v4 == 0xFFFF)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 88);
  }
  LODWORD(v21[0]) = v4;
  WTF::dataLog<char [20],int,char [2]>(v21);
  v5 = *(unsigned __int16 *)(v3 + 24);
  if (v5 == 65534)
  {
    v5 = -1;
  }
  else if (v5 == 0xFFFF)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
  }
  LODWORD(v21[0]) = v5;
  WTF::dataLog<char [13],int,char [2]>(v21);
  WTF::dataLog<char [20],unsigned char,char [2]>((unsigned __int8 *)(v3 + 14));
  v21[0] = *(const void **)a1[1];
  WTF::dataLog<char [17],WTF::RawPointer,char [2]>(v21);
  v6 = *(unsigned __int16 *)(v3 + 24);
  if (v6 == 65534)
  {
    v6 = -1;
  }
  else
  {
    if (v6 == 0xFFFF)
      v6 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
    v7 = *(unsigned __int8 *)(v3 + 14);
    if (v6 >= (int)v7)
    {
      if (v6 >= 64)
        v8 = (v6 - 63);
      else
        v8 = 0;
      v9 = (const void *)(v8 + v7);
      goto LABEL_18;
    }
  }
  v9 = (const void *)(v6 + 1);
LABEL_18:
  v21[0] = v9;
  WTF::dataLog<char [29],unsigned long,char [2]>(v21);
  WTF::dataLog<char [13],unsigned int,char [2]>((_DWORD *)a1[2]);
  WTF::dataLog<char [38],unsigned int,char [2]>((_DWORD *)a1[3]);
  v10 = *(unsigned __int16 *)(v3 + 24);
  if (v10 == 65534)
    goto LABEL_23;
  if (v10 == 0xFFFF)
    v10 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
  v11 = __OFSUB__(v10, 63);
  v12 = v10 - 63;
  if ((v12 < 0) ^ v11 | (v12 == 0))
LABEL_23:
    v12 = 0;
  v21[0] = (const void *)v12;
  WTF::dataLog<char [38],unsigned long,char [2]>(v21);
  v13 = a1[4];
  WTF::dataLog<char [16]>("Detected in materializePropertyTable.\n");
  v21[0] = **(const void ***)v13;
  WTF::dataLog<char [19],WTF::RawPointer,char [2]>(v21);
  WTF::dataLog<char [16]>("structures = ");
  v21[0] = ", ";
  v21[1] = (const void *)3;
  v21[2] = "";
  v21[3] = (const void *)1;
  v22 = 0;
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(unsigned int *)(v14 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(const void ***)v14;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      v20 = v18;
      WTF::dataLog<WTF::CommaPrinter,WTF::RawPointer>((uint64_t)v21, &v20);
      v17 -= 8;
    }
    while (v17);
  }
  WTF::dataLog<char [16]>("\n");
  __break(0xC471u);
  JUMPOUT(0x198BF4F24);
}

uint64_t WTF::dataLog<char [19],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Found structure = ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<WTF::CommaPrinter,WTF::RawPointer>(uint64_t a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  char **v24;
  char *v25;
  int v26;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v25, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v25 = (char *)v20;
      v26 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v25);
    if (v26 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v25, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v25 = (char *)v21;
      v26 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v25);
    if (v26 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a1 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%p", *a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t **v41;
  uint64_t *i;
  uint64_t result;
  uint64_t **v44;
  uint64_t *j;
  uint64_t **v46;
  uint64_t *k;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = 0x7FFFFFFF;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 == 0x7FFFFFFF)
      {
        v38 = *((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        if (v38)
        {
          do
          {
            v39 = __ldaxr((unsigned int *)v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, (unsigned int *)v38));
          if (!v40)
          {
            atomic_store(1u, (unsigned int *)v38);
            v41 = (uint64_t **)(v38 + 8);
            for (i = *(uint64_t **)(v38 + 8); i != (uint64_t *)v41; i = *v41)
            {
              v53 = *i;
              v52 = (uint64_t *)i[1];
              *v52 = *i;
              *(_QWORD *)(v53 + 8) = v52;
              *i = 0;
              i[1] = 0;
            }
            WTF::fastFree(v38, v10, v11, v12, v13, v14, v15, v16);
          }
        }
      }
      else if (v22 != 2147483646)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 16 * v28) != 0x7FFFFFFF);
        v29 = v23 + 16 * v28;
        v30 = *(_QWORD *)(v29 + 8);
        *(_QWORD *)(v29 + 8) = 0;
        if (v30)
        {
          do
          {
            v31 = __ldaxr((unsigned int *)v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, (unsigned int *)v30));
          if (!v32)
          {
            atomic_store(1u, (unsigned int *)v30);
            v44 = (uint64_t **)(v30 + 8);
            for (j = *(uint64_t **)(v30 + 8); j != (uint64_t *)v44; j = *v44)
            {
              v49 = *j;
              v48 = (uint64_t *)j[1];
              *v48 = *j;
              *(_QWORD *)(v49 + 8) = v48;
              *j = 0;
              j[1] = 0;
            }
            WTF::fastFree(v30, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        *(_DWORD *)v29 = *v21;
        v33 = v6 + 16 * v19;
        v34 = *(_QWORD *)(v33 + 8);
        *(_QWORD *)(v33 + 8) = 0;
        *(_QWORD *)(v29 + 8) = v34;
        v35 = *(_QWORD *)(v33 + 8);
        *(_QWORD *)(v33 + 8) = 0;
        if (v35)
        {
          do
          {
            v36 = __ldaxr((unsigned int *)v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, (unsigned int *)v35));
          if (!v37)
          {
            atomic_store(1u, (unsigned int *)v35);
            v46 = (uint64_t **)(v35 + 8);
            for (k = *(uint64_t **)(v35 + 8); k != (uint64_t *)v46; k = *v46)
            {
              v51 = *k;
              v50 = (uint64_t *)k[1];
              *v50 = *k;
              *(_QWORD *)(v51 + 8) = v50;
              *k = 0;
              k[1] = 0;
            }
            WTF::fastFree(v35, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

__n128 WTF::Vector<JSC::PropertyTableEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyTableEntry const&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

void WTF::StringHashDumpContext<JSC::Structure>::getID(JSC::Structure *this@<X1>, uint64_t *a2@<X0>, int8x16_t **a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  int8x16_t *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  __int16 *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  uint64_t v56;
  int8x16_t *v57;
  __int8 v58;
  int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  char v73;
  char v74;
  WTF *v75;
  unint64_t v76;
  uint64_t *v77;
  WTF *v78;
  int8x16_t *v79;
  int8x16_t *v80;
  __int16 v81;
  uint64_t v82;
  int8x16_t *v83;
  __int8 v84;
  int v85;
  unsigned __int8 *v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  char v99;
  char v100;
  WTF *v101;
  unint64_t v102;
  uint64_t *v103;
  WTF *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  uint64_t v107;
  int8x16_t *v108;
  __int8 v109;
  unsigned int v110;
  unsigned __int8 *v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  char v124;
  char v125;
  WTF *v126;
  unint64_t v127;
  uint64_t *v128;
  WTF *v129;
  int8x16_t *v130;
  int8x16_t *v131;
  __int32 v132;
  uint64_t v133;
  int8x16_t *v134;
  __int8 v135;
  int v136;
  unsigned __int8 *v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  char v150;
  char v151;
  WTF *v152;
  unint64_t v153;
  WTF *v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unsigned int v160;
  JSC::Structure **v161;
  JSC::Structure *v162;
  JSC::Structure **v163;
  int v164;
  int8x16_t *v165;
  JSC::Structure *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  int8x16_t *v176;
  __int8 v177;
  unsigned __int8 *v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int8x16_t **v183;
  int v184;
  unsigned int v185;
  int8x16_t **v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  WTF *v195;
  int8x16_t *v196;
  int8x16_t *v197;
  char v200;
  int8x16_t *v201;
  int8x16_t *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t *v212;
  WTF *v213;
  uint64_t *v214;
  WTF *v215;
  WTF *v216;
  __int128 v217;
  _BYTE v218[128];
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(JSC::Structure **)(v6 + 16 * v11);
    if (v12 != this)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(JSC::Structure **)(v6 + 16 * v11);
        ++v13;
        if (v12 == this)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v6 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v6 - 4))
    {
      v38 = *(int8x16_t **)(v6 + 16 * v11 + 8);
      if (v38)
        ++v38->i32[0];
      *a3 = v38;
      return;
    }
  }
  v215 = (WTF *)off_1E3572250;
  v216 = (WTF *)v218;
  v14 = -1640531527;
  v217 = xmmword_199122F80;
  v218[0] = 0;
  JSC::Structure::dump((unint64_t)this, (WTF::PrintStream *)&v215);
  (*((void (**)(WTF **))v215 + 5))(&v215);
  v22 = v216;
  if (v216)
  {
    v23 = v217;
    if ((unint64_t)v217 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198BF6420);
    }
    v24 = WTF::fastMalloc((WTF *)(v217 + 17));
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = v23;
    v25 = (char *)(v24 + 16);
    memcpy((void *)(v24 + 16), v22, v23);
    *(_BYTE *)(v24 + 16 + v23) = 0;
    if (v216 != (WTF *)v218)
      WTF::fastFree((unint64_t)v216, v26, v27, v28, v29, v30, v31, v32);
    v33 = *v25;
    v34 = -1640531527;
    if (*v25)
    {
      v35 = (unsigned __int8 *)(v24 + 18);
      while (*(v35 - 1))
      {
        v36 = ((unsigned __int16)(char)*(v35 - 1) << 11) ^ ((v34 + (unsigned __int16)v33) << 16) ^ (v34
                                                                                                  + (unsigned __int16)v33);
        v34 = v36 + (v36 >> 11);
        v37 = *v35;
        v35 += 2;
        v33 = v37;
        if (!v37)
          goto LABEL_23;
      }
      v40 = (v34 + (unsigned __int16)v33) ^ ((v34 + (unsigned __int16)v33) << 11);
      v34 = v40 + (v40 >> 17);
    }
LABEL_23:
    v41 = (v34 ^ (8 * v34)) + ((v34 ^ (8 * v34)) >> 5);
    v42 = (v41 ^ (4 * v41)) + ((v41 ^ (4 * v41)) >> 15);
    v43 = v42 ^ (v42 << 10);
    if (v43)
      v39 = v43;
    else
      v39 = 0x800000;
    if (*(_DWORD *)v24 == 1)
    {
      v210 = v39;
      WTF::fastFree(v24, v26, v27, v28, v29, v30, v31, v32);
      v39 = v210;
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  else
  {
    WTF::fastFree(0, v15, v16, v17, v18, v19, v20, v21);
    v39 = 0;
  }
  v214 = a2 + 1;
  v212 = a2;
LABEL_29:
  v211 = v39;
  v44 = ((unint64_t)WTF::integerToSixCharacterHashString::table[v39 % 0x3E] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[v39 / 0x3E - 62 * (((138547333 * (unint64_t)(v39 / 0x3E)) >> 32) >> 1)] << 32);
  v45 = (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v39 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v39 / 0x3A2F8)) >> 16) >> 4))] << 16) | (WTF::integerToSixCharacterHashString::table[(v39 / 0xF04 - 62 * ((69273667 * (unint64_t)(v39 / 0xF04)) >> 32))] << 24) | (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v39 / 0xE17810 - 62 * ((1058 * (v39 / 0xE17810)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[v39 / 0x369B13E0uLL];
  v213 = (WTF *)WTF::fastMalloc((WTF *)0x17);
  *(_DWORD *)v213 = 1;
  *((_QWORD *)v213 + 1) = 6;
  *((_DWORD *)v213 + 4) = v45;
  v46 = (__int16 *)((char *)v213 + 16);
  *((_WORD *)v213 + 10) = WORD2(v44);
  *((_BYTE *)v213 + 22) = 0;
  *a3 = 0;
  v47 = WTF::fastMalloc((WTF *)0x13);
  *(_DWORD *)v47 = 1;
  *(_QWORD *)(v47 + 8) = 2;
  v55 = *a3;
  *a3 = (int8x16_t *)v47;
  if (v55)
  {
    if (v55->i32[0] == 1)
    {
      WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
      v47 = (uint64_t)*a3;
    }
    else
    {
      --v55->i32[0];
    }
  }
  *(_WORD *)(v47 + 16) = *v46;
  (*a3)[1].i8[2] = 0;
  v56 = *v214;
  if (*v214)
  {
    v57 = *a3;
    if (*a3)
    {
      v58 = v57[1].i8[0];
      v59 = -1640531527;
      if (v58)
      {
        v60 = &v57[1].u8[2];
        while (*(v60 - 1))
        {
          v61 = ((unsigned __int16)(char)*(v60 - 1) << 11) ^ ((v59 + (unsigned __int16)v58) << 16) ^ (v59 + (unsigned __int16)v58);
          v59 = v61 + (v61 >> 11);
          v62 = *v60;
          v60 += 2;
          v58 = v62;
          if (!v62)
            goto LABEL_42;
        }
        v64 = (v59 + (unsigned __int16)v58) ^ ((v59 + (unsigned __int16)v58) << 11);
        v59 = v64 + (v64 >> 17);
      }
LABEL_42:
      v65 = (v59 ^ (8 * v59)) + ((v59 ^ (8 * v59)) >> 5);
      v66 = (v65 ^ (4 * v65)) + ((v65 ^ (4 * v65)) >> 15);
      v63 = v66 ^ (v66 << 10);
      if (!v63)
        v63 = 0x800000;
    }
    else
    {
      v63 = 0;
    }
    v67 = 0;
    v68 = *(_DWORD *)(v56 - 8);
    while (1)
    {
      v69 = v63 & v68;
      v70 = *(_QWORD *)(v56 + 16 * (v63 & v68));
      if (v70 == -1 || &v57->i8[1] == 0)
      {
        if (v70 == -1 && &v57->i8[1] == 0)
        {
          *a3 = 0;
          v76 = -1;
          v78 = v213;
          v77 = v214;
          goto LABEL_65;
        }
      }
      else
      {
        v73 = WTF::operator==(v56 + 16 * v69, a3);
        if ((v73 & 1) != 0)
        {
          v76 = (unint64_t)*a3;
          *a3 = 0;
          v78 = v213;
          v77 = v214;
          if (!v76)
            goto LABEL_67;
LABEL_65:
          if (*(_DWORD *)v76 == 1)
            WTF::fastFree(v76, v48, v49, v50, v51, v52, v53, v54);
          else
            --*(_DWORD *)v76;
LABEL_67:
          if (*((_QWORD *)v78 + 1) < 3uLL)
            goto LABEL_286;
          *a3 = 0;
          v79 = (int8x16_t *)WTF::fastMalloc((WTF *)0x14);
          v79->i32[0] = 1;
          v79->i64[1] = 3;
          v80 = *a3;
          *a3 = v79;
          if (v80)
          {
            if (v80->i32[0] == 1)
            {
              WTF::fastFree((unint64_t)v80, v48, v49, v50, v51, v52, v53, v54);
              v79 = *a3;
            }
            else
            {
              --v80->i32[0];
            }
          }
          v81 = *v46;
          v79[1].i8[2] = *((_BYTE *)v213 + 18);
          v79[1].i16[0] = v81;
          (*a3)[1].i8[3] = 0;
          v82 = *v77;
          if (!*v77)
            goto LABEL_193;
          v83 = *a3;
          if (*a3)
          {
            v84 = v83[1].i8[0];
            v85 = -1640531527;
            if (v84)
            {
              v86 = &v83[1].u8[2];
              while (*(v86 - 1))
              {
                v87 = ((unsigned __int16)(char)*(v86 - 1) << 11) ^ ((v85 + (unsigned __int16)v84) << 16) ^ (v85 + (unsigned __int16)v84);
                v85 = v87 + (v87 >> 11);
                v88 = *v86;
                v86 += 2;
                v84 = v88;
                if (!v88)
                  goto LABEL_81;
              }
              v90 = (v85 + (unsigned __int16)v84) ^ ((v85 + (unsigned __int16)v84) << 11);
              v85 = v90 + (v90 >> 17);
            }
LABEL_81:
            v91 = (v85 ^ (8 * v85)) + ((v85 ^ (8 * v85)) >> 5);
            v92 = (v91 ^ (4 * v91)) + ((v91 ^ (4 * v91)) >> 15);
            v89 = v92 ^ (v92 << 10);
            if (!v89)
              v89 = 0x800000;
          }
          else
          {
            v89 = 0;
          }
          v93 = 0;
          v94 = *(_DWORD *)(v82 - 8);
          while (2)
          {
            v95 = v89 & v94;
            v96 = *(_QWORD *)(v82 + 16 * (v89 & v94));
            if (v96 == -1 || &v83->i8[1] == 0)
            {
              if (v96 == -1 && &v83->i8[1] == 0)
              {
                *a3 = 0;
                v102 = -1;
                v104 = v213;
                v103 = v214;
                goto LABEL_104;
              }
LABEL_96:
              v215 = 0;
              v100 = WTF::operator==(v82 + 16 * v95, (int8x16_t **)&v215);
              v101 = v215;
              v215 = 0;
              if (v101)
              {
                if (*(_DWORD *)v101 != 1)
                {
                  --*(_DWORD *)v101;
                  goto LABEL_99;
                }
                WTF::fastFree((unint64_t)v101, v48, v49, v50, v51, v52, v53, v54);
                if ((v100 & 1) != 0)
                  goto LABEL_193;
              }
              else
              {
LABEL_99:
                if ((v100 & 1) != 0)
                  goto LABEL_193;
              }
              v89 = ++v93 + v95;
              v83 = *a3;
              continue;
            }
            break;
          }
          v99 = WTF::operator==(v82 + 16 * v95, a3);
          if ((v99 & 1) == 0)
            goto LABEL_96;
          v102 = (unint64_t)*a3;
          *a3 = 0;
          v104 = v213;
          v103 = v214;
          if (!v102)
            goto LABEL_106;
LABEL_104:
          if (*(_DWORD *)v102 == 1)
            WTF::fastFree(v102, v48, v49, v50, v51, v52, v53, v54);
          else
            --*(_DWORD *)v102;
LABEL_106:
          if (*((_QWORD *)v104 + 1) < 4uLL)
LABEL_286:
            __break(1u);
          *a3 = 0;
          v105 = (int8x16_t *)WTF::fastMalloc((WTF *)0x15);
          v105->i32[0] = 1;
          v105->i64[1] = 4;
          v106 = *a3;
          *a3 = v105;
          if (v106)
          {
            if (v106->i32[0] == 1)
            {
              WTF::fastFree((unint64_t)v106, v48, v49, v50, v51, v52, v53, v54);
              v105 = *a3;
            }
            else
            {
              --v106->i32[0];
            }
          }
          v105[1].i32[0] = *(_DWORD *)v46;
          (*a3)[1].i8[4] = 0;
          v107 = *v103;
          if (!*v103)
            goto LABEL_193;
          v108 = *a3;
          if (*a3)
          {
            v109 = v108[1].i8[0];
            v110 = -1640531527;
            if (v109)
            {
              v111 = &v108[1].u8[2];
              while (1)
              {
                v112 = v110 + (unsigned __int16)v109;
                if (!*(v111 - 1))
                  break;
                v113 = ((unsigned __int16)(char)*(v111 - 1) << 11) ^ (v112 << 16) ^ v112;
                v110 = v113 + (v113 >> 11);
                v114 = *v111;
                v111 += 2;
                v109 = v114;
                if (!v114)
                  goto LABEL_121;
              }
              v110 = (v112 ^ (v112 << 11)) + ((v112 ^ (v112 << 11)) >> 17);
            }
LABEL_121:
            v116 = (v110 ^ (8 * v110)) + ((v110 ^ (8 * v110)) >> 5);
            v117 = (v116 ^ (4 * v116)) + ((v116 ^ (4 * v116)) >> 15);
            v115 = v117 ^ (v117 << 10);
            if (!v115)
              v115 = 0x800000;
          }
          else
          {
            v115 = 0;
          }
          v118 = 0;
          v119 = *(_DWORD *)(v107 - 8);
          while (2)
          {
            v120 = v115 & v119;
            v121 = *(_QWORD *)(v107 + 16 * (v115 & v119));
            if (v121 == -1 || &v108->i8[1] == 0)
            {
              if (v121 == -1 && &v108->i8[1] == 0)
              {
                *a3 = 0;
                v127 = -1;
                v129 = v213;
                v128 = v214;
                goto LABEL_144;
              }
LABEL_136:
              v215 = 0;
              v125 = WTF::operator==(v107 + 16 * v120, (int8x16_t **)&v215);
              v126 = v215;
              v215 = 0;
              if (v126)
              {
                if (*(_DWORD *)v126 != 1)
                {
                  --*(_DWORD *)v126;
                  goto LABEL_139;
                }
                WTF::fastFree((unint64_t)v126, v48, v49, v50, v51, v52, v53, v54);
                if ((v125 & 1) != 0)
                  goto LABEL_193;
              }
              else
              {
LABEL_139:
                if ((v125 & 1) != 0)
                  goto LABEL_193;
              }
              v115 = ++v118 + v120;
              v108 = *a3;
              continue;
            }
            break;
          }
          v124 = WTF::operator==(v107 + 16 * v120, a3);
          if ((v124 & 1) == 0)
            goto LABEL_136;
          v127 = (unint64_t)*a3;
          *a3 = 0;
          v129 = v213;
          v128 = v214;
          if (!v127)
            goto LABEL_146;
LABEL_144:
          if (*(_DWORD *)v127 == 1)
            WTF::fastFree(v127, v48, v49, v50, v51, v52, v53, v54);
          else
            --*(_DWORD *)v127;
LABEL_146:
          if (*((_QWORD *)v129 + 1) < 5uLL)
            goto LABEL_286;
          *a3 = 0;
          v130 = (int8x16_t *)WTF::fastMalloc((WTF *)0x16);
          v130->i32[0] = 1;
          v130->i64[1] = 5;
          v131 = *a3;
          *a3 = v130;
          if (v131)
          {
            if (v131->i32[0] == 1)
            {
              WTF::fastFree((unint64_t)v131, v48, v49, v50, v51, v52, v53, v54);
              v130 = *a3;
            }
            else
            {
              --v131->i32[0];
            }
          }
          v132 = *(_DWORD *)v46;
          v130[1].i8[4] = *((_BYTE *)v213 + 20);
          v130[1].i32[0] = v132;
          (*a3)[1].i8[5] = 0;
          v133 = *v128;
          if (!*v128)
            goto LABEL_193;
          v134 = *a3;
          if (*a3)
          {
            v135 = v134[1].i8[0];
            v136 = -1640531527;
            if (v135)
            {
              v137 = &v134[1].u8[2];
              while (*(v137 - 1))
              {
                v138 = ((unsigned __int16)(char)*(v137 - 1) << 11) ^ ((v136 + (unsigned __int16)v135) << 16) ^ (v136 + (unsigned __int16)v135);
                v136 = v138 + (v138 >> 11);
                v139 = *v137;
                v137 += 2;
                v135 = v139;
                if (!v139)
                  goto LABEL_161;
              }
              v141 = (v136 + (unsigned __int16)v135) ^ ((v136 + (unsigned __int16)v135) << 11);
              v136 = v141 + (v141 >> 17);
            }
LABEL_161:
            v142 = (v136 ^ (8 * v136)) + ((v136 ^ (8 * v136)) >> 5);
            v143 = (v142 ^ (4 * v142)) + ((v142 ^ (4 * v142)) >> 15);
            v140 = v143 ^ (v143 << 10);
            if (!v140)
              v140 = 0x800000;
          }
          else
          {
            v140 = 0;
          }
          v144 = 0;
          v145 = *(_DWORD *)(v133 - 8);
          while (2)
          {
            v146 = v140 & v145;
            v147 = *(_QWORD *)(v133 + 16 * (v140 & v145));
            if (v147 == -1 || &v134->i8[1] == 0)
            {
              if (v147 == -1 && &v134->i8[1] == 0)
              {
                *a3 = 0;
                v153 = -1;
                v154 = v213;
                goto LABEL_184;
              }
LABEL_176:
              v215 = 0;
              v151 = WTF::operator==(v133 + 16 * v146, (int8x16_t **)&v215);
              v152 = v215;
              v215 = 0;
              if (v152)
              {
                if (*(_DWORD *)v152 != 1)
                {
                  --*(_DWORD *)v152;
                  goto LABEL_179;
                }
                WTF::fastFree((unint64_t)v152, v48, v49, v50, v51, v52, v53, v54);
                if ((v151 & 1) != 0)
                  goto LABEL_193;
              }
              else
              {
LABEL_179:
                if ((v151 & 1) != 0)
                  goto LABEL_193;
              }
              v140 = ++v144 + v146;
              v134 = *a3;
              continue;
            }
            break;
          }
          v150 = WTF::operator==(v133 + 16 * v146, a3);
          if ((v150 & 1) == 0)
            goto LABEL_176;
          v153 = (unint64_t)*a3;
          *a3 = 0;
          v154 = v213;
          if (!v153)
            goto LABEL_186;
LABEL_184:
          if (*(_DWORD *)v153 == 1)
            WTF::fastFree(v153, v48, v49, v50, v51, v52, v53, v54);
          else
            --*(_DWORD *)v153;
LABEL_186:
          if (*(_DWORD *)v154 == 1)
            WTF::fastFree((unint64_t)v154, v48, v49, v50, v51, v52, v53, v54);
          else
            --*(_DWORD *)v154;
          v39 = v211 + 1;
          goto LABEL_29;
        }
      }
      v215 = 0;
      v74 = WTF::operator==(v56 + 16 * v69, (int8x16_t **)&v215);
      v75 = v215;
      v215 = 0;
      if (!v75)
        goto LABEL_60;
      if (*(_DWORD *)v75 != 1)
        break;
      WTF::fastFree((unint64_t)v75, v48, v49, v50, v51, v52, v53, v54);
      if ((v74 & 1) != 0)
        goto LABEL_193;
LABEL_61:
      v63 = ++v67 + v69;
      v57 = *a3;
    }
    --*(_DWORD *)v75;
LABEL_60:
    if ((v74 & 1) != 0)
      goto LABEL_193;
    goto LABEL_61;
  }
LABEL_193:
  v155 = *v212;
  if (*v212
    || (WTF::HashTable<JSC::Structure const*,WTF::KeyValuePair<JSC::Structure const*,WTF::CString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Structure const*,WTF::CString>>,WTF::DefaultHash<JSC::Structure const*>,WTF::HashMap<JSC::Structure const*,WTF::CString,WTF::DefaultHash<JSC::Structure const*>,WTF::HashTraits<JSC::Structure const*>,WTF::HashTraits<WTF::CString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Structure const*>>::rehash(v212, 8uLL, 0, v50, v51, v52, v53, v54), (v155 = *v212) != 0))
  {
    v156 = *(_DWORD *)(v155 - 8);
  }
  else
  {
    v156 = 0;
  }
  v157 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v158 = 9 * ((v157 + ~(v157 << 13)) ^ ((v157 + ~(v157 << 13)) >> 8));
  v159 = (v158 ^ (v158 >> 15)) + ~((v158 ^ (v158 >> 15)) << 27);
  v160 = v156 & ((v159 >> 31) ^ v159);
  v161 = (JSC::Structure **)(v155 + 16 * v160);
  v162 = *v161;
  if (!*v161)
  {
LABEL_204:
    *v161 = this;
    v165 = *a3;
    if (*a3)
      ++v165->i32[0];
    v166 = v161[1];
    v161[1] = (JSC::Structure *)v165;
    if (v166)
    {
      if (*(_DWORD *)v166 == 1)
        WTF::fastFree((unint64_t)v166, v48, v49, v50, v51, v52, v53, v54);
      else
        --*(_DWORD *)v166;
    }
    v167 = *v212;
    if (*v212)
      v168 = *(_DWORD *)(v167 - 12) + 1;
    else
      v168 = 1;
    *(_DWORD *)(v167 - 12) = v168;
    v169 = *v212;
    if (*v212)
      v170 = *(_DWORD *)(v169 - 12);
    else
      v170 = 0;
    v171 = (*(_DWORD *)(v169 - 16) + v170);
    v172 = *(unsigned int *)(v169 - 4);
    if (v172 > 0x400)
    {
      if (v172 > 2 * v171)
        goto LABEL_222;
    }
    else
    {
      if (3 * v172 > 4 * v171)
        goto LABEL_222;
      if (!(_DWORD)v172)
      {
        v173 = 8;
        goto LABEL_221;
      }
    }
    v173 = ((_DWORD)v172 << (6 * *(_DWORD *)(v169 - 12) >= (2 * v172)));
LABEL_221:
    WTF::HashTable<JSC::Structure const*,WTF::KeyValuePair<JSC::Structure const*,WTF::CString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Structure const*,WTF::CString>>,WTF::DefaultHash<JSC::Structure const*>,WTF::HashMap<JSC::Structure const*,WTF::CString,WTF::DefaultHash<JSC::Structure const*>,WTF::HashTraits<JSC::Structure const*>,WTF::HashTraits<WTF::CString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Structure const*>>::rehash(v212, v173, (uint64_t)v161, v50, v51, v52, v53, v54);
    goto LABEL_222;
  }
  v163 = 0;
  v164 = 1;
  while (v162 != this)
  {
    if (v162 == (JSC::Structure *)-1)
      v163 = v161;
    v160 = (v160 + v164) & v156;
    v161 = (JSC::Structure **)(v155 + 16 * v160);
    v162 = *v161;
    ++v164;
    if (!*v161)
    {
      if (v163)
      {
        *v163 = 0;
        v163[1] = 0;
        --*(_DWORD *)(*v212 - 16);
        v161 = v163;
      }
      goto LABEL_204;
    }
  }
LABEL_222:
  v174 = *v214;
  if (*v214
    || (WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,JSC::Structure const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,JSC::Structure const*>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,JSC::Structure const*,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<JSC::Structure const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(v214, 8uLL, 0, v50, v51, v52, v53, v54), (v174 = *v214) != 0))
  {
    v175 = *(_DWORD *)(v174 - 8);
  }
  else
  {
    v175 = 0;
  }
  v176 = *a3;
  if (*a3)
  {
    v177 = v176[1].i8[0];
    if (v177)
    {
      v178 = &v176[1].u8[2];
      while (1)
      {
        v179 = v14 + (unsigned __int16)v177;
        if (!*(v178 - 1))
          break;
        v14 = (((unsigned __int16)(char)*(v178 - 1) << 11) ^ (v179 << 16) ^ v179)
            + ((((unsigned __int16)(char)*(v178 - 1) << 11) ^ (v179 << 16) ^ v179) >> 11);
        v180 = *v178;
        v178 += 2;
        v177 = v180;
        if (!v180)
          goto LABEL_232;
      }
      v14 = (v179 ^ (v179 << 11)) + ((v179 ^ (v179 << 11)) >> 17);
    }
LABEL_232:
    v181 = (v14 ^ (8 * v14)) + ((v14 ^ (8 * v14)) >> 5);
    v182 = (v181 ^ (4 * v181)) + ((v181 ^ (4 * v181)) >> 15);
    LODWORD(v176) = v182 ^ (v182 << 10);
    if (!(_DWORD)v176)
      LODWORD(v176) = 0x800000;
  }
  v183 = 0;
  v184 = 1;
  while (2)
  {
    v185 = v176 & v175;
    v186 = (int8x16_t **)(v174 + 16 * (v176 & v175));
    v215 = 0;
    v194 = WTF::operator==((uint64_t)v186, (int8x16_t **)&v215);
    v195 = v215;
    v215 = 0;
    if (!v195)
    {
LABEL_238:
      if ((v194 & 1) != 0)
        break;
      goto LABEL_239;
    }
    if (*(_DWORD *)v195 != 1)
    {
      --*(_DWORD *)v195;
      goto LABEL_238;
    }
    WTF::fastFree((unint64_t)v195, v187, v188, v189, v190, v191, v192, v193);
    if ((v194 & 1) == 0)
    {
LABEL_239:
      v196 = *v186;
      v197 = *a3;
      if (*v186 == (int8x16_t *)-1 || &v197->i8[1] == 0)
      {
        if (v196 == (int8x16_t *)-1 && &v197->i8[1] == 0)
          goto LABEL_278;
      }
      else
      {
        v200 = WTF::operator==(v174 + 16 * v185, a3);
        if ((v200 & 1) != 0)
          goto LABEL_278;
        v196 = *v186;
      }
      if (v196 == (int8x16_t *)-1)
        v183 = (int8x16_t **)(v174 + 16 * v185);
      LODWORD(v176) = v184 + v185;
      ++v184;
      continue;
    }
    break;
  }
  if (v183)
  {
    *v183 = 0;
    v183[1] = 0;
    --*(_DWORD *)(*v214 - 16);
    v186 = v183;
  }
  v201 = *a3;
  if (*a3)
    ++v201->i32[0];
  v202 = *v186;
  *v186 = v201;
  if (v202)
  {
    if (v202->i32[0] == 1)
      WTF::fastFree((unint64_t)v202, v187, v188, v189, v190, v191, v192, v193);
    else
      --v202->i32[0];
  }
  v186[1] = (int8x16_t *)this;
  v203 = *v214;
  if (*v214)
    v204 = *(_DWORD *)(v203 - 12) + 1;
  else
    v204 = 1;
  *(_DWORD *)(v203 - 12) = v204;
  v205 = *v214;
  if (*v214)
    v206 = *(_DWORD *)(v205 - 12);
  else
    v206 = 0;
  v207 = (*(_DWORD *)(v205 - 16) + v206);
  v208 = *(unsigned int *)(v205 - 4);
  if (v208 > 0x400)
  {
    if (v208 <= 2 * v207)
    {
LABEL_272:
      v209 = ((_DWORD)v208 << (6 * *(_DWORD *)(v205 - 12) >= (2 * v208)));
      goto LABEL_277;
    }
  }
  else if (3 * v208 <= 4 * v207)
  {
    if ((_DWORD)v208)
      goto LABEL_272;
    v209 = 8;
LABEL_277:
    WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,JSC::Structure const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,JSC::Structure const*>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,JSC::Structure const*,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<JSC::Structure const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(v214, v209, (uint64_t)v186, v189, v190, v191, v192, v193);
  }
LABEL_278:
  if (*(_DWORD *)v213 == 1)
    WTF::fastFree((unint64_t)v213, v187, v188, v189, v190, v191, v192, v193);
  else
    --*(_DWORD *)v213;
}

void WTF::HashTable<JSC::Structure const*,WTF::KeyValuePair<JSC::Structure const*,WTF::CString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Structure const*,WTF::CString>>,WTF::DefaultHash<JSC::Structure const*>,WTF::HashMap<JSC::Structure const*,WTF::CString,WTF::DefaultHash<JSC::Structure const*>,WTF::HashTraits<JSC::Structure const*>,WTF::HashTraits<WTF::CString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Structure const*>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = (uint64_t *)(v26 + 16 * v33);
          v36 = (_DWORD *)v35[1];
          v35[1] = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::fastFree((unint64_t)v36, v14, v15, v16, v17, v18, v19, v20);
            else
              --*v36;
          }
          *v35 = *v22;
          v37 = v10 + 16 * v21;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v35[1] = v38;
          v25 = *(_DWORD **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (!v25)
            goto LABEL_22;
          if (*v25 == 1)
          {
LABEL_24:
            WTF::fastFree((unint64_t)v25, v14, v15, v16, v17, v18, v19, v20);
            goto LABEL_22;
          }
          --*v25;
        }
        else
        {
          v24 = v10 + 16 * v21;
          v25 = *(_DWORD **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            if (*v25 == 1)
              goto LABEL_24;
            --*v25;
          }
        }
      }
LABEL_22:
      if (++v21 == v11)
        goto LABEL_28;
    }
  }
  if (v10)
LABEL_28:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,JSC::Structure const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,JSC::Structure const*>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,JSC::Structure const*,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<JSC::Structure const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  WTF *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  char v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  _DWORD **v39;
  int v40;
  WTF *v41;
  _DWORD *v42;
  __int128 v43;
  uint64_t v44;
  WTF *v46;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = v10;
    v44 = v9;
    while (1)
    {
      v22 = (_QWORD *)(v9 + 16 * v20);
      if (*v22 == -1)
        goto LABEL_40;
      v46 = 0;
      v23 = WTF::operator==(v9 + 16 * v20, (int8x16_t **)&v46);
      v24 = v46;
      v46 = 0;
      if (!v24)
        goto LABEL_10;
      if (*(_DWORD *)v24 != 1)
        break;
      WTF::fastFree((unint64_t)v24, v13, v14, v15, v16, v17, v18, v19);
      if (v23)
      {
LABEL_11:
        v25 = (_DWORD *)*v22;
        *v22 = 0;
        if (v25)
        {
          if (*v25 == 1)
            goto LABEL_42;
          --*v25;
        }
        goto LABEL_40;
      }
LABEL_15:
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = (_DWORD *)*v22;
      if (*v22)
      {
        v29 = *((_BYTE *)v28 + 16);
        v30 = -1640531527;
        if (v29)
        {
          v31 = (unsigned __int8 *)v28 + 18;
          while (1)
          {
            v32 = v30 + (unsigned __int16)v29;
            if (!*(v31 - 1))
              break;
            v33 = ((unsigned __int16)(char)*(v31 - 1) << 11) ^ (v32 << 16) ^ v32;
            v30 = v33 + (v33 >> 11);
            v34 = *v31;
            v31 += 2;
            v29 = v34;
            if (!v34)
              goto LABEL_25;
          }
          v30 = (v32 ^ (v32 << 11)) + ((v32 ^ (v32 << 11)) >> 17);
        }
LABEL_25:
        v35 = (v30 ^ (8 * v30)) + ((v30 ^ (8 * v30)) >> 5);
        v36 = (v35 ^ (4 * v35)) + ((v35 ^ (4 * v35)) >> 15);
        LODWORD(v28) = v36 ^ (v36 << 10);
        if (!(_DWORD)v28)
          LODWORD(v28) = 0x800000;
      }
      v37 = 0;
      do
      {
        v38 = v28 & v27;
        v39 = (_DWORD **)(v26 + 16 * (v28 & v27));
        v46 = 0;
        v40 = WTF::operator==((uint64_t)v39, (int8x16_t **)&v46);
        v41 = v46;
        v46 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
            WTF::fastFree((unint64_t)v41, v13, v14, v15, v16, v17, v18, v19);
          else
            --*(_DWORD *)v41;
        }
        LODWORD(v28) = ++v37 + v38;
      }
      while (!v40);
      v42 = *v39;
      *v39 = 0;
      v9 = v44;
      if (v42)
      {
        if (*v42 == 1)
          WTF::fastFree((unint64_t)v42, v13, v14, v15, v16, v17, v18, v19);
        else
          --*v42;
      }
      v43 = *(_OWORD *)v22;
      *v22 = 0;
      *(_OWORD *)v39 = v43;
      v25 = (_DWORD *)*v22;
      *v22 = 0;
      if (!v25)
        goto LABEL_40;
      if (*v25 == 1)
      {
LABEL_42:
        WTF::fastFree((unint64_t)v25, v13, v14, v15, v16, v17, v18, v19);
        goto LABEL_40;
      }
      --*v25;
LABEL_40:
      if (++v20 == v21)
        goto LABEL_46;
    }
    --*(_DWORD *)v24;
LABEL_10:
    if (v23)
      goto LABEL_11;
    goto LABEL_15;
  }
  if (v9)
LABEL_46:
    WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
}

_QWORD *WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::inlineSet<WTF::SymbolImpl * const&,JSC::Weak<JSC::Symbol>>(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (!*v20)
  {
LABEL_4:
    *v20 = v15;
    v22 = *a4;
    *a4 = 0;
    v23 = v20[1];
    v20[1] = v22;
    if (v23)
      *(_QWORD *)(v23 + 8) = 3;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_12;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_12:
        *v11 = v20;
        v11[1] = v26 + 16 * v29;
        *((_BYTE *)v11 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v29)
      {
        v32 = 8;
        goto LABEL_23;
      }
    }
    v32 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
LABEL_23:
    result = WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::rehash(a2, v32, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
    v20 = result;
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_12;
  }
  v30 = 0;
  v31 = 1;
  while (v21 != v15)
  {
    if (v21 == -1)
      v30 = v20;
    v19 = (v19 + v31) & v14;
    v20 = (_QWORD *)(v12 + 16 * v19);
    v21 = *v20;
    ++v31;
    if (!*v20)
    {
      if (v30)
      {
        *v30 = 0;
        v30[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = *a3;
        v20 = v30;
      }
      goto LABEL_4;
    }
  }
  if ((v13 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v12 - 4);
  *v11 = v20;
  v11[1] = v12 + 16 * v33;
  *((_BYTE *)v11 + 16) = 0;
  v34 = *a4;
  *a4 = 0;
  v35 = v20[1];
  v20[1] = v34;
  if (v35)
    *(_QWORD *)(v35 + 8) = 3;
  return result;
}

_QWORD *WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != -1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v15 = *(void **)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v15);
          v34 = (_QWORD *)(v26 + 16 * v33);
          v35 = v34 + 1;
          v36 = v34[1];
          if (v36)
          {
            *(_QWORD *)(v36 + 8) = 3;
            *v35 = 0;
          }
          *v34 = v25;
          v37 = v11 + 16 * v22;
          v39 = *(_QWORD *)(v37 + 8);
          v38 = v37 + 8;
          *(_QWORD *)v38 = 0;
          *v35 = v39;
          if (*(_QWORD *)v38)
          {
            *(_QWORD *)(*(_QWORD *)v38 + 8) = 3;
            *(_QWORD *)v38 = 0;
          }
          if (v24 == (uint64_t *)a3)
            v23 = v34;
        }
      }
      else
      {
        v42 = v24[1];
        v40 = v24 + 1;
        v41 = v42;
        if (v42)
        {
          *(_QWORD *)(v41 + 8) = 3;
          *v40 = 0;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::SymbolTable::destroy(JSC::SymbolTable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  JSC::SymbolTable::SymbolTableRareData *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t StatusReg;
  unsigned int v25;
  unsigned int v26;
  uint64_t **v27;
  uint64_t *i;
  uint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t *j;
  uint64_t *v42;
  uint64_t v43;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 1) == 0)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v11);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v11));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v11);
      v27 = (uint64_t **)(v11 + 8);
      for (i = *(uint64_t **)(v11 + 8); i != (uint64_t *)v27; i = *v27)
      {
        v30 = *i;
        v29 = (uint64_t *)i[1];
        *v29 = *i;
        *(_QWORD *)(v30 + 8) = v29;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (JSC::SymbolTable::SymbolTableRareData *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    JSC::SymbolTable::SymbolTableRareData::~SymbolTableRareData(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)this + 1);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      v23 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        v31 = (unint64_t *)(v21 + 16 * v23);
        v32 = *v31;
        if (*v31 == -1)
          goto LABEL_19;
        v33 = v31[1];
        if ((v33 & 1) == 0 && v33)
        {
          v38 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v38)
          {
            do
            {
              v36 = __ldaxr((unsigned int *)v38);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, (unsigned int *)v38));
            if (!v37)
            {
              v39 = v33;
              atomic_store(1u, (unsigned int *)v38);
              v40 = (uint64_t **)(v38 + 8);
              for (j = *(uint64_t **)(v38 + 8); j != (uint64_t *)v40; j = *v40)
              {
                v43 = *j;
                v42 = (uint64_t *)j[1];
                *v42 = *j;
                *(_QWORD *)(v43 + 8) = v42;
                *j = 0;
                j[1] = 0;
              }
              WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
              v33 = v39;
            }
          }
          WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
          v32 = *v31;
        }
        *v31 = 0;
        if (!v32)
          goto LABEL_19;
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, a2, a3, a4, a5, a6, a7, a8);
          v34 = *(_QWORD *)(StatusReg + 752);
          if (v34)
          {
            if (!(v32 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v32 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v32)) & 1) != 0)
            {
LABEL_27:
              v35 = *(unsigned int *)(v34 + 8000);
              if (v35 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v34, v32, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v34 + 8 * v35) = v32 | 0x5000000000000;
                *(_DWORD *)(v34 + 8000) = v35 + 1;
              }
              goto LABEL_19;
            }
            if (v32 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v32 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v32 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v32) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_27;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v34, v32, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v32, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v32 -= 2;
        }
LABEL_19:
        ++v23;
      }
      while (v23 != v22);
    }
    WTF::fastFree(v21 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::SymbolTable::visitChildren(JSC::SymbolTable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;

  v8 = a2;
  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    a2 = (JSC::JSCell *)*((unsigned int *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), (int)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    if ((v11 & 8) != 0)
    {
      if ((*(_BYTE *)(v11 - 79) & 1) == 0)
        goto LABEL_36;
    }
    else
    {
      a2 = (JSC::JSCell *)*((unsigned int *)v8 + 33);
      if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != (_DWORD)a2)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000), (int)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v11 & 0xFFFFFFFFFFFFC000) + 8 * ((v11 >> 10) & 0xF) + 0x28) >> (v11 >> 4)) & 1) == 0)
        goto LABEL_36;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_12;
LABEL_36:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v11, 0, a4, a5, a6, a7, a8);
  }
LABEL_12:
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v18 = *(_QWORD *)(v12 + 24);
    if (v18)
    {
      if ((v18 & 8) != 0)
      {
        if ((*(_BYTE *)(v18 - 79) & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        a2 = (JSC::JSCell *)*((unsigned int *)v8 + 33);
        if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != (_DWORD)a2)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), (int)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
        {
LABEL_32:
          if (!*((_QWORD *)v8 + 21))
            goto LABEL_13;
        }
      }
      JSC::SlotVisitor::appendSlow((uint64_t)v8, v18, 0, a4, a5, a6, a7, a8);
    }
  }
LABEL_13:
  v13 = (unsigned __int8 *)this + 20;
  if (__ldaxr((unsigned __int8 *)this + 20))
  {
    __clrex();
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 20);
    goto LABEL_16;
  }
  if (__stxr(1u, v13))
    goto LABEL_15;
LABEL_16:
  v15 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    v16 = *(_QWORD *)v15;
    if (*(_QWORD *)v15)
    {
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = 0;
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v17 = __ldxr(v13);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v13))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 20, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::SymbolTable::visitChildren(JSC::SymbolTable *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD v19[2];
  uint64_t v20;
  char v21;
  _QWORD v22[2];
  _QWORD *v23;
  char v24;

  v19[0] = a2;
  v19[1] = this;
  v21 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v20 = v5;
  if (!v5 || !*(_BYTE *)(v5 + 24))
  {
    v22[0] = a2;
    v22[1] = this;
    v24 = 0;
    v23 = v19;
    *((_QWORD *)a2 + 11) = v22;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v22[0] + 88) = v23;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    v13 = *((_QWORD *)this + 3);
    if (v13)
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v13 + 24));
    v14 = (unsigned __int8 *)this + 20;
    if (__ldaxr((unsigned __int8 *)this + 20))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_9;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 20);
LABEL_9:
    v16 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v16)
    {
      v17 = *(_QWORD *)v16;
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 0;
        WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
      }
      WTF::fastFree(v16, v6, v7, v8, v9, v10, v11, v12);
    }
    v18 = __ldxr(v14);
    if (v18 == 1)
    {
      if (!__stlxr(0, v14))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 20, 0, v7, v8, v9, v10, v11, v12);
LABEL_18:
    *(_QWORD *)(v19[0] + 88) = v20;
    return;
  }
  __break(0xC471u);
}

unint64_t *JSC::SymbolTableEntry::copySlow(unint64_t *a1, _QWORD **a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *i;
  uint64_t *v23;
  uint64_t v24;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v12 = v4;
  v13 = (unsigned int *)(*a2)[1];
  *v4 = **a2;
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v4[1] = v13;
  v15 = *a1;
  if ((*a1 & 1) == 0 && v15)
  {
    v17 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        v20 = v15;
        atomic_store(1u, (unsigned int *)v17);
        v21 = (uint64_t **)(v17 + 8);
        for (i = *(uint64_t **)(v17 + 8); i != (uint64_t *)v21; i = *v21)
        {
          v24 = *i;
          v23 = (uint64_t *)i[1];
          *v23 = *i;
          *(_QWORD *)(v24 + 8) = v23;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v17, v5, v6, v7, v8, v9, v10, v11);
        v15 = v20;
      }
    }
    WTF::fastFree(v15, v5, v6, v7, v8, v9, v10, v11);
  }
  *a1 = (unint64_t)v12;
  return a1;
}

void JSC::SymbolTableEntry::freeFatEntrySlow(JSC::SymbolTableEntry *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v9);
        v14 = (uint64_t **)(v9 + 8);
        for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v14; i = *v14)
        {
          v17 = *i;
          v16 = (uint64_t *)i[1];
          *v16 = *i;
          *(_QWORD *)(v17 + 8) = v16;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v12)
    {
      pas_try_deallocate_slow_no_cache(v8, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(v8 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v8 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v8)) & 1) != 0)
    {
      goto LABEL_8;
    }
    if (v8 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v8 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v8 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v8) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_8:
        v13 = *(unsigned int *)(v12 + 8000);
        if (v13 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v12, v8, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v12 + 8 * v13) = v8 | 0x5000000000000;
          *(_DWORD *)(v12 + 8000) = v13 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, v8, 1, a4, a5, a6, a7, a8);
  }
}

void JSC::SymbolTableEntry::prepareToWatch(JSC::SymbolTableEntry *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t casual;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v21;
  uint64_t *i;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x30) != 0 || BYTE1(dword_1ECF4C240) == 0)
    return;
  if ((v8 & 1) != 0)
  {
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)this = v8;
  }
  else if (*(_QWORD *)(v8 + 8))
  {
    return;
  }
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (_BYTE *)(v10 + 8488);
    *(_BYTE *)(v10 + 8488) = 1;
    v12 = *(unsigned int *)(v10 + 8504);
    if ((_DWORD)v12)
    {
      *(_DWORD *)(v10 + 8504) = v12 - *(_DWORD *)(v10 + 8508);
      casual = *(_QWORD *)(v10 + 8496) - v12;
LABEL_10:
      *v11 = 0;
      goto LABEL_11;
    }
    v17 = *(_QWORD *)(v10 + 8528);
    v18 = *(_QWORD *)(v10 + 8512);
    if (v17)
    {
LABEL_16:
      v19 = __clz(v17);
      *(_QWORD *)(v10 + 8528) = v17 & ~(0x8000000000000000 >> v19);
      casual = v18 + 16 * v19;
      goto LABEL_10;
    }
    if (*(_BYTE *)(v10 + 8493) == 6)
    {
      v23 = *(_DWORD *)(v10 + 8524);
      v24 = *(unsigned int *)(v10 + 8520);
      if (v24 < v23)
      {
        *(_QWORD *)&v11[8 * v24 + 56] = 0;
        v25 = (unint64_t *)(v10 + 8 * v24 + 8552);
        v26 = v23 - 1 - v24;
        while (v26)
        {
          v18 += 1024;
          v28 = *v25++;
          v27 = v28;
          LODWORD(v24) = v24 + 1;
          --v26;
          if (v28)
          {
            v17 = __rbit64(v27);
            *(_DWORD *)(v10 + 8520) = v24;
            *(_QWORD *)(v10 + 8512) = v18;
            goto LABEL_16;
          }
        }
        *(_DWORD *)(v10 + 8520) = v23;
      }
    }
    *v11 = 0;
  }
  casual = bmalloc_allocate_casual(24, 1);
LABEL_11:
  *(_DWORD *)casual = 1;
  *(_WORD *)(casual + 4) = 0;
  *(_QWORD *)(casual + 8) = casual + 8;
  *(_QWORD *)(casual + 16) = casual + 8;
  v14 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = casual;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v21 = (uint64_t **)(v14 + 8);
      for (i = *(uint64_t **)(v14 + 8); i != (uint64_t *)v21; i = *v21)
      {
        v30 = *i;
        v29 = (uint64_t *)i[1];
        *v29 = *i;
        *(_QWORD *)(v30 + 8) = v29;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::SymbolTable::SymbolTable(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 41632);
  v3 = *(_DWORD *)(v2 + 8);
  *(_DWORD *)result = v2 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  *(_BYTE *)(result + 20) = 0;
  *(_BYTE *)(result + 21) &= 0xE0u;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

{
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 41632);
  v3 = *(_DWORD *)(v2 + 8);
  *(_DWORD *)result = v2 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  *(_BYTE *)(result + 20) = 0;
  *(_BYTE *)(result + 21) &= 0xE0u;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t JSC::SymbolTable::entryFor(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;

  if (*(_QWORD *)(a1 + 48))
    goto LABEL_2;
  v7 = *(_QWORD **)(a1 + 8);
  if (!v7)
  {
    v10 = 0;
    v8 = 0;
LABEL_59:
    v9 = &v7[2 * v8];
    goto LABEL_11;
  }
  v8 = *((unsigned int *)v7 - 1);
  v9 = &v7[2 * v8];
  if (!*((_DWORD *)v7 - 3))
  {
    v10 = &v7[2 * v8];
    goto LABEL_59;
  }
  v10 = *(_QWORD **)(a1 + 8);
  if ((_DWORD)v8)
  {
    v11 = 16 * v8;
    v10 = *(_QWORD **)(a1 + 8);
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      v10 += 2;
      v11 -= 16;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_11:
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 == v10)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v15 = (unint64_t *)v10[1];
      v13 = v10 + 1;
      v14 = v15;
      if ((v15 & 1) != 0)
        v14 = v13;
      v16 = *v14;
      v17 = v16 & 0x30;
      v18 = v16 >> 6;
      if (v12 <= (int)v18 + 1)
        v19 = v18 + 1;
      else
        v19 = v12;
      if (v17 < 0x11)
        v12 = v19;
      v20 = v13 + 1;
      v10 = v9;
      if (v20 != v9)
      {
        v10 = v20;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v7);
  }
  v28 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_DWORD *)(v28 + 12) = v12;
  if (v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198BF79C8);
    }
    v29 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(v28 + 8) = v12;
    *(_QWORD *)v28 = v29;
    v30 = *(unsigned int *)(v28 + 12);
    if ((_DWORD)v30)
      bzero(v29, 8 * v30);
  }
  v31 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v28;
  if (v31)
  {
    v32 = *(_QWORD *)v31;
    if (*(_QWORD *)v31)
    {
      *(_QWORD *)v31 = 0;
      *(_DWORD *)(v31 + 8) = 0;
      WTF::fastFree(v32, v21, v22, v23, v24, v25, v26, v27);
    }
    WTF::fastFree(v31, v21, v22, v23, v24, v25, v26, v27);
  }
  v33 = *(_QWORD **)(a1 + 8);
  if (v33)
  {
    v34 = *((unsigned int *)v33 - 1);
    v35 = &v33[2 * v34];
    if (*((_DWORD *)v33 - 3))
    {
      v36 = *(_QWORD **)(a1 + 8);
      if ((_DWORD)v34)
      {
        v37 = 16 * v34;
        v36 = *(_QWORD **)(a1 + 8);
        while ((unint64_t)(*v36 + 1) <= 1)
        {
          v36 += 2;
          v37 -= 16;
          if (!v37)
          {
            v36 = v35;
            goto LABEL_43;
          }
        }
      }
      goto LABEL_43;
    }
    v36 = &v33[2 * v34];
  }
  else
  {
    v36 = 0;
    v34 = 0;
  }
  v35 = &v33[2 * v34];
LABEL_43:
  if (v33)
    v33 += 2 * *((unsigned int *)v33 - 1);
  while (v36 != v33)
  {
    v38 = (unint64_t *)v36[1];
    if ((v38 & 1) != 0)
      v38 = v36 + 1;
    v39 = *v38;
    if ((*v38 & 0x30) <= 0x10)
    {
      v40 = *(_QWORD *)(a1 + 48);
      v41 = (v39 >> 6);
      if (v41 >= *(unsigned int *)(v40 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198BF79C0);
      }
      *(_QWORD *)(*(_QWORD *)v40 + 8 * v41) = v36 + 1;
    }
    v42 = v36 + 2;
    v36 = v35;
    if (v42 != v35)
    {
      v36 = v42;
      while ((unint64_t)(*v36 + 1) <= 1)
      {
        v36 += 2;
        if (v36 == v35)
        {
          v36 = v35;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = *(_QWORD *)(a1 + 48);
  if (a3 >= (unint64_t)*(unsigned int *)(v5 + 12))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)v5 + 8 * a3);
}

JSC::SymbolTable *JSC::SymbolTable::cloneScopePart(JSC::SymbolTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  JSC::VM *v23;
  JSC::ScopedArgumentsTable *v24;
  JSC::ScopedArgumentsTable *v25;
  unint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  unsigned int v47;
  unsigned int v48;
  _DWORD *v49;
  _QWORD *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unsigned int v60;
  JSC::SymbolTable *v61;
  WTF::StringImpl ***v62;
  WTF::StringImpl **v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl **v68;
  WTF::StringImpl **v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl **v79;
  WTF::StringImpl **v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  char v100;
  BOOL v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  WTF::StringImpl **v117;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t **v127;
  uint64_t *j;
  uint64_t *v129;
  uint64_t v130;
  JSC::SymbolTable *v131;
  WTF::StringImpl *v132;
  __int16 v133;
  WTF::StringImpl *v134[3];
  uint64_t v135;

  v10 = JSC::SymbolTable::create(a2, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_BYTE *)(v10 + 21) & 0xFE | *((_BYTE *)this + 21) & 1;
  *(_BYTE *)(v10 + 21) = v18;
  v19 = v18 & 0xFFFFFFFD | (2 * ((*((unsigned __int8 *)this + 21) >> 1) & 1));
  *(_BYTE *)(v10 + 21) = v19;
  *(_BYTE *)(v10 + 21) = v19 & 0xE3 | *((_BYTE *)this + 21) & 0x1C;
  v135 = 0;
  v20 = *((_QWORD *)this + 4);
  v21 = 1;
  v131 = (JSC::SymbolTable *)v10;
  if (v20)
  {
    v22 = v10;
    *(_BYTE *)(v20 + 12) = 1;
    v23 = (JSC::VM *)*(unsigned int *)(v20 + 8);
    JSC::ScopedArgumentsTable::tryCreate(a2, v23, v12, v13, v14, v15, v16, v17);
    if (!v24)
      JSC::handleResourceExhaustion("./runtime/SymbolTable.cpp", 156, "SymbolTable *JSC::SymbolTable::cloneScopePart(VM &)", "arguments", (WTF *)0x1F, "MemoryExhaustion", "Crash intentionally because memory is exhausted.");
    v25 = v24;
    if ((_DWORD)v23)
    {
      for (i = 0; (JSC::VM *)i != v23; ++i)
      {
        v27 = *((_QWORD *)this + 4);
        if (v27)
          *(_BYTE *)(v27 + 12) = 1;
        v28 = *(_QWORD *)(v27 + 16);
        v29 = qword_1ECF4C038;
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v28 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v30 = *(unsigned int *)(v28 + 4 * i);
        v31 = (uint64_t)v25;
        if (*((_BYTE *)v25 + 12))
        {
          v31 = JSC::ScopedArgumentsTable::tryClone(v25, a2, v12, v13, v14, v15, v16, v17);
          if (!v31)
            goto LABEL_15;
          v29 = qword_1ECF4C038;
        }
        v32 = *(_QWORD *)(v31 + 16);
        if (v29 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v32 = (v32 & 0x3FFFFFFFFLL) + v29;
        *(_DWORD *)(v32 + 4 * i) = v30;
LABEL_15:
        v33 = *((_QWORD *)this + 4);
        if (v33)
          *(_BYTE *)(v33 + 12) = 1;
        if (i >= *(unsigned int *)(v33 + 36))
        {
          __break(0xC471u);
          JUMPOUT(0x198BF849CLL);
        }
        if (!*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * i))
          continue;
        v95 = v135;
        if (v135
          || (WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,unsigned int>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,unsigned int,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash(&v135, 8u), (v95 = v135) != 0))
        {
          v96 = *(_DWORD *)(v95 - 8);
        }
        else
        {
          v96 = 0;
        }
        v97 = 9
            * ((v30 + ~((_DWORD)v30 << 15) + (((_DWORD)v30 != -1) << 20)) ^ ((v30
                                                                                          + ~((_DWORD)v30 << 15)
                                                                                          + (((_DWORD)v30 != -1) << 20)) >> 10));
        v98 = (v97 ^ (v97 >> 6)) + ~((v97 ^ (v97 >> 6)) << 11);
        v99 = v96 & (v98 ^ HIWORD(v98));
        v12 = v95 + 12 * v99;
        v100 = *(_BYTE *)v12;
        v101 = *(_BYTE *)v12 == 0;
        v102 = *(_DWORD *)(v12 + 4);
        if (*(_BYTE *)v12)
          v103 = 0;
        else
          v103 = v102 == -1;
        if (!v103)
        {
          v104 = 0;
          v105 = 1;
          do
          {
            if (((_DWORD)v30 != -1) == v100 && v102 == (_DWORD)v30)
            {
              *(_DWORD *)(v12 + 8) = i;
              v22 = (unint64_t)v131;
              goto LABEL_19;
            }
            if (v101 && v102 == 0)
              v104 = v12;
            v99 = (v99 + v105) & v96;
            v12 = v95 + 12 * v99;
            v100 = *(_BYTE *)v12;
            v101 = *(_BYTE *)v12 == 0;
            v102 = *(_DWORD *)(v12 + 4);
            ++v105;
            if (*(_BYTE *)v12)
              v106 = 0;
            else
              v106 = v102 == -1;
          }
          while (!v106);
          if (v104)
          {
            *(_QWORD *)v104 = 0xFFFFFFFF00000000;
            *(_DWORD *)(v104 + 8) = 0;
            --*(_DWORD *)(v135 - 16);
            v12 = v104;
          }
        }
        *(_QWORD *)v12 = ((_DWORD)v30 != -1) | (unint64_t)(v30 << 32);
        *(_DWORD *)(v12 + 8) = i;
        v107 = v135;
        v22 = (unint64_t)v131;
        if (v135)
          v108 = *(_DWORD *)(v135 - 12) + 1;
        else
          v108 = 1;
        *(_DWORD *)(v135 - 12) = v108;
        v109 = (*(_DWORD *)(v107 - 16) + v108);
        v110 = *(unsigned int *)(v107 - 4);
        if (v110 > 0x400)
        {
          if (v110 > 2 * v109)
            continue;
LABEL_148:
          v111 = (_DWORD)v110 << (6 * v108 >= (2 * v110));
LABEL_149:
          WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,unsigned int>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,unsigned int,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash(&v135, v111);
          continue;
        }
        if (3 * v110 <= 4 * v109)
        {
          if ((_DWORD)v110)
            goto LABEL_148;
          v111 = 8;
          goto LABEL_149;
        }
LABEL_19:
        ;
      }
    }
    *(_QWORD *)(v22 + 32) = v25;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v22 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v22);
    if (v135)
      v21 = *(_DWORD *)(v135 - 12) == 0;
    else
      v21 = 1;
  }
  v34 = *((_QWORD *)this + 1);
  if (!v34)
  {
    v37 = 0;
    v35 = 0;
LABEL_84:
    v36 = (unint64_t *)(v34 + 16 * v35);
    goto LABEL_31;
  }
  v35 = *(unsigned int *)(v34 - 4);
  v36 = (unint64_t *)(v34 + 16 * v35);
  if (!*(_DWORD *)(v34 - 12))
  {
    v37 = (unint64_t *)(v34 + 16 * v35);
    goto LABEL_84;
  }
  v37 = (unint64_t *)*((_QWORD *)this + 1);
  if ((_DWORD)v35)
  {
    v38 = 16 * v35;
    v37 = (unint64_t *)*((_QWORD *)this + 1);
    while (*v37 + 1 <= 1)
    {
      v37 += 2;
      v38 -= 16;
      if (!v38)
      {
        v37 = v36;
        break;
      }
    }
  }
LABEL_31:
  if (v34)
    v39 = (unint64_t *)(v34 + 16 * *(unsigned int *)(v34 - 4));
  else
    v39 = 0;
  if (v39 != v37)
  {
    v40 = (uint64_t *)((char *)v131 + 8);
    do
    {
      v41 = v37 + 1;
      if ((v37[1] & 1) == 0)
        v41 = (unint64_t *)v37[1];
      v42 = *v41;
      if ((v42 & 0x30) > 0x10)
        goto LABEL_62;
      v43 = (WTF::StringImpl *)(v42 & 0x3FFFFFFFC2 | 0xD);
      if ((v42 & 4) == 0)
        v43 = (WTF::StringImpl *)(v42 & 0x3FFFFFFFC2 | 9);
      v134[0] = v43;
      if (!v21)
      {
        v120 = v135;
        v121 = WTF::HashMap<JSC::VarOffset,unsigned int,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(v135, 1u, v42 >> 6);
        v122 = v120 ? v120 + 12 * *(unsigned int *)(v120 - 4) : 0;
        if ((unsigned __int8 *)v122 != v121)
          JSC::SymbolTable::prepareToWatchScopedArgument(v131, (JSC::SymbolTableEntry *)v134, *((_DWORD *)v121 + 2));
      }
      v44 = *v40;
      if (*v40
        || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v40, 8u, 0), (v44 = *v40) != 0))
      {
        v45 = *(_DWORD *)(v44 - 8);
      }
      else
      {
        v45 = 0;
      }
      v46 = (_DWORD *)*v37;
      v47 = *(_DWORD *)(*v37 + 16);
      if ((v47 & 0x20) != 0)
        v47 = v46[8];
      v48 = v45 & (v47 >> 8);
      v12 = v44 + 16 * v48;
      v49 = *(_DWORD **)v12;
      if (!*(_QWORD *)v12)
        goto LABEL_54;
      v50 = 0;
      v51 = 1;
      do
      {
        if (v49 == v46)
        {
          v52 = (unint64_t)v134[0];
          goto LABEL_61;
        }
        if (v49 == (_DWORD *)-1)
          v50 = (_QWORD *)v12;
        v48 = (v48 + v51) & v45;
        v12 = v44 + 16 * v48;
        v49 = *(_DWORD **)v12;
        ++v51;
      }
      while (*(_QWORD *)v12);
      if (v50)
      {
        *v50 = 0;
        v50[1] = 1;
        --*(_DWORD *)(*v40 - 16);
        v46 = (_DWORD *)*v37;
        v12 = (uint64_t)v50;
      }
      if (v46)
LABEL_54:
        *v46 += 2;
      *(_QWORD *)v12 = v46;
      v52 = *(_QWORD *)(v12 + 8);
      *(WTF::StringImpl **)(v12 + 8) = v134[0];
      v134[0] = (WTF::StringImpl *)v52;
      v53 = *v40;
      if (*v40)
        v54 = *(_DWORD *)(v53 - 12) + 1;
      else
        v54 = 1;
      *(_DWORD *)(v53 - 12) = v54;
      v55 = *v40;
      if (*v40)
        v56 = *(_DWORD *)(v55 - 12);
      else
        v56 = 0;
      v57 = (*(_DWORD *)(v55 - 16) + v56);
      v58 = *(unsigned int *)(v55 - 4);
      if (v58 > 0x400)
      {
        if (v58 <= 2 * v57)
          goto LABEL_85;
      }
      else if (3 * v58 <= 4 * v57)
      {
        if ((_DWORD)v58)
LABEL_85:
          v60 = (_DWORD)v58 << (6 * *(_DWORD *)(v55 - 12) >= (2 * v58));
        else
          v60 = 8;
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v40, v60, (WTF::StringImpl **)v12);
      }
LABEL_61:
      if ((v52 & 1) == 0 && v52)
      {
        v112 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = 0;
        if (v112)
        {
          do
          {
            v113 = __ldaxr((unsigned int *)v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, (unsigned int *)v112));
          if (!v114)
          {
            atomic_store(1u, (unsigned int *)v112);
            v127 = (uint64_t **)(v112 + 8);
            for (j = *(uint64_t **)(v112 + 8); j != (uint64_t *)v127; j = *v127)
            {
              v130 = *j;
              v129 = (uint64_t *)j[1];
              *v129 = *j;
              *(_QWORD *)(v130 + 8) = v129;
              *j = 0;
              j[1] = 0;
            }
            WTF::fastFree(v112, v11, v12, v13, v14, v15, v16, v17);
          }
        }
        WTF::fastFree(v52, v11, v12, v13, v14, v15, v16, v17);
      }
LABEL_62:
      v59 = v37 + 2;
      v37 = v36;
      if (v59 != v36)
      {
        v37 = v59;
        while (*v37 + 1 <= 1)
        {
          v37 += 2;
          if (v37 == v36)
          {
            v37 = v36;
            break;
          }
        }
      }
    }
    while (v37 != v39);
  }
  v61 = v131;
  *((_DWORD *)v131 + 4) = *((_DWORD *)this + 4);
  v62 = (WTF::StringImpl ***)*((_QWORD *)this + 3);
  if (v62)
  {
    if (!*((_QWORD *)v131 + 3))
    {
      JSC::SymbolTable::ensureRareDataSlow(v131);
      v62 = (WTF::StringImpl ***)*((_QWORD *)this + 3);
    }
    v64 = *v62;
    if (*v62)
    {
      v66 = *((unsigned int *)v64 - 1);
      v67 = &v64[2 * v66];
      if (*((_DWORD *)v64 - 3))
      {
        v65 = *v62;
        if ((_DWORD)v66)
        {
          v123 = 16 * v66;
          v65 = *v62;
          while ((unint64_t)*v65 + 1 <= 1)
          {
            v65 += 2;
            v123 -= 16;
            if (!v123)
            {
              v65 = v67;
              break;
            }
          }
        }
        v61 = v131;
LABEL_91:
        if (v64)
          v68 = &v64[2 * *((unsigned int *)v64 - 1)];
        else
          v68 = 0;
        if (v68 != v65)
        {
          do
          {
            WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> const&,long &>(v134, *((uint64_t **)v131 + 3), v65, v65 + 1, v14, v15, v16, v17);
            v116 = v65 + 2;
            v65 = v67;
            if (v116 != v67)
            {
              v65 = v116;
              while ((unint64_t)*v65 + 1 <= 1)
              {
                v65 += 2;
                if (v65 == v67)
                {
                  v65 = v67;
                  break;
                }
              }
            }
          }
          while (v65 != v68);
          v62 = (WTF::StringImpl ***)*((_QWORD *)this + 3);
          v61 = v131;
        }
        v69 = v62[1];
        if (v69)
        {
          v71 = *((unsigned int *)v69 - 1);
          v72 = &v69[2 * v71];
          if (*((_DWORD *)v69 - 3))
          {
            v70 = v62[1];
            if ((_DWORD)v71)
            {
              v124 = 16 * v71;
              v70 = v62[1];
              while (!*(_BYTE *)v70 && (*((_DWORD *)v70 + 1) + 1) <= 1)
              {
                v70 += 2;
                v124 -= 16;
                if (!v124)
                {
                  v70 = v72;
                  break;
                }
              }
            }
            v61 = v131;
LABEL_97:
            if (v69)
              v73 = &v69[2 * *((unsigned int *)v69 - 1)];
            else
              v73 = 0;
            if (v73 != v70)
            {
              do
              {
                WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::inlineSet<JSC::VarOffset const&,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>&>((uint64_t)v134, (uint64_t *)(*((_QWORD *)v131 + 3) + 8), (unsigned __int8 *)v70, v70 + 1, v14, v15, v16, v17);
                v117 = v70 + 2;
                v70 = v72;
                if (v117 != v72)
                {
                  v70 = v117;
                  while (!*(_BYTE *)v70 && (*((_DWORD *)v70 + 1) + 1) <= 1)
                  {
                    v70 += 2;
                    if (v70 == v72)
                    {
                      v70 = v72;
                      break;
                    }
                  }
                }
              }
              while (v70 != v73);
              v62 = (WTF::StringImpl ***)*((_QWORD *)this + 3);
              v61 = v131;
            }
            v74 = v62[2];
            if (v74)
            {
              v76 = *((unsigned int *)v74 - 1);
              v77 = (uint64_t)&v74[2 * v76];
              if (*((_DWORD *)v74 - 3))
              {
                v75 = (uint64_t)v62[2];
                if ((_DWORD)v76)
                {
                  v126 = 16 * v76;
                  v75 = (uint64_t)v62[2];
                  while ((unint64_t)(*(_QWORD *)v75 + 1) <= 1)
                  {
                    v75 += 16;
                    v126 -= 16;
                    if (!v126)
                    {
                      v75 = v77;
                      break;
                    }
                  }
                }
                v61 = v131;
LABEL_103:
                if (v74)
                  v78 = &v74[2 * *((unsigned int *)v74 - 1)];
                else
                  v78 = 0;
                if (v78 != (WTF::StringImpl **)v75)
                {
                  do
                  {
                    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> const&,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>&>((uint64_t)v134, (uint64_t *)(*((_QWORD *)v131 + 3) + 16), v75, (unsigned int **)(v75 + 8), v14, v15, v16, v17);
                    v119 = v75 + 16;
                    v75 = v77;
                    if (v119 != v77)
                    {
                      v75 = v119;
                      while ((unint64_t)(*(_QWORD *)v75 + 1) <= 1)
                      {
                        v75 += 16;
                        if (v75 == v77)
                        {
                          v75 = v77;
                          break;
                        }
                      }
                    }
                  }
                  while ((WTF::StringImpl **)v75 != v78);
                  v62 = (WTF::StringImpl ***)*((_QWORD *)this + 3);
                  v61 = v131;
                }
                v79 = v62[4];
                if (v79)
                {
                  v81 = *((unsigned int *)v79 - 1);
                  v82 = &v79[2 * v81];
                  if (*((_DWORD *)v79 - 3))
                  {
                    v80 = v79;
                    if ((_DWORD)v81)
                    {
                      v115 = 16 * v81;
                      v80 = v79;
                      while ((unint64_t)*v80 + 1 <= 1)
                      {
                        v80 += 2;
                        v115 -= 16;
                        if (!v115)
                        {
                          v80 = v82;
                          goto LABEL_109;
                        }
                      }
                    }
                    goto LABEL_109;
                  }
                  v80 = &v79[2 * v81];
                }
                else
                {
                  v80 = 0;
                  v81 = 0;
                }
                v82 = &v79[2 * v81];
LABEL_109:
                if (v79)
                  v83 = &v79[2 * *((unsigned int *)v79 - 1)];
                else
                  v83 = 0;
                while (v80 != v83)
                {
                  v84 = *v80;
                  if (*v80)
                    *(_DWORD *)v84 += 2;
                  v132 = v84;
                  v133 = *((_WORD *)v80 + 4);
                  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>((uint64_t *)(*((_QWORD *)v61 + 3) + 32), &v132, &v133, (uint64_t)v134);
                  v85 = v132;
                  v132 = 0;
                  if (v85)
                  {
                    if (*(_DWORD *)v85 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)v11, v12, v13, v14, v15, v16, v17);
                      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
                    }
                    else
                    {
                      *(_DWORD *)v85 -= 2;
                    }
                  }
                  v86 = v80 + 2;
                  v80 = v82;
                  if (v86 != v82)
                  {
                    v80 = v86;
                    while ((unint64_t)*v80 + 1 <= 1)
                    {
                      v80 += 2;
                      if (v80 == v82)
                      {
                        v80 = v82;
                        break;
                      }
                    }
                  }
                }
                goto LABEL_79;
              }
              v75 = (uint64_t)&v74[2 * v76];
              v61 = v131;
            }
            else
            {
              v75 = 0;
              v76 = 0;
            }
            v77 = (uint64_t)&v74[2 * v76];
            goto LABEL_103;
          }
          v70 = &v69[2 * v71];
          v61 = v131;
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
        v72 = &v69[2 * v71];
        goto LABEL_97;
      }
      v65 = &v64[2 * v66];
      v61 = v131;
    }
    else
    {
      v65 = 0;
      v66 = 0;
    }
    v67 = &v64[2 * v66];
    goto LABEL_91;
  }
LABEL_79:
  if (v135)
    WTF::fastFree(v135 - 16, v11, v12, v13, v14, v15, v16, v17);
  return v61;
}

unint64_t JSC::SymbolTable::create(JSC::SymbolTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t SlowCase;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::SymbolTable *v16;

  v8 = (_QWORD *)((char *)this + 40048);
  SlowCase = *((_QWORD *)this + 5006);
  if (SlowCase < *((_QWORD *)this + 5007))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 5008);
  if ((SlowCase & 1) == 0)
  {
    v13 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5009);
    *((_QWORD *)this + 5007) = SlowCase + HIDWORD(v13);
    *((_QWORD *)this + 5008) = SlowCase + (int)v13;
LABEL_2:
    *v8 = SlowCase + 64;
    goto LABEL_3;
  }
  v14 = (char *)this + 40024;
  v15 = (char *)this + 192;
  v16 = this;
  JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14, v15, 64, 0, 0);
  this = v16;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v10 = v8[198];
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)SlowCase = v10 >> 4;
  *(_DWORD *)(SlowCase + 4) = v11;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_DWORD *)(SlowCase + 16) = -1;
  *(_BYTE *)(SlowCase + 20) = 0;
  *(_BYTE *)(SlowCase + 21) &= 0xE0u;
  *(_QWORD *)(SlowCase + 24) = 0;
  *(_QWORD *)(SlowCase + 32) = 0;
  *(_QWORD *)(SlowCase + 40) = 1;
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return SlowCase;
}

unsigned __int8 *WTF::HashMap<JSC::VarOffset,unsigned int,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(uint64_t a1, unsigned __int8 a2, int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v11;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = a3 + (a2 << 20) + ~(a3 << 15);
  v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  v6 = v3 & ((v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16));
  v7 = (unsigned __int8 *)(a1 + 12 * v6);
  v8 = *v7;
  v9 = *((_DWORD *)v7 + 1);
  if (v8 != a2 || v9 != a3)
  {
    v11 = 1;
    while (v8 || v9 != -1)
    {
      v6 = (v6 + v11) & v3;
      v7 = (unsigned __int8 *)(a1 + 12 * v6);
      v8 = *v7;
      v9 = *((_DWORD *)v7 + 1);
      ++v11;
      if (v8 == a2 && v9 == a3)
        return v7;
    }
    return (unsigned __int8 *)(a1 + 12 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

void JSC::SymbolTable::prepareToWatchScopedArgument(JSC::SymbolTable *this, JSC::SymbolTableEntry *a2, unsigned int a3)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *i;
  uint64_t *v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x30) == 0 && BYTE1(dword_1ECF4C240) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v6 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v6 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)a2 = v6;
    }
    else if (*(_QWORD *)(v6 + 8))
    {
      goto LABEL_10;
    }
    v15 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v15 = 1;
    *(_WORD *)(v15 + 4) = 0;
    *(_QWORD *)(v15 + 8) = v15 + 8;
    *(_QWORD *)(v15 + 16) = v15 + 8;
    v16 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v15;
    if (v16)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v16);
        v21 = (uint64_t **)(v16 + 8);
        for (i = *(uint64_t **)(v16 + 8); i != (uint64_t *)v21; i = *v21)
        {
          v24 = *i;
          v23 = (uint64_t *)i[1];
          *v23 = *i;
          *(_QWORD *)(v24 + 8) = v23;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v16, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }
LABEL_10:
  v19 = *((_QWORD *)this + 4);
  if (v19)
  {
    if ((*(_QWORD *)a2 & 1) == 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v20)
      {
        if (*(_DWORD *)(v19 + 36) > a3)
          *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * a3) = v20;
      }
    }
  }
}

void JSC::SymbolTable::prepareForTypeProfiling(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::SymbolTable::SymbolTableRareData *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  _DWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unsigned __int8 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t *v53;
  unsigned __int8 v54;
  BOOL v55;
  int v56;
  BOOL v57;
  unint64_t *v58;
  int v59;
  BOOL v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  if (!*(_QWORD *)(a1 + 24))
  {
    v9 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)(v9 + 32) = 0;
    __dmb(0xAu);
    v10 = *(JSC::SymbolTable::SymbolTableRareData **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    if (v10)
    {
      JSC::SymbolTable::SymbolTableRareData::~SymbolTableRareData(v10, v2, v3, v4, v5, v6, v7, v8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
      v9 = *(_QWORD *)(a1 + 24);
    }
    v19 = *(_QWORD *)(a1 + 8);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = (unint64_t *)(v19 + 16 * v20);
      if (*(_DWORD *)(v19 - 12))
      {
        v22 = *(unint64_t **)(a1 + 8);
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = *(unint64_t **)(a1 + 8);
          while (*v22 + 1 <= 1)
          {
            v22 += 2;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_12;
            }
          }
        }
        goto LABEL_12;
      }
      v22 = (unint64_t *)(v19 + 16 * v20);
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = (unint64_t *)(v19 + 16 * v20);
    if (!v19)
    {
      v24 = 0;
      goto LABEL_13;
    }
LABEL_12:
    v24 = (unint64_t *)(v19 + 16 * *(unsigned int *)(v19 - 4));
LABEL_13:
    if (v24 == v22)
      return;
    v25 = (uint64_t *)(v9 + 8);
    while (1)
    {
      v26 = *(_QWORD *)v9;
      if (*(_QWORD *)v9
        || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)v9, 8uLL, 0, v4, v5, v6, v7, v8), (v26 = *(_QWORD *)v9) != 0))
      {
        v27 = *(_DWORD *)(v26 - 8);
      }
      else
      {
        v27 = 0;
      }
      v28 = (_DWORD *)*v22;
      v29 = *(_DWORD *)(*v22 + 16);
      if ((v29 & 0x20) != 0)
        v29 = v28[8];
      v30 = v27 & (v29 >> 8);
      v31 = (_QWORD *)(v26 + 16 * v30);
      v32 = (_DWORD *)*v31;
      if (!*v31)
        goto LABEL_29;
      v33 = 0;
      v34 = 1;
      do
      {
        if (v32 == v28)
        {
          v31[1] = -1;
          goto LABEL_42;
        }
        if (v32 == (_DWORD *)-1)
          v33 = v31;
        v30 = (v30 + v34) & v27;
        v31 = (_QWORD *)(v26 + 16 * v30);
        v32 = (_DWORD *)*v31;
        ++v34;
      }
      while (*v31);
      if (v33)
      {
        *v33 = 0;
        v33[1] = 0;
        --*(_DWORD *)(*(_QWORD *)v9 - 16);
        v28 = (_DWORD *)*v22;
        v31 = v33;
      }
      if (v28)
LABEL_29:
        *v28 += 2;
      *v31 = v28;
      v31[1] = -1;
      v35 = *(_QWORD *)v9;
      v36 = *(_QWORD *)v9 ? *(_DWORD *)(v35 - 12) + 1 : 1;
      *(_DWORD *)(v35 - 12) = v36;
      v37 = *(_QWORD *)v9;
      v38 = *(_QWORD *)v9 ? *(_DWORD *)(v37 - 12) : 0;
      v39 = (*(_DWORD *)(v37 - 16) + v38);
      v40 = *(unsigned int *)(v37 - 4);
      if (v40 <= 0x400)
        break;
      if (v40 <= 2 * v39)
        goto LABEL_37;
LABEL_42:
      v42 = v22 + 1;
      if ((v22[1] & 1) == 0)
        v42 = (unint64_t *)v22[1];
      v43 = *v42;
      v44 = *v42 & 0x30;
      if (v44 == 32)
        v45 = 2;
      else
        v45 = 3;
      if (v44 < 0x11)
        v46 = 1;
      else
        v46 = v45;
      v47 = *v25;
      if (*v25
        || (WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash((uint64_t *)(v9 + 8), 8u, 0), (v47 = *v25) != 0))
      {
        v48 = *(_DWORD *)(v47 - 8);
      }
      else
      {
        v48 = 0;
      }
      v49 = v43 >> 6;
      v50 = ~((v43 >> 6) << 15) + (v43 >> 6) + (v46 << 20);
      v51 = (9 * (v50 ^ (v50 >> 10))) ^ ((9 * (v50 ^ (v50 >> 10))) >> 6);
      v52 = v48 & ((v51 + ~(v51 << 11)) ^ ((v51 + ~(v51 << 11)) >> 16));
      v53 = (unint64_t *)(v47 + 16 * v52);
      v54 = *(_BYTE *)v53;
      v55 = *(_BYTE *)v53 == 0;
      v56 = *((_DWORD *)v53 + 1);
      if (*(_BYTE *)v53)
        v57 = 0;
      else
        v57 = v56 == -1;
      if (!v57)
      {
        v58 = 0;
        v59 = 1;
        while (v54 != v46 || v56 != (_DWORD)v49)
        {
          if (v55 && v56 == 0)
            v58 = v53;
          v52 = (v52 + v59) & v48;
          v53 = (unint64_t *)(v47 + 16 * v52);
          v54 = *(_BYTE *)v53;
          v55 = *(_BYTE *)v53 == 0;
          v56 = *((_DWORD *)v53 + 1);
          ++v59;
          if (*(_BYTE *)v53)
            v61 = 0;
          else
            v61 = v56 == -1;
          if (v61)
          {
            if (v58)
            {
              *v58 = 0xFFFFFFFF00000000;
              v58[1] = 0;
              --*(_DWORD *)(*v25 - 16);
              v53 = v58;
            }
            goto LABEL_71;
          }
        }
        v71 = (_DWORD *)*v22;
        if (*v22)
          *v71 += 2;
        v72 = (WTF::StringImpl *)v53[1];
        v53[1] = (unint64_t)v71;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::~StringImpl(v72, v2, (uint64_t)v31, v4, v5, v6, v7, v8);
            WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          }
          else
          {
            *(_DWORD *)v72 -= 2;
          }
        }
        goto LABEL_92;
      }
LABEL_71:
      *v53 = v46 | (v49 << 32);
      v62 = (_DWORD *)*v22;
      if (*v22)
        *v62 += 2;
      v63 = (WTF::StringImpl *)v53[1];
      v53[1] = (unint64_t)v62;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, v2, (uint64_t)v31, v4, v5, v6, v7, v8);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
      v64 = *v25;
      if (*v25)
        v65 = *(_DWORD *)(v64 - 12) + 1;
      else
        v65 = 1;
      *(_DWORD *)(v64 - 12) = v65;
      v66 = *v25;
      if (*v25)
        v67 = *(_DWORD *)(v66 - 12);
      else
        v67 = 0;
      v68 = (*(_DWORD *)(v66 - 16) + v67);
      v69 = *(unsigned int *)(v66 - 4);
      if (v69 > 0x400)
      {
        if (v69 > 2 * v68)
          goto LABEL_92;
LABEL_83:
        v70 = (_DWORD)v69 << (6 * *(_DWORD *)(v66 - 12) >= (2 * v69));
LABEL_91:
        WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash((uint64_t *)(v9 + 8), v70, (unsigned __int8 *)v53);
        goto LABEL_92;
      }
      if (3 * v69 <= 4 * v68)
      {
        if ((_DWORD)v69)
          goto LABEL_83;
        v70 = 8;
        goto LABEL_91;
      }
LABEL_92:
      v73 = v22 + 2;
      v22 = v21;
      if (v73 != v21)
      {
        v22 = v73;
        while (*v22 + 1 <= 1)
        {
          v22 += 2;
          if (v22 == v21)
          {
            v22 = v21;
            break;
          }
        }
      }
      if (v22 == v24)
        return;
    }
    if (3 * v40 > 4 * v39)
      goto LABEL_42;
    if ((_DWORD)v40)
LABEL_37:
      v41 = ((_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40)));
    else
      v41 = 8;
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)v9, v41, (uint64_t)v31, v4, v5, v6, v7, v8);
    goto LABEL_42;
  }
}

uint64_t JSC::SymbolTable::setRareDataCodeBlock(JSC::SymbolTable *this, JSC::CodeBlock *a2)
{
  uint64_t result;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::SymbolTable::SymbolTableRareData *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_QWORD *)(result + 32) = 0;
    __dmb(0xAu);
    v13 = (JSC::SymbolTable::SymbolTableRareData *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = result;
    if (v13)
    {
      JSC::SymbolTable::SymbolTableRareData::~SymbolTableRareData(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      result = *((_QWORD *)this + 3);
    }
  }
  v5 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(result + 24) = a2;
  if (*(_DWORD *)(v5 + 760) >= *((unsigned __int8 *)this + 7))
    return JSC::Heap::writeBarrierSlowPath(v5 + 192, (unint64_t)this);
  return result;
}

WTF::StringImpl *JSC::SymbolTable::uniqueIDForVariable(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  int v51;
  WTF *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v8 = *(uint64_t **)(a1 + 24);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198BF90DCLL);
  }
  v9 = *v8;
  if (!*v8)
    return (WTF::StringImpl *)-2;
  v12 = *(_DWORD *)(v9 - 8);
  v13 = *((_DWORD *)this + 4);
  if ((v13 & 0x20) != 0)
    v13 = *((_DWORD *)this + 8);
  v14 = v12 & (v13 >> 8);
  v15 = *(WTF::StringImpl **)(v9 + 16 * v14);
  if (v15 != this)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v12;
      v15 = *(WTF::StringImpl **)(v9 + 16 * v14);
      ++v16;
      if (v15 == this)
        goto LABEL_11;
    }
    v14 = *(unsigned int *)(v9 - 4);
  }
LABEL_11:
  if (v14 == *(_DWORD *)(v9 - 4))
    return (WTF::StringImpl *)-2;
  v17 = *(WTF::StringImpl **)(v9 + 16 * v14 + 8);
  if (v17 != (WTF::StringImpl *)-1)
    return v17;
  v19 = *(_QWORD *)(a4 + 93168);
  v17 = *(WTF::StringImpl **)(v19 + 24);
  *(_QWORD *)(v19 + 24) = (char *)v17 + 1;
  if (this)
    *(_DWORD *)this += 2;
  v20 = *v8;
  if (*v8
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v8, 8uLL, 0, a4, a5, a6, a7, a8), (v20 = *v8) != 0))
  {
    v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_DWORD *)this + 4);
  if ((v22 & 0x20) != 0)
    v22 = *((_DWORD *)this + 8);
  v23 = v21 & (v22 >> 8);
  v24 = (WTF::StringImpl **)(v20 + 16 * v23);
  v25 = *v24;
  if (!*v24)
  {
LABEL_30:
    *v24 = this;
    v24[1] = v17;
    v28 = *v8;
    if (*v8)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v8;
    if (*v8)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
      {
LABEL_46:
        v35 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16);
        if (!this)
          goto LABEL_47;
        goto LABEL_42;
      }
    }
    else
    {
      if (3 * v33 > 4 * v32)
        goto LABEL_46;
      if (!(_DWORD)v33)
      {
        v34 = 8;
        goto LABEL_45;
      }
    }
    v34 = ((_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33)));
LABEL_45:
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v8, v34, (uint64_t)v24, a4, a5, a6, a7, a8);
    goto LABEL_46;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != this)
  {
    if (v25 == (WTF::StringImpl *)-1)
      v26 = v24;
    v23 = (v23 + v27) & v21;
    v24 = (WTF::StringImpl **)(v20 + 16 * v23);
    v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v24 = v26;
      }
      goto LABEL_30;
    }
  }
  v24[1] = v17;
  if (!this)
  {
    v35 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16);
    goto LABEL_47;
  }
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::~StringImpl(this, a2, (uint64_t)v24, a4, a5, a6, a7, a8);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)this -= 2;
  }
  v35 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16);
LABEL_42:
  *(_DWORD *)this += 2;
LABEL_47:
  v43 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v43 = 1;
  *(_QWORD *)(v43 + 4) = 0;
  *(_QWORD *)(v43 + 20) = 0;
  *(_QWORD *)(v43 + 12) = 0;
  *(_DWORD *)(v43 + 28) = 0;
  v44 = *v35;
  if (*v35
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v35, 8uLL, 0, v38, v39, v40, v41, v42), (v44 = *v35) != 0))
  {
    v45 = *(_DWORD *)(v44 - 8);
  }
  else
  {
    v45 = 0;
  }
  v46 = *((_DWORD *)this + 4);
  if ((v46 & 0x20) != 0)
    v46 = *((_DWORD *)this + 8);
  v47 = v45 & (v46 >> 8);
  v48 = (WTF::StringImpl **)(v44 + 16 * v47);
  v49 = *v48;
  if (!*v48)
  {
LABEL_60:
    v52 = v48[1];
    *v48 = this;
    v48[1] = (WTF::StringImpl *)v43;
    if (v52)
      WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v52, v36, v37, v38, v39, v40, v41, v42);
    v53 = *v35;
    if (*v35)
      v54 = *(_DWORD *)(v53 - 12) + 1;
    else
      v54 = 1;
    *(_DWORD *)(v53 - 12) = v54;
    v55 = *v35;
    if (*v35)
      v56 = *(_DWORD *)(v55 - 12);
    else
      v56 = 0;
    v57 = (*(_DWORD *)(v55 - 16) + v56);
    v58 = *(unsigned int *)(v55 - 4);
    if (v58 > 0x400)
    {
      if (v58 > 2 * v57)
        return v17;
    }
    else
    {
      if (3 * v58 > 4 * v57)
        return v17;
      if (!(_DWORD)v58)
      {
        v59 = 8;
        goto LABEL_77;
      }
    }
    v59 = ((_DWORD)v58 << (6 * *(_DWORD *)(v55 - 12) >= (2 * v58)));
LABEL_77:
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v35, v59, (uint64_t)v48, v38, v39, v40, v41, v42);
    return v17;
  }
  v50 = 0;
  v51 = 1;
  while (v49 != this)
  {
    if (v49 == (WTF::StringImpl *)-1)
      v50 = v48;
    v47 = (v47 + v51) & v45;
    v48 = (WTF::StringImpl **)(v44 + 16 * v47);
    v49 = *v48;
    ++v51;
    if (!*v48)
    {
      if (v50)
      {
        *v50 = 0;
        v50[1] = 0;
        --*(_DWORD *)(*v35 - 16);
        v48 = v50;
      }
      goto LABEL_60;
    }
  }
  v60 = v48[1];
  v48[1] = (WTF::StringImpl *)v43;
  if (v60)
    WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v60, v36, v37, v38, v39, v40, v41, v42);
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, (WTF::AtomStringImpl *)v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
  return v17;
}

uint64_t JSC::SymbolTable::globalTypeSetForVariable@<X0>(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>)
{
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  unsigned int v19;

  if (*(_QWORD *)(a1 + 24))
  {
    result = (uint64_t)JSC::SymbolTable::uniqueIDForVariable(a1, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 16);
    if (v13)
    {
      v14 = *(v13 - 2);
      v15 = *((_DWORD *)a3 + 4);
      if ((v15 & 0x20) != 0)
        v15 = *((_DWORD *)a3 + 8);
      v16 = v14 & (v15 >> 8);
      v17 = *(WTF::StringImpl **)&v13[4 * v16];
      if (v17 != a3)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v14;
          v17 = *(WTF::StringImpl **)&v13[4 * v16];
          ++v18;
          if (v17 == a3)
            goto LABEL_11;
        }
        v16 = *(v13 - 1);
      }
LABEL_11:
      if (v16 == *(v13 - 1))
      {
        v13 = 0;
      }
      else
      {
        v13 = *(unsigned int **)&v13[4 * v16 + 2];
        if (v13)
        {
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
        }
      }
    }
    *a9 = v13;
  }
  else
  {
    result = 295;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::SymbolTable::ensureRareDataSlow(JSC::SymbolTable *this)
{
  uint64_t result;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::SymbolTable::SymbolTableRareData *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 32) = 0;
  __dmb(0xAu);
  v10 = (JSC::SymbolTable::SymbolTableRareData *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = result;
  if (v10)
  {
    JSC::SymbolTable::SymbolTableRareData::~SymbolTableRareData(v10, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    return *((_QWORD *)this + 3);
  }
  return result;
}

uint64_t JSC::SyntheticModuleRecord::visitChildren(JSC::SyntheticModuleRecord *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;
  char v7;

  v5[0] = a2;
  v5[1] = this;
  v7 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v6 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v5;
    result = JSC::AbstractModuleRecord::visitChildren(this, a2, a3);
    *(_QWORD *)(v5[0] + 88) = v6;
  }
  return result;
}

uint64_t JSC::SyntheticModuleRecord::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::SyntheticModuleRecord::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::SyntheticModuleRecord::link()
{
  return 1;
}

uint64_t JSC::SyntheticModuleRecord::evaluate(JSC::SyntheticModuleRecord *this, JSC::JSGlobalObject *a2)
{
  return 10;
}

unint64_t JSC::SyntheticModuleRecord::parseJSONModule(unint64_t a1, _DWORD **a2, unsigned int *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  _DWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t SlowCase;
  int v33;
  _DWORD *v34;
  JSC::VM *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t **v133;
  uint64_t *j;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t (*v163)(uint64_t *);
  uint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t (*v169)(uint64_t *);
  uint64_t *v170;
  int v171;
  WTF::AtomStringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF *v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *i;
  uint64_t *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  _DWORD v201[2];
  char *v202;
  _OWORD v203[4];
  uint64_t v204;
  WTF *v205;
  int v206;
  unsigned int v207;
  _QWORD v208[4];
  uint64_t v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  _QWORD v215[4];

  v10 = *(_QWORD *)(a1 + 56);
  if (!*(_QWORD *)a3)
  {
    v15 = 0;
    v17 = 0x100000000;
    goto LABEL_12;
  }
  v11 = a3[2];
  v12 = a3[3];
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3);
  if (v14 <= v11)
  {
    v17 = 0x100000000;
    v15 = "";
    goto LABEL_12;
  }
  v15 = (const char *)v13;
  v16 = v12 - v11;
  if ((int)v14 - (int)v11 <= v12 - v11)
  {
    v16 = v14 - v11;
    if (!(_DWORD)v11)
    {
      v17 = v14;
      goto LABEL_12;
    }
  }
  v17 = v16;
  v18 = v14 - v11;
  if ((v14 & 0xFF00000000) == 0)
  {
    if (v18 >= v17)
    {
      v15 = (const char *)(v13 + 2 * v11);
      goto LABEL_12;
    }
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  if (v18 < v17)
    goto LABEL_134;
  v15 = (const char *)(v13 + v11);
  v17 |= 0x100000000uLL;
LABEL_12:
  v26 = JSC::JSONParseWithException((JSC::JSGlobalObject *)a1, (uint64_t)v15, v17, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v162 = *(_DWORD *)(v10 + 80);
    if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v27 = *(_QWORD *)(a1 + 56);
  v28 = (_QWORD **)(v27 + 40648);
  v204 = 0;
  v205 = (WTF *)v208;
  v206 = 4;
  v201[1] = 8;
  v202 = (char *)v203 + 8;
  memset(v203, 0, sizeof(v203));
  v29 = *(_DWORD **)(*(_QWORD *)(v27 + 41952) + 192);
  if (v29)
    *v29 += 2;
  v208[0] = v29;
  v207 = 1;
  *((_QWORD *)&v203[0] + 1) = v26;
  v201[0] = 1;
  v30 = *(_QWORD *)(a1 + 1104);
  if ((v30 & 1) != 0)
  {
    v163 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v164 = (uint64_t *)(a1 - 16);
    else
      v164 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v209 = *v164;
    v210 = (WTF::StringImpl *)a1;
    v211 = (WTF::StringImpl *)(a1 + 1104);
    v30 = v163(&v209);
  }
  v31 = *v28;
  if (!*v28)
    v31 = (_QWORD *)JSC::GCClient::Heap::syntheticModuleRecordSpaceSlow((JSC::Heap **)(v27 + 37552));
  SlowCase = v31[3];
  if (SlowCase < v31[4])
    goto LABEL_19;
  SlowCase = v31[5];
  if ((SlowCase & 1) == 0)
  {
    v165 = *(_QWORD *)(SlowCase + 8) ^ v31[6];
    v31[4] = SlowCase + HIDWORD(v165);
    v31[5] = SlowCase + (int)v165;
LABEL_19:
    v31[3] = SlowCase + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v27, v19, v20, v21, v22, v23, v24, v25);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v31, v27 + 192, 128, 0, 0, v193, v194, v195);
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  v33 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)SlowCase = v30 >> 4;
  *(_DWORD *)(SlowCase + 4) = v33;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  v34 = *a2;
  if (*a2)
    *v34 += 2;
  *(_QWORD *)(SlowCase + 32) = v34;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 56) = 0u;
  *(_OWORD *)(SlowCase + 72) = 0u;
  *(_OWORD *)(SlowCase + 88) = 0u;
  *(_OWORD *)(SlowCase + 104) = 0u;
  *(_QWORD *)(SlowCase + 120) = 0;
  JSC::AbstractModuleRecord::finishCreation((JSC::AbstractModuleRecord *)SlowCase, a1, (JSC::VM *)v27, v21, v22, v23, v24, v25);
  v42 = JSC::SymbolTable::create((JSC::SymbolTable *)v27, v35, v36, v37, v38, v39, v40, v41);
  v48 = (*(_DWORD *)(v42 + 16) + 1);
  *(_DWORD *)(v42 + 16) = v48;
  v49 = *(_DWORD **)(*(_QWORD *)(v27 + 41952) + 112);
  v214 = (WTF::StringImpl *)((v48 << 6) | 9);
  if ((_DWORD)v48 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198BF9C2CLL);
  }
  v50 = v42;
  if (*(_QWORD *)(v42 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x198BF9A90);
  }
  if (v49)
    *v49 += 2;
  v215[0] = v49;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>((uint64_t *)(v42 + 8), (WTF::AtomStringImpl *)v215, &v214, v43, v44, v45, v46, v47, (uint64_t)&v209);
  v58 = (WTF::StringImpl *)v215[0];
  v215[0] = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v214;
  if ((v214 & 1) == 0 && v214)
  {
    v166 = *((_QWORD *)v214 + 1);
    *((_QWORD *)v214 + 1) = 0;
    if (v166)
    {
      do
      {
        v167 = __ldaxr((unsigned int *)v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, (unsigned int *)v166));
      if (!v168)
      {
        atomic_store(1u, (unsigned int *)v166);
        v196 = (uint64_t **)(v166 + 8);
        for (i = *(uint64_t **)(v166 + 8); i != (uint64_t *)v196; i = *v196)
        {
          v199 = *i;
          v198 = (uint64_t *)i[1];
          *v198 = *i;
          *(_QWORD *)(v199 + 8) = v198;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v166, v51, v52, v53, v54, v55, v56, v57);
      }
    }
    WTF::fastFree((unint64_t)v59, v51, v52, v53, v54, v55, v56, v57);
  }
  if (v207)
  {
    v60 = v205;
    v61 = (WTF *)((char *)v205 + 8 * v207);
    while (1)
    {
      v62 = (*(_DWORD *)(v50 + 16) + 1);
      *(_DWORD *)(v50 + 16) = v62;
      v63 = *(WTF::StringImpl **)v60;
      v214 = (WTF::StringImpl *)((v62 << 6) | 9);
      if ((_DWORD)v62 == -1)
        break;
      if (*(_QWORD *)(v50 + 48))
      {
        __break(0xC471u);
        JUMPOUT(0x198BF99A8);
      }
      if (v63)
        *(_DWORD *)v63 += 2;
      v215[0] = v63;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>((uint64_t *)(v50 + 8), (WTF::AtomStringImpl *)v215, &v214, v53, v54, v55, v56, v57, (uint64_t)&v209);
      v71 = (WTF::StringImpl *)v215[0];
      v215[0] = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
      v72 = v214;
      if ((v214 & 1) == 0 && v214)
      {
        v130 = *((_QWORD *)v214 + 1);
        *((_QWORD *)v214 + 1) = 0;
        if (v130)
        {
          do
          {
            v131 = __ldaxr((unsigned int *)v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, (unsigned int *)v130));
          if (!v132)
          {
            v200 = v72;
            atomic_store(1u, (unsigned int *)v130);
            v133 = (uint64_t **)(v130 + 8);
            for (j = *(uint64_t **)(v130 + 8); j != (uint64_t *)v133; j = *v133)
            {
              v136 = *j;
              v135 = (uint64_t *)j[1];
              *v135 = *j;
              *(_QWORD *)(v136 + 8) = v135;
              *j = 0;
              j[1] = 0;
            }
            WTF::fastFree(v130, v64, v65, v66, v67, v68, v69, v70);
            v72 = v200;
          }
        }
        WTF::fastFree((unint64_t)v72, v64, v65, v66, v67, v68, v69, v70);
      }
      LODWORD(v209) = 0;
      v73 = *(WTF::StringImpl **)v60;
      if (*(_QWORD *)v60)
      {
        v74 = *(_DWORD *)v73;
        v211 = 0;
        v212 = 0;
        *(_DWORD *)v73 = v74 + 6;
      }
      else
      {
        v211 = 0;
        v212 = 0;
      }
      v210 = v73;
      v213 = v73;
      v214 = v73;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ExportEntry const&>((uint64_t *)(SlowCase + 48), (WTF::AtomStringImpl *)&v214, (uint64_t)&v209, v66, v67, v68, v69, v70, (uint64_t)v215);
      v77 = v214;
      v214 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
        {
          WTF::StringImpl::~StringImpl(v77, v75, v76, v53, v54, v55, v56, v57);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v77 -= 2;
        }
      }
      v78 = v213;
      v213 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
        {
          WTF::StringImpl::~StringImpl(v78, v75, v76, v53, v54, v55, v56, v57);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        else
        {
          *(_DWORD *)v78 -= 2;
        }
      }
      v79 = v212;
      v212 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, v75, v76, v53, v54, v55, v56, v57);
          WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
      }
      v80 = v211;
      v211 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
        {
          WTF::StringImpl::~StringImpl(v80, v75, v76, v53, v54, v55, v56, v57);
          WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        }
        else
        {
          *(_DWORD *)v80 -= 2;
        }
      }
      v81 = v210;
      v210 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::~StringImpl(v81, v75, v76, v53, v54, v55, v56, v57);
          WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
        }
        else
        {
          *(_DWORD *)v81 -= 2;
        }
      }
      v60 = (WTF *)((char *)v60 + 8);
      if (v60 == v61)
        goto LABEL_75;
    }
LABEL_135:
    __break(0xC471u);
    JUMPOUT(0x198BF9BF0);
  }
LABEL_75:
  v137 = *(_QWORD *)(a1 + 784);
  if ((v137 & 1) != 0)
  {
    v169 = *(uint64_t (**)(uint64_t *))(v137 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v170 = (uint64_t *)(a1 - 16);
    else
      v170 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v209 = *v170;
    v210 = (WTF::StringImpl *)a1;
    v211 = (WTF::StringImpl *)(a1 + 784);
    v137 = v169(&v209);
  }
  v138 = JSC::JSModuleEnvironment::create((JSC *)v27, v137, 0, v50, 0, SlowCase, v56, v57);
  v146 = v138;
  v147 = *(_QWORD *)(a1 + 56);
  v148 = *(_QWORD *)(SlowCase + 104);
  if (!v148)
    goto LABEL_77;
  LOBYTE(v209) = 0;
  JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>(v138, a1, *(_QWORD *)(*(_QWORD *)(v147 + 41952) + 112), v148, 0, 1, &v209, v144, v145);
  if (!*(_DWORD *)(v147 + 80))
    goto LABEL_77;
  v161 = *(_DWORD *)(v147 + 80);
  if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v147 + 64), 7u, v140, v148, v141, v142, v143, v144);
  if (!*(_QWORD *)(v147 + 16))
  {
LABEL_77:
    *(_QWORD *)(SlowCase + 112) = v146;
    if (v146 && *(_DWORD *)(v147 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v147 + 192, SlowCase);
  }
  if (*(_DWORD *)(v27 + 80))
  {
    v171 = *(_DWORD *)(v27 + 80);
    if ((v171 & 0x27) != 0 && (v171 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v140, v148, v141, v142, v143, v144);
    if (*(_QWORD *)(v27 + 16))
      goto LABEL_117;
  }
  if (v207)
  {
    v149 = 0;
    while (1)
    {
      v150 = v149 >= v201[0] ? 10 : *(_QWORD *)&v202[8 * v149];
      v151 = *((_QWORD *)v205 + v149);
      LOBYTE(v209) = 0;
      JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>(v146, a1, v151, v150, 0, 1, &v209, v144, v145);
      if (*(_DWORD *)(v27 + 80))
      {
        v152 = *(_DWORD *)(v27 + 80);
        if ((v152 & 0x27) != 0 && (v152 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v140, v148, v141, v142, v143, v144);
        if (*(_QWORD *)(v27 + 16))
          break;
      }
      if (++v149 >= v207)
        goto LABEL_118;
    }
LABEL_117:
    SlowCase = 0;
  }
LABEL_118:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v201, v139, v140, v148, v141, v142, v143, v144);
  if (v207)
  {
    v179 = v205;
    v180 = 8 * v207;
    do
    {
      v181 = *(WTF::StringImpl **)v179;
      *(_QWORD *)v179 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
        {
          WTF::StringImpl::~StringImpl(v181, v172, v173, v174, v175, v176, v177, v178);
          WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
        }
        else
        {
          *(_DWORD *)v181 -= 2;
        }
      }
      v179 = (WTF *)((char *)v179 + 8);
      v180 -= 8;
    }
    while (v180);
  }
  v190 = v205;
  if (v208 != (_QWORD *)v205 && v205 != 0)
  {
    v205 = 0;
    v206 = 0;
    WTF::fastFree((unint64_t)v190, v172, v173, v174, v175, v176, v177, v178);
  }
  return SlowCase;
}

void JSC::TemplateObjectDescriptor::~TemplateObjectDescriptor(JSC::TemplateObjectDescriptor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, v9, v10, v11, v12, v13, v14, v15);
}

unint64_t JSC::TemporalCalendar::create(JSC::TemporalCalendar *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _QWORD *v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = (int)a3;
  v11 = (_QWORD *)*((_QWORD *)this + 5101);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::temporalCalendarSpaceSlow((JSC::Heap **)this + 4694);
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v14);
    v11[5] = result + (int)v14;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)this + 192, 32, 0, 0, v15, v16, v17);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = v8;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::TemporalCalendar::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalCalendar::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::TemporalCalendar::from(uint64_t a1, unint64_t a2, const WTF::String *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  int hasProperty;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  JSC::Exception *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  uint64_t (*v52)(char **);
  char **v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t (*v71)(char **);
  char **v72;
  uint64_t (*v73)(char **);
  char **v74;
  int v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  int v80;
  uint64_t v81;
  int v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  char v85;
  WTF::StringImpl *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;

  v9 = a2;
  v84 = a2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    goto LABEL_12;
  v12 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v12 == &JSC::TemporalPlainDate::s_info)
    goto LABEL_39;
  if (v12 == &JSC::TemporalPlainDateTime::s_info)
  {
    v48 = a2 + 32;
    v22 = *(_QWORD *)(a2 + 32);
    if ((v22 & 1) == 0)
      return v22;
LABEL_50:
    v52 = *(uint64_t (**)(char **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    v53 = (char **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v53 = (char **)(a2 - 16);
    v87 = *v53;
    v88 = a2;
    v89 = v48;
    return v52(&v87);
  }
  if (v12 == &JSC::TemporalPlainTime::s_info)
  {
LABEL_39:
    v48 = a2 + 24;
    v22 = *(_QWORD *)(a2 + 24);
    if ((v22 & 1) == 0)
      return v22;
    goto LABEL_50;
  }
  v13 = v11 + 41952;
  hasProperty = JSC::JSObject::hasProperty(a2, a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 968), a4, a5, a6, a7, a8);
  v21 = hasProperty;
  if (*(_DWORD *)(v11 + 80))
  {
    v76 = *(_DWORD *)(v11 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
    v77 = *(_QWORD *)(v11 + 16);
    v78 = v77 == 0;
    if (v77)
      v79 = 0;
    else
      v79 = v21;
    if (v78)
      v22 = v9;
    else
      v22 = 0;
    if ((v79 & 1) == 0)
      return v22;
  }
  else
  {
    v22 = v9;
    if (!hasProperty)
      return v22;
  }
  v23 = JSC::JSObject::get((unsigned int *)v9, a1, *(_QWORD *)(*(_QWORD *)v13 + 968), v16, v17, v18, v19, v20);
  v9 = v23;
  v84 = v23;
  if ((v23 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v23 + 5) >= 0x17u)
  {
    v24 = JSC::JSObject::hasProperty(v23, a1, *(_QWORD *)(*(_QWORD *)v13 + 968), a4, a5, a6, a7, a8);
    v25 = v24;
    if (*(_DWORD *)(v11 + 80))
    {
      v80 = *(_DWORD *)(v11 + 80);
      if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v81 = *(_QWORD *)(v11 + 16);
      if (v81)
        v82 = 1;
      else
        v82 = v25;
      if (v82)
        v22 = 0;
      else
        v22 = v9;
      if (v81 || !v82)
        return v22;
    }
    else
    {
      v22 = v9;
      if (!v24)
        return v22;
    }
  }
LABEL_12:
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v26 = *(int **)(v9 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *JSC::JSRopeString::resolveRope(v9, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
      if (!v26)
        goto LABEL_17;
    }
    else if (!v26)
    {
LABEL_17:
      v83 = (WTF::StringImpl *)v26;
      goto LABEL_18;
    }
    *v26 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v84, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v83);
LABEL_18:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_19;
  v70 = *(_DWORD *)(v11 + 80);
  if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_19:
    if (v83)
    {
      v27 = (unsigned __int8 *)*((_QWORD *)v83 + 1);
      v28 = *((unsigned int *)v83 + 1) | ((unint64_t)((*((_DWORD *)v83 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v27 = 0;
      v28 = 0x100000000;
    }
    v29 = atomic_load(&JSC::intlAvailableCalendars(void)::initializeOnce);
    if (v29 != -1)
    {
      v87 = &v85;
      v86 = (WTF::StringImpl *)&v87;
      std::__call_once(&JSC::intlAvailableCalendars(void)::initializeOnce, &v86, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableCalendars(void)::$_0 &&>>);
    }
    if (dword_1EE34300C)
    {
      v30 = 0;
      do
      {
        v31 = *(_QWORD *)(JSC::intlAvailableCalendars(void)::availableCalendars + 8 * v30);
        if (v31)
        {
          v32 = *(unsigned int *)(v31 + 16);
          v33 = *(unsigned __int8 **)(v31 + 8);
          v31 = *(unsigned int *)(v31 + 4);
          v34 = (v32 >> 2) & 1;
        }
        else
        {
          v33 = 0;
          v34 = 1;
        }
        if (WTF::operator==(v33, v31 | (v34 << 32), v27, v28))
        {
          v36 = 0;
          goto LABEL_42;
        }
        ++v30;
      }
      while (v30 < dword_1EE34300C);
    }
    v30 = *(_QWORD *)(a1 + 56);
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x1300000002;
    *(_QWORD *)(v35 + 8) = "invalid calendar ID";
    *(_DWORD *)(v35 + 16) = 4;
    v86 = (WTF::StringImpl *)v35;
    v36 = *(_QWORD *)(a1 + 56);
    v38 = a1 + 128;
    v37 = *(_QWORD *)(a1 + 128);
    if ((v37 & 1) != 0)
      goto LABEL_67;
    while (1)
    {
      v39 = JSC::ErrorInstance::create((JSC::Heap **)v36, v37, &v86, 0, 0, 0, 2, 1);
      v46 = (JSC::Exception *)v39;
      if ((v39 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C)))
      {
        v46 = (JSC::Exception *)JSC::Exception::create(v30, (JSC::VM *)v39, 0, v40, v41, v42, v43, v44);
      }
      JSC::VM::throwException((JSC::VM *)v30, (JSC::JSGlobalObject *)a1, v46, v45, v40, v41, v42, v43, v44);
      v47 = v86;
      v86 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
      if (*(_DWORD *)(v11 + 80))
      {
        v75 = *(_DWORD *)(v11 + 80);
        if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
          break;
      }
      v30 = 0;
      v36 = 1;
LABEL_42:
      v49 = *(_QWORD *)(a1 + 416);
      if ((v49 & 1) != 0)
      {
        v71 = *(uint64_t (**)(char **))(v49 & 0xFFFFFFFFFFFFFFFCLL);
        v72 = (char **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v72 = (char **)(a1 - 16);
        v87 = *v72;
        v88 = a1;
        v89 = a1 + 416;
        v49 = v71(&v87);
        if (!(_DWORD)v36)
        {
LABEL_44:
          v22 = JSC::TemporalCalendar::create((JSC::TemporalCalendar *)v11, (JSC::VM *)v49, (JSC::Structure *)v30, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_45;
        }
      }
      else if (!(_DWORD)v36)
      {
        goto LABEL_44;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_67:
      v73 = *(uint64_t (**)(char **))(v37 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v74 = (char **)(a1 - 16);
      else
        v74 = (char **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v87 = *v74;
      v88 = a1;
      v89 = v38;
      v37 = v73(&v87);
    }
  }
  v22 = 0;
LABEL_45:
  v50 = v83;
  v83 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  return v22;
}

unint64_t JSC::TemporalCalendar::getTemporalCalendarWithISODefault(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  JSC::VM *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  char **v45;
  unint64_t result;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t (*v55)(JSC::VM **);
  JSC::VM **v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  int v67;
  JSC::TemporalCalendar *v68;
  unint64_t v69;
  JSC::Structure *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t **v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int v79;
  JSC::VMTraps *v80;
  JSC::VMTraps *v81;
  char *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::VM *v87;
  JSC::VMTraps *v88;
  char *v89;
  _BYTE *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  JSC::VM *v109;
  JSC::VMTraps *v110;
  char *v111;
  _BYTE *v112;
  char OwnStaticPropertySlot;
  char *v114;
  uint64_t v115;
  char *v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  size_t v128;
  char *v129;
  char *v130;
  int v131;
  uint64_t v132;
  unsigned __int8 *v133;
  JSC::VM **v134;
  uint64_t v135;
  int v136;
  int v137;
  JSC::VM **p_dst;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int16 *v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t (*v150)(JSC::VM **);
  JSC::VM **v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t Index;
  int v172;
  char v173;
  int v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  unsigned __int16 *v180;
  unsigned int v181;
  unsigned __int8 *v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  char v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  char v198;
  int v199;
  uint64_t v201;
  unsigned __int8 *v202;
  unsigned int v203;
  uint64_t v204;
  _DWORD *v205;
  int v206;
  unint64_t v207;
  JSC::VMTraps *v208;
  JSC::VMTraps *v209;
  _BYTE *v210;
  _BYTE *v211;
  char v212;
  JSC::Structure *v213;
  uint64_t v214;
  uint64_t v215;
  JSC::VMTraps *v216;
  JSC::VMTraps *v217;
  JSC::VMTraps *v218;
  JSC::VMTraps *v219;
  JSC::VMTraps *v220;
  uint64_t v221;
  JSC::VM **v222;
  uint64_t v223;
  unint64_t v224;
  _DWORD *v225;
  _DWORD *v226;
  _QWORD v227[2];
  uint64_t v228;
  char v229;
  int8x16_t **v230;
  uint64_t v231;
  JSC::VM *__dst;
  unint64_t v233;
  unint64_t v234;
  char __s[3];
  _BYTE v236[39];

  v9 = a2;
  *(_QWORD *)&v236[23] = *MEMORY[0x1E0C80C00];
  v221 = a2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_2;
  v45 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v45 == &JSC::TemporalPlainDate::s_info)
    goto LABEL_51;
  if (v45 == &JSC::TemporalPlainDateTime::s_info)
  {
    v47 = a2 + 32;
    result = *(_QWORD *)(a2 + 32);
    if ((result & 1) == 0)
      return result;
    goto LABEL_70;
  }
  if (v45 == &JSC::TemporalPlainTime::s_info)
  {
LABEL_51:
    v47 = a2 + 24;
    result = *(_QWORD *)(a2 + 24);
    if ((result & 1) == 0)
      return result;
LABEL_70:
    v55 = *(uint64_t (**)(JSC::VM **))(result & 0xFFFFFFFFFFFFFFFCLL);
    v56 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v56 = (JSC::VM **)(a2 - 16);
    __dst = *v56;
    v233 = a2;
    v234 = v47;
    return v55(&__dst);
  }
LABEL_2:
  v12 = *(_QWORD *)(v11 + 41952);
  v13 = *(_QWORD *)(v12 + 968);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v224 = 0xFFFFFFFF00000000;
  LOBYTE(v228) = 0;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v226 = 0;
  memset(v227, 0, 13);
  v225 = (_DWORD *)a2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v14 = *(unsigned __int8 *)(a2 + 5);
    v15 = (JSC::VM *)v11;
    if (v14 > 0x16)
      goto LABEL_4;
    if (v14 == 2)
    {
      if (*(_QWORD *)(v12 + 1768) == v13)
      {
        v168 = *(_QWORD *)(a2 + 8);
        if ((v168 & 1) != 0)
          v169 = (unsigned int *)(a2 + 16);
        else
          v169 = (unsigned int *)(v168 + 4);
        v170 = *v169;
        if ((v170 & 0x80000000) != 0)
        {
          *(double *)a9.i64 = (double)v170;
          Index = COERCE__INT64((double)v170) + 0x2000000000000;
        }
        else
        {
          Index = v170 | 0xFFFE000000000000;
        }
        v172 = 14;
        goto LABEL_335;
      }
      if (v13)
      {
        v174 = *(_DWORD *)(v13 + 16);
        if ((v174 & 0x20) == 0)
        {
          v175 = *(_BYTE **)(v13 + 8);
          v176 = *(unsigned int *)(v13 + 4);
          if ((v174 & 4) != 0)
          {
            if (!(_DWORD)v176)
              goto LABEL_341;
            a3 = *v175 - 48;
            if (a3 > 9)
              goto LABEL_341;
            if (v176 >= 2 && *v175 == 48)
              goto LABEL_341;
            v201 = v176 - 1;
            v202 = v175 + 1;
            while (v201)
            {
              if (a3 > 0x19999999)
                goto LABEL_341;
              v203 = *v202 - 48;
              if (v203 > 9)
                goto LABEL_341;
              v173 = 0;
              v54 = __CFADD__(v203, 10 * a3);
              a3 = v203 + 10 * (_DWORD)a3;
              --v201;
              ++v202;
              if (v54)
                goto LABEL_342;
            }
          }
          else
          {
            if (!(_DWORD)v176)
              goto LABEL_341;
            a3 = *(unsigned __int16 *)v175 - 48;
            if (a3 > 9)
              goto LABEL_341;
            if (*(_WORD *)v175 == 48 && v176 > 1)
              goto LABEL_341;
            v179 = v176 - 1;
            v180 = (unsigned __int16 *)(v175 + 2);
            while (v179)
            {
              if (a3 > 0x19999999)
                goto LABEL_341;
              v181 = *v180 - 48;
              if (v181 > 9)
                goto LABEL_341;
              v173 = 0;
              v54 = __CFADD__(v181, 10 * a3);
              a3 = v181 + 10 * (_DWORD)a3;
              --v179;
              ++v180;
              if (v54)
                goto LABEL_342;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v204 = *(_QWORD *)(a2 + 8);
            v205 = (_DWORD *)((v204 & 1) != 0 ? a2 + 16 : v204 + 4);
            if (*v205 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v11 + 80))
                goto LABEL_439;
              v206 = *(_DWORD *)(v11 + 80);
              if ((v206 & 0x27) != 0 && (v206 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v11 + 16))
              {
LABEL_439:
                v172 = 10;
LABEL_335:
                v222 = (JSC::VM **)Index;
                LODWORD(v224) = v172;
                v226 = 0;
                v173 = 1;
                BYTE1(v227[1]) = 1;
                goto LABEL_342;
              }
            }
          }
        }
      }
LABEL_341:
      v173 = 0;
LABEL_342:
      if (*(_DWORD *)(v11 + 80))
      {
        v199 = *(_DWORD *)(v11 + 80);
        if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
          goto LABEL_47;
      }
      if ((v173 & 1) != 0)
        goto LABEL_75;
    }
  }
  v177 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v221, a1);
  if (!v177)
    goto LABEL_47;
  v9 = v177;
  v15 = *(JSC::VM **)(a1 + 56);
LABEL_4:
  v16 = (_BYTE *)(v9 + 6);
  v17 = v13 >> 4;
  v18 = v9;
  if ((*(_BYTE *)(v9 + 6) & 8) == 0)
  {
    v19 = v9;
    do
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v20 + 0x20)) != 0)
        goto LABEL_33;
      v22 = *(_QWORD *)(16 * v20 + 0x58);
      if (!v22)
      {
        v23 = *(_QWORD *)(16 * v20 + 0x40);
        if (!v23 || *(_BYTE *)(v23 + 5) != 1 && *(_DWORD *)(v23 + 80) < 2u)
          goto LABEL_33;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v21, v15, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v22)
          goto LABEL_33;
      }
      if (!*(_DWORD *)(v22 + 24))
        goto LABEL_33;
      v24 = *(_QWORD *)(v22 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v26 = *(unsigned int *)(v22 + 8);
      v27 = *(_DWORD *)(v13 + 16);
      if ((v24 & 1) != 0)
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v13 + 32);
        v28 = *(_DWORD *)(v22 + 12);
        v29 = (v27 >> 8) & *(_QWORD *)&v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_33;
        v31 = v25 + v26;
        v32 = 1;
        while (1)
        {
          v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
          if (v13 == (v33 & 0xFFFFFFFFFFFFLL))
            break;
          v29 = ((_DWORD)v29 + v32) & v28;
          v30 = *(unsigned __int8 *)(v25 + v29);
          ++v32;
          if (!*(_BYTE *)(v25 + v29))
            goto LABEL_33;
        }
        a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      }
      else
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v13 + 32);
        v34 = *(_DWORD *)(v22 + 12);
        v35 = v34 & (v27 >> 8);
        v36 = *(_DWORD *)(v25 + 4 * v35);
        if (!v36)
          goto LABEL_33;
        v37 = v25 + 4 * v26;
        v38 = 1;
        while (1)
        {
          v39 = (v36 - 1);
          if (v13 == *(_QWORD *)(v37 + 16 * v39))
            break;
          v35 = (v35 + v38) & v34;
          v36 = *(_DWORD *)(v25 + 4 * v35);
          ++v38;
          if (!v36)
            goto LABEL_33;
        }
        a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v48 = v19 + 16;
          v49 = a6 << 32;
        }
        else
        {
          v48 = *(_QWORD *)(v19 + 8) - 8;
          v49 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v48 + (v49 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v50 = *(unsigned __int8 *)(a4 + 5);
          if (v50 != 5)
          {
            if (v50 != 6)
              goto LABEL_59;
            v72 = *(_DWORD *)(v21 + 16) & 3;
            v73 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v75 = *(int8x16_t ***)(a4 + 24);
              v74 = *(_QWORD *)(a4 + 32);
              v222 = *(JSC::VM ***)(a4 + 8);
              v223 = v73;
              LODWORD(v224) = HIDWORD(a6);
              v226 = (_DWORD *)v19;
              goto LABEL_110;
            }
            v222 = *(JSC::VM ***)(a4 + 8);
            v223 = v73;
            LODWORD(v224) = HIDWORD(a6);
            v226 = (_DWORD *)v19;
LABEL_256:
            BYTE1(v227[1]) = 3;
            if (v72 != 2)
              LOBYTE(v227[1]) = 1;
            goto LABEL_75;
          }
          v57 = (unsigned int *)v19;
          v58 = (uint64_t)v15;
LABEL_74:
          JSC::JSObject::fillGetterPropertySlot(v57, v58, (uint64_t)&v222, a4, a5, a6);
          goto LABEL_75;
        }
LABEL_59:
        v222 = (JSC::VM **)a4;
        v226 = (_DWORD *)v19;
LABEL_60:
        v224 = __PAIR64__(a6, a5);
        LOWORD(v227[1]) = 257;
        goto LABEL_75;
      }
LABEL_33:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v15, v13, (uint64_t)&v222) & 1) != 0)
      {
        goto LABEL_75;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_47;
        v40 = *(_DWORD *)(v13 + 16);
        if ((v40 & 0x20) != 0)
          goto LABEL_47;
        v41 = *(_WORD **)(v13 + 8);
        v42 = *(unsigned int *)(v13 + 4);
        if ((v40 & 4) == 0)
        {
          if ((_DWORD)v42)
          {
            v43 = (unsigned __int16)*v41 - 48;
            if (v43 <= 9 && (*v41 != 48 || v42 <= 1))
            {
              v51 = v41 + 1;
              v52 = v42 - 1;
              v44 = 10;
              while (v52)
              {
                if (v43 <= 0x19999999)
                {
                  v53 = *v51 - 48;
                  if (v53 <= 9)
                  {
                    v54 = __CFADD__(v53, 10 * v43);
                    v43 = v53 + 10 * v43;
                    ++v51;
                    --v52;
                    if (!v54)
                      continue;
                  }
                }
                goto LABEL_95;
              }
              goto LABEL_286;
            }
          }
          goto LABEL_47;
        }
        if (!(_DWORD)v42)
          goto LABEL_47;
        v43 = *(unsigned __int8 *)v41 - 48;
        if (v43 > 9 || v42 >= 2 && *(_BYTE *)v41 == 48)
          goto LABEL_47;
        v154 = v42 - 1;
        v155 = (unsigned __int8 *)v41 + 1;
        v44 = 10;
        while (v154)
        {
          if (v43 <= 0x19999999)
          {
            v156 = *v155 - 48;
            if (v156 <= 9)
            {
              v54 = __CFADD__(v156, 10 * v43);
              v43 = v156 + 10 * v43;
              --v154;
              ++v155;
              if (!v54)
                continue;
            }
          }
          goto LABEL_95;
        }
LABEL_286:
        if (v43 == -1)
        {
LABEL_47:
          v44 = 10;
          goto LABEL_95;
        }
        v157 = v43;
        v158 = *(_QWORD *)(a1 + 56);
        v219 = (JSC::VMTraps *)(v158 + 64);
        v44 = 10;
        while (2)
        {
          v159 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
          v160 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, JSC::VM ***))(16 * *(unsigned int *)(v159 + 0x4C) + 0x70))(v9, a1, v157, &v222);
          if (*(_DWORD *)(v158 + 80))
          {
            v163 = *(_DWORD *)(v158 + 80);
            if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v219, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v158 + 16))
              goto LABEL_95;
          }
          if ((v160 & 1) != 0)
            goto LABEL_75;
          if (BYTE2(v227[1]) == 3)
          {
            if (BYTE4(v227[1]))
              goto LABEL_95;
            v161 = *(unsigned __int8 *)(v9 + 5);
            if (v161 != 61)
              goto LABEL_292;
          }
          else
          {
            v161 = *(unsigned __int8 *)(v9 + 5);
            if (v161 == 61)
            {
              if (BYTE2(v227[1]) == 1)
                goto LABEL_95;
            }
            else
            {
LABEL_292:
              if ((v161 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v233) = 0;
                  v166 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v165 = v167 ? v166 : 0;
                }
                else
                {
                  v165 = *(_QWORD *)(v9 + 24);
                }
                if (v165 <= v157)
                  goto LABEL_95;
              }
            }
          }
          if ((*(_WORD *)(v159 + 12) & 0x800) == 0 || BYTE2(v227[1]) == 3)
          {
            v162 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
            if (!v162)
              v162 = *(_QWORD *)(v9 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v162 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v9, a1);
            }
            else
            {
              v162 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
              if (!v162)
                v162 = *(_QWORD *)(v9 + 16);
            }
            if (*(_DWORD *)(v158 + 80))
            {
              v164 = *(_DWORD *)(v158 + 80);
              if ((v164 & 0x27) != 0 && (v164 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v219, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v158 + 16))
                goto LABEL_95;
            }
          }
          if ((v162 & 0xFFFE000000000002) != 0)
            goto LABEL_95;
          v9 = v162;
          if (*(unsigned __int8 *)(v162 + 5) <= 0x16u)
            goto LABEL_95;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v13)
  {
    v76 = *(_DWORD *)(v13 + 16);
    if ((v76 & 0x20) == 0)
    {
      v77 = *(_BYTE **)(v13 + 8);
      v78 = *(unsigned int *)(v13 + 4);
      if ((v76 & 4) != 0)
      {
        if ((_DWORD)v78)
        {
          v79 = *v77 - 48;
          if (v79 <= 9 && (v78 < 2 || *v77 != 48))
          {
            v182 = v77 + 1;
            v183 = v78 - 1;
            while (v183)
            {
              if (v79 <= 0x19999999)
              {
                v184 = *v182 - 48;
                if (v184 <= 9)
                {
                  v54 = __CFADD__(v184, 10 * v79);
                  v79 = v184 + 10 * v79;
                  ++v182;
                  --v183;
                  if (!v54)
                    continue;
                }
              }
              goto LABEL_118;
            }
LABEL_368:
            if (v79 != -1)
            {
              v185 = v79;
              v186 = *(_QWORD *)(a1 + 56);
              v220 = (JSC::VMTraps *)(v186 + 64);
              v44 = 10;
              while (1)
              {
                v187 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
                v188 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, JSC::VM ***))(16 * *(unsigned int *)(v187 + 0x4C) + 0x70))(v9, a1, v185, &v222);
                v189 = v188;
                if (*(_DWORD *)(v186 + 80))
                {
                  v192 = *(_DWORD *)(v186 + 80);
                  if ((v192 & 0x27) != 0 && (v192 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v220, 7u, a3, a4, a5, a6, a7, a8);
                  v193 = *(_QWORD *)(v186 + 16);
                  if (v193)
                    v194 = 1;
                  else
                    v194 = v189;
                  if ((v194 & 1) != 0)
                  {
                    if (!v193)
                      goto LABEL_75;
                    goto LABEL_47;
                  }
                }
                else if ((v188 & 1) != 0)
                {
                  goto LABEL_75;
                }
                if (BYTE2(v227[1]) == 3)
                {
                  if (BYTE4(v227[1]))
                    goto LABEL_95;
                  v190 = *(unsigned __int8 *)(v9 + 5);
                  if (v190 == 61)
                    goto LABEL_375;
                }
                else
                {
                  v190 = *(unsigned __int8 *)(v9 + 5);
                  if (v190 == 61)
                  {
                    if (BYTE2(v227[1]) == 1)
                      goto LABEL_95;
                    goto LABEL_375;
                  }
                }
                if ((v190 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v233) = 0;
                    v197 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v196 = v198 ? v197 : 0;
                  }
                  else
                  {
                    v196 = *(_QWORD *)(v9 + 24);
                  }
                  if (v196 <= v185)
                    goto LABEL_95;
                }
LABEL_375:
                if ((*(_WORD *)(v187 + 12) & 0x800) == 0 || BYTE2(v227[1]) == 3)
                {
                  v191 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                  if (!v191)
                    v191 = *(_QWORD *)(v9 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v191 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v9, a1);
                  }
                  else
                  {
                    v191 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                    if (!v191)
                      v191 = *(_QWORD *)(v9 + 16);
                  }
                  if (*(_DWORD *)(v186 + 80))
                  {
                    v195 = *(_DWORD *)(v186 + 80);
                    if ((v195 & 0x27) != 0 && (v195 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v220, 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v186 + 16))
                      goto LABEL_95;
                  }
                }
                if ((v191 & 0xFFFE000000000002) == 0)
                {
                  v9 = v191;
                  if (*(unsigned __int8 *)(v191 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_95;
              }
            }
          }
        }
      }
      else if ((_DWORD)v78)
      {
        v79 = *(unsigned __int16 *)v77 - 48;
        if (v79 <= 9 && (*(_WORD *)v77 != 48 || v78 <= 1))
        {
          v147 = (unsigned __int16 *)(v77 + 2);
          v148 = v78 - 1;
          while (v148)
          {
            if (v79 <= 0x19999999)
            {
              v149 = *v147 - 48;
              if (v149 <= 9)
              {
                v54 = __CFADD__(v149, 10 * v79);
                v79 = v149 + 10 * v79;
                ++v147;
                --v148;
                if (!v54)
                  continue;
              }
            }
            goto LABEL_118;
          }
          goto LABEL_368;
        }
      }
    }
  }
LABEL_118:
  v80 = *(JSC::VMTraps **)(a1 + 56);
  v81 = (JSC::VMTraps *)((char *)v80 + 64);
  v82 = &__s[1];
  v83 = v236;
  v44 = 10;
  while (1)
  {
    v84 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v209 = v81;
    v211 = v83;
    v116 = v82;
    v215 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    v212 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, JSC::VM ***))(16
                                                                                               * *(unsigned int *)(v215 + 0x4C)
                                                                                               + 0x68))(v18, a1, v13, &v222);
    v218 = v80;
    if (*((_DWORD *)v80 + 20))
    {
      v142 = *((_DWORD *)v80 + 20);
      if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v209, 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v80 + 2))
        goto LABEL_95;
    }
    if ((v212 & 1) != 0)
      goto LABEL_75;
    if (BYTE2(v227[1]) == 3)
    {
      if (BYTE4(v227[1]))
        goto LABEL_95;
      v117 = *(unsigned __int8 *)(v18 + 5);
      if (v117 == 61)
        goto LABEL_218;
    }
    else
    {
      v117 = *(unsigned __int8 *)(v18 + 5);
      if (v117 == 61)
      {
        v81 = v209;
        v83 = v211;
        v82 = v116;
        v84 = v215;
        if (BYTE2(v227[1]) == 1)
          goto LABEL_95;
        goto LABEL_148;
      }
    }
    if (!v13)
      goto LABEL_218;
    if ((v117 - 50) < 0xFFFFFFF5)
      goto LABEL_218;
    v118 = *(_DWORD *)(v13 + 16);
    if ((v118 & 0x20) != 0)
      goto LABEL_218;
    v119 = *(unsigned int *)(v13 + 4);
    if (!(_DWORD)v119)
      goto LABEL_218;
    v120 = *(unsigned __int8 **)(v13 + 8);
    if ((v118 & 4) != 0)
    {
      v121 = *v120;
      if ((_DWORD)v119 == 1)
      {
LABEL_173:
        v81 = v209;
        v83 = v211;
        v82 = v116;
        v84 = v215;
        if ((v121 - 48) < 0xA)
          goto LABEL_95;
        goto LABEL_148;
      }
      if (v121 == 45)
      {
        v121 = v120[1];
        goto LABEL_177;
      }
      if ((v121 - 48) < 0xA)
        goto LABEL_188;
      if ((_DWORD)v119 == 8)
        goto LABEL_187;
    }
    else
    {
      v121 = *(unsigned __int16 *)v120;
      if ((_DWORD)v119 == 1)
        goto LABEL_173;
      if (v121 == 45)
      {
        v121 = *((unsigned __int16 *)v120 + 1);
LABEL_177:
        if ((v121 - 48) < 0xA)
        {
          if ((_DWORD)v119 == 2)
            goto LABEL_95;
          goto LABEL_188;
        }
        if ((_DWORD)v119 != 9)
          goto LABEL_218;
LABEL_187:
        if (v121 != 73)
          goto LABEL_218;
        goto LABEL_188;
      }
      if ((v121 - 48) < 0xA || (_DWORD)v119 == 8 && v121 == 73)
        goto LABEL_188;
    }
    if ((_DWORD)v119 != 3 || v121 != 78)
      goto LABEL_218;
LABEL_188:
    v207 = v207 & 0xFFFFFF0000000000 | v119 | ((unint64_t)((v118 >> 2) & 1) << 32);
    JSC::jsToNumber(v120, v207);
    v123 = (v122 >> 52) & 0x7FF;
    if ((_DWORD)v123 == 2047)
    {
      if ((v122 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v124 = v211;
      }
      else
      {
        if ((v122 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v130 = v116;
        }
        else
        {
          v130 = __s;
        }
        *(_QWORD *)v130 = 0x7974696E69666E49;
        v124 = v130 + 8;
      }
      goto LABEL_202;
    }
    v125 = v122 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v122 & 0x8000000000000000) != 0 && v125)
    {
      __s[0] = 45;
      v126 = v116;
    }
    else
    {
      if (!v125)
      {
        __s[0] = 48;
        v124 = v116;
        goto LABEL_202;
      }
      v126 = __s;
    }
    v127 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v122 & 0x800FFFFFFFFFFFFFLL, v123);
    v124 = WTF::dragonbox::detail::to_shortest(v127, v128, (uint64_t)v126, v129);
LABEL_202:
    *v124 = 0;
    v131 = strlen(__s);
    memcpy(&__dst, __s, v131);
    *((_BYTE *)&__dst + v131) = 0;
    v132 = *(unsigned int *)(v13 + 4);
    v133 = *(unsigned __int8 **)(v13 + 8);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v132)
      {
        p_dst = &__dst;
        v139 = *(unsigned int *)(v13 + 4);
        do
        {
          v141 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v140 = v141;
          if (!v141 || *v133 != v140)
            goto LABEL_218;
          ++v133;
        }
        while (--v139);
      }
    }
    else if ((_DWORD)v132)
    {
      v134 = &__dst;
      v135 = *(unsigned int *)(v13 + 4);
      while (1)
      {
        v137 = *(unsigned __int8 *)v134;
        v134 = (JSC::VM **)((char *)v134 + 1);
        v136 = v137;
        if (!v137 || *(unsigned __int16 *)v133 != v136)
          break;
        v133 += 2;
        if (!--v135)
          goto LABEL_214;
      }
LABEL_218:
      v81 = v209;
      v83 = v211;
      v82 = v116;
      v84 = v215;
      v80 = v218;
      goto LABEL_148;
    }
LABEL_214:
    v81 = v209;
    v83 = v211;
    v82 = v116;
    v84 = v215;
    v80 = v218;
    if (!*((_BYTE *)&__dst + v132))
      goto LABEL_95;
LABEL_148:
    if ((*(_WORD *)(v84 + 12) & 0x800) == 0)
    {
      v107 = *(_DWORD *)v18;
LABEL_150:
      v108 = *(_QWORD *)(16 * (v107 & 0xFFFFFFFE) + 0x30);
      if (!v108)
        v108 = *(_QWORD *)(v18 + 16);
      goto LABEL_152;
    }
    v107 = *(_DWORD *)v18;
    if (BYTE2(v227[1]) == 3)
      goto LABEL_150;
    v208 = v81;
    v210 = v83;
    v114 = v82;
    v115 = 16 * (v107 & 0xFFFFFFFE);
    if ((*(_WORD *)(v115 + 12) & 0x800) != 0)
    {
      v108 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v115 + 76) + 0xB0))(v18, a1);
    }
    else
    {
      v108 = *(_QWORD *)(v115 + 48);
      if (!v108)
        v108 = *(_QWORD *)(v18 + 16);
    }
    if (*((_DWORD *)v80 + 20))
    {
      v143 = *((_DWORD *)v80 + 20);
      if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v208, 7u, a3, a4, a5, a6, a7, a8);
      v81 = v208;
      v83 = v210;
      v82 = v114;
      if (*((_QWORD *)v80 + 2))
        goto LABEL_95;
    }
    else
    {
      v81 = v208;
      v83 = v210;
      v82 = v114;
    }
LABEL_152:
    if ((v108 & 0xFFFE000000000002) == 0)
    {
      v18 = v108;
      if (*(unsigned __int8 *)(v108 + 5) > 0x16u)
        continue;
    }
    goto LABEL_95;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_147;
  v85 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
  if (!v85)
  {
    v86 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
    if (!v86 || *(_BYTE *)(v86 + 5) != 1 && *(_DWORD *)(v86 + 80) < 2u)
      goto LABEL_147;
    v213 = (JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
    v216 = v80;
    v87 = v80;
    v88 = v81;
    v89 = v82;
    v90 = v83;
    JSC::Structure::materializePropertyTable(v213, v87, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v83 = v90;
    v82 = v89;
    v84 = (uint64_t)v213;
    v80 = v216;
    v81 = v88;
    if (!v85)
      goto LABEL_147;
  }
  if (!*(_DWORD *)(v85 + 24))
    goto LABEL_147;
  v91 = *(_QWORD *)(v85 + 16);
  v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
  v93 = *(unsigned int *)(v85 + 8);
  v94 = *(_DWORD *)(v13 + 16);
  if ((v91 & 1) != 0)
  {
    if ((v94 & 0x20) != 0)
      v94 = *(_DWORD *)(v13 + 32);
    v95 = *(_DWORD *)(v85 + 12);
    v96 = (v94 >> 8) & *(_QWORD *)&v95;
    v97 = *(unsigned __int8 *)(v92 + v96);
    if (*(_BYTE *)(v92 + v96))
    {
      v98 = v92 + v93;
      v99 = 1;
      while (1)
      {
        v100 = *(_QWORD *)(v98 + 8 * (v97 - 1));
        if (v13 == (v100 & 0xFFFFFFFFFFFFLL))
          break;
        v96 = ((_DWORD)v96 + v99) & v95;
        v97 = *(unsigned __int8 *)(v92 + v96);
        ++v99;
        if (!*(_BYTE *)(v92 + v96))
          goto LABEL_147;
      }
      a6 = (v100 >> 16) & 0xFF00000000 | HIBYTE(v100);
      goto LABEL_144;
    }
    goto LABEL_147;
  }
  if ((v94 & 0x20) != 0)
    v94 = *(_DWORD *)(v13 + 32);
  v101 = *(_DWORD *)(v85 + 12);
  v102 = v101 & (v94 >> 8);
  v103 = *(_DWORD *)(v92 + 4 * v102);
  if (!v103)
    goto LABEL_147;
  v104 = v92 + 4 * v93;
  v105 = 1;
  while (1)
  {
    v106 = (v103 - 1);
    if (v13 == *(_QWORD *)(v104 + 16 * v106))
      break;
    v102 = (v102 + v105) & v101;
    v103 = *(_DWORD *)(v92 + 4 * v102);
    ++v105;
    if (!v103)
      goto LABEL_147;
  }
  a6 = *(unsigned int *)(v104 + 16 * v106 + 8) | ((unint64_t)*(unsigned __int8 *)(v104 + 16 * v106 + 12) << 32);
LABEL_144:
  if ((_DWORD)a6 == -1)
  {
LABEL_147:
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
    {
      v214 = v84;
      v217 = v80;
      v109 = v80;
      v110 = v81;
      v111 = v82;
      v112 = v83;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v109, v13, (uint64_t)&v222);
      v83 = v112;
      v82 = v111;
      v84 = v214;
      v80 = v217;
      v81 = v110;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_75;
    }
    goto LABEL_148;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v145 = v18 + 16;
    v146 = a6 << 32;
  }
  else
  {
    v145 = *(_QWORD *)(v18 + 8) - 8;
    v146 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v145 + (v146 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_262:
    v222 = (JSC::VM **)a4;
    v226 = (_DWORD *)v18;
    goto LABEL_60;
  }
  v152 = *(unsigned __int8 *)(a4 + 5);
  if (v152 == 5)
  {
    v57 = (unsigned int *)v18;
    v58 = (uint64_t)v80;
    goto LABEL_74;
  }
  if (v152 != 6)
    goto LABEL_262;
  v72 = *(_DWORD *)(v84 + 16) & 3;
  v153 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v222 = *(JSC::VM ***)(a4 + 8);
    v223 = v153;
    LODWORD(v224) = HIDWORD(a6);
    v226 = (_DWORD *)v18;
    goto LABEL_256;
  }
  v75 = *(int8x16_t ***)(a4 + 24);
  v74 = *(_QWORD *)(a4 + 32);
  v222 = *(JSC::VM ***)(a4 + 8);
  v223 = v153;
  LODWORD(v224) = HIDWORD(a6);
  v226 = (_DWORD *)v18;
LABEL_110:
  BYTE1(v227[1]) = 3;
  if (v72 != 2)
    LOBYTE(v227[1]) = 1;
  BYTE3(v227[1]) = 1;
  v230 = v75;
  v231 = v74;
LABEL_75:
  if (BYTE1(v227[1]) == 1)
  {
    v44 = (unint64_t)v222;
  }
  else
  {
    if (BYTE1(v227[1]) == 2)
    {
      v59 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v222, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v60 = (unint64_t)v226;
      v61 = *(_QWORD *)(16 * (*v226 & 0xFFFFFFFE) + 0x28);
      if ((v224 & 0x20) != 0)
        v60 = (unint64_t)v225;
      if (BYTE3(v227[1]) != 1)
        goto LABEL_93;
      if ((v60 & 0xFFFE000000000002) != 0)
        goto LABEL_273;
      v62 = *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C);
      v63 = *(_DWORD *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C) != 0;
      v64 = 16 * v62;
      if ((_DWORD)v62)
        v65 = v230 == (int8x16_t **)v64;
      else
        v65 = 1;
      if (!v65)
      {
        do
        {
          v64 = *(_QWORD *)(v64 + 16);
          v63 = v64 != 0;
        }
        while ((int8x16_t **)v64 != v230 && v64 != 0);
      }
      if (!v63)
      {
LABEL_273:
        __dst = *(JSC::VM **)(a1 + 56);
        v59 = JSC::throwDOMAttributeGetterTypeError(v61, &__dst, v230, (WTF::StringImpl *)v13);
      }
      else
      {
LABEL_93:
        v59 = ((uint64_t (*)(unint64_t))v222)(v61);
      }
    }
    v44 = v59;
  }
LABEL_95:
  if (v229)
  {
    v67 = *(_DWORD *)(v228 + 4);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x198BFB0E0);
    }
    *(_DWORD *)(v228 + 4) = v67 - 1;
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_99;
  v144 = *(_DWORD *)(v11 + 80);
  if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
    return 0;
LABEL_99:
  if (v44 != 10)
    return JSC::TemporalCalendar::from(a1, v44, (const WTF::String *)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  v68 = *(JSC::TemporalCalendar **)(a1 + 56);
  v69 = *(_QWORD *)(a1 + 416);
  if ((v69 & 1) != 0)
  {
    v150 = *(uint64_t (**)(JSC::VM **))(v69 & 0xFFFFFFFFFFFFFFFCLL);
    v151 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v151 = (JSC::VM **)(a1 - 16);
    __dst = *v151;
    v233 = a1;
    v234 = a1 + 416;
    v69 = v150(&__dst);
  }
  v70 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v71 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v71 != -1)
    {
      __dst = (JSC::VM *)__s;
      v222 = &__dst;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v222, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v70 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  }
  return JSC::TemporalCalendar::create(v68, (JSC::VM *)v69, v70, a4, a5, a6, a7, a8);
}

uint64_t JSC::TemporalCalendar::isoDateFromFields(unint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::JSObject *v19;
  int8x16_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  double v34;
  WTF::AtomStringImpl *v35;
  const WTF::String *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int8x16_t v43;
  uint64_t v44;
  unint64_t v45;
  JSC::Heap **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  JSC::Exception *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  JSC::Heap **v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  JSC::Exception *v86;
  double v87;
  unsigned __int8 v88;
  int v89;
  uint64_t v90;
  const char *v91;
  unint64_t v92;
  JSC::Heap **v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  JSC::Exception *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  const Duration *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  int8x16_t v111;
  double v112;
  uint64_t v114;
  unint64_t v115;
  JSC::Heap **v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  JSC::Exception *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  double v142;
  int v143;
  int v144;
  uint64_t (*v145)(uint64_t *);
  uint64_t *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t (*v151)(uint64_t *);
  uint64_t *v152;
  int v153;
  uint64_t (*v154)(uint64_t *);
  uint64_t *v155;
  int v156;
  uint64_t (*v157)(uint64_t *);
  uint64_t *v158;
  double v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  unint64_t v162;
  WTF::StringImpl *v163;
  JSC::JSObject *v164;
  JSC::VM *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;

  v11 = *(_QWORD *)(a1 + 56);
  v165 = (JSC::VM *)v11;
  v12 = v11 + 41952;
  v19 = (JSC::JSObject *)JSC::JSObject::get(a2, a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1112), a4, a5, a6, a7, a8);
  v164 = v19;
  if (*(_DWORD *)(v11 + 80))
  {
    v143 = *(_DWORD *)(v11 + 80);
    if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 69206016;
  }
  if (v19 == (JSC::JSObject *)10)
  {
    v21 = "day property must be present";
    v22 = a1;
    v23 = 29;
LABEL_4:
    JSC::throwTypeError(v22, &v165, (uint64_t)v21, v23);
    return 69206016;
  }
  if ((unint64_t)v19 < 0xFFFE000000000000)
  {
    if ((unint64_t)v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v164, (JSC::JSGlobalObject *)a1, v13, v14, v15, v16, v17, v18, v20);
    else
      *(_QWORD *)&v87 = (char *)v19 - 0x2000000000000;
    v24 = trunc(v87 + 0.0);
  }
  else
  {
    v24 = (double)(int)v19;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v144 = *(_DWORD *)(v11 + 80);
    if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 69206016;
  }
  if (v24 <= 0.0
    || (((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
      ? (v25 = (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      : (v25 = 1),
        !v25))
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v44 = 0x2800000002;
    *(_QWORD *)(v44 + 8) = "day property must be positive and finite";
    *(_DWORD *)(v44 + 16) = 4;
    v163 = (WTF::StringImpl *)v44;
    v45 = *(_QWORD *)(a1 + 128);
    v46 = *(JSC::Heap ***)(a1 + 56);
    if ((v45 & 1) != 0)
    {
      v145 = *(uint64_t (**)(uint64_t *))(v45 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v146 = (uint64_t *)(a1 - 16);
      else
        v146 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v166 = *v146;
      v167 = a1;
      v168 = a1 + 128;
      v45 = v145(&v166);
    }
    v47 = JSC::ErrorInstance::create(v46, v45, &v163, 0, 0, 0, 2, 1);
    v54 = (JSC::Exception *)v47;
    if ((v47 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C)))
    {
      v54 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v47, 0, v48, v49, v50, v51, v52);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v54, v53, v48, v49, v50, v51, v52);
    v62 = v163;
    v163 = 0;
    if (!v62)
      return 69206016;
    goto LABEL_27;
  }
  v26 = (WTF::StringImpl *)JSC::JSObject::get(a2, a1, *(_QWORD *)(*(_QWORD *)v12 + 1928), v14, v15, v16, v17, v18);
  v163 = v26;
  if (*(_DWORD *)(v11 + 80))
  {
    v147 = *(_DWORD *)(v11 + 80);
    if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v27, v28, v29, v30, v31, v32);
    if (*(_QWORD *)(v11 + 16))
      return 69206016;
    v26 = v163;
  }
  v34 = 0.0;
  if (v26 != (WTF::StringImpl *)10)
  {
    if ((unint64_t)v26 < 0xFFFE000000000000)
    {
      if ((unint64_t)v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v163, (JSC::JSGlobalObject *)a1, v27, v28, v29, v30, v31, v32, v33);
      else
        *(_QWORD *)&v141 = (char *)v26 - 0x2000000000000;
      v34 = trunc(v141 + 0.0);
    }
    else
    {
      v34 = (double)(int)v26;
    }
    if (*(_DWORD *)(v11 + 80))
    {
      v149 = *(_DWORD *)(v11 + 80);
      if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v27, v28, v29, v30, v31, v32);
      if (*(_QWORD *)(v11 + 16))
        return 69206016;
    }
  }
  v42 = JSC::JSObject::get(a2, a1, *(_QWORD *)(*(_QWORD *)v12 + 1936), v28, v29, v30, v31, v32);
  v162 = v42;
  if (*(_DWORD *)(v11 + 80))
  {
    v148 = *(_DWORD *)(v11 + 80);
    if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v36, v37, v38, v39, v40, v41);
    if (*(_QWORD *)(v11 + 16))
      return 69206016;
    v42 = v162;
  }
  if (v42 == 10)
  {
    if (v163 == (WTF::StringImpl *)10)
    {
      v21 = "Either month or monthCode property must be provided";
      v22 = a1;
      v23 = 52;
      goto LABEL_4;
    }
    if (v34 <= 0.0 || (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v76 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v76 = 0x2A00000002;
      *(_QWORD *)(v76 + 8) = "month property must be positive and finite";
      *(_DWORD *)(v76 + 16) = 4;
      v161 = (WTF::StringImpl *)v76;
      v77 = *(_QWORD *)(a1 + 128);
      v78 = *(JSC::Heap ***)(a1 + 56);
      if ((v77 & 1) != 0)
      {
        v154 = *(uint64_t (**)(uint64_t *))(v77 & 0xFFFFFFFFFFFFFFFCLL);
        if ((a1 & 8) != 0)
          v155 = (uint64_t *)(a1 - 16);
        else
          v155 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        v166 = *v155;
        v167 = a1;
        v168 = a1 + 128;
        v77 = v154(&v166);
      }
      v79 = JSC::ErrorInstance::create(v78, v77, &v161, 0, 0, 0, 2, 1);
      v86 = (JSC::Exception *)v79;
      if ((v79 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C)))
      {
        v86 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v79, 0, v80, v81, v82, v83, v84);
      }
      JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v86, v85, v80, v81, v82, v83, v84);
      v62 = v161;
      v161 = 0;
      if (!v62)
        return 69206016;
      goto LABEL_27;
    }
    goto LABEL_79;
  }
  if ((v42 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v42 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)a1, v36, v37, v38, v39, v40, v41, (int **)&v161);
    goto LABEL_37;
  }
  v72 = *(WTF::StringImpl **)(v42 + 8);
  if ((v72 & 1) != 0)
  {
    v72 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v42, (JSC::JSGlobalObject *)a1, (uint64_t)v36, v37, v43, v38, v39, v40, v41);
    if (!v72)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (v72)
LABEL_35:
    *(_DWORD *)v72 += 2;
LABEL_36:
  v161 = v72;
LABEL_37:
  if (*(_DWORD *)(v11 + 80))
  {
    v150 = *(_DWORD *)(v11 + 80);
    if ((v150 & 0x27) != 0 && (v150 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v36, v37, v38, v39, v40, v41);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_74;
  }
  if (!v161 || *((_DWORD *)v161 + 1) != 3)
    goto LABEL_67;
  v73 = *((_QWORD *)v161 + 1);
  if ((*((_BYTE *)v161 + 16) & 4) != 0)
  {
    if (*(_BYTE *)v73 != 77)
      goto LABEL_67;
    v74 = *(unsigned __int8 *)(v73 + 2);
    if ((v74 - 48) >= 0xA)
      goto LABEL_67;
    v75 = *(unsigned __int8 *)(v73 + 1);
  }
  else
  {
    if (*(_WORD *)v73 != 77)
      goto LABEL_67;
    v74 = *(unsigned __int16 *)(v73 + 4);
    if ((v74 - 48) >= 0xA)
      goto LABEL_67;
    v75 = *(unsigned __int16 *)(v73 + 2);
  }
  if (v75 == 49)
  {
    v88 = v74 - 38;
  }
  else
  {
    if (v75 != 48)
    {
LABEL_67:
      v90 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v90 = 0x1A00000002;
      v91 = "Invalid monthCode property";
LABEL_68:
      *(_QWORD *)(v90 + 8) = v91;
      *(_DWORD *)(v90 + 16) = 4;
      v160 = (WTF::StringImpl *)v90;
      v92 = *(_QWORD *)(a1 + 128);
      v93 = *(JSC::Heap ***)(a1 + 56);
      if ((v92 & 1) != 0)
      {
        v151 = *(uint64_t (**)(uint64_t *))(v92 & 0xFFFFFFFFFFFFFFFCLL);
        if ((a1 & 8) != 0)
          v152 = (uint64_t *)(a1 - 16);
        else
          v152 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        v166 = *v152;
        v167 = a1;
        v168 = a1 + 128;
        v92 = v151(&v166);
      }
      v94 = JSC::ErrorInstance::create(v93, v92, &v160, 0, 0, 0, 2, 1);
      v101 = (JSC::Exception *)v94;
      if ((v94 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x4C)))
      {
        v101 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v94, 0, v95, v96, v97, v98, v99);
      }
      JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v101, v100, v95, v96, v97, v98, v99);
      v102 = v160;
      v160 = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
        {
          WTF::StringImpl::~StringImpl(v102, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
          WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
        }
        else
        {
          *(_DWORD *)v102 -= 2;
        }
      }
LABEL_74:
      v89 = 0;
      goto LABEL_75;
    }
    v88 = v74 - 48;
  }
  if (!v88)
    goto LABEL_67;
  if (v163 != (WTF::StringImpl *)10)
  {
    if (v34 == (double)v88)
    {
      v89 = 1;
      goto LABEL_75;
    }
    v90 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v90 = 0x3E00000002;
    v91 = "month and monthCode properties must match if both are provided";
    goto LABEL_68;
  }
  v89 = 1;
  v34 = (double)v88;
LABEL_75:
  v103 = v161;
  v161 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      if (!v89)
        return 69206016;
      goto LABEL_79;
    }
    *(_DWORD *)v103 -= 2;
  }
  if (!v89)
    return 69206016;
LABEL_79:
  v110 = (WTF::StringImpl *)JSC::JSObject::get(a2, a1, *(_QWORD *)(*(_QWORD *)v12 + 2664), v37, v38, v39, v40, v41);
  v161 = v110;
  if (*(_DWORD *)(v11 + 80))
  {
    v153 = *(_DWORD *)(v11 + 80);
    if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v104, v105, v106, v107, v108, v109);
    if (*(_QWORD *)(v11 + 16))
      return 69206016;
  }
  if (v110 == (WTF::StringImpl *)10)
  {
    v21 = "year property must be present";
    v22 = a1;
    v23 = 30;
    goto LABEL_4;
  }
  if ((unint64_t)v110 < 0xFFFE000000000000)
  {
    if ((unint64_t)v110 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v161, (JSC::JSGlobalObject *)a1, (uint64_t)v104, v105, v106, v107, v108, v109, v111);
    else
      *(_QWORD *)&v142 = (char *)v110 - 0x2000000000000;
    v112 = trunc(v142 + 0.0);
  }
  else
  {
    v112 = (double)(int)v110;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v159 = v112;
    v156 = *(_DWORD *)(v11 + 80);
    if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v104, v105, v106, v107, v108, v109);
    v112 = v159;
    if (*(_QWORD *)(v11 + 16))
      return 69206016;
  }
  if (((*(_QWORD *)&v112 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
    && (*(_QWORD *)&v112 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v114 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v114 = 0x1C00000002;
    *(_QWORD *)(v114 + 8) = "year property must be finite";
    *(_DWORD *)(v114 + 16) = 4;
    v160 = (WTF::StringImpl *)v114;
    v115 = *(_QWORD *)(a1 + 128);
    v116 = *(JSC::Heap ***)(a1 + 56);
    if ((v115 & 1) != 0)
    {
      v157 = *(uint64_t (**)(uint64_t *))(v115 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v158 = (uint64_t *)(a1 - 16);
      else
        v158 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v166 = *v158;
      v167 = a1;
      v168 = a1 + 128;
      v115 = v157(&v166);
    }
    v117 = JSC::ErrorInstance::create(v116, v115, &v160, 0, 0, 0, 2, 1);
    v124 = (JSC::Exception *)v117;
    if ((v117 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x4C)))
    {
      v124 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v117, 0, v118, v119, v120, v121, v122);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v124, v123, v118, v119, v120, v121, v122);
    v62 = v160;
    v160 = 0;
    if (!v62)
      return 69206016;
LABEL_27:
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
    return 69206016;
  }
  return JSC::TemporalCalendar::isoDateFromFields(a1, a3, v104, v112, v34, v24);
}

uint64_t JSC::TemporalCalendar::isoDateFromFields(unint64_t a1, char a2, const Duration *a3, double a4, double a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  unint64_t v29;
  JSC::Heap **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  JSC::Exception *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t (*v57)(double *);
  double *v58;
  WTF::StringImpl *v59;
  double v60;
  double v61;
  unint64_t v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v7 = *(_QWORD *)(a1 + 56);
  if ((a2 & 1) == 0)
  {
    if (a5 >= 0xC)
      v8 = 12;
    else
      v8 = a5;
    v9 = a6;
    if (((int)a4 & 3) != 0)
    {
      v10 = 0;
    }
    else
    {
      HIDWORD(v11) = -1030792151 * (int)a4 + 85899344;
      LODWORD(v11) = HIDWORD(v11);
      if ((v11 >> 4) < 0xA3D70B)
      {
        v10 = 1;
      }
      else
      {
        HIDWORD(v12) = -1030792151 * (int)a4 + 85899344;
        LODWORD(v12) = HIDWORD(v12);
        v10 = (v12 >> 2) > 0x28F5C28;
      }
    }
    a5 = (double)v8;
    v13 = JSC::ISO8601::daysInMonths[12 * v10 - 1 + v8];
    if (v13 < v9)
      v9 = v13;
    a6 = (double)v9;
  }
  v60 = a4;
  v61 = a5;
  v62 = 0;
  v63 = a6;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v20 = JSC::TemporalPlainDate::toPlainDate(a1, (JSC::JSGlobalObject *)&v60, a3);
  if (*(_DWORD *)(v7 + 80))
  {
    v56 = *(_DWORD *)(v7 + 80);
    if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v7 + 16))
      return 69206016;
  }
  v21 = ((int)((_DWORD)v20 << 6) >> 27) - 1;
  v22 = ((int)((_DWORD)v20 << 11) >> 11) + (unsigned __int16)((__int16)v21 / 12);
  LODWORD(v23) = v21 - 12 * (((10923 * v21) >> 17) + ((10923 * v21) >> 31));
  v24 = (v23 & 0x8000) == 0;
  if ((v23 & 0x8000) != 0)
    v23 = 11;
  else
    v23 = (unsigned __int16)v23;
  if (!v24)
    --v22;
  HIDWORD(v26) = -1030792151 * v22 + 85899344;
  LODWORD(v26) = HIDWORD(v26);
  v25 = v26 >> 4;
  LODWORD(v26) = HIDWORD(v26);
  v27 = (v26 >> 2) > 0x28F5C28;
  if (v25 < 0xA3D70B)
    v27 = 1;
  if ((v22 & 3) != 0)
    v27 = 0;
  if ((__int128)(floor(floor(((double)v22 + -1.0) / 400.0)+ -4.0+ floor(((double)v22 + -1.0) * 0.25)+ -492.0+ ((double)v22 + -1970.0) * 365.0- (floor(((double)v22 + -1.0) / 100.0)+ -19.0))+ (double)(WTF::firstDayOfMonth[12 * v27 + v23] + ((int)v20 >> 26) - 1))* 0x4E94914F0000+ __PAIR128__(468, 0x6016A53048F67FFFLL) >= __PAIR128__(936, 0xC02CFBCC009DFFFFLL))
  {
    v28 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v28 = 0x3600000002;
    *(_QWORD *)(v28 + 8) = "date time is out of range of ECMAScript representation";
    *(_DWORD *)(v28 + 16) = 4;
    v59 = (WTF::StringImpl *)v28;
    v29 = *(_QWORD *)(a1 + 128);
    v30 = *(JSC::Heap ***)(a1 + 56);
    if ((v29 & 1) != 0)
    {
      v57 = *(uint64_t (**)(double *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v58 = (double *)(a1 - 16);
      else
        v58 = (double *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v60 = *v58;
      v61 = *(double *)&a1;
      v62 = a1 + 128;
      v29 = v57(&v60);
    }
    v31 = JSC::ErrorInstance::create(v30, v29, &v59, 0, 0, 0, 2, 1);
    v38 = (JSC::Exception *)v31;
    if ((v31 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)))
    {
      v38 = (JSC::Exception *)JSC::Exception::create(v7, (JSC::VM *)v31, 0, v32, v33, v34, v35, v36);
    }
    JSC::VM::throwException((JSC::VM *)v7, (JSC::JSGlobalObject *)a1, v38, v37, v32, v33, v34, v35, v36);
    v46 = v59;
    v59 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    return 69206016;
  }
  return v20;
}

uint64_t JSC::TemporalCalendar::isoDateAdd(unint64_t a1, int *a2, uint64_t a3, char a4)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  long double v16;
  double v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  unsigned int v24;
  double v25;
  double v26;
  double v28;
  int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  _BOOL4 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  int v40;
  double v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  double v46;
  unsigned int v47;
  unint64_t v48;
  BOOL v49;
  double v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  _BOOL4 v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  double v62;
  unsigned int v63;
  double v64;
  unsigned int v65;
  double v66;
  unsigned int v67;
  BOOL v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  BOOL v80;
  unsigned int v81;
  unint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  unint64_t v85;
  JSC::Heap **v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  JSC::Exception *v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(double *);
  double *v113;
  int v114;
  double v115;
  double v116;
  unint64_t v117;
  double v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  WTF::StringImpl *v122;

  v7 = *(double *)(a3 + 24);
  v8 = *(double *)(a3 + 72)
     + (*(double *)(a3 + 64)
      + (*(double *)(a3 + 56)
       + (*(double *)(a3 + 48) + (*(double *)(a3 + 40) + (*(double *)(a3 + 32) + v7 * 24.0) * 60.0) * 60.0) * 1000.0)
      * 1000.0)
     * 1000.0;
  if (COERCE__INT64(fabs(v8)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v9 = trunc(v8 / 8.64e13);
    if (v9 == 0.0)
      v7 = 0.0;
    else
      v7 = v9;
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *a2;
  v12 = (double)(*a2 << 6 >> 27);
  v13 = *(double *)a3 + (double)(*a2 << 11 >> 11);
  v14 = *(double *)(a3 + 8) + v12;
  if (v14 < 1.0 || v14 > 12.0)
  {
    v16 = v14 + -1.0;
    v13 = v13 + floor(v16 / 12.0);
    v17 = fmod(v16, 12.0);
    v18 = v17 == 0.0;
    v12 = -0.0;
    if (v17 < 0.0)
      v12 = 12.0;
    v14 = v17 + v12 + 1.0;
    if (v18)
      v14 = 1.0;
  }
  v19 = (int)v13;
  if (((int)v13 & 3) != 0)
  {
    v20 = 0;
  }
  else
  {
    HIDWORD(v21) = -1030792151 * v19 + 85899344;
    LODWORD(v21) = HIDWORD(v21);
    if ((v21 >> 4) < 0xA3D70B)
    {
      v20 = 1;
    }
    else
    {
      HIDWORD(v22) = -1030792151 * v19 + 85899344;
      LODWORD(v22) = HIDWORD(v22);
      v20 = (v22 >> 2) > 0x28F5C28;
    }
  }
  LOBYTE(v12) = JSC::ISO8601::daysInMonths[12 * v20 - 1 + (int)v14];
  v23 = (double)*(unint64_t *)&v12;
  v24 = (v11 >> 26);
  v25 = (double)v24;
  if ((a4 & 1) != 0)
  {
    if (v23 < (double)v24)
      goto LABEL_105;
  }
  else if (v23 < (double)v24)
  {
    v25 = v23;
  }
  v26 = v25 + v7 + *(double *)(a3 + 16) * 7.0;
  if (v26 >= 1.0 && v26 <= v23)
    goto LABEL_94;
  if (v13 < -271821.0 || v13 > 275760.0)
    goto LABEL_105;
  v28 = v14 + -1.0;
  v29 = (int)v28 / 12 + v19;
  v30 = (int)v28 % 12;
  if (v30 < 0)
  {
    v30 += 12;
    --v29;
  }
  HIDWORD(v32) = -1030792151 * v29 + 85899344;
  LODWORD(v32) = HIDWORD(v32);
  v31 = v32 >> 4;
  LODWORD(v32) = HIDWORD(v32);
  v33 = (v32 >> 2) > 0x28F5C28;
  if (v31 < 0xA3D70B)
    v33 = 1;
  if ((v29 & 3) != 0)
    v33 = 0;
  v35 = 365.0;
  v34 = (double)v29;
  v36 = v26
      + floor(floor((v34 + -1.0) / 400.0)+ -4.0+ floor((v34 + -1.0) * 0.25)+ -492.0+ (v34 + -1970.0) * 365.0- (floor((v34 + -1.0) / 100.0)+ -19.0))+ (double)WTF::firstDayOfMonth[12 * v33 + v30]+ -1.0;
  v37 = floor(v36 / 365.2425) + 1970.0;
  if (v37 < -271821.0 || v37 > 275760.0)
    goto LABEL_105;
  v38 = (int)v37;
  v39 = floor(((double)v38 + -1.0) / 400.0)
      + -4.0
      + floor(((double)v38 + -1.0) * 0.25)
      + -492.0
      + ((double)v38 + -1970.0) * 365.0
      - (floor(((double)v38 + -1.0) / 100.0)
       + -19.0);
  if (v39 <= v36)
  {
    if ((v38 & 3) == 0)
    {
      v42 = -1030792151 * v38 + 85899344;
      HIDWORD(v44) = v42;
      LODWORD(v44) = v42;
      v43 = v44 >> 4;
      HIDWORD(v44) = v42;
      LODWORD(v44) = v42;
      if ((v44 >> 2) <= 0x28F5C28 && v43 >= 0xA3D70B)
        v35 = 365.0;
      else
        v35 = 366.0;
    }
    if (v39 + v35 <= v36)
      v13 = v37 + 1.0;
    else
      v13 = v37;
    if (v39 + v35 <= v36)
      v46 = v39 + v35;
    else
      v46 = v39;
    v40 = (int)v13;
  }
  else
  {
    v13 = v37 + -1.0;
    v40 = (int)(v37 + -1.0);
    if ((v40 & 3) != 0)
    {
      v41 = 365.0;
    }
    else
    {
      HIDWORD(v48) = -1030792151 * v40 + 85899344;
      LODWORD(v48) = HIDWORD(v48);
      v47 = v48 >> 4;
      LODWORD(v48) = HIDWORD(v48);
      v49 = (v48 >> 2) <= 0x28F5C28 && v47 >= 0xA3D70B;
      v41 = 365.0;
      if (!v49)
        v41 = 366.0;
    }
    v46 = v39 - v41;
  }
  v50 = v36 - v46;
  v14 = 1.0;
  v51 = (v50 + 1.0);
  if (v51 < 0x20)
  {
    v58 = 0;
  }
  else
  {
    v52 = 1;
    HIDWORD(v54) = -1030792151 * v40 + 85899344;
    LODWORD(v54) = HIDWORD(v54);
    v53 = v54 >> 4;
    LODWORD(v54) = HIDWORD(v54);
    v55 = (v54 >> 2) > 0x28F5C28;
    if (v53 >= 0xA3D70B)
      v52 = v55;
    if ((v40 & 3) != 0)
      v56 = 0;
    else
      v56 = v52;
    v57 = JSC::ISO8601::daysInMonths[12 * v56 + 1];
    v58 = v57 + 31;
    if (v57 + 31 >= v51)
    {
      v14 = 2.0;
      v58 = 31;
    }
    else
    {
      v59 = v57 + 62;
      if (v57 + 62 >= v51)
      {
        v14 = 3.0;
      }
      else
      {
        v58 = v57 + 92;
        if (v57 + 92 >= v51)
        {
          v14 = 4.0;
        }
        else
        {
          v59 = v57 + 123;
          if (v57 + 123 >= v51)
          {
            v14 = 5.0;
            goto LABEL_93;
          }
          v58 = v57 + 153;
          if (v57 + 153 < v51)
          {
            v60 = v57 + 184;
            v14 = 7.0;
            v61 = v57 + 215;
            v62 = 8.0;
            v63 = v57 + 245;
            v64 = 9.0;
            v65 = v57 + 276;
            v66 = 10.0;
            v67 = v57 + 306;
            v68 = v67 >= v51;
            if (v67 >= v51)
              v67 = v65;
            v69 = 11.0;
            if (!v68)
              v69 = 12.0;
            if (v65 < v51)
              v66 = v69;
            else
              v67 = v63;
            if (v63 < v51)
              v64 = v66;
            else
              v67 = v61;
            if (v61 < v51)
              v62 = v64;
            else
              v67 = v60;
            if (v60 < v51)
            {
              v58 = v67;
              v14 = v62;
            }
            goto LABEL_93;
          }
          v14 = 6.0;
        }
        v58 = v59;
      }
    }
  }
LABEL_93:
  v26 = (double)(v51 - v58);
LABEL_94:
  v115 = v13;
  v116 = v14;
  v117 = 0;
  v118 = v26;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v76 = JSC::TemporalPlainDate::toPlainDate(a1, (JSC::JSGlobalObject *)&v115, (const Duration *)a3);
  if (*(_DWORD *)(v10 + 80))
  {
    v114 = *(_DWORD *)(v10 + 80);
    if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v70, v71, v72, v73, v74, v75);
    if (*(_QWORD *)(v10 + 16))
      return 69206016;
  }
  v77 = ((int)((_DWORD)v76 << 6) >> 27) - 1;
  v78 = ((int)((_DWORD)v76 << 11) >> 11) + (unsigned __int16)((__int16)v77 / 12);
  LODWORD(v79) = v77 - 12 * (((10923 * v77) >> 17) + ((10923 * v77) >> 31));
  v80 = (v79 & 0x8000) == 0;
  if ((v79 & 0x8000) != 0)
    v79 = 11;
  else
    v79 = (unsigned __int16)v79;
  if (!v80)
    --v78;
  HIDWORD(v82) = -1030792151 * v78 + 85899344;
  LODWORD(v82) = HIDWORD(v82);
  v81 = v82 >> 4;
  LODWORD(v82) = HIDWORD(v82);
  v83 = (v82 >> 2) > 0x28F5C28;
  if (v81 < 0xA3D70B)
    v83 = 1;
  if ((v78 & 3) != 0)
    v83 = 0;
  if ((__int128)(floor(floor(((double)v78 + -1.0) / 400.0)+ -4.0+ floor(((double)v78 + -1.0) * 0.25)+ -492.0+ ((double)v78 + -1970.0) * 365.0- (floor(((double)v78 + -1.0) / 100.0)+ -19.0))+ (double)(WTF::firstDayOfMonth[12 * v83 + v79] + ((int)v76 >> 26) - 1))* 0x4E94914F0000+ __PAIR128__(468, 0x6016A53048F67FFFLL) >= __PAIR128__(936, 0xC02CFBCC009DFFFFLL))
  {
LABEL_105:
    v84 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v84 = 0x3600000002;
    *(_QWORD *)(v84 + 8) = "date time is out of range of ECMAScript representation";
    *(_DWORD *)(v84 + 16) = 4;
    v122 = (WTF::StringImpl *)v84;
    v85 = *(_QWORD *)(a1 + 128);
    v86 = *(JSC::Heap ***)(a1 + 56);
    if ((v85 & 1) != 0)
    {
      v112 = *(uint64_t (**)(double *))(v85 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v113 = (double *)(a1 - 16);
      else
        v113 = (double *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v115 = *v113;
      v116 = *(double *)&a1;
      v117 = a1 + 128;
      v85 = v112(&v115);
    }
    v87 = JSC::ErrorInstance::create(v86, v85, &v122, 0, 0, 0, 2, 1);
    v94 = (JSC::Exception *)v87;
    if ((v87 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0x4C)))
    {
      v94 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v87, 0, v88, v89, v90, v91, v92);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v94, v93, v88, v89, v90, v91, v92);
    v102 = v122;
    v122 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
      {
        WTF::StringImpl::~StringImpl(v102, v95, v96, v97, v98, v99, v100, v101);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      else
      {
        *(_DWORD *)v102 -= 2;
      }
    }
    return 69206016;
  }
  return v76;
}

double JSC::TemporalDuration::balance(uint64_t a1, unsigned int a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v2 = (double *)(a1 + 32);
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a1 + 48);
  v5 = (double *)(a1 + 56);
  v6 = (double *)(a1 + 64);
  v7 = (double *)(a1 + 72);
  result = *(double *)(a1 + 72)
         + (*(double *)(a1 + 64)
          + (*(double *)(a1 + 56)
           + (*(double *)(a1 + 48)
            + (*(double *)(a1 + 40) + (*(double *)(a1 + 32) + *(double *)(a1 + 24) * 24.0) * 60.0) * 60.0)
           * 1000.0)
          * 1000.0)
         * 1000.0;
  if (COERCE__INT64(fabs(result)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    if (a2 <= 3)
    {
      v10 = trunc(result / 8.64e13);
      if (v10 == 0.0)
        v10 = 0.0;
      *(double *)(a1 + 24) = v10;
      result = fmod(result, 8.64e13);
    }
    v11 = trunc(result / 1000.0);
    v12 = trunc(v11 / 1000.0);
    v13 = trunc(v12 / 1000.0);
    v14 = trunc(v13 / 60.0);
    if (a2 > 4)
    {
      switch(a2)
      {
        case 5u:
          v21 = fmod(result, 1000.0);
          if (v21 == 0.0)
            v21 = 0.0;
          *v7 = v21;
          v22 = fmod(v11, 1000.0);
          if (v22 == 0.0)
            v22 = 0.0;
          *v6 = v22;
          v23 = fmod(v12, 1000.0);
          if (v23 == 0.0)
            v23 = 0.0;
          *v5 = v23;
          v24 = fmod(v13, 60.0);
          if (v24 == 0.0)
            v24 = 0.0;
          *v4 = v24;
          break;
        case 6u:
          v25 = fmod(result, 1000.0);
          if (v25 == 0.0)
            v25 = 0.0;
          *v7 = v25;
          v26 = fmod(v11, 1000.0);
          if (v26 == 0.0)
            v26 = 0.0;
          *v6 = v26;
          v27 = fmod(v12, 1000.0);
          if (v27 == 0.0)
            v27 = 0.0;
          *v5 = v27;
          v14 = v13;
          v3 = v4;
          break;
        case 7u:
          v28 = fmod(result, 1000.0);
          if (v28 == 0.0)
            v28 = 0.0;
          *v7 = v28;
          v29 = fmod(v11, 1000.0);
          if (v29 == 0.0)
            v29 = 0.0;
          *v6 = v29;
          v14 = v12;
          v3 = v5;
          break;
        case 8u:
          v30 = fmod(result, 1000.0);
          if (v30 == 0.0)
            v30 = 0.0;
          *v7 = v30;
          v14 = v11;
          v3 = v6;
          break;
        default:
          v14 = result;
          v3 = v7;
          break;
      }
    }
    else
    {
      v15 = fmod(result, 1000.0);
      if (v15 == 0.0)
        v15 = 0.0;
      *v7 = v15;
      v16 = fmod(v11, 1000.0);
      if (v16 == 0.0)
        v16 = 0.0;
      *v6 = v16;
      v17 = fmod(v12, 1000.0);
      if (v17 == 0.0)
        v17 = 0.0;
      *v5 = v17;
      v18 = fmod(v13, 60.0);
      if (v18 == 0.0)
        v18 = 0.0;
      *v4 = v18;
      v19 = fmod(v14, 60.0);
      if (v19 == 0.0)
        v19 = 0.0;
      *v3 = v19;
      v14 = trunc(v14 / 60.0);
      v3 = v2;
    }
    result = 0.0;
    if (v14 == 0.0)
      v20 = 0.0;
    else
      v20 = v14;
    *v3 = v20;
  }
  return result;
}

void JSC::TemporalCalendar::isoDateDifference(unint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  _BOOL4 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  _BOOL4 v32;
  unsigned int v33;
  long double v34;
  double v35;
  double v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  double v50;
  double v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  double v64;
  BOOL v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  _BOOL4 v76;
  int v77;
  _BOOL4 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  double v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  double v91[10];

  v8 = *a3;
  v9 = *a3 << 11 >> 11;
  if (a4 > 1)
  {
    v17 = (v8 << 6 >> 27) - 1;
    v18 = v9 + (unsigned __int16)((__int16)v17 / 12);
    v19 = v17 - 12 * (((10923 * v17) >> 17) + ((10923 * v17) >> 31));
    if ((v19 & 0x8000) != 0)
      v20 = 11;
    else
      v20 = (unsigned __int16)v19;
    if ((v19 & 0x8000) != 0)
      v21 = v18 - 1;
    else
      v21 = v18;
    v22 = 1;
    HIDWORD(v24) = -1030792151 * v21 + 85899344;
    LODWORD(v24) = HIDWORD(v24);
    v23 = v24 >> 4;
    LODWORD(v24) = HIDWORD(v24);
    v25 = (v24 >> 2) > 0x28F5C28;
    if (v23 >= 0xA3D70B)
      v22 = v25;
    if ((v21 & 3) != 0)
      v22 = 0;
    v26 = floor(floor(((double)v21 + -1.0) / 400.0)+ -4.0+ floor(((double)v21 + -1.0) * 0.25)+ -492.0+ ((double)v21 + -1970.0) * 365.0- (floor(((double)v21 + -1.0) / 100.0)+ -19.0))+ (double)((v8 >> 26) + WTF::firstDayOfMonth[12 * v22 + v20] - 1);
    v27 = (*a2 << 6 >> 27) - 1;
    if (((v27 % 12) & 0x8000) != 0)
      v28 = 11;
    else
      v28 = (unsigned __int16)(v27 % 12);
    if (((v27 % 12) & 0x8000) != 0)
      v29 = (*a2 << 11 >> 11) + (unsigned __int16)(v27 / 12) - 1;
    else
      v29 = (*a2 << 11 >> 11) + (unsigned __int16)(v27 / 12);
    HIDWORD(v31) = 85899344 - 1030792151 * v29;
    LODWORD(v31) = HIDWORD(v31);
    v30 = v31 >> 4;
    LODWORD(v31) = HIDWORD(v31);
    v32 = (v31 >> 2) > 0x28F5C28;
    v33 = v30 < 0xA3D70B || v32;
    if ((v29 & 3) != 0)
      v33 = 0;
    v34 = v26
        - (floor(floor(((double)v29 + -1.0) / 400.0)+ -4.0+ floor(((double)v29 + -1.0) * 0.25)+ -492.0+ ((double)v29 + -1970.0) * 365.0- (floor(((double)v29 + -1.0) / 100.0)+ -19.0))+ (double)((*a2 >> 26) + WTF::firstDayOfMonth[12 * v33 + v28] - 1));
    v35 = 0.0;
    if (a4 == 2)
    {
      v35 = trunc(v34 / 7.0);
      v34 = fmod(v34, 7.0) + 0.0;
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(double *)(a5 + 16) = v35;
    goto LABEL_82;
  }
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *a2;
  v14 = *a2 << 11 >> 11;
  if (v9 > v14)
    goto LABEL_3;
  if (v9 >= v14)
  {
    v46 = (v8 << 6 >> 27);
    if (v46 <= (v13 << 6 >> 27))
    {
      if (v46 < (v13 << 6 >> 27))
        goto LABEL_29;
      v47 = (v8 >> 26);
      v48 = v13 >> 26;
      if (v47 <= v48)
      {
        if (v47 >= v48)
          goto LABEL_39;
        goto LABEL_29;
      }
    }
LABEL_3:
    v15 = 0;
    v16 = 1;
    goto LABEL_30;
  }
LABEL_29:
  v16 = -1;
  v15 = 1;
LABEL_30:
  v36 = (double)(v9 - v14);
  v91[0] = v36;
  memset(&v91[1], 0, 72);
  v37 = JSC::TemporalCalendar::isoDateAdd(a1, a2, (uint64_t)v91, 0);
  if (*(_DWORD *)(v12 + 80))
  {
    v85 = *(_DWORD *)(v12 + 80);
    if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
    {
      v89 = v37;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v38, v39, v40, v41, v42, v43);
      v37 = v89;
    }
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_39;
  }
  v44 = *a3 << 11 >> 11;
  if (v44 > v37 << 11 >> 11)
    goto LABEL_34;
  if (v44 < v37 << 11 >> 11)
    goto LABEL_43;
  if ((*a3 << 6 >> 27) > (v37 << 6 >> 27))
  {
LABEL_34:
    v45 = 1;
    goto LABEL_44;
  }
  if ((*a3 << 6 >> 27) < (v37 << 6 >> 27))
    goto LABEL_43;
  v49 = (*a3 >> 26);
  if (v49 > (v37 >> 26))
    goto LABEL_34;
  if (v49 < (v37 >> 26))
  {
LABEL_43:
    v45 = -1;
LABEL_44:
    v50 = (double)v16;
    if (v45 == v16)
      v51 = (double)((*a3 << 6 >> 27) - (*a2 << 6 >> 27));
    else
      v51 = (double)(12 * v16) + (double)((*a3 << 6 >> 27) - (*a2 << 6 >> 27));
    if (v45 != v16)
      v36 = v36 - (double)v16;
    v91[0] = v36;
    v91[1] = v51;
    memset(&v91[2], 0, 64);
    v52 = JSC::TemporalCalendar::isoDateAdd(a1, a2, (uint64_t)v91, 0);
    if (*(_DWORD *)(v12 + 80))
    {
      v86 = *(_DWORD *)(v12 + 80);
      if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      {
        v90 = v52;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v53, v54, v55, v56, v57, v58);
        v52 = v90;
      }
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_39;
    }
    v59 = *a3;
    v60 = *a3 << 11 >> 11;
    if (v60 > v52 << 11 >> 11)
      goto LABEL_51;
    if (v60 >= v52 << 11 >> 11)
    {
      v62 = (v59 << 6 >> 27);
      if (v62 > (v52 << 6 >> 27))
        goto LABEL_51;
      if (v62 >= (v52 << 6 >> 27))
      {
        v63 = (v59 >> 26);
        if (v63 <= (v52 >> 26))
        {
          if (v63 < (v52 >> 26))
            goto LABEL_57;
          if (a4 != 1)
          {
            *(double *)a5 = v36;
            *(double *)(a5 + 8) = v51;
            goto LABEL_91;
          }
          v84 = v51 + v36 * 12.0;
LABEL_88:
          *(_QWORD *)a5 = 0;
          *(double *)(a5 + 8) = v84;
LABEL_91:
          v83 = 0uLL;
          *(_OWORD *)(a5 + 16) = 0u;
          goto LABEL_83;
        }
LABEL_51:
        v61 = 1;
LABEL_58:
        if (v61 == v16)
          goto LABEL_65;
        v64 = (double)-v16;
        v65 = v51 - v50 == v64;
        if (v51 - v50 == v64)
          v51 = (double)(11 * v16);
        else
          v51 = v51 - v50;
        v66 = 0.0;
        if (v65)
          v66 = (double)v16;
        v36 = v36 - v66;
        v91[0] = v36;
        v91[1] = v51;
        memset(&v91[2], 0, 64);
        v52 = JSC::TemporalCalendar::isoDateAdd(a1, a2, (uint64_t)v91, 0);
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_65;
        v87 = *(_DWORD *)(v12 + 80);
        if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
        {
          v88 = v52;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v67, v68, v69, v70, v71, v72);
          v52 = v88;
        }
        if (!*(_QWORD *)(v12 + 16))
        {
LABEL_65:
          v73 = *a3;
          v74 = *a3 << 6;
          if (v52 << 6 >> 27 == v74 >> 27)
          {
            v75 = (v73 >> 26) - (v52 >> 26);
          }
          else if (v15)
          {
            if ((v73 & 3) != 0)
            {
              v76 = 0;
            }
            else
            {
              HIDWORD(v79) = -1030792151 * (v73 << 11 >> 11) + 85899344;
              LODWORD(v79) = HIDWORD(v79);
              if ((v79 >> 4) < 0xA3D70B)
              {
                v76 = 1;
              }
              else
              {
                HIDWORD(v80) = -1030792151 * (v73 << 11 >> 11) + 85899344;
                LODWORD(v80) = HIDWORD(v80);
                v76 = (v80 >> 2) > 0x28F5C28;
              }
            }
            v75 = (v73 >> 26)
                - (v52 >> 26)
                - JSC::ISO8601::daysInMonths[12 * v76 - 1 + (v74 >> 27)];
          }
          else
          {
            v77 = (v73 >> 26);
            if ((v52 & 3) != 0)
            {
              v78 = 0;
            }
            else
            {
              HIDWORD(v81) = -1030792151 * (v52 << 11 >> 11) + 85899344;
              LODWORD(v81) = HIDWORD(v81);
              if ((v81 >> 4) < 0xA3D70B)
              {
                v78 = 1;
              }
              else
              {
                HIDWORD(v82) = -1030792151 * (v52 << 11 >> 11) + 85899344;
                LODWORD(v82) = HIDWORD(v82);
                v78 = (v82 >> 2) > 0x28F5C28;
              }
            }
            v75 = v77
                - (v52 >> 26)
                + JSC::ISO8601::daysInMonths[12 * v78 - 1 + (v52 << 6 >> 27)];
          }
          v34 = (double)v75;
          if (a4 == 1)
          {
            *(_QWORD *)a5 = 0;
            *(double *)(a5 + 8) = v51 + v36 * 12.0;
          }
          else
          {
            *(double *)a5 = v36;
            *(double *)(a5 + 8) = v51;
          }
          *(_QWORD *)(a5 + 16) = 0;
LABEL_82:
          *(long double *)(a5 + 24) = v34;
          v83 = 0uLL;
LABEL_83:
          *(_OWORD *)(a5 + 32) = v83;
          *(_OWORD *)(a5 + 48) = v83;
          *(_OWORD *)(a5 + 64) = v83;
          return;
        }
LABEL_39:
        *(_OWORD *)(a5 + 48) = 0u;
        *(_OWORD *)(a5 + 64) = 0u;
        *(_OWORD *)(a5 + 16) = 0u;
        *(_OWORD *)(a5 + 32) = 0u;
        *(_OWORD *)a5 = 0u;
        return;
      }
    }
LABEL_57:
    v61 = -1;
    goto LABEL_58;
  }
  if (a4 == 1)
  {
    v84 = v36 * 12.0;
    goto LABEL_88;
  }
  *(double *)a5 = v36;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_QWORD *)(a5 + 72) = 0;
}

BOOL JSC::TemporalCalendar::equals(JSC::TemporalCalendar *this, JSC::JSGlobalObject *a2, JSC::TemporalCalendar *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::Structure *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSString *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSString *v24;
  int8x16_t v25;
  WTF *v26;
  const WTF::StringImpl *v27;
  int v29;
  int v30;

  if (a3 == this)
    return 1;
  v10 = *((_QWORD *)a2 + 7);
  v17 = (JSC::JSString *)JSC::JSObject::toString(this, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v29 = *(_DWORD *)(v10 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v24 = (JSC::JSString *)JSC::JSObject::toString(a3, a2, v11, v12, v13, v14, v15, v16);
  if (*(_DWORD *)(v10 + 80))
  {
    v30 = *(_DWORD *)(v10 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v26 = (WTF *)*((_QWORD *)v17 + 1);
  if ((v26 & 1) != 0)
    return JSC::JSString::equalSlowCase(v17, a2, v24, v19, v20, v21, v22, v23, v25);
  v27 = (const WTF::StringImpl *)*((_QWORD *)v24 + 1);
  if ((v27 & 1) != 0)
    return JSC::JSString::equalSlowCase(v17, a2, v24, v19, v20, v21, v22, v23, v25);
  else
    return WTF::equal(v26, v27, v18);
}

void JSC::TemporalCalendarConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x800000002;
  *(_QWORD *)(v6 + 8) = "Calendar";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::TemporalCalendarConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalCalendarConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callTemporalCalendar(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Calendar", 9);
}

unint64_t JSC::constructTemporalCalendar(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject *i;
  char **v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t (*v67)(uint64_t *);
  uint64_t *v68;
  int v69;
  uint64_t (*v70)(uint64_t *);
  uint64_t *v71;
  uint64_t (*v72)(uint64_t *);
  uint64_t *v73;
  WTF::StringImpl *v74;
  char v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;

  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v18 = *(JSC::VM **)(this + 416);
    if ((v18 & 1) == 0)
      goto LABEL_15;
    v72 = *(uint64_t (**)(uint64_t *))((unint64_t)v18 & 0xFFFFFFFFFFFFFFFCLL);
    v73 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v73 = (uint64_t *)(this - 16);
    v77 = *v73;
    v78 = this;
    v79 = (char *)(this + 416);
    SubclassStructure = (JSC::JSObject *)v72(&v77);
  }
  else
  {
    v77 = *(_QWORD *)(this + 56);
    for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v14 != &JSC::JSBoundFunction::s_info && v14 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v15 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, (JSC::VM **)&v77, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v15 = 0;
LABEL_10:
    if (*(_DWORD *)(v11 + 80))
    {
      v69 = *(_DWORD *)(v11 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v18 = 0;
        goto LABEL_15;
      }
    }
    v16 = *(_QWORD *)(v15 + 416);
    if ((v16 & 1) != 0)
    {
      v70 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v71 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v15 & 8) != 0)
        v71 = (uint64_t *)(v15 - 16);
      v77 = *v71;
      v78 = v15;
      v79 = (char *)(v15 + 416);
      v16 = v70(&v77);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
  }
  v18 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v11 + 80))
  {
    v65 = *(_DWORD *)(v11 + 80);
    if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v77 = 10;
LABEL_53:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v77, (JSC::JSGlobalObject *)this, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v74);
    goto LABEL_23;
  }
  v19 = *((_QWORD *)a2 + 6);
  v77 = v19;
  if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
    goto LABEL_53;
  v20 = *(WTF::StringImpl **)(v19 + 8);
  if ((v20 & 1) != 0)
  {
    v20 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v19, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (!v20)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v20)
LABEL_21:
    *(_DWORD *)v20 += 2;
LABEL_22:
  v74 = v20;
LABEL_23:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_24;
  v66 = *(_DWORD *)(v11 + 80);
  if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_24:
    if (v74)
    {
      v21 = (unsigned __int8 *)*((_QWORD *)v74 + 1);
      v22 = *((unsigned int *)v74 + 1) | ((unint64_t)((*((_DWORD *)v74 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v21 = 0;
      v22 = 0x100000000;
    }
    v23 = atomic_load(&JSC::intlAvailableCalendars(void)::initializeOnce);
    if (v23 != -1)
    {
      v77 = (uint64_t)&v75;
      v76 = (WTF::StringImpl *)&v77;
      std::__call_once(&JSC::intlAvailableCalendars(void)::initializeOnce, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableCalendars(void)::$_0 &&>>);
    }
    if (dword_1EE34300C)
    {
      v24 = 0;
      while (1)
      {
        v25 = *(_QWORD *)(JSC::intlAvailableCalendars(void)::availableCalendars + 8 * v24);
        if (v25)
        {
          v26 = *(unsigned int *)(v25 + 16);
          v27 = *(unsigned __int8 **)(v25 + 8);
          v25 = *(unsigned int *)(v25 + 4);
          v28 = (v26 >> 2) & 1;
        }
        else
        {
          v27 = 0;
          v28 = 1;
        }
        if (WTF::operator==(v27, v25 | (v28 << 32), v21, v22))
          break;
        if (++v24 >= dword_1EE34300C)
          goto LABEL_36;
      }
      v46 = JSC::TemporalCalendar::create((JSC::TemporalCalendar *)v11, v18, (JSC::Structure *)v24, v29, v30, v31, v32, v33);
      goto LABEL_44;
    }
LABEL_36:
    v34 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x1300000002;
    *(_QWORD *)(v34 + 8) = "invalid calendar ID";
    *(_DWORD *)(v34 + 16) = 4;
    v76 = (WTF::StringImpl *)v34;
    v35 = *(_QWORD *)(this + 128);
    v36 = *(JSC::Heap ***)(this + 56);
    if ((v35 & 1) != 0)
    {
      v67 = *(uint64_t (**)(uint64_t *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v68 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v68 = (uint64_t *)(this - 16);
      v77 = *v68;
      v78 = this;
      v79 = (char *)(this + 128);
      v35 = v67(&v77);
    }
    v37 = JSC::ErrorInstance::create(v36, v35, &v76, 0, 0, 0, 2, 1);
    v44 = (JSC::Exception *)v37;
    if ((v37 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
    {
      v44 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v44, v43, v38, v39, v40, v41, v42);
    v45 = v76;
    v76 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
  v46 = 0;
LABEL_44:
  v47 = v74;
  v74 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  return v46;
}

unint64_t JSC::TemporalCalendarPrototype::create(JSC::TemporalCalendarPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1100000002;
  *(_QWORD *)(v13 + 8) = "Temporal.Calendar";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalCalendarPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalCalendarPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned __int8 *JSC::temporalCalendarPrototypeGetterId(JSC::JSGlobalObject *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;

  v9 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || a2[5] != 2)
    return JSC::JSValue::toStringSlowCase(&v9, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return a2;
}

unint64_t JSC::TemporalDuration::create(uint64_t a1, JSC::VM *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = *(_QWORD **)(a1 + 40816);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::temporalDurationSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v17 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v17);
    v11[5] = result + (int)v17;
LABEL_4:
    v11[3] = result + 96;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, a1 + 192, 96, 0, 0, v18, v19, v20);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_OWORD *)(result + 16) = *a3;
  v14 = a3[1];
  v15 = a3[2];
  v16 = a3[4];
  *(_OWORD *)(result + 64) = a3[3];
  *(_OWORD *)(result + 80) = v16;
  *(_OWORD *)(result + 32) = v14;
  *(_OWORD *)(result + 48) = v15;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::TemporalDuration::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalDuration::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::TemporalDuration::tryCreateIfValid(unint64_t a1, JSC::ISO8601 *this, unint64_t a3)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Exception *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t *);
  uint64_t *v41;
  uint64_t (*v42)(uint64_t *);
  uint64_t *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  JSC::JSGlobalObject *v46;
  _QWORD *v47;

  v6 = *(JSC::VM **)(a1 + 56);
  if (JSC::ISO8601::isValidDuration(this, (const Duration *)this))
  {
    if (!a3)
    {
      a3 = *(_QWORD *)(a1 + 424);
      if ((a3 & 1) != 0)
      {
        v42 = *(uint64_t (**)(uint64_t *))(a3 & 0xFFFFFFFFFFFFFFFCLL);
        v43 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v43 = (uint64_t *)(a1 - 16);
        v45 = *v43;
        v46 = (JSC::JSGlobalObject *)a1;
        v47 = (_QWORD *)(a1 + 424);
        a3 = v42(&v45);
      }
    }
    return JSC::TemporalDuration::create((uint64_t)v6, (JSC::VM *)a3, this, v7, v8, v9, v10, v11);
  }
  else
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0x4200000002;
    *(_QWORD *)(v13 + 8) = "Temporal.Duration properties must be finite and of consistent sign";
    *(_DWORD *)(v13 + 16) = 4;
    v44 = (WTF::StringImpl *)v13;
    v14 = *(_QWORD *)(a1 + 128);
    v15 = *(JSC::Heap ***)(a1 + 56);
    if ((v14 & 1) != 0)
    {
      v40 = *(uint64_t (**)(uint64_t *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
      v41 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v41 = (uint64_t *)(a1 - 16);
      v45 = *v41;
      v46 = (JSC::JSGlobalObject *)a1;
      v47 = (_QWORD *)(a1 + 128);
      v14 = v40(&v45);
    }
    v16 = JSC::ErrorInstance::create(v15, v14, &v44, 0, 0, 0, 2, 1);
    v23 = (JSC::Exception *)v16;
    if ((v16 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
    {
      v23 = (JSC::Exception *)JSC::Exception::create((uint64_t)v6, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
    }
    JSC::VM::throwException(v6, (JSC::JSGlobalObject *)a1, v23, v22, v17, v18, v19, v20, v21);
    v31 = v44;
    v44 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    return 0;
  }
}

void JSC::TemporalDuration::toISO8601Duration(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int8x16_t v24;
  unint64_t v25;
  double v26;
  double v27;
  BOOL v29;
  double v30;
  int v32;
  int v33;
  unsigned __int16 **v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  JSC::Exception *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  BOOL v61;
  int v62;
  _BOOL4 v63;
  unint64_t v64;
  JSC::Heap **v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  JSC::Exception *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  JSC::Heap **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  JSC::Exception *v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t (*v129)(__int128 *);
  _QWORD *v130;
  int v131;
  uint64_t (*v132)(WTF::StringImpl **);
  WTF::StringImpl **v133;
  uint64_t (*v134)(WTF::StringImpl **);
  WTF::StringImpl **v135;
  double v136;
  JSC::VMTraps *v137;
  WTF::StringImpl *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  char v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  JSC::VM *v150;
  WTF::StringImpl *v151;
  int *v152;
  unsigned __int16 **v153;
  WTF::StringImpl *v154;
  unint64_t v155;
  unint64_t v156;

  v11 = *(_QWORD *)(a1 + 56);
  v12 = 0xFFFE000000000002;
  v150 = (JSC::VM *)v11;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v145 = 0u;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_48;
  v13 = (unsigned int *)a2;
  v14 = *(unsigned __int8 *)(a2 + 5);
  if (v14 >= 0x17)
  {
    v153 = (unsigned __int16 **)v11;
    if (&JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
    {
      v15 = 0;
      v142 = 0uLL;
      v143 = 0uLL;
      v137 = (JSC::VMTraps *)(v11 + 64);
      v16 = &JSC::temporalUnitsInTableOrder;
      v140 = 0uLL;
      v141 = 0uLL;
      v139 = 0uLL;
      while (1)
      {
        while (1)
        {
          v12 = *v16;
          v17 = JSC::temporalUnitPluralPropertyName(v11, *v16);
          v23 = (int *)JSC::JSObject::get(v13, a1, v17, v18, v19, v20, v21, v22);
          v152 = v23;
          v25 = *(unsigned int *)(v11 + 80);
          if ((_DWORD)v25)
          {
            v32 = *(_DWORD *)(v11 + 80);
            if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v137, 7u, a3, a4, a5, a6, a7, a8);
            v25 = *(_QWORD *)(v11 + 16);
            if (v25)
              goto LABEL_101;
            v23 = v152;
          }
          if (v23 != (int *)10)
            break;
          if (++v16 == (char *)&unk_199159840)
          {
            if ((v15 & 1) != 0)
            {
LABEL_50:
              v147 = v141;
              v148 = v142;
              v149 = v143;
              v145 = v139;
              v146 = v140;
            }
            else
            {
              JSC::throwTypeError(a1, (JSC::VM **)&v153, (uint64_t)"Object must contain at least one Temporal.Duration property", 60);
              v145 = 0u;
              v146 = 0u;
              v147 = 0u;
              v148 = 0u;
              v149 = 0u;
            }
            goto LABEL_53;
          }
        }
        if ((unint64_t)v23 >= 0xFFFE000000000000)
        {
          v26 = (double)(int)v23;
        }
        else
        {
          v25 = (unint64_t)(v23 - 0x800000000000);
          if ((unint64_t)(v23 - 0x800000000000) > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v152, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, v24);
          else
            *(_QWORD *)&v26 = v23 - 0x800000000000;
        }
        if (v12 >= 0xA)
          break;
        v27 = v26 + 0.0;
        *((double *)&v139 + v12) = v27;
        if (*(_DWORD *)(v11 + 80))
        {
          v33 = *(_DWORD *)(v11 + 80);
          if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
          {
            v136 = v27;
            JSC::VMTraps::handleTraps(v137, 7u, a3, a4, a5, a6, a7, a8);
            v27 = v136;
          }
          if (*(_QWORD *)(v11 + 16))
            goto LABEL_101;
        }
        v29 = ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
           || (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL
           || *(_QWORD *)&v27 == 0;
        v30 = trunc(v27);
        if (!v29 || v30 != v27)
        {
          v108 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v108 = 0x2D00000002;
          *(_QWORD *)(v108 + 8) = "Temporal.Duration properties must be integers";
          *(_DWORD *)(v108 + 16) = 4;
          v151 = (WTF::StringImpl *)v108;
          v109 = *(_QWORD *)(a1 + 128);
          v110 = *(JSC::Heap ***)(a1 + 56);
          if ((v109 & 1) != 0)
          {
            v134 = *(uint64_t (**)(WTF::StringImpl **))(v109 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v135 = (WTF::StringImpl **)(a1 - 16);
            else
              v135 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            v154 = *v135;
            v155 = a1;
            v156 = a1 + 128;
            v109 = v134(&v154);
          }
          v111 = JSC::ErrorInstance::create(v110, v109, &v151, 0, 0, 0, 2, 1);
          v118 = (JSC::Exception *)v111;
          if ((v111 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v111 & 0xFFFFFFFE) + 0x4C)))
          {
            v118 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v111, 0, v112, v113, v114, v115, v116);
          }
          JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v118, v117, v112, v113, v114, v115, v116);
          v119 = v151;
          v151 = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
            {
              WTF::StringImpl::~StringImpl(v119, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
            }
            else
            {
              *(_DWORD *)v119 -= 2;
            }
          }
LABEL_101:
          v148 = 0u;
          v149 = 0u;
          v146 = 0u;
          v147 = 0u;
          v145 = 0u;
LABEL_53:
          v12 = 0xFFFE000000000002;
          goto LABEL_54;
        }
        ++v16;
        v15 = 1;
        if (v16 == (char *)&unk_199159840)
          goto LABEL_50;
      }
      __break(1u);
LABEL_109:
      v129 = *(uint64_t (**)(__int128 *))(a2 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v130 = (_QWORD *)(a1 - 16);
      else
        v130 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)&v139 = *v130;
      *((_QWORD *)&v139 + 1) = a1;
      *(_QWORD *)&v140 = v25;
      a2 = v129(&v139);
LABEL_58:
      v44 = JSC::ErrorInstance::create((JSC::Heap **)v13, a2, &v154, 0, 0, 0, 2, 1);
      v51 = (JSC::Exception *)v44;
      if ((v44 & v12) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)))
      {
        v51 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v44, 0, v45, v46, v47, v48, v49);
      }
      JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v51, v50, v45, v46, v47, v48, v49);
      v59 = v154;
      v154 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v59 -= 2;
        }
      }
LABEL_63:
      a9[3] = 0u;
      a9[4] = 0u;
      a9[1] = 0u;
      a9[2] = 0u;
      *a9 = 0u;
      return;
    }
    v39 = *(_OWORD *)(a2 + 48);
    v146 = *(_OWORD *)(a2 + 32);
    v147 = v39;
    v40 = *(_OWORD *)(a2 + 80);
    v148 = *(_OWORD *)(a2 + 64);
    v149 = v40;
    v145 = *(_OWORD *)(a2 + 16);
LABEL_54:
    if (*(_DWORD *)(v11 + 80))
    {
      v128 = *(_DWORD *)(v11 + 80);
      if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
        goto LABEL_63;
    }
LABEL_55:
    if (JSC::ISO8601::isValidDuration((JSC::ISO8601 *)&v145, (const Duration *)a2))
    {
      v41 = v148;
      a9[2] = v147;
      a9[3] = v41;
      a9[4] = v149;
      v42 = v146;
      *a9 = v145;
      a9[1] = v42;
      return;
    }
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x4200000002;
    *(_QWORD *)(v43 + 8) = "Temporal.Duration properties must be finite and of consistent sign";
    *(_DWORD *)(v43 + 16) = 4;
    v154 = (WTF::StringImpl *)v43;
    v25 = a1 + 128;
    a2 = *(_QWORD *)(a1 + 128);
    v13 = *(unsigned int **)(a1 + 56);
    if ((a2 & 1) == 0)
      goto LABEL_58;
    goto LABEL_109;
  }
  if (v14 != 2)
  {
LABEL_48:
    JSC::throwTypeError(a1, &v150, (uint64_t)"can only convert to Duration from object or string values", 58);
    *a9 = 0u;
    a9[1] = 0u;
    a9[2] = 0u;
    a9[3] = 0u;
    a9[4] = 0u;
    return;
  }
  v34 = *(unsigned __int16 ***)(a2 + 8);
  if ((v34 & 1) != 0)
  {
    v34 = (unsigned __int16 **)*JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)a1, a3, a4, (int8x16_t)0, a5, a6, a7, a8);
    if (!v34)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (v34)
LABEL_42:
    *(_DWORD *)v34 += 2;
LABEL_43:
  v153 = v34;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_44;
  v131 = *(_DWORD *)(v11 + 80);
  if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_44:
    if (v34)
    {
      v35 = v34[1];
      v36 = *((_DWORD *)v34 + 1);
      v37 = ((unint64_t)*((unsigned int *)v34 + 4) >> 2) & 1;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      v37 = 1;
    }
    JSC::ISO8601::parseDuration(v35, v36 | (v37 << 32), (uint64_t)&v139);
    if (v144)
    {
      v38 = 0;
      v147 = v141;
      v148 = v142;
      v149 = v143;
      v145 = v139;
      v146 = v140;
LABEL_82:
      v34 = v153;
      goto LABEL_83;
    }
    JSC::ellipsizeAt(3090, &v153, &v138);
    if (v138)
    {
      v60 = *((_DWORD *)v138 + 1);
      if (v60 < 0)
        goto LABEL_131;
    }
    else
    {
      v60 = 0;
    }
    v61 = __OFADD__(v60, 32);
    v62 = v60 + 32;
    if (!v61 && !__OFADD__(v62, 1))
    {
      v63 = !v138 || (*((_BYTE *)v138 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v62 + 1), v63, (int8x16_t *)"'", 1u, (uint64_t)v138, (int8x16_t *)"' is not a valid Duration string", 0x20u, &v152);
      if (v152)
      {
        v64 = *(_QWORD *)(a1 + 128);
        v65 = *(JSC::Heap ***)(a1 + 56);
        if ((v64 & 1) != 0)
        {
          v132 = *(uint64_t (**)(WTF::StringImpl **))(v64 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v133 = (WTF::StringImpl **)(a1 - 16);
          else
            v133 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          v154 = *v133;
          v155 = a1;
          v156 = a1 + 128;
          v64 = v132(&v154);
        }
        v66 = JSC::ErrorInstance::create(v65, v64, (WTF::StringImpl **)&v152, 0, 0, 0, 2, 1);
        v73 = (JSC::Exception *)v66;
        if ((v66 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C)))
        {
          v73 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v66, 0, v67, v68, v69, v70, v71);
        }
        JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v73, v72, v67, v68, v69, v70, v71);
        v74 = (WTF::StringImpl *)v152;
        v152 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
          {
            WTF::StringImpl::~StringImpl(v74, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v74 -= 2;
          }
        }
        v75 = v138;
        v138 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl(v75, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
        a9[3] = 0u;
        a9[4] = 0u;
        a9[1] = 0u;
        a9[2] = 0u;
        *a9 = 0u;
        v38 = 1;
        goto LABEL_82;
      }
LABEL_132:
      __break(0xC471u);
      JUMPOUT(0x198BFF124);
    }
LABEL_131:
    v152 = 0;
    goto LABEL_132;
  }
  a9[3] = 0u;
  a9[4] = 0u;
  a9[1] = 0u;
  a9[2] = 0u;
  *a9 = 0u;
  v38 = 1;
LABEL_83:
  v153 = 0;
  if (!v34)
    goto LABEL_86;
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
LABEL_86:
    if (!v38)
      goto LABEL_55;
    return;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v34, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
  if (!v38)
    goto LABEL_55;
}

unint64_t JSC::TemporalDuration::toTemporalDuration(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(_QWORD *);
  _QWORD *v20;
  _OWORD v21[5];
  _QWORD v22[3];

  v9 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::TemporalDuration::toISO8601Duration(a1, a2, a3, a4, a5, a6, a7, a8, v21);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_4;
    v18 = *(_DWORD *)(v9 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v9 + 16))
    {
      return 0;
    }
    else
    {
LABEL_4:
      v16 = *(_QWORD *)(a1 + 424);
      if ((v16 & 1) != 0)
      {
        v19 = *(uint64_t (**)(_QWORD *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
        v20 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v20 = (_QWORD *)(a1 - 16);
        v22[0] = *v20;
        v22[1] = a1;
        v22[2] = a1 + 424;
        v16 = v19(v22);
      }
      return JSC::TemporalDuration::create(v9, (JSC::VM *)v16, v21, v11, v12, v13, v14, v15);
    }
  }
  return a2;
}

double JSC::TemporalDuration::toLimitedDuration@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v14;
  const Duration *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  JSC::Heap **v30;
  uint64_t (*v31)(_QWORD *);
  _QWORD *v32;
  uint64_t v33;
  int v34;
  char v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  size_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  JSC::Exception *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int128 *v82;
  unsigned __int128 *v83;
  unsigned __int128 v84;
  char v85;
  WTF::StringImpl *v87;
  _OWORD v88[5];
  _QWORD v89[3];
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;

  v10 = a4;
  v11 = (_WORD *)a3;
  v14 = *(_QWORD *)(a1 + 56);
  JSC::TemporalDuration::toISO8601Duration(a1, a2, a3, a4, a5, a6, a7, a8, v88);
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_2;
  v81 = *(_DWORD *)(v14 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v14 + 16))
  {
LABEL_53:
    *(_QWORD *)&v26 = 0;
    a9[3] = 0u;
    a9[4] = 0u;
    a9[1] = 0u;
    a9[2] = 0u;
    *a9 = 0u;
  }
  else
  {
LABEL_2:
    if (!JSC::ISO8601::isValidDuration((JSC::ISO8601 *)v88, v15))
    {
      v27 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v27 = 0x4200000002;
      *(_QWORD *)(v27 + 8) = "Temporal.Duration properties must be finite and of consistent sign";
      *(_DWORD *)(v27 + 16) = 4;
      v87 = (WTF::StringImpl *)v27;
      v29 = a1 + 128;
      v28 = *(_QWORD *)(a1 + 128);
      v30 = *(JSC::Heap ***)(a1 + 56);
      if ((v28 & 1) == 0)
        goto LABEL_48;
      v31 = *(uint64_t (**)(_QWORD *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
      v32 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v32 = (_QWORD *)(a1 - 16);
      goto LABEL_62;
    }
    if (v10)
    {
      v23 = (char *)v88;
      while (1)
      {
        v24 = *(unsigned __int8 *)v11;
        if (v24 >= 0xA)
          break;
        if (*((double *)v88 + v24) != 0.0)
        {
          v33 = JSC::temporalUnitPluralPropertyName(v14, v24);
          v10 = v33;
          if (v33)
          {
            if ((*(_BYTE *)(v33 + 16) & 0x20) == 0)
            {
              v34 = *(_DWORD *)(v33 + 4);
              if ((v34 & 0x80000000) == 0)
              {
                v35 = 0;
LABEL_17:
                v36 = __OFADD__(v34, 70);
                v37 = v34 + 70;
                if (!v36)
                {
                  v38 = (v37 + 7);
                  if (!__OFADD__(v37, 7))
                  {
                    if ((v35 & 1) != 0 || (*(_BYTE *)(v10 + 16) & 4) != 0)
                    {
                      WTF::tryFastCompactMalloc((WTF *)(v38 + 20), v89);
                      v9 = v89[0];
                      if (v89[0])
                      {
                        *(_DWORD *)v89[0] = 2;
                        *(_DWORD *)(v9 + 4) = v38;
                        *(_QWORD *)(v9 + 8) = v9 + 20;
                        *(_QWORD *)(v9 + 16) = 0x6964644100000004;
                        v39 = (_BYTE *)(v9 + 27);
                        *(_DWORD *)(v9 + 23) = 543649385;
                        if (v10)
                        {
                          v40 = *(_BYTE **)(v10 + 8);
                          v41 = *(unsigned int *)(v10 + 4);
                          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                          {
                            if ((_DWORD)v41 == 1)
                            {
                              *v39 = *v40;
                            }
                            else if ((_DWORD)v41)
                            {
                              memcpy((void *)(v9 + 27), v40, v41);
                            }
                          }
                          else
                          {
                            if (v41 < 0x10)
                            {
                              v82 = (unsigned __int128 *)(v9 + 27);
                            }
                            else
                            {
                              v82 = (unsigned __int128 *)&v39[v41 & 0xFFFFFFF0];
                              v83 = (unsigned __int128 *)(v9 + 27);
                              do
                              {
                                v84 = (unsigned __int128)vld2q_s8(v40);
                                v40 += 32;
                                *v83++ = v84;
                              }
                              while (v83 != v82);
                            }
                            while (v82 != (unsigned __int128 *)&v39[v41])
                            {
                              v85 = *v40;
                              v40 += 2;
                              *(_BYTE *)v82 = v85;
                              v82 = (unsigned __int128 *)((char *)v82 + 1);
                            }
                          }
                          v42 = *(unsigned int *)(v10 + 4);
                        }
                        else
                        {
                          v42 = 0;
                        }
                        qmemcpy(&v39[v42], " not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead", 70);
                        goto LABEL_47;
                      }
                    }
                    else if (v38 <= 0x7FFFFFEF)
                    {
                      WTF::tryFastCompactMalloc((WTF *)(2 * (v37 + 7) + 20), v89);
                      v9 = v89[0];
                      if (v89[0])
                      {
                        *(_DWORD *)v89[0] = 2;
                        *(_DWORD *)(v9 + 4) = v38;
                        *(_QWORD *)(v9 + 20) = 0x69006400640041;
                        *(_QWORD *)(v9 + 8) = v9 + 20;
                        *(_DWORD *)(v9 + 16) = 0;
                        v11 = (_WORD *)(v9 + 34);
                        *(_DWORD *)(v9 + 28) = 6750318;
                        *(_WORD *)(v9 + 32) = 32;
                        v24 = *(_QWORD *)(v10 + 8);
                        v22 = *(unsigned int *)(v10 + 4);
                        if ((*(_BYTE *)(v10 + 16) & 4) == 0)
                        {
                          if ((_DWORD)v22 == 1)
                          {
                            *v11 = *(_WORD *)v24;
                          }
                          else if ((_DWORD)v22)
                          {
                            memcpy((void *)(v9 + 34), (const void *)v24, 2 * v22);
                          }
LABEL_46:
                          v90.val[0] = *(int8x16_t *)" not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead";
                          v92.val[0] = *(int8x16_t *)"nt. Try Temporal.ZonedDateTime instead";
                          v53 = (char *)&v11[*(unsigned int *)(v10 + 4)];
                          v94.val[1] = 0uLL;
                          v94.val[0] = *(int8x16_t *)".ZonedDateTime instead";
                          v92.val[1] = 0u;
                          v96.val[0] = *(int8x16_t *)"y Temporal.Instant. Try Temporal.ZonedDateTime instead";
                          v90.val[1] = 0u;
                          v54 = v53;
                          vst2q_s8(v54, v90);
                          v54 += 32;
                          v96.val[1] = 0u;
                          vst2q_s8(v54, v96);
                          v55 = v53 + 64;
                          vst2q_s8(v55, v92);
                          v56 = v53 + 96;
                          vst2q_s8(v56, v94);
                          *((_QWORD *)v53 + 16) = 0x6500740073006ELL;
                          *((_DWORD *)v53 + 34) = 6553697;
LABEL_47:
                          v87 = (WTF::StringImpl *)v9;
                          v29 = a1 + 128;
                          v28 = *(_QWORD *)(a1 + 128);
                          v30 = *(JSC::Heap ***)(a1 + 56);
                          if ((v28 & 1) == 0)
                          {
LABEL_48:
                            v57 = JSC::ErrorInstance::create(v30, v28, &v87, 0, 0, 0, 2, 1);
                            v64 = (JSC::Exception *)v57;
                            if ((v57 & 0xFFFE000000000002) != 0
                              || &JSC::Exception::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v57 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
                            {
                              v64 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v57, 0, v58, v59, v60, v61, v62);
                            }
                            JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a1, v64, v63, v58, v59, v60, v61, v62);
                            v72 = v87;
                            v87 = 0;
                            if (v72)
                            {
                              if (*(_DWORD *)v72 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
                                WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
                              }
                              else
                              {
                                *(_DWORD *)v72 -= 2;
                              }
                            }
                            goto LABEL_53;
                          }
                          v31 = *(uint64_t (**)(_QWORD *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
                          if ((a1 & 8) != 0)
                            v32 = (_QWORD *)(a1 - 16);
                          else
                            v32 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
LABEL_62:
                          v89[0] = *v32;
                          v89[1] = a1;
                          v89[2] = v29;
                          v28 = v31(v89);
                          goto LABEL_48;
                        }
                        v23 = (char *)&v11[v22];
                        if (v22 < 0x40)
                        {
                          v43 = (char *)(v9 + 34);
LABEL_45:
                          while (v43 != v23)
                          {
                            v52 = *(unsigned __int8 *)v24++;
                            *(_WORD *)v43 = v52;
                            v43 += 2;
                          }
                          goto LABEL_46;
                        }
LABEL_41:
                        v43 = (char *)&v11[v22 & 0xFFFFFFC0];
                        v44 = 0uLL;
                        v45 = (char *)v11;
                        do
                        {
                          v91.val[0] = *(int8x16_t *)v24;
                          v46 = *(int8x16_t *)(v24 + 16);
                          v93.val[0] = *(int8x16_t *)(v24 + 32);
                          v47 = *(_OWORD *)(v24 + 48);
                          v24 += 64;
                          v48 = v47;
                          v93.val[1] = 0uLL;
                          v95.val[0] = v46;
                          v91.val[1] = 0uLL;
                          v49 = v45;
                          vst2q_s8(v49, v91);
                          v49 += 32;
                          v95.val[1] = 0uLL;
                          vst2q_s8(v49, v95);
                          v50 = v45 + 64;
                          vst2q_s8(v50, v93);
                          v51 = v45 + 96;
                          vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
                          v45 += 128;
                        }
                        while (v45 != v43);
                        goto LABEL_45;
                      }
                    }
                  }
                }
              }
              __break(0xC471u);
              JUMPOUT(0x198BFF6D0);
            }
            v10 = 0;
          }
          v34 = 0;
          v35 = 1;
          goto LABEL_17;
        }
        v11 = (_WORD *)((char *)v11 + 1);
        if (!--v10)
          goto LABEL_8;
      }
      __break(1u);
      goto LABEL_41;
    }
LABEL_8:
    v25 = v88[3];
    a9[2] = v88[2];
    a9[3] = v25;
    a9[4] = v88[4];
    v26 = v88[1];
    *a9 = v88[0];
    a9[1] = v26;
  }
  return *(double *)&v26;
}

unint64_t JSC::TemporalDuration::compare(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Heap **v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  JSC::Exception *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t (*v58)(_QWORD *);
  _QWORD *v59;
  double *v60;
  WTF::StringImpl *v61;
  _QWORD v62[3];

  v10 = *(_QWORD *)(a1 + 56);
  v17 = (double *)JSC::TemporalDuration::toTemporalDuration(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v56 = *(_DWORD *)(v10 + 80);
    if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = (double *)JSC::TemporalDuration::toTemporalDuration(a1, a3, v11, v12, v13, v14, v15, v16);
  if (*(_DWORD *)(v10 + 80))
  {
    v57 = *(_DWORD *)(v10 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    {
      v60 = v18;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v19, v20, v21, v22, v23, v24);
      v18 = v60;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v17[2] != 0.0 || v18[2] != 0.0 || v17[3] != 0.0 || v18[3] != 0.0 || v17[4] != 0.0 || v18[4] != 0.0)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x5000000002;
    *(_QWORD *)(v25 + 8) = "Cannot compare a duration of years, months, or weeks without a relativeTo option";
    *(_DWORD *)(v25 + 16) = 4;
    v61 = (WTF::StringImpl *)v25;
    v26 = *(_QWORD *)(a1 + 128);
    v27 = *(JSC::Heap ***)(a1 + 56);
    if ((v26 & 1) != 0)
    {
      v58 = *(uint64_t (**)(_QWORD *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
      v59 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v59 = (_QWORD *)(a1 - 16);
      v62[0] = *v59;
      v62[1] = a1;
      v62[2] = a1 + 128;
      v26 = v58(v62);
    }
    v28 = JSC::ErrorInstance::create(v27, v26, &v61, 0, 0, 0, 2, 1);
    v35 = (JSC::Exception *)v28;
    if ((v28 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)))
    {
      v35 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v28, 0, v29, v30, v31, v32, v33);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v35, v34, v29, v30, v31, v32, v33);
    v43 = v61;
    v61 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
    return 0;
  }
  v53 = v17[11]
      + (v17[10] + (v17[9] + (v17[8] + (v17[7] + (v17[6] + v17[5] * 24.0) * 60.0) * 60.0) * 1000.0) * 1000.0) * 1000.0;
  v54 = v18[11]
      + (v18[10] + (v18[9] + (v18[8] + (v18[7] + (v18[6] + v18[5] * 24.0) * 60.0) * 60.0) * 1000.0) * 1000.0) * 1000.0;
  v55 = 0xFFFE000000000000;
  if (v53 < v54)
    v55 = 0xFFFE0000FFFFFFFFLL;
  if (v53 <= v54)
    return v55;
  else
    return 0xFFFE000000000001;
}

uint64_t JSC::TemporalDuration::sign(JSC::TemporalDuration *this, const Duration *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (*(double *)this >= 0.0)
    v2 = 1;
  else
    v2 = 0xFFFFFFFFLL;
  if (*(double *)this >= 0.0 && *(double *)this <= 0.0)
  {
    v3 = *((double *)this + 1);
    if (v3 > 0.0)
      LODWORD(v2) = 1;
    if (v3 < 0.0)
      v2 = 0xFFFFFFFFLL;
    else
      v2 = v2;
    if (v3 >= 0.0 && v3 <= 0.0)
    {
      v4 = *((double *)this + 2);
      if (v4 > 0.0)
        LODWORD(v2) = 1;
      if (v4 < 0.0)
        v2 = 0xFFFFFFFFLL;
      else
        v2 = v2;
      if (v4 >= 0.0 && v4 <= 0.0)
      {
        v5 = *((double *)this + 3);
        if (v5 > 0.0)
          LODWORD(v2) = 1;
        if (v5 < 0.0)
          v2 = 0xFFFFFFFFLL;
        else
          v2 = v2;
        if (v5 >= 0.0 && v5 <= 0.0)
        {
          v6 = *((double *)this + 4);
          if (v6 > 0.0)
            LODWORD(v2) = 1;
          if (v6 < 0.0)
            v2 = 0xFFFFFFFFLL;
          else
            v2 = v2;
          if (v6 >= 0.0 && v6 <= 0.0)
          {
            v7 = *((double *)this + 5);
            if (v7 > 0.0)
              LODWORD(v2) = 1;
            if (v7 < 0.0)
              v2 = 0xFFFFFFFFLL;
            else
              v2 = v2;
            if (v7 >= 0.0 && v7 <= 0.0)
            {
              v8 = *((double *)this + 6);
              if (v8 > 0.0)
                LODWORD(v2) = 1;
              if (v8 < 0.0)
                v2 = 0xFFFFFFFFLL;
              else
                v2 = v2;
              if (v8 >= 0.0 && v8 <= 0.0)
              {
                v9 = *((double *)this + 7);
                if (v9 > 0.0)
                  LODWORD(v2) = 1;
                if (v9 < 0.0)
                  v2 = 0xFFFFFFFFLL;
                else
                  v2 = v2;
                if (v9 >= 0.0 && v9 <= 0.0)
                {
                  v10 = *((double *)this + 8);
                  if (v10 > 0.0)
                    LODWORD(v2) = 1;
                  if (v10 < 0.0)
                    v2 = 0xFFFFFFFFLL;
                  else
                    v2 = v2;
                  if (v10 >= 0.0 && v10 <= 0.0)
                  {
                    v11 = *((double *)this + 9);
                    if (v11 > 0.0)
                      LODWORD(v2) = 1;
                    if (v11 < 0.0)
                      v2 = 0xFFFFFFFFLL;
                    else
                      v2 = v2;
                    if (v11 >= 0.0 && v11 <= 0.0)
                      return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

double JSC::TemporalDuration::with@<D0>(JSC::TemporalDuration *this@<X0>, uint64_t a2@<X1>, JSC::JSObject *a3@<X2>, _OWORD *a4@<X8>)
{
  char v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSObject *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  double v27;
  double v28;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD *);
  _QWORD *v54;
  double v56;
  JSC::VMTraps *v57;
  WTF::StringImpl *v58;
  JSC::JSObject *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  JSC::VM *v65;
  _QWORD v66[3];

  v7 = 0;
  v8 = *(_QWORD *)(a2 + 56);
  v65 = (JSC::VM *)v8;
  v63 = 0u;
  v64 = 0u;
  v9 = (char *)this + 16;
  v57 = (JSC::VMTraps *)(v8 + 64);
  v61 = 0u;
  v62 = 0u;
  v10 = &JSC::temporalUnitsInTableOrder;
  v60 = 0u;
  do
  {
    while (1)
    {
      v11 = *v10;
      v12 = JSC::temporalUnitPluralPropertyName(v8, *v10);
      v18 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a3, a2, v12, v13, v14, v15, v16, v17);
      v59 = v18;
      if (*(_DWORD *)(v8 + 80))
      {
        v30 = *(_DWORD *)(v8 + 80);
        if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v57, 7u, v20, v21, v22, v23, v24, v25);
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_41;
        v18 = v59;
      }
      if (v18 == (JSC::JSObject *)10)
        break;
      if ((unint64_t)v18 >= 0xFFFE000000000000)
      {
        v27 = (double)(int)v18;
      }
      else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v59, (JSC::JSGlobalObject *)a2, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_QWORD *)&v27 = (char *)v18 - 0x2000000000000;
      }
      if (v11 >= 0xA)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      *((double *)&v60 + v11) = v27;
      if (*(_DWORD *)(v8 + 80))
      {
        v31 = *(_DWORD *)(v8 + 80);
        if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
        {
          v56 = v27;
          JSC::VMTraps::handleTraps(v57, 7u, v20, v21, v22, v23, v24, v25);
          v27 = v56;
        }
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_41;
      }
      v28 = trunc(v27);
      if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v28 != v27)
      {
        v34 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v34 = 0x2D00000002;
        *(_QWORD *)(v34 + 8) = "Temporal.Duration properties must be integers";
        *(_DWORD *)(v34 + 16) = 4;
        v58 = (WTF::StringImpl *)v34;
        v35 = *(_QWORD *)(a2 + 128);
        v36 = *(JSC::Heap ***)(a2 + 56);
        if ((v35 & 1) != 0)
        {
          v53 = *(uint64_t (**)(_QWORD *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v54 = (_QWORD *)(a2 - 16);
          else
            v54 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v66[0] = *v54;
          v66[1] = a2;
          v66[2] = a2 + 128;
          v35 = v53(v66);
        }
        v37 = JSC::ErrorInstance::create(v36, v35, &v58, 0, 0, 0, 2, 1);
        v44 = (JSC::Exception *)v37;
        if ((v37 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
        {
          v44 = (JSC::Exception *)JSC::Exception::create(v8, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
        }
        JSC::VM::throwException((JSC::VM *)v8, (JSC::JSGlobalObject *)a2, v44, v43, v38, v39, v40, v41, v42);
        v18 = v58;
        v58 = 0;
        if (!v18)
          goto LABEL_41;
        if (*(_DWORD *)v18 != 2)
        {
          *(_DWORD *)v18 -= 2;
LABEL_41:
          *(_QWORD *)&v33 = 0;
          a4[3] = 0u;
          a4[4] = 0u;
          a4[1] = 0u;
          a4[2] = 0u;
          *a4 = 0u;
          return *(double *)&v33;
        }
LABEL_43:
        WTF::StringImpl::~StringImpl(v18, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        goto LABEL_41;
      }
      ++v10;
      v7 = 1;
      if (v10 == (char *)&unk_199159840)
        goto LABEL_32;
    }
    if (v11 >= 0xA)
      goto LABEL_42;
    *((_QWORD *)&v60 + v11) = *(_QWORD *)&v9[8 * v11];
    ++v10;
  }
  while (v10 != (char *)&unk_199159840);
  if ((v7 & 1) != 0)
  {
LABEL_32:
    v32 = v63;
    a4[2] = v62;
    a4[3] = v32;
    a4[4] = v64;
    v33 = v61;
    *a4 = v60;
    a4[1] = v33;
    return *(double *)&v33;
  }
  JSC::throwTypeError(a2, &v65, (uint64_t)"Object must contain at least one Temporal.Duration property", 60);
  *(_QWORD *)&v33 = 0;
  *a4 = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  return *(double *)&v33;
}

double JSC::TemporalDuration::add@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  JSC::Heap **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  double result;
  double v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t (*v52)(_QWORD *);
  _QWORD *v53;
  WTF::StringImpl *v54;
  __int128 v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  _QWORD v61[3];

  v12 = *(_QWORD *)(a2 + 56);
  JSC::TemporalDuration::toISO8601Duration(a2, a3, a3, a4, a5, a6, a7, a8, &v55);
  if (*(_DWORD *)(v12 + 80))
  {
    v51 = *(_DWORD *)(v12 + 80);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_50;
  }
  if (*(double *)(a1 + 16) == 0.0)
  {
    if (*(double *)(a1 + 24) == 0.0)
    {
      if (*(double *)(a1 + 32) == 0.0)
      {
        if (*(double *)(a1 + 40) == 0.0)
        {
          if (*(double *)(a1 + 48) == 0.0)
          {
            if (*(double *)(a1 + 56) == 0.0)
            {
              if (*(double *)(a1 + 64) == 0.0)
              {
                if (*(double *)(a1 + 72) == 0.0)
                {
                  if (*(double *)(a1 + 80) == 0.0)
                    v19 = 9;
                  else
                    v19 = 8;
                }
                else
                {
                  v19 = 7;
                }
              }
              else
              {
                v19 = 6;
              }
            }
            else
            {
              v19 = 5;
            }
          }
          else
          {
            v19 = 4;
          }
        }
        else
        {
          v19 = 3;
        }
      }
      else
      {
        v19 = 2;
      }
    }
    else
    {
      v19 = 1;
    }
  }
  else
  {
    v19 = 0;
  }
  if (*(double *)&v55 == 0.0)
  {
    if (*((double *)&v55 + 1) == 0.0)
    {
      if (v56 == 0.0)
      {
        if (v57.f64[0] == 0.0)
        {
          if (v57.f64[1] == 0.0)
          {
            if (v58.f64[0] == 0.0)
            {
              if (v58.f64[1] == 0.0)
              {
                if (v59.f64[0] == 0.0)
                {
                  if (v59.f64[1] == 0.0)
                    v20 = 9;
                  else
                    v20 = 8;
                }
                else
                {
                  v20 = 7;
                }
              }
              else
              {
                v20 = 6;
              }
            }
            else
            {
              v20 = 5;
            }
          }
          else
          {
            v20 = 4;
          }
        }
        else
        {
          v20 = 3;
        }
      }
      else
      {
        v20 = 2;
      }
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  if (v20 >= v19)
    v21 = v19;
  else
    v21 = v20;
  if (v21 <= 2)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x4C00000002;
    *(_QWORD *)(v22 + 8) = "Cannot add a duration of years, months, or weeks without a relativeTo option";
    *(_DWORD *)(v22 + 16) = 4;
    v54 = (WTF::StringImpl *)v22;
    v23 = *(_QWORD *)(a2 + 128);
    v24 = *(JSC::Heap ***)(a2 + 56);
    if ((v23 & 1) != 0)
    {
      v52 = *(uint64_t (**)(_QWORD *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
      v53 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v53 = (_QWORD *)(a2 - 16);
      v61[0] = *v53;
      v61[1] = a2;
      v61[2] = a2 + 128;
      v23 = v52(v61);
    }
    v25 = JSC::ErrorInstance::create(v24, v23, &v54, 0, 0, 0, 2, 1);
    v32 = (JSC::Exception *)v25;
    if ((v25 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
    {
      v32 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v32, v31, v26, v27, v28, v29, v30);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
LABEL_50:
    result = 0.0;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)a9 = 0u;
    return result;
  }
  v42 = *(double *)(a1 + 88) + v60;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  *(float64x2_t *)(a9 + 24) = vaddq_f64(*(float64x2_t *)(a1 + 40), v57);
  *(float64x2_t *)(a9 + 40) = vaddq_f64(*(float64x2_t *)(a1 + 56), v58);
  *(float64x2_t *)(a9 + 56) = vaddq_f64(*(float64x2_t *)(a1 + 72), v59);
  *(double *)(a9 + 72) = v42;
  return JSC::TemporalDuration::balance(a9, v21);
}

double JSC::TemporalDuration::subtract@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  JSC::Heap **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  double result;
  double v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t (*v52)(_QWORD *);
  _QWORD *v53;
  WTF::StringImpl *v54;
  __int128 v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  _QWORD v61[3];

  v12 = *(_QWORD *)(a2 + 56);
  JSC::TemporalDuration::toISO8601Duration(a2, a3, a3, a4, a5, a6, a7, a8, &v55);
  if (*(_DWORD *)(v12 + 80))
  {
    v51 = *(_DWORD *)(v12 + 80);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_50;
  }
  if (*(double *)(a1 + 16) == 0.0)
  {
    if (*(double *)(a1 + 24) == 0.0)
    {
      if (*(double *)(a1 + 32) == 0.0)
      {
        if (*(double *)(a1 + 40) == 0.0)
        {
          if (*(double *)(a1 + 48) == 0.0)
          {
            if (*(double *)(a1 + 56) == 0.0)
            {
              if (*(double *)(a1 + 64) == 0.0)
              {
                if (*(double *)(a1 + 72) == 0.0)
                {
                  if (*(double *)(a1 + 80) == 0.0)
                    v19 = 9;
                  else
                    v19 = 8;
                }
                else
                {
                  v19 = 7;
                }
              }
              else
              {
                v19 = 6;
              }
            }
            else
            {
              v19 = 5;
            }
          }
          else
          {
            v19 = 4;
          }
        }
        else
        {
          v19 = 3;
        }
      }
      else
      {
        v19 = 2;
      }
    }
    else
    {
      v19 = 1;
    }
  }
  else
  {
    v19 = 0;
  }
  if (*(double *)&v55 == 0.0)
  {
    if (*((double *)&v55 + 1) == 0.0)
    {
      if (v56 == 0.0)
      {
        if (v57.f64[0] == 0.0)
        {
          if (v57.f64[1] == 0.0)
          {
            if (v58.f64[0] == 0.0)
            {
              if (v58.f64[1] == 0.0)
              {
                if (v59.f64[0] == 0.0)
                {
                  if (v59.f64[1] == 0.0)
                    v20 = 9;
                  else
                    v20 = 8;
                }
                else
                {
                  v20 = 7;
                }
              }
              else
              {
                v20 = 6;
              }
            }
            else
            {
              v20 = 5;
            }
          }
          else
          {
            v20 = 4;
          }
        }
        else
        {
          v20 = 3;
        }
      }
      else
      {
        v20 = 2;
      }
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  if (v20 >= v19)
    v21 = v19;
  else
    v21 = v20;
  if (v21 <= 2)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x5100000002;
    *(_QWORD *)(v22 + 8) = "Cannot subtract a duration of years, months, or weeks without a relativeTo option";
    *(_DWORD *)(v22 + 16) = 4;
    v54 = (WTF::StringImpl *)v22;
    v23 = *(_QWORD *)(a2 + 128);
    v24 = *(JSC::Heap ***)(a2 + 56);
    if ((v23 & 1) != 0)
    {
      v52 = *(uint64_t (**)(_QWORD *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
      v53 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v53 = (_QWORD *)(a2 - 16);
      v61[0] = *v53;
      v61[1] = a2;
      v61[2] = a2 + 128;
      v23 = v52(v61);
    }
    v25 = JSC::ErrorInstance::create(v24, v23, &v54, 0, 0, 0, 2, 1);
    v32 = (JSC::Exception *)v25;
    if ((v25 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
    {
      v32 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v32, v31, v26, v27, v28, v29, v30);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
LABEL_50:
    result = 0.0;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)a9 = 0u;
    return result;
  }
  v42 = *(double *)(a1 + 88) - v60;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  *(float64x2_t *)(a9 + 24) = vsubq_f64(*(float64x2_t *)(a1 + 40), v57);
  *(float64x2_t *)(a9 + 40) = vsubq_f64(*(float64x2_t *)(a1 + 56), v58);
  *(float64x2_t *)(a9 + 56) = vsubq_f64(*(float64x2_t *)(a1 + 72), v59);
  *(double *)(a9 + 72) = v42;
  return JSC::TemporalDuration::balance(a9, v21);
}

double JSC::TemporalDuration::round(double *a1, unsigned int a2, unsigned int a3, double a4)
{
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  switch(a2)
  {
    case 3u:
      v8 = a1[3];
      v7 = a1 + 3;
      v9 = a1[9];
      v10 = a1[8] + (a1[7] + (a1[6] + (a1[5] + (a1[4] + 0.0) * 60.0) * 60.0) * 1000.0) * 1000.0;
      a1[3] = 0.0;
      v11 = v9 + v10 * 1000.0;
      v12 = 8.64e13;
      goto LABEL_9;
    case 4u:
      v7 = a1 + 4;
      v8 = a1[4];
      v12 = 60.0;
      v11 = a1[5] + (a1[6] + a1[7] * 0.001 + a1[8] * 0.000001 + a1[9] * 0.000000001) / 60.0;
      goto LABEL_9;
    case 5u:
      v8 = a1[5];
      v7 = a1 + 5;
      v11 = a1[6] + a1[7] * 0.001 + a1[8] * 0.000001 + a1[9] * 0.000000001;
      v12 = 60.0;
LABEL_9:
      v15 = v8 + v11 / v12;
      goto LABEL_14;
    case 6u:
      v7 = a1 + 6;
      v16 = a1[6] + a1[7] * 0.001 + a1[8] * 0.000001;
      v17 = a1[9];
      v18 = 0.000000001;
      goto LABEL_13;
    case 7u:
      v7 = a1 + 7;
      v15 = a1[7] + a1[8] * 0.001 + a1[9] * 0.000001;
      goto LABEL_14;
    case 8u:
      v16 = a1[8];
      v17 = a1[9];
      v7 = a1 + 8;
      v18 = 0.001;
LABEL_13:
      v15 = v16 + v17 * v18;
LABEL_14:
      v19 = JSC::roundNumberToIncrement(a3, v15, a4);
      v14 = v15 - v19;
      if (v19 == 0.0)
        v19 = 0.0;
      *v7 = v19;
      goto LABEL_17;
    default:
      v13 = JSC::roundNumberToIncrement(a3, a1[9], a4);
      v14 = a1[9] - v13;
      if (v13 == 0.0)
        v13 = 0.0;
      a1[9] = v13;
      if (a2 >= 9)
        return v14;
LABEL_17:
      bzero(&a1[a2 + 1], ((64 - 8 * a2) & 0x7FFFFFFF8) + 8);
      return v14;
  }
}

double JSC::TemporalDuration::round@<D0>(double *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int8x16_t a10@<Q0>)
{
  unsigned int *v10;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  const char *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int16 v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  JSC::Heap **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  JSC::Exception *v40;
  WTF::StringImpl *v41;
  double result;
  unsigned __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  unint64_t v103;
  JSC::Heap **v104;
  JSC::Heap **v105;
  uint64_t v106;
  uint64_t v107;
  JSC::Heap **v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  JSC::Exception *v116;
  WTF::AtomStringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t (*v140)(JSC::VM **);
  JSC::VM **v141;
  int v142;
  uint64_t (*v143)(JSC::VM **);
  JSC::VM **v144;
  uint64_t (*v145)(JSC::VM **);
  JSC::VM **v146;
  __int16 v147;
  double v148;
  WTF::StringImpl *v149;
  JSC::VM *v150;
  uint64_t v151;
  unint64_t v152;
  const char *v153;
  uint64_t v154;
  char v155;
  const char *v156;
  uint64_t v157;
  char v158;
  const char *v159;
  uint64_t v160;
  char v161;
  const char *v162;
  uint64_t v163;
  char v164;
  const char *v165;
  uint64_t v166;
  char v167;
  const char *v168;
  uint64_t v169;
  char v170;
  const char *v171;
  uint64_t v172;
  char v173;
  const char *v174;
  uint64_t v175;
  char v176;
  uint64_t v177;

  v10 = (unsigned int *)a3;
  v177 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a2 + 56);
  v15 = a1 + 2;
  a10.i64[0] = (uint64_t)a1[2];
  if (*(double *)a10.i64 == 0.0)
  {
    a10.i64[0] = (uint64_t)a1[3];
    if (*(double *)a10.i64 == 0.0)
    {
      a10.i64[0] = (uint64_t)a1[4];
      if (*(double *)a10.i64 == 0.0)
      {
        a10.i64[0] = (uint64_t)a1[5];
        if (*(double *)a10.i64 == 0.0)
        {
          a10.i64[0] = (uint64_t)a1[6];
          if (*(double *)a10.i64 == 0.0)
          {
            a10.i64[0] = (uint64_t)a1[7];
            if (*(double *)a10.i64 == 0.0)
            {
              a10.i64[0] = (uint64_t)a1[8];
              if (*(double *)a10.i64 == 0.0)
              {
                a10.i64[0] = (uint64_t)a1[9];
                if (*(double *)a10.i64 == 0.0)
                {
                  a10.i64[0] = (uint64_t)a1[10];
                  if (*(double *)a10.i64 == 0.0)
                    v16 = 9;
                  else
                    v16 = 8;
                }
                else
                {
                  v16 = 7;
                }
              }
              else
              {
                v16 = 6;
              }
            }
            else
            {
              v16 = 5;
            }
          }
          else
          {
            v16 = 4;
          }
        }
        else
        {
          v16 = 3;
        }
      }
      else
      {
        v16 = 2;
      }
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    v150 = *(JSC::VM **)(a2 + 56);
    if (a3 != 10)
LABEL_45:
      JSC::throwTypeError(a2, &v150, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_46:
    v10 = 0;
LABEL_47:
    if (*(_DWORD *)(v14 + 80))
    {
      v137 = *(_DWORD *)(v14 + 80);
      if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_97;
    }
    v43 = JSC::temporalSmallestUnit(a2, v10, 0, 0, a5, a6, a7, a8);
    if (*(_DWORD *)(v14 + 80))
    {
      v138 = *(_DWORD *)(v14 + 80);
      if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v46, v47, v48, v49, v50, v51);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_97;
    }
    v45 = JSC::temporalLargestUnit(a2, v10, 0, 0, v16, v49, v50, v51);
    if (*(_DWORD *)(v14 + 80))
    {
      v139 = *(_DWORD *)(v14 + 80);
      if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
      {
        v147 = v45;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v52, v53, v54, v55, v56, v57);
        v45 = v147;
      }
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_97;
    }
    if (v43 > 0xFFu)
    {
      v44 = HIBYTE(v45);
      if (!HIBYTE(v45))
        goto LABEL_64;
      if (v43 >= v45)
      {
        v44 = 1;
        goto LABEL_64;
      }
      v58 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v58 = 0x2D00000002;
      v59 = "smallestUnit must be smaller than largestUnit";
    }
    else
    {
      v44 = HIBYTE(v45);
      if (HIBYTE(v45))
      {
        LOBYTE(v43) = 9;
        goto LABEL_64;
      }
      v58 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v58 = 0x3900000002;
      v59 = "Cannot round without a smallestUnit or largestUnit option";
    }
LABEL_87:
    *(_QWORD *)(v58 + 8) = v59;
    *(_DWORD *)(v58 + 16) = 4;
    v149 = (WTF::StringImpl *)v58;
    v103 = *(_QWORD *)(a2 + 128);
    v104 = *(JSC::Heap ***)(a2 + 56);
    if ((v103 & 1) != 0)
    {
      v140 = *(uint64_t (**)(JSC::VM **))(v103 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v141 = (JSC::VM **)(a2 - 16);
      else
        v141 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v150 = *v141;
      v151 = a2;
      v152 = a2 + 128;
      v103 = v140(&v150);
    }
    v105 = v104;
    v106 = 2;
LABEL_92:
    v109 = JSC::ErrorInstance::create(v105, v103, &v149, 0, 0, 0, v106, 1);
    v116 = (JSC::Exception *)v109;
    if ((v109 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x4C)))
    {
      v116 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v109, 0, v110, v111, v112, v113, v114);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, v116, v115, v110, v111, v112, v113, v114);
    v124 = v149;
    v149 = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
      {
        WTF::StringImpl::~StringImpl(v124, v117, v118, v119, v120, v121, v122, v123);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v124 -= 2;
      }
    }
LABEL_97:
    result = 0.0;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)a9 = 0u;
    return result;
  }
  v17 = *(unsigned __int8 *)(a3 + 5);
  if (v17 != 2)
  {
    v150 = *(JSC::VM **)(a2 + 56);
    if (a3 != 10)
    {
      if (v17 > 0x16)
        goto LABEL_47;
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  v18 = *(int **)(a3 + 8);
  if ((v18 & 1) != 0)
  {
    v18 = *JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a2, a3, a4, a10, a5, a6, a7, a8);
    if (!v18)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v18)
LABEL_24:
    *v18 += 2;
LABEL_25:
  if (*(_DWORD *)(v14 + 80))
  {
    v142 = *(_DWORD *)(v14 + 80);
    if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_35;
  }
  if (v18)
  {
    v19 = (const char *)*((_QWORD *)v18 + 1);
    v20 = v18[1];
    v21 = ((unint64_t)v18[4] >> 2) & 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 1;
  }
  v22 = JSC::temporalUnitType(v19, v20 | (v21 << 32));
  if (v22 > 0xFFu)
  {
    LOBYTE(v43) = v22;
    if (v18)
    {
      if (*v18 != 2)
      {
        v44 = 0;
        LOBYTE(v45) = 0;
        v10 = 0;
        *v18 -= 2;
        goto LABEL_64;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    v44 = 0;
    LOBYTE(v45) = 0;
    v10 = 0;
LABEL_64:
    if (v43 >= v16)
      v84 = v16;
    else
      v84 = v43;
    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 2224);
    v150 = (JSC::VM *)"ceil";
    v151 = 5;
    if (v44)
      v86 = v45;
    else
      v86 = v84;
    LOBYTE(v152) = 0;
    v153 = "floor";
    v154 = 6;
    v155 = 1;
    v156 = "expand";
    v157 = 7;
    v158 = 2;
    v159 = "trunc";
    v160 = 6;
    v161 = 3;
    v162 = "halfCeil";
    v163 = 9;
    v164 = 4;
    v165 = "halfFloor";
    v166 = 10;
    v167 = 5;
    v168 = "halfExpand";
    v169 = 11;
    v170 = 6;
    v171 = "halfTrunc";
    v172 = 10;
    v173 = 7;
    v174 = "halfEven";
    v175 = 9;
    v176 = 8;
    v93 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, v10, v85, (uint64_t)&v150, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 6);
    if (*(_DWORD *)(v14 + 80))
    {
      v135 = *(_DWORD *)(v14 + 80);
      if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v87, v88, v89, v90, v91, v92);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_97;
    }
    if (v43 >= 4u)
    {
      if (v43 == 4)
        v94 = 0x4038000000000000;
      else
        v94 = v43 >= 7u ? 0x408F400000000000 : 0x404E000000000000;
      v95 = 1;
    }
    else
    {
      v94 = 0;
      v95 = 0;
    }
    v102 = JSC::temporalRoundingIncrement(a2, v10, v94, v95, 0, v90, v91, v92);
    if (*(_DWORD *)(v14 + 80))
    {
      v136 = *(_DWORD *)(v14 + 80);
      if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
      {
        v148 = v102;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v96, v97, v98, v99, v100, v101);
        v102 = v148;
      }
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_97;
    }
    if (v86)
    {
      if (*(double *)v15 != 0.0 || a1[3] != 0.0 || a1[4] != 0.0 || a1[5] != 0.0 && v86 <= 2u)
      {
        v58 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v58 = 0x4E00000002;
        v59 = "Cannot round a duration of years, months, or weeks without a relativeTo option";
        goto LABEL_87;
      }
      if (v86 > 2u)
      {
        v133 = *((_OWORD *)v15 + 3);
        *(_OWORD *)(a9 + 32) = *((_OWORD *)v15 + 2);
        *(_OWORD *)(a9 + 48) = v133;
        *(_OWORD *)(a9 + 64) = *((_OWORD *)v15 + 4);
        v134 = *((_OWORD *)v15 + 1);
        *(_OWORD *)a9 = *(_OWORD *)v15;
        *(_OWORD *)(a9 + 16) = v134;
        JSC::TemporalDuration::round((double *)a9, v43, v93, v102);
        return JSC::TemporalDuration::balance(a9, v86);
      }
    }
    v107 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v107 = 0x4B00000002;
    *(_QWORD *)(v107 + 8) = "FIXME: years, months, or weeks rounding with relativeTo not implemented yet";
    *(_DWORD *)(v107 + 16) = 4;
    v149 = (WTF::StringImpl *)v107;
    v108 = *(JSC::Heap ***)(a2 + 56);
    v103 = *(_QWORD *)(a2 + 1504);
    if ((v103 & 1) != 0)
    {
      v143 = *(uint64_t (**)(JSC::VM **))(v103 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v144 = (JSC::VM **)(a2 - 16);
      else
        v144 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v150 = *v144;
      v151 = a2;
      v152 = a2 + 1504;
      v103 = v143(&v150);
    }
    v105 = v108;
    v106 = 0;
    goto LABEL_92;
  }
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x2800000002;
  *(_QWORD *)(v30 + 8) = "smallestUnit is an invalid Temporal unit";
  *(_DWORD *)(v30 + 16) = 4;
  v149 = (WTF::StringImpl *)v30;
  v31 = *(_QWORD *)(a2 + 128);
  v32 = *(JSC::Heap ***)(a2 + 56);
  if ((v31 & 1) != 0)
  {
    v145 = *(uint64_t (**)(JSC::VM **))(v31 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v146 = (JSC::VM **)(a2 - 16);
    else
      v146 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v150 = *v146;
    v151 = a2;
    v152 = a2 + 128;
    v31 = v145(&v150);
  }
  v33 = JSC::ErrorInstance::create(v32, v31, &v149, 0, 0, 0, 2, 1);
  v40 = (JSC::Exception *)v33;
  if ((v33 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C)))
  {
    v40 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v33, 0, v34, v35, v36, v37, v38);
  }
  JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, v40, v39, v34, v35, v36, v37, v38);
  v41 = v149;
  v149 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
LABEL_35:
  result = 0.0;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  if (v18)
  {
    if (*v18 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *v18 -= 2;
    }
  }
  return result;
}

double JSC::TemporalDuration::total(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int *v9;
  unint64_t v10;
  __int128 *v12;
  unsigned int v13;
  int *v14;
  const char *v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Exception *v29;
  WTF::StringImpl *v30;
  double v31;
  __int128 v33;
  __int128 v34;
  double v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(__int128 *);
  double v53;
  int v54;
  _QWORD *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  WTF::StringImpl *v62;

  v9 = (unsigned int *)a3;
  v10 = (unint64_t)a2;
  v12 = (__int128 *)*((_QWORD *)a2 + 7);
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)&v57 = *((_QWORD *)a2 + 7);
    if (a3 == 10)
    {
LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
LABEL_11:
    JSC::throwTypeError((unint64_t)a2, (JSC::VM **)&v57, (uint64_t)"options argument is not an object or undefined", 47);
    goto LABEL_12;
  }
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 == 2)
  {
    v14 = *(int **)(a3 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *JSC::JSRopeString::resolveRope(a3, a2, a3, a4, a9, a5, a6, a7, a8);
      if (!v14)
        goto LABEL_15;
      goto LABEL_5;
    }
    if (v14)
LABEL_5:
      *v14 += 2;
LABEL_15:
    if (*((_DWORD *)v12 + 20))
    {
      v54 = *((_DWORD *)v12 + 20);
      if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 4), 7u, a3, a4, a5, a6, a7, a8);
      v31 = 0.0;
      if (*((_QWORD *)v12 + 2))
        goto LABEL_34;
    }
    if (v14)
    {
      v15 = (const char *)*((_QWORD *)v14 + 1);
      v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
    }
    else
    {
      v15 = 0;
      v16 = 0x100000000;
    }
    v17 = JSC::temporalUnitType(v15, v16);
    if (v17 > 0xFFu)
    {
      if (!(_BYTE)v17
        || *(double *)(a1 + 16) == 0.0
        && *(double *)(a1 + 24) == 0.0
        && *(double *)(a1 + 32) == 0.0
        && (v17 > 2u || *(double *)(a1 + 40) == 0.0))
      {
        v33 = *(_OWORD *)(a1 + 64);
        v59 = *(_OWORD *)(a1 + 48);
        v60 = v33;
        v61 = *(_OWORD *)(a1 + 80);
        v34 = *(_OWORD *)(a1 + 32);
        v57 = *(_OWORD *)(a1 + 16);
        v58 = v34;
        v10 = v17;
        JSC::TemporalDuration::balance((uint64_t)&v57, v17);
        if ((_BYTE)a2)
        {
          v31 = v35;
        }
        else
        {
          v12 = &v57;
          v53 = JSC::TemporalDuration::round((double *)&v57, v10, 3u, 1.0);
          if (v10 >= 0xA)
          {
            __break(1u);
            goto LABEL_58;
          }
          v31 = v53 + *((double *)&v57 + v10);
        }
LABEL_34:
        if (v14)
        {
          if (*v14 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          else
          {
            *v14 -= 2;
          }
        }
        return v31;
      }
      v18 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v18 = 0x4E00000002;
      v19 = "Cannot total a duration of years, months, or weeks without a relativeTo option";
    }
    else
    {
      v18 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v18 = 0x2000000002;
      v19 = "unit is an invalid Temporal unit";
    }
    *(_QWORD *)(v18 + 8) = v19;
    *(_DWORD *)(v18 + 16) = 4;
    v62 = (WTF::StringImpl *)v18;
    v21 = (_QWORD *)(v10 + 128);
    v20 = *(_QWORD *)(v10 + 128);
    a1 = *(_QWORD *)(v10 + 56);
    if ((v20 & 1) == 0)
      goto LABEL_28;
    v52 = *(uint64_t (**)(__int128 *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v10 & 8) == 0)
    {
      v55 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
LABEL_53:
      *(_QWORD *)&v57 = *v55;
      *((_QWORD *)&v57 + 1) = v10;
      *(_QWORD *)&v58 = v21;
      v20 = v52(&v57);
LABEL_28:
      v22 = JSC::ErrorInstance::create((JSC::Heap **)a1, v20, &v62, 0, 0, 0, 2, 1);
      v29 = (JSC::Exception *)v22;
      if ((v22 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)))
      {
        v29 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)v22, 0, v23, v24, v25, v26, v27);
      }
      JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)v10, v29, v28, v23, v24, v25, v26, v27);
      v30 = v62;
      v62 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
      v31 = 0.0;
      goto LABEL_34;
    }
LABEL_58:
    v55 = (_QWORD *)(v10 - 16);
    goto LABEL_53;
  }
  *(_QWORD *)&v57 = *((_QWORD *)a2 + 7);
  if (a3 == 10)
    goto LABEL_12;
  if (v13 <= 0x16)
    goto LABEL_11;
LABEL_13:
  if (!*((_DWORD *)v12 + 20))
    goto LABEL_14;
  v56 = *((_DWORD *)v12 + 20);
  if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 4), 7u, a3, a4, a5, a6, a7, a8);
  v31 = 0.0;
  if (!*((_QWORD *)v12 + 2))
  {
LABEL_14:
    JSC::intlStringOption((JSC::JSGlobalObject *)v10, v9, *(_QWORD *)(*((_QWORD *)v12 + 5244) + 2592), 0, 0, 0, 0, a8, &v57, 0, 0);
    v14 = (int *)v57;
    goto LABEL_15;
  }
  return v31;
}

void JSC::TemporalDuration::toString(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::Heap **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::Exception *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  double *v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t (*v66)(__int128 *);
  _QWORD *v67;
  int v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  const char *v77;
  uint64_t v78;
  char v79;
  const char *v80;
  uint64_t v81;
  char v82;
  const char *v83;
  uint64_t v84;
  char v85;
  const char *v86;
  uint64_t v87;
  char v88;
  const char *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)&v70 = v12;
  if (a3 != 10)
  {
    v13 = (JSC::JSGlobalObject *)a3;
    if ((a3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a3 + 5) > 0x16u)
      goto LABEL_5;
    JSC::throwTypeError(a2, (JSC::VM **)&v70, (uint64_t)"options argument is not an object or undefined", 47);
  }
  v13 = 0;
LABEL_5:
  if (*(_DWORD *)(v12 + 80))
  {
    v64 = *(_DWORD *)(v12 + 80);
    if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_15;
  }
  if (v13)
  {
    v20 = JSC::secondsStringPrecision(a2, v13, (JSC::JSObject *)a3, a4, a5, a6, a7, a8);
    v22 = v21;
    if (*(_DWORD *)(v12 + 80))
    {
      v65 = *(_DWORD *)(v12 + 80);
      if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_15;
    }
    if (v22 <= 5u)
    {
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x2100000002;
      *(_QWORD *)(v23 + 8) = "smallestUnit must not be \"minute\"";
      *(_DWORD *)(v23 + 16) = 4;
      v69 = (WTF::StringImpl *)v23;
      v24 = *(_QWORD *)(a2 + 128);
      v25 = *(JSC::Heap ***)(a2 + 56);
      if ((v24 & 1) != 0)
      {
        v66 = *(uint64_t (**)(__int128 *))(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if ((a2 & 8) != 0)
          v67 = (_QWORD *)(a2 - 16);
        else
          v67 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        *(_QWORD *)&v70 = *v67;
        *((_QWORD *)&v70 + 1) = a2;
        *(_QWORD *)&v71 = a2 + 128;
        v24 = v66(&v70);
      }
      v26 = JSC::ErrorInstance::create(v25, v24, &v69, 0, 0, 0, 2, 1);
      v33 = (JSC::Exception *)v26;
      if ((v26 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
      {
        v33 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v26, 0, v27, v28, v29, v30, v31);
      }
      JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v33, v32, v27, v28, v29, v30, v31);
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          *(_DWORD *)v41 -= 2;
        }
      }
LABEL_15:
      *a9 = 0;
      return;
    }
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 2224);
    *(_QWORD *)&v70 = "ceil";
    *((_QWORD *)&v70 + 1) = 5;
    LOBYTE(v71) = 0;
    *((_QWORD *)&v71 + 1) = "floor";
    *(_QWORD *)&v72 = 6;
    BYTE8(v72) = 1;
    *(_QWORD *)&v73 = "expand";
    *((_QWORD *)&v73 + 1) = 7;
    LOBYTE(v74) = 2;
    *((_QWORD *)&v74 + 1) = "trunc";
    v75 = 6;
    v76 = 3;
    v77 = "halfCeil";
    v78 = 9;
    v79 = 4;
    v80 = "halfFloor";
    v81 = 10;
    v82 = 5;
    v83 = "halfExpand";
    v84 = 11;
    v85 = 6;
    v86 = "halfTrunc";
    v87 = 10;
    v88 = 7;
    v89 = "halfEven";
    v90 = 9;
    v91 = 8;
    v49 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v13, v42, (uint64_t)&v70, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 3);
    if (*(_DWORD *)(v12 + 80))
    {
      v68 = *(_DWORD *)(v12 + 80);
      if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v43, v44, v45, v46, v47, v48);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_15;
    }
    if (v20 == 2 && v49 == 3)
    {
      v50 = (double *)(a1 + 16);
      v51 = a9;
      v52 = a2;
      v53 = 2;
    }
    else
    {
      v54 = *(_OWORD *)(a1 + 64);
      v72 = *(_OWORD *)(a1 + 48);
      v73 = v54;
      v74 = *(_OWORD *)(a1 + 80);
      v55 = *(_OWORD *)(a1 + 32);
      v70 = *(_OWORD *)(a1 + 16);
      v71 = v55;
      JSC::TemporalDuration::round((double *)&v70, v22, v49, (double)HIDWORD(v22));
      v53 = v20 & 0xFFFFFFFF000000FFLL;
      v50 = (double *)&v70;
      v51 = a9;
      v52 = a2;
    }
    JSC::TemporalDuration::toString(v52, v50, v53, v51);
  }
  else
  {
    JSC::TemporalDuration::toString(a2, (double *)(a1 + 16), 2, a9);
  }
}

void JSC::TemporalDuration::toString(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v8;
  long double v9;
  long double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  const Duration *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::AtomStringImpl *v23;
  WTF::StringBuilder *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  double v43;
  _BOOL4 v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  JSC::Heap **v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  JSC::Exception *v112;
  WTF::StringImpl *v113;
  int v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(int8x16_t *);
  uint64_t *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unsigned int v128;
  char v129;
  int8x16_t v130;
  uint64_t v131;

  v8 = *(_QWORD *)(a1 + 56);
  v9 = a2[9];
  v10 = a2[8] + trunc(v9 / 1000.0);
  v11 = fmod(v9, 1000.0);
  v12 = a2[7] + trunc(v10 / 1000.0);
  v13 = fmod(v10, 1000.0);
  v14 = a2[6];
  v15 = fmod(v12, 1000.0);
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 1;
  v22 = JSC::TemporalDuration::sign((JSC::TemporalDuration *)a2, v16);
  if (v22 < 0)
  {
    v130.i8[0] = 45;
    WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
    v130.i8[0] = 80;
    if (v127)
    {
      v25 = v128;
      if (v128 < *((_DWORD *)v127 + 1) && !v126)
      {
        v26 = *((_DWORD *)v127 + 4);
        v27 = *((_QWORD *)v127 + 1);
        ++v128;
        if ((v26 & 4) != 0)
          *(_BYTE *)(v27 + v25) = 80;
        else
          *(_WORD *)(v27 + 2 * v25) = 80;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v130.i8[0] = 80;
  }
  WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
LABEL_9:
  if (*a2 != 0.0)
  {
    JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, *a2, v17, v18, v19, v20, v21);
    if (*(_DWORD *)(v8 + 80))
    {
      v96 = *(_DWORD *)(v8 + 80);
      if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_137;
    }
    v130.i8[0] = 89;
    if (!v127 || (v28 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
    {
      WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
    }
    else
    {
      v29 = *((_DWORD *)v127 + 4);
      v30 = *((_QWORD *)v127 + 1);
      ++v128;
      if ((v29 & 4) != 0)
        *(_BYTE *)(v30 + v28) = 89;
      else
        *(_WORD *)(v30 + 2 * v28) = 89;
    }
  }
  v31 = a2[1];
  if (v31 != 0.0)
  {
    JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, v31, v17, v18, v19, v20, v21);
    if (*(_DWORD *)(v8 + 80))
    {
      v97 = *(_DWORD *)(v8 + 80);
      if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_137;
    }
    v130.i8[0] = 77;
    if (!v127 || (v32 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
    {
      WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
    }
    else
    {
      v33 = *((_DWORD *)v127 + 4);
      v34 = *((_QWORD *)v127 + 1);
      ++v128;
      if ((v33 & 4) != 0)
        *(_BYTE *)(v34 + v32) = 77;
      else
        *(_WORD *)(v34 + 2 * v32) = 77;
    }
  }
  v35 = a2[2];
  if (v35 != 0.0)
  {
    JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, v35, v17, v18, v19, v20, v21);
    if (*(_DWORD *)(v8 + 80))
    {
      v98 = *(_DWORD *)(v8 + 80);
      if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_137;
    }
    v130.i8[0] = 87;
    if (!v127 || (v36 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
    {
      WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
    }
    else
    {
      v37 = *((_DWORD *)v127 + 4);
      v38 = *((_QWORD *)v127 + 1);
      ++v128;
      if ((v37 & 4) != 0)
        *(_BYTE *)(v38 + v36) = 87;
      else
        *(_WORD *)(v38 + 2 * v36) = 87;
    }
  }
  v39 = a2[3];
  if (v39 != 0.0)
  {
    JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, v39, v17, v18, v19, v20, v21);
    if (*(_DWORD *)(v8 + 80))
    {
      v99 = *(_DWORD *)(v8 + 80);
      if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_137;
    }
    v130.i8[0] = 68;
    if (!v127 || (v40 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
    {
      WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
    }
    else
    {
      v41 = *((_DWORD *)v127 + 4);
      v42 = *((_QWORD *)v127 + 1);
      ++v128;
      if ((v41 & 4) != 0)
        *(_BYTE *)(v42 + v40) = 68;
      else
        *(_WORD *)(v42 + 2 * v40) = 68;
    }
  }
  v43 = v14 + trunc(v12 / 1000.0);
  v44 = v43 != 0.0;
  if (v15 != 0.0)
    v44 = 1;
  if (v13 != 0.0)
    v44 = 1;
  if (v11 != 0.0)
    v44 = 1;
  if (!v22)
    v44 = 1;
  v45 = a3 != 2 || v44;
  if (a2[4] != 0.0 || (a2[5] != 0.0 ? (v46 = 1) : (v46 = v45), (v46 & 1) != 0))
  {
    v130.i8[0] = 84;
    if (!v127 || (v47 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
    {
      WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
    }
    else
    {
      v48 = *((_DWORD *)v127 + 4);
      v49 = *((_QWORD *)v127 + 1);
      ++v128;
      if ((v48 & 4) != 0)
        *(_BYTE *)(v49 + v47) = 84;
      else
        *(_WORD *)(v49 + 2 * v47) = 84;
    }
    v50 = a2[4];
    if (v50 != 0.0)
    {
      JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, v50, v17, v18, v19, v20, v21);
      if (*(_DWORD *)(v8 + 80))
      {
        v100 = *(_DWORD *)(v8 + 80);
        if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_137;
      }
      v130.i8[0] = 72;
      if (!v127 || (v51 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
      {
        WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
      }
      else
      {
        v52 = *((_DWORD *)v127 + 4);
        v53 = *((_QWORD *)v127 + 1);
        ++v128;
        if ((v52 & 4) != 0)
          *(_BYTE *)(v53 + v51) = 72;
        else
          *(_WORD *)(v53 + 2 * v51) = 72;
      }
    }
    v54 = a2[5];
    if (v54 != 0.0)
    {
      JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, v54, v17, v18, v19, v20, v21);
      if (*(_DWORD *)(v8 + 80))
      {
        v101 = *(_DWORD *)(v8 + 80);
        if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_137;
      }
      v130.i8[0] = 77;
      if (!v127 || (v55 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
      {
        WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
      }
      else
      {
        v56 = *((_DWORD *)v127 + 4);
        v57 = *((_QWORD *)v127 + 1);
        ++v128;
        if ((v56 & 4) != 0)
          *(_BYTE *)(v57 + v55) = 77;
        else
          *(_WORD *)(v57 + 2 * v55) = 77;
      }
    }
    if (v45)
    {
      if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        v102 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v102 = 0x2000000002;
        *(_QWORD *)(v102 + 8) = "Cannot display infinite seconds!";
        *(_DWORD *)(v102 + 16) = 4;
        v125 = (WTF::StringImpl *)v102;
        v103 = *(_QWORD *)(a1 + 128);
        v104 = *(JSC::Heap ***)(a1 + 56);
        if ((v103 & 1) != 0)
        {
          v123 = *(uint64_t (**)(int8x16_t *))(v103 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v124 = (uint64_t *)(a1 - 16);
          else
            v124 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          v130.i64[0] = *v124;
          v130.i64[1] = a1;
          v131 = a1 + 128;
          v103 = v123(&v130);
        }
        v105 = JSC::ErrorInstance::create(v104, v103, &v125, 0, 0, 0, 2, 1);
        v112 = (JSC::Exception *)v105;
        if ((v105 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE) + 0x4C)))
        {
          v112 = (JSC::Exception *)JSC::Exception::create(v8, (JSC::VM *)v105, 0, v106, v107, v108, v109, v110);
        }
        JSC::VM::throwException((JSC::VM *)v8, (JSC::JSGlobalObject *)a1, v112, v111, v106, v107, v108, v109, v110);
        v113 = v125;
        v125 = 0;
        if (v113)
        {
          if (*(_DWORD *)v113 == 2)
          {
            WTF::StringImpl::~StringImpl(v113, v23, (uint64_t)v24, v17, v18, v19, v20, v21);
            WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
          }
          else
          {
            *(_DWORD *)v113 -= 2;
          }
        }
        goto LABEL_137;
      }
      JSC::appendInteger((JSC *)a1, (JSC::JSGlobalObject *)&v126, v24, v43, v17, v18, v19, v20, v21);
      if (*(_DWORD *)(v8 + 80))
      {
        v114 = *(_DWORD *)(v8 + 80);
        if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)v24, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_137:
          v61 = 0;
          goto LABEL_82;
        }
      }
      JSC::formatSecondsStringFraction((uint64_t)&v126, (fabs(v11) + fabs(v13) * 1000.0 + fabs(v15) * 1000000.0), a3 & 0xFFFFFFFF000000FFLL);
      v130.i8[0] = 83;
      if (!v127 || (v58 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
      {
        WTF::StringBuilder::append((uint64_t)&v126, &v130, 1uLL, v17, v18, v19, v20, v21);
      }
      else
      {
        v59 = *((_DWORD *)v127 + 4);
        v60 = *((_QWORD *)v127 + 1);
        ++v128;
        if ((v59 & 4) != 0)
          *(_BYTE *)(v60 + v58) = 83;
        else
          *(_WORD *)(v60 + 2 * v58) = 83;
      }
    }
  }
  v61 = v126;
  if (v126)
    goto LABEL_81;
  if ((v128 & 0x80000000) == 0 && v127 && *((_DWORD *)v127 + 1) > v128 + (v128 >> 2))
  {
    if ((*((_BYTE *)v127 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v126, (WTF::AtomStringImpl *)v128, (uint64_t)v24, v17, v18, v19, v20, v21);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v126, (WTF::AtomStringImpl *)v128, (uint64_t)v24, v17, v18, v19, v20, v21);
    v87 = v126;
    v126 = v127;
    v127 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
      {
        WTF::StringImpl::~StringImpl(v87, v80, v81, v82, v83, v84, v85, v86);
        WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
      }
      else
      {
        *(_DWORD *)v87 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v126);
  v61 = v126;
  if (v126)
LABEL_81:
    *(_DWORD *)v61 += 2;
LABEL_82:
  *a4 = v61;
  v62 = v127;
  v127 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v23, (uint64_t)v24, v17, v18, v19, v20, v21);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v126;
  v126 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v23, (uint64_t)v24, v17, v18, v19, v20, v21);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void JSC::appendInteger(JSC *this, JSC::JSGlobalObject *a2, WTF::StringBuilder *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  double v11;
  JSC::JSBigInt *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSGlobalObject *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int8x16_t *v45;
  unint64_t v46;
  int v47;
  int v48;
  JSC::JSBigInt *v49;
  double v50;
  WTF::StringImpl *v51;
  char v52;

  v10 = *((_QWORD *)this + 7);
  v11 = fabs(a4);
  v50 = v11;
  if (v11 <= 9.00719925e15)
  {
    WTF::StringBuilder::append<double>((uint64_t)a2, (uint64_t *)&v50);
    return;
  }
  v13 = JSC::JSBigInt::createFrom(this, a2, v11, (uint64_t)a3, a5, a6, a7, a8, a9);
  v20 = v13;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_5;
  v49 = v13;
  v47 = *(_DWORD *)(v10 + 80);
  if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v13, v15, v16, v17, v18, v19);
  v20 = v49;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_5:
    v21 = *((_QWORD *)this + 7);
    if (*((_DWORD *)v20 + 2))
    {
      JSC::JSBigInt::toStringGeneric((JSC::JSBigInt *)v21, this, v20, 10, v16, v17, v18, v19, (int **)&v51);
    }
    else
    {
      if (*(_BYTE *)(v21 + 44265))
      {
        v22 = *(WTF::StringImpl **)(*(_QWORD *)(v21 + 42600) + 8);
        if ((v22 & 1) != 0)
          v23 = 0;
        else
          v23 = *(_DWORD **)(*(_QWORD *)(v21 + 42600) + 8);
        *v23 += 2;
      }
      else
      {
        v52 = 48;
        WTF::AtomStringImpl::add((uint64_t)&v52, 1uLL, v15, v16, v17, v18, v19, &v51);
        v22 = v51;
      }
      v51 = v22;
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v48 = *(_DWORD *)(v10 + 80);
      if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v20, v15, v16, v17, v18, v19);
      v24 = v51;
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_25;
    }
    else
    {
      v24 = v51;
    }
    if (!*((_DWORD *)a2 + 4) && !*((_QWORD *)a2 + 1))
    {
      if (v24)
        *(_DWORD *)v24 += 2;
      v25 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          v35 = v24;
          WTF::StringImpl::~StringImpl(v25, v14, (uint64_t)v20, v15, v16, v17, v18, v19);
          WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          v24 = v35;
          if (v35)
            goto LABEL_23;
          goto LABEL_30;
        }
        *(_DWORD *)v25 -= 2;
      }
      if (v24)
      {
LABEL_23:
        v26 = *((_DWORD *)v24 + 1);
LABEL_24:
        *((_DWORD *)a2 + 4) = v26;
        goto LABEL_25;
      }
LABEL_30:
      v26 = 0;
      goto LABEL_24;
    }
    v44 = v24;
    if (v24)
    {
      v45 = (int8x16_t *)*((_QWORD *)v24 + 1);
      v46 = *((unsigned int *)v24 + 1);
      if ((*((_BYTE *)v24 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append((uint64_t)a2, v45, v46, v15, v16, v17, v18, v19);
        v51 = 0;
        v24 = v44;
LABEL_26:
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v14, (uint64_t)v20, v15, v16, v17, v18, v19);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
        return;
      }
    }
    else
    {
      v45 = 0;
      v46 = 0;
    }
    WTF::StringBuilder::append((uint64_t)a2, v45, v46, v15, v16, v17, v18, v19);
    v24 = v44;
LABEL_25:
    v51 = 0;
    if (!v24)
      return;
    goto LABEL_26;
  }
}

uint64_t JSC::temporalCalendarConstructorFuncFrom(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::TemporalCalendar::from((uint64_t)this, v9, a3, a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::temporalCalendarPrototypeFuncDateFromFields(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::Heap **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Exception *v36;
  WTF::StringImpl *v37;
  const char *v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(JSC::VM **);
  JSC::VM **v66;
  int v67;
  int v68;
  int v69;
  uint64_t (*v70)(JSC::VM **);
  JSC::VM **v71;
  uint64_t v72;
  JSC::VM *v73;
  char v74;
  WTF::StringImpl *v75;
  JSC::VM *v76;
  uint64_t v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;

  v8 = (unint64_t)this;
  v82 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v73 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v38 = "Temporal.Calendar.prototype.dateFromFields called on value that's not a Calendar";
    v39 = 81;
    return JSC::throwTypeError((unint64_t)this, &v73, (uint64_t)v38, v39);
  }
  v12 = *(_DWORD *)(v10 + 16);
  v13 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v14 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v14 != -1)
    {
      v76 = (JSC::VM *)&v74;
      v75 = (WTF::StringImpl *)&v76;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v13 = JSC::iso8601CalendarIDStorage;
  }
  if (v12 == v13)
  {
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v15 = *((_QWORD *)a2 + 6);
      if ((v15 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v15 + 5) > 0x16u)
      {
        if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1
          || (v16 = *((_QWORD *)a2 + 7), v76 = *(JSC::VM **)(v8 + 56), v16 == 10))
        {
          v16 = 0;
          v17 = v9;
        }
        else if ((v16 & 0xFFFE000000000002) != 0 || (v17 = v9, *(unsigned __int8 *)(v16 + 5) <= 0x16u))
        {
          JSC::throwTypeError(v8, &v76, (uint64_t)"options argument is not an object or undefined", 47);
          v16 = 0;
          v17 = v73;
        }
        if (*((_DWORD *)v17 + 20))
        {
          v67 = *((_DWORD *)v17 + 20);
          if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
          {
            v72 = v16;
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v17 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            v16 = v72;
          }
          if (*((_QWORD *)v17 + 2))
            return 0;
        }
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 41952) + 2104);
        v76 = (JSC::VM *)"constrain";
        v77 = 10;
        LOBYTE(v78) = 0;
        v79 = "reject";
        v80 = 7;
        v81 = 1;
        v48 = JSC::intlOption<JSC::TemporalOverflow>(v8, (unsigned int *)v16, v41, (uint64_t)&v76, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
        if (*((_DWORD *)v73 + 20))
        {
          v68 = *((_DWORD *)v73 + 20);
          if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v73 + 64), 7u, v42, v43, v44, v45, v46, v47);
          if (*((_QWORD *)v73 + 2))
            return 0;
        }
        LODWORD(v75) = JSC::TemporalCalendar::isoDateFromFields(v8, (unsigned int *)v15, v48, v43, v44, v45, v46, v47);
        if (*((_DWORD *)v73 + 20))
        {
          v69 = *((_DWORD *)v73 + 20);
          if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v73 + 64), 7u, v49, v50, v51, v52, v53, v54);
          if (*((_QWORD *)v73 + 2))
            return 0;
        }
        v55 = *(_QWORD *)(v8 + 440);
        if ((v55 & 1) != 0)
        {
          v70 = *(uint64_t (**)(JSC::VM **))(v55 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v8 & 8) != 0)
            v71 = (JSC::VM **)(v8 - 16);
          else
            v71 = (JSC::VM **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
          v76 = *v71;
          v77 = v8;
          v78 = v8 + 440;
          v55 = v70(&v76);
        }
        return JSC::TemporalPlainDate::create((uint64_t)v9, (JSC::VM *)v55, &v75, v50, v51, v52, v53, v54);
      }
    }
    v38 = "First argument to Temporal.Calendar.prototype.dateFromFields must be an object";
    this = (JSC *)v8;
    v39 = 79;
    return JSC::throwTypeError((unint64_t)this, &v73, (uint64_t)v38, v39);
  }
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x2300000002;
  *(_QWORD *)(v18 + 8) = "unimplemented: non-ISO8601 calendar";
  *(_DWORD *)(v18 + 16) = 4;
  v75 = (WTF::StringImpl *)v18;
  v19 = *(_QWORD *)(v8 + 128);
  v20 = *(JSC::Heap ***)(v8 + 56);
  if ((v19 & 1) != 0)
  {
    v65 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v8 & 8) != 0)
      v66 = (JSC::VM **)(v8 - 16);
    else
      v66 = (JSC::VM **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    v76 = *v66;
    v77 = v8;
    v78 = v8 + 128;
    v19 = v65(&v76);
  }
  v21 = JSC::ErrorInstance::create(v20, v19, &v75, 0, 0, 0, 2, 1);
  v28 = (JSC::Exception *)v21;
  if ((v21 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
  {
    v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v73, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
  }
  v36 = JSC::VM::throwException(v73, (JSC::JSGlobalObject *)v8, v28, v27, v22, v23, v24, v25, v26);
  v37 = v75;
  v75 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  return (unint64_t)v36;
}

unint64_t JSC::temporalCalendarPrototypeFuncDateAdd(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::Exception *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t (*v78)(__int128 *);
  _QWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(WTF::StringImpl **);
  WTF::StringImpl **v85;
  int v86;
  __int128 v87;
  char *v88;
  JSC::VM *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  char *v92;
  const char *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v89 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v89, (uint64_t)"Temporal.Calendar.prototype.dateAdd called on value that's not a Calendar", 74);
  }
  v13 = *(_DWORD *)(v11 + 16);
  v14 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v15 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v15 != -1)
    {
      *(_QWORD *)&v87 = &v86;
      v90 = (WTF::StringImpl *)&v87;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v90, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v14 = JSC::iso8601CalendarIDStorage;
  }
  if (v13 == v14)
  {
    if (*((_DWORD *)a2 + 8) == 1)
      v16 = 10;
    else
      v16 = *((_QWORD *)a2 + 6);
    v23 = JSC::TemporalPlainDate::from(this, v16, 0, a4, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v10 + 80))
    {
      v77 = *(_DWORD *)(v10 + 80);
      if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v17, v18, v19, v20, v21, v22);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v24 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
    JSC::TemporalDuration::toISO8601Duration(this, v24, v17, v18, v19, v20, v21, v22, &v87);
    if (*(_DWORD *)(v10 + 80))
    {
      v80 = *(_DWORD *)(v10 + 80);
      if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    if ((unint64_t)(*((int *)a2 + 8) - 4) < 0xFFFFFFFFFFFFFFFDLL)
    {
      v31 = *((_QWORD *)a2 + 8);
      v90 = *(WTF::StringImpl **)(this + 56);
      if (v31 != 10)
      {
        if ((v31 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v31 + 5) > 0x16u)
          goto LABEL_25;
        JSC::throwTypeError(this, &v90, (uint64_t)"options argument is not an object or undefined", 47);
      }
    }
    v31 = 0;
LABEL_25:
    if (*(_DWORD *)(v10 + 80))
    {
      v81 = *(_DWORD *)(v10 + 80);
      if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
    v90 = (WTF::StringImpl *)"constrain";
    v91 = 10;
    LOBYTE(v92) = 0;
    v93 = "reject";
    v94 = 7;
    v95 = 1;
    v59 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v31, v52, (uint64_t)&v90, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
    if (*(_DWORD *)(v10 + 80))
    {
      v82 = *(_DWORD *)(v10 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v53, v54, v55, v56, v57, v58);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    LODWORD(v90) = *(_DWORD *)(v23 + 16);
    v86 = JSC::TemporalCalendar::isoDateAdd(this, (int *)&v90, (uint64_t)&v87, v59);
    if (*(_DWORD *)(v10 + 80))
    {
      v83 = *(_DWORD *)(v10 + 80);
      if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v60, v61, v62, v63, v64, v65);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v66 = *(_QWORD *)(this + 440);
    if ((v66 & 1) != 0)
    {
      v84 = *(uint64_t (**)(WTF::StringImpl **))(v66 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v85 = (WTF::StringImpl **)(this - 16);
      else
        v85 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v90 = *v85;
      v91 = this;
      v92 = (char *)(this + 440);
      v66 = v84(&v90);
    }
    return JSC::TemporalPlainDate::create(v10, (JSC::VM *)v66, &v86, v61, v62, v63, v64, v65);
  }
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x2300000002;
  *(_QWORD *)(v32 + 8) = "unimplemented: non-ISO8601 calendar";
  *(_DWORD *)(v32 + 16) = 4;
  v90 = (WTF::StringImpl *)v32;
  v33 = *(_QWORD *)(this + 128);
  v34 = *(JSC::Heap ***)(this + 56);
  if ((v33 & 1) != 0)
  {
    v78 = *(uint64_t (**)(__int128 *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v79 = (_QWORD *)(this - 16);
    else
      v79 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v87 = *v79;
    *((_QWORD *)&v87 + 1) = this;
    v88 = (char *)(this + 128);
    v33 = v78(&v87);
  }
  v35 = JSC::ErrorInstance::create(v34, v33, &v90, 0, 0, 0, 2, 1);
  v42 = (JSC::Exception *)v35;
  if ((v35 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
  {
    v42 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
  }
  v50 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v42, v41, v36, v37, v38, v39, v40);
  v51 = v90;
  v90 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  return (unint64_t)v50;
}

unint64_t JSC::temporalCalendarPrototypeFuncDateUntil(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::Exception *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t (*v80)(JSC::VM **);
  JSC::VM **v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t (*v86)(WTF::StringImpl **);
  WTF::StringImpl **v87;
  int v88;
  JSC::VM *v89[10];
  JSC::VM *v90;
  WTF::StringImpl *v91[3];

  v10 = *(_QWORD *)(this + 56);
  v90 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v90, (uint64_t)"Temporal.Calendar.prototype.dateUntil called on value that's not a Calendar", 76);
  }
  v13 = *(_DWORD *)(v11 + 16);
  v14 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v15 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v15 != -1)
    {
      v89[0] = (JSC::VM *)&v88;
      v91[0] = (WTF::StringImpl *)v89;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v14 = JSC::iso8601CalendarIDStorage;
  }
  if (v13 == v14)
  {
    if (*((_DWORD *)a2 + 8) == 1)
      v16 = 10;
    else
      v16 = *((_QWORD *)a2 + 6);
    v23 = JSC::TemporalPlainDate::from(this, v16, 0, a4, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v10 + 80))
    {
      v79 = *(_DWORD *)(v10 + 80);
      if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v17, v18, v19, v20, v21, v22);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v25 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
    v32 = JSC::TemporalPlainDate::from(this, v25, 0, v18, v19, v20, v21, v22, v24);
    if (*(_DWORD *)(v10 + 80))
    {
      v82 = *(_DWORD *)(v10 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v26, v27, v28, v29, v30, v31);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    if ((unint64_t)(*((int *)a2 + 8) - 4) < 0xFFFFFFFFFFFFFFFDLL)
    {
      v33 = *((_QWORD *)a2 + 8);
      v89[0] = *(JSC::VM **)(this + 56);
      if (v33 != 10)
      {
        if ((v33 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v33 + 5) > 0x16u)
          goto LABEL_25;
        JSC::throwTypeError(this, v89, (uint64_t)"options argument is not an object or undefined", 47);
      }
    }
    v33 = 0;
LABEL_25:
    if (*(_DWORD *)(v10 + 80))
    {
      v83 = *(_DWORD *)(v10 + 80);
      if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v26, v27, v28, v29, v30, v31);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    LODWORD(v89[0]) = 117835012;
    WORD2(v89[0]) = 2312;
    v60 = JSC::temporalLargestUnit(this, (unsigned int *)v33, (uint64_t)v89, 6, 3, v29, v30, v31);
    if (*(_DWORD *)(v10 + 80))
    {
      v84 = *(_DWORD *)(v10 + 80);
      if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v61 = (v60 & 0xFF00) != 0 ? v60 : 3;
    LODWORD(v91[0]) = *(_DWORD *)(v23 + 16);
    v88 = *(_DWORD *)(v32 + 16);
    JSC::TemporalCalendar::isoDateDifference(this, (int *)v91, &v88, v61, (uint64_t)v89);
    if (*(_DWORD *)(v10 + 80))
    {
      v85 = *(_DWORD *)(v10 + 80);
      if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v62, v63, v64, v65, v66, v67);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v68 = *(_QWORD *)(this + 424);
    if ((v68 & 1) != 0)
    {
      v86 = *(uint64_t (**)(WTF::StringImpl **))(v68 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v87 = (WTF::StringImpl **)(this - 16);
      else
        v87 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v91[0] = *v87;
      v91[1] = (WTF::StringImpl *)this;
      v91[2] = (WTF::StringImpl *)(this + 424);
      v68 = v86(v91);
    }
    return JSC::TemporalDuration::tryCreateIfValid(this, (JSC::ISO8601 *)v89, v68);
  }
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x2300000002;
  *(_QWORD *)(v34 + 8) = "unimplemented: non-ISO8601 calendar";
  *(_DWORD *)(v34 + 16) = 4;
  v91[0] = (WTF::StringImpl *)v34;
  v35 = *(_QWORD *)(this + 128);
  v36 = *(JSC::Heap ***)(this + 56);
  if ((v35 & 1) != 0)
  {
    v80 = *(uint64_t (**)(JSC::VM **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
    v81 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v81 = (JSC::VM **)(this - 16);
    v89[0] = *v81;
    v89[1] = (JSC::VM *)this;
    v89[2] = (JSC::VM *)(this + 128);
    v35 = v80(v89);
  }
  v37 = JSC::ErrorInstance::create(v36, v35, v91, 0, 0, 0, 2, 1);
  v44 = (JSC::Exception *)v37;
  if ((v37 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
  {
    v44 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
  }
  v52 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v44, v43, v38, v39, v40, v41, v42);
  v53 = v91[0];
  v91[0] = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  return (unint64_t)v52;
}

unint64_t JSC::temporalCalendarPrototypeFuncFields(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t i;
  unint64_t v24;
  uint64_t Index;
  int8x16_t v26;
  int v27;
  uint64_t v28;
  JSC::JSGlobalObject *v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  _BOOL4 v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  JSC::VM *v43;
  JSC::VM *v44;
  unint64_t v45;
  JSC::VM *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  _BOOL4 v90;
  WTF::StringImpl *v91;
  uint64_t *v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD v95[4];
  uint64_t v96;
  char v97;
  JSC::VM *v98;
  uint64_t **v99;
  char *v100;
  uint64_t **v101;
  uint64_t v102[2];

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v98 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v98, (uint64_t)"Temporal.Calendar.prototype.fields called on value that's not a Calendar", 73);
  }
  v11 = a2;
  v12 = *(_DWORD *)(v10 + 16);
  v13 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v14 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v14 != -1)
    {
      v92 = v102;
      v99 = &v92;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v13 = JSC::iso8601CalendarIDStorage;
  }
  v97 = 0;
  LOBYTE(v92) = 0;
  v93 = 0x800000000;
  v94 = (_OWORD *)((char *)v95 + 8);
  memset(v95, 0, sizeof(v95));
  v96 = 0;
  if (*((_DWORD *)v11 + 8) == 1)
  {
    LOBYTE(v99) = v12 == v13;
    v100 = &v97;
    v101 = &v92;
    v16 = *((_QWORD *)this + 7);
    v15 = 10;
  }
  else
  {
    v15 = *((_QWORD *)v11 + 6);
    LOBYTE(v99) = v12 == v13;
    v100 = &v97;
    v101 = &v92;
    v16 = *((_QWORD *)this + 7);
    if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 36)
    {
      v17 = *(unsigned __int8 *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 8);
      v18 = (v17 & 0x10) != 0 ? ((v17 & 0xE) + 10) >> 1 : (v17 >> 1) & 7;
      v19 = *((_DWORD *)this + v18 + 213);
      v20 = v19 ? 16 * (v19 & 0xFFFFFFFE) : 0;
      if (v20 == 16 * (*(_DWORD *)v15 & 0xFFFFFFFE))
      {
        v21 = *((_QWORD *)this + 277);
        v22 = (v21 & 1) != 0 ? (v21 >> 1) & 3 : *(unsigned __int8 *)(v21 + 4);
        if (v22 != 2)
        {
          for (i = 0; ; ++i)
          {
            v24 = (*(_BYTE *)(v15 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(v15 + 8) - 8) : 0;
            if (i >= v24)
              break;
            Index = JSC::JSObject::getIndex((JSC::JSObject *)v15, this, i, a4, a5, a6, a7, a8);
            if (*(_DWORD *)(v16 + 80))
            {
              v27 = *(_DWORD *)(v16 + 80);
              if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v16 + 16))
                break;
            }
            JSC::temporalCalendarPrototypeFuncFields(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)&v99, v16, this, Index, a5, a6, a7, a8, v26);
            if (*(_QWORD *)(v16 + 16))
            {
              v42 = *((_DWORD *)this + 250);
              if (v42)
                v43 = (JSC::VM *)(16 * (v42 & 0xFFFFFFFE));
              else
                v43 = 0;
              v44 = JSC::JSArrayIterator::create(v16, v43, v15, 0xFFFE000000000001, a5, a6, a7, a8);
              v28 = (uint64_t)v44;
              *(double *)v38.i64 = (double)(i + 1);
              if ((int)i + 1 < 0)
                v45 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
              else
                v45 = (i + 1) | 0xFFFE000000000000;
              *((_QWORD *)v44 + 2) = v45;
              goto LABEL_68;
            }
          }
          goto LABEL_69;
        }
      }
    }
  }
  v28 = JSC::iteratorForIterable((JSC::VM **)this, v15, (uint64_t)a3, a4, a5, a6, a7, a8, (int8x16_t)0);
  v29 = a2;
  if (!*(_DWORD *)(v16 + 80))
    goto LABEL_53;
  v89 = *(_DWORD *)(v16 + 80);
  if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_53:
    while (1)
    {
      v30 = *((_QWORD *)this + 7);
      v31 = JSC::iteratorNext(this, v28, (uint64_t)v29, 0, a5, a6, a7, a8);
      if (*(_DWORD *)(v30 + 80))
      {
        v39 = *(_DWORD *)(v30 + 80);
        if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v30 + 16))
          goto LABEL_51;
      }
      v33 = JSC::iteratorComplete(this, v31, (uint64_t)a3, a4, a5, a6, a7, a8, v32);
      if (!*(_DWORD *)(v30 + 80))
        goto LABEL_38;
      v40 = *(_DWORD *)(v30 + 80);
      if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      {
        v90 = v33;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v33 = v90;
      }
      if (*(_QWORD *)(v30 + 16))
LABEL_51:
        a2 = 0;
      else
LABEL_38:
        a2 = (JSC::JSGlobalObject *)(v33 ? 6 : v31);
      if (*(_QWORD *)(v16 + 16) || a2 == (JSC::JSGlobalObject *)6)
        break;
      v34 = JSC::iteratorValue(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, v32);
      if (*(_DWORD *)(v16 + 80))
      {
        v41 = *(_DWORD *)(v16 + 80);
        if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v16 + 16))
          break;
      }
      JSC::temporalCalendarPrototypeFuncFields(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)&v99, v16, this, v34, a5, a6, a7, a8, v35);
      if (*(_QWORD *)(v16 + 16))
      {
LABEL_68:
        JSC::iteratorClose(this, v28, v36, v37, a5, a6, a7, a8, v38);
        break;
      }
    }
  }
LABEL_69:
  v46 = v98;
  if (*((_DWORD *)v98 + 20))
  {
    v85 = *((_DWORD *)v98 + 20);
    if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v98 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v46 + 2))
      goto LABEL_106;
  }
  if (!v97)
    goto LABEL_91;
  v47 = *(WTF::StringImpl **)(*((_QWORD *)v9 + 5244) + 1224);
  if (v47)
    *(_DWORD *)v47 += 2;
  v91 = v47;
  v48 = JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)&v91, (uint64_t)a3, a4, a5, a6, a7, a8);
  v56 = v48;
  v57 = v93;
  if ((_DWORD)v93 == HIDWORD(v93))
  {
    if (v93 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v93, 2 * (int)v93))
    {
      LOBYTE(v92) = 1;
      goto LABEL_77;
    }
    v57 = v93;
  }
  else if (v94 == (_OWORD *)((char *)v95 + 8) || !v94)
  {
    *((_QWORD *)v94 + v93) = v48;
    LODWORD(v93) = v57 + 1;
    goto LABEL_77;
  }
  *((_QWORD *)v94 + v57) = v56;
  LODWORD(v93) = v57 + 1;
  if (!*(_QWORD *)&v95[0] && (v56 & 0xFFFE000000000002) == 0 && v56)
  {
    v87 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v56 & 8) != 0)
      v87 = (_QWORD *)(v56 - 16);
    *(_QWORD *)&v95[0] = *v87 + 560;
    v102[0] = (uint64_t)&v93;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v95[0], v102, v51, v52, v53, v54, v55, (uint64_t)&v99);
  }
LABEL_77:
  v58 = v91;
  v91 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = *(WTF::StringImpl **)(*((_QWORD *)v9 + 5244) + 1232);
  if (v59)
    *(_DWORD *)v59 += 2;
  v91 = v59;
  v60 = JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)&v91, v50, v51, v52, v53, v54, v55);
  v61 = v60;
  v62 = v93;
  if ((_DWORD)v93 == HIDWORD(v93))
  {
    if (v93 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v93, 2 * (int)v93))
    {
      LOBYTE(v92) = 1;
      goto LABEL_86;
    }
    v62 = v93;
LABEL_121:
    *((_QWORD *)v94 + v62) = v61;
    LODWORD(v93) = v62 + 1;
    if (!*(_QWORD *)&v95[0] && (v61 & 0xFFFE000000000002) == 0 && v61)
    {
      if ((v61 & 8) != 0)
        v88 = (_QWORD *)(v61 - 16);
      else
        v88 = (_QWORD *)(v61 & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)&v95[0] = *v88 + 560;
      v102[0] = (uint64_t)&v93;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v95[0], v102, a4, a5, a6, a7, a8, (uint64_t)&v99);
    }
    goto LABEL_86;
  }
  if (v94 != (_OWORD *)((char *)v95 + 8) && v94)
    goto LABEL_121;
  *((_QWORD *)v94 + v93) = v60;
  LODWORD(v93) = v62 + 1;
LABEL_86:
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  if ((_BYTE)v92)
    JSC::throwStackOverflowError((unint64_t)this, &v98, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_91:
  v99 = (uint64_t **)v94;
  LODWORD(v100) = v93;
  v64 = *((_QWORD *)this + 7);
  v65 = *((_DWORD *)this + 224);
  if (v65)
    v66 = 16 * (v65 & 0xFFFFFFFE);
  else
    v66 = 0;
  if (*(_DWORD *)(v64 + 80))
  {
    v86 = *(_DWORD *)(v64 + 80);
    if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v64 + 16))
    {
LABEL_106:
      v67 = 0;
      goto LABEL_96;
    }
  }
  v67 = JSC::constructArray((uint64_t)this, v66, (uint64_t)&v99, a4, a5, a6, a7, a8);
LABEL_96:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v93, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v67;
}

unsigned __int8 *JSC::temporalCalendarPrototypeFuncMergeFields(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t SlowCase;
  WTF *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  WTF *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  int v61;
  int v62;
  WTF *v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  char v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __n128 v80;
  int v81;
  int v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  unint64_t v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl **v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v128;
  WTF::StringImpl **v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  int v146;
  WTF *v147;
  int v148;
  uint64_t v149;
  WTF::StringImpl **v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  int v163;
  int v164;
  unsigned __int8 v165;
  int v166;
  uint64_t v167;
  WTF::StringImpl **v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF *v179;
  unsigned __int8 *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __n128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *result;
  uint64_t v203;
  WTF::StringImpl **v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int v217;
  uint64_t v218;
  WTF::StringImpl **v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  uint64_t v237;
  WTF::StringImpl **v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  JSC::VMTraps *v254;
  uint64_t v255;
  JSC::VMTraps *v256;
  unsigned int *v257;
  uint64_t v258;
  unsigned __int8 *v259;
  uint64_t v260;
  JSC::VM *v261;
  WTF **v262;
  unsigned __int8 *v263;
  int v264;
  char v265;
  __int16 v266;
  char v267;
  uint64_t v268;
  WTF *v269;
  unsigned __int8 *v270;
  uint64_t v271;
  uint64_t v272;
  char v273;

  v9 = *((_QWORD *)this + 7);
  v261 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return (unsigned __int8 *)JSC::throwTypeError((unint64_t)this, &v261, (uint64_t)"Temporal.Calendar.prototype.mergeFields called on value that's not a Calendar", 78);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v269 = (WTF *)10;
    goto LABEL_144;
  }
  v12 = *((_QWORD *)a2 + 6);
  v269 = (WTF *)v12;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
LABEL_144:
    v142 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v269, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_145:
    v12 = v142;
    goto LABEL_6;
  }
  if (*(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    v142 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v12, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_145;
  }
LABEL_6:
  if (*(_DWORD *)(v9 + 80))
  {
    v144 = *(_DWORD *)(v9 + 80);
    if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v269 = (WTF *)10;
    goto LABEL_147;
  }
  v13 = *((_QWORD *)a2 + 7);
  v269 = (WTF *)v13;
  if ((v13 & 0xFFFE000000000002) != 0)
  {
LABEL_147:
    v143 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v269, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_148:
    v13 = v143;
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    v143 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v13, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_148;
  }
LABEL_10:
  if (*(_DWORD *)(v9 + 80))
  {
    v145 = *(_DWORD *)(v9 + 80);
    if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v14 = *(_DWORD *)(v10 + 16);
  v15 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v16 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v16 != -1)
    {
      v269 = (WTF *)&v273;
      v262 = &v269;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v262, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v15 = JSC::iso8601CalendarIDStorage;
  }
  if (v14 != v15)
  {
    v42 = (unsigned __int8 *)JSC::temporalCalendarPrototypeFuncMergeFields(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)this, (JSC::VM *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v9 + 80))
    {
      v161 = *(_DWORD *)(v9 + 80);
      if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v36, v37, v38, v39, v40, v41);
      if (*(_QWORD *)(v9 + 16))
        return 0;
    }
    v49 = (unsigned int *)JSC::temporalCalendarPrototypeFuncMergeFields(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)this, (JSC::VM *)v13, v36, v37, v38, v39, v40, v41);
    if (*(_DWORD *)(v9 + 80))
    {
      v163 = *(_DWORD *)(v9 + 80);
      if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v43, v44, v45, v46, v47, v48);
      if (*(_QWORD *)(v9 + 16))
        return 0;
    }
    v50 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v50 = 1;
    *((_QWORD *)v50 + 1) = (char *)v50 + 24;
    *((_QWORD *)v50 + 2) = 20;
    v269 = v50;
    v270 = 0;
    v271 = v9;
    LOWORD(v272) = 258;
    (*(void (**)(unsigned int *, JSC *, WTF **, _QWORD))(16
                                                                  * *(unsigned int *)(16 * (*v49 & 0xFFFFFFFE) + 0x4C)
                                                                  + 0x78))(v49, this, &v269, 0);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_44;
    v166 = *(_DWORD *)(v9 + 80);
    if ((v166 & 0x27) != 0 && (v166 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v9 + 16))
    {
      if (v270)
        WTF::fastFree((unint64_t)(v270 - 16), v21, v22, v23, v24, v25, v26, v27);
      v147 = v269;
      v269 = 0;
      if (!v147)
        return 0;
      v148 = *(_DWORD *)v147 - 1;
      if (*(_DWORD *)v147 == 1)
      {
        v167 = *((unsigned int *)v147 + 5);
        if ((_DWORD)v167)
        {
          v168 = (WTF::StringImpl **)*((_QWORD *)v147 + 1);
          v169 = 8 * v167;
          do
          {
            v170 = *v168;
            *v168 = 0;
            if (v170)
            {
              if (*(_DWORD *)v170 == 2)
              {
                WTF::StringImpl::~StringImpl(v170, (WTF::AtomStringImpl *)v21, v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
              }
              else
              {
                *(_DWORD *)v170 -= 2;
              }
            }
            ++v168;
            v169 -= 8;
          }
          while (v169);
        }
        goto LABEL_282;
      }
    }
    else
    {
LABEL_44:
      v52 = *((unsigned int *)v269 + 5);
      if (!(_DWORD)v52)
      {
        v255 = 10;
        v258 = 10;
        v260 = 10;
        v57 = 10;
        v56 = 10;
LABEL_100:
        if (v270)
          WTF::fastFree((unint64_t)(v270 - 16), v21, v22, v23, v24, v25, v26, v27);
        v83 = v269;
        v269 = 0;
        v72 = v42;
        if (v83)
        {
          if (*(_DWORD *)v83 == 1)
          {
            v128 = *((unsigned int *)v83 + 5);
            if ((_DWORD)v128)
            {
              v129 = (WTF::StringImpl **)*((_QWORD *)v83 + 1);
              v130 = 8 * v128;
              do
              {
                v131 = *v129;
                *v129 = 0;
                if (v131)
                {
                  if (*(_DWORD *)v131 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v131, (WTF::AtomStringImpl *)v21, v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
                  }
                  else
                  {
                    *(_DWORD *)v131 -= 2;
                  }
                }
                ++v129;
                v130 -= 8;
              }
              while (v130);
            }
            v140 = *((_QWORD *)v83 + 1);
            if ((WTF *)((char *)v83 + 24) != (WTF *)v140 && v140 != 0)
            {
              *((_QWORD *)v83 + 1) = 0;
              *((_DWORD *)v83 + 4) = 0;
              WTF::fastFree(v140, v21, v22, v23, v24, v25, v26, v27);
            }
            WTF::fastFree((unint64_t)v83, v21, v22, v23, v24, v25, v26, v27);
          }
          else
          {
            --*(_DWORD *)v83;
          }
        }
        if (v56 != 10 || v57 != 10)
        {
          v269 = 0;
          v270 = v72;
          LODWORD(v271) = -1;
          BYTE4(v271) = BYTE4(v271) & 0xF8 | 1;
          *(_WORD *)((char *)&v271 + 5) = 0;
          HIBYTE(v271) = 1;
          v272 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v72, v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1928), v56, 0, (uint64_t)&v269, v26, v27, v51);
          if (*(_DWORD *)(v9 + 80))
          {
            v232 = *(_DWORD *)(v9 + 80);
            if ((v232 & 0x27) != 0 && (v232 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v84, v85, v86, v87, v88, v89);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v269 = 0;
          v270 = v72;
          LODWORD(v271) = -1;
          BYTE4(v271) = BYTE4(v271) & 0xF8 | 1;
          *(_WORD *)((char *)&v271 + 5) = 0;
          HIBYTE(v271) = 1;
          v272 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v72, v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1936), v57, 0, (uint64_t)&v269, v88, v89, v90);
          if (*(_DWORD *)(v9 + 80))
          {
            v234 = *(_DWORD *)(v9 + 80);
            if ((v234 & 0x27) != 0 && (v234 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v91, v92, v93, v94, v26, v27);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
        }
        if (v260 == 10 && v258 == 10 && v255 == 10)
          return v72;
        v269 = 0;
        v270 = v72;
        LODWORD(v271) = -1;
        BYTE4(v271) = BYTE4(v271) & 0xF8 | 1;
        *(_WORD *)((char *)&v271 + 5) = 0;
        HIBYTE(v271) = 1;
        v272 = 0;
        v95 = v9 + 41952;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v72, v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2664), v260, 0, (uint64_t)&v269, v26, v27, v51);
        if (*(_DWORD *)(v9 + 80))
        {
          v233 = *(_DWORD *)(v9 + 80);
          if ((v233 & 0x27) != 0 && (v233 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v96, v97, v98, v99, v100, v101);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v269 = 0;
        v270 = v72;
        LODWORD(v271) = -1;
        BYTE4(v271) = BYTE4(v271) & 0xF8 | 1;
        *(_WORD *)((char *)&v271 + 5) = 0;
        HIBYTE(v271) = 1;
        v272 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v72, v9, *(_QWORD *)(*(_QWORD *)v95 + 1224), v258, 0, (uint64_t)&v269, v100, v101, v102);
        if (*(_DWORD *)(v9 + 80))
        {
          v235 = *(_DWORD *)(v9 + 80);
          if ((v235 & 0x27) != 0 && (v235 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v103, v104, v105, v106, v107, v108);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v269 = 0;
        v270 = v72;
        LODWORD(v271) = -1;
        BYTE4(v271) = BYTE4(v271) & 0xF8 | 1;
        *(_WORD *)((char *)&v271 + 5) = 0;
        HIBYTE(v271) = 1;
        v272 = 0;
        v110 = *(_QWORD *)(*(_QWORD *)v95 + 1232);
        v111 = v72;
        v112 = v9;
        v113 = v255;
        goto LABEL_216;
      }
      v53 = v9 + 41952;
      v54 = (unint64_t *)*((_QWORD *)v269 + 1);
      v55 = 8 * v52;
      v56 = 10;
      v57 = 10;
      v260 = 10;
      v258 = 10;
      v254 = (JSC::VMTraps *)(v9 + 64);
      v255 = 10;
      while (1)
      {
        v58 = JSC::JSObject::get(v49, (uint64_t)this, *v54, v23, v24, v25, v26, v27);
        if (*(_DWORD *)(v9 + 80))
        {
          v62 = *(_DWORD *)(v9 + 80);
          if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v254, 7u, v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v9 + 16))
            break;
        }
        if (v58 != 10)
        {
          v59 = *(_QWORD **)v53;
          v60 = *v54;
          if (*v54 == *(_QWORD *)(*(_QWORD *)v53 + 1928))
          {
            v56 = v58;
          }
          else if (v60 == v59[242])
          {
            v57 = v58;
          }
          else if (v60 == v59[333])
          {
            v260 = v58;
          }
          else if (v60 == v59[153])
          {
            v258 = v58;
          }
          else if (v60 == v59[154])
          {
            v255 = v58;
          }
          else
          {
            v262 = 0;
            v263 = v42;
            v264 = -1;
            v265 = v265 & 0xF8 | 1;
            v266 = 0;
            v267 = 1;
            v268 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v42, v9, *v54, v58, 0, (uint64_t)&v262, v26, v27, v51);
            if (*(_DWORD *)(v9 + 80))
            {
              v61 = *(_DWORD *)(v9 + 80);
              if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v254, 7u, v22, v23, v24, v25, v26, v27);
              if (*(_QWORD *)(v9 + 16))
                break;
            }
          }
        }
        ++v54;
        v55 -= 8;
        if (!v55)
          goto LABEL_100;
      }
      if (v270)
        WTF::fastFree((unint64_t)(v270 - 16), v21, v22, v23, v24, v25, v26, v27);
      v147 = v269;
      v269 = 0;
      if (!v147)
        return 0;
      v148 = *(_DWORD *)v147 - 1;
      if (*(_DWORD *)v147 == 1)
      {
        v218 = *((unsigned int *)v147 + 5);
        if ((_DWORD)v218)
        {
          v219 = (WTF::StringImpl **)*((_QWORD *)v147 + 1);
          v220 = 8 * v218;
          do
          {
            v221 = *v219;
            *v219 = 0;
            if (v221)
            {
              if (*(_DWORD *)v221 == 2)
              {
                WTF::StringImpl::~StringImpl(v221, (WTF::AtomStringImpl *)v21, v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
              }
              else
              {
                *(_DWORD *)v221 -= 2;
              }
            }
            ++v219;
            v220 -= 8;
          }
          while (v220);
        }
        goto LABEL_282;
      }
    }
LABEL_269:
    *(_DWORD *)v147 = v148;
    return 0;
  }
  v9 = *((_QWORD *)this + 7);
  v17 = *(_QWORD *)(v9 + 15056);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 + 60);
    SlowCase = *(_QWORD *)(v17 + 24);
    if (SlowCase < *(_QWORD *)(v17 + 32))
    {
LABEL_18:
      *(_QWORD *)(v17 + 24) = SlowCase + v18;
      goto LABEL_19;
    }
    SlowCase = *(_QWORD *)(v17 + 40);
    if ((SlowCase & 1) == 0)
    {
      v162 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v17 + 48);
      *(_QWORD *)(v17 + 32) = SlowCase + HIDWORD(v162);
      *(_QWORD *)(v17 + 40) = SlowCase + (int)v162;
      goto LABEL_18;
    }
    JSC::sanitizeStackForVM(*((JSC **)this + 7), a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v9 + 192, v18, 0, 0, v251, v252, v253);
LABEL_19:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v9 + 755))
      __dmb(0xAu);
    v20 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = (char *)v20 + 24;
    *((_QWORD *)v20 + 2) = 20;
    v269 = v20;
    v270 = 0;
    v271 = v9;
    LOWORD(v272) = 258;
    (*(void (**)(unint64_t, JSC *, WTF **, _QWORD))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x78))(v12, this, &v269, 0);
    if (*(_DWORD *)(v9 + 80))
    {
      v146 = *(_DWORD *)(v9 + 80);
      if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
      if (*(_QWORD *)(v9 + 16))
      {
        if (v270)
          WTF::fastFree((unint64_t)(v270 - 16), v21, v22, v23, v24, v25, v26, v27);
        v147 = v269;
        v269 = 0;
        if (!v147)
          return 0;
        v148 = *(_DWORD *)v147 - 1;
        if (*(_DWORD *)v147 == 1)
        {
          v149 = *((unsigned int *)v147 + 5);
          if ((_DWORD)v149)
          {
            v150 = (WTF::StringImpl **)*((_QWORD *)v147 + 1);
            v151 = 8 * v149;
            do
            {
              v152 = *v150;
              *v150 = 0;
              if (v152)
              {
                if (*(_DWORD *)v152 == 2)
                {
                  WTF::StringImpl::~StringImpl(v152, (WTF::AtomStringImpl *)v21, v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
                }
                else
                {
                  *(_DWORD *)v152 -= 2;
                }
              }
              ++v150;
              v151 -= 8;
            }
            while (v151);
          }
          goto LABEL_282;
        }
        goto LABEL_269;
      }
    }
    v257 = (unsigned int *)v12;
    v259 = (unsigned __int8 *)SlowCase;
    v28 = *((unsigned int *)v269 + 5);
    if ((_DWORD)v28)
    {
      v29 = v9 + 41952;
      v30 = (unint64_t *)*((_QWORD *)v269 + 1);
      v31 = 8 * v28;
      while (1)
      {
        v22 = *v30;
        if (*v30 != *(_QWORD *)(*(_QWORD *)v29 + 1928) && v22 != *(_QWORD *)(*(_QWORD *)v29 + 1936))
        {
          v32 = JSC::JSObject::get(v257, (uint64_t)this, v22, v23, v24, v25, v26, v27);
          if (*(_DWORD *)(v9 + 80))
          {
            v34 = *(_DWORD *)(v9 + 80);
            if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
            if (*(_QWORD *)(v9 + 16))
              break;
          }
          if (v32 != 10)
          {
            v262 = 0;
            v263 = v259;
            v264 = -1;
            v265 = v265 & 0xF8 | 1;
            v266 = 0;
            v267 = 1;
            v268 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v259, v9, *v30, v32, 0, (uint64_t)&v262, v26, v27, v33);
            if (*(_DWORD *)(v9 + 80))
            {
              v35 = *(_DWORD *)(v9 + 80);
              if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v22, v23, v24, v25, v26, v27);
              if (*(_QWORD *)(v9 + 16))
                break;
            }
          }
        }
        ++v30;
        v31 -= 8;
        if (!v31)
          goto LABEL_71;
      }
      if (v270)
        WTF::fastFree((unint64_t)(v270 - 16), v21, v22, v23, v24, v25, v26, v27);
      v147 = v269;
      v269 = 0;
      if (!v147)
        return 0;
      v148 = *(_DWORD *)v147 - 1;
      if (*(_DWORD *)v147 == 1)
      {
        v237 = *((unsigned int *)v147 + 5);
        if ((_DWORD)v237)
        {
          v238 = (WTF::StringImpl **)*((_QWORD *)v147 + 1);
          v239 = 8 * v237;
          do
          {
            v240 = *v238;
            *v238 = 0;
            if (v240)
            {
              if (*(_DWORD *)v240 == 2)
              {
                WTF::StringImpl::~StringImpl(v240, (WTF::AtomStringImpl *)v21, v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
              }
              else
              {
                *(_DWORD *)v240 -= 2;
              }
            }
            ++v238;
            v239 -= 8;
          }
          while (v239);
        }
LABEL_282:
        v249 = *((_QWORD *)v147 + 1);
        if ((WTF *)((char *)v147 + 24) != (WTF *)v249 && v249 != 0)
        {
          *((_QWORD *)v147 + 1) = 0;
          *((_DWORD *)v147 + 4) = 0;
          WTF::fastFree(v249, v21, v22, v23, v24, v25, v26, v27);
        }
        WTF::fastFree((unint64_t)v147, v21, v22, v23, v24, v25, v26, v27);
        return 0;
      }
      goto LABEL_269;
    }
LABEL_71:
    if (v270)
      WTF::fastFree((unint64_t)(v270 - 16), v21, v22, v23, v24, v25, v26, v27);
    v63 = v269;
    v269 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 1)
      {
        v114 = *((unsigned int *)v63 + 5);
        if ((_DWORD)v114)
        {
          v115 = (WTF::StringImpl **)*((_QWORD *)v63 + 1);
          v116 = 8 * v114;
          do
          {
            v117 = *v115;
            *v115 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
              {
                WTF::StringImpl::~StringImpl(v117, (WTF::AtomStringImpl *)v21, v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
              }
              else
              {
                *(_DWORD *)v117 -= 2;
              }
            }
            ++v115;
            v116 -= 8;
          }
          while (v116);
        }
        v126 = *((_QWORD *)v63 + 1);
        if ((WTF *)((char *)v63 + 24) != (WTF *)v126 && v126 != 0)
        {
          *((_QWORD *)v63 + 1) = 0;
          *((_DWORD *)v63 + 4) = 0;
          WTF::fastFree(v126, v21, v22, v23, v24, v25, v26, v27);
        }
        WTF::fastFree((unint64_t)v63, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        --*(_DWORD *)v63;
      }
    }
    v64 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v64 = 1;
    *((_QWORD *)v64 + 1) = (char *)v64 + 24;
    *((_QWORD *)v64 + 2) = 20;
    v269 = v64;
    v270 = 0;
    v271 = v9;
    LOWORD(v272) = 258;
    (*(void (**)(unint64_t, JSC *, WTF **, _QWORD))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v13 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x78))(v13, this, &v269, 0);
    v72 = v259;
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_77;
    v164 = *(_DWORD *)(v9 + 80);
    if ((v164 & 0x27) != 0 && (v164 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v66, v67, v68, v69, v70, v71);
    if (*(_QWORD *)(v9 + 16))
    {
      v165 = 0;
      LODWORD(v77) = 1;
    }
    else
    {
LABEL_77:
      v73 = *((unsigned int *)v269 + 5);
      if ((_DWORD)v73)
      {
        v74 = 0;
        v75 = (unint64_t *)*((_QWORD *)v269 + 1);
        v76 = v9 + 41952;
        v256 = (JSC::VMTraps *)(v9 + 64);
        v77 = 8 * v73;
        while (1)
        {
          v78 = *v75;
          if ((v74 & 1) == 0
            && (v78 == *(_QWORD *)(*(_QWORD *)v76 + 1928) || v78 == *(_QWORD *)(*(_QWORD *)v76 + 1936)))
          {
            v74 = 1;
          }
          v79 = JSC::JSObject::get((unsigned int *)v13, (uint64_t)this, v78, v67, v68, v69, v70, v71);
          if (*(_DWORD *)(v9 + 80))
          {
            v81 = *(_DWORD *)(v9 + 80);
            if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v256, 7u, v66, v67, v68, v69, v70, v71);
            if (*(_QWORD *)(v9 + 16))
              break;
          }
          if (v79 != 10)
          {
            v262 = 0;
            v263 = v259;
            v264 = -1;
            v265 = v265 & 0xF8 | 1;
            v266 = 0;
            v267 = 1;
            v268 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v259, v9, *v75, v79, 0, (uint64_t)&v262, v70, v71, v80);
            if (*(_DWORD *)(v9 + 80))
            {
              v82 = *(_DWORD *)(v9 + 80);
              if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v256, 7u, v66, v67, v68, v69, v70, v71);
              if (*(_QWORD *)(v9 + 16))
                break;
            }
          }
          ++v75;
          v77 -= 8;
          if (!v77)
            goto LABEL_198;
        }
        LODWORD(v77) = 1;
LABEL_198:
        v72 = v259;
      }
      else
      {
        LODWORD(v77) = 0;
        v74 = 0;
      }
      v165 = v74 & 1;
    }
    if (v270)
      WTF::fastFree((unint64_t)(v270 - 16), v65, v66, v67, v68, v69, v70, v71);
    v179 = v269;
    v269 = 0;
    if (v179)
    {
      if (*(_DWORD *)v179 == 1)
      {
        v203 = *((unsigned int *)v179 + 5);
        if ((_DWORD)v203)
        {
          v204 = (WTF::StringImpl **)*((_QWORD *)v179 + 1);
          v205 = 8 * v203;
          do
          {
            v206 = *v204;
            *v204 = 0;
            if (v206)
            {
              if (*(_DWORD *)v206 == 2)
              {
                WTF::StringImpl::~StringImpl(v206, (WTF::AtomStringImpl *)v65, v66, v67, v68, v69, v70, v71);
                WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
              }
              else
              {
                *(_DWORD *)v206 -= 2;
              }
            }
            ++v204;
            v205 -= 8;
          }
          while (v205);
        }
        v215 = *((_QWORD *)v179 + 1);
        if ((WTF *)((char *)v179 + 24) != (WTF *)v215 && v215 != 0)
        {
          *((_QWORD *)v179 + 1) = 0;
          *((_DWORD *)v179 + 4) = 0;
          WTF::fastFree(v215, v65, v66, v67, v68, v69, v70, v71);
        }
        WTF::fastFree((unint64_t)v179, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        --*(_DWORD *)v179;
      }
    }
    if ((_DWORD)v77)
      v180 = 0;
    else
      v180 = v72;
    if (((v165 | v77) & 1) != 0)
      return v180;
    v181 = v9 + 41952;
    v188 = JSC::JSObject::get(v257, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1928), v67, v68, v69, v70, v71);
    if (*(_DWORD *)(v9 + 80))
    {
      v230 = *(_DWORD *)(v9 + 80);
      if ((v230 & 0x27) != 0 && (v230 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v182, v183, v184, v185, v186, v187);
      if (*(_QWORD *)(v9 + 16))
        return 0;
    }
    if (v188 != 10)
    {
      v269 = 0;
      v270 = v72;
      v271 = 0x1000001FFFFFFFFLL;
      v189.n128_u64[0] = 16777217;
      v272 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v72, v9, *(_QWORD *)(*(_QWORD *)v181 + 1928), v188, 0, (uint64_t)&v269, v186, v187, v189);
      if (*(_DWORD *)(v9 + 80))
      {
        v236 = *(_DWORD *)(v9 + 80);
        if ((v236 & 0x27) != 0 && (v236 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v190, v183, v184, v185, v186, v187);
        if (*(_QWORD *)(v9 + 16))
          return 0;
      }
    }
    v195 = JSC::JSObject::get(v257, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v181 + 1936), v183, v184, v185, v186, v187);
    if (*(_DWORD *)(v9 + 80))
    {
      v231 = *(_DWORD *)(v9 + 80);
      if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v191, v192, v193, v194, v107, v108);
      if (*(_QWORD *)(v9 + 16))
        return 0;
    }
    if (v195 != 10)
    {
      v269 = 0;
      v270 = v72;
      v271 = 0x1000001FFFFFFFFLL;
      v109.n128_u64[0] = 16777217;
      v272 = 0;
      v110 = *(_QWORD *)(*(_QWORD *)v181 + 1936);
      v111 = v72;
      v112 = v9;
      v113 = v195;
LABEL_216:
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v111, v112, v110, v113, 0, (uint64_t)&v269, v107, v108, v109);
      if (!*(_DWORD *)(v9 + 80))
        return v72;
      v217 = *(_DWORD *)(v9 + 80);
      if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v196, v197, v198, v199, v200, v201);
      if (!*(_QWORD *)(v9 + 16))
        return v72;
      return 0;
    }
    return v72;
  }
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)this + 7), 0x40uLL, 0, a5, a6, a7, a8);
  if (SlowCase)
    goto LABEL_19;
  result = (unsigned __int8 *)110;
  __break(0xC471u);
  return result;
}

void JSC::temporalCalendarPrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  JSC::VM *v12;
  char v13;
  char **v14;
  char *v15;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::throwTypeError((unint64_t)this, &v12, (uint64_t)"Temporal.Calendar.prototype.toString called on value that's not a Calendar", 75);
  }
  else
  {
    v10 = atomic_load(&JSC::intlAvailableCalendars(void)::initializeOnce);
    if (v10 != -1)
    {
      v15 = &v13;
      v14 = &v15;
      std::__call_once(&JSC::intlAvailableCalendars(void)::initializeOnce, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableCalendars(void)::$_0 &&>>);
    }
    v11 = *(unsigned int *)(v9 + 16);
    if (dword_1EE34300C <= v11)
      __break(0xC471u);
    else
      JSC::jsString(v8, (JSC::VM *)(JSC::intlAvailableCalendars(void)::availableCalendars + 8 * v11), a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::temporalCalendarPrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalCalendar::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v11, (uint64_t)"Temporal.Calendar.prototype.toJSON called on value that's not a Calendar", 73);
  }
  else
  {
    return JSC::JSObject::toString(v9, this, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::temporalCalendarPrototypeFuncFields(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t result, uint64_t a2, JSC::JSGlobalObject *a3, uint64_t this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  JSC::MarkedVectorBase *v15;
  uint64_t v16;
  BOOL v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  JSC::VM *v23;
  _BYTE v24[24];
  uint64_t v25;

  v23 = (JSC::VM *)a2;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
    return JSC::throwTypeError((unint64_t)a3, &v23, (uint64_t)"fields include non string value", 32);
  v11 = result;
  if (*(_BYTE *)result || **(_BYTE **)(result + 8))
  {
LABEL_10:
    v13 = *(_QWORD *)(v11 + 16);
    v15 = (JSC::MarkedVectorBase *)(v13 + 8);
    v14 = *(unsigned int *)(v13 + 8);
    if (*(_DWORD *)(v13 + 8) == *(_DWORD *)(v13 + 12))
    {
      if (!(v14 >> 30))
      {
        result = JSC::MarkedVectorBase::expandCapacity(v15, 2 * (int)v14);
        if (!(_DWORD)result)
        {
          LODWORD(v14) = *(_DWORD *)v15;
          goto LABEL_25;
        }
      }
      *(_BYTE *)v13 = 1;
    }
    else
    {
      v16 = *(_QWORD *)(v13 + 16);
      if (v16 != v13 + 32 && v16 != 0)
      {
LABEL_25:
        *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v14) = this;
        *(_DWORD *)(v13 + 8) = v14 + 1;
        if (*(_QWORD *)(v13 + 24))
          v18 = 1;
        else
          v18 = this == 0;
        if (!v18)
        {
          v19 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v19 = (_QWORD *)(this - 16);
          v20 = (uint64_t *)(*v19 + 560);
          *(_QWORD *)(v13 + 24) = v20;
          v25 = v13 + 8;
          result = (uint64_t)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v20, &v25, this, a5, a6, a7, a8, (uint64_t)v24);
        }
        goto LABEL_17;
      }
      *(_QWORD *)(v16 + 8 * v14) = this;
      *(_DWORD *)v15 = v14 + 1;
    }
LABEL_17:
    if (**(_BYTE **)(v11 + 16))
      return JSC::throwStackOverflowError((unint64_t)a3, &v23, (uint64_t)a3, this, a5, a6, a7, a8);
    return result;
  }
  result = this + 8;
  if ((*(_BYTE *)(this + 8) & 1) != 0)
    result = (uint64_t)JSC::JSRopeString::resolveRope(this, a3, (uint64_t)a3, this, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(a2 + 80))
    goto LABEL_8;
  v21 = result;
  v22 = *(_DWORD *)(a2 + 80);
  if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  result = v21;
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_8:
    result = WTF::equalInternal<unsigned char>(*(_QWORD *)result, (unint64_t)"year", 4);
    if ((_DWORD)result)
      **(_BYTE **)(v11 + 8) = 1;
    goto LABEL_10;
  }
  return result;
}

uint64_t JSC::temporalCalendarPrototypeFuncMergeFields(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t SlowCase;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  __n128 v25;
  int v26;
  int v27;
  int v28;
  WTF *v29;
  uint64_t result;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  int v51;
  char v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;

  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(v10 + 15056);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    SlowCase = *(_QWORD *)(v11 + 24);
    if (SlowCase < *(_QWORD *)(v11 + 32))
    {
LABEL_3:
      *(_QWORD *)(v11 + 24) = SlowCase + v12;
      goto LABEL_4;
    }
    SlowCase = *(_QWORD *)(v11 + 40);
    if ((SlowCase & 1) == 0)
    {
      v45 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = SlowCase + HIDWORD(v45);
      *(_QWORD *)(v11 + 40) = SlowCase + (int)v45;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM(*(JSC **)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, v10 + 192, v12, 0, 0, v46, v47, v48);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x40uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v14 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v14 = 1;
  *((_QWORD *)v14 + 1) = (char *)v14 + 24;
  *((_QWORD *)v14 + 2) = 20;
  v56 = v14;
  v57 = 0;
  v58 = v10;
  v59 = 258;
  (*(void (**)(JSC::VM *, uint64_t, WTF **, _QWORD))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x78))(a2, a1, &v56, 0);
  if (*(_DWORD *)(v10 + 80))
  {
    v28 = *(_DWORD *)(v10 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_26:
      SlowCase = 0;
      goto LABEL_27;
    }
  }
  v22 = *((unsigned int *)v56 + 5);
  if ((_DWORD)v22)
  {
    v23 = (unint64_t *)*((_QWORD *)v56 + 1);
    v24 = 8 * v22;
    do
    {
      v17 = JSC::JSObject::get((unsigned int *)a2, a1, *v23, v17, v18, v19, v20, v21);
      if (*(_DWORD *)(v10 + 80))
      {
        v26 = *(_DWORD *)(v10 + 80);
        if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
        {
          v49 = v17;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
          v17 = v49;
        }
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_26;
      }
      if (v17 != 10)
      {
        v50[0] = 0;
        v50[1] = SlowCase;
        v51 = -1;
        v52 = v52 & 0xF8 | 1;
        v53 = 0;
        v54 = 1;
        v55 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)SlowCase, v10, *v23, v17, 0, (uint64_t)v50, v20, v21, v25);
        if (*(_DWORD *)(v10 + 80))
        {
          v27 = *(_DWORD *)(v10 + 80);
          if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
          if (*(_QWORD *)(v10 + 16))
            goto LABEL_26;
        }
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
LABEL_27:
  if (v57)
    WTF::fastFree(v57 - 16, v15, v16, v17, v18, v19, v20, v21);
  v29 = v56;
  v56 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
    {
      v31 = *((unsigned int *)v29 + 5);
      if ((_DWORD)v31)
      {
        v32 = (WTF::StringImpl **)*((_QWORD *)v29 + 1);
        v33 = 8 * v31;
        do
        {
          v34 = *v32;
          *v32 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          ++v32;
          v33 -= 8;
        }
        while (v33);
      }
      v43 = *((_QWORD *)v29 + 1);
      if ((WTF *)((char *)v29 + 24) != (WTF *)v43 && v43 != 0)
      {
        *((_QWORD *)v29 + 1) = 0;
        *((_DWORD *)v29 + 4) = 0;
        WTF::fastFree(v43, v15, v16, v17, v18, v19, v20, v21);
      }
      WTF::fastFree((unint64_t)v29, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      --*(_DWORD *)v29;
    }
  }
  return SlowCase;
}

void WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,unsigned int>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,unsigned int,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t i;
  unsigned __int8 *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  BOOL v29;
  uint64_t v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(12 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_DWORD *)(v7 + 24);
    do
    {
      *((_QWORD *)v16 - 1) = 0xFFFFFFFF00000000;
      *v16 = 0;
      v16 += 3;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (unsigned __int8 *)(v4 + 12 * i);
      v19 = *((_DWORD *)v18 + 1);
      if (*v18)
        v20 = 1;
      else
        v20 = (v19 + 1) >= 2;
      if (v20)
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 8);
        else
          v22 = 0;
        v23 = 0;
        v24 = v19 + (*v18 << 20) + ~(v19 << 15);
        v25 = (9 * (v24 ^ (v24 >> 10))) ^ ((9 * (v24 ^ (v24 >> 10))) >> 6);
        v26 = (v25 + ~(v25 << 11)) ^ ((v25 + ~(v25 << 11)) >> 16);
        do
        {
          v27 = v26 & v22;
          v28 = (unsigned __int8 *)(v21 + 12 * v27);
          v8 = (void *)*v28;
          v9 = *((unsigned int *)v28 + 1);
          v26 = ++v23 + v27;
          if (*v28)
            v29 = 0;
          else
            v29 = (_DWORD)v9 == -1;
        }
        while (!v29);
        v30 = *(_QWORD *)v18;
        *((_DWORD *)v28 + 2) = *((_DWORD *)v18 + 2);
        *(_QWORD *)v28 = v30;
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

WTF::StringImpl **WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> const&,long &>(WTF::StringImpl **result, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *((_DWORD *)*a3 + 4);
  if ((v16 & 0x20) != 0)
    v16 = *((_DWORD *)v15 + 8);
  v17 = v14 & (v16 >> 8);
  v18 = (WTF::StringImpl **)(v12 + 16 * v17);
  v19 = *v18;
  if (!*v18)
    goto LABEL_15;
  v20 = 0;
  v21 = 1;
  do
  {
    if (v19 == v15)
    {
      if ((v13 & 1) != 0)
        v30 = 0;
      else
        v30 = *(unsigned int *)(v12 - 4);
      *v11 = (WTF::StringImpl *)v18;
      v11[1] = (WTF::StringImpl *)(v12 + 16 * v30);
      *((_BYTE *)v11 + 16) = 0;
      v18[1] = *a4;
      return result;
    }
    if (v19 == (WTF::StringImpl *)-1)
      v20 = v18;
    v17 = (v17 + v21) & v14;
    v18 = (WTF::StringImpl **)(v12 + 16 * v17);
    v19 = *v18;
    ++v21;
  }
  while (*v18);
  if (v20)
  {
    *v20 = 0;
    v20[1] = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = *a3;
    v18 = v20;
  }
  if (v15)
LABEL_15:
    *(_DWORD *)v15 += 2;
  v22 = *a4;
  *v18 = v15;
  v18[1] = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
      goto LABEL_23;
  }
  else if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
LABEL_29:
      result = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, v29, (uint64_t)v18, (uint64_t)a4, a5, a6, a7, a8);
      v18 = result;
      v25 = *a2;
      if (*a2)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_29;
  }
LABEL_31:
  *v11 = (WTF::StringImpl *)v18;
  v11[1] = (WTF::StringImpl *)(v25 + 16 * v28);
  *((_BYTE *)v11 + 16) = 1;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,long,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != (WTF::StringImpl *)-1)
      {
        if (v25)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = *((_DWORD *)v25 + 4);
          if ((v28 & 0x20) != 0)
            v28 = *((_DWORD *)v25 + 8);
          v29 = 0;
          v30 = v28 >> 8;
          do
          {
            v31 = v30 & v27;
            v30 = ++v29 + v31;
          }
          while (*(_QWORD *)(v26 + 16 * v31));
          v32 = (WTF::StringImpl **)(v26 + 16 * v31);
          v33 = *(WTF::StringImpl **)(v11 + 16 * v22 + 8);
          *v32 = 0;
          v34 = *v24;
          *v24 = 0;
          *v32 = v34;
          v32[1] = v33;
          v35 = *v24;
          *v24 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v32;
        }
        else
        {
          *v24 = 0;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::inlineSet<JSC::VarOffset const&,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>&>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *((_DWORD *)a3 + 1);
  v17 = 9 * ((v16 + (v15 << 20) + ~(v16 << 15)) ^ ((v16 + (v15 << 20) + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v14;
  v20 = (unsigned __int8 *)(v12 + 16 * v19);
  v21 = *v20;
  v22 = *v20 == 0;
  v23 = *((_DWORD *)v20 + 1);
  if (*v20)
    v24 = 0;
  else
    v24 = v23 == -1;
  if (v24)
  {
LABEL_20:
    *(_QWORD *)v20 = *(_QWORD *)a3;
    v28 = (_DWORD *)*a4;
    if (*a4)
      *v28 += 2;
    v29 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    v30 = *a2;
    if (*a2)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v32 = *a2;
    if (*a2)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 <= 2 * v34)
        goto LABEL_32;
    }
    else if (3 * v35 <= 4 * v34)
    {
      if (!(_DWORD)v35)
      {
        v36 = 8;
LABEL_42:
        v20 = (unsigned __int8 *)WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash(a2, v36, v20);
        v32 = *a2;
        if (*a2)
          v35 = *(unsigned int *)(v32 - 4);
        else
          v35 = 0;
        goto LABEL_44;
      }
LABEL_32:
      v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
      goto LABEL_42;
    }
LABEL_44:
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v32 + 16 * v35;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v25 = 0;
  v26 = 1;
  while (v21 != v15 || v23 != v16)
  {
    if (v22 && v23 == 0)
      v25 = v20;
    v19 = (v19 + v26) & v14;
    v20 = (unsigned __int8 *)(v12 + 16 * v19);
    v21 = *v20;
    v22 = *v20 == 0;
    v23 = *((_DWORD *)v20 + 1);
    ++v26;
    if (*v20)
      v27 = 0;
    else
      v27 = v23 == -1;
    if (v27)
    {
      if (v25)
      {
        *(_QWORD *)v25 = 0xFFFFFFFF00000000;
        *((_QWORD *)v25 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        v20 = v25;
      }
      goto LABEL_20;
    }
  }
  if ((v13 & 1) != 0)
    v37 = 0;
  else
    v37 = *(unsigned int *)(v12 - 4);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v12 + 16 * v37;
  *(_BYTE *)(a1 + 16) = 0;
  v38 = (_DWORD *)*a4;
  if (*a4)
    *v38 += 2;
  v39 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
}

uint64_t WTF::HashTable<JSC::VarOffset,WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashMap<JSC::VarOffset,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::DefaultHash<JSC::VarOffset>,WTF::HashTraits<JSC::VarOffset>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::VarOffset>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *(v18 - 1) = 0xFFFFFFFF00000000;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (unsigned __int8 *)(v6 + 16 * v19);
      v22 = *((_DWORD *)v21 + 1);
      if (*v21)
        v23 = 0;
      else
        v23 = v22 == 0;
      if (!v23)
      {
        if (*v21)
          v24 = 0;
        else
          v24 = v22 == -1;
        if (v24)
        {
          v27 = v6 + 16 * v19;
          v28 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::~StringImpl(v28, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
            }
            else
            {
              *(_DWORD *)v28 -= 2;
            }
          }
        }
        else
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v29 = 0;
          v30 = v22 + (*v21 << 20) + ~(v22 << 15);
          v31 = (9 * (v30 ^ (v30 >> 10))) ^ ((9 * (v30 ^ (v30 >> 10))) >> 6);
          v32 = (v31 + ~(v31 << 11)) ^ ((v31 + ~(v31 << 11)) >> 16);
          do
          {
            v33 = v32 & v26;
            v34 = v25 + 16 * v33;
            v32 = ++v29 + v33;
            if (*(_BYTE *)v34)
              v35 = 0;
            else
              v35 = *(_DWORD *)(v34 + 4) == -1;
          }
          while (!v35);
          v36 = v25 + 16 * v33;
          v39 = *(WTF::StringImpl **)(v36 + 8);
          v38 = (_QWORD *)(v36 + 8);
          v37 = v39;
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)v37 == 2)
            {
              WTF::StringImpl::~StringImpl(v37, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
            }
            else
            {
              *(_DWORD *)v37 -= 2;
            }
          }
          *(_QWORD *)v34 = *(_QWORD *)v21;
          v40 = v6 + 16 * v19;
          v41 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          *v38 = v41;
          v42 = *(WTF::StringImpl **)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
            {
              WTF::StringImpl::~StringImpl(v42, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
            else
            {
              *(_DWORD *)v42 -= 2;
            }
          }
          if (v21 == a3)
            v20 = v34;
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> const&,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>&>(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  WTF *v35;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *(WTF::StringImpl **)a3;
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *((_DWORD *)v15 + 8);
  v17 = v14 & (v16 >> 8);
  v18 = (WTF::StringImpl **)(v12 + 16 * v17);
  v19 = *v18;
  if (*v18)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        *(_QWORD *)a1 = v18;
        *(_QWORD *)(a1 + 8) = v12 + 16 * v32;
        *(_BYTE *)(a1 + 16) = 0;
        v33 = *a4;
        if (*a4)
        {
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
        }
        v35 = v18[1];
        v18[1] = (WTF::StringImpl *)v33;
        if (v35)
          WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v35, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        return;
      }
      if (v19 == (WTF::StringImpl *)-1)
        v20 = v18;
      v17 = (v17 + v21) & v14;
      v18 = (WTF::StringImpl **)(v12 + 16 * v17);
      v19 = *v18;
      ++v21;
    }
    while (*v18);
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *(WTF::StringImpl **)a3;
      v18 = v20;
    }
    if (!v15)
      goto LABEL_16;
  }
  *(_DWORD *)v15 += 2;
LABEL_16:
  *v18 = v15;
  v22 = *a4;
  if (*a4)
  {
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v18[1];
  v18[1] = (WTF::StringImpl *)v22;
  if (v24)
    WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v24, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
      goto LABEL_27;
  }
  else if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v31 = 8;
LABEL_36:
      v18 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, v31, (uint64_t)v18, (uint64_t)a4, a5, a6, a7, a8);
      v27 = *a2;
      if (*a2)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
      goto LABEL_38;
    }
LABEL_27:
    v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
    goto LABEL_36;
  }
LABEL_38:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v27 + 16 * v30;
  *(_BYTE *)(a1 + 16) = 1;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::TypeSet,WTF::RawPtrTraits<JSC::TypeSet>,WTF::DefaultRefDerefTraits<JSC::TypeSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != (WTF::StringImpl *)-1)
      {
        if (v25)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = *((_DWORD *)v25 + 4);
          if ((v30 & 0x20) != 0)
            v30 = *((_DWORD *)v25 + 8);
          v31 = 0;
          v32 = v30 >> 8;
          do
          {
            v33 = v32 & v29;
            v32 = ++v31 + v33;
          }
          while (*(_QWORD *)(v28 + 16 * v33));
          v34 = (WTF::StringImpl **)(v28 + 16 * v33);
          v35 = v34[1];
          v34[1] = 0;
          if (v35)
          {
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v35, v15, v16, v17, v18, v19, v20, v21);
            v36 = *v34;
            *v34 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
              {
                WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
              }
              else
              {
                *(_DWORD *)v36 -= 2;
              }
            }
          }
          else
          {
            *v34 = 0;
          }
          v37 = *v24;
          *v24 = 0;
          *v34 = v37;
          v38 = v11 + 16 * v22;
          v39 = *(WTF::StringImpl **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          v34[1] = v39;
          v40 = *(WTF **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v40)
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v40, v15, v16, v17, v18, v19, v20, v21);
          v41 = *v24;
          *v24 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
            {
              WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
            }
            else
            {
              *(_DWORD *)v41 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v34;
        }
        else
        {
          v26 = v11 + 16 * v22;
          v27 = *(WTF **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v27, v15, v16, v17, v18, v19, v20, v21);
            v25 = *v24;
          }
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

JSC::Exception *JSC::callTemporalDuration(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Duration", 9);
}

unint64_t JSC::constructTemporalDuration(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  unint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *j;
  JSC::JSObject *v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  double v26;
  int v28;
  JSC::Exception *v29;
  uint64_t v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t (*v60)(__int128 *);
  _QWORD *v61;
  uint64_t (*v62)(__int128 *);
  _QWORD *v63;
  uint64_t (*v64)(_QWORD *);
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  JSC::JSObject *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD v75[4];

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(_QWORD *)(this + 424);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v62 = *(uint64_t (**)(__int128 *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v63 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v63 = (_QWORD *)(this - 16);
    *(_QWORD *)&v70 = *v63;
    *((_QWORD *)&v70 + 1) = this;
    *(_QWORD *)&v71 = this + 424;
    SubclassStructure = (JSC::JSObject *)v62(&v70);
  }
  else
  {
    *(_QWORD *)&v70 = *(_QWORD *)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, (JSC::VM **)&v70, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v59 = *(_DWORD *)(v10 + 80);
      if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 424);
    if ((v15 & 1) != 0)
    {
      v60 = *(uint64_t (**)(__int128 *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v61 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v61 = (_QWORD *)(v14 - 16);
      *(_QWORD *)&v70 = *v61;
      *((_QWORD *)&v70 + 1) = v14;
      *(_QWORD *)&v71 = v14 + 424;
      v15 = v60(&v70);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_16;
LABEL_15:
  v58 = *(_DWORD *)(v10 + 80);
  if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_16:
  v67 = this;
  v18 = 0uLL;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v70 = 0u;
  if ((unint64_t)(*((int *)a2 + 8) - 1) >= 0xA)
    v19 = 10;
  else
    v19 = *((int *)a2 + 8) - 1;
  if (!v19)
    return JSC::TemporalDuration::tryCreateIfValid(v67, (JSC::ISO8601 *)&v70, v17);
  v20 = 0x600000000;
  for (j = &v70; ; j = (__int128 *)((char *)j + 8))
  {
    v22 = *(JSC::JSObject **)((char *)a2 + (v20 >> 29));
    v69 = v22;
    if (v22 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v22 >= 0xFFFE000000000000)
      {
        *(double *)v18.i64 = (double)(int)v22;
      }
      else
      {
        v23 = (unint64_t)v22 - 0x2000000000000;
        if (v23 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v69, (JSC::JSGlobalObject *)v67, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
        else
          v18.i64[0] = v23;
      }
      *(double *)v18.i64 = *(double *)v18.i64 + 0.0;
      *(_QWORD *)j = v18.i64[0];
      if (*(_DWORD *)(v10 + 80))
      {
        v28 = *(_DWORD *)(v10 + 80);
        if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
        {
          v66 = v18.i64[0];
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v18.i64[0] = v66;
        }
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      v24 = ((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      v25 = !v24 || v18.i64[0] == 0;
      v26 = trunc(*(double *)v18.i64);
      if (!v25 || v26 != *(double *)v18.i64)
        break;
    }
    v20 += 0x100000000;
    if (!--v19)
      return JSC::TemporalDuration::tryCreateIfValid(v67, (JSC::ISO8601 *)&v70, v17);
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x2D00000002;
  *(_QWORD *)(v31 + 8) = "Temporal.Duration properties must be integers";
  *(_DWORD *)(v31 + 16) = 4;
  v68 = (WTF::StringImpl *)v31;
  v32 = *(_QWORD *)(v67 + 128);
  v33 = *(JSC::Heap ***)(v67 + 56);
  if ((v32 & 1) != 0)
  {
    v64 = *(uint64_t (**)(_QWORD *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v67 & 8) != 0)
      v65 = (_QWORD *)(v67 - 16);
    else
      v65 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
    v75[0] = *v65;
    v75[1] = v67;
    v75[2] = v67 + 128;
    v32 = v64(v75);
  }
  v34 = JSC::ErrorInstance::create(v33, v32, &v68, 0, 0, 0, 2, 1);
  v41 = (JSC::Exception *)v34;
  if ((v34 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
  {
    v41 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
  }
  v29 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v67, v41, v40, v35, v36, v37, v38, v39);
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  return (unint64_t)v29;
}

unint64_t JSC::TemporalDurationPrototype::create(JSC::TemporalDurationPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1100000002;
  *(_QWORD *)(v13 + 8) = "Temporal.Duration";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalDurationPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalDurationPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::temporalDurationPrototypeGetterYears(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.years called on value that's not a Duration", 72);
  }
  v2 = *(double *)(a2 + 16);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterMonths(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.months called on value that's not a Duration", 73);
  }
  v2 = *(double *)(a2 + 24);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterWeeks(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.weeks called on value that's not a Duration", 72);
  }
  v2 = *(double *)(a2 + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterDays(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.days called on value that's not a Duration", 71);
  }
  v2 = *(double *)(a2 + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterHours(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.hours called on value that's not a Duration", 72);
  }
  v2 = *(double *)(a2 + 48);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterMinutes(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.minutes called on value that's not a Duration", 74);
  }
  v2 = *(double *)(a2 + 56);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterSeconds(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.seconds called on value that's not a Duration", 74);
  }
  v2 = *(double *)(a2 + 64);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterMilliseconds(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.milliseconds called on value that's not a Duration", 79);
  }
  v2 = *(double *)(a2 + 72);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterMicroseconds(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.microseconds called on value that's not a Duration", 79);
  }
  v2 = *(double *)(a2 + 80);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterNanoseconds(unint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.Duration.prototype.nanoseconds called on value that's not a Duration", 78);
  }
  v2 = *(double *)(a2 + 88);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t JSC::temporalDurationPrototypeGetterSign(unint64_t a1, const Duration *a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.Duration.prototype.sign called on value that's not a Duration", 71);
  }
  else
  {
    return JSC::TemporalDuration::sign((JSC::TemporalDuration *)(a2 + 4), a2) | 0xFFFE000000000000;
  }
}

uint64_t JSC::temporalDurationPrototypeGetterBlank(unint64_t a1, const Duration *a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.Duration.prototype.blank called on value that's not a Duration", 72);
  }
  if (JSC::TemporalDuration::sign((JSC::TemporalDuration *)(a2 + 4), a2))
    return 6;
  return 7;
}

uint64_t JSC::TemporalInstant::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalInstant::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::TemporalInstant::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  unint64_t result;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = *(_QWORD **)(a1 + 40824);
  if (!v12)
    v12 = (_QWORD *)JSC::GCClient::Heap::temporalInstantSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v12[3];
  if (result < v12[4])
    goto LABEL_4;
  result = v12[5];
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(result + 8) ^ v12[6];
    v12[4] = result + HIDWORD(v15);
    v12[5] = result + (int)v15;
LABEL_4:
    v12[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, a1 + 192, 32, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)result = 0;
  v14 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v14;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 8) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::TemporalInstant::tryCreateIfValid(unint64_t a1, uint64_t a2, __int128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v10;
  unint64_t v11;
  BOOL v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::Heap **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  JSC::Exception *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(unint64_t *);
  uint64_t *v93;
  uint64_t (*v94)(unint64_t *);
  uint64_t *v95;
  int8x16_t v96;
  WTF::StringImpl *v97;
  _QWORD *v98;

  v7 = a3;
  v8 = a2;
  v10 = *(JSC::VM **)(a1 + 56);
  if (__PAIR128__(__CFADD__(a2, 0x60162F516F000000) + (unint64_t)a3 + 468, a2 + 0x60162F516F000000) >= __PAIR128__(936, 0xC02C5EA2DE000001))
  {
    v96.i64[1] = 0;
    v97 = 0;
    LODWORD(v98) = 0;
    BYTE4(v98) = 1;
    if ((a3 & 0x8000000000000000) != 0)
    {
      v96.i8[0] = 45;
      WTF::StringBuilder::append((uint64_t)&v96.i64[1], &v96, 1uLL, *((uint64_t *)&a3 + 1), a4, a5, a6, a7);
      v12 = v8 == 0;
      v8 = -v8;
      v7 = -(v7 + !v12);
    }
    *(_QWORD *)&a3 = v7;
    JSC::ISO8601::ExactTime::asStringImpl((JSC::ISO8601::ExactTime *)&v96.u64[1], (WTF::StringBuilder *)v8, a3);
    v20 = v96.i64[1];
    if (v96.i64[1])
      goto LABEL_7;
    if ((v98 & 0x80000000) == 0
      && v97
      && *((_DWORD *)v97 + 1) > v98 + (v98 >> 2))
    {
      if ((*((_BYTE *)v97 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v96.i64[1], (WTF::AtomStringImpl *)v98, v14, v15, v16, v17, v18, v19);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v96.i64[1], (WTF::AtomStringImpl *)v98, v14, v15, v16, v17, v18, v19);
      v83 = (WTF::StringImpl *)v96.i64[1];
      v96.i64[1] = (uint64_t)v97;
      v97 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
        {
          WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        }
        else
        {
          *(_DWORD *)v83 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v96.u64[1]);
    v20 = v96.i64[1];
    if (v96.i64[1])
LABEL_7:
      *(_DWORD *)v20 += 2;
    v21 = v97;
    v97 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    v22 = (WTF::StringImpl *)v96.i64[1];
    v96.i64[1] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        if (v20)
          goto LABEL_15;
        goto LABEL_21;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v20)
    {
LABEL_15:
      v23 = *(_DWORD *)(v20 + 4);
      if (v23 < 0 || (v24 = (v23 + 69), __OFADD__(v23, 69)))
      {
        v96.i64[0] = 0;
        goto LABEL_58;
      }
      if ((*(_BYTE *)(v20 + 16) & 4) == 0)
      {
        v25 = 0;
        goto LABEL_23;
      }
LABEL_22:
      v25 = 1;
LABEL_23:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v24, v25, v20, (int8x16_t *)" epoch nanoseconds is outside of supported range for Temporal.Instant", 0x45u, (int **)&v96);
      if (v96.i64[0])
      {
        v42 = *(_QWORD *)(a1 + 128);
        v43 = *(JSC::Heap ***)(a1 + 56);
        if ((v42 & 1) != 0)
        {
          v94 = *(uint64_t (**)(unint64_t *))(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v95 = (uint64_t *)(a1 - 16);
          else
            v95 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          v96.i64[1] = *v95;
          v97 = (WTF::StringImpl *)a1;
          v98 = (_QWORD *)(a1 + 128);
          v42 = v94(&v96.u64[1]);
        }
        v44 = JSC::ErrorInstance::create(v43, v42, (WTF::StringImpl **)&v96, 0, 0, 0, 2, 1);
        v51 = (JSC::Exception *)v44;
        if ((v44 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)))
        {
          v51 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)v44, 0, v45, v46, v47, v48, v49);
        }
        JSC::VM::throwException(v10, (JSC::JSGlobalObject *)a1, v51, v50, v45, v46, v47, v48, v49);
        v59 = (WTF::StringImpl *)v96.i64[0];
        v96.i64[0] = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
          {
            WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
            WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
            if (!v20)
              return;
            goto LABEL_31;
          }
          *(_DWORD *)v59 -= 2;
        }
        if (!v20)
          return;
LABEL_31:
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v52, v53, v54, v55, v56, v57, v58);
          WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
        return;
      }
LABEL_58:
      __break(0xC471u);
      return;
    }
LABEL_21:
    v24 = 69;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(a1 + 432);
  if ((v11 & 1) != 0)
  {
    v92 = *(uint64_t (**)(unint64_t *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v93 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v93 = (uint64_t *)(a1 - 16);
    v96.i64[1] = *v93;
    v97 = (WTF::StringImpl *)a1;
    v98 = (_QWORD *)(a1 + 432);
    v11 = v92(&v96.u64[1]);
  }
  JSC::TemporalInstant::create((uint64_t)v10, (JSC::VM *)v11, v8, v7, a4, a5, a6, a7);
}

unint64_t JSC::TemporalInstant::tryCreateIfValid(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  _DWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t (*v56)(WTF::StringImpl **);
  WTF::StringImpl **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  JSC::Heap **v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  JSC::Exception *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(WTF::StringImpl **);
  WTF::StringImpl **v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  JSC::Structure *v109;
  WTF::StringImpl *v110;
  JSC::JSGlobalObject *v111;
  _QWORD *v112;

  v9 = a3;
  v109 = a2;
  v11 = *((_QWORD *)a1 + 7);
  JSC::JSValue::toBigInt(&v109, a1, a3, a4, a5, a6, a7, a8, a9);
  v20 = v12;
  if (*(_DWORD *)(v11 + 80))
  {
    v55 = *(_DWORD *)(v11 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
    {
      v105 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v20 = v105;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = *(_DWORD *)(v20 + 8);
  if (v21 >= 2)
  {
    v22 = *(_QWORD *)(v20 + 24);
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        if ((*(_QWORD *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8) & 0x8000000000000000) != 0)
          goto LABEL_25;
      }
      else
      {
        if (disablePrimitiveGigacageRequested)
        {
          if ((*(_QWORD *)(v22 + 8) & 0x8000000000000000) != 0)
            goto LABEL_25;
        }
        else if ((*(_QWORD *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8) & 0x8000000000000000) != 0)
        {
          goto LABEL_25;
        }
        if (disablePrimitiveGigacageRequested)
          goto LABEL_7;
      }
      v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    }
    else if ((*(_QWORD *)(v22 + 8) & 0x8000000000000000) != 0)
    {
      goto LABEL_25;
    }
LABEL_7:
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    goto LABEL_13;
  }
  if (v21)
  {
    v25 = *(uint64_t **)(v20 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    {
      v23 = 0;
      v24 = *(_QWORD *)(((unint64_t)v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
    }
    else
    {
      v23 = 0;
      v24 = *v25;
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
LABEL_13:
  v26 = (unsigned __int128)-(__int128)__PAIR128__(v19, v24) >> 64;
  if (*(_BYTE *)(v20 + 16))
    v27 = v26;
  else
    v27 = v23;
  if (*(_BYTE *)(v20 + 16))
    v28 = -v24;
  else
    v28 = v24;
  if (v21 > 2
    || __PAIR128__((unint64_t)__CFADD__(v28, 0x60162F516F000000) + v27 + 468, v28 + 0x60162F516F000000) >= __PAIR128__(936, 0xC02C5EA2DE000001))
  {
    if (!v21)
    {
      if (*(_BYTE *)(*((_QWORD *)a1 + 7) + 44265))
      {
        v30 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)a1 + 7) + 42600) + 8);
        if ((v30 & 1) != 0)
          v31 = 0;
        else
          v31 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)a1 + 7) + 42600) + 8);
        *v31 += 2;
      }
      else
      {
        LOBYTE(v107) = 48;
        WTF::AtomStringImpl::add((uint64_t)&v107, 1uLL, v27, v15, v16, v17, v18, &v110);
        v30 = v110;
      }
      v108 = v30;
LABEL_32:
      if (*(_QWORD *)(v11 + 16))
      {
        v32 = (unsigned int *)(v11 + 80);
        *(_QWORD *)(v11 + 16) = 0;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 & 0xFFFFFFEF, v32));
        v41 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v41 = 0x1300000002;
        *(_QWORD *)(v41 + 8) = "The given number of";
        *(_DWORD *)(v41 + 16) = 4;
        v42 = v108;
        v108 = (WTF::StringImpl *)v41;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
      }
      JSC::ellipsizeAt(100, &v108, &v106);
      v43 = (WTF::StringImpl *)v106;
      if (v106)
      {
        v44 = *(_DWORD *)(v106 + 4);
        if (v44 < 0 || (v45 = (v44 + 73), __OFADD__(v44, 73)))
        {
          v107 = 0;
          goto LABEL_87;
        }
        if ((*(_BYTE *)(v106 + 16) & 4) == 0)
        {
          v46 = 0;
          goto LABEL_55;
        }
      }
      else
      {
        v45 = 73;
      }
      v46 = 1;
LABEL_55:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v45, v46, v106, (int8x16_t *)" epoch nanoseconds is outside of the supported range for Temporal.Instant", 0x49u, (int **)&v107);
      if (v107)
      {
        v61 = *((_QWORD *)a1 + 16);
        v62 = (JSC::Heap **)*((_QWORD *)a1 + 7);
        if ((v61 & 1) != 0)
        {
          v103 = *(uint64_t (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v104 = (WTF::StringImpl **)((char *)a1 - 16);
          else
            v104 = (WTF::StringImpl **)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
          v110 = *v104;
          v111 = a1;
          v112 = (_QWORD *)((char *)a1 + 128);
          v61 = v103(&v110);
        }
        v63 = JSC::ErrorInstance::create(v62, v61, &v107, 0, 0, 0, 2, 1);
        v70 = (JSC::Exception *)v63;
        if ((v63 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x4C)))
        {
          v70 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v63, 0, v64, v65, v66, v67, v68);
        }
        JSC::VM::throwException((JSC::VM *)v11, a1, v70, v69, v64, v65, v66, v67, v68);
        v78 = v107;
        v107 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
            if (!v43)
              goto LABEL_65;
            goto LABEL_63;
          }
          *(_DWORD *)v78 -= 2;
        }
        if (!v43)
          goto LABEL_65;
LABEL_63:
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl(v43, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
LABEL_65:
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
          {
            WTF::StringImpl::~StringImpl(v108, v71, v72, v73, v74, v75, v76, v77);
            WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
          }
          else
          {
            *(_DWORD *)v108 -= 2;
          }
        }
        return 0;
      }
LABEL_87:
      __break(0xC471u);
      JUMPOUT(0x198C07804);
    }
LABEL_25:
    JSC::JSBigInt::toStringGeneric(*((JSC::JSBigInt **)a1 + 7), a1, (JSC::JSGlobalObject *)v20, 10, v15, v16, v17, v18, (int **)&v108);
    goto LABEL_32;
  }
  if (!v9)
  {
    v9 = *((_QWORD *)a1 + 54);
    if ((v9 & 1) != 0)
    {
      v56 = *(uint64_t (**)(WTF::StringImpl **))(v9 & 0xFFFFFFFFFFFFFFFCLL);
      v57 = (WTF::StringImpl **)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v57 = (WTF::StringImpl **)((char *)a1 - 16);
      v110 = *v57;
      v111 = a1;
      v112 = (_QWORD *)((char *)a1 + 432);
      v58 = v27;
      v59 = v28;
      v60 = v56(&v110);
      v28 = v59;
      v27 = v58;
      v9 = v60;
    }
  }
  return JSC::TemporalInstant::create(v11, (JSC::VM *)v9, v28, v27, v15, v16, v17, v18);
}

uint64_t JSC::ellipsizeAt@<X0>(uint64_t this@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int8x16_t *v10;
  _WORD *v11;
  char *v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  _DWORD *v22;
  int8x16x2_t v23;
  int8x16x2_t v24;
  int8x16x2_t v25;

  v5 = (_DWORD *)*a2;
  if (!*a2)
    goto LABEL_23;
  v6 = v5[1];
  if (v6 <= this)
  {
    *v5 += 2;
LABEL_23:
    *a3 = v5;
    return this;
  }
  if (v6 >= (int)this - 1)
    v7 = (this - 1);
  else
    v7 = v6;
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v7 + 1;
    if (!__OFADD__((_DWORD)v7, 1) && v8 <= 0x7FFFFFEF)
    {
      v9 = v5[4];
      v10 = (int8x16_t *)*((_QWORD *)v5 + 1);
      this = WTF::tryFastCompactMalloc((WTF *)(2 * (v7 + 1) + 20), &v22);
      v5 = v22;
      if (v22)
      {
        v11 = v22 + 5;
        *v22 = 2;
        v5[1] = v8;
        *((_QWORD *)v5 + 1) = v5 + 5;
        v5[4] = 0;
        if ((v9 & 4) != 0)
        {
          if (v7 >= 0x40)
          {
            v12 = (char *)&v11[v7 & 0xFFFFFFC0];
            v13 = 0uLL;
            v14 = (char *)(v5 + 5);
            do
            {
              v23.val[0] = *v10;
              v15 = v10[1];
              v24.val[0] = v10[2];
              v16 = v10[3];
              v10 += 4;
              v17 = v16;
              v24.val[1] = 0uLL;
              v25.val[0] = v15;
              v23.val[1] = 0uLL;
              v18 = v14;
              vst2q_s8(v18, v23);
              v18 += 32;
              v25.val[1] = 0uLL;
              vst2q_s8(v18, v25);
              v19 = v14 + 64;
              vst2q_s8(v19, v24);
              v20 = v14 + 96;
              vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
              v14 += 128;
            }
            while (v14 != v12);
          }
          else
          {
            v12 = (char *)(v5 + 5);
          }
          while (v12 != (char *)&v11[v7])
          {
            v21 = v10->u8[0];
            v10 = (int8x16_t *)((char *)v10 + 1);
            *(_WORD *)v12 = v21;
            v12 += 2;
          }
        }
        else if ((_DWORD)v7 == 1)
        {
          *v11 = v10->i16[0];
        }
        else if ((_DWORD)v7)
        {
          this = (uint64_t)memcpy(v5 + 5, v10, 2 * v7);
        }
        v11[v7] = 8230;
        goto LABEL_23;
      }
    }
  }
  *a3 = 0;
  __break(0xC471u);
  return this;
}

unint64_t JSC::TemporalInstant::toInstant(unint64_t a1, unint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  int *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  BOOL v25;
  int v26;
  _BOOL4 v27;
  unint64_t v28;
  JSC::Heap **v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  JSC::Exception *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t (*v66)(_QWORD *);
  _QWORD *v67;
  JSC::Heap **v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  JSC::VM *v72;
  unint64_t v73;
  _QWORD v74[3];
  uint64_t v75[2];
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 56);
  v72 = (JSC::VM *)v10;
  v73 = a2;
  if ((a2 & 0xFFFE000000000002) != 0
    || ((v11 = a2, v12 = *(unsigned __int8 *)(a2 + 5), v12 <= 0x16) ? (v13 = v12 == 2) : (v13 = 1), !v13))
  {
    JSC::throwTypeError(a1, &v72, (uint64_t)"can only convert to Instant from object or string values", 57);
    return 0;
  }
  if (&JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    if (v12 != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v73, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, (int **)&v71);
      goto LABEL_13;
    }
    v14 = *(int **)(a2 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v14)
        goto LABEL_12;
    }
    else if (!v14)
    {
LABEL_12:
      v71 = (WTF::StringImpl *)v14;
LABEL_13:
      if (*(_DWORD *)(v10 + 80))
      {
        v65 = *(_DWORD *)(v10 + 80);
        if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_36;
      }
      if (v71)
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v71 + 1);
        v16 = *((unsigned int *)v71 + 1) | ((unint64_t)((*((_DWORD *)v71 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v15 = 0;
        v16 = 0x100000000;
      }
      JSC::ISO8601::parseInstant(v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8, v75);
      if (v76)
      {
        *(_QWORD *)&v17 = v75[1];
        JSC::TemporalInstant::tryCreateIfValid(a1, v75[0], v17, v18, v19, v20, v21);
        v11 = v22;
        goto LABEL_37;
      }
      JSC::ellipsizeAt(100, &v71, &v69);
      v23 = (WTF::StringImpl *)v69;
      if (v69)
      {
        v24 = *(_DWORD *)(v69 + 4);
        if (v24 < 0)
          goto LABEL_59;
      }
      else
      {
        v24 = 0;
      }
      v25 = __OFADD__(v24, 40);
      v26 = v24 + 40;
      if (!v25 && !__OFADD__(v26, 1))
      {
        v27 = !v69 || (*(_BYTE *)(v69 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v26 + 1), v27, (int8x16_t *)"'", 1u, v69, (int8x16_t *)"' is not a valid Temporal.Instant string", 0x28u, (int **)&v70);
        if (v70)
        {
          v28 = *(_QWORD *)(a1 + 128);
          v29 = *(JSC::Heap ***)(a1 + 56);
          if ((v28 & 1) != 0)
          {
            v68 = *(JSC::Heap ***)(a1 + 56);
            v66 = *(uint64_t (**)(_QWORD *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v67 = (_QWORD *)(a1 - 16);
            else
              v67 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            v74[0] = *v67;
            v74[1] = a1;
            v74[2] = a1 + 128;
            v28 = v66(v74);
            v29 = v68;
          }
          v30 = JSC::ErrorInstance::create(v29, v28, &v70, 0, 0, 0, 2, 1);
          v37 = (JSC::Exception *)v30;
          if ((v30 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C)))
          {
            v37 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v30, 0, v31, v32, v33, v34, v35);
          }
          JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v37, v36, v31, v32, v33, v34, v35);
          v38 = v70;
          v70 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              WTF::StringImpl::~StringImpl(v38, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
              if (v23)
              {
LABEL_34:
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
                }
                else
                {
                  *(_DWORD *)v23 -= 2;
                }
              }
LABEL_36:
              v11 = 0;
LABEL_37:
              v39 = v71;
              v71 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
              return v11;
            }
            *(_DWORD *)v38 -= 2;
          }
          if (v23)
            goto LABEL_34;
          goto LABEL_36;
        }
LABEL_60:
        __break(0xC471u);
        JUMPOUT(0x198C07CD4);
      }
LABEL_59:
      v70 = 0;
      goto LABEL_60;
    }
    *v14 += 2;
    goto LABEL_12;
  }
  return v11;
}

double JSC::TemporalInstant::difference(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  unsigned __int8 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  JSC::Heap **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  JSC::Exception *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  double result;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(JSC::VM **);
  JSC::VM **v85;
  int v86;
  int v87;
  __int16 v88;
  double v89;
  WTF::StringImpl *v90;
  JSC::VM *v91;
  uint64_t v92;
  unint64_t v93;
  const char *v94;
  uint64_t v95;
  char v96;
  const char *v97;
  uint64_t v98;
  char v99;
  const char *v100;
  uint64_t v101;
  char v102;
  const char *v103;
  uint64_t v104;
  char v105;
  const char *v106;
  uint64_t v107;
  char v108;
  const char *v109;
  uint64_t v110;
  char v111;
  const char *v112;
  uint64_t v113;
  char v114;
  const char *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a3 + 56);
  v91 = (JSC::VM *)v12;
  if (a5 == 10)
    goto LABEL_2;
  v13 = (unsigned int *)a5;
  if ((a5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a5 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a3, &v91, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_2:
    v13 = 0;
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v81 = *(_DWORD *)(v12 + 80);
    if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_25;
  }
  LODWORD(v91) = 50462976;
  v20 = JSC::temporalSmallestUnit(a3, v13, (uint64_t)&v91, 4, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v82 = *(_DWORD *)(v12 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_25;
  }
  v21 = HIBYTE(v20) ? v20 : 9;
  v22 = v21 >= 6u ? 6 : v21;
  LODWORD(v91) = 50462976;
  v23 = JSC::temporalLargestUnit(a3, v13, (uint64_t)&v91, 4, v22, v17, v18, v19);
  if (*(_DWORD *)(v12 + 80))
  {
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
    {
      v88 = v23;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v24, v25, v26, v27, v28, v29);
      v23 = v88;
    }
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_25;
  }
  if (HIBYTE(v23))
    LOBYTE(v22) = v23;
  if (HIBYTE(v20) && HIBYTE(v23) && v20 < v23)
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x2D00000002;
    *(_QWORD *)(v30 + 8) = "smallestUnit must be smaller than largestUnit";
    *(_DWORD *)(v30 + 16) = 4;
    v90 = (WTF::StringImpl *)v30;
    v31 = *(_QWORD *)(a3 + 128);
    v32 = *(JSC::Heap ***)(a3 + 56);
    if ((v31 & 1) != 0)
    {
      v84 = *(uint64_t (**)(JSC::VM **))(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a3 & 8) != 0)
        v85 = (JSC::VM **)(a3 - 16);
      else
        v85 = (JSC::VM **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v91 = *v85;
      v92 = a3;
      v93 = a3 + 128;
      v31 = v84(&v91);
    }
    v33 = JSC::ErrorInstance::create(v32, v31, &v90, 0, 0, 0, 2, 1);
    v40 = (JSC::Exception *)v33;
    if ((v33 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C)))
    {
      v40 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v33, 0, v34, v35, v36, v37, v38);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a3, v40, v39, v34, v35, v36, v37, v38);
    v48 = v90;
    v90 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
LABEL_25:
    result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 41952) + 2224);
  v91 = (JSC::VM *)"ceil";
  v92 = 5;
  LOBYTE(v93) = 0;
  v94 = "floor";
  v95 = 6;
  v96 = 1;
  v97 = "expand";
  v98 = 7;
  v99 = 2;
  v100 = "trunc";
  v101 = 6;
  v102 = 3;
  v103 = "halfCeil";
  v104 = 9;
  v105 = 4;
  v106 = "halfFloor";
  v107 = 10;
  v108 = 5;
  v109 = "halfExpand";
  v110 = 11;
  v111 = 6;
  v112 = "halfTrunc";
  v113 = 10;
  v114 = 7;
  v115 = "halfEven";
  v116 = 9;
  v117 = 8;
  v57 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a3, v13, v50, (uint64_t)&v91, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 3);
  if (*(_DWORD *)(v12 + 80))
  {
    v86 = *(_DWORD *)(v12 + 80);
    if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v51, v52, v53, v54, v55, v56);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_25;
  }
  if (v21 >= 4u)
  {
    if (v21 == 4)
      v58 = 0x4038000000000000;
    else
      v58 = v21 >= 7u ? 0x408F400000000000 : 0x404E000000000000;
    v59 = 1;
  }
  else
  {
    v58 = 0;
    v59 = 0;
  }
  v66 = JSC::temporalRoundingIncrement(a3, v13, v58, v59, 0, v54, v55, v56);
  if (*(_DWORD *)(v12 + 80))
  {
    v87 = *(_DWORD *)(v12 + 80);
    if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
    {
      v89 = v66;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v60, v61, v62, v63, v64, v65);
      v66 = v89;
    }
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_25;
  }
  v67 = v66;
  switch(v21)
  {
    case 4u:
      v68 = 3600000000000;
      goto LABEL_41;
    case 5u:
      v68 = 60000000000;
LABEL_41:
      v69 = (v66 * (unsigned __int128)(unint64_t)v68) >> 64;
      v67 *= v68;
      break;
    case 6u:
      v69 = 0;
      v70 = 1000000000;
      goto LABEL_45;
    case 7u:
      v69 = 0;
      v70 = 1000000;
      goto LABEL_45;
    case 8u:
      v69 = 0;
      v70 = 1000;
LABEL_45:
      v67 = v67 * (unint64_t)v70;
      break;
    default:
      v69 = 0;
      break;
  }
  v71 = JSC::roundNumberToIncrement(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a2 + 16), (*(_OWORD *)(a4 + 16) - *(_OWORD *)(a2 + 16)) >> 64, v67, v69, v57);
  v72 = __divti3();
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(double *)(a1 + 48) = (double)v72;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(double *)(a1 + 72) = (double)(v71 - 1000000000 * v72);
  return JSC::TemporalDuration::balance(a1, v22);
}

uint64_t JSC::temporalSmallestUnit(unint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  JSC::Heap **v23;
  uint64_t (*v24)(_QWORD *);
  _QWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  JSC::Exception *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  _QWORD v61[3];

  v11 = *(_QWORD *)(a1 + 56);
  JSC::intlStringOption((JSC::JSGlobalObject *)a1, a2, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2320), 0, 0, 0, 0, a8, &v60, 0, 0);
  if (*(_DWORD *)(v11 + 80))
  {
    v58 = *(_DWORD *)(v11 + 80);
    if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_22;
  }
  if (!v60)
  {
    v26 = 0;
    v27 = 0;
    return v27 | (v26 << 8);
  }
  v19 = JSC::temporalUnitType(*((const char **)v60 + 1), *((unsigned int *)v60 + 1) | ((unint64_t)((*((_DWORD *)v60 + 4) >> 2) & 1) << 32));
  if (v19 > 0xFFu)
  {
    v27 = v19;
    if (!a4)
      goto LABEL_15;
    v28 = 0;
    v29 = a3 + a4;
    while (*(unsigned __int8 *)(a3 + v28) != v19)
    {
      if (a4 == ++v28)
        goto LABEL_14;
    }
    v29 = a3 + v28;
LABEL_14:
    if (v29 - a3 == a4)
    {
LABEL_15:
      v26 = 1;
      goto LABEL_23;
    }
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x2100000002;
    *(_QWORD *)(v30 + 8) = "smallestUnit is a disallowed unit";
    *(_DWORD *)(v30 + 16) = 4;
    v59 = (WTF::StringImpl *)v30;
    v22 = (_QWORD *)(a1 + 128);
    v21 = *(_QWORD *)(a1 + 128);
    v23 = *(JSC::Heap ***)(a1 + 56);
    if ((v21 & 1) == 0)
      goto LABEL_17;
    v24 = *(uint64_t (**)(_QWORD *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v25 = (_QWORD *)(a1 - 16);
  }
  else
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v20 = 0x2800000002;
    *(_QWORD *)(v20 + 8) = "smallestUnit is an invalid Temporal unit";
    *(_DWORD *)(v20 + 16) = 4;
    v59 = (WTF::StringImpl *)v20;
    v22 = (_QWORD *)(a1 + 128);
    v21 = *(_QWORD *)(a1 + 128);
    v23 = *(JSC::Heap ***)(a1 + 56);
    if ((v21 & 1) == 0)
      goto LABEL_17;
    v24 = *(uint64_t (**)(_QWORD *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v25 = (_QWORD *)(a1 - 16);
    else
      v25 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  }
  v61[0] = *v25;
  v61[1] = a1;
  v61[2] = v22;
  v21 = v24(v61);
LABEL_17:
  v31 = JSC::ErrorInstance::create(v23, v21, &v59, 0, 0, 0, 2, 1);
  v38 = (JSC::Exception *)v31;
  if ((v31 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)))
  {
    v38 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v31, 0, v32, v33, v34, v35, v36);
  }
  JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v38, v37, v32, v33, v34, v35, v36);
  v39 = v59;
  v59 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
LABEL_22:
  v27 = 0;
  v26 = 0;
LABEL_23:
  v40 = v60;
  v60 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  return v27 | (v26 << 8);
}

uint64_t JSC::temporalLargestUnit(unint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  unint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  JSC::Heap **v27;
  uint64_t (*v28)(_QWORD *);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  JSC::Exception *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  _QWORD v63[3];

  v12 = *(_QWORD *)(a1 + 56);
  JSC::intlStringOption((JSC::JSGlobalObject *)a1, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1752), 0, 0, 0, 0, a8, &v62, 0, 0);
  if (*(_DWORD *)(v12 + 80))
  {
    v60 = *(_DWORD *)(v12 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_25;
  }
  if (!v62)
  {
    v20 = 0;
    a5 = 0;
    return a5 | (v20 << 8);
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v62, (unint64_t)"auto", 4))
    goto LABEL_4;
  if (v62)
  {
    v21 = (const char *)*((_QWORD *)v62 + 1);
    v22 = *((unsigned int *)v62 + 1) | ((unint64_t)((*((_DWORD *)v62 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v21 = 0;
    v22 = 0x100000000;
  }
  v23 = JSC::temporalUnitType(v21, v22);
  if (v23 > 0xFFu)
  {
    a5 = v23;
    if (!a4)
      goto LABEL_4;
    v30 = 0;
    v31 = a3 + a4;
    while (*(unsigned __int8 *)(a3 + v30) != v23)
    {
      if (a4 == ++v30)
        goto LABEL_18;
    }
    v31 = a3 + v30;
LABEL_18:
    if (v31 - a3 == a4)
    {
LABEL_4:
      v20 = 1;
      goto LABEL_26;
    }
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v32 = 0x2000000002;
    *(_QWORD *)(v32 + 8) = "largestUnit is a disallowed unit";
    *(_DWORD *)(v32 + 16) = 4;
    v61 = (WTF::StringImpl *)v32;
    v26 = (_QWORD *)(a1 + 128);
    v25 = *(_QWORD *)(a1 + 128);
    v27 = *(JSC::Heap ***)(a1 + 56);
    if ((v25 & 1) == 0)
      goto LABEL_20;
    v28 = *(uint64_t (**)(_QWORD *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v29 = (_QWORD *)(a1 - 16);
  }
  else
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x2700000002;
    *(_QWORD *)(v24 + 8) = "largestUnit is an invalid Temporal unit";
    *(_DWORD *)(v24 + 16) = 4;
    v61 = (WTF::StringImpl *)v24;
    v26 = (_QWORD *)(a1 + 128);
    v25 = *(_QWORD *)(a1 + 128);
    v27 = *(JSC::Heap ***)(a1 + 56);
    if ((v25 & 1) == 0)
      goto LABEL_20;
    v28 = *(uint64_t (**)(_QWORD *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v29 = (_QWORD *)(a1 - 16);
    else
      v29 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  }
  v63[0] = *v29;
  v63[1] = a1;
  v63[2] = v26;
  v25 = v28(v63);
LABEL_20:
  v33 = JSC::ErrorInstance::create(v27, v25, &v61, 0, 0, 0, 2, 1);
  v40 = (JSC::Exception *)v33;
  if ((v33 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C)))
  {
    v40 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v33, 0, v34, v35, v36, v37, v38);
  }
  JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v40, v39, v34, v35, v36, v37, v38);
  v41 = v61;
  v61 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
LABEL_25:
  a5 = 0;
  v20 = 0;
LABEL_26:
  v42 = v62;
  v62 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  return a5 | (v20 << 8);
}

double JSC::temporalRoundingIncrement(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  uint64_t v22;
  unint64_t v23;
  JSC::Heap **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 *v46;
  unint64_t v47;
  size_t v48;
  char *v49;
  __int128 *p_s;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  JSC::Heap **v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  JSC::Exception *v67;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t (*v79)(__int128 *);
  _QWORD *v80;
  int v81;
  uint64_t (*v82)(__int128 *);
  _QWORD *v83;
  double v84;
  double v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  _OWORD __dst[7];
  __int128 v89;
  __int128 __s;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 56);
  v12 = a4;
  v13 = 1000000000.0;
  if ((_BYTE)a4)
    v13 = *(double *)&a3;
  v14 = 1.0;
  v15 = *(double *)&a3 + -1.0;
  if (*(double *)&a3 <= 1.0)
    v15 = 1.0;
  if ((a5 & 1) != 0)
    v15 = v13;
  if ((_BYTE)a4)
    v16 = v15;
  else
    v16 = v13;
  if (a2)
  {
    v17 = JSC::JSObject::get(a2, a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2216), a4, a5, a6, a7, a8);
    *(_QWORD *)&__dst[0] = v17;
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_12;
    v78 = *(_DWORD *)(v11 + 80);
    if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
    {
      v86 = v17;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v17 = v86;
    }
    v14 = 0.0;
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_12:
      v14 = 1.0;
      if (v17 != 10)
      {
        if (v17 >= 0xFFFE000000000000)
        {
          v19 = (double)(int)v17;
        }
        else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)__dst, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, v18);
        }
        else
        {
          *(_QWORD *)&v19 = v17 - 0x2000000000000;
        }
        if (!*(_DWORD *)(v11 + 80))
          goto LABEL_18;
        v81 = *(_DWORD *)(v11 + 80);
        if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
        {
          v85 = v19;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
          v19 = v85;
        }
        v14 = 0.0;
        if (!*(_QWORD *)(v11 + 16))
LABEL_18:
          v14 = v19;
      }
    }
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_30;
  v77 = *(_DWORD *)(v11 + 80);
  if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
  {
    v84 = v14;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v14 = v84;
  }
  v20 = 0.0;
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_30:
    v20 = trunc(v14);
    if (v20 < 1.0 || v20 > v16)
    {
      v22 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v22 = 0x2100000002;
      *(_QWORD *)(v22 + 8) = "roundingIncrement is out of range";
      *(_DWORD *)(v22 + 16) = 4;
      *(_QWORD *)&__dst[0] = v22;
      v23 = *(_QWORD *)(a1 + 128);
      v24 = *(JSC::Heap ***)(a1 + 56);
      if ((v23 & 1) != 0)
      {
        v79 = *(uint64_t (**)(__int128 *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if ((a1 & 8) != 0)
          v80 = (_QWORD *)(a1 - 16);
        else
          v80 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        *(_QWORD *)&__s = *v80;
        *((_QWORD *)&__s + 1) = a1;
        *(_QWORD *)&v91 = a1 + 128;
        v23 = v79(&__s);
      }
      v25 = JSC::ErrorInstance::create(v24, v23, (WTF::StringImpl **)__dst, 0, 0, 0, 2, 1);
      v32 = (JSC::Exception *)v25;
      if ((v25 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
      {
        v32 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
      }
      JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v32, v31, v26, v27, v28, v29, v30);
      v40 = *(WTF::StringImpl **)&__dst[0];
      *(_QWORD *)&__dst[0] = 0;
      if (!v40)
        return 0.0;
      goto LABEL_55;
    }
    v41 = fmod(*(long double *)&a3, v20);
    if (v12)
    {
      if (v41 != 0.0)
      {
        v42 = (a3 >> 52) & 0x7FF;
        v43 = a3 & 0x800FFFFFFFFFFFFFLL;
        if ((_DWORD)v42 == 2047)
        {
          if ((a3 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(&__s, "NaN", 3);
            v44 = (char *)&__s + 3;
          }
          else
          {
            p_s = &__s;
            if ((a3 & 0x8000000000000000) != 0)
            {
              LOBYTE(__s) = 45;
              p_s = (__int128 *)((char *)&__s + 1);
            }
            *(_QWORD *)p_s = 0x7974696E69666E49;
            v44 = (char *)p_s + 8;
          }
        }
        else
        {
          v45 = a3 & 0x7FFFFFFFFFFFFFFFLL;
          if ((a3 & 0x8000000000000000) != 0 && v45)
          {
            LOBYTE(__s) = 45;
            v46 = (__int128 *)((char *)&__s + 1);
          }
          else
          {
            v46 = &__s;
            if (!v45)
            {
              v44 = (char *)&__s + 1;
              LOBYTE(__s) = 48;
              goto LABEL_43;
            }
          }
          v47 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v43, v42);
          v44 = WTF::dragonbox::detail::to_shortest(v47, v48, (uint64_t)v46, v49);
        }
LABEL_43:
        *v44 = 0;
        v51 = strlen((const char *)&__s);
        memcpy(__dst, &__s, v51);
        *((_BYTE *)__dst + v51) = 0;
        v52 = strlen((const char *)__dst);
        HIDWORD(v89) = v52;
        if (v52 < 0
          || __OFADD__(v52, 7)
          || (v53 = (v52 + 47), __OFADD__(v52 + 7, 40))
          || (WTF::tryFastCompactMalloc((WTF *)(v53 + 20), &__s), (v54 = __s) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198C08F3CLL);
        }
        *(_DWORD *)__s = 2;
        *(_DWORD *)(v54 + 4) = v53;
        *(_QWORD *)(v54 + 8) = v54 + 20;
        *(_DWORD *)(v54 + 16) = 4;
        qmemcpy((void *)(v54 + 20), "roundingIncrement value does not divide ", 40);
        v55 = (_BYTE *)(v54 + 60);
        v94 = __dst[4];
        v95 = __dst[5];
        v96 = __dst[6];
        v97 = v89;
        __s = __dst[0];
        v91 = __dst[1];
        v92 = __dst[2];
        v93 = __dst[3];
        v56 = HIDWORD(v89);
        if (HIDWORD(v89) == 1)
        {
          *v55 = __s;
        }
        else if (HIDWORD(v89))
        {
          memcpy((void *)(v54 + 60), &__s, HIDWORD(v89));
        }
        v57 = &v55[v56];
        *(_DWORD *)((char *)v57 + 3) = 2037149285;
        *v57 = 1702257952;
        v87 = (WTF::StringImpl *)v54;
        v58 = *(_QWORD *)(a1 + 128);
        v59 = *(JSC::Heap ***)(a1 + 56);
        if ((v58 & 1) != 0)
        {
          v82 = *(uint64_t (**)(__int128 *))(v58 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v83 = (_QWORD *)(a1 - 16);
          else
            v83 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          *(_QWORD *)&__s = *v83;
          *((_QWORD *)&__s + 1) = a1;
          *(_QWORD *)&v91 = a1 + 128;
          v58 = v82(&__s);
        }
        v60 = JSC::ErrorInstance::create(v59, v58, &v87, 0, 0, 0, 2, 1);
        v67 = (JSC::Exception *)v60;
        if ((v60 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C)))
        {
          v67 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v60, 0, v61, v62, v63, v64, v65);
        }
        JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v67, v66, v61, v62, v63, v64, v65);
        v40 = v87;
        v87 = 0;
        if (!v40)
          return 0.0;
LABEL_55:
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
        return 0.0;
      }
    }
  }
  return v20;
}

uint64_t JSC::temporalUnitType(const char *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  BOOL v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;

  if ((_DWORD)a2)
  {
    v2 = (a2 - 1);
    v3 = (a2 & 0xFF00000000) != 0 ? a1[v2] : *(unsigned __int16 *)&a1[2 * v2];
    if (v3 == 115)
    {
      if ((a2 & 0xFF00000000) != 0)
        a2 = v2 | 0x100000000;
      else
        a2 = (a2 - 1);
    }
  }
  v4 = (_DWORD)a2 != 4;
  if (a1 != "year" && (_DWORD)a2 == 4)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 121 || *(_WORD *)(a1 + 1) != 24933 || *((_WORD *)a1 + 1) != 29281)
      {
LABEL_24:
        if (a1 != "week" && (_DWORD)a2 == 4)
        {
          if ((a2 & 0xFF00000000) != 0)
          {
            if (*a1 != 119 || *(_WORD *)(a1 + 1) != 25957 || *((_WORD *)a1 + 1) != 27493)
              goto LABEL_40;
LABEL_35:
            v6 = 1;
            v5 = 2;
            return v5 | (v6 << 8);
          }
          if (*(_WORD *)a1 == 119 && *(_DWORD *)(a1 + 2) == 6619237 && *((_DWORD *)a1 + 1) == 7012453)
            goto LABEL_35;
LABEL_40:
          if (a1 == "hour")
            v4 = 1;
          if (!v4)
          {
            if ((a2 & 0xFF00000000) != 0)
            {
              if (*a1 != 104 || *(_WORD *)(a1 + 1) != 30063)
                goto LABEL_45;
              v12 = *((unsigned __int16 *)a1 + 1);
              v13 = 29301;
            }
            else
            {
              if (*(_WORD *)a1 != 104 || *(_DWORD *)(a1 + 2) != 7667823)
                goto LABEL_45;
              v12 = *((_DWORD *)a1 + 1);
              v13 = 7471221;
            }
            if (v12 != v13)
            {
LABEL_45:
              v8 = 0;
              v9 = a1 == "millisecond";
              v10 = 1;
              goto LABEL_46;
            }
LABEL_51:
            v6 = 1;
            v5 = 4;
            return v5 | (v6 << 8);
          }
          if (a1 == "hour" && (_DWORD)a2 == 4)
            goto LABEL_51;
          v11 = (_DWORD)a2 != 6;
          if (a1 == "minute" || (_DWORD)a2 != 6)
          {
            if (a1 == "minute" && (_DWORD)a2 == 6)
              goto LABEL_102;
          }
          else
          {
            if ((a2 & 0xFF00000000) != 0)
            {
              if (*a1 == 109 && *(_DWORD *)(a1 + 1) == 1953853033 && *(_DWORD *)(a1 + 2) == 1702131054)
              {
LABEL_102:
                v6 = 1;
                v5 = 5;
                return v5 | (v6 << 8);
              }
              goto LABEL_56;
            }
            if (*(_WORD *)a1 != 109)
            {
LABEL_56:
              v11 = 0;
              goto LABEL_57;
            }
            v11 = 0;
            if (*(_QWORD *)(a1 + 2) == 0x740075006E0069 && *(_QWORD *)(a1 + 4) == 0x6500740075006ELL)
              goto LABEL_102;
          }
LABEL_57:
          if (a1 == "second" || v11)
          {
            if (a1 == "second" && (_DWORD)a2 == 6)
              goto LABEL_105;
          }
          else
          {
            if (!(_DWORD)a2)
            {
LABEL_105:
              v6 = 1;
              v5 = 6;
              return v5 | (v6 << 8);
            }
            if ((a2 & 0xFF00000000) != 0)
            {
              if (*a1 == 115 && *(_DWORD *)(a1 + 1) == 1852793701 && *(_DWORD *)(a1 + 2) == 1684959075)
                goto LABEL_105;
            }
            else if (*(_WORD *)a1 == 115
                   && *(_QWORD *)(a1 + 2) == 0x6E006F00630065
                   && *(_QWORD *)(a1 + 4) == 0x64006E006F0063)
            {
              goto LABEL_105;
            }
          }
          v8 = (_DWORD)a2 == 11;
          v10 = (_DWORD)a2 != 11;
          v9 = a1 == "millisecond";
          if (a1 != "millisecond" && (_DWORD)a2 == 11)
          {
            if ((a2 & 0xFF00000000) != 0)
            {
              if (*a1 == 109
                && *(_QWORD *)(a1 + 1) == 0x6F636573696C6C69
                && *(_QWORD *)(a1 + 3) == 0x646E6F636573696CLL)
              {
                goto LABEL_48;
              }
            }
            else if (*(_WORD *)a1 == 109)
            {
              v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1991598F0);
              v17.i16[0] = vminvq_u16(v17);
              v10 = v17.i8[0];
              if (v17.i32[0])
              {
                v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_199159900);
                v18.i16[0] = vminvq_u16(v18);
                v10 = v18.i8[0];
                if (v18.i32[0])
                  goto LABEL_48;
              }
              goto LABEL_67;
            }
            v10 = 0;
            goto LABEL_67;
          }
LABEL_46:
          if (v9 && v8)
          {
LABEL_48:
            v6 = 1;
            v5 = 7;
            return v5 | (v6 << 8);
          }
LABEL_67:
          if (a1 == "microsecond" || v10)
          {
            if (a1 != "microsecond")
              v8 = 0;
            if (v8)
              goto LABEL_121;
          }
          else
          {
            if ((a2 & 0xFF00000000) != 0)
            {
              if (*a1 == 109
                && *(_QWORD *)(a1 + 1) == 0x6F6365736F726369
                && *(_QWORD *)(a1 + 3) == 0x646E6F6365736F72)
              {
                goto LABEL_121;
              }
              goto LABEL_81;
            }
            if (*(_WORD *)a1 != 109)
              goto LABEL_81;
            v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_199159910);
            v14.i16[0] = vminvq_u16(v14);
            v6 = v14.i32[0];
            if (!v14.i32[0])
              goto LABEL_82;
            v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_199159920);
            v15.i16[0] = vminvq_u16(v15);
            if (v15.i32[0])
            {
LABEL_121:
              v6 = 1;
              v5 = 8;
              return v5 | (v6 << 8);
            }
          }
          if (a1 == "nanosecond" || (_DWORD)a2 != 10)
          {
            if ((_DWORD)a2 == 10 && a1 == "nanosecond")
              goto LABEL_117;
          }
          else if ((a2 & 0xFF00000000) != 0)
          {
            if (*a1 == 110
              && *(_QWORD *)(a1 + 1) == 0x6E6F6365736F6E61
              && *(_QWORD *)(a1 + 2) == 0x646E6F6365736F6ELL)
            {
LABEL_117:
              v5 = 9;
              goto LABEL_19;
            }
          }
          else if (*(_WORD *)a1 == 110)
          {
            v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_199159930);
            v19.i16[0] = vminvq_u16(v19);
            v6 = v19.i32[0];
            if (!v19.i32[0])
              goto LABEL_82;
            v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 4), (int16x8_t)xmmword_199159940);
            v20.i16[0] = vminvq_u16(v20);
            v6 = v20.i32[0];
            if (!v20.i32[0])
              goto LABEL_82;
            goto LABEL_117;
          }
LABEL_81:
          v6 = 0;
LABEL_82:
          v5 = 0;
          return v5 | (v6 << 8);
        }
        if (a1 == "week" && (_DWORD)a2 == 4)
          goto LABEL_35;
        if (a1 == "day" || (_DWORD)a2 != 3)
        {
          if (a1 != "day" || (_DWORD)a2 != 3)
            goto LABEL_40;
        }
        else if ((a2 & 0xFF00000000) != 0)
        {
          if (*a1 != 100 || *(_WORD *)(a1 + 1) != 31073)
            goto LABEL_40;
        }
        else if (*(_WORD *)a1 != 100 || *(_DWORD *)(a1 + 2) != 7929953)
        {
          goto LABEL_40;
        }
        v6 = 1;
        v5 = 3;
        return v5 | (v6 << 8);
      }
    }
    else if (*(_WORD *)a1 != 121 || *(_DWORD *)(a1 + 2) != 6357093 || *((_DWORD *)a1 + 1) != 7471201)
    {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  if (a1 == "year" && (_DWORD)a2 == 4)
  {
LABEL_18:
    v5 = 0;
    goto LABEL_19;
  }
  if (a1 == "month" || (_DWORD)a2 != 5)
  {
    if (a1 != "month" || (_DWORD)a2 != 5)
      goto LABEL_24;
  }
  else if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 != 109 || *(_WORD *)(a1 + 1) != 28271 || *(_WORD *)(a1 + 3) != 26740)
      goto LABEL_24;
  }
  else if (*(_WORD *)a1 != 109 || *(_QWORD *)(a1 + 2) != 0x680074006E006FLL)
  {
    goto LABEL_24;
  }
  v5 = 1;
LABEL_19:
  v6 = 1;
  return v5 | (v6 << 8);
}

unint64_t JSC::secondsStringPrecision(uint64_t this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v10;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  int8x16_t v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  JSC::Heap **v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  JSC::Exception *v83;
  uint64_t v84;
  int v85;
  int32x4_t v86;
  int32x4_t v87;
  int v88;
  int32x4_t v89;
  int32x4_t v90;
  int v91;
  int32x4_t v92;
  int32x4_t v93;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  BOOL v106;
  int v107;
  uint64_t (*v108)(char *);
  _QWORD *v109;
  uint64_t (*v110)(char *);
  _QWORD *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  _OWORD __dst[7];
  __int128 v116;
  char __s[16];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  size_t __n[2];
  uint64_t v125;

  v8 = (unsigned int *)a2;
  v125 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  *(_DWORD *)__s = 50462976;
  __s[4] = 4;
  v17 = JSC::temporalSmallestUnit(this, (unsigned int *)a2, (uint64_t)__s, 5, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v103 = *(_DWORD *)(v10 + 80);
    if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_98;
  }
  if (v17 >= 0x100u)
  {
    v28 = v17 - 5;
    if ((v17 - 5) < 5u)
    {
      v29 = qword_199159840[v28];
      v30 = qword_199159868[v28];
      return v29 | (v30 << 32);
    }
    __break(0xC471u);
    goto LABEL_130;
  }
  if (v8)
  {
    v18 = *(_QWORD *)(this + 56);
    v19 = JSC::JSObject::get(v8, this, *(_QWORD *)(*(_QWORD *)(v18 + 41952) + 1352), v12, v13, v14, v15, v16);
    v22 = v19;
    v114 = v19;
    if (*(_DWORD *)(v18 + 80))
    {
      v105 = *(_DWORD *)(v18 + 80);
      if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
      if (*(_QWORD *)(v18 + 16))
        v106 = 1;
      else
        v106 = v22 == 10;
      if (v106)
        goto LABEL_67;
    }
    else if (v19 == 10)
    {
      goto LABEL_67;
    }
    if (v22 >> 49)
    {
      v23 = (double)(int)v22;
      if (v22 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v23 = v22 - 0x2000000000000;
      v24 = floor(v23);
      if (v24 >= 0.0 && v24 <= 9.0)
      {
        LODWORD(v8) = v24;
        v45 = v24 & 0xFFFFFF00;
        v46 = 0x100000000;
        goto LABEL_69;
      }
      v26 = (*(_QWORD *)&v24 >> 52) & 0x7FFLL;
      if ((_DWORD)v26 == 2047)
      {
        if ((*(_QWORD *)&v24 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v27 = &__s[3];
        }
        else
        {
          v52 = __s;
          if ((*(_QWORD *)&v24 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v52 = &__s[1];
          }
          *(_QWORD *)v52 = 0x7974696E69666E49;
          v27 = v52 + 8;
        }
      }
      else
      {
        v47 = *(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFLL;
        if ((*(_QWORD *)&v24 & 0x8000000000000000) != 0 && v47)
        {
          __s[0] = 45;
          v48 = &__s[1];
        }
        else
        {
          v48 = __s;
          if (!v47)
          {
            v27 = &__s[1];
            __s[0] = 48;
            goto LABEL_54;
          }
        }
        v49 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v24 & 0x800FFFFFFFFFFFFFLL, v26);
        v27 = WTF::dragonbox::detail::to_shortest(v49, v50, (uint64_t)v48, v51);
      }
LABEL_54:
      *v27 = 0;
      v69 = strlen(__s);
      memcpy(__dst, __s, v69);
      *((_BYTE *)__dst + v69) = 0;
      v70 = strlen((const char *)__dst);
      HIDWORD(v116) = v70;
      if (v70 < 0
        || (v71 = (v70 + 58), __OFADD__(v70, 58))
        || (WTF::tryFastCompactMalloc((WTF *)(v71 + 20), __s), (v72 = *(_QWORD *)__s) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198C09F74);
      }
      **(_DWORD **)__s = 2;
      *(_DWORD *)(v72 + 4) = v71;
      *(_QWORD *)(v72 + 8) = v72 + 20;
      *(_DWORD *)(v72 + 16) = 4;
      qmemcpy((void *)(v72 + 20), "fractionalSecondDigits must be 'auto' or 0 through 9, not ", 58);
      v73 = (_BYTE *)(v72 + 78);
      v121 = __dst[4];
      v122 = __dst[5];
      v123 = __dst[6];
      *(_OWORD *)__n = v116;
      *(_OWORD *)__s = __dst[0];
      v118 = __dst[1];
      v119 = __dst[2];
      v120 = __dst[3];
      if (HIDWORD(v116) == 1)
      {
        *v73 = __s[0];
      }
      else if (HIDWORD(v116))
      {
        memcpy(v73, __s, HIDWORD(v116));
      }
      v113 = (WTF::StringImpl *)v72;
      v74 = *(_QWORD *)(this + 128);
      v75 = *(JSC::Heap ***)(this + 56);
      if ((v74 & 1) != 0)
      {
        v108 = *(uint64_t (**)(char *))(v74 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v109 = (_QWORD *)(this - 16);
        else
          v109 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
        *(_QWORD *)__s = *v109;
        *(_QWORD *)&__s[8] = this;
        *(_QWORD *)&v118 = this + 128;
        v74 = v108(__s);
      }
      v76 = JSC::ErrorInstance::create(v75, v74, &v113, 0, 0, 0, 2, 1);
      v83 = (JSC::Exception *)v76;
      if ((v76 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v76 & 0xFFFFFFFE) + 0x4C)))
      {
        v83 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)v76, 0, v77, v78, v79, v80, v81);
      }
      JSC::VM::throwException((JSC::VM *)v18, (JSC::JSGlobalObject *)this, v83, v82, v77, v78, v79, v80, v81);
      v44 = v113;
      v113 = 0;
      if (!v44)
        goto LABEL_67;
      goto LABEL_65;
    }
    if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v114, (JSC::JSGlobalObject *)this, v11, v12, v13, v14, v15, v16, (int **)__dst);
      goto LABEL_26;
    }
    v31 = *(int **)(v22 + 8);
    if ((v31 & 1) != 0)
    {
      v31 = *JSC::JSRopeString::resolveRope(v22, (JSC::JSGlobalObject *)this, (uint64_t)v11, v12, v21, v13, v14, v15, v16);
      if (!v31)
        goto LABEL_25;
    }
    else if (!v31)
    {
LABEL_25:
      *(_QWORD *)&__dst[0] = v31;
LABEL_26:
      if (*(_DWORD *)(v18 + 80))
      {
        v107 = *(_DWORD *)(v18 + 80);
        if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
        if (*(_QWORD *)(v18 + 16))
          goto LABEL_38;
      }
      if (WTF::equalInternal<unsigned char>(*(uint64_t *)&__dst[0], (unint64_t)"auto", 4))
      {
LABEL_38:
        v44 = *(WTF::StringImpl **)&__dst[0];
        *(_QWORD *)&__dst[0] = 0;
        if (v44)
        {
LABEL_65:
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, v20, (uint64_t)v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
LABEL_67:
        v46 = 0;
        LOBYTE(v8) = 0;
        goto LABEL_68;
      }
      JSC::ellipsizeAt(100, __dst, &v112);
      *(_QWORD *)__s = "fractionalSecondDigits must be 'auto' or 0 through 9, not ";
      *(_QWORD *)&__s[8] = 59;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)__s, (uint64_t *)&v112, (int **)&v113);
      if (v113)
      {
        v32 = *(_QWORD *)(this + 128);
        v33 = *(JSC::Heap ***)(this + 56);
        if ((v32 & 1) != 0)
        {
          v110 = *(uint64_t (**)(char *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v111 = (_QWORD *)(this - 16);
          else
            v111 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
          *(_QWORD *)__s = *v111;
          *(_QWORD *)&__s[8] = this;
          *(_QWORD *)&v118 = this + 128;
          v32 = v110(__s);
        }
        v34 = JSC::ErrorInstance::create(v33, v32, &v113, 0, 0, 0, 2, 1);
        v41 = (JSC::Exception *)v34;
        if ((v34 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
        {
          v41 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
        }
        JSC::VM::throwException((JSC::VM *)v18, (JSC::JSGlobalObject *)this, v41, v40, v35, v36, v37, v38, v39);
        v42 = v113;
        v113 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, v20, (uint64_t)v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        v43 = v112;
        v112 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::~StringImpl(v43, v20, (uint64_t)v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v43 -= 2;
          }
        }
        goto LABEL_38;
      }
      __break(0xC471u);
LABEL_130:
      JUMPOUT(0x198C09F0CLL);
    }
    *v31 += 2;
    goto LABEL_25;
  }
  v46 = 0;
LABEL_68:
  v45 = 0;
LABEL_69:
  if (*(_DWORD *)(v10 + 80))
  {
    v104 = *(_DWORD *)(v10 + 80);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_98:
      v29 = 0;
      v30 = 0;
      return v29 | (v30 << 32);
    }
  }
  v84 = v45 & 0xFFFFFF00 | v8;
  v30 = v46 & 0x100000000 | v84;
  if (HIDWORD(v30))
  {
    if (!(_DWORD)v84)
    {
      v30 = 0;
      v29 = 1;
      return v29 | (v30 << 32);
    }
    if (v84 > 3)
    {
      if (v84 > 6)
      {
        if ((_DWORD)v84 == 9)
        {
          v29 = 1;
          return v29 | (v30 << 32);
        }
        v91 = 0;
        v92.i64[0] = 0x100000001;
        v92.i64[1] = 0x100000001;
        v93.i64[0] = 0xA0000000ALL;
        v93.i64[1] = 0xA0000000ALL;
        do
        {
          v92 = vmulq_s32(v92, v93);
          v91 += 4;
        }
        while (((12 - (_DWORD)v84) & 0xFFFFFFFC) != v91);
      }
      else
      {
        if ((_DWORD)v84 == 6)
        {
          v29 = 1;
          return v29 | (v30 << 32);
        }
        v88 = 0;
        v89.i64[0] = 0x100000001;
        v89.i64[1] = 0x100000001;
        v90.i64[0] = 0xA0000000ALL;
        v90.i64[1] = 0xA0000000ALL;
        do
        {
          v89 = vmulq_s32(v89, v90);
          v88 += 4;
        }
        while (((9 - (_DWORD)v84) & 0xFFFFFFFC) != v88);
      }
    }
    else
    {
      if ((_DWORD)v84 == 3)
      {
        v29 = 1;
        return v29 | (v30 << 32);
      }
      v85 = 0;
      v86.i64[0] = 0x100000001;
      v86.i64[1] = 0x100000001;
      v87.i64[0] = 0xA0000000ALL;
      v87.i64[1] = 0xA0000000ALL;
      do
      {
        v86 = vmulq_s32(v86, v87);
        v85 += 4;
      }
      while (((6 - (_DWORD)v84) & 0xFFFFFFFC) != v85);
    }
    v29 = 1;
    return v29 | (v30 << 32);
  }
  v30 = 0;
  v29 = 2;
  return v29 | (v30 << 32);
}

void JSC::TemporalInstant::toString(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double v8;
  BOOL v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int8 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  _BYTE *v61;
  char *v62;
  unsigned int v63;
  unsigned int v64;
  size_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  size_t v75;
  uint64_t v76;
  unsigned int v77;
  size_t v78;
  uint64_t v79;
  char *v80;
  unsigned int v81;
  unsigned int v82;
  size_t v83;
  uint64_t v84;
  unsigned int v85;
  size_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  unsigned int v90;
  unsigned int v91;
  size_t v92;
  char *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  BOOL v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  _WORD *v111;
  int v112;
  unsigned int v113;
  unint64_t v114;
  _WORD *v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _WORD *v134;
  int8x16_t *v135;
  size_t v136;
  _BYTE *v137;
  int v138;
  unsigned int v139;
  _BYTE *v140;
  uint64_t v141;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  int v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF::AtomStringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  WTF::StringImpl **v204;
  int v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  unsigned int v209;
  char v210;
  char v211[4];
  unsigned int v212;
  int8x16_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v8 = (double)__divti3();
  v9 = (unint64_t)(COERCE__INT64(fabs(v8)) - 0x10000000000000) >> 53 < 0x3FF || *(_QWORD *)&v8 == 0;
  v203 = a5;
  if (!v9)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    LODWORD(v26) = 0;
    v27 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 1;
LABEL_13:
    v21 = 4;
    goto LABEL_14;
  }
  v10 = (uint64_t)v8 - 86399999;
  if ((uint64_t)v8 >= 0)
    v10 = (uint64_t)v8;
  v11 = (WTF *)((int)v10 / 86400000);
  v12 = (uint64_t)v8 - 86400000 * (_DWORD)v11;
  v13 = WTF::yearMonthDayFromDays(v11);
  v27 = v13;
  v25 = v19;
  v24 = v12 / 3600000;
  v23 = v12 / 60000 % 60;
  v22 = v12 / 1000 % 60;
  v26 = HIDWORD(v13);
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 1;
  if (v13 >> 4 < 0x271)
    goto LABEL_13;
  if ((v13 & 0x80000000) == 0)
    v20 = 43;
  else
    v20 = 45;
  v213.i8[0] = v20;
  WTF::StringBuilder::append((uint64_t)&v207, &v213, 1uLL, v14, v15, v16, v17, v18);
  v21 = 6;
LABEL_14:
  v28 = 0;
  if (v27 >= 0)
    v29 = v27;
  else
    v29 = -v27;
  v30 = v26 + 1;
  v31 = v29;
  do
  {
    ++v28;
    v32 = v31 > 9;
    v31 /= 0xAu;
  }
  while (v32);
  if (v21 <= v28)
    v33 = v28;
  else
    v33 = v21;
  if ((int)v26 < -1)
  {
    v192 = ~(_DWORD)v26;
    v34 = 1;
    do
    {
      ++v34;
      v106 = v192 >= 0xA;
      v192 /= 0xAu;
    }
    while (v106);
  }
  else
  {
    v34 = 0;
    v35 = v26 + 1;
    do
    {
      ++v34;
      v32 = v35 > 9;
      v35 /= 0xAu;
    }
    while (v32);
  }
  if (v34 <= 2)
    v36 = 2;
  else
    v36 = v34;
  if ((v25 & 0x80000000) != 0)
  {
    v193 = -v25;
    v37 = 1;
    do
    {
      ++v37;
      v106 = v193 >= 0xA;
      v193 /= 0xAu;
    }
    while (v106);
  }
  else
  {
    v37 = 0;
    v38 = v25;
    do
    {
      ++v37;
      v32 = v38 > 9;
      v38 /= 0xAu;
    }
    while (v32);
  }
  if (v37 <= 2)
    v39 = 2;
  else
    v39 = v37;
  if ((v24 & 0x80000000) != 0)
  {
    v194 = -v24;
    v40 = 1;
    do
    {
      ++v40;
      v106 = v194 >= 0xA;
      v194 /= 0xAu;
    }
    while (v106);
  }
  else
  {
    v40 = 0;
    v41 = v24;
    do
    {
      ++v40;
      v32 = v41 > 9;
      v41 /= 0xAu;
    }
    while (v32);
  }
  if (v40 <= 2)
    v42 = 2;
  else
    v42 = v40;
  v206 = v26;
  if ((v23 & 0x80000000) != 0)
  {
    v195 = -v23;
    v43 = 1;
    do
    {
      ++v43;
      v106 = v195 >= 0xA;
      v195 /= 0xAu;
    }
    while (v106);
  }
  else
  {
    v43 = 0;
    v44 = v23;
    do
    {
      ++v43;
      v32 = v44 > 9;
      v44 /= 0xAu;
    }
    while (v32);
  }
  if (v43 <= 2)
    v43 = 2;
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v33, 1, v36, 1, v39, 1, v42, 1, (uint64_t)v211, v43);
  if (v211[0])
    goto LABEL_281;
  v52 = v212;
  if (v212)
  {
    if ((v212 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v212 + 20), &v213);
      v53 = (int *)v213.i64[0];
      if (v213.i64[0])
      {
        v204 = a1;
        v54 = 0;
        v55 = v213.i64[0] + 20;
        *(_DWORD *)v213.i64[0] = 2;
        v53[1] = v52;
        *((_QWORD *)v53 + 1) = v53 + 5;
        v53[4] = 4;
        v56 = v29;
        do
        {
          ++v54;
          v32 = v56 > 9;
          v56 /= 0xAu;
        }
        while (v32);
        v57 = v21 - v54;
        if (v21 <= v54)
          v57 = 0;
        else
          memset(v53 + 5, 48, v21 - v54);
        v58 = 0;
        v59 = v29;
        do
        {
          v213.i8[v58-- + 12] = (v59 % 0xA) | 0x30;
          v32 = v59 > 9;
          v59 /= 0xAu;
        }
        while (v32);
        if (v58 + 14 <= 13)
          memcpy((void *)(v55 + v57), (char *)&v213.u64[1] + v58 + 5, -v58);
        LODWORD(v60) = 0;
        do
        {
          LODWORD(v60) = v60 + 1;
          v32 = v29 > 9;
          v29 /= 0xAu;
        }
        while (v32);
        if (v21 <= v60)
          v60 = v60;
        else
          v60 = v21;
        v61 = (_BYTE *)(v55 + v60);
        *v61 = 45;
        v62 = v61 + 1;
        if (v206 < -1)
        {
          v196 = ~v206;
          v63 = 1;
          do
          {
            ++v63;
            v106 = v196 >= 0xA;
            v196 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          v63 = 0;
          v64 = v30;
          do
          {
            ++v63;
            v32 = v64 > 9;
            v64 /= 0xAu;
          }
          while (v32);
        }
        if (v63 > 1)
        {
          v65 = 0;
        }
        else
        {
          v65 = 2 - v63;
          memset(v62, 48, v65);
        }
        v66 = &v62[v65];
        v67 = v206;
        if (v206 <= -2)
        {
          v183 = 0;
          v184 = ~v206;
          do
          {
            v213.i8[v183-- + 12] = (v184 % 0xA) | 0x30;
            v32 = v184 > 9;
            v184 /= 0xAu;
          }
          while (v32);
          v185 = v183 + 12;
          v45 = &v213.i8[v183 + 12];
          *v45 = 45;
          if (v183 + 14 <= 14)
          {
            if (v185 <= 12)
              v185 = 12;
            memcpy(v66, v45, v185 - v183 - 11);
          }
          v67 = v206;
        }
        else
        {
          v68 = 0;
          v69 = v30;
          do
          {
            v213.i8[v68-- + 12] = (v69 % 0xA) | 0x30;
            v32 = v69 > 9;
            v69 /= 0xAu;
          }
          while (v32);
          if (v68 + 14 <= 13)
            memcpy(v66, (char *)&v213.u64[1] + v68 + 5, -v68);
        }
        if (v67 < -1)
        {
          v197 = ~v67;
          LODWORD(v70) = 1;
          do
          {
            LODWORD(v70) = v70 + 1;
            v106 = v197 >= 0xA;
            v197 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          LODWORD(v70) = 0;
          do
          {
            LODWORD(v70) = v70 + 1;
            v32 = v30 > 9;
            v30 /= 0xAu;
          }
          while (v32);
        }
        if (v70 <= 2)
          v70 = 2;
        else
          v70 = v70;
        v71 = &v62[v70];
        *v71 = 45;
        v72 = v71 + 1;
        if ((v25 & 0x80000000) != 0)
        {
          v198 = -v25;
          v73 = 1;
          do
          {
            ++v73;
            v106 = v198 >= 0xA;
            v198 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          v73 = 0;
          v74 = v25;
          do
          {
            ++v73;
            v32 = v74 > 9;
            v74 /= 0xAu;
          }
          while (v32);
        }
        if (v73 > 1)
        {
          v75 = 0;
        }
        else
        {
          v75 = 2 - v73;
          memset(v72, 48, v75);
        }
        v76 = 0;
        if ((v25 & 0x80000000) != 0)
        {
          v186 = -v25;
          do
          {
            v213.i8[v76-- + 12] = (v186 % 0xA) | 0x30;
            v32 = v186 > 9;
            v186 /= 0xAu;
          }
          while (v32);
          v187 = v76 + 12;
          v45 = &v213.i8[v76 + 12];
          *v45 = 45;
          if (v76 + 14 > 14)
            goto LABEL_92;
          if (v187 <= 12)
            v187 = 12;
          v78 = v187 - v76 - 11;
        }
        else
        {
          v77 = v25;
          do
          {
            v213.i8[v76-- + 12] = (v77 % 0xA) | 0x30;
            v32 = v77 > 9;
            v77 /= 0xAu;
          }
          while (v32);
          if (v76 + 14 > 13)
            goto LABEL_92;
          v45 = &v213.i8[v76 + 13];
          v78 = -v76;
        }
        memcpy(&v72[v75], v45, v78);
LABEL_92:
        if ((v25 & 0x80000000) != 0)
        {
          v199 = -v25;
          LODWORD(v79) = 1;
          do
          {
            LODWORD(v79) = v79 + 1;
            v106 = v199 >= 0xA;
            v199 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          LODWORD(v79) = 0;
          do
          {
            LODWORD(v79) = v79 + 1;
            v32 = v25 > 9;
            v25 /= 0xAu;
          }
          while (v32);
        }
        if (v79 <= 2)
          v79 = 2;
        else
          v79 = v79;
        v72[v79] = 84;
        v80 = &v72[v79 + 1];
        if ((v24 & 0x80000000) != 0)
        {
          v200 = -v24;
          v81 = 1;
          do
          {
            ++v81;
            v106 = v200 >= 0xA;
            v200 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          v81 = 0;
          v82 = v24;
          do
          {
            ++v81;
            v32 = v82 > 9;
            v82 /= 0xAu;
          }
          while (v32);
        }
        if (v81 > 1)
        {
          v83 = 0;
        }
        else
        {
          v83 = 2 - v81;
          memset(v80, 48, v83);
        }
        v84 = 0;
        if ((v24 & 0x80000000) != 0)
        {
          v188 = -v24;
          do
          {
            v213.i8[v84-- + 12] = (v188 % 0xA) | 0x30;
            v32 = v188 > 9;
            v188 /= 0xAu;
          }
          while (v32);
          v189 = v84 + 12;
          v45 = &v213.i8[v84 + 12];
          *v45 = 45;
          if (v84 + 14 > 14)
            goto LABEL_110;
          if (v189 <= 12)
            v189 = 12;
          v86 = v189 - v84 - 11;
        }
        else
        {
          v85 = v24;
          do
          {
            v213.i8[v84-- + 12] = (v85 % 0xA) | 0x30;
            v32 = v85 > 9;
            v85 /= 0xAu;
          }
          while (v32);
          if (v84 + 14 > 13)
            goto LABEL_110;
          v45 = &v213.i8[v84 + 13];
          v86 = -v84;
        }
        memcpy(&v80[v83], v45, v86);
LABEL_110:
        if ((v24 & 0x80000000) != 0)
        {
          v201 = -v24;
          LODWORD(v87) = 1;
          do
          {
            LODWORD(v87) = v87 + 1;
            v106 = v201 >= 0xA;
            v201 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          LODWORD(v87) = 0;
          do
          {
            LODWORD(v87) = v87 + 1;
            v32 = v24 > 9;
            v24 /= 0xAu;
          }
          while (v32);
        }
        if (v87 <= 2)
          v87 = 2;
        else
          v87 = v87;
        v88 = &v80[v87];
        *v88 = 58;
        v89 = v88 + 1;
        if ((v23 & 0x80000000) != 0)
        {
          v202 = -v23;
          v90 = 1;
          do
          {
            ++v90;
            v106 = v202 >= 0xA;
            v202 /= 0xAu;
          }
          while (v106);
        }
        else
        {
          v90 = 0;
          v91 = v23;
          do
          {
            ++v90;
            v32 = v91 > 9;
            v91 /= 0xAu;
          }
          while (v32);
        }
        if (v90 > 1)
        {
          v92 = 0;
        }
        else
        {
          v92 = 2 - v90;
          memset(v89, 48, v92);
        }
        v93 = &v89[v92];
        v94 = 0;
        if ((v23 & 0x80000000) != 0)
        {
          v190 = -v23;
          do
          {
            v213.i8[v94-- + 12] = (v190 % 0xA) | 0x30;
            v32 = v190 > 9;
            v190 /= 0xAu;
          }
          while (v32);
          v191 = v94 + 12;
          v45 = &v213.i8[v94 + 12];
          *v45 = 45;
          if (v94 + 14 <= 14)
          {
            if (v191 <= 12)
              v191 = 12;
            memcpy(v93, v45, v191 - v94 - 11);
          }
          a1 = v204;
        }
        else
        {
          a1 = v204;
          do
          {
            v213.i8[v94-- + 12] = (v23 % 0xA) | 0x30;
            v32 = v23 > 9;
            v23 /= 0xAu;
          }
          while (v32);
          if (v94 + 14 <= 13)
            memcpy(v93, (char *)&v213.u64[1] + v94 + 5, -v94);
        }
        goto LABEL_127;
      }
    }
LABEL_281:
    __break(0xC471u);
    return;
  }
  v53 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_127:
  if (v209 || v208)
  {
    v135 = (int8x16_t *)*((_QWORD *)v53 + 1);
    v136 = v53[1];
    if ((v53[4] & 4) != 0)
      WTF::StringBuilder::append((uint64_t)&v207, v135, v136, v47, v48, v49, v50, v51);
    else
      WTF::StringBuilder::append((uint64_t)&v207, v135, v136, v47, v48, v49, v50, v51);
  }
  else
  {
    *v53 += 2;
    v95 = v207;
    v207 = (WTF::StringImpl *)v53;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, (WTF::AtomStringImpl *)v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
    v209 = v53[1];
  }
  if (*v53 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v53, (WTF::AtomStringImpl *)v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
  }
  else
  {
    *v53 -= 2;
  }
  if (a6 != 5)
  {
    v96 = __modti3();
    v103 = 0;
    if (v96 >= 0)
      v104 = v96;
    else
      v104 = v96 + 1000000000;
    v105 = v22;
    do
    {
      ++v103;
      v32 = v105 > 9;
      v105 /= 0xAu;
    }
    while (v32);
    if (v103 <= 2)
      v103 = 2;
    v106 = __CFADD__(v103, 1);
    v107 = v103 + 1;
    if (v106)
      v107 = -1;
    v106 = __CFADD__(v107, v209);
    v108 = v107 + v209;
    if (v106)
      v109 = 0xFFFFFFFFLL;
    else
      v109 = v108;
    v110 = v208;
    if ((v208 || (v110 = v207) != 0) && (*((_BYTE *)v110 + 16) & 4) == 0)
    {
      v111 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v207, (WTF::AtomStringImpl *)v109, v97, v98, v99, v100, v101, v102);
      if (v111)
      {
        v112 = 0;
        *v111 = 58;
        v113 = v22;
        do
        {
          --v112;
          v32 = v113 > 9;
          v113 /= 0xAu;
        }
        while (v32);
        if (-v112 != 1 && v112 != 0)
        {
          v116 = 0;
        }
        else
        {
          v114 = (v112 + 2);
          if (v114 <= 1)
            v114 = 1;
          v115 = v111 + 1;
          do
          {
            *v115++ = 48;
            --v114;
          }
          while (v114);
          v116 = (v112 + 2);
        }
        v133 = 0;
        do
        {
          v213.i8[v133-- + 12] = (v22 % 0xA) | 0x30;
          v32 = v22 > 9;
          v22 /= 0xAu;
        }
        while (v32);
        if (v133 + 14 <= 13)
        {
          v134 = &v111[v116 + 1];
          do
          {
            *v134++ = v213.u8[v133 + 13];
            v106 = __CFADD__(v133++, 1);
          }
          while (!v106);
        }
      }
    }
    else
    {
      v137 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v207, (WTF::AtomStringImpl *)v109, v97, v98, v99, v100, v101, v102);
      if (v137)
      {
        v138 = 0;
        *v137 = 58;
        v139 = v22;
        do
        {
          --v138;
          v32 = v139 > 9;
          v139 /= 0xAu;
        }
        while (v32);
        v140 = v137 + 1;
        if (-v138 != 1 && v138 != 0)
        {
          v141 = 0;
        }
        else
        {
          v141 = (v138 + 2);
          v142 = v141 <= 1 ? 1 : v141;
          memset(v137 + 1, 48, v142);
        }
        v143 = 0;
        do
        {
          v213.i8[v143-- + 12] = (v22 % 0xA) | 0x30;
          v32 = v22 > 9;
          v22 /= 0xAu;
        }
        while (v32);
        if (v143 + 14 <= 13)
          memcpy(&v140[v141], (char *)&v213.u64[1] + v143 + 5, -v143);
      }
    }
    JSC::formatSecondsStringFraction((uint64_t)&v207, v104, v203 & 0xFFFFFFFF000000FFLL);
  }
  v213.i8[0] = 90;
  if (v208 && ((v144 = v209, v209 < *((_DWORD *)v208 + 1)) ? (v145 = v207 == 0) : (v145 = 0), v145))
  {
    v146 = *((_DWORD *)v208 + 4);
    v147 = *((_QWORD *)v208 + 1);
    ++v209;
    if ((v146 & 4) != 0)
      *(_BYTE *)(v147 + v144) = 90;
    else
      *(_WORD *)(v147 + 2 * v144) = 90;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v207, &v213, 1uLL, v47, v48, v49, v50, v51);
  }
  v148 = v207;
  if (v207)
    goto LABEL_196;
  if ((v209 & 0x80000000) == 0 && v208 && *((_DWORD *)v208 + 1) > v209 + (v209 >> 2))
  {
    if ((*((_BYTE *)v208 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v207, (WTF::AtomStringImpl *)v209, v46, v47, v48, v49, v50, v51);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v207, (WTF::AtomStringImpl *)v209, v46, v47, v48, v49, v50, v51);
    v174 = v207;
    v207 = v208;
    v208 = 0;
    if (v174)
    {
      if (*(_DWORD *)v174 == 2)
      {
        WTF::StringImpl::~StringImpl(v174, v167, v168, v169, v170, v171, v172, v173);
        WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
      }
      else
      {
        *(_DWORD *)v174 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v207);
  v148 = v207;
  if (v207)
LABEL_196:
    *(_DWORD *)v148 += 2;
  *a1 = v148;
  v149 = v208;
  v208 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, (WTF::AtomStringImpl *)v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v207;
  v207 = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
    {
      WTF::StringImpl::~StringImpl(v150, (WTF::AtomStringImpl *)v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v150 -= 2;
    }
  }
}

JSC::Exception *JSC::callTemporalInstant(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Instant", 8);
}

unint64_t JSC::constructTemporalInstant(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject *i;
  char **v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *SubclassStructure;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t (*v22)(JSC::VM **);
  JSC::VM **v23;
  uint64_t (*v24)(JSC::VM **);
  JSC::VM **v25;
  JSC::JSGlobalObject *v26;
  unint64_t v27;
  JSC::VM *v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v11 = *(_QWORD *)(this + 56);
  v28 = (JSC::VM *)v11;
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v18 = *(_QWORD *)(this + 432);
    if ((v18 & 1) == 0)
      goto LABEL_15;
    v24 = *(uint64_t (**)(JSC::VM **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v25 = (JSC::VM **)(this - 16);
    v29 = *v25;
    v30 = this;
    v31 = (char *)(this + 432);
    SubclassStructure = (JSC::JSObject *)v24(&v29);
  }
  else
  {
    v29 = (JSC::VM *)v11;
    for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v26 + 2))
    {
      while (1)
      {
        v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v14 != &JSC::JSBoundFunction::s_info && v14 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v15 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v26 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v15 = 0;
LABEL_10:
    if (*(_DWORD *)(v11 + 80))
    {
      v21 = *(_DWORD *)(v11 + 80);
      if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      {
        v27 = v15;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v15 = v27;
      }
      if (*(_QWORD *)(v11 + 16))
      {
        v18 = 0;
        goto LABEL_15;
      }
    }
    v16 = *(_QWORD *)(v15 + 432);
    if ((v16 & 1) != 0)
    {
      v22 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v23 = (JSC::VM **)(v15 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v15 & 8) != 0)
        v23 = (JSC::VM **)(v15 - 16);
      v29 = *v23;
      v30 = v15;
      v31 = (char *)(v15 + 432);
      v16 = v22(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
  }
  v18 = (uint64_t)SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v11 + 80))
  {
    v20 = *(_DWORD *)(v11 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError(this, &v28, (uint64_t)"Missing required epochNanoseconds argument to Temporal.Instant", 63);
  return JSC::TemporalInstant::tryCreateIfValid((JSC::JSGlobalObject *)this, *((JSC::Structure **)a2 + 6), v18, (uint64_t)a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::TemporalInstantPrototype::create(JSC::TemporalInstantPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1000000002;
  *(_QWORD *)(v13 + 8) = "Temporal.Instant";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalInstantPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalInstantPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::temporalInstantPrototypeGetterEpochSeconds(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v4, (uint64_t)"Temporal.Instant.prototype.epochSeconds called on value that's not a Instant", 77);
  }
  v2 = __divti3();
  if (v2 == (int)v2)
    return v2 | 0xFFFE000000000000;
  else
    return COERCE__INT64((double)v2) + 0x2000000000000;
}

unint64_t JSC::temporalInstantPrototypeGetterEpochMilliseconds(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v4, (uint64_t)"Temporal.Instant.prototype.epochMilliseconds called on value that's not a Instant", 82);
  }
  v2 = __divti3();
  if (v2 == (int)v2)
    return v2 | 0xFFFE000000000000;
  else
    return COERCE__INT64((double)v2) + 0x2000000000000;
}

uint64_t JSC::temporalInstantPrototypeGetterEpochMicroseconds(JSC::JSBigInt *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)a1, &v11, (uint64_t)"Temporal.Instant.prototype.epochMicroseconds called on value that's not a Instant", 82);
  }
  v3 = __divti3();
  return JSC::JSBigInt::createFrom(a1, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t JSC::temporalInstantPrototypeGetterEpochNanoseconds(JSC::JSBigInt *a1, uint64_t a2, __int128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  JSC::VM *v8;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)a1, &v8, (uint64_t)"Temporal.Instant.prototype.epochNanoseconds called on value that's not a Instant", 81);
  }
  *(_QWORD *)&a3 = *(_QWORD *)(a2 + 24);
  return JSC::JSBigInt::createFrom(a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7);
}

unint64_t JSC::TemporalObject::create(JSC::TemporalObject *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x800000002;
  *(_QWORD *)(v13 + 8) = "Temporal";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalObject::createStructure(JSC::TemporalObject *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v11 = (unint64_t *)((char *)this + 40136);
  v12 = *((_QWORD *)a2 + 82);
  v20 = 8215;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_9;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v16);
    v11[2] = SlowCase + (int)v16;
LABEL_9:
    *v11 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v17, v18, v19);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)this, (uint64_t)a2, v12, (uint64_t)&v20, (unint64_t)&JSC::TemporalObject::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::temporalUnitPluralPropertyName(uint64_t a1, int a2)
{
  uint64_t v2;

  switch(a2)
  {
    case 0:
      v2 = *(_QWORD *)(a1 + 41952) + 2672;
      break;
    case 1:
      v2 = *(_QWORD *)(a1 + 41952) + 1944;
      break;
    case 2:
      v2 = *(_QWORD *)(a1 + 41952) + 2640;
      break;
    case 3:
      v2 = *(_QWORD *)(a1 + 41952) + 1120;
      break;
    case 4:
      v2 = *(_QWORD *)(a1 + 41952) + 1496;
      break;
    case 5:
      v2 = *(_QWORD *)(a1 + 41952) + 1912;
      break;
    case 6:
      v2 = *(_QWORD *)(a1 + 41952) + 2256;
      break;
    case 7:
      v2 = *(_QWORD *)(a1 + 41952) + 1864;
      break;
    case 8:
      v2 = *(_QWORD *)(a1 + 41952) + 1840;
      break;
    case 9:
      v2 = *(_QWORD *)(a1 + 41952) + 1984;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198C0BAA0);
  }
  return *(_QWORD *)v2;
}

uint64_t JSC::temporalUnitSingularPropertyName(uint64_t a1, int a2)
{
  uint64_t v2;

  switch(a2)
  {
    case 0:
      v2 = *(_QWORD *)(a1 + 41952) + 2664;
      break;
    case 1:
      v2 = *(_QWORD *)(a1 + 41952) + 1928;
      break;
    case 2:
      v2 = *(_QWORD *)(a1 + 41952) + 2624;
      break;
    case 3:
      v2 = *(_QWORD *)(a1 + 41952) + 1112;
      break;
    case 4:
      v2 = *(_QWORD *)(a1 + 41952) + 1488;
      break;
    case 5:
      v2 = *(_QWORD *)(a1 + 41952) + 1904;
      break;
    case 6:
      v2 = *(_QWORD *)(a1 + 41952) + 2248;
      break;
    case 7:
      v2 = *(_QWORD *)(a1 + 41952) + 1856;
      break;
    case 8:
      v2 = *(_QWORD *)(a1 + 41952) + 1832;
      break;
    case 9:
      v2 = *(_QWORD *)(a1 + 41952) + 1976;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198C0BBB0);
  }
  return *(_QWORD *)v2;
}

unint64_t JSC::extractDifferenceOptions(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t (*v82)(JSC::VM **);
  JSC::VM **v83;
  int v84;
  int v85;
  __int16 v86;
  WTF::StringImpl *v87;
  JSC::VM *v88;
  uint64_t v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  char v93;
  const char *v94;
  uint64_t v95;
  char v96;
  const char *v97;
  uint64_t v98;
  char v99;
  const char *v100;
  uint64_t v101;
  char v102;
  const char *v103;
  uint64_t v104;
  char v105;
  const char *v106;
  uint64_t v107;
  char v108;
  const char *v109;
  uint64_t v110;
  char v111;
  const char *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v115 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 56);
  v88 = (JSC::VM *)v12;
  if (a2 == 10)
    goto LABEL_2;
  v13 = (unsigned int *)a2;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v88, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_2:
    v13 = 0;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_69;
  v79 = *(_DWORD *)(v12 + 80);
  if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_69:
    v14 = (uint64_t *)((char *)&JSC::extractDifferenceOptions(JSC::JSGlobalObject *,JSC::JSValue,JSC::UnitGroup,JSC::TemporalUnit,JSC::TemporalUnit)::disallowedUnits
                    + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = JSC::temporalSmallestUnit(a1, v13, *v14, v16, a5, a6, a7, a8);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_70;
    v80 = *(_DWORD *)(v12 + 80);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
    {
      v86 = v17;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      v17 = v86;
    }
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_70:
      if ((v17 & 0xFF00) != 0)
        v24 = v17;
      else
        v24 = v9;
      if (v24 < v8)
        v8 = v24;
      v31 = JSC::temporalLargestUnit(a1, v13, v15, v16, v8, v21, v22, v23);
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_13;
      v81 = *(_DWORD *)(v12 + 80);
      if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v25, v26, v27, v28, v29, v30);
      if (!*(_QWORD *)(v12 + 16))
      {
LABEL_13:
        if ((v31 & 0xFF00) == 0)
          LOBYTE(v31) = v8;
        if (v24 >= v31)
        {
          v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 41952) + 2224);
          v88 = (JSC::VM *)"ceil";
          v89 = 5;
          LOBYTE(v90) = 0;
          v91 = "floor";
          v92 = 6;
          v93 = 1;
          v94 = "expand";
          v95 = 7;
          v96 = 2;
          v97 = "trunc";
          v98 = 6;
          v99 = 3;
          v100 = "halfCeil";
          v101 = 9;
          v102 = 4;
          v103 = "halfFloor";
          v104 = 10;
          v105 = 5;
          v106 = "halfExpand";
          v107 = 11;
          v108 = 6;
          v109 = "halfTrunc";
          v110 = 10;
          v111 = 7;
          v112 = "halfEven";
          v113 = 9;
          v114 = 8;
          v61 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a1, v13, v54, (uint64_t)&v88, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 3);
          if (!*(_DWORD *)(v12 + 80))
            goto LABEL_71;
          v84 = *(_DWORD *)(v12 + 80);
          if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v55, v56, v57, v58, v59, v60);
          if (!*(_QWORD *)(v12 + 16))
          {
LABEL_71:
            if (v24 >= 4u)
            {
              if (v24 == 4)
                v62 = 0x4038000000000000;
              else
                v62 = v24 >= 7u ? 0x408F400000000000 : 0x404E000000000000;
              v63 = 1;
            }
            else
            {
              v62 = 0;
              v63 = 0;
            }
            JSC::temporalRoundingIncrement(a1, v13, v62, v63, 0, v58, v59, v60);
            if (!*(_DWORD *)(v12 + 80))
              goto LABEL_33;
            v85 = *(_DWORD *)(v12 + 80);
            if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v64, v65, v66, v67, v68, v69);
            if (!*(_QWORD *)(v12 + 16))
            {
LABEL_33:
              v53 = (unint64_t)v61 << 16;
              v52 = (unint64_t)v31 << 8;
              v51 = v24;
              return v52 | v51 | v53;
            }
          }
        }
        else
        {
          v32 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v32 = 0x2D00000002;
          *(_QWORD *)(v32 + 8) = "smallestUnit must be smaller than largestUnit";
          *(_DWORD *)(v32 + 16) = 4;
          v87 = (WTF::StringImpl *)v32;
          v33 = *(_QWORD *)(a1 + 128);
          v34 = *(JSC::Heap ***)(a1 + 56);
          if ((v33 & 1) != 0)
          {
            v82 = *(uint64_t (**)(JSC::VM **))(v33 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v83 = (JSC::VM **)(a1 - 16);
            else
              v83 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            v88 = *v83;
            v89 = a1;
            v90 = a1 + 128;
            v33 = v82(&v88);
          }
          v35 = JSC::ErrorInstance::create(v34, v33, &v87, 0, 0, 0, 2, 1);
          v42 = (JSC::Exception *)v35;
          if ((v35 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
          {
            v42 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
          }
          JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v42, v41, v36, v37, v38, v39, v40);
          v50 = v87;
          v87 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
            {
              WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
            }
            else
            {
              *(_DWORD *)v50 -= 2;
            }
          }
        }
      }
    }
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  return v52 | v51 | v53;
}

void JSC::formatSecondsStringFraction(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unsigned int v3;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unsigned int v22;
  int8x16_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];

  v3 = a2;
  v44[2] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = HIDWORD(a3);
  if (a2 && a3 == 2 || a3 == 1 && HIDWORD(a3))
  {
    v7 = 0;
    v8 = a2;
    do
    {
      ++v7;
      v9 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v9);
    if (v7 <= 9)
      v7 = 9;
    if ((v7 & 0x80000000) != 0
      || (v10 = v7 + 1, __OFADD__(v7, 1))
      || (WTF::tryFastCompactMalloc((WTF *)(v10 + 20), v44), (v16 = v44[0]) == 0))
    {
      __break(0xC471u);
      return;
    }
    v17 = 0;
    *(_BYTE *)(v44[0] + 20) = 46;
    *(_DWORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = v10;
    *(_QWORD *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 4;
    v18 = v3;
    do
    {
      --v17;
      v9 = v18 > 9;
      v18 /= 0xAu;
    }
    while (v9);
    if (-v17 > 8)
    {
      v19 = 0;
    }
    else
    {
      v19 = (v17 + 9);
      if (v19 <= 1)
        v20 = 1;
      else
        v20 = v19;
      memset((void *)(v16 + 21), 48, v20);
    }
    v21 = 0;
    do
    {
      *((_BYTE *)&v44[1] + v21-- + 4) = (v3 % 0xA) | 0x30;
      v9 = v3 > 9;
      v3 /= 0xAu;
    }
    while (v9);
    if (v21 + 14 <= 13)
    {
      memcpy((void *)(v16 + 21 + v19), (char *)&v44[1] + v21 + 5, -v21);
      LODWORD(v10) = *(_DWORD *)(v16 + 4);
    }
    if (v5 == 1)
    {
      if ((_DWORD)v10)
      {
        v22 = v6 + v10 - 9;
        v23 = *(int8x16_t **)(v16 + 8);
        if (v10 >= v22)
          v24 = v22;
        else
          v24 = v10;
        if ((*(_BYTE *)(v16 + 16) & 4) == 0)
        {
LABEL_44:
          WTF::StringBuilder::append(a1, v23, v24, v11, v12, v13, v14, v15);
          goto LABEL_47;
        }
      }
      else
      {
LABEL_45:
        v24 = 0;
        v23 = (int8x16_t *)&str_172_2;
      }
    }
    else
    {
      LODWORD(v25) = v10;
      while (1)
      {
        v26 = v25;
        v25 = (v25 - 1);
        if (v10 <= v25)
          break;
        v27 = *(_DWORD *)(v16 + 16);
        v23 = *(int8x16_t **)(v16 + 8);
        if ((v27 & 4) != 0)
          v28 = v23->u8[v25];
        else
          v28 = v23->u16[v25];
        if (v28 != 48)
          goto LABEL_40;
      }
      if (!(_DWORD)v10)
        goto LABEL_45;
      v27 = *(_DWORD *)(v16 + 16);
      v23 = *(int8x16_t **)(v16 + 8);
LABEL_40:
      if (v10 >= v26)
        v24 = v26;
      else
        v24 = v10;
      if ((v27 & 4) == 0)
        goto LABEL_44;
    }
    WTF::StringBuilder::append(a1, v23, v24, v11, v12, v13, v14, v15);
LABEL_47:
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
}

double JSC::roundNumberToIncrement(unsigned int a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v8;
  double v9;

  v4 = a2 / a3;
  v5 = trunc(v4);
  if (v5 == v4)
    goto LABEL_2;
  v8 = 1.0;
  if (v4 < 0.0)
    v8 = -1.0;
  v6 = v5 + v8;
  if (a1 < 4)
  {
LABEL_9:
    switch(a1)
    {
      case 0u:
      case 4u:
        if (v4 < 0.0)
          v6 = v5;
        return v6 * a3;
      case 1u:
      case 5u:
        if (v4 >= 0.0)
          v6 = v5;
        return v6 * a3;
      case 2u:
      case 6u:
        return v6 * a3;
      case 3u:
      case 7u:
        goto LABEL_2;
      case 8u:
        if (fmod(v5, 2.0) == 0.0)
          v6 = v5;
        return v6 * a3;
      default:
        __break(0xC471u);
        JUMPOUT(0x198C0C424);
    }
  }
  v9 = vabdd_f64(v4, v5);
  if (v9 >= 0.5)
  {
    if (v9 > 0.5)
      return v6 * a3;
    goto LABEL_9;
  }
LABEL_2:
  v6 = v5;
  return v6 * a3;
}

uint64_t JSC::roundNumberToIncrement(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  signed __int128 v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;

  if (a3 ^ 1 | a4)
  {
    v10 = __divti3();
    v12 = __PAIR128__(a2, a1) - __PAIR128__(v11, v10) * __PAIR128__(a4, a3);
    if (v12 != 0)
    {
      switch(a5)
      {
        case 0:
        case 2:
          v10 += v12 >= 0;
          return v10 * a3;
        case 1:
        case 3:
          v10 += *((uint64_t *)&v12 + 1) >> 63;
          return v10 * a3;
        case 4:
        case 6:
          if ((*((_QWORD *)&v12 + 1) & 0x8000000000000000) == 0 && v12 * 2 >= (__int128)__PAIR128__(a4, a3))
            goto LABEL_28;
          v13 = (__int128)__PAIR128__(a4, a3) < -(v12 * 2) && v12 < 0;
          goto LABEL_16;
        case 5:
        case 7:
          if ((*((_QWORD *)&v12 + 1) & 0x8000000000000000) == 0 && (__int128)__PAIR128__(a4, a3) < v12 * 2)
            goto LABEL_28;
          v13 = -(v12 * 2) >= (__int128)__PAIR128__(a4, a3) && v12 < 0;
LABEL_16:
          v14 = v13;
          v10 -= v14;
          break;
        case 8:
          if ((*((_QWORD *)&v12 + 1) & 0x8000000000000000) != 0)
          {
            v17 = (unsigned __int128)-(v12 * 2) >> 64;
            if ((__int128)__PAIR128__(a4, a3) < -(v12 * 2)
              || (!__CFADD__(v10, v11 >> 63) ? (v18 = v11) : (v18 = v11 + 1),
                  ((v10 - ((v10 + (v11 >> 63)) & 0xFFFFFFFFFFFFFFFELL)) & ((__PAIR128__(v11, v10)
                                                                          - __PAIR128__(v18, (v10 + (v11 >> 63)) & 0xFFFFFFFFFFFFFFFELL)) >> 64)) == 0xFFFFFFFFFFFFFFFFLL&& (v17 == a4 ? (v19 = -2 * (_QWORD)v12 == a3) : (v19 = 0), v19)))
            {
              --v10;
            }
          }
          else if ((__int128)__PAIR128__(a4, a3) < v12 * 2
                 || !(v11 & 0x8000000000000000 | ~(_DWORD)v10 & 1)
                 && (*((_QWORD *)&v12 + 1) == a4 ? (v15 = 2 * (_QWORD)v12 == a3) : (v15 = 0), v15))
          {
LABEL_28:
            ++v10;
          }
          break;
        default:
          return v10 * a3;
      }
      return v10 * a3;
    }
  }
  return a1;
}

BOOL JSC::intlOption<JSC::TemporalOverflow>(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v8;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  int *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t (*v63)(_QWORD *);
  _QWORD *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  _QWORD v68[3];

  v8 = a8;
  if (a2)
  {
    v14 = *(_QWORD *)(a1 + 56);
    v22 = JSC::JSObject::get(a2, a1, a3, a4, a5, a6, a7, a8);
    v67 = v22;
    if (*(_DWORD *)(v14 + 80))
    {
      v61 = *(_DWORD *)(v14 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v14 + 16))
        return 0;
    }
    if (v22 != 10)
    {
      if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v67, (JSC::JSGlobalObject *)a1, v16, v17, v18, v19, v20, v21, (int **)&v66);
        goto LABEL_10;
      }
      v24 = *(int **)(v22 + 8);
      if ((v24 & 1) != 0)
      {
        v24 = *JSC::JSRopeString::resolveRope(v22, (JSC::JSGlobalObject *)a1, (uint64_t)v16, v17, v23, v18, v19, v20, v21);
        if (!v24)
          goto LABEL_9;
      }
      else if (!v24)
      {
LABEL_9:
        v66 = (WTF::StringImpl *)v24;
LABEL_10:
        if (!*(_DWORD *)(v14 + 80))
          goto LABEL_11;
        v62 = *(_DWORD *)(v14 + 80);
        if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
        if (!*(_QWORD *)(v14 + 16))
        {
LABEL_11:
          if (a5)
          {
            v25 = a4 + 24 * a5;
            v26 = (_BYTE *)(a4 + 16);
            while (1)
            {
              v27 = *((_QWORD *)v26 - 1);
              v28 = v26 - 16;
              v29 = v27 ? v27 - 1 : 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v66, *((_QWORD *)v26 - 2), v29))
                break;
              v26 += 24;
              if (v28 + 24 == (_BYTE *)v25)
                goto LABEL_18;
            }
            v8 = *v26 != 0;
            goto LABEL_29;
          }
LABEL_18:
          if (a7)
          {
            v30 = a7 - 1;
            if (v30)
            {
              v31 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
              *v31 = 2;
              v31[1] = v30;
              *((_QWORD *)v31 + 1) = a6;
              v31[4] = 4;
            }
            else
            {
              v31 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
          }
          else
          {
            v31 = 0;
          }
          v65 = (WTF::StringImpl *)v31;
          v32 = *(_QWORD *)(a1 + 128);
          v33 = *(JSC::Heap ***)(a1 + 56);
          if ((v32 & 1) != 0)
          {
            v63 = *(uint64_t (**)(_QWORD *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
            v64 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            if ((a1 & 8) != 0)
              v64 = (_QWORD *)(a1 - 16);
            v68[0] = *v64;
            v68[1] = a1;
            v68[2] = a1 + 128;
            v32 = v63(v68);
          }
          v34 = JSC::ErrorInstance::create(v33, v32, &v65, 0, 0, 0, 2, 1);
          v41 = (JSC::Exception *)v34;
          if ((v34 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
          {
            v41 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
          }
          JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a1, v41, v40, v35, v36, v37, v38, v39);
          v42 = v65;
          v65 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
            {
              WTF::StringImpl::~StringImpl(v42, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
            }
            else
            {
              *(_DWORD *)v42 -= 2;
            }
          }
        }
        v8 = 0;
LABEL_29:
        v43 = v66;
        v66 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
          {
            WTF::StringImpl::~StringImpl(v43, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
          else
          {
            *(_DWORD *)v43 -= 2;
          }
        }
        return v8;
      }
      *v24 += 2;
      goto LABEL_9;
    }
  }
  return v8;
}

void JSC::rejectObjectWithCalendarOrTimeZone(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char **v10;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  JSC::VM *v33;

  v9 = *((_QWORD *)this + 7);
  v33 = (JSC::VM *)v9;
  v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v10 == &JSC::TemporalPlainTime::s_info
    || v10 == &JSC::TemporalPlainDate::s_info
    || v10 == &JSC::TemporalPlainDateTime::s_info)
  {
    v13 = "argument object must not have calendar or timeZone property";
    v14 = 60;
LABEL_17:
    JSC::throwTypeError((unint64_t)this, &v33, (uint64_t)v13, v14);
    return;
  }
  v16 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 968), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_11;
  v30 = *(_DWORD *)(v9 + 80);
  if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
  {
    v32 = v16;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v17, v18, v19, v20, v21, v22);
    v16 = v32;
  }
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_11:
    if (v16 != 10)
    {
      v13 = "argument object must not have calendar property";
      goto LABEL_16;
    }
    v29 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2448), v18, v19, v20, v21, v22);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_13;
    v31 = *(_DWORD *)(v9 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_13:
      if (v29 != 10)
      {
        v13 = "argument object must not have timeZone property";
LABEL_16:
        v14 = 48;
        goto LABEL_17;
      }
    }
  }
}

void JSC::TemporalPlainDate::visitChildren(JSC::TemporalPlainDate *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (v16)
    v17 = (v16 & 1) == 0;
  else
    v17 = 0;
  if (v17)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_13;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_13:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

void JSC::TemporalPlainDate::visitChildren(JSC::TemporalPlainDate *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  BOOL v6;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    if (*((_QWORD *)this + 3))
      v6 = (*((_QWORD *)this + 3) & 1) == 0;
    else
      v6 = 0;
    if (v6)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
}

unint64_t JSC::TemporalPlainDate::create(uint64_t a1, JSC::VM *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *(_QWORD **)(a1 + 40832);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::temporalPlainDateSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v14);
    v11[5] = result + (int)v14;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, a1 + 192, 32, 0, 0, v15, v16, v17);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = *a3;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(result + 24) = (char *)&JSC::LazyProperty<JSC::TemporalPlainDate,JSC::TemporalCalendar>::initLater<JSC::TemporalPlainDate::finishCreation(JSC::VM &)::$_0>(JSC::TemporalPlainDate::finishCreation(JSC::VM &)::$_0 const&)::theFunc
                           + 1;
  return result;
}

uint64_t JSC::TemporalPlainDate::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainDate::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::TemporalPlainDate::toPlainDate(unint64_t this, JSC::JSGlobalObject *a2, const Duration *a3)
{
  JSC::VM *v4;
  double v5;
  double v6;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  JSC::Heap **v11;
  JSC::Heap **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  JSC::Exception *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  double v30;
  int v31;
  _BOOL4 v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t *);
  uint64_t *v46;
  JSC::Heap **v47;
  uint64_t (*v48)(uint64_t *);
  uint64_t *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;

  v4 = *(JSC::VM **)(this + 56);
  v5 = *(double *)a2;
  if (*(double *)a2 < -271821.0 || v5 > 275760.0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v8 = 0x1400000002;
    v9 = "year is out of range";
    goto LABEL_10;
  }
  v6 = *((double *)a2 + 1);
  if (v6 < 1.0 || v6 > 12.0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v8 = 0x1500000002;
    v9 = "month is out of range";
LABEL_10:
    *(_QWORD *)(v8 + 8) = v9;
    *(_DWORD *)(v8 + 16) = 4;
    v50 = (WTF::StringImpl *)v8;
    v10 = *(_QWORD *)(this + 128);
    v11 = *(JSC::Heap ***)(this + 56);
    if ((v10 & 1) != 0)
    {
      v45 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
      v46 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v46 = (uint64_t *)(this - 16);
      v51 = *v46;
      v52 = this;
      v53 = (char *)(this + 128);
      v10 = v45(&v51);
    }
    v12 = v11;
    goto LABEL_12;
  }
  v30 = *((double *)a2 + 3);
  v31 = (int)v5;
  if (((int)v5 & 3) != 0)
  {
    v32 = 0;
  }
  else
  {
    HIDWORD(v41) = -1030792151 * v31 + 85899344;
    LODWORD(v41) = HIDWORD(v41);
    if ((v41 >> 4) < 0xA3D70B)
    {
      v32 = 1;
    }
    else
    {
      HIDWORD(v42) = -1030792151 * v31 + 85899344;
      LODWORD(v42) = HIDWORD(v42);
      v32 = (v42 >> 2) > 0x28F5C28;
    }
  }
  if (v30 >= 1.0)
  {
    v43 = v6;
    LOBYTE(v6) = JSC::ISO8601::daysInMonths[12 * v32 - 1 + v6];
    if (v30 <= (double)*(unint64_t *)&v6)
      return v31 & 0x1FFFFF | ((v43 & 0x1F) << 21) | (v30 << 26);
  }
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x1300000002;
  *(_QWORD *)(v44 + 8) = "day is out of range";
  *(_DWORD *)(v44 + 16) = 4;
  v50 = (WTF::StringImpl *)v44;
  v10 = *(_QWORD *)(this + 128);
  v12 = *(JSC::Heap ***)(this + 56);
  if ((v10 & 1) != 0)
  {
    v47 = *(JSC::Heap ***)(this + 56);
    v48 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v49 = (uint64_t *)(this - 16);
    else
      v49 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v51 = *v49;
    v52 = this;
    v53 = (char *)(this + 128);
    v10 = v48(&v51);
    v12 = v47;
  }
LABEL_12:
  v13 = JSC::ErrorInstance::create(v12, v10, &v50, 0, 0, 0, 2, 1);
  v20 = (JSC::Exception *)v13;
  if ((v13 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
  {
    v20 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)v13, 0, v14, v15, v16, v17, v18);
  }
  JSC::VM::throwException(v4, (JSC::JSGlobalObject *)this, v20, v19, v14, v15, v16, v17, v18);
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  return 69206016;
}

unint64_t JSC::TemporalPlainDate::tryCreateIfValid(unint64_t a1, JSC::VM *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v18;
  unint64_t v19;
  JSC::Heap **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD *);
  _QWORD *v46;
  WTF::StringImpl *v47;
  _QWORD v48[3];

  v9 = *(JSC::VM **)(a1 + 56);
  v10 = (*a3 << 6 >> 27) - 1;
  v11 = (*a3 << 11 >> 11) + (unsigned __int16)((__int16)v10 / 12);
  LODWORD(v12) = v10 - 12 * (((10923 * v10) >> 17) + ((10923 * v10) >> 31));
  v13 = (v12 & 0x8000) == 0;
  if ((v12 & 0x8000) != 0)
    v12 = 11;
  else
    v12 = (unsigned __int16)v12;
  if (!v13)
    --v11;
  HIDWORD(v15) = -1030792151 * v11 + 85899344;
  LODWORD(v15) = HIDWORD(v15);
  v14 = v15 >> 4;
  LODWORD(v15) = HIDWORD(v15);
  v16 = (v15 >> 2) > 0x28F5C28;
  if (v14 < 0xA3D70B)
    v16 = 1;
  if ((v11 & 3) != 0)
    v16 = 0;
  if ((__int128)(floor(floor(((double)v11 + -1.0) / 400.0)+ -4.0+ floor(((double)v11 + -1.0) * 0.25)+ -492.0+ ((double)v11 + -1970.0) * 365.0- (floor(((double)v11 + -1.0) / 100.0)+ -19.0))+ (double)(WTF::firstDayOfMonth[12 * v16 + v12] + (*a3 >> 26) - 1))* 0x4E94914F0000+ __PAIR128__(468, 0x6016A53048F67FFFLL) < __PAIR128__(936, 0xC02CFBCC009DFFFFLL))return JSC::TemporalPlainDate::create((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x3600000002;
  *(_QWORD *)(v18 + 8) = "date time is out of range of ECMAScript representation";
  *(_DWORD *)(v18 + 16) = 4;
  v47 = (WTF::StringImpl *)v18;
  v19 = *(_QWORD *)(a1 + 128);
  v20 = *(JSC::Heap ***)(a1 + 56);
  if ((v19 & 1) != 0)
  {
    v45 = *(uint64_t (**)(_QWORD *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v46 = (_QWORD *)(a1 - 16);
    else
      v46 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v48[0] = *v46;
    v48[1] = a1;
    v48[2] = a1 + 128;
    v19 = v45(v48);
  }
  v21 = JSC::ErrorInstance::create(v20, v19, &v47, 0, 0, 0, 2, 1);
  v28 = (JSC::Exception *)v21;
  if ((v21 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
  {
    v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
  }
  JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, v28, v27, v22, v23, v24, v25, v26);
  v36 = v47;
  v47 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  return 0;
}

unint64_t JSC::TemporalPlainDate::from(unint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  char v11;
  unsigned int *IfValid;
  unsigned int v13;
  char **v14;
  _DWORD *TemporalCalendarWithISODefault;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  int *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  BOOL v56;
  int v57;
  unint64_t v58;
  WTF *v59;
  uint64_t v60;
  unint64_t v61;
  JSC::Heap **v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  JSC::Exception *v70;
  WTF::StringImpl *v71;
  void *v72;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t (*v100)(__int128 *);
  _QWORD *v101;
  uint64_t (*v102)(__int128 *);
  _QWORD *v103;
  uint64_t (*v104)(__int128 *);
  _QWORD *v105;
  uint64_t (*v106)(WTF::StringImpl **);
  WTF::StringImpl **v107;
  int v108;
  uint64_t (*v109)(__int128 *);
  _QWORD *v110;
  _DWORD *v111;
  __int128 v112;
  __int128 v113;
  char v114;
  _BYTE v115[16];
  int v116;
  char v117;
  WTF *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  __int128 v123;
  char v124;
  _BYTE v125[16];
  int v126;
  unsigned __int8 v127;
  void *__src;
  int v129;
  unsigned int __n;
  size_t __n_4;
  unsigned __int8 v132;
  char v133;
  JSC::VM *v134;
  WTF::StringImpl *v135[3];

  v10 = *(_QWORD *)(a1 + 56);
  v134 = (JSC::VM *)v10;
  if ((_BYTE)a3)
    v11 = (a3 & 0xFF00) != 0;
  else
    v11 = 0;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  IfValid = (unsigned int *)this;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 < 0x17)
  {
    if (v13 == 2)
    {
      v28 = *(int **)(this + 8);
      if ((v28 & 1) != 0)
      {
        v28 = *JSC::JSRopeString::resolveRope(this, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
        if (!v28)
          goto LABEL_22;
      }
      else if (!v28)
      {
LABEL_22:
        if (*(_DWORD *)(v10 + 80))
        {
          v98 = *(_DWORD *)(v10 + 80);
          if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v10 + 16))
          {
            IfValid = 0;
            if (!v28)
              return (unint64_t)IfValid;
            goto LABEL_80;
          }
        }
        if (v28)
        {
          v29 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
          v30 = v28[1];
          v31 = ((unint64_t)v28[4] >> 2) & 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 1;
        }
        JSC::ISO8601::parseCalendarDateTime(v29, v30 | (v31 << 32), a3, a4, a5, a6, a7, a8, (uint64_t)&v122);
        if (!v133)
          goto LABEL_64;
        v112 = v122;
        LOBYTE(v113) = 0;
        v117 = 0;
        v32 = v127;
        if (v127)
        {
          v113 = v123;
          v114 = v124;
          v115[0] = 0;
          v116 = -1;
          v33 = v126;
          if (v126 != -1)
          {
            ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))off_1E35B10D8[v126])(v135, v115, v125);
            v116 = v33;
          }
          v117 = 1;
        }
        LOBYTE(v118) = 0;
        v121 = 0;
        v34 = v132;
        if (v132)
        {
          v118 = (WTF *)&v120;
          v119 = 8;
          this = (uint64_t)__src;
          if (__src == &__n_4)
          {
            v36 = __n;
            memcpy(&v120, __src, __n);
          }
          else
          {
            __src = &__n_4;
            v118 = (WTF *)this;
            v35 = v129;
            v36 = __n;
            v129 = 8;
            LODWORD(v119) = v35;
          }
          __n = 0;
          HIDWORD(v119) = v36;
          v34 = 1;
          v121 = 1;
        }
        if (v32)
          v56 = v113 == 0;
        else
          v56 = 1;
        v57 = !v56;
        if (v56)
        {
          v58 = *(_QWORD *)(a1 + 440);
          if ((v58 & 1) != 0)
          {
            v106 = *(uint64_t (**)(WTF::StringImpl **))(v58 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v107 = (WTF::StringImpl **)(a1 - 16);
            else
              v107 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            v135[0] = *v107;
            v135[1] = (WTF::StringImpl *)a1;
            v135[2] = (WTF::StringImpl *)(a1 + 440);
            v58 = v106(v135);
          }
          IfValid = (unsigned int *)JSC::TemporalPlainDate::tryCreateIfValid(a1, (JSC::VM *)v58, (int *)&v112, a4, a5, a6, a7, a8);
          if (!v121)
          {
LABEL_60:
            if (v117 && v116 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E35B10C8[v116])(v135, v115);
            if (!v57)
            {
LABEL_71:
              if (v133)
              {
                if (v132)
                {
                  v72 = __src;
                  if (&__n_4 != __src)
                  {
                    if (__src)
                    {
                      __src = 0;
                      v129 = 0;
                      WTF::fastFree((unint64_t)v72, (void *)this, a3, a4, a5, a6, a7, a8);
                    }
                  }
                }
                if (v127 && v126 != -1)
                  ((void (*)(__int128 *, _BYTE *))off_1E35B10C8[v126])(&v112, v125);
              }
              if (!v28)
                return (unint64_t)IfValid;
LABEL_80:
              if (*v28 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v28, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
              }
              else
              {
                *v28 -= 2;
              }
              return (unint64_t)IfValid;
            }
LABEL_64:
            v60 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v60 = 0x1300000002;
            *(_QWORD *)(v60 + 8) = "invalid date string";
            *(_DWORD *)(v60 + 16) = 4;
            v135[0] = (WTF::StringImpl *)v60;
            v61 = *(_QWORD *)(a1 + 128);
            v62 = *(JSC::Heap ***)(a1 + 56);
            if ((v61 & 1) != 0)
            {
              v100 = *(uint64_t (**)(__int128 *))(v61 & 0xFFFFFFFFFFFFFFFCLL);
              if ((a1 & 8) != 0)
                v101 = (_QWORD *)(a1 - 16);
              else
                v101 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
              *(_QWORD *)&v112 = *v101;
              *((_QWORD *)&v112 + 1) = a1;
              *(_QWORD *)&v113 = a1 + 128;
              v61 = v100(&v112);
            }
            v63 = JSC::ErrorInstance::create(v62, v61, v135, 0, 0, 0, 2, 1);
            v70 = (JSC::Exception *)v63;
            if ((v63 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x4C)))
            {
              v70 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v63, 0, v64, v65, v66, v67, v68);
            }
            JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v70, v69, v64, v65, v66, v67, v68);
            v71 = v135[0];
            v135[0] = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
              {
                WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
              }
              else
              {
                *(_DWORD *)v71 -= 2;
              }
            }
            IfValid = 0;
            goto LABEL_71;
          }
        }
        else
        {
          IfValid = 0;
          if (!v34)
            goto LABEL_60;
        }
        v59 = v118;
        if (&v120 != (uint64_t *)v118 && v118)
        {
          v118 = 0;
          LODWORD(v119) = 0;
          WTF::fastFree((unint64_t)v59, (void *)this, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_60;
      }
      *v28 += 2;
      goto LABEL_22;
    }
LABEL_33:
    JSC::throwTypeError(a1, &v134, (uint64_t)"can only convert to PlainDate from object or string values", 59);
    return 0;
  }
  v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v14 != &JSC::TemporalPlainDate::s_info)
  {
    if (v14 == &JSC::TemporalPlainDateTime::s_info)
    {
      v26 = *(_QWORD *)(a1 + 440);
      if ((v26 & 1) != 0)
      {
        v104 = *(uint64_t (**)(__int128 *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
        v105 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v105 = (_QWORD *)(a1 - 16);
        *(_QWORD *)&v122 = *v105;
        *((_QWORD *)&v122 + 1) = a1;
        *(_QWORD *)&v123 = a1 + 440;
        v26 = v104(&v122);
      }
      LODWORD(v122) = IfValid[4];
      v27 = &v122;
      return JSC::TemporalPlainDate::create(v10, (JSC::VM *)v26, v27, a4, a5, a6, a7, a8);
    }
    TemporalCalendarWithISODefault = (_DWORD *)JSC::TemporalCalendar::getTemporalCalendarWithISODefault(a1, this, a3, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_14;
    v99 = *(_DWORD *)(v10 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
    {
      v111 = TemporalCalendarWithISODefault;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
      TemporalCalendarWithISODefault = v111;
    }
    if (!*(_QWORD *)(v10 + 16))
    {
      if (&JSC::TemporalCalendar::s_info != (char **)(16
                                                     * *(unsigned int *)(16
                                                                       * (*TemporalCalendarWithISODefault & 0xFFFFFFFE)
                                                                       + 0x4C)))
        goto LABEL_34;
LABEL_14:
      v22 = TemporalCalendarWithISODefault[4];
      v23 = JSC::iso8601CalendarIDStorage;
      if (JSC::iso8601CalendarIDStorage == -1)
      {
        v24 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
        if (v24 != -1)
        {
          *(_QWORD *)&v122 = v135;
          *(_QWORD *)&v112 = &v122;
          std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v112, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
        }
        v23 = JSC::iso8601CalendarIDStorage;
      }
      if (v22 == v23)
      {
        LODWORD(v112) = JSC::TemporalCalendar::isoDateFromFields(a1, IfValid, v11, v17, v18, v19, v20, v21);
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_16;
        v108 = *(_DWORD *)(v10 + 80);
        if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_16:
          v26 = *(_QWORD *)(a1 + 440);
          if ((v26 & 1) != 0)
          {
            v109 = *(uint64_t (**)(__int128 *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v110 = (_QWORD *)(a1 - 16);
            else
              v110 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            *(_QWORD *)&v122 = *v110;
            *((_QWORD *)&v122 + 1) = a1;
            *(_QWORD *)&v123 = a1 + 440;
            v26 = v109(&v122);
          }
          v27 = &v112;
          return JSC::TemporalPlainDate::create(v10, (JSC::VM *)v26, v27, a4, a5, a6, a7, a8);
        }
      }
      else
      {
LABEL_34:
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x2800000002;
        *(_QWORD *)(v37 + 8) = "unimplemented: from non-ISO8601 calendar";
        *(_DWORD *)(v37 + 16) = 4;
        *(_QWORD *)&v112 = v37;
        v38 = *(_QWORD *)(a1 + 128);
        v39 = *(JSC::Heap ***)(a1 + 56);
        if ((v38 & 1) != 0)
        {
          v102 = *(uint64_t (**)(__int128 *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v103 = (_QWORD *)(a1 - 16);
          else
            v103 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          *(_QWORD *)&v122 = *v103;
          *((_QWORD *)&v122 + 1) = a1;
          *(_QWORD *)&v123 = a1 + 128;
          v38 = v102(&v122);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, (WTF::StringImpl **)&v112, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v47, v46, v41, v42, v43, v44, v45);
        v55 = (WTF::StringImpl *)v112;
        *(_QWORD *)&v112 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
    }
    return 0;
  }
  return (unint64_t)IfValid;
}

void JSC::TemporalPlainDate::toPartialDate(uint64_t this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  int8x16_t v21;
  char v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int8x16_t v31;
  char v32;
  double v33;
  WTF::AtomStringImpl *v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int8x16_t v50;
  char v51;
  double v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  JSC::Heap **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  JSC::Exception *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  JSC::Heap **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  JSC::Exception *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  JSC::Heap **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  JSC::Exception *v109;
  unsigned __int8 v110;
  double v111;
  double v112;
  uint64_t v113;
  const char *v114;
  unint64_t v115;
  JSC::Heap **v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  JSC::Exception *v124;
  WTF::StringImpl *v125;
  int v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t (*v148)(uint64_t *);
  uint64_t *v149;
  int v150;
  uint64_t (*v151)(uint64_t *);
  uint64_t *v152;
  int v153;
  int v154;
  uint64_t (*v155)(uint64_t *);
  uint64_t *v156;
  int v157;
  uint64_t (*v158)(uint64_t *);
  uint64_t *v159;
  double v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  JSC::JSObject *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;

  v12 = *(_QWORD *)(this + 56);
  v13 = v12 + 41952;
  v20 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a2, this, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1112), a3, a4, a5, a6, a7);
  v165 = v20;
  if (*(_DWORD *)(v12 + 80))
  {
    v144 = *(_DWORD *)(v12 + 80);
    if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_43;
  }
  if (v20 == (JSC::JSObject *)10)
  {
    v22 = 0;
    v23 = 0.0;
  }
  else
  {
    if ((unint64_t)v20 < 0xFFFE000000000000)
    {
      if ((unint64_t)v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v165, (JSC::JSGlobalObject *)this, v14, v15, v16, v17, v18, v19, v21);
      else
        *(_QWORD *)&v111 = (char *)v20 - 0x2000000000000;
      v23 = trunc(v111 + 0.0);
    }
    else
    {
      v23 = (double)(int)v20;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v146 = *(_DWORD *)(v12 + 80);
      if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_43;
    }
    if (v23 <= 0.0
      || (((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
        ? (v53 = (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        : (v53 = 1),
          !v53))
    {
      v54 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v54 = 0x2800000002;
      *(_QWORD *)(v54 + 8) = "day property must be positive and finite";
      *(_DWORD *)(v54 + 16) = 4;
      v164 = (WTF::StringImpl *)v54;
      v55 = *(_QWORD *)(this + 128);
      v56 = *(JSC::Heap ***)(this + 56);
      if ((v55 & 1) != 0)
      {
        v148 = *(uint64_t (**)(uint64_t *))(v55 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v149 = (uint64_t *)(this - 16);
        else
          v149 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
        v166 = *v149;
        v167 = this;
        v168 = (char *)(this + 128);
        v55 = v148(&v166);
      }
      v57 = JSC::ErrorInstance::create(v56, v55, &v164, 0, 0, 0, 2, 1);
      v64 = (JSC::Exception *)v57;
      if ((v57 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C)))
      {
        v64 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v57, 0, v58, v59, v60, v61, v62);
      }
      JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v64, v63, v58, v59, v60, v61, v62);
      v72 = v164;
      v164 = 0;
      if (!v72)
        goto LABEL_43;
      goto LABEL_41;
    }
    v22 = 1;
  }
  v30 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)a2, this, *(_QWORD *)(*(_QWORD *)v13 + 1928), v15, v16, v17, v18, v19);
  v164 = v30;
  if (*(_DWORD *)(v12 + 80))
  {
    v145 = *(_DWORD *)(v12 + 80);
    if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_43;
    v30 = v164;
  }
  if (v30 == (WTF::StringImpl *)10)
  {
    v32 = 0;
    v33 = 0.0;
  }
  else
  {
    if ((unint64_t)v30 < 0xFFFE000000000000)
    {
      if ((unint64_t)v30 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v164, (JSC::JSGlobalObject *)this, v24, v25, v26, v27, v28, v29, v31);
      else
        *(_QWORD *)&v112 = (char *)v30 - 0x2000000000000;
      v33 = trunc(v112 + 0.0);
    }
    else
    {
      v33 = (double)(int)v30;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v150 = *(_DWORD *)(v12 + 80);
      if ((v150 & 0x27) != 0 && (v150 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v24, v25, v26, v27, v28, v29);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_43;
    }
    if (v33 <= 0.0
      || (((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
        ? (v73 = (*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        : (v73 = 1),
          !v73))
    {
      v74 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v74 = 0x2A00000002;
      *(_QWORD *)(v74 + 8) = "month property must be positive and finite";
      *(_DWORD *)(v74 + 16) = 4;
      v163 = (WTF::StringImpl *)v74;
      v75 = *(_QWORD *)(this + 128);
      v76 = *(JSC::Heap ***)(this + 56);
      if ((v75 & 1) != 0)
      {
        v151 = *(uint64_t (**)(uint64_t *))(v75 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v152 = (uint64_t *)(this - 16);
        else
          v152 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
        v166 = *v152;
        v167 = this;
        v168 = (char *)(this + 128);
        v75 = v151(&v166);
      }
      v77 = JSC::ErrorInstance::create(v76, v75, &v163, 0, 0, 0, 2, 1);
      v84 = (JSC::Exception *)v77;
      if ((v77 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x4C)))
      {
        v84 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v77, 0, v78, v79, v80, v81, v82);
      }
      JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v84, v83, v78, v79, v80, v81, v82);
      v72 = v163;
      v163 = 0;
      if (!v72)
        goto LABEL_43;
      goto LABEL_41;
    }
    v32 = 1;
  }
  v41 = JSC::JSObject::get((unsigned int *)a2, this, *(_QWORD *)(*(_QWORD *)v13 + 1936), v25, v26, v27, v28, v29);
  v163 = (WTF::StringImpl *)v41;
  if (*(_DWORD *)(v12 + 80))
  {
    v147 = *(_DWORD *)(v12 + 80);
    if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v35, v36, v37, v38, v39, v40);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_43;
    v41 = (unint64_t)v163;
  }
  if (v41 == 10)
  {
LABEL_9:
    v49 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)a2, this, *(_QWORD *)(*(_QWORD *)v13 + 2664), v36, v37, v38, v39, v40);
    v162 = v49;
    if (*(_DWORD *)(v12 + 80))
    {
      v153 = *(_DWORD *)(v12 + 80);
      if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v43, v44, v45, v46, v47, v48);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_43;
    }
    if (v49 == (WTF::StringImpl *)10)
    {
      v51 = 0;
      v52 = 0.0;
LABEL_67:
      *(double *)a8 = v52;
      *(_BYTE *)(a8 + 8) = v51;
      *(double *)(a8 + 16) = v33;
      *(_BYTE *)(a8 + 24) = v32;
      *(double *)(a8 + 32) = v23;
      *(_BYTE *)(a8 + 40) = v22;
      return;
    }
    if ((unint64_t)v49 < 0xFFFE000000000000)
    {
      if ((unint64_t)v49 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v162, (JSC::JSGlobalObject *)this, v43, v44, v45, v46, v47, v48, v50);
      else
        *(_QWORD *)&v143 = (char *)v49 - 0x2000000000000;
      v52 = trunc(v143 + 0.0);
    }
    else
    {
      v52 = (double)(int)v49;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v160 = v52;
      v157 = *(_DWORD *)(v12 + 80);
      if ((v157 & 0x27) != 0 && (v157 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v43, v44, v45, v46, v47, v48);
      v52 = v160;
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_43;
    }
    if (((*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
      || (*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      v51 = 1;
      goto LABEL_67;
    }
    v99 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v99 = 0x1C00000002;
    *(_QWORD *)(v99 + 8) = "year property must be finite";
    *(_DWORD *)(v99 + 16) = 4;
    v161 = (WTF::StringImpl *)v99;
    v100 = *(_QWORD *)(this + 128);
    v101 = *(JSC::Heap ***)(this + 56);
    if ((v100 & 1) != 0)
    {
      v158 = *(uint64_t (**)(uint64_t *))(v100 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v159 = (uint64_t *)(this - 16);
      else
        v159 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v166 = *v159;
      v167 = this;
      v168 = (char *)(this + 128);
      v100 = v158(&v166);
    }
    v102 = JSC::ErrorInstance::create(v101, v100, &v161, 0, 0, 0, 2, 1);
    v109 = (JSC::Exception *)v102;
    if ((v102 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v102 & 0xFFFFFFFE) + 0x4C)))
    {
      v109 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v102, 0, v103, v104, v105, v106, v107);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v109, v108, v103, v104, v105, v106, v107);
    v72 = v161;
    v161 = 0;
    if (!v72)
      goto LABEL_43;
LABEL_41:
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
LABEL_43:
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return;
  }
  if ((v41 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v41 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v163, (JSC::JSGlobalObject *)this, v35, v36, v37, v38, v39, v40, (int **)&v162);
    goto LABEL_51;
  }
  v85 = *(WTF::StringImpl **)(v41 + 8);
  if ((v85 & 1) != 0)
  {
    v85 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v41, (JSC::JSGlobalObject *)this, (uint64_t)v35, v36, v42, v37, v38, v39, v40);
    if (!v85)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v85)
LABEL_49:
    *(_DWORD *)v85 += 2;
LABEL_50:
  v162 = v85;
LABEL_51:
  if (*(_DWORD *)(v12 + 80))
  {
    v154 = *(_DWORD *)(v12 + 80);
    if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v35, v36, v37, v38, v39, v40);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_100;
  }
  v86 = v162;
  if (!v162 || *((_DWORD *)v162 + 1) != 3)
    goto LABEL_93;
  v87 = *((_QWORD *)v162 + 1);
  if ((*((_BYTE *)v162 + 16) & 4) != 0)
  {
    if (*(_BYTE *)v87 != 77)
      goto LABEL_93;
    v88 = *(unsigned __int8 *)(v87 + 2);
    if ((v88 - 48) >= 0xA)
      goto LABEL_93;
    v89 = *(unsigned __int8 *)(v87 + 1);
  }
  else
  {
    if (*(_WORD *)v87 != 77)
      goto LABEL_93;
    v88 = *(unsigned __int16 *)(v87 + 4);
    if ((v88 - 48) >= 0xA)
      goto LABEL_93;
    v89 = *(unsigned __int16 *)(v87 + 2);
  }
  if (v89 == 49)
  {
    v110 = v88 - 38;
  }
  else
  {
    if (v89 != 48)
      goto LABEL_93;
    v110 = v88 - 48;
  }
  if (v110)
  {
    if (v30 == (WTF::StringImpl *)10)
    {
      v33 = (double)v110;
LABEL_109:
      v162 = 0;
      if (*(_DWORD *)v86 != 2)
      {
        *(_DWORD *)v86 -= 2;
        v32 = 1;
        goto LABEL_9;
      }
      v32 = 1;
      v126 = 1;
      goto LABEL_104;
    }
    if (v33 == (double)v110)
      goto LABEL_109;
    v113 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v113 = 0x3E00000002;
    v114 = "month and monthCode properties must match if both are provided";
    goto LABEL_94;
  }
LABEL_93:
  v113 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v113 = 0x1A00000002;
  v114 = "Invalid monthCode property";
LABEL_94:
  *(_QWORD *)(v113 + 8) = v114;
  *(_DWORD *)(v113 + 16) = 4;
  v161 = (WTF::StringImpl *)v113;
  v115 = *(_QWORD *)(this + 128);
  v116 = *(JSC::Heap ***)(this + 56);
  if ((v115 & 1) != 0)
  {
    v155 = *(uint64_t (**)(uint64_t *))(v115 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v156 = (uint64_t *)(this - 16);
    else
      v156 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v166 = *v156;
    v167 = this;
    v168 = (char *)(this + 128);
    v115 = v155(&v166);
  }
  v117 = JSC::ErrorInstance::create(v116, v115, &v161, 0, 0, 0, 2, 1);
  v124 = (JSC::Exception *)v117;
  if ((v117 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x4C)))
  {
    v124 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v117, 0, v118, v119, v120, v121, v122);
  }
  JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v124, v123, v118, v119, v120, v121, v122);
  v125 = v161;
  v161 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
LABEL_100:
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  v86 = v162;
  v162 = 0;
  if (!v86)
    return;
  if (*(_DWORD *)v86 != 2)
  {
    *(_DWORD *)v86 -= 2;
    return;
  }
  v126 = 0;
LABEL_104:
  WTF::StringImpl::~StringImpl(v86, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
  WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
  if (v126)
    goto LABEL_9;
}

uint64_t JSC::TemporalPlainDate::with(uint64_t a1, unint64_t a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v52;
  const Duration *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  double v61;
  double v62;
  unsigned int v63;
  double v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t (*v74)(JSC::VM **);
  JSC::VM **v75;
  int v76;
  uint64_t (*v77)(JSC::VM **);
  JSC::VM **v78;
  int v79;
  int v80;
  WTF::StringImpl *v81;
  unsigned __int8 v82;
  double v83;
  unsigned __int8 v84;
  double v85;
  unsigned __int8 v86;
  JSC::VM *v87;
  char v88;
  JSC::VM *v89;
  uint64_t v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;

  v8 = a4;
  v95 = *MEMORY[0x1E0C80C00];
  v87 = *(JSC::VM **)(a2 + 56);
  v12 = v87;
  JSC::rejectObjectWithCalendarOrTimeZone((JSC *)a2, a3, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v87 + 20))
  {
    v73 = *((_DWORD *)v87 + 20);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v87 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*((_QWORD *)v87 + 2))
      return 69206016;
  }
  v19 = *(_QWORD *)(a1 + 24);
  if ((v19 & 1) != 0)
  {
    v74 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v75 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v75 = (JSC::VM **)(a1 - 16);
    v89 = *v75;
    v90 = a1;
    v91 = a1 + 24;
    v19 = v74(&v89);
  }
  v20 = *(_DWORD *)(v19 + 16);
  v21 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v22 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v22 != -1)
    {
      v89 = (JSC::VM *)&v88;
      *(double *)&v81 = COERCE_DOUBLE(&v89);
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v21 = JSC::iso8601CalendarIDStorage;
  }
  if (v20 != v21)
  {
    *(double *)&v32 = COERCE_DOUBLE(WTF::fastCompactMalloc((WTF *)0x20));
    *(_QWORD *)v32 = 0x2800000002;
    *(_QWORD *)(v32 + 8) = "unimplemented: with non-ISO8601 calendar";
    *(_DWORD *)(v32 + 16) = 4;
    v81 = (WTF::StringImpl *)v32;
    v33 = *(_QWORD *)(a2 + 128);
    v34 = *(JSC::Heap ***)(a2 + 56);
    if ((v33 & 1) != 0)
    {
      v77 = *(uint64_t (**)(JSC::VM **))(v33 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v78 = (JSC::VM **)(a2 - 16);
      else
        v78 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v89 = *v78;
      v90 = a2;
      v91 = a2 + 128;
      v33 = v77(&v89);
    }
    v35 = JSC::ErrorInstance::create(v34, v33, &v81, 0, 0, 0, 2, 1);
    v42 = (JSC::Exception *)v35;
    if ((v35 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
    {
      v42 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
    }
    JSC::VM::throwException(v12, (JSC::JSGlobalObject *)a2, v42, v41, v36, v37, v38, v39, v40);
    v50 = v81;
    *(double *)&v81 = 0.0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    return 69206016;
  }
  JSC::TemporalPlainDate::toPartialDate(a2, a3, v14, v15, v16, v17, v18, (uint64_t)&v81);
  if (*((_DWORD *)v12 + 20))
  {
    v76 = *((_DWORD *)v12 + 20);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*((_QWORD *)v12 + 2))
      return 69206016;
  }
  v29 = v82;
  v30 = v84;
  v31 = v86;
  if (!v82 && !v84 && !v86)
  {
    JSC::throwTypeError(a2, &v87, (uint64_t)"Object must contain at least one Temporal date property", 56);
    return 69206016;
  }
  v89 = *(JSC::VM **)(a2 + 56);
  if (v8 == 10)
    goto LABEL_21;
  if ((v8 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a2, &v89, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_21:
    v8 = 0;
  }
  if (*((_DWORD *)v12 + 20))
  {
    v79 = *((_DWORD *)v12 + 20);
    if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*((_QWORD *)v12 + 2))
      return 69206016;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 2104);
  v89 = (JSC::VM *)"constrain";
  v90 = 10;
  LOBYTE(v91) = 0;
  v92 = "reject";
  v93 = 7;
  v94 = 1;
  v59 = JSC::intlOption<JSC::TemporalOverflow>(a2, (unsigned int *)v8, v52, (uint64_t)&v89, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*((_DWORD *)v12 + 20))
  {
    v80 = *((_DWORD *)v12 + 20);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v53, v54, v55, v56, v57, v58);
    if (*((_QWORD *)v12 + 2))
      return 69206016;
  }
  v60 = *(_DWORD *)(a1 + 16);
  v61 = (double)(v60 << 11 >> 11);
  if (v29)
    v61 = *(double *)&v81;
  v62 = (double)(v60 << 6 >> 27);
  if (v30)
    v62 = v83;
  v63 = (v60 >> 26);
  v64 = v85;
  if (!v31)
    v64 = (double)v63;
  return JSC::TemporalCalendar::isoDateFromFields(a2, v59, v53, v61, v62, v64);
}

double JSC::TemporalPlainDate::until@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int DifferenceOptions;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  JSC::Heap **v49;
  uint64_t (*v50)(__int128 *);
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  JSC::Heap **v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  JSC::Exception *v87;
  uint64_t (*v88)(__int128 *);
  _QWORD *v89;
  uint64_t (*v90)(__int128 *);
  _QWORD *v91;
  int v92;
  uint64_t (*v93)(__int128 *);
  _QWORD *v94;
  int v95;
  int v96;
  uint64_t (*v97)(WTF::StringImpl **);
  WTF::StringImpl **v98;
  WTF::StringImpl *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  WTF::StringImpl *v106[3];

  v14 = *(_QWORD *)(a2 + 56);
  v16 = (uint64_t *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 24);
  if ((v15 & 1) != 0)
  {
    v88 = *(uint64_t (**)(__int128 *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v89 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v89 = (_QWORD *)(a1 - 16);
    *(_QWORD *)&v101 = *v89;
    *((_QWORD *)&v101 + 1) = a1;
    *(_QWORD *)&v102 = a1 + 24;
    v15 = v88(&v101);
  }
  v17 = *(_QWORD *)(a3 + 24);
  if ((v17 & 1) != 0)
  {
    v90 = *(uint64_t (**)(__int128 *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v91 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v91 = (_QWORD *)(a3 - 16);
    *(_QWORD *)&v101 = *v91;
    *((_QWORD *)&v101 + 1) = a3;
    *(_QWORD *)&v102 = a3 + 24;
    v17 = v90(&v101);
  }
  v24 = JSC::TemporalCalendar::equals((JSC::TemporalCalendar *)v15, (JSC::JSGlobalObject *)a2, (JSC::TemporalCalendar *)v17, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v92 = *(_DWORD *)(v14 + 80);
    if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_28;
  }
  if (!v24)
  {
    v46 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v46 = 0x1400000002;
    *(_QWORD *)(v46 + 8) = "calendars must match";
    *(_DWORD *)(v46 + 16) = 4;
    v106[0] = (WTF::StringImpl *)v46;
    v48 = a2 + 128;
    v47 = *(_QWORD *)(a2 + 128);
    v49 = *(JSC::Heap ***)(a2 + 56);
    if ((v47 & 1) == 0)
    {
LABEL_23:
      v53 = JSC::ErrorInstance::create(v49, v47, v106, 0, 0, 0, 2, 1);
      v60 = (JSC::Exception *)v53;
      if ((v53 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
      {
        v60 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v53, 0, v54, v55, v56, v57, v58);
      }
      JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, v60, v59, v54, v55, v56, v57, v58);
      v68 = v106[0];
      v106[0] = 0;
      if (!v68)
        goto LABEL_28;
LABEL_26:
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
LABEL_28:
      *(_QWORD *)&v45 = 0;
      a9[3] = 0u;
      a9[4] = 0u;
      a9[1] = 0u;
      a9[2] = 0u;
      *a9 = 0u;
      return *(double *)&v45;
    }
    v50 = *(uint64_t (**)(__int128 *))(v47 & 0xFFFFFFFFFFFFFFFCLL);
    v51 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v51 = (_QWORD *)(a2 - 16);
LABEL_53:
    *(_QWORD *)&v101 = *v51;
    *((_QWORD *)&v101 + 1) = a2;
    *(_QWORD *)&v102 = v48;
    v47 = v50(&v101);
    goto LABEL_23;
  }
  v25 = *v16;
  if ((*v16 & 1) != 0)
  {
    v93 = *(uint64_t (**)(__int128 *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v94 = (_QWORD *)(a1 - 16);
    else
      v94 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v101 = *v94;
    *((_QWORD *)&v101 + 1) = a1;
    *(_QWORD *)&v102 = v16;
    v25 = v93(&v101);
  }
  v26 = *(_DWORD *)(v25 + 16);
  v27 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v28 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v28 != -1)
    {
      *(_QWORD *)&v101 = &v100;
      v106[0] = (WTF::StringImpl *)&v101;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, v106, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v27 = JSC::iso8601CalendarIDStorage;
  }
  if (v26 != v27)
  {
    v52 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v52 = 0x2800000002;
    *(_QWORD *)(v52 + 8) = "unimplemented: with non-ISO8601 calendar";
    *(_DWORD *)(v52 + 16) = 4;
    v106[0] = (WTF::StringImpl *)v52;
    v48 = a2 + 128;
    v47 = *(_QWORD *)(a2 + 128);
    v49 = *(JSC::Heap ***)(a2 + 56);
    if ((v47 & 1) == 0)
      goto LABEL_23;
    v50 = *(uint64_t (**)(__int128 *))(v47 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v51 = (_QWORD *)(a2 - 16);
    else
      v51 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    goto LABEL_53;
  }
  DifferenceOptions = JSC::extractDifferenceOptions(a2, a4, 1, 3, 3, v21, v22, v23);
  v37 = v36;
  if (*(_DWORD *)(v14 + 80))
  {
    v95 = *(_DWORD *)(v14 + 80);
    if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v29, v30, v31, v32, v33, v34);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_28;
  }
  LODWORD(v106[0]) = *(_DWORD *)(a1 + 16);
  LODWORD(v100) = *(_DWORD *)(a3 + 16);
  JSC::TemporalCalendar::isoDateDifference(a2, (int *)v106, (int *)&v100, BYTE1(DifferenceOptions), (uint64_t)&v101);
  if (*(_DWORD *)(v14 + 80))
  {
    v96 = *(_DWORD *)(v14 + 80);
    if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v38, v39, v40, v41, v42, v43);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_28;
  }
  if (DifferenceOptions == 3 && v37 == 1.0)
    goto LABEL_17;
  if (DifferenceOptions != 3)
  {
    v77 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v77 = 0x2D00000002;
    *(_QWORD *)(v77 + 8) = "unimplemented: depends on Duration relativeTo";
    *(_DWORD *)(v77 + 16) = 4;
    v100 = (WTF::StringImpl *)v77;
    v78 = *(_QWORD *)(a2 + 128);
    v79 = *(JSC::Heap ***)(a2 + 56);
    if ((v78 & 1) != 0)
    {
      v97 = *(uint64_t (**)(WTF::StringImpl **))(v78 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v98 = (WTF::StringImpl **)(a2 - 16);
      else
        v98 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v106[0] = *v98;
      v106[1] = (WTF::StringImpl *)a2;
      v106[2] = (WTF::StringImpl *)(a2 + 128);
      v78 = v97(v106);
    }
    v80 = JSC::ErrorInstance::create(v79, v78, &v100, 0, 0, 0, 2, 1);
    v87 = (JSC::Exception *)v80;
    if ((v80 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x4C)))
    {
      v87 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v80, 0, v81, v82, v83, v84, v85);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, v87, v86, v81, v82, v83, v84, v85);
    v68 = v100;
    v100 = 0;
    if (!v68)
      goto LABEL_28;
    goto LABEL_26;
  }
  v105 = 0u;
  v104 = 0u;
  v103 = 0u;
  JSC::TemporalDuration::round((double *)&v101, 3u, BYTE2(DifferenceOptions), v37);
LABEL_17:
  v44 = v104;
  a9[2] = v103;
  a9[3] = v44;
  a9[4] = v105;
  v45 = v102;
  *a9 = v101;
  a9[1] = v45;
  return *(double *)&v45;
}

double JSC::TemporalPlainDate::since@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t DifferenceOptions;
  double v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double result;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  JSC::Heap **v59;
  uint64_t (*v60)(__int128 *);
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  JSC::Exception *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  JSC::Heap **v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  JSC::Exception *v97;
  uint64_t (*v98)(__int128 *);
  _QWORD *v99;
  uint64_t (*v100)(__int128 *);
  _QWORD *v101;
  int v102;
  uint64_t (*v103)(__int128 *);
  _QWORD *v104;
  int v105;
  int v106;
  uint64_t (*v107)(WTF::StringImpl **);
  WTF::StringImpl **v108;
  WTF::StringImpl *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  WTF::StringImpl *v115[3];

  v14 = *(_QWORD *)(a2 + 56);
  v16 = (uint64_t *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 24);
  if ((v15 & 1) != 0)
  {
    v98 = *(uint64_t (**)(__int128 *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v99 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v99 = (_QWORD *)(a1 - 16);
    *(_QWORD *)&v110 = *v99;
    *((_QWORD *)&v110 + 1) = a1;
    *(_QWORD *)&v111 = a1 + 24;
    v15 = v98(&v110);
  }
  v17 = *(_QWORD *)(a3 + 24);
  if ((v17 & 1) != 0)
  {
    v100 = *(uint64_t (**)(__int128 *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v101 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v101 = (_QWORD *)(a3 - 16);
    *(_QWORD *)&v110 = *v101;
    *((_QWORD *)&v110 + 1) = a3;
    *(_QWORD *)&v111 = a3 + 24;
    v17 = v100(&v110);
  }
  v24 = JSC::TemporalCalendar::equals((JSC::TemporalCalendar *)v15, (JSC::JSGlobalObject *)a2, (JSC::TemporalCalendar *)v17, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v102 = *(_DWORD *)(v14 + 80);
    if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  if (!v24)
  {
    v56 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v56 = 0x1400000002;
    *(_QWORD *)(v56 + 8) = "calendars must match";
    *(_DWORD *)(v56 + 16) = 4;
    v115[0] = (WTF::StringImpl *)v56;
    v58 = a2 + 128;
    v57 = *(_QWORD *)(a2 + 128);
    v59 = *(JSC::Heap ***)(a2 + 56);
    if ((v57 & 1) == 0)
    {
LABEL_45:
      v63 = JSC::ErrorInstance::create(v59, v57, v115, 0, 0, 0, 2, 1);
      v70 = (JSC::Exception *)v63;
      if ((v63 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x4C)))
      {
        v70 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v63, 0, v64, v65, v66, v67, v68);
      }
      JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, v70, v69, v64, v65, v66, v67, v68);
      v78 = v115[0];
      v115[0] = 0;
      if (!v78)
        goto LABEL_50;
LABEL_48:
      if (*(_DWORD *)v78 == 2)
      {
        WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v78 -= 2;
      }
LABEL_50:
      result = 0.0;
      *(_OWORD *)(a9 + 48) = 0u;
      *(_OWORD *)(a9 + 64) = 0u;
      *(_OWORD *)(a9 + 16) = 0u;
      *(_OWORD *)(a9 + 32) = 0u;
      *(_OWORD *)a9 = 0u;
      return result;
    }
    v60 = *(uint64_t (**)(__int128 *))(v57 & 0xFFFFFFFFFFFFFFFCLL);
    v61 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v61 = (_QWORD *)(a2 - 16);
LABEL_76:
    *(_QWORD *)&v110 = *v61;
    *((_QWORD *)&v110 + 1) = a2;
    *(_QWORD *)&v111 = v58;
    v57 = v60(&v110);
    goto LABEL_45;
  }
  v25 = *v16;
  if ((*v16 & 1) != 0)
  {
    v103 = *(uint64_t (**)(__int128 *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v104 = (_QWORD *)(a1 - 16);
    else
      v104 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v110 = *v104;
    *((_QWORD *)&v110 + 1) = a1;
    *(_QWORD *)&v111 = v16;
    v25 = v103(&v110);
  }
  v26 = *(_DWORD *)(v25 + 16);
  v27 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v28 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v28 != -1)
    {
      *(_QWORD *)&v110 = &v109;
      v115[0] = (WTF::StringImpl *)&v110;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, v115, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v27 = JSC::iso8601CalendarIDStorage;
  }
  if (v26 != v27)
  {
    v62 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v62 = 0x2800000002;
    *(_QWORD *)(v62 + 8) = "unimplemented: with non-ISO8601 calendar";
    *(_DWORD *)(v62 + 16) = 4;
    v115[0] = (WTF::StringImpl *)v62;
    v58 = a2 + 128;
    v57 = *(_QWORD *)(a2 + 128);
    v59 = *(JSC::Heap ***)(a2 + 56);
    if ((v57 & 1) == 0)
      goto LABEL_45;
    v60 = *(uint64_t (**)(__int128 *))(v57 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v61 = (_QWORD *)(a2 - 16);
    else
      v61 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    goto LABEL_76;
  }
  DifferenceOptions = JSC::extractDifferenceOptions(a2, a4, 1, 3, 3, v21, v22, v23);
  v37 = v36;
  if (*(_DWORD *)(v14 + 80))
  {
    v105 = *(_DWORD *)(v14 + 80);
    if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v29, v30, v31, v32, v33, v34);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  v38 = DifferenceOptions >> 16;
  if (BYTE2(DifferenceOptions) <= 5u && ((0x33u >> SBYTE2(DifferenceOptions)) & 1) != 0)
    v38 = qword_199159890[SBYTE2(DifferenceOptions)];
  LODWORD(v115[0]) = *(_DWORD *)(a1 + 16);
  LODWORD(v109) = *(_DWORD *)(a3 + 16);
  JSC::TemporalCalendar::isoDateDifference(a2, (int *)v115, (int *)&v109, BYTE1(DifferenceOptions), (uint64_t)&v110);
  if (*(_DWORD *)(v14 + 80))
  {
    v106 = *(_DWORD *)(v14 + 80);
    if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v39, v40, v41, v42, v43, v44);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_50;
  }
  if (DifferenceOptions == 3 && v37 == 1.0)
    goto LABEL_20;
  if (DifferenceOptions != 3)
  {
    v87 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v87 = 0x2D00000002;
    *(_QWORD *)(v87 + 8) = "unimplemented: depends on Duration relativeTo";
    *(_DWORD *)(v87 + 16) = 4;
    v109 = (WTF::StringImpl *)v87;
    v88 = *(_QWORD *)(a2 + 128);
    v89 = *(JSC::Heap ***)(a2 + 56);
    if ((v88 & 1) != 0)
    {
      v107 = *(uint64_t (**)(WTF::StringImpl **))(v88 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v108 = (WTF::StringImpl **)(a2 - 16);
      else
        v108 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v115[0] = *v108;
      v115[1] = (WTF::StringImpl *)a2;
      v115[2] = (WTF::StringImpl *)(a2 + 128);
      v88 = v107(v115);
    }
    v90 = JSC::ErrorInstance::create(v89, v88, &v109, 0, 0, 0, 2, 1);
    v97 = (JSC::Exception *)v90;
    if ((v90 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C)))
    {
      v97 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v90, 0, v91, v92, v93, v94, v95);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, v97, v96, v91, v92, v93, v94, v95);
    v78 = v109;
    v109 = 0;
    if (!v78)
      goto LABEL_50;
    goto LABEL_48;
  }
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  JSC::TemporalDuration::round((double *)&v110, 3u, v38, v37);
LABEL_20:
  v45 = v111;
  *(_OWORD *)a9 = v110;
  *(_OWORD *)(a9 + 16) = v45;
  v46 = v113;
  *(_OWORD *)(a9 + 32) = v112;
  *(_OWORD *)(a9 + 48) = v46;
  *(_OWORD *)(a9 + 64) = v114;
  if (*(double *)a9 != 0.0)
    *(double *)a9 = -*(double *)a9;
  v47 = *(double *)(a9 + 8);
  if (v47 != 0.0)
    *(double *)(a9 + 8) = -v47;
  v48 = *(double *)(a9 + 16);
  if (v48 != 0.0)
    *(double *)(a9 + 16) = -v48;
  v49 = *(double *)(a9 + 24);
  if (v49 != 0.0)
    *(double *)(a9 + 24) = -v49;
  v50 = *(double *)(a9 + 32);
  if (v50 != 0.0)
    *(double *)(a9 + 32) = -v50;
  v51 = *(double *)(a9 + 40);
  if (v51 != 0.0)
    *(double *)(a9 + 40) = -v51;
  v52 = *(double *)(a9 + 48);
  if (v52 != 0.0)
    *(double *)(a9 + 48) = -v52;
  v53 = *(double *)(a9 + 56);
  if (v53 != 0.0)
    *(double *)(a9 + 56) = -v53;
  v54 = *(double *)(a9 + 64);
  if (v54 != 0.0)
    *(double *)(a9 + 64) = -v54;
  result = *(double *)(a9 + 72);
  if (result != 0.0)
  {
    result = -result;
    *(double *)(a9 + 72) = result;
  }
  return result;
}

unint64_t JSC::temporalDurationConstructorFuncFrom(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t (*v14)(_QWORD *);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[5];
  _QWORD v19[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v8 = 10;
    return JSC::TemporalDuration::toTemporalDuration(this, v8, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v8 = *((_QWORD *)a2 + 6);
  if ((v8 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::TemporalDuration::toTemporalDuration(this, v8, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v9 = *(_QWORD *)(this + 56);
  v10 = *(_OWORD *)(v8 + 48);
  v18[1] = *(_OWORD *)(v8 + 32);
  v18[2] = v10;
  v11 = *(_OWORD *)(v8 + 80);
  v18[3] = *(_OWORD *)(v8 + 64);
  v18[4] = v11;
  v18[0] = *(_OWORD *)(v8 + 16);
  v12 = *(_QWORD *)(this + 424);
  if ((v12 & 1) != 0)
  {
    v14 = *(uint64_t (**)(_QWORD *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v15 = (_QWORD *)(this - 16);
    v19[0] = *v15;
    v19[1] = this;
    v19[2] = this + 424;
    v17 = v9;
    v16 = v14(v19);
    v9 = v17;
    v12 = v16;
  }
  return JSC::TemporalDuration::create(v9, (JSC::VM *)v12, v18, a4, a5, a6, a7, a8);
}

unint64_t JSC::temporalDurationConstructorFuncCompare(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v8 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v10 = 10;
    goto LABEL_6;
  }
  v10 = *((_QWORD *)a2 + 6);
  if (v8 == 1)
  {
LABEL_6:
    v11 = 10;
    return JSC::TemporalDuration::compare((unint64_t)this, v10, v11, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)a2 + 7);
  return JSC::TemporalDuration::compare((unint64_t)this, v10, v11, a4, a5, a6, a7, a8);
}

unint64_t JSC::temporalDurationPrototypeFuncWith(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::TemporalDuration *v5;
  JSC::JSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  JSC *v15;
  uint64_t v16;
  int v17;
  _OWORD v18[5];
  JSC::VM *v19;

  v4 = *((_QWORD *)this + 7);
  v19 = (JSC::VM *)v4;
  v5 = (JSC::TemporalDuration *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C)))
  {
    v14 = "Temporal.Duration.prototype.with called on value that's not a Duration";
    v15 = this;
    v16 = 71;
    return JSC::throwTypeError((unint64_t)v15, &v19, (uint64_t)v14, v16);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v6 = (JSC::JSObject *)*((_QWORD *)a2 + 6), ((unint64_t)v6 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v6 + 5) <= 0x16u)
  {
    v14 = "First argument to Temporal.Duration.prototype.with must be an object";
    v15 = this;
    v16 = 69;
    return JSC::throwTypeError((unint64_t)v15, &v19, (uint64_t)v14, v16);
  }
  JSC::TemporalDuration::with(v5, (uint64_t)this, v6, v18);
  if (!*(_DWORD *)(v4 + 80))
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v18, 0);
  v17 = *(_DWORD *)(v4 + 80);
  if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v7, v8, v9, v10, v11, v12);
  if (*(_QWORD *)(v4 + 16))
    return 0;
  else
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v18, 0);
}

unint64_t JSC::temporalDurationPrototypeFuncNegated(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t (*v14)(__int128 *);
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20[3];
  JSC::VM *v21;

  v8 = *(JSC::VM **)(this + 56);
  v21 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v21, (uint64_t)"Temporal.Duration.prototype.negated called on value that's not a Duration", 74);
  }
  v10 = *(_QWORD *)(this + 424);
  if ((v10 & 1) != 0)
  {
    v14 = *(uint64_t (**)(__int128 *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v15 = (_QWORD *)(this - 16);
    else
      v15 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v16 = *v15;
    *((_QWORD *)&v16 + 1) = this;
    *(_QWORD *)&v17 = this + 424;
    v10 = v14(&v16);
  }
  v11 = *(_OWORD *)(v9 + 32);
  v16 = *(_OWORD *)(v9 + 16);
  v17 = v11;
  v12 = *(_OWORD *)(v9 + 64);
  v18 = *(_OWORD *)(v9 + 48);
  v19 = v12;
  *(_OWORD *)v20 = *(_OWORD *)(v9 + 80);
  if (*(double *)&v16 != 0.0)
    *(double *)&v16 = -*(double *)&v16;
  if (*((double *)&v16 + 1) != 0.0)
    *((double *)&v16 + 1) = -*((double *)&v16 + 1);
  if (*(double *)&v17 != 0.0)
    *(double *)&v17 = -*(double *)&v17;
  if (*((double *)&v17 + 1) != 0.0)
    *((double *)&v17 + 1) = -*((double *)&v17 + 1);
  if (*(double *)&v18 != 0.0)
    *(double *)&v18 = -*(double *)&v18;
  if (*((double *)&v18 + 1) != 0.0)
    *((double *)&v18 + 1) = -*((double *)&v18 + 1);
  if (*(double *)&v19 != 0.0)
    *(double *)&v19 = -*(double *)&v19;
  if (*((double *)&v19 + 1) != 0.0)
    *((double *)&v19 + 1) = -*((double *)&v19 + 1);
  if (v20[0] != 0.0)
    v20[0] = -v20[0];
  if (v20[1] != 0.0)
    v20[1] = -v20[1];
  return JSC::TemporalDuration::create((uint64_t)v8, (JSC::VM *)v10, &v16, a4, a5, a6, a7, a8);
}

unint64_t JSC::temporalDurationPrototypeFuncAbs(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  unint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t (*v14)(float64x2_t *);
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  JSC::VM *v21;

  v8 = *(JSC::VM **)(this + 56);
  v21 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v21, (uint64_t)"Temporal.Duration.prototype.abs called on value that's not a Duration", 70);
  }
  v10 = *(_QWORD *)(this + 424);
  if ((v10 & 1) != 0)
  {
    v14 = *(uint64_t (**)(float64x2_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (float64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v15 = (float64_t *)(this - 16);
    v16.f64[0] = *v15;
    *(_QWORD *)&v16.f64[1] = this;
    *(_QWORD *)&v17.f64[0] = this + 424;
    v10 = v14(&v16);
  }
  v11 = vabsq_f64(*(float64x2_t *)(v9 + 32));
  v16 = vabsq_f64(*(float64x2_t *)(v9 + 16));
  v17 = v11;
  v12 = vabsq_f64(*(float64x2_t *)(v9 + 64));
  v18 = vabsq_f64(*(float64x2_t *)(v9 + 48));
  v19 = v12;
  v20 = vabsq_f64(*(float64x2_t *)(v9 + 80));
  return JSC::TemporalDuration::create((uint64_t)v8, (JSC::VM *)v10, &v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::temporalDurationPrototypeFuncAdd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  _BYTE v20[80];
  JSC::VM *v21;

  v9 = *((_QWORD *)this + 7);
  v21 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v21, (uint64_t)"Temporal.Duration.prototype.add called on value that's not a Duration", 70);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::add(v10, (unint64_t)this, v11, a4, a5, a6, a7, a8, (uint64_t)v20);
  if (!*(_DWORD *)(v9 + 80))
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v20, 0);
  v19 = *(_DWORD *)(v9 + 80);
  if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v20, 0);
}

uint64_t JSC::temporalDurationPrototypeFuncSubtract(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  _BYTE v20[80];
  JSC::VM *v21;

  v9 = *((_QWORD *)this + 7);
  v21 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v21, (uint64_t)"Temporal.Duration.prototype.subtract called on value that's not a Duration", 75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::subtract(v10, (unint64_t)this, v11, a4, a5, a6, a7, a8, (uint64_t)v20);
  if (!*(_DWORD *)(v9 + 80))
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v20, 0);
  v19 = *(_DWORD *)(v9 + 80);
  if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v20, 0);
}

unint64_t JSC::temporalDurationPrototypeFuncRound(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  double *v11;
  unint64_t v12;
  const char *v13;
  JSC *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[80];
  JSC::VM *v25;

  v10 = *((_QWORD *)this + 7);
  v25 = (JSC::VM *)v10;
  v11 = (double *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = "Temporal.Duration.prototype.round called on value that's not a Duration";
    v14 = this;
    v15 = 72;
    return JSC::throwTypeError((unint64_t)v14, &v25, (uint64_t)v13, v15);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = "Temporal.Duration.prototype.round requires an options argument";
    v14 = this;
    v15 = 63;
    return JSC::throwTypeError((unint64_t)v14, &v25, (uint64_t)v13, v15);
  }
  JSC::TemporalDuration::round(v11, (unint64_t)this, v12, a4, a5, a6, a7, a8, (uint64_t)v24, a9);
  if (!*(_DWORD *)(v10 + 80))
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v24, 0);
  v23 = *(_DWORD *)(v10 + 80);
  if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v17, v18, v19, v20, v21, v22);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::TemporalDuration::tryCreateIfValid((unint64_t)this, (JSC::ISO8601 *)v24, 0);
}

unint64_t JSC::temporalDurationPrototypeFuncTotal(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  JSC *v13;
  uint64_t v14;
  double v16;
  uint64_t v17;
  JSC::VM *v18;

  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v12 = "Temporal.Duration.prototype.total called on value that's not a Duration";
    v13 = this;
    v14 = 72;
    return JSC::throwTypeError((unint64_t)v13, &v18, (uint64_t)v12, v14);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), v11 == 10))
  {
    v12 = "Temporal.Duration.prototype.total requires an options argument";
    v13 = this;
    v14 = 63;
    return JSC::throwTypeError((unint64_t)v13, &v18, (uint64_t)v12, v14);
  }
  v16 = JSC::TemporalDuration::total(v10, this, v11, a4, a5, a6, a7, a8, a9);
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v17 = (int)v16, v16 == (double)(int)v17)
    && ((_DWORD)v17 || (*(_QWORD *)&v16 & 0x8000000000000000) == 0))
  {
    return v17 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v16 + 0x2000000000000;
  }
}

uint64_t JSC::temporalDurationPrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  JSC::VM *v37;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v37 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)"Temporal.Duration.prototype.toString called on value that's not a Duration", 75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toString(v10, (unint64_t)this, v11, a4, a5, a6, a7, a8, &v36);
  v25 = JSC::jsString((uint64_t)v9, (JSC::VM *)&v36, v12, v13, v14, v15, v16, v17);
  v26 = v36;
  v36 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v25;
}

uint64_t JSC::temporalDurationPrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"Temporal.Duration.prototype.toJSON called on value that's not a Duration", 73);
  }
  JSC::TemporalDuration::toString((uint64_t)this, (double *)(v4 + 16), 2, &v29);
  v18 = JSC::jsString((uint64_t)v3, (JSC::VM *)&v29, v5, v6, v7, v8, v9, v10);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v18;
}

uint64_t JSC::temporalDurationPrototypeFuncToLocaleString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &JSC::TemporalDuration::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"Temporal.Duration.prototype.toLocaleString called on value that's not a Duration", 81);
  }
  JSC::TemporalDuration::toString((uint64_t)this, (double *)(v4 + 16), 2, &v29);
  v18 = JSC::jsString((uint64_t)v3, (JSC::VM *)&v29, v5, v6, v7, v8, v9, v10);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v18;
}

uint64_t JSC::temporalDurationPrototypeFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"Temporal.Duration.prototype.valueOf must not be called. To compare Duration values, use Temporal.Duration.compare", 114);
}

uint16x8_t *JSC::ISO8601::ExactTime::asStringImpl(JSC::ISO8601::ExactTime *this, WTF::StringBuilder *a2, __int128 a3)
{
  WTF::StringBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;

  if ((__int128)__PAIR128__(a3, (unint64_t)a2) >= 0xA)
  {
    v4 = (WTF::StringBuilder *)__udivti3();
    *((_QWORD *)&v14 + 1) = v5;
    *(_QWORD *)&v14 = v5;
    JSC::ISO8601::ExactTime::asStringImpl(this, v4, v14);
  }
  v13 = __modti3() + 48;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned long,void>>((uint64_t)this, (unint64_t *)&v13, v6, v7, v8, v9, v10, v11);
}

unint64_t JSC::temporalInstantConstructorFuncFrom(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(_QWORD *);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v9 = 10;
    return JSC::TemporalInstant::toInstant(this, v9, a3, a4, a5, a6, a7, a8, a9);
  }
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::TemporalInstant::toInstant(this, v9, a3, a4, a5, a6, a7, a8, a9);
  }
  v10 = *(_QWORD *)(this + 56);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(this + 432);
  if ((v13 & 1) != 0)
  {
    v15 = *(uint64_t (**)(_QWORD *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v16 = (_QWORD *)(this - 16);
    v21[0] = *v16;
    v21[1] = this;
    v21[2] = this + 432;
    v19 = v11;
    v20 = v12;
    v18 = v10;
    v17 = v15(v21);
    v10 = v18;
    v11 = v19;
    v12 = v20;
    v13 = v17;
  }
  return JSC::TemporalInstant::create(v10, (JSC::VM *)v13, v11, v12, a5, a6, a7, a8);
}

void JSC::temporalInstantConstructorFuncFromEpochSeconds(unint64_t this, JSC::JSGlobalObject *a2, __int128 a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int8x16_t a8)
{
  JSC::JSObject *v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  JSC::Heap **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  JSC::Exception *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t (*v40)(const char **);
  const char **v41;
  double v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  char *v47;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v44 = 10;
    v10 = *(_QWORD *)(this + 56);
    goto LABEL_20;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v44 = (uint64_t)v9;
  v10 = *(_QWORD *)(this + 56);
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v9;
    goto LABEL_6;
  }
  v11 = (unint64_t)v9 - 0x2000000000000;
  if (v11 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_20:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v44, (JSC::JSGlobalObject *)this, a3, *((uint64_t *)&a3 + 1), a4, a5, a6, a7, a8);
    goto LABEL_6;
  }
  v12 = *(double *)&v11;
LABEL_6:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_8;
  v39 = *(_DWORD *)(v10 + 80);
  if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
  {
    v42 = v12;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, *((uint64_t *)&a3 + 1), a4, a5, a6, a7);
    v12 = v42;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_8:
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && trunc(v12) == v12)
    {
      *(_QWORD *)&a3 = (unsigned __int128)((uint64_t)v12 * (__int128)1000000000) >> 64;
      JSC::TemporalInstant::tryCreateIfValid(this, 1000000000 * (uint64_t)v12, a3, a4, a5, a6, a7);
    }
    else
    {
      v45 = " is not a valid integer number of epoch seconds";
      v46 = 48;
      WTF::tryMakeString<double,WTF::ASCIILiteral>((int **)&v43, (uint64_t)&v45, v12);
      if (v43)
      {
        v13 = *(_QWORD *)(this + 128);
        v14 = *(JSC::Heap ***)(this + 56);
        if ((v13 & 1) != 0)
        {
          v40 = *(uint64_t (**)(const char **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v41 = (const char **)(this - 16);
          else
            v41 = (const char **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v45 = *v41;
          v46 = this;
          v47 = (char *)(this + 128);
          v13 = v40(&v45);
        }
        v15 = JSC::ErrorInstance::create(v14, v13, &v43, 0, 0, 0, 2, 1);
        v22 = (JSC::Exception *)v15;
        if ((v15 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
        {
          v22 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v15, 0, v16, v17, v18, v19, v20);
        }
        JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v22, v21, v16, v17, v18, v19, v20);
        v30 = v43;
        v43 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
}

void JSC::temporalInstantConstructorFuncFromEpochMilliseconds(unint64_t this, JSC::JSGlobalObject *a2, __int128 a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int8x16_t a8)
{
  JSC::JSObject *v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  JSC::Heap **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  JSC::Exception *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t (*v40)(const char **);
  const char **v41;
  double v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  char *v47;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v44 = 10;
    v10 = *(_QWORD *)(this + 56);
    goto LABEL_20;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v44 = (uint64_t)v9;
  v10 = *(_QWORD *)(this + 56);
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v9;
    goto LABEL_6;
  }
  v11 = (unint64_t)v9 - 0x2000000000000;
  if (v11 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_20:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v44, (JSC::JSGlobalObject *)this, a3, *((uint64_t *)&a3 + 1), a4, a5, a6, a7, a8);
    goto LABEL_6;
  }
  v12 = *(double *)&v11;
LABEL_6:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_8;
  v39 = *(_DWORD *)(v10 + 80);
  if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
  {
    v42 = v12;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, *((uint64_t *)&a3 + 1), a4, a5, a6, a7);
    v12 = v42;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_8:
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && trunc(v12) == v12)
    {
      *(_QWORD *)&a3 = (unsigned __int128)((uint64_t)v12 * (__int128)1000000) >> 64;
      JSC::TemporalInstant::tryCreateIfValid(this, 1000000 * (uint64_t)v12, a3, a4, a5, a6, a7);
    }
    else
    {
      v45 = " is not a valid integer number of epoch milliseconds";
      v46 = 53;
      WTF::tryMakeString<double,WTF::ASCIILiteral>((int **)&v43, (uint64_t)&v45, v12);
      if (v43)
      {
        v13 = *(_QWORD *)(this + 128);
        v14 = *(JSC::Heap ***)(this + 56);
        if ((v13 & 1) != 0)
        {
          v40 = *(uint64_t (**)(const char **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v41 = (const char **)(this - 16);
          else
            v41 = (const char **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v45 = *v41;
          v46 = this;
          v47 = (char *)(this + 128);
          v13 = v40(&v45);
        }
        v15 = JSC::ErrorInstance::create(v14, v13, &v43, 0, 0, 0, 2, 1);
        v22 = (JSC::Exception *)v15;
        if ((v15 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
        {
          v22 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v15, 0, v16, v17, v18, v19, v20);
        }
        JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v22, v21, v16, v17, v18, v19, v20);
        v30 = v43;
        v43 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
}

unint64_t JSC::temporalInstantConstructorFuncFromEpochMicroseconds(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t result;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t (*v50)(uint64_t *);
  uint64_t *v51;
  unint64_t v52;
  JSC::Heap **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  JSC::Exception *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t *);
  uint64_t *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  JSC::Structure *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;

  if (*((_DWORD *)a2 + 8) == 1)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 6);
  v99 = (JSC::Structure *)v10;
  v11 = *(_QWORD *)(this + 56);
  JSC::JSValue::toBigInt(&v99, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v19 = v18;
  if (*(_DWORD *)(v11 + 80))
  {
    v49 = *(_DWORD *)(v11 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v20 = *(_DWORD *)(v19 + 8);
  if (v20)
  {
    if (v20 != 1)
      goto LABEL_13;
    v21 = *(_QWORD *)(v19 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if ((*(_QWORD *)v21 & 0x8000000000000000) != 0)
      goto LABEL_13;
    v22 = *(_QWORD *)v21;
    if (*(_BYTE *)(v19 + 16))
      v22 = -v22;
    v23 = (unsigned __int128)(v22 * (__int128)1000) >> 64;
    v24 = 1000 * v22;
    if (__PAIR128__((unint64_t)((unint64_t)(1000 * v22) >= 0x9FE9D0AE91000000) + v23 + 468, 1000 * v22 + 0x60162F516F000000) >= __PAIR128__(936, 0xC02C5EA2DE000001))
    {
LABEL_13:
      JSC::JSBigInt::toStringGeneric(*(JSC::JSBigInt **)(this + 56), (JSC::VM *)this, (JSC::JSGlobalObject *)v19, 10, v14, v15, v16, v17, (int **)&v98);
      if (*(_QWORD *)(v11 + 16))
      {
        v25 = (unsigned int *)(v11 + 80);
        *(_QWORD *)(v11 + 16) = 0;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 & 0xFFFFFFEF, v25));
        v34 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v34 = 0x1300000002;
        *(_QWORD *)(v34 + 8) = "The given number of";
        *(_DWORD *)(v34 + 16) = 4;
        v35 = v98;
        v98 = (WTF::StringImpl *)v34;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      result = JSC::ellipsizeAt(100, &v98, &v96);
      v37 = (WTF::StringImpl *)v96;
      if (v96)
      {
        v38 = *(_DWORD *)(v96 + 4);
        if (v38 < 0 || (result = (v38 + 70), __OFADD__(v38, 70)))
        {
          v97 = 0;
LABEL_65:
          __break(0xC471u);
          return result;
        }
        if ((*(_BYTE *)(v96 + 16) & 4) == 0)
        {
          v39 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        result = 70;
      }
      v39 = 1;
LABEL_37:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v39, v96, (int8x16_t *)" epoch microseconds is outside of supported range for Temporal.Instant", 0x46u, (int **)&v97);
      if (v97)
      {
        v52 = *(_QWORD *)(this + 128);
        v53 = *(JSC::Heap ***)(this + 56);
        if ((v52 & 1) != 0)
        {
          v94 = *(uint64_t (**)(uint64_t *))(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v95 = (uint64_t *)(this - 16);
          else
            v95 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v100 = *v95;
          v101 = this;
          v102 = (char *)(this + 128);
          v52 = v94(&v100);
        }
        v54 = JSC::ErrorInstance::create(v53, v52, &v97, 0, 0, 0, 2, 1);
        v61 = (JSC::Exception *)v54;
        if ((v54 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)))
        {
          v61 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v54, 0, v55, v56, v57, v58, v59);
        }
        JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v61, v60, v55, v56, v57, v58, v59);
        v69 = v97;
        v97 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
          {
            WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
            if (!v37)
              goto LABEL_47;
            goto LABEL_45;
          }
          *(_DWORD *)v69 -= 2;
        }
        if (!v37)
          goto LABEL_47;
LABEL_45:
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
LABEL_47:
        if (v98)
        {
          if (*(_DWORD *)v98 == 2)
          {
            WTF::StringImpl::~StringImpl(v98, v62, v63, v64, v65, v66, v67, v68);
            WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
          }
          else
          {
            *(_DWORD *)v98 -= 2;
          }
        }
        return 0;
      }
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  v40 = *(_QWORD *)(this + 432);
  if ((v40 & 1) != 0)
  {
    v50 = *(uint64_t (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    v51 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v51 = (uint64_t *)(this - 16);
    v100 = *v51;
    v101 = this;
    v102 = (char *)(this + 432);
    v40 = v50(&v100);
  }
  return JSC::TemporalInstant::create(v11, (JSC::VM *)v40, v24, v23, v14, v15, v16, v17);
}

unint64_t JSC::temporalInstantConstructorFuncFromEpochNanoseconds(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::TemporalInstant::tryCreateIfValid(this, (JSC::Structure *)v9, 0, a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::temporalInstantConstructorFuncCompare(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  int v36;
  int v37;

  v10 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if (v10 != 1)
    {
      v13 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v13 = 10;
LABEL_4:
  v14 = *((_QWORD *)this + 7);
  v21 = JSC::TemporalInstant::toInstant((unint64_t)this, v12, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v14 + 80))
  {
    v36 = *(_DWORD *)(v14 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v15, v16, v17, v18, v19, v20);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v29 = JSC::TemporalInstant::toInstant((unint64_t)this, v13, v15, v16, v17, v18, v19, v20, v22);
  if (*(_DWORD *)(v14 + 80))
  {
    v37 = *(_DWORD *)(v14 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v31 = *(_QWORD *)(v21 + 16);
  v30 = *(_QWORD *)(v21 + 24);
  v32 = *(_OWORD *)(v29 + 16) < (__int128)__PAIR128__(v30, v31);
  v33 = (__int128)__PAIR128__(v30, v31) < *(_OWORD *)(v29 + 16);
  v34 = 0xFFFE000000000000;
  if (v33)
    v34 = 0xFFFE0000FFFFFFFFLL;
  if (v32)
    return 0xFFFE000000000001;
  else
    return v34;
}

void JSC::temporalInstantPrototypeFuncAdd(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  JSC::Heap **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  JSC::Exception *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t (*v52)(char **);
  char **v53;
  WTF::StringImpl *v54;
  _OWORD v55[5];
  _OWORD v56[5];
  JSC::VM *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61[2];
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v57 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::throwTypeError(this, &v57, (uint64_t)"Temporal.Instant.prototype.add called on value that's not a Instant", 68);
  }
  else
  {
    if (*((_DWORD *)a2 + 8) == 1)
      v11 = 10;
    else
      v11 = *((_QWORD *)a2 + 6);
    JSC::TemporalDuration::toLimitedDuration(this, v11, (uint64_t)&_ZGRN3JSCL23disallowedAdditionUnitsE_, 4, a5, a6, a7, a8, v56);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_6;
    v51 = *(_DWORD *)(v9 + 80);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_6:
      v18 = *(_QWORD *)(v10 + 24);
      v58 = *(char **)(v10 + 16);
      v59 = v18;
      v55[0] = v56[0];
      v55[1] = v56[1];
      v55[2] = v56[2];
      v55[3] = v56[3];
      v55[4] = v56[4];
      JSC::ISO8601::ExactTime::add(&v58, v55, (uint64_t)v61);
      if (v62)
      {
        *(_QWORD *)&v19 = v61[1];
        JSC::TemporalInstant::tryCreateIfValid(this, v61[0], v19, v20, v21, v22, v23);
      }
      else
      {
        v24 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v24 = 0x3B00000002;
        *(_QWORD *)(v24 + 8) = "Addition is outside of supported range for Temporal.Instant";
        *(_DWORD *)(v24 + 16) = 4;
        v54 = (WTF::StringImpl *)v24;
        v25 = *(_QWORD *)(this + 128);
        v26 = *(JSC::Heap ***)(this + 56);
        if ((v25 & 1) != 0)
        {
          v52 = *(uint64_t (**)(char **))(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v53 = (char **)(this - 16);
          else
            v53 = (char **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v58 = *v53;
          v59 = this;
          v60 = (char *)(this + 128);
          v25 = v52(&v58);
        }
        v27 = JSC::ErrorInstance::create(v26, v25, &v54, 0, 0, 0, 2, 1);
        v34 = (JSC::Exception *)v27;
        if ((v27 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
        {
          v34 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v27, 0, v28, v29, v30, v31, v32);
        }
        JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v34, v33, v28, v29, v30, v31, v32);
        v42 = v54;
        v54 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
      }
    }
  }
}

void JSC::temporalInstantPrototypeFuncSubtract(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  JSC::Heap **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  JSC::Exception *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t (*v52)(char **);
  char **v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  double v59[3];
  _OWORD v60[5];
  JSC::VM *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65[2];
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v61 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::throwTypeError(this, &v61, (uint64_t)"Temporal.Instant.prototype.subtract called on value that's not a Instant", 73);
  }
  else
  {
    if (*((_DWORD *)a2 + 8) == 1)
      v11 = 10;
    else
      v11 = *((_QWORD *)a2 + 6);
    JSC::TemporalDuration::toLimitedDuration(this, v11, (uint64_t)&_ZGRN3JSCL23disallowedAdditionUnitsE_, 4, a5, a6, a7, a8, v60);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_6;
    v51 = *(_DWORD *)(v9 + 80);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_6:
      v18 = *(_QWORD *)(v10 + 24);
      v62 = *(char **)(v10 + 16);
      v63 = v18;
      v55 = v60[0];
      v56 = v60[1];
      v57 = v60[2];
      v58 = v60[3];
      *(_OWORD *)v59 = v60[4];
      if (*(double *)v60 != 0.0)
        *(double *)&v55 = -*(double *)v60;
      if (*((double *)&v55 + 1) != 0.0)
        *((double *)&v55 + 1) = -*((double *)&v55 + 1);
      if (*(double *)&v56 != 0.0)
        *(double *)&v56 = -*(double *)&v56;
      if (*((double *)&v56 + 1) != 0.0)
        *((double *)&v56 + 1) = -*((double *)&v56 + 1);
      if (*(double *)&v57 != 0.0)
        *(double *)&v57 = -*(double *)&v57;
      if (*((double *)&v57 + 1) != 0.0)
        *((double *)&v57 + 1) = -*((double *)&v57 + 1);
      if (*(double *)&v58 != 0.0)
        *(double *)&v58 = -*(double *)&v58;
      if (*((double *)&v58 + 1) != 0.0)
        *((double *)&v58 + 1) = -*((double *)&v58 + 1);
      if (v59[0] != 0.0)
        v59[0] = -v59[0];
      if (v59[1] != 0.0)
        v59[1] = -v59[1];
      JSC::ISO8601::ExactTime::add(&v62, &v55, (uint64_t)v65);
      if (v66)
      {
        *(_QWORD *)&v19 = v65[1];
        JSC::TemporalInstant::tryCreateIfValid(this, v65[0], v19, v20, v21, v22, v23);
      }
      else
      {
        v24 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v24 = 0x3E00000002;
        *(_QWORD *)(v24 + 8) = "Subtraction is outside of supported range for Temporal.Instant";
        *(_DWORD *)(v24 + 16) = 4;
        v54 = (WTF::StringImpl *)v24;
        v25 = *(_QWORD *)(this + 128);
        v26 = *(JSC::Heap ***)(this + 56);
        if ((v25 & 1) != 0)
        {
          v52 = *(uint64_t (**)(char **))(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v53 = (char **)(this - 16);
          else
            v53 = (char **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v62 = *v53;
          v63 = this;
          v64 = (char *)(this + 128);
          v25 = v52(&v62);
        }
        v27 = JSC::ErrorInstance::create(v26, v25, &v54, 0, 0, 0, 2, 1);
        v34 = (JSC::Exception *)v27;
        if ((v27 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
        {
          v34 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v27, 0, v28, v29, v30, v31, v32);
        }
        JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v34, v33, v28, v29, v30, v31, v32);
        v42 = v54;
        v54 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
      }
    }
  }
}

unint64_t JSC::temporalInstantPrototypeFuncUntil(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  int v30;
  int v31;
  uint64_t (*v32)(_QWORD *, __n128);
  _QWORD *v33;
  unint64_t v34;
  _OWORD v35[5];
  JSC::VM *v36;
  _QWORD v37[3];

  v10 = *(_QWORD *)(this + 56);
  v36 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v36, (uint64_t)"Temporal.Instant.prototype.until called on value that's not a Instant", 70);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v15 = JSC::TemporalInstant::toInstant(this, v13, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v30 = *(_DWORD *)(v10 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
    {
      v34 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v15 = v34;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v20 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v27.n128_f64[0] = JSC::TemporalInstant::difference((uint64_t)v35, v11, this, v15, v20, v17, v18, v19);
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v28 = *(_QWORD *)(this + 424);
  if ((v28 & 1) != 0)
  {
    v32 = *(uint64_t (**)(_QWORD *, __n128))(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (_QWORD *)(this - 16);
    v37[0] = *v33;
    v37[1] = this;
    v37[2] = this + 424;
    v28 = v32(v37, v27);
  }
  return JSC::TemporalDuration::create(v10, (JSC::VM *)v28, v35, v22, v23, v24, v25, v26);
}

unint64_t JSC::temporalInstantPrototypeFuncSince(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  int v31;
  int v32;
  uint64_t (*v33)(_QWORD *, __n128);
  _QWORD *v34;
  unint64_t v35;
  _OWORD v36[5];
  JSC::VM *v37;
  _QWORD v38[3];

  v10 = *(_QWORD *)(this + 56);
  v37 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v37, (uint64_t)"Temporal.Instant.prototype.since called on value that's not a Instant", 70);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = JSC::TemporalInstant::toInstant(this, v13, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
    {
      v35 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v15, v16, v17, v18, v19, v20);
      v14 = v35;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v28.n128_f64[0] = JSC::TemporalInstant::difference((uint64_t)v36, v14, this, v11, v21, v18, v19, v20);
  if (*(_DWORD *)(v10 + 80))
  {
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v29 = *(_QWORD *)(this + 424);
  if ((v29 & 1) != 0)
  {
    v33 = *(uint64_t (**)(_QWORD *, __n128))(v29 & 0xFFFFFFFFFFFFFFFCLL);
    v34 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v34 = (_QWORD *)(this - 16);
    v38[0] = *v34;
    v38[1] = this;
    v38[2] = this + 424;
    v29 = v33(v38, v28);
  }
  return JSC::TemporalDuration::create(v10, (JSC::VM *)v29, v36, v23, v24, v25, v26, v27);
}

unint64_t JSC::temporalInstantPrototypeFuncRound(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unsigned int v16;
  int *v17;
  const char *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned __int16 v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unsigned __int16 v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  JSC::Heap **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  JSC::Exception *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  int v58;
  double v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t (*v91)(JSC::VM **);
  JSC::VM **v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t (*v98)(JSC::VM **);
  JSC::VM **v99;
  uint64_t (*v100)(JSC::VM **);
  JSC::VM **v101;
  double v102;
  JSC::VM *v103;
  WTF::StringImpl *v104;
  JSC::VM *v105;
  uint64_t v106;
  char *v107;
  const char *v108;
  uint64_t v109;
  char v110;
  const char *v111;
  uint64_t v112;
  char v113;
  const char *v114;
  uint64_t v115;
  char v116;
  const char *v117;
  uint64_t v118;
  char v119;
  const char *v120;
  uint64_t v121;
  char v122;
  const char *v123;
  uint64_t v124;
  char v125;
  const char *v126;
  uint64_t v127;
  char v128;
  const char *v129;
  uint64_t v130;
  char v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v103 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = "Temporal.Instant.prototype.round called on value that's not a Instant";
    v14 = 70;
    return JSC::throwTypeError(this, &v103, (uint64_t)v13, v14);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = "Temporal.Instant.prototype.round requires an options argument";
    v14 = 62;
    return JSC::throwTypeError(this, &v103, (uint64_t)v13, v14);
  }
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v105 = (JSC::VM *)v10;
LABEL_31:
    JSC::throwTypeError(this, &v105, (uint64_t)"options argument is not an object or undefined", 47);
    v12 = 0;
LABEL_32:
    if (*(_DWORD *)(v10 + 80))
    {
      v93 = *(_DWORD *)(v10 + 80);
      if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_59;
    }
    LODWORD(v105) = 50462976;
    v31 = JSC::temporalSmallestUnit(this, (unsigned int *)v12, (uint64_t)&v105, 4, a5, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80))
    {
      v94 = *(_DWORD *)(v10 + 80);
      if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_59;
    }
    if (v31 <= 0xFFu)
    {
      v45 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v45 = 0x2A00000002;
      *(_QWORD *)(v45 + 8) = "Cannot round without a smallestUnit option";
      *(_DWORD *)(v45 + 16) = 4;
      v104 = (WTF::StringImpl *)v45;
      v46 = *(_QWORD *)(this + 128);
      v47 = *(JSC::Heap ***)(this + 56);
      if ((v46 & 1) != 0)
      {
        v100 = *(uint64_t (**)(JSC::VM **))(v46 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v101 = (JSC::VM **)(this - 16);
        else
          v101 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v105 = *v101;
        v106 = this;
        v107 = (char *)(this + 128);
        v46 = v100(&v105);
      }
      v48 = JSC::ErrorInstance::create(v47, v46, &v104, 0, 0, 0, 2, 1);
      v55 = (JSC::Exception *)v48;
      if ((v48 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C)))
      {
        v55 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v48, 0, v49, v50, v51, v52, v53);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v55, v54, v49, v50, v51, v52, v53);
      v56 = v104;
      v104 = 0;
      if (!v56)
        goto LABEL_59;
      if (*(_DWORD *)v56 == 2)
        goto LABEL_58;
      *(_DWORD *)v56 -= 2;
LABEL_59:
      v43 = 0;
      v44 = 0;
      goto LABEL_60;
    }
    goto LABEL_44;
  }
  v16 = *(unsigned __int8 *)(v12 + 5);
  if (v16 != 2)
  {
    v105 = (JSC::VM *)v10;
    if (v16 > 0x16)
      goto LABEL_32;
    goto LABEL_31;
  }
  v17 = *(int **)(v12 + 8);
  if ((v17 & 1) != 0)
  {
    v17 = *JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v17)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v17)
LABEL_11:
    *v17 += 2;
LABEL_12:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_13;
  v95 = *(_DWORD *)(v10 + 80);
  if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_13:
    if (v17)
    {
      v18 = (const char *)*((_QWORD *)v17 + 1);
      v19 = v17[1];
      v20 = ((unint64_t)v17[4] >> 2) & 1;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 1;
    }
    v21 = JSC::temporalUnitType(v18, v19 | (v20 << 32));
    if (v21 <= 0xFFu)
    {
      v29 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v29 = 0x2800000002;
      v30 = "smallestUnit is an invalid Temporal unit";
LABEL_21:
      *(_QWORD *)(v29 + 8) = v30;
      *(_DWORD *)(v29 + 16) = 4;
      v104 = (WTF::StringImpl *)v29;
      v32 = *(_QWORD *)(this + 128);
      v33 = *(JSC::Heap ***)(this + 56);
      if ((v32 & 1) != 0)
      {
        v98 = *(uint64_t (**)(JSC::VM **))(v32 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v99 = (JSC::VM **)(this - 16);
        else
          v99 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v105 = *v99;
        v106 = this;
        v107 = (char *)(this + 128);
        v32 = v98(&v105);
      }
      v34 = JSC::ErrorInstance::create(v33, v32, &v104, 0, 0, 0, 2, 1);
      v41 = (JSC::Exception *)v34;
      if ((v34 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
      {
        v41 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v41, v40, v35, v36, v37, v38, v39);
      v42 = v104;
      v104 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      goto LABEL_27;
    }
    LOBYTE(v31) = v21;
    if (v21 <= 3u)
    {
      v29 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v29 = 0x2100000002;
      v30 = "smallestUnit is a disallowed unit";
      goto LABEL_21;
    }
    if (v17)
    {
      if (*v17 != 2)
      {
        v12 = 0;
        *v17 -= 2;
        goto LABEL_44;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    v12 = 0;
LABEL_44:
    v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2224);
    v105 = (JSC::VM *)"ceil";
    v106 = 5;
    LOBYTE(v107) = 0;
    v108 = "floor";
    v109 = 6;
    v110 = 1;
    v111 = "expand";
    v112 = 7;
    v113 = 2;
    v114 = "trunc";
    v115 = 6;
    v116 = 3;
    v117 = "halfCeil";
    v118 = 9;
    v119 = 4;
    v120 = "halfFloor";
    v121 = 10;
    v122 = 5;
    v123 = "halfExpand";
    v124 = 11;
    v125 = 6;
    v126 = "halfTrunc";
    v127 = 10;
    v128 = 7;
    v129 = "halfEven";
    v130 = 9;
    v131 = 8;
    v58 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)this, (unsigned int *)v12, v57, (uint64_t)&v105, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 6);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_118;
    v96 = *(_DWORD *)(v10 + 80);
    if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v10 + 16))
    {
LABEL_118:
      if ((v31 - 4) >= 6u)
      {
        __break(0xC471u);
        JUMPOUT(0x198C11C04);
      }
      v59 = JSC::temporalRoundingIncrement(this, (unsigned int *)v12, qword_1991598C0[(char)(v31 - 4)], 1, 1, a6, a7, a8);
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_119;
      v97 = *(_DWORD *)(v10 + 80);
      if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      {
        v102 = v59;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v59 = v102;
      }
      if (!*(_QWORD *)(v10 + 16))
      {
LABEL_119:
        v60 = v59;
        switch((char)v31)
        {
          case 4:
            v61 = 3600000000000;
            goto LABEL_51;
          case 5:
            v61 = 60000000000;
LABEL_51:
            v62 = (v59 * (unsigned __int128)(unint64_t)v61) >> 64;
            v60 *= v61;
            break;
          case 6:
            v62 = 0;
            v63 = 1000000000;
            goto LABEL_55;
          case 7:
            v62 = 0;
            v63 = 1000000;
            goto LABEL_55;
          case 8:
            v62 = 0;
            v63 = 1000;
LABEL_55:
            v60 = v60 * (unint64_t)v63;
            break;
          default:
            v62 = 0;
            break;
        }
        v43 = JSC::roundNumberToIncrement(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), v60, v62, v58);
        v44 = v64;
        goto LABEL_60;
      }
    }
    goto LABEL_59;
  }
LABEL_27:
  if (!v17)
    goto LABEL_59;
  if (*v17 == 2)
  {
    v56 = (WTF::StringImpl *)v17;
LABEL_58:
    WTF::StringImpl::~StringImpl(v56, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    goto LABEL_59;
  }
  v43 = 0;
  v44 = 0;
  *v17 -= 2;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_61;
LABEL_60:
  v90 = *(_DWORD *)(v10 + 80);
  if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_61:
  v73 = *(_QWORD *)(this + 432);
  if ((v73 & 1) != 0)
  {
    v91 = *(uint64_t (**)(JSC::VM **))(v73 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v92 = (JSC::VM **)(this - 16);
    else
      v92 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v105 = *v92;
    v106 = this;
    v107 = (char *)(this + 432);
    v73 = v91(&v105);
  }
  return JSC::TemporalInstant::create(v10, (JSC::VM *)v73, v43, v44, a5, a6, a7, a8);
}

uint64_t JSC::temporalInstantPrototypeFuncEquals(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  JSC::VM *v22;

  v9 = *((_QWORD *)this + 7);
  v22 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v22, (uint64_t)"Temporal.Instant.prototype.equals called on value that's not a Instant", 71);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v12 = JSC::TemporalInstant::toInstant((unint64_t)this, v11, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 80))
  {
    v20 = *(_DWORD *)(v9 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    {
      v21 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v21;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (*(_OWORD *)(v10 + 16) == *(_OWORD *)(v12 + 16))
    return 7;
  return 6;
}

uint64_t JSC::temporalInstantPrototypeFuncToString(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  JSC::Heap **v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  WTF::AtomStringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  JSC::VM *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  char *v82;
  const char *v83;
  uint64_t v84;
  char v85;
  const char *v86;
  uint64_t v87;
  char v88;
  const char *v89;
  uint64_t v90;
  char v91;
  const char *v92;
  uint64_t v93;
  char v94;
  const char *v95;
  uint64_t v96;
  char v97;
  const char *v98;
  uint64_t v99;
  char v100;
  const char *v101;
  uint64_t v102;
  char v103;
  const char *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v78 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v78, (uint64_t)"Temporal.Instant.prototype.toString called on value that's not a Instant", 73);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_5;
  v11 = *((_QWORD *)a2 + 6);
  v80 = (WTF::StringImpl *)v9;
  if (v11 == 10)
    goto LABEL_5;
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, &v80, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_5:
    v11 = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_80;
  v71 = *(_DWORD *)(v9 + 80);
  if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_80:
    if (!v11)
    {
      v15 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      v17 = 0;
      goto LABEL_20;
    }
    v12 = JSC::JSObject::get((unsigned int *)v11, this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2448), (uint64_t)a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_11;
    v72 = *(_DWORD *)(v9 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_11:
      if (v12 == 10)
      {
        v14 = 0;
      }
      else
      {
        v14 = JSC::TemporalTimeZone::from(this, v12, a3, a4, a5, a6, a7, a8, v13);
        if (*(_DWORD *)(v9 + 80))
        {
          v75 = *(_DWORD *)(v9 + 80);
          if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v9 + 16))
            goto LABEL_45;
        }
      }
      v18 = JSC::secondsStringPrecision(this, (JSC::JSGlobalObject *)v11, a3, (uint64_t)a4, a5, a6, a7, a8);
      v20 = v19;
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_81;
      v73 = *(_DWORD *)(v9 + 80);
      if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v9 + 16))
      {
LABEL_81:
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2224);
        v80 = (WTF::StringImpl *)"ceil";
        v81 = 5;
        LOBYTE(v82) = 0;
        v83 = "floor";
        v84 = 6;
        v85 = 1;
        v86 = "expand";
        v87 = 7;
        v88 = 2;
        v89 = "trunc";
        v90 = 6;
        v91 = 3;
        v92 = "halfCeil";
        v93 = 9;
        v94 = 4;
        v95 = "halfFloor";
        v96 = 10;
        v97 = 5;
        v98 = "halfExpand";
        v99 = 11;
        v100 = 6;
        v101 = "halfTrunc";
        v102 = 10;
        v103 = 7;
        v104 = "halfEven";
        v105 = 9;
        v106 = 8;
        v22 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)this, (unsigned int *)v11, v21, (uint64_t)&v80, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 3);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_17;
        v74 = *(_DWORD *)(v9 + 80);
        if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v9 + 16))
        {
LABEL_17:
          v15 = *(_QWORD *)(v10 + 16);
          v16 = *(_QWORD *)(v10 + 24);
          if (v18 == 2 && v22 == 3)
          {
            v17 = v14;
LABEL_20:
            v23 = 2;
            v24 = 9;
LABEL_21:
            JSC::TemporalInstant::toString(&v80, v15, v16, v17, v23, v24);
            goto LABEL_22;
          }
          v35 = HIDWORD(v20);
          switch((char)v20)
          {
            case 4:
              v36 = 3600000000000;
              goto LABEL_33;
            case 5:
              v36 = 60000000000;
LABEL_33:
              v45 = (v35 * (unsigned __int128)(unint64_t)v36) >> 64;
              v35 *= v36;
              if (!v14)
                goto LABEL_34;
              goto LABEL_39;
            case 6:
              v45 = 0;
              v49 = 1000000000;
              goto LABEL_38;
            case 7:
              v45 = 0;
              v49 = 1000000;
              goto LABEL_38;
            case 8:
              v45 = 0;
              v49 = 1000;
LABEL_38:
              v35 = HIDWORD(v20) * (unint64_t)v49;
              if (v14)
                goto LABEL_39;
              goto LABEL_34;
            default:
              v45 = 0;
              if (!v14)
              {
LABEL_34:
                v46 = JSC::roundNumberToIncrement(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), v35, v45, v22);
                v48 = v47;
                v15 = v46;
                v16 = v48;
                v17 = 0;
                v23 = v18;
                v24 = v20;
                goto LABEL_21;
              }
LABEL_39:
              v50 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v50 = 0x4000000002;
              *(_QWORD *)(v50 + 8) = "FIXME: Temporal.Instant.toString({timeZone}) not implemented yet";
              *(_DWORD *)(v50 + 16) = 4;
              v79 = (WTF::StringImpl *)v50;
              v51 = *(JSC::Heap ***)(this + 56);
              v52 = *(_QWORD *)(this + 1504);
              if ((v52 & 1) != 0)
              {
                v76 = *(uint64_t (**)(WTF::StringImpl **))(v52 & 0xFFFFFFFFFFFFFFFCLL);
                if ((this & 8) != 0)
                  v77 = (WTF::StringImpl **)(this - 16);
                else
                  v77 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
                v80 = *v77;
                v81 = this;
                v82 = (char *)(this + 1504);
                v52 = v76(&v80);
              }
              v53 = JSC::ErrorInstance::create(v51, v52, &v79, 0, 0, 0, 0, 1);
              v60 = (JSC::Exception *)v53;
              if ((v53 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
              {
                v60 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v53, 0, v54, v55, v56, v57, v58);
              }
              JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v60, v59, v54, v55, v56, v57, v58);
              v62 = v79;
              v79 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                {
                  WTF::StringImpl::~StringImpl(v62, v61, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
                }
                else
                {
                  *(_DWORD *)v62 -= 2;
                }
              }
              break;
          }
        }
      }
    }
  }
LABEL_45:
  v80 = 0;
LABEL_22:
  v32 = JSC::jsString(v9, (JSC::VM *)&v80, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = v80;
  v80 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  return v32;
}

uint64_t JSC::temporalInstantPrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"Temporal.Instant.prototype.toJSON called on value that's not a Instant", 71);
  }
  JSC::TemporalInstant::toString(&v29, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), 0, 2, 9);
  v18 = JSC::jsString((uint64_t)v3, (JSC::VM *)&v29, v5, v6, v7, v8, v9, v10);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v18;
}

uint64_t JSC::temporalInstantPrototypeFuncToLocaleString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::IntlDateTimeFormat *v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v31)(_QWORD *);
  _QWORD *v32;
  int v33;
  int v34;
  JSC::VM *v35;
  _QWORD v36[3];

  v9 = *(_QWORD *)(this + 56);
  v35 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalInstant::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v35, (uint64_t)"Temporal.Instant.prototype.toLocaleString called on value that's not a Instant", 79);
  }
  v12 = *(_QWORD *)(this + 384);
  if ((v12 & 1) != 0)
  {
    v31 = *(uint64_t (**)(_QWORD *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v32 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v32 = (_QWORD *)(this - 16);
    v36[0] = *v32;
    v36[1] = this;
    v36[2] = this + 384;
    v12 = v31(v36);
  }
  v19 = (JSC::IntlDateTimeFormat *)JSC::IntlDateTimeFormat::create((JSC::IntlDateTimeFormat *)v9, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v33 = *(_DWORD *)(v9 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21 = 10;
    goto LABEL_12;
  }
  v21 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_12:
    v22 = 10;
    goto LABEL_8;
  }
  v22 = *((_QWORD *)a2 + 7);
LABEL_8:
  JSC::IntlDateTimeFormat::initializeDateTimeFormat(v19, this, v21, (JSC::Symbol *)v22, 2, 0, v17, v18, v20);
  if (*(_DWORD *)(v9 + 80))
  {
    v34 = *(_DWORD *)(v9 + 80);
    if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v29 = __divti3();
  return JSC::IntlDateTimeFormat::format(v19, this, (double)v29);
}

uint64_t JSC::temporalInstantPrototypeFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"Temporal.Instant.prototype.valueOf must not be called. To compare Instant values, use Temporal.Instant.compare", 111);
}

void JSC::temporalNowFuncInstant(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  timespec v8;
  __int128 v9;

  v8.tv_sec = 0;
  v8.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v8);
  *(_QWORD *)&v9 = (unsigned __int128)(v8.tv_sec * (__int128)1000000000 + v8.tv_nsec) >> 64;
  JSC::TemporalInstant::tryCreateIfValid((unint64_t)this, 1000000000 * v8.tv_sec + v8.tv_nsec, v9, v4, v5, v6, v7);
}

uint64_t JSC::temporalNowFuncTimeZoneId(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v8 = *((_QWORD *)this + 7);
  v9 = *(_QWORD *)(v8 + 90592);
  if (!v9)
  {
    JSC::DateCache::timeZoneCacheSlow((uint64_t **)(v8 + 90592), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v9 = *(_QWORD *)(v8 + 90592);
  }
  v10 = *(WTF::StringImpl **)(v9 + 8);
  if (v10)
    *(_DWORD *)v10 += 2;
  v29 = v10;
  v18 = JSC::jsNontrivialString(v8, (JSC::VM *)&v29, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v18;
}

uint64_t JSC::createCalendarConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::TemporalCalendarConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 416);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 416;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callTemporalCalendar, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalCalendar);
  JSC::TemporalCalendarConstructor::finishCreation(v24, this, v23);
  return v22;
}

unint64_t JSC::createDurationConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t SlowCase;
  unint64_t *v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(WTF::StringImpl **);
  WTF::StringImpl **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63[3];

  v10 = (unint64_t *)((char *)this + 40136);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(v11 + 664);
  LODWORD(v63[0]) = 75291;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_9;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v53);
    v10[2] = SlowCase + (int)v53;
LABEL_9:
    *v10 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v57, v58, v59);
LABEL_10:
  v15 = (unint64_t *)((char *)this + 38552);
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, v11, v12, (uint64_t)v63, (unint64_t)&JSC::TemporalDurationConstructor::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *(_QWORD *)(v11 + 424);
  if ((v23 & 1) != 0)
  {
    v54 = *(uint64_t (**)(WTF::StringImpl **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v55 = (WTF::StringImpl **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v55 = (WTF::StringImpl **)(v11 - 16);
    v63[0] = *v55;
    v63[1] = (WTF::StringImpl *)v11;
    v63[2] = (WTF::StringImpl *)(v11 + 424);
    v23 = v54(v63);
  }
  v24 = *(JSC::JSObject **)(v23 + 48);
  v25 = *v15;
  if (*v15 < *((_QWORD *)this + 4820))
    goto LABEL_14;
  v25 = *((_QWORD *)this + 4821);
  if ((v25 & 1) == 0)
  {
    v56 = *(_QWORD *)(v25 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v25 + HIDWORD(v56);
    *((_QWORD *)this + 4821) = v25 + (int)v56;
LABEL_14:
    *v15 = v25 + 48;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
  v25 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v60, v61, v62);
LABEL_15:
  *(_DWORD *)v25 = 0;
  JSC::InternalFunction::InternalFunction(v25, (uint64_t)this, SlowCase, (uint64_t)JSC::callTemporalDuration, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalDuration);
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0x800000002;
  *(_QWORD *)(v26 + 8) = "Duration";
  *(_DWORD *)(v26 + 16) = 4;
  v63[0] = (WTF::StringImpl *)v26;
  JSC::InternalFunction::finishCreation(v25, this, 0, (JSC::VM *)v63, 1, v27, v28, v29);
  v38 = v63[0];
  v63[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v24 == (JSC::JSObject *)2)
    v39 = 0;
  else
    v39 = v24;
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v25, (uint64_t)this, *(_QWORD *)(v10[227] + 2160), (uint64_t)v39, 14, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition(v39, (uint64_t)this, *(_QWORD *)(v10[227] + 1080), v25, 4, v40, v41, v42, v43);
  return v25;
}

unint64_t JSC::createInstantConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t SlowCase;
  unint64_t *v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(WTF::StringImpl **);
  WTF::StringImpl **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63[3];

  v10 = (unint64_t *)((char *)this + 40136);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(v11 + 664);
  LODWORD(v63[0]) = 75291;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_9;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v53);
    v10[2] = SlowCase + (int)v53;
LABEL_9:
    *v10 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v57, v58, v59);
LABEL_10:
  v15 = (unint64_t *)((char *)this + 38552);
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, v11, v12, (uint64_t)v63, (unint64_t)&JSC::TemporalInstantConstructor::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *(_QWORD *)(v11 + 432);
  if ((v23 & 1) != 0)
  {
    v54 = *(uint64_t (**)(WTF::StringImpl **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v55 = (WTF::StringImpl **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v55 = (WTF::StringImpl **)(v11 - 16);
    v63[0] = *v55;
    v63[1] = (WTF::StringImpl *)v11;
    v63[2] = (WTF::StringImpl *)(v11 + 432);
    v23 = v54(v63);
  }
  v24 = *(JSC::JSObject **)(v23 + 48);
  v25 = *v15;
  if (*v15 < *((_QWORD *)this + 4820))
    goto LABEL_14;
  v25 = *((_QWORD *)this + 4821);
  if ((v25 & 1) == 0)
  {
    v56 = *(_QWORD *)(v25 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v25 + HIDWORD(v56);
    *((_QWORD *)this + 4821) = v25 + (int)v56;
LABEL_14:
    *v15 = v25 + 48;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
  v25 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v60, v61, v62);
LABEL_15:
  *(_DWORD *)v25 = 0;
  JSC::InternalFunction::InternalFunction(v25, (uint64_t)this, SlowCase, (uint64_t)JSC::callTemporalInstant, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalInstant);
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0x700000002;
  *(_QWORD *)(v26 + 8) = "Instant";
  *(_DWORD *)(v26 + 16) = 4;
  v63[0] = (WTF::StringImpl *)v26;
  JSC::InternalFunction::finishCreation(v25, this, (const WTF::String *)1, (JSC::VM *)v63, 1, v27, v28, v29);
  v38 = v63[0];
  v63[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v24 == (JSC::JSObject *)2)
    v39 = 0;
  else
    v39 = v24;
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v25, (uint64_t)this, *(_QWORD *)(v10[227] + 2160), (uint64_t)v39, 14, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition(v39, (uint64_t)this, *(_QWORD *)(v10[227] + 1080), v25, 4, v40, v41, v42, v43);
  return v25;
}

unint64_t JSC::createNowObject(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v14;
  unint64_t SlowCase;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;

  v10 = (unint64_t *)((char *)this + 40136);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(v11 + 656);
  LODWORD(v63) = 8215;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = (unint64_t *)((char *)this + 38904);
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_9;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v55 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v55);
    v10[2] = SlowCase + (int)v55;
LABEL_9:
    *v10 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v57, v58, v59);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, v11, v12, (uint64_t)&v63, (unint64_t)&JSC::TemporalNow::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *v14;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_13;
  v23 = *((_QWORD *)this + 4865);
  if ((v23 & 1) == 0)
  {
    v56 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v23 + HIDWORD(v56);
    *((_QWORD *)this + 4865) = v23 + (int)v56;
LABEL_13:
    *v14 = v23 + 16;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
  v23 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v60, v61, v62);
LABEL_14:
  *(_DWORD *)v23 = 0;
  v24 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v23 = SlowCase >> 4;
  *(_DWORD *)(v23 + 4) = v24;
  *(_QWORD *)(v23 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v25 = *(_QWORD *)(v10[227] + 2776);
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0xC00000002;
  *(_QWORD *)(v26 + 8) = "Temporal.Now";
  *(_DWORD *)(v26 + 16) = 4;
  v63 = (WTF::StringImpl *)v26;
  v33 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v63, v27, v28, v29, v30, v31, v32);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v23, (uint64_t)this, v25, v33, 6, v34, v35, v36, v37);
  v45 = v63;
  v63 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::createPlainDateConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::TemporalPlainDateConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 440);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 440;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callTemporalPlainDate, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalPlainDate);
  JSC::TemporalPlainDateConstructor::finishCreation(v24, this, v23);
  return v22;
}

uint64_t JSC::createPlainDateTimeConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::TemporalPlainDateTimeConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 448);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 448;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callTemporalPlainDateTime, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalPlainDateTime);
  JSC::TemporalPlainDateTimeConstructor::finishCreation(v24, this, v23);
  return v22;
}

uint64_t JSC::createPlainTimeConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::TemporalPlainTimeConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 456);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 456;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callTemporalPlainTime, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalPlainTime);
  JSC::TemporalPlainTimeConstructor::finishCreation(v24, this, v23);
  return v22;
}

uint64_t JSC::createTimeZoneConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::TemporalTimeZoneConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 464);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 464;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callTemporalTimeZone, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructTemporalTimeZone);
  JSC::TemporalTimeZoneConstructor::finishCreation(v24, this, v23);
  return v22;
}

size_t WTF::tryMakeString<double,WTF::ASCIILiteral>(int **a1, uint64_t a2, double a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  int v13;
  size_t result;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  int *v19;
  _BYTE *v20;
  uint64_t v21;
  _OWORD v22[7];
  __int128 v23;
  char __s[16];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t __n[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (*(_QWORD *)&a3 >> 52) & 0x7FFLL;
  if ((_DWORD)v5 != 2047)
  {
    v7 = *(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0 && v7)
    {
      __s[0] = 45;
      v8 = &__s[1];
    }
    else
    {
      v8 = __s;
      if (!v7)
      {
        v6 = &__s[1];
        __s[0] = 48;
        goto LABEL_13;
      }
    }
    v9 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&a3 & 0x800FFFFFFFFFFFFFLL, v5);
    v6 = WTF::dragonbox::detail::to_shortest(v9, v10, (uint64_t)v8, v11);
    goto LABEL_13;
  }
  if ((*(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", 3);
    v6 = &__s[3];
  }
  else
  {
    v12 = __s;
    if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v12 = &__s[1];
    }
    *(_QWORD *)v12 = 0x7974696E69666E49;
    v6 = v12 + 8;
  }
LABEL_13:
  *v6 = 0;
  v13 = strlen(__s);
  memcpy(v22, __s, v13);
  *((_BYTE *)v22 + v13) = 0;
  result = strlen((const char *)v22);
  HIDWORD(v23) = result;
  v16 = *(_BYTE **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v17 = 0;
LABEL_15:
    if ((result & 0x80000000) == 0)
    {
      v18 = (result + v17);
      if (!__OFADD__((_DWORD)result, (_DWORD)v17))
      {
        if (!(_DWORD)v18)
        {
          v19 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_28;
        }
        if ((v18 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v18 + 20), __s);
          v19 = *(int **)__s;
          if (*(_QWORD *)__s)
          {
            v20 = (_BYTE *)(*(_QWORD *)__s + 20);
            **(_DWORD **)__s = 2;
            v19[1] = v18;
            *((_QWORD *)v19 + 1) = v19 + 5;
            v19[4] = 4;
            v28 = v22[4];
            v29 = v22[5];
            v30 = v22[6];
            *(_OWORD *)__n = v23;
            *(_OWORD *)__s = v22[0];
            v25 = v22[1];
            v26 = v22[2];
            v27 = v22[3];
            v21 = HIDWORD(v23);
            if (HIDWORD(v23) == 1)
            {
              *v20 = __s[0];
            }
            else if (HIDWORD(v23))
            {
              memcpy(v19 + 5, __s, HIDWORD(v23));
            }
            result = (size_t)&v20[v21];
            if ((_DWORD)v17 == 1)
            {
              *(_BYTE *)result = *v16;
            }
            else if ((_DWORD)v17)
            {
              result = (size_t)memcpy((void *)result, v16, v17);
            }
          }
          goto LABEL_28;
        }
      }
    }
    v19 = 0;
LABEL_28:
    *a1 = v19;
    return result;
  }
  v17 = v15 - 1;
  if (!((unint64_t)(v15 - 1) >> 31))
    goto LABEL_15;
  result = 124;
  __break(0xC471u);
  return result;
}

unint64_t JSC::LazyProperty<JSC::TemporalPlainDate,JSC::TemporalCalendar>::callFunc<JSC::TemporalPlainDate::finishCreation(JSC::VM &)::$_0>(JSC::TemporalCalendar **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  JSC::TemporalCalendar *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  JSC::TemporalCalendar *v15;
  uint64_t v16;
  unint64_t v17;
  JSC::Structure *v18;
  unint64_t v19;
  unint64_t result;
  unint64_t v21;
  JSC::TemporalCalendar *v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t (*v28)(_QWORD *);
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD v34[3];
  char v35;
  _QWORD *v36;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (char *)*a1 + 64;
  v13 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v30 = (unsigned int *)(v12 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *((_BYTE *)v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a1[1] & 0xFFFFFFFE) + 0x28);
  v17 = *(_QWORD *)(v16 + 416);
  if ((v17 & 1) != 0)
  {
    v28 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v29 = (_QWORD *)(v16 - 16);
    v34[0] = *v29;
    v34[1] = v16;
    v34[2] = v16 + 416;
    v17 = v28(v34);
  }
  v18 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v19 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v19 != -1)
    {
      v34[0] = &v35;
      v36 = v34;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v18 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  }
  result = JSC::TemporalCalendar::create(v15, (JSC::VM *)v17, v18, a4, a5, a6, a7, a8);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198C139E0);
  }
  v22 = *a1;
  v21 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C13A00);
  }
  if (v21 && *((_DWORD *)v22 + 190) >= *(unsigned __int8 *)(v21 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v22 + 192, v21);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C13A44);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C13A64);
  }
  v23 = *((_DWORD *)v11 + 22) - 1;
  *((_DWORD *)v11 + 22) = v23;
  if (!v23 && v12[93377])
  {
    if (*((_BYTE *)v11 + 86))
    {
      v24 = v12 - 64;
      v25 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v24 + 2) = v25;
      *((_QWORD *)v24 + 4) = v25;
      if (v25)
      {
        v26 = (unsigned int *)(v12 + 16);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 | 0x10, v26));
      }
      if (v12[93379])
        v12[93378] = 1;
      *((_BYTE *)v11 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)((char *)v11 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

void JSC::TemporalPlainDateConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x900000002;
  *(_QWORD *)(v6 + 8) = "PlainDate";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)3, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::TemporalPlainDateConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainDateConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callTemporalPlainDate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"PlainDate", 10);
}

unint64_t JSC::constructTemporalPlainDate(unint64_t this, JSC::JSGlobalObject *a2, const Duration *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  int8x16_t v18;
  uint64_t v19;
  unint64_t v20;
  JSC::JSObject *v21;
  unint64_t v22;
  JSC::JSObject *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  JSC::Heap **v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  JSC::Exception *v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::Exception *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  JSC::JSObject *v48;
  double v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  double v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v69;
  int v70;
  uint64_t (*v71)(__int128 *);
  _QWORD *v72;
  int v73;
  uint64_t (*v74)(JSC::JSObject **);
  JSC::JSObject **v75;
  uint64_t (*v76)(__int128 *);
  _QWORD *v77;
  int v78;
  int v79;
  int v80;
  JSC::JSGlobalObject *v81;
  WTF::StringImpl *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  JSC::JSObject *v88[3];

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 440);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v76 = *(uint64_t (**)(__int128 *))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v77 = (_QWORD *)(this - 16);
    *(_QWORD *)&v83 = *v77;
    *((_QWORD *)&v83 + 1) = this;
    *(_QWORD *)&v84 = this + 440;
    SubclassStructure = (JSC::JSObject *)v76(&v83);
  }
  else
  {
    *(_QWORD *)&v83 = *(_QWORD *)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v81 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v81 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, (JSC::VM **)&v83, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v70 = *(_DWORD *)(v10 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 440);
    if ((v15 & 1) != 0)
    {
      v71 = *(uint64_t (**)(__int128 *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v72 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v72 = (_QWORD *)(v14 - 16);
      *(_QWORD *)&v83 = *v72;
      *((_QWORD *)&v83 + 1) = v14;
      *(_QWORD *)&v84 = v14 + 440;
      v15 = v71(&v83);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v69 = *(_DWORD *)(v10 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = 0uLL;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v83 = 0u;
  v19 = *((int *)a2 + 8);
  v20 = v19 - 1;
  if (v19 == 1)
    goto LABEL_66;
  v21 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v88[0] = v21;
  if ((unint64_t)v21 < 0xFFFE000000000000)
  {
    v22 = (unint64_t)v21 - 0x2000000000000;
    if (v22 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(v88, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)0);
    else
      v18.i64[0] = v22;
    *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
  }
  else
  {
    *(double *)v18.i64 = (double)(int)v21;
  }
  if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    if (*(double *)v18.i64 == 0.0)
      *(double *)v18.i64 = 0.0;
    *(_QWORD *)&v83 = v18.i64[0];
    if (*(_DWORD *)(v10 + 80))
    {
      v78 = *(_DWORD *)(v10 + 80);
      if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    if (v20 >= 2)
    {
      v24 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v88[0] = v24;
      if ((unint64_t)v24 < 0xFFFE000000000000)
      {
        v46 = (unint64_t)v24 - 0x2000000000000;
        if (v46 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(v88, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
        else
          v18.i64[0] = v46;
        *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
      }
      else
      {
        *(double *)v18.i64 = (double)(int)v24;
      }
      if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
        && (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v25 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v25 = 0x3000000002;
        v26 = "Temporal.PlainDate month property must be finite";
        goto LABEL_33;
      }
      if (*(double *)v18.i64 == 0.0)
        *(double *)v18.i64 = 0.0;
      *((_QWORD *)&v83 + 1) = v18.i64[0];
      if (*(_DWORD *)(v10 + 80))
      {
        v79 = *(_DWORD *)(v10 + 80);
        if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      if (v20 >= 3)
      {
        v48 = (JSC::JSObject *)*((_QWORD *)a2 + 8);
        v88[0] = v48;
        if ((unint64_t)v48 < 0xFFFE000000000000)
        {
          v58 = (unint64_t)v48 - 0x2000000000000;
          if (v58 > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase(v88, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
          else
            v59 = *(double *)&v58;
          v49 = trunc(v59 + 0.0);
        }
        else
        {
          v49 = (double)(int)v48;
        }
        if (((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
          && (*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          v25 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v25 = 0x2E00000002;
          v26 = "Temporal.PlainDate day property must be finite";
          goto LABEL_33;
        }
        if (v49 == 0.0)
          v49 = 0.0;
        *((double *)&v84 + 1) = v49;
        if (*(_DWORD *)(v10 + 80))
        {
          v80 = *(_DWORD *)(v10 + 80);
          if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v10 + 16))
            return 0;
        }
      }
    }
LABEL_66:
    v61 = *(_QWORD *)(this + 56);
    LODWORD(v88[0]) = JSC::TemporalPlainDate::toPlainDate(this, (JSC::JSGlobalObject *)&v83, a3);
    if (!*(_DWORD *)(v61 + 80))
      return JSC::TemporalPlainDate::tryCreateIfValid(this, v17, (int *)v88, v63, v64, v65, v66, v67);
    v73 = *(_DWORD *)(v61 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, v62, v63, v64, v65, v66, v67);
    if (!*(_QWORD *)(v61 + 16))
      return JSC::TemporalPlainDate::tryCreateIfValid(this, v17, (int *)v88, v63, v64, v65, v66, v67);
    return 0;
  }
  v25 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v25 = 0x2F00000002;
  v26 = "Temporal.PlainDate year property must be finite";
LABEL_33:
  *(_QWORD *)(v25 + 8) = v26;
  *(_DWORD *)(v25 + 16) = 4;
  v82 = (WTF::StringImpl *)v25;
  v27 = *(_QWORD *)(this + 128);
  v28 = *(JSC::Heap ***)(this + 56);
  if ((v27 & 1) != 0)
  {
    v74 = *(uint64_t (**)(JSC::JSObject **))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v75 = (JSC::JSObject **)(this - 16);
    else
      v75 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v88[0] = *v75;
    v88[1] = (JSC::JSObject *)this;
    v88[2] = (JSC::JSObject *)(this + 128);
    v27 = v74(v88);
  }
  v29 = JSC::ErrorInstance::create(v28, v27, &v82, 0, 0, 0, 2, 1);
  v36 = (JSC::Exception *)v29;
  if ((v29 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
  {
    v36 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v29, 0, v30, v31, v32, v33, v34);
  }
  v44 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v36, v35, v30, v31, v32, v33, v34);
  v45 = v82;
  v82 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  return (unint64_t)v44;
}

unint64_t JSC::TemporalPlainDatePrototype::create(JSC::TemporalPlainDatePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1200000002;
  *(_QWORD *)(v13 + 8) = "Temporal.PlainDate";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalPlainDatePrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainDatePrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::temporalPlainDatePrototypeGetterCalendar(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  JSC::VM *v5;
  _QWORD v6[3];

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.PlainDate.prototype.calendar called on value that's not a PlainDate", 77);
  }
  result = *(_QWORD *)(a2 + 24);
  if ((result & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v4 = (_QWORD *)(a2 - 16);
    v6[0] = *v4;
    v6[1] = a2;
    v6[2] = a2 + 24;
    return v3(v6);
  }
  return result;
}

unint64_t JSC::temporalPlainDatePrototypeGetterYear(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.year called on value that's not a PlainDate", 73);
  }
  else
  {
    return ((int)(*(_DWORD *)(a2 + 16) << 11) >> 11) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDatePrototypeGetterMonth(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.month called on value that's not a PlainDate", 74);
  }
  else
  {
    return ((int)(*(_DWORD *)(a2 + 16) << 6) >> 27) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDatePrototypeGetterMonthCode(unint64_t result, unint64_t a2)
{
  JSC::VM *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  WTF::StringImpl *v38[3];

  v38[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(JSC::VM **)(result + 56);
  v37 = v2;
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(result, &v37, (uint64_t)"Temporal.PlainDate.prototype.monthCode called on value that's not a PlainDate", 78);
  }
  v3 = 0;
  v4 = ((int)(*(_DWORD *)(a2 + 16) << 6) >> 27);
  v5 = v4;
  do
  {
    ++v3;
    v6 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v6);
  if (v3 <= 2)
    v3 = 2;
  if ((v3 & 0x80000000) == 0)
  {
    v7 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      result = WTF::tryFastCompactMalloc((WTF *)(v7 + 20), v38);
      v14 = v38[0];
      if (v38[0])
      {
        v15 = 0;
        *((_BYTE *)v38[0] + 20) = 77;
        *(_DWORD *)v14 = 2;
        *((_DWORD *)v14 + 1) = v7;
        *((_QWORD *)v14 + 1) = (char *)v14 + 20;
        *((_DWORD *)v14 + 4) = 4;
        v16 = v4;
        do
        {
          --v15;
          v6 = v16 > 9;
          v16 /= 0xAu;
        }
        while (v6);
        if (-v15 != 1 && v15 != 0)
        {
          v17 = 0;
        }
        else
        {
          v17 = (v15 + 2);
          if (v17 <= 1)
            v18 = 1;
          else
            v18 = v17;
          memset((char *)v14 + 21, 48, v18);
        }
        v19 = 0;
        do
        {
          *((_BYTE *)&v38[1] + v19-- + 4) = (v4 % 0xA) | 0x30;
          v6 = v4 > 9;
          v4 /= 0xAu;
        }
        while (v6);
        if (v19 + 14 <= 13)
          memcpy((char *)v14 + v17 + 21, (char *)&v38[1] + v19 + 5, -v19);
        v38[0] = v14;
        v27 = JSC::jsNontrivialString((uint64_t)v2, (JSC::VM *)v38, v8, v9, v10, v11, v12, v13);
        v28 = v38[0];
        v38[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
        return v27;
      }
    }
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::temporalPlainDatePrototypeGetterDay(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.day called on value that's not a PlainDate", 72);
  }
  else
  {
    return (*(int *)(a2 + 16) >> 26) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDatePrototypeGetterDayOfWeek(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.dayOfWeek called on value that's not a PlainDate", 78);
  }
  else
  {
    return JSC::ISO8601::dayOfWeek() | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDatePrototypeGetterDayOfYear(unint64_t a1, unint64_t a2)
{
  int v2;
  _BOOL4 v3;
  unint64_t v4;
  unint64_t v5;
  JSC::VM *v7;

  v7 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v7, (uint64_t)"Temporal.PlainDate.prototype.dayOfYear called on value that's not a PlainDate", 78);
  }
  v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    v3 = 0;
  }
  else
  {
    HIDWORD(v4) = -1030792151 * (v2 << 11 >> 11) + 85899344;
    LODWORD(v4) = HIDWORD(v4);
    if ((v4 >> 4) < 0xA3D70B)
    {
      v3 = 1;
    }
    else
    {
      HIDWORD(v5) = -1030792151 * (v2 << 11 >> 11) + 85899344;
      LODWORD(v5) = HIDWORD(v5);
      v3 = (v5 >> 2) > 0x28F5C28;
    }
  }
  return (unsigned __int16)(WTF::firstDayOfMonth[12 * v3 - 1 + (v2 << 6 >> 27)]
                          + (v2 >> 26)) | 0xFFFE000000000000;
}

unint64_t JSC::temporalPlainDatePrototypeGetterWeekOfYear(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.weekOfYear called on value that's not a PlainDate", 79);
  }
  else
  {
    return JSC::ISO8601::weekOfYear(*(_DWORD *)(a2 + 16)) | 0xFFFE000000000000;
  }
}

uint64_t JSC::temporalPlainDatePrototypeGetterDaysInWeek(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.daysInWeek called on value that's not a PlainDate", 79);
  }
  else
  {
    return 0xFFFE000000000007;
  }
}

unint64_t JSC::temporalPlainDatePrototypeGetterDaysInMonth(unint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  JSC::VM *v9;

  v9 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v9, (uint64_t)"Temporal.PlainDate.prototype.daysInMonth called on value that's not a PlainDate", 80);
  }
  v2 = *(_DWORD *)(a2 + 16);
  v3 = v2 << 6;
  if ((v2 & 3) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = -1030792151 * (v2 << 11 >> 11) + 85899344;
    HIDWORD(v6) = v5;
    LODWORD(v6) = v5;
    if ((v6 >> 4) < 0xA3D70B)
    {
      v4 = 1;
    }
    else
    {
      HIDWORD(v7) = v5;
      LODWORD(v7) = v5;
      v4 = (v7 >> 2) > 0x28F5C28;
    }
  }
  return JSC::ISO8601::daysInMonths[12 * v4 - 1 + (v3 >> 27)] | 0xFFFE000000000000;
}

uint64_t JSC::temporalPlainDatePrototypeGetterDaysInYear(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  JSC::VM *v9;

  result = 0xFFFE00000000016DLL;
  v9 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v9, (uint64_t)"Temporal.PlainDate.prototype.daysInYear called on value that's not a PlainDate", 79);
  }
  v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) == 0)
  {
    v5 = -1030792151 * (v4 << 11 >> 11) + 85899344;
    HIDWORD(v7) = v5;
    LODWORD(v7) = v5;
    v6 = v7 >> 4;
    HIDWORD(v7) = v5;
    LODWORD(v7) = v5;
    if ((v7 >> 2) >= 0x28F5C29 || v6 <= 0xA3D70A)
      return 0xFFFE00000000016ELL;
  }
  return result;
}

uint64_t JSC::temporalPlainDatePrototypeGetterMonthsInYear(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDate.prototype.monthsInYear called on value that's not a PlainDate", 81);
  }
  else
  {
    return 0xFFFE00000000000CLL;
  }
}

uint64_t JSC::temporalPlainDatePrototypeGetterInLeapYear(unint64_t a1, unint64_t a2)
{
  int v2;
  int v4;
  unsigned int v5;
  unint64_t v6;
  JSC::VM *v8;

  v8 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v8, (uint64_t)"Temporal.PlainDate.prototype.inLeapYear called on value that's not a PlainDate", 79);
  }
  v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
    return 6;
  v4 = -1030792151 * (v2 << 11 >> 11) + 85899344;
  HIDWORD(v6) = v4;
  LODWORD(v6) = v4;
  v5 = v6 >> 4;
  HIDWORD(v6) = v4;
  LODWORD(v6) = v4;
  if ((v6 >> 2) < 0x28F5C29 && v5 > 0xA3D70A)
    return 6;
  else
    return 7;
}

void JSC::TemporalPlainDateTime::visitChildren(JSC::TemporalPlainDateTime *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (v16)
    v17 = (v16 & 1) == 0;
  else
    v17 = 0;
  if (v17)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_13;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_13:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

void JSC::TemporalPlainDateTime::visitChildren(JSC::TemporalPlainDateTime *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  BOOL v6;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    if (*((_QWORD *)this + 4))
      v6 = (*((_QWORD *)this + 4) & 1) == 0;
    else
      v6 = 0;
    if (v6)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
}

unint64_t JSC::TemporalPlainDateTime::create(uint64_t a1, JSC::VM *a2, _DWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  unint64_t result;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = *(_QWORD **)(a1 + 40840);
  if (!v12)
    v12 = (_QWORD *)JSC::GCClient::Heap::temporalPlainDateTimeSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v12[3];
  if (result < v12[4])
    goto LABEL_4;
  result = v12[5];
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(result + 8) ^ v12[6];
    v12[4] = result + HIDWORD(v15);
    v12[5] = result + (int)v15;
LABEL_4:
    v12[3] = result + 48;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, a1 + 192, 48, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)result = 0;
  v14 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v14;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = *a3;
  *(_QWORD *)(result + 20) = *a4;
  *(_QWORD *)(result + 32) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(result + 32) = (char *)JSC::LazyProperty<JSC::TemporalPlainDateTime,JSC::TemporalCalendar>::initLater<JSC::TemporalPlainDateTime::finishCreation(JSC::VM &)::$_0>(JSC::TemporalPlainDateTime::finishCreation(JSC::VM &)::$_0 const&)::theFunc
                           + 1;
  return result;
}

uint64_t JSC::TemporalPlainDateTime::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainDateTime::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::TemporalPlainDateTime::tryCreateIfValid(unint64_t a1, JSC::VM *a2, int *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  JSC::Heap **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  JSC::Exception *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD *);
  _QWORD *v56;
  WTF::StringImpl *v58;
  _QWORD v59[3];

  v9 = *(JSC::VM **)(a1 + 56);
  v10 = *((_DWORD *)a4 + 1);
  v11 = (v10 >> 10) & 0x3FF;
  v12 = (v10 >> 20) & 0x3FF;
  v13 = (*a3 << 6 >> 27) - 1;
  v14 = (*a3 << 11 >> 11) + (unsigned __int16)((__int16)v13 / 12);
  LODWORD(v15) = v13 - 12 * (((10923 * v13) >> 17) + ((10923 * v13) >> 31));
  v16 = (v15 & 0x8000) == 0;
  if ((v15 & 0x8000) != 0)
    v15 = 11;
  else
    v15 = (unsigned __int16)v15;
  if (!v16)
    --v14;
  HIDWORD(v18) = -1030792151 * v14 + 85899344;
  LODWORD(v18) = HIDWORD(v18);
  v17 = v18 >> 4;
  LODWORD(v18) = HIDWORD(v18);
  v19 = (v18 >> 2) > 0x28F5C28;
  if (v17 < 0xA3D70B)
    v19 = 1;
  if ((v14 & 3) != 0)
    v19 = 0;
  *(_OWORD *)&v20 = (__int128)(floor(floor(((double)v14 + -1.0) / 400.0)+ -4.0+ floor(((double)v14 + -1.0) * 0.25)+ -492.0+ ((double)v14 + -1970.0) * 365.0- (floor(((double)v14 + -1.0) / 100.0)+ -19.0))+ (double)(WTF::firstDayOfMonth[12 * v19 + v15] + (*a3 >> 26) - 1));
  v22 = (1000 * v11);
  v23 = 60000000000 * a4[1]
      + 3600000000000 * *a4
      + 1000000000 * a4[2]
      + 1000000 * (*((_DWORD *)a4 + 1) & 0x3FFu)
      + v12;
  v24 = __CFADD__(v23, v22);
  v25 = v23 + v22;
  v26 = v24;
  if (__PAIR128__(((__PAIR128__(v21, v20) * 0x4E94914F0000) >> 64) + __CFADD__(v25, 86400000000000 * v20) + v26, v25 + 86400000000000 * v20)+ __PAIR128__(468, 0x60167DE6004EFFFFLL) < __PAIR128__(936, 0xC02CFBCC009DFFFFLL))return JSC::TemporalPlainDateTime::create((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  v28 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v28 = 0x3600000002;
  *(_QWORD *)(v28 + 8) = "date time is out of range of ECMAScript representation";
  *(_DWORD *)(v28 + 16) = 4;
  v58 = (WTF::StringImpl *)v28;
  v29 = *(_QWORD *)(a1 + 128);
  v30 = *(JSC::Heap ***)(a1 + 56);
  if ((v29 & 1) != 0)
  {
    v55 = *(uint64_t (**)(_QWORD *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v56 = (_QWORD *)(a1 - 16);
    else
      v56 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v59[0] = *v56;
    v59[1] = a1;
    v59[2] = a1 + 128;
    v29 = v55(v59);
  }
  v31 = JSC::ErrorInstance::create(v30, v29, &v58, 0, 0, 0, 2, 1);
  v38 = (JSC::Exception *)v31;
  if ((v31 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)))
  {
    v38 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v31, 0, v32, v33, v34, v35, v36);
  }
  JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, v38, v37, v32, v33, v34, v35, v36);
  v46 = v58;
  v58 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  return 0;
}

unint64_t JSC::TemporalPlainTime::toPlainTime(unint64_t this, JSC::JSGlobalObject *a2, const Duration *a3)
{
  JSC::VM *v4;
  double v5;
  uint64_t v7;
  const char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Heap **v19;
  JSC::Heap **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t (*v48)(uint64_t *);
  uint64_t *v49;
  JSC::Heap **v50;
  uint64_t (*v51)(uint64_t *);
  uint64_t *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;

  v4 = *(JSC::VM **)(this + 56);
  v5 = *((double *)a2 + 4);
  if (v5 < 0.0 || v5 > 23.0)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x1400000002;
    v8 = "hour is out of range";
LABEL_20:
    *(_QWORD *)(v7 + 8) = v8;
    *(_DWORD *)(v7 + 16) = 4;
    v53 = (WTF::StringImpl *)v7;
    v18 = *(_QWORD *)(this + 128);
    v19 = *(JSC::Heap ***)(this + 56);
    if ((v18 & 1) != 0)
    {
      v48 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v49 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v49 = (uint64_t *)(this - 16);
      v54 = *v49;
      v55 = this;
      v56 = (char *)(this + 128);
      v18 = v48(&v54);
    }
    v20 = v19;
    goto LABEL_22;
  }
  v9 = *((double *)a2 + 5);
  if (v9 < 0.0 || v9 > 59.0)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x1600000002;
    v8 = "minute is out of range";
    goto LABEL_20;
  }
  v10 = *((double *)a2 + 6);
  if (v10 < 0.0 || v10 > 59.0)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x1600000002;
    v8 = "second is out of range";
    goto LABEL_20;
  }
  v11 = *((double *)a2 + 7);
  if (v11 < 0.0 || v11 > 999.0)
  {
    v46 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v46 = 0x1B00000002;
    v47 = "millisecond is out of range";
  }
  else
  {
    v12 = *((double *)a2 + 8);
    if (v12 < 0.0 || v12 > 999.0)
    {
      v46 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v46 = 0x1B00000002;
      v47 = "microsecond is out of range";
    }
    else
    {
      v13 = *((double *)a2 + 9);
      if (v13 >= 0.0 && v13 <= 999.0)
      {
        v14 = (unint64_t)(v11 & 0x3FF | ((v12 & 0x3FF) << 10) & 0xC00FFFFF | ((v13 & 0x3FF) << 20)) << 32;
        v15 = v10 << 16;
        v16 = v9 << 8;
        v17 = v5;
        return v16 | v14 | v15 | v17;
      }
      v46 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v46 = 0x1A00000002;
      v47 = "nanosecond is out of range";
    }
  }
  *(_QWORD *)(v46 + 8) = v47;
  *(_DWORD *)(v46 + 16) = 4;
  v53 = (WTF::StringImpl *)v46;
  v18 = *(_QWORD *)(this + 128);
  v20 = *(JSC::Heap ***)(this + 56);
  if ((v18 & 1) != 0)
  {
    v50 = *(JSC::Heap ***)(this + 56);
    v51 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v52 = (uint64_t *)(this - 16);
    else
      v52 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v54 = *v52;
    v55 = this;
    v56 = (char *)(this + 128);
    v18 = v51(&v54);
    v20 = v50;
  }
LABEL_22:
  v21 = JSC::ErrorInstance::create(v20, v18, &v53, 0, 0, 0, 2, 1);
  v28 = (JSC::Exception *)v21;
  if ((v21 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
  {
    v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
  }
  JSC::VM::throwException(v4, (JSC::JSGlobalObject *)this, v28, v27, v22, v23, v24, v25, v26);
  v36 = v53;
  v53 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  return v16 | v14 | v15 | v17;
}

unint64_t JSC::TemporalPlainDateTime::from(uint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  _BOOL8 v11;
  JSC::JSObject *IfValid;
  unsigned int v13;
  char **v14;
  _DWORD *TemporalCalendarWithISODefault;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  JSC::Heap **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  JSC::Exception *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  BOOL v74;
  int v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  WTF *v78;
  uint64_t v79;
  unint64_t v80;
  JSC::Heap **v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  JSC::Exception *v89;
  WTF::StringImpl *v90;
  void *v91;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t (*v119)(__int128 *);
  _QWORD *v120;
  uint64_t (*v121)(__int128 *);
  _QWORD *v122;
  uint64_t (*v123)(__int128 *);
  _QWORD *v124;
  uint64_t (*v125)(WTF::StringImpl **);
  WTF::StringImpl **v126;
  int v127;
  int v128;
  int v129;
  uint64_t (*v130)(__int128 *);
  _QWORD *v131;
  _DWORD *v132;
  __int128 v133;
  __int128 v134;
  char v135;
  _BYTE v136[16];
  int v137;
  char v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  char v145;
  _BYTE v146[16];
  int v147;
  unsigned __int8 v148;
  void *__src;
  int v150;
  unsigned int __n;
  size_t __n_4;
  unsigned __int8 v153;
  char v154;
  int v155;
  JSC::VM *v156;
  WTF::StringImpl *v157[3];

  v10 = *(_QWORD *)(a1 + 56);
  v156 = (JSC::VM *)v10;
  if ((_BYTE)a3)
    v11 = (a3 & 0xFF00) != 0;
  else
    v11 = 0;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_35;
  IfValid = (JSC::JSObject *)this;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 < 0x17)
  {
    if (v13 == 2)
    {
      v45 = *(int **)(this + 8);
      if ((v45 & 1) != 0)
      {
        v45 = *JSC::JSRopeString::resolveRope(this, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
        if (!v45)
          goto LABEL_24;
      }
      else if (!v45)
      {
LABEL_24:
        if (*(_DWORD *)(v10 + 80))
        {
          v117 = *(_DWORD *)(v10 + 80);
          if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v10 + 16))
          {
            IfValid = 0;
            if (!v45)
              return (unint64_t)IfValid;
            goto LABEL_85;
          }
        }
        if (v45)
        {
          v46 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
          v47 = v45[1];
          v48 = ((unint64_t)v45[4] >> 2) & 1;
        }
        else
        {
          v46 = 0;
          v47 = 0;
          v48 = 1;
        }
        JSC::ISO8601::parseCalendarDateTime(v46, v47 | (v48 << 32), a3, a4, a5, a6, a7, a8, (uint64_t)&v143);
        if (!v154)
          goto LABEL_69;
        v133 = v143;
        LOBYTE(v134) = 0;
        v138 = 0;
        v49 = v148;
        if (v148)
        {
          v134 = v144;
          v135 = v145;
          v136[0] = 0;
          v137 = -1;
          v50 = v147;
          if (v147 != -1)
          {
            ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))off_1E35B1E58[v147])(v157, v136, v146);
            v137 = v50;
          }
          v138 = 1;
        }
        LOBYTE(v139) = 0;
        v142 = 0;
        v51 = v153;
        if (v153)
        {
          v139 = (WTF *)&v141;
          v140 = 8;
          this = (uint64_t)__src;
          if (__src == &__n_4)
          {
            v53 = __n;
            memcpy(&v141, __src, __n);
          }
          else
          {
            __src = &__n_4;
            v139 = (WTF *)this;
            v52 = v150;
            v53 = __n;
            v150 = 8;
            LODWORD(v140) = v52;
          }
          __n = 0;
          HIDWORD(v140) = v53;
          v51 = 1;
          v142 = 1;
        }
        if (v49)
          v74 = v134 == 0;
        else
          v74 = 1;
        v75 = !v74;
        if (v74)
        {
          v76 = *(_QWORD *)(a1 + 448);
          if ((v76 & 1) != 0)
          {
            v125 = *(uint64_t (**)(WTF::StringImpl **))(v76 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v126 = (WTF::StringImpl **)(a1 - 16);
            else
              v126 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            v157[0] = *v126;
            v157[1] = (WTF::StringImpl *)a1;
            v157[2] = (WTF::StringImpl *)(a1 + 448);
            v76 = v125(v157);
          }
          if (BYTE12(v133))
            v77 = *(WTF::StringImpl **)((char *)&v133 + 4);
          else
            v77 = 0;
          v157[0] = v77;
          IfValid = (JSC::JSObject *)JSC::TemporalPlainDateTime::tryCreateIfValid(a1, (JSC::VM *)v76, (int *)&v133, (unsigned __int8 *)v157, a5, a6, a7, a8);
          if (!v142)
          {
LABEL_65:
            if (v138 && v137 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E35B1E48[v137])(v157, v136);
            if (!v75)
            {
LABEL_76:
              if (v154)
              {
                if (v153)
                {
                  v91 = __src;
                  if (&__n_4 != __src)
                  {
                    if (__src)
                    {
                      __src = 0;
                      v150 = 0;
                      WTF::fastFree((unint64_t)v91, (void *)this, a3, a4, a5, a6, a7, a8);
                    }
                  }
                }
                if (v148 && v147 != -1)
                  ((void (*)(__int128 *, _BYTE *))off_1E35B1E48[v147])(&v133, v146);
              }
              if (!v45)
                return (unint64_t)IfValid;
LABEL_85:
              if (*v45 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
              }
              else
              {
                *v45 -= 2;
              }
              return (unint64_t)IfValid;
            }
LABEL_69:
            v79 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v79 = 0x1300000002;
            *(_QWORD *)(v79 + 8) = "invalid date string";
            *(_DWORD *)(v79 + 16) = 4;
            v157[0] = (WTF::StringImpl *)v79;
            v80 = *(_QWORD *)(a1 + 128);
            v81 = *(JSC::Heap ***)(a1 + 56);
            if ((v80 & 1) != 0)
            {
              v119 = *(uint64_t (**)(__int128 *))(v80 & 0xFFFFFFFFFFFFFFFCLL);
              if ((a1 & 8) != 0)
                v120 = (_QWORD *)(a1 - 16);
              else
                v120 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
              *(_QWORD *)&v133 = *v120;
              *((_QWORD *)&v133 + 1) = a1;
              *(_QWORD *)&v134 = a1 + 128;
              v80 = v119(&v133);
            }
            v82 = JSC::ErrorInstance::create(v81, v80, v157, 0, 0, 0, 2, 1);
            v89 = (JSC::Exception *)v82;
            if ((v82 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C)))
            {
              v89 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v82, 0, v83, v84, v85, v86, v87);
            }
            JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v89, v88, v83, v84, v85, v86, v87);
            v90 = v157[0];
            v157[0] = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
              {
                WTF::StringImpl::~StringImpl(v90, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
              }
              else
              {
                *(_DWORD *)v90 -= 2;
              }
            }
            IfValid = 0;
            goto LABEL_76;
          }
        }
        else
        {
          IfValid = 0;
          if (!v51)
            goto LABEL_65;
        }
        v78 = v139;
        if (&v141 != (uint64_t *)v139 && v139)
        {
          v139 = 0;
          LODWORD(v140) = 0;
          WTF::fastFree((unint64_t)v78, (void *)this, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_65;
      }
      *v45 += 2;
      goto LABEL_24;
    }
LABEL_35:
    JSC::throwTypeError(a1, &v156, (uint64_t)"can only convert to PlainDateTime from object or string values", 63);
    return 0;
  }
  v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v14 != &JSC::TemporalPlainDateTime::s_info)
  {
    if (v14 == &JSC::TemporalPlainDate::s_info)
    {
      v73 = *(_QWORD *)(a1 + 448);
      if ((v73 & 1) != 0)
      {
        v123 = *(uint64_t (**)(__int128 *))(v73 & 0xFFFFFFFFFFFFFFFCLL);
        v124 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v124 = (_QWORD *)(a1 - 16);
        *(_QWORD *)&v143 = *v124;
        *((_QWORD *)&v143 + 1) = a1;
        *(_QWORD *)&v144 = a1 + 448;
        v73 = v123(&v143);
      }
      LODWORD(v133) = *((_DWORD *)IfValid + 4);
      LOWORD(v143) = 0;
      BYTE2(v143) = 0;
      DWORD1(v143) = 0;
      return JSC::TemporalPlainDateTime::create(v10, (JSC::VM *)v73, &v133, &v143, a5, a6, a7, a8);
    }
    TemporalCalendarWithISODefault = (_DWORD *)JSC::TemporalCalendar::getTemporalCalendarWithISODefault(a1, this, a3, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_14;
    v118 = *(_DWORD *)(v10 + 80);
    if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
    {
      v132 = TemporalCalendarWithISODefault;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
      TemporalCalendarWithISODefault = v132;
    }
    if (!*(_QWORD *)(v10 + 16))
    {
      if (&JSC::TemporalCalendar::s_info != (char **)(16
                                                     * *(unsigned int *)(16
                                                                       * (*TemporalCalendarWithISODefault & 0xFFFFFFFE)
                                                                       + 0x4C)))
        goto LABEL_36;
LABEL_14:
      v22 = TemporalCalendarWithISODefault[4];
      v23 = JSC::iso8601CalendarIDStorage;
      if (JSC::iso8601CalendarIDStorage == -1)
      {
        v24 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
        if (v24 != -1)
        {
          *(_QWORD *)&v143 = v157;
          *(_QWORD *)&v133 = &v143;
          std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v133, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
        }
        v23 = JSC::iso8601CalendarIDStorage;
      }
      if (v22 == v23)
      {
        JSC::TemporalPlainTime::toTemporalTimeRecord((JSC::TemporalPlainTime *)&v143, a1, IfValid, 1);
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_143;
        v127 = *(_DWORD *)(v10 + 80);
        if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_143:
          v155 = JSC::TemporalCalendar::isoDateFromFields(a1, (unsigned int *)IfValid, v11, v26, v27, v28, v29, v30);
          if (!*(_DWORD *)(v10 + 80))
            goto LABEL_144;
          v128 = *(_DWORD *)(v10 + 80);
          if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v31, v32, v33, v34, v35, v36);
          if (!*(_QWORD *)(v10 + 16))
          {
LABEL_144:
            v157[0] = (WTF::StringImpl *)JSC::TemporalPlainTime::regulateTime(a1, (double *)&v143, (const Duration *)v11);
            if (!*(_DWORD *)(v10 + 80))
              goto LABEL_18;
            v129 = *(_DWORD *)(v10 + 80);
            if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v37, v38, v39, v40, v41, v42);
            if (!*(_QWORD *)(v10 + 16))
            {
LABEL_18:
              v43 = *(_QWORD *)(a1 + 448);
              if ((v43 & 1) != 0)
              {
                v130 = *(uint64_t (**)(__int128 *))(v43 & 0xFFFFFFFFFFFFFFFCLL);
                if ((a1 & 8) != 0)
                  v131 = (_QWORD *)(a1 - 16);
                else
                  v131 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
                *(_QWORD *)&v133 = *v131;
                *((_QWORD *)&v133 + 1) = a1;
                *(_QWORD *)&v134 = a1 + 448;
                v43 = v130(&v133);
              }
              return JSC::TemporalPlainDateTime::tryCreateIfValid(a1, (JSC::VM *)v43, &v155, (unsigned __int8 *)v157, v39, v40, v41, v42);
            }
          }
        }
      }
      else
      {
LABEL_36:
        v54 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v54 = 0x2800000002;
        *(_QWORD *)(v54 + 8) = "unimplemented: from non-ISO8601 calendar";
        *(_DWORD *)(v54 + 16) = 4;
        *(_QWORD *)&v133 = v54;
        v55 = *(_QWORD *)(a1 + 128);
        v56 = *(JSC::Heap ***)(a1 + 56);
        if ((v55 & 1) != 0)
        {
          v121 = *(uint64_t (**)(__int128 *))(v55 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v122 = (_QWORD *)(a1 - 16);
          else
            v122 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          *(_QWORD *)&v143 = *v122;
          *((_QWORD *)&v143 + 1) = a1;
          *(_QWORD *)&v144 = a1 + 128;
          v55 = v121(&v143);
        }
        v57 = JSC::ErrorInstance::create(v56, v55, (WTF::StringImpl **)&v133, 0, 0, 0, 2, 1);
        v64 = (JSC::Exception *)v57;
        if ((v57 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C)))
        {
          v64 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v57, 0, v58, v59, v60, v61, v62);
        }
        JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v64, v63, v58, v59, v60, v61, v62);
        v72 = (WTF::StringImpl *)v133;
        *(_QWORD *)&v133 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
            WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
          }
          else
          {
            *(_DWORD *)v72 -= 2;
          }
        }
      }
    }
    return 0;
  }
  return (unint64_t)IfValid;
}

void JSC::TemporalPlainTime::toTemporalTimeRecord(JSC::TemporalPlainTime *this, uint64_t a2, JSC::JSObject *a3, int a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSObject *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  double v24;
  double v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  double v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD *);
  _QWORD *v53;
  double v54;
  JSC::VMTraps *v55;
  WTF::StringImpl *v58;
  JSC::JSObject *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  JSC::VM *v65;
  _QWORD v66[4];

  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 56);
  v65 = (JSC::VM *)v8;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v60 = 0u;
  v55 = (JSC::VMTraps *)(v8 + 64);
  do
  {
    v9 = JSC::temporalUnitsInTableOrder[v6];
    if (v9 >= 4)
    {
      v10 = JSC::temporalUnitSingularPropertyName(v8, JSC::temporalUnitsInTableOrder[v6]);
      v16 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a3, a2, v10, v11, v12, v13, v14, v15);
      v59 = v16;
      if (*(_DWORD *)(v8 + 80))
      {
        v27 = *(_DWORD *)(v8 + 80);
        if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v55, 7u, (uint64_t)v17, v18, v19, v20, v21, v22);
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_40;
        v16 = v59;
      }
      if (v16 != (JSC::JSObject *)10)
      {
        if ((unint64_t)v16 < 0xFFFE000000000000)
        {
          if ((unint64_t)v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase(&v59, (JSC::JSGlobalObject *)a2, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          else
            *(_QWORD *)&v26 = (char *)v16 - 0x2000000000000;
          v24 = trunc(v26 + 0.0);
        }
        else
        {
          v24 = (double)(int)v16;
        }
        if (*(_DWORD *)(v8 + 80))
        {
          v28 = *(_DWORD *)(v8 + 80);
          if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
          {
            v54 = v24;
            JSC::VMTraps::handleTraps(v55, 7u, (uint64_t)v17, v18, v19, v20, v21, v22);
            v24 = v54;
          }
          if (*(_QWORD *)(v8 + 16))
            goto LABEL_40;
        }
        if (((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
          && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          v31 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v31 = 0x2700000002;
          *(_QWORD *)(v31 + 8) = "Temporal time properties must be finite";
          *(_DWORD *)(v31 + 16) = 4;
          v58 = (WTF::StringImpl *)v31;
          v32 = *(_QWORD *)(a2 + 128);
          v33 = *(JSC::Heap ***)(a2 + 56);
          if ((v32 & 1) != 0)
          {
            v52 = *(uint64_t (**)(_QWORD *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a2 & 8) != 0)
              v53 = (_QWORD *)(a2 - 16);
            else
              v53 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
            v66[0] = *v53;
            v66[1] = a2;
            v66[2] = a2 + 128;
            v32 = v52(v66);
          }
          v34 = JSC::ErrorInstance::create(v33, v32, &v58, 0, 0, 0, 2, 1);
          v17 = (JSC::VM *)v34;
          if ((v34 & 0xFFFE000000000002) == 0
            && &JSC::Exception::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
          {
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        if (v9 >= 0xA)
        {
          __break(1u);
LABEL_43:
          v17 = (JSC::VM *)JSC::Exception::create(v8, v17, 0, v18, v19, v20, v21, v22);
LABEL_37:
          JSC::VM::throwException((JSC::VM *)v8, (JSC::JSGlobalObject *)a2, v17, v35, v18, v19, v20, v21, v22);
          v43 = v58;
          v58 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
            {
              WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
              WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            }
            else
            {
              *(_DWORD *)v43 -= 2;
            }
          }
LABEL_40:
          *((_OWORD *)this + 3) = 0u;
          *((_OWORD *)this + 4) = 0u;
          *((_OWORD *)this + 1) = 0u;
          *((_OWORD *)this + 2) = 0u;
          *(_OWORD *)this = 0u;
          return;
        }
        *((double *)&v60 + v9) = v24;
        v7 = 1;
      }
    }
    ++v6;
  }
  while (v6 != 10);
  if (((v7 | a4) & 1) != 0)
  {
    v29 = v63;
    *((_OWORD *)this + 2) = v62;
    *((_OWORD *)this + 3) = v29;
    *((_OWORD *)this + 4) = v64;
    v30 = v61;
    *(_OWORD *)this = v60;
    *((_OWORD *)this + 1) = v30;
  }
  else
  {
    JSC::throwTypeError(a2, &v65, (uint64_t)"Object must contain at least one Temporal time property", 56);
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
  }
}

unint64_t JSC::TemporalPlainTime::regulateTime(unint64_t a1, double *a2, const Duration *a3)
{
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  double v14;

  if ((a3 & 1) != 0)
    return JSC::TemporalPlainTime::toPlainTime(a1, (JSC::JSGlobalObject *)a2, a3);
  v4 = a2[4];
  if (v4 < 0.0)
    v4 = 0.0;
  if (v4 > 23.0)
    v4 = 23.0;
  v5 = v4;
  v6 = a2[5];
  if (v6 < 0.0)
    v6 = 0.0;
  if (v6 > 59.0)
    v6 = 59.0;
  v7 = v6 << 8;
  v8 = a2[6];
  if (v8 < 0.0)
    v8 = 0.0;
  if (v8 > 59.0)
    v8 = 59.0;
  v9 = v8 << 16;
  v10 = a2[7];
  if (v10 < 0.0)
    v10 = 0.0;
  if (v10 > 999.0)
    v10 = 999.0;
  v11 = v10 & 0x3FF;
  v12 = a2[8];
  if (v12 < 0.0)
    v12 = 0.0;
  if (v12 > 999.0)
    v12 = 999.0;
  v13 = (v12 & 0x3FF) << 10;
  v14 = a2[9];
  if (v14 < 0.0)
    v14 = 0.0;
  if (v14 > 999.0)
    v14 = 999.0;
  return v7 | v5 | v9 | ((unint64_t)(v13 | v11 | ((v14 & 0x3FF) << 20)) << 32);
}

void JSC::TemporalPlainTime::roundTime(uint64_t a1, unint64_t a2, int a3, unsigned int a4, double a5)
{
  int v5;
  unint64_t v7;
  double v8;
  __int128 v9;
  long double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  long double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  BOOL v67;
  double v68;
  double v69;
  long double v70;
  double v71;
  double v72;
  BOOL v73;
  double v74;
  double v75;
  double v76;
  double v77;
  BOOL v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  BOOL v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  BOOL v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  BOOL v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  BOOL v102;
  double v103;
  double v104;
  double v105;
  double v106;
  BOOL v107;
  double v108;
  double v109;
  double v110;
  double v111;
  BOOL v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  BOOL v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  BOOL v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  BOOL v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;

  v5 = a2;
  v7 = HIDWORD(a2);
  switch(a3)
  {
    case 3:
      v8 = JSC::roundNumberToIncrement(a4, ((double)((HIDWORD(a2) >> 20) & 0x3FF)+ ((double)((HIDWORD(a2) >> 10) & 0x3FF)+ ((double)(WORD2(a2) & 0x3FF)+ ((double)BYTE2(a2) + ((double)BYTE1(a2) + (double)a2 * 60.0) * 60.0) * 1000.0)* 1000.0)* 1000.0)/ 8.64e13, a5);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v8;
      v9 = 0uLL;
      *(_OWORD *)(a1 + 32) = 0u;
      goto LABEL_22;
    case 4:
      v10 = JSC::roundNumberToIncrement(a4, (((double)BYTE2(a2)+ (double)(WORD2(a2) & 0x3FF) * 0.001+ (double)((HIDWORD(a2) >> 10) & 0x3FF) * 0.000001+ (double)((HIDWORD(a2) >> 20) & 0x3FF) * 0.000000001)/ 60.0+ (double)BYTE1(a2))/ 60.0+ (double)a2, a5)+ 0.0;
      v11 = floor(v10 / 24.0);
      v12 = fmod(v10, 24.0);
      v13 = v12 == 0.0;
      v14 = -0.0;
      if (v12 < 0.0)
        v14 = 24.0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = v12 + v14;
      if (v13)
        v15 = 0.0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v11;
      *(double *)(a1 + 32) = v15;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      goto LABEL_99;
    case 5:
      v16 = JSC::roundNumberToIncrement(a4, ((double)BYTE2(a2)+ (double)(WORD2(a2) & 0x3FF) * 0.001+ (double)((HIDWORD(a2) >> 10) & 0x3FF) * 0.000001+ (double)((HIDWORD(a2) >> 20) & 0x3FF) * 0.000000001)/ 60.0+ (double)BYTE1(a2), a5)+ 0.0;
      v17 = floor(v16 / 60.0) + (double)v5;
      v18 = fmod(v16, 60.0);
      v19 = v18 == 0.0;
      if (v18 >= 0.0)
        v20 = -0.0;
      else
        v20 = 60.0;
      v21 = v18 + v20;
      if (v19)
        v22 = 0.0;
      else
        v22 = v21;
      v23 = floor(v17 / 24.0);
      v24 = fmod(v17, 24.0);
      v25 = v24 == 0.0;
      if (v24 >= 0.0)
        v26 = -0.0;
      else
        v26 = 24.0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v27 = v24 + v26;
      if (v25)
        v27 = 0.0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v23;
      *(double *)(a1 + 32) = v27;
      *(double *)(a1 + 40) = v22;
      v9 = 0uLL;
LABEL_22:
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v9;
      return;
    case 6:
      v28 = JSC::roundNumberToIncrement(a4, (double)BYTE2(a2)+ (double)(WORD2(a2) & 0x3FF) * 0.001+ (double)((HIDWORD(a2) >> 10) & 0x3FF) * 0.000001+ (double)((HIDWORD(a2) >> 20) & 0x3FF) * 0.000000001, a5)+ 0.0;
      v29 = floor(v28 / 60.0) + (double)BYTE1(v5);
      v30 = fmod(v28, 60.0);
      v31 = v30 == 0.0;
      if (v30 >= 0.0)
        v32 = -0.0;
      else
        v32 = 60.0;
      v33 = v30 + v32;
      if (v31)
        v34 = 0.0;
      else
        v34 = v33;
      v35 = floor(v29 / 60.0) + (double)v5;
      v36 = fmod(v29, 60.0);
      v37 = v36 == 0.0;
      if (v36 >= 0.0)
        v38 = -0.0;
      else
        v38 = 60.0;
      v39 = v36 + v38;
      if (v37)
        v40 = 0.0;
      else
        v40 = v39;
      v41 = floor(v35 / 24.0);
      v42 = fmod(v35, 24.0);
      v43 = v42 == 0.0;
      if (v42 >= 0.0)
        v44 = -0.0;
      else
        v44 = 24.0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v45 = v42 + v44;
      if (v43)
        v45 = 0.0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v41;
      *(double *)(a1 + 32) = v45;
      *(double *)(a1 + 40) = v40;
      *(double *)(a1 + 48) = v34;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      goto LABEL_67;
    case 7:
      v46 = JSC::roundNumberToIncrement(a4, (double)(WORD2(a2) & 0x3FF)+ (double)((HIDWORD(a2) >> 10) & 0x3FF) * 0.001+ (double)((HIDWORD(a2) >> 20) & 0x3FF) * 0.000001, a5)+ 0.0;
      v47 = floor(v46 / 1000.0) + (double)BYTE2(v5);
      v48 = fmod(v46, 1000.0);
      v49 = v48 == 0.0;
      if (v48 >= 0.0)
        v50 = -0.0;
      else
        v50 = 1000.0;
      v51 = v48 + v50;
      if (v49)
        v52 = 0.0;
      else
        v52 = v51;
      v53 = floor(v47 / 60.0) + (double)BYTE1(v5);
      v54 = fmod(v47, 60.0);
      v55 = v54 == 0.0;
      if (v54 >= 0.0)
        v56 = -0.0;
      else
        v56 = 60.0;
      v57 = v54 + v56;
      if (v55)
        v58 = 0.0;
      else
        v58 = v57;
      v59 = floor(v53 / 60.0) + (double)v5;
      v60 = fmod(v53, 60.0);
      v61 = v60 == 0.0;
      if (v60 >= 0.0)
        v62 = -0.0;
      else
        v62 = 60.0;
      v63 = v60 + v62;
      if (v61)
        v64 = 0.0;
      else
        v64 = v63;
      v65 = floor(v59 / 24.0);
      v66 = fmod(v59, 24.0);
      v67 = v66 == 0.0;
      if (v66 >= 0.0)
        v68 = -0.0;
      else
        v68 = 24.0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v69 = v66 + v68;
      if (v67)
        v69 = 0.0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v65;
      *(double *)(a1 + 32) = v69;
      *(double *)(a1 + 40) = v64;
      *(double *)(a1 + 48) = v58;
      *(double *)(a1 + 56) = v52;
      *(_QWORD *)(a1 + 72) = 0;
LABEL_67:
      *(_QWORD *)(a1 + 64) = 0;
      break;
    case 8:
      v70 = JSC::roundNumberToIncrement(a4, (double)((HIDWORD(a2) >> 10) & 0x3FF) + (double)((HIDWORD(a2) >> 20) & 0x3FF) * 0.001, a5)+ 0.0;
      v71 = floor(v70 / 1000.0) + (double)(v7 & 0x3FF);
      v72 = fmod(v70, 1000.0);
      v73 = v72 == 0.0;
      if (v72 >= 0.0)
        v74 = -0.0;
      else
        v74 = 1000.0;
      v75 = v72 + v74;
      if (v73)
        v75 = 0.0;
      v134 = v75;
      v76 = floor(v71 / 1000.0) + (double)BYTE2(v5);
      v77 = fmod(v71, 1000.0);
      v78 = v77 == 0.0;
      if (v77 >= 0.0)
        v79 = -0.0;
      else
        v79 = 1000.0;
      v80 = v77 + v79;
      if (v78)
        v81 = 0.0;
      else
        v81 = v80;
      v82 = floor(v76 / 60.0) + (double)BYTE1(v5);
      v83 = fmod(v76, 60.0);
      v84 = v83 == 0.0;
      if (v83 >= 0.0)
        v85 = -0.0;
      else
        v85 = 60.0;
      v86 = v83 + v85;
      if (v84)
        v87 = 0.0;
      else
        v87 = v86;
      v88 = floor(v82 / 60.0) + (double)v5;
      v89 = fmod(v82, 60.0);
      v90 = v89 == 0.0;
      if (v89 >= 0.0)
        v91 = -0.0;
      else
        v91 = 60.0;
      v92 = v89 + v91;
      if (v90)
        v93 = 0.0;
      else
        v93 = v92;
      v94 = floor(v88 / 24.0);
      v95 = fmod(v88, 24.0);
      v96 = v95 == 0.0;
      if (v95 >= 0.0)
        v97 = -0.0;
      else
        v97 = 24.0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v98 = v95 + v97;
      if (v96)
        v98 = 0.0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v94;
      *(double *)(a1 + 32) = v98;
      *(double *)(a1 + 40) = v93;
      *(double *)(a1 + 48) = v87;
      *(double *)(a1 + 56) = v81;
      *(double *)(a1 + 64) = v134;
LABEL_99:
      *(_QWORD *)(a1 + 72) = 0;
      break;
    case 9:
      v99 = JSC::roundNumberToIncrement(a4, (double)((HIDWORD(a2) >> 20) & 0x3FF), a5);
      v100 = floor(v99 / 1000.0) + (double)((v7 >> 10) & 0x3FF);
      v101 = fmod(v99, 1000.0);
      v102 = v101 == 0.0;
      if (v101 >= 0.0)
        v103 = -0.0;
      else
        v103 = 1000.0;
      v104 = v101 + v103;
      if (v102)
        v104 = 0.0;
      v135 = v104;
      v105 = floor(v100 / 1000.0) + (double)(v7 & 0x3FF);
      v106 = fmod(v100, 1000.0);
      v107 = v106 == 0.0;
      if (v106 >= 0.0)
        v108 = -0.0;
      else
        v108 = 1000.0;
      v109 = v106 + v108;
      if (v107)
        v109 = 0.0;
      v133 = v109;
      v110 = floor(v105 / 1000.0) + (double)BYTE2(v5);
      v111 = fmod(v105, 1000.0);
      v112 = v111 == 0.0;
      if (v111 >= 0.0)
        v113 = -0.0;
      else
        v113 = 1000.0;
      v114 = v111 + v113;
      if (v112)
        v115 = 0.0;
      else
        v115 = v114;
      v116 = floor(v110 / 60.0) + (double)BYTE1(v5);
      v117 = fmod(v110, 60.0);
      v118 = v117 == 0.0;
      if (v117 >= 0.0)
        v119 = -0.0;
      else
        v119 = 60.0;
      v120 = v117 + v119;
      if (v118)
        v121 = 0.0;
      else
        v121 = v120;
      v122 = floor(v116 / 60.0) + (double)v5;
      v123 = fmod(v116, 60.0);
      v124 = v123 == 0.0;
      if (v123 >= 0.0)
        v125 = -0.0;
      else
        v125 = 60.0;
      v126 = v123 + v125;
      if (v124)
        v127 = 0.0;
      else
        v127 = v126;
      v128 = floor(v122 / 24.0);
      v129 = fmod(v122, 24.0);
      v130 = v129 == 0.0;
      if (v129 >= 0.0)
        v131 = -0.0;
      else
        v131 = 24.0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v132 = v129 + v131;
      if (v130)
        v132 = 0.0;
      *(_QWORD *)a1 = 0;
      *(double *)(a1 + 24) = v128;
      *(double *)(a1 + 32) = v132;
      *(double *)(a1 + 40) = v127;
      *(double *)(a1 + 48) = v121;
      *(double *)(a1 + 56) = v115;
      *(double *)(a1 + 64) = v133;
      *(double *)(a1 + 72) = v135;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198C16E08);
  }
}

void JSC::TemporalPlainTime::toPartialTime(JSC::TemporalPlainTime *this, uint64_t a2, JSC::JSObject *a3, int a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSObject *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  double v24;
  uint64_t v26;
  __int128 *v27;
  double v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  double v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD *);
  _QWORD *v56;
  double v57;
  JSC::VMTraps *v58;
  WTF::StringImpl *v61;
  JSC::JSObject *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  JSC::VM *v69;
  _QWORD v70[4];

  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 56);
  v69 = (JSC::VM *)v8;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v58 = (JSC::VMTraps *)(v8 + 64);
  do
  {
    v9 = JSC::temporalUnitsInTableOrder[v6];
    if (v9 >= 4)
    {
      v10 = JSC::temporalUnitSingularPropertyName(v8, JSC::temporalUnitsInTableOrder[v6]);
      v16 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a3, a2, v10, v11, v12, v13, v14, v15);
      v62 = v16;
      if (*(_DWORD *)(v8 + 80))
      {
        v29 = *(_DWORD *)(v8 + 80);
        if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v58, 7u, (uint64_t)v17, v18, v19, v20, v21, v22);
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_40;
        v16 = v62;
      }
      if (v16 != (JSC::JSObject *)10)
      {
        if ((unint64_t)v16 < 0xFFFE000000000000)
        {
          if ((unint64_t)v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase(&v62, (JSC::JSGlobalObject *)a2, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          else
            *(_QWORD *)&v28 = (char *)v16 - 0x2000000000000;
          v24 = trunc(v28 + 0.0);
        }
        else
        {
          v24 = (double)(int)v16;
        }
        if (*(_DWORD *)(v8 + 80))
        {
          v30 = *(_DWORD *)(v8 + 80);
          if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
          {
            v57 = v24;
            JSC::VMTraps::handleTraps(v58, 7u, (uint64_t)v17, v18, v19, v20, v21, v22);
            v24 = v57;
          }
          if (*(_QWORD *)(v8 + 16))
            goto LABEL_40;
        }
        if (((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
          && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          v34 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v34 = 0x2700000002;
          *(_QWORD *)(v34 + 8) = "Temporal time properties must be finite";
          *(_DWORD *)(v34 + 16) = 4;
          v61 = (WTF::StringImpl *)v34;
          v35 = *(_QWORD *)(a2 + 128);
          v36 = *(JSC::Heap ***)(a2 + 56);
          if ((v35 & 1) != 0)
          {
            v55 = *(uint64_t (**)(_QWORD *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a2 & 8) != 0)
              v56 = (_QWORD *)(a2 - 16);
            else
              v56 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
            v70[0] = *v56;
            v70[1] = a2;
            v70[2] = a2 + 128;
            v35 = v55(v70);
          }
          v37 = JSC::ErrorInstance::create(v36, v35, &v61, 0, 0, 0, 2, 1);
          v17 = (JSC::VM *)v37;
          if ((v37 & 0xFFFE000000000002) == 0
            && &JSC::Exception::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
          {
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        v26 = (v9 - 4);
        if (v26 >= 6)
        {
          __break(1u);
LABEL_43:
          v17 = (JSC::VM *)JSC::Exception::create(v8, v17, 0, v18, v19, v20, v21, v22);
LABEL_37:
          JSC::VM::throwException((JSC::VM *)v8, (JSC::JSGlobalObject *)a2, v17, v38, v18, v19, v20, v21, v22);
          v46 = v61;
          v61 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
LABEL_40:
          *((_OWORD *)this + 4) = 0u;
          *((_OWORD *)this + 5) = 0u;
          *((_OWORD *)this + 2) = 0u;
          *((_OWORD *)this + 3) = 0u;
          *(_OWORD *)this = 0u;
          *((_OWORD *)this + 1) = 0u;
          return;
        }
        v27 = &v63 + v26;
        *(double *)v27 = v24;
        v7 = 1;
        *((_BYTE *)v27 + 8) = 1;
      }
    }
    ++v6;
  }
  while (v6 != 10);
  if (((v7 | a4) & 1) != 0)
  {
    v31 = v66;
    *((_OWORD *)this + 2) = v65;
    *((_OWORD *)this + 3) = v31;
    v32 = v68;
    *((_OWORD *)this + 4) = v67;
    *((_OWORD *)this + 5) = v32;
    v33 = v64;
    *(_OWORD *)this = v63;
    *((_OWORD *)this + 1) = v33;
  }
  else
  {
    JSC::throwTypeError(a2, &v69, (uint64_t)"Object must contain at least one Temporal time property", 56);
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
  }
}

void JSC::TemporalPlainDateTimeConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xD00000002;
  *(_QWORD *)(v6 + 8) = "PlainDateTime";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)3, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::TemporalPlainDateTimeConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainDateTimeConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callTemporalPlainDateTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"PlainDateTime", 14);
}

unint64_t JSC::constructTemporalPlainDateTime(unint64_t this, JSC::JSGlobalObject *a2, const Duration *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  int8x16_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  double v21;
  JSC::JSObject *v23;
  double v24;
  uint64_t v26;
  JSC::JSObject **v27;
  _QWORD *v28;
  JSC::JSObject *v29;
  BOOL v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  const Duration *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::Exception *v46;
  uint64_t v47;
  unint64_t v48;
  JSC::Heap **v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  JSC::Exception *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  uint64_t (*v79)(_OWORD *);
  _QWORD *v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(JSC::JSObject **);
  JSC::JSObject **v85;
  uint64_t (*v86)(_OWORD *);
  _QWORD *v87;
  int v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  _OWORD v91[5];
  JSC::JSObject *v92[3];

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 448);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v86 = *(uint64_t (**)(_OWORD *))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v87 = (_QWORD *)(this - 16);
    *(_QWORD *)&v91[0] = *v87;
    *((_QWORD *)&v91[0] + 1) = this;
    *(_QWORD *)&v91[1] = this + 448;
    SubclassStructure = (JSC::JSObject *)v86(v91);
LABEL_13:
    v17 = SubclassStructure;
    goto LABEL_15;
  }
  *(_QWORD *)&v91[0] = *(_QWORD *)(this + 56);
  for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
  {
    while (1)
    {
      v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
      if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
        break;
      i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
    }
    if (*((_BYTE *)i + 5) != 61)
    {
      v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
      goto LABEL_10;
    }
    if (JSC::ProxyObject::isRevoked(i))
      break;
  }
  JSC::throwTypeError(this, (JSC::VM **)v91, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v14 = 0;
LABEL_10:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_11;
  v78 = *(_DWORD *)(v10 + 80);
  if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_11:
    v15 = *(_QWORD *)(v14 + 448);
    if ((v15 & 1) != 0)
    {
      v79 = *(uint64_t (**)(_OWORD *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v80 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v80 = (_QWORD *)(v14 - 16);
      *(_QWORD *)&v91[0] = *v80;
      *((_QWORD *)&v91[0] + 1) = v14;
      *(_QWORD *)&v91[1] = v14 + 448;
      v15 = v79(v91);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  v17 = 0;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = *(_DWORD *)(v10 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = 0uLL;
  memset(v91, 0, sizeof(v91));
  if ((unint64_t)(*((int *)a2 + 8) - 1) >= 9)
    v19 = 9;
  else
    v19 = *((int *)a2 + 8) - 1;
  if (!(_DWORD)v19)
    goto LABEL_56;
  v20 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v92[0] = v20;
  if ((unint64_t)v20 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v75 = (unint64_t)v20 - 0x2000000000000;
    if (v75 >= 0xFFFC000000000000)
      JSC::JSValue::toNumberSlowCase(v92, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)0);
    else
      v18.i64[0] = v75;
    *(double *)v18.i64 = *(double *)v18.i64 + 0.0;
    v21 = trunc(*(double *)v18.i64);
  }
  else
  {
    v21 = (double)(int)v20;
  }
  *(double *)v91 = v21;
  if (*(_DWORD *)(v10 + 80))
  {
    v81 = *(_DWORD *)(v10 + 80);
    if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
    && (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_59;
  }
  if (v19 < 2)
    goto LABEL_56;
  v23 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
  v92[0] = v23;
  if ((unint64_t)v23 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v76 = (unint64_t)v23 - 0x2000000000000;
    if (v76 >= 0xFFFC000000000000)
      JSC::JSValue::toNumberSlowCase(v92, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
    else
      v18.i64[0] = v76;
    *(double *)v18.i64 = *(double *)v18.i64 + 0.0;
    v24 = trunc(*(double *)v18.i64);
  }
  else
  {
    v24 = (double)(int)v23;
  }
  *((double *)v91 + 1) = v24;
  if (*(_DWORD *)(v10 + 80))
  {
    v88 = *(_DWORD *)(v10 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    v26 = v19 - 2;
    v27 = (JSC::JSObject **)((char *)a2 + 64);
    v28 = (_QWORD *)&v91[1] + 1;
    while (v26)
    {
      v29 = *v27;
      v92[0] = v29;
      if ((unint64_t)v29 < 0xFFFE000000000000)
      {
        v31 = (unint64_t)v29 - 0x2000000000000;
        if (v31 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(v92, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
        else
          v18.i64[0] = v31;
        *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
      }
      else
      {
        *(double *)v18.i64 = (double)(int)v29;
      }
      *v28 = v18.i64[0];
      if (*(_DWORD *)(v10 + 80))
      {
        v32 = *(_DWORD *)(v10 + 80);
        if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        {
          v89 = v18.i64[0];
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v18.i64[0] = v89;
        }
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      --v26;
      v30 = ((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) == 0;
      ++v27;
      ++v28;
      if (!v30)
        goto LABEL_59;
    }
LABEL_56:
    v33 = *(_QWORD *)(this + 56);
    LODWORD(v90) = JSC::TemporalPlainDate::toPlainDate(this, (JSC::JSGlobalObject *)v91, a3);
    if (!*(_DWORD *)(v33 + 80))
      goto LABEL_119;
    v82 = *(_DWORD *)(v33 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, (uint64_t)v34, v35, v36, v37, v38, v39);
    if (!*(_QWORD *)(v33 + 16))
    {
LABEL_119:
      v92[0] = (JSC::JSObject *)JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)v91, v34);
      if (!*(_DWORD *)(v33 + 80))
        return JSC::TemporalPlainDateTime::tryCreateIfValid(this, v17, (int *)&v90, (unsigned __int8 *)v92, v42, v43, v44, v45);
      v83 = *(_DWORD *)(v33 + 80);
      if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v40, v41, v42, v43, v44, v45);
      if (!*(_QWORD *)(v33 + 16))
        return JSC::TemporalPlainDateTime::tryCreateIfValid(this, v17, (int *)&v90, (unsigned __int8 *)v92, v42, v43, v44, v45);
    }
    return 0;
  }
LABEL_59:
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x3000000002;
  *(_QWORD *)(v47 + 8) = "Temporal.PlainDateTime properties must be finite";
  *(_DWORD *)(v47 + 16) = 4;
  v90 = (WTF::StringImpl *)v47;
  v48 = *(_QWORD *)(this + 128);
  v49 = *(JSC::Heap ***)(this + 56);
  if ((v48 & 1) != 0)
  {
    v84 = *(uint64_t (**)(JSC::JSObject **))(v48 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v85 = (JSC::JSObject **)(this - 16);
    else
      v85 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v92[0] = *v85;
    v92[1] = (JSC::JSObject *)this;
    v92[2] = (JSC::JSObject *)(this + 128);
    v48 = v84(v92);
  }
  v50 = JSC::ErrorInstance::create(v49, v48, &v90, 0, 0, 0, 2, 1);
  v57 = (JSC::Exception *)v50;
  if ((v50 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C)))
  {
    v57 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v50, 0, v51, v52, v53, v54, v55);
  }
  v46 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v57, v56, v51, v52, v53, v54, v55);
  v65 = v90;
  v90 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  return (unint64_t)v46;
}

unint64_t JSC::TemporalPlainDateTimePrototype::create(JSC::TemporalPlainDateTimePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1600000002;
  *(_QWORD *)(v13 + 8) = "Temporal.PlainDateTime";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalPlainDateTimePrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainDateTimePrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::temporalPlainDateTimePrototypeGetterCalendar(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  JSC::VM *v5;
  _QWORD v6[3];

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.PlainDateTime.prototype.calendar called on value that's not a PlainDateTime", 85);
  }
  result = *(_QWORD *)(a2 + 32);
  if ((result & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v4 = (_QWORD *)(a2 - 16);
    v6[0] = *v4;
    v6[1] = a2;
    v6[2] = a2 + 32;
    return v3(v6);
  }
  return result;
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterYear(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.year called on value that's not a PlainDateTime", 81);
  }
  else
  {
    return ((int)(*(_DWORD *)(a2 + 16) << 11) >> 11) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterMonth(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.month called on value that's not a PlainDateTime", 82);
  }
  else
  {
    return ((int)(*(_DWORD *)(a2 + 16) << 6) >> 27) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterMonthCode(unint64_t result, unint64_t a2)
{
  JSC::VM *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  WTF::StringImpl *v38[3];

  v38[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(JSC::VM **)(result + 56);
  v37 = v2;
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(result, &v37, (uint64_t)"Temporal.PlainDateTime.prototype.monthCode called on value that's not a PlainDateTime", 86);
  }
  v3 = 0;
  v4 = ((int)(*(_DWORD *)(a2 + 16) << 6) >> 27);
  v5 = v4;
  do
  {
    ++v3;
    v6 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v6);
  if (v3 <= 2)
    v3 = 2;
  if ((v3 & 0x80000000) == 0)
  {
    v7 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      result = WTF::tryFastCompactMalloc((WTF *)(v7 + 20), v38);
      v14 = v38[0];
      if (v38[0])
      {
        v15 = 0;
        *((_BYTE *)v38[0] + 20) = 77;
        *(_DWORD *)v14 = 2;
        *((_DWORD *)v14 + 1) = v7;
        *((_QWORD *)v14 + 1) = (char *)v14 + 20;
        *((_DWORD *)v14 + 4) = 4;
        v16 = v4;
        do
        {
          --v15;
          v6 = v16 > 9;
          v16 /= 0xAu;
        }
        while (v6);
        if (-v15 != 1 && v15 != 0)
        {
          v17 = 0;
        }
        else
        {
          v17 = (v15 + 2);
          if (v17 <= 1)
            v18 = 1;
          else
            v18 = v17;
          memset((char *)v14 + 21, 48, v18);
        }
        v19 = 0;
        do
        {
          *((_BYTE *)&v38[1] + v19-- + 4) = (v4 % 0xA) | 0x30;
          v6 = v4 > 9;
          v4 /= 0xAu;
        }
        while (v6);
        if (v19 + 14 <= 13)
          memcpy((char *)v14 + v17 + 21, (char *)&v38[1] + v19 + 5, -v19);
        v38[0] = v14;
        v27 = JSC::jsNontrivialString((uint64_t)v2, (JSC::VM *)v38, v8, v9, v10, v11, v12, v13);
        v28 = v38[0];
        v38[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
        return v27;
      }
    }
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterDay(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.day called on value that's not a PlainDateTime", 80);
  }
  else
  {
    return (*(int *)(a2 + 16) >> 26) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterHour(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.hour called on value that's not a PlainDateTime", 81);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 20) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterMinute(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.minute called on value that's not a PlainDateTime", 83);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 21) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterSecond(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.second called on value that's not a PlainDateTime", 83);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 22) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterMillisecond(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.millisecond called on value that's not a PlainDateTime", 88);
  }
  else
  {
    return *(_DWORD *)(a2 + 24) & 0x3FFLL | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterMicrosecond(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.microsecond called on value that's not a PlainDateTime", 88);
  }
  else
  {
    return ((unint64_t)*(unsigned int *)(a2 + 24) >> 10) & 0x3FF | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterNanosecond(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.nanosecond called on value that's not a PlainDateTime", 87);
  }
  else
  {
    return ((unint64_t)*(unsigned int *)(a2 + 24) >> 20) & 0x3FF | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterDayOfWeek(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.dayOfWeek called on value that's not a PlainDateTime", 86);
  }
  else
  {
    return JSC::ISO8601::dayOfWeek() | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterDayOfYear(unint64_t a1, unint64_t a2)
{
  int v2;
  _BOOL4 v3;
  unint64_t v4;
  unint64_t v5;
  JSC::VM *v7;

  v7 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v7, (uint64_t)"Temporal.PlainDateTime.prototype.dayOfYear called on value that's not a PlainDateTime", 86);
  }
  v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    v3 = 0;
  }
  else
  {
    HIDWORD(v4) = -1030792151 * (v2 << 11 >> 11) + 85899344;
    LODWORD(v4) = HIDWORD(v4);
    if ((v4 >> 4) < 0xA3D70B)
    {
      v3 = 1;
    }
    else
    {
      HIDWORD(v5) = -1030792151 * (v2 << 11 >> 11) + 85899344;
      LODWORD(v5) = HIDWORD(v5);
      v3 = (v5 >> 2) > 0x28F5C28;
    }
  }
  return (unsigned __int16)(WTF::firstDayOfMonth[12 * v3 - 1 + (v2 << 6 >> 27)]
                          + (v2 >> 26)) | 0xFFFE000000000000;
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterWeekOfYear(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.weekOfYear called on value that's not a PlainDateTime", 87);
  }
  else
  {
    return JSC::ISO8601::weekOfYear(*(_DWORD *)(a2 + 16)) | 0xFFFE000000000000;
  }
}

uint64_t JSC::temporalPlainDateTimePrototypeGetterDaysInWeek(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.daysInWeek called on value that's not a PlainDateTime", 87);
  }
  else
  {
    return 0xFFFE000000000007;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeGetterDaysInMonth(unint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  JSC::VM *v9;

  v9 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v9, (uint64_t)"Temporal.PlainDateTime.prototype.daysInMonth called on value that's not a PlainDateTime", 88);
  }
  v2 = *(_DWORD *)(a2 + 16);
  v3 = v2 << 6;
  if ((v2 & 3) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = -1030792151 * (v2 << 11 >> 11) + 85899344;
    HIDWORD(v6) = v5;
    LODWORD(v6) = v5;
    if ((v6 >> 4) < 0xA3D70B)
    {
      v4 = 1;
    }
    else
    {
      HIDWORD(v7) = v5;
      LODWORD(v7) = v5;
      v4 = (v7 >> 2) > 0x28F5C28;
    }
  }
  return JSC::ISO8601::daysInMonths[12 * v4 - 1 + (v3 >> 27)] | 0xFFFE000000000000;
}

uint64_t JSC::temporalPlainDateTimePrototypeGetterDaysInYear(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  JSC::VM *v9;

  result = 0xFFFE00000000016DLL;
  v9 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v9, (uint64_t)"Temporal.PlainDateTime.prototype.daysInYear called on value that's not a PlainDateTime", 87);
  }
  v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) == 0)
  {
    v5 = -1030792151 * (v4 << 11 >> 11) + 85899344;
    HIDWORD(v7) = v5;
    LODWORD(v7) = v5;
    v6 = v7 >> 4;
    HIDWORD(v7) = v5;
    LODWORD(v7) = v5;
    if ((v7 >> 2) >= 0x28F5C29 || v6 <= 0xA3D70A)
      return 0xFFFE00000000016ELL;
  }
  return result;
}

uint64_t JSC::temporalPlainDateTimePrototypeGetterMonthsInYear(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainDateTime.prototype.monthsInYear called on value that's not a PlainDateTime", 89);
  }
  else
  {
    return 0xFFFE00000000000CLL;
  }
}

uint64_t JSC::temporalPlainDateTimePrototypeGetterInLeapYear(unint64_t a1, unint64_t a2)
{
  int v2;
  int v4;
  unsigned int v5;
  unint64_t v6;
  JSC::VM *v8;

  v8 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v8, (uint64_t)"Temporal.PlainDateTime.prototype.inLeapYear called on value that's not a PlainDateTime", 87);
  }
  v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
    return 6;
  v4 = -1030792151 * (v2 << 11 >> 11) + 85899344;
  HIDWORD(v6) = v4;
  LODWORD(v6) = v4;
  v5 = v6 >> 4;
  HIDWORD(v6) = v4;
  LODWORD(v6) = v4;
  if ((v6 >> 2) < 0x28F5C29 && v5 > 0xA3D70A)
    return 6;
  else
    return 7;
}

void JSC::TemporalPlainTime::visitChildren(JSC::TemporalPlainTime *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (v16)
    v17 = (v16 & 1) == 0;
  else
    v17 = 0;
  if (v17)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_13;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_13:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

void JSC::TemporalPlainTime::visitChildren(JSC::TemporalPlainTime *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  BOOL v6;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    if (*((_QWORD *)this + 3))
      v6 = (*((_QWORD *)this + 3) & 1) == 0;
    else
      v6 = 0;
    if (v6)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
}

unint64_t JSC::TemporalPlainTime::create(uint64_t a1, JSC::VM *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *(_QWORD **)(a1 + 40848);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::temporalPlainTimeSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v14);
    v11[5] = result + (int)v14;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, a1 + 192, 32, 0, 0, v15, v16, v17);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = *a3;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(result + 24) = (char *)&JSC::LazyProperty<JSC::TemporalPlainTime,JSC::TemporalCalendar>::initLater<JSC::TemporalPlainTime::finishCreation(JSC::VM &)::$_0>(JSC::TemporalPlainTime::finishCreation(JSC::VM &)::$_0 const&)::theFunc
                           + 1;
  return result;
}

uint64_t JSC::TemporalPlainTime::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainTime::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::TemporalPlainTime::from(uint64_t a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  _BOOL8 v11;
  unint64_t v12;
  unsigned int v13;
  char **v14;
  JSC::Structure *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSObject *TemporalCalendarWithISODefault;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  JSC::Heap **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  JSC::Exception *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  BOOL v73;
  int v74;
  unint64_t v75;
  WTF *v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  unint64_t v89;
  JSC::Heap **v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  JSC::Exception *v98;
  WTF::StringImpl *v99;
  void *v100;
  JSC::JSRopeString *v101;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t (*v131)(__int128 *);
  _QWORD *v132;
  uint64_t (*v133)(_BYTE *);
  _QWORD *v134;
  int v135;
  uint64_t (*v136)(_BYTE *);
  _QWORD *v137;
  int v138;
  uint64_t (*v139)(WTF::StringImpl **);
  WTF::StringImpl **v140;
  uint64_t (*v141)(__int128 *);
  _QWORD *v142;
  uint64_t (*v143)(WTF::StringImpl **);
  WTF::StringImpl **v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  char v150;
  _BYTE v151[16];
  int v152;
  char v153;
  WTF *v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  _BYTE v158[32];
  char v159[8];
  uint64_t v160;
  int v161;
  int v162;
  WTF *v163;
  void *__src;
  int v165;
  unsigned int __n;
  char __n_4;
  unsigned __int8 v168;
  char v169;
  WTF::StringImpl *v170;
  __int128 v171;
  char v172;
  _BYTE v173[16];
  int v174;
  unsigned __int8 v175;
  JSC::JSRopeString *v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  unsigned __int8 v180;
  char v181;
  JSC::VM *v182;
  WTF::StringImpl *v183[3];

  v10 = *(_QWORD *)(a1 + 56);
  v182 = (JSC::VM *)v10;
  if ((_BYTE)a3)
    v11 = (a3 & 0xFF00) != 0;
  else
    v11 = 0;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v12 = this;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 >= 0x17)
  {
    v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
    if (v14 == &JSC::TemporalPlainTime::s_info)
      return v12;
    if (v14 == &JSC::TemporalPlainDateTime::s_info)
    {
      v53 = *(_QWORD *)(a1 + 456);
      if ((v53 & 1) != 0)
      {
        v133 = *(uint64_t (**)(_BYTE *))(v53 & 0xFFFFFFFFFFFFFFFCLL);
        v134 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v134 = (_QWORD *)(a1 - 16);
        *(_QWORD *)v158 = *v134;
        *(_QWORD *)&v158[8] = a1;
        *(_QWORD *)&v158[16] = a1 + 456;
        v53 = v133(v158);
      }
      *(_QWORD *)v158 = *(_QWORD *)(v12 + 20);
      return JSC::TemporalPlainTime::create(v10, (JSC::VM *)v53, v158, a4, a5, a6, a7, a8);
    }
    TemporalCalendarWithISODefault = (JSC::JSObject *)JSC::TemporalCalendar::getTemporalCalendarWithISODefault(a1, this, a3, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_185;
    v128 = *(_DWORD *)(v10 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v15, v16, v17, v18, v19, v20);
    if (!*(_QWORD *)(v10 + 16))
    {
LABEL_185:
      v28 = JSC::JSObject::toString(TemporalCalendarWithISODefault, (JSC::JSGlobalObject *)a1, v15, v16, v17, v18, v19, v20);
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_10;
      v129 = *(_DWORD *)(v10 + 80);
      if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, v23, v24, v25, v26, v27);
      if (!*(_QWORD *)(v10 + 16))
      {
LABEL_10:
        v30 = (uint64_t *)(v28 + 8);
        if ((*(_BYTE *)(v28 + 8) & 1) != 0)
          v30 = (uint64_t *)JSC::JSRopeString::resolveRope(v28, (JSC::JSGlobalObject *)a1, v22, v23, v29, v24, v25, v26, v27);
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_13;
        v130 = *(_DWORD *)(v10 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
        {
          v146 = v30;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, v23, v24, v25, v26, v27);
          v30 = v146;
        }
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_13:
          if (WTF::equalInternal<unsigned char>(*v30, (unint64_t)"iso8601", 7))
          {
            JSC::TemporalPlainTime::toTemporalTimeRecord((JSC::TemporalPlainTime *)v158, a1, (JSC::JSObject *)v12, 0);
            if (!*(_DWORD *)(v10 + 80))
              goto LABEL_186;
            v135 = *(_DWORD *)(v10 + 80);
            if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v31, v32, v33, v34, v35, v36);
            if (!*(_QWORD *)(v10 + 16))
            {
LABEL_186:
              *(_QWORD *)&v148 = JSC::TemporalPlainTime::regulateTime(a1, (double *)v158, (const Duration *)v11);
              if (!*(_DWORD *)(v10 + 80))
                goto LABEL_16;
              v138 = *(_DWORD *)(v10 + 80);
              if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v37, v38, v39, v40, v41, v42);
              if (!*(_QWORD *)(v10 + 16))
              {
LABEL_16:
                v43 = *(_QWORD *)(a1 + 456);
                if ((v43 & 1) != 0)
                {
                  v139 = *(uint64_t (**)(WTF::StringImpl **))(v43 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((a1 & 8) != 0)
                    v140 = (WTF::StringImpl **)(a1 - 16);
                  else
                    v140 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
                  v170 = *v140;
                  *(_QWORD *)&v171 = a1;
                  *((_QWORD *)&v171 + 1) = a1 + 456;
                  v43 = v139(&v170);
                }
                return JSC::TemporalPlainTime::create(v10, (JSC::VM *)v43, &v148, v38, v39, v40, v41, v42);
              }
            }
          }
          else
          {
            v54 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v54 = 0x1700000002;
            *(_QWORD *)(v54 + 8) = "calendar is not iso8601";
            *(_DWORD *)(v54 + 16) = 4;
            v170 = (WTF::StringImpl *)v54;
            v55 = *(_QWORD *)(a1 + 128);
            v56 = *(JSC::Heap ***)(a1 + 56);
            if ((v55 & 1) != 0)
            {
              v136 = *(uint64_t (**)(_BYTE *))(v55 & 0xFFFFFFFFFFFFFFFCLL);
              if ((a1 & 8) != 0)
                v137 = (_QWORD *)(a1 - 16);
              else
                v137 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
              *(_QWORD *)v158 = *v137;
              *(_QWORD *)&v158[8] = a1;
              *(_QWORD *)&v158[16] = a1 + 128;
              v55 = v136(v158);
            }
            v57 = JSC::ErrorInstance::create(v56, v55, &v170, 0, 0, 0, 2, 1);
            v64 = (JSC::Exception *)v57;
            if ((v57 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C)))
            {
              v64 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v57, 0, v58, v59, v60, v61, v62);
            }
            JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v64, v63, v58, v59, v60, v61, v62);
            v72 = v170;
            v170 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
              {
                WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
                WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
              }
              else
              {
                *(_DWORD *)v72 -= 2;
              }
            }
          }
        }
        return 0;
      }
    }
    return 0;
  }
  if (v13 != 2)
  {
LABEL_33:
    JSC::throwTypeError(a1, &v182, (uint64_t)"can only convert to PlainTime from object or string values", 59);
    return 0;
  }
  v44 = *(unsigned __int8 ***)(this + 8);
  if ((v44 & 1) != 0)
  {
    v44 = (unsigned __int8 **)*JSC::JSRopeString::resolveRope(this, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
    if (!v44)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v44)
LABEL_21:
    *(_DWORD *)v44 += 2;
LABEL_22:
  if (*(_DWORD *)(v10 + 80))
  {
    v127 = *(_DWORD *)(v10 + 80);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
      v12 = 0;
      if (!v44)
        return v12;
LABEL_117:
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
      return v12;
    }
  }
  if (v44)
  {
    v45 = v44[1];
    v46 = *((_DWORD *)v44 + 1);
    v47 = ((unint64_t)*((unsigned int *)v44 + 4) >> 2) & 1;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    v47 = 1;
  }
  JSC::ISO8601::parseCalendarTime(v45, (size_t *)(v46 | (v47 << 32)), a3, a4, a5, a6, a7, a8, (uint64_t)&v170);
  if (!v181)
  {
    v12 = 0;
    goto LABEL_65;
  }
  *(_QWORD *)v158 = v170;
  v158[8] = 0;
  LOBYTE(v162) = 0;
  v48 = v175;
  if (v175)
  {
    *(_OWORD *)&v158[8] = v171;
    v158[24] = v172;
    v159[0] = 0;
    v161 = -1;
    v49 = v174;
    if (v174 != -1)
    {
      ((void (*)(__int128 *, char *, _BYTE *))off_1E35B1E58[v174])(&v148, v159, v173);
      v161 = v49;
    }
    LOBYTE(v162) = 1;
  }
  LOBYTE(v163) = 0;
  __n_4 = 0;
  v50 = v180;
  if (v180)
  {
    v163 = (WTF *)&v165;
    __src = (void *)8;
    this = (uint64_t)v176;
    if (v176 == (JSC::JSRopeString *)&v179)
    {
      v52 = v178;
      memcpy(&v165, v176, v178);
    }
    else
    {
      v176 = (JSC::JSRopeString *)&v179;
      v163 = (WTF *)this;
      v51 = v177;
      v52 = v178;
      v177 = 8;
      LODWORD(__src) = v51;
    }
    v178 = 0;
    HIDWORD(__src) = v52;
    v50 = 1;
    __n_4 = 1;
  }
  if (v48)
    v73 = v158[8] == 0;
  else
    v73 = 1;
  v74 = !v73;
  if (!v73)
  {
    v12 = 0;
    if (!v50)
      goto LABEL_61;
    goto LABEL_58;
  }
  v75 = *(_QWORD *)(a1 + 456);
  if ((v75 & 1) != 0)
  {
    v141 = *(uint64_t (**)(__int128 *))(v75 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v142 = (_QWORD *)(a1 - 16);
    else
      v142 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v148 = *v142;
    *((_QWORD *)&v148 + 1) = a1;
    *(_QWORD *)&v149 = a1 + 456;
    v75 = v141(&v148);
  }
  v12 = JSC::TemporalPlainTime::create(v10, (JSC::VM *)v75, v158, a4, a5, a6, a7, a8);
  if (__n_4)
  {
LABEL_58:
    v76 = v163;
    if (&v165 != (int *)v163 && v163)
    {
      v163 = 0;
      LODWORD(__src) = 0;
      WTF::fastFree((unint64_t)v76, (void *)this, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_61:
  if ((_BYTE)v162 && v161 != -1)
    ((void (*)(__int128 *, char *))off_1E35B1E48[v161])(&v148, v159);
  if (!v74)
  {
LABEL_108:
    if (v181)
    {
      if (v180)
      {
        v101 = v176;
        if (&v179 != (uint64_t *)v176)
        {
          if (v176)
          {
            v176 = 0;
            v177 = 0;
            WTF::fastFree((unint64_t)v101, (void *)this, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      if (v175 && v174 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E35B1E48[v174])(v158, v173);
    }
    if (!v44)
      return v12;
    goto LABEL_117;
  }
LABEL_65:
  if (v44)
  {
    v77 = v44[1];
    v78 = *((_DWORD *)v44 + 1);
    v79 = ((unint64_t)*((unsigned int *)v44 + 4) >> 2) & 1;
  }
  else
  {
    v77 = 0;
    v78 = 0;
    v79 = 1;
  }
  JSC::ISO8601::parseCalendarDateTime(v77, v78 | (v79 << 32), a3, a4, a5, a6, a7, a8, (uint64_t)v158);
  if (!v169)
  {
LABEL_93:
    v88 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v88 = 0x1300000002;
    *(_QWORD *)(v88 + 8) = "invalid time string";
    *(_DWORD *)(v88 + 16) = 4;
    v183[0] = (WTF::StringImpl *)v88;
    v89 = *(_QWORD *)(a1 + 128);
    v90 = *(JSC::Heap ***)(a1 + 56);
    if ((v89 & 1) != 0)
    {
      v131 = *(uint64_t (**)(__int128 *))(v89 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v132 = (_QWORD *)(a1 - 16);
      else
        v132 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)&v148 = *v132;
      *((_QWORD *)&v148 + 1) = a1;
      *(_QWORD *)&v149 = a1 + 128;
      v89 = v131(&v148);
    }
    v91 = JSC::ErrorInstance::create(v90, v89, v183, 0, 0, 0, 2, 1);
    v98 = (JSC::Exception *)v91;
    if ((v91 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v91 & 0xFFFFFFFE) + 0x4C)))
    {
      v98 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v91, 0, v92, v93, v94, v95, v96);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v98, v97, v92, v93, v94, v95, v96);
    v99 = v183[0];
    v183[0] = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
      else
      {
        *(_DWORD *)v99 -= 2;
      }
    }
    v12 = 0;
LABEL_100:
    if (v169)
    {
      if (v168)
      {
        v100 = __src;
        if (&__n_4 != __src)
        {
          if (__src)
          {
            __src = 0;
            v165 = 0;
            WTF::fastFree((unint64_t)v100, (void *)this, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      if ((_BYTE)v163 && v162 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E35B1E48[v162])(&v148, &v160);
    }
    goto LABEL_108;
  }
  v148 = *(_OWORD *)v158;
  LOBYTE(v149) = 0;
  v153 = 0;
  v80 = v163;
  if ((_BYTE)v163)
  {
    v149 = *(_OWORD *)&v158[16];
    v150 = v159[0];
    v151[0] = 0;
    v152 = -1;
    v81 = v162;
    if (v162 != -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t *))off_1E35B1E58[v162])(v183, v151, &v160);
      v152 = v81;
    }
    v153 = 1;
  }
  LOBYTE(v154) = 0;
  v157 = 0;
  v82 = v168;
  if (v168)
  {
    v154 = (WTF *)&v156;
    v155 = 8;
    this = (uint64_t)__src;
    if (__src == &__n_4)
    {
      v84 = __n;
      memcpy(&v156, __src, __n);
    }
    else
    {
      __src = &__n_4;
      v154 = (WTF *)this;
      v83 = v165;
      v84 = __n;
      v165 = 8;
      LODWORD(v155) = v83;
    }
    __n = 0;
    HIDWORD(v155) = v84;
    v82 = 1;
    v157 = 1;
  }
  if (!BYTE12(v148) || v80 && (_BYTE)v149)
  {
    v85 = 1;
    if (!v82)
      goto LABEL_89;
LABEL_86:
    v87 = v154;
    if (&v156 != (uint64_t *)v154 && v154)
    {
      v154 = 0;
      LODWORD(v155) = 0;
      WTF::fastFree((unint64_t)v87, (void *)this, a3, a4, a5, a6, a7, a8);
    }
LABEL_89:
    if (v153 && v152 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E35B1E48[v152])(v183, v151);
    if (!v85)
      goto LABEL_100;
    goto LABEL_93;
  }
  v86 = *(_QWORD *)(a1 + 456);
  if ((v86 & 1) == 0)
  {
LABEL_85:
    v12 = JSC::TemporalPlainTime::create(v10, (JSC::VM *)v86, (__int128 *)((char *)&v148 + 4), a4, a5, a6, a7, a8);
    v85 = 0;
    if (!v157)
      goto LABEL_89;
    goto LABEL_86;
  }
  v143 = *(uint64_t (**)(WTF::StringImpl **))(v86 & 0xFFFFFFFFFFFFFFFCLL);
  if ((a1 & 8) != 0)
    v144 = (WTF::StringImpl **)(a1 - 16);
  else
    v144 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  v183[0] = *v144;
  v183[1] = (WTF::StringImpl *)a1;
  v183[2] = (WTF::StringImpl *)(a1 + 456);
  v145 = v143(v183);
  if (BYTE12(v148))
  {
    v86 = v145;
    goto LABEL_85;
  }
  v147 = std::__throw_bad_optional_access[abi:sn180100]();
  return JSC::differenceTime(v147);
}

void JSC::differenceTime(uint64_t a1, const Duration *a2, uint64_t a3)
{
  double v4;
  double v5;
  int8x8_t v6;
  uint64x2_t v7;
  float64x2_t v8;
  int8x8_t v9;
  int8x8_t v10;
  float64x2_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  BOOL v47;
  double v48;
  double v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  double v53;
  _OWORD v54[2];
  double v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;

  v4 = (double)a3 - (double)a2;
  v5 = (double)(WORD2(a3) & 0x3FF) - (double)(WORD2(a2) & 0x3FF);
  memset(v54, 0, sizeof(v54));
  v55 = v4;
  v6 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = vcvtq_f64_u64(v7);
  v9 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a2), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL);
  v7.i64[0] = v9.u32[0];
  v7.i64[1] = v9.u32[1];
  v52 = vsubq_f64(v8, vcvtq_f64_u64(v7));
  v56 = v52;
  v57 = v5;
  v10 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(HIDWORD(a3)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
  v7.i64[0] = v10.u32[0];
  v7.i64[1] = v10.u32[1];
  v11 = vcvtq_f64_u64(v7);
  *(int8x8_t *)&v8.f64[0] = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(HIDWORD(a2)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
  v7.i64[0] = LODWORD(v8.f64[0]);
  v7.i64[1] = HIDWORD(v8.f64[0]);
  v50 = vsubq_f64(v11, vcvtq_f64_u64(v7));
  v58 = v50;
  v12 = JSC::TemporalDuration::sign((JSC::TemporalDuration *)v54, a2);
  v13 = (double)v12 * v52.f64[0];
  v14 = vmuld_lane_f64((double)v12, v52, 1);
  v15 = v5 * (double)v12;
  v16 = vmuld_lane_f64((double)v12, v50, 1);
  v17 = (double)v12 * v50.f64[0] + floor(v16 / 1000.0);
  v18 = fmod(v16, 1000.0);
  v19 = v18 == 0.0;
  if (v18 >= 0.0)
    v20 = -0.0;
  else
    v20 = 1000.0;
  v21 = v18 + v20;
  if (v19)
    v21 = 0.0;
  v53 = v21;
  v22 = v15 + floor(v17 / 1000.0);
  v23 = fmod(v17, 1000.0);
  v24 = v23 == 0.0;
  if (v23 >= 0.0)
    v25 = -0.0;
  else
    v25 = 1000.0;
  v26 = v23 + v25;
  if (v24)
    v26 = 0.0;
  v51 = v26;
  v27 = v14 + floor(v22 / 1000.0);
  v28 = fmod(v22, 1000.0);
  v29 = v28 == 0.0;
  if (v28 >= 0.0)
    v30 = -0.0;
  else
    v30 = 1000.0;
  v31 = v28 + v30;
  if (v29)
    v32 = 0.0;
  else
    v32 = v31;
  v33 = v13 + floor(v27 / 60.0);
  v34 = fmod(v27, 60.0);
  v35 = v34 == 0.0;
  if (v34 >= 0.0)
    v36 = -0.0;
  else
    v36 = 60.0;
  v37 = v34 + v36;
  if (v35)
    v38 = 0.0;
  else
    v38 = v37;
  v39 = v4 * (double)v12 + floor(v33 / 60.0);
  v40 = fmod(v33, 60.0);
  v41 = v40 == 0.0;
  if (v40 >= 0.0)
    v42 = -0.0;
  else
    v42 = 60.0;
  v43 = v40 + v42;
  if (v41)
    v44 = 0.0;
  else
    v44 = v43;
  v45 = floor(v39 / 24.0);
  v46 = fmod(v39, 24.0);
  v47 = v46 == 0.0;
  if (v46 >= 0.0)
    v48 = -0.0;
  else
    v48 = 24.0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v49 = v46 + v48;
  if (v47)
    v49 = 0.0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = v45;
  *(double *)(a1 + 32) = v49;
  *(double *)(a1 + 40) = v44;
  *(double *)(a1 + 48) = v38;
  *(double *)(a1 + 56) = v32;
  *(double *)(a1 + 64) = v51;
  *(double *)(a1 + 72) = v53;
  if (v12 == -1)
  {
    if (v45 != 0.0)
      *(double *)(a1 + 24) = -v45;
    if (v49 != 0.0)
      *(double *)(a1 + 32) = -v49;
    if (v44 != 0.0)
      *(double *)(a1 + 40) = -v44;
    if (v38 != 0.0)
      *(double *)(a1 + 48) = -v38;
    if (v32 != 0.0)
      *(double *)(a1 + 56) = -v32;
    if (v51 != 0.0)
      *(double *)(a1 + 64) = -v51;
    if (v53 != 0.0)
      *(double *)(a1 + 72) = -v53;
  }
}

void JSC::TemporalPlainTimeConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x900000002;
  *(_QWORD *)(v6 + 8) = "PlainTime";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::TemporalPlainTimeConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainTimeConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callTemporalPlainTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"PlainTime", 10);
}

unint64_t JSC::constructTemporalPlainTime(unint64_t this, JSC::JSGlobalObject *a2, const Duration *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  int8x16_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::Exception *v29;
  JSC::JSObject *v30;
  JSC::JSObject *v32;
  JSC::JSObject *v34;
  JSC::JSObject *v36;
  JSC::JSObject *v38;
  double v39;
  uint64_t v41;
  unint64_t v42;
  JSC::Heap **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  JSC::Exception *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  uint64_t (*v75)(__int128 *);
  _QWORD *v76;
  int v77;
  int v78;
  uint64_t (*v79)(JSC::JSObject **);
  JSC::JSObject **v80;
  uint64_t (*v81)(__int128 *);
  _QWORD *v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  double v86;
  int v87;
  int v88;
  int v89;
  int v90;
  JSC::JSGlobalObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  JSC::JSObject *v104[3];

  v10 = *(_QWORD *)(this + 56);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 456);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v81 = *(uint64_t (**)(__int128 *))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v82 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v82 = (_QWORD *)(this - 16);
    *(_QWORD *)&v99 = *v82;
    *((_QWORD *)&v99 + 1) = this;
    *(_QWORD *)&v100 = this + 456;
    SubclassStructure = (JSC::JSObject *)v81(&v99);
  }
  else
  {
    *(_QWORD *)&v99 = *(_QWORD *)(this + 56);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v91 + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v91 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, (JSC::VM **)&v99, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v74 = *(_DWORD *)(v10 + 80);
      if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 456);
    if ((v15 & 1) != 0)
    {
      v75 = *(uint64_t (**)(__int128 *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v76 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v76 = (_QWORD *)(v14 - 16);
      *(_QWORD *)&v99 = *v76;
      *((_QWORD *)&v99 + 1) = v14;
      *(_QWORD *)&v100 = v14 + 456;
      v15 = v75(&v99);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v72 = *(_DWORD *)(v10 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v18 = 0uLL;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  if ((unint64_t)(*((int *)a2 + 8) - 1) >= 6)
    v19 = 6;
  else
    v19 = *((int *)a2 + 8) - 1;
  if (!v19)
    goto LABEL_29;
  v20 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v104[0] = v20;
  if ((unint64_t)v20 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v69 = (unint64_t)v20 - 0x2000000000000;
    if (v69 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(v104, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)0);
    else
      v18.i64[0] = v69;
    *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
  }
  else
  {
    *(double *)v18.i64 = (double)(int)v20;
  }
  *(_QWORD *)&v101 = v18.i64[0];
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = *(_DWORD *)(v10 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
    {
      v96 = v18.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v18.i64[0] = v96;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
    && (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_74;
  }
  if (v19 == 1)
    goto LABEL_29;
  v30 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
  v104[0] = v30;
  if ((unint64_t)v30 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v70 = (unint64_t)v30 - 0x2000000000000;
    if (v70 >= 0xFFFC000000000000)
      JSC::JSValue::toNumberSlowCase(v104, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
    else
      v18.i64[0] = v70;
    *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
  }
  else
  {
    *(double *)v18.i64 = (double)(int)v30;
  }
  *((_QWORD *)&v101 + 1) = v18.i64[0];
  if (*(_DWORD *)(v10 + 80))
  {
    v84 = *(_DWORD *)(v10 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
    {
      v97 = v18.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v18.i64[0] = v97;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    if (v19 == 2)
      goto LABEL_29;
    v32 = (JSC::JSObject *)*((_QWORD *)a2 + 8);
    v104[0] = v32;
    if ((unint64_t)v32 <= 0xFFFDFFFFFFFFFFFFLL)
    {
      v71 = (unint64_t)v32 - 0x2000000000000;
      if (v71 >= 0xFFFC000000000000)
        JSC::JSValue::toNumberSlowCase(v104, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
      else
        v18.i64[0] = v71;
      *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
    }
    else
    {
      *(double *)v18.i64 = (double)(int)v32;
    }
    *(_QWORD *)&v102 = v18.i64[0];
    if (*(_DWORD *)(v10 + 80))
    {
      v92 = v18.i64[0];
      v87 = *(_DWORD *)(v10 + 80);
      if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v18.i64[0] = v92;
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      if (v19 == 3)
        goto LABEL_29;
      v34 = (JSC::JSObject *)*((_QWORD *)a2 + 9);
      v104[0] = v34;
      if ((unint64_t)v34 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        v73 = (unint64_t)v34 - 0x2000000000000;
        if (v73 >= 0xFFFC000000000000)
          JSC::JSValue::toNumberSlowCase(v104, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
        else
          v18.i64[0] = v73;
        *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
      }
      else
      {
        *(double *)v18.i64 = (double)(int)v34;
      }
      *((_QWORD *)&v102 + 1) = v18.i64[0];
      if (*(_DWORD *)(v10 + 80))
      {
        v93 = v18.i64[0];
        v88 = *(_DWORD *)(v10 + 80);
        if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v18.i64[0] = v93;
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
        || (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        if (v19 == 4)
          goto LABEL_29;
        v36 = (JSC::JSObject *)*((_QWORD *)a2 + 10);
        v104[0] = v36;
        if ((unint64_t)v36 <= 0xFFFDFFFFFFFFFFFFLL)
        {
          v83 = (unint64_t)v36 - 0x2000000000000;
          if (v83 >= 0xFFFC000000000000)
            JSC::JSValue::toNumberSlowCase(v104, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
          else
            v18.i64[0] = v83;
          *(double *)v18.i64 = trunc(*(double *)v18.i64 + 0.0);
        }
        else
        {
          *(double *)v18.i64 = (double)(int)v36;
        }
        *(_QWORD *)&v103 = v18.i64[0];
        if (*(_DWORD *)(v10 + 80))
        {
          v94 = v18.i64[0];
          v89 = *(_DWORD *)(v10 + 80);
          if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v18.i64[0] = v94;
          if (*(_QWORD *)(v10 + 16))
            return 0;
        }
        if (((v18.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v18.i64[0] & 0x7FFFFFFFFFFFFFFFLL) == 0)
        {
          if (v19 == 5)
            goto LABEL_29;
          v38 = (JSC::JSObject *)*((_QWORD *)a2 + 11);
          v104[0] = v38;
          if ((unint64_t)v38 <= 0xFFFDFFFFFFFFFFFFLL)
          {
            v85 = (unint64_t)v38 - 0x2000000000000;
            if (v85 >= 0xFFFC000000000000)
              JSC::JSValue::toNumberSlowCase(v104, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v18);
            else
              v86 = *(double *)&v85;
            v39 = trunc(v86 + 0.0);
          }
          else
          {
            v39 = (double)(int)v38;
          }
          *((double *)&v103 + 1) = v39;
          if (*(_DWORD *)(v10 + 80))
          {
            v95 = v39;
            v90 = *(_DWORD *)(v10 + 80);
            if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            v39 = v95;
            if (*(_QWORD *)(v10 + 16))
              return 0;
          }
          if (((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
            || (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFLL) == 0)
          {
LABEL_29:
            v22 = *(_QWORD *)(this + 56);
            v104[0] = (JSC::JSObject *)JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)&v99, a3);
            if (!*(_DWORD *)(v22 + 80))
              return JSC::TemporalPlainTime::create(v22, v17, v104, v24, v25, v26, v27, v28);
            v78 = *(_DWORD *)(v22 + 80);
            if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v23, v24, v25, v26, v27, v28);
            if (!*(_QWORD *)(v22 + 16))
              return JSC::TemporalPlainTime::create(v22, v17, v104, v24, v25, v26, v27, v28);
            return 0;
          }
        }
      }
    }
  }
LABEL_74:
  v41 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v41 = 0x2C00000002;
  *(_QWORD *)(v41 + 8) = "Temporal.PlainTime properties must be finite";
  *(_DWORD *)(v41 + 16) = 4;
  v98 = (WTF::StringImpl *)v41;
  v42 = *(_QWORD *)(this + 128);
  v43 = *(JSC::Heap ***)(this + 56);
  if ((v42 & 1) != 0)
  {
    v79 = *(uint64_t (**)(JSC::JSObject **))(v42 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v80 = (JSC::JSObject **)(this - 16);
    else
      v80 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v104[0] = *v80;
    v104[1] = (JSC::JSObject *)this;
    v104[2] = (JSC::JSObject *)(this + 128);
    v42 = v79(v104);
  }
  v44 = JSC::ErrorInstance::create(v43, v42, &v98, 0, 0, 0, 2, 1);
  v51 = (JSC::Exception *)v44;
  if ((v44 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)))
  {
    v51 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v44, 0, v45, v46, v47, v48, v49);
  }
  v29 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v51, v50, v45, v46, v47, v48, v49);
  v59 = v98;
  v98 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  return (unint64_t)v29;
}

unint64_t JSC::TemporalPlainTimePrototype::create(JSC::TemporalPlainTimePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1200000002;
  *(_QWORD *)(v13 + 8) = "Temporal.PlainTime";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalPlainTimePrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalPlainTimePrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::temporalPlainTimePrototypeGetterHour(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainTime.prototype.hour called on value that's not a PlainTime", 73);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 16) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainTimePrototypeGetterMinute(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainTime.prototype.minute called on value that's not a PlainTime", 75);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 17) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainTimePrototypeGetterSecond(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainTime.prototype.second called on value that's not a PlainTime", 75);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 18) | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainTimePrototypeGetterMillisecond(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainTime.prototype.millisecond called on value that's not a PlainTime", 80);
  }
  else
  {
    return *(_DWORD *)(a2 + 20) & 0x3FFLL | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainTimePrototypeGetterMicrosecond(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainTime.prototype.microsecond called on value that's not a PlainTime", 80);
  }
  else
  {
    return ((unint64_t)*(unsigned int *)(a2 + 20) >> 10) & 0x3FF | 0xFFFE000000000000;
  }
}

unint64_t JSC::temporalPlainTimePrototypeGetterNanosecond(unint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v3, (uint64_t)"Temporal.PlainTime.prototype.nanosecond called on value that's not a PlainTime", 79);
  }
  else
  {
    return ((unint64_t)*(unsigned int *)(a2 + 20) >> 20) & 0x3FF | 0xFFFE000000000000;
  }
}

uint64_t JSC::temporalPlainTimePrototypeGetterCalendar(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  JSC::VM *v5;
  _QWORD v6[3];

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(a1, &v5, (uint64_t)"Temporal.PlainTime.prototype.calendar called on value that's not a PlainTime", 77);
  }
  result = *(_QWORD *)(a2 + 24);
  if ((result & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v4 = (_QWORD *)(a2 - 16);
    v6[0] = *v4;
    v6[1] = a2;
    v6[2] = a2 + 24;
    return v3(v6);
  }
  return result;
}

unint64_t JSC::temporalPlainDateConstructorFuncFrom(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  int v25;
  uint64_t (*v26)(JSC::VM **);
  JSC::VM **v27;
  uint64_t v28;
  _BOOL4 v29;
  JSC::VM *v30;
  uint64_t v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_3;
  v11 = *((_QWORD *)a2 + 7);
  v30 = *(JSC::VM **)(this + 56);
  if (v11 == 10)
    goto LABEL_3;
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, &v30, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_3:
    v11 = 0;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = *(_DWORD *)(v10 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v28 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = v28;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  v30 = (JSC::VM *)"constrain";
  v31 = 10;
  LOBYTE(v32) = 0;
  v33 = "reject";
  v34 = 7;
  v35 = 1;
  v13 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v11, v12, (uint64_t)&v30, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v10 + 80))
  {
    v25 = *(_DWORD *)(v10 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    {
      v29 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v13 = v29;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21 = 10;
    return JSC::TemporalPlainDate::from(this, v21, v13 | 0x100, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)a2 + 6);
  if ((v21 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::TemporalPlainDate::from(this, v21, v13 | 0x100, v15, v16, v17, v18, v19, v20);
  }
  v22 = *(_QWORD *)(this + 440);
  if ((v22 & 1) != 0)
  {
    v26 = *(uint64_t (**)(JSC::VM **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v27 = (JSC::VM **)(this - 16);
    else
      v27 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v30 = *v27;
    v31 = this;
    v32 = (char *)(this + 440);
    v22 = v26(&v30);
  }
  LODWORD(v30) = *(_DWORD *)(v21 + 16);
  return JSC::TemporalPlainDate::create(v10, (JSC::VM *)v22, &v30, v15, v16, v17, v18, v19);
}

unint64_t JSC::temporalPlainDateConstructorFuncCompare(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::TemporalPlainDate::from((unint64_t)this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v40 = *(_DWORD *)(v11 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v28 = JSC::TemporalPlainDate::from((unint64_t)this, v21, 0, v14, v15, v16, v17, v18, v20);
  if (*(_DWORD *)(v11 + 80))
  {
    v41 = *(_DWORD *)(v11 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v29 = *(_DWORD *)(v19 + 16);
  v30 = *(_DWORD *)(v28 + 16);
  v31 = v29 << 11 >> 11;
  if (v31 > v30 << 11 >> 11)
    return 0xFFFE000000000001;
  v33 = v30 << 11 >> 11;
  v34 = (v29 << 6 >> 27);
  v35 = v30 << 6 >> 27;
  v36 = (v29 >> 26);
  v37 = v30 >> 26;
  v38 = 0xFFFE000000000000;
  if (v36 < v37)
    v38 = 0xFFFE0000FFFFFFFFLL;
  if (v36 <= v37)
    v39 = v38;
  else
    v39 = 0xFFFE000000000001;
  if (v34 < v35)
    v39 = 0xFFFE0000FFFFFFFFLL;
  if (v34 > v35)
    v39 = 0xFFFE000000000001;
  if (v31 >= v33)
    return v39;
  else
    return 0xFFFE0000FFFFFFFFLL;
}

unint64_t JSC::temporalPlainDatePrototypeFuncGetISOFields(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t result;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  unint64_t v35;
  JSC *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC *v43;
  JSC::VM *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v8 = *((_QWORD *)this + 7);
  v44 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v44, (uint64_t)"Temporal.PlainDate.prototype.getISOFields called on value that's not a PlainDate", 81);
  }
  v10 = *(_QWORD *)(v8 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase >= *(_QWORD *)(v10 + 32))
    {
      SlowCase = *(_QWORD *)(v10 + 40);
      if ((SlowCase & 1) != 0)
      {
        v36 = this;
        v37 = *((_QWORD *)a2 + 5);
        v38 = *(unsigned int *)(v10 + 60);
        JSC::sanitizeStackForVM((JSC *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v39 = v38;
        v9 = v37;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v8 + 192, v39, 0, 0, v40, v41, v42);
        this = v36;
        goto LABEL_6;
      }
      v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v35);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v35;
    }
    *(_QWORD *)(v10 + 24) = SlowCase + v11;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    v13.n128_u64[1] = 0;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v8 + 755))
      __dmb(0xAu);
    v14 = v8 + 41952;
    v15 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 968);
    v16 = *(_QWORD *)(v9 + 24);
    if ((v16 & 1) != 0)
    {
      v33 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v34 = (uint64_t *)(v9 - 16);
      else
        v34 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v45 = *v34;
      v46 = v9;
      v47 = v9 + 24;
      v16 = v33(&v45);
    }
    v45 = 0;
    v46 = SlowCase;
    v47 = 0x1000000FFFFFFFFLL;
    v13.n128_u64[0] = 0x100000001000000;
    v48 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v15, v16, 0, (uint64_t)&v45, a7, a8, v13);
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 1584);
    v18 = (*(int *)(v9 + 16) >> 26) | 0xFFFE000000000000;
    v45 = 0;
    v46 = SlowCase;
    v47 = 0x1000000FFFFFFFFLL;
    v19.n128_u64[0] = 0x100000001000000;
    v48 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v17, v18, 0, (uint64_t)&v45, v20, v21, v19);
    v22 = *(_QWORD *)(*(_QWORD *)v14 + 1624);
    v23 = ((int)(*(_DWORD *)(v9 + 16) << 6) >> 27) | 0xFFFE000000000000;
    v45 = 0;
    v46 = SlowCase;
    v47 = 0x1000000FFFFFFFFLL;
    v24.n128_u64[0] = 0x100000001000000;
    v48 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v22, v23, 0, (uint64_t)&v45, v25, v26, v24);
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 1648);
    v28 = ((int)(*(_DWORD *)(v9 + 16) << 11) >> 11) | 0xFFFE000000000000;
    v45 = 0;
    v46 = SlowCase;
    v47 = 0x1000000FFFFFFFFLL;
    v29.n128_u64[0] = 0x100000001000000;
    v48 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v27, v28, 0, (uint64_t)&v45, v30, v31, v29);
    return SlowCase;
  }
  v43 = this;
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v8 + 14936, (JSC *)v8, 0x40uLL, 0, a5, a6, a7, a8);
  this = v43;
  if (SlowCase)
    goto LABEL_6;
  result = 110;
  __break(0xC471u);
  return result;
}

unint64_t JSC::temporalPlainDatePrototypeFuncAdd(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t (*v40)(JSC::VM **);
  JSC::VM **v41;
  uint64_t v42;
  int v43;
  _OWORD v44[5];
  JSC::VM *v45;
  JSC::VM *v46;
  uint64_t v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v45 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v45, (uint64_t)"Temporal.PlainDate.prototype.add called on value that's not a PlainDate", 72);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toISO8601Duration(this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, v44);
  if (*(_DWORD *)(v9 + 80))
  {
    v36 = *(_DWORD *)(v9 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_8;
  v19 = *((_QWORD *)a2 + 7);
  v46 = *(JSC::VM **)(this + 56);
  if (v19 == 10)
    goto LABEL_8;
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, &v46, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_8:
    v19 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v37 = *(_DWORD *)(v9 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    {
      v42 = v19;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v19 = v42;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  v46 = (JSC::VM *)"constrain";
  v47 = 10;
  LOBYTE(v48) = 0;
  v49 = "reject";
  v50 = 7;
  v51 = 1;
  v27 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v19, v20, (uint64_t)&v46, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v9 + 80))
  {
    v38 = *(_DWORD *)(v9 + 80);
    if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  LODWORD(v46) = *(_DWORD *)(v10 + 16);
  v43 = JSC::TemporalCalendar::isoDateAdd(this, (int *)&v46, (uint64_t)v44, v27);
  if (*(_DWORD *)(v9 + 80))
  {
    v39 = *(_DWORD *)(v9 + 80);
    if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v28, v29, v30, v31, v32, v33);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v34 = *(_QWORD *)(this + 440);
  if ((v34 & 1) != 0)
  {
    v40 = *(uint64_t (**)(JSC::VM **))(v34 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v41 = (JSC::VM **)(this - 16);
    else
      v41 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v46 = *v41;
    v47 = this;
    v48 = (char *)(this + 440);
    v34 = v40(&v46);
  }
  return JSC::TemporalPlainDate::create(v9, (JSC::VM *)v34, &v43, v29, v30, v31, v32, v33);
}

unint64_t JSC::temporalPlainDatePrototypeFuncSubtract(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t (*v39)(__int128 *);
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  _OWORD v45[5];
  JSC::VM *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51[3];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v46 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v46, (uint64_t)"Temporal.PlainDate.prototype.subtract called on value that's not a PlainDate", 77);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toISO8601Duration(this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, v45);
  if (*(_DWORD *)(v9 + 80))
  {
    v35 = *(_DWORD *)(v9 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_8;
  v19 = *((_QWORD *)a2 + 7);
  *(_QWORD *)&v47 = *(_QWORD *)(this + 56);
  if (v19 == 10)
    goto LABEL_8;
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, (JSC::VM **)&v47, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_8:
    v19 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v36 = *(_DWORD *)(v9 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
    {
      v41 = v19;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v19 = v41;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  *(_QWORD *)&v47 = "constrain";
  *((_QWORD *)&v47 + 1) = 10;
  LOBYTE(v48) = 0;
  *((_QWORD *)&v48 + 1) = "reject";
  *(_QWORD *)&v49 = 7;
  BYTE8(v49) = 1;
  v22 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v19, v20, (uint64_t)&v47, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v9 + 80))
  {
    v37 = *(_DWORD *)(v9 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    {
      v42 = v22;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
      LOBYTE(v22) = v42;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v43 = *(_DWORD *)(v10 + 16);
  v47 = v45[0];
  v48 = v45[1];
  v49 = v45[2];
  v50 = v45[3];
  *(_OWORD *)v51 = v45[4];
  if (*(double *)v45 != 0.0)
    *(double *)&v47 = -*(double *)v45;
  if (*((double *)&v47 + 1) != 0.0)
    *((double *)&v47 + 1) = -*((double *)&v47 + 1);
  if (*(double *)&v48 != 0.0)
    *(double *)&v48 = -*(double *)&v48;
  if (*((double *)&v48 + 1) != 0.0)
    *((double *)&v48 + 1) = -*((double *)&v48 + 1);
  if (*(double *)&v49 != 0.0)
    *(double *)&v49 = -*(double *)&v49;
  if (*((double *)&v49 + 1) != 0.0)
    *((double *)&v49 + 1) = -*((double *)&v49 + 1);
  if (*(double *)&v50 != 0.0)
    *(double *)&v50 = -*(double *)&v50;
  if (*((double *)&v50 + 1) != 0.0)
    *((double *)&v50 + 1) = -*((double *)&v50 + 1);
  if (v51[0] != 0.0)
    v51[0] = -v51[0];
  if (v51[1] != 0.0)
    v51[1] = -v51[1];
  v44 = JSC::TemporalCalendar::isoDateAdd(this, &v43, (uint64_t)&v47, v22);
  if (*(_DWORD *)(v9 + 80))
  {
    v38 = *(_DWORD *)(v9 + 80);
    if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v27, v28, v29, v30, v31, v32);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v33 = *(_QWORD *)(this + 440);
  if ((v33 & 1) != 0)
  {
    v39 = *(uint64_t (**)(__int128 *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v40 = (_QWORD *)(this - 16);
    else
      v40 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v47 = *v40;
    *((_QWORD *)&v47 + 1) = this;
    *(_QWORD *)&v48 = this + 440;
    v33 = v39(&v47);
  }
  return JSC::TemporalPlainDate::create(v9, (JSC::VM *)v33, &v44, v28, v29, v30, v31, v32);
}

unint64_t JSC::temporalPlainDatePrototypeFuncWith(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const char *v21;
  JSC *v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(_QWORD *);
  _QWORD *v26;
  int v27;
  JSC::VM *v28;
  _QWORD v29[3];

  v9 = *(_QWORD *)(this + 56);
  v28 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v21 = "Temporal.PlainDate.prototype.with called on value that's not a PlainDate";
    v22 = (JSC *)this;
    v23 = 73;
    return JSC::throwTypeError((unint64_t)v22, &v28, (uint64_t)v21, v23);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6), ((unint64_t)v11 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v11 + 5) <= 0x16u)
  {
    v21 = "First argument to Temporal.PlainDate.prototype.with must be an object";
    v22 = (JSC *)this;
    v23 = 70;
    return JSC::throwTypeError((unint64_t)v22, &v28, (uint64_t)v21, v23);
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 7);
  v27 = JSC::TemporalPlainDate::with(v10, this, v11, v12, a5, a6, a7, a8);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_9;
  v24 = *(_DWORD *)(v9 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v9 + 16))
    return 0;
LABEL_9:
  v19 = *(_QWORD *)(this + 440);
  if ((v19 & 1) != 0)
  {
    v25 = *(uint64_t (**)(_QWORD *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (_QWORD *)(this - 16);
    v29[0] = *v26;
    v29[1] = this;
    v29[2] = this + 440;
    v19 = v25(v29);
  }
  return JSC::TemporalPlainDate::create(v9, (JSC::VM *)v19, &v27, v14, v15, v16, v17, v18);
}

unint64_t JSC::temporalPlainDatePrototypeFuncUntil(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  int v30;
  int v31;
  uint64_t (*v32)(_QWORD *, __n128);
  _QWORD *v33;
  unint64_t v34;
  _OWORD v35[5];
  JSC::VM *v36;
  _QWORD v37[3];

  v10 = *(_QWORD *)(this + 56);
  v36 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v36, (uint64_t)"Temporal.PlainDate.prototype.until called on value that's not a PlainDate", 74);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = JSC::TemporalPlainDate::from(this, v13, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v30 = *(_DWORD *)(v10 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
    {
      v34 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v14 = v34;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v20 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v27.n128_f64[0] = JSC::TemporalPlainDate::until(v11, this, v14, v20, v16, v17, v18, v19, v35);
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v28 = *(_QWORD *)(this + 424);
  if ((v28 & 1) != 0)
  {
    v32 = *(uint64_t (**)(_QWORD *, __n128))(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (_QWORD *)(this - 16);
    v37[0] = *v33;
    v37[1] = this;
    v37[2] = this + 424;
    v28 = v32(v37, v27);
  }
  return JSC::TemporalDuration::tryCreateIfValid(this, (JSC::ISO8601 *)v35, v28);
}

unint64_t JSC::temporalPlainDatePrototypeFuncSince(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  int v30;
  int v31;
  uint64_t (*v32)(_QWORD *, __n128);
  _QWORD *v33;
  unint64_t v34;
  _BYTE v35[80];
  JSC::VM *v36;
  _QWORD v37[3];

  v10 = *(_QWORD *)(this + 56);
  v36 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v36, (uint64_t)"Temporal.PlainDate.prototype.since called on value that's not a PlainDate", 74);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = JSC::TemporalPlainDate::from(this, v13, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v30 = *(_DWORD *)(v10 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
    {
      v34 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v14 = v34;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v20 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v27.n128_f64[0] = JSC::TemporalPlainDate::since(v11, this, v14, v20, v16, v17, v18, v19, (uint64_t)v35);
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v28 = *(_QWORD *)(this + 424);
  if ((v28 & 1) != 0)
  {
    v32 = *(uint64_t (**)(_QWORD *, __n128))(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (_QWORD *)(this - 16);
    v37[0] = *v33;
    v37[1] = this;
    v37[2] = this + 424;
    v28 = v32(v37, v27);
  }
  return JSC::TemporalDuration::tryCreateIfValid(this, (JSC::ISO8601 *)v35, v28);
}

uint64_t JSC::temporalPlainDatePrototypeFuncEquals(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t (*v24)(uint64_t *);
  uint64_t *v25;
  uint64_t (*v26)(uint64_t *);
  uint64_t *v27;
  JSC::VM *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v10 = *((_QWORD *)this + 7);
  v28 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v28, (uint64_t)"Temporal.PlainDate.prototype.equals called on value that's not a PlainDate", 75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::TemporalPlainDate::from((unint64_t)this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v23 = *(_DWORD *)(v10 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v19 + 16))
    return 6;
  v20 = *(_QWORD *)(v11 + 24);
  if ((v20 & 1) != 0)
  {
    v24 = *(uint64_t (**)(uint64_t *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v25 = (uint64_t *)(v11 - 16);
    v29 = *v25;
    v30 = v11;
    v31 = v11 + 24;
    v20 = v24(&v29);
  }
  v21 = *(_QWORD *)(v19 + 24);
  if ((v21 & 1) != 0)
  {
    v26 = *(uint64_t (**)(uint64_t *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v19 & 8) != 0)
      v27 = (uint64_t *)(v19 - 16);
    v29 = *v27;
    v30 = v19;
    v31 = v19 + 24;
    v21 = v26(&v29);
  }
  if (JSC::TemporalCalendar::equals((JSC::TemporalCalendar *)v20, this, (JSC::TemporalCalendar *)v21, v14, v15, v16, v17, v18))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::temporalPlainDatePrototypeFuncToPlainDateTime(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v18)(uint64_t *);
  uint64_t *v19;
  int v20;
  uint64_t (*v21)(uint64_t *);
  uint64_t *v22;
  int v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v10 = *(_QWORD *)(this + 56);
  v24 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v24, (uint64_t)"Temporal.PlainDate.prototype.toPlainDateTime called on value that's not a PlainDate", 84);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = *(_QWORD *)(this + 448);
    if ((v13 & 1) != 0)
    {
      v18 = *(uint64_t (**)(uint64_t *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
      v19 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v19 = (uint64_t *)(this - 16);
      v25 = *v19;
      v26 = this;
      v27 = (char *)(this + 448);
      v13 = v18(&v25);
    }
    v23 = *(_DWORD *)(v11 + 16);
    LOWORD(v25) = 0;
    BYTE2(v25) = 0;
    HIDWORD(v25) = 0;
    return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v13, &v23, (unsigned __int8 *)&v25, a5, a6, a7, a8);
  }
  v16 = JSC::TemporalPlainTime::from(this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_8;
  v20 = *(_DWORD *)(v10 + 80);
  if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_8:
    v13 = *(_QWORD *)(this + 448);
    if ((v13 & 1) != 0)
    {
      v21 = *(uint64_t (**)(uint64_t *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
      v22 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v22 = (uint64_t *)(this - 16);
      v25 = *v22;
      v26 = this;
      v27 = (char *)(this + 448);
      v13 = v21(&v25);
    }
    v23 = *(_DWORD *)(v11 + 16);
    v25 = *(_QWORD *)(v16 + 16);
    return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v13, &v23, (unsigned __int8 *)&v25, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t JSC::temporalPlainDatePrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;

  v8 = *((_QWORD *)this + 7);
  v30 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"Temporal.PlainDate.prototype.toString called on value that's not a PlainDate", 77);
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v10 = *((_QWORD *)a2 + 6);
    v31 = (WTF::StringImpl *)v8;
    if (v10 != 10 && ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u))
      JSC::throwTypeError((unint64_t)this, &v31, (uint64_t)"options argument is not an object or undefined", 47);
  }
  if (!*(_DWORD *)(v8 + 80))
    goto LABEL_8;
  v29 = *(_DWORD *)(v8 + 80);
  if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v8 + 16))
    v31 = 0;
  else
LABEL_8:
    JSC::ISO8601::temporalDateToString(*(_DWORD *)(v9 + 16), a2, (size_t)a3, a4, a5, a6, a7, a8, &v31);
  v18 = JSC::jsString(v8, (JSC::VM *)&v31, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v18;
}

uint64_t JSC::temporalPlainDatePrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Temporal.PlainDate.prototype.toJSON called on value that's not a PlainDate", 75);
  }
  JSC::ISO8601::temporalDateToString(*(_DWORD *)(v9 + 16), a2, (size_t)a3, a4, a5, a6, a7, a8, &v34);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::temporalPlainDatePrototypeFuncToLocaleString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDate::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Temporal.PlainDate.prototype.toLocaleString called on value that's not a PlainDate", 83);
  }
  JSC::ISO8601::temporalDateToString(*(_DWORD *)(v9 + 16), a2, (size_t)a3, a4, a5, a6, a7, a8, &v34);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::temporalPlainDatePrototypeFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"Temporal.PlainDate.prototype.valueOf must not be called. To compare PlainDate values, use Temporal.PlainDate.compare", 117);
}

unint64_t JSC::temporalPlainDateTimeConstructorFuncFrom(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  int v25;
  uint64_t (*v26)(JSC::VM **);
  JSC::VM **v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_3;
  v11 = *((_QWORD *)a2 + 7);
  v31 = *(JSC::VM **)(this + 56);
  if (v11 == 10)
    goto LABEL_3;
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, &v31, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_3:
    v11 = 0;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = *(_DWORD *)(v10 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v28 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = v28;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  v31 = (JSC::VM *)"constrain";
  v32 = 10;
  LOBYTE(v33) = 0;
  v34 = "reject";
  v35 = 7;
  v36 = 1;
  v13 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v11, v12, (uint64_t)&v31, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v10 + 80))
  {
    v25 = *(_DWORD *)(v10 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    {
      v29 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v13 = v29;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21 = 10;
    return JSC::TemporalPlainDateTime::from(this, v21, v13 | 0x100, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)a2 + 6);
  if ((v21 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::TemporalPlainDateTime::from(this, v21, v13 | 0x100, v15, v16, v17, v18, v19, v20);
  }
  v22 = *(_QWORD *)(this + 448);
  if ((v22 & 1) != 0)
  {
    v26 = *(uint64_t (**)(JSC::VM **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v27 = (JSC::VM **)(this - 16);
    else
      v27 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v31 = *v27;
    v32 = this;
    v33 = (char *)(this + 448);
    v22 = v26(&v31);
  }
  v30 = *(_DWORD *)(v21 + 16);
  v31 = *(JSC::VM **)(v21 + 20);
  return JSC::TemporalPlainDateTime::create(v10, (JSC::VM *)v22, &v30, &v31, v16, v17, v18, v19);
}

uint64_t JSC::temporalPlainDateTimeConstructorFuncCompare(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int8x16_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  _DWORD *v48;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = (_DWORD *)JSC::TemporalPlainDateTime::from((uint64_t)this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v46 = *(_DWORD *)(v11 + 80);
    if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v22 = (_DWORD *)JSC::TemporalPlainDateTime::from((uint64_t)this, v21, 0, v14, v15, v16, v17, v18, v20);
  if (*(_DWORD *)(v11 + 80))
  {
    v47 = *(_DWORD *)(v11 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
    {
      v48 = v22;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v23, v24, v25, v26, v27, v28);
      v22 = v48;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v29 = v19[4];
  v30 = v22[4];
  v31 = v29 << 11 >> 11;
  if (v31 > v30 << 11 >> 11)
    return 0xFFFE000000000001;
  if (v31 < v30 << 11 >> 11)
    return 0xFFFE0000FFFFFFFFLL;
  v32 = (v29 << 6 >> 27);
  if (v32 > (v30 << 6 >> 27))
    return 0xFFFE000000000001;
  if (v32 < (v30 << 6 >> 27))
    return 0xFFFE0000FFFFFFFFLL;
  v33 = (v29 >> 26);
  v34 = v30 >> 26;
  if (v33 > v34)
    return 0xFFFE000000000001;
  if (v33 < v34)
    return 0xFFFE0000FFFFFFFFLL;
  v35 = v19[5];
  v36 = v22[5];
  if (v35 > v36)
    return 0xFFFE000000000001;
  if (v35 < v22[5])
    return 0xFFFE0000FFFFFFFFLL;
  if (BYTE1(v35) > BYTE1(v36))
    return 0xFFFE000000000001;
  if (BYTE1(v35) < BYTE1(v36))
    return 0xFFFE0000FFFFFFFFLL;
  v38 = BYTE2(v35);
  v39 = BYTE2(v36);
  if (v38 > v39)
    return 0xFFFE000000000001;
  if (v38 < v39)
    return 0xFFFE0000FFFFFFFFLL;
  v40 = v19[6];
  v41 = v22[6];
  if ((v40 & 0x3FF) > (v41 & 0x3FF))
    return 0xFFFE000000000001;
  if ((v40 & 0x3FF) < (v41 & 0x3FF))
    return 0xFFFE0000FFFFFFFFLL;
  v42 = (v40 >> 10) & 0x3FF;
  v43 = (v41 >> 10) & 0x3FF;
  if (v42 > v43)
    return 0xFFFE000000000001;
  if (v42 < v43)
    return 0xFFFE0000FFFFFFFFLL;
  v44 = (v40 >> 20) & 0x3FF;
  v45 = (v41 >> 20) & 0x3FF;
  if (v44 > v45)
    return 0xFFFE000000000001;
  if (v44 >= v45)
    return 0xFFFE000000000000;
  else
    return 0xFFFE0000FFFFFFFFLL;
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncGetISOFields(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t result;
  uint64_t (*v63)(uint64_t *);
  uint64_t *v64;
  unint64_t v65;
  JSC *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC *v73;
  JSC::VM *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v8 = *((_QWORD *)this + 7);
  v74 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)"Temporal.PlainDateTime.prototype.getISOFields called on value that's not a PlainDateTime", 89);
  }
  v10 = *(_QWORD *)(v8 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase >= *(_QWORD *)(v10 + 32))
    {
      SlowCase = *(_QWORD *)(v10 + 40);
      if ((SlowCase & 1) != 0)
      {
        v66 = this;
        v67 = *((_QWORD *)a2 + 5);
        v68 = *(unsigned int *)(v10 + 60);
        JSC::sanitizeStackForVM((JSC *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v69 = v68;
        v9 = v67;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v8 + 192, v69, 0, 0, v70, v71, v72);
        this = v66;
        goto LABEL_6;
      }
      v65 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v65);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v65;
    }
    *(_QWORD *)(v10 + 24) = SlowCase + v11;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    v13.n128_u64[1] = 0;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v8 + 755))
      __dmb(0xAu);
    v14 = v8 + 41952;
    v15 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 968);
    v16 = *(_QWORD *)(v9 + 32);
    if ((v16 & 1) != 0)
    {
      v63 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v64 = (uint64_t *)(v9 - 16);
      else
        v64 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v75 = *v64;
      v76 = v9;
      v77 = v9 + 32;
      v16 = v63(&v75);
    }
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v13.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v15, v16, 0, (uint64_t)&v75, a7, a8, v13);
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 1584);
    v18 = (*(int *)(v9 + 16) >> 26) | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v19.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v17, v18, 0, (uint64_t)&v75, v20, v21, v19);
    v22 = *(_QWORD *)(*(_QWORD *)v14 + 1592);
    v23 = *(unsigned __int8 *)(v9 + 20) | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v24.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v22, v23, 0, (uint64_t)&v75, v25, v26, v24);
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 1600);
    v28 = ((unint64_t)*(unsigned int *)(v9 + 24) >> 10) & 0x3FF | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v29.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v27, v28, 0, (uint64_t)&v75, v30, v31, v29);
    v32 = *(_QWORD *)(*(_QWORD *)v14 + 1608);
    v33 = *(_DWORD *)(v9 + 24) & 0x3FFLL | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v34.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v32, v33, 0, (uint64_t)&v75, v35, v36, v34);
    v37 = *(_QWORD *)(*(_QWORD *)v14 + 1616);
    v38 = *(unsigned __int8 *)(v9 + 21) | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v39.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v37, v38, 0, (uint64_t)&v75, v40, v41, v39);
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 1624);
    v43 = ((int)(*(_DWORD *)(v9 + 16) << 6) >> 27) | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v44.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v42, v43, 0, (uint64_t)&v75, v45, v46, v44);
    v47 = *(_QWORD *)(*(_QWORD *)v14 + 1632);
    v48 = *(unsigned int *)(v9 + 24);
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v49.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v47, (v48 >> 20) & 0x3FF | 0xFFFE000000000000, 0, (uint64_t)&v75, v50, v51, v49);
    v52 = *(_QWORD *)(*(_QWORD *)v14 + 1640);
    v53 = *(unsigned __int8 *)(v9 + 22) | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v54.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v52, v53, 0, (uint64_t)&v75, v55, v56, v54);
    v57 = *(_QWORD *)(*(_QWORD *)v14 + 1648);
    v58 = ((int)(*(_DWORD *)(v9 + 16) << 11) >> 11) | 0xFFFE000000000000;
    v75 = 0;
    v76 = SlowCase;
    v77 = 0x1000000FFFFFFFFLL;
    v59.n128_u64[0] = 0x100000001000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v57, v58, 0, (uint64_t)&v75, v60, v61, v59);
    return SlowCase;
  }
  v73 = this;
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v8 + 14936, (JSC *)v8, 0x40uLL, 0, a5, a6, a7, a8);
  this = v73;
  if (SlowCase)
    goto LABEL_6;
  result = 110;
  __break(0xC471u);
  return result;
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncAdd(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  double v54;
  const Duration *v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t (*v87)(_QWORD *);
  _QWORD *v88;
  JSC::VM *v89;
  JSC::VM *v90;
  int v91;
  unint64_t v92;
  JSC::VM *v93[10];
  __int128 v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  JSC::VM *v103;
  _QWORD v104[3];
  __int128 v105;
  uint64_t v106;
  double v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v103 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v103, (uint64_t)"Temporal.PlainDateTime.prototype.add called on value that's not a PlainDateTime", 80);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toISO8601Duration(this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, &v94);
  if (*(_DWORD *)(v9 + 80))
  {
    v82 = *(_DWORD *)(v9 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_8;
  v19 = *((_QWORD *)a2 + 7);
  v93[0] = *(JSC::VM **)(this + 56);
  if (v19 == 10)
    goto LABEL_8;
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, v93, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_8:
    v19 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v83 = *(_DWORD *)(v9 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v20 = *(_QWORD *)(v10 + 20);
  v21 = v97 + (double)v20;
  v22 = v98 + (double)BYTE1(v20);
  v23 = v99 + (double)BYTE2(v20);
  v24 = v100 + (double)(WORD2(v20) & 0x3FF);
  v25 = v102 + (double)((v20 >> 52) & 0x3FF);
  v26 = v101 + (double)((v20 >> 42) & 0x3FF) + floor(v25 / 1000.0);
  v27 = fmod(v25, 1000.0);
  v28 = v27 == 0.0;
  if (v27 >= 0.0)
    v29 = -0.0;
  else
    v29 = 1000.0;
  v30 = v27 + v29;
  if (v28)
    v30 = 0.0;
  v90 = *(JSC::VM **)&v30;
  v31 = v24 + floor(v26 / 1000.0);
  v32 = fmod(v26, 1000.0);
  v33 = v32 == 0.0;
  if (v32 >= 0.0)
    v34 = -0.0;
  else
    v34 = 1000.0;
  v35 = v32 + v34;
  if (v33)
    v35 = 0.0;
  v89 = *(JSC::VM **)&v35;
  v36 = v23 + floor(v31 / 1000.0);
  v37 = fmod(v31, 1000.0);
  v38 = v37 == 0.0;
  if (v37 >= 0.0)
    v39 = -0.0;
  else
    v39 = 1000.0;
  v40 = v37 + v39;
  if (v38)
    v41 = 0.0;
  else
    v41 = v40;
  v42 = v22 + floor(v36 / 60.0);
  v43 = fmod(v36, 60.0);
  v44 = v43 == 0.0;
  if (v43 >= 0.0)
    v45 = -0.0;
  else
    v45 = 60.0;
  v46 = v43 + v45;
  if (v44)
    v47 = 0.0;
  else
    v47 = v46;
  v48 = v21 + floor(v42 / 60.0);
  v49 = fmod(v42, 60.0);
  v50 = v49 == 0.0;
  if (v49 >= 0.0)
    v51 = -0.0;
  else
    v51 = 60.0;
  v52 = v49 + v51;
  if (v50)
    v53 = 0.0;
  else
    v53 = v52;
  v54 = floor(v48 / 24.0);
  v56 = fmod(v48, 24.0);
  v57 = v56 == 0.0;
  if (v56 >= 0.0)
    v58 = -0.0;
  else
    v58 = 24.0;
  v93[1] = 0;
  v93[2] = 0;
  v59 = v56 + v58;
  if (v57)
    v59 = 0.0;
  v93[0] = 0;
  v93[3] = *(JSC::VM **)&v54;
  v93[4] = *(JSC::VM **)&v59;
  v93[5] = *(JSC::VM **)&v53;
  v93[6] = *(JSC::VM **)&v47;
  v93[7] = *(JSC::VM **)&v41;
  v93[8] = v89;
  v93[9] = v90;
  v92 = JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)v93, v55);
  if (*(_DWORD *)(v9 + 80))
  {
    v84 = *(_DWORD *)(v9 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v60, v61, v62, v63, v64, v65);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  *(_QWORD *)&v105 = "constrain";
  *((_QWORD *)&v105 + 1) = 10;
  LOBYTE(v106) = 0;
  v107 = COERCE_DOUBLE("reject");
  *(_QWORD *)&v108 = 7;
  BYTE8(v108) = 1;
  v73 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v19, v66, (uint64_t)&v105, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v9 + 80))
  {
    v85 = *(_DWORD *)(v9 + 80);
    if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v67, v68, v69, v70, v71, v72);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v105 = v94;
  v106 = v95;
  v107 = v54 + v96;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  LODWORD(v104[0]) = *(_DWORD *)(v10 + 16);
  v91 = JSC::TemporalCalendar::isoDateAdd(this, (int *)v104, (uint64_t)&v105, v73);
  if (*(_DWORD *)(v9 + 80))
  {
    v86 = *(_DWORD *)(v9 + 80);
    if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v74, v75, v76, v77, v78, v79);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v80 = *(_QWORD *)(this + 448);
  if ((v80 & 1) != 0)
  {
    v87 = *(uint64_t (**)(_QWORD *))(v80 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v88 = (_QWORD *)(this - 16);
    else
      v88 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v104[0] = *v88;
    v104[1] = this;
    v104[2] = this + 448;
    v80 = v87(v104);
  }
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v80, &v91, (unsigned __int8 *)&v92, v76, v77, v78, v79);
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncSubtract(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  long double v25;
  float64_t v26;
  double v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  double v54;
  const Duration *v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t (*v87)(_QWORD *);
  _QWORD *v88;
  JSC::VM *v89;
  JSC::VM *v90;
  int v91;
  unint64_t v92;
  JSC::VM *v93[10];
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  JSC::VM *v99;
  _QWORD v100[3];
  int8x16_t v101;
  float64_t v102;
  double v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v99 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v99, (uint64_t)"Temporal.PlainDateTime.prototype.subtract called on value that's not a PlainDateTime", 85);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toISO8601Duration(this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, &v94);
  if (*(_DWORD *)(v9 + 80))
  {
    v82 = *(_DWORD *)(v9 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v94 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v94), v94, (int8x16_t)vnegq_f64((float64x2_t)v94));
  v95 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v95), v95, (int8x16_t)vnegq_f64((float64x2_t)v95));
  v96 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v96), v96, (int8x16_t)vnegq_f64((float64x2_t)v96));
  v97 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v97), v97, (int8x16_t)vnegq_f64((float64x2_t)v97));
  v98 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v98), v98, (int8x16_t)vnegq_f64((float64x2_t)v98));
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_8;
  v19 = *((_QWORD *)a2 + 7);
  v93[0] = *(JSC::VM **)(this + 56);
  if (v19 == 10)
    goto LABEL_8;
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, v93, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_8:
    v19 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v83 = *(_DWORD *)(v9 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v20 = *(_QWORD *)(v10 + 20);
  v21 = *(double *)v96.i64 + (double)v20;
  v22 = *(double *)&v96.i64[1] + (double)BYTE1(v20);
  v23 = *(double *)v97.i64 + (double)BYTE2(v20);
  v24 = *(double *)&v97.i64[1] + (double)(WORD2(v20) & 0x3FF);
  v25 = *(double *)&v98.i64[1] + (double)((v20 >> 52) & 0x3FF);
  v26 = *(double *)v98.i64 + (double)((v20 >> 42) & 0x3FF) + floor(v25 / 1000.0);
  v27 = fmod(v25, 1000.0);
  v28 = v27 == 0.0;
  if (v27 >= 0.0)
    v29 = -0.0;
  else
    v29 = 1000.0;
  v30 = v27 + v29;
  if (v28)
    v30 = 0.0;
  v90 = *(JSC::VM **)&v30;
  v31 = v24 + floor(v26 / 1000.0);
  v32 = fmod(v26, 1000.0);
  v33 = v32 == 0.0;
  if (v32 >= 0.0)
    v34 = -0.0;
  else
    v34 = 1000.0;
  v35 = v32 + v34;
  if (v33)
    v35 = 0.0;
  v89 = *(JSC::VM **)&v35;
  v36 = v23 + floor(v31 / 1000.0);
  v37 = fmod(v31, 1000.0);
  v38 = v37 == 0.0;
  if (v37 >= 0.0)
    v39 = -0.0;
  else
    v39 = 1000.0;
  v40 = v37 + v39;
  if (v38)
    v41 = 0.0;
  else
    v41 = v40;
  v42 = v22 + floor(v36 / 60.0);
  v43 = fmod(v36, 60.0);
  v44 = v43 == 0.0;
  if (v43 >= 0.0)
    v45 = -0.0;
  else
    v45 = 60.0;
  v46 = v43 + v45;
  if (v44)
    v47 = 0.0;
  else
    v47 = v46;
  v48 = v21 + floor(v42 / 60.0);
  v49 = fmod(v42, 60.0);
  v50 = v49 == 0.0;
  if (v49 >= 0.0)
    v51 = -0.0;
  else
    v51 = 60.0;
  v52 = v49 + v51;
  if (v50)
    v53 = 0.0;
  else
    v53 = v52;
  v54 = floor(v48 / 24.0);
  v56 = fmod(v48, 24.0);
  v57 = v56 == 0.0;
  if (v56 >= 0.0)
    v58 = -0.0;
  else
    v58 = 24.0;
  v93[1] = 0;
  v93[2] = 0;
  v59 = v56 + v58;
  if (v57)
    v59 = 0.0;
  v93[0] = 0;
  v93[3] = *(JSC::VM **)&v54;
  v93[4] = *(JSC::VM **)&v59;
  v93[5] = *(JSC::VM **)&v53;
  v93[6] = *(JSC::VM **)&v47;
  v93[7] = *(JSC::VM **)&v41;
  v93[8] = v89;
  v93[9] = v90;
  v92 = JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)v93, v55);
  if (*(_DWORD *)(v9 + 80))
  {
    v84 = *(_DWORD *)(v9 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v60, v61, v62, v63, v64, v65);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  v101.i64[0] = (uint64_t)"constrain";
  v101.i64[1] = 10;
  LOBYTE(v102) = 0;
  v103 = COERCE_DOUBLE("reject");
  *(_QWORD *)&v104 = 7;
  BYTE8(v104) = 1;
  v73 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v19, v66, (uint64_t)&v101, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v9 + 80))
  {
    v85 = *(_DWORD *)(v9 + 80);
    if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v67, v68, v69, v70, v71, v72);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v101 = v94;
  v102 = *(double *)v95.i64;
  v103 = v54 + *(double *)&v95.i64[1];
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  LODWORD(v100[0]) = *(_DWORD *)(v10 + 16);
  v91 = JSC::TemporalCalendar::isoDateAdd(this, (int *)v100, (uint64_t)&v101, v73);
  if (*(_DWORD *)(v9 + 80))
  {
    v86 = *(_DWORD *)(v9 + 80);
    if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v74, v75, v76, v77, v78, v79);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v80 = *(_QWORD *)(this + 448);
  if ((v80 & 1) != 0)
  {
    v87 = *(uint64_t (**)(_QWORD *))(v80 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v88 = (_QWORD *)(this - 16);
    else
      v88 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v100[0] = *v88;
    v100[1] = this;
    v100[2] = this + 448;
    v80 = v87(v100);
  }
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v80, &v91, (unsigned __int8 *)&v92, v76, v77, v78, v79);
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncWith(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  _BOOL4 v59;
  const Duration *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  double v67;
  double v68;
  unsigned int v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  unsigned int v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t (*v105)(double *);
  JSC::VM **v106;
  int v107;
  uint64_t (*v108)(double *);
  JSC::VM **v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t (*v115)(_QWORD *);
  _QWORD *v116;
  JSC::VM *v117;
  unint64_t v118;
  WTF::StringImpl *v119[2];
  __int128 v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  int v127;
  double v128;
  unsigned __int8 v129;
  double v130;
  unsigned __int8 v131;
  double v132;
  char v133;
  _QWORD v134[3];
  double v135;
  uint64_t v136;
  char *v137;
  const char *v138;
  uint64_t v139;
  char v140;
  double v141;
  char v142;
  double v143;
  char v144;
  double v145;
  char v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v117 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v29 = "Temporal.PlainDateTime.prototype.with called on value that's not a PlainDateTime";
    v30 = 81;
    return JSC::throwTypeError(this, &v117, (uint64_t)v29, v30);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6), ((unint64_t)v11 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v11 + 5) <= 0x16u)
  {
    v29 = "First argument to Temporal.PlainDateTime.prototype.with must be an object";
    v30 = 74;
    return JSC::throwTypeError(this, &v117, (uint64_t)v29, v30);
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 7);
  JSC::rejectObjectWithCalendarOrTimeZone((JSC *)this, *((JSC::JSGlobalObject **)a2 + 6), a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v104 = *(_DWORD *)(v9 + 80);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v19 = *(_QWORD *)(v10 + 32);
  if ((v19 & 1) != 0)
  {
    v105 = *(uint64_t (**)(double *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v10 & 8) != 0)
      v106 = (JSC::VM **)(v10 - 16);
    else
      v106 = (JSC::VM **)(v10 & 0xFFFFFFFFFFFFC000 | 8);
    v135 = *(double *)v106;
    v136 = v10;
    v137 = (char *)(v10 + 32);
    v19 = v105(&v135);
  }
  v20 = *(_DWORD *)(v19 + 16);
  v21 = JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v22 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v22 != -1)
    {
      v135 = COERCE_DOUBLE(&v128);
      v119[0] = (WTF::StringImpl *)&v135;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v21 = JSC::iso8601CalendarIDStorage;
  }
  if (v20 != v21)
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v32 = 0x2800000002;
    *(_QWORD *)(v32 + 8) = "unimplemented: from non-ISO8601 calendar";
    *(_DWORD *)(v32 + 16) = 4;
    v119[0] = (WTF::StringImpl *)v32;
    v33 = *(_QWORD *)(this + 128);
    v34 = *(JSC::Heap ***)(this + 56);
    if ((v33 & 1) != 0)
    {
      v108 = *(uint64_t (**)(double *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v109 = (JSC::VM **)(this - 16);
      else
        v109 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v135 = *(double *)v109;
      v136 = this;
      v137 = (char *)(this + 128);
      v33 = v108(&v135);
    }
    v35 = JSC::ErrorInstance::create(v34, v33, v119, 0, 0, 0, 2, 1);
    v42 = (JSC::Exception *)v35;
    if ((v35 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
    {
      v42 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v42, v41, v36, v37, v38, v39, v40);
    v50 = v119[0];
    v119[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    return 0;
  }
  JSC::TemporalPlainDate::toPartialDate(this, v11, v14, v15, v16, v17, v18, (uint64_t)&v128);
  if (*(_DWORD *)(v9 + 80))
  {
    v107 = *(_DWORD *)(v9 + 80);
    if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v135 = *(double *)(this + 56);
  if (v12 == 10)
    goto LABEL_17;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, (JSC::VM **)&v135, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_17:
    v12 = 0;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v110 = *(_DWORD *)(v9 + 80);
    if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  v135 = COERCE_DOUBLE("constrain");
  v136 = 10;
  LOBYTE(v137) = 0;
  v138 = "reject";
  v139 = 7;
  v140 = 1;
  v58 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v12, v51, (uint64_t)&v135, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v9 + 80))
  {
    v111 = *(_DWORD *)(v9 + 80);
    if ((v111 & 0x27) != 0 && (v111 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v52, v53, v54, v55, v56, v57);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v59 = v129 | v131 || v133 != 0;
  JSC::TemporalPlainTime::toPartialTime((JSC::TemporalPlainTime *)&v135, this, v11, v59);
  if (*(_DWORD *)(v9 + 80))
  {
    v112 = *(_DWORD *)(v9 + 80);
    if ((v112 & 0x27) != 0 && (v112 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v60, v61, v62, v63, v64, v65);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v66 = *(_DWORD *)(v10 + 16);
  v67 = v128;
  if (!v129)
    v67 = (double)(v66 << 11 >> 11);
  v68 = v130;
  if (!v131)
    v68 = (double)(v66 << 6 >> 27);
  v69 = (v66 >> 26);
  v70 = v132;
  if (!v133)
    v70 = (double)v69;
  v127 = JSC::TemporalCalendar::isoDateFromFields(this, v58, v60, v67, v68, v70);
  if (*(_DWORD *)(v9 + 80))
  {
    v113 = *(_DWORD *)(v9 + 80);
    if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v71, v72, v73, v74, v75, v76);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  *(_OWORD *)v119 = 0u;
  v120 = 0u;
  v79 = v135;
  LOBYTE(v77) = *(_BYTE *)(v10 + 20);
  v80 = (double)v77;
  if (!(_BYTE)v136)
    v79 = v80;
  if (v79 == 0.0)
    v79 = 0.0;
  v121 = v79;
  v81 = *(double *)&v137;
  LOBYTE(v78) = *(_BYTE *)(v10 + 21);
  v82 = (double)v78;
  if (!(_BYTE)v138)
    v81 = v82;
  if (v81 == 0.0)
    v81 = 0.0;
  v122 = v81;
  v83 = *(double *)&v139;
  LOBYTE(v82) = *(_BYTE *)(v10 + 22);
  v84 = (double)*(unint64_t *)&v82;
  if (!v140)
    v83 = v84;
  if (v83 == 0.0)
    v83 = 0.0;
  v123 = v83;
  v85 = *(_DWORD *)(v10 + 24);
  v86 = v141;
  if (!v142)
    v86 = (double)(*(_DWORD *)(v10 + 24) & 0x3FF);
  if (v86 == 0.0)
    v86 = 0.0;
  v87 = v143;
  if (!v144)
    v87 = (double)((v85 >> 10) & 0x3FF);
  if (v87 == 0.0)
    v87 = 0.0;
  v124 = v86;
  v125 = v87;
  v88 = (double)((v85 >> 20) & 0x3FF);
  if (v146)
    v88 = v145;
  if (v88 == 0.0)
    v88 = 0.0;
  v126 = v88;
  v118 = JSC::TemporalPlainTime::regulateTime(this, (double *)v119, (const Duration *)v58);
  if (*(_DWORD *)(v9 + 80))
  {
    v114 = *(_DWORD *)(v9 + 80);
    if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v89, v90, v91, v92, v93, v94);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v95 = *(_QWORD *)(this + 448);
  if ((v95 & 1) != 0)
  {
    v115 = *(uint64_t (**)(_QWORD *))(v95 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v116 = (_QWORD *)(this - 16);
    else
      v116 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v134[0] = *v116;
    v134[1] = this;
    v134[2] = this + 448;
    v95 = v115(v134);
  }
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v95, &v127, (unsigned __int8 *)&v118, v91, v92, v93, v94);
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncWithPlainDate(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  uint64_t (*v23)(_QWORD *);
  _QWORD *v24;
  int v25;
  JSC::VM *v26;
  _QWORD v27[3];

  v10 = *(_QWORD *)(this + 56);
  v26 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v26, (uint64_t)"Temporal.PlainDateTime.prototype.withPlainDate called on value that's not a PlainDateTime", 90);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::TemporalPlainDate::from(this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v22 = *(_DWORD *)(v10 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v20 = *(_QWORD *)(this + 448);
  if ((v20 & 1) != 0)
  {
    v23 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v24 = (_QWORD *)(this - 16);
    v27[0] = *v24;
    v27[1] = this;
    v27[2] = this + 448;
    v20 = v23(v27);
  }
  v25 = *(_DWORD *)(v19 + 16);
  v27[0] = *(_QWORD *)(v11 + 20);
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v20, &v25, (unsigned __int8 *)v27, v15, v16, v17, v18);
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncWithPlainTime(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v18)(_QWORD *);
  _QWORD *v19;
  int v20;
  int v21;
  JSC::VM *v22;
  _QWORD v23[3];

  v10 = *(_QWORD *)(this + 56);
  v22 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v22, (uint64_t)"Temporal.PlainDateTime.prototype.withPlainTime called on value that's not a PlainDateTime", 90);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = 0;
  }
  else
  {
    v13 = JSC::TemporalPlainTime::from(this, v12, 0, a4, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v10 + 80))
    {
      v20 = *(_DWORD *)(v10 + 80);
      if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
  }
  v16 = *(_QWORD *)(this + 448);
  if ((v16 & 1) != 0)
  {
    v18 = *(uint64_t (**)(_QWORD *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v19 = (_QWORD *)(this - 16);
    v23[0] = *v19;
    v23[1] = this;
    v23[2] = this + 448;
    v16 = v18(v23);
  }
  v21 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    v23[0] = *(_QWORD *)(v13 + 16);
  }
  else
  {
    LOWORD(v23[0]) = 0;
    BYTE2(v23[0]) = 0;
    HIDWORD(v23[0]) = 0;
  }
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v16, &v21, (unsigned __int8 *)v23, a5, a6, a7, a8);
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncRound(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t result;
  unsigned int v16;
  const char **v17;
  const char *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned __int16 v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unsigned __int16 v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  JSC::Heap **v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  JSC::Exception *v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  const Duration *v78;
  const Duration *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  int v86;
  double v87;
  double v88;
  double v89;
  double *v90;
  int v91;
  _BOOL4 v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t (*v135)(WTF::StringImpl **);
  WTF::StringImpl **v136;
  uint64_t (*v137)(double *);
  JSC::VM **v138;
  uint64_t (*v139)(double *);
  JSC::VM **v140;
  double v141;
  JSC::VM *v142;
  int v143;
  unint64_t v144;
  WTF::StringImpl *v145[3];
  double v146;
  uint64_t v147;
  char *v148;
  double v149[2];
  char v150;
  const char *v151;
  uint64_t v152;
  char v153;
  const char *v154;
  uint64_t v155;
  char v156;
  const char *v157;
  uint64_t v158;
  char v159;
  const char *v160;
  uint64_t v161;
  char v162;
  const char *v163;
  uint64_t v164;
  char v165;
  const char *v166;
  uint64_t v167;
  char v168;
  const char *v169;
  uint64_t v170;
  char v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v142 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = "Temporal.PlainDateTime.prototype.round called on value that's not a PlainDateTime";
    v14 = 82;
    return JSC::throwTypeError(this, &v142, (uint64_t)v13, v14);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = "Temporal.PlainDateTime.prototype.round requires an options argument";
    v14 = 68;
    return JSC::throwTypeError(this, &v142, (uint64_t)v13, v14);
  }
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v146 = *(double *)&v10;
LABEL_31:
    JSC::throwTypeError(this, (JSC::VM **)&v146, (uint64_t)"options argument is not an object or undefined", 47);
    v12 = 0;
    goto LABEL_32;
  }
  v16 = *(unsigned __int8 *)(v12 + 5);
  if (v16 == 2)
  {
    v17 = *(const char ***)(v12 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = (const char **)*JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_12;
    }
    else if (!v17)
    {
LABEL_12:
      if (*(_DWORD *)(v10 + 80))
      {
        v130 = *(_DWORD *)(v10 + 80);
        if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v10 + 16))
        {
LABEL_27:
          if (v17)
          {
            if (*(_DWORD *)v17 != 2)
            {
              result = 0;
              *(_DWORD *)v17 -= 2;
              return result;
            }
            v60 = (WTF::StringImpl *)v17;
LABEL_72:
            WTF::StringImpl::~StringImpl(v60, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
          }
          return 0;
        }
      }
      if (v17)
      {
        v18 = v17[1];
        v19 = *((_DWORD *)v17 + 1);
        v20 = ((unint64_t)*((unsigned int *)v17 + 4) >> 2) & 1;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 1;
      }
      v21 = JSC::temporalUnitType(v18, v19 | (v20 << 32));
      if (v21 <= 0xFFu)
      {
        v29 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v29 = 0x2800000002;
        v30 = "smallestUnit is an invalid Temporal unit";
LABEL_21:
        *(_QWORD *)(v29 + 8) = v30;
        *(_DWORD *)(v29 + 16) = 4;
        v145[0] = (WTF::StringImpl *)v29;
        v32 = *(_QWORD *)(this + 128);
        v33 = *(JSC::Heap ***)(this + 56);
        if ((v32 & 1) != 0)
        {
          v137 = *(uint64_t (**)(double *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v138 = (JSC::VM **)(this - 16);
          else
            v138 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v146 = *(double *)v138;
          v147 = this;
          v148 = (char *)(this + 128);
          v32 = v137(&v146);
        }
        v34 = JSC::ErrorInstance::create(v33, v32, v145, 0, 0, 0, 2, 1);
        v41 = (JSC::Exception *)v34;
        if ((v34 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
        {
          v41 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
        }
        JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v41, v40, v35, v36, v37, v38, v39);
        v42 = v145[0];
        v145[0] = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        goto LABEL_27;
      }
      LOBYTE(v31) = v21;
      if (v21 <= 2u)
      {
        v29 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v29 = 0x2100000002;
        v30 = "smallestUnit is a disallowed unit";
        goto LABEL_21;
      }
      if (v17)
      {
        if (*(_DWORD *)v17 != 2)
        {
          v12 = 0;
          *(_DWORD *)v17 -= 2;
          goto LABEL_44;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      v12 = 0;
      goto LABEL_44;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_12;
  }
  v146 = *(double *)&v10;
  if (v16 <= 0x16)
    goto LABEL_31;
LABEL_32:
  if (*(_DWORD *)(v10 + 80))
  {
    v128 = *(_DWORD *)(v10 + 80);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  LOWORD(v146) = 256;
  BYTE2(v146) = 2;
  v31 = JSC::temporalSmallestUnit(this, (unsigned int *)v12, (uint64_t)&v146, 3, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v129 = *(_DWORD *)(v10 + 80);
    if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v43, v44, v45, v46, v47, v48);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v31 <= 0xFFu)
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v49 = 0x2A00000002;
    *(_QWORD *)(v49 + 8) = "Cannot round without a smallestUnit option";
    *(_DWORD *)(v49 + 16) = 4;
    v145[0] = (WTF::StringImpl *)v49;
    v50 = *(_QWORD *)(this + 128);
    v51 = *(JSC::Heap ***)(this + 56);
    if ((v50 & 1) != 0)
    {
      v139 = *(uint64_t (**)(double *))(v50 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v140 = (JSC::VM **)(this - 16);
      else
        v140 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v146 = *(double *)v140;
      v147 = this;
      v148 = (char *)(this + 128);
      v50 = v139(&v146);
    }
    v52 = JSC::ErrorInstance::create(v51, v50, v145, 0, 0, 0, 2, 1);
    v59 = (JSC::Exception *)v52;
    if ((v52 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x4C)))
    {
      v59 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v52, 0, v53, v54, v55, v56, v57);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v59, v58, v53, v54, v55, v56, v57);
    v60 = v145[0];
    v145[0] = 0;
    if (!v60)
      return 0;
    if (*(_DWORD *)v60 == 2)
      goto LABEL_72;
    *(_DWORD *)v60 -= 2;
    return 0;
  }
LABEL_44:
  v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2224);
  v146 = COERCE_DOUBLE("ceil");
  v147 = 5;
  LOBYTE(v148) = 0;
  *(_QWORD *)&v149[0] = "floor";
  *(_QWORD *)&v149[1] = 6;
  v150 = 1;
  v151 = "expand";
  v152 = 7;
  v153 = 2;
  v154 = "trunc";
  v155 = 6;
  v156 = 3;
  v157 = "halfCeil";
  v158 = 9;
  v159 = 4;
  v160 = "halfFloor";
  v161 = 10;
  v162 = 5;
  v163 = "halfExpand";
  v164 = 11;
  v165 = 6;
  v166 = "halfTrunc";
  v167 = 10;
  v168 = 7;
  v169 = "halfEven";
  v170 = 9;
  v171 = 8;
  v68 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)this, (unsigned int *)v12, v61, (uint64_t)&v146, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 6);
  if (*(_DWORD *)(v10 + 80))
  {
    v131 = *(_DWORD *)(v10 + 80);
    if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v62, v63, v64, v65, v66, v67);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v31 == 3)
  {
    v69 = 0x3FF0000000000000;
LABEL_47:
    v70 = 1;
    goto LABEL_50;
  }
  if (v31 >= 4u)
  {
    if (v31 == 4)
    {
      v69 = 0x4038000000000000;
    }
    else if (v31 >= 7u)
    {
      v69 = 0x408F400000000000;
    }
    else
    {
      v69 = 0x404E000000000000;
    }
    goto LABEL_47;
  }
  v70 = 0;
  v69 = 0;
LABEL_50:
  v77 = JSC::temporalRoundingIncrement(this, (unsigned int *)v12, v69, v70, 0, v65, v66, v67);
  if (*(_DWORD *)(v10 + 80))
  {
    v132 = *(_DWORD *)(v10 + 80);
    if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
    {
      v141 = v77;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v71, v72, v73, v74, v75, v76);
      v77 = v141;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  JSC::TemporalPlainTime::roundTime((uint64_t)&v146, *(_QWORD *)(v11 + 20), v31, v68, v77);
  v144 = JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)&v146, v78);
  if (*(_DWORD *)(v10 + 80))
  {
    v133 = *(_DWORD *)(v10 + 80);
    if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v79, v80, v81, v82, v83, v84);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v85 = v149[0];
  v86 = *(_DWORD *)(v11 + 16);
  v87 = (double)(v86 << 11 >> 11);
  if (!(v86 << 11))
    v87 = 0.0;
  v88 = (double)(v86 << 6 >> 27);
  v146 = v87;
  *(double *)&v147 = v88;
  v89 = (double)(v86 >> 26);
  v149[0] = v89;
  if (v85 != 0.0)
  {
    v90 = v149;
    v91 = v86 << 6;
    if (((int)v87 & 3) != 0)
    {
      v92 = 0;
    }
    else
    {
      HIDWORD(v93) = -1030792151 * (int)v87 + 85899344;
      LODWORD(v93) = HIDWORD(v93);
      if ((v93 >> 4) < 0xA3D70B)
      {
        v92 = 1;
      }
      else
      {
        HIDWORD(v94) = -1030792151 * (int)v87 + 85899344;
        LODWORD(v94) = HIDWORD(v94);
        v92 = (v94 >> 2) > 0x28F5C28;
      }
    }
    v95 = v91 >> 27;
    LOBYTE(v85) = JSC::ISO8601::daysInMonths[12 * v92 - 1 + v95];
    if (v89 >= (double)*(unint64_t *)&v85)
    {
      v149[0] = 1.0;
      if (v95 >= 0xC)
      {
        *(double *)&v147 = 1.0;
        v90 = &v146;
        v89 = v87;
      }
      else
      {
        v90 = (double *)&v147;
        v89 = v88;
      }
    }
    v96 = v89 + 1.0;
    if (v89 + 1.0 == 0.0)
      v96 = 0.0;
    *v90 = v96;
  }
  v143 = JSC::TemporalPlainDate::toPlainDate(this, (JSC::JSGlobalObject *)&v146, v79);
  if (*(_DWORD *)(v10 + 80))
  {
    v134 = *(_DWORD *)(v10 + 80);
    if ((v134 & 0x27) != 0 && (v134 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v97, v98, v99, v100, v101, v102);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v103 = *(_QWORD *)(this + 448);
  if ((v103 & 1) != 0)
  {
    v135 = *(uint64_t (**)(WTF::StringImpl **))(v103 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v136 = (WTF::StringImpl **)(this - 16);
    else
      v136 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v145[0] = *v136;
    v145[1] = (WTF::StringImpl *)this;
    v145[2] = (WTF::StringImpl *)(this + 448);
    v103 = v135(v145);
  }
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v103, &v143, (unsigned __int8 *)&v144, v99, v100, v101, v102);
}

uint64_t JSC::temporalPlainDateTimePrototypeFuncEquals(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t (*v24)(uint64_t *);
  uint64_t *v25;
  unint64_t v26;
  uint64_t (*v27)(uint64_t *);
  uint64_t *v28;
  JSC::TemporalCalendar *v29;
  uint64_t v30;
  unint64_t v31;
  JSC::VM *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v10 = *((_QWORD *)this + 7);
  v32 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v32, (uint64_t)"Temporal.PlainDateTime.prototype.equals called on value that's not a PlainDateTime", 83);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v13 = JSC::TemporalPlainDateTime::from((uint64_t)this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v23 = *(_DWORD *)(v10 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    {
      v31 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v13 = v31;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v13 + 16)
    || (*(_DWORD *)(v11 + 20) & 0xFFFFFF) != (*(_DWORD *)(v13 + 20) & 0xFFFFFF)
    || ((*(_QWORD *)(v13 + 20) ^ *(_QWORD *)(v11 + 20)) & 0x3FFFFFFF00000000) != 0)
  {
    return 6;
  }
  v21 = *(_QWORD *)(v11 + 32);
  if ((v21 & 1) != 0)
  {
    v24 = *(uint64_t (**)(uint64_t *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v25 = (uint64_t *)(v11 - 16);
    v33 = *v25;
    v34 = v11;
    v35 = v11 + 32;
    v26 = v13;
    v21 = v24(&v33);
    v13 = v26;
  }
  v22 = *(_QWORD *)(v13 + 32);
  if ((v22 & 1) != 0)
  {
    v27 = *(uint64_t (**)(uint64_t *))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    v28 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v28 = (uint64_t *)(v13 - 16);
    v33 = *v28;
    v34 = v13;
    v35 = v13 + 32;
    v29 = (JSC::TemporalCalendar *)v21;
    v30 = v27(&v33);
    v21 = (unint64_t)v29;
    v22 = v30;
  }
  if (JSC::TemporalCalendar::equals((JSC::TemporalCalendar *)v21, this, (JSC::TemporalCalendar *)v22, v15, v16, v17, v18, v19))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncToPlainDate(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*v12)(_QWORD *);
  _QWORD *v13;
  JSC::VM *v14;
  _QWORD v15[3];

  v8 = *(JSC::VM **)(this + 56);
  v14 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14, (uint64_t)"Temporal.PlainDateTime.prototype.toPlainDate called on value that's not a PlainDateTime", 88);
  }
  v10 = *(_QWORD *)(this + 440);
  if ((v10 & 1) != 0)
  {
    v12 = *(uint64_t (**)(_QWORD *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v13 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v13 = (_QWORD *)(this - 16);
    v15[0] = *v13;
    v15[1] = this;
    v15[2] = this + 440;
    v10 = v12(v15);
  }
  LODWORD(v15[0]) = *(_DWORD *)(v9 + 16);
  return JSC::TemporalPlainDate::create((uint64_t)v8, (JSC::VM *)v10, v15, a4, a5, a6, a7, a8);
}

unint64_t JSC::temporalPlainDateTimePrototypeFuncToPlainTime(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v12)(_QWORD *);
  _QWORD *v13;
  JSC::VM *v14;
  _QWORD v15[3];

  v8 = *(JSC::VM **)(this + 56);
  v14 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v14, (uint64_t)"Temporal.PlainDateTime.prototype.toPlainTime called on value that's not a PlainDateTime", 88);
  }
  v10 = *(_QWORD *)(this + 456);
  if ((v10 & 1) != 0)
  {
    v12 = *(uint64_t (**)(_QWORD *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v13 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v13 = (_QWORD *)(this - 16);
    v15[0] = *v13;
    v15[1] = this;
    v15[2] = this + 456;
    v10 = v12(v15);
  }
  v15[0] = *(_QWORD *)(v9 + 20);
  return JSC::TemporalPlainTime::create((uint64_t)v8, (JSC::VM *)v10, v15, a4, a5, a6, a7, a8);
}

uint64_t JSC::temporalPlainDateTimePrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  _OWORD *v18;
  size_t v19;
  const Duration *v20;
  unint64_t v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  int v28;
  _BOOL4 v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  double v33;
  int v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  WTF::StringImpl *v58;
  JSC::VM *v59;
  double v60;
  double v61;
  char v62;
  double v63[2];
  char v64;
  const char *v65;
  uint64_t v66;
  char v67;
  const char *v68;
  uint64_t v69;
  char v70;
  const char *v71;
  uint64_t v72;
  char v73;
  const char *v74;
  uint64_t v75;
  char v76;
  const char *v77;
  uint64_t v78;
  char v79;
  const char *v80;
  uint64_t v81;
  char v82;
  const char *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 7);
  v59 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)"Temporal.PlainDateTime.prototype.toString called on value that's not a PlainDateTime", 85);
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6);
    v60 = *(double *)&v9;
    if (v11 != (JSC::JSGlobalObject *)10)
    {
      if (((unint64_t)v11 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v11 + 5) > 0x16u)
        goto LABEL_8;
      JSC::throwTypeError((unint64_t)this, (JSC::VM **)&v60, (uint64_t)"options argument is not an object or undefined", 47);
    }
  }
  v11 = 0;
LABEL_8:
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_9;
  v53 = *(_DWORD *)(v9 + 80);
  if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_9:
    if (!v11)
    {
LABEL_14:
      v17 = *(_DWORD *)(v10 + 16);
      v18 = *(_OWORD **)(v10 + 20);
      v19 = 2;
LABEL_33:
      JSC::ISO8601::temporalDateTimeToString(v17, v18, v19, a4, a5, a6, a7, a8, (int **)&v58);
      goto LABEL_34;
    }
    v12 = JSC::secondsStringPrecision((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    v14 = v13;
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_68;
    v54 = *(_DWORD *)(v9 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_68:
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 41952) + 2224);
      v60 = COERCE_DOUBLE("ceil");
      *(_QWORD *)&v61 = 5;
      v62 = 0;
      *(_QWORD *)&v63[0] = "floor";
      *(_QWORD *)&v63[1] = 6;
      v64 = 1;
      v65 = "expand";
      v66 = 7;
      v67 = 2;
      v68 = "trunc";
      v69 = 6;
      v70 = 3;
      v71 = "halfCeil";
      v72 = 9;
      v73 = 4;
      v74 = "halfFloor";
      v75 = 10;
      v76 = 5;
      v77 = "halfExpand";
      v78 = 11;
      v79 = 6;
      v80 = "halfTrunc";
      v81 = 10;
      v82 = 7;
      v83 = "halfEven";
      v84 = 9;
      v85 = 8;
      v16 = JSC::intlOption<JSC::LocaleMatcher>(this, (unsigned int *)v11, v15, (uint64_t)&v60, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 3);
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_13;
      v55 = *(_DWORD *)(v9 + 80);
      if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v9 + 16))
      {
LABEL_13:
        if (v12 == 2 && v16 == 3)
          goto LABEL_14;
        JSC::TemporalPlainTime::roundTime((uint64_t)&v60, *(_QWORD *)(v10 + 20), v14, v16, (double)HIDWORD(v14));
        v21 = JSC::TemporalPlainTime::toPlainTime((unint64_t)this, (JSC::JSGlobalObject *)&v60, v20);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_69;
        v56 = *(_DWORD *)(v9 + 80);
        if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v9 + 16))
        {
LABEL_69:
          v22 = v63[0];
          v23 = *(_DWORD *)(v10 + 16);
          v24 = (double)(v23 << 11 >> 11);
          if (!(v23 << 11))
            v24 = 0.0;
          v25 = (double)(v23 << 6 >> 27);
          v60 = v24;
          v61 = v25;
          v26 = (double)(v23 >> 26);
          v63[0] = v26;
          if (v22 != 0.0)
          {
            v27 = v63;
            v28 = v23 << 6;
            if (((int)v24 & 3) != 0)
            {
              v29 = 0;
            }
            else
            {
              HIDWORD(v30) = -1030792151 * (int)v24 + 85899344;
              LODWORD(v30) = HIDWORD(v30);
              if ((v30 >> 4) < 0xA3D70B)
              {
                v29 = 1;
              }
              else
              {
                HIDWORD(v31) = -1030792151 * (int)v24 + 85899344;
                LODWORD(v31) = HIDWORD(v31);
                v29 = (v31 >> 2) > 0x28F5C28;
              }
            }
            v32 = v28 >> 27;
            LOBYTE(v22) = JSC::ISO8601::daysInMonths[12 * v29 - 1 + v32];
            if (v26 >= (double)*(unint64_t *)&v22)
            {
              v63[0] = 1.0;
              if (v32 >= 0xC)
              {
                v61 = 1.0;
                v27 = &v60;
                v26 = v24;
              }
              else
              {
                v27 = &v61;
                v26 = v25;
              }
            }
            v33 = v26 + 1.0;
            if (v26 + 1.0 == 0.0)
              v33 = 0.0;
            *v27 = v33;
          }
          v34 = JSC::TemporalPlainDate::toPlainDate((unint64_t)this, (JSC::JSGlobalObject *)&v60, (const Duration *)a3);
          if (!*(_DWORD *)(v9 + 80))
            goto LABEL_32;
          v57 = *(_DWORD *)(v9 + 80);
          if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (!*(_QWORD *)(v9 + 16))
          {
LABEL_32:
            v17 = v34;
            v19 = v12 & 0xFFFFFFFF000000FFLL;
            v18 = (_OWORD *)v21;
            goto LABEL_33;
          }
        }
      }
    }
  }
  v58 = 0;
LABEL_34:
  v42 = JSC::jsString(v9, (JSC::VM *)&v58, (uint64_t)a3, a4, a5, a6, a7, a8);
  v43 = v58;
  v58 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  return v42;
}

uint64_t JSC::temporalPlainDateTimePrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Temporal.PlainDateTime.prototype.toJSON called on value that's not a PlainDateTime", 83);
  }
  JSC::ISO8601::temporalDateTimeToString(*(_DWORD *)(v9 + 16), *(_OWORD **)(v9 + 20), 2uLL, a4, a5, a6, a7, a8, (int **)&v34);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::temporalPlainDateTimePrototypeFuncToLocaleString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainDateTime::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Temporal.PlainDateTime.prototype.toLocaleString called on value that's not a PlainDateTime", 91);
  }
  JSC::ISO8601::temporalDateTimeToString(*(_DWORD *)(v9 + 16), *(_OWORD **)(v9 + 20), 2uLL, a4, a5, a6, a7, a8, (int **)&v34);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::temporalPlainDateTimePrototypeFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"Temporal.PlainDateTime.prototype.valueOf must not be called. To compare PlainDateTime values, use Temporal.PlainDateTime.compare", 129);
}

unint64_t JSC::temporalPlainTimeConstructorFuncFrom(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  int v25;
  uint64_t (*v26)(JSC::VM **);
  JSC::VM **v27;
  uint64_t v28;
  _BOOL4 v29;
  JSC::VM *v30;
  uint64_t v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_3;
  v11 = *((_QWORD *)a2 + 7);
  v30 = *(JSC::VM **)(this + 56);
  if (v11 == 10)
    goto LABEL_3;
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, &v30, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_3:
    v11 = 0;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = *(_DWORD *)(v10 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    {
      v28 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = v28;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
  v30 = (JSC::VM *)"constrain";
  v31 = 10;
  LOBYTE(v32) = 0;
  v33 = "reject";
  v34 = 7;
  v35 = 1;
  v13 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v11, v12, (uint64_t)&v30, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
  if (*(_DWORD *)(v10 + 80))
  {
    v25 = *(_DWORD *)(v10 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    {
      v29 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v13 = v29;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21 = 10;
    return JSC::TemporalPlainTime::from(this, v21, v13 | 0x100, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)a2 + 6);
  if ((v21 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::TemporalPlainTime::from(this, v21, v13 | 0x100, v15, v16, v17, v18, v19, v20);
  }
  v22 = *(_QWORD *)(this + 456);
  if ((v22 & 1) != 0)
  {
    v26 = *(uint64_t (**)(JSC::VM **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v27 = (JSC::VM **)(this - 16);
    else
      v27 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v30 = *v27;
    v31 = this;
    v32 = (char *)(this + 456);
    v22 = v26(&v30);
  }
  v30 = *(JSC::VM **)(v21 + 16);
  return JSC::TemporalPlainTime::create(v10, (JSC::VM *)v22, &v30, v15, v16, v17, v18, v19);
}

uint64_t JSC::temporalPlainTimeConstructorFuncCompare(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::TemporalPlainTime::from((uint64_t)this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v40 = *(_DWORD *)(v11 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v21 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v28 = JSC::TemporalPlainTime::from((uint64_t)this, v21, 0, v14, v15, v16, v17, v18, v20);
  if (*(_DWORD *)(v11 + 80))
  {
    v41 = *(_DWORD *)(v11 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v29 = *(_DWORD *)(v19 + 16);
  v30 = *(_DWORD *)(v28 + 16);
  if (v29 > v30)
    return 0xFFFE000000000001;
  if (v29 < *(_DWORD *)(v28 + 16))
    return 0xFFFE0000FFFFFFFFLL;
  if (BYTE1(v29) > BYTE1(v30))
    return 0xFFFE000000000001;
  if (BYTE1(v29) < BYTE1(v30))
    return 0xFFFE0000FFFFFFFFLL;
  v31 = BYTE2(v29);
  v32 = BYTE2(v30);
  if (v31 > v32)
    return 0xFFFE000000000001;
  if (v31 < v32)
    return 0xFFFE0000FFFFFFFFLL;
  v33 = *(_DWORD *)(v19 + 20);
  v34 = *(_DWORD *)(v28 + 20);
  if ((v33 & 0x3FF) > (v34 & 0x3FF))
    return 0xFFFE000000000001;
  if ((v33 & 0x3FF) < (v34 & 0x3FF))
    return 0xFFFE0000FFFFFFFFLL;
  v36 = (v33 >> 10) & 0x3FF;
  v37 = (v34 >> 10) & 0x3FF;
  if (v36 > v37)
    return 0xFFFE000000000001;
  if (v36 < v37)
    return 0xFFFE0000FFFFFFFFLL;
  v38 = (v33 >> 20) & 0x3FF;
  v39 = (v34 >> 20) & 0x3FF;
  if (v38 > v39)
    return 0xFFFE000000000001;
  if (v38 >= v39)
    return 0xFFFE000000000000;
  else
    return 0xFFFE0000FFFFFFFFLL;
}

unint64_t JSC::temporalPlainTimePrototypeFuncAdd(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  BOOL v48;
  double v49;
  double v50;
  double v51;
  double v52;
  const Duration *v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v66;
  int v67;
  uint64_t (*v68)(uint64_t *);
  uint64_t *v69;
  double v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  unint64_t v82;
  __int128 v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  JSC::VM *v90;

  v9 = *(_QWORD *)(this + 56);
  v90 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v90, (uint64_t)"Temporal.PlainTime.prototype.add called on value that's not a PlainTime", 72);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toISO8601Duration(this, v11, (uint64_t)a3, a4, a5, a6, a7, a8, &v83);
  if (*(_DWORD *)(v9 + 80))
  {
    v66 = *(_DWORD *)(v9 + 80);
    if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v18 = *(_QWORD *)(v10 + 16);
  v19 = v84 + (double)v18;
  v20 = v85 + (double)BYTE1(v18);
  v21 = v86 + (double)BYTE2(v18);
  v22 = v87 + (double)(WORD2(v18) & 0x3FF);
  v23 = v89 + (double)((v18 >> 52) & 0x3FF);
  v24 = v88 + (double)((v18 >> 42) & 0x3FF) + floor(v23 / 1000.0);
  v25 = fmod(v23, 1000.0);
  v26 = v25 == 0.0;
  if (v25 >= 0.0)
    v27 = -0.0;
  else
    v27 = 1000.0;
  v28 = v25 + v27;
  if (v26)
    v28 = 0.0;
  v71 = v28;
  v29 = v22 + floor(v24 / 1000.0);
  v30 = fmod(v24, 1000.0);
  v31 = v30 == 0.0;
  if (v30 >= 0.0)
    v32 = -0.0;
  else
    v32 = 1000.0;
  v33 = v30 + v32;
  if (v31)
    v33 = 0.0;
  v70 = v33;
  v34 = v21 + floor(v29 / 1000.0);
  v35 = fmod(v29, 1000.0);
  v36 = v35 == 0.0;
  if (v35 >= 0.0)
    v37 = -0.0;
  else
    v37 = 1000.0;
  v38 = v35 + v37;
  if (v36)
    v39 = 0.0;
  else
    v39 = v38;
  v40 = v20 + floor(v34 / 60.0);
  v41 = fmod(v34, 60.0);
  v42 = v41 == 0.0;
  if (v41 >= 0.0)
    v43 = -0.0;
  else
    v43 = 60.0;
  v44 = v41 + v43;
  if (v42)
    v45 = 0.0;
  else
    v45 = v44;
  v46 = v19 + floor(v40 / 60.0);
  v47 = fmod(v40, 60.0);
  v48 = v47 == 0.0;
  if (v47 >= 0.0)
    v49 = -0.0;
  else
    v49 = 60.0;
  v50 = v47 + v49;
  if (v48)
    v51 = 0.0;
  else
    v51 = v50;
  v52 = floor(v46 / 24.0);
  v54 = fmod(v46, 24.0);
  v55 = v54 == 0.0;
  if (v54 >= 0.0)
    v56 = -0.0;
  else
    v56 = 24.0;
  v73 = 0;
  v74 = 0;
  v57 = v54 + v56;
  if (v55)
    v57 = 0.0;
  v72 = 0;
  v75 = v52;
  v76 = v57;
  v77 = v51;
  v78 = v45;
  v79 = v39;
  v80 = v70;
  v81 = v71;
  v82 = JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)&v72, v53);
  if (*(_DWORD *)(v9 + 80))
  {
    v67 = *(_DWORD *)(v9 + 80);
    if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v58, v59, v60, v61, v62, v63);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v64 = *(_QWORD *)(this + 456);
  if ((v64 & 1) != 0)
  {
    v68 = *(uint64_t (**)(uint64_t *))(v64 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v69 = (uint64_t *)(this - 16);
    else
      v69 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v72 = *v69;
    v73 = this;
    v74 = (char *)(this + 456);
    v64 = v68(&v72);
  }
  return JSC::TemporalPlainTime::create(v9, (JSC::VM *)v64, &v82, v59, v60, v61, v62, v63);
}

unint64_t JSC::temporalPlainTimePrototypeFuncSubtract(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  long double v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  BOOL v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  BOOL v54;
  double v55;
  double v56;
  double v57;
  double v58;
  const Duration *v59;
  double v60;
  BOOL v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v72;
  int v73;
  uint64_t (*v74)(uint64_t *);
  uint64_t *v75;
  double v76;
  double v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  unint64_t v88;
  __int128 v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  JSC::VM *v96;

  v9 = *(_QWORD *)(this + 56);
  v96 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v96, (uint64_t)"Temporal.PlainTime.prototype.subtract called on value that's not a PlainTime", 77);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  JSC::TemporalDuration::toISO8601Duration(this, v11, (uint64_t)a3, a4, a5, a6, a7, a8, &v89);
  if (*(_DWORD *)(v9 + 80))
  {
    v72 = *(_DWORD *)(v9 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v18 = *(_QWORD *)(v10 + 16);
  v19 = v90;
  v20 = v91;
  v21 = v92;
  v22 = v93;
  v23 = v94;
  v24 = v95;
  if (v90 != 0.0)
    v19 = -v90;
  if (v91 != 0.0)
    v20 = -v91;
  if (v92 != 0.0)
    v21 = -v92;
  if (v93 != 0.0)
    v22 = -v93;
  if (v94 != 0.0)
    v23 = -v94;
  if (v95 != 0.0)
    v24 = -v95;
  v25 = v19 + (double)*(_QWORD *)(v10 + 16);
  v26 = v20 + (double)BYTE1(v18);
  v27 = v21 + (double)BYTE2(v18);
  v28 = v22 + (double)(HIDWORD(*(_QWORD *)(v10 + 16)) & 0x3FF);
  v29 = v24 + (double)((v18 >> 52) & 0x3FF);
  v30 = v23 + (double)((v18 >> 42) & 0x3FF) + floor(v29 / 1000.0);
  v31 = fmod(v29, 1000.0);
  v32 = v31 == 0.0;
  if (v31 >= 0.0)
    v33 = -0.0;
  else
    v33 = 1000.0;
  v34 = v31 + v33;
  if (v32)
    v34 = 0.0;
  v77 = v34;
  v35 = v28 + floor(v30 / 1000.0);
  v36 = fmod(v30, 1000.0);
  v37 = v36 == 0.0;
  if (v36 >= 0.0)
    v38 = -0.0;
  else
    v38 = 1000.0;
  v39 = v36 + v38;
  if (v37)
    v39 = 0.0;
  v76 = v39;
  v40 = v27 + floor(v35 / 1000.0);
  v41 = fmod(v35, 1000.0);
  v42 = v41 == 0.0;
  if (v41 >= 0.0)
    v43 = -0.0;
  else
    v43 = 1000.0;
  v44 = v41 + v43;
  if (v42)
    v45 = 0.0;
  else
    v45 = v44;
  v46 = v26 + floor(v40 / 60.0);
  v47 = fmod(v40, 60.0);
  v48 = v47 == 0.0;
  if (v47 >= 0.0)
    v49 = -0.0;
  else
    v49 = 60.0;
  v50 = v47 + v49;
  if (v48)
    v51 = 0.0;
  else
    v51 = v50;
  v52 = v25 + floor(v46 / 60.0);
  v53 = fmod(v46, 60.0);
  v54 = v53 == 0.0;
  if (v53 >= 0.0)
    v55 = -0.0;
  else
    v55 = 60.0;
  v56 = v53 + v55;
  if (v54)
    v57 = 0.0;
  else
    v57 = v56;
  v58 = floor(v52 / 24.0);
  v60 = fmod(v52, 24.0);
  v61 = v60 == 0.0;
  if (v60 >= 0.0)
    v62 = -0.0;
  else
    v62 = 24.0;
  v79 = 0;
  v80 = 0;
  v63 = v60 + v62;
  if (v61)
    v63 = 0.0;
  v78 = 0;
  v81 = v58;
  v82 = v63;
  v83 = v57;
  v84 = v51;
  v85 = v45;
  v86 = v76;
  v87 = v77;
  v88 = JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)&v78, v59);
  if (*(_DWORD *)(v9 + 80))
  {
    v73 = *(_DWORD *)(v9 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v64, v65, v66, v67, v68, v69);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v70 = *(_QWORD *)(this + 456);
  if ((v70 & 1) != 0)
  {
    v74 = *(uint64_t (**)(uint64_t *))(v70 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v75 = (uint64_t *)(this - 16);
    else
      v75 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v78 = *v75;
    v79 = this;
    v80 = (char *)(this + 456);
    v70 = v74(&v78);
  }
  return JSC::TemporalPlainTime::create(v9, (JSC::VM *)v70, &v88, v65, v66, v67, v68, v69);
}

unint64_t JSC::temporalPlainTimePrototypeFuncWith(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unsigned int v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t (*v45)(double *);
  double *v46;
  int v47;
  int v48;
  JSC::VM *v49;
  double v50;
  uint64_t v51;
  char *v52;
  char v53;
  double v54;
  char v55;
  double v56;
  char v57;
  double v58;
  char v59;
  double v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v49 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v19 = "Temporal.PlainTime.prototype.with called on value that's not a PlainTime";
    v20 = 73;
    return JSC::throwTypeError(this, &v49, (uint64_t)v19, v20);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = (JSC::JSObject *)*((_QWORD *)a2 + 6), ((unint64_t)v11 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v11 + 5) <= 0x16u)
  {
    v19 = "First argument to Temporal.PlainTime.prototype.with must be an object";
    v20 = 70;
    return JSC::throwTypeError(this, &v49, (uint64_t)v19, v20);
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 7);
  JSC::rejectObjectWithCalendarOrTimeZone((JSC *)this, *((JSC::JSGlobalObject **)a2 + 6), a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v42 = *(_DWORD *)(v9 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_66;
  }
  JSC::TemporalPlainTime::toPartialTime((JSC::TemporalPlainTime *)&v50, this, v11, 0);
  if (*(_DWORD *)(v9 + 80))
  {
    v44 = *(_DWORD *)(v9 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_66;
  }
  *(_QWORD *)&v62 = *(_QWORD *)(this + 56);
  if (v12 == 10)
    goto LABEL_11;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    JSC::throwTypeError(this, (JSC::VM **)&v62, (uint64_t)"options argument is not an object or undefined", 47);
LABEL_11:
    v12 = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_80;
  v47 = *(_DWORD *)(v9 + 80);
  if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_80:
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2104);
    *(_QWORD *)&v62 = "constrain";
    *((_QWORD *)&v62 + 1) = 10;
    LOBYTE(v63) = 0;
    *((_QWORD *)&v63 + 1) = "reject";
    v64 = 7;
    LOBYTE(v65) = 1;
    v23 = JSC::intlOption<JSC::TemporalOverflow>(this, (unsigned int *)v12, v22, (uint64_t)&v62, 2, (unint64_t)"overflow must be either \"constrain\" or \"reject\"", 48, 0);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_18;
    v48 = *(_DWORD *)(v9 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_18:
      v62 = 0u;
      v63 = 0u;
      v26 = v50;
      LOBYTE(v24) = *(_BYTE *)(v10 + 16);
      v27 = (double)v24;
      if (!(_BYTE)v51)
        v26 = v27;
      if (v26 == 0.0)
        v26 = 0.0;
      v64 = *(_QWORD *)&v26;
      v28 = *(double *)&v52;
      LOBYTE(v25) = *(_BYTE *)(v10 + 17);
      v29 = (double)v25;
      if (!v53)
        v28 = v29;
      if (v28 == 0.0)
        v28 = 0.0;
      v65 = v28;
      v30 = v54;
      LOBYTE(v29) = *(_BYTE *)(v10 + 18);
      v31 = (double)*(unint64_t *)&v29;
      if (!v55)
        v30 = v31;
      if (v30 == 0.0)
        v30 = 0.0;
      v66 = v30;
      v32 = *(_DWORD *)(v10 + 20);
      v33 = v56;
      if (!v57)
        v33 = (double)(*(_DWORD *)(v10 + 20) & 0x3FF);
      if (v33 == 0.0)
        v33 = 0.0;
      v34 = v58;
      if (!v59)
        v34 = (double)((v32 >> 10) & 0x3FF);
      if (v34 == 0.0)
        v34 = 0.0;
      v67 = v33;
      v68 = v34;
      v35 = (double)((v32 >> 20) & 0x3FF);
      if (v61)
        v35 = v60;
      if (v35 == 0.0)
        v35 = 0.0;
      v69 = v35;
      v36 = JSC::TemporalPlainTime::regulateTime(this, (double *)&v62, (const Duration *)v23);
      v37 = (int8x16_t)vdupq_n_s64(v36);
      v38 = vandq_s8(v37, (int8x16_t)xmmword_199159970);
      v39 = vandq_s8(v37, (int8x16_t)xmmword_199159980);
      goto LABEL_43;
    }
  }
LABEL_66:
  LOBYTE(v36) = 0;
  v39 = 0uLL;
  v38 = 0uLL;
LABEL_43:
  v40 = vorrq_s8(vandq_s8(v39, (int8x16_t)xmmword_1991599A0), vandq_s8(v38, (int8x16_t)xmmword_199159990));
  *(_QWORD *)&v62 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)) | v36;
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_44;
  v43 = *(_DWORD *)(v9 + 80);
  if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v9 + 16))
    return 0;
LABEL_44:
  v41 = *(_QWORD *)(this + 456);
  if ((v41 & 1) != 0)
  {
    v45 = *(uint64_t (**)(double *))(v41 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v46 = (double *)(this - 16);
    else
      v46 = (double *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v50 = *v46;
    v51 = this;
    v52 = (char *)(this + 456);
    v41 = v45(&v50);
  }
  return JSC::TemporalPlainTime::create(v9, (JSC::VM *)v41, &v62, v14, v15, v16, v17, v18);
}

unint64_t JSC::temporalPlainTimePrototypeFuncUntil(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int DifferenceOptions;
  double v31;
  __n128 v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  uint64_t (*v38)(_QWORD *, __n128);
  _QWORD *v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  JSC::VM *v46;
  _QWORD v47[3];

  v10 = *(_QWORD *)(this + 56);
  v46 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v46, (uint64_t)"Temporal.PlainTime.prototype.until called on value that's not a PlainTime", 74);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v20 = JSC::TemporalPlainTime::from(this, v13, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v35 = *(_DWORD *)(v10 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v22 = *(_QWORD *)(this + 56);
  DifferenceOptions = JSC::extractDifferenceOptions(this, v21, 2, 9, 4, v17, v18, v19);
  if (!*(_DWORD *)(v22 + 80))
    goto LABEL_9;
  v36 = *(_DWORD *)(v22 + 80);
  if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
  {
    v40 = v23;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v24, v25, v26, v27, v28, v29);
    v23 = v40;
  }
  if (*(_QWORD *)(v22 + 16))
  {
    v32 = 0uLL;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
  }
  else
  {
LABEL_9:
    v31 = v23;
    JSC::differenceTime((uint64_t)&v41, *(const Duration **)(v11 + 16), *(_QWORD *)(v20 + 16));
    v41 = 0u;
    v42 = 0u;
    JSC::TemporalDuration::round((double *)&v41, DifferenceOptions, BYTE2(DifferenceOptions), v31);
    v32.n128_f64[0] = JSC::TemporalDuration::balance((uint64_t)&v41, BYTE1(DifferenceOptions));
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v37 = *(_DWORD *)(v10 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v33 = *(_QWORD *)(this + 424);
  if ((v33 & 1) != 0)
  {
    v38 = *(uint64_t (**)(_QWORD *, __n128))(v33 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v39 = (_QWORD *)(this - 16);
    else
      v39 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v47[0] = *v39;
    v47[1] = this;
    v47[2] = this + 424;
    v33 = v38(v47, v32);
  }
  return JSC::TemporalDuration::tryCreateIfValid(this, (JSC::ISO8601 *)&v41, v33);
}

unint64_t JSC::temporalPlainTimePrototypeFuncSince(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t DifferenceOptions;
  double v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  double v34;
  __n128 v35;
  unint64_t v36;
  int v38;
  int v39;
  int v40;
  uint64_t (*v41)(_QWORD *, __n128);
  _QWORD *v42;
  double v43;
  int8x16_t v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  JSC::VM *v49;
  _QWORD v50[3];

  v10 = *(_QWORD *)(this + 56);
  v49 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v49, (uint64_t)"Temporal.PlainTime.prototype.since called on value that's not a PlainTime", 74);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v20 = JSC::TemporalPlainTime::from(this, v13, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v38 = *(_DWORD *)(v10 + 80);
    if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v21 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v22 = *(_QWORD *)(this + 56);
  DifferenceOptions = JSC::extractDifferenceOptions(this, v21, 2, 9, 4, v17, v18, v19);
  if (!*(_DWORD *)(v22 + 80))
    goto LABEL_9;
  v39 = *(_DWORD *)(v22 + 80);
  if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
  {
    v43 = v23;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v24, v25, v26, v27, v28, v29);
    v23 = v43;
  }
  if (*(_QWORD *)(v22 + 16))
  {
    v35 = 0uLL;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
  }
  else
  {
LABEL_9:
    v31 = v23;
    if (((0x33u >> SBYTE2(DifferenceOptions)) & 1) != 0)
      v32 = 0x40501010001uLL >> ((DifferenceOptions >> 13) & 0xF8);
    else
      v32 = BYTE2(DifferenceOptions);
    if (BYTE2(DifferenceOptions) <= 5u)
      v33 = v32;
    else
      v33 = BYTE2(DifferenceOptions);
    JSC::differenceTime((uint64_t)&v44, *(const Duration **)(v20 + 16), *(_QWORD *)(v11 + 16));
    v46 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v46), v46, (int8x16_t)vnegq_f64((float64x2_t)v46));
    v47 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v47), v47, (int8x16_t)vnegq_f64((float64x2_t)v47));
    v48 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v48), v48, (int8x16_t)vnegq_f64((float64x2_t)v48));
    v44 = 0u;
    v45 = 0u;
    JSC::TemporalDuration::round((double *)v44.i64, DifferenceOptions, v33, v31);
    v34 = *(double *)&v45;
    if (*(double *)&v45 != 0.0)
      v34 = -*(double *)&v45;
    v44 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v44), v44, (int8x16_t)vnegq_f64((float64x2_t)v44));
    v45 = *(unint64_t *)&v34;
    v46 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v46), v46, (int8x16_t)vnegq_f64((float64x2_t)v46));
    v47 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v47), v47, (int8x16_t)vnegq_f64((float64x2_t)v47));
    v48 = vbslq_s8((int8x16_t)vceqzq_f64((float64x2_t)v48), v48, (int8x16_t)vnegq_f64((float64x2_t)v48));
    v35.n128_f64[0] = JSC::TemporalDuration::balance((uint64_t)&v44, BYTE1(DifferenceOptions));
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v40 = *(_DWORD *)(v10 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v36 = *(_QWORD *)(this + 424);
  if ((v36 & 1) != 0)
  {
    v41 = *(uint64_t (**)(_QWORD *, __n128))(v36 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v42 = (_QWORD *)(this - 16);
    else
      v42 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v50[0] = *v42;
    v50[1] = this;
    v50[2] = this + 424;
    v36 = v41(v50, v35);
  }
  return JSC::TemporalDuration::tryCreateIfValid(this, (JSC::ISO8601 *)&v44, v36);
}

unint64_t JSC::temporalPlainTimePrototypeFuncRound(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unsigned int v16;
  int *v17;
  const char *v18;
  unint64_t v19;
  unsigned __int16 v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned __int16 v30;
  unint64_t v31;
  JSC::Heap **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  JSC::Exception *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  JSC::Heap **v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  JSC::Exception *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  double v63;
  const Duration *v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t (*v92)(JSC::VM **);
  JSC::VM **v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t (*v99)(JSC::VM **);
  JSC::VM **v100;
  uint64_t (*v101)(JSC::VM **);
  JSC::VM **v102;
  double v103;
  JSC::VM *v104;
  WTF::StringImpl *v105;
  JSC::VM *v106;
  uint64_t v107;
  char *v108;
  const char *v109;
  uint64_t v110;
  char v111;
  const char *v112;
  uint64_t v113;
  char v114;
  const char *v115;
  uint64_t v116;
  char v117;
  const char *v118;
  uint64_t v119;
  char v120;
  const char *v121;
  uint64_t v122;
  char v123;
  const char *v124;
  uint64_t v125;
  char v126;
  const char *v127;
  uint64_t v128;
  char v129;
  const char *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v104 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = "Temporal.PlainTime.prototype.round called on value that's not a PlainTime";
    v14 = 74;
    return JSC::throwTypeError(this, &v104, (uint64_t)v13, v14);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = "Temporal.PlainTime.prototype.round requires an options argument";
    v14 = 64;
    return JSC::throwTypeError(this, &v104, (uint64_t)v13, v14);
  }
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v106 = (JSC::VM *)v10;
LABEL_31:
    JSC::throwTypeError(this, &v106, (uint64_t)"options argument is not an object or undefined", 47);
    v12 = 0;
LABEL_32:
    if (*(_DWORD *)(v10 + 80))
    {
      v94 = *(_DWORD *)(v10 + 80);
      if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_57;
    }
    LODWORD(v106) = 50462976;
    v30 = JSC::temporalSmallestUnit(this, (unsigned int *)v12, (uint64_t)&v106, 4, a5, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80))
    {
      v95 = *(_DWORD *)(v10 + 80);
      if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_57;
    }
    if (v30 <= 0xFFu)
    {
      v47 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v47 = 0x2A00000002;
      *(_QWORD *)(v47 + 8) = "Cannot round without a smallestUnit option";
      *(_DWORD *)(v47 + 16) = 4;
      v105 = (WTF::StringImpl *)v47;
      v48 = *(_QWORD *)(this + 128);
      v49 = *(JSC::Heap ***)(this + 56);
      if ((v48 & 1) != 0)
      {
        v101 = *(uint64_t (**)(JSC::VM **))(v48 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v102 = (JSC::VM **)(this - 16);
        else
          v102 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v106 = *v102;
        v107 = this;
        v108 = (char *)(this + 128);
        v48 = v101(&v106);
      }
      v50 = JSC::ErrorInstance::create(v49, v48, &v105, 0, 0, 0, 2, 1);
      v57 = (JSC::Exception *)v50;
      if ((v50 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C)))
      {
        v57 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v50, 0, v51, v52, v53, v54, v55);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v57, v56, v51, v52, v53, v54, v55);
      v58 = v105;
      v105 = 0;
      if (!v58)
        goto LABEL_57;
      if (*(_DWORD *)v58 == 2)
        goto LABEL_56;
      *(_DWORD *)v58 -= 2;
LABEL_57:
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      goto LABEL_58;
    }
    goto LABEL_44;
  }
  v16 = *(unsigned __int8 *)(v12 + 5);
  if (v16 != 2)
  {
    v106 = (JSC::VM *)v10;
    if (v16 > 0x16)
      goto LABEL_32;
    goto LABEL_31;
  }
  v17 = *(int **)(v12 + 8);
  if ((v17 & 1) != 0)
  {
    v17 = *JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v17)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v17)
LABEL_11:
    *v17 += 2;
LABEL_12:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_13;
  v96 = *(_DWORD *)(v10 + 80);
  if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_13:
    if (v17)
    {
      v18 = (const char *)*((_QWORD *)v17 + 1);
      v19 = v17[1] | ((unint64_t)((v17[4] >> 2) & 1) << 32);
    }
    else
    {
      v18 = 0;
      v19 = 0x100000000;
    }
    v20 = JSC::temporalUnitType(v18, v19);
    if (v20 <= 0xFFu)
    {
      v28 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v28 = 0x2800000002;
      v29 = "smallestUnit is an invalid Temporal unit";
LABEL_21:
      *(_QWORD *)(v28 + 8) = v29;
      *(_DWORD *)(v28 + 16) = 4;
      v105 = (WTF::StringImpl *)v28;
      v31 = *(_QWORD *)(this + 128);
      v32 = *(JSC::Heap ***)(this + 56);
      if ((v31 & 1) != 0)
      {
        v99 = *(uint64_t (**)(JSC::VM **))(v31 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v100 = (JSC::VM **)(this - 16);
        else
          v100 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v106 = *v100;
        v107 = this;
        v108 = (char *)(this + 128);
        v31 = v99(&v106);
      }
      v33 = JSC::ErrorInstance::create(v32, v31, &v105, 0, 0, 0, 2, 1);
      v40 = (JSC::Exception *)v33;
      if ((v33 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C)))
      {
        v40 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v33, 0, v34, v35, v36, v37, v38);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v40, v39, v34, v35, v36, v37, v38);
      v41 = v105;
      v105 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::~StringImpl(v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
        }
        else
        {
          *(_DWORD *)v41 -= 2;
        }
      }
      goto LABEL_27;
    }
    LOBYTE(v30) = v20;
    if (v20 <= 3u)
    {
      v28 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v28 = 0x2100000002;
      v29 = "smallestUnit is a disallowed unit";
      goto LABEL_21;
    }
    if (v17)
    {
      if (*v17 != 2)
      {
        v12 = 0;
        *v17 -= 2;
        goto LABEL_44;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    v12 = 0;
LABEL_44:
    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 41952) + 2224);
    v106 = (JSC::VM *)"ceil";
    v107 = 5;
    LOBYTE(v108) = 0;
    v109 = "floor";
    v110 = 6;
    v111 = 1;
    v112 = "expand";
    v113 = 7;
    v114 = 2;
    v115 = "trunc";
    v116 = 6;
    v117 = 3;
    v118 = "halfCeil";
    v119 = 9;
    v120 = 4;
    v121 = "halfFloor";
    v122 = 10;
    v123 = 5;
    v124 = "halfExpand";
    v125 = 11;
    v126 = 6;
    v127 = "halfTrunc";
    v128 = 10;
    v129 = 7;
    v130 = "halfEven";
    v131 = 9;
    v132 = 8;
    v60 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)this, (unsigned int *)v12, v59, (uint64_t)&v106, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 6);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_114;
    v97 = *(_DWORD *)(v10 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v10 + 16))
    {
LABEL_114:
      if (v30 >= 4u)
      {
        if (v30 == 4)
          v61 = 0x4038000000000000;
        else
          v61 = v30 >= 7u ? 0x408F400000000000 : 0x404E000000000000;
        v62 = 1;
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
      v63 = JSC::temporalRoundingIncrement(this, (unsigned int *)v12, v61, v62, 0, a6, a7, a8);
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_54;
      v98 = *(_DWORD *)(v10 + 80);
      if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
      {
        v103 = v63;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v63 = v103;
      }
      if (!*(_QWORD *)(v10 + 16))
      {
LABEL_54:
        JSC::TemporalPlainTime::roundTime((uint64_t)&v106, *(_QWORD *)(v11 + 16), v30, v60, v63);
        v65 = JSC::TemporalPlainTime::toPlainTime(this, (JSC::JSGlobalObject *)&v106, v64);
        v45 = v65 & 0x3FFFFFFF00000000;
        v46 = v65 & 0xFF000000;
        v44 = v65 & 0xFF0000;
        v43 = (unsigned __int16)v65 & 0xFF00;
        v42 = v65;
        goto LABEL_58;
      }
    }
    goto LABEL_57;
  }
LABEL_27:
  if (!v17)
    goto LABEL_57;
  if (*v17 == 2)
  {
    v58 = (WTF::StringImpl *)v17;
LABEL_56:
    WTF::StringImpl::~StringImpl(v58, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    goto LABEL_57;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  *v17 -= 2;
LABEL_58:
  v105 = (WTF::StringImpl *)(v43 | v42 | v44 | v45 | v46);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_59;
  v91 = *(_DWORD *)(v10 + 80);
  if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_59:
  v74 = *(_QWORD *)(this + 456);
  if ((v74 & 1) != 0)
  {
    v92 = *(uint64_t (**)(JSC::VM **))(v74 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v93 = (JSC::VM **)(this - 16);
    else
      v93 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v106 = *v93;
    v107 = this;
    v108 = (char *)(this + 456);
    v74 = v92(&v106);
  }
  return JSC::TemporalPlainTime::create(v10, (JSC::VM *)v74, &v105, a4, a5, a6, a7, a8);
}

uint64_t JSC::temporalPlainTimePrototypeFuncEquals(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  JSC::VM *v23;

  v9 = *((_QWORD *)this + 7);
  v23 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"Temporal.PlainTime.prototype.equals called on value that's not a PlainTime", 75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v12 = JSC::TemporalPlainTime::from((uint64_t)this, v11, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 80))
  {
    v21 = *(_DWORD *)(v9 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    {
      v22 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v22;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((*(_DWORD *)(v10 + 16) & 0xFFFFFF) != (*(_DWORD *)(v12 + 16) & 0xFFFFFF))
    return 6;
  v19 = *(_QWORD *)(v12 + 16) ^ *(_QWORD *)(v10 + 16);
  if ((v19 & 0xFFFFF00000000) != 0)
    return 6;
  if ((v19 & 0x3FF0000000000000) != 0)
    return 6;
  return 7;
}

unint64_t JSC::temporalPlainTimePrototypeFuncGetISOFields(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t result;
  uint64_t (*v48)(uint64_t *);
  uint64_t *v49;
  unint64_t v50;
  JSC *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC *v58;
  JSC::VM *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = *((_QWORD *)this + 7);
  v59 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)"Temporal.PlainTime.prototype.getISOFields called on value that's not a PlainTime", 81);
  }
  v10 = *(_QWORD *)(v8 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase >= *(_QWORD *)(v10 + 32))
    {
      SlowCase = *(_QWORD *)(v10 + 40);
      if ((SlowCase & 1) != 0)
      {
        v51 = this;
        v52 = *((_QWORD *)a2 + 5);
        v53 = *(unsigned int *)(v10 + 60);
        JSC::sanitizeStackForVM((JSC *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v54 = v53;
        v9 = v52;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v8 + 192, v54, 0, 0, v55, v56, v57);
        this = v51;
        goto LABEL_6;
      }
      v50 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v50);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v50;
    }
    *(_QWORD *)(v10 + 24) = SlowCase + v11;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    v13.n128_u64[1] = 0;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v8 + 755))
      __dmb(0xAu);
    v14 = v8 + 41952;
    v15 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 968);
    v16 = *(_QWORD *)(v9 + 24);
    if ((v16 & 1) != 0)
    {
      v48 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v49 = (uint64_t *)(v9 - 16);
      else
        v49 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v60 = *v49;
      v61 = v9;
      v62 = v9 + 24;
      v16 = v48(&v60);
    }
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v13.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v15, v16, 0, (uint64_t)&v60, a7, a8, v13);
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 1592);
    v18 = *(unsigned __int8 *)(v9 + 16) | 0xFFFE000000000000;
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v19.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v17, v18, 0, (uint64_t)&v60, v20, v21, v19);
    v22 = *(_QWORD *)(*(_QWORD *)v14 + 1600);
    v23 = ((unint64_t)*(unsigned int *)(v9 + 20) >> 10) & 0x3FF | 0xFFFE000000000000;
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v24.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v22, v23, 0, (uint64_t)&v60, v25, v26, v24);
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 1608);
    v28 = *(_DWORD *)(v9 + 20) & 0x3FFLL | 0xFFFE000000000000;
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v29.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v27, v28, 0, (uint64_t)&v60, v30, v31, v29);
    v32 = *(_QWORD *)(*(_QWORD *)v14 + 1616);
    v33 = *(unsigned __int8 *)(v9 + 17) | 0xFFFE000000000000;
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v34.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v32, v33, 0, (uint64_t)&v60, v35, v36, v34);
    v37 = *(_QWORD *)(*(_QWORD *)v14 + 1632);
    v38 = *(unsigned int *)(v9 + 20);
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v39.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v37, (v38 >> 20) & 0x3FF | 0xFFFE000000000000, 0, (uint64_t)&v60, v40, v41, v39);
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 1640);
    v43 = *(unsigned __int8 *)(v9 + 18) | 0xFFFE000000000000;
    v60 = 0;
    v61 = SlowCase;
    v62 = 0x1000000FFFFFFFFLL;
    v44.n128_u64[0] = 0x100000001000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v42, v43, 0, (uint64_t)&v60, v45, v46, v44);
    return SlowCase;
  }
  v58 = this;
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v8 + 14936, (JSC *)v8, 0x40uLL, 0, a5, a6, a7, a8);
  this = v58;
  if (SlowCase)
    goto LABEL_6;
  result = 110;
  __break(0xC471u);
  return result;
}

unint64_t JSC::temporalPlainTimePrototypeFuncToPlainDateTime(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  uint64_t (*v23)(_QWORD *);
  _QWORD *v24;
  int v25;
  JSC::VM *v26;
  _QWORD v27[3];

  v10 = *(_QWORD *)(this + 56);
  v26 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v26, (uint64_t)"Temporal.PlainTime.prototype.toPlainDateTime called on value that's not a PlainTime", 84);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v19 = JSC::TemporalPlainDate::from(this, v12, 0, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v22 = *(_DWORD *)(v10 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v20 = *(_QWORD *)(this + 448);
  if ((v20 & 1) != 0)
  {
    v23 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v24 = (_QWORD *)(this - 16);
    v27[0] = *v24;
    v27[1] = this;
    v27[2] = this + 448;
    v20 = v23(v27);
  }
  v25 = *(_DWORD *)(v19 + 16);
  v27[0] = *(_QWORD *)(v11 + 16);
  return JSC::TemporalPlainDateTime::tryCreateIfValid(this, (JSC::VM *)v20, &v25, (unsigned __int8 *)v27, v15, v16, v17, v18);
}

uint64_t JSC::temporalPlainTimePrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  const Duration *v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  JSC::VM *v45[2];
  char v46;
  const char *v47;
  uint64_t v48;
  char v49;
  const char *v50;
  uint64_t v51;
  char v52;
  const char *v53;
  uint64_t v54;
  char v55;
  const char *v56;
  uint64_t v57;
  char v58;
  const char *v59;
  uint64_t v60;
  char v61;
  const char *v62;
  uint64_t v63;
  char v64;
  const char *v65;
  uint64_t v66;
  char v67;
  const char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 7);
  v44 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v44, (uint64_t)"Temporal.PlainTime.prototype.toString called on value that's not a PlainTime", 77);
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6);
    v45[0] = (JSC::VM *)v9;
    if (v11 != (JSC::JSGlobalObject *)10)
    {
      if (((unint64_t)v11 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v11 + 5) > 0x16u)
        goto LABEL_8;
      JSC::throwTypeError((unint64_t)this, v45, (uint64_t)"options argument is not an object or undefined", 47);
    }
  }
  v11 = 0;
LABEL_8:
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_9;
  v39 = *(_DWORD *)(v9 + 80);
  if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_9:
    if (!v11)
    {
LABEL_14:
      v17 = *(_QWORD *)(v10 + 16);
      v18 = 2;
LABEL_17:
      JSC::ISO8601::temporalTimeToString(v17, v18, (uint64_t)a3, a4, a5, a6, a7, a8, &v43);
      goto LABEL_18;
    }
    v12 = JSC::secondsStringPrecision((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    v14 = v13;
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_47;
    v40 = *(_DWORD *)(v9 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_47:
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 41952) + 2224);
      v45[0] = (JSC::VM *)"ceil";
      v45[1] = (JSC::VM *)5;
      v46 = 0;
      v47 = "floor";
      v48 = 6;
      v49 = 1;
      v50 = "expand";
      v51 = 7;
      v52 = 2;
      v53 = "trunc";
      v54 = 6;
      v55 = 3;
      v56 = "halfCeil";
      v57 = 9;
      v58 = 4;
      v59 = "halfFloor";
      v60 = 10;
      v61 = 5;
      v62 = "halfExpand";
      v63 = 11;
      v64 = 6;
      v65 = "halfTrunc";
      v66 = 10;
      v67 = 7;
      v68 = "halfEven";
      v69 = 9;
      v70 = 8;
      v16 = JSC::intlOption<JSC::LocaleMatcher>(this, (unsigned int *)v11, v15, (uint64_t)v45, 9, (unint64_t)"roundingMode must be \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 123, 3);
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_13;
      v41 = *(_DWORD *)(v9 + 80);
      if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v9 + 16))
      {
LABEL_13:
        if (v12 == 2 && v16 == 3)
          goto LABEL_14;
        JSC::TemporalPlainTime::roundTime((uint64_t)v45, *(_QWORD *)(v10 + 16), v14, v16, (double)HIDWORD(v14));
        v20 = JSC::TemporalPlainTime::toPlainTime((unint64_t)this, (JSC::JSGlobalObject *)v45, v19);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_16;
        v42 = *(_DWORD *)(v9 + 80);
        if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v9 + 16))
        {
LABEL_16:
          v18 = v12 & 0xFFFFFFFF000000FFLL;
          v17 = v20;
          goto LABEL_17;
        }
      }
    }
  }
  v43 = 0;
LABEL_18:
  v28 = JSC::jsString(v9, (JSC::VM *)&v43, (uint64_t)a3, a4, a5, a6, a7, a8);
  v29 = v43;
  v43 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return v28;
}

uint64_t JSC::temporalPlainTimePrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Temporal.PlainTime.prototype.toJSON called on value that's not a PlainTime", 75);
  }
  JSC::ISO8601::temporalTimeToString(*(_QWORD *)(v9 + 16), 2uLL, (uint64_t)a3, a4, a5, a6, a7, a8, &v34);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::temporalPlainTimePrototypeFuncToLocaleString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::TemporalPlainTime::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Temporal.PlainTime.prototype.toLocaleString called on value that's not a PlainTime", 83);
  }
  JSC::ISO8601::temporalTimeToString(*(_QWORD *)(v9 + 16), 2uLL, (uint64_t)a3, a4, a5, a6, a7, a8, &v34);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::temporalPlainTimePrototypeFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"Temporal.PlainTime.prototype.valueOf must not be called. To compare PlainTime values, use Temporal.PlainTime.compare", 117);
}

unint64_t JSC::LazyProperty<JSC::TemporalPlainDateTime,JSC::TemporalCalendar>::callFunc<JSC::TemporalPlainDateTime::finishCreation(JSC::VM &)::$_0>(JSC::TemporalCalendar **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  JSC::TemporalCalendar *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  JSC::TemporalCalendar *v15;
  uint64_t v16;
  unint64_t v17;
  JSC::Structure *v18;
  unint64_t v19;
  unint64_t result;
  unint64_t v21;
  JSC::TemporalCalendar *v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t (*v28)(_QWORD *);
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD v34[3];
  char v35;
  _QWORD *v36;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (char *)*a1 + 64;
  v13 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v30 = (unsigned int *)(v12 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *((_BYTE *)v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a1[1] & 0xFFFFFFFE) + 0x28);
  v17 = *(_QWORD *)(v16 + 416);
  if ((v17 & 1) != 0)
  {
    v28 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v29 = (_QWORD *)(v16 - 16);
    v34[0] = *v29;
    v34[1] = v16;
    v34[2] = v16 + 416;
    v17 = v28(v34);
  }
  v18 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v19 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v19 != -1)
    {
      v34[0] = &v35;
      v36 = v34;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v18 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  }
  result = JSC::TemporalCalendar::create(v15, (JSC::VM *)v17, v18, a4, a5, a6, a7, a8);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21BDCLL);
  }
  v22 = *a1;
  v21 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21BFCLL);
  }
  if (v21 && *((_DWORD *)v22 + 190) >= *(unsigned __int8 *)(v21 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v22 + 192, v21);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21C40);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21C60);
  }
  v23 = *((_DWORD *)v11 + 22) - 1;
  *((_DWORD *)v11 + 22) = v23;
  if (!v23 && v12[93377])
  {
    if (*((_BYTE *)v11 + 86))
    {
      v24 = v12 - 64;
      v25 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v24 + 2) = v25;
      *((_QWORD *)v24 + 4) = v25;
      if (v25)
      {
        v26 = (unsigned int *)(v12 + 16);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 | 0x10, v26));
      }
      if (v12[93379])
        v12[93378] = 1;
      *((_BYTE *)v11 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)((char *)v11 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

unint64_t JSC::LazyProperty<JSC::TemporalPlainTime,JSC::TemporalCalendar>::callFunc<JSC::TemporalPlainTime::finishCreation(JSC::VM &)::$_0>(JSC::TemporalCalendar **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  JSC::TemporalCalendar *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  JSC::TemporalCalendar *v15;
  uint64_t v16;
  unint64_t v17;
  JSC::Structure *v18;
  unint64_t v19;
  unint64_t result;
  unint64_t v21;
  JSC::TemporalCalendar *v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t (*v28)(_QWORD *);
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD v34[3];
  char v35;
  _QWORD *v36;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (char *)*a1 + 64;
  v13 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v30 = (unsigned int *)(v12 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *((_BYTE *)v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a1[1] & 0xFFFFFFFE) + 0x28);
  v17 = *(_QWORD *)(v16 + 416);
  if ((v17 & 1) != 0)
  {
    v28 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v29 = (_QWORD *)(v16 - 16);
    v34[0] = *v29;
    v34[1] = v16;
    v34[2] = v16 + 416;
    v17 = v28(v34);
  }
  v18 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  if (JSC::iso8601CalendarIDStorage == -1)
  {
    v19 = atomic_load(&JSC::iso8601CalendarIDSlow(void)::initializeOnce);
    if (v19 != -1)
    {
      v34[0] = &v35;
      v36 = v34;
      std::__call_once(&JSC::iso8601CalendarIDSlow(void)::initializeOnce, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>);
    }
    v18 = (JSC::Structure *)JSC::iso8601CalendarIDStorage;
  }
  result = JSC::TemporalCalendar::create(v15, (JSC::VM *)v17, v18, a4, a5, a6, a7, a8);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21E98);
  }
  v22 = *a1;
  v21 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21EB8);
  }
  if (v21 && *((_DWORD *)v22 + 190) >= *(unsigned __int8 *)(v21 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v22 + 192, v21);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21EFCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C21F1CLL);
  }
  v23 = *((_DWORD *)v11 + 22) - 1;
  *((_DWORD *)v11 + 22) = v23;
  if (!v23 && v12[93377])
  {
    if (*((_BYTE *)v11 + 86))
    {
      v24 = v12 - 64;
      v25 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v24 + 2) = v25;
      *((_QWORD *)v24 + 4) = v25;
      if (v25)
      {
        v26 = (unsigned int *)(v12 + 16);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 | 0x10, v26));
      }
      if (v12[93379])
        v12[93378] = 1;
      *((_BYTE *)v11 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)((char *)v11 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

unint64_t JSC::TemporalTimeZone::createFromID(JSC::TemporalTimeZone *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _QWORD *v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a3;
  v11 = (_QWORD *)*((_QWORD *)this + 5107);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::temporalTimeZoneSpaceSlow((JSC::Heap **)this + 4694);
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v14);
    v11[5] = result + (int)v14;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)this + 192, 32, 0, 0, v15, v16, v17);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v8;
  *(_QWORD *)(result + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::TemporalTimeZone::createFromUTCOffset(JSC::TemporalTimeZone *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = (_QWORD *)*((_QWORD *)this + 5107);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::temporalTimeZoneSpaceSlow((JSC::Heap **)this + 4694);
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v14);
    v11[5] = result + (int)v14;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)this + 192, 32, 0, 0, v15, v16, v17);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 1;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::TemporalTimeZone::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalTimeZone::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::TemporalTimeZone::from(uint64_t a1, unint64_t a2, const WTF::String *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int hasProperty;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  JSC::Structure *v32;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  JSC::Heap **v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  JSC::Exception *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t (*v80)(unsigned __int16 **);
  unsigned __int16 **v81;
  int v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t (*v86)(unsigned __int16 **);
  unsigned __int16 **v87;
  uint64_t (*v88)(unsigned __int16 **);
  unsigned __int16 **v89;
  char v90;
  int v91;
  uint64_t v92;
  char v93;
  char v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  WTF::StringImpl *v97[2];
  char v98;
  unsigned __int16 *v99;
  uint64_t v100;
  uint64_t v101;

  v9 = a2;
  v96 = a2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    goto LABEL_9;
  v12 = v11 + 41952;
  hasProperty = JSC::JSObject::hasProperty(a2, a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2448), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v82 = *(_DWORD *)(v11 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
    {
      v94 = hasProperty;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, v15, v16, v17, v18, v19);
      LOBYTE(hasProperty) = v94;
    }
    v83 = *(_QWORD *)(v11 + 16);
    if (v83)
      v84 = 0;
    else
      v84 = hasProperty;
    if (v83)
      v85 = 0;
    else
      v85 = v9;
    if ((v84 & 1) == 0)
      return v85;
  }
  else if (!hasProperty)
  {
    return v9;
  }
  v20 = JSC::JSObject::get((unsigned int *)v9, a1, *(_QWORD *)(*(_QWORD *)v12 + 2448), v15, v16, v17, v18, v19);
  v9 = v20;
  v96 = v20;
  if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
    goto LABEL_9;
  v21 = JSC::JSObject::hasProperty(v20, a1, *(_QWORD *)(*(_QWORD *)v12 + 2448), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v90 = v21;
    v91 = *(_DWORD *)(v11 + 80);
    if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v92 = *(_QWORD *)(v11 + 16);
    if (v92)
      v93 = 0;
    else
      v93 = v90;
    if (v92)
      v85 = 0;
    else
      v85 = v9;
    if ((v93 & 1) != 0)
      goto LABEL_9;
    return v85;
  }
  if (!v21)
    return v9;
LABEL_9:
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v96, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v95);
    goto LABEL_15;
  }
  v22 = *(WTF::StringImpl **)(v9 + 8);
  if ((v22 & 1) != 0)
  {
    v22 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v9, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (!v22)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v22)
LABEL_13:
    *(_DWORD *)v22 += 2;
LABEL_14:
  v95 = v22;
LABEL_15:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_16;
  v79 = *(_DWORD *)(v11 + 80);
  if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_16:
    if (v95)
    {
      v23 = (unsigned __int8 *)*((_QWORD *)v95 + 1);
      v24 = *((unsigned int *)v95 + 1) | ((unint64_t)((*((_DWORD *)v95 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v23 = 0;
      v24 = 0x100000000;
    }
    v25 = JSC::ISO8601::parseTimeZoneNumericUTCOffset(v23, v24);
    if (v31)
    {
      v32 = (JSC::Structure *)v25;
      v33 = *(_QWORD *)(a1 + 464);
      if ((v33 & 1) != 0)
      {
        v80 = *(uint64_t (**)(unsigned __int16 **))(v33 & 0xFFFFFFFFFFFFFFFCLL);
        v81 = (unsigned __int16 **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v81 = (unsigned __int16 **)(a1 - 16);
        v99 = *v81;
        v100 = a1;
        v101 = a1 + 464;
        v33 = v80(&v99);
      }
      v34 = JSC::TemporalTimeZone::createFromUTCOffset((JSC::TemporalTimeZone *)v11, (JSC::VM *)v33, v32, v26, v27, v28, v29, v30);
LABEL_21:
      v9 = v34;
      goto LABEL_41;
    }
    if (v95)
    {
      v35 = (WTF::StringImpl *)*((_QWORD *)v95 + 1);
      v36 = *((unsigned int *)v95 + 1) | ((unint64_t)((*((_DWORD *)v95 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v35 = 0;
      v36 = 0x100000000;
    }
    v37 = atomic_load(&JSC::intlAvailableTimeZones(void)::initializeOnce);
    if (v37 != -1)
    {
      v99 = (unsigned __int16 *)&v98;
      v97[0] = (WTF::StringImpl *)&v99;
      std::__call_once(&JSC::intlAvailableTimeZones(void)::initializeOnce, v97, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableTimeZones(void)::$_0 &&>>);
    }
    if (dword_1EE34302C)
    {
      v38 = 0;
      while (1)
      {
        v39 = *(_QWORD *)(JSC::intlAvailableTimeZones(void)::availableTimeZones + 8 * v38);
        if (v39)
        {
          v40 = *(unsigned int *)(v39 + 16);
          v41 = *(unsigned __int16 **)(v39 + 8);
          v39 = *(unsigned int *)(v39 + 4);
          v42 = (v40 >> 2) & 1;
        }
        else
        {
          v41 = 0;
          v42 = 1;
        }
        v99 = v41;
        v100 = v39 | (v42 << 32);
        v97[0] = v35;
        v97[1] = (WTF::StringImpl *)v36;
        if (WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(&v99, (unsigned __int8 **)v97))
          break;
        if (++v38 >= dword_1EE34302C)
          goto LABEL_34;
      }
      v70 = *(_QWORD *)(a1 + 464);
      if ((v70 & 1) != 0)
      {
        v88 = *(uint64_t (**)(unsigned __int16 **))(v70 & 0xFFFFFFFFFFFFFFFCLL);
        v89 = (unsigned __int16 **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v89 = (unsigned __int16 **)(a1 - 16);
        v99 = *v89;
        v100 = a1;
        v101 = a1 + 464;
        v70 = v88(&v99);
      }
      v34 = JSC::TemporalTimeZone::createFromID((JSC::TemporalTimeZone *)v11, (JSC::VM *)v70, (JSC::Structure *)v38, v43, v44, v45, v46, v47);
      goto LABEL_21;
    }
LABEL_34:
    v48 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v48 = 0x5700000002;
    *(_QWORD *)(v48 + 8) = "argument needs to be UTC offset string, TimeZone identifier, or temporal Instant string";
    *(_DWORD *)(v48 + 16) = 4;
    v97[0] = (WTF::StringImpl *)v48;
    v49 = *(_QWORD *)(a1 + 128);
    v50 = *(JSC::Heap ***)(a1 + 56);
    if ((v49 & 1) != 0)
    {
      v86 = *(uint64_t (**)(unsigned __int16 **))(v49 & 0xFFFFFFFFFFFFFFFCLL);
      v87 = (unsigned __int16 **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v87 = (unsigned __int16 **)(a1 - 16);
      v99 = *v87;
      v100 = a1;
      v101 = a1 + 128;
      v49 = v86(&v99);
    }
    v51 = JSC::ErrorInstance::create(v50, v49, v97, 0, 0, 0, 2, 1);
    v58 = (JSC::Exception *)v51;
    if ((v51 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C)))
    {
      v58 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v51, 0, v52, v53, v54, v55, v56);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v58, v57, v52, v53, v54, v55, v56);
    v59 = v97[0];
    v97[0] = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  v9 = 0;
LABEL_41:
  v60 = v95;
  v95 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  return v9;
}

void JSC::TemporalTimeZoneConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x800000002;
  *(_QWORD *)(v6 + 8) = "TimeZone";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::TemporalTimeZoneConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalTimeZoneConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callTemporalTimeZone(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"TimeZone", 9);
}

unint64_t JSC::constructTemporalTimeZone(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject *i;
  char **v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  JSC::Structure *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  JSC::Heap **v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  JSC::Exception *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t (*v79)(uint64_t *);
  uint64_t *v80;
  uint64_t (*v81)(uint64_t *);
  uint64_t *v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86[2];
  char v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;

  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(JSC::VM **)(this + 464);
    if ((v19 & 1) == 0)
      goto LABEL_15;
    v81 = *(uint64_t (**)(uint64_t *))((unint64_t)v19 & 0xFFFFFFFFFFFFFFFCLL);
    v82 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v82 = (uint64_t *)(this - 16);
    v88 = *v82;
    v89 = this;
    v90 = (char *)(this + 464);
    SubclassStructure = (JSC::JSObject *)v81(&v88);
  }
  else
  {
    v88 = *(_QWORD *)(this + 56);
    for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v15 + 2))
    {
      while (1)
      {
        v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v14 != &JSC::JSBoundFunction::s_info && v14 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v15 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, (JSC::VM **)&v88, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_10:
    if (*(_DWORD *)(v11 + 80))
    {
      v78 = *(_DWORD *)(v11 + 80);
      if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v19 = 0;
        goto LABEL_15;
      }
    }
    v17 = *(_QWORD *)(v16 + 464);
    if ((v17 & 1) != 0)
    {
      v79 = *(uint64_t (**)(uint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v80 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v80 = (uint64_t *)(v16 - 16);
      v88 = *v80;
      v89 = v16;
      v90 = (char *)(v16 + 464);
      v17 = v79(&v88);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v11 + 80))
  {
    v76 = *(_DWORD *)(v11 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v88 = 10;
LABEL_57:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v88, (JSC::JSGlobalObject *)this, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v85);
    goto LABEL_23;
  }
  v20 = *((_QWORD *)a2 + 6);
  v88 = v20;
  if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
    goto LABEL_57;
  v21 = *(WTF::StringImpl **)(v20 + 8);
  if ((v21 & 1) != 0)
  {
    v21 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v20, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (!v21)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v21)
LABEL_21:
    *(_DWORD *)v21 += 2;
LABEL_22:
  v85 = v21;
LABEL_23:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_24;
  v77 = *(_DWORD *)(v11 + 80);
  if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_24:
    if (v85)
    {
      v22 = (unsigned __int8 *)*((_QWORD *)v85 + 1);
      v23 = *((unsigned int *)v85 + 1) | ((unint64_t)((*((_DWORD *)v85 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v22 = 0;
      v23 = 0x100000000;
    }
    v24 = (JSC::Structure *)JSC::ISO8601::parseTimeZoneNumericUTCOffset(v22, v23);
    if (v30)
    {
      v31 = JSC::TemporalTimeZone::createFromUTCOffset((JSC::TemporalTimeZone *)v11, v19, v24, v25, v26, v27, v28, v29);
LABEL_28:
      v32 = v31;
      goto LABEL_48;
    }
    if (v85)
    {
      v33 = (WTF::StringImpl *)*((_QWORD *)v85 + 1);
      v34 = *((unsigned int *)v85 + 1) | ((unint64_t)((*((_DWORD *)v85 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v33 = 0;
      v34 = 0x100000000;
    }
    v35 = atomic_load(&JSC::intlAvailableTimeZones(void)::initializeOnce);
    if (v35 != -1)
    {
      v88 = (uint64_t)&v87;
      v86[0] = (WTF::StringImpl *)&v88;
      std::__call_once(&JSC::intlAvailableTimeZones(void)::initializeOnce, v86, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableTimeZones(void)::$_0 &&>>);
    }
    if (dword_1EE34302C)
    {
      v36 = 0;
      while (1)
      {
        v37 = *(_QWORD *)(JSC::intlAvailableTimeZones(void)::availableTimeZones + 8 * v36);
        if (v37)
        {
          v38 = *(unsigned int *)(v37 + 16);
          v39 = *(unsigned __int16 **)(v37 + 8);
          v37 = *(unsigned int *)(v37 + 4);
          v40 = (v38 >> 2) & 1;
        }
        else
        {
          v39 = 0;
          v40 = 1;
        }
        v88 = (uint64_t)v39;
        v89 = v37 | (v40 << 32);
        v86[0] = v33;
        v86[1] = (WTF::StringImpl *)v34;
        if (WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>((unsigned __int16 **)&v88, (unsigned __int8 **)v86))
        {
          break;
        }
        if (++v36 >= dword_1EE34302C)
          goto LABEL_41;
      }
      v31 = JSC::TemporalTimeZone::createFromID((JSC::TemporalTimeZone *)v11, v19, (JSC::Structure *)v36, v41, v42, v43, v44, v45);
      goto LABEL_28;
    }
LABEL_41:
    v46 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v46 = 0x3D00000002;
    *(_QWORD *)(v46 + 8) = "argument needs to be UTC offset string or TimeZone identifier";
    *(_DWORD *)(v46 + 16) = 4;
    v86[0] = (WTF::StringImpl *)v46;
    v47 = *(_QWORD *)(this + 128);
    v48 = *(JSC::Heap ***)(this + 56);
    if ((v47 & 1) != 0)
    {
      v83 = *(uint64_t (**)(uint64_t *))(v47 & 0xFFFFFFFFFFFFFFFCLL);
      v84 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v84 = (uint64_t *)(this - 16);
      v88 = *v84;
      v89 = this;
      v90 = (char *)(this + 128);
      v47 = v83(&v88);
    }
    v49 = JSC::ErrorInstance::create(v48, v47, v86, 0, 0, 0, 2, 1);
    v56 = (JSC::Exception *)v49;
    if ((v49 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)))
    {
      v56 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v49, 0, v50, v51, v52, v53, v54);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v56, v55, v50, v51, v52, v53, v54);
    v57 = v86[0];
    v86[0] = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::~StringImpl(v57, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  v32 = 0;
LABEL_48:
  v58 = v85;
  v85 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  return v32;
}

unint64_t JSC::TemporalTimeZonePrototype::create(JSC::TemporalTimeZonePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1100000002;
  *(_QWORD *)(v13 + 8) = "Temporal.TimeZone";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::TemporalTimeZonePrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::TemporalTimeZonePrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned __int8 *JSC::temporalTimeZonePrototypeGetterId(JSC::JSGlobalObject *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;

  v9 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || a2[5] != 2)
    return JSC::JSValue::toStringSlowCase(&v9, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return a2;
}

uint64_t JSC::getExecutableForFunction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if ((a1 & 0xFFFE000000000002) != 0)
    return 0;
  result = 0;
  if (a1 && *(_BYTE *)(a1 + 5) == 26)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if ((v3 & 1) != 0)
      v3 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v3 + 5) == 12)
      return v3;
    else
      return 0;
  }
  return result;
}

uint64_t JSC::getSomeBaselineCodeBlockForFunction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if ((a1 & 0xFFFE000000000002) != 0)
    return 0;
  result = 0;
  if (a1 && *(_BYTE *)(a1 + 5) == 26)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if ((v3 & 1) != 0)
      v3 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v3 + 5) != 12)
      return 0;
    result = JSC::FunctionExecutable::baselineCodeBlockFor(v3, 0);
    if (!result)
      return JSC::FunctionExecutable::baselineCodeBlockFor(v3, 1);
  }
  return result;
}

unint64_t JSC::numberOfDFGCompiles(uint64_t a1)
{
  BOOL v1;
  char v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  if (BYTE1(dword_1ECF4C240))
    v1 = BYTE2(dword_1ECF4C240) == 0;
  else
    v1 = 1;
  v3 = v1 || HIBYTE(dword_1ECF4C240) == 0;
  if ((a1 & 0xFFFE000000000002) != 0)
    return 0xFFFE000000000000;
  v4 = 0xFFFE000000000000;
  if (!a1 || *(_BYTE *)(a1 + 5) != 26)
    return v4;
  v6 = *(_QWORD *)(a1 + 24);
  if ((v6 & 1) != 0)
    v6 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v6 + 5) != 12)
    return 0xFFFE000000000000;
  v7 = JSC::FunctionExecutable::baselineCodeBlockFor(v6, 0);
  if (!v7)
  {
    v7 = JSC::FunctionExecutable::baselineCodeBlockFor(v6, 1);
    if (!v7)
      return 0xFFFE000000000000;
  }
  v4 = 0xFFFE0000000F4240;
  if ((v3 & 1) != 0)
    return v4;
  if (byte_1ECF4C347)
  {
    v8 = *(unsigned __int8 *)(v7 + 18);
    if ((v8 & 8) == 0)
    {
      v9 = (v8 >> 4) & 1;
      v10 = *(unsigned __int16 *)(v7 + 106);
      return (v10 + v9) | 0xFFFE000000000000;
    }
    return v4;
  }
  v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C));
  if (v11 == &JSC::FunctionCodeBlock::s_info)
  {
    v12 = *(_QWORD *)(v7 + 64);
    v13 = (uint64_t *)(v12 + 96);
    v14 = (uint64_t *)(v12 + 104);
    if (*(int *)(*(_QWORD *)(v7 + 56) + 20) >= 0)
      v14 = v13;
    goto LABEL_27;
  }
  if (v11 == &JSC::EvalCodeBlock::s_info
    || v11 == &JSC::ProgramCodeBlock::s_info
    || v11 == &JSC::ModuleProgramCodeBlock::s_info)
  {
    v14 = (uint64_t *)(*(_QWORD *)(v7 + 64) + 72);
LABEL_27:
    v10 = *v14;
    if (v10)
    {
      v10 = *(_QWORD *)(v10 + 120);
      if (v10)
        v10 = (*(_BYTE *)(v10 + 12) & 0xFE) == 4;
    }
    v9 = *(unsigned __int16 *)(v7 + 106);
    return (v10 + v9) | 0xFFFE000000000000;
  }
  result = 2120;
  __break(0xC471u);
  return result;
}

uint64_t JSC::setNeverInline(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xFFFE000000000002) == 0 && a1 && *(_BYTE *)(a1 + 5) == 26)
  {
    v1 = *(_QWORD *)(a1 + 24);
    if ((v1 & 1) != 0)
      v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v1 + 5) == 12)
      *(_WORD *)(v1 + 70) |= 2u;
  }
  return 10;
}

uint64_t JSC::setNeverOptimize(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xFFFE000000000002) == 0 && a1 && *(_BYTE *)(a1 + 5) == 26)
  {
    v1 = *(_QWORD *)(a1 + 24);
    if ((v1 & 1) != 0)
      v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v1 + 5) == 12)
      *(_WORD *)(v1 + 70) |= 4u;
  }
  return 10;
}

uint64_t JSC::optimizeNextInvocation(uint64_t a1)
{
  uint64_t v1;
  JSC::CodeBlock *v2;

  if ((a1 & 0xFFFE000000000002) == 0 && a1 && *(_BYTE *)(a1 + 5) == 26)
  {
    v1 = *(_QWORD *)(a1 + 24);
    if ((v1 & 1) != 0)
      v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v1 + 5) == 12)
    {
      v2 = (JSC::CodeBlock *)JSC::FunctionExecutable::baselineCodeBlockFor(v1, 0);
      if (v2 || (v2 = (JSC::CodeBlock *)JSC::FunctionExecutable::baselineCodeBlockFor(v1, 1)) != 0)
        JSC::CodeBlock::optimizeNextInvocation(v2);
    }
  }
  return 10;
}

uint64_t JSC::failNextNewCodeBlock(JSC *this, JSC::JSGlobalObject *a2)
{
  *(_BYTE *)(*((_QWORD *)this + 7) + 93121) = 1;
  return 10;
}

unint64_t JSC::numberOfDFGCompiles(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  else
    return JSC::numberOfDFGCompiles(*((_QWORD *)a2 + 6));
}

uint64_t JSC::setNeverInline(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;

  if (*((_DWORD *)a2 + 8) != 1)
  {
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) == 0 && v3 && *(_BYTE *)(v3 + 5) == 26)
    {
      v5 = *(_QWORD *)(v3 + 24);
      if ((v5 & 1) != 0)
        v5 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v5 + 5) == 12)
        *(_WORD *)(v5 + 70) |= 2u;
    }
  }
  return 10;
}

uint64_t JSC::setNeverOptimize(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;

  if (*((_DWORD *)a2 + 8) != 1)
  {
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) == 0 && v3 && *(_BYTE *)(v3 + 5) == 26)
    {
      v5 = *(_QWORD *)(v3 + 24);
      if ((v5 & 1) != 0)
        v5 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v5 + 5) == 12)
        *(_WORD *)(v5 + 70) |= 4u;
    }
  }
  return 10;
}

uint64_t JSC::setCannotUseOSRExitFuzzing(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;

  if (*((_DWORD *)a2 + 8) != 1)
  {
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) == 0 && v3 && *(_BYTE *)(v3 + 5) == 26)
    {
      v5 = *(_QWORD *)(v3 + 24);
      if ((v5 & 1) != 0)
        v5 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v5 + 5) == 12)
        *(_WORD *)(v5 + 70) &= ~0x20u;
    }
  }
  return 10;
}

uint64_t JSC::optimizeNextInvocation(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;
  JSC::CodeBlock *v6;

  if (*((_DWORD *)a2 + 8) != 1)
  {
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) == 0 && v3 && *(_BYTE *)(v3 + 5) == 26)
    {
      v5 = *(_QWORD *)(v3 + 24);
      if ((v5 & 1) != 0)
        v5 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v5 + 5) == 12)
      {
        v6 = (JSC::CodeBlock *)JSC::FunctionExecutable::baselineCodeBlockFor(v5, 0);
        if (v6 || (v6 = (JSC::CodeBlock *)JSC::FunctionExecutable::baselineCodeBlockFor(v5, 1)) != 0)
          JSC::CodeBlock::optimizeNextInvocation(v6);
      }
    }
  }
  return 10;
}

uint64_t JSC::TypeLocationCache::getTypeLocation(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;

  v14 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *,WTF::DefaultHash<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashTraits<JSC::TypeLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>>::rehash(a1, 8u, 0), (v14 = *a1) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = 0;
  v17 = a2 + a3 + a4 + a5;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v15;
    v20 = v14 + 40 * v19;
    v21 = *(_DWORD *)(v20 + 24);
    if (v21)
      break;
    if (*(_QWORD *)v20 == a2
      && *(_DWORD *)(v20 + 8) == a3
      && *(_DWORD *)(v20 + 12) == a4
      && *(_DWORD *)(v20 + 16) == a5)
    {
      return *(_QWORD *)(v20 + 32);
    }
LABEL_15:
    v17 = i + v19;
  }
  if (v21 == 2)
  {
    v16 = v14 + 40 * v19;
    goto LABEL_15;
  }
  if (v21 != 1)
    goto LABEL_15;
  if (v16)
  {
    *(_DWORD *)(v16 + 24) = 1;
    *(_QWORD *)(v16 + 32) = 0;
    --*(_DWORD *)(*a1 - 16);
    v20 = v16;
  }
  *(_QWORD *)v20 = a2;
  *(_DWORD *)(v20 + 8) = a3;
  *(_DWORD *)(v20 + 12) = a4;
  *(_DWORD *)(v20 + 16) = a5;
  *(_DWORD *)(v20 + 24) = 0;
  v22 = *(_QWORD *)(a7 + 93168);
  v23 = WTF::fastMalloc((WTF *)0x38);
  v24 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 4) = 0;
  *(_DWORD *)(v24 + 28) = 0;
  *(_QWORD *)(v24 + 20) = 0;
  *(_QWORD *)(v24 + 12) = 0;
  *(_QWORD *)(v23 + 8) = v24;
  *(_QWORD *)(v23 + 16) = 0;
  *(_WORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 48) = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)v23 = a2;
  *(_DWORD *)(v23 + 24) = a3;
  *(_DWORD *)(v23 + 28) = a4;
  *(_DWORD *)(v23 + 32) = a5;
  *(_DWORD *)(v23 + 36) = -1;
  v32 = *a6;
  *a6 = 0;
  v33 = *(WTF **)(v23 + 16);
  *(_QWORD *)(v23 + 16) = v32;
  if (v33)
    WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v33, v25, v26, v27, v28, v29, v30, v31);
  *(_QWORD *)(v20 + 32) = v23;
  v34 = *a1;
  if (*a1)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v36 = *a1;
  if (*a1)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 <= 2 * v38)
    {
LABEL_29:
      v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
      goto LABEL_31;
    }
  }
  else if (3 * v39 <= 4 * v38)
  {
    if ((_DWORD)v39)
      goto LABEL_29;
    v40 = 8;
LABEL_31:
    v20 = WTF::HashTable<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *,WTF::DefaultHash<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashTraits<JSC::TypeLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>>::rehash(a1, v40, (__int128 *)v20);
  }
  return *(_QWORD *)(v20 + 32);
}

void JSC::TypeProfiler::logTypesForTypeLocation(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  const char *v7;
  WTF::AtomStringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  float v17;
  WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::TypeSet *v28;
  double v29;
  double v30;
  float v31;
  WTF::StringImpl *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;

  if (*(_QWORD *)a2 == -3)
    v6 = 2;
  else
    v6 = 1;
  WTF::dataLogF((WTF *)"[Start, End]::[%u, %u]\n", (const char *)a2, *(unsigned int *)(a2 + 28), *(unsigned int *)(a2 + 32));
  if (JSC::TypeProfiler::findLocation(a1, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 24), v6, a3))
    WTF::dataLog<char [16]>("\t\t[Entry IS in System]\n");
  else
    WTF::dataLog<char [16]>("\t\t[Entry IS NOT in system]\n");
  if (*(_QWORD *)a2 == -3)
    v7 = "[Return Statement]";
  else
    v7 = "[Normal Statement]";
  WTF::dataLog<char [3],char [19],char [2]>(v7);
  JSC::TypeSet::dumpTypes(*(JSC::TypeSet **)(a2 + 8), v8, v9, v10, v11, v12, v13, v14, &v74);
  if (v74)
  {
    WTF::StringImpl::replace((uint64_t)v74, 0xAu, "\n\t\t", 3uLL, &v75, v15, v16, v17);
    v18 = v75;
  }
  else
  {
    v18 = 0;
  }
  v75 = v18;
  WTF::dataLog<char [13],WTF::String,char [2]>((WTF::PrintStream *)&v75);
  v26 = v75;
  v75 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = v74;
  v74 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *(JSC::TypeSet **)(a2 + 16);
  if (v28)
  {
    JSC::TypeSet::dumpTypes(v28, v19, v20, v21, v22, v23, v24, v25, &v74);
    if (v74)
    {
      WTF::StringImpl::replace((uint64_t)v74, 0xAu, "\n\t\t", 3uLL, &v75, v29, v30, v31);
      v32 = v75;
    }
    else
    {
      v32 = 0;
    }
    v75 = v32;
    WTF::dataLog<char [14],WTF::String,char [2]>((WTF::PrintStream *)&v75);
    v40 = v75;
    v75 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    v41 = v74;
    v74 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
}

_QWORD *JSC::TypeProfiler::findLocation(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  unsigned int i;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int j;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  BOOL v49;
  BOOL v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;

  v10 = a1 + 2;
  v9 = a1[2];
  if (v9)
  {
    v11 = 0;
    v12 = *(_DWORD *)(v9 - 8);
    for (i = a3 + a4 * a2; ; i = v11 + v14)
    {
      v14 = i & v12;
      v15 = v9 + 24 * (i & v12);
      v16 = *(_DWORD *)(v15 + 4);
      if (*(_DWORD *)v15 == a3 && v16 == a2)
      {
        v16 = a2;
        if (*(_DWORD *)(v15 + 8) == a4)
        {
          v18 = *(_DWORD *)(v9 - 4);
          goto LABEL_14;
        }
      }
      if (!(*(_DWORD *)v15 | v16) && *(_DWORD *)(v15 + 8) == 2)
        break;
      ++v11;
    }
    v18 = *(_DWORD *)(v9 - 4);
    v15 = v9 + 24 * v18;
LABEL_14:
    if (v15 != v9 + 24 * v18)
      return *(_QWORD **)(v15 + 16);
  }
  if (!JSC::FunctionHasExecutedCache::hasExecutedAtOffset((JSC::FunctionHasExecutedCache *)(a5 + 93272), a3, a2))return 0;
  v20 = *a1;
  if (!*a1)
    return 0;
  v21 = *(_DWORD *)(v20 - 8);
  v22 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
  v24 = v21 & (v23 ^ HIWORD(v23));
  v25 = (int *)(v20 + 24 * v24);
  v26 = *v25;
  if (*v25 != a3)
  {
    v27 = 1;
    v28 = v26;
    v29 = v24;
    while (v28)
    {
      v29 = (v29 + v27) & v21;
      v28 = *(_DWORD *)(v20 + 24 * v29);
      ++v27;
      if (v28 == a3)
      {
        v30 = 1;
        while (v26)
        {
          v24 = (v24 + v30) & v21;
          v25 = (int *)(v20 + 24 * v24);
          v26 = *v25;
          ++v30;
          if (*v25 == a3)
            goto LABEL_27;
        }
        v25 = (int *)(v20 + 24 * *(unsigned int *)(v20 - 4));
        goto LABEL_27;
      }
    }
    return 0;
  }
LABEL_27:
  v31 = v25[5];
  if (!(_DWORD)v31)
    return 0;
  v32 = (_QWORD *)*((_QWORD *)v25 + 1);
  v33 = 8 * v31;
  if (a4 != 2)
  {
    v19 = 0;
    v34 = 0;
    v35 = -1;
    do
    {
      v36 = (_QWORD *)*v32;
      if (*(_QWORD *)*v32 != -3)
      {
        v37 = *((_DWORD *)v36 + 7);
        if (v37 <= a2)
        {
          v38 = *((_DWORD *)v36 + 8);
          if (v38 >= a2)
          {
            v39 = v38 - v37;
            if (v39 <= v35)
            {
              v19 = (_QWORD *)*v32;
              v34 = (_QWORD *)*v32;
              v35 = v39;
            }
          }
        }
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
    if (v34)
    {
      v40 = *v10;
      if (*v10
        || (WTF::HashTable<JSC::QueryKey,WTF::KeyValuePair<JSC::QueryKey,JSC::TypeLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::QueryKey,JSC::TypeLocation *>>,WTF::DefaultHash<JSC::QueryKey>,WTF::HashMap<JSC::QueryKey,JSC::TypeLocation *,WTF::DefaultHash<JSC::QueryKey>,WTF::HashTraits<JSC::QueryKey>,WTF::HashTraits<JSC::TypeLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::QueryKey>>::rehash(v10, 8u), (v40 = *v10) != 0))
      {
        v41 = *(_DWORD *)(v40 - 8);
      }
      else
      {
        v41 = 0;
      }
      v42 = 0;
      v43 = a3 + a4 * a2;
      for (j = 1; ; ++j)
      {
        v45 = v43 & v41;
        v46 = v40 + 24 * v45;
        v47 = *(_DWORD *)v46;
        v48 = *(_DWORD *)(v46 + 4);
        if (!*(_QWORD *)v46 && *(_DWORD *)(v46 + 8) == 2)
          break;
        v49 = v47 == a3 && v48 == a2;
        if (v49 && *(_DWORD *)(v46 + 8) == a4)
        {
          *(_QWORD *)(v40 + 24 * v45 + 16) = v19;
          return v19;
        }
        v50 = v47 == -1 && v48 == -1;
        if (v50 && *(_DWORD *)(v46 + 8) == 2)
          v42 = v40 + 24 * v45;
        v43 = j + v45;
      }
      if (v42)
      {
        *(_QWORD *)v42 = 0;
        *(_DWORD *)(v42 + 8) = 2;
        *(_QWORD *)(v42 + 16) = 0;
        --*(_DWORD *)(*v10 - 16);
        v46 = v42;
      }
      *(_DWORD *)v46 = a3;
      *(_DWORD *)(v46 + 4) = a2;
      *(_DWORD *)(v46 + 8) = a4;
      *(_QWORD *)(v46 + 16) = v19;
      v52 = *v10;
      if (*v10)
        v53 = *(_DWORD *)(v52 - 12) + 1;
      else
        v53 = 1;
      *(_DWORD *)(v52 - 12) = v53;
      v54 = *v10;
      if (*v10)
        v55 = *(_DWORD *)(v54 - 12);
      else
        v55 = 0;
      v56 = (*(_DWORD *)(v54 - 16) + v55);
      v57 = *(unsigned int *)(v54 - 4);
      if (v57 > 0x400)
      {
        if (v57 > 2 * v56)
          return v19;
      }
      else
      {
        if (3 * v57 > 4 * v56)
          return v19;
        if (!(_DWORD)v57)
        {
          v58 = 8;
          goto LABEL_78;
        }
      }
      v58 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
LABEL_78:
      WTF::HashTable<JSC::QueryKey,WTF::KeyValuePair<JSC::QueryKey,JSC::TypeLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::QueryKey,JSC::TypeLocation *>>,WTF::DefaultHash<JSC::QueryKey>,WTF::HashMap<JSC::QueryKey,JSC::TypeLocation *,WTF::DefaultHash<JSC::QueryKey>,WTF::HashTraits<JSC::QueryKey>,WTF::HashTraits<JSC::TypeLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::QueryKey>>::rehash(v10, v58);
      return v19;
    }
    return 0;
  }
  do
  {
    v19 = (_QWORD *)*v32;
    if (*(_QWORD *)*v32 == -3 && *((_DWORD *)v19 + 9) == a2)
      break;
    v19 = 0;
    ++v32;
    v33 -= 8;
  }
  while (v33);
  return v19;
}

uint64_t WTF::dataLog<char [3],char [19],char [2]>(const char *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "\t\t");
  WTF::PrintStream::printf(v4, "%s", a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "\t\t#Local#\n\t\t");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [14],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "\t\t#Global#\n\t\t");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

char *JSC::TypeProfiler::insertNewLocation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  char *result;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = *(_DWORD *)(a2 + 24);
    v13 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = (v14 ^ HIWORD(v14)) & v11;
    v16 = v10 + 24 * v15;
    v17 = *(_DWORD *)v16;
    if (*(_DWORD *)v16 == v12)
      goto LABEL_42;
    v18 = 1;
    v19 = *(_DWORD *)v16;
    v20 = v15;
    while (v19)
    {
      v20 = (v20 + v18) & v11;
      v19 = *(_DWORD *)(v10 + 24 * v20);
      ++v18;
      if (v19 == v12)
        goto LABEL_35;
    }
    v49 = 0;
    v50 = 0;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8);
    v10 = *a1;
    if (*a1)
      v11 = *(_DWORD *)(v10 - 8);
    else
      v11 = 0;
  }
  v21 = *(_DWORD *)(a2 + 24);
  v22 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
  v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
  v24 = (v23 ^ HIWORD(v23)) & v11;
  v25 = v10 + 24 * v24;
  v26 = *(_DWORD *)v25;
  if (*(_DWORD *)v25)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v26 == v21)
      {
        WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(v25 + 8), (const void **)&v49, a3, a4, a5, a6, a7, a8);
        goto LABEL_32;
      }
      if (v26 == -1)
        v27 = (_QWORD *)v25;
      v24 = (v24 + v28) & v11;
      v25 = v10 + 24 * v24;
      v26 = *(_DWORD *)v25;
      ++v28;
    }
    while (*(_DWORD *)v25);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v21 = *(_DWORD *)(a2 + 24);
      v25 = (uint64_t)v27;
    }
  }
  *(_DWORD *)v25 = v21;
  WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(v25 + 8), (const void **)&v49, a3, a4, a5, a6, a7, a8);
  v36 = *a1;
  if (*a1)
    v37 = *(_DWORD *)(v36 - 12) + 1;
  else
    v37 = 1;
  *(_DWORD *)(v36 - 12) = v37;
  v38 = *a1;
  if (*a1)
    v39 = *(_DWORD *)(v38 - 12);
  else
    v39 = 0;
  v40 = (*(_DWORD *)(v38 - 16) + v39);
  v41 = *(unsigned int *)(v38 - 4);
  if (v41 <= 0x400)
  {
    if (3 * v41 > 4 * v40)
      goto LABEL_32;
    if (!(_DWORD)v41)
    {
      v42 = 8;
      goto LABEL_31;
    }
LABEL_29:
    v42 = ((_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41)));
LABEL_31:
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v42, v25, v31, v32, v33, v34, v35);
    goto LABEL_32;
  }
  if (v41 <= 2 * v40)
    goto LABEL_29;
LABEL_32:
  v43 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree((unint64_t)v43, v29, v30, v31, v32, v33, v34, v35);
  }
  v10 = *a1;
  v11 = *(_DWORD *)(*a1 - 8);
  v12 = *(_DWORD *)(a2 + 24);
  v44 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
  v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
  v15 = (v45 ^ HIWORD(v45)) & v11;
  v17 = *(_DWORD *)(*a1 + 24 * v15);
LABEL_35:
  if (v17 == v12)
  {
    v16 = v10 + 24 * v15;
  }
  else
  {
    v46 = 1;
    while (v17)
    {
      v15 = (v15 + v46) & v11;
      v16 = v10 + 24 * v15;
      v17 = *(_DWORD *)v16;
      ++v46;
      if (*(_DWORD *)v16 == v12)
        goto LABEL_42;
    }
    v16 = v10 + 24 * *(unsigned int *)(v10 - 4);
  }
LABEL_42:
  result = (char *)(v16 + 8);
  v48 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v48 == *(_DWORD *)(v16 + 16))
  {
    result = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v48 + 1, (unint64_t)&v51);
    v48 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v48) = *(_QWORD *)result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v48) = a2;
  }
  *(_DWORD *)(v16 + 20) = v48 + 1;
  return result;
}

void JSC::TypeProfiler::typeInformationForExpressionAtOffset(uint64_t *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X4>, WTF::StringImpl **a6@<X8>)
{
  _QWORD *Location;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _OWORD *v20;
  _OWORD *v21;
  JSC::TypeSet *v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  char *v55;
  int v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x16_t *v119;
  unint64_t v120;
  char v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  unsigned int v124;
  char v125;
  WTF::StringImpl *v126;
  int v127;
  int8x16_t v128;

  Location = JSC::TypeProfiler::findLocation(a1, a3, a4, a2, a5);
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 1;
  v128.i8[0] = 123;
  WTF::StringBuilder::append((uint64_t)&v122, &v128, 1uLL, v8, v9, v10, v11, v12);
  if ((v124 & 0x80000000) == 0)
  {
    v19 = v123;
    if ((v123 || (v19 = v122) != 0) && (*((_BYTE *)v19 + 16) & 4) == 0)
    {
      v20 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v122, (WTF::AtomStringImpl *)(v124 + 16), v13, v14, v15, v16, v17, v18);
      if (v20)
      {
        *v20 = xmmword_199159E00;
        v20[1] = xmmword_199159E10;
      }
    }
    else
    {
      v21 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v122, (WTF::AtomStringImpl *)(v124 + 16), v13, v14, v15, v16, v17, v18);
      if (v21)
        *v21 = *(_OWORD *)"\"globalTypeSet\":";
    }
  }
  v22 = (JSC::TypeSet *)Location[2];
  if (v22 && *Location != -2)
  {
    JSC::TypeSet::toJSONString(v22, v14, v15, v16, v17, v18, (WTF::StringImpl **)&v128);
    v27 = (WTF::StringImpl *)v128.i64[0];
    if (v124 || v123)
    {
      if (v128.i64[0])
      {
        v119 = *(int8x16_t **)(v128.i64[0] + 8);
        v120 = *(unsigned int *)(v128.i64[0] + 4);
        if ((*(_BYTE *)(v128.i64[0] + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)&v122, v119, v120, v14, v15, v16, v17, v18);
          goto LABEL_27;
        }
      }
      else
      {
        v119 = 0;
        v120 = 0;
      }
      WTF::StringBuilder::append((uint64_t)&v122, v119, v120, v14, v15, v16, v17, v18);
LABEL_27:
      v29 = (WTF::StringImpl *)v128.i64[0];
      v128.i64[0] = 0;
      if (!v29)
        goto LABEL_33;
      v30 = *(_DWORD *)v29 - 2;
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v25, v26, v14, v15, v16, v17, v18);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        goto LABEL_33;
      }
LABEL_32:
      *(_DWORD *)v29 = v30;
      goto LABEL_33;
    }
    if (v128.i64[0])
      *(_DWORD *)v128.i64[0] += 2;
    v28 = v122;
    v122 = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v25, v26, v14, v15, v16, v17, v18);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        v27 = (WTF::StringImpl *)v128.i64[0];
        if (!v128.i64[0])
          goto LABEL_26;
        goto LABEL_25;
      }
      *(_DWORD *)v28 -= 2;
    }
    if (!v27)
    {
LABEL_26:
      v124 = v27;
      goto LABEL_27;
    }
LABEL_25:
    LODWORD(v27) = *((_DWORD *)v27 + 1);
    goto LABEL_26;
  }
  if ((v124 & 0x80000000) != 0)
    goto LABEL_33;
  v23 = v123;
  if (!v123 && (v23 = v122) == 0 || (*((_BYTE *)v23 + 16) & 4) != 0)
  {
    v29 = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v122, (WTF::AtomStringImpl *)(v124 + 4), v13, v14, v15, v16, v17, v18);
    if (!v29)
      goto LABEL_33;
    v30 = 1819047278;
    goto LABEL_32;
  }
  v24 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v122, (WTF::AtomStringImpl *)(v124 + 4), v13, v14, v15, v16, v17, v18);
  if (v24)
    *v24 = 0x6C006C0075006ELL;
LABEL_33:
  v128.i8[0] = 44;
  if (v123 && ((v39 = v124, v124 < *((_DWORD *)v123 + 1)) ? (v40 = v122 == 0) : (v40 = 0), v40))
  {
    v41 = *((_DWORD *)v123 + 4);
    v42 = *((_QWORD *)v123 + 1);
    ++v124;
    if ((v41 & 4) != 0)
      *(_BYTE *)(v42 + v39) = 44;
    else
      *(_WORD *)(v42 + 2 * v39) = 44;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v122, &v128, 1uLL, v14, v15, v16, v17, v18);
  }
  v128.i64[0] = (uint64_t)"\"instructionTypeSet\":";
  v128.i64[1] = 22;
  JSC::TypeSet::toJSONString((JSC::TypeSet *)Location[1], v14, v15, v16, v17, v18, &v126);
  v121 = 44;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((uint64_t)&v122, (uint64_t)&v128, (uint64_t *)&v126, &v121, v43, v44, v45, v46);
  v54 = v126;
  v126 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  if (*(_BYTE *)(Location[1] + 5) || (v57 = Location[2]) != 0 && *(_BYTE *)(v57 + 5))
  {
    v55 = "true";
    v56 = 4;
  }
  else
  {
    v55 = "false";
    v56 = 5;
  }
  v128.i64[0] = (uint64_t)"\"isOverflown\":";
  v128.i32[2] = 14;
  v126 = (WTF::StringImpl *)v55;
  v127 = v56;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v122, (int8x16_t **)&v128, (uint64_t)&v126, v49, v50, v51, v52, v53);
  v128.i8[0] = 125;
  if (!v123 || (v65 = v124, v124 >= *((_DWORD *)v123 + 1)) || v122)
  {
    WTF::StringBuilder::append((uint64_t)&v122, &v128, 1uLL, v60, v61, v62, v63, v64);
  }
  else
  {
    v66 = *((_DWORD *)v123 + 4);
    v67 = *((_QWORD *)v123 + 1);
    ++v124;
    if ((v66 & 4) != 0)
      *(_BYTE *)(v67 + v65) = 125;
    else
      *(_WORD *)(v67 + 2 * v65) = 125;
  }
  v68 = v122;
  if (v122)
    goto LABEL_55;
  if ((v124 & 0x80000000) == 0 && v123 && *((_DWORD *)v123 + 1) > v124 + (v124 >> 2))
  {
    if ((*((_BYTE *)v123 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v122, (WTF::AtomStringImpl *)v124, v59, v60, v61, v62, v63, v64);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v122, (WTF::AtomStringImpl *)v124, v59, v60, v61, v62, v63, v64);
    v110 = v122;
    v122 = v123;
    v123 = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
      {
        WTF::StringImpl::~StringImpl(v110, v103, v104, v105, v106, v107, v108, v109);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
      else
      {
        *(_DWORD *)v110 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v122);
  v68 = v122;
  if (v122)
LABEL_55:
    *(_DWORD *)v68 += 2;
  *a6 = v68;
  v69 = v123;
  v123 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = v122;
  v122 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
}

void JSC::TypeProfiler::invalidateTypeSetCache(JSC::TypeProfiler *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  JSC::TypeSet *v10;

  for (i = *((_QWORD *)this + 4); i; i = *(_QWORD *)(i + 48))
  {
    JSC::TypeSet::invalidateCache(*(JSC::TypeSet **)(i + 8), a2, a3, a4, a5, a6, a7, a8);
    v10 = *(JSC::TypeSet **)(i + 16);
    if (v10)
      JSC::TypeSet::invalidateCache(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::TypeProfilerLog::processLogEntries(JSC::TypeProfilerLog *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  JSC::StructureShape *v41;
  JSC::StructureShape *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::StructureShape *v47;
  JSC::StructureShape *v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  JSC::StructureShape *v61;
  JSC::StructureShape *v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  JSC::StructureShape *v73;
  JSC::StructureShape *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::StructureShape *v96;
  JSC::StructureShape *v97;
  JSC::StructureShape *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::StructureShape *v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::StructureShape *v125;
  JSC::StructureShape *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  JSC::StructureShape **v155;
  JSC::StructureShape *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::StructureShape **v167;
  JSC::StructureShape *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned __int8 v181;
  JSC::StructureShape *v182;
  uint64_t v183;
  uint64_t v184;
  JSC::StructureShape *v185;

  v8 = a2;
  v10 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v11 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (v10)
  {
    v12 = (unsigned int *)((char *)a2 + 80);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 & 0xFFFFFFEF, v12));
  }
  v183 = 0;
  v184 = 0;
  v14 = *((_QWORD *)this + 2);
  if (v14 == *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 3) = v14;
    goto LABEL_162;
  }
  v179 = v10;
  do
  {
    v15 = *(_DWORD *)(v14 + 16);
    v182 = 0;
    v16 = *(_QWORD *)v14;
    v181 = 0;
    if (!v15)
    {
      v18 = 0;
      goto LABEL_108;
    }
    v17 = v15 & 0xFFFFFFFE;
    v18 = 16 * v17;
    v19 = v184;
    v20 = ~(v17 << 36);
    if (v184)
    {
      v21 = *(_DWORD *)(v184 - 8);
      v22 = ((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22))
          + ~(((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v21 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
      v25 = *(_QWORD *)(v184 + 16 * v24);
      if (v25 != v18)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v21;
          v25 = *(_QWORD *)(v184 + 16 * v24);
          ++v26;
          if (v25 == v18)
            goto LABEL_15;
        }
        v24 = *(unsigned int *)(v184 - 4);
      }
LABEL_15:
      if (v24 != *(_DWORD *)(v184 - 4))
      {
        v41 = *(JSC::StructureShape **)(v184 + 16 * v24 + 8);
        if (v41)
          ++*(_DWORD *)v41;
        v182 = v41;
        goto LABEL_108;
      }
    }
    v27 = v183;
    v28 = ~(v16 << 32);
    if (v183)
    {
      v29 = *(_DWORD *)(v183 - 8);
      v30 = ((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22))
          + ~(((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22)) << 13);
      v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
      v32 = ((v16 + v28) ^ ((v16 + v28) >> 22)) + ~(((v16 + v28) ^ ((v16 + v28) >> 22)) << 13);
      v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
      v34 = v29 & ((0xD7862706ELL
                  * (unint64_t)(277951225
                                     * (((v31 + ~(v31 << 27)) >> 31) ^ ((_DWORD)v31 + ~((_DWORD)v31 << 27)))
                                     + 95187966
                                     * (((v33 + ~(v33 << 27)) >> 31) ^ ((_DWORD)v33 + ~((_DWORD)v33 << 27))))) >> 4);
      v35 = (uint64_t *)(v183 + 24 * v34);
      v36 = *v35;
      v37 = v35[1];
      if (*v35 != v18 || v37 != v16)
      {
        v39 = 1;
        while (v36 | v37)
        {
          v34 = (v34 + v39) & v29;
          v35 = (uint64_t *)(v183 + 24 * v34);
          v36 = *v35;
          v37 = v35[1];
          ++v39;
          if (*v35 == v18 && v37 == v16)
            goto LABEL_33;
        }
        v35 = (uint64_t *)(v183 + 24 * *(unsigned int *)(v183 - 4));
      }
LABEL_33:
      if ((uint64_t *)(v183 + 24 * *(unsigned int *)(v183 - 4)) != v35)
      {
        v42 = (JSC::StructureShape *)v35[2];
        if (v42)
        {
          ++*(_DWORD *)v42;
          v182 = v42;
          v181 = 1;
          goto LABEL_108;
        }
        v182 = 0;
        v181 = 1;
      }
    }
    JSC::Structure::toStructureShape(v18, v16, &v181, (uint64_t *)&v185);
    v47 = v185;
    v185 = 0;
    v48 = v182;
    v182 = v47;
    if (v48)
    {
      v49 = *(_DWORD *)v48 - 1;
      if (*(_DWORD *)v48 != 1)
        goto LABEL_39;
      JSC::StructureShape::~StructureShape(v48, v43, v44, v45, v46, a6, a7, a8);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      v48 = v185;
      v185 = 0;
      if (v48)
      {
        v49 = *(_DWORD *)v48 - 1;
        if (*(_DWORD *)v48 != 1)
        {
LABEL_39:
          *(_DWORD *)v48 = v49;
          goto LABEL_40;
        }
        JSC::StructureShape::~StructureShape(v48, v43, v44, v45, v46, a6, a7, a8);
        WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
      }
    }
LABEL_40:
    if (v181)
    {
      if (v27
        || (WTF::HashTable<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::KeyValuePair<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>>,WTF::DefaultHash<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashMap<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>,WTF::DefaultHash<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashTraits<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashTraits<WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::Structure *,JSC::JSCell *>>>::rehash(&v183, 8uLL, 0, v45, v46, a6, a7, a8), (v27 = v183) != 0))
      {
        v50 = *(_DWORD *)(v27 - 8);
      }
      else
      {
        v50 = 0;
      }
      v51 = ((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22))
          + ~(((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22)) << 13);
      v52 = (9 * (v51 ^ (v51 >> 8))) ^ ((9 * (v51 ^ (v51 >> 8))) >> 15);
      v53 = ((v16 + v28) ^ ((v16 + v28) >> 22)) + ~(((v16 + v28) ^ ((v16 + v28) >> 22)) << 13);
      v54 = (9 * (v53 ^ (v53 >> 8))) ^ ((9 * (v53 ^ (v53 >> 8))) >> 15);
      v55 = v50 & ((0xD7862706ELL
                  * (unint64_t)(277951225
                                     * (((v52 + ~(v52 << 27)) >> 31) ^ ((_DWORD)v52 + ~((_DWORD)v52 << 27)))
                                     + 95187966
                                     * (((v54 + ~(v54 << 27)) >> 31) ^ ((_DWORD)v54 + ~((_DWORD)v54 << 27))))) >> 4);
      v56 = (uint64_t *)(v27 + 24 * v55);
      v57 = *v56;
      v58 = v56[1];
      if (*(_OWORD *)v56 == 0)
      {
LABEL_53:
        *v56 = v18;
        v56[1] = v16;
        v61 = v182;
        if (v182)
          ++*(_DWORD *)v182;
        v62 = (JSC::StructureShape *)v56[2];
        v56[2] = (uint64_t)v61;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1)
          {
            JSC::StructureShape::~StructureShape(v62, v43, v44, v45, v46, a6, a7, a8);
            WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
          }
          else
          {
            --*(_DWORD *)v62;
          }
        }
        v63 = v183;
        if (v183)
          v64 = *(_DWORD *)(v183 - 12) + 1;
        else
          v64 = 1;
        *(_DWORD *)(v183 - 12) = v64;
        v77 = (*(_DWORD *)(v63 - 16) + v64);
        v78 = *(unsigned int *)(v63 - 4);
        if (v78 <= 0x400)
        {
          if (3 * v78 > 4 * v77)
            goto LABEL_108;
          if ((_DWORD)v78)
LABEL_82:
            v79 = ((_DWORD)v78 << (6 * v64 >= (2 * v78)));
          else
            v79 = 8;
          WTF::HashTable<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::KeyValuePair<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>>,WTF::DefaultHash<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashMap<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>,WTF::DefaultHash<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashTraits<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashTraits<WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::Structure *,JSC::JSCell *>>>::rehash(&v183, v79, (uint64_t)v56, v45, v46, a6, a7, a8);
          goto LABEL_108;
        }
        if (v78 <= 2 * v77)
          goto LABEL_82;
      }
      else
      {
        v59 = 0;
        v60 = 1;
        while (v57 != v18 || v58 != v16)
        {
          if (v57 == -1)
            v59 = v56;
          v55 = (v55 + v60) & v50;
          v56 = (uint64_t *)(v27 + 24 * v55);
          v57 = *v56;
          v58 = v56[1];
          ++v60;
          if (*(_OWORD *)v56 == 0)
          {
            if (v59)
            {
              *v59 = 0;
              v59[1] = 0;
              v59[2] = 0;
              --*(_DWORD *)(v27 - 16);
              v56 = v59;
            }
            goto LABEL_53;
          }
        }
        v96 = v182;
        if (v182)
          ++*(_DWORD *)v182;
        v97 = (JSC::StructureShape *)v56[2];
        v56[2] = (uint64_t)v96;
        if (v97)
          goto LABEL_93;
      }
    }
    else
    {
      if (v19
        || (WTF::HashTable<JSC::Structure *,WTF::KeyValuePair<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>>,WTF::DefaultHash<JSC::Structure *>,WTF::HashMap<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>,WTF::DefaultHash<JSC::Structure *>,WTF::HashTraits<JSC::Structure *>,WTF::HashTraits<WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Structure *>>::rehash(&v184, 8uLL, 0, v45, v46, a6, a7, a8), (v19 = v184) != 0))
      {
        v65 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        v65 = 0;
      }
      v66 = ((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22))
          + ~(((v18 + v20) ^ ((unint64_t)(v18 + v20) >> 22)) << 13);
      v67 = (9 * (v66 ^ (v66 >> 8))) ^ ((9 * (v66 ^ (v66 >> 8))) >> 15);
      v68 = v65 & (((v67 + ~(v67 << 27)) >> 31) ^ (v67 + ~((_DWORD)v67 << 27)));
      v69 = (uint64_t *)(v19 + 16 * v68);
      v70 = *v69;
      if (*v69)
      {
        v71 = 0;
        v72 = 1;
        while (v70 != v18)
        {
          if (v70 == -1)
            v71 = v69;
          v68 = (v68 + v72) & v65;
          v69 = (uint64_t *)(v19 + 16 * v68);
          v70 = *v69;
          ++v72;
          if (!*v69)
          {
            if (v71)
            {
              *v71 = 0;
              v71[1] = 0;
              --*(_DWORD *)(v19 - 16);
              v69 = v71;
            }
            goto LABEL_71;
          }
        }
        v98 = v182;
        if (v182)
          ++*(_DWORD *)v182;
        v97 = (JSC::StructureShape *)v69[1];
        v69[1] = (uint64_t)v98;
        if (v97)
        {
LABEL_93:
          if (*(_DWORD *)v97 == 1)
          {
            JSC::StructureShape::~StructureShape(v97, v43, v44, v45, v46, a6, a7, a8);
            WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
          }
          else
          {
            --*(_DWORD *)v97;
          }
        }
      }
      else
      {
LABEL_71:
        *v69 = v18;
        v73 = v182;
        if (v182)
          ++*(_DWORD *)v182;
        v74 = (JSC::StructureShape *)v69[1];
        v69[1] = (uint64_t)v73;
        if (v74)
        {
          if (*(_DWORD *)v74 == 1)
          {
            JSC::StructureShape::~StructureShape(v74, v43, v44, v45, v46, a6, a7, a8);
            WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
          }
          else
          {
            --*(_DWORD *)v74;
          }
        }
        v75 = v184;
        if (v184)
          v76 = *(_DWORD *)(v184 - 12) + 1;
        else
          v76 = 1;
        *(_DWORD *)(v184 - 12) = v76;
        v99 = (*(_DWORD *)(v75 - 16) + v76);
        v100 = *(unsigned int *)(v75 - 4);
        if (v100 <= 0x400)
        {
          if (3 * v100 > 4 * v99)
            goto LABEL_108;
          if ((_DWORD)v100)
LABEL_99:
            v101 = ((_DWORD)v100 << (6 * v76 >= (2 * v100)));
          else
            v101 = 8;
          WTF::HashTable<JSC::Structure *,WTF::KeyValuePair<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>>,WTF::DefaultHash<JSC::Structure *>,WTF::HashMap<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>,WTF::DefaultHash<JSC::Structure *>,WTF::HashTraits<JSC::Structure *>,WTF::HashTraits<WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Structure *>>::rehash(&v184, v101, (uint64_t)v69, v45, v46, a6, a7, a8);
          goto LABEL_108;
        }
        if (v100 <= 2 * v99)
          goto LABEL_99;
      }
    }
LABEL_108:
    v185 = (JSC::StructureShape *)v16;
    switch(v16)
    {
      case 0xAuLL:
        v16 = 2;
        goto LABEL_110;
      case 2uLL:
        v16 = 4;
        goto LABEL_110;
      case 0uLL:
        goto LABEL_110;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v185))
    {
      v16 = 16;
      goto LABEL_110;
    }
    if ((unint64_t)v185 >> 49)
    {
      v16 = 32;
      goto LABEL_110;
    }
    if (((unint64_t)v185 & 0xFFFE000000000002) != 0)
    {
      if (((unint64_t)v185 & 0xFFFFFFFFFFFFFFFELL) == 6)
        goto LABEL_144;
    }
    else
    {
      v143 = *((unsigned __int8 *)v185 + 5);
      if (v143 == 2)
      {
        v16 = 64;
        goto LABEL_110;
      }
      if (((unint64_t)v185 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
LABEL_144:
        v16 = 8;
        goto LABEL_110;
      }
      if (v143 > 0x16)
      {
        v16 = 128;
        goto LABEL_110;
      }
    }
    if (JSC::JSValue::isCallable((JSC::JSValue *)&v185))
    {
      v16 = 1;
    }
    else if (((unint64_t)v185 & 0xFFFE000000000002) != 0)
    {
      v16 = 0;
    }
    else
    {
      v152 = *((unsigned __int8 *)v185 + 5);
      if (v152 == 4)
        v16 = 256;
      else
        v16 = (v152 == 3) << 9;
    }
LABEL_110:
    v118 = *(_QWORD *)(v14 + 8);
    *(_WORD *)(v118 + 40) = v16;
    v119 = *(_QWORD *)(v118 + 16);
    if (v119)
    {
      v120 = v182;
      if (v182)
        ++*(_DWORD *)v182;
      v185 = v120;
      JSC::TypeSet::addTypeInformation(v119, (WTF::AtomStringImpl *)v16, &v185, v18, v181, a6, a7, a8);
      v125 = v185;
      v185 = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 1)
        {
          JSC::StructureShape::~StructureShape(v125, v121, v122, v123, v124, a6, a7, a8);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          --*(_DWORD *)v125;
        }
      }
    }
    JSC::TypeSet::addTypeInformation(*(_QWORD *)(v118 + 8), (WTF::AtomStringImpl *)v16, &v182, v18, v181, a6, a7, a8);
    v126 = v182;
    v182 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 1)
      {
        JSC::StructureShape::~StructureShape(v126, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
      }
      else
      {
        --*(_DWORD *)v126;
      }
    }
    v14 += 24;
  }
  while (v14 != *((_QWORD *)this + 3));
  v153 = v183;
  *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
  v10 = v179;
  v8 = a2;
  if (v153)
  {
    v154 = *(unsigned int *)(v153 - 4);
    if ((_DWORD)v154)
    {
      v155 = (JSC::StructureShape **)(v153 + 16);
      do
      {
        if (*(v155 - 2) != (JSC::StructureShape *)-1)
        {
          v156 = *v155;
          *v155 = 0;
          if (v156)
          {
            if (*(_DWORD *)v156 == 1)
            {
              JSC::StructureShape::~StructureShape(v156, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
            }
            else
            {
              --*(_DWORD *)v156;
            }
          }
        }
        v155 += 3;
        --v154;
      }
      while (v154);
    }
    WTF::fastFree(v153 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_162:
  v165 = v184;
  if (v184)
  {
    v166 = *(unsigned int *)(v184 - 4);
    if ((_DWORD)v166)
    {
      v167 = (JSC::StructureShape **)(v184 + 8);
      do
      {
        if (*(v167 - 1) != (JSC::StructureShape *)-1)
        {
          v168 = *v167;
          *v167 = 0;
          if (v168)
          {
            if (*(_DWORD *)v168 == 1)
            {
              JSC::StructureShape::~StructureShape(v168, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
            }
            else
            {
              --*(_DWORD *)v168;
            }
          }
        }
        v167 += 2;
        --v166;
      }
      while (v166);
    }
    WTF::fastFree(v165 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (v10)
  {
    v177 = (unsigned int *)((char *)v8 + 80);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 | 0x10, v177));
  }
  *((_QWORD *)v8 + 4) = v11;
  *((_QWORD *)v8 + 2) = v10;
}

unint64_t JSC::temporalTimeZoneConstructorFuncFrom(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::TemporalTimeZone::from((uint64_t)this, v9, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::temporalTimeZonePrototypeFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  WTF::StringImpl *v34;
  _QWORD v35[2];
  JSC::VM *v36;
  char v37;
  char *v38;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &JSC::TemporalTimeZone::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v36, (uint64_t)"Temporal.TimeZone.prototype.toString called on value that's not a TimeZone", 75);
  }
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  v35[0] = v6;
  v35[1] = v5;
  if (v5 != 0xFFFFFFFFLL)
  {
    v38 = &v37;
    ((void (*)(WTF::StringImpl **__return_ptr, char **, _QWORD *, JSC::CallFrame *))off_1E35B2D60[v5])(&v34, &v38, v35, a3);
    v20 = JSC::jsString((uint64_t)v3, (JSC::VM *)&v34, v7, v8, v9, v10, v11, v12);
    v21 = v34;
    v34 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    return v20;
  }
  v31 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
  return JSC::temporalTimeZonePrototypeFuncToJSON(v31, v32, v33);
}

unsigned __int8 *JSC::temporalTimeZonePrototypeFuncToJSON(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *result;
  unsigned __int8 *v10;

  result = (unsigned __int8 *)*((_QWORD *)a2 + 5);
  v10 = result;
  if (((unint64_t)result & 0xFFFE000000000002) != 0 || result[5] != 2)
    return JSC::JSValue::toStringSlowCase(&v10, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::temporalTimeZonePrototypeFuncToString(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0,JSC::temporalTimeZonePrototypeFuncToString(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,unsigned int,long long> &>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  char v6;
  char **v7;
  char *v8;

  v3 = *a1;
  v4 = atomic_load(&JSC::intlAvailableTimeZones(void)::initializeOnce);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&JSC::intlAvailableTimeZones(void)::initializeOnce, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableTimeZones(void)::$_0 &&>>);
  }
  if (dword_1EE34302C <= v3)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = *(_DWORD **)(JSC::intlAvailableTimeZones(void)::availableTimeZones + 8 * v3);
    if (v5)
      *v5 += 2;
    *a2 = v5;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::temporalTimeZonePrototypeFuncToString(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0,JSC::temporalTimeZonePrototypeFuncToString(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,unsigned int,long long> &>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  JSC::ISO8601::formatTimeZoneOffsetString(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>,JSC::TypeLocation *,WTF::DefaultHash<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>,WTF::HashTraits<JSC::TypeLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::TypeLocationCache::LocationKey,JSC::TypeLocationCache::LocationKey::Hash>>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  uint64_t v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 48);
    do
    {
      *((_DWORD *)v18 - 2) = 1;
      *v18 = 0;
      v18 += 5;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = (__int128 *)(v6 + 40 * v19);
      v22 = *((_DWORD *)v21 + 6);
      if ((v22 - 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
        {
          v24 = *(_DWORD *)(v23 - 8);
          if (v22)
            goto LABEL_23;
        }
        else
        {
          v24 = 0;
          if (v22)
          {
LABEL_23:
            v31 = std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v31);
          }
        }
        v25 = *((_DWORD *)v21 + 2) + *(_DWORD *)v21 + *((_DWORD *)v21 + 3) + *((_DWORD *)v21 + 4);
        do
        {
          v26 = v25 & v24;
          v27 = v23 + 40 * v26;
          v25 = ++v22 + v26;
        }
        while (*(_DWORD *)(v27 + 24) != 1);
        v28 = *v21;
        v29 = v21[1];
        *(_QWORD *)(v27 + 32) = *((_QWORD *)v21 + 4);
        *(_OWORD *)v27 = v28;
        *(_OWORD *)(v27 + 16) = v29;
        if (v21 == a3)
          v20 = v27;
      }
      if (++v19 == v7)
        goto LABEL_21;
    }
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

void WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  if (a2 != a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 <= v11)
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v13 = (unint64_t)*a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v14 = *((unsigned int *)a2 + 3);
        if (v12 < v14)
        {
          if (v14 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v15 = (char *)*a1;
          v16 = *((unsigned int *)a1 + 3);
          v17 = (char *)WTF::fastMalloc((WTF *)(8 * v14));
          *((_DWORD *)a1 + 2) = v14;
          *a1 = v17;
          memcpy(v17, v15, 8 * v16);
          if (v15)
          {
            if (*a1 == v15)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree((unint64_t)v15, v18, v19, v20, v21, v22, v23, v24);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    else
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    v25 = (char *)*a1;
    if (v11)
    {
      memmove(v25, *a2, 8 * v11);
      v26 = *((unsigned int *)a1 + 3);
      v25 = (char *)*a1;
    }
    else
    {
      v26 = 0;
    }
    memcpy(&v25[8 * v26], (char *)*a2 + 8 * v26, (_BYTE *)*a2 + 8 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 8 * v26));
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  }
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<JSC::TypeLocation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = v10;
    do
    {
      v22 = (int *)(v9 + 24 * v20);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = 0;
          v31 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
          v32 = ((v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11)) ^ (((v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11)) >> 16);
          do
          {
            v33 = v32 & v29;
            v34 = (_DWORD *)(v28 + 24 * (v32 & v29));
            v32 = ++v30 + (v32 & v29);
          }
          while (*v34);
          v35 = v28 + 24 * v33;
          v38 = *(_QWORD *)(v35 + 8);
          v37 = (_QWORD *)(v35 + 8);
          v36 = v38;
          if (v38)
          {
            *v37 = 0;
            *(_DWORD *)(v28 + 24 * v33 + 16) = 0;
            WTF::fastFree(v36, v13, v14, v15, v16, v17, v18, v19);
            v23 = *v22;
          }
          *v34 = v23;
          v39 = v9 + 24 * v20;
          *v37 = 0;
          v37[1] = 0;
          v41 = *(_DWORD *)(v39 + 16);
          v40 = (_DWORD *)(v39 + 16);
          v42 = *((_QWORD *)v40 - 1);
          *((_QWORD *)v40 - 1) = 0;
          *v37 = v42;
          *v40 = 0;
          v43 = v28 + 24 * v33;
          *(_DWORD *)(v43 + 16) = v41;
          v44 = v40[1];
          v40[1] = 0;
          *(_DWORD *)(v43 + 20) = v44;
          v45 = *((_QWORD *)v40 - 1);
          if (v45)
          {
            *((_QWORD *)v40 - 1) = 0;
            *v40 = 0;
            WTF::fastFree(v45, v13, v14, v15, v16, v17, v18, v19);
          }
        }
        else
        {
          v24 = v9 + 24 * v20;
          v27 = *(_QWORD *)(v24 + 8);
          v26 = (_QWORD *)(v24 + 8);
          v25 = v27;
          if (v27)
          {
            *v26 = 0;
            *(_DWORD *)(v9 + 24 * v20 + 16) = 0;
            WTF::fastFree(v25, v13, v14, v15, v16, v17, v18, v19);
          }
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  else if (!v9)
  {
    return;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
}

void WTF::HashTable<JSC::QueryKey,WTF::KeyValuePair<JSC::QueryKey,JSC::TypeLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::QueryKey,JSC::TypeLocation *>>,WTF::DefaultHash<JSC::QueryKey>,WTF::HashMap<JSC::QueryKey,JSC::TypeLocation *,WTF::DefaultHash<JSC::QueryKey>,WTF::HashTraits<JSC::QueryKey>,WTF::HashTraits<JSC::TypeLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::QueryKey>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  int *v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int j;
  int v26;
  uint64_t v27;
  __int128 v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 32);
    do
    {
      *(v16 - 2) = 0;
      *((_DWORD *)v16 - 2) = 2;
      *v16 = 0;
      v16 += 3;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (int *)(v4 + 24 * i);
      v19 = *v18;
      v20 = v18[1];
      v21 = *v18 == -1 && v20 == -1;
      if (!v21 && v19 | v20 || v18[2] != 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = 0;
        for (j = v19 + v18[2] * v20; ; j = v24 + v26)
        {
          v26 = j & v23;
          v27 = v22 + 24 * (j & v23);
          v8 = (void *)*(unsigned int *)(v27 + 4);
          if (!*(_QWORD *)v27 && *(_DWORD *)(v27 + 8) == 2)
            break;
          ++v24;
        }
        v28 = *(_OWORD *)v18;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v27 = v28;
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

void WTF::HashTable<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::KeyValuePair<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>>,WTF::DefaultHash<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashMap<std::pair<JSC::Structure *,JSC::JSCell *>,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>,WTF::DefaultHash<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashTraits<std::pair<JSC::Structure *,JSC::JSCell *>>,WTF::HashTraits<WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<JSC::Structure *,JSC::JSCell *>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::StructureShape *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  _OWORD *v38;
  uint64_t v39;
  JSC::StructureShape *v40;
  _QWORD *v41;
  JSC::StructureShape *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 24 * v21);
      v23 = *v22;
      if (*v22 != -1)
      {
        v24 = v22[1];
        if (v23 | v24)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v35 = v28 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v31 >> 31) ^ v31)
                                         + 95187966 * ((v34 >> 31) ^ v34))) >> 4);
          v36 = 1;
          do
          {
            v37 = v35;
            v38 = (_OWORD *)(v27 + 24 * v35);
            v35 = (v35 + v36++) & v28;
          }
          while (*v38 != 0);
          v39 = v27 + 24 * v37;
          v42 = *(JSC::StructureShape **)(v39 + 16);
          v41 = (_QWORD *)(v39 + 16);
          v40 = v42;
          *v41 = 0;
          if (v42)
          {
            if (*(_DWORD *)v40 == 1)
            {
              JSC::StructureShape::~StructureShape(v40, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
            }
            else
            {
              --*(_DWORD *)v40;
            }
          }
          *v38 = *(_OWORD *)v22;
          v43 = v10 + 24 * v21;
          v44 = *(_QWORD *)(v43 + 16);
          *(_QWORD *)(v43 + 16) = 0;
          *v41 = v44;
          v26 = *(JSC::StructureShape **)(v43 + 16);
          *(_QWORD *)(v43 + 16) = 0;
          if (!v26)
            goto LABEL_22;
          if (*(_DWORD *)v26 == 1)
          {
LABEL_24:
            JSC::StructureShape::~StructureShape(v26, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
            goto LABEL_22;
          }
          --*(_DWORD *)v26;
        }
        else
        {
          v25 = v10 + 24 * v21;
          v26 = *(JSC::StructureShape **)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              goto LABEL_24;
            --*(_DWORD *)v26;
          }
        }
      }
LABEL_22:
      if (++v21 == v11)
        goto LABEL_28;
    }
  }
  if (v10)
LABEL_28:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashTable<JSC::Structure *,WTF::KeyValuePair<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>>,WTF::DefaultHash<JSC::Structure *>,WTF::HashMap<JSC::Structure *,WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>,WTF::DefaultHash<JSC::Structure *>,WTF::HashTraits<JSC::Structure *>,WTF::HashTraits<WTF::RefPtr<JSC::StructureShape,WTF::RawPtrTraits<JSC::StructureShape>,WTF::DefaultRefDerefTraits<JSC::StructureShape>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Structure *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  JSC::StructureShape *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  JSC::StructureShape *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = (uint64_t *)(v26 + 16 * v33);
          v36 = (JSC::StructureShape *)v35[1];
          v35[1] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
            {
              JSC::StructureShape::~StructureShape(v36, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          *v35 = *v22;
          v37 = v10 + 16 * v21;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v35[1] = v38;
          v25 = *(JSC::StructureShape **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (!v25)
            goto LABEL_22;
          if (*(_DWORD *)v25 == 1)
          {
LABEL_24:
            JSC::StructureShape::~StructureShape(v25, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
            goto LABEL_22;
          }
          --*(_DWORD *)v25;
        }
        else
        {
          v24 = v10 + 16 * v21;
          v25 = *(JSC::StructureShape **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
              goto LABEL_24;
            --*(_DWORD *)v25;
          }
        }
      }
LABEL_22:
      if (++v21 == v11)
        goto LABEL_28;
    }
  }
  if (v10)
LABEL_28:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void JSC::TypeSet::addTypeInformation(uint64_t a1, WTF::AtomStringImpl *a2, JSC::StructureShape **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::StructureShape *v8;
  uint64_t v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF **v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  BOOL v24;
  WTF *v26;
  JSC::StructureShape *v27;
  WTF *v28;
  BOOL v29;
  BOOL v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::StructureShape *v55;
  JSC::StructureShape *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::StructureShape *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  JSC::StructureShape *v98;

  *(_WORD *)(a1 + 6) |= (unsigned __int16)a2;
  if (!a4)
    return;
  if (((unsigned __int16)a2 & 0xFF7E) != 0)
    return;
  v8 = *a3;
  if (!*a3)
    return;
  v98 = *a3;
  *a3 = 0;
  if ((a5 & 1) != 0)
    goto LABEL_21;
  v12 = (uint64_t *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v11 & 1) == 0)
  {
    if (v13 != (unsigned int *)a4)
      goto LABEL_7;
LABEL_84:
    v98 = 0;
LABEL_85:
    if (*(_DWORD *)v8 == 1)
    {
      JSC::StructureShape::~StructureShape(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      --*(_DWORD *)v8;
    }
    return;
  }
  v59 = *v13;
  if ((_DWORD)v59)
  {
    if (*((_QWORD *)v13 + 1) == a4)
      goto LABEL_84;
    v60 = 0;
    v61 = v13 + 4;
    while (v59 - 1 != v60)
    {
      v62 = *(_QWORD *)&v61[2 * v60++];
      if (v62 == a4)
      {
        if (v60 < v59)
          goto LABEL_63;
        break;
      }
    }
  }
LABEL_7:
  v14 = (unsigned __int8 *)(a1 + 4);
  if (__ldaxr((unsigned __int8 *)(a1 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_11:
  v16 = *v12;
  if ((*v12 & 1) != 0)
  {
    WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)(a1 + 24), a4);
  }
  else if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != a4)
  {
    if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v57 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v57 = 0x400000002;
      v58 = *v12;
      *(_QWORD *)(v57 + 8) = *v12 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(v57 + 16) = a4;
      v17 = v58 & 2 | v57 | 1;
    }
    else
    {
      v17 = *v12 & 2 | a4;
    }
    *v12 = v17;
  }
  v18 = __ldxr(v14);
  if (v18 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 4), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_21:
  v8 = v98;
  JSC::StructureShape::propertyHash((JSC::StructureShape *)&v97, v98, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = *(WTF ***)(a1 + 8);
  v20 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v20)
  {
    v39 = 0;
    v40 = 0;
LABEL_55:
    if (v40 == *(_DWORD *)(a1 + 16))
    {
      v41 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 8), v39 + 1, (unint64_t)&v98);
      v42 = *(unsigned int *)(a1 + 20);
      v43 = v42 + 1;
      v44 = *(_QWORD *)(a1 + 8);
      v45 = *(_QWORD *)v41;
      *(_QWORD *)v41 = 0;
      *(_QWORD *)(v44 + 8 * v42) = v45;
    }
    else
    {
      v43 = v40 + 1;
      v46 = *(_QWORD *)(a1 + 8);
      v98 = 0;
      *(_QWORD *)(v46 + 8 * v39) = v8;
    }
    *(_DWORD *)(a1 + 20) = v43;
LABEL_59:
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    v8 = v98;
    goto LABEL_63;
  }
  v21 = &v19[v20];
  v22 = v97;
  do
  {
    JSC::StructureShape::propertyHash((JSC::StructureShape *)&v96, *v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    v23 = v96;
    v24 = v96 == v22;
    if (v22)
    {
      if (v96 && v96 != v22)
      {
        v24 = WTF::equal(v96, v22, (const WTF::StringImpl *)a3);
LABEL_30:
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          if (v24)
            goto LABEL_59;
        }
        else
        {
          *(_DWORD *)v23 -= 2;
          if (v24)
            goto LABEL_59;
        }
        goto LABEL_32;
      }
    }
    if (v96)
      goto LABEL_30;
    if (!v22)
      goto LABEL_59;
LABEL_32:
    v26 = *v19;
    if (*v19)
    {
      v27 = v8;
      while (1)
      {
        v28 = (WTF *)*((_QWORD *)v26 + 5);
        a2 = (WTF::AtomStringImpl *)*((_QWORD *)v27 + 5);
        if (v28 != a2)
        {
          v29 = !v28 || a2 == 0;
          if (v29 || !WTF::equal(v28, a2, (const WTF::StringImpl *)a3))
            break;
        }
        v26 = (WTF *)*((_QWORD *)v26 + 3);
        v27 = (JSC::StructureShape *)*((_QWORD *)v27 + 3);
        if (v26)
          v30 = v27 == 0;
        else
          v30 = 1;
        if (v30)
        {
          if ((unint64_t)v26 | (unint64_t)v27)
            break;
          v55 = *v19;
          *(_DWORD *)v55 = *(_DWORD *)*v19 + 1;
          v95 = v55;
          JSC::StructureShape::merge((uint64_t *)&v96, (uint64_t)&v95, (uint64_t)&v98);
          v56 = *v19;
          *v19 = v96;
          if (v56)
          {
            if (*(_DWORD *)v56 == 1)
            {
              JSC::StructureShape::~StructureShape(v56, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
            }
            else
            {
              --*(_DWORD *)v56;
            }
          }
          if (*(_DWORD *)v55 == 1)
          {
            JSC::StructureShape::~StructureShape(v55, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
          }
          else
          {
            --*(_DWORD *)v55;
          }
          goto LABEL_59;
        }
      }
    }
    ++v19;
  }
  while (v19 != v21);
  v39 = *(unsigned int *)(a1 + 20);
  if (v39 <= 0x63)
  {
    v40 = *(_DWORD *)(a1 + 20);
    goto LABEL_55;
  }
  if (!*(_BYTE *)(a1 + 5))
    *(_BYTE *)(a1 + 5) = 1;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_63:
  v98 = 0;
  if (v8)
    goto LABEL_85;
}

void JSC::StructureShape::propertyHash(JSC::StructureShape *this, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD **v9;
  _DWORD *v10;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  float v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  char v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  WTF::StringImpl **v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t *v64;
  unint64_t v65;
  BOOL v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  WTF::StringImpl *v74;
  _QWORD *v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  _DWORD *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int8x16_t *v135;
  unint64_t v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  unsigned int v149;
  char v150;
  uint64_t v151;
  int8x16_t v152;

  v9 = (_DWORD **)a2[4];
  if (v9)
  {
    v10 = *v9;
    if (v10)
      *v10 += 2;
    *(_QWORD *)this = v10;
    return;
  }
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 1;
  v152.i8[0] = 58;
  WTF::StringBuilder::append((uint64_t)&v147, &v152, 1uLL, a4, a5, a6, a7, a8);
  v22 = a2[5];
  if (!v149 && !v148)
  {
    if (v22)
      *(_DWORD *)v22 += 2;
    v23 = v147;
    v147 = (WTF::StringImpl *)v22;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        v22 = a2[5];
        if (!v22)
          goto LABEL_14;
        goto LABEL_13;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (!v22)
    {
LABEL_14:
      v149 = v22;
      goto LABEL_15;
    }
LABEL_13:
    LODWORD(v22) = *(_DWORD *)(v22 + 4);
    goto LABEL_14;
  }
  if (v22)
  {
    v135 = *(int8x16_t **)(v22 + 8);
    v136 = *(unsigned int *)(v22 + 4);
    if ((*(_BYTE *)(v22 + 16) & 4) == 0)
    {
      WTF::StringBuilder::append((uint64_t)&v147, v135, v136, v14, v15, v16, v17, v18);
      goto LABEL_15;
    }
  }
  else
  {
    v135 = 0;
    v136 = 0;
  }
  WTF::StringBuilder::append((uint64_t)&v147, v135, v136, v14, v15, v16, v17, v18);
LABEL_15:
  v152.i8[0] = 58;
  if (v148 && ((v24 = v149, v149 < *((_DWORD *)v148 + 1)) ? (v25 = v147 == 0) : (v25 = 0), v25))
  {
    v26 = *((_DWORD *)v148 + 4);
    v27 = *((_QWORD *)v148 + 1);
    ++v149;
    if ((v26 & 4) != 0)
      *(_BYTE *)(v27 + v24) = 58;
    else
      *(_WORD *)(v27 + 2 * v24) = 58;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v147, &v152, 1uLL, v14, v15, v16, v17, v18);
  }
  v28 = a2[1];
  if (v28)
  {
    v29 = *(unsigned int *)(v28 - 4);
    v30 = (WTF::StringImpl **)(v28 + 8 * v29);
    if (*(_DWORD *)(v28 - 12))
    {
      v31 = (WTF::StringImpl **)a2[1];
      if ((_DWORD)v29)
      {
        v32 = 8 * v29;
        v31 = (WTF::StringImpl **)a2[1];
        while ((unint64_t)*v31 + 1 <= 1)
        {
          ++v31;
          v32 -= 8;
          if (!v32)
          {
            v31 = v30;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_30;
    }
    v31 = (WTF::StringImpl **)(v28 + 8 * v29);
  }
  else
  {
    v31 = 0;
    v29 = 0;
  }
  v30 = (WTF::StringImpl **)(v28 + 8 * v29);
  if (v28)
  {
LABEL_30:
    v33 = (WTF::StringImpl **)(v28 + 8 * *(unsigned int *)(v28 - 4));
    goto LABEL_34;
  }
  v33 = 0;
LABEL_34:
  while (v31 != v33)
  {
    v34 = *v31;
    if (*v31)
    {
      *(_DWORD *)v34 += 2;
      WTF::StringImpl::replace((uint64_t)v34, 0x3Au, "\\:", 2uLL, &v152, v19, v20, v21);
      v35 = v152.i64[0];
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
      if (!v149 && !v148)
      {
        if (v35)
        {
          v36 = 0;
          *(_DWORD *)v35 += 2;
        }
        else
        {
LABEL_70:
          v36 = 1;
        }
        v37 = v147;
        v147 = (WTF::StringImpl *)v35;
        if (v37)
        {
          if (*(_DWORD *)v37 != 2)
          {
            *(_DWORD *)v37 -= 2;
            goto LABEL_45;
          }
          WTF::StringImpl::~StringImpl(v37, v12, v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          if ((v36 & 1) != 0)
          {
LABEL_60:
            v38 = 0;
LABEL_47:
            v149 = v38;
            if (v35)
              goto LABEL_48;
            goto LABEL_50;
          }
        }
        else
        {
LABEL_45:
          if ((v36 & 1) != 0)
            goto LABEL_60;
        }
        v38 = *(_DWORD *)(v35 + 4);
        goto LABEL_47;
      }
      if (v35)
      {
        v64 = *(int8x16_t **)(v35 + 8);
        v65 = *(unsigned int *)(v35 + 4);
        if ((*(_BYTE *)(v35 + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)&v147, v64, v65, v14, v15, v16, v17, v18);
LABEL_48:
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, v12, v13, v14, v15, v16, v17, v18);
            WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
          goto LABEL_50;
        }
        goto LABEL_63;
      }
    }
    else
    {
      v35 = 0;
      if (v149)
        v66 = 0;
      else
        v66 = v148 == 0;
      if (v66)
        goto LABEL_70;
    }
    v64 = 0;
    v65 = 0;
LABEL_63:
    WTF::StringBuilder::append((uint64_t)&v147, v64, v65, v14, v15, v16, v17, v18);
    if (v35)
      goto LABEL_48;
LABEL_50:
    v39 = v31 + 1;
    v31 = v30;
    if (v39 != v30)
    {
      v31 = v39;
      while ((unint64_t)*v31 + 1 <= 1)
      {
        if (++v31 == v30)
        {
          v31 = v30;
          break;
        }
      }
    }
  }
  if (a2[3])
  {
    JSC::StructureShape::propertyHash((JSC::StructureShape *)&v146);
    v152.i32[2] = 10;
    v67 = (WTF::StringImpl *)v146;
    v151 = v146;
    v152.i64[0] = (uint64_t)":__proto__";
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v147, (int8x16_t **)&v152, &v151, v68, v69, v70, v71, v72);
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::~StringImpl(v67, v73, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      else
      {
        *(_DWORD *)v67 -= 2;
      }
    }
  }
  v74 = v147;
  if (v147)
    goto LABEL_78;
  if ((v149 & 0x80000000) == 0 && v148 && *((_DWORD *)v148 + 1) > v149 + (v149 >> 2))
  {
    if ((*((_BYTE *)v148 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v147, (WTF::AtomStringImpl *)v149, v13, v14, v15, v16, v17, v18);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v147, (WTF::AtomStringImpl *)v149, v13, v14, v15, v16, v17, v18);
    v137 = v147;
    v147 = v148;
    v148 = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2)
      {
        WTF::StringImpl::~StringImpl(v137, v128, v129, v130, v131, v132, v133, v134);
        WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
      }
      else
      {
        *(_DWORD *)v137 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v147);
  v74 = v147;
  if (v147)
LABEL_78:
    *(_DWORD *)v74 += 2;
  v75 = (_QWORD *)WTF::fastCompactMalloc((WTF *)8);
  *v75 = v74;
  v83 = (WTF::StringImpl **)a2[4];
  a2[4] = v75;
  if (v83)
  {
    v84 = *v83;
    *v83 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
        WTF::StringImpl::~StringImpl(v84, v76, v77, v78, v79, v80, v81, v82);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      else
      {
        *(_DWORD *)v84 -= 2;
      }
    }
    WTF::fastFree((unint64_t)v83, v76, v77, v78, v79, v80, v81, v82);
    v75 = (_QWORD *)a2[4];
  }
  v85 = (_DWORD *)*v75;
  if (*v75)
    *v85 += 2;
  *(_QWORD *)this = v85;
  v86 = v148;
  v148 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v147;
  v147 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
}

void JSC::StructureShape::merge(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  JSC::StructureShape *v64;
  JSC::StructureShape *v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::StructureShape *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  JSC::StructureShape *v114;
  JSC::StructureShape *v115;
  _QWORD v116[3];

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v6 = 1;
  *(_WORD *)(v6 + 4) = 0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *a1 = v6;
  v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    v16 = v14 + 8 * v15;
    if (*(_DWORD *)(v14 - 12))
    {
      v17 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if ((_DWORD)v15)
      {
        v18 = 8 * v15;
        v17 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 8;
          v18 -= 8;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v17 = v14 + 8 * v15;
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = v14 + 8 * v15;
  if (v14)
  {
LABEL_8:
    v19 = v14 + 8 * *(unsigned int *)(v14 - 4);
    goto LABEL_12;
  }
  v19 = 0;
LABEL_12:
  while (v17 != v19)
  {
    v24 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    if (v24)
    {
      v25 = *(_QWORD *)v17;
      v26 = *(_DWORD *)(*(_QWORD *)v17 + 16);
      if ((v26 & 0x20) != 0)
        v26 = *(_DWORD *)(v25 + 32);
      v27 = *(_DWORD *)(v24 - 8);
      v21 = v27 & (v26 >> 8);
      v22 = *(_QWORD *)(v24 + 8 * v21);
      if (v22 == v25)
      {
LABEL_23:
        v23 = (uint64_t *)(*a1 + 8);
        goto LABEL_24;
      }
      v20 = 1;
      while (v22)
      {
        v21 = (v21 + v20) & v27;
        v22 = *(_QWORD *)(v24 + 8 * v21);
        ++v20;
        if (v22 == v25)
          goto LABEL_23;
      }
    }
    v23 = (uint64_t *)(*a1 + 16);
LABEL_24:
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(v23, v17, v9, v10, v11, v12, v13, (uint64_t)v116);
    v28 = v17 + 8;
    v17 = v16;
    if (v28 != v16)
    {
      v17 = v28;
      while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  v29 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 - 4);
    v31 = v29 + 8 * v30;
    if (*(_DWORD *)(v29 - 12))
    {
      v32 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      if ((_DWORD)v30)
      {
        v33 = 8 * v30;
        v32 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
        {
          v32 += 8;
          v33 -= 8;
          if (!v33)
          {
            v32 = v31;
            goto LABEL_37;
          }
        }
      }
      goto LABEL_37;
    }
    v32 = v29 + 8 * v30;
  }
  else
  {
    v32 = 0;
    v30 = 0;
  }
  v31 = v29 + 8 * v30;
  if (v29)
  {
LABEL_37:
    v34 = v29 + 8 * *(unsigned int *)(v29 - 4);
    goto LABEL_41;
  }
  v34 = 0;
LABEL_41:
  if (v34 != v32)
  {
    v35 = *a1;
    do
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
      {
        v37 = *(_QWORD *)v32;
        v38 = *(_DWORD *)(*(_QWORD *)v32 + 16);
        if ((v38 & 0x20) != 0)
          v38 = *(_DWORD *)(v37 + 32);
        v39 = *(_DWORD *)(v36 - 8);
        v40 = v39 & (v38 >> 8);
        v41 = *(_QWORD *)(v36 + 8 * v40);
        if (v41 == v37)
          goto LABEL_47;
        v43 = 1;
        while (v41)
        {
          v40 = (v40 + v43) & v39;
          v41 = *(_QWORD *)(v36 + 8 * v40);
          ++v43;
          if (v41 == v37)
            goto LABEL_47;
        }
      }
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v35 + 16), v32, v9, v10, v11, v12, v13, (uint64_t)v116);
      v35 = *a1;
LABEL_47:
      v42 = v32 + 8;
      v32 = v31;
      if (v42 != v31)
      {
        v32 = v42;
        while ((unint64_t)(*(_QWORD *)v32 + 1) <= 1)
        {
          v32 += 8;
          if (v32 == v31)
          {
            v32 = v31;
            break;
          }
        }
      }
    }
    while (v32 != v34);
  }
  v44 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v44)
  {
    v45 = *(unsigned int *)(v44 - 4);
    v46 = (_QWORD *)(v44 + 8 * v45);
    if (*(_DWORD *)(v44 - 12))
    {
      v47 = *(_QWORD **)(*(_QWORD *)a2 + 16);
      if ((_DWORD)v45)
      {
        v48 = 8 * v45;
        v47 = *(_QWORD **)(*(_QWORD *)a2 + 16);
        while ((unint64_t)(*v47 + 1) <= 1)
        {
          ++v47;
          v48 -= 8;
          if (!v48)
          {
            v47 = v46;
            goto LABEL_66;
          }
        }
      }
      goto LABEL_66;
    }
    v47 = (_QWORD *)(v44 + 8 * v45);
  }
  else
  {
    v47 = 0;
    v45 = 0;
  }
  v46 = (_QWORD *)(v44 + 8 * v45);
  if (v44)
  {
LABEL_66:
    v49 = (_QWORD *)(v44 + 8 * *(unsigned int *)(v44 - 4));
    goto LABEL_70;
  }
  v49 = 0;
LABEL_70:
  while (v47 != v49)
  {
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(*a1 + 16), (uint64_t)v47, v9, v10, v11, v12, v13, (uint64_t)v116);
    v50 = v47 + 1;
    v47 = v46;
    if (v50 != v46)
    {
      v47 = v50;
      while ((unint64_t)(*v47 + 1) <= 1)
      {
        if (++v47 == v46)
        {
          v47 = v46;
          break;
        }
      }
    }
  }
  v51 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (v51)
  {
    v52 = *(unsigned int *)(v51 - 4);
    v53 = (_QWORD *)(v51 + 8 * v52);
    if (*(_DWORD *)(v51 - 12))
    {
      v54 = *(_QWORD **)(*(_QWORD *)a3 + 16);
      if ((_DWORD)v52)
      {
        v55 = 8 * v52;
        v54 = *(_QWORD **)(*(_QWORD *)a3 + 16);
        while ((unint64_t)(*v54 + 1) <= 1)
        {
          ++v54;
          v55 -= 8;
          if (!v55)
          {
            v54 = v53;
            goto LABEL_84;
          }
        }
      }
      goto LABEL_84;
    }
    v54 = (_QWORD *)(v51 + 8 * v52);
  }
  else
  {
    v54 = 0;
    v52 = 0;
  }
  v53 = (_QWORD *)(v51 + 8 * v52);
  if (v51)
  {
LABEL_84:
    v56 = (_QWORD *)(v51 + 8 * *(unsigned int *)(v51 - 4));
    goto LABEL_88;
  }
  v56 = 0;
LABEL_88:
  while (v54 != v56)
  {
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(*a1 + 16), (uint64_t)v54, v9, v10, v11, v12, v13, (uint64_t)v116);
    v57 = v54 + 1;
    v54 = v53;
    if (v57 != v53)
    {
      v54 = v57;
      while ((unint64_t)(*v54 + 1) <= 1)
      {
        if (++v54 == v53)
        {
          v54 = v53;
          break;
        }
      }
    }
  }
  v58 = *a1;
  v59 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 40);
  if (v59 && (v60 = *(_DWORD *)v59, v61 = *((_DWORD *)v59 + 1), *(_DWORD *)v59 += 2, v61))
  {
    *(_DWORD *)v59 = v60 + 4;
    v62 = (uint64_t)v59;
  }
  else
  {
    v62 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v62 = 0x600000002;
    *(_QWORD *)(v62 + 8) = "Object";
    *(_DWORD *)(v62 + 16) = 4;
  }
  v63 = *(WTF::StringImpl **)(v58 + 40);
  *(_QWORD *)(v58 + 40) = v62;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      if (!v59)
        goto LABEL_105;
      goto LABEL_103;
    }
    *(_DWORD *)v63 -= 2;
  }
  if (!v59)
    goto LABEL_105;
LABEL_103:
  if (*(_DWORD *)v59 == 2)
  {
    WTF::StringImpl::~StringImpl(v59, v7, v8, v9, v10, v11, v12, v13);
    WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
  }
  else
  {
    *(_DWORD *)v59 -= 2;
  }
LABEL_105:
  v64 = *(JSC::StructureShape **)(*(_QWORD *)a2 + 24);
  if (v64)
  {
    v65 = *(JSC::StructureShape **)(*(_QWORD *)a3 + 24);
    if (!v65)
    {
      __break(0xC471u);
      JUMPOUT(0x198C26DECLL);
    }
    ++*(_DWORD *)v64;
    v114 = v65;
    v115 = v64;
    ++*(_DWORD *)v65;
    JSC::StructureShape::merge(v116, &v115, &v114);
    v73 = *(JSC::StructureShape **)(v58 + 24);
    *(_QWORD *)(v58 + 24) = v116[0];
    if (v73)
    {
      if (*(_DWORD *)v73 == 1)
      {
        JSC::StructureShape::~StructureShape(v73, v66, v67, v68, v69, v70, v71, v72);
        WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
      }
      else
      {
        --*(_DWORD *)v73;
      }
    }
    if (*(_DWORD *)v65 == 1)
    {
      JSC::StructureShape::~StructureShape(v65, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      --*(_DWORD *)v65;
    }
    if (*(_DWORD *)v64 == 1)
    {
      JSC::StructureShape::~StructureShape(v64, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      --*(_DWORD *)v64;
    }
  }
  *(_BYTE *)(v58 + 4) = 1;
}

void JSC::TypeSet::invalidateCache(JSC::TypeSet *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v10 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  v12 = *((_QWORD *)this + 3);
  v13 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v12 & 1) == 0)
  {
    if (!v13)
      goto LABEL_25;
    if ((v12 & 8) != 0)
    {
      if ((*((_BYTE *)v13 - 79) & 1) != 0)
        goto LABEL_25;
    }
    else if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
           && ((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
    {
      goto LABEL_25;
    }
LABEL_23:
    v12 = *((_QWORD *)this + 3);
    if ((v12 & 1) == 0)
    {
LABEL_24:
      *((_QWORD *)this + 3) = v12 & 2;
      goto LABEL_25;
    }
LABEL_30:
    WTF::fastFree(v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v12 = *((_QWORD *)this + 3);
    goto LABEL_24;
  }
  v14 = *v13;
  if (!*v13)
    goto LABEL_30;
  v15 = 0;
  v16 = v13 + 2;
  do
  {
    v17 = *(_QWORD *)&v16[2 * v15];
    if ((v17 & 8) == 0)
    {
      if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
      {
        v14 = *v13;
        if (((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        v14 = *v13;
      }
LABEL_16:
      v18 = v15;
      *v13 = --v14;
      --v15;
      *(_QWORD *)&v16[2 * v18] = *(_QWORD *)&v16[2 * v14];
      goto LABEL_17;
    }
    if ((*(_BYTE *)(v17 - 79) & 1) == 0)
      goto LABEL_16;
LABEL_17:
    ++v15;
  }
  while (v15 < v14);
  if (!v14)
    goto LABEL_23;
LABEL_25:
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v10))
LABEL_29:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::TypeSet::dumpTypes(JSC::TypeSet *this@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _OWORD *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  JSC::StructureShape **v46;
  JSC::StructureShape *v47;
  WTF::AtomStringImpl *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int8x16_t *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  WTF::AtomStringImpl *v69;
  int v70;
  _BYTE *v71;
  _BYTE *v72;
  char *v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  __int16 v82;
  char *v83;
  int8x16_t v84;
  int8x16_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  JSC::StructureShape *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int128 *v109;
  unsigned __int128 *v110;
  unsigned __int128 v111;
  char v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  JSC::StructureShape **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  JSC::StructureShape **v214;
  JSC::StructureShape **v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  unsigned int v219;
  char v220;
  int8x16_t v221;
  uint64_t v222;
  unsigned int v223;
  char v224;
  int8x16x2_t v225;
  int8x16x2_t v226;
  int8x16x2_t v227;
  int8x16x2_t v228;

  v10 = *((_WORD *)this + 3);
  if (!v10)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x1500000002;
    *(_QWORD *)(v12 + 8) = "(Unreached Statement)";
    *(_DWORD *)(v12 + 16) = 4;
    *a9 = v12;
    return;
  }
  v217 = 0;
  v218 = 0;
  v219 = 0;
  v220 = 1;
  if ((v10 & 1) != 0)
  {
    v13 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)9, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (v13)
    {
      *(_BYTE *)(v13 + 8) = 32;
      *(_QWORD *)v13 = *(_QWORD *)"Function ";
    }
    v10 = *((_WORD *)this + 3);
    if ((v10 & 2) == 0)
    {
LABEL_4:
      if ((v10 & 4) == 0)
        goto LABEL_5;
      goto LABEL_25;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_4;
  }
  if ((v219 & 0x80000000) == 0)
  {
    v14 = v218;
    if ((v218 || (v14 = v217) != 0) && (*((_BYTE *)v14 + 16) & 4) == 0)
    {
      v15 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 10), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v15)
      {
        *(_OWORD *)v15 = xmmword_199159EB0;
        *(_DWORD *)(v15 + 16) = 2097252;
      }
    }
    else
    {
      v16 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 10), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v16)
      {
        *(_WORD *)(v16 + 8) = 8292;
        *(_QWORD *)v16 = *(_QWORD *)"Undefined ";
      }
    }
  }
  v10 = *((_WORD *)this + 3);
  if ((v10 & 4) == 0)
  {
LABEL_5:
    if ((v10 & 8) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_25:
  if ((v219 & 0x80000000) == 0)
  {
    v17 = v218;
    if ((v218 || (v17 = v217) != 0) && (*((_BYTE *)v17 + 16) & 4) == 0)
    {
      v18 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 5), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v18)
      {
        *(_QWORD *)v18 = 0x6C006C0075004ELL;
        *(_WORD *)(v18 + 8) = 32;
      }
    }
    else
    {
      v19 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 5), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v19)
      {
        *(_BYTE *)(v19 + 4) = 32;
        *(_DWORD *)v19 = 1819047246;
      }
    }
  }
  v10 = *((_WORD *)this + 3);
  if ((v10 & 8) == 0)
  {
LABEL_6:
    if ((v10 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_34:
  if ((v219 & 0x80000000) == 0)
  {
    v20 = v218;
    if ((v218 || (v20 = v217) != 0) && (*((_BYTE *)v20 + 16) & 4) == 0)
    {
      v21 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v21)
        *v21 = xmmword_199159EC0;
    }
    else
    {
      v22 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v22)
        *v22 = 0x206E61656C6F6F42;
    }
  }
  v10 = *((_WORD *)this + 3);
  if ((v10 & 0x10) == 0)
  {
LABEL_7:
    if ((v10 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_52;
  }
LABEL_43:
  if ((v219 & 0x80000000) == 0)
  {
    v23 = v218;
    if ((v218 || (v23 = v217) != 0) && (*((_BYTE *)v23 + 16) & 4) == 0)
    {
      v24 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v24)
      {
        *(_QWORD *)v24 = 0x490079006E0041;
        *(_DWORD *)(v24 + 8) = 7602286;
        *(_WORD *)(v24 + 12) = 32;
      }
    }
    else
    {
      v25 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v25)
      {
        *(_DWORD *)((char *)v25 + 3) = 544501321;
        *v25 = 1232694849;
      }
    }
  }
  v10 = *((_WORD *)this + 3);
  if ((v10 & 0x20) == 0)
  {
LABEL_8:
    if ((v10 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_61;
  }
LABEL_52:
  if ((v219 & 0x80000000) == 0)
  {
    v26 = v218;
    if ((v218 || (v26 = v217) != 0) && (*((_BYTE *)v26 + 16) & 4) == 0)
    {
      v27 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v27)
      {
        *(_QWORD *)v27 = 0x62006D0075004ELL;
        *(_DWORD *)(v27 + 8) = 7471205;
        *(_WORD *)(v27 + 12) = 32;
      }
    }
    else
    {
      v28 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v28)
      {
        *(_DWORD *)((char *)v28 + 3) = 544367970;
        *v28 = 1651340622;
      }
    }
  }
  v10 = *((_WORD *)this + 3);
  if ((v10 & 0x40) == 0)
  {
LABEL_9:
    if ((v10 & 0x80) == 0)
      goto LABEL_10;
LABEL_70:
    if ((v219 & 0x80000000) == 0)
    {
      v32 = v218;
      if ((v218 || (v32 = v217) != 0) && (*((_BYTE *)v32 + 16) & 4) == 0)
      {
        v33 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v33)
        {
          *(_QWORD *)v33 = 0x65006A0062004FLL;
          *(_DWORD *)(v33 + 8) = 7602275;
          *(_WORD *)(v33 + 12) = 32;
        }
      }
      else
      {
        v34 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v34)
        {
          *(_DWORD *)((char *)v34 + 3) = 544498533;
          *v34 = 1701470799;
        }
      }
    }
    if ((*((_WORD *)this + 3) & 0x100) == 0)
      goto LABEL_87;
    goto LABEL_79;
  }
LABEL_61:
  if ((v219 & 0x80000000) == 0)
  {
    v29 = v218;
    if ((v218 || (v29 = v217) != 0) && (*((_BYTE *)v29 + 16) & 4) == 0)
    {
      v30 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v30)
      {
        *(_QWORD *)v30 = 0x69007200740053;
        *(_DWORD *)(v30 + 8) = 6750318;
        *(_WORD *)(v30 + 12) = 32;
      }
    }
    else
    {
      v31 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v31)
      {
        *(_DWORD *)((char *)v31 + 3) = 543649385;
        *v31 = 1769108563;
      }
    }
  }
  v10 = *((_WORD *)this + 3);
  if ((v10 & 0x80) != 0)
    goto LABEL_70;
LABEL_10:
  if ((v10 & 0x100) != 0)
  {
LABEL_79:
    if ((v219 & 0x80000000) == 0)
    {
      v35 = v218;
      if ((v218 || (v35 = v217) != 0) && (*((_BYTE *)v35 + 16) & 4) == 0)
      {
        v36 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v36)
        {
          *(_QWORD *)v36 = 0x62006D00790053;
          *(_DWORD *)(v36 + 8) = 7077999;
          *(_WORD *)(v36 + 12) = 32;
        }
      }
      else
      {
        v37 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v37)
        {
          *(_DWORD *)((char *)v37 + 3) = 543977314;
          *v37 = 1651341651;
        }
      }
    }
  }
LABEL_87:
  v38 = (uint64_t *)*((_QWORD *)this + 1);
  v39 = *((unsigned int *)this + 5);
  if ((_DWORD)v39)
  {
    v40 = 8 * v39;
    do
    {
      v41 = *v38++;
      v221.i64[1] = *(_QWORD *)(v41 + 40);
      v221.i8[0] = 32;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v217, &v221.i64[1], v221.i8, a4, a5, a6, a7, a8);
      v40 -= 8;
    }
    while (v40);
    if (*((_DWORD *)this + 5))
    {
      if ((v219 & 0x80000000) == 0)
      {
        v42 = v218;
        if ((v218 || (v42 = v217) != 0) && (*((_BYTE *)v42 + 16) & 4) == 0)
        {
          v43 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 14), (uint64_t)a3, a4, a5, a6, a7, a8);
          if (v43)
          {
            *(_OWORD *)v43 = xmmword_199159ED0;
            *(_QWORD *)(v43 + 16) = 0x3A007300650072;
            *(_DWORD *)(v43 + 24) = 2097243;
          }
        }
        else
        {
          v44 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 14), (uint64_t)a3, a4, a5, a6, a7, a8);
          if (v44)
            qmemcpy(v44, "\nStructures:[ ", 14);
        }
      }
      v45 = *((unsigned int *)this + 5);
      if ((_DWORD)v45)
      {
        v46 = (JSC::StructureShape **)*((_QWORD *)this + 1);
        v213 = a9;
        v214 = &v46[v45];
        while (1)
        {
          v215 = v46;
          v47 = *v46;
          v221.i64[1] = 0;
          v222 = 0;
          v223 = 0;
          v224 = 1;
          if (v47)
            break;
          v221.i8[0] = 123;
          WTF::StringBuilder::append((uint64_t)&v221.i64[1], &v221, 1uLL, a4, a5, a6, a7, a8);
LABEL_222:
          if ((v223 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198C27DB4);
          }
          if (v223 >= 3)
            WTF::StringBuilder::shrink((WTF::StringBuilder *)&v221.u64[1], (WTF::AtomStringImpl *)(v223 - 2), v49, v50, v51, v52, v53, v54);
          v221.i8[0] = 125;
          if (v222 && ((v113 = v223, v223 < *(_DWORD *)(v222 + 4)) ? (v114 = v221.i64[1] == 0) : (v114 = 0), v114))
          {
            v115 = *(_DWORD *)(v222 + 16);
            v116 = *(_QWORD *)(v222 + 8);
            ++v223;
            v117 = v215;
            if ((v115 & 4) != 0)
              *(_BYTE *)(v116 + v113) = 125;
            else
              *(_WORD *)(v116 + 2 * v113) = 125;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v221.i64[1], &v221, 1uLL, v50, v51, v52, v53, v54);
            v117 = v215;
          }
          v118 = (WTF::StringImpl *)v221.i64[1];
          if (v221.i64[1])
            goto LABEL_234;
          if ((v223 & 0x80000000) == 0 && v222 && *(_DWORD *)(v222 + 4) > v223 + (v223 >> 2))
          {
            if ((*(_BYTE *)(v222 + 16) & 4) != 0)
              WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v221.i64[1], (WTF::AtomStringImpl *)v223, v49, v50, v51, v52, v53, v54);
            else
              WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v221.i64[1], (WTF::AtomStringImpl *)v223, v49, v50, v51, v52, v53, v54);
            v152 = (WTF::StringImpl *)v221.i64[1];
            v221.i64[1] = v222;
            v222 = 0;
            if (v152)
            {
              if (*(_DWORD *)v152 == 2)
              {
                WTF::StringImpl::~StringImpl(v152, v145, v146, v147, v148, v149, v150, v151);
                WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
              }
              else
              {
                *(_DWORD *)v152 -= 2;
              }
            }
          }
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v221.u64[1]);
          v118 = (WTF::StringImpl *)v221.i64[1];
          if (v221.i64[1])
LABEL_234:
            *(_DWORD *)v118 += 2;
          v119 = (WTF::StringImpl *)v222;
          v222 = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
            {
              WTF::StringImpl::~StringImpl(v119, v48, v49, v50, v51, v52, v53, v54);
              WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
            }
            else
            {
              *(_DWORD *)v119 -= 2;
            }
          }
          v120 = (WTF::StringImpl *)v221.i64[1];
          v221.i64[1] = 0;
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
            {
              WTF::StringImpl::~StringImpl(v120, v48, v49, v50, v51, v52, v53, v54);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v120 -= 2;
            }
          }
          v221.i64[1] = (uint64_t)v118;
          v221.i8[0] = 32;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v217, &v221.i64[1], v221.i8, v50, v51, v52, v53, v54);
          if (v118)
          {
            if (*(_DWORD *)v118 == 2)
            {
              WTF::StringImpl::~StringImpl(v118, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
            }
            else
            {
              *(_DWORD *)v118 -= 2;
            }
          }
          v46 = v117 + 1;
          if (v46 == v214)
          {
            a9 = v213;
            if (*((_DWORD *)this + 5))
            {
              v221.i8[8] = 93;
              if (!v218 || (v161 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
              {
                WTF::StringBuilder::append((uint64_t)&v217, (int8x16_t *)&v221.u64[1], 1uLL, a4, a5, a6, a7, a8);
              }
              else
              {
                v162 = *((_DWORD *)v218 + 4);
                v163 = *((_QWORD *)v218 + 1);
                ++v219;
                if ((v162 & 4) != 0)
                  *(_BYTE *)(v163 + v161) = 93;
                else
                  *(_WORD *)(v163 + 2 * v161) = 93;
              }
              if (*((_DWORD *)this + 5))
              {
                JSC::StructureShape::leastCommonAncestor((uint64_t **)this + 1, a2, a3, a4, a5, a6, a7, a8, &v216);
                LODWORD(v222) = 24;
                v164 = (WTF::StringImpl *)v216;
                v221.i64[0] = v216;
                v221.i64[1] = (uint64_t)"\nLeast Common Ancestor: ";
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v217, (int8x16_t **)&v221.i64[1], v221.i64, v165, v166, v167, v168, v169);
                if (v164)
                {
                  if (*(_DWORD *)v164 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v164, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
                  }
                  else
                  {
                    *(_DWORD *)v164 -= 2;
                  }
                }
              }
            }
            goto LABEL_273;
          }
        }
        ++*(_DWORD *)v47;
        v221.i8[0] = 123;
        WTF::StringBuilder::append((uint64_t)&v221.i64[1], &v221, 1uLL, a4, a5, a6, a7, a8);
        while (1)
        {
          v55 = *((_QWORD *)v47 + 1);
          if (v55)
          {
            v56 = *(unsigned int *)(v55 - 4);
            v57 = (uint64_t *)(v55 + 8 * v56);
            if (*(_DWORD *)(v55 - 12))
            {
              v58 = (uint64_t *)*((_QWORD *)v47 + 1);
              if ((_DWORD)v56)
              {
                v59 = 8 * v56;
                v58 = (uint64_t *)*((_QWORD *)v47 + 1);
                while ((unint64_t)(*v58 + 1) <= 1)
                {
                  ++v58;
                  v59 -= 8;
                  if (!v59)
                  {
                    v58 = v57;
                    goto LABEL_110;
                  }
                }
              }
              goto LABEL_110;
            }
            v58 = (uint64_t *)(v55 + 8 * v56);
          }
          else
          {
            v58 = 0;
            v56 = 0;
          }
          v57 = (uint64_t *)(v55 + 8 * v56);
          if (!v55)
          {
            v60 = 0;
            goto LABEL_114;
          }
LABEL_110:
          v60 = (uint64_t *)(v55 + 8 * *(unsigned int *)(v55 - 4));
LABEL_114:
          if (v60 != v58)
          {
            while (1)
            {
              v61 = *v58;
              if (*v58)
              {
                v62 = *(int8x16_t **)(v61 + 8);
                v63 = *(unsigned int *)(v61 + 4);
                v64 = v63 | ((unint64_t)((*(_DWORD *)(v61 + 16) >> 2) & 1) << 32);
                v65 = v223;
                v66 = v63 + 2;
                if (v63 >= 0xFFFFFFFE)
                  v66 = -1;
              }
              else
              {
                LODWORD(v63) = 0;
                v62 = 0;
                v66 = 2;
                v64 = 0x100000000;
                v65 = v223;
              }
              v67 = __CFADD__(v66, v65);
              v68 = v66 + v65;
              v69 = v67 ? (WTF::AtomStringImpl *)0xFFFFFFFFLL : (WTF::AtomStringImpl *)v68;
              if (v222)
                break;
              if (!v221.i64[1])
              {
                if ((v64 & 0x100000000) == 0)
                {
                  if (v65)
                  {
                    v75 = (WTF::AtomStringImpl *)MEMORY[8];
                    if ((v65 & 0x80000000) != 0)
                    {
LABEL_284:
                      __break(0xC471u);
                      JUMPOUT(0x198C27D50);
                    }
                  }
                  else
                  {
                    v75 = 0;
                  }
LABEL_143:
                  v76 = 2 * v65;
                  if (v76 >= 0x7FFFFFFF)
                    v76 = 0x7FFFFFFF;
                  if (v76 <= v69)
                    v76 = v69;
                  if (v76 <= 0x10)
                    v77 = 16;
                  else
                    v77 = v76;
                  WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>((uint64_t)&v221.i64[1], v75, v77, v50, v51, v52, v53, v54);
                  v78 = v223;
                  if ((v223 & 0x80000000) != 0)
                    goto LABEL_157;
                  v79 = *(_QWORD *)(v222 + 8);
                  v223 = v69;
                  v73 = (char *)(v79 + 2 * v78);
                  if (!v73)
                    goto LABEL_157;
LABEL_152:
                  if ((v64 & 0x100000000) != 0)
                  {
                    if (v63 >= 0x40)
                    {
                      v81 = &v73[2 * (v64 & 0xFFFFFFC0)];
                      v83 = v73;
                      do
                      {
                        v225.val[0] = *v62;
                        v84 = v62[1];
                        v226.val[0] = v62[2];
                        v85 = v62[3];
                        v62 += 4;
                        v228.val[1] = 0u;
                        v228.val[0] = v85;
                        v226.val[1] = 0u;
                        v227.val[0] = v84;
                        v225.val[1] = 0u;
                        v86 = v83;
                        vst2q_s8(v86, v225);
                        v86 += 32;
                        v227.val[1] = 0u;
                        vst2q_s8(v86, v227);
                        v87 = v83 + 64;
                        vst2q_s8(v87, v226);
                        v88 = v83 + 96;
                        vst2q_s8(v88, v228);
                        v83 += 128;
                      }
                      while (v83 != v81);
                    }
                    else
                    {
                      v81 = v73;
                    }
                    while (v81 != &v73[2 * v64])
                    {
                      v82 = v62->u8[0];
                      v62 = (int8x16_t *)((char *)v62 + 1);
                      *(_WORD *)v81 = v82;
                      v81 += 2;
                    }
                  }
                  else if ((_DWORD)v63 == 1)
                  {
                    *(_WORD *)v73 = v62->i16[0];
                  }
                  else if ((_DWORD)v63)
                  {
                    memcpy(v73, v62, 2 * v64);
                  }
                  *(_DWORD *)&v73[2 * v64] = 2097196;
                  goto LABEL_157;
                }
LABEL_124:
                v71 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v221.i64[1], v69, v49, v50, v51, v52, v53, v54);
                if (v71)
                {
                  v72 = v71;
                  if ((_DWORD)v63 == 1)
                  {
                    *v71 = v62->i8[0];
                  }
                  else if ((_DWORD)v63)
                  {
                    memcpy(v71, v62, v64);
                  }
                  *(_WORD *)&v72[v64] = 8236;
                }
                goto LABEL_157;
              }
              v70 = *(_DWORD *)(v221.i64[1] + 16);
              if ((v64 & 0x100000000) != 0)
                goto LABEL_123;
LABEL_132:
              if ((v70 & 4) != 0)
              {
                if (v65)
                {
                  v74 = v221.i64[1];
                  if (!v221.i64[1])
                    v74 = v222;
                  v75 = *(WTF::AtomStringImpl **)(v74 + 8);
                  if (!v222)
                  {
                    if ((v65 & 0x80000000) != 0)
                      goto LABEL_284;
                    goto LABEL_143;
                  }
                }
                else
                {
                  v75 = 0;
                  if (!v222)
                  {
                    v65 = 0;
                    goto LABEL_143;
                  }
                }
                v65 = *(_DWORD *)(v222 + 4);
                goto LABEL_143;
              }
              v73 = (char *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v221.i64[1], v69, v49, v50, v51, v52, v53, v54);
              if (v73)
                goto LABEL_152;
LABEL_157:
              v80 = v58 + 1;
              v58 = v57;
              if (v80 != v57)
              {
                v58 = v80;
                while ((unint64_t)(*v58 + 1) <= 1)
                {
                  if (++v58 == v57)
                  {
                    v58 = v57;
                    break;
                  }
                }
              }
              if (v58 == v60)
                goto LABEL_179;
            }
            v70 = *(_DWORD *)(v222 + 16);
            if ((v64 & 0x100000000) == 0)
              goto LABEL_132;
LABEL_123:
            if ((v70 & 4) != 0)
              goto LABEL_124;
            goto LABEL_132;
          }
LABEL_179:
          v89 = *((_QWORD *)v47 + 3);
          if (v89)
          {
            v90 = *(_QWORD *)(v89 + 40);
            if (v90)
            {
              v91 = *(_DWORD *)(v90 + 4);
              if (v91 >= 0xFFFFFFF2)
                v92 = -1;
              else
                v92 = v91 + 14;
            }
            else
            {
              v92 = 14;
            }
            v93 = v92 + v223;
            if (__CFADD__(v92, v223))
              v93 = 0xFFFFFFFFLL;
            v94 = v222;
            if ((v222 || (v94 = v221.i64[1]) != 0) && (*(_BYTE *)(v94 + 16) & 4) == 0
              || v90 && (*(_BYTE *)(v90 + 16) & 4) == 0)
            {
              v95 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v221.u64[1], (WTF::AtomStringImpl *)v93, v49, v50, v51, v52, v53, v54);
              if (v95)
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v95, (int8x16_t *)"__proto__ [", 11, v90, (int8x16_t *)"], ", 3);
            }
            else
            {
              v97 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v221.i64[1], (WTF::AtomStringImpl *)v93, v49, v50, v51, v52, v53, v54);
              if (v97)
              {
                *(_DWORD *)(v97 + 7) = 1528848223;
                *(_QWORD *)v97 = *(_QWORD *)"__proto__ [";
                v98 = (_BYTE *)(v97 + 11);
                if (v90)
                {
                  v48 = *(WTF::AtomStringImpl **)(v90 + 8);
                  v49 = *(unsigned int *)(v90 + 4);
                  if ((*(_BYTE *)(v90 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v49 == 1)
                    {
                      *v98 = *(_BYTE *)v48;
                    }
                    else if ((_DWORD)v49)
                    {
                      memcpy((void *)(v97 + 11), v48, v49);
                    }
                  }
                  else
                  {
                    if (v49 < 0x10)
                    {
                      v109 = (unsigned __int128 *)(v97 + 11);
                    }
                    else
                    {
                      v109 = (unsigned __int128 *)&v98[v49 & 0xFFFFFFF0];
                      v110 = (unsigned __int128 *)(v97 + 11);
                      do
                      {
                        v111 = (unsigned __int128)vld2q_s8((const char *)v48);
                        v48 = (WTF::AtomStringImpl *)((char *)v48 + 32);
                        *v110++ = v111;
                      }
                      while (v110 != v109);
                    }
                    while (v109 != (unsigned __int128 *)&v98[v49])
                    {
                      v112 = *(_BYTE *)v48;
                      v48 = (WTF::AtomStringImpl *)((char *)v48 + 2);
                      *(_BYTE *)v109 = v112;
                      v109 = (unsigned __int128 *)((char *)v109 + 1);
                    }
                  }
                  v99 = *(unsigned int *)(v90 + 4);
                }
                else
                {
                  v99 = 0;
                }
                v100 = &v98[v99];
                v100[2] = 32;
                *(_WORD *)v100 = 11357;
              }
            }
            v96 = (JSC::StructureShape *)*((_QWORD *)v47 + 3);
            if (v96)
              ++*(_DWORD *)v96;
          }
          else
          {
            v96 = 0;
          }
          if (*(_DWORD *)v47 == 1)
          {
            JSC::StructureShape::~StructureShape(v47, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
          }
          else
          {
            --*(_DWORD *)v47;
          }
          v47 = v96;
          if (!v96)
            goto LABEL_222;
        }
      }
    }
  }
LABEL_273:
  v170 = v217;
  if (v217)
    goto LABEL_274;
  if ((v219 & 0x80000000) == 0 && v218 && *((_DWORD *)v218 + 1) > v219 + (v219 >> 2))
  {
    if ((*((_BYTE *)v218 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)v219, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)v219, (uint64_t)a3, a4, a5, a6, a7, a8);
    v204 = v217;
    v217 = v218;
    v218 = 0;
    if (v204)
    {
      if (*(_DWORD *)v204 == 2)
      {
        WTF::StringImpl::~StringImpl(v204, v189, v190, v191, v192, v193, v194, v195);
        WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
      }
      else
      {
        *(_DWORD *)v204 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v217);
  v170 = v217;
  if (v217)
LABEL_274:
    *(_DWORD *)v170 += 2;
  *a9 = v170;
  v171 = v218;
  v218 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
    {
      WTF::StringImpl::~StringImpl(v171, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v171 -= 2;
    }
  }
  v172 = v217;
  v217 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
}

BOOL JSC::TypeSet::doesTypeConformTo(JSC::TypeSet *this, int a2)
{
  int v2;

  v2 = *((unsigned __int16 *)this + 3);
  return (v2 & ~a2) == 0 && v2 != 0;
}

void JSC::StructureShape::leastCommonAncestor(uint64_t **a1@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v10;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = *((_DWORD *)a1 + 3);
  if (v10)
  {
    v12 = **a1;
    if (v10 == 1)
    {
LABEL_3:
      v13 = *(int **)(v12 + 40);
      if (!v13)
        goto LABEL_7;
      goto LABEL_6;
    }
    v14 = 1;
    while (1)
    {
      if (*((_DWORD *)a1 + 3) <= v14)
      {
        __break(0xC471u);
        return;
      }
      v15 = (*a1)[v14];
      v16 = *(const WTF::StringImpl **)(v12 + 40);
      if (v16)
      {
        *(_DWORD *)v16 += 2;
        if (v15)
        {
          while (1)
          {
            v17 = *(WTF **)(v15 + 40);
            if (v17 == v16)
              break;
            if (v17 && WTF::equal(v17, v16, a3))
            {
              if (*(_DWORD *)v16 != 2)
              {
                *(_DWORD *)v16 -= 2;
                goto LABEL_24;
              }
              v18 = 1;
              LOBYTE(v20) = 1;
              goto LABEL_37;
            }
            v15 = *(_QWORD *)(v15 + 24);
            if (!v15)
              goto LABEL_17;
          }
LABEL_31:
          v18 = 1;
          if (v16)
          {
LABEL_32:
            v20 = 1;
            goto LABEL_33;
          }
          goto LABEL_35;
        }
      }
      else
      {
        while (v15)
        {
          if (!*(_QWORD *)(v15 + 40))
            goto LABEL_31;
          v15 = *(_QWORD *)(v15 + 24);
        }
      }
LABEL_17:
      if (!*(_QWORD *)(v12 + 24))
      {
        v19 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v19 = 0x600000002;
        *(_QWORD *)(v19 + 8) = "Object";
        *(_DWORD *)(v19 + 16) = 4;
        *a9 = v19;
        if (!v16)
          return;
        v20 = 0;
        v18 = 0;
LABEL_33:
        if (*(_DWORD *)v16 == 2)
        {
LABEL_37:
          WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
          if ((v20 & 1) == 0)
            return;
        }
        else
        {
          *(_DWORD *)v16 -= 2;
          if (!v20)
            return;
        }
        goto LABEL_35;
      }
      v18 = 0;
      v12 = *(_QWORD *)(v12 + 24);
      if (v16)
        goto LABEL_32;
LABEL_35:
      if (v18)
      {
LABEL_24:
        if (WTF::equalInternal<unsigned char>(*(_QWORD *)(v12 + 40), (unint64_t)"Object", 6))
          goto LABEL_3;
        if (++v14 >= (unint64_t)*((unsigned int *)a1 + 3))
          goto LABEL_3;
      }
    }
  }
  v13 = &WTF::StringImpl::s_emptyAtomString;
LABEL_6:
  *v13 += 2;
LABEL_7:
  *a9 = v13;
}

void JSC::TypeSet::allStructureRepresentations(JSC::TypeSet *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const void **v5;
  uint64_t v6;
  _QWORD *v7;
  JSC::StructureShape **v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = 0x600000001;
  v4[2] = 0;
  v5 = (const void **)(v4 + 2);
  v4[3] = 0;
  *a2 = v4;
  v6 = *((unsigned int *)this + 5);
  if ((_DWORD)v6)
  {
    v7 = v4;
    v8 = (JSC::StructureShape **)*((_QWORD *)this + 1);
    for (i = 8 * v6; i; i -= 8)
    {
      JSC::StructureShape::inspectorRepresentation(*v8, &v25);
      v10 = v25;
      v11 = *((unsigned int *)v7 + 7);
      if ((_DWORD)v11 == *((_DWORD *)v7 + 6))
      {
        v12 = v11 + (v11 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v11 + 1)
          v14 = v11 + 1;
        else
          v14 = v13;
        if (v14 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v15 = *v5;
        v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
        *((_DWORD *)v7 + 6) = v14;
        v7[2] = v16;
        memcpy(v16, v15, 8 * v11);
        if (v15)
        {
          if (*v5 == v15)
          {
            v7[2] = 0;
            *((_DWORD *)v7 + 6) = 0;
          }
          WTF::fastFree((unint64_t)v15, v17, v18, v19, v20, v21, v22, v23);
        }
        v11 = *((unsigned int *)v7 + 7);
        v24 = (uint64_t *)(v7[2] + 8 * v11);
      }
      else
      {
        v24 = (uint64_t *)((char *)*v5 + 8 * v11);
      }
      *v24 = v10;
      *((_DWORD *)v7 + 7) = v11 + 1;
      ++v8;
    }
  }
}

void JSC::StructureShape::inspectorRepresentation(JSC::StructureShape *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  WTF::JSONImpl::Object *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  WTF::JSONImpl::Object *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  WTF *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  WTF *v135;
  WTF *v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  WTF *v157;
  JSC::StructureShape *v158;
  char v159;
  uint64_t v160;
  WTF *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF::AtomStringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  WTF *v177;
  WTF *v178;
  JSC::StructureShape *v179;
  WTF *v180;
  WTF *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  JSC::StructureShape *v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD **v243;
  uint64_t v244;
  _DWORD *v245;
  _DWORD **v246;
  uint64_t v247;
  _DWORD *v248;
  _DWORD **v249;
  uint64_t v250;
  _DWORD *v251;
  _DWORD **v252;
  uint64_t v253;
  _DWORD *v254;
  _DWORD **v255;
  uint64_t v256;
  _DWORD *v257;
  int v258;
  JSC::StructureShape *v259;
  JSC::StructureShape *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  WTF *v264;
  WTF *v265;
  WTF::JSONImpl::Object *v266[2];
  char v267;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *a2 = v4;
  *(_QWORD *)v4 = 0x500000002;
  if (!this)
  {
    v258 = 1;
LABEL_249:
    *(_DWORD *)v4 = v258;
    return;
  }
  ++*(_DWORD *)this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v261 = StatusReg;
  do
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v6 = 0x600000001;
    *(_QWORD *)(v6 + 16) = 0;
    v7 = (uint64_t *)(v6 + 16);
    *(_QWORD *)(v6 + 24) = 0;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = 0x600000001;
    *(_QWORD *)(v8 + 16) = 0;
    v262 = v4;
    v263 = (uint64_t *)(v8 + 16);
    *(_QWORD *)(v8 + 24) = 0;
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 - 4);
      v11 = (unint64_t *)(v9 + 8 * v10);
      if (*(_DWORD *)(v9 - 12))
      {
        v12 = (unint64_t *)*((_QWORD *)this + 1);
        if ((_DWORD)v10)
        {
          v13 = 8 * v10;
          v12 = (unint64_t *)*((_QWORD *)this + 1);
          while (*v12 + 1 <= 1)
          {
            ++v12;
            v13 -= 8;
            if (!v13)
            {
              v12 = v11;
              break;
            }
          }
        }
LABEL_10:
        v14 = (unint64_t *)(v9 + 8 * *(unsigned int *)(v9 - 4));
        goto LABEL_14;
      }
      v12 = (unint64_t *)(v9 + 8 * v10);
    }
    else
    {
      v12 = 0;
      v10 = 0;
    }
    v11 = (unint64_t *)(v9 + 8 * v10);
    if (v9)
      goto LABEL_10;
    v14 = 0;
LABEL_14:
    while (v12 != v14)
    {
      v15 = *v12;
      if (*v12)
        *(_DWORD *)v15 += 2;
      v16 = (WTF::JSONImpl::Object *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = 0x400000001;
      *((_QWORD *)v16 + 1) = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      v266[0] = v16;
      v24 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v24 == *(_DWORD *)(v6 + 24))
      {
        v25 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v24 + 1, (unint64_t)v266);
        v24 = *(unsigned int *)(v6 + 28);
        v26 = *(_QWORD *)(v6 + 16);
        v27 = *v25;
        *v25 = 0;
        *(_QWORD *)(v26 + 8 * v24) = v27;
      }
      else
      {
        v28 = *v7;
        v266[0] = 0;
        *(_QWORD *)(v28 + 8 * v24) = v16;
      }
      *(_DWORD *)(v6 + 28) = v24 + 1;
      v29 = (unint64_t)v266[0];
      v266[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
        {
          switch(*(_DWORD *)(v29 + 4))
          {
            case 0:
            case 1:
            case 2:
            case 3:
              goto LABEL_41;
            case 4:
              goto LABEL_55;
            case 5:
              WTF::JSONImpl::Object::~Object((WTF::JSONImpl::Object *)v29, v17, v18, v19, v20, v21, v22, v23);
              goto LABEL_41;
            case 6:
              v259 = this;
              v40 = *(unsigned int *)(v29 + 28);
              if ((_DWORD)v40)
              {
                v41 = *(uint64_t **)(v29 + 16);
                v42 = 8 * v40;
                do
                {
                  v43 = *v41;
                  *v41 = 0;
                  if (v43)
                    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v43, v17, v18, v19, v20, v21, v22, v23);
                  ++v41;
                  v42 -= 8;
                }
                while (v42);
              }
              v44 = *(_QWORD *)(v29 + 16);
              if (v44)
              {
                *(_QWORD *)(v29 + 16) = 0;
                *(_DWORD *)(v29 + 24) = 0;
                WTF::fastFree(v44, v17, v18, v19, v20, v21, v22, v23);
              }
              this = v259;
              StatusReg = v261;
              if (*(_DWORD *)(v29 + 4) == 4)
              {
LABEL_55:
                v45 = *(WTF::StringImpl **)(v29 + 8);
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v45, v17, v18, v19, v20, v21, v22, v23);
                    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
                  }
                  else
                  {
                    *(_DWORD *)v45 -= 2;
                  }
                }
              }
LABEL_41:
              v38 = *(_QWORD *)(StatusReg + 752);
              if (v38)
              {
                if (v29 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v29 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v29)) & 1) == 0)
                {
                  if (v29 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v29 >> 24)
                  {
                    v19 = 0;
LABEL_66:
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v38, v29, 1, v19, v20, v21, v22, v23);
                    break;
                  }
                  v19 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + ((((v29 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2 * ((BYTE3(v29) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v19 != 1)
                    goto LABEL_66;
                }
                v39 = *(unsigned int *)(v38 + 8000);
                if (v39 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v38, v29, (os_unfair_lock_s *)5, v19, v20, v21, v22, v23);
                }
                else
                {
                  *(_QWORD *)(v38 + 8 * v39) = v29 | 0x5000000000000;
                  *(_DWORD *)(v38 + 8000) = v39 + 1;
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(v29, (uint64_t)&bmalloc_heap_config, 1);
              }
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198C28FCCLL);
          }
        }
        else
        {
          --*(_DWORD *)v29;
        }
      }
      if (!v15)
        goto LABEL_28;
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v17, v18, v19, v20, v21, v22, v23);
        v36 = *(_QWORD *)(StatusReg + 752);
        if (v36)
        {
          if (!(v15 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v15 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v15)) & 1) != 0)
          {
LABEL_38:
            v37 = *(unsigned int *)(v36 + 8000);
            if (v37 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v36, v15, (os_unfair_lock_s *)5, v31, v32, v33, v34, v35);
            }
            else
            {
              *(_QWORD *)(v36 + 8 * v37) = v15 | 0x5000000000000;
              *(_DWORD *)(v36 + 8000) = v37 + 1;
            }
            goto LABEL_28;
          }
          if (v15 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v15 >> 24)
          {
            v31 = 0;
          }
          else
          {
            v31 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v15 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v15) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v31 == 1)
              goto LABEL_38;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v36, v15, 1, v31, v32, v33, v34, v35);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v15, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
LABEL_28:
      v30 = v12 + 1;
      v12 = v11;
      if (v30 != v11)
      {
        v12 = v30;
        while (*v12 + 1 <= 1)
        {
          if (++v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    v54 = *((_QWORD *)this + 2);
    if (v54)
    {
      v55 = *(unsigned int *)(v54 - 4);
      v56 = (unint64_t *)(v54 + 8 * v55);
      v4 = v262;
      if (*(_DWORD *)(v54 - 12))
      {
        v57 = (unint64_t *)*((_QWORD *)this + 2);
        if ((_DWORD)v55)
        {
          v58 = 8 * v55;
          v57 = (unint64_t *)*((_QWORD *)this + 2);
          while (*v57 + 1 <= 1)
          {
            ++v57;
            v58 -= 8;
            if (!v58)
            {
              v57 = v56;
              break;
            }
          }
        }
LABEL_80:
        v59 = (unint64_t *)(v54 + 8 * *(unsigned int *)(v54 - 4));
        goto LABEL_84;
      }
      v57 = (unint64_t *)(v54 + 8 * v55);
    }
    else
    {
      v57 = 0;
      v55 = 0;
      v4 = v262;
    }
    v56 = (unint64_t *)(v54 + 8 * v55);
    if (v54)
      goto LABEL_80;
    v59 = 0;
LABEL_84:
    while (v57 != v59)
    {
      v60 = *v57;
      if (*v57)
        *(_DWORD *)v60 += 2;
      v61 = (WTF::JSONImpl::Object *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = 0x400000001;
      *((_QWORD *)v61 + 1) = v60;
      if (v60)
        *(_DWORD *)v60 += 2;
      v266[0] = v61;
      v69 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v69 == *(_DWORD *)(v8 + 24))
      {
        v70 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v263, v69 + 1, (unint64_t)v266);
        v69 = *(unsigned int *)(v8 + 28);
        v71 = *(_QWORD *)(v8 + 16);
        v72 = *v70;
        *v70 = 0;
        *(_QWORD *)(v71 + 8 * v69) = v72;
      }
      else
      {
        v73 = *v263;
        v266[0] = 0;
        *(_QWORD *)(v73 + 8 * v69) = v61;
      }
      *(_DWORD *)(v8 + 28) = v69 + 1;
      v74 = (unint64_t)v266[0];
      v266[0] = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 1)
        {
          switch(*(_DWORD *)(v74 + 4))
          {
            case 0:
            case 1:
            case 2:
            case 3:
              goto LABEL_111;
            case 4:
              goto LABEL_125;
            case 5:
              WTF::JSONImpl::Object::~Object((WTF::JSONImpl::Object *)v74, v62, v63, v64, v65, v66, v67, v68);
              goto LABEL_111;
            case 6:
              v260 = this;
              v85 = *(unsigned int *)(v74 + 28);
              if ((_DWORD)v85)
              {
                v86 = *(uint64_t **)(v74 + 16);
                v87 = 8 * v85;
                do
                {
                  v88 = *v86;
                  *v86 = 0;
                  if (v88)
                    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v88, v62, v63, v64, v65, v66, v67, v68);
                  ++v86;
                  v87 -= 8;
                }
                while (v87);
              }
              v89 = *(_QWORD *)(v74 + 16);
              if (v89)
              {
                *(_QWORD *)(v74 + 16) = 0;
                *(_DWORD *)(v74 + 24) = 0;
                WTF::fastFree(v89, v62, v63, v64, v65, v66, v67, v68);
              }
              this = v260;
              StatusReg = v261;
              if (*(_DWORD *)(v74 + 4) == 4)
              {
LABEL_125:
                v90 = *(WTF::StringImpl **)(v74 + 8);
                if (v90)
                {
                  if (*(_DWORD *)v90 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v90, v62, v63, v64, v65, v66, v67, v68);
                    WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
                  }
                  else
                  {
                    *(_DWORD *)v90 -= 2;
                  }
                }
              }
LABEL_111:
              v83 = *(_QWORD *)(StatusReg + 752);
              if (v83)
              {
                if (v74 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v74 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v74)) & 1) == 0)
                {
                  if (v74 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v74 >> 24)
                  {
                    v64 = 0;
LABEL_136:
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v83, v74, 1, v64, v65, v66, v67, v68);
                    break;
                  }
                  v64 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + ((((v74 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2 * ((BYTE3(v74) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v64 != 1)
                    goto LABEL_136;
                }
                v84 = *(unsigned int *)(v83 + 8000);
                if (v84 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v83, v74, (os_unfair_lock_s *)5, v64, v65, v66, v67, v68);
                }
                else
                {
                  *(_QWORD *)(v83 + 8 * v84) = v74 | 0x5000000000000;
                  *(_DWORD *)(v83 + 8000) = v84 + 1;
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(v74, (uint64_t)&bmalloc_heap_config, 1);
              }
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198C28FECLL);
          }
        }
        else
        {
          --*(_DWORD *)v74;
        }
      }
      if (!v60)
        goto LABEL_98;
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v60, v62, v63, v64, v65, v66, v67, v68);
        v81 = *(_QWORD *)(StatusReg + 752);
        if (v81)
        {
          if (!(v60 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v60 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v60)) & 1) != 0)
          {
LABEL_108:
            v82 = *(unsigned int *)(v81 + 8000);
            if (v82 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v81, v60, (os_unfair_lock_s *)5, v76, v77, v78, v79, v80);
            }
            else
            {
              *(_QWORD *)(v81 + 8 * v82) = v60 | 0x5000000000000;
              *(_DWORD *)(v81 + 8000) = v82 + 1;
            }
            goto LABEL_98;
          }
          if (v60 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v60 >> 24)
          {
            v76 = 0;
          }
          else
          {
            v76 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v60 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v60) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v76 == 1)
              goto LABEL_108;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v81, v60, 1, v76, v77, v78, v79, v80);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v60, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
LABEL_98:
      v75 = v57 + 1;
      v57 = v56;
      if (v75 != v56)
      {
        v57 = v75;
        while (*v57 + 1 <= 1)
        {
          if (++v57 == v56)
          {
            v57 = v56;
            break;
          }
        }
      }
    }
    v99 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v99 = 0x600000002;
    *(_QWORD *)(v99 + 8) = "fields";
    *(_DWORD *)(v99 + 16) = 4;
    v264 = (WTF *)v6;
    v265 = (WTF *)v99;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v265, (const WTF::StringImpl *)&v264, v100, v101, v102, v103, v104, (uint64_t)v266);
    if (v267)
    {
      v112 = (uint64_t *)(v4 + 24);
      v113 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v113 == *(_DWORD *)(v4 + 32))
      {
        v243 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v265);
        v113 = *(unsigned int *)(v4 + 36);
        v244 = *(_QWORD *)(v4 + 24);
        v245 = *v243;
        if (*v243)
          *v245 += 2;
        *(_QWORD *)(v244 + 8 * v113) = v245;
      }
      else
      {
        v114 = *v112;
        v115 = v265;
        if (v265)
          *(_DWORD *)v265 += 2;
        *(_QWORD *)(v114 + 8 * v113) = v115;
      }
      *(_DWORD *)(v4 + 36) = v113 + 1;
    }
    v116 = v264;
    v264 = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 1)
        WTF::JSONImpl::Value::operator delete(v116, v105, v106, v107, v108, v109, v110, v111);
      else
        --*(_DWORD *)v116;
    }
    v117 = v265;
    v265 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
      {
        WTF::StringImpl::~StringImpl(v117, v105, v106, v107, v108, v109, v110, v111);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
      }
      else
      {
        *(_DWORD *)v117 -= 2;
      }
    }
    v118 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v118 = 0xE00000002;
    *(_QWORD *)(v118 + 8) = "optionalFields";
    *(_DWORD *)(v118 + 16) = 4;
    v264 = (WTF *)v8;
    v265 = (WTF *)v118;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v265, (const WTF::StringImpl *)&v264, v119, v120, v121, v122, v123, (uint64_t)v266);
    if (v267)
    {
      v131 = (uint64_t *)(v4 + 24);
      v132 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v132 == *(_DWORD *)(v4 + 32))
      {
        v246 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v131, v132 + 1, (unint64_t)&v265);
        v132 = *(unsigned int *)(v4 + 36);
        v247 = *(_QWORD *)(v4 + 24);
        v248 = *v246;
        if (*v246)
          *v248 += 2;
        *(_QWORD *)(v247 + 8 * v132) = v248;
      }
      else
      {
        v133 = *v131;
        v134 = v265;
        if (v265)
          *(_DWORD *)v265 += 2;
        *(_QWORD *)(v133 + 8 * v132) = v134;
      }
      *(_DWORD *)(v4 + 36) = v132 + 1;
    }
    v135 = v264;
    v264 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 1)
        WTF::JSONImpl::Value::operator delete(v135, v124, v125, v126, v127, v128, v129, v130);
      else
        --*(_DWORD *)v135;
    }
    v136 = v265;
    v265 = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
      {
        WTF::StringImpl::~StringImpl(v136, v124, v125, v126, v127, v128, v129, v130);
        WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
      }
      else
      {
        *(_DWORD *)v136 -= 2;
      }
    }
    v137 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v137 = 0xF00000002;
    *(_QWORD *)(v137 + 8) = "constructorName";
    *(_DWORD *)(v137 + 16) = 4;
    v264 = (WTF *)v137;
    v138 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v138 = 0x400000001;
    v144 = (_DWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)v138 + 1) = v144;
    if (v144)
      *v144 += 2;
    v265 = v138;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v139, v140, v141, v142, v143, (uint64_t)v266);
    if (v267)
    {
      v152 = (uint64_t *)(v4 + 24);
      v153 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v153 == *(_DWORD *)(v4 + 32))
      {
        v249 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v152, v153 + 1, (unint64_t)&v264);
        v153 = *(unsigned int *)(v4 + 36);
        v250 = *(_QWORD *)(v4 + 24);
        v251 = *v249;
        if (*v249)
          *v251 += 2;
        *(_QWORD *)(v250 + 8 * v153) = v251;
      }
      else
      {
        v154 = *v152;
        v155 = v264;
        if (v264)
          *(_DWORD *)v264 += 2;
        *(_QWORD *)(v154 + 8 * v153) = v155;
      }
      *(_DWORD *)(v4 + 36) = v153 + 1;
    }
    v156 = v265;
    v265 = 0;
    if (v156)
    {
      if (*(_DWORD *)v156 == 1)
        WTF::JSONImpl::Value::operator delete(v156, v145, v146, v147, v148, v149, v150, v151);
      else
        --*(_DWORD *)v156;
    }
    v157 = v264;
    v264 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 2)
      {
        WTF::StringImpl::~StringImpl(v157, v145, v146, v147, v148, v149, v150, v151);
        WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
      }
      else
      {
        *(_DWORD *)v157 -= 2;
      }
    }
    v158 = this;
    v159 = *((_BYTE *)this + 5);
    v160 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v160 = 0xB00000002;
    *(_QWORD *)(v160 + 8) = "isImprecise";
    *(_DWORD *)(v160 + 16) = 4;
    v264 = (WTF *)v160;
    v161 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v161 = 0x100000001;
    *((_BYTE *)v161 + 8) = v159;
    v265 = v161;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v162, v163, v164, v165, v166, (uint64_t)v266);
    if (v267)
    {
      v174 = (uint64_t *)(v4 + 24);
      v175 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v175 == *(_DWORD *)(v4 + 32))
      {
        v252 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v174, v175 + 1, (unint64_t)&v264);
        v175 = *(unsigned int *)(v4 + 36);
        v253 = *(_QWORD *)(v4 + 24);
        v254 = *v252;
        if (*v252)
          *v254 += 2;
        *(_QWORD *)(v253 + 8 * v175) = v254;
      }
      else
      {
        v176 = *v174;
        v177 = v264;
        if (v264)
          *(_DWORD *)v264 += 2;
        *(_QWORD *)(v176 + 8 * v175) = v177;
      }
      *(_DWORD *)(v4 + 36) = v175 + 1;
    }
    v178 = v265;
    v265 = 0;
    v179 = v158;
    if (v178)
    {
      if (*(_DWORD *)v178 == 1)
        WTF::JSONImpl::Value::operator delete(v178, v167, v168, v169, v170, v171, v172, v173);
      else
        --*(_DWORD *)v178;
    }
    v180 = v264;
    v264 = 0;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2)
      {
        WTF::StringImpl::~StringImpl(v180, v167, v168, v169, v170, v171, v172, v173);
        WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
      }
      else
      {
        *(_DWORD *)v180 -= 2;
      }
    }
    if (!*((_QWORD *)v158 + 3))
    {
      v194 = 0;
      StatusReg = v261;
      goto LABEL_213;
    }
    v181 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *((_QWORD *)v181 + 3) = 0;
    *((_QWORD *)v181 + 4) = 0;
    *((_QWORD *)v181 + 2) = 0;
    *(_QWORD *)v181 = 0x500000002;
    v182 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v182 = 0x1200000002;
    *(_QWORD *)(v182 + 8) = "prototypeStructure";
    *(_DWORD *)(v182 + 16) = 4;
    v264 = v181;
    v265 = (WTF *)v182;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v265, (const WTF::StringImpl *)&v264, v183, v184, v185, v186, v187, (uint64_t)v266);
    if (v267)
    {
      v188 = (uint64_t *)(v4 + 24);
      v189 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v189 == *(_DWORD *)(v4 + 32))
      {
        v255 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v188, v189 + 1, (unint64_t)&v265);
        v189 = *(unsigned int *)(v4 + 36);
        v256 = *(_QWORD *)(v4 + 24);
        v257 = *v255;
        if (*v255)
          *v257 += 2;
        *(_QWORD *)(v256 + 8 * v189) = v257;
      }
      else
      {
        v190 = *v188;
        v191 = v265;
        if (v265)
          *(_DWORD *)v265 += 2;
        *(_QWORD *)(v190 + 8 * v189) = v191;
      }
      *(_DWORD *)(v4 + 36) = v189 + 1;
    }
    v192 = v264;
    v264 = 0;
    StatusReg = v261;
    if (v192)
    {
      if (*(_DWORD *)v192 == 1)
        WTF::JSONImpl::Value::operator delete(v192, v167, v168, v169, v170, v171, v172, v173);
      else
        --*(_DWORD *)v192;
    }
    v193 = v265;
    v265 = 0;
    if (!v193)
      goto LABEL_206;
    if (*(_DWORD *)v193 != 2)
    {
      *(_DWORD *)v193 -= 2;
LABEL_206:
      if (v4)
        goto LABEL_207;
      goto LABEL_209;
    }
    WTF::StringImpl::~StringImpl(v193, v167, v168, v169, v170, v171, v172, v173);
    WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
    if (v4)
    {
LABEL_207:
      if (*(_DWORD *)v4 == 1)
        WTF::JSONImpl::Value::operator delete((WTF *)v4, v167, v168, v169, v170, v171, v172, v173);
      else
        --*(_DWORD *)v4;
    }
LABEL_209:
    v194 = (JSC::StructureShape *)*((_QWORD *)v158 + 3);
    if (v194)
      ++*(_DWORD *)v194;
    v4 = (uint64_t)v181;
LABEL_213:
    if (*(_DWORD *)v179 == 1)
    {
      JSC::StructureShape::~StructureShape(v179, v167, v168, v169, v170, v171, v172, v173);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      --*(_DWORD *)v179;
    }
    this = v194;
  }
  while (v194);
  if (v4)
  {
    v258 = *(_DWORD *)v4 - 1;
    if (*(_DWORD *)v4 != 1)
      goto LABEL_249;
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v167, v168, v169, v170, v171, v172, v173);
  }
}

void JSC::TypeSet::inspectorTypeSet(JSC::TypeSet *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;

  v4 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v24 = v4;
  v5 = Inspector::Protocol::Runtime::TypeSet::Builder<0>::setIsFunction((uint64_t *)&v24, *((_WORD *)this + 3) & 1);
  v6 = Inspector::Protocol::Runtime::TypeSet::Builder<1>::setIsUndefined(v5, (*((_WORD *)this + 3) & 2) != 0);
  v7 = Inspector::Protocol::Runtime::TypeSet::Builder<3>::setIsNull(v6, (*((_WORD *)this + 3) & 4) != 0);
  v8 = Inspector::Protocol::Runtime::TypeSet::Builder<7>::setIsBoolean(v7, (*((_WORD *)this + 3) & 8) != 0);
  v9 = Inspector::Protocol::Runtime::TypeSet::Builder<15>::setIsInteger(v8, (*((_WORD *)this + 3) & 0x10) != 0);
  v10 = Inspector::Protocol::Runtime::TypeSet::Builder<31>::setIsNumber(v9, (*((_WORD *)this + 3) & 0x20) != 0);
  v11 = Inspector::Protocol::Runtime::TypeSet::Builder<63>::setIsString(v10, (*((_WORD *)this + 3) & 0x40) != 0);
  v12 = Inspector::Protocol::Runtime::TypeSet::Builder<127>::setIsObject(v11, (*((_WORD *)this + 3) & 0x80) != 0);
  v13 = Inspector::Protocol::Runtime::TypeSet::Builder<255>::setIsSymbol(v12, HIBYTE(*((_WORD *)this + 3)) & 1);
  v14 = Inspector::Protocol::Runtime::TypeSet::Builder<511>::setIsBigInt(v13, (*((_WORD *)this + 3) & 0x200) != 0);
  v22 = *v14;
  *v14 = 0;
  *a2 = v22;
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v23;
  }
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<0>::setIsFunction(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xA00000002;
  *(_QWORD *)(v5 + 8) = "isFunction";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<1>::setIsUndefined(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xB00000002;
  *(_QWORD *)(v5 + 8) = "isUndefined";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<3>::setIsNull(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "isNull";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<7>::setIsBoolean(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "isBoolean";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<15>::setIsInteger(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "isInteger";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<31>::setIsNumber(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "isNumber";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<63>::setIsString(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "isString";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<127>::setIsObject(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "isObject";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<255>::setIsSymbol(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "isSymbol";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Runtime::TypeSet::Builder<511>::setIsBigInt(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "isBigInt";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

void JSC::TypeSet::toJSONString(JSC::TypeSet *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::StringImpl **a7@<X8>)
{
  WTF::AtomStringImpl *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  const char *v22;
  WTF::StringImpl *v23;
  _BYTE *v24;
  int v25;
  BOOL v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  void *v46;
  __int16 v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  _OWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  _OWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  _OWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  void *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  unsigned int v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int8x16_t *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  int8x16_t *v202;
  size_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int128 *v213;
  unsigned __int128 *v214;
  unsigned __int128 v215;
  char v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  unsigned int v219;
  char v220;
  WTF::StringImpl *v221;
  int8x16_t v222;

  v217 = 0;
  v218 = 0;
  v219 = 0;
  v220 = 1;
  v222.i8[0] = 123;
  WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, a2, a3, a4, a5, a6);
  if ((v219 & 0x80000000) == 0)
  {
    v16 = v218;
    if ((v218 || (v16 = v217) != 0) && (*((_BYTE *)v16 + 16) & 4) == 0)
    {
      v17 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 18), v10, v11, v12, v13, v14, v15);
      if (v17)
      {
        *(_OWORD *)v17 = xmmword_199159EE0;
        *(_OWORD *)(v17 + 16) = xmmword_199159EF0;
        *(_DWORD *)(v17 + 32) = 3801122;
      }
    }
    else
    {
      v18 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 18), v10, v11, v12, v13, v14, v15);
      if (v18)
      {
        *(_WORD *)(v18 + 16) = 14882;
        *(_OWORD *)v18 = *(_OWORD *)"\"displayTypeName\":";
      }
    }
  }
  v19 = *((unsigned __int16 *)this + 3);
  if (!*((_WORD *)this + 3))
  {
    v23 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
LABEL_20:
    v222.i64[0] = (uint64_t)v23;
    goto LABEL_43;
  }
  if ((v19 & 0xFF79) != 0 || *((_DWORD *)this + 5) == 0)
    goto LABEL_15;
  JSC::StructureShape::leastCommonAncestor((uint64_t **)this + 1, v9, (const WTF::StringImpl *)v10, v11, v12, v13, v14, v15, &v221);
  v25 = *((unsigned __int16 *)this + 3);
  if (v25 == 128)
  {
    v23 = v221;
    goto LABEL_20;
  }
  v26 = (v25 & 0xFF79) != 0 || v25 == 0;
  v27 = v26;
  if (!v26)
  {
    v28 = v221;
    if (v221)
    {
      v29 = *((_DWORD *)v221 + 1);
      *(_DWORD *)v221 += 2;
      if ((v29 & 0x80000000) == 0)
      {
        v30 = (v29 + 1);
        if (!__OFADD__(v29, 1))
        {
          if ((*((_BYTE *)v28 + 16) & 4) == 0)
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v30, 0, (uint64_t)v28, 63, (int **)&v222);
            if (!v222.i64[0])
              goto LABEL_363;
            goto LABEL_276;
          }
          WTF::tryFastCompactMalloc((WTF *)(v30 + 20), &v222);
          v176 = v222.i64[0];
          if (v222.i64[0])
          {
            v177 = (_BYTE *)(v222.i64[0] + 20);
            *(_DWORD *)v222.i64[0] = 2;
            *(_DWORD *)(v176 + 4) = v30;
            *(_QWORD *)(v176 + 8) = v176 + 20;
            *(_DWORD *)(v176 + 16) = 4;
            v24 = (_BYTE *)*((_QWORD *)v28 + 1);
            v10 = *((unsigned int *)v28 + 1);
            if ((*((_BYTE *)v28 + 16) & 4) != 0)
            {
              if ((_DWORD)v10 == 1)
              {
                *v177 = *v24;
              }
              else if ((_DWORD)v10)
              {
                memcpy((void *)(v176 + 20), v24, v10);
              }
            }
            else
            {
              if (v10 < 0x10)
              {
                v213 = (unsigned __int128 *)(v176 + 20);
              }
              else
              {
                v213 = (unsigned __int128 *)&v177[v10 & 0xFFFFFFF0];
                v214 = (unsigned __int128 *)(v176 + 20);
                do
                {
                  v215 = (unsigned __int128)vld2q_s8(v24);
                  v24 += 32;
                  *v214++ = v215;
                }
                while (v214 != v213);
              }
              while (v213 != (unsigned __int128 *)&v177[v10])
              {
                v216 = *v24;
                v24 += 2;
                *(_BYTE *)v213 = v216;
                v213 = (unsigned __int128 *)((char *)v213 + 1);
              }
            }
            v177[*((unsigned int *)v28 + 1)] = 63;
            v222.i64[0] = v176;
LABEL_276:
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)v24, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
            }
            else
            {
              *(_DWORD *)v28 -= 2;
            }
            goto LABEL_278;
          }
        }
      }
    }
    else
    {
      WTF::tryFastCompactMalloc((WTF *)0x15, &v222);
      v212 = v222.i64[0];
      if (v222.i64[0])
      {
        *(_QWORD *)v222.i64[0] = 0x100000002;
        *(_BYTE *)(v212 + 20) = 63;
        *(_QWORD *)(v212 + 8) = v212 + 20;
        *(_DWORD *)(v212 + 16) = 4;
        v222.i64[0] = v212;
        goto LABEL_278;
      }
    }
    v222.i64[0] = 0;
LABEL_363:
    __break(0xC471u);
    JUMPOUT(0x198C2B038);
  }
LABEL_278:
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl(v221, (WTF::AtomStringImpl *)v24, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
      if (!v27)
        goto LABEL_43;
      goto LABEL_282;
    }
    *(_DWORD *)v221 -= 2;
  }
  if (!v27)
    goto LABEL_43;
LABEL_282:
  v19 = *((unsigned __int16 *)this + 3);
LABEL_15:
  switch(v19)
  {
    case 1:
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0x800000002;
      v22 = "Function";
      break;
    case 2:
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0x900000002;
      v22 = "Undefined";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_36;
    case 4:
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0x400000002;
      v22 = "Null";
      break;
    case 8:
      v21 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v21 = 0x700000002;
      v22 = "Boolean";
      break;
    default:
      if (v19 == 16)
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v21 = 0x700000002;
        v22 = "Integer";
      }
      else
      {
LABEL_36:
        if (!v19 || (v19 & 0xFFFFFFCF) != 0)
        {
          switch(v19)
          {
            case 512:
              v21 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v21 = 0x600000002;
              v22 = "BigInt";
              break;
            case 256:
              v21 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v21 = 0x600000002;
              v22 = "Symbol";
              break;
            case 64:
              v21 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v21 = 0x600000002;
              v22 = "String";
              break;
            default:
              if (!v19 || (v19 & 0xFFFFFFF9) != 0)
              {
                if ((v19 - 1) > 6)
                {
                  if (!v19 || (v19 & 0xFFFFFFF1) != 0)
                  {
                    if (!v19 || (v19 & 0xFFE9) != 0)
                    {
                      if (!v19 || (v19 & 0xFFC9) != 0)
                      {
                        if (!v19 || (v19 & 0xFFB9) != 0)
                        {
                          if (!v19 || (v19 & 0xFEF9) != 0)
                          {
                            if (!v19 || (v19 & 0xFDF9) != 0)
                            {
                              if (!v19 || (v19 & 0xFF3E) != 0)
                              {
                                v21 = WTF::fastCompactMalloc((WTF *)0x20);
                                *(_DWORD *)v21 = 2;
                                if (!v19 || (v19 & 0xFF38) != 0)
                                {
                                  *(_DWORD *)(v21 + 4) = 6;
                                  v22 = "(many)";
                                }
                                else
                                {
                                  *(_DWORD *)(v21 + 4) = 7;
                                  v22 = "Object?";
                                }
                              }
                              else
                              {
                                v21 = WTF::fastCompactMalloc((WTF *)0x20);
                                *(_QWORD *)v21 = 0x600000002;
                                v22 = "Object";
                              }
                            }
                            else
                            {
                              v21 = WTF::fastCompactMalloc((WTF *)0x20);
                              *(_QWORD *)v21 = 0x700000002;
                              v22 = "BigInt?";
                            }
                          }
                          else
                          {
                            v21 = WTF::fastCompactMalloc((WTF *)0x20);
                            *(_QWORD *)v21 = 0x700000002;
                            v22 = "Symbol?";
                          }
                        }
                        else
                        {
                          v21 = WTF::fastCompactMalloc((WTF *)0x20);
                          *(_QWORD *)v21 = 0x700000002;
                          v22 = "String?";
                        }
                      }
                      else
                      {
                        v21 = WTF::fastCompactMalloc((WTF *)0x20);
                        *(_QWORD *)v21 = 0x700000002;
                        v22 = "Number?";
                      }
                    }
                    else
                    {
                      v21 = WTF::fastCompactMalloc((WTF *)0x20);
                      *(_QWORD *)v21 = 0x800000002;
                      v22 = "Integer?";
                    }
                  }
                  else
                  {
                    v21 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v21 = 0x800000002;
                    v22 = "Boolean?";
                  }
                }
                else
                {
                  v21 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v21 = 0x900000002;
                  v22 = "Function?";
                }
              }
              else
              {
                v21 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v21 = 0x300000002;
                v22 = "(?)";
              }
              break;
          }
        }
        else
        {
          v21 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v21 = 0x600000002;
          v22 = "Number";
        }
      }
      break;
  }
  *(_QWORD *)(v21 + 8) = v22;
  *(_DWORD *)(v21 + 16) = 4;
  v222.i64[0] = v21;
LABEL_43:
  WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v217, (const WTF::String *)&v222, v10, v11, v12, v13, v14, v15);
  v38 = (WTF::StringImpl *)v222.i64[0];
  v222.i64[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v222.i8[0] = 44;
  if (v218 && ((v39 = v219, v219 < *((_DWORD *)v218 + 1)) ? (v40 = v217 == 0) : (v40 = 0), v40))
  {
    v41 = *((_DWORD *)v218 + 4);
    v42 = *((_QWORD *)v218 + 1);
    v43 = ++v219;
    if ((v41 & 4) == 0)
    {
      *(_WORD *)(v42 + 2 * v39) = 44;
      if (v43 < 0)
        goto LABEL_62;
      goto LABEL_55;
    }
    *(_BYTE *)(v42 + v39) = 44;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
  }
  v43 = v219;
  if ((v219 & 0x80000000) != 0)
    goto LABEL_62;
LABEL_55:
  v44 = v218;
  if ((v218 || (v44 = v217) != 0) && (*((_BYTE *)v44 + 16) & 4) == 0)
  {
    v45 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v43 + 22), v32, v33, v34, v35, v36, v37);
    if (v45)
    {
      *(_OWORD *)v45 = xmmword_199159F00;
      *(_OWORD *)(v45 + 16) = xmmword_199159F10;
      *(_QWORD *)(v45 + 32) = 0x2200730065006DLL;
      *(_DWORD *)(v45 + 40) = 5963834;
    }
  }
  else
  {
    v46 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v43 + 22), v32, v33, v34, v35, v36, v37);
    if (v46)
      qmemcpy(v46, "\"primitiveTypeNames\":[", 22);
  }
LABEL_62:
  v47 = *((_WORD *)this + 3);
  if ((v47 & 2) != 0)
  {
    if ((v219 & 0x80000000) == 0)
    {
      v48 = v218;
      if ((v218 || (v48 = v217) != 0) && (*((_BYTE *)v48 + 16) & 4) == 0)
      {
        v49 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 11), v32, v33, v34, v35, v36, v37);
        if (v49)
        {
          *(_OWORD *)v49 = xmmword_199159F20;
          *(_DWORD *)(v49 + 16) = 6553701;
          *(_WORD *)(v49 + 20) = 34;
        }
      }
      else
      {
        v50 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 11), v32, v33, v34, v35, v36, v37);
        if (v50)
        {
          *(_DWORD *)(v50 + 7) = 577004910;
          *(_QWORD *)v50 = *(_QWORD *)"\"Undefined\"";
        }
      }
    }
    v51 = *((_WORD *)this + 3);
    if ((v51 & 4) == 0)
    {
      if ((v51 & 8) != 0)
      {
LABEL_99:
        v222.i8[0] = 44;
        if (!v218 || (v58 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
        {
          WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
        }
        else
        {
          v59 = *((_DWORD *)v218 + 4);
          v60 = *((_QWORD *)v218 + 1);
          ++v219;
          if ((v59 & 4) != 0)
            *(_BYTE *)(v60 + v58) = 44;
          else
            *(_WORD *)(v60 + 2 * v58) = 44;
        }
LABEL_104:
        if ((v219 & 0x80000000) == 0)
        {
          v61 = v218;
          if ((v218 || (v61 = v217) != 0) && (*((_BYTE *)v61 + 16) & 4) == 0)
          {
            v62 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 9), v32, v33, v34, v35, v36, v37);
            if (v62)
            {
              *(_OWORD *)v62 = xmmword_199159F30;
              *(_WORD *)(v62 + 16) = 34;
            }
          }
          else
          {
            v63 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 9), v32, v33, v34, v35, v36, v37);
            if (v63)
            {
              *(_BYTE *)(v63 + 8) = 34;
              *(_QWORD *)v63 = *(_QWORD *)"\"Boolean\"";
            }
          }
        }
        v51 = *((_WORD *)this + 3);
        if ((v51 & 0x10) != 0)
          goto LABEL_113;
        goto LABEL_81;
      }
LABEL_80:
      if ((v51 & 0x10) != 0)
      {
LABEL_113:
        v222.i8[0] = 44;
        if (!v218 || (v64 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
        {
          WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
        }
        else
        {
          v65 = *((_DWORD *)v218 + 4);
          v66 = *((_QWORD *)v218 + 1);
          ++v219;
          if ((v65 & 4) != 0)
            *(_BYTE *)(v66 + v64) = 44;
          else
            *(_WORD *)(v66 + 2 * v64) = 44;
        }
LABEL_118:
        if ((v219 & 0x80000000) == 0)
        {
          v67 = v218;
          if ((v218 || (v67 = v217) != 0) && (*((_BYTE *)v67 + 16) & 4) == 0)
          {
            v68 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 9), v32, v33, v34, v35, v36, v37);
            if (v68)
            {
              *(_OWORD *)v68 = xmmword_199159F40;
              *(_WORD *)(v68 + 16) = 34;
            }
          }
          else
          {
            v69 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 9), v32, v33, v34, v35, v36, v37);
            if (v69)
            {
              *(_BYTE *)(v69 + 8) = 34;
              *(_QWORD *)v69 = *(_QWORD *)"\"Integer\"";
            }
          }
        }
        v51 = *((_WORD *)this + 3);
        if ((v51 & 0x20) != 0)
          goto LABEL_127;
        goto LABEL_82;
      }
LABEL_81:
      if ((v51 & 0x20) != 0)
      {
LABEL_127:
        v222.i8[0] = 44;
        if (!v218 || (v70 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
        {
          WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
        }
        else
        {
          v71 = *((_DWORD *)v218 + 4);
          v72 = *((_QWORD *)v218 + 1);
          ++v219;
          if ((v71 & 4) != 0)
            *(_BYTE *)(v72 + v70) = 44;
          else
            *(_WORD *)(v72 + 2 * v70) = 44;
        }
LABEL_132:
        if ((v219 & 0x80000000) == 0)
        {
          v73 = v218;
          if ((v218 || (v73 = v217) != 0) && (*((_BYTE *)v73 + 16) & 4) == 0)
          {
            v74 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), v32, v33, v34, v35, v36, v37);
            if (v74)
              *v74 = xmmword_199159F50;
          }
          else
          {
            v75 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), v32, v33, v34, v35, v36, v37);
            if (v75)
              *v75 = 0x227265626D754E22;
          }
        }
        v51 = *((_WORD *)this + 3);
        if ((v51 & 0x40) != 0)
          goto LABEL_141;
        goto LABEL_83;
      }
LABEL_82:
      if ((v51 & 0x40) != 0)
      {
LABEL_141:
        v222.i8[0] = 44;
        if (!v218 || (v76 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
        {
          WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
        }
        else
        {
          v77 = *((_DWORD *)v218 + 4);
          v78 = *((_QWORD *)v218 + 1);
          ++v219;
          if ((v77 & 4) != 0)
            *(_BYTE *)(v78 + v76) = 44;
          else
            *(_WORD *)(v78 + 2 * v76) = 44;
        }
        goto LABEL_146;
      }
LABEL_83:
      if ((v51 & 0x100) == 0)
        goto LABEL_168;
      goto LABEL_155;
    }
    v222.i8[0] = 44;
    if (!v218 || (v52 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
    {
      WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
    }
    else
    {
      v53 = *((_DWORD *)v218 + 4);
      v54 = *((_QWORD *)v218 + 1);
      ++v219;
      if ((v53 & 4) != 0)
        *(_BYTE *)(v54 + v52) = 44;
      else
        *(_WORD *)(v54 + 2 * v52) = 44;
    }
LABEL_90:
    if ((v219 & 0x80000000) == 0)
    {
      v55 = v218;
      if ((v218 || (v55 = v217) != 0) && (*((_BYTE *)v55 + 16) & 4) == 0)
      {
        v56 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 6), v32, v33, v34, v35, v36, v37);
        if (v56)
        {
          *(_QWORD *)v56 = 0x6C0075004E0022;
          *(_DWORD *)(v56 + 8) = 2228332;
        }
      }
      else
      {
        v57 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 6), v32, v33, v34, v35, v36, v37);
        if (v57)
        {
          *(_WORD *)(v57 + 4) = 8812;
          *(_DWORD *)v57 = 1819627042;
        }
      }
    }
    v51 = *((_WORD *)this + 3);
    if ((v51 & 8) != 0)
      goto LABEL_99;
    goto LABEL_80;
  }
  if ((v47 & 4) != 0)
    goto LABEL_90;
  if ((v47 & 8) != 0)
    goto LABEL_104;
  if ((v47 & 0x10) != 0)
    goto LABEL_118;
  if ((v47 & 0x20) != 0)
    goto LABEL_132;
  if ((v47 & 0x40) == 0)
  {
    if ((*((_WORD *)this + 3) & 0x100) == 0)
      goto LABEL_168;
    goto LABEL_160;
  }
LABEL_146:
  if ((v219 & 0x80000000) == 0)
  {
    v79 = v218;
    if ((v218 || (v79 = v217) != 0) && (*((_BYTE *)v79 + 16) & 4) == 0)
    {
      v80 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), v32, v33, v34, v35, v36, v37);
      if (v80)
        *v80 = xmmword_199159F60;
    }
    else
    {
      v81 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), v32, v33, v34, v35, v36, v37);
      if (v81)
        *v81 = 0x22676E6972745322;
    }
  }
  if ((*((_WORD *)this + 3) & 0x100) != 0)
  {
LABEL_155:
    v222.i8[0] = 44;
    if (!v218 || (v82 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
    {
      WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
    }
    else
    {
      v83 = *((_DWORD *)v218 + 4);
      v84 = *((_QWORD *)v218 + 1);
      ++v219;
      if ((v83 & 4) != 0)
        *(_BYTE *)(v84 + v82) = 44;
      else
        *(_WORD *)(v84 + 2 * v82) = 44;
    }
LABEL_160:
    if ((v219 & 0x80000000) == 0)
    {
      v85 = v218;
      if ((v218 || (v85 = v217) != 0) && (*((_BYTE *)v85 + 16) & 4) == 0)
      {
        v86 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), v32, v33, v34, v35, v36, v37);
        if (v86)
          *v86 = xmmword_199159F70;
      }
      else
      {
        v87 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v219 + 8), v32, v33, v34, v35, v36, v37);
        if (v87)
          *v87 = 0x226C6F626D795322;
      }
    }
  }
LABEL_168:
  v222.i8[0] = 93;
  if (!v218 || (v88 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
  {
    WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
  }
  else
  {
    v89 = *((_DWORD *)v218 + 4);
    v90 = *((_QWORD *)v218 + 1);
    ++v219;
    if ((v89 & 4) != 0)
      *(_BYTE *)(v90 + v88) = 93;
    else
      *(_WORD *)(v90 + 2 * v88) = 93;
  }
  v222.i8[0] = 44;
  if (!v218 || (v91 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
  {
    WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
  }
  else
  {
    v92 = *((_DWORD *)v218 + 4);
    v93 = *((_QWORD *)v218 + 1);
    v94 = ++v219;
    if ((v92 & 4) == 0)
    {
      *(_WORD *)(v93 + 2 * v91) = 44;
      if (v94 < 0)
        goto LABEL_186;
      goto LABEL_179;
    }
    *(_BYTE *)(v93 + v91) = 44;
  }
  v94 = v219;
  if ((v219 & 0x80000000) != 0)
    goto LABEL_186;
LABEL_179:
  v95 = v218;
  if ((v218 || (v95 = v217) != 0) && (*((_BYTE *)v95 + 16) & 4) == 0)
  {
    v96 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)(v94 + 14), v32, v33, v34, v35, v36, v37);
    if (v96)
    {
      *(_OWORD *)v96 = xmmword_199159F80;
      *(_QWORD *)(v96 + 16) = 0x22007300650072;
      *(_DWORD *)(v96 + 24) = 5963834;
    }
  }
  else
  {
    v97 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)(v94 + 14), v32, v33, v34, v35, v36, v37);
    if (v97)
      qmemcpy(v97, "\"structures\":[", 14);
  }
LABEL_186:
  if (!*((_DWORD *)this + 5))
    goto LABEL_235;
  JSC::StructureShape::toJSONString((JSC::StructureShape *)&v222, **((_QWORD **)this + 1), v32, v33, v34, v35, v36, v37);
  v98 = (WTF::StringImpl *)v222.i64[0];
  if (!v219 && !v218)
  {
    if (v222.i64[0])
      *(_DWORD *)v222.i64[0] += 2;
    v99 = v217;
    v217 = v98;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
        if (v98)
          goto LABEL_195;
        goto LABEL_259;
      }
      *(_DWORD *)v99 -= 2;
    }
    if (v98)
    {
LABEL_195:
      v100 = *((_DWORD *)v98 + 1);
      goto LABEL_196;
    }
LABEL_259:
    v100 = 0;
LABEL_196:
    v219 = v100;
    if (!v98)
      goto LABEL_199;
    goto LABEL_197;
  }
  if (!v222.i64[0])
  {
    v202 = 0;
    v203 = 0;
LABEL_302:
    WTF::StringBuilder::append((uint64_t)&v217, v202, v203, v33, v34, v35, v36, v37);
    if (!v98)
      goto LABEL_199;
    goto LABEL_197;
  }
  v202 = *(int8x16_t **)(v222.i64[0] + 8);
  v203 = *(unsigned int *)(v222.i64[0] + 4);
  if ((*(_BYTE *)(v222.i64[0] + 16) & 4) != 0)
    goto LABEL_302;
  WTF::StringBuilder::append((uint64_t)&v217, v202, v203, v33, v34, v35, v36, v37);
LABEL_197:
  if (*(_DWORD *)v98 == 2)
  {
    WTF::StringImpl::~StringImpl(v98, v31, v32, v33, v34, v35, v36, v37);
    WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
  }
  else
  {
    *(_DWORD *)v98 -= 2;
  }
LABEL_199:
  if (*((_DWORD *)this + 5) >= 2u)
  {
    v101 = 1;
    while (1)
    {
      v222.i8[0] = 44;
      if (v218 && ((v102 = v219, v219 < *((_DWORD *)v218 + 1)) ? (v103 = v217 == 0) : (v103 = 0), v103))
      {
        v104 = *((_DWORD *)v218 + 4);
        v105 = *((_QWORD *)v218 + 1);
        ++v219;
        if ((v104 & 4) != 0)
          *(_BYTE *)(v105 + v102) = 44;
        else
          *(_WORD *)(v105 + 2 * v102) = 44;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
      }
      if (v101 >= *((unsigned int *)this + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x198C2B000);
      }
      JSC::StructureShape::toJSONString((JSC::StructureShape *)&v222, *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v101), v32, v33, v34, v35, v36, v37);
      v106 = (WTF::StringImpl *)v222.i64[0];
      if (!v219 && !v218)
        break;
      if (v222.i64[0])
      {
        v125 = *(int8x16_t **)(v222.i64[0] + 8);
        v126 = *(unsigned int *)(v222.i64[0] + 4);
        if ((*(_BYTE *)(v222.i64[0] + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)&v217, v125, v126, v33, v34, v35, v36, v37);
LABEL_220:
          if (*(_DWORD *)v106 == 2)
          {
            WTF::StringImpl::~StringImpl(v106, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
          }
          else
          {
            *(_DWORD *)v106 -= 2;
          }
          goto LABEL_222;
        }
      }
      else
      {
        v125 = 0;
        v126 = 0;
      }
      WTF::StringBuilder::append((uint64_t)&v217, v125, v126, v33, v34, v35, v36, v37);
      if (v106)
        goto LABEL_220;
LABEL_222:
      if (++v101 >= *((unsigned int *)this + 5))
        goto LABEL_235;
    }
    if (v222.i64[0])
      *(_DWORD *)v222.i64[0] += 2;
    v107 = v217;
    v217 = v106;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
      {
        WTF::StringImpl::~StringImpl(v107, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
        if (v106)
          goto LABEL_218;
        goto LABEL_226;
      }
      *(_DWORD *)v107 -= 2;
    }
    if (v106)
    {
LABEL_218:
      v108 = *((_DWORD *)v106 + 1);
      goto LABEL_219;
    }
LABEL_226:
    v108 = 0;
LABEL_219:
    v219 = v108;
    if (v106)
      goto LABEL_220;
    goto LABEL_222;
  }
LABEL_235:
  v222.i8[0] = 93;
  if (!v218 || (v127 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
  {
    WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
  }
  else
  {
    v128 = *((_DWORD *)v218 + 4);
    v129 = *((_QWORD *)v218 + 1);
    ++v219;
    if ((v128 & 4) != 0)
      *(_BYTE *)(v129 + v127) = 93;
    else
      *(_WORD *)(v129 + 2 * v127) = 93;
  }
  v222.i8[0] = 125;
  if (!v218 || (v130 = v219, v219 >= *((_DWORD *)v218 + 1)) || v217)
  {
    WTF::StringBuilder::append((uint64_t)&v217, &v222, 1uLL, v33, v34, v35, v36, v37);
  }
  else
  {
    v131 = *((_DWORD *)v218 + 4);
    v132 = *((_QWORD *)v218 + 1);
    ++v219;
    if ((v131 & 4) != 0)
      *(_BYTE *)(v132 + v130) = 125;
    else
      *(_WORD *)(v132 + 2 * v130) = 125;
  }
  v133 = v217;
  if (v217)
    goto LABEL_246;
  if ((v219 & 0x80000000) == 0 && v218 && *((_DWORD *)v218 + 1) > v219 + (v219 >> 2))
  {
    if ((*((_BYTE *)v218 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v217, (WTF::AtomStringImpl *)v219, v32, v33, v34, v35, v36, v37);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v217, (WTF::AtomStringImpl *)v219, v32, v33, v34, v35, v36, v37);
    v201 = v217;
    v217 = v218;
    v218 = 0;
    if (v201)
    {
      if (*(_DWORD *)v201 == 2)
      {
        WTF::StringImpl::~StringImpl(v201, v178, v179, v180, v181, v182, v183, v184);
        WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
      }
      else
      {
        *(_DWORD *)v201 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v217);
  v133 = v217;
  if (v217)
LABEL_246:
    *(_DWORD *)v133 += 2;
  *a7 = v133;
  v134 = v218;
  v218 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = v217;
  v217 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
}

void JSC::StructureShape::toJSONString(JSC::StructureShape *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  void *v32;
  int8x16_t *v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  WTF::AtomStringImpl *v60;
  WTF::StringImpl *v61;
  _QWORD *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  _WORD *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  WTF::AtomStringImpl *v89;
  WTF::StringImpl *v90;
  _QWORD *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  int v108;
  WTF::StringImpl *v109;
  _OWORD *v110;
  _QWORD *v111;
  WTF::AtomStringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  unsigned int v115;
  WTF::StringImpl *v116;
  _QWORD *v117;
  _DWORD *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  _DWORD *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::AtomStringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  int8x16_t *v165;
  unint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int8x16_t v175;
  WTF::StringImpl *v176;
  unsigned int v177;
  char v178;

  v175.i64[1] = 0;
  v176 = 0;
  v177 = 0;
  v178 = 1;
  v175.i8[0] = 123;
  WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, a4, a5, a6, a7, a8);
  if ((v177 & 0x80000000) == 0)
  {
    v16 = v176;
    if ((v176 || (v16 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v16 + 16) & 4) == 0)
    {
      v17 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 18), v10, v11, v12, v13, v14, v15);
      if (v17)
      {
        *(_OWORD *)v17 = xmmword_199159F90;
        *(_OWORD *)(v17 + 16) = xmmword_199159FA0;
        *(_DWORD *)(v17 + 32) = 3801122;
      }
    }
    else
    {
      v18 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 18), v10, v11, v12, v13, v14, v15);
      if (v18)
      {
        *(_WORD *)(v18 + 16) = 14882;
        *(_OWORD *)v18 = *(_OWORD *)"\"constructorName\":";
      }
    }
  }
  WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v175.u64[1], (const WTF::String *)(a2 + 40), v10, v11, v12, v13, v14, v15);
  v175.i8[0] = 44;
  if (v176 && ((v25 = v177, v177 < *((_DWORD *)v176 + 1)) ? (v26 = v175.i64[1] == 0) : (v26 = 0), v26))
  {
    v27 = *((_DWORD *)v176 + 4);
    v28 = *((_QWORD *)v176 + 1);
    v29 = ++v177;
    if ((v27 & 4) == 0)
    {
      *(_WORD *)(v28 + 2 * v25) = 44;
      if (v29 < 0)
        goto LABEL_25;
      goto LABEL_18;
    }
    *(_BYTE *)(v28 + v25) = 44;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v20, v21, v22, v23, v24);
  }
  v29 = v177;
  if ((v177 & 0x80000000) != 0)
    goto LABEL_25;
LABEL_18:
  v30 = v176;
  if ((v176 || (v30 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v30 + 16) & 4) == 0)
  {
    v31 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v29 + 21), v19, v20, v21, v22, v23, v24);
    if (v31)
    {
      *(_OWORD *)v31 = xmmword_199159FB0;
      *(_OWORD *)(v31 + 16) = xmmword_199159FC0;
      *(_QWORD *)(v31 + 32) = 0x2200650064006FLL;
      *(_WORD *)(v31 + 40) = 58;
    }
  }
  else
  {
    v32 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v29 + 21), v19, v20, v21, v22, v23, v24);
    if (v32)
      qmemcpy(v32, "\"isInDictionaryMode\":", 21);
  }
LABEL_25:
  if (*(_BYTE *)(a2 + 5))
    v33 = (int8x16_t *)"true";
  else
    v33 = (int8x16_t *)"false";
  if (*(_BYTE *)(a2 + 5))
    v34 = 4;
  else
    v34 = 5;
  WTF::StringBuilder::append((uint64_t)&v175.i64[1], v33, v34, v20, v21, v22, v23, v24);
  v175.i8[0] = 44;
  if (!v176 || (v41 = v177, v177 >= *((_DWORD *)v176 + 1)) || v175.i64[1])
  {
    WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v36, v37, v38, v39, v40);
  }
  else
  {
    v42 = *((_DWORD *)v176 + 4);
    v43 = *((_QWORD *)v176 + 1);
    v44 = ++v177;
    if ((v42 & 4) == 0)
    {
      *(_WORD *)(v43 + 2 * v41) = 44;
      if (v44 < 0)
        goto LABEL_44;
      goto LABEL_37;
    }
    *(_BYTE *)(v43 + v41) = 44;
  }
  v44 = v177;
  if ((v177 & 0x80000000) != 0)
    goto LABEL_44;
LABEL_37:
  v45 = v176;
  if ((v176 || (v45 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v45 + 16) & 4) == 0)
  {
    v46 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v44 + 10), v35, v36, v37, v38, v39, v40);
    if (v46)
    {
      *(_OWORD *)v46 = xmmword_199159FD0;
      *(_DWORD *)(v46 + 16) = 5963834;
    }
  }
  else
  {
    v47 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v44 + 10), v35, v36, v37, v38, v39, v40);
    if (v47)
    {
      *(_WORD *)(v47 + 8) = 23354;
      *(_QWORD *)v47 = *(_QWORD *)"\"fields\":[";
    }
  }
LABEL_44:
  v48 = *(_QWORD *)(a2 + 8);
  if (v48)
  {
    v49 = *(unsigned int *)(v48 - 4);
    v50 = (_QWORD *)(v48 + 8 * v49);
    if (*(_DWORD *)(v48 - 12))
    {
      v51 = *(_QWORD **)(a2 + 8);
      if ((_DWORD)v49)
      {
        v52 = 8 * v49;
        v51 = *(_QWORD **)(a2 + 8);
        while ((unint64_t)(*v51 + 1) <= 1)
        {
          ++v51;
          v52 -= 8;
          if (!v52)
          {
            v51 = v50;
            goto LABEL_51;
          }
        }
      }
      goto LABEL_51;
    }
    v51 = (_QWORD *)(v48 + 8 * v49);
  }
  else
  {
    v51 = 0;
    v49 = 0;
  }
  v50 = (_QWORD *)(v48 + 8 * v49);
  if (v48)
  {
LABEL_51:
    v53 = (_QWORD *)(v48 + 8 * *(unsigned int *)(v48 - 4));
    goto LABEL_55;
  }
  v53 = 0;
LABEL_55:
  if (v53 != v51)
  {
    v54 = 0;
    do
    {
      if ((v54 & 1) != 0)
      {
        v175.i8[0] = 44;
        if (v176 && ((v55 = v177, v177 < *((_DWORD *)v176 + 1)) ? (v56 = v175.i64[1] == 0) : (v56 = 0), v56))
        {
          v57 = *((_DWORD *)v176 + 4);
          v58 = *((_QWORD *)v176 + 1);
          ++v177;
          if ((v57 & 4) != 0)
            *(_BYTE *)(v58 + v55) = 44;
          else
            *(_WORD *)(v58 + 2 * v55) = 44;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v36, v37, v38, v39, v40);
        }
      }
      v59 = (_DWORD *)*v51;
      if (*v51)
        *v59 += 2;
      v175.i64[0] = (uint64_t)v59;
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v175.u64[1], (const WTF::String *)&v175, v35, v36, v37, v38, v39, v40);
      v61 = (WTF::StringImpl *)v175.i64[0];
      v175.i64[0] = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          WTF::StringImpl::~StringImpl(v61, v60, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        }
        else
        {
          *(_DWORD *)v61 -= 2;
        }
      }
      v62 = v51 + 1;
      v51 = v50;
      if (v62 != v50)
      {
        v51 = v62;
        while ((unint64_t)(*v51 + 1) <= 1)
        {
          if (++v51 == v50)
          {
            v51 = v50;
            break;
          }
        }
      }
      v54 = 1;
    }
    while (v51 != v53);
  }
  if ((v177 & 0x80000000) == 0)
  {
    v71 = v176;
    if ((v176 || (v71 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v71 + 16) & 4) == 0)
    {
      v72 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 2), v35, v36, v37, v38, v39, v40);
      if (v72)
        *v72 = 2883677;
    }
    else
    {
      v73 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 2), v35, v36, v37, v38, v39, v40);
      if (v73)
        *v73 = 11357;
    }
    if ((v177 & 0x80000000) == 0)
    {
      v74 = v176;
      if ((v176 || (v74 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v74 + 16) & 4) == 0)
      {
        v75 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 18), v35, v36, v37, v38, v39, v40);
        if (v75)
        {
          *(_OWORD *)v75 = xmmword_199159FE0;
          *(_OWORD *)(v75 + 16) = xmmword_199159FF0;
          *(_DWORD *)(v75 + 32) = 5963834;
        }
      }
      else
      {
        v76 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 18), v35, v36, v37, v38, v39, v40);
        if (v76)
        {
          *(_WORD *)(v76 + 16) = 23354;
          *(_OWORD *)v76 = *(_OWORD *)"\"optionalFields\":[";
        }
      }
    }
  }
  v77 = *(_QWORD *)(a2 + 16);
  if (v77)
  {
    v78 = *(unsigned int *)(v77 - 4);
    v79 = (_QWORD *)(v77 + 8 * v78);
    if (*(_DWORD *)(v77 - 12))
    {
      v80 = *(_QWORD **)(a2 + 16);
      if ((_DWORD)v78)
      {
        v81 = 8 * v78;
        v80 = *(_QWORD **)(a2 + 16);
        while ((unint64_t)(*v80 + 1) <= 1)
        {
          ++v80;
          v81 -= 8;
          if (!v81)
          {
            v80 = v79;
            goto LABEL_104;
          }
        }
      }
      goto LABEL_104;
    }
    v80 = (_QWORD *)(v77 + 8 * v78);
  }
  else
  {
    v80 = 0;
    v78 = 0;
  }
  v79 = (_QWORD *)(v77 + 8 * v78);
  if (v77)
  {
LABEL_104:
    v82 = (_QWORD *)(v77 + 8 * *(unsigned int *)(v77 - 4));
    goto LABEL_108;
  }
  v82 = 0;
LABEL_108:
  if (v82 != v80)
  {
    v83 = 0;
    do
    {
      if ((v83 & 1) != 0)
      {
        v175.i8[0] = 44;
        if (v176 && ((v84 = v177, v177 < *((_DWORD *)v176 + 1)) ? (v85 = v175.i64[1] == 0) : (v85 = 0), v85))
        {
          v86 = *((_DWORD *)v176 + 4);
          v87 = *((_QWORD *)v176 + 1);
          ++v177;
          if ((v86 & 4) != 0)
            *(_BYTE *)(v87 + v84) = 44;
          else
            *(_WORD *)(v87 + 2 * v84) = 44;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v36, v37, v38, v39, v40);
        }
      }
      v88 = (_DWORD *)*v80;
      if (*v80)
        *v88 += 2;
      v175.i64[0] = (uint64_t)v88;
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v175.u64[1], (const WTF::String *)&v175, v35, v36, v37, v38, v39, v40);
      v90 = (WTF::StringImpl *)v175.i64[0];
      v175.i64[0] = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v89, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
        }
        else
        {
          *(_DWORD *)v90 -= 2;
        }
      }
      v91 = v80 + 1;
      v80 = v79;
      if (v91 != v79)
      {
        v80 = v91;
        while ((unint64_t)(*v80 + 1) <= 1)
        {
          if (++v80 == v79)
          {
            v80 = v79;
            break;
          }
        }
      }
      v83 = 1;
    }
    while (v80 != v82);
  }
  v175.i8[0] = 93;
  if (v176 && ((v100 = v177, v177 < *((_DWORD *)v176 + 1)) ? (v101 = v175.i64[1] == 0) : (v101 = 0), v101))
  {
    v102 = *((_DWORD *)v176 + 4);
    v103 = *((_QWORD *)v176 + 1);
    ++v177;
    if ((v102 & 4) != 0)
      *(_BYTE *)(v103 + v100) = 93;
    else
      *(_WORD *)(v103 + 2 * v100) = 93;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v36, v37, v38, v39, v40);
  }
  v175.i8[0] = 44;
  if (v176 && ((v104 = v177, v177 < *((_DWORD *)v176 + 1)) ? (v105 = v175.i64[1] == 0) : (v105 = 0), v105))
  {
    v106 = *((_DWORD *)v176 + 4);
    v107 = *((_QWORD *)v176 + 1);
    v108 = ++v177;
    if ((v106 & 4) == 0)
    {
      *(_WORD *)(v107 + 2 * v104) = 44;
      if (v108 < 0)
        goto LABEL_158;
      goto LABEL_151;
    }
    *(_BYTE *)(v107 + v104) = 44;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v36, v37, v38, v39, v40);
  }
  v108 = v177;
  if ((v177 & 0x80000000) != 0)
    goto LABEL_158;
LABEL_151:
  v109 = v176;
  if ((v176 || (v109 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v109 + 16) & 4) == 0)
  {
    v110 = (_OWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v108 + 8), v35, v36, v37, v38, v39, v40);
    if (v110)
      *v110 = xmmword_19915A000;
  }
  else
  {
    v111 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v108 + 8), v35, v36, v37, v38, v39, v40);
    if (v111)
      *v111 = 0x3A226F746F727022;
  }
LABEL_158:
  v112 = *(WTF::AtomStringImpl **)(a2 + 24);
  if (!v112)
  {
    if ((v177 & 0x80000000) == 0)
    {
      v116 = v176;
      if ((v176 || (v116 = (WTF::StringImpl *)v175.i64[1]) != 0) && (*((_BYTE *)v116 + 16) & 4) == 0)
      {
        v117 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 4), v35, v36, v37, v38, v39, v40);
        if (v117)
          *v117 = 0x6C006C0075006ELL;
      }
      else
      {
        v118 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)(v177 + 4), v35, v36, v37, v38, v39, v40);
        if (v118)
          *v118 = 1819047278;
      }
    }
    goto LABEL_180;
  }
  JSC::StructureShape::toJSONString((JSC::StructureShape *)&v175);
  v113 = (WTF::StringImpl *)v175.i64[0];
  if (v177 || v176)
  {
    if (v175.i64[0])
    {
      v165 = *(int8x16_t **)(v175.i64[0] + 8);
      v166 = *(unsigned int *)(v175.i64[0] + 4);
      if ((*(_BYTE *)(v175.i64[0] + 16) & 4) == 0)
      {
        WTF::StringBuilder::append((uint64_t)&v175.i64[1], v165, v166, v36, v37, v38, v39, v40);
        goto LABEL_169;
      }
    }
    else
    {
      v165 = 0;
      v166 = 0;
    }
    WTF::StringBuilder::append((uint64_t)&v175.i64[1], v165, v166, v36, v37, v38, v39, v40);
    if (!v113)
      goto LABEL_180;
LABEL_169:
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v112, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
    goto LABEL_180;
  }
  if (v175.i64[0])
    *(_DWORD *)v175.i64[0] += 2;
  v114 = (WTF::StringImpl *)v175.i64[1];
  v175.i64[1] = (uint64_t)v113;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v112, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
      if (v113)
        goto LABEL_167;
      goto LABEL_197;
    }
    *(_DWORD *)v114 -= 2;
  }
  if (v113)
  {
LABEL_167:
    v115 = *((_DWORD *)v113 + 1);
    goto LABEL_168;
  }
LABEL_197:
  v115 = 0;
LABEL_168:
  v177 = v115;
  if (v113)
    goto LABEL_169;
LABEL_180:
  v175.i8[0] = 125;
  if (!v176 || (v127 = v177, v177 >= *((_DWORD *)v176 + 1)) || v175.i64[1])
  {
    WTF::StringBuilder::append((uint64_t)&v175.i64[1], &v175, 1uLL, v36, v37, v38, v39, v40);
  }
  else
  {
    v128 = *((_DWORD *)v176 + 4);
    v129 = *((_QWORD *)v176 + 1);
    ++v177;
    if ((v128 & 4) != 0)
      *(_BYTE *)(v129 + v127) = 125;
    else
      *(_WORD *)(v129 + 2 * v127) = 125;
  }
  v130 = (_DWORD *)v175.i64[1];
  if (v175.i64[1])
    goto LABEL_186;
  if ((v177 & 0x80000000) == 0 && v176 && *((_DWORD *)v176 + 1) > v177 + (v177 >> 2))
  {
    if ((*((_BYTE *)v176 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)v177, v35, v36, v37, v38, v39, v40);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v175.i64[1], (WTF::AtomStringImpl *)v177, v35, v36, v37, v38, v39, v40);
    v164 = (WTF::StringImpl *)v175.i64[1];
    v175.i64[1] = (uint64_t)v176;
    v176 = 0;
    if (v164)
    {
      if (*(_DWORD *)v164 == 2)
      {
        WTF::StringImpl::~StringImpl(v164, v157, v158, v159, v160, v161, v162, v163);
        WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
      }
      else
      {
        *(_DWORD *)v164 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v175.u64[1]);
  v130 = (_DWORD *)v175.i64[1];
  if (v175.i64[1])
LABEL_186:
    *v130 += 2;
  *(_QWORD *)this = v130;
  v131 = v176;
  v176 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v112, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = (WTF::StringImpl *)v175.i64[1];
  v175.i64[1] = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v112, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
}

uint64_t JSC::TypedArrayController::TypedArrayController(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E35B2D80;
  return this;
}

uint64_t JSC::VM::canUseAssembler(JSC::VM *this)
{
  char v2;

  std::call_once[abi:sn180100]<JSC::VM::canUseAssembler(void)::$_0>((uint64_t)&v2);
  return JSC::VM::canUseAssembler(void)::enabled;
}

void std::call_once[abi:sn180100]<JSC::VM::canUseAssembler(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::VM::canUseAssembler(void)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::VM::canUseAssembler(void)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VM::canUseAssembler(void)::$_0 &&>>);
  }
}

void JSC::VM::computeCanUseJIT(JSC::VM *this)
{
  BOOL v1;
  char v2;
  char v3;

  std::call_once[abi:sn180100]<JSC::VM::canUseAssembler(void)::$_0>((uint64_t)&v3);
  if (JSC::VM::canUseAssembler(void)::enabled)
    v1 = BYTE1(dword_1ECF4C240) == 0;
  else
    v1 = 1;
  v2 = !v1;
  byte_1ECF4C1E6 = v2;
}

uint64_t JSC::VM::VM(uint64_t a1, int a2, int a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 *v31;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  JSC::BuiltinExecutables *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  unint64_t StatusReg;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  JSC::VM *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t SlowCase;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  JSC::VM *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int8x16_t v131;
  JSC::CommonIdentifiers *v132;
  const WTF::StringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::VM *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  JSC::VM *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  JSC::VM *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  JSC::VM *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  JSC::VM *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  JSC::VM *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  JSC::VM *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  JSC::VM *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  JSC::VM *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  JSC::VM *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  JSC::VM *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  JSC::VM *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  JSC::VM *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  JSC::VM *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  JSC::VM *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  JSC::VM *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  JSC::VM *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  double v317;
  JSC::VM *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  JSC::VM *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  JSC::VM *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  JSC::VM *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  JSC::VM *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  JSC::VM *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  JSC::VM *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  double v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  double v392;
  JSC::VM *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  JSC::VM *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  JSC::VM *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  JSC::VM *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  double v434;
  JSC::VM *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v442;
  unint64_t v443;
  void *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _DWORD *v448;
  JSC::BytecodeIntrinsicRegistry *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  WTF::AtomStringImpl *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  JSC::BytecodeIntrinsicRegistry *v463;
  unint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  uint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  JSC::JITThunks *v481;
  unint64_t v482;
  void *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  WTF *v498;
  void *v499;
  uint8x8_t v500;
  JSC::SharedJITStubSet *v501;
  unint64_t v502;
  void *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v512;
  WTF::StringImpl ***v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  WTF::AtomStringImpl *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  JSC::Profiler::Database **v557;
  uint64_t v558;
  double v559;
  WTF::StringImpl ***v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  double v574;
  JSC::Profiler::Database *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  char *v582;
  void *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  WTF *v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  void *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  WTF::StringImpl ****v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  WTF *v714;
  int v715;
  unsigned int *v716;
  char *v717;
  WTF::StringImpl ***v718[22];

  v718[20] = *(WTF::StringImpl ****)MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 1;
  v9 = a1 + 90408;
  v712 = (_QWORD *)(a1 + 93216);
  v713 = a1 + 86800;
  v10 = (_QWORD *)(a1 + 64840);
  v11 = a1 + 41920;
  v12 = (uint64_t *)(a1 + 41640);
  *(_QWORD *)(a1 + 93520) = 0;
  *(_QWORD *)(a1 + 93528) = 0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  v13 = a1 + 40136;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_QWORD *)(a1 + 49) = 0;
  v14 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v14 = 1;
  *(_BYTE *)(v14 + 4) = 0;
  *(_QWORD *)(a1 + 64) = v14;
  v15 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v15 = 1;
  *(_BYTE *)(v15 + 4) = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 83) = 0;
  do
  {
    v16 = __ldaxr(&WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current);
    v17 = v16 + 1;
  }
  while (__stlxr(v17, &WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current));
  *(_QWORD *)(a1 + 104) = v17;
  v18 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v18 = 1;
  *(_WORD *)(v18 + 4) = 0;
  *(_BYTE *)(v18 + 6) = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)(a1 + 112) = v18;
  if (!a4)
  {
    v18 = WTF::RunLoop::current((WTF::RunLoop *)v18);
    a4 = v18;
  }
  v26 = (unsigned int *)(a4 + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  *(_QWORD *)(a1 + 120) = a4;
  v28 = dword_1ECF4C65C;
  if (dword_1ECF4C65C)
  {
    *(_DWORD *)(a1 + 128) = dword_1ECF4C65C;
  }
  else
  {
    v18 = WTF::cryptographicallyRandomNumber<unsigned int>(v18, v19, v20, v21, v22, v23, v24, v25);
    *(_DWORD *)(a1 + 128) = v18;
    if ((_DWORD)v18)
      v28 = v18;
    else
      v28 = 1;
  }
  *(_QWORD *)(a1 + 136) = v28;
  *(_QWORD *)(a1 + 144) = (((unint64_t)v28 >> 26) | ((unint64_t)v28 << 23)) ^ ((v28 ^ ((unint64_t)v28 << 23)) >> 17);
  v29 = dword_1ECF4C65C;
  if (dword_1ECF4C65C)
  {
    *(_DWORD *)(a1 + 152) = dword_1ECF4C65C;
  }
  else
  {
    v30 = WTF::cryptographicallyRandomNumber<unsigned int>(v18, v19, v20, v21, v22, v23, v24, v25);
    *(_DWORD *)(a1 + 152) = v30;
    if (v30)
      v29 = v30;
    else
      v29 = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
  v31 = (unsigned __int8 *)(a1 + 184);
  *(_QWORD *)(a1 + 160) = v29;
  *(_QWORD *)(a1 + 168) = (((unint64_t)v29 >> 26) | ((unint64_t)v29 << 23)) ^ ((v29 ^ ((unint64_t)v29 << 23)) >> 17);
  if (__ldaxr((unsigned __int8 *)(a1 + 184)))
  {
    __clrex();
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 184);
    goto LABEL_18;
  }
  if (__stxr(1u, v31))
    goto LABEL_17;
LABEL_18:
  v33 = *(double *)&qword_1ECF4C608;
  if (*(double *)&qword_1ECF4C608 == 0.0)
  {
    *(_QWORD *)(a1 + 176) = 0;
  }
  else
  {
    v34 = 0;
    v33 = *(double *)&qword_1ECF4C608 * 4294967300.0;
    v36 = *(_QWORD *)(a1 + 136);
    v35 = *(_QWORD *)(a1 + 144);
    v37 = 0x8000000000000000;
    do
    {
      v38 = v35;
      v35 = (v38 >> 26) ^ ((v36 ^ (v36 << 23)) >> 17) ^ v38 ^ v36 ^ (v36 << 23);
      v37 |= (unint64_t)((int)v35 + (int)v38 <= (*(double *)&qword_1ECF4C608 * 4294967300.0)) << v34++;
      v36 = v38;
    }
    while (v34 != 63);
    *(_QWORD *)(a1 + 176) = v37;
    *(_QWORD *)(a1 + 136) = v35;
    *(_QWORD *)(a1 + 144) = ((v38 ^ (v38 << 23)) >> 17) ^ (v35 >> 26) ^ v38 ^ (v38 << 23) ^ v35;
  }
  v39 = __ldxr(v31);
  if (v39 == 1)
  {
    if (!__stlxr(0, v31))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 184), 0, v20, v21, v22, v23, v24, v25);
LABEL_27:
  JSC::Heap::Heap(a1 + 192, a1, a3, v33);
  JSC::GCClient::Heap::Heap((JSC::GCClient::Heap *)(a1 + 37552), (JSC::Heap *)(a1 + 192), v40, v41, v42, v43, v44, v45);
  v710 = (WTF::StringImpl ****)(v13 + 1304);
  *(_QWORD *)(v13 + 1304) = 0;
  *(_DWORD *)(v13 + 1312) = a2;
  *(_BYTE *)(v13 + 1316) = 0;
  *(_OWORD *)(a1 + 41456) = 0u;
  *(_OWORD *)(a1 + 41472) = 0u;
  *(_BYTE *)(a1 + 41488) = 0;
  *(_OWORD *)(v13 + 1360) = 0u;
  *(_OWORD *)(v13 + 1376) = 0u;
  *(_OWORD *)(v13 + 1392) = 0u;
  *(_OWORD *)(v13 + 1408) = 0u;
  *(_OWORD *)(v13 + 1424) = 0u;
  *(_OWORD *)(v13 + 1440) = 0u;
  *(_OWORD *)(v13 + 1456) = 0u;
  *(_OWORD *)(v13 + 1472) = 0u;
  *(_OWORD *)(v13 + 1488) = 0u;
  *(_OWORD *)(v13 + 1504) = 0u;
  *(_OWORD *)(v13 + 1520) = 0u;
  *(_OWORD *)(v13 + 1536) = 0u;
  *(_OWORD *)(v13 + 1552) = 0u;
  *(_OWORD *)(v13 + 1568) = 0u;
  *(_OWORD *)(v13 + 1584) = 0u;
  *(_OWORD *)(v13 + 1600) = 0u;
  *(_OWORD *)(v13 + 1616) = 0u;
  *(_OWORD *)(v13 + 1632) = 0u;
  *(_OWORD *)(v13 + 1648) = 0u;
  *(_OWORD *)(v13 + 1664) = 0u;
  *(_OWORD *)(v13 + 1680) = 0u;
  *(_OWORD *)(v13 + 1696) = 0u;
  *(_OWORD *)(v13 + 1712) = 0u;
  *(_OWORD *)(v13 + 1728) = 0u;
  *(_QWORD *)(v13 + 1744) = 0;
  v46 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v46 + 8) = 1;
  *(_QWORD *)v46 = off_1E35A2D40;
  v47 = *(unsigned int **)(a1 + 112);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 + 1, v47));
  *(_QWORD *)(v46 + 16) = v47;
  *(_QWORD *)(v46 + 24) = 0;
  *(_DWORD *)(v46 + 31) = 0;
  *(_QWORD *)v46 = off_1E3598F68;
  *(_DWORD *)(v46 + 35) = 256;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_QWORD *)(v46 + 72) = 0;
  v12[31] = v46;
  *(_OWORD *)(a1 + 41896) = 0u;
  if (a2)
  {
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v49 = 0;
  }
  else
  {
    v592 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v592)
      v592 = WTF::Thread::initializeCurrentTLS(0);
    v49 = *(_QWORD **)(v592 + 56);
  }
  v12[34] = (uint64_t)v49;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 24) = 1;
  *(_QWORD *)(v11 + 32) = 0;
  v50 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0;
  *(_DWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v11 + 40) = v50;
  *(_QWORD *)(a1 + 42208) = 0;
  *(_OWORD *)(a1 + 42192) = 0u;
  *(_OWORD *)(a1 + 42176) = 0u;
  *(_OWORD *)(a1 + 42160) = 0u;
  *(_OWORD *)(a1 + 42144) = 0u;
  *(_OWORD *)(a1 + 42128) = 0u;
  *(_OWORD *)(a1 + 42112) = 0u;
  *(_OWORD *)(a1 + 42096) = 0u;
  *(_OWORD *)(a1 + 42080) = 0u;
  *(_OWORD *)(a1 + 42064) = 0u;
  *(_OWORD *)(a1 + 42048) = 0u;
  *(_OWORD *)(a1 + 42032) = 0u;
  *(_OWORD *)(a1 + 42016) = 0u;
  *(_OWORD *)(a1 + 42000) = 0u;
  *(_OWORD *)(a1 + 41984) = 0u;
  *(_OWORD *)(a1 + 41968) = 0u;
  *(_WORD *)(v11 + 2344) = 1;
  bzero((void *)(a1 + 42216), 0x800uLL);
  v51 = (uint64_t *)(a1 + 44272);
  bzero((void *)(a1 + 44272), 0x5000uLL);
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v52[1] = 0;
  v52[2] = 0;
  *v52 = 0;
  *(_QWORD *)(v11 + 22832) = v52;
  *(_QWORD *)(v11 + 22840) = 0;
  WTF::StringImpl::s_emptyAtomString += 4;
  *(int64x2_t *)(a1 + 64768) = vdupq_n_s64((unint64_t)&WTF::StringImpl::s_emptyAtomString);
  bzero((void *)(a1 + 64784), 0x4000uLL);
  v53 = 256;
  do
  {
    *((_WORD *)v10 - 1) = 0;
    *v10 = 0;
    v10 += 8;
    --v53;
  }
  while (v53);
  bzero((void *)(a1 + 81168), 0x2410uLL);
  for (i = 0; i != 3584; i += 56)
  {
    v60 = (_QWORD *)(a1 + 86840 + i);
    *(v60 - 3) = 0;
    *(v60 - 2) = 0;
    *(v60 - 1) = 0;
    *v60 = -1;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = 0;
  }
  *(_QWORD *)(v713 + 3600) = 0;
  *(_QWORD *)v9 = off_1E35B2E30;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a1;
  v717 = (char *)v9;
  WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add((uint64_t *)(a1 + 920), (uint64_t *)&v717, v54, v55, v56, v57, v58, (uint64_t)v718);
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_DWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 144) = 0;
  *(_OWORD *)(a1 + 90432) = 0u;
  *(_OWORD *)(a1 + 90448) = 0u;
  *(_QWORD *)(a1 + 90464) = 0;
  *(_QWORD *)(a1 + 90568) = 0;
  *(_OWORD *)(a1 + 90576) = 0u;
  JSC::DateCache::DateCache((JSC::DateCache *)(a1 + 90592));
  *(_OWORD *)(v9 + 2608) = 0u;
  v61 = WTF::fastMalloc((WTF *)0x230);
  *(_OWORD *)(v61 + 24) = 0u;
  *(_QWORD *)v61 = off_1E35AD590;
  *(_OWORD *)(v61 + 8) = 0u;
  *(_QWORD *)(v61 + 21) = 0;
  bzero((void *)(v61 + 40), 0x208uLL);
  *(_QWORD *)(v9 + 2624) = v61;
  *(_QWORD *)(v9 + 2632) = 0;
  *(_WORD *)(v9 + 2640) = 0;
  *(_QWORD *)(v9 + 2648) = 0;
  v62 = WTF::fastMalloc((WTF *)0x10);
  v63 = 1;
  *(_DWORD *)v62 = 1;
  *(_QWORD *)(v62 + 8) = 0;
  *(_QWORD *)(v9 + 2656) = v62;
  *(_OWORD *)(v9 + 2672) = 0u;
  *(_QWORD *)(v9 + 2664) = 0;
  *(_WORD *)(a1 + 93120) = 0;
  *(_OWORD *)(a1 + 93104) = 0u;
  *(_WORD *)(v9 + 2714) = 1;
  *(_DWORD *)(v9 + 2716) = 0;
  *(_QWORD *)(v9 + 2720) = 0;
  v64 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)v64 = 0u;
  *(_OWORD *)(v64 + 16) = 0u;
  *(_OWORD *)(v64 + 32) = 0u;
  *(_QWORD *)(v64 + 48) = 0;
  *(double *)(v64 + 24) = WTF::ApproximateTime::now((WTF::ApproximateTime *)v64);
  *(_QWORD *)(v64 + 32) = 0;
  *(_OWORD *)(v64 + 40) = 0u;
  *(_QWORD *)(v9 + 2728) = v64;
  v65 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v65 = 0u;
  *(_QWORD *)(v9 + 2736) = v65;
  v66 = (JSC::BuiltinExecutables *)WTF::fastMalloc((WTF *)0x7D0);
  *(_QWORD *)(v9 + 2744) = JSC::BuiltinExecutables::BuiltinExecutables(v66, (JSC::VM *)a1);
  *(_QWORD *)(a1 + 93160) = 0;
  *(_OWORD *)(a1 + 93168) = 0u;
  *(_QWORD *)(a1 + 93182) = 0;
  *(_QWORD *)(a1 + 93192) = 0;
  *(_OWORD *)(a1 + 93200) = 0u;
  *v712 = a1 + 93232;
  v712[1] = 4;
  v712[6] = 3;
  *(_OWORD *)(a1 + 93296) = 0u;
  *(_OWORD *)(a1 + 93312) = 0u;
  *(_DWORD *)(a1 + 93328) = 0;
  v712[29] = 0;
  *(_OWORD *)(a1 + 93272) = 0u;
  *(_DWORD *)(a1 + 93288) = 0;
  *(_OWORD *)(a1 + 93336) = 0u;
  *(_OWORD *)(a1 + 93352) = 0u;
  *(_OWORD *)(a1 + 93368) = 0u;
  *(_OWORD *)(a1 + 93384) = 0u;
  *(_OWORD *)(a1 + 93400) = 0u;
  *(_OWORD *)(a1 + 93416) = 0u;
  *(_OWORD *)(a1 + 93430) = 0u;
  v67 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v67 = 0u;
  *(_DWORD *)(v67 + 16) = 1;
  *(_QWORD *)(v67 + 24) = a1;
  *(_QWORD *)(v67 + 32) = 0;
  *(_OWORD *)(v67 + 40) = 0u;
  *(_WORD *)(v67 + 56) = 0;
  v712[30] = v67;
  *(_OWORD *)(a1 + 93504) = 0u;
  *(_OWORD *)(a1 + 93464) = 0u;
  *(_OWORD *)(a1 + 93480) = 0u;
  *(_BYTE *)(a1 + 93496) = 0;
  if (JSC::vmCreationShouldCrash | byte_1ECF4C1E2)
  {
    if (byte_1ECF4C092)
    {
      WTF::StringLiterals::operator"" _s("VM creation disallowed");
      abort_with_reason();
LABEL_240:
      v456 = (WTF::AtomStringImpl *)(v63 + 168);
      v512 = *(_QWORD *)(v63 + 168);
      if ((v512 & 1) != 0)
        (*(void (**)(uint64_t))(v512 & 0xFFFFFFFFFFFFFFFCLL))(a1);
      goto LABEL_228;
    }
    __break(0xC471u);
LABEL_377:
    JUMPOUT(0x198C2E0CCLL);
  }
  v75 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v75 != -1)
  {
    v718[0] = (WTF::StringImpl ***)&v716;
    v717 = (char *)v718;
    std::__call_once(&JSC::VMInspector::instance(void)::once, &v717, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v76 = JSC::VMInspector::instance(void)::manager;
  if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    __clrex();
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v76);
    goto LABEL_41;
  }
  if (__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
    goto LABEL_40;
LABEL_41:
  JSC::VMInspector::m_recentVM = a1;
  v78 = (uint64_t *)(v76 + 8);
  v79 = *(_QWORD *)(v76 + 16);
  if (v79)
    v78 = (uint64_t *)(v79 + 93528);
  *v78 = a1;
  *(_QWORD *)(v76 + 16) = a1;
  v712[38] = v79;
  v712[39] = 0;
  v80 = __ldxr((unsigned __int8 *)v76);
  if (v80 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v76))
LABEL_47:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v76, 0, v69, v70, v71, v72, v73, v74);
  *(_QWORD *)(v9 + 2664) = (char *)WTF::LazyUniqueRef<JSC::VM,JSC::HasOwnPropertyCache>::initLater<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_0>(JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_0 const&)::theFunc
                         + 1;
  *(_QWORD *)(v9 + 2672) = (char *)WTF::LazyUniqueRef<JSC::VM,JSC::MegamorphicCache>::initLater<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_1>(JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_1 const&)::theFunc
                         + 1;
  v712[21] = (char *)WTF::LazyUniqueRef<JSC::VM,JSC::ShadowChicken>::initLater<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_2>(JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_2 const&)::theFunc
           + 1;
  v712[17] = (char *)WTF::LazyUniqueRef<JSC::VM,JSC::HeapProfiler>::initLater<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_3>(JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_3 const&)::theFunc
           + 1;
  v712[18] = (char *)WTF::LazyUniqueRef<JSC::VM,WTF::AdaptiveStringSearcherTables>::initLater<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_4>(JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_4 const&)::theFunc
           + 1;
  v712[16] = (char *)&WTF::LazyRef<JSC::VM,JSC::Watchdog>::initLater<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_5>(JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_5 const&)::theFunc
           + 1;
  *(_QWORD *)(v9 + 2688) = HIDWORD(qword_1ECF4C248);
  JSC::VM::updateStackLimits((JSC::VM *)a1, v68, v69, v70, v71, v72, v73, v74);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v82 = *(_QWORD **)(StatusReg + 736);
  if (!v82)
    v82 = (_QWORD *)WTF::Thread::initializeCurrentTLS(0);
  v83 = v82[10];
  *(_QWORD *)(v9 + 2704) = v83;
  v84 = v82[2];
  if (!v84 || v84 < v83 || v82[3] >= v83)
  {
    __break(0xC471u);
    goto LABEL_377;
  }
  v85 = WTF::fastMalloc((WTF *)0x400);
  *(_DWORD *)(v713 + 8) = 256;
  *(_QWORD *)v713 = v85;
  v86 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v86 != -1)
  {
    v718[0] = (WTF::StringImpl ***)&v716;
    v717 = (char *)v718;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v717, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::registerVM((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::VM *)a1);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v716, (JSC::VM *)a1, v87, v88, v89, v90, v91, v92, v93);
  v101 = *(_QWORD *)(StatusReg + 736);
  if (!v101)
    v101 = WTF::Thread::initializeCurrentTLS(0);
  v711 = *(_QWORD *)(v101 + 56);
  *(_QWORD *)(v101 + 56) = v12[34];
  v708 = a1 + 40112;
  SlowCase = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_58;
  SlowCase = *(_QWORD *)(v13 + 16);
  if ((SlowCase & 1) == 0)
  {
    v527 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = SlowCase + HIDWORD(v527);
    *(_QWORD *)(v13 + 16) = SlowCase + (int)v527;
LABEL_58:
    *(_QWORD *)v13 = SlowCase + 128;
    goto LABEL_59;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v94, v95, v96, v97, v98, v99, v100);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v615, v616, v617);
LABEL_59:
  *(_DWORD *)SlowCase = 0;
  v103 = JSC::Structure::Structure(SlowCase);
  *(_DWORD *)v103 = v103 >> 4;
  *(_BYTE *)(v103 + 4) = *(_BYTE *)(v103 + 8);
  *(_WORD *)(v103 + 5) = *(_WORD *)(v103 + 9);
  *(_QWORD *)(v13 + 1360) = v103;
  *(_QWORD *)(v13 + 1368) = JSC::StructureRareData::createStructure((JSC::VM *)a1, 0, 2, v109, v104, v105, v106, v107, v108);
  LODWORD(v718[0]) = 117442562;
  v117 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
  {
LABEL_60:
    *(_QWORD *)v13 = v117 + 128;
    goto LABEL_61;
  }
  v117 = *(_QWORD *)(v13 + 16);
  if ((v117 & 1) == 0)
  {
    v528 = *(_QWORD *)(v117 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v117 + HIDWORD(v528);
    *(_QWORD *)(v13 + 16) = v117 + (int)v528;
    goto LABEL_60;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v110, v111, v112, v113, v114, v115, v116);
  v117 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v618, v619, v620);
LABEL_61:
  *(_DWORD *)v117 = 0;
  v118 = JSC::Structure::Structure(v117, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSString::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1376) = v118;
  JSC::SmallStrings::initializeCommonStrings((JSC::SmallStrings *)(a1 + 41968), (JSC::VM *)a1, v119, v120, v121, v122, v123, v124);
  JSC::NumericStrings::initializeSmallIntCache((JSC::NumericStrings *)(a1 + 44272), (JSC::VM *)a1, v125, v126, v127, v128, v129, v130, v131);
  v132 = (JSC::CommonIdentifiers *)WTF::fastMalloc((WTF *)0xAF8);
  *(_QWORD *)(v11 + 32) = JSC::CommonIdentifiers::CommonIdentifiers(v132, (JSC::VM *)a1, v133, v134, v135, v136, v137, v138);
  LODWORD(v718[0]) = 0x2000000;
  v146 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 >= *(_QWORD *)(v13 + 8))
  {
    v146 = *(_QWORD *)(v13 + 16);
    v51 = g_config;
    if ((v146 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)a1, v139, v140, v141, v142, v143, v144, v145);
      v146 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v621, v622, v623);
    }
    else
    {
      v529 = *(_QWORD *)(v146 + 8) ^ *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 8) = v146 + HIDWORD(v529);
      *(_QWORD *)(v13 + 16) = v146 + (int)v529;
      *(_QWORD *)v13 = v146 + 128;
    }
  }
  else
  {
    *(_QWORD *)v13 = v146 + 128;
    v51 = g_config;
  }
  *(_DWORD *)v146 = 0;
  v147 = JSC::Structure::Structure(v146, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSPropertyNameEnumerator::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1384) = v147;
  LODWORD(v718[0]) = 100665349;
  v155 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_68;
  v155 = *(_QWORD *)(v13 + 16);
  if ((v155 & 1) == 0)
  {
    v530 = *(_QWORD *)(v155 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v155 + HIDWORD(v530);
    *(_QWORD *)(v13 + 16) = v155 + (int)v530;
LABEL_68:
    *(_QWORD *)v13 = v155 + 128;
    goto LABEL_69;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v148, v149, v150, v151, v152, v153, v154);
  v155 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v624, v625, v626);
LABEL_69:
  *(_DWORD *)v155 = 0;
  v156 = JSC::Structure::Structure(v155, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::GetterSetter::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1392) = v156;
  LODWORD(v718[0]) = 100665350;
  v164 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_72;
  v164 = *(_QWORD *)(v13 + 16);
  if ((v164 & 1) == 0)
  {
    v531 = *(_QWORD *)(v164 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v164 + HIDWORD(v531);
    *(_QWORD *)(v13 + 16) = v164 + (int)v531;
LABEL_72:
    *(_QWORD *)v13 = v164 + 128;
    goto LABEL_73;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v157, v158, v159, v160, v161, v162, v163);
  v164 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v627, v628, v629);
LABEL_73:
  *(_DWORD *)v164 = 0;
  v165 = JSC::Structure::Structure(v164, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::CustomGetterSetter::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1400) = v165;
  LODWORD(v718[0]) = 100665350;
  v173 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_76;
  v173 = *(_QWORD *)(v13 + 16);
  if ((v173 & 1) == 0)
  {
    v532 = *(_QWORD *)(v173 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v173 + HIDWORD(v532);
    *(_QWORD *)(v13 + 16) = v173 + (int)v532;
LABEL_76:
    *(_QWORD *)v13 = v173 + 128;
    goto LABEL_77;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v166, v167, v168, v169, v170, v171, v172);
  v173 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v630, v631, v632);
LABEL_77:
  *(_DWORD *)v173 = 0;
  v174 = JSC::Structure::Structure(v173, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::DOMAttributeGetterSetter::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1408) = v174;
  *(_QWORD *)(v13 + 1416) = JSC::ScopedArgumentsTable::createStructure((unint64_t *)a1, 0, 2uLL, v175, v176, v177, v178, v179, v180);
  *(_QWORD *)(v13 + 1424) = JSC::JSAPIValueWrapper::createStructure((unint64_t *)a1, 0, 2uLL, v181, v182, v183, v184, v185, v186);
  *(_QWORD *)(v13 + 1432) = JSC::NativeExecutable::createStructure((unint64_t *)a1, 0, 2uLL, v187, v188, v189, v190, v191, v192);
  LODWORD(v718[0]) = 33554443;
  v200 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_80;
  v200 = *(_QWORD *)(v13 + 16);
  if ((v200 & 1) == 0)
  {
    v533 = *(_QWORD *)(v200 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v200 + HIDWORD(v533);
    *(_QWORD *)(v13 + 16) = v200 + (int)v533;
LABEL_80:
    *(_QWORD *)v13 = v200 + 128;
    goto LABEL_81;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v193, v194, v195, v196, v197, v198, v199);
  v200 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v633, v634, v635);
LABEL_81:
  *(_DWORD *)v200 = 0;
  v201 = JSC::Structure::Structure(v200, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::EvalExecutable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1440) = v201;
  LODWORD(v718[0]) = 33554441;
  v209 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_84;
  v209 = *(_QWORD *)(v13 + 16);
  if ((v209 & 1) == 0)
  {
    v534 = *(_QWORD *)(v209 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v209 + HIDWORD(v534);
    *(_QWORD *)(v13 + 16) = v209 + (int)v534;
LABEL_84:
    *(_QWORD *)v13 = v209 + 128;
    goto LABEL_85;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v202, v203, v204, v205, v206, v207, v208);
  v209 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v636, v637, v638);
LABEL_85:
  *(_DWORD *)v209 = 0;
  v210 = JSC::Structure::Structure(v209, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::ProgramExecutable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1448) = v210;
  LODWORD(v718[0]) = 33554444;
  v218 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_88;
  v218 = *(_QWORD *)(v13 + 16);
  if ((v218 & 1) == 0)
  {
    v535 = *(_QWORD *)(v218 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v218 + HIDWORD(v535);
    *(_QWORD *)(v13 + 16) = v218 + (int)v535;
LABEL_88:
    *(_QWORD *)v13 = v218 + 128;
    goto LABEL_89;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v211, v212, v213, v214, v215, v216, v217);
  v218 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v639, v640, v641);
LABEL_89:
  *(_DWORD *)v218 = 0;
  v219 = JSC::Structure::Structure(v218, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::FunctionExecutable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1456) = v219;
  LODWORD(v718[0]) = 33554442;
  v227 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_92;
  v227 = *(_QWORD *)(v13 + 16);
  if ((v227 & 1) == 0)
  {
    v536 = *(_QWORD *)(v227 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v227 + HIDWORD(v536);
    *(_QWORD *)(v13 + 16) = v227 + (int)v536;
LABEL_92:
    *(_QWORD *)v13 = v227 + 128;
    goto LABEL_93;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v220, v221, v222, v223, v224, v225, v226);
  v227 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v642, v643, v644);
LABEL_93:
  *(_DWORD *)v227 = 0;
  v228 = JSC::Structure::Structure(v227, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::ModuleProgramExecutable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1472) = v228;
  LODWORD(v718[0]) = 0x2000000;
  v236 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_96;
  v236 = *(_QWORD *)(v13 + 16);
  if ((v236 & 1) == 0)
  {
    v537 = *(_QWORD *)(v236 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v236 + HIDWORD(v537);
    *(_QWORD *)(v13 + 16) = v236 + (int)v537;
LABEL_96:
    *(_QWORD *)v13 = v236 + 128;
    goto LABEL_97;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v229, v230, v231, v232, v233, v234, v235);
  v236 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v645, v646, v647);
LABEL_97:
  *(_DWORD *)v236 = 0;
  v237 = JSC::Structure::Structure(v236, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::RegExp::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1480) = v237;
  LODWORD(v718[0]) = 100663300;
  v245 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_100;
  v245 = *(_QWORD *)(v13 + 16);
  if ((v245 & 1) == 0)
  {
    v538 = *(_QWORD *)(v245 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v245 + HIDWORD(v538);
    *(_QWORD *)(v13 + 16) = v245 + (int)v538;
LABEL_100:
    *(_QWORD *)v13 = v245 + 128;
    goto LABEL_101;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v238, v239, v240, v241, v242, v243, v244);
  v245 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v648, v649, v650);
LABEL_101:
  *(_DWORD *)v245 = 0;
  v246 = JSC::Structure::Structure(v245, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::Symbol::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1488) = v246;
  LODWORD(v718[0]) = 0x2000000;
  v254 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_104;
  v254 = *(_QWORD *)(v13 + 16);
  if ((v254 & 1) == 0)
  {
    v539 = *(_QWORD *)(v254 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v254 + HIDWORD(v539);
    *(_QWORD *)(v13 + 16) = v254 + (int)v539;
LABEL_104:
    *(_QWORD *)v13 = v254 + 128;
    goto LABEL_105;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v247, v248, v249, v250, v251, v252, v253);
  v254 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v651, v652, v653);
LABEL_105:
  *(_DWORD *)v254 = 0;
  v255 = JSC::Structure::Structure(v254, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::SymbolTable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v13 + 1496) = v255;
  LODWORD(v718[0]) = 33554451;
  v263 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_108;
  v263 = *(_QWORD *)(v13 + 16);
  if ((v263 & 1) == 0)
  {
    v540 = *(_QWORD *)(v263 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v263 + HIDWORD(v540);
    *(_QWORD *)(v13 + 16) = v263 + (int)v540;
LABEL_108:
    *(_QWORD *)v13 = v263 + 128;
    goto LABEL_109;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v256, v257, v258, v259, v260, v261, v262);
  v263 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v654, v655, v656);
LABEL_109:
  v264 = StatusReg;
  *(_DWORD *)v263 = 0;
  v265 = JSC::Structure::Structure(v263, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSImmutableButterfly::s_info, 21, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *v12 = v265;
  LODWORD(v718[0]) = 33554451;
  v273 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_112;
  v273 = *(_QWORD *)(v13 + 16);
  if ((v273 & 1) == 0)
  {
    v541 = *(_QWORD *)(v273 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v273 + HIDWORD(v541);
    *(_QWORD *)(v13 + 16) = v273 + (int)v541;
LABEL_112:
    *(_QWORD *)v13 = v273 + 128;
    goto LABEL_113;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v266, v267, v268, v269, v270, v271, v272);
  v273 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v657, v658, v659);
LABEL_113:
  *(_DWORD *)v273 = 0;
  JSC::Structure::Structure(v273, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSImmutableButterfly::s_info, 25, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v281 = v273;
  if (BYTE1(dword_1ECF4C5C0))
  {
    LODWORD(v718[0]) = 33554451;
    v282 = *(_QWORD *)v13;
    if (*(_QWORD *)v13 >= *(_QWORD *)(v13 + 8))
    {
      v282 = *(_QWORD *)(v13 + 16);
      if ((v282 & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)a1, v274, v275, v276, v277, v278, v279, v280);
        v282 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v705, v706, v707);
LABEL_118:
        *(_DWORD *)v282 = 0;
        v281 = JSC::Structure::Structure(v282, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSImmutableButterfly::s_info, 23, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        goto LABEL_120;
      }
      v591 = *(_QWORD *)(v282 + 8) ^ *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 8) = v282 + HIDWORD(v591);
      *(_QWORD *)(v13 + 16) = v282 + (int)v591;
    }
    *(_QWORD *)v13 = v282 + 128;
    goto LABEL_118;
  }
LABEL_120:
  v12[1] = v281;
  v12[2] = v273;
  LODWORD(v718[0]) = 33554452;
  v283 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 >= *(_QWORD *)(v13 + 8))
  {
    v283 = *(_QWORD *)(v13 + 16);
    v63 = (uint64_t)v712;
    if ((v283 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)a1, v274, v275, v276, v277, v278, v279, v280);
      v283 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v660, v661, v662);
    }
    else
    {
      v542 = *(_QWORD *)(v283 + 8) ^ *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 8) = v283 + HIDWORD(v542);
      *(_QWORD *)(v13 + 16) = v283 + (int)v542;
      *(_QWORD *)v13 = v283 + 128;
    }
  }
  else
  {
    *(_QWORD *)v13 = v283 + 128;
    v63 = (uint64_t)v712;
  }
  *(_DWORD *)v283 = 0;
  v284 = JSC::Structure::Structure(v283, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSSourceCode::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[3] = v284;
  LODWORD(v718[0]) = 33554453;
  v292 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_125;
  v292 = *(_QWORD *)(v13 + 16);
  if ((v292 & 1) == 0)
  {
    v543 = *(_QWORD *)(v292 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v292 + HIDWORD(v543);
    *(_QWORD *)(v13 + 16) = v292 + (int)v543;
LABEL_125:
    *(_QWORD *)v13 = v292 + 128;
    goto LABEL_126;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v285, v286, v287, v288, v289, v290, v291);
  v292 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v663, v664, v665);
LABEL_126:
  *(_DWORD *)v292 = 0;
  v293 = JSC::Structure::Structure(v292, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSScriptFetcher::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[4] = v293;
  LODWORD(v718[0]) = 33554454;
  v301 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_129;
  v301 = *(_QWORD *)(v13 + 16);
  if ((v301 & 1) == 0)
  {
    v544 = *(_QWORD *)(v301 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v301 + HIDWORD(v544);
    *(_QWORD *)(v13 + 16) = v301 + (int)v544;
LABEL_129:
    *(_QWORD *)v13 = v301 + 128;
    goto LABEL_130;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v294, v295, v296, v297, v298, v299, v300);
  v301 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v666, v667, v668);
LABEL_130:
  *(_DWORD *)v301 = 0;
  v302 = JSC::Structure::Structure(v301, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSScriptFetchParameters::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[5] = v302;
  LODWORD(v718[0]) = 0x2000000;
  v310 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_133;
  v310 = *(_QWORD *)(v13 + 16);
  if ((v310 & 1) == 0)
  {
    v545 = *(_QWORD *)(v310 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v310 + HIDWORD(v545);
    *(_QWORD *)(v13 + 16) = v310 + (int)v545;
LABEL_133:
    *(_QWORD *)v13 = v310 + 128;
    goto LABEL_134;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v303, v304, v305, v306, v307, v308, v309);
  v310 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v669, v670, v671);
LABEL_134:
  *(_DWORD *)v310 = 0;
  v311 = JSC::Structure::Structure(v310, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::StructureChain::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[6] = v311;
  v12[7] = JSC::SparseArrayValueMap::createStructure((unint64_t *)a1, 0, 2uLL, v312, v313, v314, v315, v316, v317);
  LODWORD(v718[0]) = 0x2000000;
  v325 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_137;
  v325 = *(_QWORD *)(v13 + 16);
  if ((v325 & 1) == 0)
  {
    v546 = *(_QWORD *)(v325 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v325 + HIDWORD(v546);
    *(_QWORD *)(v13 + 16) = v325 + (int)v546;
LABEL_137:
    *(_QWORD *)v13 = v325 + 128;
    goto LABEL_138;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v318, v319, v320, v321, v322, v323, v324);
  v325 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v672, v673, v674);
LABEL_138:
  *(_DWORD *)v325 = 0;
  v326 = JSC::Structure::Structure(v325, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::JSTemplateObjectDescriptor::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[8] = v326;
  LODWORD(v718[0]) = 33554445;
  v334 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_141;
  v334 = *(_QWORD *)(v13 + 16);
  if ((v334 & 1) == 0)
  {
    v547 = *(_QWORD *)(v334 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v334 + HIDWORD(v547);
    *(_QWORD *)(v13 + 16) = v334 + (int)v547;
LABEL_141:
    *(_QWORD *)v13 = v334 + 128;
    goto LABEL_142;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v327, v328, v329, v330, v331, v332, v333);
  v334 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v675, v676, v677);
LABEL_142:
  *(_DWORD *)v334 = 0;
  v335 = JSC::Structure::Structure(v334, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::UnlinkedFunctionExecutable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[9] = v335;
  LODWORD(v718[0]) = 33554446;
  v343 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_145;
  v343 = *(_QWORD *)(v13 + 16);
  if ((v343 & 1) == 0)
  {
    v548 = *(_QWORD *)(v343 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v343 + HIDWORD(v548);
    *(_QWORD *)(v13 + 16) = v343 + (int)v548;
LABEL_145:
    *(_QWORD *)v13 = v343 + 128;
    goto LABEL_146;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v336, v337, v338, v339, v340, v341, v342);
  v343 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v678, v679, v680);
LABEL_146:
  *(_DWORD *)v343 = 0;
  v344 = JSC::Structure::Structure(v343, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::UnlinkedProgramCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[10] = v344;
  LODWORD(v718[0]) = 33554448;
  v352 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_149;
  v352 = *(_QWORD *)(v13 + 16);
  if ((v352 & 1) == 0)
  {
    v549 = *(_QWORD *)(v352 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v352 + HIDWORD(v549);
    *(_QWORD *)(v13 + 16) = v352 + (int)v549;
LABEL_149:
    *(_QWORD *)v13 = v352 + 128;
    goto LABEL_150;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v345, v346, v347, v348, v349, v350, v351);
  v352 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v681, v682, v683);
LABEL_150:
  *(_DWORD *)v352 = 0;
  v353 = JSC::Structure::Structure(v352, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::UnlinkedEvalCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[11] = v353;
  LODWORD(v718[0]) = 33554449;
  v361 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_153;
  v361 = *(_QWORD *)(v13 + 16);
  if ((v361 & 1) == 0)
  {
    v550 = *(_QWORD *)(v361 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v361 + HIDWORD(v550);
    *(_QWORD *)(v13 + 16) = v361 + (int)v550;
LABEL_153:
    *(_QWORD *)v13 = v361 + 128;
    goto LABEL_154;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v354, v355, v356, v357, v358, v359, v360);
  v361 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v684, v685, v686);
LABEL_154:
  *(_DWORD *)v361 = 0;
  v362 = JSC::Structure::Structure(v361, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::UnlinkedFunctionCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[12] = v362;
  LODWORD(v718[0]) = 33554447;
  v370 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_157;
  v370 = *(_QWORD *)(v13 + 16);
  if ((v370 & 1) == 0)
  {
    v551 = *(_QWORD *)(v370 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v370 + HIDWORD(v551);
    *(_QWORD *)(v13 + 16) = v370 + (int)v551;
LABEL_157:
    *(_QWORD *)v13 = v370 + 128;
    goto LABEL_158;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v363, v364, v365, v366, v367, v368, v369);
  v370 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v687, v688, v689);
LABEL_158:
  *(_DWORD *)v370 = 0;
  v371 = JSC::Structure::Structure(v370, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::UnlinkedModuleProgramCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[13] = v371;
  LODWORD(v718[0]) = 0x2000000;
  v379 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_161;
  v379 = *(_QWORD *)(v13 + 16);
  if ((v379 & 1) == 0)
  {
    v552 = *(_QWORD *)(v379 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v379 + HIDWORD(v552);
    *(_QWORD *)(v13 + 16) = v379 + (int)v552;
LABEL_161:
    *(_QWORD *)v13 = v379 + 128;
    goto LABEL_162;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v372, v373, v374, v375, v376, v377, v378);
  v379 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v690, v691, v692);
LABEL_162:
  *(_DWORD *)v379 = 0;
  v380 = JSC::Structure::Structure(v379, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::PropertyTable::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[14] = v380;
  v12[15] = JSC::FunctionRareData::createStructure((unint64_t *)a1, 0, 2uLL, v381, v382, v383, v384, v385, v386);
  v12[16] = JSC::Exception::createStructure((unint64_t *)a1, 0, 2uLL, v387, v388, v389, v390, v391, v392);
  LODWORD(v718[0]) = 33554450;
  v400 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_165;
  v400 = *(_QWORD *)(v13 + 16);
  if ((v400 & 1) == 0)
  {
    v553 = *(_QWORD *)(v400 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v400 + HIDWORD(v553);
    *(_QWORD *)(v13 + 16) = v400 + (int)v553;
LABEL_165:
    *(_QWORD *)v13 = v400 + 128;
    goto LABEL_166;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v393, v394, v395, v396, v397, v398, v399);
  v400 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v693, v694, v695);
LABEL_166:
  *(_DWORD *)v400 = 0;
  v401 = JSC::Structure::Structure(v400, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::ProgramCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[17] = v401;
  LODWORD(v718[0]) = 33554450;
  v409 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_169;
  v409 = *(_QWORD *)(v13 + 16);
  if ((v409 & 1) == 0)
  {
    v554 = *(_QWORD *)(v409 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v409 + HIDWORD(v554);
    *(_QWORD *)(v13 + 16) = v409 + (int)v554;
LABEL_169:
    *(_QWORD *)v13 = v409 + 128;
    goto LABEL_170;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v402, v403, v404, v405, v406, v407, v408);
  v409 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v696, v697, v698);
LABEL_170:
  *(_DWORD *)v409 = 0;
  v410 = JSC::Structure::Structure(v409, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::ModuleProgramCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[18] = v410;
  LODWORD(v718[0]) = 33554450;
  v418 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_173;
  v418 = *(_QWORD *)(v13 + 16);
  if ((v418 & 1) == 0)
  {
    v555 = *(_QWORD *)(v418 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v418 + HIDWORD(v555);
    *(_QWORD *)(v13 + 16) = v418 + (int)v555;
LABEL_173:
    *(_QWORD *)v13 = v418 + 128;
    goto LABEL_174;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v411, v412, v413, v414, v415, v416, v417);
  v418 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v699, v700, v701);
LABEL_174:
  *(_DWORD *)v418 = 0;
  v419 = JSC::Structure::Structure(v418, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::EvalCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[19] = v419;
  LODWORD(v718[0]) = 33554450;
  v427 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 8))
    goto LABEL_177;
  v427 = *(_QWORD *)(v13 + 16);
  if ((v427 & 1) == 0)
  {
    v556 = *(_QWORD *)(v427 + 8) ^ *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 8) = v427 + HIDWORD(v556);
    *(_QWORD *)(v13 + 16) = v427 + (int)v556;
LABEL_177:
    *(_QWORD *)v13 = v427 + 128;
    goto LABEL_178;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v420, v421, v422, v423, v424, v425, v426);
  v427 = JSC::LocalAllocator::allocateSlowCase(v708, a1 + 192, 128, 0, 0, v702, v703, v704);
LABEL_178:
  *(_DWORD *)v427 = 0;
  v428 = JSC::Structure::Structure(v427, a1, 0, 2, (uint64_t)v718, (unint64_t)&JSC::FunctionCodeBlock::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12[20] = v428;
  v12[23] = JSC::JSBigInt::createStructure((unint64_t *)a1, 0, 2uLL, v429, v430, v431, v432, v433, v434);
  if (BYTE1(dword_1ECF4C240))
  {
    if (!v12[25])
      v12[25] = JSC::Symbol::create((JSC::Symbol *)a1, v435, v436, v437, v438, v439, v440, v441);
    if (!v12[26])
      v12[26] = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)a1, v435, v436, v437, v438, v439, v440, v441);
    v442 = (_QWORD *)(v9 + 2672);
    if (!v12[24])
      JSC::VM::emptyPropertyNameEnumeratorSlow((JSC::VM *)a1);
    if ((*v442 & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*v442 & 0xFFFFFFFFFFFFFFFCLL))(a1, v9 + 2672);
  }
  v443 = JSC::JSBigInt::createWithLength(0, (JSC::JSGlobalObject *)a1, (JSC::VM *)1, v437, v438, v439, v440, v441);
  if (v443)
  {
    v445 = *(_QWORD *)(v443 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v445 = (v445 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)v445 = 1;
    *(_QWORD *)(v713 + 3600) = v443;
  }
  else
  {
    if (!a5)
      JSC::handleResourceExhaustion("./runtime/VM.cpp", 342, "JSC::VM::VM(VMType, HeapType, WTF::RunLoop *, BOOL *)", "bigInt", (WTF *)0x1F, "MemoryExhaustion", "Crash intentionally because memory is exhausted.");
    *a5 = 0;
  }
  v446 = *(_QWORD *)(v264 + 736);
  if (!v446)
    v446 = WTF::Thread::initializeCurrentTLS(0);
  *(_QWORD *)(v446 + 56) = v711;
  Gigacage::addPrimitiveDisableCallback((Gigacage *)JSC::VM::primitiveGigacageDisabledCallback, (void (*)(void *))a1, v444);
  JSC::Heap::notifyIsSafeToCollect((WTF::MonotonicTime *)(a1 + 192));
  if ((_BYTE)word_1ECF4C484)
  {
    v557 = (JSC::Profiler::Database **)(v9 + 2608);
    v558 = WTF::fastMalloc((WTF *)0x78);
    v559 = JSC::Profiler::Database::Database(v558, a1);
    v718[0] = v560;
    std::unique_ptr<JSC::Profiler::Database>::operator=[abi:sn180100]((JSC::Profiler::Database **)(v9 + 2608), (JSC::Profiler::Database **)v718, v561, v562, v563, v564, v565, v566, v559);
    std::unique_ptr<JSC::Profiler::Database>::~unique_ptr[abi:sn180100]((JSC::Profiler::Database **)v718, v567, v568, v569, v570, v571, v572, v573, v574);
    if (HIBYTE(word_1ECF4C484))
    {
      WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v718);
      v717 = getenv("JSC_PROFILER_PATH");
      if (v717)
        WTF::PrintStream::print<char const*,char [2]>((uint64_t)v718, (const char **)&v717);
      LODWORD(v714) = getpid();
      v715 = *(_DWORD *)*v557;
      WTF::PrintStream::print<char [12],int,char [2],int,char [6]>((uint64_t)v718, &v714, &v715);
      v575 = *v557;
      WTF::StringPrintStream::toCString(v718, (uint64_t *)&v714);
      if (v714)
        v582 = (char *)v714 + 16;
      else
        v582 = 0;
      JSC::Profiler::Database::registerToSaveAtExit(v575, v582, v576, v577, v578, v579, v580, v581);
      v590 = v714;
      v714 = 0;
      if (v590)
      {
        if (*(_DWORD *)v590 == 1)
          WTF::fastFree((unint64_t)v590, v583, v584, v585, v586, v587, v588, v589);
        else
          --*(_DWORD *)v590;
      }
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v718, v583, v584, v585, v586, v587, v588, v589);
      v63 = (uint64_t)v712;
    }
  }
  v447 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v447 + 8) = 1;
  *(_QWORD *)v447 = off_1E35AE380;
  *(_QWORD *)(v447 + 16) = &off_1E35AE3B8;
  *(_BYTE *)(v447 + 24) = 1;
  v448 = *(_DWORD **)(v9 + 2616);
  *(_QWORD *)(v9 + 2616) = v447;
  if (v448)
  {
    if (v448[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v448 + 8))(v448);
    else
      --v448[2];
  }
  v449 = (JSC::BytecodeIntrinsicRegistry *)WTF::fastMalloc((WTF *)0x208);
  JSC::BytecodeIntrinsicRegistry::BytecodeIntrinsicRegistry(v449, (JSC::VM *)a1, v450, v451, v452, v453, v454, v455);
  v463 = *(JSC::BytecodeIntrinsicRegistry **)(v63 + 176);
  *(_QWORD *)(v63 + 176) = v449;
  if (v463)
  {
    JSC::BytecodeIntrinsicRegistry::~BytecodeIntrinsicRegistry(v463, v456, v457, v458, v459, v460, v461, v462);
    WTF::fastFree(v464, v465, v466, v467, v468, v469, v470, v471);
  }
  if (byte_1ECF4C5E0)
    JSC::VM::enableTypeProfiler((JSC::VM *)a1);
  if (byte_1ECF4C5E1)
    JSC::VM::enableControlFlowProfiler((JSC::VM *)a1);
  if (byte_1ECF4C5E2)
  {
    *(_BYTE *)(v9 + 2715) = 1;
    v593 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v593 = 1;
    *(_OWORD *)(v593 + 8) = 0u;
    *(_OWORD *)(v593 + 24) = 0u;
    *(_QWORD *)(v593 + 16) = 0x7FF8000000000000;
    v718[0] = (WTF::StringImpl ***)v593;
    *(double *)(v593 + 16) = WTF::MonotonicTime::now((WTF::MonotonicTime *)v593);
    JSC::VM::ensureSamplingProfiler(a1, (uint64_t *)v718);
    if (qword_1ECF4C5F8)
      JSC::SamplingProfiler::registerForReportAtExit(*(JSC::SamplingProfiler **)(v63 + 152), v594, v595, v596, v597, v598, v599, v600);
    JSC::SamplingProfiler::start(*(JSC::SamplingProfiler **)(v63 + 152));
    WTF::Ref<WTF::Stopwatch,WTF::RawPtrTraits<WTF::Stopwatch>,WTF::DefaultRefDerefTraits<WTF::Stopwatch>>::~Ref((unint64_t *)v718, v601, v602, v603, v604, v605, v606, v607);
  }
  if (byte_1ECF4C660)
  {
    v608 = WTF::fastMalloc((WTF *)0x28);
    v718[0] = (WTF::StringImpl ***)JSC::RandomizingFuzzerAgent::RandomizingFuzzerAgent(v608);
    JSC::VM::setFuzzerAgent(a1, (uint64_t *)v718);
    if (v718[0])
      (*((void (**)(WTF::StringImpl ***))*v718[0] + 1))(v718[0]);
  }
  if (BYTE5(qword_1ECF4C664))
  {
    v609 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v718[0] = (WTF::StringImpl ***)JSC::DoublePredictionFuzzerAgent::DoublePredictionFuzzerAgent(v609);
    JSC::VM::setFuzzerAgent(a1, (uint64_t *)v718);
    if (v718[0])
      (*((void (**)(WTF::StringImpl ***))*v718[0] + 1))(v718[0]);
  }
  if (BYTE6(qword_1ECF4C664))
  {
    v610 = WTF::fastMalloc((WTF *)0x10);
    v718[0] = (WTF::StringImpl ***)JSC::FileBasedFuzzerAgent::FileBasedFuzzerAgent(v610);
    JSC::VM::setFuzzerAgent(a1, (uint64_t *)v718);
    if (v718[0])
      (*((void (**)(WTF::StringImpl ***))*v718[0] + 1))(v718[0]);
  }
  if (HIBYTE(qword_1ECF4C664))
  {
    v611 = WTF::fastMalloc((WTF *)0x10);
    v718[0] = (WTF::StringImpl ***)JSC::PredictionFileCreatingFuzzerAgent::PredictionFileCreatingFuzzerAgent(v611);
    JSC::VM::setFuzzerAgent(a1, (uint64_t *)v718);
    if (v718[0])
      (*((void (**)(WTF::StringImpl ***))*v718[0] + 1))(v718[0]);
  }
  if (byte_1ECF4C678)
  {
    v612 = WTF::fastMalloc((WTF *)0x28);
    v718[0] = (WTF::StringImpl ***)JSC::NarrowingNumberPredictionFuzzerAgent::NarrowingNumberPredictionFuzzerAgent(v612);
    JSC::VM::setFuzzerAgent(a1, (uint64_t *)v718);
    if (v718[0])
      (*((void (**)(WTF::StringImpl ***))*v718[0] + 1))(v718[0]);
  }
  if (byte_1ECF4C679)
  {
    v613 = WTF::fastMalloc((WTF *)0x28);
    v718[0] = (WTF::StringImpl ***)JSC::WideningNumberPredictionFuzzerAgent::WideningNumberPredictionFuzzerAgent(v613, (JSC::VM *)a1);
    JSC::VM::setFuzzerAgent(a1, (uint64_t *)v718);
    if (v718[0])
      (*((void (**)(WTF::StringImpl ***))*v718[0] + 1))(v718[0]);
  }
  if (HIBYTE(word_1ECF4C600))
    *(_BYTE *)(v9 + 2715) = 1;
  v472 = dword_1ECF4C6B0;
  if (dword_1ECF4C6B0)
  {
    v614 = *(_QWORD *)(v63 + 128);
    if ((v614 & 1) != 0)
    {
      v614 = (*(uint64_t (**)(uint64_t))(v614 & 0xFFFFFFFFFFFFFFFCLL))(a1);
      v472 = dword_1ECF4C6B0;
    }
    JSC::Watchdog::setTimeLimit(v614, (double)v472 / 1000.0, 0, 0, 0);
  }
  if (BYTE2(dword_1ECF4C723))
    *(_BYTE *)(a1 + 56) |= 2u;
  if (BYTE1(dword_1ECF4C240))
  {
    v473 = WTF::fastMalloc((WTF *)0x598);
    *(_QWORD *)v473 = off_1E35961D0;
    bzero((void *)(v473 + 8), 0x58DuLL);
    v481 = *(JSC::JITThunks **)(v9 + 32);
    *(_QWORD *)(v9 + 32) = v473;
    if (v481)
    {
      JSC::JITThunks::~JITThunks(v481, v474, v475, v476, v477, v478, v479, v480);
      WTF::fastFree(v482, v483, v484, v485, v486, v487, v488, v489);
      v473 = *(_QWORD *)(v9 + 32);
    }
    JSC::JITThunks::initialize((JSC::JITThunks *)v473, (JSC::VM *)a1);
    v497 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v497[1] = 0;
    v497[2] = 0;
    *v497 = 0;
    v498 = *(WTF **)(v9 + 48);
    *(_QWORD *)(v9 + 48) = v497;
    if (v498)
      std::default_delete<JSC::FTL::Thunks>::operator()[abi:sn180100](v498, v490, v491, v492, v493, v494, v495, v496);
    v499 = (void *)WTF::fastMalloc((WTF *)0x208);
    bzero(v499, 0x208uLL);
    v501 = *(JSC::SharedJITStubSet **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v499;
    if (v501)
    {
      JSC::SharedJITStubSet::~SharedJITStubSet(v501, v456, v457, v458, v459, v460, v461, v462, v500);
      WTF::fastFree(v502, v503, v504, v505, v506, v507, v508, v509);
    }
    if (!v12[27])
    {
      v718[0] = 0;
      v12[27] = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::boundThisNoArgsFunctionCall, 1, 101, (unint64_t)JSC::boundFunctionConstruct, 0, (WTF::StringImpl **)v718, v462);
    }
  }
  if (byte_1ECF4C274 | byte_1ECF4C27A)
    goto LABEL_240;
LABEL_228:
  if (*((unsigned __int8 *)v51 + 1923) | *((unsigned __int8 *)v51 + 1924))
  {
    v513 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
    *v513 = 0;
    v718[0] = v513;
    std::unique_ptr<JSC::JITSizeStatistics>::operator=[abi:sn180100](v710, (WTF::AtomStringImpl *)v718, v514, v515, v516, v517, v518, v519);
    std::unique_ptr<JSC::JITSizeStatistics>::~unique_ptr[abi:sn180100](v718, v520, v521, v522, v523, v524, v525, v526);
  }
  v510 = atomic_load(WTF::Config::finalize(void)::once);
  if (v510 != -1)
  {
    v718[0] = (WTF::StringImpl ***)&v714;
    v717 = (char *)v718;
    std::__call_once(WTF::Config::finalize(void)::once, &v717, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Config::finalize(void)::$_0 &&>>);
  }
  __dmb(0xAu);
  *(_BYTE *)(v9 + 2780) = 1;
  JSC::JSLockHolder::~JSLockHolder(&v716, v456, v457, v458, v459, v460, v461, v462);
  return a1;
}

uint64_t JSC::VM::setLastStackTop(uint64_t this, const WTF::Thread *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(this + 93112) = v2;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    v4 = v3 >= v2;
  else
    v4 = 0;
  if (!v4 || *((_QWORD *)a2 + 3) >= v2)
    __break(0xC471u);
  return this;
}

uint64_t JSC::VM::primitiveGigacageDisabledCallback(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  v3 = *(_QWORD *)(this + 112);
  if (*(_BYTE *)(v3 + 6))
  {
    v4 = *(_QWORD *)(v3 + 8);
    this = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!this)
      this = WTF::Thread::initializeCurrentTLS(0);
    if (v4 == this)
      return JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v2 + 93264), v2);
  }
  *(_BYTE *)(v2 + 56) |= 0x10u;
  return this;
}

JSC::Profiler::Database **std::unique_ptr<JSC::Profiler::Database>::operator=[abi:sn180100](JSC::Profiler::Database **a1, JSC::Profiler::Database **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::Profiler::Database *v10;
  JSC::Profiler::Database *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *a2;
  *a2 = 0;
  v11 = *a1;
  *a1 = v10;
  if (v11)
  {
    JSC::Profiler::Database::~Database(v11, a2, a3, a4, a5, a6, a7, a8, a9);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  return a1;
}

JSC::Profiler::Database **std::unique_ptr<JSC::Profiler::Database>::~unique_ptr[abi:sn180100](JSC::Profiler::Database **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::Profiler::Database *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *a1;
  *a1 = 0;
  if (v10)
  {
    JSC::Profiler::Database::~Database(v10, a2, a3, a4, a5, a6, a7, a8, a9);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

uint64_t WTF::PrintStream::print<char const*,char [2]>(uint64_t a1, const char **a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", *a2);
  WTF::PrintStream::printf(v4, "%s", "/");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [12],int,char [2],int,char [6]>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  WTF::PrintStream *v6;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v6, "%s", "JSCProfile-");
  WTF::PrintStream::printf(v6, "%d", *a2);
  WTF::PrintStream::printf(v6, "%s", "-");
  WTF::PrintStream::printf(v6, "%d", *a3);
  WTF::PrintStream::printf(v6, "%s", ".json");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

BOOL JSC::VM::enableTypeProfiler(JSC::VM *this)
{
  char *v1;
  int v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  JSC::TypeProfiler *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL8 result;

  v1 = (char *)this + 93168;
  v2 = *((_DWORD *)this + 23296);
  if (!v2)
  {
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = 1;
    v11[4] = 0;
    v12 = *(JSC::TypeProfiler **)v1;
    *(_QWORD *)v1 = v11;
    if (v12)
    {
      JSC::TypeProfiler::~TypeProfiler(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    v21 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v21 = this;
    *(_DWORD *)(v21 + 8) = 50000;
    v22 = WTF::fastMalloc((WTF *)0x124F80);
    for (i = 0; i != 1200000; i += 24)
    {
      v31 = v22 + i;
      *(_QWORD *)v31 = 0;
      *(_DWORD *)(v31 + 16) = 0;
    }
    *(_QWORD *)(v21 + 16) = v22;
    *(_QWORD *)(v21 + 24) = v22;
    *(_QWORD *)(v21 + 32) = v22 + 24 * *(unsigned int *)(v21 + 8);
    v32 = *((_QWORD *)v1 + 1);
    *((_QWORD *)v1 + 1) = v21;
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 16);
      if (v33)
        WTF::fastFree(v33, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v32, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  result = v2 == 0;
  ++*((_DWORD *)v1 + 4);
  return result;
}

BOOL JSC::VM::enableControlFlowProfiler(JSC::VM *this)
{
  char *v1;
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  JSC::ControlFlowProfiler *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;

  v1 = (char *)this + 93280;
  v2 = *((_DWORD *)this + 23322);
  if (!v2)
  {
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v10 = 0;
    v10[1] = -1;
    v10[3] = 0;
    v10[4] = 0;
    v10[2] = 0;
    v11 = *(JSC::ControlFlowProfiler **)v1;
    *(_QWORD *)v1 = v10;
    if (v11)
    {
      JSC::ControlFlowProfiler::~ControlFlowProfiler(v11, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  result = v2 == 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

unsigned int *JSC::VM::ensureSamplingProfiler(uint64_t a1, uint64_t *a2)
{
  unsigned int **v3;
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (unsigned int **)(a1 + 93368);
  result = *(unsigned int **)(a1 + 93368);
  if (!result)
  {
    v6 = WTF::fastMalloc((WTF *)0x80);
    JSC::SamplingProfiler::SamplingProfiler(v6, a1, a2, v7, v8, v9, v10, v11);
    v19 = *v3;
    *v3 = (unsigned int *)v6;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v19, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
    }
    *(_BYTE *)(a1 + 56) |= 1u;
    return *v3;
  }
  return result;
}

unint64_t *WTF::Ref<WTF::Stopwatch,WTF::RawPtrTraits<WTF::Stopwatch>,WTF::DefaultRefDerefTraits<WTF::Stopwatch>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v11 = *(_QWORD *)(v9 + 24);
      if (v11)
      {
        *(_QWORD *)(v9 + 24) = 0;
        *(_DWORD *)(v9 + 32) = 0;
        v12 = v9;
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
        v9 = v12;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return a1;
}

uint64_t JSC::VM::setFuzzerAgent(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (uint64_t *)(a1 + 93376);
  if (*(_QWORD *)(a1 + 93376))
  {
    result = 98;
    __break(0xC471u);
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    result = *v2;
    *v2 = v3;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl ****std::unique_ptr<JSC::JITSizeStatistics>::operator=[abi:sn180100](WTF::StringImpl ****a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(WTF::StringImpl ****)a2;
  *(_QWORD *)a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      v12 = *((unsigned int *)v11 - 1);
      if ((_DWORD)v12)
      {
        v13 = *v10;
        do
        {
          v14 = *v13;
          if (*v13 != (WTF::StringImpl *)-1)
          {
            *v13 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
              {
                WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
              }
              else
              {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
          v13 += 3;
          --v12;
        }
        while (v12);
      }
      WTF::fastFree((unint64_t)(v11 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

WTF::StringImpl ****std::unique_ptr<JSC::JITSizeStatistics>::~unique_ptr[abi:sn180100](WTF::StringImpl ****a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v11)
      {
        v12 = *v9;
        do
        {
          v13 = *v12;
          if (*v12 != (WTF::StringImpl *)-1)
          {
            *v12 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
              {
                WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
              }
              else
              {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
          v12 += 3;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::waitForVMDestruction(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v16;
  int v17;

  WTF::ReadWriteLock::writeLock((WTF::ReadWriteLock *)&JSC::s_destructionLock, a2, a3, a4, a5, a6, a7, a8);
  if (__ldaxr((unsigned __int8 *)&JSC::s_destructionLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::s_destructionLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::s_destructionLock);
LABEL_5:
  byte_1ECF58F9A = 0;
  v16 = atomic_load((unsigned __int8 *)&unk_1ECF58F99);
  if ((v16 & 1) != 0)
  {
    atomic_store(0, (unsigned __int8 *)&unk_1ECF58F99);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)&unk_1ECF58F99, v8, v9, v10, v11, v12, v13, v14);
  }
  v17 = __ldxr((unsigned __int8 *)&JSC::s_destructionLock);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::s_destructionLock))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::s_destructionLock, 0, v9, v10, v11, v12, v13, v14);
}

void JSC::VM::~VM(JSC::VM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  unsigned int *v26;
  unsigned __int8 *v27;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  JSC::SamplingProfiler *v48;
  WTF::StringImpl **v49;
  JSC::_anonymous_namespace_ *v50;
  JSC::Profiler::Database *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  unint64_t v82;
  JSC::CommonIdentifiers *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8x8_t v100;
  unint64_t v101;
  JSC::SharedJITStubSet *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  JSC::BytecodeIntrinsicRegistry *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  JSC::ShadowChicken *v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  JSC::HeapProfiler *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  JSC::ControlFlowProfiler *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  JSC::VM *v161;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  JSC::TypeProfiler *v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  _DWORD *v177;
  uint64_t *v178;
  _DWORD *v179;
  uint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  WTF::StringImpl *v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t **v196;
  uint64_t *i;
  uint64_t v198;
  unint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  WTF::StringImpl *v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  WTF::StringImpl *v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  WTF::StringImpl *v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t m;
  WTF::StringImpl *v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  _DWORD *v264;
  JSC::Profiler::Database *v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint8x8_t v281;
  uint64_t v282;
  WTF *v283;
  JSC::SharedJITStubSet *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  JSC::JITThunks *v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _DWORD *v305;
  JSC::SourceProviderCache *v306;
  unint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  unint64_t v328;
  WTF::StringImpl *v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  unint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  WTF::StringImpl *v359;
  unint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  unint64_t v370;
  uint64_t v371;
  char *v372;
  WTF::StringImpl *v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  WTF::StringImpl *v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  WTF::StringImpl *v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  WTF::StringImpl *v405;
  unint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  WTF::AtomStringImpl *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned int *v428;
  unsigned int *v429;
  unsigned int v430;
  unsigned int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  WTF::StringImpl ***v436;
  WTF::StringImpl **v437;
  uint64_t v438;
  WTF::StringImpl **v439;
  WTF::StringImpl *v440;
  unint64_t v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int *v463;
  unsigned int *v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int *v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int *v470;
  unsigned int *v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int *v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int *v477;
  unsigned int v478;
  unsigned int v479;
  unsigned __int8 v480;
  unint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  void *v485;
  size_t v486;
  uint64_t n;
  WTF::StringImpl *v488;
  unint64_t v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  void *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  void *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  void *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int *v532;
  unsigned int v533;
  unsigned int v534;
  WTF::ThreadSafeWeakPtrControlBlock *v535;
  unint64_t v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  void *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  JSC::_anonymous_namespace_::AsynchronousDisassembler *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  WTF::AtomStringTable *v574;
  unint64_t v575;
  void *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  WTF::ThreadSafeWeakPtrControlBlock **v584;
  WTF::ThreadSafeWeakPtrControlBlock *v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  unint64_t v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t j;
  uint64_t v612;
  unint64_t v613;
  unsigned int v614;
  unsigned int v615;
  WTF::StringImpl *v616;
  unint64_t v617;
  void *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t *v625;
  uint64_t v626;
  unint64_t v627;
  unint64_t v628;
  void *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t *v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  uint64_t *v642;
  uint64_t v643;
  uint64_t **v644;
  uint64_t *k;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  WTF::RunLoop::TimerBase *v649;
  unint64_t v650;
  void *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  _QWORD v658[2];
  uint64_t v659;
  uint64_t *v660;
  _QWORD *v661;
  char v662;

  v9 = (char *)this + 93188;
  v10 = (char *)this + 41440;
  WTF::ReadWriteLock::readLock((WTF::ReadWriteLock *)&JSC::s_destructionLock, a2, a3, a4, a5, a6, a7, a8);
  if (BYTE3(qword_1ECF4C7A0) && !*((_DWORD *)v10 + 2))
  {
    v17 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
    if (v17 != -1)
    {
      v659 = (uint64_t)&v662;
      v658[0] = &v659;
      std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, v658, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
    }
    JSC::WaiterListManager::unregister((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, this, (uint64_t)v11, v12, v13, v14, v15, v16);
  }
  Gigacage::removePrimitiveDisableCallback((unint64_t)JSC::VM::primitiveGigacageDisabledCallback, (void (*)(void *))this, v11);
  *(_BYTE *)(*((_QWORD *)v10 + 56) + 36) = 0;
  if (JSC::Wasm::globalWorklist)
    JSC::Wasm::Worklist::stopAllPlansForContext((JSC::Wasm::Worklist *)JSC::Wasm::globalWorklist, this, v19, v20, v21, v22, v23, v24);
  v26 = *(unsigned int **)(v9 + 156);
  if ((v26 & 1) == 0 && v26)
    JSC::Watchdog::willDestroyVM((JSC::Watchdog *)v26, this, v19, v20, v21, v22, v23, v24);
  *((_BYTE *)this + 85) = 1;
  if (*((_QWORD *)this + 12))
  {
    v27 = (unsigned __int8 *)(*((_QWORD *)this + 8) + 4);
    if (__ldaxr(v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, v27))
    {
LABEL_13:
      v29 = *((_QWORD *)this + 12);
      if (*(_BYTE *)(v29 + 41))
      {
        if (*(_BYTE *)(v29 + 43))
        {
          v30 = *((_QWORD *)this + 9);
          v31 = (unsigned __int8 *)(v30 + 4);
          v32 = atomic_load((unsigned __int8 *)(v30 + 4));
          if ((v32 & 1) != 0)
          {
            atomic_store(0, v31);
            WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v31, v18, v19, v20, v21, v22, v23, v24);
          }
          v33 = *(unsigned int *)(v30 + 20);
          if ((_DWORD)v33)
          {
            v34 = *(uint64_t **)(v30 + 8);
            v35 = 8 * v33;
            do
            {
              v36 = *v34;
              if (*(_BYTE *)(*v34 + 43))
              {
                if (*(_BYTE *)(v36 + 42))
                {
                  *(_BYTE *)(v36 + 42) = 0;
                  v37 = (unsigned __int8 *)(v36 + 44);
                  v38 = atomic_load(v37);
                  if ((v38 & 1) != 0)
                  {
                    v662 = 0;
                    v658[0] = v37;
                    v658[1] = &v662;
                    v659 = (uint64_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
                    v660 = &v659;
                    v661 = v658;
                    WTF::ParkingLot::unparkOneImpl((uint64_t)v37, (unint64_t)&v659, v19, v20, v21, v22, v23, v24);
                  }
                }
              }
              else
              {
                WTF::AutomaticThread::start(v36);
              }
              ++v34;
              v35 -= 8;
            }
            while (v35);
          }
        }
        else
        {
          *(_BYTE *)(v29 + 41) = 0;
        }
      }
      v39 = __ldxr(v27);
      if (v39 == 1)
      {
        if (!__stlxr(0, v27))
        {
LABEL_30:
          v40 = *((_QWORD *)this + 12);
          v41 = (unsigned __int8 *)(*(_QWORD *)(v40 + 16) + 4);
          if (__ldaxr(v41))
          {
            __clrex();
          }
          else if (!__stxr(1u, v41))
          {
LABEL_33:
            while (*(_BYTE *)(v40 + 41))
            {
              v43 = (unsigned __int8 *)(*(_QWORD *)(v40 + 16) + 4);
              v659 = 0x7FF0000000000000;
              LODWORD(v660) = 0;
              WTF::Condition::waitUntilUnchecked<WTF::Lock>(v40 + 45, v43, (WTF::TimeWithDynamicClockType *)&v659);
            }
            v44 = __ldxr(v41);
            if (v44 == 1)
            {
              if (!__stlxr(0, v41))
                goto LABEL_40;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, v19, v20, v21, v22, v23, v24);
LABEL_40:
            v26 = (unsigned int *)*((_QWORD *)this + 12);
            *((_QWORD *)this + 12) = 0;
            if (v26)
            {
              v45 = v26 + 2;
              do
              {
                v46 = __ldaxr(v45);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v45));
              if (!v47)
              {
                atomic_store(1u, v26 + 2);
                v26 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
              }
            }
            goto LABEL_45;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v41);
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v19, v20, v21, v22, v23, v24);
      goto LABEL_30;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v27);
    goto LABEL_13;
  }
LABEL_45:
  *v9 = 0;
  __dmb(0xAu);
  if (v9[252])
  {
    v552 = JSC::sideDataRepository((JSC *)v26);
    JSC::SideDataRepository::deleteAll((JSC::SideDataRepository *)v552, this, v553, v554, v555, v556, v557, v558);
  }
  ++*((_DWORD *)this + 229);
  v48 = *(JSC::SamplingProfiler **)(v9 + 180);
  if (v48)
  {
    JSC::SamplingProfiler::reportDataToOptionFile(v48, v25, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    JSC::SamplingProfiler::shutdown(*(JSC::SamplingProfiler **)(v9 + 180), v559, v560, v561, v562, v563, v564, v565);
  }
  v49 = (WTF::StringImpl **)((char *)this + 86784);
  v50 = (JSC::_anonymous_namespace_ *)JSC::theGlobalJITWorklist;
  if (JSC::theGlobalJITWorklist)
    JSC::JITWorklist::cancelAllPlansForVM((JSC::JITWorklist *)JSC::theGlobalJITWorklist, this);
  {
  }
  v51 = (JSC::Profiler::Database *)*((_QWORD *)this + 11627);
  *((_QWORD *)this + 11627) = 0;
  if (v51)
  {
    JSC::Profiler::Database::~Database(v51, v18, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  *(_QWORD *)(*((_QWORD *)this + 14) + 32) = 0;
  v10[2825] = 0;
  JSC::Heap::lastChanceToFinalize((JSC::VM *)((char *)this + 192), v18, v19, v20, v21, v22, v23, v24);
  v66 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v66 != -1)
  {
    v659 = (uint64_t)&v662;
    v658[0] = &v659;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, v658, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::unregisterVM((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, this, v60, v61, v62, v63, v64, v65);
  v74 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v74 != -1)
  {
    v659 = (uint64_t)&v662;
    v658[0] = &v659;
    std::__call_once(&JSC::VMInspector::instance(void)::once, v658, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v75 = (uint64_t *)((char *)this + 93448);
  v76 = JSC::VMInspector::instance(void)::manager;
  if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    __clrex();
LABEL_61:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v76);
    goto LABEL_62;
  }
  if (__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
    goto LABEL_61;
LABEL_62:
  if ((JSC::VM *)JSC::VMInspector::m_recentVM == this)
    JSC::VMInspector::m_recentVM = 0;
  v78 = *((_QWORD *)this + 11690);
  v79 = *((_QWORD *)this + 11691);
  if (v78)
  {
    *(_QWORD *)(v78 + 93528) = v79;
    v79 = *((_QWORD *)this + 11691);
  }
  else
  {
    *(_QWORD *)(v76 + 8) = v79;
  }
  if (v79)
    v80 = (_QWORD *)(v79 + 93520);
  else
    v80 = (_QWORD *)(v76 + 16);
  *v80 = v78;
  v81 = __ldxr((unsigned __int8 *)v76);
  if (v81 != 1)
  {
    __clrex();
    goto LABEL_73;
  }
  if (__stlxr(0, (unsigned __int8 *)v76))
LABEL_73:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v76, 0, v68, v69, v70, v71, v72, v73);
  v82 = *((_QWORD *)v10 + 65);
  if (v82)
    WTF::fastFree(v82, v67, v68, v69, v70, v71, v72, v73);
  v83 = (JSC::CommonIdentifiers *)*((_QWORD *)v10 + 64);
  if (v83)
  {
    JSC::CommonIdentifiers::~CommonIdentifiers(v83, (WTF::AtomStringImpl *)v67, v68, v69, v70, v71, v72, v73);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
  }
  if (*((_DWORD *)v10 + 2))
  {
    v574 = (WTF::AtomStringTable *)*((_QWORD *)v10 + 59);
    if (v574)
    {
      WTF::AtomStringTable::~AtomStringTable(v574, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v575, v576, v577, v578, v579, v580, v581, v582);
    }
  }
  v92 = *((_QWORD *)v10 + 2);
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  std::unique_ptr<JSC::RegExpCache>::reset[abi:sn180100]((unint64_t *)this + 11629, (WTF::AtomStringImpl *)v67, v68, v69, v70, v71, v72, v73);
  if (*((_DWORD *)v9 + 4))
  {
    v101 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*(_QWORD *)(v9 + 4) + 8 * v101++), v93, v94, v95, v96, v97, v98, v99);
    while (v101 < *((unsigned int *)v9 + 4));
  }
  v102 = (JSC::SharedJITStubSet *)*((_QWORD *)this + 11306);
  *((_QWORD *)this + 11306) = 0;
  if (v102)
  {
    JSC::SharedJITStubSet::~SharedJITStubSet(v102, v93, v94, v95, v96, v97, v98, v99, v100);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  if (__ldaxr((unsigned __int8 *)&JSC::s_destructionLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::s_destructionLock))
  {
    goto LABEL_89;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::s_destructionLock);
LABEL_89:
  if (!--dword_1ECF58F9C)
  {
    v480 = atomic_load((unsigned __int8 *)&unk_1ECF58F99);
    if ((v480 & 1) != 0)
    {
      atomic_store(0, (unsigned __int8 *)&unk_1ECF58F99);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)&unk_1ECF58F99, v93, v94, v95, v96, v97, v98, v99);
    }
  }
  v112 = __ldxr((unsigned __int8 *)&JSC::s_destructionLock);
  if (v112 != 1)
  {
    __clrex();
    goto LABEL_94;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::s_destructionLock))
LABEL_94:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::s_destructionLock, 0, v94, v95, v96, v97, v98, v99);
  v113 = *((_QWORD *)this + 11685);
  if (v113)
  {
    v583 = *(unsigned int *)(v113 - 4);
    if ((_DWORD)v583)
    {
      v584 = (WTF::ThreadSafeWeakPtrControlBlock **)(v113 + 8);
      do
      {
        if (*(v584 - 1) != (WTF::ThreadSafeWeakPtrControlBlock *)-1)
        {
          v585 = *v584;
          *v584 = 0;
          if (v585)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v585, v93, v94, v95, v96, v97, v98, v99);
        }
        v584 += 2;
        --v583;
      }
      while (v583);
    }
    WTF::fastFree(v113 - 16, v93, v94, v95, v96, v97, v98, v99);
  }
  v114 = *((unsigned int *)this + 23369);
  if ((_DWORD)v114)
  {
    v504 = (uint64_t *)*((_QWORD *)this + 11683);
    v505 = 8 * v114;
    do
    {
      v506 = *v504;
      *v504 = 0;
      if (v506)
        (*(void (**)(uint64_t))(*(_QWORD *)v506 + 8))(v506);
      ++v504;
      v505 -= 8;
    }
    while (v505);
  }
  v115 = *((_QWORD *)this + 11683);
  if (v115)
  {
    *((_QWORD *)this + 11683) = 0;
    *((_DWORD *)this + 23368) = 0;
    WTF::fastFree(v115, v93, v94, v95, v96, v97, v98, v99);
  }
  v116 = *((_QWORD *)this + 11682);
  *((_QWORD *)this + 11682) = 0;
  if (v116)
  {
    v117 = (unsigned int *)(v116 + 16);
    do
    {
      v118 = __ldaxr(v117);
      v119 = v118 - 1;
    }
    while (__stlxr(v119, v117));
    if (!v119)
    {
      atomic_store(1u, (unsigned int *)(v116 + 16));
      v531 = *(_QWORD *)(v116 + 48);
      *(_QWORD *)(v116 + 48) = 0;
      if (v531)
      {
        v532 = (unsigned int *)(v531 + 24);
        do
        {
          v533 = __ldaxr(v532);
          v534 = v533 - 1;
        }
        while (__stlxr(v534, v532));
        if (!v534)
        {
          atomic_store(1u, (unsigned int *)(v531 + 24));
          v648 = *(_QWORD *)(v531 + 32);
          v649 = (WTF::RunLoop::TimerBase *)v531;
          *(_QWORD *)(v531 + 32) = 0;
          if (v648)
            (*(void (**)(uint64_t))(*(_QWORD *)v648 + 8))(v648);
          WTF::RunLoop::TimerBase::~TimerBase(v649);
          WTF::fastFree(v650, v651, v652, v653, v654, v655, v656, v657);
        }
      }
      v535 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v116 + 32);
      *(_QWORD *)(v116 + 32) = 0;
      if (v535)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v535, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v116, v93, v94, v95, v96, v97, v98, v99);
    }
  }
  v120 = *v75;
  if (*v75)
  {
    v586 = *(unsigned int *)(v120 - 4);
    if ((_DWORD)v586)
    {
      v587 = (uint64_t *)(v120 + 16);
      do
      {
        if (*(v587 - 2) != -1)
        {
          v588 = *v587;
          *v587 = 0;
          if (v588)
            MEMORY[0x19AEBAEF0](v588, 0x1000C4000313F17);
        }
        v587 += 3;
        --v586;
      }
      while (v586);
    }
    WTF::fastFree(v120 - 16, v93, v94, v95, v96, v97, v98, v99);
  }
  v121 = *(_QWORD *)(v9 + 236);
  *(_QWORD *)(v9 + 236) = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *((unsigned int *)v9 + 58);
  v123 = *(uint64_t **)(v9 + 220);
  if ((_DWORD)v122)
  {
    v636 = 8 * v122;
    do
    {
      v637 = *v123;
      if (*v123)
      {
        v638 = (uint64_t *)(v637 - 16);
        v639 = *(_QWORD *)(((v637 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v640 = *(uint64_t **)(v637 - 8);
        if (v640)
        {
          v641 = *v638;
          *v640 = *v638;
          *(_QWORD *)(v641 + 8) = v640;
          *v638 = 0;
          v638[1] = 0;
        }
        *v638 = *(_QWORD *)(v639 + 40);
        *(_QWORD *)(v639 + 40) = v638;
        *v123 = 0;
      }
      ++v123;
      v636 -= 8;
    }
    while (v636);
    v123 = *(uint64_t **)(v9 + 220);
  }
  if (v123)
  {
    *(_QWORD *)(v9 + 220) = 0;
    *((_DWORD *)v9 + 57) = 0;
    WTF::fastFree((unint64_t)v123, v93, v94, v95, v96, v97, v98, v99);
  }
  v124 = *(JSC::BytecodeIntrinsicRegistry **)(v9 + 204);
  *(_QWORD *)(v9 + 204) = 0;
  if (v124)
  {
    JSC::BytecodeIntrinsicRegistry::~BytecodeIntrinsicRegistry(v124, (WTF::AtomStringImpl *)v93, v94, v95, v96, v97, v98, v99);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  v133 = *(JSC::ShadowChicken **)(v9 + 196);
  if ((v133 & 1) == 0)
  {
    *(_QWORD *)(v9 + 196) = 0;
    if (v133)
    {
      JSC::ShadowChicken::~ShadowChicken(v133, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v589, v590, v591, v592, v593, v594, v595, v596);
    }
  }
  v134 = *(_QWORD *)(v9 + 188);
  *(_QWORD *)(v9 + 188) = 0;
  if (v134)
    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
  v135 = *(unsigned int **)(v9 + 180);
  *(_QWORD *)(v9 + 180) = 0;
  if (v135)
  {
    do
    {
      v136 = __ldaxr(v135);
      v137 = v136 - 1;
    }
    while (__stlxr(v137, v135));
    if (!v137)
    {
      atomic_store(1u, v135);
      JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v135, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v536, v537, v538, v539, v540, v541, v542, v543);
    }
  }
  v138 = *(_QWORD *)(v9 + 172);
  if ((v138 & 1) == 0)
  {
    *(_QWORD *)(v9 + 172) = 0;
    if (v138)
      WTF::fastFree(v138, v93, v94, v95, v96, v97, v98, v99);
  }
  v139 = *(JSC::HeapProfiler **)(v9 + 164);
  if ((v139 & 1) == 0)
  {
    *(_QWORD *)(v9 + 164) = 0;
    if (v139)
    {
      JSC::HeapProfiler::~HeapProfiler(v139, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v597, v598, v599, v600, v601, v602, v603, v604);
    }
  }
  v140 = *(_QWORD *)(v9 + 156);
  if ((v140 & 1) == 0)
  {
    *(_QWORD *)(v9 + 156) = 0;
    if (v140)
    {
      do
      {
        v605 = __ldaxr((unsigned int *)v140);
        v606 = v605 - 1;
      }
      while (__stlxr(v606, (unsigned int *)v140));
      if (!v606)
      {
        atomic_store(1u, (unsigned int *)v140);
        v607 = *(_QWORD *)(v140 + 64);
        *(_QWORD *)(v140 + 64) = 0;
        if (v607)
          (*(void (**)(uint64_t))(*(_QWORD *)v607 + 56))(v607);
        WTF::fastFree(v140, v93, v94, v95, v96, v97, v98, v99);
      }
    }
  }
  WTF::fastFree(*(_QWORD *)(v9 + 148), v93, v94, v95, v96, v97, v98, v99);
  v148 = *(_QWORD *)(v9 + 124);
  if (v148)
  {
    *(_QWORD *)(v9 + 124) = 0;
    *((_DWORD *)v9 + 33) = 0;
    WTF::fastFree(v148, v141, v142, v143, v144, v145, v146, v147);
  }
  v149 = *(JSC::ControlFlowProfiler **)(v9 + 92);
  *(_QWORD *)(v9 + 92) = 0;
  if (v149)
  {
    JSC::ControlFlowProfiler::~ControlFlowProfiler(v149, v141, v142, v143, v144, v145, v146, v147);
    WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
  }
  v158 = *(_QWORD *)(v9 + 84);
  if (v158)
  {
    v608 = *(unsigned int *)(v158 - 4);
    if ((_DWORD)v608)
    {
      v609 = (_QWORD *)(v158 + 16);
      do
      {
        if (*((_DWORD *)v609 - 2) != 2 && *v609)
          WTF::fastFree(*v609 - 16, v141, v142, v143, v144, v145, v146, v147);
        v609 += 3;
        --v608;
      }
      while (v608);
    }
    WTF::fastFree(v158 - 16, v141, v142, v143, v144, v145, v146, v147);
  }
  v159 = *(_QWORD *)(v9 + 76);
  if ((v159 & 1) == 0)
  {
    do
    {
      v194 = __ldaxr((unsigned int *)v159);
      v195 = v194 - 1;
    }
    while (__stlxr(v195, (unsigned int *)v159));
    if (!v195)
    {
      atomic_store(1u, (unsigned int *)v159);
      v196 = (uint64_t **)(v159 + 8);
      for (i = *(uint64_t **)(v159 + 8); i != (uint64_t *)v196; i = *v196)
      {
        v643 = *i;
        v642 = (uint64_t *)i[1];
        *v642 = *i;
        *(_QWORD *)(v643 + 8) = v642;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v159, v141, v142, v143, v144, v145, v146, v147);
    }
  }
  v160 = *((unsigned int *)v9 + 10);
  if ((_DWORD)v160)
  {
    v481 = *(unint64_t **)(v9 + 28);
    v482 = 8 * v160;
    do
    {
      v483 = *v481;
      *v481 = 0;
      if (v483)
        WTF::fastFree(v483, v141, v142, v143, v144, v145, v146, v147);
      ++v481;
      v482 -= 8;
    }
    while (v482);
  }
  v161 = *(JSC::VM **)(v9 + 28);
  if ((JSC::VM *)((char *)this + 93232) != v161 && v161 != 0)
  {
    *(_QWORD *)(v9 + 28) = 0;
    *((_DWORD *)v9 + 9) = 0;
    WTF::fastFree((unint64_t)v161, v141, v142, v143, v144, v145, v146, v147);
  }
  v163 = *(_QWORD *)(v9 + 4);
  if (v163)
  {
    *(_QWORD *)(v9 + 4) = 0;
    *((_DWORD *)v9 + 3) = 0;
    WTF::fastFree(v163, v141, v142, v143, v144, v145, v146, v147);
  }
  v164 = *((_QWORD *)this + 11647);
  *((_QWORD *)this + 11647) = 0;
  if (v164)
  {
    v165 = *(_QWORD *)(v164 + 16);
    if (v165)
      WTF::fastFree(v165, v141, v142, v143, v144, v145, v146, v147);
    WTF::fastFree(v164, v141, v142, v143, v144, v145, v146, v147);
  }
  v166 = (JSC::TypeProfiler *)*((_QWORD *)this + 11646);
  *((_QWORD *)this + 11646) = 0;
  if (v166)
  {
    JSC::TypeProfiler::~TypeProfiler(v166, v141, v142, v143, v144, v145, v146, v147);
    WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
  }
  v175 = *((_QWORD *)this + 11645);
  if (v175)
  {
    v610 = *(unsigned int *)(v175 - 4);
    if ((_DWORD)v610)
    {
      for (j = 0; j != v610; ++j)
      {
        v612 = v175 + 16 * j;
        if (*(_QWORD *)v612 != -1)
        {
          v613 = *(_QWORD *)(v612 + 8);
          *(_QWORD *)(v612 + 8) = 0;
          if (v613)
          {
            do
            {
              v614 = __ldaxr((unsigned int *)v613);
              v615 = v614 - 1;
            }
            while (__stlxr(v615, (unsigned int *)v613));
            if (!v615)
            {
              atomic_store(1u, (unsigned int *)v613);
              v644 = (uint64_t **)(v613 + 8);
              for (k = *(uint64_t **)(v613 + 8); k != (uint64_t *)v644; k = *v644)
              {
                v647 = *k;
                v646 = (uint64_t *)k[1];
                *v646 = *k;
                *(_QWORD *)(v647 + 8) = v646;
                *k = 0;
                k[1] = 0;
              }
              WTF::fastFree(v613, v141, v142, v143, v144, v145, v146, v147);
            }
          }
          v616 = *(WTF::StringImpl **)v612;
          *(_QWORD *)v612 = 0;
          if (v616)
          {
            if (*(_DWORD *)v616 == 2)
            {
              WTF::StringImpl::~StringImpl(v616, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
              WTF::fastFree(v617, v618, v619, v620, v621, v622, v623, v624);
            }
            else
            {
              *(_DWORD *)v616 -= 2;
            }
          }
        }
      }
    }
    WTF::fastFree(v175 - 16, v141, v142, v143, v144, v145, v146, v147);
  }
  v176 = *((_QWORD *)this + 11644);
  *((_QWORD *)this + 11644) = 0;
  if (v176)
  {
    v177 = *(_DWORD **)(v176 + 8);
    *(_QWORD *)(v176 + 8) = 0;
    if (v177)
    {
      if (v177[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v177 + 8))(v177);
      else
        --v177[2];
    }
    WTF::fastFree(v176, v141, v142, v143, v144, v145, v146, v147);
  }
  v178 = (uint64_t *)*((_QWORD *)this + 11643);
  *((_QWORD *)this + 11643) = 0;
  if (v178)
  {
    v179 = (_DWORD *)v178[1];
    v178[1] = 0;
    if (v179)
    {
      if (*v179 == 1)
        WTF::fastFree((unint64_t)v179, v141, v142, v143, v144, v145, v146, v147);
      else
        --*v179;
    }
    v180 = *v178;
    *v178 = 0;
    if (v180)
      udatpg_close();
    WTF::fastFree((unint64_t)v178, v141, v142, v143, v144, v145, v146, v147);
  }
  v181 = (uint64_t *)*((_QWORD *)this + 11642);
  *((_QWORD *)this + 11642) = 0;
  if (v181)
  {
    if (*v181)
      WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::deallocateTable(*v181, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
    WTF::fastFree((unint64_t)v181, v141, v142, v143, v144, v145, v146, v147);
  }
  v182 = *((_QWORD *)this + 11635);
  if ((v182 & 1) == 0)
  {
    *((_QWORD *)this + 11635) = 0;
    if (v182)
    {
      v183 = 0;
      v184 = v182 + 133104;
      do
      {
        v185 = *(WTF::StringImpl **)(v184 + v183);
        *(_QWORD *)(v184 + v183) = 0;
        if (v185)
        {
          if (*(_DWORD *)v185 == 2)
          {
            WTF::StringImpl::~StringImpl(v185, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
          }
          else
          {
            *(_DWORD *)v185 -= 2;
          }
        }
        v183 -= 16;
      }
      while (v183 != -2048);
      v198 = 0;
      v199 = v182 + 131056;
      do
      {
        v200 = *(WTF::StringImpl **)(v199 + v198);
        *(_QWORD *)(v199 + v198) = 0;
        if (v200)
        {
          if (*(_DWORD *)v200 == 2)
          {
            WTF::StringImpl::~StringImpl(v200, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
          }
          else
          {
            *(_DWORD *)v200 -= 2;
          }
        }
        v198 -= 16;
      }
      while (v198 != -8192);
      v209 = 0;
      v210 = v182 + 122856;
      do
      {
        v211 = *(WTF::StringImpl **)(v210 + v209);
        *(_QWORD *)(v210 + v209) = 0;
        if (v211)
        {
          if (*(_DWORD *)v211 == 2)
          {
            WTF::StringImpl::~StringImpl(v211, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
          }
          else
          {
            *(_DWORD *)v211 -= 2;
          }
        }
        v209 -= 24;
      }
      while (v209 != -12288);
      v220 = 0;
      v221 = v182 + 110568;
      do
      {
        v222 = *(WTF::StringImpl **)(v221 + v220);
        *(_QWORD *)(v221 + v220) = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2)
          {
            WTF::StringImpl::~StringImpl(v222, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
          }
          else
          {
            *(_DWORD *)v222 -= 2;
          }
        }
        v220 -= 24;
      }
      while (v220 != -49152);
      v231 = 0;
      v232 = v182 + 61416;
      do
      {
        v233 = *(WTF::StringImpl **)(v232 + v231);
        *(_QWORD *)(v232 + v231) = 0;
        if (v233)
        {
          if (*(_DWORD *)v233 == 2)
          {
            WTF::StringImpl::~StringImpl(v233, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
          }
          else
          {
            *(_DWORD *)v233 -= 2;
          }
        }
        v231 -= 24;
      }
      while (v231 != -12288);
      for (m = 49128; m != -24; m -= 24)
      {
        v243 = *(WTF::StringImpl **)(v182 + m);
        *(_QWORD *)(v182 + m) = 0;
        if (v243)
        {
          if (*(_DWORD *)v243 == 2)
          {
            WTF::StringImpl::~StringImpl(v243, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
          }
          else
          {
            *(_DWORD *)v243 -= 2;
          }
        }
      }
      WTF::fastFree(v182, v141, v142, v143, v144, v145, v146, v147);
    }
  }
  v252 = *((_QWORD *)this + 11634);
  if ((v252 & 1) == 0)
  {
    *((_QWORD *)this + 11634) = 0;
    if (v252)
    {
      for (n = 0; n != 0x8000; n += 16)
      {
        v488 = *(WTF::StringImpl **)(v252 + n);
        *(_QWORD *)(v252 + n) = 0;
        if (v488)
        {
          if (*(_DWORD *)v488 == 2)
          {
            WTF::StringImpl::~StringImpl(v488, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
            WTF::fastFree(v489, v490, v491, v492, v493, v494, v495, v496);
          }
          else
          {
            *(_DWORD *)v488 -= 2;
          }
        }
      }
      bzero((void *)v252, 0x8000uLL);
      WTF::fastFree(v252, v497, v498, v499, v500, v501, v502, v503);
    }
  }
  v253 = *((_QWORD *)this + 11633);
  *((_QWORD *)this + 11633) = 0;
  if (v253)
  {
    if (*(_DWORD *)v253 == 1)
    {
      v484 = *(_QWORD *)(v253 + 8);
      if (v484)
        WTF::fastFree(v484 - 16, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v253, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      --*(_DWORD *)v253;
    }
  }
  v254 = *((_QWORD *)this + 11632);
  *((_QWORD *)this + 11632) = 0;
  if (v254)
    WTF::fastFree(v254, v141, v142, v143, v144, v145, v146, v147);
  v255 = (_QWORD *)*((_QWORD *)this + 11630);
  if (v255)
  {
    v485 = (void *)v255[5];
    v486 = v255[6];
    v255[5] = 0;
    v255[6] = 0;
    v255[4] = 0;
    if (munmap(v485, v486) == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198C2F778);
    }
  }
  std::unique_ptr<JSC::RegExpCache>::reset[abi:sn180100]((unint64_t *)this + 11629, (WTF::AtomStringImpl *)v141, v142, v143, v144, v145, v146, v147);
  v264 = (_DWORD *)*((_QWORD *)this + 11628);
  *((_QWORD *)this + 11628) = 0;
  if (v264)
  {
    if (v264[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v264 + 8))(v264);
    else
      --v264[2];
  }
  v265 = (JSC::Profiler::Database *)*((_QWORD *)this + 11627);
  *((_QWORD *)this + 11627) = 0;
  if (v265)
  {
    JSC::Profiler::Database::~Database(v265, v256, v257, v258, v259, v260, v261, v262, v263);
    WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
  }
  JSC::DateCache::~DateCache((JSC::VM *)((char *)this + 90592), (WTF::AtomStringImpl *)v256, v257, v258, v259, v260, v261, v262);
  v282 = *((_QWORD *)this + 11323);
  if (v282)
    WTF::fastFree(v282 - 16, v274, v275, v276, v277, v278, v279, v280);
  v283 = (WTF *)*((_QWORD *)this + 11307);
  *((_QWORD *)this + 11307) = 0;
  if (v283)
    std::default_delete<JSC::FTL::Thunks>::operator()[abi:sn180100](v283, v274, v275, v276, v277, v278, v279, v280);
  v284 = (JSC::SharedJITStubSet *)*((_QWORD *)this + 11306);
  *((_QWORD *)this + 11306) = 0;
  if (v284)
  {
    JSC::SharedJITStubSet::~SharedJITStubSet(v284, v274, v275, v276, v277, v278, v279, v280, v281);
    WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
  }
  v293 = (JSC::JITThunks *)*((_QWORD *)this + 11305);
  *((_QWORD *)this + 11305) = 0;
  if (v293)
  {
    JSC::JITThunks::~JITThunks(v293, v274, v275, v276, v277, v278, v279, v280);
    WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
  }
  v302 = *((_QWORD *)this + 11304);
  if (v302)
  {
    v303 = *(unsigned int *)(v302 - 4);
    if ((_DWORD)v303)
    {
      v304 = *((_QWORD *)this + 11304);
      do
      {
        v305 = *(_DWORD **)v304;
        if (*(_QWORD *)v304 != -1)
        {
          v306 = *(JSC::SourceProviderCache **)(v304 + 8);
          *(_QWORD *)(v304 + 8) = 0;
          if (v306)
          {
            if (*(_DWORD *)v306 == 1)
            {
              JSC::SourceProviderCache::~SourceProviderCache(v306, (WTF::AtomStringImpl *)v274, v275, v276, v277, v278, v279, v280);
              WTF::fastFree(v307, v308, v309, v310, v311, v312, v313, v314);
              v305 = *(_DWORD **)v304;
            }
            else
            {
              --*(_DWORD *)v306;
            }
          }
          *(_QWORD *)v304 = 0;
          if (v305)
          {
            if (v305[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v305 + 8))(v305);
            else
              --v305[2];
          }
        }
        v304 += 16;
        --v303;
      }
      while (v303);
    }
    WTF::fastFree(v302 - 16, v274, v275, v276, v277, v278, v279, v280);
  }
  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*((_QWORD *)this + 11303) + 192), (uint64_t)this + 90408, v275, v276, v277, v278, v279, v280);
  v322 = *((_QWORD *)this + 11302);
  if (v322)
  {
    v323 = *(unsigned int *)(v322 - 4);
    if ((_DWORD)v323)
    {
      v324 = v322 + 8;
      do
      {
        if (*(_QWORD *)(v324 - 8) != -1 && *(_QWORD *)v324)
        {
          *(_QWORD *)(*(_QWORD *)v324 + 8) = 3;
          *(_QWORD *)v324 = 0;
        }
        v324 += 16;
        --v323;
      }
      while (v323);
    }
    WTF::fastFree(v322 - 16, v315, v316, v317, v318, v319, v320, v321);
  }
  v325 = 0;
  v326 = (char *)this + 90384;
  do
  {
    v327 = &v326[v325];
    v328 = *(_QWORD *)&v326[v325];
    if (v328)
    {
      *(_QWORD *)v327 = 0;
      *((_DWORD *)v327 + 2) = 0;
      WTF::fastFree(v328, v315, v316, v317, v318, v319, v320, v321);
    }
    v329 = (WTF::StringImpl *)*((_QWORD *)v327 - 5);
    *((_QWORD *)v327 - 5) = 0;
    if (v329)
    {
      if (*(_DWORD *)v329 == 2)
      {
        WTF::StringImpl::~StringImpl(v329, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
      }
      else
      {
        *(_DWORD *)v329 -= 2;
      }
    }
    v325 -= 56;
  }
  while (v325 != -3584);
  v338 = *((_QWORD *)this + 10850);
  if (v338)
  {
    *((_QWORD *)this + 10850) = 0;
    *((_DWORD *)this + 21702) = 0;
    WTF::fastFree(v338, v315, v316, v317, v318, v319, v320, v321);
  }
  v339 = -1536;
  do
  {
    v340 = *v49;
    *v49 = 0;
    if (v340)
    {
      if (*(_DWORD *)v340 == 2)
      {
        WTF::StringImpl::~StringImpl(v340, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v342, v343, v344, v345, v346, v347, v348, v349);
      }
      else
      {
        *(_DWORD *)v340 -= 2;
      }
    }
    v341 = *(v49 - 1);
    *(v49 - 1) = 0;
    if (v341)
    {
      if (*(_DWORD *)v341 == 2)
      {
        WTF::StringImpl::~StringImpl(v341, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
      }
      else
      {
        *(_DWORD *)v341 -= 2;
      }
    }
    v49 -= 3;
    v339 += 24;
  }
  while (v339);
  v358 = (char *)this + 81160;
  do
  {
    v359 = *(WTF::StringImpl **)&v358[v339];
    *(_QWORD *)&v358[v339] = 0;
    if (v359)
    {
      if (*(_DWORD *)v359 == 2)
      {
        WTF::StringImpl::~StringImpl(v359, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v360, v361, v362, v363, v364, v365, v366, v367);
      }
      else
      {
        *(_DWORD *)v359 -= 2;
      }
    }
    v339 -= 64;
  }
  while (v339 != -16384);
  v368 = (WTF::StringImpl *)*((_QWORD *)v10 + 2917);
  *((_QWORD *)v10 + 2917) = 0;
  if (v368)
  {
    if (*(_DWORD *)v368 == 2)
    {
      WTF::StringImpl::~StringImpl(v368, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
      WTF::fastFree(v507, v508, v509, v510, v511, v512, v513, v514);
    }
    else
    {
      *(_DWORD *)v368 -= 2;
    }
  }
  v369 = (WTF::StringImpl *)*((_QWORD *)v10 + 2916);
  *((_QWORD *)v10 + 2916) = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
    {
      WTF::StringImpl::~StringImpl(v369, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
      WTF::fastFree(v515, v516, v517, v518, v519, v520, v521, v522);
    }
    else
    {
      *(_DWORD *)v369 -= 2;
    }
  }
  v370 = *((_QWORD *)v10 + 2914);
  *((_QWORD *)v10 + 2914) = 0;
  if (v370)
    WTF::fastFree(v370, v315, v316, v317, v318, v319, v320, v321);
  v371 = 0;
  v372 = (char *)this + 64744;
  do
  {
    v373 = *(WTF::StringImpl **)&v372[v371];
    *(_QWORD *)&v372[v371] = 0;
    if (v373)
    {
      if (*(_DWORD *)v373 == 2)
      {
        WTF::StringImpl::~StringImpl(v373, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
      }
      else
      {
        *(_DWORD *)v373 -= 2;
      }
    }
    v371 -= 16;
  }
  while (v371 != -4096);
  v382 = -6144;
  v383 = 60640;
  do
  {
    v384 = *(WTF::StringImpl **)((char *)this + v383);
    *(_QWORD *)((char *)this + v383) = 0;
    if (v384)
    {
      if (*(_DWORD *)v384 == 2)
      {
        WTF::StringImpl::~StringImpl(v384, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v385, v386, v387, v388, v389, v390, v391, v392);
      }
      else
      {
        *(_DWORD *)v384 -= 2;
      }
    }
    v383 -= 24;
    v382 += 24;
  }
  while (v382);
  v393 = -6144;
  v394 = 54496;
  do
  {
    v395 = *(WTF::StringImpl **)((char *)this + v394);
    *(_QWORD *)((char *)this + v394) = 0;
    if (v395)
    {
      if (*(_DWORD *)v395 == 2)
      {
        WTF::StringImpl::~StringImpl(v395, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v396, v397, v398, v399, v400, v401, v402, v403);
      }
      else
      {
        *(_DWORD *)v395 -= 2;
      }
    }
    v394 -= 24;
    v393 += 24;
  }
  while (v393);
  v404 = (char *)this + 48352;
  do
  {
    v405 = *(WTF::StringImpl **)&v404[v393];
    *(_QWORD *)&v404[v393] = 0;
    if (v405)
    {
      if (*(_DWORD *)v405 == 2)
      {
        WTF::StringImpl::~StringImpl(v405, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
        WTF::fastFree(v406, v407, v408, v409, v410, v411, v412, v413);
      }
      else
      {
        *(_DWORD *)v405 -= 2;
      }
    }
    v393 -= 16;
  }
  while (v393 != -4096);
  WTF::SymbolRegistry::~SymbolRegistry((WTF::StringImpl ***)this + 5242, (WTF::AtomStringImpl *)v315, v316, v317, v318, v319, v320, v321);
  WTF::SymbolRegistry::~SymbolRegistry((WTF::StringImpl ***)this + 5240, v414, v415, v416, v417, v418, v419, v420);
  v428 = (unsigned int *)*((_QWORD *)v10 + 56);
  *((_QWORD *)v10 + 56) = 0;
  if (v428)
  {
    v429 = v428 + 2;
    do
    {
      v430 = __ldaxr(v429);
      v431 = v430 - 1;
    }
    while (__stlxr(v431, v429));
    if (!v431)
    {
      atomic_store(1u, v428 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v428 + 8))(v428);
    }
  }
  v432 = *((_QWORD *)v10 + 55);
  if (v432)
  {
    *(_QWORD *)(v432 + 8) = 3;
    *((_QWORD *)v10 + 55) = 0;
  }
  v433 = *((_QWORD *)v10 + 54);
  if (v433)
  {
    *(_QWORD *)(v433 + 8) = 3;
    *((_QWORD *)v10 + 54) = 0;
  }
  v434 = *((unsigned int *)v10 + 9);
  if ((_DWORD)v434)
  {
    v625 = (unint64_t *)*((_QWORD *)v10 + 3);
    v626 = 8 * v434;
    do
    {
      v627 = *v625;
      *v625 = 0;
      if (v627)
        WTF::fastFree(v627, v421, v422, v423, v424, v425, v426, v427);
      ++v625;
      v626 -= 8;
    }
    while (v626);
  }
  v435 = *((_QWORD *)v10 + 3);
  if (v435)
  {
    *((_QWORD *)v10 + 3) = 0;
    *((_DWORD *)v10 + 8) = 0;
    WTF::fastFree(v435, v421, v422, v423, v424, v425, v426, v427);
  }
  v436 = *(WTF::StringImpl ****)v10;
  *(_QWORD *)v10 = 0;
  if (v436)
  {
    v437 = *v436;
    if (*v436)
    {
      v438 = *((unsigned int *)v437 - 1);
      if ((_DWORD)v438)
      {
        v439 = *v436;
        do
        {
          v440 = *v439;
          if (*v439 != (WTF::StringImpl *)-1)
          {
            *v439 = 0;
            if (v440)
            {
              if (*(_DWORD *)v440 == 2)
              {
                WTF::StringImpl::~StringImpl(v440, (WTF::AtomStringImpl *)v421, v422, v423, v424, v425, v426, v427);
                WTF::fastFree(v441, v442, v443, v444, v445, v446, v447, v448);
              }
              else
              {
                *(_DWORD *)v440 -= 2;
              }
            }
          }
          v439 += 3;
          --v438;
        }
        while (v438);
      }
      WTF::fastFree((unint64_t)(v437 - 2), v421, v422, v423, v424, v425, v426, v427);
    }
    WTF::fastFree((unint64_t)v436, v421, v422, v423, v424, v425, v426, v427);
  }
  JSC::GCClient::Heap::~Heap((JSC::VM *)((char *)this + 37552), v421, v422, v423, v424, v425, v426, v427);
  JSC::Heap::~Heap((JSC::VM *)((char *)this + 192), v449, v450, v451, v452, v453, v454, v455);
  v463 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v463)
  {
    v464 = v463 + 2;
    do
    {
      v465 = __ldaxr(v464);
      v466 = v465 - 1;
    }
    while (__stlxr(v466, v464));
    if (!v466)
    {
      atomic_store(1u, v463 + 2);
      WTF::RunLoop::~RunLoop((WTF::RunLoop *)v463);
      WTF::fastFree(v523, v524, v525, v526, v527, v528, v529, v530);
    }
  }
  v467 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v467)
  {
    do
    {
      v468 = __ldaxr(v467);
      v469 = v468 - 1;
    }
    while (__stlxr(v469, v467));
    if (!v469)
    {
      atomic_store(1u, v467);
      JSC::JSLock::~JSLock((JSC::JSLock *)v467, v456, v457, v458, v459, v460, v461, v462);
      WTF::fastFree(v544, v545, v546, v547, v548, v549, v550, v551);
    }
  }
  v470 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v470)
  {
    v471 = v470 + 2;
    do
    {
      v472 = __ldaxr(v471);
      v473 = v472 - 1;
    }
    while (__stlxr(v473, v471));
    if (!v473)
    {
      atomic_store(1u, v470 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v470 + 8))(v470);
    }
  }
  v474 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v474)
  {
    do
    {
      v475 = __ldaxr(v474);
      v476 = v475 - 1;
    }
    while (__stlxr(v476, v474));
    if (!v476)
    {
      atomic_store(1u, v474);
      WTF::AutomaticThreadCondition::~AutomaticThreadCondition((WTF::AutomaticThreadCondition *)v474, v456, v457, v458, v459, v460, v461, v462);
      WTF::fastFree(v628, v629, v630, v631, v632, v633, v634, v635);
    }
  }
  v477 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v477)
  {
    do
    {
      v478 = __ldaxr(v477);
      v479 = v478 - 1;
    }
    while (__stlxr(v479, v477));
    if (!v479)
    {
      atomic_store(1u, v477);
      WTF::fastFree((unint64_t)v477, v456, v457, v458, v459, v460, v461, v462);
    }
  }
}

void std::unique_ptr<JSC::RegExpCache>::reset[abi:sn180100](unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v8 + 16);
      if ((_DWORD)v10)
      {
        v11 = v9 + 8;
        do
        {
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)(*(_QWORD *)v11 + 8) = 3;
            *(_QWORD *)v11 = 0;
          }
          v12 = v11 - 6;
          v13 = (WTF::StringImpl *)(*(unsigned int *)(v11 - 6) | ((unint64_t)*(unsigned __int8 *)(v11 - 2) << 32));
          *(_DWORD *)v12 = 0;
          *(_BYTE *)(v12 + 4) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
              WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
            }
            else
            {
              *(_DWORD *)v13 -= 2;
            }
          }
          v11 += 16;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(uint64_t **)a1;
    v13 = 8 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::WeakGCMap<WTF::SymbolImpl *,JSC::Symbol,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>>::~WeakGCMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != -1 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

uint64_t JSC::VM::createContextGroup@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x16D60);
  result = JSC::VM::VM(v4, 1, a1, 0, 0);
  *a2 = result;
  return result;
}

uint64_t JSC::VM::create@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x16D60);
  result = JSC::VM::VM(v6, 0, a1, a2, 0);
  *a3 = result;
  return result;
}

void JSC::VM::tryCreate(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  char v32;

  v32 = 1;
  v6 = (JSC::VM *)WTF::fastMalloc((WTF *)0x16D60);
  *a3 = JSC::VM::VM((uint64_t)v6, 0, a1, a2, &v32);
  if (!v32)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v31, v6, v7, v8, v9, v10, v11, v12, v13);
    *a3 = 0;
    do
    {
      v21 = __ldaxr((unsigned int *)v6);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v6));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v6);
      JSC::VM::~VM(v6, (uint64_t)v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    JSC::JSLockHolder::~JSLockHolder(&v31, v14, v15, v16, v17, v18, v19, v20);
  }
}

BOOL JSC::VM::sharedInstanceExists(JSC::VM *this)
{
  return JSC::VM::sharedInstanceInternal(void)::sharedInstance != 0;
}

uint64_t JSC::VM::sharedInstance(JSC::VM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;

  if (__ldaxr(JSC::GlobalJSLock::s_sharedInstanceMutex))
  {
    __clrex();
  }
  else if (!__stxr(1u, JSC::GlobalJSLock::s_sharedInstanceMutex))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::GlobalJSLock::s_sharedInstanceMutex);
LABEL_5:
  v9 = JSC::VM::sharedInstanceInternal(void)::sharedInstance;
  if (!JSC::VM::sharedInstanceInternal(void)::sharedInstance)
  {
    v9 = WTF::fastMalloc((WTF *)0x16D60);
    JSC::VM::sharedInstanceInternal(void)::sharedInstance = JSC::VM::VM(v9, 2, 0, 0, 0);
  }
  v10 = __ldxr(JSC::GlobalJSLock::s_sharedInstanceMutex);
  if (v10 == 1)
  {
    if (!__stlxr(0, JSC::GlobalJSLock::s_sharedInstanceMutex))
      return v9;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::GlobalJSLock::s_sharedInstanceMutex, 0, a3, a4, a5, a6, a7, a8);
  return v9;
}

void JSC::VM::enableSamplingProfiler(JSC::VM *this)
{
  unsigned __int8 **v1;
  unsigned __int8 *v2;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;

  v1 = (unsigned __int8 **)((char *)this + 93368);
  v2 = (unsigned __int8 *)*((_QWORD *)this + 11671);
  if (v2)
    goto LABEL_14;
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(v4 + 16) = 0x7FF8000000000000;
  v40 = (_DWORD *)v4;
  v2 = *v1;
  if (*v1)
  {
    v40 = 0;
LABEL_4:
    v12 = *(_QWORD *)(v4 + 24);
    if (v12)
    {
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      v31 = v4;
      WTF::fastFree(v12, v5, v6, v7, v8, v9, v10, v11);
      v4 = v31;
    }
    WTF::fastFree(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_14;
  }
  v13 = WTF::fastMalloc((WTF *)0x80);
  JSC::SamplingProfiler::SamplingProfiler(v13, (uint64_t)this, (uint64_t *)&v40, v14, v15, v16, v17, v18);
  v19 = (unsigned int *)*v1;
  *v1 = (unsigned __int8 *)v13;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
  }
  *((_BYTE *)this + 56) |= 1u;
  v2 = *v1;
  v4 = (unint64_t)v40;
  if (v40)
  {
    if (*v40 != 1)
    {
      --*v40;
      goto LABEL_14;
    }
    goto LABEL_4;
  }
LABEL_14:
  v22 = v2 + 4;
  if (__ldaxr(v2 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v2 + 4));
LABEL_18:
  v2[5] = 0;
  JSC::SamplingProfiler::createThreadIfNecessary((JSC::SamplingProfiler *)v2);
  v30 = __ldxr(v22);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v22))
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2 + 4, 0, v24, v25, v26, v27, v28, v29);
}

void JSC::VM::disableSamplingProfiler(JSC::VM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v8;
  unsigned int *v9;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;

  v8 = (unsigned int **)((char *)this + 93368);
  v9 = (unsigned int *)*((_QWORD *)this + 11671);
  if (v9)
    goto LABEL_14;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v11 = 1;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)(v11 + 16) = 0x7FF8000000000000;
  v35 = (_DWORD *)v11;
  v9 = *v8;
  if (*v8)
  {
    v35 = 0;
LABEL_4:
    v13 = *(_QWORD *)(v11 + 24);
    if (v13)
    {
      *(_QWORD *)(v11 + 24) = 0;
      *(_DWORD *)(v11 + 32) = 0;
      v26 = v11;
      WTF::fastFree(v13, v12, a3, a4, a5, a6, a7, a8);
      v11 = v26;
    }
    WTF::fastFree(v11, v12, a3, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v14 = WTF::fastMalloc((WTF *)0x80);
  JSC::SamplingProfiler::SamplingProfiler(v14, (uint64_t)this, (uint64_t *)&v35, v15, v16, v17, v18, v19);
  v20 = *v8;
  *v8 = (unsigned int *)v14;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v20, v12, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  *((_BYTE *)this + 56) |= 1u;
  v9 = *v8;
  v11 = (unint64_t)v35;
  if (v35)
  {
    if (*v35 != 1)
    {
      --*v35;
      goto LABEL_14;
    }
    goto LABEL_4;
  }
LABEL_14:
  v23 = (unsigned __int8 *)(v9 + 1);
  if (__ldaxr((unsigned __int8 *)v9 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v9 + 1));
LABEL_18:
  *((_BYTE *)v9 + 5) = 1;
  v25 = __ldxr(v23);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v23))
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v9 + 4, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::VM::takeSamplingProfilerSamplesAsJSON(JSC::VM *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  JSC::SamplingProfiler *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (JSC::SamplingProfiler *)*((_QWORD *)this + 11671);
  if (v10)
  {
    JSC::SamplingProfiler::stackTracesAsJSON(v10, a2, a3, a4, a5, a6, a7, a8, &v12);
    v11 = v12;
  }
  else
  {
    v11 = 0;
  }
  *a9 = v11;
}

unint64_t JSC::VM::ensureTerminationException(JSC::VM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    JSC::terminationErrorString += 2;
    v27 = (WTF::StringImpl *)&JSC::terminationErrorString;
    v17 = (JSC::VM *)JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v27, a3, a4, a5, a6, a7, a8);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    result = JSC::Exception::create((uint64_t)this, v17, 1, v12, v13, v14, v15, v16);
    *((_QWORD *)this + 3) = result;
  }
  return result;
}

void JSC::VM::getCTIStub(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::VM::getHostFunction(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, uint64_t a6, WTF::StringImpl **a7, uint64_t a8)
{
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  void (*v15)(JSC *@<X0>, _QWORD *@<X8>);
  _QWORD *v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v25;
  char v26;
  int v27;
  WTF::StringImpl *v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int i;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  JSC::VM *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t SlowCase;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t j;
  unsigned int *v113;
  unsigned int *v114;
  WTF::StringImpl *v115;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t **v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  char v234;
  void (*v235)(JSC *@<X0>, _QWORD *@<X8>);
  char v236;
  _QWORD *v238;
  uint64_t **v239;
  uint64_t **v240;
  JSC::ExecutableMemoryHandle *v241;
  char v242;
  unsigned int *v243;
  uint64_t v244;
  unsigned int *v245;
  uint64_t *v246;
  unint64_t v247;
  char v248;
  WTF::StringImpl *v249;

  v8 = a7;
  v9 = a5;
  v10 = a3;
  v12 = a1;
  if (BYTE1(dword_1ECF4C240))
  {
    v13 = a6;
    v14 = a4;
    v15 = 0;
    v16 = (_QWORD *)a1[11305];
    v17 = 1;
    v238 = a1 + 11305;
    if (a4 > 70)
    {
      switch(a4)
      {
        case 'L':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::stringConstructorCallThunkGenerator;
          break;
        case 'M':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::stringPrototypeCodePointAtThunkGenerator;
          break;
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'Y':
        case ']':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
          break;
        case 'X':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::numberIsNaNThunkGenerator;
          break;
        case 'Z':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::numberConstructorCallThunkGenerator;
          break;
        case '[':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::imulThunkGenerator;
          break;
        case '\\':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::randomThunkGenerator;
          break;
        case '^':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::toIntegerOrInfinityThunkGenerator;
          break;
        case '_':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::toLengthThunkGenerator;
          break;
          v17 = 0;
          v15 = JSC::truncThunkGenerator;
          break;
        case 'e':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::boundFunctionCallGenerator;
          break;
        case 'f':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::remoteFunctionCallGenerator;
          break;
        default:
          if (a4 == 71)
          {
            v17 = 0;
            v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::objectIsThunkGenerator;
          }
          break;
      }
    }
    else if (a4 <= 28)
    {
      if (a4 <= 27)
      {
        switch(a4)
        {
          case 1:
            v17 = 0;
            v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::absThunkGenerator;
            break;
          case 10:
            v17 = 0;
            v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::sqrtThunkGenerator;
            break;
          case 13:
            v17 = 0;
            v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::clz32ThunkGenerator;
            break;
        }
      }
      else
      {
        v17 = 0;
        v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::charCodeAtThunkGenerator;
      }
    }
    else
    {
      switch(a4)
      {
        case '2':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::fromCharCodeThunkGenerator;
          break;
        case '3':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::globalIsNaNThunkGenerator;
          break;
        case '4':
        case '9':
          break;
        case '5':
          v17 = 0;
          v15 = JSC::floorThunkGenerator;
          break;
        case '6':
          v17 = 0;
          v15 = JSC::ceilThunkGenerator;
          break;
        case '7':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::roundThunkGenerator;
          break;
        case '8':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::expThunkGenerator;
          break;
        case ':':
          v17 = 0;
          v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::logThunkGenerator;
          break;
        default:
          if (a4 == 29)
          {
            v17 = 0;
            v15 = (void (*)(JSC *@<X0>, _QWORD *@<X8>))JSC::charAtThunkGenerator;
          }
          break;
      }
    }
    v246 = (uint64_t *)a2;
    v247 = a5;
    v248 = a3;
    v18 = *a7;
    if (*a7)
      *(_DWORD *)v18 += 2;
    v249 = v18;
    v239 = (uint64_t **)(v16 + 176);
    v19 = v16[176];
    if (!v19)
      goto LABEL_43;
    v234 = v17;
    v235 = v15;
    v236 = a4;
    v20 = v16;
    v25 = *(_DWORD *)(v19 - 8);
    v26 = a3;
    v27 = JSC::JITThunks::WeakNativeExecutableHash::hash((unint64_t)v246, v247, a3, (uint64_t *)&v249);
    for (i = 0; ; v27 = ++i + v36)
    {
      v36 = v27 & v25;
      v37 = *(uint64_t **)(v19 + 8 * v36);
      if (v37 != (uint64_t *)-1)
      {
        if (!v37)
        {
          v42 = *v239;
          v8 = a7;
          LOBYTE(v10) = v26;
          v9 = a5;
          v12 = a1;
          v13 = a6;
          v16 = v20;
          v14 = v236;
          v15 = v235;
          v17 = v234;
          if (!*v239)
            goto LABEL_43;
          v41 = &v42[*((unsigned int *)v42 - 1)];
          goto LABEL_38;
        }
        v38 = *v37;
        if (*(uint64_t **)(v38 + 40) == v246 && *(_QWORD *)(v38 + 48) == v247 && (*(_BYTE *)(v38 + 56) & 3) == v248)
        {
          v39 = *(WTF::StringImpl **)(v38 + 64);
          v28 = v249;
          if (v39 == v249)
            break;
          v40 = !v39 || v249 == 0;
          if (!v40 && WTF::equal(v39, v249, v29))
            break;
        }
      }
    }
    v41 = (uint64_t *)(v19 + 8 * v36);
    v42 = *v239;
    if (*v239)
    {
      v8 = a7;
      LOBYTE(v10) = v26;
      v9 = a5;
      v12 = a1;
      v13 = a6;
      v16 = v20;
      v14 = v236;
      v15 = v235;
      v17 = v234;
LABEL_38:
      v42 += *((unsigned int *)v42 - 1);
      goto LABEL_39;
    }
    v8 = a7;
    LOBYTE(v10) = v26;
    v9 = a5;
    v12 = a1;
    v13 = a6;
    v16 = v20;
    v14 = v236;
    v15 = v235;
    v17 = v234;
LABEL_39:
    if (v42 == v41 || (v43 = *v41) == 0 || (*(_BYTE *)(v43 + 8) & 3) != 0 || (v44 = *(_QWORD *)v43) == 0)
    {
LABEL_43:
      v45 = v12 + 4841;
      if ((v17 & 1) != 0)
      {
        if (v13)
        {
          v53 = WTF::fastMalloc((WTF *)0x28);
          v55 = v16[7];
          v54 = (unsigned int *)v16[8];
          if (v54)
          {
            do
              v56 = __ldaxr(v54);
            while (__stlxr(v56 + 1, v54));
            do
            {
              v57 = __ldaxr(v54);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v54));
            if (!v58)
            {
              atomic_store(1u, v54);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v54, v46, v47, v48, v49, v50, v51, v52);
              WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
            }
          }
          *(_DWORD *)(v53 + 8) = 1;
          *(_WORD *)(v53 + 12) = 1;
          *(_QWORD *)(v53 + 16) = v55;
          *(_QWORD *)(v53 + 24) = 0;
          *(_BYTE *)(v53 + 14) = v14;
          *(_QWORD *)v53 = off_1E3595C00;
          *(_QWORD *)(v53 + 32) = v13;
        }
        else
        {
          v53 = WTF::fastMalloc((WTF *)0x20);
          v136 = v16[7];
          v135 = (unsigned int *)v16[8];
          if (v135)
          {
            do
              v137 = __ldaxr(v135);
            while (__stlxr(v137 + 1, v135));
            do
            {
              v138 = __ldaxr(v135);
              v139 = v138 - 1;
            }
            while (__stlxr(v139, v135));
            if (!v139)
            {
              atomic_store(1u, v135);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v135, v128, v129, v130, v131, v132, v133, v134);
              WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
            }
          }
          *(_DWORD *)(v53 + 8) = 1;
          *(_WORD *)(v53 + 12) = 1;
          *(_QWORD *)(v53 + 16) = v136;
          *(_QWORD *)(v53 + 24) = 0;
          *(_QWORD *)v53 = off_1E3595B48;
          *(_BYTE *)(v53 + 14) = v14;
        }
      }
      else
      {
        v59 = v10;
        v15((JSC *)v12, &v240);
        v67 = v240;
        v68 = (unsigned int *)v241;
        if (v241)
        {
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 + 1, v68));
          v70 = (unsigned int *)v241;
          v241 = 0;
          if (v70)
          {
            do
            {
              v71 = __ldaxr(v70);
              v72 = v71 - 1;
            }
            while (__stlxr(v72, v70));
            if (!v72)
            {
              atomic_store(1u, v70);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v70, v60, v61, v62, v63, v64, v65, v66);
              WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
            }
          }
          v73 = WTF::fastMalloc((WTF *)0x28);
          v53 = v73;
          do
            v81 = __ldaxr(v68);
          while (__stlxr(v81 + 1, v68));
          do
            v82 = __ldaxr(v68);
          while (__stlxr(v82 + 1, v68));
          *(_DWORD *)(v73 + 8) = 1;
          *(_WORD *)(v73 + 12) = 1;
          *(_BYTE *)(v73 + 14) = 0;
          *(_QWORD *)(v73 + 16) = v67;
          *(_QWORD *)v73 = off_1E35959D8;
          do
            v83 = __ldaxr(v68);
          while (__stlxr(v83 + 1, v68));
          *(_QWORD *)(v73 + 24) = v68;
          do
          {
            v84 = __ldaxr(v68);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v68));
          if (!v85)
          {
            atomic_store(1u, v68);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v74, v75, v76, v77, v78, v79, v80);
            WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
          }
          *(_QWORD *)v53 = off_1E3595A90;
          *(_QWORD *)(v53 + 32) = v67;
          *(_BYTE *)(v53 + 14) = v14;
          do
          {
            v86 = __ldaxr(v68);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v68));
          if (!v87)
          {
            atomic_store(1u, v68);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v74, v75, v76, v77, v78, v79, v80);
            WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
          }
          do
          {
            v88 = __ldaxr(v68);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v68));
          if (!v89)
          {
            atomic_store(1u, v68);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v74, v75, v76, v77, v78, v79, v80);
            WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
          }
        }
        else
        {
          v53 = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(v53 + 8) = 1;
          *(_WORD *)(v53 + 12) = 1;
          *(_QWORD *)(v53 + 16) = v67;
          *(_QWORD *)(v53 + 24) = 0;
          *(_QWORD *)v53 = off_1E3595A90;
          *(_QWORD *)(v53 + 32) = v67;
          *(_BYTE *)(v53 + 14) = v14;
        }
        LOBYTE(v10) = v59;
      }
      v97 = WTF::fastMalloc((WTF *)0x20);
      v99 = v16[9];
      v98 = (unsigned int *)v16[10];
      if (v98)
      {
        do
          v100 = __ldaxr(v98);
        while (__stlxr(v100 + 1, v98));
        do
        {
          v101 = __ldaxr(v98);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, v98));
        if (!v102)
        {
          atomic_store(1u, v98);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v98, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
          WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        }
      }
      *(_DWORD *)(v97 + 8) = 1;
      *(_WORD *)(v97 + 12) = 1;
      *(_QWORD *)(v97 + 16) = v99;
      *(_QWORD *)(v97 + 24) = 0;
      *(_QWORD *)v97 = off_1E3595B48;
      *(_BYTE *)(v97 + 14) = 0;
      v244 = 0;
      v245 = (unsigned int *)v97;
      v243 = (unsigned int *)v53;
      SlowCase = *v45;
      if (*v45 >= (unint64_t)v12[4842])
      {
        SlowCase = v12[4843];
        v104 = a2;
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v12, v90, v91, v92, v93, v94, v95, v96);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 4838, v12 + 24, 80, 0, 0);
        }
        else
        {
          v146 = *(_QWORD *)(SlowCase + 8) ^ v12[4844];
          v12[4842] = SlowCase + HIDWORD(v146);
          v12[4843] = SlowCase + (int)v146;
          *v45 = SlowCase + 80;
        }
      }
      else
      {
        *v45 = SlowCase + 80;
        v104 = a2;
      }
      *(_DWORD *)SlowCase = 0;
      v105 = v12[5196];
      v106 = *(_DWORD *)(v105 + 8);
      *(_DWORD *)SlowCase = v105 >> 4;
      *(_DWORD *)(SlowCase + 4) = v106;
      *(_OWORD *)(SlowCase + 24) = 0u;
      *(_OWORD *)(SlowCase + 8) = 0u;
      *(_QWORD *)(SlowCase + 40) = v104;
      *(_QWORD *)(SlowCase + 48) = v9;
      *(_BYTE *)(SlowCase + 56) = *(_BYTE *)(SlowCase + 56) & 0xFC | v10 & 3;
      *(_QWORD *)(SlowCase + 64) = 0;
      *(_QWORD *)(SlowCase + 72) = 0;
      JSC::NativeExecutable::finishCreation((_QWORD *)SlowCase, (uint64_t)v12, (uint64_t *)&v243, (uint64_t *)&v245, (_DWORD **)v8);
      for (j = v238[383]; j; j = *(_QWORD *)(j + 224))
      {
        v147 = (uint64_t **)WTF::fastMalloc((WTF *)0x10);
        *v147 = (uint64_t *)off_1E358BE38;
        v147[1] = (uint64_t *)SlowCase;
        v240 = v147;
        JSC::Debugger::dispatchFunctionToObservers(j, &v240);
        ((void (*)(uint64_t **))(*v147)[1])(v147);
      }
      v113 = v243;
      v243 = 0;
      if (v113)
      {
        v140 = v113 + 2;
        do
        {
          v141 = __ldaxr(v140);
          v142 = v141 - 1;
        }
        while (__stlxr(v142, v140));
        if (!v142)
        {
          atomic_store(1u, v113 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 32))(v113);
        }
      }
      v244 = SlowCase;
      WTF::HashTable<JSC::Weak<JSC::NativeExecutable>,JSC::Weak<JSC::NativeExecutable>,WTF::IdentityExtractor,JSC::JITThunks::WeakNativeExecutableHash,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>,WTF::HashTraits<JSC::Weak<JSC::NativeExecutable>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::JITThunks::NativeExecutableTranslator>,JSC::NativeExecutable* const&,JSC::NativeExecutable* const&>((uint64_t)v239, &v244, (const WTF::StringImpl *)&v244, v107, v108, v109, v110, v111, (uint64_t)&v240);
      if (!v242)
      {
        v117 = v244;
        if (v244)
        {
          if ((v244 & 8) != 0)
            v220 = (v244 - 112) | 1;
          else
            v220 = v244 & 0xFFFFFFFFFFFFC000;
          if ((v220 & 1) != 0)
            v221 = (_QWORD *)(v220 + 47);
          else
            v221 = (_QWORD *)(*(_QWORD *)v220 + 32);
          v118 = (uint64_t *)v221[2];
          if (!v118)
          {
            while (1)
            {
              v222 = (_QWORD *)v221[3];
              if (!v222)
                break;
              v221[3] = v222[2];
              v118 = (uint64_t *)v222[4];
              v222[3] = 257;
              v222[4] = 0;
              if (v118)
                goto LABEL_155;
            }
            v223 = v221[6];
            if (!v221[1])
            {
              v224 = *(_QWORD **)(v223 + 488);
              *v221 = v223 + 480;
              v221[1] = v224;
              *v224 = v221;
              *(_QWORD *)(v223 + 488) = v221;
            }
            *(_QWORD *)(v223 + 1072) += 1024;
            v225 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
            JSC::WeakBlock::WeakBlock((uint64_t)v225, v220);
            JSC::Heap::didAllocate((JSC::Heap *)(v221[6] + 192), 0x400uLL, v226, v227, v228, v229, v230, v231);
            v232 = v221 + 4;
            v233 = v221[5];
            if (v233)
              v232 = (_QWORD *)(v233 + 16);
            *v232 = v225;
            v221[5] = v225;
            v225[1] = v233;
            v225[2] = 0;
            v118 = (uint64_t *)v225[4];
            v225[3] = 257;
            v225[4] = 0;
          }
LABEL_155:
          v221[2] = *v118;
          *v118 = v117;
          v118[1] = (uint64_t)v16;
          v118[2] = 0;
        }
        else
        {
          v118 = 0;
        }
        v119 = *v240;
        *v240 = v118;
        if (v119)
          v119[1] = 3;
      }
      v44 = v244;
      v114 = v245;
      v245 = 0;
      if (v114)
      {
        v143 = v114 + 2;
        do
        {
          v144 = __ldaxr(v143);
          v145 = v144 - 1;
        }
        while (__stlxr(v145, v143));
        if (!v145)
        {
          atomic_store(1u, v114 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v114 + 32))(v114);
        }
      }
    }
    v115 = v249;
    v249 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
      {
        WTF::StringImpl::~StringImpl(v115, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      else
      {
        *(_DWORD *)v115 -= 2;
      }
    }
  }
  else
  {
    v156 = atomic_load(&JSC::jitCodeForCallTrampoline(void)::onceKey);
    if (v156 != -1)
    {
      v246 = (uint64_t *)&v245;
      v240 = &v246;
      std::__call_once(&JSC::jitCodeForCallTrampoline(void)::onceKey, &v240, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::jitCodeForCallTrampoline(void)::$_0 &&>>);
    }
    v157 = JSC::jitCodeForCallTrampoline(void)::result;
    v158 = (unsigned int *)(JSC::jitCodeForCallTrampoline(void)::result + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 + 1, v158));
    v245 = (unsigned int *)v157;
    v160 = atomic_load(&JSC::jitCodeForConstructTrampoline(void)::onceKey);
    if (v160 != -1)
    {
      v246 = &v244;
      v240 = &v246;
      std::__call_once(&JSC::jitCodeForConstructTrampoline(void)::onceKey, &v240, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::jitCodeForConstructTrampoline(void)::$_0 &&>>);
    }
    v161 = JSC::jitCodeForConstructTrampoline(void)::result;
    v162 = (unsigned int *)(JSC::jitCodeForConstructTrampoline(void)::result + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 + 1, v162));
    v246 = (uint64_t *)v161;
    v44 = JSC::NativeExecutable::create(v12, (uint64_t *)&v245, a2, (uint64_t *)&v246, v9, v10, (_DWORD **)v8, a8);
    v164 = (unsigned int *)v246;
    v246 = 0;
    if (v164)
    {
      v217 = v164 + 2;
      do
      {
        v218 = __ldaxr(v217);
        v219 = v218 - 1;
      }
      while (__stlxr(v219, v217));
      if (!v219)
      {
        atomic_store(1u, v164 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 32))(v164);
      }
    }
    v165 = v245;
    v245 = 0;
    if (v165)
    {
      v166 = v165 + 2;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        atomic_store(1u, v165 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v165 + 32))(v165);
      }
    }
  }
  return v44;
}

unint64_t JSC::VM::getBoundFunction(BOOL)::$_0::operator()(uint64_t *a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t HostFunction;
  int v10;
  uint64_t (*v11)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v12;
  WTF::StringImpl *v14;

  HostFunction = *a3;
  if (!*a3)
  {
    v10 = *a2;
    v14 = 0;
    if (v10)
      v11 = JSC::boundFunctionCall;
    else
      v11 = JSC::boundThisNoArgsFunctionCall;
    if (v10)
      v12 = 0;
    else
      v12 = 101;
    HostFunction = JSC::VM::getHostFunction(a1, (uint64_t)v11, 1, v12, (unint64_t)JSC::boundFunctionConstruct, 0, &v14, a8);
    *a3 = HostFunction;
  }
  return HostFunction;
}

uint64_t JSC::VM::getRemoteFunction(BOOL)::$_0::operator()(unsigned __int8 *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t result;
  int v7;
  BOOL v8;
  unint64_t (*v9)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *a3;
  if (!*a3 || (v5[1] & 3) != 0 || (result = *v5) == 0)
  {
    v7 = *a1;
    v28 = 0;
    v8 = v7 == 0;
    if (v7)
      v9 = JSC::remoteFunctionCallGeneric;
    else
      v9 = JSC::remoteFunctionCallForJSFunction;
    if (v8)
      v10 = 102;
    else
      v10 = 0;
    result = JSC::VM::getHostFunction(a2, v9, 0, v10, JSC::callHostFunctionAsConstructor, 0, &v28);
    v11 = 0;
    if (result)
    {
      v13 = result;
      if ((result & 8) != 0)
        v14 = (result - 112) | 1;
      else
        v14 = result & 0xFFFFFFFFFFFFC000;
      if ((v14 & 1) != 0)
        v15 = (_QWORD *)(v14 + 47);
      else
        v15 = (_QWORD *)(*(_QWORD *)v14 + 32);
      v11 = (uint64_t *)v15[2];
      if (!v11)
      {
        while (1)
        {
          v16 = (_QWORD *)v15[3];
          if (!v16)
            break;
          v15[3] = v16[2];
          v11 = (uint64_t *)v16[4];
          v16[3] = 257;
          v16[4] = 0;
          if (v11)
            goto LABEL_20;
        }
        v17 = v15[6];
        if (!v15[1])
        {
          v18 = *(_QWORD **)(v17 + 488);
          *v15 = v17 + 480;
          v15[1] = v18;
          *v18 = v15;
          *(_QWORD *)(v17 + 488) = v15;
        }
        *(_QWORD *)(v17 + 1072) += 1024;
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
        JSC::WeakBlock::WeakBlock((uint64_t)v19, v14);
        JSC::Heap::didAllocate((JSC::Heap *)(v15[6] + 192), 0x400uLL, v20, v21, v22, v23, v24, v25);
        v26 = v15 + 4;
        v27 = v15[5];
        if (v27)
          v26 = (_QWORD *)(v27 + 16);
        *v26 = v19;
        v15[5] = v19;
        v19[1] = v27;
        v19[2] = 0;
        v11 = (uint64_t *)v19[4];
        v19[3] = 257;
        v19[4] = 0;
      }
LABEL_20:
      v15[2] = *v11;
      result = v13;
      *v11 = v13;
      v11[1] = 0;
      v11[2] = 0;
    }
    v12 = *a3;
    *a3 = v11;
    if (v12)
      v12[1] = 3;
  }
  return result;
}

uint64_t JSC::VM::getCTIInternalFunctionTrampolineFor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (BYTE1(dword_1ECF4C240))
  {
    v8 = *(_QWORD **)(a1 + 90440);
    if ((_DWORD)a2)
    {
      v10 = v8[17];
      v9 = (unsigned int *)v8[18];
      if (!v9)
        return v10;
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
      do
      {
        v12 = __ldaxr(v9);
        v13 = --v12 == 0;
      }
      while (__stlxr(v12, v9));
    }
    else
    {
      v10 = v8[15];
      v9 = (unsigned int *)v8[16];
      if (!v9)
        return v10;
      do
        v15 = __ldaxr(v9);
      while (__stlxr(v15 + 1, v9));
      do
      {
        v16 = __ldaxr(v9);
        v13 = --v16 == 0;
      }
      while (__stlxr(v16, v9));
    }
    if (v13)
    {
      atomic_store(1u, v9);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else if ((_DWORD)a2)
  {
    return qword_1ECF53240;
  }
  else
  {
    return qword_1ECF53238;
  }
  return v10;
}

void JSC::VM::getCTIVirtualCall(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if (!BYTE1(dword_1ECF4C240))
  {
    if ((_DWORD)a2 == 2)
    {
      v10 = qword_1ECF53258;
    }
    else if ((_DWORD)a2 == 1)
    {
      v10 = qword_1ECF53260;
    }
    else
    {
      v10 = qword_1ECF53250;
    }
    goto LABEL_40;
  }
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 2)
    {
      v19 = *(_QWORD *)(a1 + 90440);
      v10 = *(_QWORD *)(v19 + 216);
      v11 = *(unsigned int **)(v19 + 224);
      if (v11)
      {
        do
          v20 = __ldaxr(v11);
        while (__stlxr(v20 + 1, v11));
        *a9 = v10;
        a9[1] = 0;
        do
          v21 = __ldaxr(v11);
        while (__stlxr(v21 + 1, v11));
        v22 = (unsigned int *)a9[1];
        a9[1] = (uint64_t)v11;
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
          }
        }
        do
        {
          v25 = __ldaxr(v11);
          v18 = --v25 == 0;
        }
        while (__stlxr(v25, v11));
        goto LABEL_23;
      }
    }
    else
    {
      if ((_DWORD)a2 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C3161CLL);
      }
      v26 = *(_QWORD *)(a1 + 90440);
      v10 = *(_QWORD *)(v26 + 200);
      v11 = *(unsigned int **)(v26 + 208);
      if (v11)
      {
        do
          v27 = __ldaxr(v11);
        while (__stlxr(v27 + 1, v11));
        *a9 = v10;
        a9[1] = 0;
        do
          v28 = __ldaxr(v11);
        while (__stlxr(v28 + 1, v11));
        v29 = (unsigned int *)a9[1];
        a9[1] = (uint64_t)v11;
        if (v29)
        {
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            atomic_store(1u, v29);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v29, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
        }
        do
        {
          v32 = __ldaxr(v11);
          v18 = --v32 == 0;
        }
        while (__stlxr(v32, v11));
        goto LABEL_23;
      }
    }
LABEL_40:
    *a9 = v10;
    a9[1] = 0;
    return;
  }
  v9 = *(_QWORD *)(a1 + 90440);
  v10 = *(_QWORD *)(v9 + 184);
  v11 = *(unsigned int **)(v9 + 192);
  if (!v11)
    goto LABEL_40;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *a9 = v10;
  a9[1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (unsigned int *)a9[1];
  a9[1] = (uint64_t)v11;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  do
  {
    v17 = __ldaxr(v11);
    v18 = --v17 == 0;
  }
  while (__stlxr(v17, v11));
LABEL_23:
  if (v18)
  {
    atomic_store(1u, v11);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t JSC::VM::whenIdle(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)(result + 90568))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v2 = result;
  v3 = *(unsigned int *)(result + 93476);
  if ((_DWORD)v3 == *(_DWORD *)(result + 93472))
  {
    result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(result + 93464, (unint64_t)a2);
  }
  else
  {
    v4 = *(_QWORD *)(result + 93464);
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)(v4 + 8 * v3) = v5;
    *(_DWORD *)(result + 93476) = v3 + 1;
  }
  *(_BYTE *)(v2 + 56) |= 0x20u;
  return result;
}

uint64_t JSC::VM::deleteAllLinkedCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1 + 90568;
  result = WTF::fastMalloc((WTF *)0x18);
  v12 = result;
  *(_QWORD *)result = off_1E35B2E88;
  *(_QWORD *)(result + 8) = a1;
  *(_DWORD *)(result + 16) = a2;
  v14 = result;
  if (!*(_QWORD *)v4)
  {
    JSC::Heap::deleteAllCodeBlocks(a1 + 192, a2, v6, v7, v8, v9, v10, v11);
    v14 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *(unsigned int *)(v4 + 2908);
  if ((_DWORD)v13 == *(_DWORD *)(v4 + 2904))
  {
    result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v4 + 2896, (unint64_t)&v14);
    v12 = v14;
    *(_BYTE *)(a1 + 56) |= 0x20u;
    v14 = 0;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 2896) + 8 * v13) = result;
    *(_DWORD *)(v4 + 2908) = v13 + 1;
    *(_BYTE *)(a1 + 56) |= 0x20u;
  }
  return result;
}

uint64_t JSC::VM::deleteAllCode(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::Heap *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unsigned int *v42;

  v4 = a1 + 90568;
  result = WTF::fastMalloc((WTF *)0x18);
  v13 = (unsigned int *)result;
  *(_QWORD *)result = off_1E35B2EB0;
  *(_QWORD *)(result + 8) = a1;
  *(_DWORD *)(result + 16) = a2;
  v42 = (unsigned int *)result;
  if (!*(_QWORD *)v4)
  {
    v14 = *(uint64_t **)(v4 + 2568);
    v14[1] = 0;
    v14[6] = 0;
    v15 = *v14;
    if (*v14)
    {
      *v14 = 0;
      WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::deallocateTable(v15, v6, v7, v8, v9, v10, v11, v12);
    }
    bzero((void *)(*(_QWORD *)(v4 + 2584) + 16), 0x7C0uLL);
    v23 = *(_QWORD *)(v4 + 2464);
    *(_OWORD *)(v23 + 40) = 0u;
    v24 = (_OWORD *)(v23 + 40);
    *((_DWORD *)v24 - 2) = 0;
    v24[1] = 0u;
    v24[2] = 0u;
    v24[3] = 0u;
    v24[4] = 0u;
    v24[5] = 0u;
    v24[6] = 0u;
    v24[7] = 0u;
    v24[8] = 0u;
    v24[9] = 0u;
    v24[10] = 0u;
    v24[11] = 0u;
    v24[12] = 0u;
    v24[13] = 0u;
    v24[14] = 0u;
    v24[15] = 0u;
    v24[16] = 0u;
    v24[17] = 0u;
    v24[18] = 0u;
    v24[19] = 0u;
    v24[20] = 0u;
    v24[21] = 0u;
    v24[22] = 0u;
    v24[23] = 0u;
    v24[24] = 0u;
    v24[25] = 0u;
    v24[26] = 0u;
    v24[27] = 0u;
    v24[28] = 0u;
    v24[29] = 0u;
    v24[30] = 0u;
    v24[31] = 0u;
    if (*((_DWORD *)v24 - 5))
    {
      v25 = *((_QWORD *)v24 - 4);
      v26 = *((unsigned int *)v24 - 6);
      if ((_DWORD)v26)
      {
        v27 = 16 * v26;
        v28 = v25;
        while (!*(_WORD *)v28
             && ((*(unsigned int *)(v28 + 2) | ((unint64_t)*(unsigned __int8 *)(v28 + 6) << 32)) & 0xFFFFFFFFFFLL) == 0)
        {
          v28 += 16;
          v27 -= 16;
          if (!v27)
            goto LABEL_13;
        }
      }
      else
      {
        v28 = v25;
      }
      v38 = v25 + 16 * v26;
LABEL_17:
      if (v28 != v38)
      {
        v39 = *(_QWORD *)(v28 + 8);
        if (v39 && (*(_BYTE *)(v39 + 8) & 3) == 0 && *(_QWORD *)v39)
          JSC::RegExp::deleteCode(*(JSC::RegExp **)v39, v16, v17, v18, v19, v20, v21, v22);
        while (1)
        {
          v28 += 16;
          if (v28 == v38)
            break;
          if (*(_WORD *)v28)
            v40 = 0;
          else
            v40 = ((*(unsigned int *)(v28 + 2) | ((unint64_t)*(unsigned __int8 *)(v28 + 6) << 32)) & 0xFFFFFFFFFFLL) == 0;
          if (!v40)
            goto LABEL_17;
        }
      }
    }
LABEL_13:
    v30 = (JSC::Heap *)(a1 + 192);
    JSC::Heap::deleteAllCodeBlocks((uint64_t)v30, v13[4], v17, v18, v19, v20, v21, v22);
    JSC::Heap::deleteAllUnlinkedCodeBlocks((uint64_t)v30, v13[4], v31, v32, v33, v34, v35, v36);
    v37.n128_f64[0] = JSC::Heap::reportAbandonedObjectGraph(v30);
    v42 = 0;
    return (*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)v13 + 8))(v13, v37);
  }
  v41 = *(unsigned int *)(v4 + 2908);
  if ((_DWORD)v41 == *(_DWORD *)(v4 + 2904))
  {
    result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v4 + 2896, (unint64_t)&v42);
    v13 = v42;
    *(_BYTE *)(a1 + 56) |= 0x20u;
    v42 = 0;
    if (v13)
      return (*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)v13 + 8))(v13, v37);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 2896) + 8 * v41) = result;
    *(_DWORD *)(v4 + 2908) = v41 + 1;
    *(_BYTE *)(a1 + 56) |= 0x20u;
  }
  return result;
}

_QWORD *JSC::VM::shrinkFootprintWhenIdle(JSC::VM *this)
{
  char *v2;
  _QWORD *result;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  bmalloc::api *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  __int16 v30;
  bmalloc::api *v31;

  v2 = (char *)this + 90568;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v11 = (uint64_t)result;
  *result = off_1E35B2ED8;
  result[1] = this;
  v29 = result;
  if (!*(_QWORD *)v2)
  {
    JSC::sanitizeStackForVM(this, v4, v5, v6, v7, v8, v9, v10);
    JSC::VM::deleteAllCode((uint64_t)this, 1);
    v30 = 257;
    v31 = 0;
    JSC::Heap::collectNow((JSC::VM *)((char *)this + 192), (void *)1, (uint64_t)&v30, v12, v13, v14, v15, v16);
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      v25 = (unsigned int *)((char *)v24 + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)v24 + 2);
        v24 = (bmalloc::api *)(*(uint64_t (**)(bmalloc::api *))(*(_QWORD *)v24 + 8))(v24);
      }
    }
    bmalloc::api::scavenge(v24, v17, v18, v19, v20, v21, v22, v23);
    v29 = 0;
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v28 = *((unsigned int *)v2 + 727);
  if ((_DWORD)v28 == *((_DWORD *)v2 + 726))
  {
    result = (_QWORD *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>((uint64_t)(v2 + 2896), (unint64_t)&v29);
    v11 = (uint64_t)v29;
    *((_BYTE *)this + 56) |= 0x20u;
    v29 = 0;
    if (v11)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)v2 + 362) + 8 * v28) = result;
    *((_DWORD *)v2 + 727) = v28 + 1;
    *((_BYTE *)this + 56) |= 0x20u;
  }
  return result;
}

uint64_t JSC::VM::addSourceProviderCache(JSC::VM *this, JSC::SourceProvider *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  JSC::SourceProvider *v9;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::SourceProviderCache *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::SourceProvider *v29;
  uint64_t v30;
  char v31;

  v8 = (uint64_t *)((char *)this + 90432);
  if (a2)
    ++*((_DWORD *)a2 + 2);
  v28 = 0;
  v29 = a2;
  WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v8, (WTF::AtomStringImpl *)&v29, (uint64_t)&v28, a4, a5, a6, a7, a8, (uint64_t)&v30);
  v9 = v29;
  v29 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1)
      (*(void (**)(JSC::SourceProvider *))(*(_QWORD *)v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 2);
  }
  if (v31)
  {
    v18 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    v19 = *(JSC::SourceProviderCache **)(v30 + 8);
    *(_QWORD *)(v30 + 8) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        JSC::SourceProviderCache::~SourceProviderCache(v19, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
  }
  return *(_QWORD *)(v30 + 8);
}

void WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  _DWORD *v24;
  JSC::SourceProviderCache *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *(_QWORD *)a2;
  v16 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v34 = 0;
        else
          v34 = *(unsigned int *)(v12 - 4);
        v33 = 0;
        v32 = v12 + 16 * v34;
        goto LABEL_27;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *(_QWORD *)a2;
      v20 = v22;
    }
  }
  *(_QWORD *)a2 = 0;
  v24 = (_DWORD *)*v20;
  *v20 = v15;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = (JSC::SourceProviderCache *)v20[1];
  v20[1] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      JSC::SourceProviderCache::~SourceProviderCache(v25, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_23;
    goto LABEL_36;
  }
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v43 = 8;
LABEL_39:
      v20 = (_QWORD *)WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::rehash(a1, v43, (uint64_t)v20, a4, a5, a6, a7, a8);
      v28 = *a1;
      if (*a1)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_23;
    }
LABEL_36:
    v43 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
    goto LABEL_39;
  }
LABEL_23:
  v32 = v28 + 16 * v31;
  v33 = 1;
LABEL_27:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v32;
  *(_BYTE *)(a9 + 16) = v33;
}

BOOL JSC::VM::hasExceptionsAfterHandlingTraps(JSC::VM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::VM *v10;

  v8 = *((_DWORD *)this + 20);
  if ((v8 & 0x27) != 0 && (v8 & 0x20) == 0)
  {
    v10 = this;
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)this + 64), 7u, a3, a4, a5, a6, a7, a8);
    this = v10;
  }
  return *((_QWORD *)this + 2) != 0;
}

void JSC::VMTraps::handleTraps(JSC::VMTraps *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  int v21;
  unsigned int v22;
  char v23;
  unsigned int *v24;
  JSC::Watchdog **v25;
  unsigned __int8 *v26;
  int v28;
  unsigned int v29;
  int v30;
  JSC::Watchdog *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  pid_t v43;
  void (*v44)(uint64_t, uint64_t);
  void (**v45)(uint64_t, uint64_t);
  pid_t *v46;

  v9 = (char *)this - 64;
  if (*((_DWORD *)this + 6))
    v10 = a2 & 0xFFFFFFFD;
  else
    v10 = a2;
  v11 = (unsigned __int8 *)(*((_QWORD *)this + 82) + 16);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_8:
  v44 = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMTraps::handleTraps::$_0>::implFunction;
  v45 = &v44;
  v46 = &v43;
  v13 = **((_QWORD **)v9 + 90);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = (uint64_t *)(v13 + 8 * v14);
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = (uint64_t *)**((_QWORD **)v9 + 90);
      if ((_DWORD)v14)
      {
        v17 = 8 * v14;
        v16 = (uint64_t *)**((_QWORD **)v9 + 90);
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          ++v16;
          v17 -= 8;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v16 = (uint64_t *)(v13 + 8 * v14);
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = (uint64_t *)(v13 + 8 * v14);
  if (v13)
  {
LABEL_15:
    v18 = (uint64_t *)(v13 + 8 * *(unsigned int *)(v13 - 4));
    goto LABEL_16;
  }
  v18 = 0;
LABEL_16:
  while (v16 != v18)
  {
    v19 = v16 + 1;
    v44((uint64_t)v45, *v16);
    v16 = v15;
    if (v19 != v15)
    {
      v16 = v19;
      while ((unint64_t)(*v16 + 1) <= 1)
      {
        if (++v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  v20 = __ldxr(v11);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v11))
LABEL_27:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  v21 = v10 | 0x20;
  v22 = *((_DWORD *)this + 4);
  v23 = v22 & (v10 | 0x20);
  if ((v22 & (v10 | 0x20)) == 0)
    return;
  v24 = (unsigned int *)((char *)this + 16);
  v25 = (JSC::Watchdog **)(v9 + 93344);
  while (2)
  {
    if ((v23 & 0x10) == 0 && (v22 & 0x20) != 0)
      return;
    v26 = (unsigned __int8 *)(*(_QWORD *)this + 4);
    if (__ldaxr(v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_40;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v26);
LABEL_40:
    if ((v10 & 1 & *v24) != 0)
    {
      v28 = 1;
    }
    else if ((v10 & 2 & *v24) != 0)
    {
      v28 = 2;
    }
    else if ((v10 & 4 & *v24) != 0)
    {
      v28 = 4;
    }
    else if ((v10 & 8 & *v24) != 0)
    {
      v28 = 8;
    }
    else
    {
      if ((v10 & 0x10 & *v24) == 0)
      {
        v28 = 0;
        goto LABEL_51;
      }
      v28 = 16;
    }
    do
      v29 = __ldaxr(v24);
    while (__stlxr(v29 & ~v28, v24));
LABEL_51:
    v30 = __ldxr(v26);
    if (v30 != 1)
    {
      __clrex();
LABEL_55:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v26, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_56;
    }
    if (__stlxr(0, v26))
      goto LABEL_55;
LABEL_56:
    switch(v28)
    {
      case 1:
        if (!off_1ECF4C7B8)
        {
          __break(0xC471u);
          JUMPOUT(0x198C321ACLL);
        }
        off_1ECF4C7B8(v9);
        goto LABEL_65;
      case 2:
        goto LABEL_71;
      case 4:
        v31 = *v25;
        if ((*v25 & 1) != 0)
        {
          if (MEMORY[4])
          {
            v31 = 0;
            goto LABEL_62;
          }
LABEL_65:
          v22 = *v24;
          v23 = *v24 & v21;
          if ((*v24 & v21) == 0)
            return;
          continue;
        }
        if (!*((_BYTE *)v31 + 4))
          goto LABEL_65;
LABEL_62:
        JSC::Watchdog::shouldTerminate(v31, *(JSC::JSGlobalObject **)(*((_QWORD *)v9 + 11321) + 8));
        if (!v32)
          goto LABEL_65;
        v9[93441] = 1;
        v9[56] |= 0x40u;
LABEL_71:
        if (!*((_DWORD *)this + 6))
        {
          v40 = *((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 2) = v40;
          *((_QWORD *)v9 + 4) = v40;
          if (v40)
          {
            v41 = (unsigned int *)(v9 + 80);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 | 0x10, v41));
          }
          if (v9[93443])
            v9[93442] = 1;
        }
        return;
      case 8:
        v44 = (void (*)(uint64_t, uint64_t))v9;
        v43 = getpid();
        WTF::dataLog<char [4],WTF::RawPointer,char [9],int,char [34]>((const void **)&v44, &v43);
        JSC::VMTraps::invalidateCodeBlocksOnStack(this, *((JSC::CallFrame **)this - 3), v33, v34, v35, v36, v37, v38, v39);
        goto LABEL_65;
      default:
        __break(0xC471u);
        JUMPOUT(0x198C32240);
    }
  }
}

uint64_t JSC::VM::clearException(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  *(_QWORD *)(this + 16) = 0;
  v1 = (unsigned int *)(this + 80);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0xFFFFFFEF, v1));
  return this;
}

uint64_t JSC::VM::setException(uint64_t this, JSC::Exception *a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(this + 16) = a2;
  *(_QWORD *)(this + 32) = a2;
  if (a2)
  {
    v2 = (unsigned int *)(this + 80);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 | 0x10, v2));
  }
  return this;
}

JSC::Exception *JSC::VM::throwException(JSC::VM *this, JSC::JSGlobalObject *a2, JSC::Exception *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::Exception *v9;
  JSC::Exception *v10;
  BOOL v11;
  JSC::Exception *v12;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v9 = (JSC::Exception *)*((_QWORD *)this + 2);
  v10 = (JSC::Exception *)*((_QWORD *)this + 3);
  if (v9)
    v11 = v10 == v9;
  else
    v11 = 0;
  if (v11)
    return (JSC::Exception *)*((_QWORD *)this + 2);
  v12 = a3;
  if (v10 == a3)
  {
    *((_QWORD *)this + 2) = a3;
    *((_QWORD *)this + 4) = a3;
    if (!a3)
      return v12;
    goto LABEL_12;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 5);
  if (v15)
  {
    v16 = v15[3];
    if ((v16 & 0xFFFE000000000007) == 3
      || *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) + 96) == v16)
    {
      v26 = *((_QWORD *)this + 6);
      do
      {
        v21 = JSC::CallFrame::callerFrame(v15, &v26);
        v15 = (uint64_t *)v21;
      }
      while (v21 && (*(_QWORD *)(v21 + 24) & 0xFFFE000000000007) == 3);
    }
    if (!HIBYTE(word_1ECF4C48C))
      goto LABEL_10;
    if (v15 && (v15[3] & 0xFFFE000000000007) != 3)
    {
      v22 = v15[2];
      goto LABEL_24;
    }
LABEL_23:
    v22 = 0;
LABEL_24:
    v25 = v15;
    v26 = v22;
    WTF::dataLog<char [34],WTF::RawPointer,char [17],JSC::CodeBlock *,char [2]>("Throwing exception in call frame ", (const void **)&v25, " for code block ", &v26, "\n");
    __break(0xC471u);
    JUMPOUT(0x198C323F0);
  }
  if (HIBYTE(word_1ECF4C48C))
  {
    v15 = 0;
    goto LABEL_23;
  }
  v15 = 0;
LABEL_10:
  v17 = *((_QWORD *)a2 + 252);
  if (v17
    && (*(_WORD *)(v17 + 48) & 0x40) != 0
    && (*(_QWORD *)(v17 + 152) || *(_QWORD *)(v17 + 160))
    && !*((_BYTE *)v12 + 32))
  {
    v24 = *((_QWORD *)a2 + 252);
    v26 = 0;
    if (v15)
    {
      JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::GetCatchHandlerFunctor>((JSC::CallFrame *)v15, this, &v26, 0, a6, a7, a8, a9);
      v23 = v26 != 0;
    }
    else
    {
      v23 = 0;
    }
    JSC::Debugger::exception(v24, a2, (JSC::Wasm::NameSection *)v15, *((_QWORD *)v12 + 1), v23, a7, a8, a9, a4);
  }
  *((_BYTE *)v12 + 32) = 1;
  *((_QWORD *)this + 2) = v12;
  *((_QWORD *)this + 4) = v12;
LABEL_12:
  v18 = (unsigned int *)((char *)this + 80);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 | 0x10, v18));
  return v12;
}

uint64_t WTF::dataLog<char [34],WTF::RawPointer,char [17],JSC::CodeBlock *,char [2]>(const char *a1, const void **a2, const char *a3, uint64_t *a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  WTF::PrintStream::printf(v12, "%p", *a2);
  WTF::PrintStream::printf(v12, "%s", a3);
  v13 = *a4;
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  if (v13)
    JSC::CodeBlock::dumpAssumingJITType(v13);
  else
    WTF::PrintStream::printf(v14, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t JSC::VM::throwException(JSC::VM *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)))
  {
    a3 = JSC::Exception::create((uint64_t)a1, (JSC::VM *)a3, 0, a4, a5, a6, a7, a8);
  }
  return JSC::VM::throwException(a1, a2, (JSC::Exception *)a3);
}

JSC::Exception *JSC::VM::throwException(JSC::VM *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if ((a3 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)))
  {
    a3 = JSC::Exception::create((uint64_t)this, (JSC::VM *)a3, 0, a4, a5, a6, a7, a8);
  }
  return JSC::VM::throwException(this, a2, (JSC::Exception *)a3, a9, a4, a5, a6, a7, a8);
}

void JSC::VM::setStackPointerAtVMEntry(JSC::VM *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 ****v23;
  unsigned __int8 *v24;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 ***v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 ***v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned __int8 ***v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  unsigned __int8 ***v52;
  unsigned __int8 **v53;
  unsigned __int8 ***v54;
  unsigned __int8 ***v55;
  uint64_t v56;
  int v58;
  int v59;
  unsigned __int8 **v60;
  unsigned __int8 *v61;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 **v74;
  unsigned __int8 *v75;
  uint64_t v76;
  BOOL v77;

  v9 = (unint64_t *)((char *)this + 93088);
  *((_QWORD *)this + 11636) = a2;
  v10 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  v12 = dword_1ECF4C250;
  if (!(dword_1ECF4C250 >> 14))
    goto LABEL_123;
  v13 = *v9;
  if (*v9)
  {
    v14 = qword_1ECF4C248;
    v15 = v9[1];
    if (v15 > qword_1ECF4C248)
      v15 = qword_1ECF4C248;
    v16 = *(_QWORD *)(v11 + 24);
    v17 = v16 + v15;
    v18 = qword_1ECF4C248 - v15;
    if (v18 >= v13 - v17)
      v18 = v13 - v17;
    v19 = v13 - v18;
    if (v17 > v13)
      v19 = v17;
    *((_QWORD *)this + 1) = v19;
    if (v14 < v12)
      v12 = v14;
    v20 = v16 + v12;
    v21 = v14 - v12;
    if (v21 >= v13 - v20)
      v21 = v13 - v20;
    v22 = v13 - v21;
    if (v20 > v13)
      v22 = v20;
  }
  else
  {
    v30 = *(_QWORD *)(v11 + 24);
    v19 = v30 + v9[1];
    *((_QWORD *)this + 1) = v19;
    v22 = v30 + v12;
  }
  v9[2] = v22;
  if (v10 != v19)
  {
    v23 = (unsigned __int8 ****)((char *)this + 93480);
    v24 = (unsigned __int8 *)this + 93496;
    if (__ldaxr((unsigned __int8 *)this + 93496))
    {
      __clrex();
    }
    else if (!__stxr(1u, v24))
    {
      goto LABEL_21;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 93496);
LABEL_21:
    v73 = 0;
    if (!*v23 || (v31 = *((unsigned int *)*v23 - 3), !(_DWORD)v31))
    {
      v26 = 0;
      v27 = 0;
      goto LABEL_23;
    }
    if (!(v31 >> 29))
    {
      v27 = WTF::fastMalloc((WTF *)(8 * v31));
      LODWORD(v73) = v31;
      v72 = v27;
      v32 = *v23;
      if (!*v23 || !*((_DWORD *)v32 - 3))
      {
        v68 = 0;
        goto LABEL_122;
      }
      v33 = *((unsigned int *)v32 - 1);
      if ((_DWORD)v33)
      {
        v34 = 16 * v33;
        v35 = *v23;
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          v34 -= 16;
          if (!v34)
            goto LABEL_44;
        }
      }
      else
      {
        v35 = *v23;
      }
      v52 = &v32[2 * v33];
      if (v52 == v35)
      {
LABEL_44:
        v36 = 0;
        v37 = 0;
        goto LABEL_45;
      }
      v71 = 0;
      v53 = *v35;
      while (1)
      {
        v54 = v52;
        v55 = v35;
        v56 = (uint64_t)v35[1];
        if (__ldaxr((unsigned __int8 *)v56))
          break;
        if (__stxr(1u, (unsigned __int8 *)v56))
          goto LABEL_76;
LABEL_77:
        if (*(_QWORD *)(v56 + 24))
          ++*(_QWORD *)(v56 + 8);
        else
          v53 = 0;
        v58 = __ldxr((unsigned __int8 *)v56);
        if (v58 != 1)
        {
          __clrex();
LABEL_83:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v56, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_84;
        }
        if (__stlxr(0, (unsigned __int8 *)v56))
          goto LABEL_83;
LABEL_84:
        if (!v53)
        {
          v71 = 1;
          goto LABEL_98;
        }
        v74 = v53;
        v59 = HIDWORD(v73);
        if (HIDWORD(v73) == (_DWORD)v73)
        {
          WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>((uint64_t)&v72, (unint64_t)&v74);
        }
        else
        {
          v74 = 0;
          *(_QWORD *)(v72 + 8 * HIDWORD(v73)) = v53;
          HIDWORD(v73) = v59 + 1;
        }
        v60 = v74;
        v74 = 0;
        if (v60)
        {
          v61 = *v60;
          if (__ldaxr(*v60))
          {
            __clrex();
            goto LABEL_90;
          }
          if (__stxr(1u, v61))
LABEL_90:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v61);
          v63 = *((_QWORD *)v61 + 1);
          v64 = v63 - 1;
          *((_QWORD *)v61 + 1) = v63 - 1;
          if (v63 == 1)
          {
            v70 = *((_QWORD *)v61 + 2);
            v66 = *((_QWORD *)v61 + 3);
            *((_QWORD *)v61 + 3) = 0;
            v65 = v70 == 0;
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
          v67 = __ldxr(v61);
          if (v67 == 1)
          {
            if (!__stlxr(0, v61))
            {
LABEL_104:
              if (!v64)
              {
                v75 = v61;
                v76 = v66;
                v77 = v65;
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v75, a2, a3, a4, a5, a6, a7, a8);
              }
              goto LABEL_98;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v61, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_104;
        }
LABEL_98:
        v35 = v55 + 2;
        if (v55 + 2 != v54)
        {
          v52 = v54;
          while (1)
          {
            v53 = *v35;
            if ((unint64_t)*v35 + 1 > 1)
              break;
            v35 += 2;
            if (v35 == v54)
              goto LABEL_115;
          }
          if (v35 != v54)
            continue;
        }
LABEL_115:
        LODWORD(v31) = v73;
        v36 = HIDWORD(v73);
        v27 = v72;
        v37 = v71;
LABEL_45:
        if (v31 <= v36)
        {
LABEL_46:
          v26 = HIDWORD(v73);
          if (v37)
            _ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_((uint64_t *)this + 11685, &v75, a3, a4, a5, a6, a7, a8);
LABEL_23:
          v28 = 0;
          *((_DWORD *)this + 23372) = 0;
          if (*v23)
          {
            v28 = *((_DWORD *)*v23 - 3);
            if (v28 > 0x7FFFFFFE)
              v28 = 0x7FFFFFFF;
          }
          *((_DWORD *)this + 23373) = 2 * v28;
          v29 = __ldxr(v24);
          if (v29 == 1)
          {
            if (!__stlxr(0, v24))
            {
LABEL_29:
              if (!v26)
              {
LABEL_30:
                if (v27)
                  WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
                return;
              }
              v38 = *((_QWORD *)this + 1);
              v39 = 8 * v26;
              v40 = v39;
              v41 = (uint64_t *)v27;
              do
              {
                v42 = *v41++;
                *(_QWORD *)(v42 + 16) = v38;
                v40 -= 8;
              }
              while (v40);
              v43 = (unsigned __int8 ***)v27;
              while (2)
              {
                v44 = *v43;
                *v43 = 0;
                if (!v44)
                {
LABEL_54:
                  ++v43;
                  v39 -= 8;
                  if (!v39)
                    goto LABEL_30;
                  continue;
                }
                break;
              }
              v45 = *v44;
              if (__ldaxr(*v44))
              {
                __clrex();
                goto LABEL_58;
              }
              if (__stxr(1u, v45))
LABEL_58:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v45);
              v47 = *((_QWORD *)v45 + 1);
              v48 = v47 - 1;
              *((_QWORD *)v45 + 1) = v47 - 1;
              if (v47 == 1)
              {
                v69 = *((_QWORD *)v45 + 2);
                v50 = *((_QWORD *)v45 + 3);
                *((_QWORD *)v45 + 3) = 0;
                v49 = v69 == 0;
              }
              else
              {
                v49 = 0;
                v50 = 0;
              }
              v51 = __ldxr(v45);
              if (v51 == 1)
              {
                if (!__stlxr(0, v45))
                {
LABEL_66:
                  if (!v48)
                  {
                    v75 = v45;
                    v76 = v50;
                    v77 = v49;
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v75, a2, a3, a4, a5, a6, a7, a8);
                  }
                  goto LABEL_54;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v45, 0, a3, a4, a5, a6, a7, a8);
              goto LABEL_66;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 93496, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_29;
        }
        v68 = v37;
        if (v36)
        {
          LODWORD(v73) = v36;
          v27 = (unint64_t)WTF::fastRealloc(v27, 8 * v36, a3, a4, a5, a6, a7, a8);
          goto LABEL_108;
        }
        if (!v27)
        {
LABEL_108:
          v37 = v68;
          goto LABEL_46;
        }
LABEL_122:
        v72 = 0;
        LODWORD(v73) = 0;
        WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
        v27 = v72;
        goto LABEL_108;
      }
      __clrex();
LABEL_76:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v56);
      goto LABEL_77;
    }
LABEL_123:
    __break(0xC471u);
    JUMPOUT(0x198C329ECLL);
  }
}

void JSC::VM::updateStackLimits(JSC::VM *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 ****v22;
  unsigned __int8 *v23;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 ***v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 ***v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned __int8 ***v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  unsigned __int8 ***v51;
  unsigned __int8 **v52;
  unsigned __int8 ***v53;
  unsigned __int8 ***v54;
  uint64_t v55;
  int v57;
  int v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unsigned __int8 **v73;
  unsigned __int8 *v74;
  uint64_t v75;
  BOOL v76;

  v9 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(0);
  v11 = dword_1ECF4C250;
  if (!(dword_1ECF4C250 >> 14))
    goto LABEL_123;
  v12 = *((_QWORD *)this + 11636);
  if (v12)
  {
    v13 = qword_1ECF4C248;
    v14 = *((_QWORD *)this + 11637);
    if (v14 > qword_1ECF4C248)
      v14 = qword_1ECF4C248;
    v15 = *(_QWORD *)(v10 + 24);
    v16 = v15 + v14;
    v17 = qword_1ECF4C248 - v14;
    if (v17 >= v12 - v16)
      v17 = v12 - v16;
    v18 = v12 - v17;
    if (v16 > v12)
      v18 = v16;
    *((_QWORD *)this + 1) = v18;
    if (v13 < v11)
      v11 = v13;
    v19 = v15 + v11;
    v20 = v13 - v11;
    if (v20 >= v12 - v19)
      v20 = v12 - v19;
    v21 = v12 - v20;
    if (v19 > v12)
      v21 = v19;
  }
  else
  {
    v29 = *(_QWORD *)(v10 + 24);
    v18 = v29 + *((_QWORD *)this + 11637);
    *((_QWORD *)this + 1) = v18;
    v21 = v29 + v11;
  }
  *((_QWORD *)this + 11638) = v21;
  if (v9 != v18)
  {
    v22 = (unsigned __int8 ****)((char *)this + 93480);
    v23 = (unsigned __int8 *)this + 93496;
    if (__ldaxr((unsigned __int8 *)this + 93496))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_21;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 93496);
LABEL_21:
    v72 = 0;
    if (!*v22 || (v30 = *((unsigned int *)*v22 - 3), !(_DWORD)v30))
    {
      v25 = 0;
      v26 = 0;
      goto LABEL_23;
    }
    if (!(v30 >> 29))
    {
      v26 = WTF::fastMalloc((WTF *)(8 * v30));
      LODWORD(v72) = v30;
      v71 = v26;
      v31 = *v22;
      if (!*v22 || !*((_DWORD *)v31 - 3))
      {
        v67 = 0;
        goto LABEL_122;
      }
      v32 = *((unsigned int *)v31 - 1);
      if ((_DWORD)v32)
      {
        v33 = 16 * v32;
        v34 = *v22;
        while ((unint64_t)*v34 + 1 <= 1)
        {
          v34 += 2;
          v33 -= 16;
          if (!v33)
            goto LABEL_44;
        }
      }
      else
      {
        v34 = *v22;
      }
      v51 = &v31[2 * v32];
      if (v51 == v34)
      {
LABEL_44:
        v35 = 0;
        v36 = 0;
        goto LABEL_45;
      }
      v70 = 0;
      v52 = *v34;
      while (1)
      {
        v53 = v51;
        v54 = v34;
        v55 = (uint64_t)v34[1];
        if (__ldaxr((unsigned __int8 *)v55))
          break;
        if (__stxr(1u, (unsigned __int8 *)v55))
          goto LABEL_76;
LABEL_77:
        if (*(_QWORD *)(v55 + 24))
          ++*(_QWORD *)(v55 + 8);
        else
          v52 = 0;
        v57 = __ldxr((unsigned __int8 *)v55);
        if (v57 != 1)
        {
          __clrex();
LABEL_83:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v55, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_84;
        }
        if (__stlxr(0, (unsigned __int8 *)v55))
          goto LABEL_83;
LABEL_84:
        if (!v52)
        {
          v70 = 1;
          goto LABEL_98;
        }
        v73 = v52;
        v58 = HIDWORD(v72);
        if (HIDWORD(v72) == (_DWORD)v72)
        {
          WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>((uint64_t)&v71, (unint64_t)&v73);
        }
        else
        {
          v73 = 0;
          *(_QWORD *)(v71 + 8 * HIDWORD(v72)) = v52;
          HIDWORD(v72) = v58 + 1;
        }
        v59 = v73;
        v73 = 0;
        if (v59)
        {
          v60 = *v59;
          if (__ldaxr(*v59))
          {
            __clrex();
            goto LABEL_90;
          }
          if (__stxr(1u, v60))
LABEL_90:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v60);
          v62 = *((_QWORD *)v60 + 1);
          v63 = v62 - 1;
          *((_QWORD *)v60 + 1) = v62 - 1;
          if (v62 == 1)
          {
            v69 = *((_QWORD *)v60 + 2);
            v65 = *((_QWORD *)v60 + 3);
            *((_QWORD *)v60 + 3) = 0;
            v64 = v69 == 0;
          }
          else
          {
            v64 = 0;
            v65 = 0;
          }
          v66 = __ldxr(v60);
          if (v66 == 1)
          {
            if (!__stlxr(0, v60))
            {
LABEL_104:
              if (!v63)
              {
                v74 = v60;
                v75 = v65;
                v76 = v64;
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v74, a2, a3, a4, a5, a6, a7, a8);
              }
              goto LABEL_98;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v60, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_104;
        }
LABEL_98:
        v34 = v54 + 2;
        if (v54 + 2 != v53)
        {
          v51 = v53;
          while (1)
          {
            v52 = *v34;
            if ((unint64_t)*v34 + 1 > 1)
              break;
            v34 += 2;
            if (v34 == v53)
              goto LABEL_115;
          }
          if (v34 != v53)
            continue;
        }
LABEL_115:
        LODWORD(v30) = v72;
        v35 = HIDWORD(v72);
        v26 = v71;
        v36 = v70;
LABEL_45:
        if (v30 <= v35)
        {
LABEL_46:
          v25 = HIDWORD(v72);
          if (v36)
            _ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_((uint64_t *)this + 11685, &v74, a3, a4, a5, a6, a7, a8);
LABEL_23:
          v27 = 0;
          *((_DWORD *)this + 23372) = 0;
          if (*v22)
          {
            v27 = *((_DWORD *)*v22 - 3);
            if (v27 > 0x7FFFFFFE)
              v27 = 0x7FFFFFFF;
          }
          *((_DWORD *)this + 23373) = 2 * v27;
          v28 = __ldxr(v23);
          if (v28 == 1)
          {
            if (!__stlxr(0, v23))
            {
LABEL_29:
              if (!v25)
              {
LABEL_30:
                if (v26)
                  WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
                return;
              }
              v37 = *((_QWORD *)this + 1);
              v38 = 8 * v25;
              v39 = v38;
              v40 = (uint64_t *)v26;
              do
              {
                v41 = *v40++;
                *(_QWORD *)(v41 + 16) = v37;
                v39 -= 8;
              }
              while (v39);
              v42 = (unsigned __int8 ***)v26;
              while (2)
              {
                v43 = *v42;
                *v42 = 0;
                if (!v43)
                {
LABEL_54:
                  ++v42;
                  v38 -= 8;
                  if (!v38)
                    goto LABEL_30;
                  continue;
                }
                break;
              }
              v44 = *v43;
              if (__ldaxr(*v43))
              {
                __clrex();
                goto LABEL_58;
              }
              if (__stxr(1u, v44))
LABEL_58:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v44);
              v46 = *((_QWORD *)v44 + 1);
              v47 = v46 - 1;
              *((_QWORD *)v44 + 1) = v46 - 1;
              if (v46 == 1)
              {
                v68 = *((_QWORD *)v44 + 2);
                v49 = *((_QWORD *)v44 + 3);
                *((_QWORD *)v44 + 3) = 0;
                v48 = v68 == 0;
              }
              else
              {
                v48 = 0;
                v49 = 0;
              }
              v50 = __ldxr(v44);
              if (v50 == 1)
              {
                if (!__stlxr(0, v44))
                {
LABEL_66:
                  if (!v47)
                  {
                    v74 = v44;
                    v75 = v49;
                    v76 = v48;
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v74, a2, a3, a4, a5, a6, a7, a8);
                  }
                  goto LABEL_54;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, a3, a4, a5, a6, a7, a8);
              goto LABEL_66;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 93496, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_29;
        }
        v67 = v36;
        if (v35)
        {
          LODWORD(v72) = v35;
          v26 = (unint64_t)WTF::fastRealloc(v26, 8 * v35, a3, a4, a5, a6, a7, a8);
          goto LABEL_108;
        }
        if (!v26)
        {
LABEL_108:
          v36 = v67;
          goto LABEL_46;
        }
LABEL_122:
        v71 = 0;
        LODWORD(v72) = 0;
        WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
        v26 = v71;
        goto LABEL_108;
      }
      __clrex();
LABEL_76:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v55);
      goto LABEL_77;
    }
LABEL_123:
    __break(0xC471u);
    JUMPOUT(0x198C32F30);
  }
}

void WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t v11;
  unint64_t v12;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v10 = v8 - 1;
    v11 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v8 - 1));
    *(_QWORD *)(*(_QWORD *)a2 + 8 * (v8 - 1)) = 0;
    *a1 = v11;
    v12 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v8 - 1));
    *(_QWORD *)(*(_QWORD *)a2 + 8 * (v8 - 1)) = 0;
    if (v12)
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    a2[3] = v10;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::VM::popAllCheckpointOSRSideStateUntil(JSC::VM *this, JSC::CallFrame *a2)
{
  _DWORD *v4;
  int v5;
  _opaque_pthread_t *v6;
  char *stackaddr_np;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  rlim_t rlim_cur;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  WTF *v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  WTF *v30;
  rlimit v31;

  v4 = (_DWORD *)((char *)this + 93216);
  v5 = pthread_main_np();
  v6 = pthread_self();
  stackaddr_np = (char *)pthread_get_stackaddr_np(v6);
  if (v5)
  {
    getrlimit(3, &v31);
    if (v31.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
      rlim_cur = 0x800000;
    else
      rlim_cur = v31.rlim_cur;
  }
  else
  {
    rlim_cur = pthread_get_stacksize_np(v6);
  }
  v16 = v4[3];
  LODWORD(v17) = v4[3];
  if (a2 && (_DWORD)v17)
  {
    v18 = &stackaddr_np[-rlim_cur];
    v19 = **(_QWORD **)(*(_QWORD *)v4 + 8 * v16 - 8);
    if (v19 <= (unint64_t)a2 && v19 > (unint64_t)v18)
    {
      while (1)
      {
        WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(&v30, v4, v9, v10, v11, v12, v13, v14);
        v21 = v30;
        v30 = 0;
        if (v21)
          WTF::fastFree((unint64_t)v21, v8, v9, v10, v11, v12, v13, v14);
        v17 = v4[3];
        if (!(_DWORD)v17)
          break;
        v22 = **(_QWORD **)(*(_QWORD *)v4 + 8 * v17 - 8);
        v23 = v22 <= (unint64_t)a2 && v22 > (unint64_t)v18;
        v16 = v4[3];
        if (!v23)
          goto LABEL_20;
      }
      v16 = 0;
    }
  }
LABEL_20:
  if (v16 < v4[2])
  {
    if (v16 < v17)
      WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)v4, (void *)v16, v9, v10, v11, v12, v13, v14);
    v24 = *(char **)v4;
    if (v16)
    {
      v25 = v4[2];
      if (v25 >= v16)
        v26 = v16;
      else
        v26 = v4[2];
      if ((_DWORD)v25 && v26 >= 5)
      {
        v4[2] = v16;
        *(_QWORD *)v4 = WTF::fastRealloc((unint64_t)v24, 8 * v16, v9, v10, v11, v12, v13, v14);
        return;
      }
      v27 = v4[3];
      if (v16 < 5)
      {
        v28 = (char *)this + 93232;
        *(_QWORD *)v4 = (char *)this + 93232;
        v4[2] = 4;
      }
      else
      {
        if (v16 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v28 = (char *)WTF::fastMalloc((WTF *)(8 * v16));
        v4[2] = v16;
        *(_QWORD *)v4 = v28;
      }
      if (v28 != v24)
        memcpy(v28, v24, 8 * v27);
    }
    v29 = (char *)this + 93232;
    if (v29 != v24 && v24)
    {
      if (*(char **)v4 == v24)
      {
        *(_QWORD *)v4 = 0;
        v4[2] = 0;
      }
      WTF::fastFree((unint64_t)v24, v8, v9, v10, v11, v12, v13, v14);
    }
    if (!*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = v29;
      v4[2] = 4;
    }
  }
}

void *JSC::VM::acquireRegExpPatternContexBuffer(JSC::VM *this)
{
  unsigned __int8 *v2;
  unint64_t *v4;
  void *v5;
  unint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = (unsigned __int8 *)this + 93049;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_4:
  v4 = (unint64_t *)((char *)this + 93056);
  v5 = (void *)*((_QWORD *)this + 11632);
  if (!v5)
  {
    v7 = v4;
    v5 = (void *)WTF::fastMalloc((WTF *)0x2000);
    bzero(v5, 0x2000uLL);
    v15 = *v7;
    *v7 = (unint64_t)v5;
    if (v15)
    {
      WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
      return (void *)*v7;
    }
  }
  return v5;
}

uint64_t JSC::VM::ensureWatchpointSetForImpureProperty(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t **v37;
  uint64_t *i;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char v44;

  v8 = (uint64_t *)(a1 + 93160);
  if (a2)
    *(_DWORD *)a2 += 2;
  v41 = 0;
  v42 = a2;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v8, (WTF::AtomStringImpl *)&v42, (uint64_t)&v41, a4, a5, a6, a7, a8, (uint64_t)&v43);
  v16 = v42;
  v42 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (v44)
  {
    v33 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v33 = 1;
    *(_WORD *)(v33 + 4) = 1;
    *(_QWORD *)(v33 + 8) = v33 + 8;
    *(_QWORD *)(v33 + 16) = v33 + 8;
    v34 = *(_QWORD *)(v43 + 8);
    *(_QWORD *)(v43 + 8) = v33;
    if (v34)
    {
      do
      {
        v35 = __ldaxr((unsigned int *)v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, (unsigned int *)v34));
      if (!v36)
      {
        atomic_store(1u, (unsigned int *)v34);
        v37 = (uint64_t **)(v34 + 8);
        for (i = *(uint64_t **)(v34 + 8); i != (uint64_t *)v37; i = *v37)
        {
          v40 = *i;
          v39 = (uint64_t *)i[1];
          *v39 = *i;
          *(_QWORD *)(v40 + 8) = v39;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v34, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  return *(_QWORD *)(v43 + 8);
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *i;
  uint64_t *v47;
  uint64_t v48;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *(_QWORD *)a2;
  v16 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v36 = 0;
        else
          v36 = *(unsigned int *)(v12 - 4);
        v35 = 0;
        v34 = v12 + 16 * v36;
        goto LABEL_27;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *(_QWORD *)a2;
      v20 = v22;
    }
  }
  *(_QWORD *)a2 = 0;
  v24 = (WTF::StringImpl *)*v20;
  *v20 = v15;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v20[1];
  v20[1] = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v25));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v25);
      v45 = (uint64_t **)(v25 + 8);
      for (i = *(uint64_t **)(v25 + 8); i != (uint64_t *)v45; i = *v45)
      {
        v48 = *i;
        v47 = (uint64_t *)i[1];
        *v47 = *i;
        *(_QWORD *)(v48 + 8) = v47;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_23;
LABEL_30:
    v20 = (_QWORD *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a1, (uint64_t)v20, a3, a4, a5, a6, a7, a8);
    v30 = *a1;
    if (*a1)
      v33 = *(unsigned int *)(v30 - 4);
    else
      v33 = 0;
    goto LABEL_23;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_30;
LABEL_23:
  v34 = v30 + 16 * v33;
  v35 = 1;
LABEL_27:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 16) = v35;
}

void JSC::VM::addImpureProperty(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t *j;
  uint64_t *v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t *i;
  uint64_t *v54;
  uint64_t v55;
  _QWORD v56[2];

  v2 = (uint64_t *)(a1 + 93160);
  v3 = *(_QWORD *)(a1 + 93160);
  if (!v3)
    return;
  v6 = *(_DWORD *)(v3 - 8);
  v14 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2) & v6;
  v16 = *(_QWORD *)(v3 + 16 * v14);
  if (v16 == a2)
  {
LABEL_6:
    v18 = v3 + 16 * v14;
    v19 = *v2;
    if (!*v2)
      goto LABEL_11;
    v20 = *(unsigned int *)(v19 - 4);
LABEL_10:
    v19 += 16 * v20;
LABEL_11:
    if (v18 != v19)
    {
      v21 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      v22 = *v2;
      if (!*v2 || (v22 += 16 * *(unsigned int *)(v22 - 4), v22 != v18))
      {
        if (v22 != v18)
        {
          v23 = *(WTF::StringImpl **)v18;
          *(_QWORD *)v18 = -1;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::~StringImpl(v23, v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          v24 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr((unsigned int *)v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, (unsigned int *)v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)v24);
              v52 = (uint64_t **)(v24 + 8);
              for (i = *(uint64_t **)(v24 + 8); i != (uint64_t *)v52; i = *v52)
              {
                v55 = *i;
                v54 = (uint64_t *)i[1];
                *v54 = *i;
                *(_QWORD *)(v55 + 8) = v54;
                *i = 0;
                i[1] = 0;
              }
              WTF::fastFree(v24, v7, v8, v9, v10, v11, v12, v13);
            }
          }
          ++*(_DWORD *)(*v2 - 16);
          v27 = *v2;
          if (*v2)
            v28 = *(_DWORD *)(v27 - 12) - 1;
          else
            v28 = -1;
          *(_DWORD *)(v27 - 12) = v28;
          v29 = *v2;
          if (*v2)
          {
            v30 = 6 * *(_DWORD *)(v29 - 12);
            v31 = *(_DWORD *)(v29 - 4);
            if (v30 < v31 && v31 >= 9)
              WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v2, v31 >> 1, 0, v9, v10, v11, v12, v13);
          }
        }
      }
      if (v21)
      {
        if (*(_BYTE *)(v21 + 4) == 1)
        {
          v56[0] = &off_1E3583C90;
          v56[1] = "Impure property added";
          __dmb(0xAu);
          v44 = (uint64_t **)(v21 + 8);
          v43 = *(uint64_t **)(v21 + 8);
          *(_BYTE *)(v21 + 4) = 2;
          v45 = *(_DWORD *)(a1 + 916);
          *(_DWORD *)(a1 + 916) = v45 + 1;
          if (v43 != (uint64_t *)(v21 + 8))
          {
            do
            {
              v47 = *v43;
              v46 = (uint64_t *)v43[1];
              *v46 = *v43;
              *(_QWORD *)(v47 + 8) = v46;
              *v43 = 0;
              v43[1] = 0;
              JSC::Watchpoint::fire((unint64_t)v43, (JSC::VM *)a1, v56, v9, v10, v11, v12, v13, v15);
              v43 = *v44;
            }
            while (*v44 != (uint64_t *)v44);
            v45 = *(_DWORD *)(a1 + 916) - 1;
          }
          *(_DWORD *)(a1 + 916) = v45;
          __dmb(0xAu);
        }
        do
        {
          v33 = __ldaxr((unsigned int *)v21);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, (unsigned int *)v21));
        if (!v34)
        {
          atomic_store(1u, (unsigned int *)v21);
          v48 = (uint64_t **)(v21 + 8);
          for (j = *(uint64_t **)(v21 + 8); j != (uint64_t *)v48; j = *v48)
          {
            v51 = *j;
            v50 = (uint64_t *)j[1];
            *v50 = *j;
            *(_QWORD *)(v51 + 8) = v50;
            *j = 0;
            j[1] = 0;
          }
          WTF::fastFree(v21, v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    return;
  }
  v17 = 1;
  while (v16)
  {
    v14 = ((_DWORD)v14 + v17) & v6;
    v16 = *(_QWORD *)(v3 + 16 * v14);
    ++v17;
    if (v16 == a2)
      goto LABEL_6;
  }
  v19 = *v2;
  if (*v2)
  {
    v20 = *(unsigned int *)(v19 - 4);
    v18 = v19 + 16 * v20;
    goto LABEL_10;
  }
}

void JSC::VM::dumpTypeProfilerData(JSC::VM *this)
{
  char *v1;
  JSC::TypeProfilerLog *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t i;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v1 = (char *)this + 93168;
  if (*((_QWORD *)this + 11646))
  {
    v3 = (JSC::TypeProfilerLog *)*((_QWORD *)this + 11647);
    v4 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v4 = 0xD00000002;
    *(_QWORD *)(v4 + 8) = "VM Dump Types";
    *(_DWORD *)(v4 + 16) = 4;
    v28 = (WTF::StringImpl *)v4;
    JSC::TypeProfilerLog::processLogEntries(v3, this, (const WTF::String *)&v28, v5, v6, v7, v8, v9);
    v17 = v28;
    v28 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    v18 = *(uint64_t **)v1;
    for (i = *(_QWORD *)(*(_QWORD *)v1 + 32); i; i = *(_QWORD *)(i + 48))
      JSC::TypeProfiler::logTypesForTypeLocation(v18, i, (uint64_t)this);
  }
}

void JSC::VM::queueMicrotask(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v3 = (uint64_t *)(a1 + 93296);
  v5 = *(_QWORD *)(a1 + 93296);
  v4 = *(_QWORD *)(a1 + 93304);
  if (v5)
  {
    if (v4 + 1 != v5)
      goto LABEL_26;
    LODWORD(v6) = *(_DWORD *)(a1 + 93320);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 93320);
    if (v4)
    {
      if (v4 != v6 - 1)
        goto LABEL_26;
    }
    else if ((_DWORD)v6)
    {
      v4 = 0;
      goto LABEL_26;
    }
  }
  v7 = v6;
  v8 = ((unint64_t)v6 >> 2) + v6;
  if (v8 <= 0xF)
    v8 = 15;
  if (v8 >= 0x5555555)
  {
    __break(0xC471u);
    return;
  }
  v9 = *(_QWORD *)(a1 + 93312);
  v10 = 48 * v8 + 48;
  v11 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v8 + 48));
  v19 = (v10 & 0xFFFFFFF0) / 0x30;
  *((_DWORD *)v3 + 6) = v19;
  v3[2] = (uint64_t)v11;
  v20 = *v3;
  v21 = v3[1];
  if (*v3 <= v21)
  {
    if (*v3 != v21)
    {
      v34 = 3 * v20;
      v35 = &v11[3 * v20];
      v36 = (__int128 *)(v9 + 48 * v20);
      v37 = 48 * v21 - 16 * v34;
      do
      {
        v38 = *v36;
        v39 = v36[2];
        v35[1] = v36[1];
        v35[2] = v39;
        *v35 = v38;
        v35 += 3;
        v36 += 3;
        v37 -= 48;
      }
      while (v37);
    }
  }
  else
  {
    if (v21)
    {
      v22 = 48 * v21;
      v23 = (__int128 *)v9;
      do
      {
        v24 = *v23;
        v25 = v23[2];
        v11[1] = v23[1];
        v11[2] = v25;
        *v11 = v24;
        v11 += 3;
        v23 += 3;
        v22 -= 48;
      }
      while (v22);
      v19 = *((_DWORD *)v3 + 6);
      v20 = *v3;
      v11 = (_OWORD *)v3[2];
    }
    v26 = v20 - v7 + v19;
    if (v20 != v7)
    {
      v27 = 3 * v20;
      v28 = (__int128 *)(v9 + 48 * v20);
      v29 = &v11[3 * v19];
      v30 = 16 * v27 - 48 * v7;
      do
      {
        v31 = (_OWORD *)((char *)v29 + v30);
        v32 = *v28;
        v33 = v28[2];
        v31[1] = v28[1];
        v31[2] = v33;
        *v31 = v32;
        v28 += 3;
        v30 += 48;
      }
      while (v30);
    }
    *v3 = v26;
  }
  if (v9)
  {
    if (v3[2] == v9)
    {
      v3[2] = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    WTF::fastFree(v9, v12, v13, v14, v15, v16, v17, v18);
  }
  v4 = v3[1];
LABEL_26:
  v40 = (_OWORD *)(v3[2] + 48 * v4);
  v41 = *a2;
  v42 = a2[2];
  v40[1] = a2[1];
  v40[2] = v42;
  *v40 = v41;
  v43 = v3[1];
  if (v43 == *((unsigned int *)v3 + 6) - 1)
    v44 = 0;
  else
    v44 = v43 + 1;
  v3[1] = v44;
}

void JSC::VM::callPromiseRejectionCallback(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  char *v28;
  int v29;
  char v30;
  _DWORD v31[2];
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = *a2;
  v9 = *(uint64_t **)(*(_QWORD *)(16 * (*(_DWORD *)**a2 & 0xFFFFFFFE) + 0x28) + 2008);
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      if (*(_BYTE *)(v10 + 5) == 26)
      {
        v12 = *(_QWORD *)(v10 + 24);
        if ((v12 & 1) != 0)
          v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v12 + 5) == 8)
        {
          LOBYTE(v38) = 1;
          v39 = *(_QWORD *)(v12 + 40);
          LOBYTE(v40) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                   + 0x4C));
        }
        else
        {
          LOBYTE(v38) = 2;
          v13 = *(_QWORD *)(v10 + 16);
          v39 = v12;
          v40 = v13;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x38))(&v38, v10);
        v8 = *a2;
      }
      v30 = 0;
      v31[1] = 8;
      v32 = (char *)&v33 + 8;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0;
      if (v8)
      {
        v14 = (_DWORD *)*v8;
        *((_QWORD *)&v33 + 1) = *v8;
      }
      else
      {
        v14 = 0;
      }
      v15 = *((_QWORD *)v14 + 2);
      if (v15 < 0xFFFE000000000000 || (v15 & 0x80000000) != 0)
        LODWORD(v15) = COERCE_DOUBLE(v15 - 0x2000000000000);
      if ((v15 & 3) != 0)
        v16 = *((_QWORD *)v14 + 3);
      else
        v16 = 10;
      *(_QWORD *)&v34 = v16;
      v31[0] = 2;
      v17 = *(uint64_t **)(16 * (*(_DWORD *)*v8 & 0xFFFFFFFE) + 0x28);
      v28 = (char *)&v33 + 8;
      v29 = 2;
      JSC::call(v17, v10, (unsigned __int8 *)&v38, 2, (uint64_t)&v28, a6, a7, a8);
      *(_QWORD *)(a1 + 16) = 0;
      v25 = (unsigned int *)(a1 + 80);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v31, v18, v19, v20, v21, v22, v23, v24);
    }
  }
}

uint64_t JSC::VM::didExhaustMicrotaskQueue(uint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = this + 93408;
  v9 = *(unsigned int *)(this + 93420);
  do
  {
    v10 = *(uint64_t **)v8;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    if (v9)
    {
      v23 = v8;
      v24 = v10;
      v25 = this;
      v12 = 8 * v9;
      v22 = 8 * v9;
      while (1)
      {
        v13 = *v10 ? *(_QWORD *)*v10 : 0;
        if ((JSC::JSPromise::isHandled(v13) & 1) == 0)
        {
          JSC::VM::callPromiseRejectionCallback(v25, (_QWORD **)v10, a3, a4, a5, a6, a7, a8);
          v14 = *(_QWORD *)(v25 + 16);
          if (v14)
          {
            if (*(_QWORD *)(v25 + 24) == v14)
              break;
          }
        }
        ++v10;
        v12 -= 8;
        if (!v12)
        {
          v11 = 1;
          goto LABEL_18;
        }
      }
      v11 = 0;
LABEL_18:
      v15 = v24;
      v16 = v22;
      do
      {
        v17 = *v15;
        if (*v15)
        {
          v18 = (uint64_t *)(v17 - 16);
          v19 = *(_QWORD *)(((v17 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v20 = *(uint64_t **)(v17 - 8);
          if (v20)
          {
            v21 = *v18;
            *v20 = *v18;
            *(_QWORD *)(v21 + 8) = v20;
            *v18 = 0;
            v18[1] = 0;
          }
          *v18 = *(_QWORD *)(v19 + 40);
          *(_QWORD *)(v19 + 40) = v18;
          *v15 = 0;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
      v10 = v24;
      this = v25;
      v8 = v23;
    }
    else
    {
      v11 = 1;
    }
    if (v10)
    {
      v26 = this;
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
      this = v26;
    }
    if (!v11)
      break;
    v9 = *(unsigned int *)(v8 + 12);
  }
  while ((_DWORD)v9);
  return this;
}

void JSC::VM::drainMicrotasks(JSC::VM *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[3];

  v8 = (char *)this + 93296;
  if (!*((_QWORD *)this + 11675))
  {
    if (*((_BYTE *)this + 93442))
    {
      *(_QWORD *)v8 = 0;
      *((_QWORD *)this + 11663) = 0;
      v13 = *((_QWORD *)this + 11664);
      if (v13)
      {
        *((_QWORD *)v8 + 2) = 0;
        *((_DWORD *)v8 + 6) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      *((_DWORD *)v8 + 8) = 0;
LABEL_7:
      ++*((_QWORD *)v8 + 17);
      *((_BYTE *)this + 41452) = 0;
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)v8;
        v11 = *((_QWORD *)v8 + 1);
        while (v10 == v11)
        {
          JSC::VM::didExhaustMicrotaskQueue((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
          v12 = *((_QWORD *)this + 2);
          if (v12 && *((_QWORD *)this + 3) == v12)
            return;
          v10 = *(_QWORD *)v8;
          v11 = *((_QWORD *)v8 + 1);
          if (*(_QWORD *)v8 == v11)
            goto LABEL_7;
        }
        JSC::MicrotaskQueue::dequeue((uint64_t)v8, v23);
        JSC::QueuedTask::run((JSC::QueuedTask *)v23, v14, v15, v16, v17, v18, v19, v20);
        v21 = *((_QWORD *)this + 2);
        if (v21)
        {
          if (*((_QWORD *)this + 3) == v21)
            break;
        }
        v22 = *((_QWORD *)v8 + 16);
        if (v22)
          (*(void (**)(uint64_t, JSC::VM *))(*(_QWORD *)v22 + 16))(v22, this);
      }
    }
  }
}

uint64_t JSC::MicrotaskQueue::dequeue@<X0>(uint64_t this@<X0>, _OWORD *a2@<X8>)
{
  int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;

  v2 = *(_DWORD *)(this + 32);
  if (v2)
    *(_DWORD *)(this + 32) = v2 - 1;
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this == *(_QWORD *)(this + 8))
  {
    this = 80;
    __break(0xC471u);
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)(this + 16) + 48 * v3);
    v5 = v4[1];
    *a2 = *v4;
    a2[1] = v5;
    a2[2] = v4[2];
    if (v3 == *(unsigned int *)(this + 24) - 1)
      v6 = 0;
    else
      v6 = v3 + 1;
    *(_QWORD *)this = v6;
  }
  return this;
}

void JSC::QueuedTask::run(JSC::QueuedTask *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)this + 1);
  if ((v8 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v8 + 5) >= 0x17u)
    JSC::runJSMicrotask(*(JSC::VM **)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28), *(void **)this, v8, *((_QWORD *)this + 2), *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5), a8);
}

void JSC::sanitizeStackForVM(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::WordLock *v21;
  unsigned int v22;
  unsigned int v23;
  _opaque_pthread_t *v24;
  unint64_t v26;
  char *stackaddr_np;
  _opaque_pthread_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  _opaque_pthread_t *v35;
  unint64_t v37;
  char *v38;
  _opaque_pthread_t *v39;
  unint64_t v40;
  int v41;
  _opaque_pthread_t *v42;
  rlim_t rlim_cur;
  int v44;
  _opaque_pthread_t *v45;
  rlim_t stacksize_np;
  uint64_t v47;
  const void *v48;
  const void *v49;
  uint64_t v50;
  const void *v51;
  const void *v52;
  const void *v53;
  rlimit *v54;
  rlimit v55;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 736);
  if (v10)
    goto LABEL_2;
  v19 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v19 != -1)
  {
    v55.rlim_cur = (rlim_t)&v53;
    v54 = &v55;
    std::__call_once(&WTF::initialize(void)::onceKey, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  v20 = WTF::fastMalloc((WTF *)0x68);
  v10 = v20;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_QWORD *)(v20 + 96) = 0;
  *(_DWORD *)v20 = 1;
  *(_OWORD *)(v20 + 8) = 0u;
  v21 = (WTF::WordLock *)(v20 + 8);
  *(_OWORD *)(v20 + 24) = 0u;
  do
  {
    v22 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v23 = v22 + 1;
  }
  while (__stlxr(v23, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(v20 + 48) = v23;
  *(_QWORD *)(v20 + 52) = 0;
  *(_QWORD *)(v20 + 68) = 0;
  *(_QWORD *)(v20 + 60) = 0;
  *(_DWORD *)(v20 + 76) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *(_QWORD *)(v20 + 96) = 0;
  v24 = pthread_self();
  if (__ldaxr((unint64_t *)v21))
  {
    __clrex();
LABEL_22:
    WTF::WordLock::lockSlow(v21);
    goto LABEL_23;
  }
  if (__stxr(1uLL, (unint64_t *)v21))
    goto LABEL_22;
LABEL_23:
  *(_QWORD *)(v10 + 40) = v24;
  *(_DWORD *)(v10 + 52) = pthread_mach_thread_np(v24);
  v26 = __ldxr((unint64_t *)v21);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unint64_t *)v21))
LABEL_47:
    WTF::WordLock::unlockSlow(v21);
  stackaddr_np = *(char **)(v10 + 16);
  if (!stackaddr_np)
  {
    v41 = pthread_main_np();
    v42 = pthread_self();
    stackaddr_np = (char *)pthread_get_stackaddr_np(v42);
    if (v41)
    {
      getrlimit(3, &v55);
      if (v55.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
        rlim_cur = 0x800000;
      else
        rlim_cur = v55.rlim_cur;
    }
    else
    {
      rlim_cur = pthread_get_stacksize_np(v42);
    }
    *(_QWORD *)(v10 + 16) = stackaddr_np;
    *(_QWORD *)(v10 + 24) = &stackaddr_np[-rlim_cur];
  }
  *(_QWORD *)(v10 + 80) = stackaddr_np;
  *(_QWORD *)(v10 + 56) = v10 + 64;
  v28 = pthread_self();
  if (pthread_equal(v28, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
  {
    v29 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
    if (v29 != -1)
    {
      v55.rlim_cur = (rlim_t)&v53;
      v54 = &v55;
      std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
    }
    *(_QWORD *)(v10 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
  }
  *(_QWORD *)(StatusReg + 736) = v10;
  pthread_key_init_np();
LABEL_2:
  v11 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v11 + 6))
    return;
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(StatusReg + 736);
  if (!v13)
  {
    v30 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v30 != -1)
    {
      v55.rlim_cur = (rlim_t)&v53;
      v54 = &v55;
      std::__call_once(&WTF::initialize(void)::onceKey, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v31 = WTF::fastMalloc((WTF *)0x68);
    v13 = v31;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
    *(_OWORD *)(v31 + 80) = 0u;
    *(_QWORD *)(v31 + 96) = 0;
    *(_DWORD *)v31 = 1;
    *(_OWORD *)(v31 + 8) = 0u;
    v32 = (unint64_t *)(v31 + 8);
    *(_OWORD *)(v31 + 24) = 0u;
    do
    {
      v33 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
      v34 = v33 + 1;
    }
    while (__stlxr(v34, (unsigned int *)&WTF::ThreadLike::s_uid));
    *(_DWORD *)(v31 + 48) = v34;
    *(_QWORD *)(v31 + 52) = 0;
    *(_QWORD *)(v31 + 68) = 0;
    *(_QWORD *)(v31 + 60) = 0;
    *(_DWORD *)(v31 + 76) = 0;
    *(_QWORD *)(v31 + 88) = 0;
    *(_QWORD *)(v31 + 96) = 0;
    v35 = pthread_self();
    if (__ldaxr(v32))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, v32))
    {
LABEL_38:
      *(_QWORD *)(v13 + 40) = v35;
      *(_DWORD *)(v13 + 52) = pthread_mach_thread_np(v35);
      v37 = __ldxr(v32);
      if (v37 == 1)
      {
        if (!__stlxr(0, v32))
        {
LABEL_40:
          v38 = *(char **)(v13 + 16);
          if (!v38)
          {
            v44 = pthread_main_np();
            v45 = pthread_self();
            v38 = (char *)pthread_get_stackaddr_np(v45);
            if (v44)
            {
              getrlimit(3, &v55);
              if (v55.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                stacksize_np = 0x800000;
              else
                stacksize_np = v55.rlim_cur;
            }
            else
            {
              stacksize_np = pthread_get_stacksize_np(v45);
            }
            *(_QWORD *)(v13 + 16) = v38;
            *(_QWORD *)(v13 + 24) = &v38[-stacksize_np];
          }
          *(_QWORD *)(v13 + 80) = v38;
          *(_QWORD *)(v13 + 56) = v13 + 64;
          v39 = pthread_self();
          if (pthread_equal(v39, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
          {
            v40 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
            if (v40 != -1)
            {
              v55.rlim_cur = (rlim_t)&v53;
              v54 = &v55;
              std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
            }
            *(_QWORD *)(v13 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
          }
          *(_QWORD *)(StatusReg + 736) = v13;
          pthread_key_init_np();
          goto LABEL_4;
        }
      }
      else
      {
        __clrex();
      }
      WTF::WordLock::unlockSlow((WTF::WordLock *)v32);
      goto LABEL_40;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)v32);
    goto LABEL_38;
  }
LABEL_4:
  if (v12 == v13)
  {
    if (byte_1ECF4C348)
    {
      v47 = *(_QWORD *)(StatusReg + 736);
      if (!v47)
        v47 = WTF::Thread::initializeCurrentTLS(0);
      v48 = (const void *)*((_QWORD *)this + 11639);
      v54 = (rlimit *)&v50;
      v55.rlim_cur = (rlim_t)this;
      v49 = *(const void **)(v47 + 16);
      v52 = *(const void **)(v47 + 24);
      v53 = v48;
      v51 = v49;
      WTF::dataLog<char [27],WTF::RawPointer,char [28],WTF::RawPointer,char [20],WTF::RawPointer,char [19],WTF::RawPointer,char [3],WTF::RawPointer,char [2],char [2]>("Sanitizing stack for VM = ", (const void **)&v55, ", current stack pointer at ", (const void **)&v54, ", last stack top = ", &v53, ", in stack range (", &v52, ", ", &v51, "]", "\n");
    }
    v14 = (unint64_t *)((char *)this + 93112);
    v15 = *((_QWORD *)this + 11639);
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      v17 = v16 >= v15;
    else
      v17 = 0;
    if (!v17
      || *(_QWORD *)(v10 + 24) >= v15
      || (sanitizeStackForVMImpl((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v50),
          (v18 = *(_QWORD *)(v10 + 16)) == 0)
      || v18 < *v14
      || *(_QWORD *)(v10 + 24) >= *v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198C346C8);
    }
  }
}

uint64_t JSC::VM::scratchBufferForSize(JSC::VM *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned __int8 *v10;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (!a2)
    return 0;
  v9 = (char *)this + 93192;
  v10 = (unsigned __int8 *)this + 93189;
  if (__ldaxr((unsigned __int8 *)this + 93189))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 93189);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  if (*((_QWORD *)v9 + 2) < a2)
  {
    *((_QWORD *)v9 + 2) = 2 * a2;
    if (2 * a2 >= 0xFFFFFFFFFFFFFFF8)
    {
      __break(0xC471u);
LABEL_24:
      JUMPOUT(0x198C347FCLL);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(2 * a2 + 8));
    *v16 = 0;
    v19 = v16;
    v17 = *((unsigned int *)v9 + 3);
    if ((_DWORD)v17 == *((_DWORD *)v9 + 2))
    {
      v18 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v17 + 1, (unint64_t)&v19);
      v17 = *((unsigned int *)v9 + 3);
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v17) = *v18;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v17) = v16;
    }
    v12 = v17 + 1;
    *((_DWORD *)v9 + 3) = v12;
  }
  else
  {
    v12 = *((_DWORD *)v9 + 3);
  }
  if (!v12)
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v12 - 8);
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v13;
}

void JSC::VM::clearScratchBuffers(JSC::VM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned __int8 *v10;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;

  v9 = (char *)this + 93192;
  v10 = (unsigned __int8 *)this + 93189;
  if (__ldaxr((unsigned __int8 *)this + 93189))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 93189);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *((unsigned int *)v9 + 3);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD ***)v9;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      *v15 = 0;
      v14 -= 8;
    }
    while (v14);
  }
  *((_BYTE *)this + 56) &= ~8u;
  v16 = __ldxr(v10);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v10))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::VM::orderedHashTableDeletedValueSlow(JSC::VM *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;

  result = JSC::Symbol::create(this, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 5230) = result;
  return result;
}

unint64_t JSC::VM::orderedHashTableSentinelSlow(JSC::VM *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;

  result = JSC::OrderedHashMap::createSentinel(this, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 5231) = result;
  return result;
}

unint64_t JSC::OrderedHashMap::createSentinel(JSC::OrderedHashMap *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::OrderedHashMap *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  JSC::OrderedHashMap *v21;

  v8 = this;
  v9 = *((_QWORD *)this + 5207);
  v10 = *((_QWORD *)this + 1361);
  if (!v10)
  {
    v21 = this;
    result = JSC::CompleteSubspace::allocateSlow((uint64_t)this + 10792, this, 0x10uLL, 0, 1, a6, a7, a8);
    goto LABEL_11;
  }
  v11 = *(unsigned int *)(v10 + 60);
  result = *(_QWORD *)(v10 + 24);
  if (result < *(_QWORD *)(v10 + 32))
  {
    *(_QWORD *)(v10 + 24) = result + v11;
    goto LABEL_4;
  }
  result = *(_QWORD *)(v10 + 40);
  if ((result & 1) != 0)
  {
    v20 = v9;
    v21 = v8;
    v15 = (char *)v8 + 192;
    JSC::sanitizeStackForVM(v8, a2, a3, a4, a5, a6, a7, a8);
    v16 = (uint64_t)v15;
    v9 = v20;
    result = JSC::LocalAllocator::allocateSlowCase(v10, v16, v11, 0, 1, v17, v18, v19);
LABEL_11:
    v8 = v21;
LABEL_4:
    if (!result)
      return result;
    goto LABEL_5;
  }
  v14 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 32) = result + HIDWORD(v14);
  *(_QWORD *)(v10 + 40) = result + (int)v14;
  *(_QWORD *)(v10 + 24) = result + v11;
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)result = v9 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  if (*((_BYTE *)v8 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::VM::emptyPropertyNameEnumeratorSlow(JSC::VM *this)
{
  WTF *v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WTF *v31;
  uint64_t v32;
  JSC::VM *v33;
  __int16 v34;

  v2 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v2 = 1;
  *((_QWORD *)v2 + 1) = (char *)v2 + 24;
  v3.n128_u64[0] = 20;
  *((_QWORD *)v2 + 2) = 20;
  v31 = v2;
  v32 = 0;
  v33 = this;
  v34 = 258;
  v14 = JSC::JSPropertyNameEnumerator::create(this, 0, 0, 0, (uint64_t)&v31, v4, v5, v6, v3);
  *((_QWORD *)this + 5229) = v14;
  if (v32)
    WTF::fastFree(v32 - 16, v7, v8, v9, v10, v11, v12, v13);
  v15 = v31;
  v31 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v17 = *((unsigned int *)v15 + 5);
      if ((_DWORD)v17)
      {
        v18 = (WTF::StringImpl **)*((_QWORD *)v15 + 1);
        v19 = 8 * v17;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      v29 = *((_QWORD *)v15 + 1);
      if ((WTF *)((char *)v15 + 24) != (WTF *)v29 && v29 != 0)
      {
        *((_QWORD *)v15 + 1) = 0;
        *((_DWORD *)v15 + 4) = 0;
        WTF::fastFree(v29, v7, v8, v9, v10, v11, v12, v13);
      }
      WTF::fastFree((unint64_t)v15, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  return v14;
}

void JSC::VM::executeEntryScopeServicesOnEntry(JSC::VM *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  JSC::Watchdog *v12;
  JSC::SamplingProfiler *v13;
  unint64_t v14;

  v9 = (unint64_t *)((char *)this + 92992);
  if ((*((_BYTE *)this + 56) & 0x10) != 0)
  {
    JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)this + 11658, (uint64_t)this);
    *((_BYTE *)this + 56) &= ~0x10u;
  }
  v10 = *v9;
  v11 = atomic_load(&JSC::lastTimeZoneID);
  if (v10 != v11)
  {
    v14 = atomic_load(&JSC::lastTimeZoneID);
    *v9 = v14;
    JSC::DateCache::resetIfNecessarySlow((JSC::VM *)((char *)this + 90592), a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (JSC::Watchdog *)v9[44];
  if ((v12 & 1) == 0 && v12)
    JSC::Watchdog::enteredVM(v12);
  v13 = (JSC::SamplingProfiler *)v9[47];
  if (v13)
    JSC::SamplingProfiler::noticeVMEntry(v13, a2, a3, a4, a5, a6, a7, a8);
  if (BYTE2(dword_1ECF4C723))
    kdebug_trace();
}

void JSC::VM::executeEntryScopeServicesOnExit(JSC::VM *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  int v20;

  v9 = (char *)this + 93344;
  if (BYTE2(dword_1ECF4C723))
    kdebug_trace();
  v10 = *(_QWORD *)v9;
  if ((*(_QWORD *)v9 & 1) == 0 && v10)
    JSC::Watchdog::exitedVM(v10);
  v11 = *((_BYTE *)this + 56);
  if ((v11 & 0x20) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)v9 + 15);
    v18 = v12;
    v14 = *((_DWORD *)v9 + 32);
    v13 = *((unsigned int *)v9 + 33);
    *((_QWORD *)v9 + 15) = 0;
    *((_QWORD *)v9 + 16) = 0;
    v19 = v14;
    v20 = v13;
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      do
      {
        v16 = *v12++;
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 -= 8;
      }
      while (v15);
      v11 = *((_BYTE *)this + 56);
    }
    *((_BYTE *)this + 56) = v11 & 0xDF;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_DWORD *)this + 20);
  if ((v17 & 0x22) == 0 || (v17 & 0x20) != 0)
  {
    v9[97] = 0;
    *((_BYTE *)this + 56) &= ~0x40u;
  }
  JSC::VM::clearScratchBuffers(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSGlobalObject *JSC::VM::deprecatedVMEntryGlobalObject(JSC::VM *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11321);
  if (v2)
    return *(JSC::JSGlobalObject **)(v2 + 8);
  return a2;
}

void JSC::VM::addLoopHintExecutionCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = a2;
  v9 = (unsigned __int8 *)(a1 + 93445);
  if (__ldaxr((unsigned __int8 *)(a1 + 93445)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 93445);
LABEL_5:
  v21 = 0;
  v22 = 0;
  WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::HashTableTraits>::add<std::pair<unsigned int,std::unique_ptr<unsigned long>>>((uint64_t *)(a1 + 93448), &v25, (uint64_t)&v21, a4, a5, a6, a7, a8, (uint64_t)&v23);
  v17 = v22;
  v22 = 0;
  if (v17)
    MEMORY[0x19AEBAEF0](v17, 0x1000C4000313F17);
  if (v24)
  {
    v18 = (_QWORD *)operator new();
    *v18 = 0;
    v19 = *(_QWORD *)(v23 + 16);
    *(_QWORD *)(v23 + 16) = v18;
    if (v19)
      MEMORY[0x19AEBAEF0](v19, 0x1000C4000313F17);
  }
  ++*(_DWORD *)(v23 + 8);
  v20 = __ldxr(v9);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v9))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v11, v12, v13, v14, v15, v16);
}

uint64_t *WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::HashTableTraits>::add<std::pair<unsigned int,std::unique_ptr<unsigned long>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = v15 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
  v21 = v13 + 24 * v20;
  v22 = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v13 - 4);
        v34 = 0;
        v35 = v13 + 24 * v28;
        goto LABEL_34;
      }
      if (v22 == -1)
        v23 = (_QWORD *)v21;
      v20 = (v20 + v24) & v15;
      v21 = v13 + 24 * v20;
      v22 = *(_QWORD *)v21;
      ++v24;
    }
    while (*(_QWORD *)v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = (uint64_t)v23;
    }
  }
  *(_QWORD *)v21 = v16;
  *(_DWORD *)(v21 + 8) = *(_DWORD *)a3;
  v25 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  result = *(uint64_t **)(v21 + 16);
  *(_QWORD *)(v21 + 16) = v25;
  if (result)
    result = (uint64_t *)MEMORY[0x19AEBAEF0](result, 0x1000C4000313F17);
  v26 = *v11;
  if (*v11)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *v11;
  if (*v11)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_25;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_30:
      result = WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(v11, v33, v21, a4, a5, a6, a7, a8);
      v21 = (uint64_t)result;
      v29 = *v11;
      if (*v11)
        LODWORD(v32) = *(_DWORD *)(v29 - 4);
      else
        LODWORD(v32) = 0;
      goto LABEL_33;
    }
LABEL_25:
    v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
    goto LABEL_30;
  }
LABEL_33:
  v35 = v29 + 24 * v32;
  v34 = 1;
LABEL_34:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v34;
  return result;
}

uint64_t JSC::VM::getLoopHintExecutionCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  v10 = (unsigned __int8 *)(a1 + 93445);
  if (__ldaxr((unsigned __int8 *)(a1 + 93445)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 93445);
LABEL_5:
  v12 = *(_QWORD *)(a1 + 93448);
  v13 = *(_DWORD *)(v12 - 8);
  v14 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = (uint64_t *)(v12 + 24 * v17);
  v19 = *v18;
  if (*v18 != a2)
  {
    v20 = 1;
    while (v19)
    {
      v17 = (v17 + v20) & v13;
      v18 = (uint64_t *)(v12 + 24 * v17);
      v19 = *v18;
      ++v20;
      if (*v18 == a2)
        goto LABEL_11;
    }
    v18 = (uint64_t *)(v12 + 24 * *(unsigned int *)(v12 - 4));
  }
LABEL_11:
  v21 = v18[2];
  v22 = __ldxr(v10);
  if (v22 == 1)
  {
    if (!__stlxr(0, v10))
      return v21;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v21;
}

void JSC::VM::removeLoopHintExecutionCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  v10 = (unsigned __int8 *)(a1 + 93445);
  if (__ldaxr((unsigned __int8 *)(a1 + 93445)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 93445);
LABEL_5:
  v12 = (uint64_t *)(a1 + 93448);
  v13 = *v12;
  if (*v12)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v15 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = v13 + 24 * v18;
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 != a2)
    {
      v21 = 1;
      while (v20)
      {
        v18 = (v18 + v21) & v14;
        v19 = v13 + 24 * v18;
        v20 = *(_QWORD *)v19;
        ++v21;
        if (*(_QWORD *)v19 == a2)
          goto LABEL_13;
      }
      v19 = v13 + 24 * *(unsigned int *)(v13 - 4);
    }
  }
  else
  {
    v19 = 0;
  }
LABEL_13:
  v22 = *(_DWORD *)(v19 + 8);
  if (!v22)
  {
    __break(0xC471u);
    return;
  }
  v23 = v22 - 1;
  *(_DWORD *)(v19 + 8) = v23;
  if (!v23)
  {
    if (*v12)
    {
      v25 = *v12 + 24 * *(unsigned int *)(*v12 - 4);
      if (v25 == v19)
        goto LABEL_15;
    }
    else
    {
      if (!v19)
        goto LABEL_15;
      v25 = 0;
    }
    if (v25 != v19)
    {
      *(_QWORD *)v19 = -1;
      v26 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)(v19 + 16) = 0;
      if (v26)
        MEMORY[0x19AEBAEF0](v26, 0x1000C4000313F17);
      ++*(_DWORD *)(*v12 - 16);
      v27 = *v12;
      if (*v12)
        v28 = *(_DWORD *)(v27 - 12) - 1;
      else
        v28 = -1;
      *(_DWORD *)(v27 - 12) = v28;
      v29 = *v12;
      if (*v12)
      {
        v30 = 6 * *(_DWORD *)(v29 - 12);
        v31 = *(_DWORD *)(v29 - 4);
        if (v30 < v31 && v31 >= 9)
          WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(v12, v31 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
LABEL_15:
  v24 = __ldxr(v10);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v10))
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::VM::visitAggregate(JSC::VM *this, JSC::AbstractSlotVisitor *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;

  v4 = (char *)this + 93296;
  v5 = *((_QWORD *)this + 11662);
  v6 = *((unsigned int *)this + 23332);
  v7 = v5;
  if ((_DWORD)v6)
  {
    v24 = *((unsigned int *)this + 23330);
    v7 = v5 + v6 + v24;
    do
      v7 -= v24;
    while (v7 >= v24);
  }
  v8 = *((_QWORD *)this + 11663);
  if (v7 != v8)
  {
    do
    {
      v9 = *((_QWORD *)v4 + 2);
      if ((*(_QWORD *)(v9 + 48 * v7 + 8) & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v10 = v9 + 48 * v7;
      if ((*(_QWORD *)(v10 + 40) & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v11 = (_QWORD *)(v10 + 16);
      if ((v11[2] & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      if ((v11[1] & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      if ((*v11 & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v12 = *((unsigned int *)v4 + 6);
      v7 += v12 + 1;
      do
        v7 -= v12;
      while (v7 >= v12);
    }
    while (v8 != v7);
    v5 = *(_QWORD *)v4;
    v7 = *((_QWORD *)v4 + 1);
  }
  v13 = (_QWORD *)((char *)this + 90400);
  v14 = (_QWORD *)((char *)this + 41496);
  if (v5 > v7)
    LODWORD(v7) = v7 + *((_DWORD *)v4 + 6);
  *((_DWORD *)v4 + 8) = v7 - v5;
  v15 = -6144;
  do
  {
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)((char *)this + v15 + 54528));
    v15 += 24;
  }
  while (v15);
  v16 = -6144;
  do
  {
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)((char *)this + v16 + 60672));
    v16 += 24;
  }
  while (v16);
  v17 = 0;
  v18 = (char *)this + 44440;
  do
  {
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)&v18[v17]);
    v17 += 16;
  }
  while (v17 != 3936);
  v19 = v13[344];
  for (i = 16; i != 2000; i += 8)
  {
    if (*(_QWORD *)(v19 + i))
      (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
  }
  v21 = 0;
  v22 = v13[329];
  do
  {
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v22 + 40 + v21));
    v21 += 8;
  }
  while (v21 != 512);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v22 + 552));
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v14);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[1]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[2]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[3]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[4]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[5]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[6]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[7]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[8]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[9]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[10]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[11]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[12]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[13]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[14]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[15]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[16]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[17]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[18]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[19]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[20]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[21]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[22]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[23]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[24]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[25]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[26]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[27]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[28]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[29]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[30]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[31]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[32]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[33]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[34]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[35]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[36]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[37]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[38]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[39]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[40]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[41]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[42]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[43]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[44]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[45]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[46]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v14[2908]);
  return (*(uint64_t (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v13);
}

void JSC::VM::visitAggregate(JSC::VM *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  int v117;
  unint64_t v118;
  int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  int v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  int v131;
  unint64_t v132;
  int v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v144;
  unint64_t *v145;
  unint64_t v146;
  unsigned int v148;
  unint64_t v149;
  unsigned int v151;
  unint64_t v152;
  unsigned int v154;
  unint64_t v155;

  v10 = (char *)this + 93296;
  v11 = *((_QWORD *)this + 11662);
  v12 = *((unsigned int *)this + 23332);
  v13 = v11;
  if ((_DWORD)v12)
  {
    v136 = *((unsigned int *)this + 23330);
    v13 = v11 + v12 + v136;
    do
      v13 -= v136;
    while (v13 >= v136);
  }
  v14 = *((_QWORD *)this + 11663);
  if (v13 != v14)
  {
    while (1)
    {
      v137 = *((_QWORD *)v10 + 2);
      v138 = *(_QWORD *)(v137 + 48 * v13 + 8);
      if ((v138 & 0xFFFE000000000002) == 0 && v138 != 0)
        break;
LABEL_453:
      v141 = v137 + 48 * v13;
      v142 = *(_QWORD *)(v141 + 40);
      if ((v142 & 0xFFFE000000000002) == 0 && v142 != 0)
      {
        if ((v142 & 8) != 0)
        {
          v144 = 0;
          if ((*(_BYTE *)(v142 - 79) & 1) != 0)
            goto LABEL_459;
        }
        else
        {
          v144 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v142 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v142 & 0xFFFFFFFFFFFFC000) + v144 + 8 * ((v142 >> 10) & 0xF) + 0x28) >> (v142 >> 4)) & 1) != 0)
          {
LABEL_459:
            if (!*((_QWORD *)a2 + 21))
              goto LABEL_460;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v142, v144, a4, a5, a6, a7, a8);
      }
LABEL_460:
      v145 = (unint64_t *)(v141 + 16);
      v146 = v145[2];
      if ((v146 & 0xFFFE000000000002) == 0 && v146 != 0)
      {
        if ((v146 & 8) != 0)
        {
          v148 = 0;
          if ((*(_BYTE *)(v146 - 79) & 1) != 0)
            goto LABEL_466;
        }
        else
        {
          v148 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v146 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v146 & 0xFFFFFFFFFFFFC000) + v148 + 8 * ((v146 >> 10) & 0xF) + 0x28) >> (v146 >> 4)) & 1) != 0)
          {
LABEL_466:
            if (!*((_QWORD *)a2 + 21))
              goto LABEL_467;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v146, v148, a4, a5, a6, a7, a8);
      }
LABEL_467:
      v149 = v145[1];
      if ((v149 & 0xFFFE000000000002) == 0 && v149 != 0)
      {
        if ((v149 & 8) != 0)
        {
          v151 = 0;
          if ((*(_BYTE *)(v149 - 79) & 1) != 0)
            goto LABEL_473;
        }
        else
        {
          v151 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v149 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v149 & 0xFFFFFFFFFFFFC000) + v151 + 8 * ((v149 >> 10) & 0xF) + 0x28) >> (v149 >> 4)) & 1) != 0)
          {
LABEL_473:
            if (!*((_QWORD *)a2 + 21))
              goto LABEL_474;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v149, v151, a4, a5, a6, a7, a8);
      }
LABEL_474:
      v152 = *v145;
      if ((*v145 & 0xFFFE000000000002) != 0 || v152 == 0)
        goto LABEL_481;
      if ((v152 & 8) != 0)
      {
        v154 = 0;
        if ((*(_BYTE *)(v152 - 79) & 1) != 0)
        {
LABEL_480:
          if (!*((_QWORD *)a2 + 21))
            goto LABEL_481;
        }
      }
      else
      {
        v154 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v152 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v152 & 0xFFFFFFFFFFFFC000) + v154 + 8 * ((v152 >> 10) & 0xF) + 0x28) >> (v152 >> 4)) & 1) != 0)
          goto LABEL_480;
      }
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v152, v154, a4, a5, a6, a7, a8);
LABEL_481:
      v155 = *((unsigned int *)v10 + 6);
      v13 += v155 + 1;
      do
        v13 -= v155;
      while (v13 >= v155);
      if (v14 == v13)
      {
        v11 = *(_QWORD *)v10;
        v13 = *((_QWORD *)v10 + 1);
        goto LABEL_3;
      }
    }
    if ((v138 & 8) != 0)
    {
      v140 = 0;
      if ((*(_BYTE *)(v138 - 79) & 1) != 0)
      {
LABEL_452:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_453;
      }
    }
    else
    {
      v140 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v138 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v138 & 0xFFFFFFFFFFFFC000) + v140 + 8 * ((v138 >> 10) & 0xF) + 0x28) >> (v138 >> 4)) & 1) != 0)
        goto LABEL_452;
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v138, v140, a4, a5, a6, a7, a8);
    goto LABEL_453;
  }
LABEL_3:
  v15 = (char *)this + 90400;
  v16 = (unint64_t *)((char *)this + 41496);
  if (v11 > v13)
    LODWORD(v13) = v13 + *((_DWORD *)v10 + 6);
  *((_DWORD *)v10 + 8) = v13 - v11;
  v17 = (_QWORD *)((char *)a2 + 168);
  v18 = -6144;
  do
  {
    v19 = *(_QWORD *)((char *)this + v18 + 54528);
    if (!v19)
      goto LABEL_12;
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v20 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v20, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
      {
LABEL_11:
        if (!*v17)
          goto LABEL_12;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v19, 0, a4, a5, a6, a7, a8);
LABEL_12:
    v18 += 24;
  }
  while (v18);
  v21 = -6144;
  do
  {
    v22 = *(_QWORD *)((char *)this + v21 + 60672);
    if (!v22)
      goto LABEL_21;
    if ((v22 & 8) != 0)
    {
      if ((*(_BYTE *)(v22 - 79) & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v23 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v23, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) != 0)
      {
LABEL_20:
        if (!*v17)
          goto LABEL_21;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v22, 0, a4, a5, a6, a7, a8);
LABEL_21:
    v21 += 24;
  }
  while (v21);
  v24 = 0;
  v25 = (char *)this + 44440;
  do
  {
    v26 = *(_QWORD *)&v25[v24];
    if (!v26)
      goto LABEL_30;
    if ((v26 & 8) != 0)
    {
      if ((*(_BYTE *)(v26 - 79) & 1) != 0)
        goto LABEL_29;
    }
    else
    {
      v27 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != v27)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000), v27, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFC000) + 8 * ((v26 >> 10) & 0xF) + 0x28) >> (v26 >> 4)) & 1) != 0)
      {
LABEL_29:
        if (!*v17)
          goto LABEL_30;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v26, 0, a4, a5, a6, a7, a8);
LABEL_30:
    v24 += 16;
  }
  while (v24 != 3936);
  v28 = *((_QWORD *)v15 + 344);
  for (i = 16; i != 2000; i += 8)
  {
    v30 = *(_QWORD *)(v28 + i);
    if (!v30)
      continue;
    if ((v30 & 8) != 0)
    {
      if ((*(_BYTE *)(v30 - 79) & 1) != 0)
        goto LABEL_40;
    }
    else
    {
      v31 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != v31)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000), v31, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v30 & 0xFFFFFFFFFFFFC000) + 8 * ((v30 >> 10) & 0xF) + 0x28) >> (v30 >> 4)) & 1) != 0)
      {
LABEL_40:
        if (!*v17)
          continue;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v30, 0, a4, a5, a6, a7, a8);
  }
  JSC::RegExpCache::visitAggregate(*((JSC::RegExpCache **)v15 + 329), a2, a3, a4, a5, a6, a7, a8);
  v38 = *v16;
  if (*v16)
  {
    if ((v38 & 8) != 0)
    {
      if ((*(_BYTE *)(v38 - 79) & 1) != 0)
        goto LABEL_47;
    }
    else
    {
      v39 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v38 & 0xFFFFFFFFFFFFC000 | 0x20) != v39)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v38 & 0xFFFFFFFFFFFFC000), v39, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v38 & 0xFFFFFFFFFFFFC000) + 8 * ((v38 >> 10) & 0xF) + 0x28) >> (v38 >> 4)) & 1) != 0)
      {
LABEL_47:
        if (!*v17)
          goto LABEL_48;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v38, 0, v33, v34, v35, v36, v37);
  }
LABEL_48:
  v40 = v16[1];
  if (v40)
  {
    if ((v40 & 8) != 0)
    {
      if ((*(_BYTE *)(v40 - 79) & 1) != 0)
        goto LABEL_53;
    }
    else
    {
      v41 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v40 & 0xFFFFFFFFFFFFC000 | 0x20) != v41)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v40 & 0xFFFFFFFFFFFFC000), v41, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v40 & 0xFFFFFFFFFFFFC000) + 8 * ((v40 >> 10) & 0xF) + 0x28) >> (v40 >> 4)) & 1) != 0)
      {
LABEL_53:
        if (!*v17)
          goto LABEL_54;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v40, 0, v33, v34, v35, v36, v37);
  }
LABEL_54:
  v42 = v16[2];
  if (v42)
  {
    if ((v42 & 8) != 0)
    {
      if ((*(_BYTE *)(v42 - 79) & 1) != 0)
        goto LABEL_59;
    }
    else
    {
      v43 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v42 & 0xFFFFFFFFFFFFC000 | 0x20) != v43)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v42 & 0xFFFFFFFFFFFFC000), v43, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v42 & 0xFFFFFFFFFFFFC000) + 8 * ((v42 >> 10) & 0xF) + 0x28) >> (v42 >> 4)) & 1) != 0)
      {
LABEL_59:
        if (!*v17)
          goto LABEL_60;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v42, 0, v33, v34, v35, v36, v37);
  }
LABEL_60:
  v44 = v16[3];
  if (v44)
  {
    if ((v44 & 8) != 0)
    {
      if ((*(_BYTE *)(v44 - 79) & 1) != 0)
        goto LABEL_65;
    }
    else
    {
      v45 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v44 & 0xFFFFFFFFFFFFC000 | 0x20) != v45)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v44 & 0xFFFFFFFFFFFFC000), v45, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v44 & 0xFFFFFFFFFFFFC000) + 8 * ((v44 >> 10) & 0xF) + 0x28) >> (v44 >> 4)) & 1) != 0)
      {
LABEL_65:
        if (!*v17)
          goto LABEL_66;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v44, 0, v33, v34, v35, v36, v37);
  }
LABEL_66:
  v46 = v16[4];
  if (v46)
  {
    if ((v46 & 8) != 0)
    {
      if ((*(_BYTE *)(v46 - 79) & 1) != 0)
        goto LABEL_71;
    }
    else
    {
      v47 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != v47)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v46 & 0xFFFFFFFFFFFFC000), v47, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v46 & 0xFFFFFFFFFFFFC000) + 8 * ((v46 >> 10) & 0xF) + 0x28) >> (v46 >> 4)) & 1) != 0)
      {
LABEL_71:
        if (!*v17)
          goto LABEL_72;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v46, 0, v33, v34, v35, v36, v37);
  }
LABEL_72:
  v48 = v16[5];
  if (v48)
  {
    if ((v48 & 8) != 0)
    {
      if ((*(_BYTE *)(v48 - 79) & 1) != 0)
        goto LABEL_77;
    }
    else
    {
      v49 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v48 & 0xFFFFFFFFFFFFC000 | 0x20) != v49)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v48 & 0xFFFFFFFFFFFFC000), v49, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v48 & 0xFFFFFFFFFFFFC000) + 8 * ((v48 >> 10) & 0xF) + 0x28) >> (v48 >> 4)) & 1) != 0)
      {
LABEL_77:
        if (!*v17)
          goto LABEL_78;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v48, 0, v33, v34, v35, v36, v37);
  }
LABEL_78:
  v50 = v16[6];
  if (v50)
  {
    if ((v50 & 8) != 0)
    {
      if ((*(_BYTE *)(v50 - 79) & 1) != 0)
        goto LABEL_83;
    }
    else
    {
      v51 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v50 & 0xFFFFFFFFFFFFC000 | 0x20) != v51)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v50 & 0xFFFFFFFFFFFFC000), v51, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v50 & 0xFFFFFFFFFFFFC000) + 8 * ((v50 >> 10) & 0xF) + 0x28) >> (v50 >> 4)) & 1) != 0)
      {
LABEL_83:
        if (!*v17)
          goto LABEL_84;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v50, 0, v33, v34, v35, v36, v37);
  }
LABEL_84:
  v52 = v16[7];
  if (v52)
  {
    if ((v52 & 8) != 0)
    {
      if ((*(_BYTE *)(v52 - 79) & 1) != 0)
        goto LABEL_89;
    }
    else
    {
      v53 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v52 & 0xFFFFFFFFFFFFC000 | 0x20) != v53)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v52 & 0xFFFFFFFFFFFFC000), v53, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v52 & 0xFFFFFFFFFFFFC000) + 8 * ((v52 >> 10) & 0xF) + 0x28) >> (v52 >> 4)) & 1) != 0)
      {
LABEL_89:
        if (!*v17)
          goto LABEL_90;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v52, 0, v33, v34, v35, v36, v37);
  }
LABEL_90:
  v54 = v16[8];
  if (v54)
  {
    if ((v54 & 8) != 0)
    {
      if ((*(_BYTE *)(v54 - 79) & 1) != 0)
        goto LABEL_95;
    }
    else
    {
      v55 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v54 & 0xFFFFFFFFFFFFC000 | 0x20) != v55)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v54 & 0xFFFFFFFFFFFFC000), v55, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v54 & 0xFFFFFFFFFFFFC000) + 8 * ((v54 >> 10) & 0xF) + 0x28) >> (v54 >> 4)) & 1) != 0)
      {
LABEL_95:
        if (!*v17)
          goto LABEL_96;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v54, 0, v33, v34, v35, v36, v37);
  }
LABEL_96:
  v56 = v16[9];
  if (v56)
  {
    if ((v56 & 8) != 0)
    {
      if ((*(_BYTE *)(v56 - 79) & 1) != 0)
        goto LABEL_101;
    }
    else
    {
      v57 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v56 & 0xFFFFFFFFFFFFC000 | 0x20) != v57)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v56 & 0xFFFFFFFFFFFFC000), v57, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v56 & 0xFFFFFFFFFFFFC000) + 8 * ((v56 >> 10) & 0xF) + 0x28) >> (v56 >> 4)) & 1) != 0)
      {
LABEL_101:
        if (!*v17)
          goto LABEL_102;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v56, 0, v33, v34, v35, v36, v37);
  }
LABEL_102:
  v58 = v16[10];
  if (v58)
  {
    if ((v58 & 8) != 0)
    {
      if ((*(_BYTE *)(v58 - 79) & 1) != 0)
        goto LABEL_107;
    }
    else
    {
      v59 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v58 & 0xFFFFFFFFFFFFC000 | 0x20) != v59)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v58 & 0xFFFFFFFFFFFFC000), v59, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v58 & 0xFFFFFFFFFFFFC000) + 8 * ((v58 >> 10) & 0xF) + 0x28) >> (v58 >> 4)) & 1) != 0)
      {
LABEL_107:
        if (!*v17)
          goto LABEL_108;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v58, 0, v33, v34, v35, v36, v37);
  }
LABEL_108:
  v60 = v16[11];
  if (v60)
  {
    if ((v60 & 8) != 0)
    {
      if ((*(_BYTE *)(v60 - 79) & 1) != 0)
        goto LABEL_113;
    }
    else
    {
      v61 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 0x20) != v61)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v60 & 0xFFFFFFFFFFFFC000), v61, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v60 & 0xFFFFFFFFFFFFC000) + 8 * ((v60 >> 10) & 0xF) + 0x28) >> (v60 >> 4)) & 1) != 0)
      {
LABEL_113:
        if (!*v17)
          goto LABEL_114;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v60, 0, v33, v34, v35, v36, v37);
  }
LABEL_114:
  v62 = v16[12];
  if (v62)
  {
    if ((v62 & 8) != 0)
    {
      if ((*(_BYTE *)(v62 - 79) & 1) != 0)
        goto LABEL_119;
    }
    else
    {
      v63 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v62 & 0xFFFFFFFFFFFFC000 | 0x20) != v63)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v62 & 0xFFFFFFFFFFFFC000), v63, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v62 & 0xFFFFFFFFFFFFC000) + 8 * ((v62 >> 10) & 0xF) + 0x28) >> (v62 >> 4)) & 1) != 0)
      {
LABEL_119:
        if (!*v17)
          goto LABEL_120;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v62, 0, v33, v34, v35, v36, v37);
  }
LABEL_120:
  v64 = v16[13];
  if (v64)
  {
    if ((v64 & 8) != 0)
    {
      if ((*(_BYTE *)(v64 - 79) & 1) != 0)
        goto LABEL_125;
    }
    else
    {
      v65 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v64 & 0xFFFFFFFFFFFFC000 | 0x20) != v65)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v64 & 0xFFFFFFFFFFFFC000), v65, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v64 & 0xFFFFFFFFFFFFC000) + 8 * ((v64 >> 10) & 0xF) + 0x28) >> (v64 >> 4)) & 1) != 0)
      {
LABEL_125:
        if (!*v17)
          goto LABEL_126;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v64, 0, v33, v34, v35, v36, v37);
  }
LABEL_126:
  v66 = v16[14];
  if (v66)
  {
    if ((v66 & 8) != 0)
    {
      if ((*(_BYTE *)(v66 - 79) & 1) != 0)
        goto LABEL_131;
    }
    else
    {
      v67 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v66 & 0xFFFFFFFFFFFFC000 | 0x20) != v67)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v66 & 0xFFFFFFFFFFFFC000), v67, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v66 & 0xFFFFFFFFFFFFC000) + 8 * ((v66 >> 10) & 0xF) + 0x28) >> (v66 >> 4)) & 1) != 0)
      {
LABEL_131:
        if (!*v17)
          goto LABEL_132;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v66, 0, v33, v34, v35, v36, v37);
  }
LABEL_132:
  v68 = v16[15];
  if (v68)
  {
    if ((v68 & 8) != 0)
    {
      if ((*(_BYTE *)(v68 - 79) & 1) != 0)
        goto LABEL_137;
    }
    else
    {
      v69 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v68 & 0xFFFFFFFFFFFFC000 | 0x20) != v69)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v68 & 0xFFFFFFFFFFFFC000), v69, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v68 & 0xFFFFFFFFFFFFC000) + 8 * ((v68 >> 10) & 0xF) + 0x28) >> (v68 >> 4)) & 1) != 0)
      {
LABEL_137:
        if (!*v17)
          goto LABEL_138;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v68, 0, v33, v34, v35, v36, v37);
  }
LABEL_138:
  v70 = v16[16];
  if (v70)
  {
    if ((v70 & 8) != 0)
    {
      if ((*(_BYTE *)(v70 - 79) & 1) != 0)
        goto LABEL_143;
    }
    else
    {
      v71 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v70 & 0xFFFFFFFFFFFFC000 | 0x20) != v71)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v70 & 0xFFFFFFFFFFFFC000), v71, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v70 & 0xFFFFFFFFFFFFC000) + 8 * ((v70 >> 10) & 0xF) + 0x28) >> (v70 >> 4)) & 1) != 0)
      {
LABEL_143:
        if (!*v17)
          goto LABEL_144;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v70, 0, v33, v34, v35, v36, v37);
  }
LABEL_144:
  v72 = v16[17];
  if (v72)
  {
    if ((v72 & 8) != 0)
    {
      if ((*(_BYTE *)(v72 - 79) & 1) != 0)
        goto LABEL_149;
    }
    else
    {
      v73 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v72 & 0xFFFFFFFFFFFFC000 | 0x20) != v73)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v72 & 0xFFFFFFFFFFFFC000), v73, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v72 & 0xFFFFFFFFFFFFC000) + 8 * ((v72 >> 10) & 0xF) + 0x28) >> (v72 >> 4)) & 1) != 0)
      {
LABEL_149:
        if (!*v17)
          goto LABEL_150;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v72, 0, v33, v34, v35, v36, v37);
  }
LABEL_150:
  v74 = v16[18];
  if (v74)
  {
    if ((v74 & 8) != 0)
    {
      if ((*(_BYTE *)(v74 - 79) & 1) != 0)
        goto LABEL_155;
    }
    else
    {
      v75 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v74 & 0xFFFFFFFFFFFFC000 | 0x20) != v75)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v74 & 0xFFFFFFFFFFFFC000), v75, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v74 & 0xFFFFFFFFFFFFC000) + 8 * ((v74 >> 10) & 0xF) + 0x28) >> (v74 >> 4)) & 1) != 0)
      {
LABEL_155:
        if (!*v17)
          goto LABEL_156;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v74, 0, v33, v34, v35, v36, v37);
  }
LABEL_156:
  v76 = v16[19];
  if (v76)
  {
    if ((v76 & 8) != 0)
    {
      if ((*(_BYTE *)(v76 - 79) & 1) != 0)
        goto LABEL_161;
    }
    else
    {
      v77 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v76 & 0xFFFFFFFFFFFFC000 | 0x20) != v77)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v76 & 0xFFFFFFFFFFFFC000), v77, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v76 & 0xFFFFFFFFFFFFC000) + 8 * ((v76 >> 10) & 0xF) + 0x28) >> (v76 >> 4)) & 1) != 0)
      {
LABEL_161:
        if (!*v17)
          goto LABEL_162;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v76, 0, v33, v34, v35, v36, v37);
  }
LABEL_162:
  v78 = v16[20];
  if (v78)
  {
    if ((v78 & 8) != 0)
    {
      if ((*(_BYTE *)(v78 - 79) & 1) != 0)
        goto LABEL_167;
    }
    else
    {
      v79 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v78 & 0xFFFFFFFFFFFFC000 | 0x20) != v79)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v78 & 0xFFFFFFFFFFFFC000), v79, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v78 & 0xFFFFFFFFFFFFC000) + 8 * ((v78 >> 10) & 0xF) + 0x28) >> (v78 >> 4)) & 1) != 0)
      {
LABEL_167:
        if (!*v17)
          goto LABEL_168;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v78, 0, v33, v34, v35, v36, v37);
  }
LABEL_168:
  v80 = v16[21];
  if (v80)
  {
    if ((v80 & 8) != 0)
    {
      if ((*(_BYTE *)(v80 - 79) & 1) != 0)
        goto LABEL_173;
    }
    else
    {
      v81 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v80 & 0xFFFFFFFFFFFFC000 | 0x20) != v81)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v80 & 0xFFFFFFFFFFFFC000), v81, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v80 & 0xFFFFFFFFFFFFC000) + 8 * ((v80 >> 10) & 0xF) + 0x28) >> (v80 >> 4)) & 1) != 0)
      {
LABEL_173:
        if (!*v17)
          goto LABEL_174;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v80, 0, v33, v34, v35, v36, v37);
  }
LABEL_174:
  v82 = v16[22];
  if (v82)
  {
    if ((v82 & 8) != 0)
    {
      if ((*(_BYTE *)(v82 - 79) & 1) != 0)
        goto LABEL_179;
    }
    else
    {
      v83 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v82 & 0xFFFFFFFFFFFFC000 | 0x20) != v83)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v82 & 0xFFFFFFFFFFFFC000), v83, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v82 & 0xFFFFFFFFFFFFC000) + 8 * ((v82 >> 10) & 0xF) + 0x28) >> (v82 >> 4)) & 1) != 0)
      {
LABEL_179:
        if (!*v17)
          goto LABEL_180;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v82, 0, v33, v34, v35, v36, v37);
  }
LABEL_180:
  v84 = v16[23];
  if (v84)
  {
    if ((v84 & 8) != 0)
    {
      if ((*(_BYTE *)(v84 - 79) & 1) != 0)
        goto LABEL_185;
    }
    else
    {
      v85 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v84 & 0xFFFFFFFFFFFFC000 | 0x20) != v85)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v84 & 0xFFFFFFFFFFFFC000), v85, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v84 & 0xFFFFFFFFFFFFC000) + 8 * ((v84 >> 10) & 0xF) + 0x28) >> (v84 >> 4)) & 1) != 0)
      {
LABEL_185:
        if (!*v17)
          goto LABEL_186;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v84, 0, v33, v34, v35, v36, v37);
  }
LABEL_186:
  v86 = v16[24];
  if (v86)
  {
    if ((v86 & 8) != 0)
    {
      if ((*(_BYTE *)(v86 - 79) & 1) != 0)
        goto LABEL_191;
    }
    else
    {
      v87 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v86 & 0xFFFFFFFFFFFFC000 | 0x20) != v87)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v86 & 0xFFFFFFFFFFFFC000), v87, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v86 & 0xFFFFFFFFFFFFC000) + 8 * ((v86 >> 10) & 0xF) + 0x28) >> (v86 >> 4)) & 1) != 0)
      {
LABEL_191:
        if (!*v17)
          goto LABEL_192;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v86, 0, v33, v34, v35, v36, v37);
  }
LABEL_192:
  v88 = v16[25];
  if (v88)
  {
    if ((v88 & 8) != 0)
    {
      if ((*(_BYTE *)(v88 - 79) & 1) != 0)
        goto LABEL_197;
    }
    else
    {
      v89 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v88 & 0xFFFFFFFFFFFFC000 | 0x20) != v89)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v88 & 0xFFFFFFFFFFFFC000), v89, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v88 & 0xFFFFFFFFFFFFC000) + 8 * ((v88 >> 10) & 0xF) + 0x28) >> (v88 >> 4)) & 1) != 0)
      {
LABEL_197:
        if (!*v17)
          goto LABEL_198;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v88, 0, v33, v34, v35, v36, v37);
  }
LABEL_198:
  v90 = v16[26];
  if (v90)
  {
    if ((v90 & 8) != 0)
    {
      if ((*(_BYTE *)(v90 - 79) & 1) != 0)
        goto LABEL_203;
    }
    else
    {
      v91 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v90 & 0xFFFFFFFFFFFFC000 | 0x20) != v91)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v90 & 0xFFFFFFFFFFFFC000), v91, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v90 & 0xFFFFFFFFFFFFC000) + 8 * ((v90 >> 10) & 0xF) + 0x28) >> (v90 >> 4)) & 1) != 0)
      {
LABEL_203:
        if (!*v17)
          goto LABEL_204;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v90, 0, v33, v34, v35, v36, v37);
  }
LABEL_204:
  v92 = v16[27];
  if (v92)
  {
    if ((v92 & 8) != 0)
    {
      if ((*(_BYTE *)(v92 - 79) & 1) != 0)
        goto LABEL_209;
    }
    else
    {
      v93 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v92 & 0xFFFFFFFFFFFFC000 | 0x20) != v93)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v92 & 0xFFFFFFFFFFFFC000), v93, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v92 & 0xFFFFFFFFFFFFC000) + 8 * ((v92 >> 10) & 0xF) + 0x28) >> (v92 >> 4)) & 1) != 0)
      {
LABEL_209:
        if (!*v17)
          goto LABEL_210;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v92, 0, v33, v34, v35, v36, v37);
  }
LABEL_210:
  v94 = v16[28];
  if (v94)
  {
    if ((v94 & 8) != 0)
    {
      if ((*(_BYTE *)(v94 - 79) & 1) != 0)
        goto LABEL_215;
    }
    else
    {
      v95 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v94 & 0xFFFFFFFFFFFFC000 | 0x20) != v95)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v94 & 0xFFFFFFFFFFFFC000), v95, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v94 & 0xFFFFFFFFFFFFC000) + 8 * ((v94 >> 10) & 0xF) + 0x28) >> (v94 >> 4)) & 1) != 0)
      {
LABEL_215:
        if (!*v17)
          goto LABEL_216;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v94, 0, v33, v34, v35, v36, v37);
  }
LABEL_216:
  v96 = v16[29];
  if (v96)
  {
    if ((v96 & 8) != 0)
    {
      if ((*(_BYTE *)(v96 - 79) & 1) != 0)
        goto LABEL_221;
    }
    else
    {
      v97 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v96 & 0xFFFFFFFFFFFFC000 | 0x20) != v97)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v96 & 0xFFFFFFFFFFFFC000), v97, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v96 & 0xFFFFFFFFFFFFC000) + 8 * ((v96 >> 10) & 0xF) + 0x28) >> (v96 >> 4)) & 1) != 0)
      {
LABEL_221:
        if (!*v17)
          goto LABEL_222;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v96, 0, v33, v34, v35, v36, v37);
  }
LABEL_222:
  v98 = v16[30];
  if (v98)
  {
    if ((v98 & 8) != 0)
    {
      if ((*(_BYTE *)(v98 - 79) & 1) != 0)
        goto LABEL_227;
    }
    else
    {
      v99 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v98 & 0xFFFFFFFFFFFFC000 | 0x20) != v99)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v98 & 0xFFFFFFFFFFFFC000), v99, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v98 & 0xFFFFFFFFFFFFC000) + 8 * ((v98 >> 10) & 0xF) + 0x28) >> (v98 >> 4)) & 1) != 0)
      {
LABEL_227:
        if (!*v17)
          goto LABEL_228;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v98, 0, v33, v34, v35, v36, v37);
  }
LABEL_228:
  v100 = v16[31];
  if (v100)
  {
    if ((v100 & 8) != 0)
    {
      if ((*(_BYTE *)(v100 - 79) & 1) != 0)
        goto LABEL_233;
    }
    else
    {
      v101 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 0x20) != v101)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v100 & 0xFFFFFFFFFFFFC000), v101, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v100 & 0xFFFFFFFFFFFFC000) + 8 * ((v100 >> 10) & 0xF) + 0x28) >> (v100 >> 4)) & 1) != 0)
      {
LABEL_233:
        if (!*v17)
          goto LABEL_234;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v100, 0, v33, v34, v35, v36, v37);
  }
LABEL_234:
  v102 = v16[32];
  if (v102)
  {
    if ((v102 & 8) != 0)
    {
      if ((*(_BYTE *)(v102 - 79) & 1) != 0)
        goto LABEL_239;
    }
    else
    {
      v103 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v102 & 0xFFFFFFFFFFFFC000 | 0x20) != v103)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v102 & 0xFFFFFFFFFFFFC000), v103, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v102 & 0xFFFFFFFFFFFFC000) + 8 * ((v102 >> 10) & 0xF) + 0x28) >> (v102 >> 4)) & 1) != 0)
      {
LABEL_239:
        if (!*v17)
          goto LABEL_240;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v102, 0, v33, v34, v35, v36, v37);
  }
LABEL_240:
  v104 = v16[33];
  if (v104)
  {
    if ((v104 & 8) != 0)
    {
      if ((*(_BYTE *)(v104 - 79) & 1) != 0)
        goto LABEL_245;
    }
    else
    {
      v105 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v104 & 0xFFFFFFFFFFFFC000 | 0x20) != v105)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v104 & 0xFFFFFFFFFFFFC000), v105, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v104 & 0xFFFFFFFFFFFFC000) + 8 * ((v104 >> 10) & 0xF) + 0x28) >> (v104 >> 4)) & 1) != 0)
      {
LABEL_245:
        if (!*v17)
          goto LABEL_246;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v104, 0, v33, v34, v35, v36, v37);
  }
LABEL_246:
  v106 = v16[34];
  if (v106)
  {
    if ((v106 & 8) != 0)
    {
      if ((*(_BYTE *)(v106 - 79) & 1) != 0)
        goto LABEL_251;
    }
    else
    {
      v107 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 0x20) != v107)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v106 & 0xFFFFFFFFFFFFC000), v107, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v106 & 0xFFFFFFFFFFFFC000) + 8 * ((v106 >> 10) & 0xF) + 0x28) >> (v106 >> 4)) & 1) != 0)
      {
LABEL_251:
        if (!*v17)
          goto LABEL_252;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v106, 0, v33, v34, v35, v36, v37);
  }
LABEL_252:
  v108 = v16[35];
  if (v108)
  {
    if ((v108 & 8) != 0)
    {
      if ((*(_BYTE *)(v108 - 79) & 1) != 0)
        goto LABEL_257;
    }
    else
    {
      v109 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v108 & 0xFFFFFFFFFFFFC000 | 0x20) != v109)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v108 & 0xFFFFFFFFFFFFC000), v109, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v108 & 0xFFFFFFFFFFFFC000) + 8 * ((v108 >> 10) & 0xF) + 0x28) >> (v108 >> 4)) & 1) != 0)
      {
LABEL_257:
        if (!*v17)
          goto LABEL_258;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v108, 0, v33, v34, v35, v36, v37);
  }
LABEL_258:
  v110 = v16[36];
  if (v110)
  {
    if ((v110 & 8) != 0)
    {
      if ((*(_BYTE *)(v110 - 79) & 1) != 0)
        goto LABEL_263;
    }
    else
    {
      v111 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v110 & 0xFFFFFFFFFFFFC000 | 0x20) != v111)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v110 & 0xFFFFFFFFFFFFC000), v111, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v110 & 0xFFFFFFFFFFFFC000) + 8 * ((v110 >> 10) & 0xF) + 0x28) >> (v110 >> 4)) & 1) != 0)
      {
LABEL_263:
        if (!*v17)
          goto LABEL_264;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v110, 0, v33, v34, v35, v36, v37);
  }
LABEL_264:
  v112 = v16[37];
  if (v112)
  {
    if ((v112 & 8) != 0)
    {
      if ((*(_BYTE *)(v112 - 79) & 1) != 0)
        goto LABEL_269;
    }
    else
    {
      v113 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v112 & 0xFFFFFFFFFFFFC000 | 0x20) != v113)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v112 & 0xFFFFFFFFFFFFC000), v113, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v112 & 0xFFFFFFFFFFFFC000) + 8 * ((v112 >> 10) & 0xF) + 0x28) >> (v112 >> 4)) & 1) != 0)
      {
LABEL_269:
        if (!*v17)
          goto LABEL_270;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v112, 0, v33, v34, v35, v36, v37);
  }
LABEL_270:
  v114 = v16[38];
  if (v114)
  {
    if ((v114 & 8) != 0)
    {
      if ((*(_BYTE *)(v114 - 79) & 1) != 0)
        goto LABEL_275;
    }
    else
    {
      v115 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v114 & 0xFFFFFFFFFFFFC000 | 0x20) != v115)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v114 & 0xFFFFFFFFFFFFC000), v115, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v114 & 0xFFFFFFFFFFFFC000) + 8 * ((v114 >> 10) & 0xF) + 0x28) >> (v114 >> 4)) & 1) != 0)
      {
LABEL_275:
        if (!*v17)
          goto LABEL_276;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v114, 0, v33, v34, v35, v36, v37);
  }
LABEL_276:
  v116 = v16[39];
  if (v116)
  {
    if ((v116 & 8) != 0)
    {
      if ((*(_BYTE *)(v116 - 79) & 1) != 0)
        goto LABEL_281;
    }
    else
    {
      v117 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v116 & 0xFFFFFFFFFFFFC000 | 0x20) != v117)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v116 & 0xFFFFFFFFFFFFC000), v117, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v116 & 0xFFFFFFFFFFFFC000) + 8 * ((v116 >> 10) & 0xF) + 0x28) >> (v116 >> 4)) & 1) != 0)
      {
LABEL_281:
        if (!*v17)
          goto LABEL_282;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v116, 0, v33, v34, v35, v36, v37);
  }
LABEL_282:
  v118 = v16[40];
  if (v118)
  {
    if ((v118 & 8) != 0)
    {
      if ((*(_BYTE *)(v118 - 79) & 1) != 0)
        goto LABEL_287;
    }
    else
    {
      v119 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 0x20) != v119)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v118 & 0xFFFFFFFFFFFFC000), v119, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v118 & 0xFFFFFFFFFFFFC000) + 8 * ((v118 >> 10) & 0xF) + 0x28) >> (v118 >> 4)) & 1) != 0)
      {
LABEL_287:
        if (!*v17)
          goto LABEL_288;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v118, 0, v33, v34, v35, v36, v37);
  }
LABEL_288:
  v120 = v16[41];
  if (v120)
  {
    if ((v120 & 8) != 0)
    {
      if ((*(_BYTE *)(v120 - 79) & 1) != 0)
        goto LABEL_293;
    }
    else
    {
      v121 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v120 & 0xFFFFFFFFFFFFC000 | 0x20) != v121)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v120 & 0xFFFFFFFFFFFFC000), v121, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v120 & 0xFFFFFFFFFFFFC000) + 8 * ((v120 >> 10) & 0xF) + 0x28) >> (v120 >> 4)) & 1) != 0)
      {
LABEL_293:
        if (!*v17)
          goto LABEL_294;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v120, 0, v33, v34, v35, v36, v37);
  }
LABEL_294:
  v122 = v16[42];
  if (v122)
  {
    if ((v122 & 8) != 0)
    {
      if ((*(_BYTE *)(v122 - 79) & 1) != 0)
        goto LABEL_299;
    }
    else
    {
      v123 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v122 & 0xFFFFFFFFFFFFC000 | 0x20) != v123)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v122 & 0xFFFFFFFFFFFFC000), v123, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v122 & 0xFFFFFFFFFFFFC000) + 8 * ((v122 >> 10) & 0xF) + 0x28) >> (v122 >> 4)) & 1) != 0)
      {
LABEL_299:
        if (!*v17)
          goto LABEL_300;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v122, 0, v33, v34, v35, v36, v37);
  }
LABEL_300:
  v124 = v16[43];
  if (v124)
  {
    if ((v124 & 8) != 0)
    {
      if ((*(_BYTE *)(v124 - 79) & 1) != 0)
        goto LABEL_305;
    }
    else
    {
      v125 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v124 & 0xFFFFFFFFFFFFC000 | 0x20) != v125)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v124 & 0xFFFFFFFFFFFFC000), v125, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v124 & 0xFFFFFFFFFFFFC000) + 8 * ((v124 >> 10) & 0xF) + 0x28) >> (v124 >> 4)) & 1) != 0)
      {
LABEL_305:
        if (!*v17)
          goto LABEL_306;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v124, 0, v33, v34, v35, v36, v37);
  }
LABEL_306:
  v126 = v16[44];
  if (v126)
  {
    if ((v126 & 8) != 0)
    {
      if ((*(_BYTE *)(v126 - 79) & 1) != 0)
        goto LABEL_311;
    }
    else
    {
      v127 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v126 & 0xFFFFFFFFFFFFC000 | 0x20) != v127)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v126 & 0xFFFFFFFFFFFFC000), v127, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v126 & 0xFFFFFFFFFFFFC000) + 8 * ((v126 >> 10) & 0xF) + 0x28) >> (v126 >> 4)) & 1) != 0)
      {
LABEL_311:
        if (!*v17)
          goto LABEL_312;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v126, 0, v33, v34, v35, v36, v37);
  }
LABEL_312:
  v128 = v16[45];
  if (v128)
  {
    if ((v128 & 8) != 0)
    {
      if ((*(_BYTE *)(v128 - 79) & 1) != 0)
        goto LABEL_317;
    }
    else
    {
      v129 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v128 & 0xFFFFFFFFFFFFC000 | 0x20) != v129)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v128 & 0xFFFFFFFFFFFFC000), v129, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v128 & 0xFFFFFFFFFFFFC000) + 8 * ((v128 >> 10) & 0xF) + 0x28) >> (v128 >> 4)) & 1) != 0)
      {
LABEL_317:
        if (!*v17)
          goto LABEL_318;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v128, 0, v33, v34, v35, v36, v37);
  }
LABEL_318:
  v130 = v16[46];
  if (v130)
  {
    if ((v130 & 8) != 0)
    {
      if ((*(_BYTE *)(v130 - 79) & 1) != 0)
        goto LABEL_323;
    }
    else
    {
      v131 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v130 & 0xFFFFFFFFFFFFC000 | 0x20) != v131)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v130 & 0xFFFFFFFFFFFFC000), v131, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v130 & 0xFFFFFFFFFFFFC000) + 8 * ((v130 >> 10) & 0xF) + 0x28) >> (v130 >> 4)) & 1) != 0)
      {
LABEL_323:
        if (!*v17)
          goto LABEL_324;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v130, 0, v33, v34, v35, v36, v37);
  }
LABEL_324:
  v132 = v16[2908];
  if (v132)
  {
    if ((v132 & 8) != 0)
    {
      if ((*(_BYTE *)(v132 - 79) & 1) != 0)
        goto LABEL_329;
    }
    else
    {
      v133 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v132 & 0xFFFFFFFFFFFFC000 | 0x20) != v133)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v132 & 0xFFFFFFFFFFFFC000), v133, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v132 & 0xFFFFFFFFFFFFC000) + 8 * ((v132 >> 10) & 0xF) + 0x28) >> (v132 >> 4)) & 1) != 0)
      {
LABEL_329:
        if (!*v17)
          goto LABEL_330;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v132, 0, v33, v34, v35, v36, v37);
  }
LABEL_330:
  v134 = *(_QWORD *)v15;
  if (*(_QWORD *)v15)
  {
    if ((v134 & 8) != 0)
    {
      if ((*(_BYTE *)(v134 - 79) & 1) != 0)
        goto LABEL_335;
    }
    else
    {
      v135 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v134 & 0xFFFFFFFFFFFFC000 | 0x20) != v135)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v134 & 0xFFFFFFFFFFFFC000), v135, v32, v33, v34, v35, v36, v37);
      if (((*(_QWORD *)((v134 & 0xFFFFFFFFFFFFC000) + 8 * ((v134 >> 10) & 0xF) + 0x28) >> (v134 >> 4)) & 1) != 0)
      {
LABEL_335:
        if (!*v17)
          return;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v134, 0, v33, v34, v35, v36, v37);
  }
}

