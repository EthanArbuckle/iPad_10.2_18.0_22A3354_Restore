unint64_t __muloti4(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  unsigned __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *a5 = 0;
  if (!(a1 | a2 ^ 0x8000000000000000))
  {
    if (a3 <= 1)
      return a3 * a1;
    goto LABEL_13;
  }
  if (!(a3 | a4 ^ 0x8000000000000000))
  {
    if (a1 <= 1)
      return a3 * a1;
    goto LABEL_13;
  }
  v8 = a2 >> 63;
  v9 = __PAIR128__((a2 >> 63) ^ (unint64_t)a2, (a2 >> 63) ^ a1) - __PAIR128__(v8, v8);
  v10 = a4 >> 63;
  if ((__int128)(__PAIR128__((a2 >> 63) ^ (unint64_t)a2, (a2 >> 63) ^ a1) - __PAIR128__(v8, v8)) >= 2
    && (__int128)(__PAIR128__((a4 >> 63) ^ (unint64_t)a4, (a4 >> 63) ^ a3) - __PAIR128__(v10, v10)) >= 2)
  {
    if (v8 == v10)
    {
      v11 = __udivti3();
      if (__PAIR128__(v12, v11) >= v9)
        return a3 * a1;
      goto LABEL_13;
    }
    v13 = __udivti3();
    if (__PAIR128__(v14, v13) < v9)
LABEL_13:
      *a5 = 1;
  }
  return a3 * a1;
}

double *WTF::ApproximateTime::approximateWallTime(double *this)
{
  unint64_t v1;
  char v2;
  timespec *p_tp;
  timespec __tp;

  if (fabs(*this) != INFINITY)
  {
    mach_approximate_time();
    v1 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v1 != -1)
    {
      __tp.tv_sec = (__darwin_time_t)&v2;
      p_tp = &__tp;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &p_tp, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    return (double *)clock_gettime(_CLOCK_REALTIME, &__tp);
  }
  return this;
}

double WTF::ApproximateTime::approximateMonotonicTime(WTF::ApproximateTime *this)
{
  double result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  char v10;
  double **v11;
  double *v12;

  result = *(double *)this;
  if (fabs(*(double *)this) != INFINITY)
  {
    v3 = mach_approximate_time();
    v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v5 != -1)
    {
      v12 = &v9;
      v11 = &v12;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v4) = dword_1ECF4400C;
    v9 = *(double *)this
       + (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v4 * -1000000000.0);
    v6 = mach_absolute_time();
    v8 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v8 != -1)
    {
      v12 = (double *)&v10;
      v11 = &v12;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v7) = dword_1ECF4400C;
    return WTF::Seconds::operator+(&v9, (double)(v6 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v7 * 1000000000.0));
  }
  return result;
}

uint64_t WTF::ApproximateTime::dump(WTF::ApproximateTime *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Approximate(");
  WTF::PrintStream::printf(v4, "%lf", *(double *)this);
  WTF::PrintStream::printf(v4, "%s", " sec)");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::ASCIILiteral::dump(char **this, WTF::PrintStream *a2)
{
  char *v3;
  char *v4;
  WTF::PrintStream *v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;

  v3 = *this;
  v4 = this[1];
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if (v3)
  {
    v7 = (_DWORD)v4 - 1;
    if (!v4)
      v7 = 0;
    WTF::StringImpl::utf8ForCharacters(v3, v7, (uint64_t)&v10, v6);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    v10 = v8;
    v11 = 0;
  }
  WTF::printExpectedCStringHelper(v5, "StringView", &v10);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v11])(&v12, &v10);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void WTF::ASCIILiteral::createNSString(WTF::ASCIILiteral *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *cf;

  v3 = *((_QWORD *)this + 1);
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", *(_QWORD *)this, v6, 5, 0);
  *a2 = v7;
  cf = v7;
  if (v7)
    CFRetain(v7);

}

void sub_197AAA750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WTF::disableForwardingVPrintfStdErrToOSLog(WTF *this)
{
  byte_1ECF4C093 = 1;
}

void WTFReportNotImplementedYet(const char *a1, int a2, const char *a3)
{
  printf_stderr_common("NOT IMPLEMENTED YET\n");
  printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
}

void printf_stderr_common(char *a1, ...)
{
  va_list va;

  va_start(va, a1);
  vprintf_stderr_common(a1, va);
}

void WTFReportAssertionFailure(const char *a1, int a2, const char *a3, uint64_t a4)
{
  if (a4)
    printf_stderr_common("ASSERTION FAILED: %s\n");
  else
    printf_stderr_common("SHOULD NEVER BE REACHED\n");
  printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
}

void WTFReportAssertionFailureWithMessage(const char *a1, int a2, const char *a3, const char *a4, char *__s, ...)
{
  size_t v10;
  WTF *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;

  va_start(va, __s);
  v10 = strlen(__s);
  v11 = (WTF *)(v10 + 19);
  if (v10 == -19)
  {
    MEMORY[0] = *(_OWORD *)"ASSERTION FAILED: ";
    MEMORY[0x10] = 8250;
    memcpy((void *)0x12, __s, 0xFFFFFFFFFFFFFFEDLL);
    __break(0xC471u);
    goto LABEL_6;
  }
  if ((unint64_t)v11 >> 32)
  {
    __break(0xC471u);
LABEL_6:
    JUMPOUT(0x197AAA97CLL);
  }
  v12 = WTF::fastMalloc(v11);
  *(_WORD *)(v12 + 16) = 8250;
  *(_OWORD *)v12 = *(_OWORD *)"ASSERTION FAILED: ";
  memcpy((void *)(v12 + 18), __s, v10);
  *(_BYTE *)(v10 + v12 + 18) = 0;
  vprintf_stderr_common((char *)v12, va);
  WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  printf_stderr_common("\n%s\n", a4);
  printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
}

void WTFReportArgumentAssertionFailure(const char *a1, int a2, const char *a3, const char *a4, const char *a5)
{
  printf_stderr_common("ARGUMENT BAD: %s, %s\n", a4, a5);
  printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
}

uint64_t WTFReportBacktraceWithPrefix(const char *a1)
{
  void (**v2)(CrashLogPrintStream *__hidden);

  v2 = off_1E3571850;
  return WTFReportBacktraceWithPrefixAndPrintStream((uint64_t)&v2, a1);
}

uint64_t WTFReportBacktraceWithPrefixAndPrintStream(uint64_t a1, const char *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  int v7;
  _QWORD v8[3];
  __int128 v9;
  _OWORD v10[15];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9 = 0u;
  v7 = 33;
  WTFGetBacktrace((void **)&v9, &v7);
  if (v7 < 3)
  {
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v5, "%s", "%sno stacktrace available");
    WTF::PrintStream::printf(v5, "%s", a2);
  }
  else
  {
    v8[0] = v10;
    v8[1] = (v7 - 2);
    v8[2] = a2;
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v8, v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void WTFReportBacktraceWithStackDepth(int a1)
{
  WTFReportBacktraceWithPrefixAndStackDepth(&str_6, a1);
}

void WTFReportBacktraceWithPrefixAndStackDepth(const char *a1, int a2)
{
  int v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(CrashLogPrintStream *__hidden);
  int v14;
  _QWORD v15[3];

  v4 = a2 + 2;
  v14 = a2 + 2;
  if (a2 == -2)
  {
    v5 = 0;
  }
  else
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = (void **)WTF::fastMalloc((WTF *)(8 * v4));
  }
  WTFGetBacktrace(v5, &v14);
  v13 = off_1E3571850;
  if (v14 < 3)
  {
    WTF::PrintStream::printf((WTF::PrintStream *)&v13, "%s", "%sno stacktrace available");
    WTF::PrintStream::printf((WTF::PrintStream *)&v13, "%s", a1);
    v13[5]((WTF::PrintStream *)&v13);
    if (!v5)
      return;
  }
  else
  {
    v15[0] = v5 + 2;
    v15[1] = a2 & ~(a2 >> 31);
    v15[2] = a1;
    WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v15, (WTF::PrintStream *)&v13);
    v13[5]((WTF::PrintStream *)&v13);
    if (!v5)
      return;
  }
  WTF::fastFree((unint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t WTFPrintBacktraceWithPrefixAndPrintStream(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  WTF::PrintStream *v5;
  _QWORD v7[3];

  v7[0] = a2;
  v7[1] = a3 & ~(a3 >> 31);
  v7[2] = a4;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v7, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTFReportBacktrace()
{
  int v1;
  void (**v2)(CrashLogPrintStream *__hidden);
  _QWORD v3[3];
  __int128 v4;
  _OWORD v5[15];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v4 = 0u;
  memset(v5, 0, sizeof(v5));
  v1 = 33;
  WTFGetBacktrace((void **)&v4, &v1);
  if (v1 < 3)
  {
    v3[0] = off_1E3571850;
    WTF::PrintStream::printf((WTF::PrintStream *)v3, "%s", "no stacktrace available");
    return (*(uint64_t (**)(_QWORD *))(v3[0] + 40))(v3);
  }
  else
  {
    v2 = off_1E3571850;
    v3[0] = v5;
    v3[1] = (v1 - 2);
    v3[2] = &str_6;
    WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v3, (WTF::PrintStream *)&v2);
    return ((uint64_t (*)(_QWORD))v2[5])(&v2);
  }
}

uint64_t WTFPrintBacktrace(uint64_t a1, int a2)
{
  void (**v3)(CrashLogPrintStream *__hidden);
  _QWORD v4[3];

  v3 = off_1E3571850;
  v4[0] = a1;
  v4[1] = a2 & ~(a2 >> 31);
  v4[2] = &str_6;
  WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v4, (WTF::PrintStream *)&v3);
  return ((uint64_t (*)(_QWORD))v3[5])(&v3);
}

uint64_t WTFIsDebuggerAttached()
{
  size_t v1;
  int v2[2];
  int v3;
  pid_t v4;
  _BYTE v5[32];
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v2 = 0xE00000001;
  v3 = 1;
  v4 = getpid();
  v1 = 648;
  if (sysctl(v2, 4u, v5, &v1, 0, 0) == -1)
    return 0;
  else
    return (v6 >> 11) & 1;
}

void WTFReportFatalError(const char *a1, int a2, const char *a3, char *__s, ...)
{
  size_t v8;
  WTF *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, __s);
  v8 = strlen(__s);
  v9 = (WTF *)(v8 + 14);
  if (v8 == -14)
  {
    qmemcpy(0, "FATAL ERROR: ", 13);
    memcpy((void *)0xD, __s, 0xFFFFFFFFFFFFFFF2);
    __break(0xC471u);
    goto LABEL_6;
  }
  if ((unint64_t)v9 >> 32)
  {
    __break(0xC471u);
LABEL_6:
    JUMPOUT(0x197AAAFD8);
  }
  v10 = WTF::fastMalloc(v9);
  qmemcpy((void *)v10, "FATAL ERROR: ", 13);
  memcpy((void *)(v10 + 13), __s, v8);
  *(_BYTE *)(v8 + v10 + 13) = 0;
  vprintf_stderr_common((char *)v10, va);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  printf_stderr_common("\n");
  printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
}

void WTFReportError(const char *a1, int a2, const char *a3, char *__s, ...)
{
  size_t v8;
  WTF *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, __s);
  v8 = strlen(__s);
  v9 = (WTF *)(v8 + 8);
  if (v8 == -8)
  {
    MEMORY[0] = 1330795077;
    MEMORY[3] = 540693071;
    memcpy((void *)7, __s, 0xFFFFFFFFFFFFFFF8);
    __break(0xC471u);
    goto LABEL_6;
  }
  if ((unint64_t)v9 >> 32)
  {
    __break(0xC471u);
LABEL_6:
    JUMPOUT(0x197AAB0F0);
  }
  v10 = WTF::fastMalloc(v9);
  *(_DWORD *)v10 = 1330795077;
  *(_DWORD *)(v10 + 3) = 540693071;
  memcpy((void *)(v10 + 7), __s, v8);
  *(_BYTE *)(v8 + v10 + 7) = 0;
  vprintf_stderr_common((char *)v10, va);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  printf_stderr_common("\n");
  printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
}

uint64_t WTFSetLogChannelLevel(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

BOOL WTFWillLogWithLevel(_BYTE *a1, unsigned int a2)
{
  return a1[16] >= a2 && *a1 != 0;
}

void WTFLogWithLevel(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((!a2 || *(unsigned __int8 *)(a1 + 16) >= a2) && (!*(_BYTE *)(a1 + 16) || *(_BYTE *)a1))
    WTFLog((char *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8, (char)&a9);
}

void WTFLog(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  WTFLogVaList(*a1, a2, &a9);
}

void WTFLogVaList(char a1, char *__s1, char *a3)
{
  const __CFAllocator *v4;
  const __CFString *v5;
  const __CFString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  _BYTE *v20;
  int *v21;
  _BYTE *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  WTF::StringImpl **v52;
  int8x16_t *v53;
  unint64_t v54;
  int v55;
  int v56;
  va_list v57;
  const char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  WTF::StringImpl *v94;
  char __str;
  va_list v96;
  va_list arguments;
  __int128 buf;
  _QWORD v99[34];

  v99[33] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 1)
    {
      vprintf_stderr_with_trailing_newline(__s1, a3);
      return;
    }
    v96 = a3;
    arguments = a3;
    if (strstr(__s1, "%@"))
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __s1, 0x8000100u);
      v6 = CFStringCreateWithFormatAndArguments(v4, 0, v5, arguments);
      WTF::String::String(&v94, v6);
      if (v6)
        CFRelease(v6);
      if (v5)
        CFRelease(v5);
    }
    else
    {
      __str = 0;
      v15 = vsnprintf(&__str, 1uLL, __s1, arguments);
      if (v15)
      {
        if ((v15 & 0x80000000) != 0)
        {
          v94 = 0;
        }
        else
        {
          *(_QWORD *)&buf = v99;
          *((_QWORD *)&buf + 1) = 256;
          v16 = v15 + 1;
          v17 = (char *)v99;
          if (v15 >= 0x100)
          {
            if (v16 <= 0x141)
              v18 = 321;
            else
              v18 = v16;
            v17 = (char *)WTF::fastMalloc((WTF *)v18);
            DWORD2(buf) = v18;
            *(_QWORD *)&buf = v17;
          }
          HIDWORD(buf) = v16;
          vsnprintf(v17, v16, __s1, v96);
          if (!HIDWORD(buf) || (v19 = HIDWORD(buf) - 1, HIDWORD(buf) == 1))
          {
            v21 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          else
          {
            if (v19 >> 31)
            {
              __break(0xC471u);
LABEL_99:
              JUMPOUT(0x197AAB748);
            }
            v20 = (_BYTE *)buf;
            v21 = (int *)WTF::fastCompactMalloc((WTF *)(HIDWORD(buf) + 19));
            v22 = v21 + 5;
            *v21 = 2;
            v21[1] = v19;
            *((_QWORD *)v21 + 1) = v21 + 5;
            v21[4] = 4;
            if (v19 == 1)
              *v22 = *v20;
            else
              memcpy(v22, v20, v19);
          }
          v94 = (WTF::StringImpl *)v21;
          v23 = buf;
          if (v99 != (_QWORD *)buf && (_QWORD)buf)
          {
            *(_QWORD *)&buf = 0;
            DWORD2(buf) = 0;
            WTF::fastFree(v23, v7, v8, v9, v10, v11, v12, v13);
          }
        }
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v94 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      }
    }
    v24 = v94;
    if (!v94)
    {
      v28 = 1;
      goto LABEL_40;
    }
    v25 = *((_DWORD *)v94 + 1);
    if (v25)
    {
      v26 = (v25 - 1);
      v27 = *((_QWORD *)v94 + 1);
      if ((*((_BYTE *)v94 + 16) & 4) != 0)
      {
        if (*(_BYTE *)(v27 + v26) == 10)
          goto LABEL_53;
      }
      else if (*(_WORD *)(v27 + 2 * v26) == 10)
      {
        goto LABEL_53;
      }
      *(_DWORD *)v94 += 2;
      if (v25 < 0)
        goto LABEL_96;
    }
    else
    {
      *(_DWORD *)v94 += 2;
    }
    v28 = (v25 + 1);
    if (!__OFADD__(v25, 1))
    {
      if ((*((_BYTE *)v24 + 16) & 4) == 0)
      {
        v29 = 0;
        goto LABEL_41;
      }
LABEL_40:
      v29 = 1;
LABEL_41:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v28, v29, (uint64_t)v24, 10, (int **)&buf);
      v30 = (WTF::StringImpl *)buf;
      if ((_QWORD)buf)
      {
        *(_QWORD *)&buf = 0;
        v31 = v94;
        v94 = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 != 2)
          {
            *(_DWORD *)v31 -= 2;
            *(_QWORD *)&buf = 0;
            if (!v24)
              goto LABEL_53;
            goto LABEL_50;
          }
          WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)v7, v8, v9, v10, v11, v12, v13);
          WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          v40 = (WTF::StringImpl *)buf;
          *(_QWORD *)&buf = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
            {
              WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              if (!v24)
                goto LABEL_53;
              goto LABEL_50;
            }
            *(_DWORD *)v40 -= 2;
          }
        }
        if (!v24)
          goto LABEL_53;
LABEL_50:
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)v7, v8, v9, v10, v11, v12, v13);
          WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
LABEL_53:
        v49 = atomic_load(&loggingAccumulator(void)::initializeAccumulatorOnce);
        if (v49 != -1)
        {
          *(_QWORD *)&buf = &v96;
          arguments = (va_list)&buf;
          std::__call_once(&loggingAccumulator(void)::initializeAccumulatorOnce, &arguments, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<loggingAccumulator(void)::$_0 &&>>);
        }
        v50 = loggingAccumulator(void)::accumulator;
        if (__ldaxr((unsigned __int8 *)loggingAccumulator(void)::accumulator))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)loggingAccumulator(void)::accumulator))
        {
LABEL_59:
          v52 = (WTF::StringImpl **)(v50 + 8);
          if (!*(_DWORD *)(v50 + 24) && !*(_QWORD *)(v50 + 16))
          {
            v75 = v94;
            if (v94)
              *(_DWORD *)v94 += 2;
            v76 = *v52;
            *v52 = v75;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
              {
                WTF::StringImpl::~StringImpl(v76, (WTF::AtomStringImpl *)v7, v8, v9, v10, v11, v12, v13);
                WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
                v75 = v94;
              }
              else
              {
                *(_DWORD *)v76 -= 2;
              }
            }
            if (v75)
              LODWORD(v75) = *((_DWORD *)v75 + 1);
            *(_DWORD *)(v50 + 24) = (_DWORD)v75;
            v93 = __ldxr((unsigned __int8 *)v50);
            if (v93 != 1)
              goto LABEL_64;
            goto LABEL_67;
          }
          if (v94)
          {
            v53 = (int8x16_t *)*((_QWORD *)v94 + 1);
            v54 = *((unsigned int *)v94 + 1);
            if ((*((_BYTE *)v94 + 16) & 4) == 0)
            {
              WTF::StringBuilder::append((uint64_t)v52, v53, v54, v9, v10, v11, v12, v13);
              v55 = __ldxr((unsigned __int8 *)v50);
              if (v55 != 1)
              {
LABEL_64:
                __clrex();
LABEL_68:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v50, 0, v8, v9, v10, v11, v12, v13);
LABEL_69:
                WTF::String::utf8((uint64_t *)&v94, 0, v9, v10, v11, v12, v13, &arguments, v14);
                v57 = arguments;
                if (arguments)
                  v58 = arguments + 16;
                else
                  v58 = 0;
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = v58;
                  _os_log_impl(&dword_197AA9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
                }
                fputs(v58, (FILE *)*MEMORY[0x1E0C80C10]);
                if (v57)
                {
                  if (*(_DWORD *)v57 == 1)
                  {
                    WTF::fastFree((unint64_t)v57, v59, v60, v61, v62, v63, v64, v65);
                    v66 = v94;
                    v94 = 0;
                    if (!v66)
                      return;
                    goto LABEL_80;
                  }
                  --*(_DWORD *)v57;
                }
                v66 = v94;
                v94 = 0;
                if (!v66)
                  return;
LABEL_80:
                if (*(_DWORD *)v66 == 2)
                {
                  WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)v59, v60, v61, v62, v63, v64, v65);
                  WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
                }
                else
                {
                  *(_DWORD *)v66 -= 2;
                }
                return;
              }
LABEL_67:
              if (!__stlxr(0, (unsigned __int8 *)v50))
                goto LABEL_69;
              goto LABEL_68;
            }
          }
          else
          {
            v53 = 0;
            v54 = 0;
          }
          WTF::StringBuilder::append((uint64_t)v52, v53, v54, v9, v10, v11, v12, v13);
          v56 = __ldxr((unsigned __int8 *)v50);
          if (v56 != 1)
            goto LABEL_64;
          goto LABEL_67;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v50);
        goto LABEL_59;
      }
      goto LABEL_97;
    }
LABEL_96:
    *(_QWORD *)&buf = 0;
LABEL_97:
    __break(0xC471u);
    goto LABEL_99;
  }
}

void WTFLogVerbose(const char *a1, int a2, const char *a3, char *a4, char *__s1, ...)
{
  va_list va;

  va_start(va, __s1);
  if (*a4 == 1)
  {
    WTFLogVaList(*a4, __s1, va);
    printf_stderr_common("%s(%d) : %s\n", a1, a2, a3);
  }
}

void vprintf_stderr_with_trailing_newline(char *a1, char *a2)
{
  size_t v4;
  size_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = strlen(a1);
  v5 = v4;
  if (v4)
  {
    if (a1[v4 - 1] == 10)
    {
      vprintf_stderr_common(a1, a2);
      return;
    }
    v6 = v4 + 2;
    if (v4 == -2)
    {
      memcpy(0, a1, 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_12;
    }
    if (HIDWORD(v6))
    {
LABEL_13:
      __break(0xC471u);
      JUMPOUT(0x197AAB890);
    }
  }
  else
  {
    v6 = 2;
  }
  v7 = (void *)WTF::fastMalloc((WTF *)v6);
  memcpy(v7, a1, v5);
  if (v6 <= v5)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x197AAB8A8);
  }
  *((_BYTE *)v7 + v5) = 10;
  if (v6 <= v5 + 1)
    goto LABEL_13;
  *((_BYTE *)v7 + v5 + 1) = 0;
  vprintf_stderr_common((char *)v7, a2);
  WTF::fastFree((unint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
}

void WTFLogAlways(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  vprintf_stderr_with_trailing_newline(a1, &a9);
}

void WTFLogAlwaysAndCrash(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTFLogAlwaysV(a1, &a9);
  __break(0xC471u);
}

uint64_t WTFLogChannelByName(uint64_t *a1, uint64_t a2, char *__s)
{
  uint64_t v4;
  size_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  size_t v14;
  int v15;
  int v16;

  if (!a2)
    return 0;
  v4 = a2;
  if (__s)
  {
    v6 = strlen(__s);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = v6 - 1;
      while (1)
      {
        v10 = a1[v8];
        v13 = *(unsigned __int8 **)(v10 + 8);
        if (v13)
        {
          if (v7 == strlen(*(const char **)(v10 + 8))
            && WTF::asciiCaseFoldTable[*__s] == WTF::asciiCaseFoldTable[*v13])
          {
            break;
          }
        }
LABEL_13:
        if (++v8 == v4)
          return 0;
      }
      v14 = 0;
      while (v9 != v14)
      {
        v15 = WTF::asciiCaseFoldTable[__s[v14 + 1]];
        v16 = WTF::asciiCaseFoldTable[v13[++v14]];
        if (v15 != v16)
        {
          if (v14 < v7)
            goto LABEL_13;
          return v10;
        }
      }
    }
    else
    {
      while (1)
      {
        v10 = *a1;
        v12 = *(_BYTE **)(*a1 + 8);
        if (!v12 || !*v12)
          break;
        ++a1;
        if (!--v4)
          return 0;
      }
    }
  }
  else
  {
    while (1)
    {
      v10 = *a1;
      v11 = *(_BYTE **)(*a1 + 8);
      if (!v11 || !*v11)
        break;
      ++a1;
      if (!--v4)
        return 0;
    }
  }
  return v10;
}

void WTFInitializeLogChannelStatesFromString(uint64_t *a1, uint64_t a2, char *__s, double a4, double a5, float a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  double v15;
  double v16;
  float v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  int v50;
  unint64_t v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v57;
  int v59;
  BOOL v60;
  unint64_t v62;
  unint64_t v63;
  WTF *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  WTF *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  char v82;
  void *v83;
  uint64_t v84;
  char v85;
  WTF *v86;
  char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  char v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  unint64_t v115;
  BOOL v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char **v125;
  char *v126;
  unint64_t v127;
  uint64_t *v128;
  char *v129;
  int v130;
  WTF *v131;
  WTF *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  unsigned __int16 v138;
  char v139;
  char *v140;
  uint64_t v141;
  unsigned __int16 v142;
  char v143;

  if (a2)
  {
    v9 = a1;
    v10 = a2;
    do
    {
      v11 = *v9++;
      *(_QWORD *)(v11 + 32) = os_log_create(*(const char **)(v11 + 24), *(const char **)(v11 + 8));
      --v10;
    }
    while (v10);
  }
  v12 = 0x100000000;
  if (__s)
    v12 = strlen(__s) | 0x100000000;
  v140 = __s;
  v141 = v12;
  v142 = 44;
  v143 = 0;
  v13 = v12 == 0;
  v14 = WTF::StringView::find((uint64_t)&v140, 0x2Cu, 0, a4, a5, a6);
  if (v14 == -1)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      if (v14 > v18 || v143)
      {
        v20 = v14 - v18;
        v19 = v141;
        if (v18 != (_DWORD)v141 || (_DWORD)v12 != 0)
          goto LABEL_32;
        return;
      }
      v14 = WTF::StringView::find((uint64_t)&v140, v142, ++v18, v15, v16, v17);
    }
    while (v14 != -1);
  }
  v19 = v141;
  v20 = v141 - v18;
  if (v143)
    v21 = 0;
  else
    v21 = (_DWORD)v141 == v18;
  if (v21)
    v13 = 1;
  if (v18 == (_DWORD)v141 && v13)
    return;
  while (1)
  {
LABEL_32:
    if (v141 <= v18)
    {
      v24 = 0x100000000;
      v26 = &str_6;
    }
    else
    {
      LODWORD(v24) = v20;
      if (v141 - v18 > v20 || (LODWORD(v24) = v141 - v18, v18))
      {
        v24 = v24;
        v25 = v141 - (unint64_t)v18;
        if (BYTE4(v141))
        {
          if (v25 < v24)
            goto LABEL_308;
          v26 = &v140[v18];
          v24 = v24 | 0x100000000;
        }
        else
        {
          if (v25 < v24)
            goto LABEL_308;
          v26 = &v140[2 * v18];
        }
      }
      else
      {
        v26 = v140;
        v24 = v141;
      }
    }
    v136 = v26;
    v137 = v24;
    v138 = 61;
    v139 = 0;
    v27 = v24 == 0;
    v28 = WTF::StringView::find((uint64_t)&v136, 0x3Du, 0, v15, v16, v17);
    if (v28 == -1)
    {
      v34 = 0;
LABEL_49:
      v35 = v137;
      v36 = v137 - v34;
      if (v139)
        v37 = 0;
      else
        v37 = (_DWORD)v137 == v34;
      if (v37)
        v27 = 1;
      if ((_DWORD)v137 == v34 && v27)
        goto LABEL_187;
    }
    else
    {
      v34 = 0;
      while (v28 <= v34 && !v139)
      {
        v28 = WTF::StringView::find((uint64_t)&v136, v138, ++v34, v15, v16, v17);
        if (v28 == -1)
          goto LABEL_49;
      }
      v36 = v28 - v34;
      v35 = v137;
      if ((_DWORD)v137 == v34 && v27)
        goto LABEL_187;
    }
    if (v35 <= v34)
    {
LABEL_94:
      v134 = &str_6;
      v135 = 0x100000000;
      v52 = 1;
LABEL_95:
      v53 = v34 + v36;
      if (v53 < v35)
      {
        while (1)
        {
          v54 = v53++;
          v55 = WTF::StringView::find((uint64_t)&v136, v138, v53, v15, v16, v17);
          if (v55 == -1)
            break;
          if (v55 > v53 || v139 != 0)
          {
            v36 = v55 - v53;
            v53 = v54 + 1;
            v57 = v137;
            if ((_DWORD)v137 != v54 + 1 || !v27)
              goto LABEL_126;
            goto LABEL_164;
          }
        }
        v36 = v137 - 1 - v54;
        if (v139)
          v60 = 0;
        else
          v60 = (_DWORD)v137 - 1 == v54;
        if (v60)
          v27 = 1;
        v57 = v137;
        if ((_DWORD)v137 != v53 || !v27)
          goto LABEL_126;
        goto LABEL_164;
      }
      v57 = v137;
      if ((_DWORD)v137 == v53)
      {
LABEL_164:
        v85 = 1;
        goto LABEL_165;
      }
LABEL_126:
      if (v57 <= v53)
      {
LABEL_157:
        v132 = (WTF *)&str_6;
        v133 = 0x100000000;
        goto LABEL_158;
      }
      if (v57 - v53 > v36 || (v36 = v57 - v53, v53))
      {
        v62 = v36;
        v63 = v57 - v53;
        if (BYTE4(v137))
        {
          if (v63 < v62)
            goto LABEL_308;
          v64 = (WTF *)&v136[v53];
          v62 |= 0x100000000uLL;
          v65 = v62;
          if ((v62 & 0xFF00000000) != 0)
          {
LABEL_132:
            if ((_DWORD)v62)
            {
              v66 = 0;
              while (1)
              {
                v67 = *((unsigned __int8 *)v64 + v66);
                if ((v67 - 9) >= 5 && v67 != 32)
                  break;
                if (v65 == ++v66)
                  goto LABEL_157;
              }
              if ((_DWORD)v62 != 1)
              {
                v68 = (v62 - 1);
                while (v68 < v65)
                {
                  v69 = *((unsigned __int8 *)v64 + v68);
                  if ((v69 - 9) < 5 || v69 == 32)
                  {
                    if ((_DWORD)--v68)
                      continue;
                  }
                  if (!(_DWORD)v66 && (_DWORD)v68 == (_DWORD)v62 - 1)
                    goto LABEL_250;
                  goto LABEL_239;
                }
                goto LABEL_308;
              }
              if ((_DWORD)v66)
              {
                LODWORD(v68) = 0;
LABEL_239:
                v123 = (v68 - v66 + 1);
                if (v65 - v66 < v123)
                  goto LABEL_308;
                v64 = (WTF *)((char *)v64 + v66);
                v62 = v123 | 0x100000000;
              }
            }
LABEL_250:
            v132 = v64;
            v133 = v62;
            switch((_DWORD)v62)
            {
              case 4:
                if ((v62 & 0xFF00000000) != 0)
                {
                  if ((*(_BYTE *)v64 & 0xDF) != 0x49
                    || (*((_BYTE *)v64 + 1) & 0xDF) != 0x4E
                    || (*((_BYTE *)v64 + 2) & 0xDF) != 0x46
                    || (*((_BYTE *)v64 + 3) & 0xDF) != 0x4F)
                  {
                    break;
                  }
                }
                else if ((*(_WORD *)v64 & 0xFFDF) != 0x49
                       || (*((_WORD *)v64 + 1) & 0xFFDF) != 0x4E
                       || (*((_WORD *)v64 + 2) & 0xFFDF) != 0x46
                       || (*((_WORD *)v64 + 3) & 0xFFDF) != 0x4F)
                {
                  break;
                }
                v85 = 3;
                goto LABEL_165;
              case 7:
                if ((v62 & 0xFF00000000) != 0)
                {
                  if ((*(_BYTE *)v64 & 0xDF) != 0x57
                    || (*((_BYTE *)v64 + 1) & 0xDF) != 0x41
                    || (*((_BYTE *)v64 + 2) & 0xDF) != 0x52
                    || (*((_BYTE *)v64 + 3) & 0xDF) != 0x4E
                    || (*((_BYTE *)v64 + 4) & 0xDF) != 0x49
                    || (*((_BYTE *)v64 + 5) & 0xDF) != 0x4E
                    || (*((_BYTE *)v64 + 6) & 0xDF) != 0x47)
                  {
                    break;
                  }
                }
                else if ((*(_WORD *)v64 & 0xFFDF) != 0x57
                       || (*((_WORD *)v64 + 1) & 0xFFDF) != 0x41
                       || (*((_WORD *)v64 + 2) & 0xFFDF) != 0x52
                       || (*((_WORD *)v64 + 3) & 0xFFDF) != 0x4E
                       || (*((_WORD *)v64 + 4) & 0xFFDF) != 0x49
                       || (*((_WORD *)v64 + 5) & 0xFFDF) != 0x4E
                       || (*((_WORD *)v64 + 6) & 0xFFDF) != 0x47)
                {
                  break;
                }
                v85 = 2;
                goto LABEL_165;
              case 5:
                if ((v62 & 0xFF00000000) != 0)
                {
                  if ((*(_BYTE *)v64 & 0xDF) == 0x45
                    && (*((_BYTE *)v64 + 1) & 0xDF) == 0x52
                    && (*((_BYTE *)v64 + 2) & 0xDF) == 0x52
                    && (*((_BYTE *)v64 + 3) & 0xDF) == 0x4F
                    && (*((_BYTE *)v64 + 4) & 0xDF) == 0x52)
                  {
                    goto LABEL_164;
                  }
                  if ((*(_BYTE *)v64 & 0xDF) == 0x44
                    && (*((_BYTE *)v64 + 1) & 0xDF) == 0x45
                    && (*((_BYTE *)v64 + 2) & 0xDF) == 0x42
                    && (*((_BYTE *)v64 + 3) & 0xDF) == 0x55
                    && (*((_BYTE *)v64 + 4) & 0xDF) == 0x47)
                  {
                    goto LABEL_306;
                  }
                }
                else
                {
                  v130 = *(unsigned __int16 *)v64;
                  if ((v130 & 0xFFFFFFDF) == 0x45
                    && (*((_WORD *)v64 + 1) & 0xFFDF) == 0x52
                    && (*((_WORD *)v64 + 2) & 0xFFDF) == 0x52
                    && (*((_WORD *)v64 + 3) & 0xFFDF) == 0x4F
                    && (*((_WORD *)v64 + 4) & 0xFFDF) == 0x52)
                  {
                    goto LABEL_164;
                  }
                  if ((v130 & 0xFFFFFFDF) == 0x44
                    && (*((_WORD *)v64 + 1) & 0xFFDF) == 0x45
                    && (*((_WORD *)v64 + 2) & 0xFFDF) == 0x42
                    && (*((_WORD *)v64 + 3) & 0xFFDF) == 0x55
                    && (*((_WORD *)v64 + 4) & 0xFFDF) == 0x47)
                  {
LABEL_306:
                    v85 = 4;
LABEL_165:
                    WTF::StringView::utf8((uint64_t)&v134, 0, v29, v30, v31, v32, v33, &v132, *(float *)&v16);
                    v86 = v132;
                    if (v132)
                      v87 = (char *)v132 + 16;
                    else
                      v87 = 0;
                    v88 = WTFLogChannelByName(a1, a2, v87);
                    v96 = (_BYTE *)v88;
                    if (v86)
                    {
                      if (*(_DWORD *)v86 == 1)
                      {
                        WTF::fastFree((unint64_t)v86, v89, v90, v91, v92, v93, v94, v95);
                        if (!v96)
                        {
LABEL_174:
                          WTF::StringView::utf8((uint64_t)&v134, 0, v91, v92, v93, v94, v95, &v132, *(float *)&v16);
                          v104 = v132;
                          v105 = (_BYTE)v132 + 16;
                          if (!v132)
                            v105 = 0;
                          WTFLogAlways("Unknown logging channel: %s", v97, v98, v99, v100, v101, v102, v103, v105);
                          if (v104)
                          {
                            if (*(_DWORD *)v104 == 1)
                              WTF::fastFree((unint64_t)v104, v106, v107, v108, v109, v110, v111, v112);
                            else
                              --*(_DWORD *)v104;
                          }
                          goto LABEL_187;
                        }
                        goto LABEL_172;
                      }
                      --*(_DWORD *)v86;
                    }
                    if (!v88)
                      goto LABEL_174;
LABEL_172:
                    *v96 = v52;
                    v96[16] = v85;
                    goto LABEL_187;
                  }
                }
                break;
            }
LABEL_158:
            WTF::StringView::utf8((uint64_t)&v132, 0, v29, v30, v31, v32, v33, &v131, *(float *)&v16);
            v81 = v131;
            v82 = (_BYTE)v131 + 16;
            if (!v131)
              v82 = 0;
            WTFLogAlways("Unknown logging level: %s", v74, v75, v76, v77, v78, v79, v80, v82);
            if (v81)
            {
              if (*(_DWORD *)v81 == 1)
                WTF::fastFree((unint64_t)v81, v83, v84, v29, v30, v31, v32, v33);
              else
                --*(_DWORD *)v81;
            }
            goto LABEL_164;
          }
        }
        else
        {
          if (v63 < v62)
            goto LABEL_308;
          v64 = (WTF *)&v136[2 * v53];
          v65 = v62;
        }
      }
      else
      {
        v64 = (WTF *)v136;
        v62 = v137;
        v65 = v137;
        if ((v137 & 0xFF00000000) != 0)
          goto LABEL_132;
      }
      if ((_DWORD)v62)
      {
        v70 = 0;
        v71 = v64;
        while (1)
        {
          v72 = *(unsigned __int16 *)v71;
          if ((v72 - 9) >= 5 && v72 != 32)
            break;
          ++v70;
          v71 = (WTF *)((char *)v71 + 2);
          if (v65 == v70)
            goto LABEL_157;
        }
        if ((_DWORD)v62 != 1)
        {
          v73 = (v62 - 1);
          while (v73 < v65)
          {
            v113 = *((unsigned __int16 *)v64 + v73);
            if ((v113 - 9) < 5 || v113 == 32)
            {
              if ((_DWORD)--v73)
                continue;
            }
            if (!(_DWORD)v70 && (_DWORD)v73 == (_DWORD)v62 - 1)
              goto LABEL_250;
            goto LABEL_249;
          }
          goto LABEL_308;
        }
        if ((_DWORD)v70)
        {
          LODWORD(v73) = 0;
LABEL_249:
          v62 = (v73 - v70 + 1);
          v64 = v71;
          if (v65 - v70 < v62)
            goto LABEL_308;
        }
      }
      goto LABEL_250;
    }
    LODWORD(v40) = v36;
    if (v35 - v34 <= v36)
    {
      LODWORD(v40) = v35 - v34;
      if (!v34)
      {
        v42 = v136;
        v40 = v137;
        v43 = v137;
        if ((v137 & 0xFF00000000) == 0)
          goto LABEL_87;
        goto LABEL_71;
      }
    }
    v40 = v40;
    v41 = v35 - (unint64_t)v34;
    if (!BYTE4(v137))
      break;
    if (v41 < v40)
      goto LABEL_308;
    v42 = &v136[v34];
    v40 = v40 | 0x100000000;
    v43 = v40;
    if ((v40 & 0xFF00000000) == 0)
      goto LABEL_87;
LABEL_71:
    if ((_DWORD)v40)
    {
      v44 = 0;
      while (1)
      {
        v45 = v42[v44];
        if ((v45 - 9) >= 5 && v45 != 32)
          break;
        if (v43 == ++v44)
          goto LABEL_94;
      }
      if ((_DWORD)v40 != 1)
      {
        v46 = (v40 - 1);
        while (v46 < v43)
        {
          v47 = v42[v46];
          if ((v47 - 9) < 5 || v47 == 32)
          {
            if ((_DWORD)--v46)
              continue;
          }
          if (!(_DWORD)v44 && (_DWORD)v46 == (_DWORD)v40 - 1)
            goto LABEL_212;
          goto LABEL_207;
        }
        goto LABEL_308;
      }
      if ((_DWORD)v44)
      {
        LODWORD(v46) = 0;
LABEL_207:
        v118 = (v46 - v44 + 1);
        if (v43 - v44 < v118)
          goto LABEL_308;
        v42 += v44;
        v40 = v118 | 0x100000000;
      }
    }
LABEL_212:
    v134 = v42;
    v135 = v40;
    if (!(_DWORD)v40)
      goto LABEL_220;
    v119 = v40 & 0xFF00000000;
    if ((v40 & 0xFF00000000) != 0)
    {
      if (*v42 != 45)
        goto LABEL_220;
    }
    else if (*(_WORD *)v42 != 45)
    {
LABEL_220:
      v52 = 1;
      if ((_DWORD)v40 != 3)
        goto LABEL_95;
      goto LABEL_226;
    }
    if (v40 < 2)
    {
      v120 = 0x100000000;
      v42 = &str_6;
    }
    else
    {
      v120 = (v40 - 1);
      v121 = v40 - 1;
      if (v119)
      {
        if (v121 < v120)
          goto LABEL_308;
        ++v42;
        v120 |= 0x100000000uLL;
      }
      else
      {
        if (v121 < v120)
          goto LABEL_308;
        v42 += 2;
      }
    }
    v52 = 0;
    v134 = v42;
    LODWORD(v135) = v120;
    BYTE4(v135) = BYTE4(v120);
    v40 = v135;
    if ((_DWORD)v120 != 3)
      goto LABEL_95;
LABEL_226:
    if ((v40 & 0xFF00000000) != 0)
    {
      if ((*v42 & 0xDF) != 0x41 || (v42[1] & 0xDF) != 0x4C || (v42[2] & 0xDF) != 0x4C)
        goto LABEL_95;
    }
    else if ((*(_WORD *)v42 & 0xFFDF) != 0x41
           || (*((_WORD *)v42 + 1) & 0xFFDF) != 0x4C
           || (*((_WORD *)v42 + 2) & 0xFFDF) != 0x4C)
    {
      goto LABEL_95;
    }
    if (a2)
    {
      if (a2 == 1)
      {
        v122 = 0;
      }
      else
      {
        v125 = (char **)(a1 + 1);
        v124 = a2 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v126 = *v125;
          **(v125 - 1) = v52;
          *v126 = v52;
          v125 += 2;
          v124 -= 2;
        }
        while (v124);
        v122 = a2 & 0xFFFFFFFFFFFFFFFELL;
        if ((a2 & 0xFFFFFFFFFFFFFFFELL) == a2)
          goto LABEL_187;
      }
      v127 = a2 - v122;
      v128 = &a1[v122];
      do
      {
        v129 = (char *)*v128++;
        *v129 = v52;
        --v127;
      }
      while (v127);
    }
LABEL_187:
    v18 += v20;
    if (v18 >= v141)
    {
      LOBYTE(v13) = 1;
      if (v18 == v19)
      {
LABEL_31:
        if (v13)
          return;
      }
    }
    else
    {
      while (1)
      {
        v114 = v18++;
        v115 = WTF::StringView::find((uint64_t)&v140, v142, v18, v15, v16, v17);
        if (v115 == -1)
          break;
        if (v115 > v18 || v143 != 0)
        {
          v20 = v115 - v18;
          v18 = v114 + 1;
          if (v114 + 1 == v19)
            goto LABEL_31;
          goto LABEL_32;
        }
      }
      v20 = v141 - 1 - v114;
      if (v143)
        v117 = 0;
      else
        v117 = (_DWORD)v141 - 1 == v114;
      if (v117)
        LOBYTE(v13) = 1;
      if (v18 == v19)
        goto LABEL_31;
    }
  }
  if (v41 < v40)
    goto LABEL_308;
  v42 = &v136[2 * v34];
  v43 = v40;
LABEL_87:
  if (!(_DWORD)v40)
    goto LABEL_212;
  v48 = 0;
  v49 = v42;
  while (1)
  {
    v50 = *(unsigned __int16 *)v49;
    if ((v50 - 9) >= 5 && v50 != 32)
      break;
    ++v48;
    v49 += 2;
    if (v43 == v48)
      goto LABEL_94;
  }
  if ((_DWORD)v40 == 1)
  {
    if ((_DWORD)v48)
    {
      LODWORD(v51) = 0;
LABEL_211:
      v40 = (v51 - v48 + 1);
      v42 = v49;
      if (v43 - v48 < v40)
        goto LABEL_308;
    }
    goto LABEL_212;
  }
  v51 = (v40 - 1);
  while (v51 < v43)
  {
    v59 = *(unsigned __int16 *)&v42[2 * v51];
    if ((v59 - 9) < 5 || v59 == 32)
    {
      if ((_DWORD)--v51)
        continue;
    }
    if (!(_DWORD)v48 && (_DWORD)v51 == (_DWORD)v40 - 1)
      goto LABEL_212;
    goto LABEL_211;
  }
LABEL_308:
  __break(1u);
}

void WTFCrashWithInfoImpl(int a1, const char *a2, const char *a3, int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11)
{
  __break(0xC471u);
}

void WTFCrashWithInfoImpl(int a1, const char *a2, const char *a3, int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  __break(0xC471u);
}

void WTFCrashWithInfoImpl(int a1, const char *a2, const char *a3, int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  __break(0xC471u);
}

void WTFCrashWithInfoImpl(int a1, const char *a2, const char *a3)
{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

void WTF::resetAccumulatedLogs(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char **v32;
  char *v33;

  v8 = atomic_load(&loggingAccumulator(void)::initializeAccumulatorOnce);
  if (v8 != -1)
  {
    v33 = &v31;
    v32 = &v33;
    std::__call_once(&loggingAccumulator(void)::initializeAccumulatorOnce, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<loggingAccumulator(void)::$_0 &&>>);
  }
  v9 = loggingAccumulator(void)::accumulator;
  if (__ldaxr((unsigned __int8 *)loggingAccumulator(void)::accumulator))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)loggingAccumulator(void)::accumulator))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9);
LABEL_7:
  v11 = *(WTF::StringImpl **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      v12 = *(WTF::StringImpl **)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_13;
    }
    *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(v9 + 16);
  *(_QWORD *)(v9 + 16) = 0;
  if (!v12)
  {
LABEL_15:
    *(_DWORD *)(v9 + 24) = 0;
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
      goto LABEL_16;
LABEL_19:
    __clrex();
    goto LABEL_20;
  }
LABEL_13:
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  *(_DWORD *)(v9 + 24) = 0;
  v30 = __ldxr((unsigned __int8 *)v9);
  if (v30 != 1)
    goto LABEL_19;
LABEL_16:
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v9, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::getAndResetAccumulatedLogs(WTF::AtomStringImpl *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::StringImpl **a8@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  char **v53;
  char *v54;

  v10 = atomic_load(&loggingAccumulator(void)::initializeAccumulatorOnce);
  if (v10 != -1)
  {
    v54 = &v52;
    v53 = &v54;
    std::__call_once(&loggingAccumulator(void)::initializeAccumulatorOnce, &v53, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<loggingAccumulator(void)::$_0 &&>>);
  }
  v11 = loggingAccumulator(void)::accumulator;
  if (__ldaxr((unsigned __int8 *)loggingAccumulator(void)::accumulator))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)loggingAccumulator(void)::accumulator))
    goto LABEL_6;
LABEL_7:
  v14 = (WTF::StringImpl **)(v11 + 8);
  v13 = *(WTF::StringImpl **)(v11 + 8);
  if (v13)
    goto LABEL_19;
  v15 = (WTF::AtomStringImpl *)*(unsigned int *)(v11 + 24);
  if ((v15 & 0x80000000) == 0)
  {
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
    {
      if (*(_DWORD *)(v16 + 4) > v15 + (v15 >> 2))
      {
        if ((*(_BYTE *)(v16 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>(v11 + 8, v15, a2, a3, a4, a5, a6, a7);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>(v11 + 8, v15, a2, a3, a4, a5, a6, a7);
        v24 = *(WTF::StringImpl **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = *(_QWORD *)(v11 + 16);
        *(_QWORD *)(v11 + 16) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
          }
          else
          {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)(v11 + 8));
  v13 = *v14;
  if (*v14)
  {
LABEL_19:
    v33 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    *a8 = v13;
    *v14 = 0;
    if (v33)
    {
      *(_DWORD *)v13 = v33;
      v34 = *(WTF::StringImpl **)(v11 + 16);
      *(_QWORD *)(v11 + 16) = 0;
      if (!v34)
        goto LABEL_26;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v13, a1, a2, a3, a4, a5, a6, a7);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      v34 = *(WTF::StringImpl **)(v11 + 16);
      *(_QWORD *)(v11 + 16) = 0;
      if (!v34)
        goto LABEL_26;
    }
  }
  else
  {
    *a8 = 0;
    *v14 = 0;
    v34 = *(WTF::StringImpl **)(v11 + 16);
    *(_QWORD *)(v11 + 16) = 0;
    if (!v34)
      goto LABEL_26;
  }
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::~StringImpl(v34, a1, a2, a3, a4, a5, a6, a7);
    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
  }
  else
  {
    *(_DWORD *)v34 -= 2;
  }
LABEL_26:
  *(_DWORD *)(v11 + 24) = 0;
  v51 = __ldxr((unsigned __int8 *)v11);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v11, 0, a2, a3, a4, a5, a6, a7);
}

void vprintf_stderr_common(char *a1, char *a2)
{
  va_list v2;
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  _BYTE v18[256];
  char *v19;
  uint8_t buf[4];
  WTF *v21;
  uint64_t v22;

  v2 = a2;
  v22 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  if (strstr(a1, "%@"))
  {
    v4 = CFStringCreateWithCString(0, a1, 0x8000100u);
    v5 = CFStringCreateWithFormatAndArguments(0, 0, v4, v2);
    Length = CFStringGetLength(v5);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    v8 = MaximumSizeForEncoding;
    v17 = (WTF *)v18;
    v9 = v18;
    if ((unint64_t)(MaximumSizeForEncoding + 1) >= 0x101)
    {
      if ((unint64_t)(MaximumSizeForEncoding + 1) >> 32)
      {
        __break(0xC471u);
        return;
      }
      v9 = (char *)WTF::fastMalloc((WTF *)(MaximumSizeForEncoding + 1));
      v17 = (WTF *)v9;
    }
    CFStringGetCString(v5, v9, v8, 0x8000100u);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v21 = v17;
      _os_log_impl(&dword_197AA9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    fputs((const char *)v17, (FILE *)*MEMORY[0x1E0C80C10]);
    if (v18 != (_BYTE *)v17 && v17)
      WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
    if (v5)
      CFRelease(v5);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    if (!byte_1ECF4C093)
    {
      os_log_with_args();
      v2 = v19;
    }
    vfprintf((FILE *)*MEMORY[0x1E0C80C10], a1, v2);
  }
}

void CrashLogPrintStream::vprintf(CrashLogPrintStream *this, char *a2, char *a3)
{
  vprintf_stderr_common(a2, a3);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, int **a5@<X8>)
{
  int v7;
  int *v9;
  _BYTE *v10;
  int8x16_t *v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  _BYTE *v35;
  int8x16_t *v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  _WORD *v42;
  int8x16_t *v43;
  __int16 v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t *v52;
  int8x8_t *v53;
  unint64_t v54;
  int16x8_t v55;
  uint8x8_t *v56;
  uint16x8_t *v57;
  unint64_t v58;
  uint8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x8_t *v62;
  uint16x8_t *v63;
  unint64_t v64;
  uint8x8_t v65;
  _DWORD *v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;

  v7 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_14;
    if (result > 0x7FFFFFEF)
      goto LABEL_13;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v66);
    v9 = v66;
    if (!v66)
      goto LABEL_61;
    v17 = v66 + 5;
    *v66 = 2;
    v9[1] = v7;
    *((_QWORD *)v9 + 1) = v9 + 5;
    v9[4] = 0;
    if (!a3)
    {
      v20 = 0;
LABEL_60:
      v17[v20] = a4;
      goto LABEL_61;
    }
    v18 = *(int8x16_t **)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) == 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *v17 = v18->i16[0];
        else
          result = (uint64_t)memcpy(v9 + 5, v18, 2 * v19);
      }
      goto LABEL_59;
    }
    v21 = &v17[v19];
    if (v19 < 0x40)
    {
      v22 = (unint64_t)(v9 + 5);
    }
    else
    {
      v22 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      v23 = 0uLL;
      v24 = (char *)(v9 + 5);
      do
      {
        v67.val[0] = *v18;
        v25 = v18[1];
        v68.val[0] = v18[2];
        v26 = v18[3];
        v18 += 4;
        v27 = v26;
        v68.val[1] = 0uLL;
        v69.val[0] = v25;
        v67.val[1] = 0uLL;
        v28 = v24;
        vst2q_s8(v28, v67);
        v28 += 32;
        v69.val[1] = 0uLL;
        vst2q_s8(v28, v69);
        v29 = v24 + 64;
        vst2q_s8(v29, v68);
        v30 = v24 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
        v24 += 128;
      }
      while (v24 != (char *)v22);
    }
    if ((_WORD *)v22 == v21)
    {
LABEL_59:
      v20 = *(unsigned int *)(a3 + 4);
      goto LABEL_60;
    }
    v38 = (unint64_t)v9 + 2 * v19 - v22 + 18;
    if (v38 < 0xE
      || (v22 < (unint64_t)v18->u64 + (v38 >> 1) + 1
        ? (v39 = (unint64_t)v18 >= (v38 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
        : (v39 = 1),
          !v39))
    {
      v42 = (_WORD *)v22;
      v43 = v18;
      goto LABEL_54;
    }
    v40 = (v38 >> 1) + 1;
    if (v38 >= 0x3E)
    {
      v41 = v40 & 0xFFFFFFFFFFFFFFE0;
      v56 = (uint8x8_t *)&v18[1];
      v57 = (uint16x8_t *)(v22 + 32);
      v58 = v40 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v59 = *(uint8x16_t *)v56[-2].i8;
        v60 = vmovl_u8(*v56);
        v61 = vmovl_high_u8(*(uint8x16_t *)v56->i8);
        v57[-2] = vmovl_u8(*(uint8x8_t *)v59.i8);
        v57[-1] = vmovl_high_u8(v59);
        *v57 = v60;
        v57[1] = v61;
        v57 += 4;
        v56 += 4;
        v58 -= 32;
      }
      while (v58);
      if (v40 == v41)
        goto LABEL_59;
      if ((v40 & 0x18) == 0)
      {
        v43 = (int8x16_t *)((char *)v18 + v41);
        v42 = (_WORD *)(v22 + 2 * v41);
        do
        {
LABEL_54:
          v44 = v43->u8[0];
          v43 = (int8x16_t *)((char *)v43 + 1);
          *v42++ = v44;
        }
        while (v42 != v21);
        goto LABEL_59;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = (_WORD *)(v22 + 2 * (v40 & 0xFFFFFFFFFFFFFFF8));
    v43 = (int8x16_t *)((char *)v18 + (v40 & 0xFFFFFFFFFFFFFFF8));
    v62 = (uint8x8_t *)&v18->i8[v41];
    v63 = (uint16x8_t *)(v22 + 2 * v41);
    v64 = v41 - (v40 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v65 = *v62++;
      *v63++ = vmovl_u8(v65);
      v64 += 8;
    }
    while (v64);
    if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_59;
    goto LABEL_54;
  }
  if (!(_DWORD)result)
  {
LABEL_14:
    v9 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_61;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_61;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v66);
  v9 = v66;
  if (v66)
  {
    v10 = v66 + 5;
    *v66 = 2;
    v9[1] = v7;
    *((_QWORD *)v9 + 1) = v9 + 5;
    v9[4] = 4;
    if (a3)
    {
      v11 = *(int8x16_t **)(a3 + 8);
      v12 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 == 1)
            *v10 = v11->i8[0];
          else
            result = (uint64_t)memcpy(v9 + 5, v11, v12);
        }
        goto LABEL_57;
      }
      v13 = &v10[v12];
      if (v12 < 0x10)
      {
        v14 = (unint64_t)(v9 + 5);
      }
      else
      {
        v14 = (unint64_t)&v10[v12 & 0xFFFFFFF0];
        v15 = (unsigned __int128 *)(v9 + 5);
        do
        {
          v16 = (unsigned __int128)vld2q_s8(v11->i8);
          v11 += 2;
          *v15++ = v16;
        }
        while (v15 != (unsigned __int128 *)v14);
      }
      if ((_BYTE *)v14 == v13)
      {
LABEL_57:
        v10[*(unsigned int *)(a3 + 4)] = a4;
        goto LABEL_61;
      }
      v31 = (char *)v9 + v12;
      v32 = (unint64_t)v9 + v12 - v14 + 20;
      if (v32 < 8
        || (v14 < (unint64_t)&v11[2].u64[1] + 2 * (_QWORD)v31 + -2 * v14
          ? (v33 = v11 >= (int8x16_t *)(v31 + 20))
          : (v33 = 1),
            !v33))
      {
        v35 = (_BYTE *)v14;
        v36 = v11;
        goto LABEL_41;
      }
      if (v32 >= 0x20)
      {
        v34 = v32 & 0xFFFFFFFFFFFFFFE0;
        v45 = v11 + 2;
        v46 = (int8x16_t *)(v14 + 16);
        v47 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = v45[-2];
          v48 = v45[-1];
          v51 = *v45;
          v50 = v45[1];
          v45 += 4;
          v46[-1] = vuzp1q_s8(v49, v48);
          *v46 = vuzp1q_s8(v51, v50);
          v46 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v32 == v34)
          goto LABEL_57;
        if ((v32 & 0x18) == 0)
        {
          v36 = (int8x16_t *)((char *)v11 + 2 * v34);
          v35 = (_BYTE *)(v14 + v34);
          do
          {
LABEL_41:
            v37 = v36->i8[0];
            v36 = (int8x16_t *)((char *)v36 + 2);
            *v35++ = v37;
          }
          while (v35 != v13);
          goto LABEL_57;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = (_BYTE *)(v14 + (v32 & 0xFFFFFFFFFFFFFFF8));
      v36 = (int8x16_t *)((char *)v11 + 2 * (v32 & 0xFFFFFFFFFFFFFFF8));
      v52 = (int16x8_t *)((char *)v11 + 2 * v34);
      v53 = (int8x8_t *)(v14 + v34);
      v54 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v55 = *v52++;
        *v53++ = vmovn_s16(v55);
        v54 += 8;
      }
      while (v54);
      if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_57;
      goto LABEL_41;
    }
    *v10 = a4;
  }
LABEL_61:
  *a5 = v9;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<loggingAccumulator(void)::$_0 &&>>()
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 1;
  loggingAccumulator(void)::accumulator = result;
  return result;
}

void WTF::AtomString::convertToASCIILowercase(WTF::AtomStringImpl **this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::AtomStringImpl **a7@<X8>)
{
  WTF::AtomStringImpl *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  WTF::AtomStringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  char *v40;
  unint64_t v41;
  int v42;
  WTF::AtomStringImpl *v43[2];
  _QWORD v44[12];

  v44[11] = *MEMORY[0x1E0C80C00];
  v8 = *this;
  if (!*this)
  {
    *a7 = 0;
    return;
  }
  if ((*((_BYTE *)v8 + 16) & 4) != 0)
  {
    v10 = *((unsigned int *)v8 + 1);
    if (v10 <= 0x64)
    {
      if (!(_DWORD)v10)
      {
LABEL_8:
        *(_DWORD *)v8 += 2;
        *a7 = v8;
        return;
      }
      v11 = 0;
      v12 = *((_QWORD *)v8 + 1);
      while (*(unsigned __int8 *)(v12 + v11) - 65 >= 0x1A)
      {
        if (v10 == ++v11)
          goto LABEL_8;
      }
      if (!(_DWORD)v11)
        goto LABEL_30;
      v30 = 0;
      if (v11 >= 8 && (unint64_t)v43 - v12 >= 0x20)
      {
        if (v11 < 0x20)
        {
          v30 = 0;
          goto LABEL_26;
        }
        v30 = v11 & 0x7FFFFFFFFFFFFFE0;
        v31 = (__int128 *)(v12 + 16);
        v32 = v44;
        v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v34 = *v31;
          *(v32 - 1) = *(v31 - 1);
          *v32 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        if (v11 == v30)
          goto LABEL_30;
        if ((v11 & 0x18) != 0)
        {
LABEL_26:
          v35 = (uint64_t *)(v12 + v30);
          v36 = (WTF::AtomStringImpl **)((char *)v43 + v30);
          v37 = v30 - (v11 & 0xFFFFFFFFFFFFFFF8);
          v30 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v38 = *v35++;
            *v36++ = v38;
            v37 += 8;
          }
          while (v37);
          if (v11 == v30)
            goto LABEL_30;
          goto LABEL_29;
        }
      }
      do
      {
LABEL_29:
        *((_BYTE *)v43 + v30) = *(_BYTE *)(v12 + v30);
        ++v30;
      }
      while (v11 != v30);
LABEL_30:
      if (v10 > v11)
      {
        v39 = (unsigned __int8 *)(v12 + v11);
        v40 = (char *)v43 + v11;
        v41 = v10 - v11;
        do
        {
          v42 = *v39++;
          *v40++ = WTF::asciiCaseFoldTable[v42];
          --v41;
        }
        while (v41);
      }
      WTF::AtomStringImpl::add((uint64_t)v43, v10, a2, a3, a4, a5, a6, a7);
      return;
    }
  }
  WTF::StringImpl::convertToASCIILowercase(*this, (uint64_t *)v43);
  v20 = v43[0];
  if (v43[0] == v8)
  {
    v21 = *this;
    if (*this)
      *(_DWORD *)v21 += 2;
    *a7 = v21;
    v43[0] = 0;
  }
  else if ((*((_BYTE *)v43[0] + 16) & 0x10) != 0)
  {
    *(_DWORD *)v43[0] += 2;
    *a7 = v20;
    v43[0] = 0;
    v8 = v20;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase((unint64_t)v43[0], v14, v15, v16, v17, v18, v19, (WTF *)a7);
    v8 = v43[0];
    v43[0] = 0;
    if (!v8)
      return;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
}

void WTF::AtomString::convertToASCIIUppercase(WTF::AtomStringImpl **this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::AtomStringImpl **a7@<X8>)
{
  WTF::AtomStringImpl *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  WTF::AtomStringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  char v45;
  int v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int8x16_t v52;
  uint8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unint64_t v59;
  int8x8_t *v60;
  int8x8_t *v61;
  int8x8_t v62;
  int8x8_t v63;
  WTF::AtomStringImpl *v64[2];
  _QWORD v65[12];

  v65[11] = *MEMORY[0x1E0C80C00];
  v8 = *this;
  if (!*this)
  {
    *a7 = 0;
    return;
  }
  if ((*((_BYTE *)v8 + 16) & 4) != 0)
  {
    v10 = *((unsigned int *)v8 + 1);
    if (v10 <= 0x64)
    {
      if (!(_DWORD)v10)
      {
LABEL_8:
        *(_DWORD *)v8 += 2;
        *a7 = v8;
        return;
      }
      v11 = 0;
      v12 = *((_QWORD *)v8 + 1);
      v13 = *((unsigned int *)v8 + 1);
      while (*(unsigned __int8 *)(v12 + v11) - 97 >= 0x1A)
      {
        ++v11;
        --v13;
        if (v10 == v11)
          goto LABEL_8;
      }
      if ((_DWORD)v11)
      {
        v31 = 0;
        if (v11 < 8 || (unint64_t)v64 - v12 < 0x20)
          goto LABEL_34;
        if (v11 >= 0x20)
        {
          v31 = v11 & 0x7FFFFFFFFFFFFFE0;
          v32 = (__int128 *)(v12 + 16);
          v33 = v65;
          v34 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v35 = *v32;
            *(v33 - 1) = *(v32 - 1);
            *v33 = v35;
            v32 += 2;
            v33 += 2;
            v34 -= 32;
          }
          while (v34);
          if (v11 == v31)
            goto LABEL_35;
          if ((v11 & 0x18) == 0)
            goto LABEL_34;
        }
        else
        {
          v31 = 0;
        }
        v36 = (uint64_t *)(v12 + v31);
        v37 = (WTF::AtomStringImpl **)((char *)v64 + v31);
        v38 = v31 - (v11 & 0xFFFFFFFFFFFFFFF8);
        v31 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v39 = *v36++;
          *v37++ = v39;
          v38 += 8;
        }
        while (v38);
        while (v11 != v31)
        {
LABEL_34:
          *((_BYTE *)v64 + v31) = *(_BYTE *)(v12 + v31);
          ++v31;
        }
      }
LABEL_35:
      if (v10 <= v11)
      {
LABEL_44:
        WTF::AtomStringImpl::add((uint64_t)v64, v10, a2, a3, a4, a5, a6, a7);
        return;
      }
      v40 = v10 - v11;
      if (v10 - v11 < 8 || (unint64_t)v64 - v12 < 0x20)
      {
        v41 = v11;
        goto LABEL_39;
      }
      if (v40 >= 0x20)
      {
        v49 = 0;
        v48 = v40 & 0xFFFFFFFFFFFFFFE0;
        v50 = (char *)v64 + v11;
        v51 = v12 + v11;
        v52.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
        v52.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
        v53.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
        v53.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
        v54.i64[0] = 0xDFDFDFDFDFDFDFDFLL;
        v54.i64[1] = 0xDFDFDFDFDFDFDFDFLL;
        do
        {
          v55 = *(int8x16_t *)(v51 + v49);
          v56 = *(int8x16_t *)(v51 + v49 + 16);
          v57 = (int8x16_t)vcgtq_u8(v53, (uint8x16_t)vaddq_s8(v55, v52));
          v58 = (int8x16_t)vcgtq_u8(v53, (uint8x16_t)vaddq_s8(v56, v52));
          *(int8x16_t *)&v50[v49] = vandq_s8(vornq_s8(vandq_s8(v57, v54), v57), v55);
          *(int8x16_t *)&v50[v49 + 16] = vandq_s8(vornq_s8(vandq_s8(v58, v54), v58), v56);
          v49 += 32;
        }
        while (v48 != v49);
        if (v40 == v48)
          goto LABEL_44;
        if ((v40 & 0x18) == 0)
        {
          v41 = (v13 & 0xFFFFFFFFFFFFFFE0) + v11;
          goto LABEL_39;
        }
      }
      else
      {
        v48 = 0;
      }
      v41 = (v13 & 0xFFFFFFFFFFFFFFF8) + v11;
      v59 = v48 - (v40 & 0xFFFFFFFFFFFFFFF8);
      v60 = (int8x8_t *)(v12 + v48 + v11);
      v61 = (int8x8_t *)((char *)v64 + v48 + v11);
      do
      {
        v62 = *v60++;
        v63 = (int8x8_t)vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v62, (int8x8_t)0x9F9F9F9F9F9F9F9FLL));
        *v61++ = vand_s8(vorn_s8(vand_s8(v63, (int8x8_t)0xDFDFDFDFDFDFDFDFLL), v63), v62);
        v59 += 8;
      }
      while (v59);
      if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_44;
LABEL_39:
      v42 = v10 - v41;
      v43 = (char *)v64 + v41;
      v44 = (unsigned __int8 *)(v12 + v41);
      do
      {
        v46 = *v44++;
        v45 = v46;
        if ((v46 - 97) >= 0x1A)
          v47 = -1;
        else
          v47 = -33;
        *v43++ = v47 & v45;
        --v42;
      }
      while (v42);
      goto LABEL_44;
    }
  }
  WTF::StringImpl::convertToASCIIUppercase(*this, (uint64_t *)v64);
  v21 = v64[0];
  if (v64[0] == v8)
  {
    v22 = *this;
    if (*this)
      *(_DWORD *)v22 += 2;
    *a7 = v22;
    v64[0] = 0;
  }
  else if ((*((_BYTE *)v64[0] + 16) & 0x10) != 0)
  {
    *(_DWORD *)v64[0] += 2;
    *a7 = v21;
    v64[0] = 0;
    v8 = v21;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase((unint64_t)v64[0], v15, v16, v17, v18, v19, v20, (WTF *)a7);
    v8 = v64[0];
    v64[0] = 0;
    if (!v8)
      return;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
}

void WTF::AtomString::number(WTF::AtomString *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  _BYTE v13[13];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  if ((this & 0x80000000) == 0)
  {
    do
    {
      v13[v7-- + 12] = (this % 0xA) | 0x30;
      v8 = this >= 9;
      v9 = (_DWORD)this == 9;
      LODWORD(this) = this / 0xA;
    }
    while (!v9 && v8);
    v10 = -v7;
    if (v7 <= 0)
    {
      v11 = (char *)&v14 + v7;
      goto LABEL_8;
    }
LABEL_9:
    __break(1u);
  }
  v12 = -(int)this;
  do
  {
    v13[v7-- + 12] = (v12 % 0xA) | 0x30;
    v8 = v12 >= 9;
    v9 = v12 == 9;
    v12 /= 0xAu;
  }
  while (!v9 && v8);
  v13[v7 + 12] = 45;
  v11 = &v13[v7 + 12];
  v10 = 1 - v7;
  if (1 - v7 < 0)
    goto LABEL_9;
LABEL_8:
  WTF::AtomStringImpl::add((uint64_t)v11, v10, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v7;
  BOOL v8;
  _BYTE v9[13];
  uint64_t v10;

  v7 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    v9[v7-- + 12] = (this % 0xA) | 0x30;
    v8 = this > 9;
    LODWORD(this) = this / 0xA;
  }
  while (v8);
  if (v7 > 0)
    __break(1u);
  WTF::AtomStringImpl::add((uint64_t)&v10 + v7, -v7, a2, a3, a4, a5, a6, a7);
}

void WTF::AtomString::number(unint64_t this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  BOOL v8;
  _BYTE v9[25];
  uint64_t v10;

  v7 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    v9[v7-- + 24] = (this % 0xA) | 0x30;
    v8 = this > 9;
    this /= 0xAuLL;
  }
  while (v8);
  if (v7 > 0)
    __break(1u);
  WTF::AtomStringImpl::add((uint64_t)&v10 + v7, -v7, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v7;
  BOOL v8;
  _BYTE v9[25];
  uint64_t v10;

  v7 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    v9[v7-- + 24] = (this % 0xA) | 0x30;
    v8 = this > 9;
    this /= 0xAuLL;
  }
  while (v8);
  if (v7 > 0)
    __break(1u);
  WTF::AtomStringImpl::add((uint64_t)&v10 + v7, -v7, a2, a3, a4, a5, a6, a7);
}

void WTF::AtomString::number(float a1@<S0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char __dst[124];
  char __s[3];
  _BYTE v20[29];

  *(_QWORD *)&v20[21] = *MEMORY[0x1E0C80C00];
  v4 = (LODWORD(a1) >> 23);
  v5 = LODWORD(a1) ^ (v4 << 23);
  if (v4 == 255)
  {
    if ((v5 & 0x7FFFFFFF) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v6 = v20;
    }
    else
    {
      v10 = __s;
      if (v5 < 0)
      {
        __s[0] = 45;
        v10 = &__s[1];
      }
      *(_QWORD *)v10 = 0x7974696E69666E49;
      v6 = v10 + 8;
    }
  }
  else
  {
    if ((LODWORD(a1) & 0x7FFFFFFF) != 0 && v5 < 0)
    {
      __s[0] = 45;
      v7 = &__s[1];
    }
    else
    {
      v7 = __s;
      if ((LODWORD(a1) & 0x7FFFFFFF) == 0)
      {
        v6 = &__s[1];
        __s[0] = 48;
        goto LABEL_13;
      }
    }
    v8 = WTF::dragonbox::detail::to_decimal_impl<float,WTF::dragonbox::default_float_traits<float>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v5, v4);
    v6 = WTF::dragonbox::detail::to_shortest(v8, HIDWORD(v8), (uint64_t)v7, v9);
  }
LABEL_13:
  *v6 = 0;
  v11 = (int)strlen(__s);
  memcpy(__dst, __s, v11);
  __dst[v11] = 0;
  v12 = strlen(__dst);
  WTF::AtomStringImpl::add((uint64_t)__dst, v12, v13, v14, v15, v16, v17, a2);
}

void WTF::AtomString::number(double a1@<D0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char __dst[124];
  char __s[3];
  _BYTE v21[31];

  *(_QWORD *)&v21[23] = *MEMORY[0x1E0C80C00];
  v4 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  if ((_DWORD)v4 == 2047)
  {
    if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v5 = v21;
    }
    else
    {
      v11 = __s;
      if ((*(_QWORD *)&a1 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v11 = &__s[1];
      }
      *(_QWORD *)v11 = 0x7974696E69666E49;
      v5 = v11 + 8;
    }
  }
  else
  {
    v6 = *(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a1 & 0x8000000000000000) != 0 && v6)
    {
      __s[0] = 45;
      v7 = &__s[1];
    }
    else
    {
      v7 = __s;
      if (!v6)
      {
        v5 = &__s[1];
        __s[0] = 48;
        goto LABEL_13;
      }
    }
    v8 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&a1 & 0x800FFFFFFFFFFFFFLL, v4);
    v5 = WTF::dragonbox::detail::to_shortest(v8, v9, (uint64_t)v7, v10);
  }
LABEL_13:
  *v5 = 0;
  v12 = (int)strlen(__s);
  memcpy(__dst, __s, v12);
  __dst[v12] = 0;
  v13 = strlen(__dst);
  WTF::AtomStringImpl::add((uint64_t)__dst, v13, v14, v15, v16, v17, v18, a2);
}

void WTF::replaceUnpairedSurrogatesWithReplacementCharacter(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::StringBuilder *a7@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if ((v9 & 4) == 0)
    {
      v10 = *(unsigned int *)(v8 + 4);
      if ((_DWORD)v10)
      {
        v11 = *(char **)(v8 + 8);
        v12 = (unsigned __int16 *)&v11[2 * v10];
        v13 = v11;
        while (1)
        {
          v15 = *(unsigned __int16 *)v13;
          if ((v15 & 0xF800) != 0xD800)
            break;
          if ((char *)v12 - v13 == 2)
          {
            if (v15 >> 11 == 27)
              goto LABEL_22;
          }
          else
          {
            v16 = *(unsigned __int16 *)v13;
            if ((v15 & 0x400) != 0)
              goto LABEL_15;
            v17 = *((unsigned __int16 *)v13 + 1);
            a2 = (unsigned __int16)v17 & 0xFC00;
            v18 = v17 + (v15 << 10) - 56613888;
            if ((_DWORD)a2 != 56320)
              v18 = *(unsigned __int16 *)v13;
            if (v18 >> 11 == 27)
            {
LABEL_22:
              WTF::replaceUnpairedSurrogatesWithReplacementCharacterInternal((uint64_t)v33, v11, v10 | ((unint64_t)((v9 >> 2) & 1) << 32), a2, a3, a4, a5, a6);
              WTF::StringBuilder::toAtomString(a7, (uint64_t)v33, v20, v21, v22, v23, v24, v25);
              WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v33, v26, v27, v28, v29, v30, v31, v32);
              return;
            }
          }
LABEL_16:
          if ((char *)v12 - v13 == 2)
          {
            v14 = 1;
          }
          else
          {
            v19 = v15 & 0xFC00;
            v14 = 1;
            if (v19 == 55296)
            {
              if ((*((_WORD *)v13 + 1) & 0xFC00) == 0xDC00)
                v14 = 2;
              else
                v14 = 1;
            }
          }
          v13 += 2 * v14;
          if (v13 == (char *)v12)
            goto LABEL_23;
        }
        v16 = *(unsigned __int16 *)v13;
LABEL_15:
        if (v16 >> 11 == 27)
          goto LABEL_22;
        goto LABEL_16;
      }
    }
  }
LABEL_23:
  *a1 = 0;
  *(_QWORD *)a7 = v8;
}

void WTF::replaceUnpairedSurrogatesWithReplacementCharacterInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _WORD *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)a3, a3, a4, a5, a6, a7, a8);
  v17 = a3 & 0xFF00000000;
  if ((a3 & 0xFF00000000) != 0)
    v18 = &a2[a3];
  else
    v18 = &a2[2 * a3];
  if (v18 != a2)
  {
    while (1)
    {
      if (v17)
      {
        v19 = *a2;
      }
      else
      {
        v19 = *(unsigned __int16 *)a2;
        if ((v19 & 0xF800) == 0xD800 && v18 - a2 != 2 && (v19 & 0x400) == 0)
        {
          v20 = *((unsigned __int16 *)a2 + 1);
          v21 = v20 & 0xFC00;
          v22 = v20 + (v19 << 10) - 56613888;
          if (v21 == 56320)
            v19 = v22;
        }
      }
      if (v19 >> 11 == 27)
      {
        v36 = -3;
        v23 = *(_QWORD *)(a1 + 8);
        if (!v23
          || (v24 = *(unsigned int *)(a1 + 16), v24 >= *(_DWORD *)(v23 + 4))
          || *(_QWORD *)a1
          || (*(_BYTE *)(v23 + 16) & 4) != 0)
        {
          WTF::StringBuilder::append(a1, &v36, 1uLL, v12, v13, v14, v15, v16);
        }
        else
        {
          v25 = *(_QWORD *)(v23 + 8);
          *(_DWORD *)(a1 + 16) = v24 + 1;
          *(_WORD *)(v25 + 2 * v24) = -3;
        }
      }
      else
      {
        v26 = *(_DWORD *)(a1 + 16);
        if (v19 < 0x10000)
          v27 = 1;
        else
          v27 = 2;
        v28 = __CFADD__(v26, v27);
        v29 = v26 + v27;
        if (v28)
          v30 = 0xFFFFFFFFLL;
        else
          v30 = v29;
        v31 = *(_QWORD *)(a1 + 8);
        if (v31 || (v31 = *(_QWORD *)a1) != 0)
        {
          if (v19 > 0xFF || (*(_DWORD *)(v31 + 16) & 4) == 0)
          {
LABEL_34:
            v33 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v30, v11, v12, v13, v14, v15, v16);
            if (v33)
            {
              if (HIWORD(v19))
              {
                v34 = v19 & 0x3FF | 0xDC00;
                v19 = (v19 >> 10) - 10304;
                v33[1] = v34;
              }
              *v33 = v19;
            }
            goto LABEL_38;
          }
        }
        else if (v19 > 0xFF)
        {
          goto LABEL_34;
        }
        v32 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v30, v11, v12, v13, v14, v15, v16);
        if (v32)
          *v32 = v19;
      }
LABEL_38:
      if (v17)
      {
        if (++a2 == v18)
          return;
      }
      else if (v18 - a2 == 2)
      {
        a2 += 2;
        if (a2 == v18)
          return;
      }
      else
      {
        v35 = 1;
        if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
        {
          if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
            v35 = 2;
          else
            v35 = 1;
        }
        a2 += 2 * v35;
        if (a2 == v18)
          return;
      }
    }
  }
}

void WTF::StringBuilder::toAtomString(WTF::StringBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = (const WTF::StringImpl *)*(unsigned int *)(a2 + 16);
  if (!(_DWORD)v9)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *(_QWORD *)this = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if ((v9 & 0x80000000) != 0)
  {
    v11 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x197AAE004);
    }
LABEL_16:
    if ((*(_BYTE *)(v11 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v11 += 2;
      *(_QWORD *)this = v11;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v11, v9, a4, a5, a6, a7, a8, (WTF *)&v14);
      *(_QWORD *)this = v14;
    }
    return;
  }
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    v11 = *(_QWORD *)a2;
LABEL_15:
    if (!v11)
    {
      WTF::AtomStringImpl::add(*(WTF::AtomStringImpl **)(a2 + 8), 0, v9, a4, a5, a6, a7, a8, this);
      return;
    }
    goto LABEL_16;
  }
  v11 = *(_QWORD *)a2;
  if (*(_DWORD *)(v10 + 4) <= v9 + (v9 >> 2))
    goto LABEL_15;
  if (v11)
    v12 = *(_QWORD *)a2;
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    WTF::AtomStringImpl::add(v13, *(unsigned int *)(a2 + 16), a4, a5, a6, a7, a8, &v14);
  else
    WTF::AtomStringImpl::add(v13, *(unsigned int *)(a2 + 16), a4, a5, a6, a7, a8, &v14);
  *(_QWORD *)this = v14;
}

void WTF::StringBuilder::~StringBuilder(WTF::StringBuilder *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
      v10 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (!v10)
        return;
      goto LABEL_7;
    }
    *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v10)
    return;
LABEL_7:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
}

void WTF::replaceUnpairedSurrogatesWithReplacementCharacter(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if ((v9 & 4) == 0)
    {
      v10 = *(unsigned int *)(v8 + 4);
      if ((_DWORD)v10)
      {
        v11 = *(char **)(v8 + 8);
        v12 = (unsigned __int16 *)&v11[2 * v10];
        v13 = v11;
        while (1)
        {
          v15 = *(unsigned __int16 *)v13;
          if ((v15 & 0xF800) != 0xD800)
            break;
          if ((char *)v12 - v13 == 2)
          {
            if (v15 >> 11 == 27)
              goto LABEL_22;
          }
          else
          {
            v16 = *(unsigned __int16 *)v13;
            if ((v15 & 0x400) != 0)
              goto LABEL_15;
            v17 = *((unsigned __int16 *)v13 + 1);
            a2 = (unsigned __int16)v17 & 0xFC00;
            v18 = v17 + (v15 << 10) - 56613888;
            if ((_DWORD)a2 != 56320)
              v18 = *(unsigned __int16 *)v13;
            if (v18 >> 11 == 27)
            {
LABEL_22:
              WTF::replaceUnpairedSurrogatesWithReplacementCharacterInternal((uint64_t)v33, v11, v10 | ((unint64_t)((v9 >> 2) & 1) << 32), a2, a3, a4, a5, a6);
              WTF::StringBuilder::toString((WTF::StringBuilder *)v33, v20, v21, v22, v23, v24, v25, a7);
              WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v33, v26, v27, v28, v29, v30, v31, v32);
              return;
            }
          }
LABEL_16:
          if ((char *)v12 - v13 == 2)
          {
            v14 = 1;
          }
          else
          {
            v19 = v15 & 0xFC00;
            v14 = 1;
            if (v19 == 55296)
            {
              if ((*((_WORD *)v13 + 1) & 0xFC00) == 0xDC00)
                v14 = 2;
              else
                v14 = 1;
            }
          }
          v13 += 2 * v14;
          if (v13 == (char *)v12)
            goto LABEL_23;
        }
        v16 = *(unsigned __int16 *)v13;
LABEL_15:
        if (v16 >> 11 == 27)
          goto LABEL_22;
        goto LABEL_16;
      }
    }
  }
LABEL_23:
  *a1 = 0;
  *a7 = v8;
}

void WTF::StringBuilder::toString(WTF::StringBuilder *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  _DWORD *v9;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    goto LABEL_13;
  v11 = (WTF::AtomStringImpl *)*((unsigned int *)this + 4);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = *((_QWORD *)this + 1);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 4) > v11 + (v11 >> 2))
      {
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)this, v11, a2, a3, a4, a5, a6, a7);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)this, v11, a2, a3, a4, a5, a6, a7);
        v20 = *(WTF::StringImpl **)this;
        *(_QWORD *)this = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
          }
          else
          {
            *(_DWORD *)v20 -= 2;
          }
        }
      }
    }
  }
  WTF::StringBuilder::reifyString(this);
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
LABEL_13:
    *v9 += 2;
  *a8 = v9;
}

void WTF::AtomStringImpl::add(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  _QWORD v28[2];
  int v29;
  unsigned int *v30;
  char v31;

  if (!a1)
  {
    *a8 = 0;
    return;
  }
  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a8 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  v9 = -1640531527;
  v28[0] = a1;
  v28[1] = a2;
  if (a2 == 1)
    goto LABEL_7;
  v10 = 0;
  do
  {
    v11 = (*(unsigned __int16 *)(a1 + 2 * v10 + 2) << 11) ^ ((v9 + *(unsigned __int16 *)(a1 + 2 * v10)) << 16) ^ (v9 + *(unsigned __int16 *)(a1 + 2 * v10));
    v9 = v11 + (v11 >> 11);
    v12 = v10 + 3;
    v10 += 2;
  }
  while (v12 < a2);
  if ((a2 & 1) != 0)
  {
LABEL_7:
    v13 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    v9 = ((v9 + v13) ^ ((v9 + v13) << 11)) + (((v9 + v13) ^ ((v9 + v13) << 11)) >> 17);
  }
  v14 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = (v15 ^ (v15 << 10)) & 0xFFFFFF;
  if (!v16)
    v16 = 0x800000;
  v29 = v16;
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_16;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_16:
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v18)
    v18 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(*(uint64_t **)(v18 + 56), (uint64_t)v28, a3, a4, a5, a6, a7, (uint64_t)&v30);
  v25 = (_DWORD *)(16 * *v30);
  if (v31)
  {
    v26 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v26 == 1)
      goto LABEL_20;
LABEL_23:
    __clrex();
    goto LABEL_24;
  }
  *v25 += 2;
  v27 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v27 != 1)
    goto LABEL_23;
LABEL_20:
  if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    *a8 = v25;
    return;
  }
LABEL_24:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v19, v20, v21, v22, v23, v24);
  *a8 = v25;
}

{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  _QWORD v27[2];
  int v28;
  unsigned int *v29;
  char v30;

  if (!a1)
  {
    *a8 = 0;
    return;
  }
  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a8 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  v9 = -1640531527;
  v27[0] = a1;
  v27[1] = a2;
  if (a2 == 1)
    goto LABEL_7;
  v10 = 0;
  do
  {
    v11 = (*(unsigned __int8 *)(a1 + v10 + 1) << 11) ^ ((v9 + *(unsigned __int8 *)(a1 + v10)) << 16) ^ (v9 + *(unsigned __int8 *)(a1 + v10));
    v9 = v11 + (v11 >> 11);
    v12 = v10 + 3;
    v10 += 2;
  }
  while (v12 < a2);
  if ((a2 & 1) != 0)
LABEL_7:
    v9 = ((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) ^ ((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) << 11))
       + (((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) ^ ((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) << 11)) >> 17);
  v13 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v14 = (v13 ^ (4 * v13)) + ((v13 ^ (4 * v13)) >> 15);
  v15 = (v14 ^ (v14 << 10)) & 0xFFFFFF;
  if (!v15)
    v15 = 0x800000;
  v28 = v15;
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_16;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_16:
  v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v17)
    v17 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v17 + 56), (uint64_t)v27, a3, a4, a5, a6, a7, (uint64_t)&v29);
  v24 = (_DWORD *)(16 * *v29);
  if (v30)
  {
    v25 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v25 == 1)
      goto LABEL_20;
LABEL_23:
    __clrex();
    goto LABEL_24;
  }
  *v24 += 2;
  v26 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v26 != 1)
    goto LABEL_23;
LABEL_20:
  if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    *a8 = v24;
    return;
  }
LABEL_24:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v18, v19, v20, v21, v22, v23);
  *a8 = v24;
}

void WTF::AtomStringImpl::add(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int *v20;
  char v21;

  if (!*a1)
  {
    v10 = 0;
LABEL_6:
    *a7 = v10;
    return;
  }
  if (!a1[1])
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a7 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_10:
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(*(uint64_t **)(v11 + 56), (uint64_t)a1, a2, a3, a4, a5, a6, (uint64_t)&v20);
  v10 = (_DWORD *)(16 * *v20);
  if (v21)
  {
    v18 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v18 == 1)
      goto LABEL_14;
  }
  else
  {
    *v10 += 2;
    v19 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v19 == 1)
    {
LABEL_14:
      if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
        goto LABEL_6;
      goto LABEL_18;
    }
  }
  __clrex();
LABEL_18:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v12, v13, v14, v15, v16, v17);
  *a7 = v10;
}

{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int *v20;
  char v21;

  if (!*a1)
  {
    v10 = 0;
LABEL_6:
    *a7 = v10;
    return;
  }
  if (!a1[1])
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a7 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_10:
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v11 + 56), (uint64_t)a1, a2, a3, a4, a5, a6, (uint64_t)&v20);
  v10 = (_DWORD *)(16 * *v20);
  if (v21)
  {
    v18 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v18 == 1)
      goto LABEL_14;
  }
  else
  {
    *v10 += 2;
    v19 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v19 == 1)
    {
LABEL_14:
      if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
        goto LABEL_6;
      goto LABEL_18;
    }
  }
  __clrex();
LABEL_18:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v12, v13, v14, v15, v16, v17);
  *a7 = v10;
}

void WTF::AtomStringImpl::add(WTF::AtomStringImpl *this@<X0>, WTF::StringImpl *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unsigned int v10;
  BOOL v11;
  const WTF::StringImpl *v12;
  int v13;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  int v25;
  WTF::AtomStringImpl *v26;
  int v27;
  unsigned int v28;
  _QWORD v29[2];
  char v30;

  if (!this)
  {
    *a9 = 0;
    return;
  }
  if (!a3
    || (v10 = *((_DWORD *)this + 1),
        v11 = v10 >= a2,
        v12 = (const WTF::StringImpl *)(v10 - a2),
        (_DWORD)v12 == 0 || !v11))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if (v12 <= a3)
  {
    a3 = v12;
    if (!(_DWORD)a2)
    {
      if ((*((_BYTE *)this + 16) & 0x10) != 0)
      {
        *(_DWORD *)this += 2;
        *a9 = this;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase((unint64_t)this, v12, a4, a5, a6, a7, a8, (WTF *)v29);
        *a9 = v29[0];
      }
      return;
    }
  }
  v26 = this;
  v27 = (int)a2;
  v28 = a3;
  v13 = *((_DWORD *)this + 4);
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else
  {
    v15 = 1;
    if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_13;
  }
  v15 = 0;
LABEL_13:
  if ((v13 & 4) == 0)
  {
    if ((v15 & 1) != 0)
    {
      v16 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (v16)
        goto LABEL_17;
    }
    else
    {
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
      v16 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (v16)
      {
LABEL_17:
        WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator16>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>(v16[7], (unsigned int *)&v26, a4, a5, a6, a7, a8, (uint64_t)v29);
        v23 = (_DWORD *)(16 * *(unsigned int *)v29[0]);
        if (!v30)
          goto LABEL_23;
        goto LABEL_24;
      }
    }
    v16 = (uint64_t *)WTF::Thread::initializeCurrentTLS((WTF::Thread *)v16);
    goto LABEL_17;
  }
  if ((v15 & 1) != 0)
  {
    v24 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (v24)
      goto LABEL_22;
    goto LABEL_21;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
  v24 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v24)
LABEL_21:
    v24 = (uint64_t *)WTF::Thread::initializeCurrentTLS((WTF::Thread *)v24);
LABEL_22:
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator8>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>(v24[7], (unsigned int *)&v26, a4, a5, a6, a7, a8, (uint64_t)v29);
  v23 = (_DWORD *)(16 * *(unsigned int *)v29[0]);
  if (!v30)
LABEL_23:
    *v23 += 2;
LABEL_24:
  v25 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v25 == 1)
  {
    if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
    {
      *a9 = v23;
      return;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v17, v18, v19, v20, v21, v22);
  *a9 = v23;
}

void WTF::AtomStringImpl::addLiteral(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  _QWORD v27[2];
  int v28;
  unsigned int *v29;
  char v30;

  v9 = -1640531527;
  v27[0] = a1;
  v27[1] = a2;
  if (a2 >= 2)
  {
    v10 = 0;
    do
    {
      v11 = (*(unsigned __int8 *)(a1 + v10 + 1) << 11) ^ ((v9 + *(unsigned __int8 *)(a1 + v10)) << 16) ^ (v9 + *(unsigned __int8 *)(a1 + v10));
      v9 = v11 + (v11 >> 11);
      v12 = v10 + 3;
      v10 += 2;
    }
    while (v12 < a2);
  }
  if ((a2 & 1) != 0)
    v9 = ((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) ^ ((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) << 11))
       + (((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) ^ ((v9 + *(unsigned __int8 *)(a2 + a1 - 1)) << 11)) >> 17);
  v13 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v14 = (v13 ^ (4 * v13)) + ((v13 ^ (4 * v13)) >> 15);
  v15 = (v14 ^ (v14 << 10)) & 0xFFFFFF;
  if (!v15)
    v15 = 0x800000;
  v28 = v15;
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_12;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_12:
  v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v17)
    v17 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::BufferFromStaticDataTranslator<unsigned char>>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(uint64_t **)(v17 + 56), (uint64_t)v27, a3, a4, a5, a6, a7, (uint64_t)&v29);
  v24 = (_DWORD *)(16 * *v29);
  if (v30)
  {
    *a8 = v24;
    v25 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v25 == 1)
      goto LABEL_16;
LABEL_19:
    __clrex();
    goto LABEL_20;
  }
  *v24 += 2;
  *a8 = v24;
  v26 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v26 != 1)
    goto LABEL_19;
LABEL_16:
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v18, v19, v20, v21, v22, v23);
}

void WTF::AtomStringImpl::add(WTF::StringImpl *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_5:
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(0);
  WTF::addStatic(&v18, *(uint64_t **)(v10 + 56), a1, a2, a3, a4, a5, a6);
  v17 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v17 == 1)
  {
    if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v11, v12, v13, v14, v15, v16);
LABEL_12:
  *a7 = v18;
}

void WTF::AtomStringImpl::addSlowCase(unint64_t this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF *a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int *v31;
  char v32;

  if (!*(_DWORD *)(this + 4))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *(_QWORD *)a8 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if ((*(_BYTE *)this & 1) != 0)
  {
    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    {
      goto LABEL_13;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_13:
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13)
      v13 = WTF::Thread::initializeCurrentTLS(0);
    WTF::addStatic(a8, *(uint64_t **)(v13 + 56), (WTF::StringImpl *)this, a3, a4, a5, a6, a7);
    v20 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v20 == 1)
    {
      if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v14, v15, v16, v17, v18, v19);
    return;
  }
  if ((*(_BYTE *)(this + 16) & 0x20) != 0)
  {
    WTF::addSymbol(a8, (WTF::StringImpl *)this, (uint64_t)a2, a3, a4, a5, a6, a7);
    return;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_22;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_22:
  v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v21)
    v21 = WTF::Thread::initializeCurrentTLS(0);
  v22 = *(uint64_t **)(v21 + 56);
  v30 = this >> 4;
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::add(v22, &v30, a2, a3, a4, a5, a6, a7, (uint64_t)&v31);
  if (v32)
    *(_DWORD *)(this + 16) |= 0x10u;
  v29 = (_DWORD *)(16 * *v31);
  *v29 += 2;
  *(_QWORD *)a8 = v29;
  LODWORD(v29) = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if ((_DWORD)v29 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v23, v24, v25, v26, v27, v28);
}

void WTF::addSymbol(WTF *this, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  _QWORD v27[2];
  char v28;

  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_5:
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 56);
    v24 = a2;
    v13 = *((_DWORD *)a2 + 1);
    v25 = 0;
    v26 = v13;
    if ((*((_BYTE *)a2 + 16) & 4) == 0)
      goto LABEL_7;
LABEL_10:
    WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator8>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>(v12, (unsigned int *)&v24, a4, a5, a6, a7, a8, (uint64_t)v27);
    v20 = (_DWORD *)(16 * *(unsigned int *)v27[0]);
    if (!v28)
      goto LABEL_14;
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(WTF::Thread::initializeCurrentTLS(0) + 56);
  v24 = a2;
  v21 = *((_DWORD *)a2 + 1);
  v25 = 0;
  v26 = v21;
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
    goto LABEL_10;
LABEL_7:
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator16>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>(v12, (unsigned int *)&v24, a4, a5, a6, a7, a8, (uint64_t)v27);
  v20 = (_DWORD *)(16 * *(unsigned int *)v27[0]);
  if (!v28)
  {
LABEL_14:
    *v20 += 2;
    *(_QWORD *)this = v20;
    v23 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v23 != 1)
      goto LABEL_15;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)this = v20;
  v22 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v22 != 1)
  {
LABEL_15:
    __clrex();
    goto LABEL_16;
  }
LABEL_12:
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v14, v15, v16, v17, v18, v19);
}

void WTF::AtomStringImpl::addSlowCase(WTF::StringImpl **a1@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF *a8@<X8>)
{
  WTF::StringImpl *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int *v32;
  char v33;

  v9 = *a1;
  if (!*((_DWORD *)*a1 + 1))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *(_QWORD *)a8 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if ((*(_BYTE *)v9 & 1) != 0)
  {
    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    {
      goto LABEL_12;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_12:
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13)
      v13 = WTF::Thread::initializeCurrentTLS(0);
    WTF::addStatic(a8, *(uint64_t **)(v13 + 56), v9, a3, a4, a5, a6, a7);
    v20 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v20 == 1)
    {
      if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v14, v15, v16, v17, v18, v19);
    return;
  }
  if ((*((_BYTE *)v9 + 16) & 0x20) != 0)
  {
    WTF::addSymbol(a8, v9, (uint64_t)a2, a3, a4, a5, a6, a7);
    return;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_21;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_21:
  v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v21)
    v21 = WTF::Thread::initializeCurrentTLS(0);
  v22 = *(uint64_t **)(v21 + 56);
  v31 = (unint64_t)*a1 >> 4;
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::add(v22, &v31, a2, a3, a4, a5, a6, a7, (uint64_t)&v32);
  if (v33)
  {
    v29 = *a1;
    *((_DWORD *)v29 + 4) = *((_DWORD *)*a1 + 4) | 0x10;
    *a1 = 0;
    *(_QWORD *)a8 = v29;
    LODWORD(v29) = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if ((_DWORD)v29 == 1)
      goto LABEL_25;
LABEL_28:
    __clrex();
    goto LABEL_29;
  }
  v30 = (_DWORD *)(16 * *v32);
  *v30 += 2;
  *(_QWORD *)a8 = v30;
  LODWORD(v30) = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if ((_DWORD)v30 != 1)
    goto LABEL_28;
LABEL_25:
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_29:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v23, v24, v25, v26, v27, v28);
}

void WTF::AtomStringImpl::addSlowCase(uint64_t *a1@<X0>, unint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v12;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  _QWORD v36[2];
  char v37;

  if (!*(_DWORD *)(a2 + 4))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    {
      goto LABEL_22;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_22:
    WTF::addStatic(a9, a1, (WTF::StringImpl *)a2, a4, a5, a6, a7, a8);
    v30 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v30 == 1)
    {
      if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v24, v25, v26, v27, v28, v29);
    return;
  }
  v12 = *(_DWORD *)(a2 + 16);
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else
  {
    v15 = 1;
    if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_10;
  }
  v15 = 0;
LABEL_10:
  if ((v12 & 0x20) != 0)
  {
    if ((v15 & 1) != 0)
    {
      v33 = (WTF::StringImpl *)a2;
      v23 = *(_DWORD *)(a2 + 4);
      v34 = 0;
      v35 = v23;
      if ((*(_BYTE *)(a2 + 16) & 4) == 0)
        goto LABEL_18;
    }
    else
    {
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
      v33 = (WTF::StringImpl *)a2;
      v31 = *(_DWORD *)(a2 + 4);
      v34 = 0;
      v35 = v31;
      if ((*(_BYTE *)(a2 + 16) & 4) == 0)
      {
LABEL_18:
        WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator16>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>((uint64_t)a1, (unsigned int *)&v33, a4, a5, a6, a7, a8, (uint64_t)v36);
        v22 = (_DWORD *)(16 * *(unsigned int *)v36[0]);
        if (v37)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator8>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>((uint64_t)a1, (unsigned int *)&v33, a4, a5, a6, a7, a8, (uint64_t)v36);
    v22 = (_DWORD *)(16 * *(unsigned int *)v36[0]);
    if (v37)
      goto LABEL_30;
    goto LABEL_29;
  }
  if ((v15 & 1) == 0)
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
  LODWORD(v33) = a2 >> 4;
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::add(a1, (unsigned int *)&v33, a3, a4, a5, a6, a7, a8, (uint64_t)v36);
  if (v37)
    *(_DWORD *)(a2 + 16) |= 0x10u;
  v22 = (_DWORD *)(16 * *(unsigned int *)v36[0]);
LABEL_29:
  *v22 += 2;
LABEL_30:
  *a9 = v22;
  v32 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_34:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v16, v17, v18, v19, v20, v21);
}

unint64_t WTF::addStatic(_QWORD *a1, uint64_t *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t result;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;

  v10 = *((_DWORD *)this + 4);
  if ((v10 & 4) != 0)
  {
    v14 = *((_QWORD *)this + 1);
    v15 = *((unsigned int *)this + 1);
    if (v10 < 0x100)
      v16 = WTF::StringImpl::hashSlowCase(this);
    else
      v16 = v10 >> 8;
    v19 = v14;
    v20 = v15;
    v21 = v16;
    result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::BufferFromStaticDataTranslator<unsigned char>>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(a2, (uint64_t)&v19, a4, a5, a6, a7, a8, (uint64_t)v22);
    v18 = (_DWORD *)(16 * *(unsigned int *)v22[0]);
    if (!v23)
      goto LABEL_12;
LABEL_11:
    *a1 = v18;
    return result;
  }
  v11 = *((_QWORD *)this + 1);
  v12 = *((unsigned int *)this + 1);
  if (v10 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(this);
  else
    v13 = v10 >> 8;
  v19 = v11;
  v20 = v12;
  v21 = v13;
  result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::BufferFromStaticDataTranslator<char16_t>>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(a2, (uint64_t)&v19, a4, a5, a6, a7, a8, (uint64_t)v22);
  v18 = (_DWORD *)(16 * *(unsigned int *)v22[0]);
  if (v23)
    goto LABEL_11;
LABEL_12:
  *v18 += 2;
  *a1 = v18;
  return result;
}

void WTF::AtomStringImpl::remove(WTF::AtomStringImpl *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;

  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
    goto LABEL_5;
  }
  if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    goto LABEL_4;
LABEL_5:
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(0);
  v11 = *(uint64_t **)(v10 + 56);
  v12 = *v11;
  if (*v11)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = *((_DWORD *)this + 4);
    v15 = v14 < 0x100 ? WTF::StringImpl::hashSlowCase(this) : v14 >> 8;
    for (i = 0; ; v15 = i + v17)
    {
      v17 = v15 & v13;
      v18 = *(unsigned int *)(v12 + 4 * v17);
      if ((_DWORD)v18 != 1)
      {
        if (!(_DWORD)v18)
          goto LABEL_31;
        if (this == (WTF::AtomStringImpl *)(16 * v18))
          break;
      }
      ++i;
    }
    v19 = (_DWORD *)(v12 + 4 * v17);
    v20 = (_DWORD *)*v11;
    if (!*v11 || (v20 += *(v20 - 1), v20 != v19))
    {
      if (v20 != v19)
      {
        *v19 = 1;
        ++*(_DWORD *)(*v11 - 16);
        if (*v11)
        {
          --*(_DWORD *)(*v11 - 12);
          v21 = *v11;
          if (!*v11)
            goto LABEL_31;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          v21 = *v11;
          if (!*v11)
            goto LABEL_31;
        }
        v22 = 6 * *(_DWORD *)(v21 - 12);
        v23 = *(_DWORD *)(v21 - 4);
        if (v22 < v23 && v23 >= 9)
          WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v11, v23 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
LABEL_31:
  v25 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::AtomStringImpl::lookUpSlowCase(WTF::AtomStringImpl *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;

  if (!*((_DWORD *)this + 1))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a8 = &WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_7:
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v12)
  {
    v13 = *(uint64_t **)(v12 + 56);
    v14 = *v13;
    if (!*v13)
      goto LABEL_28;
  }
  else
  {
    v13 = *(uint64_t **)(WTF::Thread::initializeCurrentTLS(0) + 56);
    v14 = *v13;
    if (!*v13)
      goto LABEL_28;
  }
  v15 = *(_DWORD *)(v14 - 8);
  v16 = *((_DWORD *)this + 4);
  if (v16 < 0x100)
    v17 = WTF::StringImpl::hashSlowCase(this);
  else
    v17 = v16 >> 8;
  for (i = 0; ; v17 = i + v19)
  {
    v19 = v17 & v15;
    v20 = *(unsigned int *)(v14 + 4 * v19);
    if ((_DWORD)v20 != 1)
    {
      if (!(_DWORD)v20)
        goto LABEL_28;
      if (WTF::equal((WTF *)(16 * v20), this, a2))
        break;
    }
    ++i;
  }
  v21 = (unsigned int *)(v14 + 4 * v19);
  if (!*v13 || v21 != (unsigned int *)(*v13 + 4 * *(unsigned int *)(*v13 - 4)))
  {
    v22 = *v21;
    v23 = (_DWORD *)(16 * v22);
    if ((_DWORD)v22)
      *v23 += 2;
    *a8 = v23;
    v24 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v24 != 1)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_28:
  *a8 = 0;
  v25 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v25 != 1)
  {
LABEL_29:
    __clrex();
    goto LABEL_30;
  }
LABEL_26:
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, (uint64_t)a2, a3, a4, a5, a6, a7);
}

void WTF::AtomStringImpl::add(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD v21[4];
  unsigned int *v22;
  char v23;

  v21[0] = a1;
  v21[1] = a2;
  v21[2] = WTF::Unicode::computeUTF16LengthWithHash(a1, a2);
  v21[3] = v4;
  if (!(_DWORD)v4)
  {
    v11 = 0;
LABEL_5:
    *a3 = v11;
    return;
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_8:
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::HashedUTF8CharactersTranslator>,WTF::HashedUTF8Characters const&,WTF::HashedUTF8Characters const&>(*(uint64_t **)(v12 + 56), (WTF::AtomStringImpl *)v21, (uint64_t)v21, v5, v6, v7, v8, v9, (uint64_t)&v22);
  v11 = (_DWORD *)(16 * *v22);
  if (v23)
  {
    v19 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v19 == 1)
      goto LABEL_12;
LABEL_15:
    __clrex();
    goto LABEL_16;
  }
  *v11 += 2;
  v20 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v20 != 1)
    goto LABEL_15;
LABEL_12:
  if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
    goto LABEL_5;
LABEL_16:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v13, v14, v15, v16, v17, v18);
  *a3 = v11;
}

void WTF::AtomStringImpl::lookUp(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;

  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_5:
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v13)
  {
    v14 = -1640531527;
    v15 = *(uint64_t **)(v13 + 56);
    if (a2 < 2)
      goto LABEL_11;
LABEL_9:
    v17 = 0;
    do
    {
      v18 = (*(unsigned __int8 *)(a1 + v17 + 1) << 11) ^ ((v14 + *(unsigned __int8 *)(a1 + v17)) << 16) ^ (v14 + *(unsigned __int8 *)(a1 + v17));
      v14 = v18 + (v18 >> 11);
      v19 = v17 + 3;
      v17 += 2;
    }
    while (v19 < a2);
    goto LABEL_11;
  }
  v16 = WTF::Thread::initializeCurrentTLS(0);
  v14 = -1640531527;
  v15 = *(uint64_t **)(v16 + 56);
  if (a2 >= 2)
    goto LABEL_9;
LABEL_11:
  if ((a2 & 1) != 0)
    v14 = ((v14 + *(unsigned __int8 *)(a2 + a1 - 1)) ^ ((v14 + *(unsigned __int8 *)(a2 + a1 - 1)) << 11))
        + (((v14 + *(unsigned __int8 *)(a2 + a1 - 1)) ^ ((v14 + *(unsigned __int8 *)(a2 + a1 - 1)) << 11)) >> 17);
  v20 = *v15;
  if (!*v15)
    goto LABEL_30;
  v21 = 0;
  v22 = (v14 ^ (8 * v14)) + ((v14 ^ (8 * v14)) >> 5);
  v23 = (v22 ^ (4 * v22)) + ((v22 ^ (4 * v22)) >> 15);
  v24 = (v23 ^ (v23 << 10)) & 0xFFFFFF;
  if (!v24)
    v24 = 0x800000;
  v25 = *(_DWORD *)(v20 - 8);
  while (1)
  {
    v26 = v24 & v25;
    v27 = *(unsigned int *)(v20 + 4 * v26);
    if ((_DWORD)v27 != 1)
    {
      if (!(_DWORD)v27)
        goto LABEL_30;
      if (WTF::equalInternal<unsigned char>(16 * v27, a1, a2))
        break;
    }
    v24 = ++v21 + v26;
  }
  v28 = (unsigned int *)(v20 + 4 * v26);
  if (*v15 && v28 == (unsigned int *)(*v15 + 4 * *(unsigned int *)(*v15 - 4)))
  {
LABEL_30:
    *a9 = 0;
    v32 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v32 != 1)
    {
LABEL_31:
      __clrex();
      goto LABEL_32;
    }
  }
  else
  {
    v29 = *v28;
    v30 = (_DWORD *)(16 * v29);
    if ((_DWORD)v29)
      *v30 += 2;
    *a9 = v30;
    v31 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v31 != 1)
      goto LABEL_31;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_32:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;

  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_5:
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v13)
  {
    v14 = -1640531527;
    v15 = *(uint64_t **)(v13 + 56);
    if (a2 < 2)
      goto LABEL_11;
LABEL_9:
    v17 = 0;
    do
    {
      v18 = (*(unsigned __int16 *)(a1 + 2 * v17 + 2) << 11) ^ ((v14 + *(unsigned __int16 *)(a1 + 2 * v17)) << 16) ^ (v14 + *(unsigned __int16 *)(a1 + 2 * v17));
      v14 = v18 + (v18 >> 11);
      v19 = v17 + 3;
      v17 += 2;
    }
    while (v19 < a2);
    goto LABEL_11;
  }
  v16 = WTF::Thread::initializeCurrentTLS(0);
  v14 = -1640531527;
  v15 = *(uint64_t **)(v16 + 56);
  if (a2 >= 2)
    goto LABEL_9;
LABEL_11:
  if ((a2 & 1) != 0)
  {
    v20 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    v14 = ((v14 + v20) ^ ((v14 + v20) << 11)) + (((v14 + v20) ^ ((v14 + v20) << 11)) >> 17);
  }
  v21 = *v15;
  if (!*v15)
    goto LABEL_30;
  v22 = 0;
  v23 = (v14 ^ (8 * v14)) + ((v14 ^ (8 * v14)) >> 5);
  v24 = (v23 ^ (4 * v23)) + ((v23 ^ (4 * v23)) >> 15);
  v25 = (v24 ^ (v24 << 10)) & 0xFFFFFF;
  if (!v25)
    v25 = 0x800000;
  v26 = *(_DWORD *)(v21 - 8);
  while (1)
  {
    v27 = v25 & v26;
    v28 = *(unsigned int *)(v21 + 4 * v27);
    if ((_DWORD)v28 != 1)
    {
      if (!(_DWORD)v28)
        goto LABEL_30;
      if (WTF::equalInternal<char16_t>(16 * v28, a1, a2))
        break;
    }
    v25 = ++v22 + v27;
  }
  v29 = (unsigned int *)(v21 + 4 * v27);
  if (*v15 && v29 == (unsigned int *)(*v15 + 4 * *(unsigned int *)(*v15 - 4)))
  {
LABEL_30:
    *a9 = 0;
    v33 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v33 != 1)
    {
LABEL_31:
      __clrex();
      goto LABEL_32;
    }
  }
  else
  {
    v30 = *v29;
    v31 = (_DWORD *)(16 * v30);
    if ((_DWORD)v30)
      *v31 += 2;
    *a9 = v31;
    v32 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
    if (v32 != 1)
      goto LABEL_31;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_32:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::BufferFromStaticDataTranslator<unsigned char>>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  int v15;
  int i;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v11 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *a1) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = *(_DWORD *)(a2 + 16);
  for (i = v15; ; i = v13 + v17)
  {
    v17 = i & v12;
    v18 = (_DWORD *)(v11 + 4 * (i & v12));
    v19 = *v18;
    if ((_DWORD)v19 == 1)
    {
      v14 = (_DWORD *)(v11 + 4 * v17);
      goto LABEL_6;
    }
    if (!(_DWORD)v19)
    {
      if (v14)
        v18 = v14;
      if (*v18 == 1)
      {
        *v18 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      v23 = *(_QWORD *)(a2 + 8);
      if (v23)
      {
        v24 = *(_QWORD *)a2;
        result = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)result = 2;
        *(_DWORD *)(result + 4) = v23;
        *(_QWORD *)(result + 8) = v24;
        v25 = 4;
        *(_DWORD *)(result + 16) = 4;
      }
      else
      {
        result = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        v25 = dword_1ECF2C430;
      }
      *(_DWORD *)(result + 16) = v25 | (v15 << 8) | 0x10;
      *v18 = result >> 4;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v28 = *a1;
        if (*a1)
          goto LABEL_23;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v28 = *a1;
        if (*a1)
        {
LABEL_23:
          v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
          v30 = *(unsigned int *)(v28 - 4);
          if (v30 <= 0x400)
            goto LABEL_24;
          goto LABEL_30;
        }
      }
      v29 = *(unsigned int *)(v28 - 16);
      v30 = *(unsigned int *)(v28 - 4);
      if (v30 <= 0x400)
      {
LABEL_24:
        if (3 * v30 > 4 * v29)
        {
LABEL_33:
          v27 = v28 + 4 * v30;
          v26 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v30)
        {
          result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, (uint64_t)v18, a3, a4, a5, a6, a7);
          v18 = (_DWORD *)result;
          v28 = *a1;
          if (!*a1)
          {
LABEL_27:
            v30 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v30 = *(unsigned int *)(v28 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30))), (uint64_t)v18, a3, a4, a5, a6, a7);
        v18 = (_DWORD *)result;
        v28 = *a1;
        if (!*a1)
          goto LABEL_27;
        goto LABEL_32;
      }
LABEL_30:
      if (v30 > 2 * v29)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = WTF::equalInternal<unsigned char>(16 * v19, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if ((result & 1) != 0)
      break;
LABEL_6:
    ++v13;
  }
  v21 = *a1;
  if (*a1)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  v26 = 0;
  v27 = v21 + 4 * v22;
LABEL_34:
  *(_QWORD *)a8 = v18;
  *(_QWORD *)(a8 + 8) = v27;
  *(_BYTE *)(a8 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(4 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = (_DWORD *)(v11 + 4 * v22);
      v25 = *v24;
      if (v25 >= 2)
        break;
LABEL_6:
      if (++v22 == v12)
        goto LABEL_19;
    }
    v26 = *a1;
    if (*a1)
    {
      v27 = *(_DWORD *)(v26 - 8);
      v28 = (WTF::StringImpl *)(16 * v25);
      v29 = *(_DWORD *)(16 * v25 + 0x10);
      if (v29 >= 0x100)
      {
LABEL_10:
        v30 = v29 >> 8;
        goto LABEL_13;
      }
    }
    else
    {
      v27 = 0;
      v28 = (WTF::StringImpl *)(16 * v25);
      v29 = *(_DWORD *)(16 * v25 + 0x10);
      if (v29 >= 0x100)
        goto LABEL_10;
    }
    v30 = WTF::StringImpl::hashSlowCase(v28);
LABEL_13:
    v31 = 0;
    do
    {
      v32 = v30 & v27;
      v30 = ++v31 + v32;
    }
    while (*(_DWORD *)(v26 + 4 * v32));
    v33 = (_DWORD *)(v26 + 4 * v32);
    *v33 = 0;
    *v33 = *v24;
    *v24 = 0;
    if (v24 == (_DWORD *)a3)
      v23 = v26 + 4 * v32;
    goto LABEL_6;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_19:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

unint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::BufferFromStaticDataTranslator<char16_t>>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  int v15;
  int i;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v11 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *a1) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = *(_DWORD *)(a2 + 16);
  for (i = v15; ; i = v13 + v17)
  {
    v17 = i & v12;
    v18 = (_DWORD *)(v11 + 4 * (i & v12));
    v19 = *v18;
    if ((_DWORD)v19 == 1)
    {
      v14 = (_DWORD *)(v11 + 4 * v17);
      goto LABEL_6;
    }
    if (!(_DWORD)v19)
    {
      if (v14)
        v18 = v14;
      if (*v18 == 1)
      {
        *v18 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      v23 = *(_QWORD *)(a2 + 8);
      if (v23)
      {
        v24 = *(_QWORD *)a2;
        result = WTF::fastCompactMalloc((WTF *)0x20);
        v25 = 0;
        *(_DWORD *)result = 2;
        *(_DWORD *)(result + 4) = v23;
        *(_QWORD *)(result + 8) = v24;
        *(_DWORD *)(result + 16) = 0;
      }
      else
      {
        result = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        v25 = dword_1ECF2C430;
      }
      *(_DWORD *)(result + 16) = v25 | (v15 << 8) | 0x10;
      *v18 = result >> 4;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v28 = *a1;
        if (*a1)
          goto LABEL_23;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v28 = *a1;
        if (*a1)
        {
LABEL_23:
          v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
          v30 = *(unsigned int *)(v28 - 4);
          if (v30 <= 0x400)
            goto LABEL_24;
          goto LABEL_30;
        }
      }
      v29 = *(unsigned int *)(v28 - 16);
      v30 = *(unsigned int *)(v28 - 4);
      if (v30 <= 0x400)
      {
LABEL_24:
        if (3 * v30 > 4 * v29)
        {
LABEL_33:
          v27 = v28 + 4 * v30;
          v26 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v30)
        {
          result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, (uint64_t)v18, a3, a4, a5, a6, a7);
          v18 = (_DWORD *)result;
          v28 = *a1;
          if (!*a1)
          {
LABEL_27:
            v30 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v30 = *(unsigned int *)(v28 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30))), (uint64_t)v18, a3, a4, a5, a6, a7);
        v18 = (_DWORD *)result;
        v28 = *a1;
        if (!*a1)
          goto LABEL_27;
        goto LABEL_32;
      }
LABEL_30:
      if (v30 > 2 * v29)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = WTF::equalInternal<char16_t>(16 * v19, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if ((result & 1) != 0)
      break;
LABEL_6:
    ++v13;
  }
  v21 = *a1;
  if (*a1)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  v26 = 0;
  v27 = v21 + 4 * v22;
LABEL_34:
  *(_QWORD *)a8 = v18;
  *(_QWORD *)(a8 + 8) = v27;
  *(_BYTE *)(a8 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator8>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int i;
  unsigned int v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;

  v9 = (uint64_t *)result;
  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash((uint64_t *)result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = *(_QWORD *)a2;
    v14 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    v15 = a2[2];
    if (v14 < v15)
    {
LABEL_44:
      __break(1u);
      return result;
    }
  }
  else
  {
    v12 = 0;
    v13 = *(_QWORD *)a2;
    v14 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    v15 = a2[2];
    if (v14 < v15)
      goto LABEL_44;
  }
  v16 = a2[3];
  if (v14 - v15 < v16)
    goto LABEL_44;
  v17 = *(_QWORD *)(v13 + 8);
  v18 = -1640531527;
  v19 = v17 + v15;
  if (v16 >= 2)
  {
    v20 = 0;
    do
    {
      v21 = ((v18 + *(unsigned __int8 *)(v19 + v20)) << 16) ^ (*(unsigned __int8 *)(v19 + v20 + 1) << 11) ^ (v18 + *(unsigned __int8 *)(v19 + v20));
      v18 = v21 + (v21 >> 11);
      v22 = v20 + 3;
      v20 += 2;
    }
    while (v22 < v16);
  }
  if ((v16 & 1) != 0)
  {
    v23 = v18 + *(unsigned __int8 *)(v16 + v19 - 1);
    v18 = (v23 ^ (v23 << 11)) + ((v23 ^ (v23 << 11)) >> 17);
  }
  v24 = 0;
  v25 = 0;
  v26 = (v18 ^ (8 * v18)) + ((v18 ^ (8 * v18)) >> 5);
  v27 = (v26 ^ (4 * v26)) + ((v26 ^ (4 * v26)) >> 15);
  v28 = (v27 ^ (v27 << 10)) & 0xFFFFFF;
  if (v28)
    v29 = v28;
  else
    v29 = 0x800000;
  for (i = v29; ; i = v24 + v31)
  {
    v31 = i & v12;
    v32 = (_BYTE *)(v11 + 4 * (i & v12));
    v33 = *(unsigned int *)v32;
    if ((_DWORD)v33 == 1)
    {
      v25 = (_BYTE *)(v11 + 4 * v31);
      goto LABEL_15;
    }
    if (!(_DWORD)v33)
    {
      if (v25)
        v32 = v25;
      if (*(_DWORD *)v32 == 1)
      {
        *(_DWORD *)v32 = 0;
        --*(_DWORD *)(*v9 - 16);
      }
      result = (uint64_t)WTF::SubstringTranslator::translate(v32, a2, v29);
      if (*v9)
      {
        ++*(_DWORD *)(*v9 - 12);
        v44 = *v9;
        if (*v9)
          goto LABEL_29;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v44 = *v9;
        if (*v9)
        {
LABEL_29:
          v45 = (*(_DWORD *)(v44 - 16) + *(_DWORD *)(v44 - 12));
          v46 = *(unsigned int *)(v44 - 4);
          if (v46 <= 0x400)
            goto LABEL_30;
          goto LABEL_36;
        }
      }
      v45 = *(unsigned int *)(v44 - 16);
      v46 = *(unsigned int *)(v44 - 4);
      if (v46 <= 0x400)
      {
LABEL_30:
        if (3 * v46 > 4 * v45)
        {
LABEL_39:
          v47 = v44 + 4 * v46;
          v48 = 1;
          goto LABEL_42;
        }
        if (!(_DWORD)v46)
        {
          result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v9, 8uLL, (uint64_t)v32, v39, v40, v41, v42, v43);
          v32 = (_BYTE *)result;
          v44 = *v9;
          if (!*v9)
          {
LABEL_33:
            v46 = 0;
            goto LABEL_39;
          }
LABEL_38:
          v46 = *(unsigned int *)(v44 - 4);
          goto LABEL_39;
        }
LABEL_37:
        result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v9, ((_DWORD)v46 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v46))), (uint64_t)v32, v39, v40, v41, v42, v43);
        v32 = (_BYTE *)result;
        v44 = *v9;
        if (!*v9)
          goto LABEL_33;
        goto LABEL_38;
      }
LABEL_36:
      if (v46 > 2 * v45)
        goto LABEL_39;
      goto LABEL_37;
    }
    v34 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    v35 = a2[2];
    if (v34 < v35)
      goto LABEL_44;
    v36 = a2[3];
    if (v34 - v35 < v36)
      goto LABEL_44;
    result = WTF::equalInternal<unsigned char>(16 * v33, *(_QWORD *)(*(_QWORD *)a2 + 8) + v35, v36);
    if ((result & 1) != 0)
      break;
LABEL_15:
    ++v24;
  }
  v37 = *v9;
  if (*v9)
    v38 = *(unsigned int *)(v37 - 4);
  else
    v38 = 0;
  v48 = 0;
  v47 = v37 + 4 * v38;
LABEL_42:
  *(_QWORD *)a8 = v32;
  *(_QWORD *)(a8 + 8) = v47;
  *(_BYTE *)(a8 + 16) = v48;
  return result;
}

_BYTE *WTF::SubstringTranslator::translate(_BYTE *result, unsigned int *a2, int a3)
{
  _DWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unint64_t v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;

  v4 = result;
  v5 = a2[3];
  if (!(_DWORD)v5)
  {
    v9 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v10 = dword_1ECF2C430;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)a2;
  v7 = a2[2];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 16) & 4) != 0)
  {
    if (v5 <= 0xC)
    {
      v14 = (_BYTE *)(*(_QWORD *)(v6 + 8) + v7);
      v9 = WTF::fastCompactMalloc((WTF *)(v5 + 20));
      result = (_BYTE *)(v9 + 20);
      *(_DWORD *)v9 = 2;
      *(_DWORD *)(v9 + 4) = v5;
      *(_QWORD *)(v9 + 8) = v9 + 20;
      *(_DWORD *)(v9 + 16) = 4;
      if ((_DWORD)v5 == 1)
        *result = *v14;
      else
        result = memcpy(result, v14, v5);
      v10 = 4;
      goto LABEL_19;
    }
  }
  else if (v5 <= 6)
  {
    v8 = (_WORD *)(*(_QWORD *)(v6 + 8) + 2 * v7);
    v9 = WTF::fastCompactMalloc((WTF *)(2 * v5 + 20));
    result = (_BYTE *)(v9 + 20);
    *(_DWORD *)v9 = 2;
    *(_DWORD *)(v9 + 4) = v5;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    if ((_DWORD)v5 == 1)
    {
      v10 = 0;
      *(_WORD *)result = *v8;
    }
    else
    {
      result = memcpy(result, v8, 2 * v5);
      v10 = 0;
    }
    goto LABEL_19;
  }
  v11 = *(_DWORD **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 16) & 3) == 2)
    v11 = *(_DWORD **)(v6 + 24);
  result = (_BYTE *)WTF::fastCompactMalloc((WTF *)0x20);
  v9 = (unint64_t)result;
  v12 = *(_DWORD *)(v6 + 16);
  v13 = *(_QWORD *)(v6 + 8);
  *v11 += 2;
  v10 = 2;
  *(_DWORD *)result = 2;
  *((_DWORD *)result + 1) = v5;
  if ((v12 & 4) != 0)
  {
    *((_QWORD *)result + 1) = v13 + v7;
    v10 = 6;
  }
  else
  {
    *((_QWORD *)result + 1) = v13 + 2 * v7;
  }
  *((_DWORD *)result + 4) = v10;
  *((_QWORD *)result + 3) = v11;
LABEL_19:
  *(_DWORD *)(v9 + 16) = v10 | (a3 << 8) | 0x10;
  *v4 = v9 >> 4;
  return result;
}

uint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::SubstringTranslator16>,WTF::SubstringLocation const&,WTF::SubstringLocation const&>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int i;
  unsigned int v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;

  v9 = (uint64_t *)result;
  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash((uint64_t *)result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = *(_QWORD *)a2;
    v14 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    v15 = a2[2];
    if (v14 < v15)
    {
LABEL_44:
      __break(1u);
      return result;
    }
  }
  else
  {
    v12 = 0;
    v13 = *(_QWORD *)a2;
    v14 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    v15 = a2[2];
    if (v14 < v15)
      goto LABEL_44;
  }
  v16 = a2[3];
  if (v14 - v15 < v16)
    goto LABEL_44;
  v17 = *(_QWORD *)(v13 + 8);
  v18 = -1640531527;
  v19 = v17 + 2 * v15;
  if (v16 >= 2)
  {
    v20 = 0;
    do
    {
      v21 = ((v18 + *(unsigned __int16 *)(v19 + 2 * v20)) << 16) ^ (*(unsigned __int16 *)(v19 + 2 * v20 + 2) << 11) ^ (v18 + *(unsigned __int16 *)(v19 + 2 * v20));
      v18 = v21 + (v21 >> 11);
      v22 = v20 + 3;
      v20 += 2;
    }
    while (v22 < v16);
  }
  if ((v16 & 1) != 0)
  {
    v23 = v18 + *(unsigned __int16 *)(v19 + 2 * v16 - 2);
    v18 = (v23 ^ (v23 << 11)) + ((v23 ^ (v23 << 11)) >> 17);
  }
  v24 = 0;
  v25 = 0;
  v26 = (v18 ^ (8 * v18)) + ((v18 ^ (8 * v18)) >> 5);
  v27 = (v26 ^ (4 * v26)) + ((v26 ^ (4 * v26)) >> 15);
  v28 = (v27 ^ (v27 << 10)) & 0xFFFFFF;
  if (v28)
    v29 = v28;
  else
    v29 = 0x800000;
  for (i = v29; ; i = v24 + v31)
  {
    v31 = i & v12;
    v32 = (_BYTE *)(v11 + 4 * (i & v12));
    v33 = *(unsigned int *)v32;
    if ((_DWORD)v33 == 1)
    {
      v25 = (_BYTE *)(v11 + 4 * v31);
      goto LABEL_15;
    }
    if (!(_DWORD)v33)
    {
      if (v25)
        v32 = v25;
      if (*(_DWORD *)v32 == 1)
      {
        *(_DWORD *)v32 = 0;
        --*(_DWORD *)(*v9 - 16);
      }
      result = (uint64_t)WTF::SubstringTranslator::translate(v32, a2, v29);
      if (*v9)
      {
        ++*(_DWORD *)(*v9 - 12);
        v44 = *v9;
        if (*v9)
          goto LABEL_29;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v44 = *v9;
        if (*v9)
        {
LABEL_29:
          v45 = (*(_DWORD *)(v44 - 16) + *(_DWORD *)(v44 - 12));
          v46 = *(unsigned int *)(v44 - 4);
          if (v46 <= 0x400)
            goto LABEL_30;
          goto LABEL_36;
        }
      }
      v45 = *(unsigned int *)(v44 - 16);
      v46 = *(unsigned int *)(v44 - 4);
      if (v46 <= 0x400)
      {
LABEL_30:
        if (3 * v46 > 4 * v45)
        {
LABEL_39:
          v47 = v44 + 4 * v46;
          v48 = 1;
          goto LABEL_42;
        }
        if (!(_DWORD)v46)
        {
          result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v9, 8uLL, (uint64_t)v32, v39, v40, v41, v42, v43);
          v32 = (_BYTE *)result;
          v44 = *v9;
          if (!*v9)
          {
LABEL_33:
            v46 = 0;
            goto LABEL_39;
          }
LABEL_38:
          v46 = *(unsigned int *)(v44 - 4);
          goto LABEL_39;
        }
LABEL_37:
        result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v9, ((_DWORD)v46 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v46))), (uint64_t)v32, v39, v40, v41, v42, v43);
        v32 = (_BYTE *)result;
        v44 = *v9;
        if (!*v9)
          goto LABEL_33;
        goto LABEL_38;
      }
LABEL_36:
      if (v46 > 2 * v45)
        goto LABEL_39;
      goto LABEL_37;
    }
    v34 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    v35 = a2[2];
    if (v34 < v35)
      goto LABEL_44;
    v36 = a2[3];
    if (v34 - v35 < v36)
      goto LABEL_44;
    result = WTF::equalInternal<char16_t>(16 * v33, *(_QWORD *)(*(_QWORD *)a2 + 8) + 2 * v35, v36);
    if ((result & 1) != 0)
      break;
LABEL_15:
    ++v24;
  }
  v37 = *v9;
  if (*v9)
    v38 = *(unsigned int *)(v37 - 4);
  else
    v38 = 0;
  v48 = 0;
  v47 = v37 + 4 * v38;
LABEL_42:
  *(_QWORD *)a8 = v32;
  *(_QWORD *)(a8 + 8) = v47;
  *(_BYTE *)(a8 + 16) = v48;
  return result;
}

void WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  int v15;
  int i;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;

  v11 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *a1) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = *(_DWORD *)(a2 + 16);
  for (i = v15; ; i = v13 + v17)
  {
    v17 = i & v12;
    v18 = (_DWORD *)(v11 + 4 * (i & v12));
    v19 = *v18;
    if ((_DWORD)v19 == 1)
    {
      v14 = (_DWORD *)(v11 + 4 * v17);
      goto LABEL_6;
    }
    if (!(_DWORD)v19)
    {
      if (v14)
        v18 = v14;
      if (*v18 == 1)
      {
        *v18 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      WTF::StringImpl::create8BitIfPossible(*(_WORD **)a2, *(_QWORD *)(a2 + 8), (uint64_t *)&v33);
      v27 = v33;
      *(_DWORD *)(v33 + 16) |= (v15 << 8) | 0x10;
      *v18 = v27 >> 4;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v28 = *a1;
        if (*a1)
          goto LABEL_18;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v28 = *a1;
        if (*a1)
        {
LABEL_18:
          v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
          v30 = *(unsigned int *)(v28 - 4);
          if (v30 <= 0x400)
            goto LABEL_19;
          goto LABEL_27;
        }
      }
      v29 = *(unsigned int *)(v28 - 16);
      v30 = *(unsigned int *)(v28 - 4);
      if (v30 <= 0x400)
      {
LABEL_19:
        if (3 * v30 > 4 * v29)
        {
LABEL_30:
          v32 = v28 + 4 * v30;
          v31 = 1;
          goto LABEL_31;
        }
        if (!(_DWORD)v30)
        {
          v18 = (_DWORD *)WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, (uint64_t)v18, v22, v23, v24, v25, v26);
          v28 = *a1;
          if (!*a1)
          {
LABEL_22:
            v30 = 0;
            goto LABEL_30;
          }
LABEL_29:
          v30 = *(unsigned int *)(v28 - 4);
          goto LABEL_30;
        }
LABEL_28:
        v18 = (_DWORD *)WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30))), (uint64_t)v18, v22, v23, v24, v25, v26);
        v28 = *a1;
        if (!*a1)
          goto LABEL_22;
        goto LABEL_29;
      }
LABEL_27:
      if (v30 > 2 * v29)
        goto LABEL_30;
      goto LABEL_28;
    }
    if (WTF::equalInternal<char16_t>(16 * v19, *(_QWORD *)a2, *(_QWORD *)(a2 + 8)))
      break;
LABEL_6:
    ++v13;
  }
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v31 = 0;
  v32 = v20 + 4 * v21;
LABEL_31:
  *(_QWORD *)a8 = v18;
  *(_QWORD *)(a8 + 8) = v32;
  *(_BYTE *)(a8 + 16) = v31;
}

uint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  int v15;
  int i;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  _BYTE *v23;
  unint64_t v24;
  int v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v9 = (uint64_t *)result;
  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash((uint64_t *)result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = *(_DWORD *)(a2 + 16);
  for (i = v15; ; i = v13 + v17)
  {
    v17 = i & v12;
    v18 = (_DWORD *)(v11 + 4 * (i & v12));
    v19 = *v18;
    if ((_DWORD)v19 == 1)
    {
      v14 = (_DWORD *)(v11 + 4 * v17);
      goto LABEL_6;
    }
    if (!(_DWORD)v19)
      break;
    result = WTF::equalInternal<unsigned char>(16 * v19, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if ((result & 1) != 0)
    {
      v20 = *v9;
      if (*v9)
        v21 = *(unsigned int *)(v20 - 4);
      else
        v21 = 0;
      v26 = 0;
      v27 = v20 + 4 * v21;
      goto LABEL_38;
    }
LABEL_6:
    ++v13;
  }
  if (v14)
    v18 = v14;
  if (*v18 == 1)
  {
    *v18 = 0;
    --*(_DWORD *)(*v9 - 16);
  }
  v22 = *(_QWORD *)(a2 + 8);
  if (!v22)
  {
    v24 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v25 = dword_1ECF2C430;
    goto LABEL_25;
  }
  if (!(v22 >> 31))
  {
    v23 = *(_BYTE **)a2;
    v24 = WTF::fastCompactMalloc((WTF *)(v22 + 20));
    result = v24 + 20;
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = v22;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    *(_DWORD *)(v24 + 16) = 4;
    if (v22 == 1)
      *(_BYTE *)result = *v23;
    else
      result = (uint64_t)memcpy((void *)result, v23, v22);
    v25 = 4;
LABEL_25:
    *(_DWORD *)(v24 + 16) = v25 | (v15 << 8) | 0x10;
    *v18 = v24 >> 4;
    if (*v9)
    {
      ++*(_DWORD *)(*v9 - 12);
      v28 = *v9;
      if (*v9)
        goto LABEL_27;
LABEL_33:
      v29 = *(unsigned int *)(v28 - 16);
      v30 = *(unsigned int *)(v28 - 4);
      if (v30 > 0x400)
        goto LABEL_34;
LABEL_28:
      if (3 * v30 > 4 * v29)
        goto LABEL_37;
      if (!(_DWORD)v30)
      {
        result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v9, 8uLL, (uint64_t)v18, a3, a4, a5, a6, a7);
        v18 = (_DWORD *)result;
        v28 = *v9;
        if (!*v9)
          goto LABEL_31;
LABEL_36:
        v30 = *(unsigned int *)(v28 - 4);
        goto LABEL_37;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v28 = *v9;
      if (!*v9)
        goto LABEL_33;
LABEL_27:
      v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
      v30 = *(unsigned int *)(v28 - 4);
      if (v30 <= 0x400)
        goto LABEL_28;
LABEL_34:
      if (v30 > 2 * v29)
        goto LABEL_37;
    }
    result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v9, ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30))), (uint64_t)v18, a3, a4, a5, a6, a7);
    v18 = (_DWORD *)result;
    v28 = *v9;
    if (*v9)
      goto LABEL_36;
LABEL_31:
    v30 = 0;
LABEL_37:
    v27 = v28 + 4 * v30;
    v26 = 1;
LABEL_38:
    *(_QWORD *)a8 = v18;
    *(_QWORD *)(a8 + 8) = v27;
    *(_BYTE *)(a8 + 16) = v26;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::add@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t result;
  _DWORD *v17;
  int i;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v12 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8);
    v12 = *a1;
    if (!*a1)
    {
      v13 = 0;
      v14 = (WTF::StringImpl *)(16 * *a2);
      v15 = *((_DWORD *)v14 + 4);
      if (v15 >= 0x100)
        goto LABEL_4;
LABEL_6:
      result = WTF::StringImpl::hashSlowCase(v14);
      goto LABEL_7;
    }
  }
  v13 = *(_DWORD *)(v12 - 8);
  v14 = (WTF::StringImpl *)(16 * *a2);
  v15 = *((_DWORD *)v14 + 4);
  if (v15 < 0x100)
    goto LABEL_6;
LABEL_4:
  result = v15 >> 8;
LABEL_7:
  v17 = 0;
  for (i = 1; ; ++i)
  {
    v19 = result & v13;
    v20 = (_DWORD *)(v12 + 4 * (result & v13));
    v21 = *v20;
    if ((_DWORD)v21 == 1)
    {
      v17 = (_DWORD *)(v12 + 4 * v19);
      goto LABEL_9;
    }
    if (!(_DWORD)v21)
    {
      if (v17)
      {
        *v17 = 0;
        --*(_DWORD *)(*a1 - 16);
        v20 = v17;
      }
      v24 = *a2;
      *a2 = 0;
      *v20 = v24;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v25 = *a1;
        if (*a1)
          goto LABEL_19;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v25 = *a1;
        if (*a1)
        {
LABEL_19:
          v26 = (*(_DWORD *)(v25 - 16) + *(_DWORD *)(v25 - 12));
          v27 = *(unsigned int *)(v25 - 4);
          if (v27 <= 0x400)
            goto LABEL_20;
          goto LABEL_28;
        }
      }
      v26 = *(unsigned int *)(v25 - 16);
      v27 = *(unsigned int *)(v25 - 4);
      if (v27 <= 0x400)
      {
LABEL_20:
        if (3 * v27 > 4 * v26)
        {
LABEL_31:
          v29 = v25 + 4 * v27;
          v28 = 1;
          goto LABEL_32;
        }
        if (!(_DWORD)v27)
        {
          result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, (uint64_t)v20, a4, a5, a6, a7, a8);
          v20 = (_DWORD *)result;
          v25 = *a1;
          if (!*a1)
          {
LABEL_23:
            v27 = 0;
            goto LABEL_31;
          }
LABEL_30:
          v27 = *(unsigned int *)(v25 - 4);
          goto LABEL_31;
        }
LABEL_29:
        result = WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, ((_DWORD)v27 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v27))), (uint64_t)v20, a4, a5, a6, a7, a8);
        v20 = (_DWORD *)result;
        v25 = *a1;
        if (!*a1)
          goto LABEL_23;
        goto LABEL_30;
      }
LABEL_28:
      if (v27 > 2 * v26)
        goto LABEL_31;
      goto LABEL_29;
    }
    result = WTF::equal((WTF *)(16 * v21), (const WTF::StringImpl *)(16 * *a2), a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    result = i + v19;
  }
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v28 = 0;
  v29 = v22 + 4 * v23;
LABEL_32:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v28;
  return result;
}

void WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::HashedUTF8CharactersTranslator>,WTF::HashedUTF8Characters const&,WTF::HashedUTF8Characters const&>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  int v12;
  int v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  uint16x8_t v24;
  unsigned int v25;
  uint16x8_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  __int32 v51;
  int v52;
  int v53;
  uint8x16_t v55;
  uint8x16_t v56;
  unsigned int v57;
  uint8x16_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int *v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t *v73;
  WTF::AtomStringImpl *v74;
  BOOL v75;
  unint64_t v76;
  size_t v77;
  _BYTE *v78;
  _BYTE *v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  int v95;
  WTF::AtomStringImpl *v96;
  _DWORD *v97;
  unint64_t v98;

  v9 = a2;
  v10 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v10 = *a1) != 0))
  {
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = *((_DWORD *)v9 + 6);
  v92 = v15;
  v96 = v9;
  v95 = v12;
  while (1)
  {
    v16 = v15 & v12;
    v17 = (_DWORD *)(v10 + 4 * (v15 & v12));
    v18 = *v17;
    if ((_DWORD)v18 == 1)
    {
      v14 = (_DWORD *)(v10 + 4 * v16);
      goto LABEL_6;
    }
    if (!(_DWORD)v18)
    {
      if (v14)
        v17 = v14;
      if (*v17 == 1)
      {
        *v17 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      v61 = *((_QWORD *)v9 + 2);
      if (v61)
      {
        if (v61 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x197AB1970);
        }
        v62 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v61 + 20));
        v63 = v62 + 5;
        *v62 = 2;
        v62[1] = v61;
        *((_QWORD *)v62 + 1) = v62 + 5;
        v62[4] = 0;
        v61 = *((_QWORD *)v9 + 2);
        v64 = *(_QWORD *)v9;
        v65 = *((_QWORD *)v9 + 1);
        v98 = 0;
        v66 = 0;
        if (v65)
        {
LABEL_93:
          v67 = 0;
          while (1)
          {
            while (1)
            {
              v68 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(v64, v65, &v98);
              if (v68 == -1)
              {
                v70 = 1;
                goto LABEL_114;
              }
              if (v67 == v61)
              {
                v70 = 2;
                goto LABEL_112;
              }
              if (HIWORD(v68))
                break;
              if (v61 <= v67)
                goto LABEL_142;
              v69 = v67 + 1;
              *((_WORD *)v63 + v67) = v68;
              v66 |= v68;
              ++v67;
              if (v98 >= v65)
                goto LABEL_104;
            }
            if (HIWORD(v68) > 0x10u || v67 + 1 >= v61)
              break;
            if (v61 <= v67)
              goto LABEL_142;
            *((_WORD *)v63 + v67) = (v68 >> 10) - 10304;
            v69 = v67 + 2;
            *((_WORD *)v63 + v67 + 1) = v68 & 0x3FF | 0xDC00;
            v66 |= v68;
            v67 += 2;
            if (v98 >= v65)
            {
LABEL_104:
              v70 = 0;
              v67 = v69;
              goto LABEL_114;
            }
          }
          v70 = 2;
LABEL_114:
          v75 = v61 >= v67;
          v73 = a1;
          v74 = v9;
          if (!v75)
          {
LABEL_142:
            __break(1u);
            goto LABEL_143;
          }
LABEL_116:
          if (v70)
          {
LABEL_143:
            __break(0xC471u);
            JUMPOUT(0x197AB1968);
          }
          if (v66 > 0x7F)
          {
            v76 = (unint64_t)v62;
            goto LABEL_128;
          }
          v77 = *((_QWORD *)v74 + 1);
          if (v77)
          {
            if (v77 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB1978);
            }
            v78 = *(_BYTE **)v9;
            v76 = WTF::fastCompactMalloc((WTF *)(v77 + 20));
            v79 = (_BYTE *)(v76 + 20);
            *(_DWORD *)v76 = 2;
            *(_DWORD *)(v76 + 4) = v77;
            *(_QWORD *)(v76 + 8) = v76 + 20;
            *(_DWORD *)(v76 + 16) = 4;
            if (v77 == 1)
            {
              *v79 = *v78;
              v80 = *v62 - 2;
              if (*v62 == 2)
                goto LABEL_127;
LABEL_125:
              *v62 = v80;
              goto LABEL_128;
            }
            memcpy(v79, v78, v77);
            v80 = *v62 - 2;
            if (*v62 != 2)
              goto LABEL_125;
          }
          else
          {
            v76 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            v80 = *v62 - 2;
            if (*v62 != 2)
              goto LABEL_125;
          }
LABEL_127:
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v62, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
LABEL_128:
          *(_DWORD *)(v76 + 16) |= (v92 << 8) | 0x10;
          *v17 = v76 >> 4;
          if (*v73)
          {
            ++*(_DWORD *)(*v73 - 12);
            v89 = *v73;
            if (*v73)
              goto LABEL_130;
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            v89 = *v73;
            if (*v73)
            {
LABEL_130:
              v90 = (*(_DWORD *)(v89 - 16) + *(_DWORD *)(v89 - 12));
              v91 = *(unsigned int *)(v89 - 4);
              if (v91 <= 0x400)
                goto LABEL_131;
              goto LABEL_137;
            }
          }
          v90 = *(unsigned int *)(v89 - 16);
          v91 = *(unsigned int *)(v89 - 4);
          if (v91 <= 0x400)
          {
LABEL_131:
            if (3 * v91 > 4 * v90)
            {
LABEL_140:
              v72 = v89 + 4 * v91;
              v71 = 1;
              goto LABEL_141;
            }
            if (!(_DWORD)v91)
            {
              v17 = (_DWORD *)WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v73, 8uLL, (uint64_t)v17, a4, a5, a6, a7, a8);
              v89 = *v73;
              if (!*v73)
              {
LABEL_134:
                v91 = 0;
                goto LABEL_140;
              }
LABEL_139:
              v91 = *(unsigned int *)(v89 - 4);
              goto LABEL_140;
            }
LABEL_138:
            v17 = (_DWORD *)WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::rehash(v73, ((_DWORD)v91 << (6 * *(_DWORD *)(v89 - 12) >= (2 * v91))), (uint64_t)v17, a4, a5, a6, a7, a8);
            v89 = *v73;
            if (!*v73)
              goto LABEL_134;
            goto LABEL_139;
          }
LABEL_137:
          if (v91 > 2 * v90)
            goto LABEL_140;
          goto LABEL_138;
        }
      }
      else
      {
        v63 = 0;
        v62 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        v64 = *(_QWORD *)v9;
        v65 = *((_QWORD *)v9 + 1);
        v98 = 0;
        v66 = 0;
        if (v65)
          goto LABEL_93;
      }
      v70 = 0;
LABEL_112:
      v73 = a1;
      v74 = v9;
      goto LABEL_116;
    }
    v19 = 16 * v18;
    v20 = *((_QWORD *)v9 + 2);
    if (v20 != *(_DWORD *)(16 * v18 + 4))
      goto LABEL_6;
    v21 = *((_QWORD *)v9 + 1);
    if (v20 == v21)
      break;
    v97 = v14;
    v27 = *(_QWORD *)(16 * v18 + 8);
    v28 = *(_QWORD *)v9;
    if ((*(_BYTE *)(16 * v18 + 0x10) & 4) != 0)
    {
      v40 = 0;
      v98 = 0;
      while (1)
      {
        v37 = v98;
        if (v40 >= v20 || v98 >= v21)
          break;
        v41 = v40 + 1;
        v42 = *(unsigned __int8 *)(v27 + v40);
        v43 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(v28, v21, &v98);
        v40 = v41;
        if (v43 != v42)
        {
LABEL_44:
          v9 = v96;
          v14 = v97;
          v12 = v95;
          goto LABEL_6;
        }
      }
      v9 = v96;
      v14 = v97;
      v12 = v95;
      if (v20 != v40)
        goto LABEL_6;
    }
    else
    {
      v29 = 0;
      v98 = 0;
      while (1)
      {
        v37 = v98;
        if (v29 >= v20 || v98 >= v21)
          break;
        v33 = v29 + 1;
        v34 = *(unsigned __int16 *)(v27 + 2 * v29);
        if (v29 + 1 != v20 && (v34 & 0xFC00) == 0xD800)
        {
          if (v20 <= v33)
            goto LABEL_142;
          v30 = *(unsigned __int16 *)(v27 + 2 * v33);
          v31 = (v30 & 0xFC00) == 56320;
          v32 = v30 + (v34 << 10) - 56613888;
          if (v31)
            v33 = v29 + 2;
          else
            v33 = v29 + 1;
          if (v31)
            v34 = v32;
        }
        if (v34 >> 11 == 27)
          v35 = -1;
        else
          v35 = v34;
        v36 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(v28, v21, &v98);
        v29 = v33;
        if (v35 != v36)
          goto LABEL_44;
      }
      v9 = v96;
      v14 = v97;
      v12 = v95;
      if (v29 != v20)
        goto LABEL_6;
    }
    if (v37 == v21)
      goto LABEL_84;
LABEL_6:
    v15 = ++v13 + v16;
  }
  v22 = *(int8x16_t **)v9;
  v23 = *(int8x16_t **)(v19 + 8);
  if ((*(_BYTE *)(v19 + 16) & 4) != 0)
  {
    if ((_DWORD)v20 != 1)
    {
      if (!(_DWORD)v20)
        goto LABEL_84;
      switch(31 - __clz(v20 - 1))
      {
        case 0u:
          v38 = v23->u16[0];
          v39 = v22->u16[0];
          goto LABEL_59;
        case 1u:
          if (v23->u16[0] != v22->u16[0])
            goto LABEL_6;
          v38 = *(unsigned __int16 *)((char *)&v23->u16[-1] + *((_QWORD *)v9 + 2));
          v39 = *(unsigned __int16 *)((char *)&v22->u16[-1] + *((_QWORD *)v9 + 2));
          goto LABEL_59;
        case 2u:
          if (v23->i32[0] != v22->i32[0])
            goto LABEL_6;
          v38 = *(__int32 *)((char *)&v23->i32[-1] + *((_QWORD *)v9 + 2));
          v39 = *(__int32 *)((char *)&v22->i32[-1] + *((_QWORD *)v9 + 2));
          goto LABEL_59;
        case 3u:
          if (v23->i64[0] == v22->i64[0]
            && *(uint64_t *)((char *)&v23->i64[-1] + *((_QWORD *)v9 + 2)) == *(uint64_t *)((char *)&v22->i64[-1] + *((_QWORD *)v9 + 2)))
          {
            goto LABEL_84;
          }
          goto LABEL_6;
        case 4u:
          v55 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v23[-1] + *((_QWORD *)v9 + 2)), *(int8x16_t *)((char *)&v22[-1] + *((_QWORD *)v9 + 2))), vceqq_s8(*v23, *v22));
          v55.i8[0] = vminvq_u8(v55);
          if (v55.i32[0])
            goto LABEL_84;
          goto LABEL_6;
        default:
          v56 = (uint8x16_t)vceqq_s8(*v23, *v22);
          v56.i8[0] = vminvq_u8(v56);
          if (!v56.i32[0])
            goto LABEL_6;
          if (v20 < 0x10)
            goto LABEL_84;
          v57 = v20 & 0xF;
          break;
      }
      while (1)
      {
        v58 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v23 + v57), *(int8x16_t *)((char *)v22 + v57));
        v58.i8[0] = vminvq_u8(v58);
        if (!v58.i32[0])
          goto LABEL_6;
        v57 += 16;
        if (v57 >= v20)
          goto LABEL_84;
      }
    }
    if (!v20)
      goto LABEL_142;
    v38 = v23->u8[0];
    v39 = v22->u8[0];
    goto LABEL_59;
  }
  if (v20 >= 8)
  {
    v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v23, (int16x8_t)vmovl_u8(*(uint8x8_t *)v22->i8));
    v24.i16[0] = vminvq_u16(v24);
    if (v24.i32[0])
    {
      v25 = v20 & 7;
      while (1)
      {
        v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v23 + 2 * v25), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v22->i8[v25]));
        v26.i16[0] = vminvq_u16(v26);
        if (!v26.i32[0])
          break;
        v25 += 8;
        if (v25 >= v20)
          goto LABEL_84;
      }
    }
    goto LABEL_6;
  }
  if (v20 >= 4)
  {
    v44 = (v22->u32[0] | ((unint64_t)v22->u32[0] << 16)) & 0xFFFF0000FFFFLL;
    v45 = v23->i64[0];
    v46 = (*(unsigned int *)((char *)v22->u32 + (*((_QWORD *)v9 + 2) & 3)) | ((unint64_t)*(unsigned int *)((char *)v22->u32 + (*((_QWORD *)v9 + 2) & 3)) << 16)) & 0xFFFF0000FFFFLL;
    v47 = (v46 | (v46 << 8)) & 0xFF00FF00FF00FFLL;
    v48 = *(uint64_t *)((char *)v23->i64 + 2 * (*((_QWORD *)v9 + 2) & 3));
    if (((v44 | (v44 << 8)) & 0xFF00FF00FF00FFLL) == v45 && v47 == v48)
      goto LABEL_84;
    goto LABEL_6;
  }
  if (v20 < 2)
  {
    if ((_DWORD)v20 != 1)
      goto LABEL_84;
    v39 = v22->u8[0];
    v38 = v23->u16[0];
LABEL_59:
    if (v38 == v39)
      goto LABEL_84;
    goto LABEL_6;
  }
  v50 = (v22->u16[0] | (v22->u16[0] << 8)) & 0xFF00FF;
  v51 = v23->i32[0];
  v52 = (*(unsigned __int16 *)((char *)v22->u16 + (*((_QWORD *)v9 + 2) & 1)) | (*(unsigned __int16 *)((char *)v22->u16 + (*((_QWORD *)v9 + 2) & 1)) << 8)) & 0xFF00FF;
  v53 = *(__int32 *)((char *)v23->i32 + 2 * (*((_QWORD *)v9 + 2) & 1));
  if (v50 != v51 || v52 != v53)
    goto LABEL_6;
LABEL_84:
  v59 = *a1;
  if (*a1)
    v60 = *(unsigned int *)(v59 - 4);
  else
    v60 = 0;
  v71 = 0;
  v72 = v59 + 4 * v60;
LABEL_141:
  *(_QWORD *)a9 = v17;
  *(_QWORD *)(a9 + 8) = v72;
  *(_BYTE *)(a9 + 16) = v71;
}

void WTF::AtomStringImpl::add(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t Length;
  const char *CStringPtr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const UniChar *CharactersPtr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  UniChar *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _BYTE v32[2048];
  CFRange v33;

  if (this)
  {
    Length = CFStringGetLength(this);
    CStringPtr = CFStringGetCStringPtr(this, 0x201u);
    if (CStringPtr)
    {
      WTF::AtomStringImpl::add((uint64_t)CStringPtr, Length, v7, v8, v9, v10, v11, a2);
      return;
    }
    CharactersPtr = CFStringGetCharactersPtr(this);
    if (CharactersPtr)
    {
      WTF::AtomStringImpl::add((uint64_t)CharactersPtr, Length, v13, v14, v15, v16, v17, a2);
      return;
    }
    v31 = (WTF *)v32;
    v18 = (UniChar *)v32;
    if (Length >= 0x401)
    {
      if (Length >> 31)
      {
        __break(0xC471u);
        return;
      }
      v18 = (UniChar *)WTF::fastMalloc((WTF *)(2 * Length));
      v31 = (WTF *)v18;
    }
    v33.location = 0;
    v33.length = Length;
    CFStringGetCharacters(this, v33, v18);
    WTF::AtomStringImpl::add((uint64_t)v31, Length, v19, v20, v21, v22, v23, a2);
    if (v32 != (_BYTE *)v31)
    {
      if (v31)
        WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void WTF::AtomStringTable::~AtomStringTable(WTF::AtomStringTable *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;

  v8 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  v9 = *(v8 - 1);
  v10 = &v8[v9];
  if (*(v8 - 3))
  {
    v11 = *(_DWORD **)this;
    if ((_DWORD)v9)
    {
      v12 = 4 * v9;
      v11 = *(_DWORD **)this;
      while (*v11 <= 1u)
      {
        ++v11;
        v12 -= 4;
        if (!v12)
        {
          v11 = v10;
          if (v8)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
    }
LABEL_10:
    if (v8)
      goto LABEL_11;
LABEL_14:
    v13 = 0;
    if (!v11)
      goto LABEL_23;
    goto LABEL_17;
  }
  v11 = &v8[v9];
  v10 = v11;
  if (!v8)
    goto LABEL_14;
LABEL_11:
  v13 = &v8[*(v8 - 1)];
  if (v13 == v11)
    goto LABEL_23;
  do
  {
LABEL_17:
    v14 = v11 + 1;
    *(_DWORD *)(16 * *v11 + 0x10) &= ~0x10u;
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while (*v11 <= 1u)
      {
        if (++v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  while (v11 != v13);
  v8 = *(_DWORD **)this;
LABEL_23:
  if (v8)
    WTF::fastFree((unint64_t)(v8 - 4), a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;

  v8 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  v9 = *(v8 - 1);
  v10 = &v8[v9];
  if (*(v8 - 3))
  {
    v11 = *(_DWORD **)this;
    if ((_DWORD)v9)
    {
      v12 = 4 * v9;
      v11 = *(_DWORD **)this;
      while (*v11 <= 1u)
      {
        ++v11;
        v12 -= 4;
        if (!v12)
        {
          v11 = v10;
          if (v8)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
    }
LABEL_10:
    if (v8)
      goto LABEL_11;
LABEL_14:
    v13 = 0;
    if (!v11)
      goto LABEL_23;
    goto LABEL_17;
  }
  v11 = &v8[v9];
  v10 = v11;
  if (!v8)
    goto LABEL_14;
LABEL_11:
  v13 = &v8[*(v8 - 1)];
  if (v13 == v11)
    goto LABEL_23;
  do
  {
LABEL_17:
    v14 = v11 + 1;
    *(_DWORD *)(16 * *v11 + 0x10) &= ~0x10u;
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while (*v11 <= 1u)
      {
        if (++v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  while (v11 != v13);
  v8 = *(_DWORD **)this;
LABEL_23:
  if (v8)
    WTF::fastFree((unint64_t)(v8 - 4), a2, a3, a4, a5, a6, a7, a8);
}

WTF::AutodrainedPool *WTF::AutodrainedPool::AutodrainedPool(WTF::AutodrainedPool *this)
{
  *(_QWORD *)this = MEMORY[0x19AEBB88C]();
  return this;
}

{
  *(_QWORD *)this = MEMORY[0x19AEBB88C]();
  return this;
}

void WTF::AutodrainedPool::~AutodrainedPool(void **this)
{
  objc_autoreleasePoolPop(*this);
}

{
  objc_autoreleasePoolPop(*this);
}

uint64_t WTF::AutomaticThreadCondition::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::AutomaticThreadCondition::AutomaticThreadCondition(uint64_t this)
{
  *(_DWORD *)this = 1;
  *(_BYTE *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)this = 1;
  *(_BYTE *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void WTF::AutomaticThreadCondition::~AutomaticThreadCondition(WTF::AutomaticThreadCondition *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::AutomaticThreadCondition::notifyOne(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  _QWORD v17[2];
  char v18;
  _QWORD v19[3];

  v8 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a1 + 8);
    v10 = 8 * v8;
    v11 = 8 * v8;
    v12 = v9;
    while (1)
    {
      v13 = *v12;
      if (*(_BYTE *)(*v12 + 43))
      {
        if (*(_BYTE *)(v13 + 42))
          break;
      }
      ++v12;
      v11 -= 8;
      if (!v11)
      {
        while (*(_BYTE *)(*v9 + 43))
        {
          ++v9;
          v10 -= 8;
          if (!v10)
            goto LABEL_11;
        }
        WTF::AutomaticThread::start(*v9);
        return;
      }
    }
    *(_BYTE *)(v13 + 42) = 0;
    v14 = (unsigned __int8 *)(v13 + 44);
    v15 = atomic_load((unsigned __int8 *)(v13 + 44));
    if ((v15 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    v14 = (unsigned __int8 *)(a1 + 4);
    v16 = atomic_load(v14);
    if ((v16 & 1) != 0)
    {
LABEL_12:
      v18 = 0;
      v17[0] = v14;
      v17[1] = &v18;
      v19[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v19[1] = v19;
      v19[2] = v17;
      WTF::ParkingLot::unparkOneImpl((uint64_t)v14, (unint64_t)v19, a3, a4, a5, a6, a7, a8);
    }
  }
}

BOOL WTF::AutomaticThread::isWaiting(uint64_t a1)
{
  return *(_BYTE *)(a1 + 43) && *(_BYTE *)(a1 + 42) != 0;
}

BOOL WTF::AutomaticThread::notify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  _QWORD v12[2];
  char v13;
  _QWORD v14[3];

  v8 = 0;
  *(_BYTE *)(a1 + 42) = 0;
  v9 = (unsigned __int8 *)(a1 + 44);
  v10 = atomic_load(v9);
  if ((v10 & 1) != 0)
  {
    v13 = 0;
    v12[0] = v9;
    v12[1] = &v13;
    v14[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v14[1] = v14;
    v14[2] = v12;
    WTF::ParkingLot::unparkOneImpl((uint64_t)v9, (unint64_t)v14, a3, a4, a5, a6, a7, a8);
    return v13 != 0;
  }
  return v8;
}

uint64_t WTF::AutomaticThread::start(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  WTF::Thread *v9;
  unint64_t *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  WTF::Thread *v35;

  if (!*(_BYTE *)(a1 + 41))
  {
    __break(0xC471u);
    JUMPOUT(0x197AB212CLL);
  }
  v2 = (unsigned int *)(a1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_BYTE *)(a1 + 43) = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v6 = v5;
  do
    v7 = __ldaxr(v2);
  while (__stlxr(v7 + 1, v2));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E35718E8;
  v8[1] = a1;
  v8[2] = a1;
  v34 = v8;
  WTF::Thread::create(v4, v6, (uint64_t *)&v34, 1, 0, (uint64_t *)&v35);
  v9 = v35;
  v10 = (unint64_t *)((char *)v35 + 8);
  if (__ldaxr((unint64_t *)v35 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v10))
  {
    goto LABEL_10;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)v10);
LABEL_10:
  pthread_detach(*((pthread_t *)v9 + 5));
  if ((*((_BYTE *)v9 + 5) & 2) == 0)
    *((_BYTE *)v9 + 4) = 2;
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
LABEL_17:
    WTF::WordLock::unlockSlow((WTF::WordLock *)v10);
    v20 = (unsigned int *)v35;
    v35 = 0;
    if (!v20)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
    goto LABEL_17;
  v20 = (unsigned int *)v35;
  v35 = 0;
  if (!v20)
    goto LABEL_20;
  do
  {
LABEL_18:
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (v22)
  {
LABEL_20:
    result = (uint64_t)v34;
    v34 = 0;
    if (!result)
      goto LABEL_22;
    goto LABEL_21;
  }
  atomic_store(1u, v20);
  WTF::Thread::~Thread((WTF::Thread *)v20, v12, v13, v14, v15, v16, v17, v18);
  WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  result = (uint64_t)v34;
  v34 = 0;
  if (result)
  {
LABEL_21:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    goto LABEL_22;
  }
  do
  {
LABEL_22:
    v24 = __ldaxr(v2);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v2));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)(a1 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  return result;
}

void WTF::AutomaticThreadCondition::notifyAll(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  _QWORD v17[2];
  char v18;
  _QWORD v19[3];

  v9 = (unsigned __int8 *)(a1 + 4);
  v10 = atomic_load(v9);
  if ((v10 & 1) != 0)
  {
    atomic_store(0, v9);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(a1 + 8);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      if (*(_BYTE *)(*v12 + 43))
      {
        if (*(_BYTE *)(v14 + 42))
        {
          *(_BYTE *)(v14 + 42) = 0;
          v15 = (unsigned __int8 *)(v14 + 44);
          v16 = atomic_load(v15);
          if ((v16 & 1) != 0)
          {
            v18 = 0;
            v17[0] = v15;
            v17[1] = &v18;
            v19[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
            v19[1] = v19;
            v19[2] = v17;
            WTF::ParkingLot::unparkOneImpl((uint64_t)v15, (unint64_t)v19, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        WTF::AutomaticThread::start(v14);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
}

uint64_t WTF::AutomaticThreadCondition::wait(WTF::AutomaticThreadCondition *this, Lock *a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x7FF0000000000000;
  v4 = 0;
  return WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 4, &a2->m_byte.value.__a_.__a_value, (WTF::TimeWithDynamicClockType *)&v3);
}

uint64_t WTF::AutomaticThreadCondition::waitFor(uint64_t a1, unsigned __int8 *a2, double a3)
{
  double v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v10;
  int v11;
  char v12;
  double *v13;

  v3 = a3;
  if (fabs(a3) != INFINITY)
  {
    v6 = mach_absolute_time();
    v8 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v8 != -1)
    {
      v10 = COERCE_DOUBLE(&v12);
      v13 = &v10;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v7) = dword_1ECF4400C;
    v3 = v3 + (double)(v6 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v7 * 1000000000.0);
  }
  v10 = v3;
  v11 = 1;
  return WTF::Condition::waitUntilUnchecked<WTF::Lock>(a1 + 4, a2, (WTF::TimeWithDynamicClockType *)&v10);
}

uint64_t WTF::AutomaticThread::AutomaticThread(uint64_t a1, void *a2, unsigned int **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;

  v10 = *a3;
  if (*a3)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = off_1E3571898;
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 + 1, v10));
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = off_1E3571898;
  }
  *(_QWORD *)(a1 + 16) = v10;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = a9;
  *(_WORD *)(a1 + 40) = 256;
  *(_DWORD *)(a1 + 42) = 0;
  v20 = a1;
  v14 = (_QWORD *)(v13 + 8);
  v15 = *(unsigned int *)(v13 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v13 + 16))
  {
    v16 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v20);
    v15 = *(unsigned int *)(v13 + 20);
    *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v15) = *v16;
  }
  else
  {
    *(_QWORD *)(*v14 + 8 * v15) = a1;
  }
  *(_DWORD *)(v13 + 20) = v15 + 1;
  if (!v10)
    return a1;
  do
  {
    v17 = __ldaxr(v10);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v10));
  if (v18)
    return a1;
  atomic_store(1u, v10);
  WTF::fastFree((unint64_t)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::AutomaticThread::AutomaticThread(uint64_t a1, double a2, uint64_t a3, unsigned int **a4, uint64_t *a5, char a6)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3571898;
  v7 = *a4;
  if (*a4)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 16) = v7;
  v9 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 24) = v9;
  *(double *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 41) = 1;
  *(_DWORD *)(a1 + 42) = 0;
  v14 = a1;
  v10 = (_QWORD *)(v9 + 8);
  v11 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v9 + 16))
  {
    v12 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v14);
    v11 = *(unsigned int *)(v9 + 20);
    *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v11) = *v12;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v11) = a1;
  }
  *(_DWORD *)(v9 + 20) = v11 + 1;
  return a1;
}

void WTF::AutomaticThread::~AutomaticThread(WTF::AutomaticThread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  WTF::AutomaticThread **v13;
  uint64_t v14;
  WTF::AutomaticThread *v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;

  *(_QWORD *)this = off_1E3571898;
  v9 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = *((_QWORD *)this + 3);
  v12 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v12)
  {
    v13 = *(WTF::AutomaticThread ***)(v11 + 8);
    if (*v13 == this)
    {
      v14 = 0;
LABEL_12:
      memmove(&v13[v14], &v13[v14 + 1], 8 * v12 - (8 * v14 + 8));
      --*(_DWORD *)(v11 + 20);
    }
    else
    {
      v14 = 0;
      while (v12 - 1 != v14)
      {
        v15 = v13[++v14];
        if (v15 == this)
          goto LABEL_12;
      }
    }
  }
  v16 = __ldxr(v9);
  if (v16 != 1)
  {
    __clrex();
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    v17 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v17)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (__stlxr(0, v9))
    goto LABEL_18;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v17)
    goto LABEL_21;
  do
  {
LABEL_19:
    v18 = __ldaxr((unsigned int *)v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v17));
  if (v19)
  {
LABEL_21:
    v20 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v20)
      return;
    goto LABEL_22;
  }
  atomic_store(1u, (unsigned int *)v17);
  v23 = *(_QWORD *)(v17 + 8);
  if (v23)
  {
    *(_QWORD *)(v17 + 8) = 0;
    *(_DWORD *)(v17 + 16) = 0;
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  v20 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    do
    {
LABEL_22:
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::AutomaticThread::tryStop(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 41))
  {
    if (*(_BYTE *)(a1 + 43))
      return 0;
    *(_BYTE *)(a1 + 41) = 0;
  }
  return 1;
}

void WTF::AutomaticThread::join(WTF::AutomaticThread *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;

  v9 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  while (*((_BYTE *)this + 41))
  {
    v11 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 4);
    v13 = 0x7FF0000000000000;
    v14 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 45, v11, (WTF::TimeWithDynamicClockType *)&v13);
  }
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

const char *WTF::AutomaticThread::name(WTF::AutomaticThread *this)
{
  return "WTF::AutomaticThread";
}

uint64_t WTF::AutomaticThread::shouldSleep()
{
  return 1;
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, __int16 a2)
{
  unsigned __int8 **v2;

  v2 = *(unsigned __int8 ***)(a1 + 16);
  if ((a2 & 0x100) == 0)
    atomic_store(0, *v2);
  *v2[1] = a2 & 1;
  return 0;
}

uint64_t WTF::Condition::waitUntilUnchecked<WTF::Lock>(uint64_t a1, unsigned __int8 *a2, WTF::TimeWithDynamicClockType *this)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  unsigned __int8 *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[3];

  v6 = COERCE_DOUBLE(WTF::TimeWithDynamicClockType::nowWithSameClock(this));
  if (*((_DWORD *)this + 2) == v13)
  {
    if (*(double *)this >= v6)
    {
      v20 = a2;
      v21 = a1;
      v23[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      v23[1] = v23;
      v23[2] = &v21;
      v22[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v22[1] = v22;
      v22[2] = &v20;
      v15 = WTF::ParkingLot::parkConditionallyImpl(a1, (uint64_t)v23, (uint64_t)v22, this) & 1;
      if (!__ldaxr(a2))
        goto LABEL_11;
      goto LABEL_8;
    }
    v14 = __ldxr(a2);
    if (v14 == 1)
    {
      if (!__stlxr(0, a2))
      {
        v15 = 0;
        if (!__ldaxr(a2))
        {
LABEL_11:
          if (!__stxr(1u, a2))
            return v15;
LABEL_12:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2);
          return v15;
        }
LABEL_8:
        __clrex();
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(a2, 0, v7, v8, v9, v10, v11, v12);
    v15 = 0;
    if (!__ldaxr(a2))
      goto LABEL_11;
    goto LABEL_8;
  }
  result = 109;
  __break(0xC471u);
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  atomic_store(1u, **(unsigned __int8 ***)(a1 + 16));
  return 1;
}

void WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v9;

  v8 = **(unsigned __int8 ***)(a1 + 16);
  v9 = __ldxr(v8);
  if (v9 == 1)
  {
    if (!__stlxr(0, v8))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 8 * v6 <= a3))
  {
    v20 = *(unsigned int *)(a1 + 8);
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= a2)
      v23 = a2;
    else
      v23 = v22;
    if (v23 > v20)
    {
      if (v23 >> 29)
        goto LABEL_30;
      v24 = *(unsigned int *)(a1 + 12);
      v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
      *(_DWORD *)(a1 + 8) = v23;
      *(_QWORD *)a1 = v25;
      memcpy(v25, v5, 8 * v24);
      if (v5)
      {
        if (*(const void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 29))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 8 * v6);
      v19 = *(const void **)a1;
      if (v5)
      {
        if (v19 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
        v19 = *(const void **)a1;
      }
      return (unint64_t)v19 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x197AB2AC8);
  }
  v19 = *(const void **)a1;
  return (unint64_t)v19 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::AutomaticThread::start(WTF::AbstractLocker const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E35718E8;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<WTF::AutomaticThread::start(WTF::AbstractLocker const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;

  *a1 = &off_1E35718E8;
  v9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v9)
    goto LABEL_5;
  v10 = v9 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    v13 = (unint64_t)a1;
  }
  else
  {
LABEL_5:
    v13 = (unint64_t)a1;
  }
  WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<WTF::AutomaticThread::start(WTF::AbstractLocker const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  int v35;
  unsigned __int8 v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 *v61;
  char v62;
  double v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  unsigned __int8 *v68;
  unsigned __int8 **v69;
  uint64_t *v70;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  v5 = (unsigned __int8 *)(v2 + 45);
  while (2)
  {
    v6 = (unsigned __int8 *)(*(_QWORD *)(v2 + 16) + 4);
    v61 = v6;
    v62 = 1;
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_9;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v6);
    while (1)
    {
LABEL_9:
      v8 = (*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v2 + 24))(v2, &v61);
      if (!v8)
      {
        v35 = 1;
        if (!v62)
          goto LABEL_41;
        goto LABEL_36;
      }
      if (v8 == 1)
        break;
      if (v8 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB2FA0);
      }
      *(_BYTE *)(v2 + 42) = 1;
      v16 = *(_QWORD *)(v2 + 16);
      v17 = *(double *)(v2 + 32);
      if (fabs(v17) != INFINITY)
      {
        v18 = mach_absolute_time();
        v20 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v20 != -1)
        {
          v68 = (unsigned __int8 *)&v63;
          v67[0] = &v68;
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        LODWORD(v19) = dword_1ECF4400C;
        v17 = v17
            + (double)(v18 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v19 * 1000000000.0);
      }
      v63 = v17;
      v64 = 1;
      v21 = COERCE_DOUBLE(WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v63));
      if (v64 != v30)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB2FC0);
      }
      v31 = (unsigned __int8 *)(v16 + 4);
      v28.n128_f64[0] = v21;
      v29.n128_f64[0] = v63;
      if (v63 >= v21)
      {
        v65 = v16 + 4;
        v66 = v2 + 44;
        v68 = (unsigned __int8 *)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        v69 = &v68;
        v70 = &v66;
        v67[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v67[1] = v67;
        v67[2] = &v65;
        WTF::ParkingLot::parkConditionallyImpl(v2 + 44, (uint64_t)&v68, (uint64_t)v67, (WTF::TimeWithDynamicClockType *)&v63);
LABEL_22:
        if (!__ldaxr(v31))
          goto LABEL_26;
        goto LABEL_23;
      }
      v32 = __ldxr(v31);
      if (v32 == 1)
      {
        if (!__stlxr(0, v31))
          goto LABEL_22;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v16 + 4), 0, v22, v23, v24, v25, v26, v27);
      if (!__ldaxr(v31))
      {
LABEL_26:
        if (!__stxr(1u, v31))
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_23:
      __clrex();
LABEL_27:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16 + 4);
LABEL_28:
      if (*(_BYTE *)(v2 + 42)
        && (*(unsigned int (**)(uint64_t, unsigned __int8 **, __n128, __n128))(*(_QWORD *)v2 + 56))(v2, &v61, v28, v29))
      {
        *(_BYTE *)(v2 + 42) = 0;
        goto LABEL_35;
      }
    }
    *(_BYTE *)(v2 + 41) = 0;
    v36 = atomic_load((unsigned __int8 *)(v2 + 45));
    if ((v36 & 1) != 0)
    {
      atomic_store(0, v5);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(v2 + 45), v9, v10, v11, v12, v13, v14, v15);
    }
LABEL_35:
    (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v1 + 48))(v1, &v61);
    v35 = 0;
    *(_BYTE *)(v1 + 43) = 0;
    if (!v62)
      goto LABEL_41;
LABEL_36:
    v37 = v61;
    v38 = __ldxr(v61);
    if (v38 != 1)
    {
      __clrex();
      goto LABEL_40;
    }
    if (__stlxr(0, v61))
LABEL_40:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, v10, v11, v12, v13, v14, v15);
LABEL_41:
    if (v35)
    {
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
      if (v39 != 1)
      {
        if (v39)
        {
          __break(0xC471u);
          JUMPOUT(0x197AB2EACLL);
        }
        continue;
      }
      v47 = (unsigned __int8 *)(*(_QWORD *)(v2 + 16) + 4);
      v68 = v47;
      LOBYTE(v69) = 1;
      if (__ldaxr(v47))
      {
        __clrex();
        goto LABEL_48;
      }
      if (__stxr(1u, v47))
LABEL_48:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v47);
      *(_BYTE *)(v2 + 41) = 0;
      v49 = atomic_load((unsigned __int8 *)(v2 + 45));
      if ((v49 & 1) != 0)
      {
        atomic_store(0, v5);
        WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(v2 + 45), v40, v41, v42, v43, v44, v45, v46);
      }
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v1 + 48))(v1, &v68);
      *(_BYTE *)(v1 + 43) = 0;
      if ((_BYTE)v69)
      {
        v56 = v68;
        v57 = __ldxr(v68);
        if (v57 == 1)
        {
          if (!__stlxr(0, v68))
            break;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v56, 0, v50, v51, v52, v53, v54, v55);
      }
    }
    break;
  }
  v58 = (unsigned int *)(v1 + 8);
  do
  {
    v59 = __ldaxr(v58);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v58));
  if (!v60)
  {
    atomic_store(1u, (unsigned int *)(v1 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
}

uint64_t WTF::base64Encode(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 v33;
  unint64_t v34;
  unsigned int v35;

  if (a4)
  {
    v5 = (char *)&WTF::base64EncMap;
    if ((a5 & 1) != 0)
      v5 = (char *)&WTF::base64URLEncMap;
    if (a2 > 2)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = v7;
        if (a4 <= v7)
          goto LABEL_43;
        *(_WORD *)(a3 + 2 * v7) = v5[(unint64_t)*(unsigned __int8 *)(result + v6) >> 2];
        v10 = v8 + 1;
        if (a2 <= v10)
          goto LABEL_43;
        v11 = v7 + 1;
        if (a4 <= v11)
          goto LABEL_43;
        *(_WORD *)(a3 + 2 * v11) = v5[((unint64_t)*(unsigned __int8 *)(result + v10) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)(result + v6) & 3))];
        v12 = v8 + 2;
        if (a2 <= v12)
          goto LABEL_43;
        v13 = v9 + 2;
        if (a4 <= v13)
          goto LABEL_43;
        v14 = v9 + 3;
        *(_WORD *)(a3 + 2 * v13) = v5[((unint64_t)*(unsigned __int8 *)(result + v12) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(_BYTE *)(result + v10) & 0xF))];
        if (a4 <= v14)
          goto LABEL_43;
        v15 = v5[*(_BYTE *)(result + v12) & 0x3F];
        v7 = v9 + 4;
        *(_WORD *)(a3 + 2 * v14) = v15;
        v8 += 3;
        v6 = v8;
        if (a2 - 2 <= v8)
        {
          v16 = v8;
          if (a2 <= v8)
            goto LABEL_21;
          goto LABEL_14;
        }
      }
    }
    v7 = 0;
    v16 = 0;
    if (!a2)
    {
LABEL_21:
      if ((a5 & 2) != 0)
        return result;
      goto LABEL_26;
    }
LABEL_14:
    if (a4 > v7)
    {
      v17 = (char *)(result + v16);
      v18 = v7 | 1;
      *(_WORD *)(a3 + 2 * v7) = v5[(unint64_t)*(unsigned __int8 *)(result + v16) >> 2];
      if (a2 - 1 <= v16)
      {
        if (a4 > v18)
        {
          v22 = 2;
          v23 = 48;
          v24 = 4;
          v20 = v7 | 1;
LABEL_25:
          v7 |= v22;
          *(_WORD *)(a3 + 2 * v20) = v5[((unint64_t)*v17 << v24) & v23];
          if ((a5 & 2) != 0)
            return result;
LABEL_26:
          v25 = v7;
          if (a4 <= v7)
            return result;
          v26 = v7 + 1;
          v27 = a4 - v26;
          if (a4 < v26)
            v27 = 0;
          v28 = v27 + 1;
          if (v28 < 0x28)
            goto LABEL_39;
          v29 = a4 >= v26;
          v30 = a4 - v26;
          if (!v29)
            v30 = 0;
          if (__CFADD__(v7, (_DWORD)v30) || -2 - v7 < v30 || HIDWORD(v30))
          {
LABEL_39:
            v31 = v7;
          }
          else
          {
            v31 = (v28 & 0xFFFFFFFFFFFFFFF0) + v7;
            v7 += v28 & 0xFFFFFFF0;
            v32 = (_OWORD *)(a3 + 2 * v25 + 16);
            *(_QWORD *)&v33 = 0x3D003D003D003DLL;
            *((_QWORD *)&v33 + 1) = 0x3D003D003D003DLL;
            v34 = v28 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              *(v32 - 1) = v33;
              *v32 = v33;
              v32 += 2;
              v34 -= 16;
            }
            while (v34);
            if (v28 == (v28 & 0xFFFFFFFFFFFFFFF0))
              return result;
          }
          v35 = v7 + 1;
          do
          {
            *(_WORD *)(a3 + 2 * v31) = 61;
            v31 = v35++;
          }
          while (a4 > v31);
          return result;
        }
      }
      else
      {
        v19 = (v16 + 1);
        if (a2 > v19 && a4 > v18)
        {
          v20 = v7 | 2;
          v21 = *v17;
          v17 = (char *)(result + v19);
          *(_WORD *)(a3 + 2 * v18) = v5[((unint64_t)*(unsigned __int8 *)(result + v19) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v21 & 3))];
          if (a4 > v20)
          {
            v22 = 3;
            v23 = 60;
            v24 = 2;
            goto LABEL_25;
          }
        }
      }
    }
LABEL_43:
    __break(1u);
  }
  return result;
}

{
  if (a4)
    return WTF::base64EncodeInternal<unsigned char>(result, a2, a3, a4, a5);
  return result;
}

uint64_t WTF::base64EncodeInternal<unsigned char>(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;

  v6 = (unint64_t)&WTF::base64EncMap;
  if ((a5 & 1) != 0)
    v6 = (unint64_t)&WTF::base64URLEncMap;
  if (a2 > 2)
  {
    v7 = 0;
    LODWORD(v8) = 0;
    LODWORD(v9) = 0;
    while (1)
    {
      v5 = v8;
      if (a4 <= v8)
        goto LABEL_48;
      *(_BYTE *)(a3 + v8) = *(_BYTE *)(v6 + ((unint64_t)*(unsigned __int8 *)(result + v7) >> 2));
      v10 = (v9 + 1);
      if (a2 <= v10)
        goto LABEL_48;
      v8 = (v8 + 1);
      if (a4 <= v8)
        goto LABEL_48;
      *(_BYTE *)(a3 + v8) = *(_BYTE *)(v6
                                     + (((unint64_t)*(unsigned __int8 *)(result + v10) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)(result + v7) & 3))));
      v8 = (v9 + 2);
      if (a2 <= v8)
        goto LABEL_48;
      v11 = (v5 + 2);
      if (a4 <= v11)
        goto LABEL_48;
      v12 = (v5 + 3);
      *(_BYTE *)(a3 + v11) = *(_BYTE *)(v6
                                      + (((unint64_t)*(unsigned __int8 *)(result + v8) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(_BYTE *)(result + v10) & 0xF))));
      if (a4 <= v12)
        goto LABEL_48;
      v13 = *(_BYTE *)(v6 + (*(_BYTE *)(result + v8) & 0x3F));
      LODWORD(v8) = v5 + 4;
      *(_BYTE *)(a3 + v12) = v13;
      LODWORD(v9) = v9 + 3;
      v7 = v9;
      if (a2 - 2 <= v9)
      {
        v9 = v9;
        if (a2 <= v9)
          goto LABEL_20;
        goto LABEL_13;
      }
    }
  }
  LODWORD(v8) = 0;
  v9 = 0;
  if (!a2)
  {
LABEL_20:
    if ((a5 & 2) != 0)
      return result;
    goto LABEL_25;
  }
LABEL_13:
  if (a4 <= v8)
    goto LABEL_48;
  v14 = (char *)(result + v9);
  v5 = v8 | 1;
  *(_BYTE *)(a3 + v8) = *(_BYTE *)(v6 + ((unint64_t)*(unsigned __int8 *)(result + v9) >> 2));
  if (a2 - 1 > v9)
  {
    v15 = (v9 + 1);
    if (a2 > v15 && a4 > v5)
    {
      v16 = v8 | 2;
      v17 = *v14;
      v14 = (char *)(result + v15);
      *(_BYTE *)(a3 + v5) = *(_BYTE *)(v6
                                     + (((unint64_t)*(unsigned __int8 *)(result + v15) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v17 & 3))));
      if (a4 > v16)
      {
        v18 = 3;
        v19 = 60;
        v20 = 2;
        goto LABEL_24;
      }
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v16 = v5;
  if (a4 <= v5)
    goto LABEL_48;
  v18 = 2;
  v19 = 48;
  v20 = 4;
LABEL_24:
  LODWORD(v8) = v18 | v8;
  *(_BYTE *)(a3 + v16) = *(_BYTE *)(v6 + (((unint64_t)*v14 << v20) & v19));
  if ((a5 & 2) != 0)
    return result;
LABEL_25:
  v6 = v8;
  if (a4 <= v8)
    return result;
  v21 = (v8 + 1);
  v22 = a4 - v21;
  if (a4 < v21)
    v22 = 0;
  v23 = v22 + 1;
  if (v23 < 8)
    goto LABEL_29;
  v26 = a4 >= v21;
  v27 = a4 - v21;
  if (!v26)
    v27 = 0;
  if (__CFADD__((_DWORD)v8, (_DWORD)v27) || -2 - (int)v8 < v27 || HIDWORD(v27))
  {
LABEL_29:
    v24 = v8;
    goto LABEL_30;
  }
  if (v23 >= 0x20)
  {
    v5 = v23 & 0xFFFFFFFFFFFFFFE0;
    v28 = (_OWORD *)(v8 + a3 + 16);
    *(_QWORD *)&v29 = 0x3D3D3D3D3D3D3D3DLL;
    *((_QWORD *)&v29 + 1) = 0x3D3D3D3D3D3D3D3DLL;
    v30 = v23 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      *(v28 - 1) = v29;
      *v28 = v29;
      v28 += 2;
      v30 -= 32;
    }
    while (v30);
    if (v23 == v5)
      return result;
    if ((v23 & 0x18) == 0)
    {
LABEL_49:
      LODWORD(v8) = v8 + v5;
      v24 = v5 + v6;
LABEL_30:
      v25 = v8 + 1;
      do
      {
        *(_BYTE *)(a3 + v24) = 61;
        v24 = v25++;
      }
      while (a4 > v24);
      return result;
    }
  }
  else
  {
    v5 = 0;
  }
  v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v8;
  LODWORD(v8) = v8 + (v23 & 0xFFFFFFF8);
  v31 = v5 - (v23 & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(a3 + v5 + v6);
  do
  {
    *v32++ = 0x3D3D3D3D3D3D3D3DLL;
    v31 += 8;
  }
  while (v31);
  if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_30;
  return result;
}

uint64_t WTF::base64EncodeToVector@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if ((a2 + 1115575925) < 0x427E5676)
    goto LABEL_5;
  v6 = result;
  if ((a3 & 2) != 0)
  {
    v8 = (4 * a2) | 2;
    if (v8 != 2)
    {
      v7 = v8 / 3;
      goto LABEL_7;
    }
LABEL_5:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
  v7 = (2 * ((2863311531u * (unint64_t)(a2 + 2)) >> 32)) & 0xFFFFFFFC;
LABEL_7:
  *(_DWORD *)(a4 + 12) = v7;
  v10 = WTF::fastMalloc((WTF *)v7);
  *(_DWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v10;
  return WTF::base64EncodeInternal<unsigned char>(v6, a2, v10, v7, a3);
}

uint64_t WTF::base64EncodeToString@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W2>, int **a4@<X8>)
{
  int *v6;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int *v13;

  if ((a2 + 1115575925) < 0x427E5676)
    goto LABEL_2;
  v8 = result;
  if ((a3 & 2) != 0)
  {
    v12 = (4 * a2) | 2;
    if (v12 == 2)
    {
LABEL_2:
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
LABEL_7:
      *a4 = v6;
      return result;
    }
    v10 = v12 / 3;
    v11 = v12 / 3;
    result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20), &v13);
    v6 = v13;
    if (v13)
    {
LABEL_6:
      *v6 = 2;
      v6[1] = v10;
      *((_QWORD *)v6 + 1) = v6 + 5;
      v6[4] = 4;
      result = WTF::base64EncodeInternal<unsigned char>(v8, a2, (uint64_t)(v6 + 5), v11, a3);
      goto LABEL_7;
    }
  }
  else
  {
    v9 = (2863311531u * (unint64_t)(a2 + 2)) >> 32;
    v10 = (2 * v9) & 0xFFFFFFFC;
    if (((v9 & 0x40000000) != 0) == __OFSUB__(a2 + 1115575925, 1115575926))
    {
      v11 = v10;
      result = WTF::tryFastCompactMalloc((WTF *)(v10 + 20), &v13);
      v6 = v13;
      if (v13)
        goto LABEL_6;
    }
  }
  *a4 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WTF::base64EncodeToStringReturnNullIfOverflow@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W2>, int **a4@<X8>)
{
  int *v6;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;

  if ((a2 + 1115575925) < 0x427E5676)
    goto LABEL_2;
  v8 = result;
  if ((a3 & 2) != 0)
  {
    v11 = (4 * a2) | 2;
    if (v11 == 2)
    {
LABEL_2:
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_11;
    }
    v10 = v11 / 3;
  }
  else
  {
    v9 = (2863311531u * (unint64_t)(a2 + 2)) >> 32;
    v10 = (2 * v9) & 0xFFFFFFFC;
    if (((v9 & 0x40000000) != 0) != __OFSUB__(a2 + 1115575925, 1115575926))
    {
      v6 = 0;
      goto LABEL_11;
    }
  }
  result = WTF::tryFastCompactMalloc((WTF *)(v10 + 20), &v13);
  v6 = v13;
  if (v13)
  {
    v12 = (uint64_t)(v13 + 5);
    *v13 = 2;
    v6[1] = v10;
    *((_QWORD *)v6 + 1) = v6 + 5;
    v6[4] = 4;
    result = WTF::base64EncodeInternal<unsigned char>(v8, a2, v12, v10, a3);
  }
LABEL_11:
  *a4 = v6;
  return result;
}

void WTF::base64Decode(unsigned __int8 *a1@<X0>, WTF *a2@<X1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  if ((unint64_t)a2 >> 32)
  {
    *a4 = 0;
    a4[16] = 0;
  }
  else
  {
    WTF::base64DecodeInternal<unsigned char,WTF::FastMalloc>((uint64_t)a4, a1, a2, a3);
  }
}

void WTF::base64DecodeInternal<unsigned char,WTF::FastMalloc>(uint64_t a1, unsigned __int8 *a2, WTF *a3, char a4)
{
  unsigned __int8 *v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (!a3)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
LABEL_49:
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  if ((a4 & 1) != 0)
    v7 = (unsigned __int8 *)&WTF::base64URLDecMap;
  else
    v7 = (unsigned __int8 *)&WTF::base64DecMap;
  if ((unint64_t)a3 >> 32)
  {
    __break(0xC471u);
    JUMPOUT(0x197AB3C44);
  }
  v9 = WTF::fastMalloc(a3);
  if (a3 <= 1)
    v17 = 1;
  else
    v17 = a3;
  v18 = 0;
  v19 = 0;
  if ((a4 & 4) != 0)
  {
    if ((a4 & 2) == 0)
    {
      while (1)
      {
        v39 = *a2++;
        v38 = v39;
        if (v39 == 61)
        {
          ++v19;
        }
        else if ((v38 & 0x80) != 0 || (v40 = v7[v38], v40 == 255))
        {
          v42 = v38 > 0x20;
          v43 = (1 << v38) & 0x100003600;
          if (v42 || v43 == 0)
            goto LABEL_82;
        }
        else
        {
          if (v19)
            goto LABEL_82;
          v41 = v18;
          if ((unint64_t)a3 <= v18)
            goto LABEL_113;
          v19 = 0;
          ++v18;
          *(_BYTE *)(v9 + v41) = v40;
        }
        if (!--v17)
          goto LABEL_28;
      }
    }
    while (1)
    {
      v46 = *a2++;
      v45 = v46;
      if (v46 == 61)
        break;
      if ((v45 & 0x80) != 0 || (v47 = v7[v45], v47 == 255))
      {
        v42 = v45 > 0x20;
        v49 = (1 << v45) & 0x100003600;
        if (v42 || v49 == 0)
          goto LABEL_82;
LABEL_67:
        if (!--v17)
          goto LABEL_28;
      }
      else
      {
        if (v19)
          goto LABEL_82;
        v48 = v18;
        if ((unint64_t)a3 <= v18)
          goto LABEL_113;
        v19 = 0;
        ++v18;
        *(_BYTE *)(v9 + v48) = v47;
        if (!--v17)
          goto LABEL_28;
      }
    }
    if (++v19 >= 3)
      goto LABEL_82;
    goto LABEL_67;
  }
  if ((a4 & 2) == 0)
  {
    while (1)
    {
      while (1)
      {
        v21 = *a2++;
        v20 = v21;
        if (v21 != 61)
          break;
        ++v19;
        if (!--v17)
          goto LABEL_28;
      }
      if ((v20 & 0x80) != 0)
        goto LABEL_82;
      v22 = v7[v20];
      if (v22 == 255 || v19)
        goto LABEL_82;
      v23 = v18;
      if ((unint64_t)a3 <= v18)
        goto LABEL_113;
      v19 = 0;
      ++v18;
      *(_BYTE *)(v9 + v23) = v22;
      if (!--v17)
        goto LABEL_28;
    }
  }
  do
  {
    while (1)
    {
      v25 = *a2++;
      v24 = v25;
      if (v25 != 61)
        break;
      if (v19 > 1)
        goto LABEL_82;
      ++v19;
      if (!--v17)
        goto LABEL_28;
    }
    if ((v24 & 0x80) != 0)
      goto LABEL_82;
    v26 = v7[v24];
    if (v26 == 255 || v19)
      goto LABEL_82;
    v27 = v18;
    if ((unint64_t)a3 <= v18)
      goto LABEL_113;
    v19 = 0;
    ++v18;
    *(_BYTE *)(v9 + v27) = v26;
    --v17;
  }
  while (v17);
LABEL_28:
  if ((unint64_t)a3 <= v18)
    v28 = a3;
  else
    v28 = v18;
  if (v18)
  {
    if (((a4 & 2) == 0 || !v19 || (((_BYTE)v18 + (_BYTE)v19) & 3) == 0) && (v18 & 3) != 1)
    {
      v29 = v18 - ((v18 + 3) >> 2);
      if (v29)
      {
        if (v29 <= 2)
        {
          v37 = 0;
          v36 = 0;
        }
        else
        {
          v30 = 0;
          v31 = v9 + 2;
          v32 = 3;
          do
          {
            if (v28 <= v32 - 3)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C4CLL);
            }
            if (v28 <= v32 - 2)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C54);
            }
            v33 = v30;
            if (v30 >= v28)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C5CLL);
            }
            v34 = v32 - 2;
            *(_BYTE *)(v9 + v33) = (4 * *(_BYTE *)(v9 + v32 - 3)) | (*(_BYTE *)(v9 + v34) >> 4) & 3;
            if (v28 <= v32 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C64);
            }
            if (v33 + 1 >= v28)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C6CLL);
            }
            v35 = v32 - 1;
            *(_BYTE *)(v31 + v33 - 1) = (16 * *(_BYTE *)(v9 + v34)) | (*(_BYTE *)(v9 + v35) >> 2) & 0xF;
            if (v28 <= v32)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C74);
            }
            if (v33 + 2 >= v28)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB3C7CLL);
            }
            *(_BYTE *)(v31 + v33) = *(_BYTE *)(v9 + v32) & 0x3F | (*(_BYTE *)(v9 + v35) << 6);
            v32 += 4;
            v30 = v33 + 3;
          }
          while (v33 + 3 < v29 - 2);
          v36 = v33 + 3;
          v37 = v32 - 3;
        }
        if (v36 < v29)
        {
          if (v28 <= v37)
          {
            __break(0xC471u);
            JUMPOUT(0x197AB3C84);
          }
          v51 = v37 | 1;
          if (v28 <= v51)
          {
            __break(0xC471u);
            JUMPOUT(0x197AB3C8CLL);
          }
          if (v28 <= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x197AB3C94);
          }
          *(_BYTE *)(v9 + v36) = (4 * *(_BYTE *)(v9 + v37)) | (*(_BYTE *)(v9 + v51) >> 4) & 3;
        }
        v52 = v36 + 1;
        if (v36 + 1 < v29)
        {
          v53 = v37;
          v54 = v37 | 1;
          if (v28 <= v54)
          {
            __break(0xC471u);
            JUMPOUT(0x197AB3C9CLL);
          }
          v55 = v53 | 2;
          if (v28 <= v55)
          {
            __break(0xC471u);
            JUMPOUT(0x197AB3CA4);
          }
          if (v28 <= v52)
          {
LABEL_113:
            __break(0xC471u);
            JUMPOUT(0x197AB3C3CLL);
          }
          *(_BYTE *)(v9 + v52) = (16 * *(_BYTE *)(v9 + v54)) | (*(_BYTE *)(v9 + v55) >> 2) & 0xF;
        }
        if (v28 < v29)
          v29 = v28;
        *(_QWORD *)a1 = v9;
        *(_DWORD *)(a1 + 8) = (_DWORD)a3;
        *(_DWORD *)(a1 + 12) = v29;
        goto LABEL_49;
      }
    }
  }
  else if (!v19)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_83;
  }
LABEL_82:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
LABEL_83:
  WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
}

void WTF::base64Decode(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  unint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = a1;
  v7 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    WTF::base64DecodeInternal<unsigned char,WTF::FastMalloc>(a4, a1, (WTF *)a2, a3);
    return;
  }
  if (!(_DWORD)a2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    goto LABEL_47;
  }
  v8 = a2;
  if ((a3 & 1) != 0)
    v9 = (unsigned __int8 *)&WTF::base64URLDecMap;
  else
    v9 = (unsigned __int8 *)&WTF::base64DecMap;
  v10 = WTF::fastMalloc((WTF *)a2);
  v18 = 0;
  v19 = 0;
  if ((a3 & 4) == 0)
  {
    v20 = v7;
    if ((a3 & 2) != 0)
    {
      while (1)
      {
        v22 = *(unsigned __int16 *)v5;
        v5 += 2;
        v21 = v22;
        if (v22 == 61)
        {
          if (v19 > 1)
            goto LABEL_80;
          ++v19;
        }
        else
        {
          if (v21 > 0x7F)
            goto LABEL_80;
          v23 = v9[v21];
          if (v23 == 255 || v19)
            goto LABEL_80;
          v24 = v18;
          if (v7 <= v18)
            goto LABEL_110;
          v19 = 0;
          ++v18;
          *(_BYTE *)(v10 + v24) = v23;
        }
        if (!--v20)
          goto LABEL_26;
      }
    }
    while (1)
    {
      while (1)
      {
        v26 = *(unsigned __int16 *)v5;
        v5 += 2;
        v25 = v26;
        if (v26 != 61)
          break;
        ++v19;
        if (!--v20)
          goto LABEL_26;
      }
      if (v25 > 0x7F)
        goto LABEL_80;
      v27 = v9[v25];
      if (v27 == 255 || v19)
        goto LABEL_80;
      v28 = v18;
      if (v7 <= v18)
        goto LABEL_110;
      v19 = 0;
      ++v18;
      *(_BYTE *)(v10 + v28) = v27;
      if (!--v20)
        goto LABEL_26;
    }
  }
  v39 = v7;
  if ((a3 & 2) == 0)
  {
    while (1)
    {
      v41 = *(unsigned __int16 *)v5;
      v5 += 2;
      v40 = v41;
      if (v41 == 61)
      {
        ++v19;
      }
      else if (v40 > 0x7F || (v42 = v9[v40], v42 == 255))
      {
        v44 = v40 > 0x20;
        v45 = (1 << v40) & 0x100003600;
        if (v44 || v45 == 0)
          goto LABEL_80;
      }
      else
      {
        if (v19)
          goto LABEL_80;
        v43 = v18;
        if (v7 <= v18)
          goto LABEL_110;
        v19 = 0;
        ++v18;
        *(_BYTE *)(v10 + v43) = v42;
      }
      if (!--v39)
        goto LABEL_26;
    }
  }
  do
  {
    while (1)
    {
      v48 = *(unsigned __int16 *)v5;
      v5 += 2;
      v47 = v48;
      if (v48 == 61)
      {
        if (++v19 >= 3)
          goto LABEL_80;
        goto LABEL_65;
      }
      if (v47 <= 0x7F)
      {
        v49 = v9[v47];
        if (v49 != 255)
          break;
      }
      v44 = v47 > 0x20;
      v51 = (1 << v47) & 0x100003600;
      if (v44 || v51 == 0)
        goto LABEL_80;
LABEL_65:
      if (!--v39)
        goto LABEL_26;
    }
    if (v19)
      goto LABEL_80;
    v50 = v18;
    if (v7 <= v18)
      goto LABEL_110;
    v19 = 0;
    ++v18;
    *(_BYTE *)(v10 + v50) = v49;
    --v39;
  }
  while (v39);
LABEL_26:
  if (v7 <= v18)
    v29 = v8;
  else
    v29 = v18;
  if (!v18)
  {
    if (!v19)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 1;
      goto LABEL_81;
    }
LABEL_80:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
LABEL_81:
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  if ((a3 & 2) != 0 && v19 && (((_BYTE)v18 + (_BYTE)v19) & 3) != 0)
    goto LABEL_80;
  if ((v18 & 3) == 1)
    goto LABEL_80;
  v30 = v18 - ((v18 + 3) >> 2);
  if (!v30)
    goto LABEL_80;
  if (v30 <= 2)
  {
    v38 = 0;
    v37 = 0;
  }
  else
  {
    v31 = 0;
    v32 = v10 + 2;
    v33 = 3;
    do
    {
      if (v29 <= v33 - 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB40E8);
      }
      if (v29 <= v33 - 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB40F0);
      }
      v34 = v31;
      if (v31 >= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB40F8);
      }
      v35 = v33 - 2;
      *(_BYTE *)(v10 + v34) = (4 * *(_BYTE *)(v10 + v33 - 3)) | (*(_BYTE *)(v10 + v35) >> 4) & 3;
      if (v29 <= v33 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB4100);
      }
      if (v34 + 1 >= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB4108);
      }
      v36 = v33 - 1;
      *(_BYTE *)(v32 + v34 - 1) = (16 * *(_BYTE *)(v10 + v35)) | (*(_BYTE *)(v10 + v36) >> 2) & 0xF;
      if (v29 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB4110);
      }
      if (v34 + 2 >= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB4118);
      }
      *(_BYTE *)(v32 + v34) = *(_BYTE *)(v10 + v33) & 0x3F | (*(_BYTE *)(v10 + v36) << 6);
      v33 += 4;
      v31 = v34 + 3;
    }
    while (v34 + 3 < v30 - 2);
    v37 = v34 + 3;
    v38 = v33 - 3;
  }
  if (v37 < v30)
  {
    if (v29 <= v38)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4120);
    }
    v53 = v38 | 1;
    if (v29 <= v53)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4128);
    }
    if (v29 <= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4130);
    }
    *(_BYTE *)(v10 + v37) = (4 * *(_BYTE *)(v10 + v38)) | (*(_BYTE *)(v10 + v53) >> 4) & 3;
  }
  v54 = v37 + 1;
  if (v37 + 1 < v30)
  {
    v55 = v38;
    v56 = v38 | 1;
    if (v29 <= v56)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4138);
    }
    v57 = v55 | 2;
    if (v29 <= v57)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4140);
    }
    if (v29 <= v54)
    {
LABEL_110:
      __break(0xC471u);
      JUMPOUT(0x197AB40E0);
    }
    *(_BYTE *)(v10 + v54) = (16 * *(_BYTE *)(v10 + v56)) | (*(_BYTE *)(v10 + v57) >> 2) & 0xF;
  }
  if (v29 < v30)
    v30 = v29;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 8) = v8;
  *(_DWORD *)(a4 + 12) = v30;
LABEL_47:
  *(_BYTE *)(a4 + 16) = 1;
}

void WTF::base64DecodeToString(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int v5;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v5 = a2;
  v8 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_111;
    if ((a3 & 1) != 0)
      v9 = (unsigned __int8 *)&WTF::base64URLDecMap;
    else
      v9 = (unsigned __int8 *)&WTF::base64DecMap;
    v10 = WTF::fastCompactMalloc((WTF *)a2);
    v18 = v10;
    v19 = 0;
    v20 = 0;
    if ((a3 & 4) == 0)
    {
      v21 = v8;
      if ((a3 & 2) == 0)
      {
        while (1)
        {
          while (1)
          {
            v28 = *a1++;
            v27 = v28;
            if (v28 != 61)
              break;
            ++v20;
            if (!--v21)
              goto LABEL_31;
          }
          if ((v27 & 0x80) != 0)
            goto LABEL_158;
          v29 = v9[v27];
          if (v29 == 255 || v20 != 0)
            goto LABEL_158;
          v31 = v19;
          if (v8 <= v19)
            goto LABEL_205;
          v20 = 0;
          ++v19;
          *(_BYTE *)(v10 + v31) = v29;
          if (!--v21)
            goto LABEL_31;
        }
      }
      do
      {
        while (1)
        {
          v23 = *a1++;
          v22 = v23;
          if (v23 != 61)
            break;
          if (v20 > 1)
            goto LABEL_158;
          ++v20;
          if (!--v21)
            goto LABEL_31;
        }
        if ((v22 & 0x80) != 0)
          goto LABEL_158;
        v24 = v9[v22];
        if (v24 == 255 || v20 != 0)
          goto LABEL_158;
        v26 = v19;
        if (v8 <= v19)
          goto LABEL_205;
        v20 = 0;
        ++v19;
        *(_BYTE *)(v10 + v26) = v24;
        --v21;
      }
      while (v21);
LABEL_31:
      if (v8 <= v19)
        v32 = v5;
      else
        v32 = v19;
      if (v19)
      {
        if ((a3 & 2) != 0 && v20)
        {
          if ((v19 & 3) == 1 || (((_BYTE)v19 + (_BYTE)v20) & 3) != 0)
            goto LABEL_158;
        }
        else if ((v19 & 3) == 1)
        {
          goto LABEL_158;
        }
        v75 = v19 - ((v19 + 3) >> 2);
        if (v75)
        {
          if (v75 <= 2)
          {
            v83 = 0;
            v82 = 0;
          }
          else
          {
            v76 = 0;
            v77 = v10 + 2;
            v78 = 3;
            do
            {
              if (v32 <= v78 - 3)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB497CLL);
              }
              if (v32 <= v78 - 2)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB4984);
              }
              v79 = v76;
              if (v76 >= v32)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB498CLL);
              }
              v80 = v78 - 2;
              *(_BYTE *)(v10 + v79) = (4 * *(_BYTE *)(v10 + v78 - 3)) | (*(_BYTE *)(v10 + v80) >> 4) & 3;
              if (v32 <= v78 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB4994);
              }
              if (v79 + 1 >= v32)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB499CLL);
              }
              v81 = v78 - 1;
              *(_BYTE *)(v77 + v79 - 1) = (16 * *(_BYTE *)(v10 + v80)) | (*(_BYTE *)(v10 + v81) >> 2) & 0xF;
              if (v32 <= v78)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB49A4);
              }
              if (v79 + 2 >= v32)
              {
                __break(0xC471u);
                JUMPOUT(0x197AB49ACLL);
              }
              *(_BYTE *)(v77 + v79) = *(_BYTE *)(v10 + v78) & 0x3F | (*(_BYTE *)(v10 + v81) << 6);
              v78 += 4;
              v76 = v79 + 3;
            }
            while (v79 + 3 < v75 - 2);
            v82 = v79 + 3;
            v83 = v78 - 3;
          }
          if (v82 < v75)
          {
            if (v32 <= v83)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB49ECLL);
            }
            v85 = v83 | 1;
            if (v32 <= v85)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB49F4);
            }
            if (v32 <= v82)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB49FCLL);
            }
            *(_BYTE *)(v10 + v82) = (4 * *(_BYTE *)(v10 + v83)) | (*(_BYTE *)(v10 + v85) >> 4) & 3;
          }
          v86 = v82 + 1;
          if (v82 + 1 < v75)
          {
            v87 = v83;
            v88 = v83 | 1;
            if (v32 <= v88)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB4A04);
            }
            v89 = v87 | 2;
            if (v32 <= v89)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB4A0CLL);
            }
            if (v32 <= v86)
            {
              __break(0xC471u);
              JUMPOUT(0x197AB4A14);
            }
            *(_BYTE *)(v10 + v86) = (16 * *(_BYTE *)(v10 + v88)) | (*(_BYTE *)(v10 + v89) >> 2) & 0xF;
          }
          if (v32 >= v75)
            v90 = v75;
          else
            v90 = v32;
          if (v90)
          {
            if (v90 < 0)
              goto LABEL_233;
            goto LABEL_203;
          }
          goto LABEL_204;
        }
LABEL_158:
        WTF::fastFree(v18, v11, v12, v13, v14, v15, v16, v17);
        *a4 = 0;
        return;
      }
      goto LABEL_109;
    }
    v48 = v8;
    if ((a3 & 2) == 0)
    {
      while (1)
      {
        v50 = *a1++;
        v49 = v50;
        if (v50 == 61)
        {
          ++v20;
        }
        else if ((v49 & 0x80) != 0 || (v51 = v9[v49], v51 == 255))
        {
          v53 = v49 > 0x20;
          v54 = (1 << v49) & 0x100003600;
          if (v53 || v54 == 0)
            goto LABEL_158;
        }
        else
        {
          if (v20)
            goto LABEL_158;
          v52 = v19;
          if (v8 <= v19)
            goto LABEL_205;
          v20 = 0;
          ++v19;
          *(_BYTE *)(v10 + v52) = v51;
        }
        if (!--v48)
          goto LABEL_31;
      }
    }
    while (1)
    {
      v57 = *a1++;
      v56 = v57;
      if (v57 == 61)
        break;
      if ((v56 & 0x80) != 0 || (v58 = v9[v56], v58 == 255))
      {
        v53 = v56 > 0x20;
        v60 = (1 << v56) & 0x100003600;
        if (v53 || v60 == 0)
          goto LABEL_158;
LABEL_95:
        if (!--v48)
          goto LABEL_31;
      }
      else
      {
        if (v20)
          goto LABEL_158;
        v59 = v19;
        if (v8 <= v19)
        {
LABEL_205:
          __break(0xC471u);
          JUMPOUT(0x197AB496CLL);
        }
        v20 = 0;
        ++v19;
        *(_BYTE *)(v10 + v59) = v58;
        if (!--v48)
          goto LABEL_31;
      }
    }
    if (++v20 > 2)
      goto LABEL_158;
    goto LABEL_95;
  }
  if (!(_DWORD)a2)
    goto LABEL_111;
  if ((a3 & 1) != 0)
    v33 = (unsigned __int8 *)&WTF::base64URLDecMap;
  else
    v33 = (unsigned __int8 *)&WTF::base64DecMap;
  v34 = WTF::fastCompactMalloc((WTF *)a2);
  v18 = v34;
  v35 = 0;
  v20 = 0;
  if ((a3 & 4) != 0)
  {
    v62 = v8;
    if ((a3 & 2) == 0)
    {
      while (1)
      {
        v64 = *(unsigned __int16 *)a1;
        a1 += 2;
        v63 = v64;
        if (v64 == 61)
        {
          ++v20;
        }
        else if (v63 > 0x7F || (v65 = v33[v63], v65 == 255))
        {
          v53 = v63 > 0x20;
          v67 = (1 << v63) & 0x100003600;
          if (v53 || v67 == 0)
            goto LABEL_158;
        }
        else
        {
          if (v20)
            goto LABEL_158;
          v66 = v35;
          if (v8 <= v35)
            goto LABEL_206;
          v20 = 0;
          ++v35;
          *(_BYTE *)(v34 + v66) = v65;
        }
        if (!--v62)
          goto LABEL_69;
      }
    }
    while (1)
    {
      v70 = *(unsigned __int16 *)a1;
      a1 += 2;
      v69 = v70;
      if (v70 == 61)
        break;
      if (v69 > 0x7F || (v71 = v33[v69], v71 == 255))
      {
        v53 = v69 > 0x20;
        v73 = (1 << v69) & 0x100003600;
        if (v53 || v73 == 0)
          goto LABEL_158;
LABEL_129:
        if (!--v62)
          goto LABEL_69;
      }
      else
      {
        if (v20)
          goto LABEL_158;
        v72 = v35;
        if (v8 <= v35)
        {
LABEL_206:
          __break(0xC471u);
          JUMPOUT(0x197AB4974);
        }
        v20 = 0;
        ++v35;
        *(_BYTE *)(v34 + v72) = v71;
        if (!--v62)
          goto LABEL_69;
      }
    }
    if (++v20 > 2)
      goto LABEL_158;
    goto LABEL_129;
  }
  v36 = v8;
  if ((a3 & 2) == 0)
  {
    while (1)
    {
      while (1)
      {
        v43 = *(unsigned __int16 *)a1;
        a1 += 2;
        v42 = v43;
        if (v43 != 61)
          break;
        ++v20;
        if (!--v36)
          goto LABEL_69;
      }
      if (v42 > 0x7F)
        goto LABEL_158;
      v44 = v33[v42];
      if (v44 == 255 || v20 != 0)
        goto LABEL_158;
      v46 = v35;
      if (v8 <= v35)
        goto LABEL_206;
      v20 = 0;
      ++v35;
      *(_BYTE *)(v34 + v46) = v44;
      if (!--v36)
        goto LABEL_69;
    }
  }
  do
  {
    while (1)
    {
      v38 = *(unsigned __int16 *)a1;
      a1 += 2;
      v37 = v38;
      if (v38 != 61)
        break;
      if (v20 > 1)
        goto LABEL_158;
      ++v20;
      if (!--v36)
        goto LABEL_69;
    }
    if (v37 > 0x7F)
      goto LABEL_158;
    v39 = v33[v37];
    if (v39 == 255 || v20 != 0)
      goto LABEL_158;
    v41 = v35;
    if (v8 <= v35)
      goto LABEL_206;
    v20 = 0;
    ++v35;
    *(_BYTE *)(v34 + v41) = v39;
    --v36;
  }
  while (v36);
LABEL_69:
  if (v8 <= v35)
    v47 = v5;
  else
    v47 = v35;
  if (!v35)
  {
LABEL_109:
    if (v20)
      goto LABEL_158;
    WTF::fastFree(v18, v11, v12, v13, v14, v15, v16, v17);
LABEL_111:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a4 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return;
  }
  if ((a3 & 2) != 0 && v20)
  {
    if ((v35 & 3) == 1 || (((_BYTE)v35 + (_BYTE)v20) & 3) != 0)
      goto LABEL_158;
  }
  else if ((v35 & 3) == 1)
  {
    goto LABEL_158;
  }
  v84 = v35 - ((v35 + 3) >> 2);
  if (!v84)
    goto LABEL_158;
  if (v84 <= 2)
  {
    v98 = 0;
    v97 = 0;
  }
  else
  {
    v91 = 0;
    v92 = v34 + 2;
    v93 = 3;
    do
    {
      if (v47 <= v93 - 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49B4);
      }
      if (v47 <= v93 - 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49BCLL);
      }
      v94 = v91;
      if (v91 >= v47)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49C4);
      }
      v95 = v93 - 2;
      *(_BYTE *)(v34 + v94) = (4 * *(_BYTE *)(v34 + v93 - 3)) | (*(_BYTE *)(v34 + v95) >> 4) & 3;
      if (v47 <= v93 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49CCLL);
      }
      if (v94 + 1 >= v47)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49D4);
      }
      v96 = v93 - 1;
      *(_BYTE *)(v92 + v94 - 1) = (16 * *(_BYTE *)(v34 + v95)) | (*(_BYTE *)(v34 + v96) >> 2) & 0xF;
      if (v47 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49DCLL);
      }
      if (v94 + 2 >= v47)
      {
        __break(0xC471u);
        JUMPOUT(0x197AB49E4);
      }
      *(_BYTE *)(v92 + v94) = *(_BYTE *)(v34 + v93) & 0x3F | (*(_BYTE *)(v34 + v96) << 6);
      v93 += 4;
      v91 = v94 + 3;
    }
    while (v94 + 3 < v84 - 2);
    v97 = v94 + 3;
    v98 = v93 - 3;
  }
  if (v97 < v84)
  {
    if (v47 <= v98)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4A24);
    }
    v99 = v98 | 1;
    if (v47 <= v99)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4A2CLL);
    }
    if (v47 <= v97)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4A34);
    }
    *(_BYTE *)(v34 + v97) = (4 * *(_BYTE *)(v34 + v98)) | (*(_BYTE *)(v34 + v99) >> 4) & 3;
  }
  v100 = v97 + 1;
  if (v97 + 1 < v84)
  {
    v101 = v98;
    v102 = v98 | 1;
    if (v47 <= v102)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4A3CLL);
    }
    v103 = v101 | 2;
    if (v47 <= v103)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4A44);
    }
    if (v47 <= v100)
    {
LABEL_233:
      __break(0xC471u);
      JUMPOUT(0x197AB4788);
    }
    *(_BYTE *)(v34 + v100) = (16 * *(_BYTE *)(v34 + v102)) | (*(_BYTE *)(v34 + v103) >> 2) & 0xF;
  }
  if (v47 >= v84)
    v90 = v84;
  else
    v90 = v47;
  if (v90)
  {
    if (v90 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197AB4A1CLL);
    }
LABEL_203:
    v104 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v104 = 2;
    *(_DWORD *)(v104 + 4) = v90;
    *(_DWORD *)(v104 + 16) = 5;
    *(_QWORD *)(v104 + 8) = v18;
    WTF::fastFree(0, v105, v106, v107, v108, v109, v110, v111);
    *a4 = v104;
    return;
  }
LABEL_204:
  WTF::StringImpl::s_emptyAtomString += 2;
  *a4 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  WTF::fastFree(v18, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::double_conversion::BignumDtoa(uint64_t result, int a2, _BYTE *a3, uint64_t a4, int *a5, int *a6, double a7)
{
  int v11;
  unsigned int v12;
  float v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  const WTF::double_conversion::Bignum *v30;
  uint64_t v31;
  unsigned int v32;
  _OWORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  _OWORD *v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  _OWORD *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  _OWORD *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  unsigned int v79;
  _OWORD *v80;
  unsigned int v81;
  unsigned int v82;
  _DWORD *v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  unint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  _OWORD *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  _OWORD *v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  uint64_t v119;
  unsigned int v120;
  _OWORD *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  _OWORD *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  _OWORD *v131;
  unsigned int v132;
  unsigned int v133;
  const WTF::double_conversion::Bignum *v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  char *v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  _OWORD *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _OWORD *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _OWORD *v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  char *v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  _OWORD *v169;
  _OWORD *v170;
  _OWORD *v171;
  const WTF::double_conversion::Bignum *v172;
  char v173;
  const WTF::double_conversion::Bignum *v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unsigned int *v181;
  BOOL v182;
  BOOL v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  const WTF::double_conversion::Bignum *v187;
  _BOOL4 v188;
  _BOOL4 v189;
  uint64_t v190;
  unint64_t v191;
  _OWORD *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  _OWORD *v200;
  unint64_t v201;
  char v202;
  const WTF::double_conversion::Bignum *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  unsigned int *v210;
  BOOL v211;
  BOOL v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unint64_t v217;
  _OWORD *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _OWORD *v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  _OWORD *v226;
  unint64_t v227;
  char v228;
  const WTF::double_conversion::Bignum *v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  unsigned int *v236;
  BOOL v237;
  BOOL v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  _OWORD *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _OWORD *v248;
  unint64_t v249;
  char v250;
  const WTF::double_conversion::Bignum *v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  unsigned int *v258;
  BOOL v259;
  BOOL v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  _OWORD *v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _OWORD *v270;
  unint64_t v271;
  _BYTE *v272;
  _BYTE *v273;
  char v274;
  char v275;
  _BYTE *v276;
  char v277;
  _OWORD v278[32];
  _OWORD *v279;
  int v280;
  uint64_t v281;
  _OWORD v282[32];
  _OWORD *v283;
  int v284;
  uint64_t v285;
  _OWORD v286[32];
  _OWORD *v287;
  int v288;
  uint64_t v289;
  _OWORD v290[32];
  _OWORD *v291;
  int v292;
  uint64_t v293;

  v11 = a2;
  v12 = result;
  v13 = a7;
  v14 = ((*(_QWORD *)&a7 >> 52) & 0x7FF) - 1075;
  v15 = *(_QWORD *)&a7 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&a7 & 0x7FF0000000000000) != 0)
    v15 = *(_QWORD *)&a7 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v14 = -1074;
  v16 = (*(_QWORD *)&a7 & 0x7FE0000000000000) != 0 && (*(_QWORD *)&a7 & 0xFFFFFFFFFFFFFLL) == 0;
  v17 = (LODWORD(v13) >> 23) - 150;
  LODWORD(v18) = LODWORD(v13) & 0x7FFFFF;
  if ((LODWORD(v13) & 0x7F800000) != 0)
    v18 = LODWORD(v13) & 0x7FFFFF | 0x800000u;
  else
    v18 = v18;
  if ((LODWORD(v13) & 0x7F800000) == 0)
    v17 = -149;
  v19 = (LODWORD(v13) & 0x7F000000) != 0 && (LODWORD(v13) & 0x7FFFFF) == 0;
  if ((_DWORD)result == 1)
    v20 = v19;
  else
    v20 = v16;
  if ((_DWORD)result == 1)
    v21 = v17;
  else
    v21 = v14;
  if ((_DWORD)result == 1)
    v22 = v18;
  else
    v22 = v15;
  v23 = v21 - __clz(v22 & 0xFFFFFFFFFFFFFLL) + 11;
  if ((v22 & 0x10000000000000) != 0)
    v23 = v21;
  v24 = vcvtpd_s64_f64((double)(v23 + 52) * 0.301029996 + -1.0e-10);
  if ((_DWORD)result == 2 && ~v24 > a2)
  {
    *a3 = 0;
    *a5 = 0;
    *a6 = -a2;
    return result;
  }
  v291 = v290;
  v292 = 128;
  v293 = 0;
  memset(v290, 0, sizeof(v290));
  v287 = v286;
  v288 = 128;
  v289 = 0;
  memset(v286, 0, sizeof(v286));
  v283 = v282;
  v284 = 128;
  v285 = 0;
  memset(v282, 0, sizeof(v282));
  v279 = v278;
  v280 = 128;
  v281 = 0;
  memset(v278, 0, sizeof(v278));
  if ((v21 & 0x80000000) == 0)
  {
    v293 = 0;
    if (v22)
    {
      v25 = v22 & 0xFFFFFFF;
      LODWORD(v290[0]) = v22 & 0xFFFFFFF;
      *(_QWORD *)((char *)v290 + 4) = (v22 >> 28);
      LODWORD(v293) = 2;
      if ((v22 >> 28) || (LODWORD(v293) = 1, v25))
      {
        v26 = 0;
        v27 = 0;
        HIDWORD(v293) = (unsigned __int16)v21 / 0x1Cu;
        do
        {
          v28 = *((_DWORD *)v290 + v26);
          v29 = (v28 << ((unsigned __int16)v21 % 0x1Cu)) + v27;
          v27 = v28 >> (28 - (unsigned __int16)v21 % 0x1Cu);
          *((_DWORD *)v290 + v26++) = v29 & 0xFFFFFFF;
        }
        while (v26 < (int)v293);
        if (!v27)
          goto LABEL_38;
        *((_DWORD *)v290 + (int)v293) = v27;
        v25 = v293 + 1;
      }
      LODWORD(v293) = v25;
    }
LABEL_38:
    WTF::double_conversion::Bignum::AssignPowerUInt16((uint64_t)v286, 0xAu, v24);
    if (v12 > 1)
      goto LABEL_192;
    if ((_DWORD)v289)
    {
      if ((int)v289 >= 128)
        goto LABEL_463;
      if ((int)v289 >= 1)
      {
        v31 = 0;
        v32 = 0;
        v33 = v287;
        do
        {
          v34 = *((_DWORD *)v33 + v31);
          v35 = v32 + 2 * v34;
          v32 = v34 >> 27;
          *((_DWORD *)v33 + v31++) = v35 & 0xFFFFFFF;
        }
        while (v31 < (int)v289);
        if (v32)
        {
          *((_DWORD *)v33 + (int)v289) = v32;
          LODWORD(v289) = v289 + 1;
        }
      }
    }
    if ((_DWORD)v293)
    {
      if ((int)v293 >= 128)
        goto LABEL_463;
      if ((int)v293 >= 1)
      {
        v36 = 0;
        v37 = 0;
        v38 = v291;
        do
        {
          v39 = *((_DWORD *)v38 + v36);
          v40 = v37 + 2 * v39;
          v37 = v39 >> 27;
          *((_DWORD *)v38 + v36++) = v40 & 0xFFFFFFF;
        }
        while (v36 < (int)v293);
        if (v37)
        {
          *((_DWORD *)v38 + (int)v293) = v37;
          LODWORD(v293) = v293 + 1;
        }
      }
    }
    v41 = v279;
    if ((int)v281 >= 1)
    {
      v42 = 0;
      do
        v41[v42++] = 0;
      while (v42 < (int)v281);
    }
    v43 = 0;
    v44 = 0;
    HIDWORD(v281) = 0;
    *v41 = 1;
    LODWORD(v281) = 1;
    HIDWORD(v281) += v21 / 28;
    v45 = v21 % 28;
    v46 = 28 - v21 % 28;
    do
    {
      v47 = v41[v43];
      v48 = (v47 << v45) + v44;
      v44 = v47 >> v46;
      v41[v43++] = v48 & 0xFFFFFFF;
    }
    while (v43 < (int)v281);
    if (v44)
    {
      v41[(int)v281] = v44;
      LODWORD(v281) = v281 + 1;
    }
    v49 = v283;
    if ((int)v285 >= 1)
    {
      v50 = 0;
      do
        v49[v50++] = 0;
      while (v50 < (int)v285);
    }
    v51 = 0;
    v52 = 0;
    HIDWORD(v285) = 0;
    *v49 = 1;
    LODWORD(v285) = 1;
    HIDWORD(v285) += v21 / 28;
    do
    {
      v53 = v49[v51];
      v54 = (v53 << v45) + v52;
      v52 = v53 >> v46;
      v49[v51++] = v54 & 0xFFFFFFF;
    }
    while (v51 < (int)v285);
    if (v52)
    {
      v49[(int)v285] = v52;
      LODWORD(v285) = v285 + 1;
    }
    goto LABEL_168;
  }
  if (v24 < 0)
  {
    WTF::double_conversion::Bignum::AssignPowerUInt16((uint64_t)v290, 0xAu, -v24);
    if (v12 > 1)
    {
      if (v22 != 1)
      {
        if (v22)
        {
          if ((int)v293 >= 1)
          {
            v107 = 0;
            v108 = 0;
            v109 = v291;
            do
            {
              v110 = *((unsigned int *)v109 + v107);
              v111 = (v108 & 0xFFFFFFF) + v22 * (unint64_t)v110;
              *((_DWORD *)v109 + v107) = v111 & 0xFFFFFFF;
              v108 = ((v22 >> 28) & 0xFFFFFFFF0) * v110 + (v108 >> 28) + (v111 >> 28);
              ++v107;
              v112 = v293;
            }
            while (v107 < (int)v293);
            if (v108)
            {
              while (v112 < 128)
              {
                *((_DWORD *)v109 + v112) = v108 & 0xFFFFFFF;
                v112 = v293 + 1;
                LODWORD(v293) = v293 + 1;
                v108 >>= 28;
                if (!v108)
                  goto LABEL_160;
              }
              goto LABEL_463;
            }
          }
        }
        else
        {
          if ((int)v293 >= 1)
          {
            v87 = 0;
            v88 = v291;
            do
              *((_DWORD *)v88 + v87++) = 0;
            while (v87 < (int)v293);
          }
          v293 = 0;
        }
      }
LABEL_160:
      v95 = v287;
      if ((int)v289 >= 1)
      {
        v113 = 0;
        do
          v95[v113++] = 0;
        while (v113 < (int)v289);
      }
      HIDWORD(v289) = 0;
      *v95 = 1;
      LODWORD(v289) = 1;
      HIDWORD(v289) += ((int)(((unint64_t)(1840700269 * v21) >> 32) - v21) >> 4)
                     + ((((unint64_t)(1840700269 * v21) >> 32) - v21) >> 31);
      v106 = 28 * (v21 / 28) - v21;
    }
    else
    {
      HIDWORD(v281) = HIDWORD(v293);
      LODWORD(v67) = v293;
      if ((int)v293 >= 1)
      {
        v68 = 0;
        v69 = v291;
        v70 = v279;
        do
        {
          *((_DWORD *)v70 + v68) = *((_DWORD *)v69 + v68);
          ++v68;
        }
        while (v68 < (int)v293);
        LODWORD(v67) = v293;
      }
      if ((int)v67 < (int)v281)
      {
        v71 = v279;
        v67 = (int)v67;
        do
          *((_DWORD *)v71 + v67++) = 0;
        while (v67 < (int)v281);
        LODWORD(v67) = v293;
      }
      LODWORD(v281) = v67;
      HIDWORD(v285) = HIDWORD(v293);
      if ((int)v67 >= 1)
      {
        v72 = 0;
        v73 = v291;
        v74 = v283;
        do
        {
          *((_DWORD *)v74 + v72) = *((_DWORD *)v73 + v72);
          ++v72;
        }
        while (v72 < (int)v293);
        LODWORD(v67) = v293;
      }
      if ((int)v67 < (int)v285)
      {
        v75 = v283;
        v67 = (int)v67;
        do
          *((_DWORD *)v75 + v67++) = 0;
        while (v67 < (int)v285);
        LODWORD(v67) = v293;
      }
      LODWORD(v285) = v67;
      if (v22 != 1)
      {
        if (v22)
        {
          if ((int)v67 >= 1)
          {
            v89 = 0;
            v90 = 0;
            v91 = v291;
            do
            {
              v92 = *((unsigned int *)v91 + v89);
              v93 = (v90 & 0xFFFFFFF) + v22 * (unint64_t)v92;
              *((_DWORD *)v91 + v89) = v93 & 0xFFFFFFF;
              v90 = ((v22 >> 28) & 0xFFFFFFFF0) * v92 + (v90 >> 28) + (v93 >> 28);
              ++v89;
              v94 = v293;
            }
            while (v89 < (int)v293);
            if (v90)
            {
              while (v94 < 128)
              {
                *((_DWORD *)v91 + v94) = v90 & 0xFFFFFFF;
                v94 = v293 + 1;
                LODWORD(v293) = v293 + 1;
                v90 >>= 28;
                if (!v90)
                  goto LABEL_136;
              }
              goto LABEL_463;
            }
          }
        }
        else
        {
          if ((int)v67 >= 1)
          {
            v76 = 0;
            v77 = v291;
            do
              *((_DWORD *)v77 + v76++) = 0;
            while (v76 < (int)v293);
          }
          v293 = 0;
        }
      }
LABEL_136:
      v95 = v287;
      if ((int)v289 >= 1)
      {
        v96 = 0;
        do
          v95[v96++] = 0;
        while (v96 < (int)v289);
      }
      v97 = 0;
      v98 = 0;
      HIDWORD(v289) = 0;
      *v95 = 1;
      LODWORD(v289) = 1;
      HIDWORD(v289) += ((int)(((unint64_t)(1840700269 * v21) >> 32) - v21) >> 4)
                     + ((((unint64_t)(1840700269 * v21) >> 32) - v21) >> 31);
      do
      {
        v99 = v95[v97];
        v100 = (v99 << -(v21 % 28)) + v98;
        v98 = v99 >> (v21 % 28 + 28);
        v95[v97++] = v100 & 0xFFFFFFF;
      }
      while (v97 < (int)v289);
      if (v98)
      {
        v95[(int)v289] = v98;
        LODWORD(v289) = v289 + 1;
      }
      if ((_DWORD)v293)
      {
        if ((int)v293 >= 128)
          goto LABEL_463;
        if ((int)v293 >= 1)
        {
          v101 = 0;
          v102 = 0;
          v103 = v291;
          do
          {
            v104 = *((_DWORD *)v103 + v101);
            v105 = v102 + 2 * v104;
            v102 = v104 >> 27;
            *((_DWORD *)v103 + v101++) = v105 & 0xFFFFFFF;
          }
          while (v101 < (int)v293);
          if (v102)
          {
            *((_DWORD *)v103 + (int)v293) = v102;
            LODWORD(v293) = v293 + 1;
          }
        }
      }
      if (!(_DWORD)v289)
        goto LABEL_168;
      if ((int)v289 >= 128)
        goto LABEL_463;
      if ((int)v289 < 1)
        goto LABEL_168;
      LOBYTE(v106) = 1;
    }
    v114 = 0;
    v115 = 0;
    do
    {
      v116 = v95[v114];
      v117 = (v116 << v106) + v115;
      v115 = v116 >> (28 - v106);
      v95[v114++] = v117 & 0xFFFFFFF;
    }
    while (v114 < (int)v289);
    if (v115)
    {
      v95[(int)v289] = v115;
      LODWORD(v289) = v289 + 1;
    }
  }
  else
  {
    v293 = 0;
    if (v22)
    {
      LODWORD(v290[0]) = v22 & 0xFFFFFFF;
      *(_QWORD *)((char *)v290 + 4) = (v22 >> 28);
      LODWORD(v293) = 2;
      if (!(v22 >> 28))
        LODWORD(v293) = (v22 & 0xFFFFFFF) != 0;
    }
    WTF::double_conversion::Bignum::AssignPowerUInt16((uint64_t)v286, 0xAu, v24);
    v55 = v289;
    if ((_DWORD)v289)
    {
      HIDWORD(v289) += (unsigned __int16)-(__int16)v21 / 0x1Cu;
      if ((int)v289 >= 128)
        goto LABEL_463;
      if ((int)v289 >= 1)
      {
        v56 = 0;
        v57 = 0;
        v58 = (unsigned __int16)-(__int16)v21 % 0x1Cu;
        v59 = v287;
        do
        {
          v60 = *((_DWORD *)v59 + v56);
          v61 = (v60 << v58) + v57;
          v57 = v60 >> (28 - v58);
          *((_DWORD *)v59 + v56++) = v61 & 0xFFFFFFF;
          v55 = v289;
        }
        while (v56 < (int)v289);
        if (v57)
        {
          *((_DWORD *)v59 + (int)v289) = v57;
          v55 = v289 + 1;
          LODWORD(v289) = v289 + 1;
        }
      }
      if (v12 >= 2)
        goto LABEL_192;
      if (v55)
      {
        if (v55 >= 128)
          goto LABEL_463;
        if (v55 >= 1)
        {
          v62 = 0;
          v63 = 0;
          v64 = v287;
          do
          {
            v65 = *((_DWORD *)v64 + v62);
            v66 = v63 + 2 * v65;
            v63 = v65 >> 27;
            *((_DWORD *)v64 + v62++) = v66 & 0xFFFFFFF;
          }
          while (v62 < (int)v289);
          if (v63)
          {
            *((_DWORD *)v64 + (int)v289) = v63;
            LODWORD(v289) = v289 + 1;
          }
        }
      }
    }
    else if (v12 >= 2)
    {
      goto LABEL_192;
    }
    if ((_DWORD)v293)
    {
      if ((int)v293 >= 128)
        goto LABEL_463;
      if ((int)v293 >= 1)
      {
        v78 = 0;
        v79 = 0;
        v80 = v291;
        do
        {
          v81 = *((_DWORD *)v80 + v78);
          v82 = v79 + 2 * v81;
          v79 = v81 >> 27;
          *((_DWORD *)v80 + v78++) = v82 & 0xFFFFFFF;
        }
        while (v78 < (int)v293);
        if (v79)
        {
          *((_DWORD *)v80 + (int)v293) = v79;
          LODWORD(v293) = v293 + 1;
        }
      }
    }
    v83 = v279;
    if ((int)v281 >= 1)
    {
      v84 = 0;
      do
        v83[v84++] = 0;
      while (v84 < (int)v281);
    }
    HIDWORD(v281) = 0;
    *v83 = 1;
    LODWORD(v281) = 1;
    v85 = v283;
    if ((int)v285 >= 1)
    {
      v86 = 0;
      do
        v85[v86++] = 0;
      while (v86 < (int)v285);
    }
    HIDWORD(v285) = 0;
    *v85 = 1;
    LODWORD(v285) = 1;
  }
LABEL_168:
  v118 = !v20;
  if (v12 > 1)
    v118 = 1;
  if ((v118 & 1) == 0)
  {
    if ((_DWORD)v289)
    {
      if ((int)v289 >= 128)
        goto LABEL_463;
      if ((int)v289 >= 1)
      {
        v119 = 0;
        v120 = 0;
        v121 = v287;
        do
        {
          v122 = *((_DWORD *)v121 + v119);
          v123 = v120 + 2 * v122;
          v120 = v122 >> 27;
          *((_DWORD *)v121 + v119++) = v123 & 0xFFFFFFF;
        }
        while (v119 < (int)v289);
        if (v120)
        {
          *((_DWORD *)v121 + (int)v289) = v120;
          LODWORD(v289) = v289 + 1;
        }
      }
    }
    if ((_DWORD)v293)
    {
      if ((int)v293 >= 128)
        goto LABEL_463;
      if ((int)v293 >= 1)
      {
        v124 = 0;
        v125 = 0;
        v126 = v291;
        do
        {
          v127 = *((_DWORD *)v126 + v124);
          v128 = v125 + 2 * v127;
          v125 = v127 >> 27;
          *((_DWORD *)v126 + v124++) = v128 & 0xFFFFFFF;
        }
        while (v124 < (int)v293);
        if (v125)
        {
          *((_DWORD *)v126 + (int)v293) = v125;
          LODWORD(v293) = v293 + 1;
        }
      }
    }
    if ((_DWORD)v281)
    {
      if ((int)v281 >= 128)
        goto LABEL_463;
      if ((int)v281 >= 1)
      {
        v129 = 0;
        v130 = 0;
        v131 = v279;
        do
        {
          v132 = *((_DWORD *)v131 + v129);
          v133 = v130 + 2 * v132;
          v130 = v132 >> 27;
          *((_DWORD *)v131 + v129++) = v133 & 0xFFFFFFF;
        }
        while (v129 < (int)v281);
        if (v130)
        {
          *((_DWORD *)v131 + (int)v281) = v130;
          LODWORD(v281) = v281 + 1;
        }
      }
    }
  }
LABEL_192:
  result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v278, (const WTF::double_conversion::Bignum *)v286, v30);
  if ((v22 & 1) != 0)
  {
    if ((int)result < 1)
      goto LABEL_194;
LABEL_218:
    *a6 = v24 + 1;
    goto LABEL_219;
  }
  if ((result & 0x80000000) == 0)
    goto LABEL_218;
LABEL_194:
  *a6 = v24;
  if ((int)v293 >= 1)
  {
    v135 = 0;
    v136 = 0;
    v137 = v291;
    do
    {
      v138 = v136 + 10 * *((unsigned int *)v137 + v135);
      *((_DWORD *)v137 + v135) = v138 & 0xFFFFFFF;
      v136 = v138 >> 28;
      ++v135;
    }
    while (v135 < (int)v293);
    if (v136)
    {
      if ((int)v293 >= 128)
        goto LABEL_463;
      *((_DWORD *)v137 + (int)v293) = v136;
      LODWORD(v293) = v293 + 1;
    }
  }
  LODWORD(v139) = v285;
  v140 = SHIDWORD(v285) + (uint64_t)(int)v285;
  if ((_DWORD)v140 == HIDWORD(v281) + (_DWORD)v281)
  {
    if (SHIDWORD(v285) >= SHIDWORD(v281))
      v141 = HIDWORD(v281);
    else
      v141 = HIDWORD(v285);
    v142 = (char *)v283 + 4 * (int)v285;
    v143 = (unsigned int *)(v142 - 4);
    v144 = SHIDWORD(v285) + (uint64_t)(int)v285;
    while (v144 > v141)
    {
      v145 = 0;
      if (v144 > SHIDWORD(v285) && v144 <= v140)
        v145 = *v143;
      result = 0;
      if (v144 > SHIDWORD(v281) && v144 <= v140)
        result = *((unsigned int *)v279 + v144 - SHIDWORD(v281) - 1);
      --v143;
      --v144;
      if (v145 > result)
        LODWORD(v142) = 1;
      if (v145 < result)
        LODWORD(v142) = -1;
      if (v145 != (_DWORD)result)
        goto LABEL_231;
    }
    LODWORD(v142) = 0;
    if ((int)v285 < 1)
      goto LABEL_271;
LABEL_232:
    v151 = 0;
    v152 = 0;
    v153 = v283;
    do
    {
      v154 = v152 + 10 * *((unsigned int *)v153 + v151);
      *((_DWORD *)v153 + v151) = v154 & 0xFFFFFFF;
      v152 = v154 >> 28;
      ++v151;
      LODWORD(v139) = v285;
    }
    while (v151 < (int)v285);
    if (v152)
    {
      if ((int)v285 >= 128)
        goto LABEL_463;
      *((_DWORD *)v153 + (int)v285) = v152;
      LODWORD(v139) = v285 + 1;
      LODWORD(v285) = v285 + 1;
    }
    if (!(_DWORD)v142)
      goto LABEL_272;
    goto LABEL_238;
  }
  LODWORD(v142) = -1;
LABEL_231:
  if ((int)v285 >= 1)
    goto LABEL_232;
LABEL_271:
  if (!(_DWORD)v142)
  {
LABEL_272:
    HIDWORD(v281) = HIDWORD(v285);
    if ((int)v139 >= 1)
    {
      v168 = 0;
      v169 = v283;
      v170 = v279;
      do
      {
        *((_DWORD *)v170 + v168) = *((_DWORD *)v169 + v168);
        ++v168;
      }
      while (v168 < (int)v285);
      LODWORD(v139) = v285;
    }
    if ((int)v139 < (int)v281)
    {
      v171 = v279;
      v139 = (int)v139;
      do
        *((_DWORD *)v171 + v139++) = 0;
      while (v139 < (int)v281);
      LODWORD(v139) = v285;
    }
    LODWORD(v281) = v139;
    goto LABEL_219;
  }
LABEL_238:
  if ((int)v281 >= 1)
  {
    v155 = 0;
    v156 = 0;
    v157 = v279;
    do
    {
      v158 = v156 + 10 * *((unsigned int *)v157 + v155);
      *((_DWORD *)v157 + v155) = v158 & 0xFFFFFFF;
      v156 = v158 >> 28;
      ++v155;
    }
    while (v155 < (int)v281);
    if (v156)
    {
      if ((int)v281 >= 128)
        goto LABEL_463;
      *((_DWORD *)v157 + (int)v281) = v156;
      LODWORD(v281) = v281 + 1;
    }
  }
LABEL_219:
  if (v12 < 2)
  {
    v147 = SHIDWORD(v285) + (uint64_t)(int)v285;
    v148 = SHIDWORD(v281) + (uint64_t)(int)v281;
    if ((int)v147 >= (int)v148)
    {
      if ((int)v147 <= (int)v148)
      {
        if (SHIDWORD(v285) >= SHIDWORD(v281))
          v163 = HIDWORD(v281);
        else
          v163 = HIDWORD(v285);
        v164 = SHIDWORD(v285) + (uint64_t)(int)v285;
        v149 = (char *)v283 + 4 * (int)v285;
        v165 = v149 - 4;
        while (v164 > v163)
        {
          v166 = 0;
          if (v164 > SHIDWORD(v285) && v164 <= v147)
            v166 = *(_DWORD *)v165;
          v167 = 0;
          if (v164 > SHIDWORD(v281) && v164 <= v148)
            v167 = *((_DWORD *)v279 + v164 - SHIDWORD(v281) - 1);
          v165 -= 4;
          --v164;
          if (v166 > v167)
            LODWORD(v149) = 1;
          if (v166 < v167)
            LODWORD(v149) = -1;
          if (v166 != v167)
            goto LABEL_282;
        }
        LODWORD(v149) = 0;
      }
      else
      {
        LODWORD(v149) = 1;
      }
    }
    else
    {
      LODWORD(v149) = -1;
    }
LABEL_282:
    if ((_DWORD)v149)
      v172 = (const WTF::double_conversion::Bignum *)v278;
    else
      v172 = (const WTF::double_conversion::Bignum *)v282;
    *a5 = 0;
    if ((v22 & 1) != 0)
    {
      if ((_DWORD)v149)
      {
        while (1)
        {
          v202 = WTF::double_conversion::Bignum::DivideModuloIntBignum((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v286);
          v204 = *a5;
          *a5 = v204 + 1;
          a3[v204] = v202 + 48;
          v205 = v293;
          v206 = SHIDWORD(v293) + (uint64_t)(int)v293;
          v207 = SHIDWORD(v285) + (uint64_t)(int)v285;
          if ((int)v206 >= (int)v207)
          {
            if ((int)v206 <= (int)v207)
            {
              v208 = SHIDWORD(v293) >= SHIDWORD(v285) ? HIDWORD(v285) : HIDWORD(v293);
              v209 = SHIDWORD(v293) + (uint64_t)(int)v293;
              v210 = (unsigned int *)v291 + (int)v293 - 1;
              while (v209 > v208)
              {
                v214 = 0;
                if (v209 > SHIDWORD(v293) && v209 <= v206)
                  v214 = *v210;
                v215 = 0;
                if (v209 > SHIDWORD(v285) && v209 <= v207)
                  v215 = *((_DWORD *)v283 + v209 - SHIDWORD(v285) - 1);
                --v210;
                --v209;
                v211 = v214 >= v215;
                v212 = v214 == v215;
                if (v214 > v215)
                  v213 = 1;
                else
                  v213 = v12;
                if (v211)
                  v12 = v213;
                else
                  v12 = -1;
                if (!v212)
                  goto LABEL_356;
              }
              v12 = 0;
            }
            else
            {
              v12 = 1;
            }
          }
          else
          {
            v12 = -1;
          }
LABEL_356:
          v189 = v12 >> 31;
          result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, v172, (const WTF::double_conversion::Bignum *)v286, v203);
          v188 = (int)result > 0;
          if ((v12 & 0x80000000) != 0 || (int)result > 0)
            break;
          if (v205 >= 1)
          {
            v216 = 0;
            v217 = 0;
            v218 = v291;
            do
            {
              v219 = v217 + 10 * *((unsigned int *)v218 + v216);
              *((_DWORD *)v218 + v216) = v219 & 0xFFFFFFF;
              v217 = v219 >> 28;
              ++v216;
            }
            while (v216 < (int)v293);
            if (v217)
            {
              if ((int)v293 >= 128)
                goto LABEL_463;
              *((_DWORD *)v218 + (int)v293) = v217;
              LODWORD(v293) = v293 + 1;
            }
          }
          if ((int)v285 >= 1)
          {
            v220 = 0;
            v221 = 0;
            v222 = v283;
            do
            {
              v223 = v221 + 10 * *((unsigned int *)v222 + v220);
              *((_DWORD *)v222 + v220) = v223 & 0xFFFFFFF;
              v221 = v223 >> 28;
              ++v220;
            }
            while (v220 < (int)v285);
            if (v221)
            {
              if ((int)v285 >= 128)
                goto LABEL_463;
              *((_DWORD *)v222 + (int)v285) = v221;
              LODWORD(v285) = v285 + 1;
            }
          }
          if ((int)v281 >= 1)
          {
            v224 = 0;
            v225 = 0;
            v226 = v279;
            do
            {
              v227 = v225 + 10 * *((unsigned int *)v226 + v224);
              *((_DWORD *)v226 + v224) = v227 & 0xFFFFFFF;
              v225 = v227 >> 28;
              ++v224;
            }
            while (v224 < (int)v281);
            if (v225)
            {
              if ((int)v281 >= 128)
                goto LABEL_463;
              *((_DWORD *)v226 + (int)v281) = v225;
              LODWORD(v281) = v281 + 1;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          v250 = WTF::double_conversion::Bignum::DivideModuloIntBignum((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v286);
          v252 = *a5;
          *a5 = v252 + 1;
          a3[v252] = v250 + 48;
          v253 = v293;
          v254 = SHIDWORD(v293) + (uint64_t)(int)v293;
          v255 = SHIDWORD(v285) + (uint64_t)(int)v285;
          if ((int)v254 >= (int)v255)
          {
            if ((int)v254 <= (int)v255)
            {
              v256 = SHIDWORD(v293) >= SHIDWORD(v285) ? HIDWORD(v285) : HIDWORD(v293);
              v257 = SHIDWORD(v293) + (uint64_t)(int)v293;
              v258 = (unsigned int *)v291 + (int)v293 - 1;
              while (v257 > v256)
              {
                v262 = 0;
                if (v257 > SHIDWORD(v293) && v257 <= v254)
                  v262 = *v258;
                v263 = 0;
                if (v257 > SHIDWORD(v285) && v257 <= v255)
                  v263 = *((_DWORD *)v283 + v257 - SHIDWORD(v285) - 1);
                --v258;
                --v257;
                v259 = v262 >= v263;
                v260 = v262 == v263;
                if (v262 > v263)
                  v261 = 1;
                else
                  v261 = v11;
                if (v259)
                  v11 = v261;
                else
                  v11 = -1;
                if (!v260)
                  goto LABEL_438;
              }
              v11 = 0;
            }
            else
            {
              v11 = 1;
            }
          }
          else
          {
            v11 = -1;
          }
LABEL_438:
          v189 = v11 >> 31;
          result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v282, (const WTF::double_conversion::Bignum *)v286, v251);
          v188 = (int)result > 0;
          if (v11 < 0 || (int)result > 0)
            break;
          if (v253 >= 1)
          {
            v264 = 0;
            v265 = 0;
            v266 = v291;
            do
            {
              v267 = v265 + 10 * *((unsigned int *)v266 + v264);
              *((_DWORD *)v266 + v264) = v267 & 0xFFFFFFF;
              v265 = v267 >> 28;
              ++v264;
            }
            while (v264 < (int)v293);
            if (v265)
            {
              if ((int)v293 >= 128)
                goto LABEL_463;
              *((_DWORD *)v266 + (int)v293) = v265;
              LODWORD(v293) = v293 + 1;
            }
          }
          if ((int)v285 >= 1)
          {
            v268 = 0;
            v269 = 0;
            v270 = v283;
            do
            {
              v271 = v269 + 10 * *((unsigned int *)v270 + v268);
              *((_DWORD *)v270 + v268) = v271 & 0xFFFFFFF;
              v269 = v271 >> 28;
              ++v268;
            }
            while (v268 < (int)v285);
            if (v269)
            {
              if ((int)v285 >= 128)
                goto LABEL_463;
              *((_DWORD *)v270 + (int)v285) = v269;
              LODWORD(v285) = v285 + 1;
            }
          }
        }
      }
    }
    else if ((_DWORD)v149)
    {
      while (1)
      {
        v173 = WTF::double_conversion::Bignum::DivideModuloIntBignum((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v286);
        v175 = *a5;
        *a5 = v175 + 1;
        a3[v175] = v173 + 48;
        v176 = v293;
        v177 = SHIDWORD(v293) + (uint64_t)(int)v293;
        v178 = SHIDWORD(v285) + (uint64_t)(int)v285;
        if ((int)v177 >= (int)v178)
        {
          if ((int)v177 <= (int)v178)
          {
            v179 = SHIDWORD(v293) >= SHIDWORD(v285) ? HIDWORD(v285) : HIDWORD(v293);
            v180 = SHIDWORD(v293) + (uint64_t)(int)v293;
            v181 = (unsigned int *)v291 + (int)v293 - 1;
            while (v180 > v179)
            {
              v185 = 0;
              if (v180 > SHIDWORD(v293) && v180 <= v177)
                v185 = *v181;
              v186 = 0;
              if (v180 > SHIDWORD(v285) && v180 <= v178)
                v186 = *((_DWORD *)v283 + v180 - SHIDWORD(v285) - 1);
              --v181;
              --v180;
              v182 = v185 >= v186;
              v183 = v185 == v186;
              if (v185 > v186)
                v184 = 1;
              else
                v184 = v12;
              if (v182)
                v12 = v184;
              else
                v12 = -1;
              if (!v183)
                goto LABEL_311;
            }
            v12 = 0;
          }
          else
          {
            v12 = 1;
          }
        }
        else
        {
          v12 = -1;
        }
LABEL_311:
        result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, v172, (const WTF::double_conversion::Bignum *)v286, v174);
        v188 = (int)result >= 0;
        v189 = (int)v12 < 1;
        if ((int)v12 < 1 || (result & 0x80000000) == 0)
          break;
        if (v176 >= 1)
        {
          v190 = 0;
          v191 = 0;
          v192 = v291;
          do
          {
            v193 = v191 + 10 * *((unsigned int *)v192 + v190);
            *((_DWORD *)v192 + v190) = v193 & 0xFFFFFFF;
            v191 = v193 >> 28;
            ++v190;
          }
          while (v190 < (int)v293);
          if (v191)
          {
            if ((int)v293 >= 128)
              goto LABEL_463;
            *((_DWORD *)v192 + (int)v293) = v191;
            LODWORD(v293) = v293 + 1;
          }
        }
        if ((int)v285 >= 1)
        {
          v194 = 0;
          v195 = 0;
          v196 = v283;
          do
          {
            v197 = v195 + 10 * *((unsigned int *)v196 + v194);
            *((_DWORD *)v196 + v194) = v197 & 0xFFFFFFF;
            v195 = v197 >> 28;
            ++v194;
          }
          while (v194 < (int)v285);
          if (v195)
          {
            if ((int)v285 >= 128)
              goto LABEL_463;
            *((_DWORD *)v196 + (int)v285) = v195;
            LODWORD(v285) = v285 + 1;
          }
        }
        if ((int)v281 >= 1)
        {
          v198 = 0;
          v199 = 0;
          v200 = v279;
          do
          {
            v201 = v199 + 10 * *((unsigned int *)v200 + v198);
            *((_DWORD *)v200 + v198) = v201 & 0xFFFFFFF;
            v199 = v201 >> 28;
            ++v198;
          }
          while (v198 < (int)v281);
          if (v199)
          {
            if ((int)v281 >= 128)
              goto LABEL_463;
            *((_DWORD *)v200 + (int)v281) = v199;
            LODWORD(v281) = v281 + 1;
          }
        }
      }
    }
    else
    {
      while (1)
      {
        v228 = WTF::double_conversion::Bignum::DivideModuloIntBignum((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v286);
        v230 = *a5;
        *a5 = v230 + 1;
        a3[v230] = v228 + 48;
        v231 = v293;
        v232 = SHIDWORD(v293) + (uint64_t)(int)v293;
        v233 = SHIDWORD(v285) + (uint64_t)(int)v285;
        if ((int)v232 >= (int)v233)
        {
          if ((int)v232 <= (int)v233)
          {
            v234 = SHIDWORD(v293) >= SHIDWORD(v285) ? HIDWORD(v285) : HIDWORD(v293);
            v235 = SHIDWORD(v293) + (uint64_t)(int)v293;
            v236 = (unsigned int *)v291 + (int)v293 - 1;
            while (v235 > v234)
            {
              v240 = 0;
              if (v235 > SHIDWORD(v293) && v235 <= v232)
                v240 = *v236;
              v241 = 0;
              if (v235 > SHIDWORD(v285) && v235 <= v233)
                v241 = *((_DWORD *)v283 + v235 - SHIDWORD(v285) - 1);
              --v236;
              --v235;
              v237 = v240 >= v241;
              v238 = v240 == v241;
              if (v240 > v241)
                v239 = 1;
              else
                v239 = v11;
              if (v237)
                v11 = v239;
              else
                v11 = -1;
              if (!v238)
                goto LABEL_400;
            }
            v11 = 0;
          }
          else
          {
            v11 = 1;
          }
        }
        else
        {
          v11 = -1;
        }
LABEL_400:
        result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v282, (const WTF::double_conversion::Bignum *)v286, v229);
        v188 = (int)result >= 0;
        v189 = v11 < 1;
        if (v11 < 1 || (result & 0x80000000) == 0)
          break;
        if (v231 >= 1)
        {
          v242 = 0;
          v243 = 0;
          v244 = v291;
          do
          {
            v245 = v243 + 10 * *((unsigned int *)v244 + v242);
            *((_DWORD *)v244 + v242) = v245 & 0xFFFFFFF;
            v243 = v245 >> 28;
            ++v242;
          }
          while (v242 < (int)v293);
          if (v243)
          {
            if ((int)v293 >= 128)
              goto LABEL_463;
            *((_DWORD *)v244 + (int)v293) = v243;
            LODWORD(v293) = v293 + 1;
          }
        }
        if ((int)v285 >= 1)
        {
          v246 = 0;
          v247 = 0;
          v248 = v283;
          do
          {
            v249 = v247 + 10 * *((unsigned int *)v248 + v246);
            *((_DWORD *)v248 + v246) = v249 & 0xFFFFFFF;
            v247 = v249 >> 28;
            ++v246;
          }
          while (v246 < (int)v285);
          if (v247)
          {
            if ((int)v285 >= 128)
              goto LABEL_463;
            *((_DWORD *)v248 + (int)v285) = v247;
            LODWORD(v285) = v285 + 1;
          }
        }
      }
    }
    if (v189 && v188)
    {
      result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v286, v187);
      if ((result & 0x80000000) != 0)
        goto LABEL_462;
      v272 = &a3[*a5];
      v275 = *(v272 - 1);
      v273 = v272 - 1;
      v274 = v275;
      if (!(_DWORD)result && (v274 & 1) == 0)
        goto LABEL_462;
    }
    else
    {
      if (v189)
        goto LABEL_462;
      v276 = &a3[*a5];
      v277 = *(v276 - 1);
      v273 = v276 - 1;
      v274 = v277;
    }
    *v273 = v274 + 1;
    goto LABEL_462;
  }
  if (v12 != 2)
  {
    if (v12 == 3)
    {
      v146 = v11;
LABEL_461:
      result = WTF::double_conversion::GenerateCountedDigits(v146, a6, (WTF::double_conversion::Bignum *)v290, (WTF::double_conversion::Bignum *)v286, a3, a4, a5);
      goto LABEL_462;
    }
LABEL_463:
    abort();
  }
  v150 = -*a6;
  if (v150 <= v11)
  {
    if (v150 != v11)
    {
      v146 = *a6 + v11;
      goto LABEL_461;
    }
    if ((int)v289 >= 1)
    {
      v159 = 0;
      v160 = 0;
      v161 = v287;
      do
      {
        v162 = v160 + 10 * *((unsigned int *)v161 + v159);
        *((_DWORD *)v161 + v159) = v162 & 0xFFFFFFF;
        v160 = v162 >> 28;
        ++v159;
      }
      while (v159 < (int)v289);
      if (v160)
      {
        if ((int)v289 >= 128)
          goto LABEL_463;
        *((_DWORD *)v161 + (int)v289) = v160;
        LODWORD(v289) = v289 + 1;
      }
    }
    result = WTF::double_conversion::Bignum::PlusCompare((WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v290, (const WTF::double_conversion::Bignum *)v286, v134);
    if ((result & 0x80000000) == 0)
    {
      *a3 = 49;
      *a5 = 1;
      ++*a6;
      goto LABEL_462;
    }
  }
  else
  {
    *a6 = -v11;
  }
  *a5 = 0;
LABEL_462:
  a3[*a5] = 0;
  return result;
}

uint64_t WTF::double_conversion::GenerateCountedDigits(int a1, _DWORD *a2, WTF::double_conversion::Bignum *this, WTF::double_conversion::Bignum *a4, _BYTE *a5, uint64_t a6, int *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  const WTF::double_conversion::Bignum *v22;
  uint64_t result;
  char v24;
  const WTF::double_conversion::Bignum *v25;
  char v26;

  v13 = (a1 - 1);
  v14 = a1 - 2;
  if (a1 < 2)
  {
    v21 = WTF::double_conversion::Bignum::DivideModuloIntBignum(this, a4);
    result = WTF::double_conversion::Bignum::PlusCompare(this, this, a4, v22);
    a5[(int)v13] = v21 + ((int)result >= 0) + 48;
  }
  else
  {
    v15 = 0;
    do
    {
      a5[v15] = WTF::double_conversion::Bignum::DivideModuloIntBignum(this, a4) + 48;
      if (*((int *)this + 132) >= 1)
      {
        v16 = 0;
        v17 = 0;
        v18 = *((_QWORD *)this + 64);
        do
        {
          v19 = v17 + 10 * *(unsigned int *)(v18 + 4 * v16);
          *(_DWORD *)(v18 + 4 * v16) = v19 & 0xFFFFFFF;
          v17 = v19 >> 28;
          ++v16;
          v20 = *((int *)this + 132);
        }
        while (v16 < v20);
        if (v17)
        {
          if ((int)v20 >= 128)
            abort();
          *(_DWORD *)(v18 + 4 * v20) = v17;
          ++*((_DWORD *)this + 132);
        }
      }
      ++v15;
    }
    while (v15 != v13);
    v24 = WTF::double_conversion::Bignum::DivideModuloIntBignum(this, a4);
    result = WTF::double_conversion::Bignum::PlusCompare(this, this, a4, v25);
    a5[(int)v13] = v24 + ((int)result >= 0) + 48;
    v26 = a5[v13];
    do
    {
      if (v26 != 58)
        break;
      a5[v13] = 48;
      v26 = a5[v14] + 1;
      a5[v14--] = v26;
    }
    while (v13-- > 1);
  }
  if (*a5 == 58)
  {
    *a5 = 49;
    ++*a2;
  }
  *a7 = a1;
  return result;
}

void WTF::double_conversion::Bignum::AssignDecimalString(WTF::double_conversion::Bignum *this, uint64_t a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t v54;

  v3 = a3;
  if (*((int *)this + 132) >= 1)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *((int *)this + 132));
  }
  *((_QWORD *)this + 66) = 0;
  if (a3 >= 19)
  {
    v8 = 0;
    v9 = (char *)(a2 + 9);
    do
    {
      v11 = v9[9]
          + 10
          * (v9[8]
           + 10
           * (v9[7]
            + 10
            * (v9[6]
             + 10
             * (v9[5]
              + 10
              * (v9[4]
               + 10
               * (v9[3]
                + 10
                * (v9[2]
                 + 10
                 * (v9[1]
                  + 10
                  * (*v9
                   + 10
                   * (*(v9 - 1)
                    + 10
                    * (*(v9 - 2)
                     + 10
                     * (*(v9 - 3)
                      + 10
                      * (*(v9 - 4)
                       + 10 * (*(v9 - 5) + 10 * (*(v9 - 6) + 10 * (*(v9 - 7) + 10 * (*(v9 - 8) + 10 * *(v9 - 9))))))))))))))))))
          + 0x1BD9EFE7CB2AAAB0;
      WTF::double_conversion::Bignum::MultiplyByPowerOfTen((uint64_t)this, 19);
      if (v11)
      {
        v52 = &v18;
        v53 = 128;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0;
        v54 = 3;
        v18 = v11 & 0xFFFFFFF;
        v19 = (v11 >> 28) & 0xFFFFFFF;
        LODWORD(v20) = HIBYTE(v11);
        if (!(_DWORD)v20)
        {
          LODWORD(v54) = 2;
          if (((v11 >> 28) & 0xFFFFFFF) == 0)
            LODWORD(v54) = (v11 & 0xFFFFFFF) != 0;
        }
        WTF::double_conversion::Bignum::AddBignum(this, (const WTF::double_conversion::Bignum *)&v18);
      }
      v9 += 19;
      v8 -= 19;
      v10 = v3 + v8;
    }
    while ((v3 + v8 + 19) > 0x25);
    LODWORD(v12) = -v8;
    v3 += v8;
    if (v10 > 0)
      goto LABEL_15;
LABEL_13:
    WTF::double_conversion::Bignum::MultiplyByPowerOfTen((uint64_t)this, v3);
    goto LABEL_22;
  }
  LODWORD(v12) = 0;
  if (a3 <= 0)
    goto LABEL_13;
LABEL_15:
  v13 = 0;
  v12 = v12;
  v14 = v3 + (int)v12;
  do
    v13 = *(char *)(a2 + v12++) + 10 * v13 - 48;
  while (v12 < v14);
  WTF::double_conversion::Bignum::MultiplyByPowerOfTen((uint64_t)this, v3);
  if (v13)
  {
    v53 = 128;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v51 = 0;
    v52 = &v18;
    v54 = 3;
    v18 = v13 & 0xFFFFFFF;
    v19 = (v13 >> 28) & 0xFFFFFFF;
    LODWORD(v20) = HIBYTE(v13);
    if (!(_DWORD)v20)
    {
      LODWORD(v54) = 2;
      if (((v13 >> 28) & 0xFFFFFFF) == 0)
        LODWORD(v54) = (v13 & 0xFFFFFFF) != 0;
    }
    WTF::double_conversion::Bignum::AddBignum(this, (const WTF::double_conversion::Bignum *)&v18);
  }
LABEL_22:
  v15 = *((unsigned int *)this + 132);
  if ((int)v15 < 1)
  {
    if (!(_DWORD)v15)
LABEL_28:
      *((_DWORD *)this + 133) = 0;
  }
  else
  {
    v16 = *((_QWORD *)this + 64);
    while (1)
    {
      v17 = v15 - 1;
      if (*(_DWORD *)(v16 + 4 * (v15 - 1)))
        break;
      *((_DWORD *)this + 132) = --v15;
      if ((unint64_t)(v17 + 1) <= 1)
        goto LABEL_28;
    }
  }
}

uint64_t WTF::double_conversion::Bignum::MultiplyByPowerOfTen(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  signed int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  if (!a2)
    return this;
  LODWORD(v2) = *(_DWORD *)(this + 528);
  if (!(_DWORD)v2)
    return this;
  if (a2 < 27)
  {
    v4 = a2;
LABEL_15:
    if (v4 < 13)
      goto LABEL_30;
  }
  else
  {
    if ((int)v2 >= 1)
    {
      v3 = a2;
      while (1)
      {
        if ((int)v2 >= 1)
        {
          v6 = 0;
          v7 = 0;
          v8 = *(_QWORD *)(this + 512);
          do
          {
            v9 = *(unsigned int *)(v8 + 4 * v6);
            *(_DWORD *)(v8 + 4 * v6) = ((v7 & 0xFFFFFFF) - 99612771 * v9) & 0xFFFFFFF;
            v7 = 0x6765C7930 * v9 + (v7 >> 28) + (((v7 & 0xFFFFFFF) + 4195354525 * v9) >> 28);
            ++v6;
            v2 = *(int *)(this + 528);
          }
          while (v6 < v2);
          if (v7)
            break;
        }
LABEL_6:
        v4 = v3 - 27;
        v5 = v3 <= 53;
        v3 -= 27;
        if (v5)
          goto LABEL_15;
      }
      while ((int)v2 < 128)
      {
        *(_DWORD *)(v8 + 4 * (int)v2) = v7 & 0xFFFFFFF;
        LODWORD(v2) = *(_DWORD *)(this + 528) + 1;
        *(_DWORD *)(this + 528) = v2;
        v7 >>= 28;
        if (!v7)
          goto LABEL_6;
      }
LABEL_57:
      abort();
    }
    if (a2 >= 53)
      v15 = 53;
    else
      v15 = a2;
    v4 = a2 - 27 * ((a2 - v15 + 26) / 0x1Bu) - 27;
    if (v4 < 13)
    {
LABEL_30:
      v10 = v4;
LABEL_31:
      v16 = v10 - 1;
      if (v10 < 1)
        goto LABEL_49;
      goto LABEL_32;
    }
  }
  if ((int)v2 >= 1)
  {
    while (1)
    {
      if ((int)v2 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = *(_QWORD *)(this + 512);
        do
        {
          v14 = v12 + 1220703125 * *(unsigned int *)(v13 + 4 * v11);
          *(_DWORD *)(v13 + 4 * v11) = v14 & 0xFFFFFFF;
          v12 = v14 >> 28;
          ++v11;
          v2 = *(int *)(this + 528);
        }
        while (v11 < v2);
        if (v12)
          break;
      }
LABEL_18:
      v10 = v4 - 13;
      v5 = v4 <= 25;
      v4 -= 13;
      if (v5)
        goto LABEL_31;
    }
    while ((int)v2 < 128)
    {
      *(_DWORD *)(v13 + 4 * (int)v2) = v12 & 0xFFFFFFF;
      LODWORD(v2) = *(_DWORD *)(this + 528) + 1;
      *(_DWORD *)(this + 528) = v2;
      v12 >>= 28;
      if (!v12)
        goto LABEL_18;
    }
    goto LABEL_57;
  }
  if (v4 >= 25)
    v24 = 25;
  else
    v24 = v4;
  v25 = (v4 - v24 + 12) / 0xDu;
  v26 = v4 - 13 * v25 - 13;
  v16 = v4 - 13 * v25 - 14;
  if (v26 < 1)
    goto LABEL_49;
LABEL_32:
  v17 = dword_19911CAD0[v16];
  if (v17 != 1)
  {
    if (!v17)
    {
      if ((int)v2 >= 1)
      {
        v18 = 0;
        v19 = *(_QWORD *)(this + 512);
        do
          *(_DWORD *)(v19 + 4 * v18++) = 0;
        while (v18 < *(int *)(this + 528));
      }
      *(_QWORD *)(this + 528) = 0;
      return this;
    }
    if ((int)v2 >= 1)
    {
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD *)(this + 512);
      do
      {
        v23 = v21 + *(unsigned int *)(v22 + 4 * v20) * (unint64_t)v17;
        *(_DWORD *)(v22 + 4 * v20) = v23 & 0xFFFFFFF;
        v21 = v23 >> 28;
        ++v20;
      }
      while (v20 < *(int *)(this + 528));
      LODWORD(v2) = *(_DWORD *)(this + 528);
      if (v21)
      {
        while ((int)v2 < 128)
        {
          *(_DWORD *)(v22 + 4 * (int)v2) = v21 & 0xFFFFFFF;
          LODWORD(v2) = *(_DWORD *)(this + 528) + 1;
          *(_DWORD *)(this + 528) = v2;
          v21 >>= 28;
          if (!v21)
            goto LABEL_49;
        }
        goto LABEL_57;
      }
    }
  }
LABEL_49:
  if ((_DWORD)v2)
  {
    *(_DWORD *)(this + 532) += a2 / 28;
    if ((int)v2 >= 128)
      goto LABEL_57;
    if ((int)v2 >= 1)
    {
      v27 = 0;
      v28 = 0;
      v29 = a2 % 28;
      v30 = *(_QWORD *)(this + 512);
      do
      {
        v31 = *(_DWORD *)(v30 + 4 * v27);
        v32 = (v31 << v29) + v28;
        v28 = v31 >> (28 - v29);
        *(_DWORD *)(v30 + 4 * v27++) = v32 & 0xFFFFFFF;
        v33 = *(int *)(this + 528);
      }
      while (v27 < v33);
      if (v28)
      {
        *(_DWORD *)(v30 + 4 * v33) = v28;
        ++*(_DWORD *)(this + 528);
      }
    }
  }
  return this;
}

void WTF::double_conversion::Bignum::AddBignum(WTF::double_conversion::Bignum *this, const WTF::double_conversion::Bignum *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  unsigned int v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = *((_DWORD *)this + 133);
  v5 = *((_DWORD *)a2 + 133);
  v6 = v4 - v5;
  if (v4 <= v5)
  {
    v15 = *((_DWORD *)this + 132);
    goto LABEL_23;
  }
  v7 = *((unsigned int *)this + 132);
  if ((int)v7 + v6 > 128)
    goto LABEL_39;
  if ((int)v7 >= 1)
  {
    v8 = *((_QWORD *)this + 64);
    if (v7 >= 0x38
      && ((v9 = v7 + v4 + ~v5, v10 = 4 * (v7 - 1), 4 * v7 + v8 - 4 - v10 <= (unint64_t)(4 * v7 + v8 - 4))
        ? (v11 = v8 + 4 * v9 - v10 > (unint64_t)(v8 + 4 * v9))
        : (v11 = 1),
          !v11 ? (v12 = v4 + ~v5 + 1 <= v9) : (v12 = 0),
          v12 ? (v13 = (unint64_t)(v7 - 1) >> 32 == 0) : (v13 = 0),
          v13 && (unint64_t)(4 * v7 - 4 * ((int)v7 + v4 + ~v5) - 4) >= 0x20))
    {
      v14 = v7 & 7;
      v27 = (_OWORD *)(4 * v7 + v8 - 16);
      v28 = v7 & 0xFFFFFFF8;
      do
      {
        v29 = *(v27 - 1);
        v30 = v8 + 4 * v9;
        *(_OWORD *)(v30 - 12) = *v27;
        *(_OWORD *)(v30 - 28) = v29;
        v9 -= 8;
        v27 -= 2;
        v28 -= 8;
      }
      while (v28);
      if ((v7 & 0x7FFFFFF8) == v7)
        goto LABEL_19;
    }
    else
    {
      v14 = *((unsigned int *)this + 132);
    }
    do
    {
      *(_DWORD *)(v8 + 4 * (~v5 + v4 + (int)v14)) = *(_DWORD *)(v8 - 4 + 4 * v14);
      v11 = v14-- > 1;
    }
    while (v11);
  }
LABEL_19:
  if (v6 >= 1)
    bzero(*((void **)this + 64), 4 * (v4 + ~v5) + 4);
  v15 = *((_DWORD *)this + 132) + v6;
  *((_DWORD *)this + 132) = v15;
  v4 = *((_DWORD *)this + 133) - v6;
  *((_DWORD *)this + 133) = v4;
  v5 = *((_DWORD *)a2 + 133);
LABEL_23:
  v16 = v15 + v4;
  v17 = *((_DWORD *)a2 + 132);
  if (v16 <= v17 + v5)
    v16 = v17 + v5;
  if (v16 - v4 + 1 >= 129)
LABEL_39:
    abort();
  v18 = v5 - v4;
  if (v17 >= 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = *((_QWORD *)this + 64);
    v22 = *((_QWORD *)a2 + 64);
    v23 = v21 + 4 * v18;
    do
    {
      v24 = *(_DWORD *)(v23 + 4 * v19) + v20 + *(_DWORD *)(v22 + 4 * v19);
      *(_DWORD *)(v23 + 4 * v19) = v24 & 0xFFFFFFF;
      v20 = v24 >> 28;
      ++v19;
    }
    while (v19 < *((int *)a2 + 132));
    v18 += v19;
    if (v20)
    {
      v25 = (int *)(v21 + 4 * v18);
      do
      {
        v26 = *v25 + v20;
        *v25++ = v26 & 0xFFFFFFF;
        v20 = v26 >> 28;
        ++v18;
      }
      while (v20);
    }
  }
  if (v18 <= *((_DWORD *)this + 132))
    v18 = *((_DWORD *)this + 132);
  *((_DWORD *)this + 132) = v18;
}

void WTF::double_conversion::Bignum::SubtractBignum(WTF::double_conversion::Bignum *this, const WTF::double_conversion::Bignum *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = *((_DWORD *)this + 133);
  v5 = *((_DWORD *)a2 + 133);
  v6 = v4 - v5;
  if (v4 <= v5)
    goto LABEL_22;
  v7 = *((unsigned int *)this + 132);
  if ((int)v7 + v6 > 128)
    abort();
  if ((int)v7 >= 1)
  {
    v8 = *((_QWORD *)this + 64);
    if (v7 >= 0x38
      && ((v9 = v7 + v4 + ~v5, v10 = 4 * (v7 - 1), 4 * v7 + v8 - 4 - v10 <= (unint64_t)(4 * v7 + v8 - 4))
        ? (v11 = v8 + 4 * v9 - v10 > (unint64_t)(v8 + 4 * v9))
        : (v11 = 1),
          !v11 ? (v12 = v4 + ~v5 + 1 <= v9) : (v12 = 0),
          v12 ? (v13 = (unint64_t)(v7 - 1) >> 32 == 0) : (v13 = 0),
          v13 && (unint64_t)(4 * v7 - 4 * ((int)v7 + v4 + ~v5) - 4) >= 0x20))
    {
      v14 = v7 & 7;
      v28 = (_OWORD *)(4 * v7 + v8 - 16);
      v29 = v7 & 0xFFFFFFF8;
      do
      {
        v30 = *(v28 - 1);
        v31 = v8 + 4 * v9;
        *(_OWORD *)(v31 - 12) = *v28;
        *(_OWORD *)(v31 - 28) = v30;
        v9 -= 8;
        v28 -= 2;
        v29 -= 8;
      }
      while (v29);
      if ((v7 & 0x7FFFFFF8) == v7)
        goto LABEL_19;
    }
    else
    {
      v14 = *((unsigned int *)this + 132);
    }
    do
    {
      *(_DWORD *)(v8 + 4 * (~v5 + v4 + (int)v14)) = *(_DWORD *)(v8 - 4 + 4 * v14);
      v11 = v14-- > 1;
    }
    while (v11);
  }
LABEL_19:
  if (v6 >= 1)
    bzero(*((void **)this + 64), 4 * (v4 + ~v5) + 4);
  *((_DWORD *)this + 132) += v6;
  v4 = *((_DWORD *)this + 133) - v6;
  *((_DWORD *)this + 133) = v4;
  v5 = *((_DWORD *)a2 + 133);
LABEL_22:
  if (*((int *)a2 + 132) >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = v5 - v4;
    v18 = *((_QWORD *)this + 64);
    v19 = *((_QWORD *)a2 + 64);
    do
    {
      v20 = 4 * (v17 + (int)v15);
      v21 = *(_DWORD *)(v18 + v20) + v16 - *(_DWORD *)(v19 + 4 * v15);
      *(_DWORD *)(v18 + v20) = v21 & 0xFFFFFFF;
      v16 = v21 >> 31;
      ++v15;
    }
    while (v15 < *((int *)a2 + 132));
    if (v21 < 0)
    {
      v22 = v15 + v17;
      do
      {
        v23 = 4 * v22++;
        v24 = *(_DWORD *)(v18 + v23) - 1;
        *(_DWORD *)(v18 + v23) = v24 & 0xFFFFFFF;
      }
      while (v24 < 0);
    }
  }
  v25 = *((unsigned int *)this + 132);
  if ((int)v25 < 1)
  {
    if (!(_DWORD)v25)
LABEL_35:
      *((_DWORD *)this + 133) = 0;
  }
  else
  {
    v26 = *((_QWORD *)this + 64);
    while (1)
    {
      v27 = v25 - 1;
      if (*(_DWORD *)(v26 + 4 * (v25 - 1)))
        break;
      *((_DWORD *)this + 132) = --v25;
      if ((unint64_t)(v27 + 1) <= 1)
        goto LABEL_35;
    }
  }
}

uint64_t WTF::double_conversion::Bignum::AssignPowerUInt16(uint64_t this, unsigned int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  char v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  BOOL v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint32x4_t *v43;
  int32x4_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64x2_t v49;
  int64x2_t v50;
  uint32x4_t *v51;
  int32x4_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int8x16_t v55;
  uint32x4_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t v70;
  uint64_t v71;
  uint32x4_t *v72;
  int32x4_t *v73;
  unint64_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int8x16_t v77;
  uint32x4_t v78;
  int8x16_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;

  v3 = *(_DWORD *)(this + 528);
  if (!a3)
  {
    v17 = *(_DWORD **)(this + 512);
    if (v3 >= 1)
    {
      v18 = 0;
      do
        v17[v18++] = 0;
      while (v18 < *(int *)(this + 528));
    }
    *(_DWORD *)(this + 532) = 0;
    v19 = 1;
    *v17 = 1;
    goto LABEL_118;
  }
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(this + 512);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(this + 528));
  }
  *(_QWORD *)(this + 528) = 0;
  v6 = 0;
  if ((a2 & 1) == 0)
  {
    do
    {
      v7 = a2 >> 1;
      a2 = (unsigned __int16)a2 >> 1;
      ++v6;
    }
    while ((v7 & 1) == 0);
  }
  v8 = a2;
  v9 = 0;
  v10 = 64;
  do
  {
    --v10;
    v9 += a3;
    v11 = v8 > 1;
    v8 >>= 1;
  }
  while (v11);
  if (v9 > 3555)
    goto LABEL_120;
  v12 = 1;
  do
  {
    v13 = v12;
    v12 *= 2;
  }
  while (v13 <= a3);
  v14 = v13 >> 2;
  if (v13 >= 4)
  {
    v15 = 0;
    v20 = -1 << v10;
    v16 = a2;
    do
    {
      v21 = v14;
      v22 = v16 * v16;
      v23 = ((v16 * v16) & v20) == 0;
      v24 = ((v16 * v16) & v20) != 0;
      if (v23)
        v25 = a2;
      else
        v25 = 1;
      v26 = v25 * v22;
      v27 = v24 | v15;
      if ((v21 & a3) != 0)
        v16 = v26;
      else
        v16 = v22;
      if ((v21 & a3) != 0)
        v15 = v27;
      v14 = v21 >> 1;
    }
    while (v21 >= 2 && !HIDWORD(v16));
  }
  else
  {
    LOBYTE(v15) = 0;
    v16 = a2;
  }
  if (!v16)
  {
    v29 = 0;
    if ((v15 & 1) == 0)
      goto LABEL_52;
    goto LABEL_39;
  }
  v28 = *(_DWORD **)(this + 512);
  *v28 = v16 & 0xFFFFFFF;
  v28[1] = (v16 >> 28) & 0xFFFFFFF;
  v28[2] = HIBYTE(v16);
  LODWORD(v16) = 3;
  *(_DWORD *)(this + 528) = 3;
  if (v28[2])
  {
    v29 = 1;
    if ((v15 & 1) == 0)
      goto LABEL_52;
    goto LABEL_39;
  }
  LODWORD(v16) = 2;
  *(_DWORD *)(this + 528) = 2;
  v29 = 1;
  if (!v28[1])
  {
    *(_DWORD *)(this + 528) = 1;
    LODWORD(v16) = *v28;
    if (!*v28)
    {
      v29 = 0;
      *(_QWORD *)(this + 528) = 0;
      if ((v15 & 1) == 0)
        goto LABEL_52;
      goto LABEL_39;
    }
    LODWORD(v16) = 1;
  }
  if ((v15 & 1) == 0)
    goto LABEL_52;
LABEL_39:
  if (a2 != 1)
  {
    if (a2)
    {
      if (v29)
      {
        v32 = 0;
        v33 = 0;
        v34 = *(_QWORD *)(this + 512);
        do
        {
          v35 = v33 + *(unsigned int *)(v34 + 4 * v32) * (unint64_t)a2;
          *(_DWORD *)(v34 + 4 * v32) = v35 & 0xFFFFFFF;
          v33 = v35 >> 28;
          ++v32;
          v36 = *(_DWORD *)(this + 528);
        }
        while (v32 < v36);
        LODWORD(v16) = *(_DWORD *)(this + 528);
        if (v33)
        {
          if (v36 >= 128)
            goto LABEL_120;
          *(_DWORD *)(v34 + 4 * v36) = v33;
          LODWORD(v16) = *(_DWORD *)(this + 528) + 1;
          *(_DWORD *)(this + 528) = v16;
        }
      }
    }
    else
    {
      if (v29)
      {
        v30 = 0;
        v31 = *(_QWORD *)(this + 512);
        do
          *(_DWORD *)(v31 + 4 * v30++) = 0;
        while (v30 < *(int *)(this + 528));
      }
      LODWORD(v16) = 0;
      *(_QWORD *)(this + 528) = 0;
    }
  }
LABEL_52:
  if (v14)
  {
    while (1)
    {
      if ((int)v16 > 64)
        goto LABEL_120;
      if ((int)v16 >= 1)
      {
        v38 = 0;
        v39 = *(_QWORD *)(this + 512);
        do
        {
          *(_DWORD *)(v39 + 4 * v16 + 4 * v38) = *(_DWORD *)(v39 + 4 * v38);
          ++v38;
          v40 = *(int *)(this + 528);
        }
        while (v38 < v40);
        if ((int)v40 < 1)
        {
          v42 = 0;
          v37 = (2 * v16);
          if ((int)v40 >= (int)v37)
            goto LABEL_88;
          goto LABEL_77;
        }
        v41 = 0;
        v42 = 0;
        v43 = (uint32x4_t *)(v39 + 4 * v16);
        v44 = (int32x4_t *)((char *)v43[-1].i64 + 4);
        v45 = 1;
        while (1)
        {
          if (v45 >= 8)
          {
            v48 = v45 & 0xFFFFFFFFFFFFFFF8;
            v46 = v45 & 0x7FFFFFFFFFFFFFF8;
            v47 = v41 - (v45 & 0x7FFFFFFFFFFFFFF8);
            v49 = 0uLL;
            v50 = (int64x2_t)v42;
            v51 = v43 + 1;
            v52 = v44;
            v53 = 0uLL;
            v54 = 0uLL;
            do
            {
              v55 = (int8x16_t)vrev64q_s32(*v52);
              v56 = (uint32x4_t)vextq_s8(v55, v55, 8uLL);
              v57 = (int8x16_t)vrev64q_s32(v52[-1]);
              v58 = (uint32x4_t)vextq_s8(v57, v57, 8uLL);
              v59 = v51[-1];
              v49 = (int64x2_t)vmlal_high_u32((uint64x2_t)v49, v59, v56);
              v50 = (int64x2_t)vmlal_u32((uint64x2_t)v50, *(uint32x2_t *)v59.i8, *(uint32x2_t *)v56.i8);
              v54 = (int64x2_t)vmlal_high_u32((uint64x2_t)v54, *v51, v58);
              v53 = (int64x2_t)vmlal_u32((uint64x2_t)v53, *(uint32x2_t *)v51->i8, *(uint32x2_t *)v58.i8);
              v52 -= 2;
              v51 += 2;
              v48 -= 8;
            }
            while (v48);
            v42 = vaddvq_s64(vaddq_s64(vaddq_s64(v53, v50), vaddq_s64(v54, v49)));
            if (v45 == v46)
              goto LABEL_63;
          }
          else
          {
            v46 = 0;
            v47 = v41;
          }
          v60 = v47;
          do
            v42 += v43->u32[v46++] * (unint64_t)v43->u32[v60--];
          while (v45 != v46);
LABEL_63:
          *(_DWORD *)(v39 + 4 * v41) = v42 & 0xFFFFFFF;
          v42 >>= 28;
          ++v41;
          v40 = *(int *)(this + 528);
          ++v45;
          v44 = (int32x4_t *)((char *)v44 + 4);
          if (v41 >= v40)
          {
            v37 = (2 * v16);
            if ((int)v40 >= (int)v37)
              goto LABEL_88;
LABEL_77:
            v61 = *(_QWORD *)(this + 512);
            v62 = (int)v40;
            v63 = v40 + 1;
            while (2)
            {
              v64 = v62++;
              v65 = *(int *)(this + 528);
              if ((int)v64 - (int)v65 + 1 < (int)v65)
              {
                v66 = (int)v62 - (int)v65;
                v67 = v65 - v66;
                if ((unint64_t)(v65 - v66) < 8)
                {
                  v68 = *(int *)(this + 528);
                  goto LABEL_85;
                }
                v68 = v65 - (v67 & 0xFFFFFFFFFFFFFFF8);
                v66 += v67 & 0xFFFFFFFFFFFFFFF8;
                v69 = 0uLL;
                v70 = (int64x2_t)v42;
                v71 = v63 - (int)v65;
                v72 = (uint32x4_t *)(v61 + 16 + 4 * ((int)v16 + v71));
                v73 = (int32x4_t *)(v61 - 16 + 4 * ((int)v16 + v65));
                v74 = (v65 - v71) & 0xFFFFFFFFFFFFFFF8;
                v75 = 0uLL;
                v76 = 0uLL;
                do
                {
                  v77 = (int8x16_t)vrev64q_s32(*v73);
                  v78 = (uint32x4_t)vextq_s8(v77, v77, 8uLL);
                  v79 = (int8x16_t)vrev64q_s32(v73[-1]);
                  v80 = (uint32x4_t)vextq_s8(v79, v79, 8uLL);
                  v81 = v72[-1];
                  v69 = (int64x2_t)vmlal_high_u32((uint64x2_t)v69, v81, v78);
                  v70 = (int64x2_t)vmlal_u32((uint64x2_t)v70, *(uint32x2_t *)v81.i8, *(uint32x2_t *)v78.i8);
                  v76 = (int64x2_t)vmlal_high_u32((uint64x2_t)v76, *v72, v80);
                  v75 = (int64x2_t)vmlal_u32((uint64x2_t)v75, *(uint32x2_t *)v72->i8, *(uint32x2_t *)v80.i8);
                  v72 += 2;
                  v73 -= 2;
                  v74 -= 8;
                }
                while (v74);
                v42 = vaddvq_s64(vaddq_s64(vaddq_s64(v75, v70), vaddq_s64(v76, v69)));
                if (v67 != (v67 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_85:
                  v82 = (unsigned int *)(v61 - 4 + 4 * ((int)v16 + v68));
                  do
                  {
                    v83 = *v82--;
                    v42 += *(unsigned int *)(v61 + 4 * (int)v16 + 4 * v66++) * (unint64_t)v83;
                  }
                  while (v66 < v65);
                }
              }
              *(_DWORD *)(v61 + 4 * v64) = v42 & 0xFFFFFFF;
              v42 >>= 28;
              ++v63;
              if (v62 == (int)v37)
                goto LABEL_88;
              continue;
            }
          }
        }
      }
      v42 = 0;
      LODWORD(v40) = v16;
      v37 = (2 * v16);
      if ((int)v16 < (int)v37)
        goto LABEL_77;
LABEL_88:
      *(_DWORD *)(this + 528) = v37;
      *(_DWORD *)(this + 532) *= 2;
      if ((int)v16 < 1)
      {
        if (!(_DWORD)v16)
        {
          LODWORD(v37) = 0;
LABEL_96:
          *(_DWORD *)(this + 532) = 0;
        }
      }
      else
      {
        v84 = *(_QWORD *)(this + 512);
        if (!*(_DWORD *)(v84 + 4 * (v37 - 1)))
        {
          while (1)
          {
            *(_DWORD *)(this + 528) = v37 - 1;
            v85 = v37 - 1;
            if (v37 <= 1)
              break;
            if (*(_DWORD *)(v84 + 4 * (v37-- - 2)))
            {
              LODWORD(v37) = v85;
              goto LABEL_97;
            }
          }
          LODWORD(v37) = v37 - 1;
          goto LABEL_96;
        }
      }
LABEL_97:
      if ((v14 & a3) != 0 && a2 != 1)
      {
        if (a2)
        {
          if ((int)v37 >= 1)
          {
            v89 = 0;
            v90 = 0;
            v91 = *(_QWORD *)(this + 512);
            do
            {
              v92 = v90 + *(unsigned int *)(v91 + 4 * v89) * (unint64_t)a2;
              *(_DWORD *)(v91 + 4 * v89) = v92 & 0xFFFFFFF;
              v90 = v92 >> 28;
              ++v89;
              v93 = *(_DWORD *)(this + 528);
            }
            while (v89 < v93);
            LODWORD(v37) = *(_DWORD *)(this + 528);
            if (v90)
            {
              if (v93 >= 128)
                goto LABEL_120;
              *(_DWORD *)(v91 + 4 * v93) = v90;
              LODWORD(v37) = *(_DWORD *)(this + 528) + 1;
              *(_DWORD *)(this + 528) = v37;
            }
          }
        }
        else
        {
          if ((int)v37 >= 1)
          {
            v87 = 0;
            v88 = *(_QWORD *)(this + 512);
            do
              *(_DWORD *)(v88 + 4 * v87++) = 0;
            while (v87 < *(int *)(this + 528));
          }
          LODWORD(v37) = 0;
          *(_QWORD *)(this + 528) = 0;
        }
      }
      LODWORD(v16) = v37;
      v11 = v14 > 1;
      v14 >>= 1;
      if (!v11)
        goto LABEL_111;
    }
  }
  LODWORD(v37) = v16;
LABEL_111:
  if (!(_DWORD)v37)
    return this;
  v94 = v6 * a3;
  *(_DWORD *)(this + 532) += v94 / 28;
  if ((int)v37 >= 128)
LABEL_120:
    abort();
  if ((int)v37 >= 1)
  {
    v95 = 0;
    v96 = 0;
    v97 = v94 % 28;
    v98 = *(_QWORD *)(this + 512);
    do
    {
      v99 = *(_DWORD *)(v98 + 4 * v95);
      v100 = (v99 << v97) + v96;
      v96 = v99 >> (28 - v97);
      *(_DWORD *)(v98 + 4 * v95++) = v100 & 0xFFFFFFF;
      v101 = *(int *)(this + 528);
    }
    while (v95 < v101);
    if (v96)
    {
      *(_DWORD *)(v98 + 4 * v101) = v96;
      v19 = *(_DWORD *)(this + 528) + 1;
LABEL_118:
      *(_DWORD *)(this + 528) = v19;
    }
  }
  return this;
}

uint64_t WTF::double_conversion::Bignum::DivideModuloIntBignum(WTF::double_conversion::Bignum *this, const WTF::double_conversion::Bignum *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v2 = *((unsigned int *)this + 132);
  v3 = *((_DWORD *)this + 133);
  v4 = v3 + v2;
  v5 = *((_DWORD *)a2 + 132);
  v6 = *((_DWORD *)a2 + 133);
  v7 = v6 + v5;
  if (v3 + (int)v2 < v6 + v5)
  {
    LOWORD(v8) = 0;
    return (unsigned __int16)v8;
  }
  v12 = v3 - v6;
  if (v3 > v6)
  {
    if (v12 + (int)v2 > 128)
      abort();
    if ((int)v2 < 1)
      goto LABEL_22;
    v13 = *((_QWORD *)this + 64);
    if (v2 >= 0x38
      && ((v14 = v2 + v3 + ~v6, v15 = 4 * (v2 - 1), 4 * v2 + v13 - 4 - v15 <= (unint64_t)(4 * v2 + v13 - 4))
        ? (v16 = v13 + 4 * v14 - v15 > (unint64_t)(v13 + 4 * v14))
        : (v16 = 1),
          !v16 ? (v17 = v3 + ~v6 + 1 <= v14) : (v17 = 0),
          v17 ? (v18 = (unint64_t)(v2 - 1) >> 32 == 0) : (v18 = 0),
          v18 && (unint64_t)(4 * v2 - 4 * v14 - 4) >= 0x20))
    {
      v19 = v2 & 7;
      v42 = (_OWORD *)(4 * v2 + v13 - 16);
      v43 = v2 & 0xFFFFFFF8;
      do
      {
        v44 = *(v42 - 1);
        v45 = v13 + 4 * v14;
        *(_OWORD *)(v45 - 12) = *v42;
        *(_OWORD *)(v45 - 28) = v44;
        v14 -= 8;
        v42 -= 2;
        v43 -= 8;
      }
      while (v43);
      if ((v2 & 0x7FFFFFF8) == v2)
        goto LABEL_22;
    }
    else
    {
      v19 = *((unsigned int *)this + 132);
    }
    do
    {
      *(_DWORD *)(v13 + 4 * (~v6 + v3 + (int)v19)) = *(_DWORD *)(v13 - 4 + 4 * v19);
      v16 = v19-- > 1;
    }
    while (v16);
LABEL_22:
    if (v12 >= 1)
      bzero(*((void **)this + 64), 4 * (v3 + ~v6) + 4);
    v20 = *((_DWORD *)this + 132);
    LODWORD(v2) = v20 + v12;
    *((_DWORD *)this + 132) = v20 + v12;
    v21 = *((_DWORD *)this + 133);
    *((_DWORD *)this + 133) = v21 - v12;
    v5 = *((_DWORD *)a2 + 132);
    v4 = v21 + v20;
    v7 = *((_DWORD *)a2 + 133) + v5;
  }
  if (v4 <= v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v22 = *(_DWORD *)(*((_QWORD *)this + 64) + 4 * ((int)v2 - 1));
      v8 += v22;
      WTF::double_conversion::Bignum::SubtractTimes(this, a2, v22);
      LODWORD(v2) = *((_DWORD *)this + 132);
      v5 = *((_DWORD *)a2 + 132);
    }
    while (*((_DWORD *)this + 133) + (int)v2 > *((_DWORD *)a2 + 133) + v5);
  }
  v23 = v2 - 1;
  v24 = *((_QWORD *)this + 64);
  v25 = *(_DWORD *)(v24 + 4 * v23);
  v26 = v5 - 1;
  v27 = *(_DWORD *)(*((_QWORD *)a2 + 64) + 4 * v26);
  if (v26)
  {
    v30 = v25 / (v27 + 1);
    LOWORD(v8) = v8 + v30;
    WTF::double_conversion::Bignum::SubtractTimes(this, a2, v30);
    if (v27 + v27 * v30 <= v25)
    {
      while (1)
      {
        v31 = *((int *)a2 + 132);
        v32 = *((int *)a2 + 133);
        v33 = v32 + v31;
        v34 = *((int *)this + 133);
        v35 = v34 + *((int *)this + 132);
        if ((int)v32 + (int)v31 >= (int)v35)
        {
          if ((int)v32 + (int)v31 > (int)v35)
            return (unsigned __int16)v8;
          if ((int)v32 >= (int)v34)
            v36 = *((_DWORD *)this + 133);
          else
            v36 = *((_DWORD *)a2 + 133);
          v37 = *((_QWORD *)a2 + 64);
          v38 = v32 + v31;
          v39 = (unsigned int *)(v37 + 4 * v31 - 4);
          while (v38 > v36)
          {
            v40 = 0;
            if (v38 > v32 && v38 <= v33)
              v40 = *v39;
            v41 = 0;
            if (v38 > v34 && v38 <= v35)
              v41 = *(_DWORD *)(*((_QWORD *)this + 64) - 4 * v34 - 4 + 4 * v38);
            --v39;
            --v38;
            if (v40 > v41)
              LODWORD(v37) = 1;
            if (v40 < v41)
              LODWORD(v37) = -1;
            if (v40 != v41)
            {
              if ((int)v37 > 0)
                return (unsigned __int16)v8;
              break;
            }
          }
        }
        WTF::double_conversion::Bignum::SubtractBignum(this, a2);
        LOWORD(v8) = v8 + 1;
      }
    }
    return (unsigned __int16)v8;
  }
  *(_DWORD *)(v24 + 4 * v23) = v25 % v27;
  v8 += v25 / v27;
  v28 = *((unsigned int *)this + 132);
  if ((int)v28 >= 1)
  {
    while (1)
    {
      v29 = v28 - 1;
      if (*(_DWORD *)(v24 + 4 * (v28 - 1)))
        return (unsigned __int16)v8;
      *((_DWORD *)this + 132) = --v28;
      if ((unint64_t)(v29 + 1) <= 1)
        goto LABEL_58;
    }
  }
  if ((_DWORD)v28)
    return (unsigned __int16)v8;
LABEL_58:
  *((_DWORD *)this + 133) = 0;
  return (unsigned __int16)v8;
}

void WTF::double_conversion::Bignum::SubtractTimes(WTF::double_conversion::Bignum *this, const WTF::double_conversion::Bignum *a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3 <= 2)
  {
    if (a3 >= 1)
    {
      WTF::double_conversion::Bignum::SubtractBignum(this, a2);
      if (a3 != 1)
        WTF::double_conversion::Bignum::SubtractBignum(this, a2);
    }
    return;
  }
  v6 = *((_DWORD *)a2 + 133) - *((_DWORD *)this + 133);
  v7 = *((_DWORD *)a2 + 132);
  if (v7 < 1)
  {
    v9 = 0;
    LODWORD(v16) = v7 + v6;
    LODWORD(v17) = *((_DWORD *)this + 132);
    if ((int)v16 >= (int)v17)
      goto LABEL_14;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)a2 + 64);
    v11 = *((_QWORD *)this + 64);
    do
    {
      v12 = 4 * (v6 + (int)v8);
      v13 = *(unsigned int *)(v10 + 4 * v8) * (unint64_t)a3 + v9;
      v14 = *(_DWORD *)(v11 + v12) - (v13 & 0xFFFFFFF);
      *(_DWORD *)(v11 + v12) = v14 & 0xFFFFFFF;
      v9 = (v13 >> 28) + (v14 >> 31);
      ++v8;
      v15 = *((int *)a2 + 132);
    }
    while (v8 < v15);
    LODWORD(v16) = v15 + v6;
    LODWORD(v17) = *((_DWORD *)this + 132);
    if ((int)v16 >= (int)v17)
    {
LABEL_14:
      if ((int)v17 < 1)
      {
        if (!(_DWORD)v17)
LABEL_21:
          *((_DWORD *)this + 133) = 0;
      }
      else
      {
        v20 = *((_QWORD *)this + 64);
        v21 = v17;
        while (1)
        {
          v22 = v21 - 1;
          if (*(_DWORD *)(v20 + 4 * (v21 - 1)))
            break;
          *((_DWORD *)this + 132) = --v21;
          if ((unint64_t)(v22 + 1) <= 1)
            goto LABEL_21;
        }
      }
      return;
    }
  }
  v16 = (int)v16;
  while (v9)
  {
    v18 = *((_QWORD *)this + 64);
    v19 = *(_DWORD *)(v18 + 4 * v16) - v9;
    *(_DWORD *)(v18 + 4 * v16) = v19 & 0xFFFFFFF;
    v9 = v19 >> 31;
    ++v16;
    v17 = *((int *)this + 132);
    if (v16 >= v17)
      goto LABEL_14;
  }
}

uint64_t WTF::double_conversion::Bignum::PlusCompare(WTF::double_conversion::Bignum *this, const WTF::double_conversion::Bignum *a2, const WTF::double_conversion::Bignum *a3, const WTF::double_conversion::Bignum *a4)
{
  int v4;
  int v5;
  const WTF::double_conversion::Bignum *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int *i;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *((_DWORD *)this + 132);
  v5 = *((_DWORD *)this + 133);
  do
  {
    v6 = a2;
    a2 = this;
    v7 = v5;
    v8 = v4 + v5;
    v4 = *((_DWORD *)v6 + 132);
    v5 = *((_DWORD *)v6 + 133);
    v9 = v5 + v4;
    this = v6;
  }
  while (v8 < v5 + v4);
  v10 = *((int *)a3 + 132);
  v11 = *((int *)a3 + 133);
  v12 = v11 + v10;
  if (v8 + 1 < (int)v11 + (int)v10)
    return 0xFFFFFFFFLL;
  if (v8 > (int)v12)
    return 1;
  if (v7 >= v9 && v8 < (int)v12)
    return 0xFFFFFFFFLL;
  if (v7 >= v5)
    v15 = *((_DWORD *)v6 + 133);
  else
    v15 = v7;
  if (v15 >= (int)v11)
    v16 = *((_DWORD *)a3 + 133);
  else
    v16 = v15;
  if ((int)v12 > v16)
  {
    v17 = 0;
    v18 = v11 + v10;
    for (i = (int *)(*((_QWORD *)a3 + 64) + 4 * v10 - 4); ; --i)
    {
      v20 = 0;
      if (v18 > v7 && v18 <= v8)
        v20 = *(_DWORD *)(*((_QWORD *)a2 + 64) + 4 * ~(uint64_t)v7 + 4 * v18);
      v21 = 0;
      if (v18 > v5 && v18 <= v9)
        v21 = *(_DWORD *)(*((_QWORD *)v6 + 64) + 4 * ~(uint64_t)v5 + 4 * v18);
      v22 = 0;
      if (v18 > v11 && v18 <= v12)
        v22 = *i;
      v23 = v21 + v20;
      v24 = v22 + v17;
      v25 = v22 + v17 - v23;
      if (v24 < v23)
        break;
      if (v25 > 1)
        return 0xFFFFFFFFLL;
      --v18;
      v17 = v25 << 28;
      if (v18 <= v16)
      {
        if (v24 == v23)
          return 0;
        else
          return 0xFFFFFFFFLL;
      }
    }
    return 1;
  }
  return 0;
}

void WTF::BinarySemaphore::signal(WTF::BinarySemaphore *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  _QWORD v14[2];
  char v15;
  _QWORD v16[3];

  v9 = (unsigned __int8 *)this + 1;
  if (__ldaxr((unsigned __int8 *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 1);
LABEL_5:
  *(_BYTE *)this = 1;
  v11 = (unsigned __int8 *)this + 2;
  v12 = atomic_load(v11);
  if ((v12 & 1) != 0)
  {
    v15 = 0;
    v14[0] = v11;
    v14[1] = &v15;
    v16[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v16[1] = v16;
    v16[2] = v14;
    WTF::ParkingLot::unparkOneImpl((uint64_t)v11, (unint64_t)v16, a3, a4, a5, a6, a7, a8);
  }
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::BinarySemaphore::waitUntil(WTF::BinarySemaphore *this, const WTF::TimeWithDynamicClockType *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  int v15;

  v10 = (unsigned __int8 *)this + 1;
  if (__ldaxr((unsigned __int8 *)this + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 1);
  do
  {
LABEL_5:
    if (*(_BYTE *)this)
      goto LABEL_8;
  }
  while ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 2, v10, a2) & 1) != 0);
  if (*(_BYTE *)this)
  {
LABEL_8:
    *(_BYTE *)this = 0;
    v12 = 1;
    v13 = __ldxr(v10);
    if (v13 == 1)
      goto LABEL_9;
LABEL_12:
    __clrex();
    goto LABEL_13;
  }
  v12 = 0;
  v15 = __ldxr(v10);
  if (v15 != 1)
    goto LABEL_12;
LABEL_9:
  if (!__stlxr(0, v10))
    return v12;
LABEL_13:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v12;
}

void WTF::BitVector::setSlow(WTF::BitVector *this, const WTF::BitVector *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  _QWORD *v16;
  const WTF::BitVector *v17;

  v9 = *(_QWORD *)a2;
  if (*(uint64_t *)a2 >= 2)
  {
    v12 = *(_QWORD *)(2 * v9) + 63;
    v13 = v12 & 0xFFFFFFFFFFFFFFC0;
    v14 = WTF::fastMalloc((WTF *)(((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v14 = v13;
    v15 = (void *)(v14 + 8);
    v16 = (_QWORD *)(2 * *(_QWORD *)a2);
    if (*(uint64_t *)a2 >= 0)
      v17 = (const WTF::BitVector *)(v16 + 1);
    else
      v17 = a2;
    if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
    {
      memcpy(v15, v17, 8uLL);
      v9 = v14 >> 1;
      v10 = *(_QWORD *)this;
      if (*(uint64_t *)this < 2)
        goto LABEL_3;
    }
    else
    {
      memcpy(v15, v17, (unint64_t)(*v16 + 7) >> 3);
      v9 = v14 >> 1;
      v10 = *(_QWORD *)this;
      if (*(uint64_t *)this < 2)
        goto LABEL_3;
    }
  }
  else
  {
    v10 = *(_QWORD *)this;
    if (*(uint64_t *)this < 2)
    {
LABEL_3:
      *(_QWORD *)this = v9;
      return;
    }
  }
  WTF::fastFree(2 * v10, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = v9;
}

_QWORD *WTF::BitVector::OutOfLineBits::create(WTF::BitVector::OutOfLineBits *this)
{
  unint64_t v1;
  _QWORD *result;

  v1 = ((unint64_t)this + 63) & 0xFFFFFFFFFFFFFFC0;
  result = (_QWORD *)WTF::fastMalloc((WTF *)(((((unint64_t)this + 63) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
  *result = v1;
  return result;
}

void WTF::BitVector::resize(WTF::BitVector *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if ((unint64_t)a2 <= 0x3F)
  {
    if ((*(_QWORD *)this & 0x8000000000000000) == 0)
    {
      v8 = 2 * *(_QWORD *)this;
      *(_QWORD *)this = *(_QWORD *)(v8 + 8) | 0x8000000000000000;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    WTF::BitVector::resizeOutOfLine(this, (unint64_t)a2, 0);
  }
}

void WTF::BitVector::resizeOutOfLine(WTF::BitVector *this, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v6 = a2 + 63;
  v7 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)((((a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
  v9 = (unint64_t)v8;
  *v8 = v7;
  v10 = v6 >> 6;
  if ((*(_QWORD *)this & 0x8000000000000000) == 0)
  {
    v11 = (unint64_t *)(2 * *(_QWORD *)this);
    if (*v11 >= a2)
    {
      memcpy(v8 + 1, v11 + 1, 8 * v10);
      goto LABEL_8;
    }
    v12 = (*v11 + 63) >> 6;
    bzero(v8 + 1, 8 * a3);
    memcpy((void *)(v9 + 8 + 8 * a3), (const void *)(2 * *(_QWORD *)this + 8), 8 * v12);
    if (v10 >= v12 + a3)
    {
      bzero((void *)(v9 + 8 + 8 * a3 + 8 * v12), 8 * (v10 - (v12 + a3)));
LABEL_8:
      WTF::fastFree(2 * *(_QWORD *)this, v13, v14, v15, v16, v17, v18, v19);
      goto LABEL_9;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x197AB8210);
  }
  v20 = v8 + 1;
  bzero(v8 + 1, 8 * a3);
  v20[a3] = *(_QWORD *)this & 0x7FFFFFFFFFFFFFFFLL;
  if (a3 + 1 > v10)
    goto LABEL_10;
  bzero(&v20[a3 + 1], 8 * (v10 + ~a3));
LABEL_9:
  *(_QWORD *)this = v9 >> 1;
}

void WTF::BitVector::clearAll(WTF::BitVector *this)
{
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    *(_QWORD *)this = 0x8000000000000000;
  else
    bzero((void *)(2 * *(_QWORD *)this + 8), (unint64_t)(*(_QWORD *)(2 * *(_QWORD *)this) + 7) >> 3);
}

void WTF::BitVector::shiftRightByMultipleOf64(WTF::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if ((a2 & 0x3F) != 0)
  {
    __break(0xC471u);
  }
  else
  {
    v2 = a2 >> 6;
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      v3 = a2 + 63;
    else
      v3 = *(_QWORD *)(2 * *(_QWORD *)this) + a2;
    WTF::BitVector::resizeOutOfLine(this, v3, v2);
  }
}

void WTF::BitVector::mergeSlow(WTF::BitVector *this, const WTF::BitVector *a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::BitVector *v30;

  v3 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
  {
    v29 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    if (*(uint64_t *)this >= 0)
      v30 = (WTF::BitVector *)(2 * *(_QWORD *)this + 8);
    else
      v30 = this;
    *(_QWORD *)v30 |= v29;
    return;
  }
  v5 = *(_QWORD *)(2 * v3);
  v6 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
  {
    if (v5 <= 0x3F)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*(_QWORD *)(2 * v6) < v5)
  {
LABEL_4:
    WTF::BitVector::resizeOutOfLine(this, v5, 0);
    v6 = *(_QWORD *)this;
  }
LABEL_5:
  v7 = 2 * v6;
  v8 = *(_QWORD *)(2 * v6) + 63;
  if ((v8 & 0x3FFFFFFFC0) != 0)
  {
    v9 = v8 >> 6;
    v10 = 2 * *(_QWORD *)a2;
    v11 = v10 + 8;
    v12 = v7 + 8;
    v13 = (v8 >> 6);
    v14 = (v9 - 1);
    if (v14 < 0xD)
      goto LABEL_15;
    v15 = ((8 * v9 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 16;
    v16 = v7 + v15;
    if (v12 < v10 + v15 && v11 < v16)
      goto LABEL_15;
    v18 = v14 + 1;
    v19 = (v14 + 1) & 0x1FFFFFFFCLL;
    v13 -= v19;
    v20 = v9 - 1;
    v21 = v19;
    do
    {
      v22 = 8 * v20;
      v23 = *(int8x16_t *)(v11 + v22 - 8);
      v24 = *(int8x16_t *)(v11 + v22 - 24);
      v25 = v12 + v22;
      v26 = vorrq_s8(*(int8x16_t *)(v25 - 24), v24);
      *(int8x16_t *)(v25 - 8) = vorrq_s8(*(int8x16_t *)(v25 - 8), v23);
      *(int8x16_t *)(v25 - 24) = v26;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    if (v18 != v19)
    {
LABEL_15:
      v27 = v13 - 1;
      do
      {
        v28 = v27;
        *(_QWORD *)(v12 + 8 * v27) |= *(_QWORD *)(v11 + 8 * v27);
        --v27;
      }
      while (v28);
    }
  }
}

unint64_t *WTF::BitVector::filterSlow(unint64_t *this, const WTF::BitVector *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  _QWORD *v20;
  int8x16_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unsigned int v37;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
  {
    if ((*this & 0x8000000000000000) == 0)
      v35 = (unint64_t *)(2 * *this + 8);
    else
      v35 = this;
    *v35 &= v2 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v3 = *this;
    if ((*this & 0x8000000000000000) != 0)
    {
      *this = *(_QWORD *)(2 * v2 + 8) & v3 | 0x8000000000000000;
      return this;
    }
    v4 = (_QWORD *)(2 * v3);
    v5 = (_QWORD *)(2 * v2);
    v6 = (unint64_t)(*v4 + 63) >> 6;
    v7 = (unint64_t)(*v5 + 63) >> 6;
    if (v7 >= v6)
      v8 = (unint64_t)(*v4 + 63) >> 6;
    else
      v8 = (unint64_t)(*v5 + 63) >> 6;
    v9 = v8;
    if ((_DWORD)v8)
    {
      v10 = v5 + 1;
      v11 = v4 + 1;
      if (v8 < 0xEuLL)
        goto LABEL_16;
      v12 = ((8 * v8 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 16;
      v13 = v11 >= (_QWORD *)((char *)v5 + v12) || v10 >= (_QWORD *)((char *)v4 + v12);
      if (!v13)
        goto LABEL_16;
      v14 = v8 & 3;
      v15 = v8 - v14;
      v16 = v8 - 1;
      do
      {
        v17 = v16;
        v18 = *(int8x16_t *)&v5[v17];
        v19 = *(int8x16_t *)&v10[v17 - 3];
        v20 = &v11[v17];
        v21 = vandq_s8(*(int8x16_t *)(v20 - 3), v19);
        *(int8x16_t *)(v20 - 1) = vandq_s8(*(int8x16_t *)(v20 - 1), v18);
        *(int8x16_t *)(v20 - 3) = v21;
        v16 -= 4;
        v15 -= 4;
      }
      while (v15);
      v9 = v14;
      if (v14)
      {
LABEL_16:
        v22 = v9 - 1;
        do
        {
          v23 = v22;
          v11[v22] &= v10[v22];
          --v22;
        }
        while (v23);
      }
      v7 = (unint64_t)(*v5 + 63) >> 6;
    }
    v24 = v7;
    if (v6 > v7)
    {
      v25 = (v7 + 1);
      v13 = v6 >= v25;
      v26 = v6 - v25;
      if (!v13)
        v26 = 0;
      v27 = v26 + 1;
      if (v26 + 1 < 0x22)
        goto LABEL_40;
      v28 = (v7 + 1);
      v13 = v6 >= v28;
      v29 = v6 - v28;
      if (!v13)
        v29 = 0;
      if (__CFADD__((_DWORD)v7, (_DWORD)v29)
        || ((v13 = -2 - (int)v7 >= v29, v30 = HIDWORD(v29), v13) ? (v31 = v30 == 0) : (v31 = 0), !v31))
      {
LABEL_40:
        v32 = v7;
LABEL_41:
        v36 = v4 + 1;
        v37 = v7 + 1;
        do
        {
          v36[v32] = 0;
          v32 = v37++;
        }
        while (v6 > v32);
        return this;
      }
      v32 = v7 + (v27 & 0xFFFFFFFFFFFFFFFCLL);
      LODWORD(v7) = v7 + (v27 & 0xFFFFFFFC);
      v33 = &v4[v24 + 3];
      v34 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        *(v33 - 1) = 0uLL;
        *v33 = 0uLL;
        v33 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v27 != (v27 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_41;
    }
  }
  return this;
}

unint64_t *WTF::BitVector::excludeSlow(unint64_t *this, const WTF::BitVector *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
  {
    v23 = ~v2 | 0x8000000000000000;
    if ((*this & 0x8000000000000000) == 0)
      v24 = (unint64_t *)(2 * *this + 8);
    else
      v24 = this;
    *v24 &= v23;
  }
  else
  {
    v3 = *this;
    if ((*this & 0x8000000000000000) != 0)
    {
      *this = v3 & ~*(_QWORD *)(2 * v2 + 8) | 0x8000000000000000;
    }
    else
    {
      v4 = 2 * v3;
      v5 = (_QWORD *)(2 * v2);
      if ((unint64_t)(*(_QWORD *)(2 * v2) + 63) >> 6 >= (unint64_t)(*(_QWORD *)(2 * v3) + 63) >> 6)
        v6 = (unint64_t)(*(_QWORD *)(2 * v3) + 63) >> 6;
      else
        v6 = (unint64_t)(*v5 + 63) >> 6;
      v7 = v6;
      if ((_DWORD)v6)
      {
        v8 = v5 + 1;
        v9 = v4 + 8;
        if (v6 < 0xCuLL)
          goto LABEL_16;
        v10 = ((8 * v6 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 16;
        v11 = v4 + v10;
        if (v9 < (unint64_t)v5 + v10 && (unint64_t)v8 < v11)
          goto LABEL_16;
        v13 = v6 & 3;
        v14 = v6 - v13;
        v15 = v6 - 1;
        do
        {
          v16 = v15;
          v17 = *(int8x16_t *)&v8[v16 - 1];
          v18 = *(int8x16_t *)&v8[v16 - 3];
          v19 = v9 + v16 * 8;
          v20 = vbicq_s8(*(int8x16_t *)(v19 - 24), v18);
          *(int8x16_t *)(v19 - 8) = vbicq_s8(*(int8x16_t *)(v19 - 8), v17);
          *(int8x16_t *)(v19 - 24) = v20;
          v15 -= 4;
          v14 -= 4;
        }
        while (v14);
        v7 = v13;
        if (v13)
        {
LABEL_16:
          v21 = v7 - 1;
          do
          {
            v22 = v21;
            *(_QWORD *)(v9 + 8 * v21) &= ~v8[v21];
            --v21;
          }
          while (v22);
        }
      }
    }
  }
  return this;
}

uint64_t WTF::BitVector::bitCountSlow(WTF::BitVector *this)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  _QWORD *v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint8x8_t v17;
  __int32 v18;
  uint8x8_t v19;

  v1 = (_QWORD *)(2 * *(_QWORD *)this);
  v2 = *v1 + 63;
  if ((v2 & 0x3FFFFFFFC0) == 0)
    return 0;
  v3 = v2 >> 6;
  v4 = v1 + 1;
  v5 = (v2 >> 6);
  v6 = (v3 - 1);
  if (v6 < 3)
  {
    result = 0;
LABEL_8:
    v16 = v5 - 1;
    do
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v4[v16]);
      v17.i16[0] = vaddlv_u8(v17);
      v18 = v17.i32[0];
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v4[v16]));
      v19.i16[0] = vaddlv_u8(v19);
      result += (v19.i32[0] + v18);
    }
    while ((unint64_t)v16--);
    return result;
  }
  v8 = v6 + 1;
  v5 -= v8 & 0x1FFFFFFFCLL;
  v9 = v3 - 1;
  v10 = 0uLL;
  v11 = v8 & 0x1FFFFFFFCLL;
  v12 = 0uLL;
  do
  {
    v13 = &v4[v9];
    v14 = (int64x2_t)vextq_s8(*(int8x16_t *)(v13 - 1), *(int8x16_t *)(v13 - 1), 8uLL);
    v15 = (int64x2_t)vextq_s8(*(int8x16_t *)(v13 - 3), *(int8x16_t *)(v13 - 3), 8uLL);
    v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, vpadal_u16(vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vshrn_n_s64(v14, 0x20uLL)))), vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vmovn_s64(v14)))));
    v12 = (int64x2_t)vaddw_u32((uint64x2_t)v12, vpadal_u16(vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vshrn_n_s64(v15, 0x20uLL)))), vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vmovn_s64(v15)))));
    v9 -= 4;
    v11 -= 4;
  }
  while (v11);
  result = vaddvq_s64(vaddq_s64(v12, v10));
  if (v8 != (v8 & 0x1FFFFFFFCLL))
    goto LABEL_8;
  return result;
}

BOOL WTF::BitVector::isEmptySlow(WTF::BitVector *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(2 * *(_QWORD *)this);
  v2 = ((unint64_t)(*v1 + 63) >> 6);
  do
  {
    v3 = v2 * 8;
    if (!(v2 * 8))
      break;
  }
  while (!v1[v2--]);
  return v3 == 0;
}

BOOL WTF::BitVector::equalsSlowCase(WTF::BitVector *this, const WTF::BitVector *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  WTF::BitVector *v23;
  unint64_t *v24;
  const WTF::BitVector *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int i;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t k;
  uint64_t v34;
  char v35;
  unint64_t j;
  uint64_t v37;
  unsigned int v38;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)a2;
  if (((*(_QWORD *)a2 ^ *(_QWORD *)this) & 0x8000000000000000) != 0)
  {
    if (v2 < 0)
    {
      v20 = 63;
      if ((v3 & 0x8000000000000000) == 0)
      {
LABEL_22:
        if (v20 <= *(_QWORD *)(2 * v3))
          v21 = *(_QWORD *)(2 * v3);
        else
          LODWORD(v21) = v20;
        v22 = v21;
        if (!(_DWORD)v21)
          return 1;
LABEL_32:
        v23 = (WTF::BitVector *)(2 * v2 + 8);
        if (v2 < 0)
          v23 = this;
        v24 = (unint64_t *)(2 * v3);
        v25 = (const WTF::BitVector *)(2 * v3 + 8);
        if (v3 < 0)
          v25 = a2;
        if ((v2 & 0x8000000000000000) == 0)
        {
          v26 = *(_QWORD *)(2 * v2);
          if ((v3 & 0x8000000000000000) == 0)
          {
            v27 = *v24;
            for (i = v22 - 1; ; --i)
            {
              v29 = i;
              if (v26 <= i)
              {
                if (v27 > i && ((*(_QWORD *)((char *)v25 + (((unint64_t)i >> 3) & 0x1FFFFFF8)) >> i) & 1) != 0)
                  return 0;
              }
              else
              {
                v30 = *((_QWORD *)v23 + ((unint64_t)i >> 6)) & (1 << i);
                if (v27 <= i)
                {
                  if (v30)
                    return 0;
                }
                else if ((v30 != 0) != ((*((_QWORD *)v25 + ((unint64_t)i >> 6)) & (1 << i)) != 0))
                {
                  return 0;
                }
              }
              if (!v29)
                return 1;
            }
          }
          v35 = v22 - 1;
          for (j = (v21 - 1); ; --j)
          {
            if (v26 <= j)
            {
              if (j <= 0x3E
                && ((*(_QWORD *)((char *)v25 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
              {
                return 0;
              }
            }
            else
            {
              v37 = *((_QWORD *)v23 + (j >> 6)) & (1 << v35);
              if (j >= 0x3F)
              {
                if (v37)
                  return 0;
              }
              else if ((v37 != 0) != ((*((_QWORD *)v25 + (j >> 6)) & (1 << v35)) != 0))
              {
                return 0;
              }
            }
            --v35;
            LODWORD(v21) = v21 - 1;
            if (!(_DWORD)v21)
              return 1;
          }
        }
        if ((v3 & 0x8000000000000000) == 0)
        {
          v31 = *v24;
          v32 = v22 - 1;
          for (k = (v21 - 1); ; --k)
          {
            if (k > 0x3E)
            {
              if (v31 > k && ((*(_QWORD *)((char *)v25 + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
                return 0;
            }
            else
            {
              v34 = *((_QWORD *)v23 + (k >> 6)) & (1 << v32);
              if (v31 <= k)
              {
                if (v34)
                  return 0;
              }
              else if ((v34 != 0) != ((*((_QWORD *)v25 + (k >> 6)) & (1 << v32)) != 0))
              {
                return 0;
              }
            }
            --v32;
            LODWORD(v21) = v21 - 1;
            if (!(_DWORD)v21)
              return 1;
          }
        }
        v38 = v21 - 1;
        result = 1;
        while (v38 > 0x3E || ((*(_QWORD *)v23 & (1 << v38)) != 0) == ((*(_QWORD *)v25 & (1 << v38)) != 0))
        {
          --v38;
          LODWORD(v21) = v21 - 1;
          if (!(_DWORD)v21)
            return result;
        }
        return 0;
      }
    }
    else
    {
      v20 = *(_QWORD *)(2 * v2);
      if ((v3 & 0x8000000000000000) == 0)
        goto LABEL_22;
    }
    if (v20 <= 0x3F)
      LODWORD(v21) = 63;
    else
      LODWORD(v21) = v20;
    v22 = v21;
    if (!(_DWORD)v21)
      return 1;
    goto LABEL_32;
  }
  v4 = 2 * v2;
  v5 = (_QWORD *)(2 * v3);
  v6 = (unint64_t)(*(_QWORD *)(2 * v2) + 63) >> 6;
  v7 = *v5 + 63;
  v8 = v7 >> 6;
  v9 = v6 > v7 >> 6;
  if (v6 >= v7 >> 6)
    v10 = v7 >> 6;
  else
    v10 = (unint64_t)(*(_QWORD *)(2 * v2) + 63) >> 6;
  if (v9)
    v11 = (unint64_t)(*(_QWORD *)(2 * v2) + 63) >> 6;
  else
    v11 = v8;
  v9 = v11 > v10;
  v12 = v11 - v10;
  if (v9)
  {
    if (v6 >= v8)
      v13 = (_QWORD *)v4;
    else
      v13 = v5;
    v14 = &v13[v10 + 1];
    do
    {
      if (*v14++)
        return 0;
    }
    while (--v12);
  }
  v16 = v10;
  do
  {
    result = v16 == 0;
    if (!(v16 * 8))
      break;
    v18 = *(_QWORD *)(v4 + v16 * 8);
    v19 = v5[v16--];
  }
  while (v18 == v19);
  return result;
}

uint64_t WTF::BitVector::hashSlowCase(WTF::BitVector *this)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  _QWORD *v13;
  int8x16_t v14;
  uint64_t v15;

  v1 = (_QWORD *)(2 * *(_QWORD *)this);
  v2 = *v1 + 63;
  if ((v2 & 0x3FFFFFFFC0) == 0)
    return 0;
  v3 = v2 >> 6;
  v4 = v1 + 1;
  v5 = (v2 >> 6);
  v6 = (v3 - 1);
  if (v6 < 0xB)
  {
    result = 0;
LABEL_8:
    v15 = v5 - 1;
    do
      result ^= v4[v15];
    while ((unint64_t)v15--);
    return result;
  }
  v8 = v6 + 1;
  v5 -= v8 & 0x1FFFFFFFCLL;
  v9 = v3 - 1;
  v10 = 0uLL;
  v11 = v8 & 0x1FFFFFFFCLL;
  v12 = 0uLL;
  do
  {
    v13 = &v4[v9];
    v10 = veorq_s8(vextq_s8(*(int8x16_t *)(v13 - 1), *(int8x16_t *)(v13 - 1), 8uLL), v10);
    v12 = veorq_s8(vextq_s8(*(int8x16_t *)(v13 - 3), *(int8x16_t *)(v13 - 3), 8uLL), v12);
    v9 -= 4;
    v11 -= 4;
  }
  while (v11);
  v14 = veorq_s8(v12, v10);
  result = (uint64_t)veor_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  if (v8 != (v8 & 0x1FFFFFFFCLL))
    goto LABEL_8;
  return result;
}

uint64_t *WTF::BitVector::dump(uint64_t *this, WTF::PrintStream *a2)
{
  uint64_t *v3;
  unint64_t i;
  WTF::PrintStream *v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  const char *v9;

  v3 = this;
  for (i = 0; ; ++i)
  {
    v6 = (unint64_t *)(2 * *v3);
    if (*v3 < 0)
      break;
    if (i >= *v6)
      return this;
LABEL_7:
    v7 = (uint64_t *)(v6 + 1);
    if (*v3 >= 0)
      v8 = v7;
    else
      v8 = v3;
    if ((*(uint64_t *)((char *)v8 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << i)) != 0)
      v9 = "1";
    else
      v9 = "-";
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v5, "%s", v9);
    this = (uint64_t *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  if (i < 0x3F)
    goto LABEL_7;
  return this;
}

void ReportBlockedObjCException(NSException *a1)
{
  void *v1;
  void *v2;
  NSException *v3;

  v3 = a1;
  -[NSException name](v3, "name");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSException reason](v3, "reason");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog((NSString *)CFSTR("*** WebKit discarding exception: <%@> %@"), v1, v2);

}

void sub_197AB8D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_197AB8DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

const __CFURL *WTF::bytesAsString@<X0>(const __CFURL *this@<X0>, int **a2@<X8>)
{
  const __CFURL *v4;
  CFIndex v5;
  CFIndex v6;
  int *v7;
  UInt8 *v8;

  if (!this)
  {
    *a2 = 0;
    return this;
  }
  v4 = this;
  v5 = CFURLGetBytes(this, 0, 0);
  if (v5 == -1)
    goto LABEL_12;
  v6 = v5;
  if (v5 >= 0x80000000)
  {
    __break(0xC471u);
    JUMPOUT(0x197AB8EB0);
  }
  if (!(_DWORD)v5)
  {
    v8 = 0;
    v7 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_9;
  }
  if ((unint64_t)v5 >> 31)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x197AB8E90);
  }
  v7 = (int *)WTF::fastCompactMalloc((WTF *)(v5 + 20));
  v8 = (UInt8 *)(v7 + 5);
  *v7 = 2;
  v7[1] = v6;
  *((_QWORD *)v7 + 1) = v7 + 5;
  v7[4] = 4;
LABEL_9:
  *a2 = v7;
  return (const __CFURL *)CFURLGetBytes(v4, v8, v6);
}

const __CFURL *WTF::bytesAsVector@<X0>(const __CFURL *this@<X0>, uint64_t a2@<X8>)
{
  UInt8 *v4;
  const __CFURL *v5;
  unint64_t v6;
  CFIndex v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  UInt8 *v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (UInt8 *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_DWORD *)(a2 + 8) = 2048;
  if (!this)
  {
    *(_DWORD *)(a2 + 12) = 0;
    return this;
  }
  v5 = this;
  *(_DWORD *)(a2 + 12) = 2048;
  this = (const __CFURL *)CFURLGetBytes(this, v4, 2048);
  if (this != (const __CFURL *)-1)
  {
    *(_DWORD *)(a2 + 12) = (_DWORD)this;
    return this;
  }
  v6 = CFURLGetBytes(v5, 0, 0);
  if (v6 == -1)
    goto LABEL_23;
  v7 = v6;
  v8 = *(unsigned int *)(a2 + 8);
  if (v6 > v8)
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v6)
      v11 = v6;
    else
      v11 = v10;
    v12 = *(UInt8 **)a2;
    v13 = *(unsigned int *)(a2 + 12);
    if (v11 < 0x801)
    {
      *(_QWORD *)a2 = v4;
      *(_DWORD *)(a2 + 8) = 2048;
      v14 = v4;
      goto LABEL_17;
    }
    if (!HIDWORD(v11))
    {
      v14 = (void *)WTF::fastMalloc((WTF *)v11);
      *(_DWORD *)(a2 + 8) = v11;
      *(_QWORD *)a2 = v14;
LABEL_17:
      memcpy(v14, v12, v13);
      if (v4 != v12 && v12)
      {
        if (*(UInt8 **)a2 == v12)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v12, v15, v16, v17, v18, v19, v20, v21);
      }
      goto LABEL_22;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197AB9034);
  }
LABEL_22:
  *(_DWORD *)(a2 + 12) = v7;
  return (const __CFURL *)CFURLGetBytes(v5, *(UInt8 **)a2, v7);
}

uint64_t WTF::isSameOrigin(WTF *this, const __CFURL *a2, const WTF::URL *a3)
{
  const WTF::URL *v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t result;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;

  if (*((_DWORD *)a2 + 5) <= *((_DWORD *)a2 + 3))
  {
    WTF::bytesAsVector(this, (uint64_t)&v47);
    if ((v49 & 0x80000000) != 0)
    {
      result = 91;
      __break(0xC471u);
      return result;
    }
    v15 = (unsigned __int8 *)v47;
    v16 = v49 | 0x100000000;
    v17 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v18 = *(unsigned __int8 **)(v17 + 8);
      v19 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v18 = 0;
      v19 = 0x100000000;
    }
    v28 = *((_DWORD *)a2 + 8);
    v29 = *((_DWORD *)a2 + 2);
    v30 = ((v29 >> 3) & 7) + *((_DWORD *)a2 + 6);
    if ((_DWORD)v30 != (v29 >> 6) + 1 || !v17)
    {
      if (v28 <= v30)
        goto LABEL_38;
      goto LABEL_18;
    }
    v31 = v30 + 1;
    v32 = v30;
    if ((v30 + 1) < *(_DWORD *)(v17 + 4))
    {
      v33 = *(_QWORD *)(v17 + 8);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
      {
        v32 = v30;
        if (*(_BYTE *)(v33 + v30) != 47)
          goto LABEL_33;
        v34 = *(unsigned __int8 *)(v33 + v31);
      }
      else
      {
        v32 = v30;
        if (*(_WORD *)(v33 + 2 * v30) != 47)
          goto LABEL_33;
        v34 = *(unsigned __int16 *)(v33 + 2 * v31);
      }
      v32 = v30 + 2;
      if (v34 != 46)
        v32 = v30;
    }
LABEL_33:
    if (v28 <= v32)
      goto LABEL_38;
    if (v31 < *(_DWORD *)(v17 + 4))
    {
      v37 = *(_QWORD *)(v17 + 8);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
      {
        if (*(_BYTE *)(v37 + v30) == 47)
        {
          v38 = *(unsigned __int8 *)(v37 + v31);
LABEL_43:
          if (v38 == 46)
            LODWORD(v30) = v30 + 2;
        }
      }
      else if (*(_WORD *)(v37 + 2 * v30) == 47)
      {
        v38 = *(unsigned __int16 *)(v37 + 2 * v31);
        goto LABEL_43;
      }
    }
LABEL_18:
    v35 = (v30 + 1);
    if (v49)
    {
      if (v49 > v35)
        v16 = v35 | 0x100000000;
      if ((_DWORD)v19)
        goto LABEL_22;
    }
    else
    {
      v16 = 0x100000000;
      v15 = "";
      if ((_DWORD)v19)
      {
LABEL_22:
        v36 = v35 | 0x100000000;
        if ((v19 & 0x100000000) == 0)
          v36 = v35;
        if (v35 < v19)
          v19 = v36;
        goto LABEL_38;
      }
    }
    v19 = 0x100000000;
    v18 = "";
LABEL_38:
    v12 = WTF::operator==(v15, v16, v18, v19);
    v46 = v47;
    if (&v50 == (uint64_t *)v47 || !v47)
      return v12;
    v47 = 0;
    v48 = 0;
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
    return v12;
  }
  WTF::URL::URL((WTF::URL *)&v47, this);
  v12 = WTF::protocolHostAndPortAreEqual((WTF *)&v47, a2, v4);
  v13 = v47;
  v47 = 0;
  if (!v13)
    return v12;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    return v12;
  }
  WTF::StringImpl::~StringImpl(v13, v5, v6, v7, v8, v9, v10, v11);
  WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
  return v12;
}

BOOL WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int8x16_t *v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL8 result;
  int8x16_t *v9;
  uint64_t v10;
  int16x8_t *v11;
  unsigned int v12;
  uint8x8_t *v13;
  uint16x8_t v14;
  unsigned int v15;
  uint16x8_t v16;
  BOOL v17;
  uint8x8_t *v18;
  unsigned int v19;
  int16x8_t *v20;
  uint16x8_t v21;
  unsigned int v22;
  uint16x8_t v23;
  BOOL v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  __int32 v39;
  uint64_t v40;
  int v41;
  int v42;
  int v44;
  __int32 v45;
  uint64_t v46;
  int v47;
  int v48;
  uint8x16_t v50;
  unsigned int v51;
  uint8x16_t v52;
  BOOL v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  unsigned int v57;
  uint16x8_t v58;
  BOOL v59;

  result = (_DWORD)a2 == (_DWORD)a4 && a1 == a3;
  if (a1 == a3 || (_DWORD)a2 != (_DWORD)a4)
    return result;
  if (!(_DWORD)a2)
    return 1;
  v9 = (int8x16_t *)(a4 & 0xFF00000000);
  v10 = a4;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v9)
    {
      if ((_DWORD)a4)
      {
        if (*a1 == *a3)
        {
          v5 = a4 - 1;
          if ((_DWORD)a4 != 1)
          {
            v4 = (int8x16_t *)(a1 + 1);
            v9 = (int8x16_t *)(a3 + 1);
            v6 = a4 - 2;
            if ((_DWORD)a4 == 2)
              return v4->u8[0] == v9->u8[0];
            goto LABEL_43;
          }
          return 1;
        }
        return 0;
      }
    }
    else if ((_DWORD)a4)
    {
      if (*(_WORD *)a3 == *a1)
      {
        v18 = (uint8x8_t *)(a1 + 1);
        v19 = a4 - 1;
        v20 = (int16x8_t *)(a3 + 2);
        if ((a4 - 1) < 8)
        {
          if (v19 >= 4)
          {
            v32 = (v18->u32[0] | ((unint64_t)v18->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v31 = ((v32 | (v32 << 8)) & 0xFF00FF00FF00FFLL) == v20->i64[0];
            v33 = v19 & 3;
            v34 = (*(unsigned int *)((char *)v18->u32 + v33) | ((unint64_t)*(unsigned int *)((char *)v18->u32
                                                                                                  + v33) << 16)) & 0xFFFF0000FFFFLL;
            v35 = (v34 | (v34 << 8)) & 0xFF00FF00FF00FFLL;
            v36 = *(uint64_t *)((char *)v20->i64 + 2 * v33);
            return v31 && v35 == v36;
          }
          if (v19 >= 2)
          {
            v44 = (v18->u16[0] | (v18->u16[0] << 8)) & 0xFF00FF;
            v45 = v20->i32[0];
            v46 = v19 & 1;
            v47 = (*(unsigned __int16 *)((char *)v18->u16 + v46) | (*(unsigned __int16 *)((char *)v18->u16 + v46) << 8)) & 0xFF00FF;
            v48 = *(__int32 *)((char *)v20->i32 + 2 * v46);
            return v44 == v45 && v47 == v48;
          }
          if ((_DWORD)a4 == 2)
            return v20->u16[0] == v18->u8[0];
          return 1;
        }
        v21 = (uint16x8_t)vceqq_s16(*v20, (int16x8_t)vmovl_u8(*v18));
        v21.i16[0] = vminvq_u16(v21);
        if (v21.i32[0])
        {
          v22 = v19 & 7;
          do
          {
            v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v20 + 2 * v22), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v18 + v22)));
            v23.i16[0] = vminvq_u16(v23);
            result = v23.i32[0] != 0;
            v22 += 8;
            if (v23.i32[0])
              v24 = v22 >= v19;
            else
              v24 = 1;
          }
          while (!v24);
          return result;
        }
      }
      return 0;
    }
    goto LABEL_42;
  }
  if (v9)
  {
    if ((_DWORD)a4)
    {
      if (*(_WORD *)a1 == *a3)
      {
        v11 = (int16x8_t *)(a1 + 2);
        v12 = a4 - 1;
        v13 = (uint8x8_t *)(a3 + 1);
        if ((a4 - 1) < 8)
        {
          if (v12 >= 4)
          {
            v26 = (v13->u32[0] | ((unint64_t)v13->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v31 = ((v26 | (v26 << 8)) & 0xFF00FF00FF00FFLL) == v11->i64[0];
            v27 = v12 & 3;
            v28 = (*(unsigned int *)((char *)v13->u32 + v27) | ((unint64_t)*(unsigned int *)((char *)v13->u32
                                                                                                  + v27) << 16)) & 0xFFFF0000FFFFLL;
            v29 = (v28 | (v28 << 8)) & 0xFF00FF00FF00FFLL;
            v30 = *(uint64_t *)((char *)v11->i64 + 2 * v27);
            return v31 && v29 == v30;
          }
          if (v12 >= 2)
          {
            v38 = (v13->u16[0] | (v13->u16[0] << 8)) & 0xFF00FF;
            v39 = v11->i32[0];
            v40 = v12 & 1;
            v41 = (*(unsigned __int16 *)((char *)v13->u16 + v40) | (*(unsigned __int16 *)((char *)v13->u16 + v40) << 8)) & 0xFF00FF;
            v42 = *(__int32 *)((char *)v11->i32 + 2 * v40);
            return v38 == v39 && v41 == v42;
          }
          if ((_DWORD)a4 == 2)
            return v11->u16[0] == v13->u8[0];
          return 1;
        }
        v14 = (uint16x8_t)vceqq_s16(*v11, (int16x8_t)vmovl_u8(*v13));
        v14.i16[0] = vminvq_u16(v14);
        if (v14.i32[0])
        {
          v15 = v12 & 7;
          do
          {
            v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v11 + 2 * v15), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v13 + v15)));
            v16.i16[0] = vminvq_u16(v16);
            result = v16.i32[0] != 0;
            v15 += 8;
            if (v16.i32[0])
              v17 = v15 >= v12;
            else
              v17 = 1;
          }
          while (!v17);
          return result;
        }
      }
      return 0;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    switch(31 - __clz(v6))
    {
      case 0u:
        return v4->u16[0] == v9->u16[0];
      case 1u:
        if (v4->u16[0] != v9->u16[0])
          return 0;
        return *(unsigned __int16 *)&a1[a4 - 2] == *(unsigned __int16 *)&a3[a4 - 2];
      case 2u:
        if (v4->i32[0] != v9->i32[0])
          return 0;
        goto LABEL_100;
      case 3u:
        if (v4->i64[0] == v9->i64[0])
          goto LABEL_103;
        return 0;
      case 4u:
        v54 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[a4 - 16], *(int8x16_t *)&a3[a4 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
        v54.i8[0] = vminvq_u8(v54);
        return v54.i32[0] != 0;
      default:
        v50 = (uint8x16_t)vceqq_s8(*v4, *v9);
        v50.i8[0] = vminvq_u8(v50);
        if (!v50.i32[0])
          return 0;
        if (v5 < 0x10)
          return 1;
        v51 = v5 & 0xF;
        do
        {
          v52 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v51), *(int8x16_t *)((char *)v9 + v51));
          v52.i8[0] = vminvq_u8(v52);
          result = v52.i32[0] != 0;
          v51 += 16;
          if (v52.i32[0])
            v53 = v51 >= v5;
          else
            v53 = 1;
        }
        while (!v53);
        break;
    }
    return result;
  }
  if (!(_DWORD)a4)
    goto LABEL_42;
  if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a3)
    return 0;
  v25 = a4 - 1;
  if ((_DWORD)a4 == 1)
    return 1;
  v4 = (int8x16_t *)(a1 + 2);
  v9 = (int8x16_t *)(a3 + 2);
  if ((_DWORD)a4 == 2)
    return v4->u16[0] == v9->u16[0];
  switch(31 - __clz(a4 - 2))
  {
    case 0u:
      result = v4->i32[0] == v9->i32[0];
      break;
    case 1u:
      if (v4->i32[0] != v9->i32[0])
        return 0;
      v10 = 2 * a4;
LABEL_100:
      result = *(_DWORD *)&a1[v10 - 4] == *(_DWORD *)&a3[v10 - 4];
      break;
    case 2u:
      if (v4->i64[0] != v9->i64[0])
        return 0;
      v10 = 2 * a4;
LABEL_103:
      result = *(_QWORD *)&a1[v10 - 8] == *(_QWORD *)&a3[v10 - 8];
      break;
    case 3u:
      v56 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&a1[2 * a4 - 16], *(int16x8_t *)&a3[2 * a4 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(a1 + 2), *(int16x8_t *)(a3 + 2)));
      v56.i16[0] = vminvq_u16(v56);
      result = v56.i32[0] != 0;
      break;
    default:
      v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, *(int16x8_t *)v9);
      v55.i16[0] = vminvq_u16(v55);
      if (!v55.i32[0])
        return 0;
      if (v25 < 8)
        return 1;
      v57 = v25 & 7;
      do
      {
        v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v4 + 2 * v57), *(int16x8_t *)((char *)v9 + 2 * v57));
        v58.i16[0] = vminvq_u16(v58);
        result = v58.i32[0] != 0;
        v57 += 8;
        if (v58.i32[0])
          v59 = v57 >= v25;
        else
          v59 = 1;
      }
      while (!v59);
      break;
  }
  return result;
}

{
  int v5;
  _BOOL8 result;
  unsigned int v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int v10;
  int v11;
  BOOL v12;
  int16x8_t *v13;
  unsigned int v14;
  uint8x8_t *v15;
  uint16x8_t v16;
  unsigned int v17;
  uint16x8_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int32 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint8x16_t v30;
  uint8x16_t v31;
  unsigned int v32;
  uint8x16_t v33;
  BOOL v34;

  v5 = a4 - 1;
  if (!a4)
    v5 = 0;
  result = (_DWORD)a2 == v5 && a1 == a3;
  if (a1 == a3 || (_DWORD)a2 != v5)
    return result;
  if (!(_DWORD)a2)
    return 1;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!v5)
      goto LABEL_61;
    if (*(_WORD *)a1 != *a3)
      return 0;
    v13 = (int16x8_t *)(a1 + 2);
    v14 = v5 - 1;
    v15 = (uint8x8_t *)(a3 + 1);
    if (v14 >= 8)
    {
      v16 = (uint16x8_t)vceqq_s16(*v13, (int16x8_t)vmovl_u8(*v15));
      v16.i16[0] = vminvq_u16(v16);
      if (v16.i32[0])
      {
        v17 = v14 & 7;
        do
        {
          v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v13 + 2 * v17), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v15 + v17)));
          v18.i16[0] = vminvq_u16(v18);
          result = v18.i32[0] != 0;
          v17 += 8;
          if (v18.i32[0])
            v19 = v17 >= v14;
          else
            v19 = 1;
        }
        while (!v19);
        return result;
      }
      return 0;
    }
    if (v14 >= 4)
    {
      v20 = (v15->u32[0] | ((unint64_t)v15->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v12 = ((v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL) == v13->i64[0];
      v21 = v14 & 3;
      v22 = (*(unsigned int *)((char *)v15->u32 + v21) | ((unint64_t)*(unsigned int *)((char *)v15->u32 + v21) << 16)) & 0xFFFF0000FFFFLL;
      v23 = (v22 | (v22 << 8)) & 0xFF00FF00FF00FFLL;
      v24 = *(uint64_t *)((char *)v13->i64 + 2 * v21);
      return v12 && v23 == v24;
    }
    if (v14 >= 2)
    {
      v25 = (v15->u16[0] | (v15->u16[0] << 8)) & 0xFF00FF;
      v26 = v13->i32[0];
      v27 = v14 & 1;
      v28 = (*(unsigned __int16 *)((char *)v15->u16 + v27) | (*(unsigned __int16 *)((char *)v15->u16 + v27) << 8)) & 0xFF00FF;
      v29 = *(__int32 *)((char *)v13->i32 + 2 * v27);
      return v25 == v26 && v28 == v29;
    }
    if (v14 == 1)
    {
      v11 = v15->u8[0];
      v10 = v13->u16[0];
      return v10 == v11;
    }
    return 1;
  }
  if (!v5)
  {
LABEL_61:
    __break(1u);
    return result;
  }
  if (*a1 != *a3)
    return 0;
  v7 = v5 - 1;
  if (v5 == 1)
    return 1;
  v8 = (int8x16_t *)(a1 + 1);
  v9 = (int8x16_t *)(a3 + 1);
  if (v5 == 2)
  {
    v10 = v8->u8[0];
    v11 = v9->u8[0];
    return v10 == v11;
  }
  switch(31 - __clz(v5 - 2))
  {
    case 0u:
      v10 = v8->u16[0];
      v11 = v9->u16[0];
      return v10 == v11;
    case 1u:
      if (v8->u16[0] != v9->u16[0])
        return 0;
      v10 = *(unsigned __int16 *)&a1[v5 - 2];
      v11 = *(unsigned __int16 *)&a3[v5 - 2];
      return v10 == v11;
    case 2u:
      if (v8->i32[0] != v9->i32[0])
        return 0;
      v10 = *(_DWORD *)&a1[v5 - 4];
      v11 = *(_DWORD *)&a3[v5 - 4];
      return v10 == v11;
    case 3u:
      if (v8->i64[0] != v9->i64[0])
        return 0;
      return *(_QWORD *)&a1[v5 - 8] == *(_QWORD *)&a3[v5 - 8];
    case 4u:
      v31 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[v5 - 16], *(int8x16_t *)&a3[v5 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
      v31.i8[0] = vminvq_u8(v31);
      return v31.i32[0] != 0;
    default:
      v30 = (uint8x16_t)vceqq_s8(*v8, *v9);
      v30.i8[0] = vminvq_u8(v30);
      if (!v30.i32[0])
        return 0;
      if (v7 < 0x10)
        return 1;
      v32 = v7 & 0xF;
      do
      {
        v33 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v8 + v32), *(int8x16_t *)((char *)v9 + v32));
        v33.i8[0] = vminvq_u8(v33);
        result = v33.i32[0] != 0;
        v32 += 16;
        if (v33.i32[0])
          v34 = v32 >= v7;
        else
          v34 = 1;
      }
      while (!v34);
      break;
  }
  return result;
}

uint64_t WTF::printInternal(uint64_t a1, unsigned int a2)
{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 3)
  {
    result = 46;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E3571900[a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 0x16)
  {
    result = 323;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E357F9F8[a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 3)
  {
    result = 368;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E357FAA8[a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 0xC)
  {
    result = 412;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E357FAC0[a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 0x1C4)
  {
    result = 1385;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E357FC08[a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 < 0x22 && ((0x2017301FFuLL >> a2) & 1) != 0)
  {
    v3 = off_1E3581068[(char)a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    result = 98;
    __break(0xC471u);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;

  if (a2 > 5)
    v3 = (const char *)&str_56_0;
  else
    v3 = off_1E35813B8[(char)a2];
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 0x71)
  {
    result = 7830;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E3581578[(char)a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  char **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  char v13;

  v3 = &(&JSC::opcodeNames)[2 * a2];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = *v3;
  v6 = v3[1];
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
  {
    v9 = (_DWORD)v6 - 1;
    if (!v6)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v5, v9, (uint64_t)&v11, v8);
  }
  else
  {
    WTF::CString::CString(&v11, &str_25, 0);
    v12 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v11);
  if (v12 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v12])(&v13, &v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 0x29)
  {
    result = 84;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E358C1F8[a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 7)
  {
    result = 58;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E35963D8[(char)a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (a2 >= 3)
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v3 = off_1E3596410[(char)a2];
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

{
  char **v3;
  char *v4;
  char *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  char v14;

  v3 = &(&JSC::errorTypeName(JSC::ErrorTypeWithExtension)::errorTypeNames)[2 * a2];
  v4 = *v3;
  v5 = v3[1];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v4)
  {
    v9 = (_DWORD)v5 - 1;
    if (!v5)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v4, v9, (uint64_t)&v12, v8);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v12 = v10;
    v13 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v12);
  if (v13 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v13])(&v14, &v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::CodePtrBase::dumpWithName(const void *a1, const void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  WTF::PrintStream *v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  WTF::PrintStream *v18;
  float v19;
  WTF::PrintStream *v20;
  float v21;
  WTF::PrintStream *v22;
  float v23;
  WTF::PrintStream *v24;
  float v25;
  char *v26;
  size_t v27;
  WTF::PrintStream *v28;
  float v29;
  uint64_t v31;
  int v32;
  char v33;

  if (a1)
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    if (a1 != a2)
    {
      if (a3)
      {
        v13 = a4 - 1;
        if (!a4)
          v13 = 0;
        WTF::StringImpl::utf8ForCharacters(a3, v13, (uint64_t)&v31, v12);
      }
      else
      {
        WTF::CString::CString(&v31, &str_25, 0);
        v32 = 0;
      }
      WTF::printExpectedCStringHelper(v11, "StringView", &v31);
      if (v32 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::StringImpl::utf8ForCharacters("(executable = ", 0xEuLL, (uint64_t)&v31, v19);
      WTF::printExpectedCStringHelper(v18, "StringView", &v31);
      if (v32 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      WTF::PrintStream::printf(v10, "%p", a1);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::StringImpl::utf8ForCharacters(", dataLocation = ", 0x11uLL, (uint64_t)&v31, v21);
      WTF::printExpectedCStringHelper(v20, "StringView", &v31);
      if (v32 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      WTF::PrintStream::printf(v10, "%p", a2);
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v31, v23);
      WTF::printExpectedCStringHelper(v22, "StringView", &v31);
      if (v32 != -1)
        goto LABEL_35;
      goto LABEL_36;
    }
    if (a3)
    {
      v17 = a4 - 1;
      if (!a4)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(a3, v17, (uint64_t)&v31, v12);
    }
    else
    {
      WTF::CString::CString(&v31, &str_25, 0);
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v31, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    WTF::PrintStream::printf(v10, "%p", a1);
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    v26 = ")";
    v27 = 1;
  }
  else
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    if (a3)
    {
      v16 = a4 - 1;
      if (!a4)
        v16 = 0;
      WTF::StringImpl::utf8ForCharacters(a3, v16, (uint64_t)&v31, v15);
    }
    else
    {
      WTF::CString::CString(&v31, &str_25, 0);
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v14, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    v26 = "(null)";
    v27 = 6;
  }
  WTF::StringImpl::utf8ForCharacters(v26, v27, (uint64_t)&v31, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v31);
  if (v32 != -1)
LABEL_35:
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
LABEL_36:
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 40))(a5);
}

WTF::Collator *WTF::Collator::Collator(WTF::Collator *this, const char *__s2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  WTF *v16;
  void *v17;
  unint64_t v18;
  char v20;
  char **v21;
  char *v22;

  v8 = a3;
  if (__ldaxr(byte_1ECF57FA1))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECF57FA1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)byte_1ECF57FA1);
LABEL_5:
  v12 = qword_1ECF57FA8;
  if (!qword_1ECF57FA8
    || (v13 = qword_1ECF57FB0, (const char *)qword_1ECF57FB0 != __s2)
    && (!__s2 || !qword_1ECF57FB0 || strcmp((const char *)qword_1ECF57FB0, __s2))
    || _MergedGlobals_2 != v8)
  {
    v15 = __ldxr(byte_1ECF57FA1);
    if (v15 == 1)
    {
      if (!__stlxr(0, byte_1ECF57FA1))
      {
        if (__s2)
        {
LABEL_17:
          *((_QWORD *)this + 2) = ucol_open();
LABEL_18:
          ucol_setAttribute();
          ucol_setAttribute();
          if (__s2)
          {
            v16 = (WTF *)(strlen(__s2) + 1);
            v17 = (void *)WTF::fastMalloc(v16);
            memcpy(v17, __s2, (size_t)v16);
          }
          else
          {
            v17 = 0;
          }
          *(_QWORD *)this = v17;
          *((_BYTE *)this + 8) = v8;
          return this;
        }
LABEL_22:
        v18 = atomic_load(&qword_1ECF57FC0);
        if (v18 != -1)
        {
          v22 = &v20;
          v21 = &v22;
          std::__call_once(&qword_1ECF57FC0, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::resolveDefaultLocale(char const*)::{lambda(void)#1} &&>>);
        }
        *((_QWORD *)this + 2) = ucol_open();
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF57FA1, 0, a3, a4, a5, a6, a7, a8);
    if (__s2)
      goto LABEL_17;
    goto LABEL_22;
  }
  *((_QWORD *)this + 2) = v12;
  *(_QWORD *)this = v13;
  *((_BYTE *)this + 8) = v8;
  qword_1ECF57FA8 = 0;
  qword_1ECF57FB0 = 0;
  v14 = __ldxr(byte_1ECF57FA1);
  if (v14 == 1)
  {
    if (!__stlxr(0, byte_1ECF57FA1))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF57FA1, 0, a3, a4, a5, a6, a7, a8);
  return this;
}

void WTF::Collator::~Collator(WTF::Collator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (__ldaxr(byte_1ECF57FA1))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECF57FA1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)byte_1ECF57FA1);
LABEL_5:
  if (qword_1ECF57FA8)
  {
    ucol_close();
    WTF::fastFree(qword_1ECF57FB0, v10, v11, v12, v13, v14, v15, v16);
  }
  qword_1ECF57FA8 = *((_QWORD *)this + 2);
  qword_1ECF57FB0 = *(_QWORD *)this;
  _MergedGlobals_2 = *((_BYTE *)this + 8);
  v17 = __ldxr(byte_1ECF57FA1);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, byte_1ECF57FA1))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF57FA1, 0, a3, a4, a5, a6, a7, a8);
}

{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (__ldaxr(byte_1ECF57FA1))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECF57FA1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)byte_1ECF57FA1);
LABEL_5:
  if (qword_1ECF57FA8)
  {
    ucol_close();
    WTF::fastFree(qword_1ECF57FB0, v10, v11, v12, v13, v14, v15, v16);
  }
  qword_1ECF57FA8 = *((_QWORD *)this + 2);
  qword_1ECF57FB0 = *(_QWORD *)this;
  _MergedGlobals_2 = *((_BYTE *)this + 8);
  v17 = __ldxr(byte_1ECF57FA1);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, byte_1ECF57FA1))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(byte_1ECF57FA1, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::createIterator(UChar *s@<X0>, StringView a2@<0:X1, 8:X2>, uint64_t a3@<X8>)
{
  if (((uint64_t)a2.m_characters & 0xFF00000000) != 0)
  {
    *(_QWORD *)a3 = s;
    *(_QWORD *)(a3 + 8) = LODWORD(a2.m_characters);
    *(_DWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 20) = LODWORD(a2.m_characters);
    *(_QWORD *)(a3 + 32) = WTF::getIndexLatin1;
    *(_QWORD *)(a3 + 40) = WTF::moveLatin1;
    *(_QWORD *)(a3 + 48) = WTF::hasNextLatin1;
    *(_QWORD *)(a3 + 56) = WTF::hasPreviousLatin1;
    *(_QWORD *)(a3 + 64) = WTF::currentLatin1;
    *(_QWORD *)(a3 + 72) = WTF::nextLatin1;
    *(_QWORD *)(a3 + 80) = WTF::previousLatin1;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = WTF::getStateLatin1;
    *(_QWORD *)(a3 + 104) = WTF::setStateLatin1;
  }
  else
  {
    uiter_setString((UCharIterator *)a3, s, (int32_t)a2.m_characters);
  }
}

uint64_t WTF::Collator::collate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  UCharIterator v8;
  UCharIterator iter;

  memset(&iter, 0, sizeof(iter));
  if ((a3 & 0xFF00000000) != 0)
  {
    iter.context = a2;
    iter.length = a3;
    iter.start = 0;
    iter.index = 0;
    iter.limit = a3;
    iter.reservedField = 0;
    iter.getIndex = (UCharIteratorGetIndex *)WTF::getIndexLatin1;
    iter.move = (UCharIteratorMove *)WTF::moveLatin1;
    iter.hasNext = (UCharIteratorHasNext *)WTF::hasNextLatin1;
    iter.hasPrevious = (UCharIteratorHasPrevious *)WTF::hasPreviousLatin1;
    iter.current = (UCharIteratorCurrent *)WTF::currentLatin1;
    iter.next = (UCharIteratorNext *)WTF::nextLatin1;
    iter.previous = (UCharIteratorPrevious *)WTF::previousLatin1;
    iter.reservedFn = 0;
    iter.getState = (UCharIteratorGetState *)WTF::getStateLatin1;
    iter.setState = (UCharIteratorSetState *)WTF::setStateLatin1;
  }
  else
  {
    uiter_setString(&iter, (const UChar *)a2, a3);
  }
  memset(&v8, 0, sizeof(v8));
  if ((a5 & 0xFF00000000) != 0)
  {
    v8.context = a4;
    v8.length = a5;
    v8.start = 0;
    v8.index = 0;
    v8.limit = a5;
    v8.reservedField = 0;
    v8.getIndex = (UCharIteratorGetIndex *)WTF::getIndexLatin1;
    v8.move = (UCharIteratorMove *)WTF::moveLatin1;
    v8.hasNext = (UCharIteratorHasNext *)WTF::hasNextLatin1;
    v8.hasPrevious = (UCharIteratorHasPrevious *)WTF::hasPreviousLatin1;
    v8.current = (UCharIteratorCurrent *)WTF::currentLatin1;
    v8.next = (UCharIteratorNext *)WTF::nextLatin1;
    v8.previous = (UCharIteratorPrevious *)WTF::previousLatin1;
    v8.reservedFn = 0;
    v8.getState = (UCharIteratorGetState *)WTF::getStateLatin1;
    v8.setState = (UCharIteratorSetState *)WTF::setStateLatin1;
  }
  else
  {
    uiter_setString(&v8, (const UChar *)a4, a5);
  }
  return ucol_strcollIter();
}

uint64_t WTF::Collator::collate(int a1, char *__s, const char *a3)
{
  int32_t v5;
  int32_t v6;
  UCharIterator v8;
  UCharIterator iter;

  memset(&iter, 0, sizeof(iter));
  v5 = strlen(__s);
  uiter_setUTF8(&iter, __s, v5);
  memset(&v8, 0, sizeof(v8));
  v6 = strlen(a3);
  uiter_setUTF8(&v8, a3, v6);
  return ucol_strcollIter();
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::resolveDefaultLocale(char const*)::{lambda(void)#1} &&>>()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char *v3;
  char buffer[256];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)CFPreferencesCopyValue(CFSTR("AppleCollationOrder"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v0)
  {
    v1 = v0;
    if (CFStringGetCString(v0, buffer, 256, 0x600u))
      v2 = buffer;
    else
      v2 = "";
    v3 = strdup(v2);
    CFRelease(v1);
  }
  else
  {
    v3 = strdup("");
  }
  qword_1ECF57FB8 = (uint64_t)v3;
}

uint64_t WTF::getIndexLatin1(WTF *this, UCharIterator *a2, UCharIteratorOrigin a3)
{
  uint64_t result;

  result = 0;
  switch((int)a2)
  {
    case 0:
      result = *((unsigned int *)this + 3);
      break;
    case 1:
      result = *((unsigned int *)this + 4);
      break;
    case 2:
      result = *((unsigned int *)this + 5);
      break;
    case 3:
      return result;
    case 4:
      result = *((unsigned int *)this + 2);
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t WTF::moveLatin1(WTF *this, UCharIterator *a2, int a3, UCharIteratorOrigin a4)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  switch(a3)
  {
    case 0:
      v4 = *((_DWORD *)this + 3);
      goto LABEL_3;
    case 1:
      v7 = (*((_DWORD *)this + 4) + (_DWORD)a2);
      *((_DWORD *)this + 4) = v7;
      result = v7;
      break;
    case 2:
      v8 = (*((_DWORD *)this + 5) + (_DWORD)a2);
      *((_DWORD *)this + 4) = v8;
      result = v8;
      break;
    case 3:
LABEL_3:
      v5 = (v4 + (_DWORD)a2);
      *((_DWORD *)this + 4) = v5;
      result = v5;
      break;
    case 4:
      v9 = (*((_DWORD *)this + 2) + (_DWORD)a2);
      *((_DWORD *)this + 4) = v9;
      result = v9;
      break;
    default:
      *((_DWORD *)this + 4) = (_DWORD)a2 - 1;
      result = ((_DWORD)a2 - 1);
      break;
  }
  return result;
}

BOOL WTF::hasNextLatin1(WTF *this, UCharIterator *a2)
{
  return *((_DWORD *)this + 4) < *((_DWORD *)this + 5);
}

BOOL WTF::hasPreviousLatin1(WTF *this, UCharIterator *a2)
{
  return *((_DWORD *)this + 4) > *((_DWORD *)this + 3);
}

uint64_t WTF::currentLatin1(WTF *this, UCharIterator *a2)
{
  uint64_t v2;

  v2 = *((int *)this + 4);
  if ((int)v2 >= *((_DWORD *)this + 5))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned __int8 *)(*(_QWORD *)this + v2);
}

uint64_t WTF::nextLatin1(WTF *this, UCharIterator *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((int *)this + 4);
  if ((int)v2 >= *((_DWORD *)this + 5))
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)this;
  *((_DWORD *)this + 4) = v2 + 1;
  return *(unsigned __int8 *)(v3 + v2);
}

uint64_t WTF::previousLatin1(WTF *this, UCharIterator *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((int *)this + 4);
  if ((int)v2 <= *((_DWORD *)this + 3))
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)this;
  v4 = v2 - 1;
  *((_DWORD *)this + 4) = v4;
  return *(unsigned __int8 *)(v3 + v4);
}

uint64_t WTF::getStateLatin1(WTF *this, const UCharIterator *a2)
{
  return *((unsigned int *)this + 4);
}

uint64_t WTF::setStateLatin1(uint64_t this, UCharIterator *a2, unsigned int a3, UErrorCode *a4)
{
  *(_DWORD *)(this + 16) = (_DWORD)a2;
  return this;
}

uint64_t WTF::isCompilationThread(WTF *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v1)
    return (*(unsigned __int8 *)(v1 + 5) >> 3) & 1;
  else
    return (*(unsigned __int8 *)(WTF::Thread::initializeCurrentTLS(0) + 5) >> 3) & 1;
}

WTF::ConcurrentPtrHashSet *WTF::ConcurrentPtrHashSet::ConcurrentPtrHashSet(WTF::ConcurrentPtrHashSet *this)
{
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 4;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  WTF::ConcurrentPtrHashSet::initialize(this);
  return this;
}

{
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 4;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  WTF::ConcurrentPtrHashSet::initialize(this);
  return this;
}

void WTF::ConcurrentPtrHashSet::initialize(WTF::ConcurrentPtrHashSet *this)
{
  WTF *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;

  v2 = (WTF *)WTF::fastMalloc((WTF *)0x110);
  *((_QWORD *)v2 + 1) = 0;
  v15 = v2;
  *(_QWORD *)v2 = 0x1F00000020;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = 0;
  *((_QWORD *)v2 + 12) = 0;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 17) = 0;
  *((_QWORD *)v2 + 18) = 0;
  *((_QWORD *)v2 + 19) = 0;
  *((_QWORD *)v2 + 20) = 0;
  *((_QWORD *)v2 + 21) = 0;
  *((_QWORD *)v2 + 22) = 0;
  *((_QWORD *)v2 + 23) = 0;
  *((_QWORD *)v2 + 24) = 0;
  *((_QWORD *)v2 + 25) = 0;
  *((_QWORD *)v2 + 26) = 0;
  *((_QWORD *)v2 + 27) = 0;
  *((_QWORD *)v2 + 28) = 0;
  *((_QWORD *)v2 + 29) = 0;
  *((_QWORD *)v2 + 30) = 0;
  *((_QWORD *)v2 + 31) = 0;
  *((_QWORD *)v2 + 32) = 0;
  *((_QWORD *)v2 + 33) = 0;
  *((_QWORD *)this + 6) = v2;
  v10 = *((unsigned int *)this + 3);
  if ((_DWORD)v10 == *((_DWORD *)this + 2))
  {
    v11 = (uint64_t *)WTF::Vector<std::unique_ptr<WTF::ConcurrentPtrHashSet::Table>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v10 + 1, (unint64_t)&v15);
    v10 = *((unsigned int *)this + 3);
    v12 = *(_QWORD *)this;
    v13 = *v11;
    *v11 = 0;
    *(_QWORD *)(v12 + 8 * v10) = v13;
    v14 = v15;
  }
  else
  {
    v14 = 0;
    *(_QWORD *)(*(_QWORD *)this + 8 * v10) = v2;
  }
  *((_DWORD *)this + 3) = v10 + 1;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 10;
  *((_QWORD *)this + 9) = 0;
  v15 = 0;
  if (v14)
    WTF::fastFree((unint64_t)v14, v3, v4, v5, v6, v7, v8, v9);
}

void WTF::ConcurrentPtrHashSet::~ConcurrentPtrHashSet(unint64_t **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v10 = *this;
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = (unint64_t)*this;
  if (this + 2 != (unint64_t **)*this && v13 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v10 = *this;
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = (unint64_t)*this;
  if (this + 2 != (unint64_t **)*this && v13 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::ConcurrentPtrHashSet::deleteOldTables(WTF::ConcurrentPtrHashSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  v9 = (unsigned __int8 *)this + 80;
  if (__ldaxr((unsigned __int8 *)this + 80))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 80);
LABEL_5:
  v11 = *(unint64_t **)this;
  v12 = *((unsigned int *)this + 3);
  v13 = (unint64_t *)(*(_QWORD *)this + 8 * v12);
  v14 = 0;
  if ((_DWORD)v12)
  {
    v15 = *(_QWORD *)this;
    v16 = (unint64_t *)(*(_QWORD *)this + 8 * v12);
    v17 = v16;
    while (1)
    {
      v18 = *v11;
      if (*v11 == *((_QWORD *)this + 6))
        goto LABEL_8;
      if (v17 != (unint64_t *)(*(_QWORD *)this + 8 * *((unsigned int *)this + 3)))
        break;
      v17 = v11;
      *v11 = 0;
      v16 = v11 + 1;
      if (v18)
        goto LABEL_16;
LABEL_7:
      ++v14;
LABEL_8:
      ++v11;
      v15 += 8;
      if (v11 >= v13)
      {
        LODWORD(v12) = *((_DWORD *)this + 3);
        v13 = v17;
        v19 = *(_QWORD *)this + 8 * v12;
        if (v16 != (unint64_t *)v19)
          goto LABEL_18;
        goto LABEL_19;
      }
    }
    if (v11 != v16)
    {
      memmove(v17, v16, v15 - (_QWORD)v16);
      v17 = (unint64_t *)((char *)v17 + v15 - (_QWORD)v16);
      v18 = *v11;
    }
    *v11 = 0;
    v16 = v11 + 1;
    if (!v18)
      goto LABEL_7;
LABEL_16:
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }
  v16 = (unint64_t *)(*(_QWORD *)this + 8 * v12);
  v19 = *(_QWORD *)this;
  if (v13 != v11)
  {
LABEL_18:
    memmove(v13, v16, v19 - (_QWORD)v16);
    LODWORD(v12) = *((_DWORD *)this + 3);
  }
LABEL_19:
  *((_DWORD *)this + 3) = v12 - v14;
  v20 = __ldxr(v9);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v9))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::ConcurrentPtrHashSet::clear(WTF::ConcurrentPtrHashSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;

  v9 = (unsigned __int8 *)this + 80;
  if (__ldaxr((unsigned __int8 *)this + 80))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 80);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  if (*((_DWORD *)this + 2))
  {
    v11 = *((unsigned int *)this + 3);
    if ((_DWORD)v11)
    {
      v12 = *(unint64_t **)this;
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        ++v12;
        v13 -= 8;
      }
      while (v13);
      *((_DWORD *)this + 3) = 0;
    }
    v15 = *(_QWORD *)this;
    if ((WTF::ConcurrentPtrHashSet *)((char *)this + 16) != *(WTF::ConcurrentPtrHashSet **)this && v15 != 0)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)this;
    }
    if (!v15)
    {
      *(_QWORD *)this = (char *)this + 16;
      *((_DWORD *)this + 2) = 4;
      WTF::ConcurrentPtrHashSet::initialize(this);
      v25 = __ldxr(v9);
      if (v25 == 1)
        goto LABEL_19;
LABEL_23:
      __clrex();
      v24 = v9;
      goto LABEL_21;
    }
  }
  WTF::ConcurrentPtrHashSet::initialize(this);
  v23 = __ldxr(v9);
  if (v23 != 1)
    goto LABEL_23;
LABEL_19:
  if (!__stlxr(0, v9))
    return;
  v24 = v9;
LABEL_21:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v17, v18, v19, v20, v21, v22);
}

uint64_t WTF::ConcurrentPtrHashSet::addSlow(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  int v47;
  uint64_t v48;
  WTF *v50;

  v10 = (~(a6 << 32) + a6) ^ ((~(a6 << 32) + a6) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  v14 = (unsigned __int8 *)(a1 + 80);
  v15 = a1 + 56;
  while (1)
  {
    while (1)
    {
      v16 = a2 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (v17 < *a2 >> 1)
        break;
      if (__ldaxr(v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_22;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
LABEL_22:
      v23 = *(unsigned int **)(a1 + 48);
      if (v23[2] < *v23 >> 1)
        goto LABEL_40;
      atomic_store(v15, (unint64_t *)(a1 + 48));
      v24 = 2 * *v23;
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24 + 16));
      v25[1] = 0;
      v25[2] = 0;
      v50 = (WTF *)v25;
      v26 = v24 - 1;
      *(_DWORD *)v25 = v24;
      *(_QWORD *)((char *)v25 + 4) = (v24 - 1);
      if ((_DWORD)v24)
      {
        v27 = v25 + 2;
        do
        {
          *v27++ = 0;
          --v24;
        }
        while (v24);
      }
      v28 = *v23;
      if ((_DWORD)v28)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          v31 = *(_QWORD *)&v23[2 * v29 + 4];
          if (v31)
          {
            v32 = (v31 + ~(v31 << 32)) ^ ((unint64_t)(v31 + ~(v31 << 32)) >> 22);
            v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
            v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
            v35 = v26 & ((v34 >> 31) ^ v34);
            v36 = v35;
            while (1)
            {
              v37 = &v25[v36];
              v38 = v37[2];
              if (!v38)
                break;
              if (v38 == v31)
              {
                __break(0xC471u);
                JUMPOUT(0x197ABAEECLL);
              }
              v36 = (v36 + 1) & v26;
              if (v36 == v35)
              {
                __break(0xC471u);
                JUMPOUT(0x197ABAF0CLL);
              }
            }
            v37[2] = v31;
            ++v30;
            v28 = *v23;
          }
          ++v29;
        }
        while (v29 < v28);
      }
      else
      {
        v30 = 0;
      }
      *((_DWORD *)v25 + 2) = v30;
      atomic_store((unint64_t)v25, (unint64_t *)(a1 + 48));
      atomic_store(0xAu, (unsigned int *)(a1 + 64));
      v39 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v39 == *(_DWORD *)(a1 + 8))
      {
        v40 = (uint64_t *)WTF::Vector<std::unique_ptr<WTF::ConcurrentPtrHashSet::Table>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v39 + 1, (unint64_t)&v50);
        v42 = *(unsigned int *)(a1 + 12);
        v43 = *(_QWORD *)a1;
        v44 = *v40;
        *v40 = 0;
        *(_QWORD *)(v43 + 8 * v42) = v44;
        v45 = v50;
        *(_DWORD *)(a1 + 12) = v42 + 1;
        v50 = 0;
        if (v45)
          WTF::fastFree((unint64_t)v45, v41, a3, a4, a5, a6, a7, a8);
LABEL_40:
        v46 = __ldxr(v14);
        if (v46 == 1)
          goto LABEL_41;
        goto LABEL_44;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v25;
      *(_DWORD *)(a1 + 12) = v39 + 1;
      v47 = __ldxr(v14);
      if (v47 == 1)
      {
LABEL_41:
        if (!__stlxr(0, v14))
          goto LABEL_46;
        goto LABEL_45;
      }
LABEL_44:
      __clrex();
LABEL_45:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
LABEL_46:
      a2 = *(_DWORD **)(a1 + 48);
      a3 = a2[1];
      a4 = a3 & v13;
      a5 = a4;
      while (1)
      {
        v48 = *(_QWORD *)&a2[2 * a5 + 4];
        if (!v48)
          break;
        if (v48 == a6)
          return 0;
        a5 = ((_DWORD)a5 + 1) & a3;
        if ((_DWORD)a5 == (_DWORD)a4)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x197ABAEA8);
        }
      }
    }
LABEL_5:
    v18 = (unint64_t *)&a2[2 * a5 + 4];
    do
    {
      v19 = __ldaxr(v18);
      if (v19)
      {
        __clrex();
        if (v19 == a6)
          return 0;
        LODWORD(a5) = (a5 + 1) & a3;
        if ((_DWORD)a5 == (_DWORD)a4)
        {
          __break(0xC471u);
          JUMPOUT(0x197ABAF34);
        }
        goto LABEL_5;
      }
    }
    while (__stlxr(a6, v18));
    v21 = atomic_load((unint64_t *)(a1 + 48));
    if (a2 == (_DWORD *)v21)
      return 1;
    a2 = *(_DWORD **)(a1 + 48);
    a3 = a2[1];
    a4 = a3 & v13;
    a5 = a4;
    while (1)
    {
      v22 = *(_QWORD *)&a2[2 * a5 + 4];
      if (!v22)
        break;
      if (v22 == a6)
        return 0;
      a5 = ((_DWORD)a5 + 1) & a3;
      if ((_DWORD)a5 == (_DWORD)a4)
        goto LABEL_50;
    }
  }
}

uint64_t WTF::ConcurrentPtrHashSet::containsImplSlow(WTF::ConcurrentPtrHashSet *this, void *a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (unsigned __int8 *)this + 80;
  if (__ldaxr((unsigned __int8 *)this + 80))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 80);
LABEL_5:
  result = WTF::ConcurrentPtrHashSet::containsImpl(this, a2);
  v13 = result;
  v14 = __ldxr(v4);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
  {
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v7, v8, v9, v10, v11, v12);
    return v13;
  }
  return result;
}

uint64_t WTF::ConcurrentPtrHashSet::containsImpl(WTF::ConcurrentPtrHashSet *this, void *a2)
{
  _DWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  if ((_DWORD *)((char *)this + 56) != v3)
  {
    v4 = v3[1];
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = v8;
    while (1)
    {
      v10 = *(void **)&v3[2 * v9 + 4];
      v11 = v10 != 0;
      if (v10 == a2 || v10 == 0)
        break;
      v9 = (v9 + 1) & v4;
      if (v9 == v8)
      {
        __break(0xC471u);
        JUMPOUT(0x197ABB0A0);
      }
    }
    return v11;
  }
  v14 = (unsigned __int8 *)this + 80;
  if (__ldaxr((unsigned __int8 *)this + 80))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 80);
LABEL_13:
  v11 = WTF::ConcurrentPtrHashSet::containsImpl(this, a2);
  v22 = __ldxr(v14);
  if (v22 == 1)
  {
    if (!__stlxr(0, v14))
      return v11;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, v16, v17, v18, v19, v20, v21);
  return v11;
}

uint64_t WTF::ConcurrentPtrHashSet::sizeSlow(WTF::ConcurrentPtrHashSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  int v15;

  v9 = (unsigned __int8 *)this + 80;
  if (__ldaxr((unsigned __int8 *)this + 80))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 80);
LABEL_5:
  v11 = (unsigned int *)*((_QWORD *)this + 6);
  if ((unsigned int *)((char *)this + 56) != v11)
  {
    v12 = v11[2];
    v13 = __ldxr(v9);
    if (v13 == 1)
      goto LABEL_7;
LABEL_10:
    __clrex();
    goto LABEL_11;
  }
  v12 = WTF::ConcurrentPtrHashSet::sizeSlow(this);
  v15 = __ldxr(v9);
  if (v15 != 1)
    goto LABEL_10;
LABEL_7:
  if (!__stlxr(0, v9))
    return v12;
LABEL_11:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v12;
}

unint64_t WTF::Vector<std::unique_ptr<WTF::ConcurrentPtrHashSet::Table>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v26 = *(const void **)a1;
        return (unint64_t)v26 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
      }
      if (v10 < 5)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v26 = *(const void **)a1;
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (v26 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v27, v28, v29, v30, v31, v32, v33);
          v26 = *(const void **)a1;
        }
        return (unint64_t)v26 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197ABB3A8);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 <= v12)
    return a3;
  v16 = *(unsigned int *)(a1 + 12);
  if (v15 < 5)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4;
    memcpy((void *)(a1 + 16), v5, 8 * v16);
    if ((const void *)(a1 + 16) == v5)
      return a3;
  }
  else
  {
    if (v15 >> 29)
      goto LABEL_37;
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v17;
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) == v5)
      return a3;
  }
  if (!v5)
    return a3;
  if (*(const void **)a1 == v5)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
  return a3;
}

void WTF::createContextualizedCFString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTFContextualizedNSString **a5@<X8>)
{
  WTFContextualizedNSString *v6;
  WTFContextualizedNSString *v7;

  v6 = -[WTFContextualizedNSString initWithContext:contents:]([WTFContextualizedNSString alloc], "initWithContext:contents:", a3, a4, a1, a2);
  v7 = v6;
  if (v6)
    CFRetain(v6);

  *a5 = v7;
}

void sub_197ABB438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  _QWORD v14[3];

  v1 = (unsigned int *)result;
  v2 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v3 = atomic_load(v1);
          if ((v3 & 1) != 0)
            break;
          v4 = __ldaxr(v1);
          if (v4 != v3)
            goto LABEL_2;
          if (!__stlxr((v3 | 1) + 4, v1))
            return result;
        }
        if ((v3 & 2) != 0 || v2 > 0x27)
          break;
        ++v2;
        result = MEMORY[0x19AEBBF94](0, 1, 1);
      }
      if ((v3 & 2) != 0)
        break;
      v5 = __ldaxr(v1);
      if (v5 == v3)
      {
        v3 |= 2u;
        if (!__stlxr(v3, v1))
          break;
      }
      else
      {
LABEL_2:
        __clrex();
      }
    }
    if ((v3 & 1) == 0)
    {
      WTF::dataLog<char [16]>("Lock not held!\n");
      __break(0xC471u);
      JUMPOUT(0x197ABBC40);
    }
    if ((v3 & 2) == 0)
    {
      WTF::dataLog<char [16]>("Lock not parked!\n");
      __break(0xC471u);
LABEL_23:
      JUMPOUT(0x197ABBC24);
    }
    v11 = v1;
    v12 = v3;
    v8 = 0x7FF0000000000000;
    v9 = 0;
    v14[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction;
    v14[1] = v14;
    v14[2] = &v11;
    v13[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#2}>::implFunction;
    v13[1] = v13;
    v13[2] = &v10;
    result = WTF::ParkingLot::parkConditionallyImpl((uint64_t)v1, (uint64_t)v14, (uint64_t)v13, (WTF::TimeWithDynamicClockType *)&v8);
  }
  while ((result & 1) == 0 || v6 != 1);
  v7 = atomic_load(v1);
  if ((v7 & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  return result;
}

void WTF::CountingLock::unlockSlow(WTF::CountingLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow((unsigned int *)this, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned int v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  int v12;
  _QWORD v13[3];

  v12 = a2;
  while (1)
  {
    v8 = atomic_load(a1);
    v11 = v8;
    if ((v8 & 3) != 1)
      break;
    v9 = __ldaxr(a1);
    if (v9 == v8)
    {
      if (!__stlxr(v8 & 0xFE, a1))
        return;
    }
    else
    {
      __clrex();
    }
  }
  if ((v8 & 3) == 3)
  {
    v10[0] = &v12;
    v10[1] = a1;
    v13[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(WTF::Atomic<unsigned int> &,WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v13[1] = v13;
    v13[2] = v10;
    WTF::ParkingLot::unparkOneImpl((uint64_t)a1, (unint64_t)v13, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    WTF::dataLog<char [25],unsigned char,char [2]>("Invalid value for lock: ", &v11, "\n");
    __break(0xC471u);
  }
}

uint64_t WTF::dataLog<char [16]>(const char *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

BOOL WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = atomic_load(*(unsigned int **)v1);
  return v2 == *(_DWORD *)(v1 + 8);
}

uint64_t WTF::dataLog<char [25],unsigned char,char [2]>(const char *a1, unsigned __int8 *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(WTF::Atomic<unsigned int> &,WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, int a2)
{
  _DWORD **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(_DWORD ***)(a1 + 16);
  if ((_BYTE)a2 && ((*(_QWORD *)&a2 & 0xFF0000) != 0 || **v2 == 1))
    return 1;
  v3 = v2[1];
  if ((a2 & 0xFF00) != 0)
  {
    do
    {
      while (1)
      {
        v4 = *v3;
        v5 = __ldaxr(v3);
        if (v5 == v4)
          break;
        __clrex();
      }
    }
    while (__stlxr(v4 & 0xFFFFFFFC | 2, v3));
  }
  else
  {
    do
    {
      while (1)
      {
        v6 = *v3;
        v7 = __ldaxr(v3);
        if (v7 == v6)
          break;
        __clrex();
      }
    }
    while (__stlxr(v6 & 0xFFFFFFFC, v3));
  }
  return 0;
}

double WTF::CPUTime::percentageCPUUsageSince(double *a1, double *a2)
{
  return (a1[1] + a1[2] - (a2[1] + a2[2])) * 100.0 / (*a1 - *a2);
}

float64x2_t WTF::CPUTime::get@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  __darwin_suseconds_t tv_usec;
  int64x2_t v9;
  float64x2_t v10;
  float64x2_t result;
  rusage v12;
  char v13;
  char **v14;
  char *v15;

  memset(&v12, 0, sizeof(v12));
  getrusage(0, &v12);
  v3 = mach_absolute_time();
  v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v5 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v4) = dword_1ECF4400C;
  v6 = (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v4 * 1000000000.0);
  v7.i64[0] = v12.ru_utime.tv_sec;
  tv_usec = v12.ru_utime.tv_usec;
  *(double *)a1 = v6;
  v7.i64[1] = v12.ru_stime.tv_sec;
  v9.i64[0] = tv_usec;
  v9.i64[1] = v12.ru_stime.tv_usec;
  v10 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
  result = vaddq_f64(vdivq_f64(vdivq_f64(vcvtq_f64_s64(v9), v10), v10), vcvtq_f64_s64(v7));
  *(float64x2_t *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t WTF::CPUTime::forCurrentThread(WTF::CPUTime *this)
{
  uint64_t result;
  timespec v2;

  v2.tv_sec = 0;
  v2.tv_nsec = 0;
  result = clock_gettime(_CLOCK_THREAD_CPUTIME_ID, &v2);
  if ((_DWORD)result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

void WTF::setCrashLogMessage(WTF *this, const char *a2)
{
  void *v2;

  if (this)
    this = (WTF *)strdup((const char *)this);
  v2 = (void *)WTF::setCrashLogMessage(char const*)::previousCopiedCrashLogMessage;
  WTF::setCrashLogMessage(char const*)::previousCopiedCrashLogMessage = (uint64_t)this;
  free(v2);
}

uint64_t WTF::CrossThreadTaskHandler::CrossThreadTaskHandler(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned __int8 *v7;
  _QWORD *v9;
  WTF::Thread *v10;
  unint64_t *v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  WTF::Thread *v36;

  *(_QWORD *)a1 = &off_1E3571928;
  *(_DWORD *)(a1 + 8) = a4;
  *(_WORD *)(a1 + 12) = 0;
  v7 = (unsigned __int8 *)(a1 + 12);
  *(_BYTE *)(a1 + 14) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (__ldaxr((unsigned __int8 *)(a1 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 12);
LABEL_5:
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3571948;
  v9[1] = a1;
  v35 = v9;
  WTF::Thread::create(a2, a3, (uint64_t *)&v35, 1, 0, (uint64_t *)&v36);
  v10 = v36;
  v11 = (unint64_t *)((char *)v36 + 8);
  if (__ldaxr((unint64_t *)v36 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v11))
  {
    goto LABEL_9;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)v11);
LABEL_9:
  pthread_detach(*((pthread_t *)v10 + 5));
  if ((*((_BYTE *)v10 + 5) & 2) == 0)
    *((_BYTE *)v10 + 4) = 2;
  v20 = __ldxr(v11);
  if (v20 != 1)
  {
    __clrex();
LABEL_16:
    WTF::WordLock::unlockSlow((WTF::WordLock *)v11);
    v21 = (unsigned int *)v36;
    v36 = 0;
    if (!v21)
      goto LABEL_19;
    goto LABEL_17;
  }
  if (__stlxr(0, v11))
    goto LABEL_16;
  v21 = (unsigned int *)v36;
  v36 = 0;
  if (!v21)
    goto LABEL_19;
  do
  {
LABEL_17:
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (v23)
  {
LABEL_19:
    v24 = (uint64_t)v35;
    v35 = 0;
    if (!v24)
      goto LABEL_21;
    goto LABEL_20;
  }
  atomic_store(1u, v21);
  WTF::Thread::~Thread((WTF::Thread *)v21, v13, v14, v15, v16, v17, v18, v19);
  WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
  v24 = (uint64_t)v35;
  v35 = 0;
  if (v24)
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_21:
  v25 = __ldxr(v7);
  if (v25 == 1)
  {
    if (!__stlxr(0, v7))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v7, 0, v14, v15, v16, v17, v18, v19);
  return a1;
}

void WTF::CrossThreadTaskHandler::~CrossThreadTaskHandler(WTF::CrossThreadTaskHandler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)this = &off_1E3571928;
  v9 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 9);
  v11 = *((_QWORD *)this + 10);
  v12 = (uint64_t *)*((_QWORD *)this + 11);
  if (v10 <= v11)
  {
    if (v10 == v11)
      goto LABEL_17;
    v15 = v10;
    v16 = &v12[v15];
    v17 = 8 * v11 - v15 * 8;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  else
  {
    if (v11)
    {
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
      v12 = (uint64_t *)*((_QWORD *)this + 11);
      v10 = *((_QWORD *)this + 9);
    }
    v19 = *((unsigned int *)this + 24);
    if (v10 != v19)
    {
      v30 = v10;
      v31 = &v12[v30];
      v32 = 8 * v19 - v30 * 8;
      do
      {
        v33 = *v31;
        *v31 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        ++v31;
        v32 -= 8;
      }
      while (v32);
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 11);
LABEL_17:
  if (v12)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)this + 3);
  v21 = *((_QWORD *)this + 4);
  v22 = (uint64_t *)*((_QWORD *)this + 5);
  if (v20 <= v21)
  {
    if (v20 == v21)
      goto LABEL_33;
    v25 = v20;
    v26 = &v22[v25];
    v27 = 8 * v21 - v25 * 8;
    do
    {
      v28 = *v26;
      *v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  else
  {
    if (v21)
    {
      v23 = 8 * v21;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        ++v22;
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)*((_QWORD *)this + 5);
      v20 = *((_QWORD *)this + 3);
    }
    v29 = *((unsigned int *)this + 12);
    if (v20 != v29)
    {
      v34 = v20;
      v35 = &v22[v34];
      v36 = 8 * v29 - v34 * 8;
      do
      {
        v37 = *v35;
        *v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
  }
  v22 = (uint64_t *)*((_QWORD *)this + 5);
LABEL_33:
  if (v22)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  WTF::CrossThreadTaskHandler::~CrossThreadTaskHandler(this, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void WTF::CrossThreadTaskHandler::postTask(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append(a1 + 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::CrossThreadQueue<WTF::CrossThreadTask>::append(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  char v47;
  _QWORD v48[3];

  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
LABEL_5:
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    if (v11 + 1 != v12)
      goto LABEL_35;
    LODWORD(v13) = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 32);
    if (v11)
    {
      if (v11 != v13 - 1)
        goto LABEL_35;
    }
    else if ((_DWORD)v13)
    {
      v11 = 0;
      goto LABEL_35;
    }
  }
  v14 = v13;
  v15 = v13 + ((unint64_t)v13 >> 2);
  if (v15 <= 0xF)
    v15 = 15;
  if (v15 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return;
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = v15 + 1;
  v18 = WTF::fastMalloc((WTF *)(8 * (v15 + 1)));
  v20 = (_QWORD *)v18;
  *(_DWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 24) = v18;
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  if (v21 <= v22)
  {
    if (v21 != v22)
    {
      v27 = 8 * v21;
      v28 = (_QWORD *)(v18 + v27);
      v29 = (uint64_t *)(v16 + v27);
      v30 = 8 * v22 - v27;
      do
      {
        v31 = *v29;
        *v29 = 0;
        *v28 = v31;
        v32 = *v29;
        *v29 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        ++v28;
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  else
  {
    if (v22)
    {
      v23 = 8 * v22;
      v24 = (uint64_t *)v16;
      do
      {
        v25 = *v24;
        *v24 = 0;
        *v20 = v25;
        v26 = *v24;
        *v24 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        ++v20;
        ++v24;
        v23 -= 8;
      }
      while (v23);
      v17 = *(_DWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD **)(a1 + 24);
    }
    v33 = v17;
    v34 = v21 - v14 + v17;
    if (v21 != v14)
    {
      v40 = 8 * v21;
      v41 = (uint64_t *)(v16 + v40);
      v42 = &v20[v33];
      v43 = v40 - 8 * v14;
      do
      {
        v44 = *v41;
        *v41 = 0;
        *(_QWORD *)((char *)v42 + v43) = v44;
        v45 = *v41;
        *v41 = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        ++v41;
        v43 += 8;
      }
      while (v43);
    }
    *(_QWORD *)(a1 + 8) = v34;
  }
  if (v16)
  {
    if (*(_QWORD *)(a1 + 24) == v16)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    WTF::fastFree(v16, v19, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 16);
LABEL_35:
  v35 = *(_QWORD *)(a1 + 24);
  v36 = *a2;
  *a2 = 0;
  *(_QWORD *)(v35 + 8 * v11) = v36;
  if (v11 == *(unsigned int *)(a1 + 32) - 1)
    v37 = 0;
  else
    v37 = v11 + 1;
  *(_QWORD *)(a1 + 16) = v37;
  v38 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v38 & 1) != 0)
  {
    v47 = 0;
    v46[0] = a1 + 40;
    v46[1] = &v47;
    v48[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v48[1] = v48;
    v48[2] = v46;
    WTF::ParkingLot::unparkOneImpl(a1 + 40, (unint64_t)v48, a3, a4, a5, a6, a7, a8);
  }
  v39 = __ldxr((unsigned __int8 *)a1);
  if (v39 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a1))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::CrossThreadTaskHandler::postTaskReply(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  _QWORD *v27;

  WTF::CrossThreadQueue<WTF::CrossThreadTask>::append(a1 + 64, a2, a3, a4, a5, a6, a7, a8);
  v15 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_5:
  if (!*(_BYTE *)(a1 + 14))
  {
    *(_BYTE *)(a1 + 14) = 1;
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E3571970;
    v17[1] = a1;
    v27 = v17;
    if (WTF::s_webRunLoop)
      v24 = WTF::s_webRunLoop;
    else
      v24 = WTF::s_mainRunLoop;
    WTF::RunLoop::dispatch(v24, (uint64_t *)&v27, v18, v19, v20, v21, v22, v23);
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
  }
  v25 = __ldxr(v15);
  if (v25 == 1)
  {
    if (!__stlxr(0, v15))
      return;
    v26 = (unsigned __int8 *)(a1 + 13);
  }
  else
  {
    __clrex();
    v26 = (unsigned __int8 *)(a1 + 13);
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v26, 0, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::CrossThreadTaskHandler::setCompletionCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::CrossThreadTaskHandler::kill(WTF::CrossThreadTaskHandler *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 *v14;
  int v16;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 *v21;
  int v22;

  v9 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
LABEL_5:
  *((_BYTE *)this + 57) = 1;
  v11 = (unsigned __int8 *)this + 56;
  v12 = atomic_load((unsigned __int8 *)this + 56);
  if ((v12 & 1) == 0)
  {
    v13 = __ldxr(v9);
    if (v13 == 1)
      goto LABEL_7;
LABEL_11:
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    v14 = (unsigned __int8 *)this + 64;
    if (__ldaxr((unsigned __int8 *)this + 64))
      goto LABEL_9;
LABEL_13:
    if (!__stxr(1u, v14))
      goto LABEL_15;
    goto LABEL_14;
  }
  atomic_store(0, v11);
  WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v11, a2, a3, a4, a5, a6, a7, a8);
  v16 = __ldxr(v9);
  if (v16 != 1)
    goto LABEL_11;
LABEL_7:
  if (__stlxr(0, v9))
    goto LABEL_12;
  v14 = (unsigned __int8 *)this + 64;
  if (!__ldaxr((unsigned __int8 *)this + 64))
    goto LABEL_13;
LABEL_9:
  __clrex();
LABEL_14:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
LABEL_15:
  *((_BYTE *)this + 105) = 1;
  v18 = (unsigned __int8 *)this + 104;
  v19 = atomic_load((unsigned __int8 *)this + 104);
  if ((v19 & 1) != 0)
  {
    atomic_store(0, v18);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v18, a2, a3, a4, a5, a6, a7, a8);
    v22 = __ldxr(v14);
    if (v22 == 1)
      goto LABEL_17;
LABEL_21:
    __clrex();
    v21 = v14;
    goto LABEL_19;
  }
  v20 = __ldxr(v14);
  if (v20 != 1)
    goto LABEL_21;
LABEL_17:
  if (!__stlxr(0, v14))
    return;
  v21 = v14;
LABEL_19:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CrossThreadTaskHandler::CrossThreadTaskHandler(WTF::ASCIILiteral,WTF::CrossThreadTaskHandler::AutodrainedPoolForRunLoop)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void **v37;
  uint64_t result;
  double v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  timespec __tp;
  uint64_t *v45;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned __int8 *)(v8 + 12);
  if (__ldaxr((unsigned __int8 *)(v8 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 12);
LABEL_5:
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 12), 0, a3, a4, a5, a6, a7, a8);
LABEL_10:
  v12 = (unsigned __int8 *)(v8 + 16);
  while (1)
  {
    if (__ldaxr(v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_18;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 16);
LABEL_18:
    if (*(_BYTE *)(v8 + 57))
      break;
    v23 = *(_QWORD *)(v8 + 32);
    while (1)
    {
      v24 = *(_QWORD *)(v8 + 24);
      v25 = *(_QWORD *)(v8 + 32);
      if (v23 != v25 || v24 != v23)
        break;
      v39 = INFINITY;
      v40 = 0;
      __tp.tv_sec = 0;
      __tp.tv_nsec = 0;
      clock_gettime(_CLOCK_REALTIME, &__tp);
      if (v40)
        goto LABEL_59;
      if (v39 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
      {
        v41 = v8 + 16;
        v42 = v8 + 56;
        __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        __tp.tv_nsec = (uint64_t)&__tp;
        v45 = &v42;
        v43[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v43[1] = v43;
        v43[2] = &v41;
        WTF::ParkingLot::parkConditionallyImpl(v8 + 56, (uint64_t)&__tp, (uint64_t)v43, (WTF::TimeWithDynamicClockType *)&v39);
LABEL_39:
        if (!__ldaxr(v12))
          goto LABEL_40;
        goto LABEL_24;
      }
      v27 = __ldxr(v12);
      if (v27 == 1)
      {
        if (__stlxr(0, v12))
        {
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 16), 0, a3, a4, a5, a6, a7, a8);
          if (!__ldaxr(v12))
            goto LABEL_40;
          goto LABEL_24;
        }
        goto LABEL_39;
      }
      __clrex();
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 16), 0, a3, a4, a5, a6, a7, a8);
      if (!__ldaxr(v12))
      {
LABEL_40:
        if (!__stxr(1u, v12))
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_24:
      __clrex();
LABEL_25:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 16);
LABEL_26:
      if (*(_BYTE *)(v8 + 57))
        goto LABEL_19;
    }
    if (v24 == v25)
    {
LABEL_59:
      __break(0xC471u);
      JUMPOUT(0x197ABCD88);
    }
    v31 = *(_QWORD *)(v8 + 40);
    v32 = 8 * v24;
    v21 = *(_QWORD *)(v31 + 8 * v24);
    *(_QWORD *)(v31 + v32) = 0;
    v33 = *(_QWORD *)(v8 + 40);
    v34 = *(_QWORD *)(v33 + 8 * v24);
    *(_QWORD *)(v33 + v32) = 0;
    if (v34)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v24 = *(_QWORD *)(v8 + 24);
    }
    if (v24 == *(unsigned int *)(v8 + 48) - 1)
      v35 = 0;
    else
      v35 = v24 + 1;
    *(_QWORD *)(v8 + 24) = v35;
    v36 = __ldxr(v12);
    if (v36 == 1)
      goto LABEL_20;
LABEL_51:
    __clrex();
LABEL_52:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 16), 0, a3, a4, a5, a6, a7, a8);
    if (!v21)
      goto LABEL_56;
LABEL_53:
    if (*(_DWORD *)(v8 + 8) == 1)
    {
      v37 = (void **)WTF::fastMalloc((WTF *)8);
      *v37 = (void *)MEMORY[0x19AEBB88C]();
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      if (v37)
      {
        objc_autoreleasePoolPop(*v37);
        WTF::fastFree((unint64_t)v37, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
LABEL_19:
  v21 = 0;
  v22 = __ldxr(v12);
  if (v22 != 1)
    goto LABEL_51;
LABEL_20:
  if (__stlxr(0, v12))
    goto LABEL_52;
  if (v21)
    goto LABEL_53;
LABEL_56:
  result = *(_QWORD *)(v8 + 112);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void WTF::Detail::CallableWrapper<WTF::CrossThreadTaskHandler::postTaskReply(WTF::CrossThreadTask &&)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned __int8 *)(v8 + 13);
  if (__ldaxr((unsigned __int8 *)(v8 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 13);
LABEL_5:
  *(_BYTE *)(v8 + 14) = 0;
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 13), 0, a3, a4, a5, a6, a7, a8);
LABEL_10:
  v12 = (unsigned __int8 *)(v8 + 64);
  if (!__ldaxr((unsigned __int8 *)(v8 + 64)))
    goto LABEL_12;
LABEL_11:
  __clrex();
LABEL_13:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 64);
  while (1)
  {
    v14 = *(_QWORD *)(v8 + 72);
    v15 = *(_QWORD *)(v8 + 80);
    if (v14 == v15)
    {
      v16 = 0;
      v17 = __ldxr(v12);
      if (v17 == 1)
        goto LABEL_24;
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 88);
      v19 = 8 * v14;
      v16 = *(_QWORD *)(v18 + 8 * v14);
      *(_QWORD *)(v18 + v19) = 0;
      v20 = *(_QWORD *)(v8 + 88);
      v21 = *(_QWORD *)(v20 + 8 * v14);
      *(_QWORD *)(v20 + v19) = 0;
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v22 = *(_QWORD *)(v8 + 72);
      }
      else
      {
        v22 = v14;
      }
      if (v22 == *(unsigned int *)(v8 + 96) - 1)
        v23 = 0;
      else
        v23 = v22 + 1;
      *(_QWORD *)(v8 + 72) = v23;
      v24 = __ldxr(v12);
      if (v24 == 1)
      {
LABEL_24:
        if (!__stlxr(0, v12))
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    __clrex();
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 64), 0, a3, a4, a5, a6, a7, a8);
LABEL_26:
    if (v14 == v15)
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (__ldaxr(v12))
      goto LABEL_11;
LABEL_12:
    if (__stxr(1u, v12))
      goto LABEL_13;
  }
}

uint64_t WTF::cryptographicallyRandomNumber<unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char v26;
  _QWORD *v27;
  _QWORD bytes[17];

  bytes[16] = *MEMORY[0x1E0C80C00];
  v8 = atomic_load(&_MergedGlobals_3);
  if (v8 != -1)
  {
    bytes[0] = &v26;
    v27 = bytes;
  }
  if (__ldaxr((unsigned __int8 *)&unk_1ECF57FD0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECF57FD0))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&unk_1ECF57FD0);
LABEL_7:
  v10 = dword_1ECF580D4--;
  if (v10 >= 2)
  {
    v18 = byte_1ECF57FD1;
    v13 = byte_1ECF57FD2;
  }
  else
  {
    v11 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
    if (v11 != -1)
    {
      bytes[0] = &v26;
      v27 = bytes;
      std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
    }
    if (CCRandomGenerateBytes(bytes, 0x80uLL))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABD174);
    }
    v12 = 0;
    v13 = byte_1ECF57FD1 - 1;
    v14 = byte_1ECF57FD2;
    do
    {
      v15 = byte_1ECF57FD3[++v13];
      v16 = v12 - 128;
      if (v12 < 0x80)
        v16 = v12;
      v14 += v15 + *((unsigned __int8 *)bytes + v16);
      byte_1ECF57FD3[v13] = byte_1ECF57FD3[v14];
      byte_1ECF57FD3[v14] = v15;
      ++v12;
    }
    while (v12 != 256);
    v17 = 256;
    v18 = v13;
    do
    {
      v19 = byte_1ECF57FD3[++v18];
      v13 += v19;
      byte_1ECF57FD3[v18] = byte_1ECF57FD3[v13];
      byte_1ECF57FD3[v13] = v19;
      --v17;
    }
    while (v17);
    dword_1ECF580D4 = 1600000;
  }
  byte_1ECF57FD1 = v18 + 1;
  v20 = (v18 + 1);
  v21 = byte_1ECF57FD3[v20];
  byte_1ECF57FD2 = v21 + v13;
  v22 = (v21 + v13);
  v23 = byte_1ECF57FD3[v22];
  byte_1ECF57FD3[v20] = v23;
  byte_1ECF57FD3[v22] = v21;
  v24 = byte_1ECF57FD3[(v23 + v21)];
  LODWORD(v20) = __ldxr((unsigned __int8 *)&unk_1ECF57FD0);
  if ((_DWORD)v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1ECF57FD0))
      return v24;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&unk_1ECF57FD0, 0, a3, a4, a5, a6, a7, a8);
  return v24;
}

uint64_t WTF::cryptographicallyRandomNumber<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  int v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  int v64;
  char v66;
  char **v67;
  char *v68;
  _QWORD bytes[17];

  bytes[16] = *MEMORY[0x1E0C80C00];
  v8 = atomic_load(&_MergedGlobals_3);
  if (v8 != -1)
  {
    bytes[0] = &v67;
    v68 = (char *)bytes;
  }
  if (__ldaxr((unsigned __int8 *)&unk_1ECF57FD0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECF57FD0))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&unk_1ECF57FD0);
LABEL_7:
  v10 = dword_1ECF580D4;
  v11 = --dword_1ECF580D4;
  if (v10 >= 2)
  {
    v19 = byte_1ECF57FD1;
    v14 = byte_1ECF57FD2;
  }
  else
  {
    v12 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
    if (v12 != -1)
    {
      v68 = &v66;
      v67 = &v68;
      std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
    }
    if (CCRandomGenerateBytes(bytes, 0x80uLL))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABD754);
    }
    v13 = 0;
    v14 = byte_1ECF57FD1 - 1;
    v15 = byte_1ECF57FD2;
    do
    {
      v16 = byte_1ECF57FD3[++v14];
      v17 = v13 - 128;
      if (v13 < 0x80)
        v17 = v13;
      v15 += v16 + *((unsigned __int8 *)bytes + v17);
      byte_1ECF57FD3[v14] = byte_1ECF57FD3[v15];
      byte_1ECF57FD3[v15] = v16;
      ++v13;
    }
    while (v13 != 256);
    v18 = 256;
    v19 = v14;
    do
    {
      v20 = byte_1ECF57FD3[++v19];
      v14 += v20;
      byte_1ECF57FD3[v19] = byte_1ECF57FD3[v14];
      byte_1ECF57FD3[v14] = v20;
      --v18;
    }
    while (v18);
    v11 = 1600000;
  }
  v21 = v19 + 1;
  byte_1ECF57FD1 = v21;
  v22 = byte_1ECF57FD3[v21];
  v23 = v22 + v14;
  v24 = byte_1ECF57FD3[v23];
  byte_1ECF57FD2 = v23;
  byte_1ECF57FD3[v21] = v24;
  byte_1ECF57FD3[v23] = v22;
  v25 = byte_1ECF57FD3[(v24 + v22)];
  v26 = v11 != 0;
  v27 = v11 - 1;
  dword_1ECF580D4 = v27;
  if (v27 == 0 || !v26)
  {
    v28 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
    if (v28 != -1)
    {
      v68 = &v66;
      v67 = &v68;
      std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
    }
    if (CCRandomGenerateBytes(bytes, 0x80uLL))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABD774);
    }
    v29 = 0;
    v23 = byte_1ECF57FD1 - 1;
    v30 = byte_1ECF57FD2;
    do
    {
      v31 = byte_1ECF57FD3[++v23];
      v32 = v29 - 128;
      if (v29 < 0x80)
        v32 = v29;
      v30 += v31 + *((unsigned __int8 *)bytes + v32);
      byte_1ECF57FD3[v23] = byte_1ECF57FD3[v30];
      byte_1ECF57FD3[v30] = v31;
      ++v29;
    }
    while (v29 != 256);
    v33 = 256;
    v21 = v23;
    do
    {
      v34 = byte_1ECF57FD3[++v21];
      v23 += v34;
      byte_1ECF57FD3[v21] = byte_1ECF57FD3[v23];
      byte_1ECF57FD3[v23] = v34;
      --v33;
    }
    while (v33);
    v27 = 1600000;
  }
  v35 = v21 + 1;
  byte_1ECF57FD1 = v35;
  v36 = byte_1ECF57FD3[v35];
  v37 = v36 + v23;
  byte_1ECF57FD2 = v37;
  v38 = byte_1ECF57FD3[v37];
  byte_1ECF57FD3[v35] = v38;
  byte_1ECF57FD3[v37] = v36;
  v39 = byte_1ECF57FD3[(v38 + v36)];
  v26 = v27 != 0;
  v40 = v27 - 1;
  dword_1ECF580D4 = v40;
  if (v40 == 0 || !v26)
  {
    v41 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
    if (v41 != -1)
    {
      v68 = &v66;
      v67 = &v68;
      std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
    }
    if (CCRandomGenerateBytes(bytes, 0x80uLL))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABD794);
    }
    v42 = 0;
    v37 = byte_1ECF57FD1 - 1;
    v43 = byte_1ECF57FD2;
    do
    {
      v44 = byte_1ECF57FD3[++v37];
      v45 = v42 - 128;
      if (v42 < 0x80)
        v45 = v42;
      v43 += v44 + *((unsigned __int8 *)bytes + v45);
      byte_1ECF57FD3[v37] = byte_1ECF57FD3[v43];
      byte_1ECF57FD3[v43] = v44;
      ++v42;
    }
    while (v42 != 256);
    v46 = 256;
    v35 = v37;
    do
    {
      v47 = byte_1ECF57FD3[++v35];
      v37 += v47;
      byte_1ECF57FD3[v35] = byte_1ECF57FD3[v37];
      byte_1ECF57FD3[v37] = v47;
      --v46;
    }
    while (v46);
    v40 = 1600000;
  }
  v48 = v35 + 1;
  byte_1ECF57FD1 = v48;
  v49 = byte_1ECF57FD3[v48];
  v50 = v49 + v37;
  v51 = byte_1ECF57FD3[v50];
  byte_1ECF57FD2 = v50;
  byte_1ECF57FD3[v48] = v51;
  byte_1ECF57FD3[v50] = v49;
  v52 = byte_1ECF57FD3[(v51 + v49)];
  dword_1ECF580D4 = v40 - 1;
  if (v40 <= 1)
  {
    v53 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
    if (v53 != -1)
    {
      v68 = &v66;
      v67 = &v68;
      std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
    }
    if (CCRandomGenerateBytes(bytes, 0x80uLL))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABD7B4);
    }
    v54 = 0;
    v50 = byte_1ECF57FD1 - 1;
    v55 = byte_1ECF57FD2;
    do
    {
      v56 = byte_1ECF57FD3[++v50];
      v57 = v54 - 128;
      if (v54 < 0x80)
        v57 = v54;
      v55 += v56 + *((unsigned __int8 *)bytes + v57);
      byte_1ECF57FD3[v50] = byte_1ECF57FD3[v55];
      byte_1ECF57FD3[v55] = v56;
      ++v54;
    }
    while (v54 != 256);
    v58 = 256;
    v48 = v50;
    do
    {
      v59 = byte_1ECF57FD3[++v48];
      v50 += v59;
      byte_1ECF57FD3[v48] = byte_1ECF57FD3[v50];
      byte_1ECF57FD3[v50] = v59;
      --v58;
    }
    while (v58);
    dword_1ECF580D4 = 1600000;
  }
  byte_1ECF57FD1 = v48 + 1;
  v60 = (v48 + 1);
  v61 = byte_1ECF57FD3[v60];
  byte_1ECF57FD2 = v61 + v50;
  v62 = (v61 + v50);
  v63 = byte_1ECF57FD3[v62];
  byte_1ECF57FD3[v60] = v63;
  byte_1ECF57FD3[v62] = v61;
  v64 = byte_1ECF57FD3[(v63 + v61)];
  LODWORD(v60) = __ldxr((unsigned __int8 *)&unk_1ECF57FD0);
  if ((_DWORD)v60 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1ECF57FD0))
      return v64 | (((v25 << 16) | (v39 << 8) | v52) << 8);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&unk_1ECF57FD0, 0, a3, a4, a5, a6, a7, a8);
  return v64 | (((v25 << 16) | (v39 << 8) | v52) << 8);
}

void WTF::cryptographicallyRandomValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned __int8 v26;
  int v27;
  char v28;
  _QWORD *v29;
  _QWORD bytes[18];

  bytes[16] = *MEMORY[0x1E0C80C00];
  v10 = atomic_load(&_MergedGlobals_3);
  if (v10 != -1)
  {
    bytes[0] = &v28;
    v29 = bytes;
  }
  if (__ldaxr((unsigned __int8 *)&unk_1ECF57FD0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECF57FD0))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&unk_1ECF57FD0);
LABEL_7:
  if (a2)
  {
    v12 = a1 + a2;
    do
    {
      v19 = dword_1ECF580D4--;
      if (v19 >= 2)
      {
        v13 = byte_1ECF57FD1;
        v14 = byte_1ECF57FD2;
      }
      else
      {
        v20 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
        if (v20 != -1)
        {
          v29 = bytes;
          bytes[0] = &v28;
          std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
        }
        if (CCRandomGenerateBytes(bytes, 0x80uLL))
        {
          __break(0xC471u);
          JUMPOUT(0x197ABDA3CLL);
        }
        v21 = 0;
        v14 = byte_1ECF57FD1 - 1;
        v22 = byte_1ECF57FD2;
        do
        {
          v23 = byte_1ECF57FD3[++v14];
          v24 = v21 - 128;
          if (v21 < 0x80)
            v24 = v21;
          v22 += v23 + *((unsigned __int8 *)bytes + v24);
          byte_1ECF57FD3[v14] = byte_1ECF57FD3[v22];
          byte_1ECF57FD3[v22] = v23;
          ++v21;
        }
        while (v21 != 256);
        v25 = 256;
        v13 = v14;
        do
        {
          v26 = byte_1ECF57FD3[++v13];
          v14 += v26;
          byte_1ECF57FD3[v13] = byte_1ECF57FD3[v14];
          byte_1ECF57FD3[v14] = v26;
          --v25;
        }
        while (v25);
        dword_1ECF580D4 = 1600000;
      }
      byte_1ECF57FD1 = v13 + 1;
      v15 = (v13 + 1);
      v16 = byte_1ECF57FD3[v15];
      byte_1ECF57FD2 = v16 + v14;
      v17 = (v16 + v14);
      v18 = byte_1ECF57FD3[v17];
      byte_1ECF57FD3[v15] = v18;
      byte_1ECF57FD3[v17] = v16;
      *(_BYTE *)--v12 = byte_1ECF57FD3[(v18 + v16)];
    }
    while (v12 != a1);
  }
  v27 = __ldxr((unsigned __int8 *)&unk_1ECF57FD0);
  if (v27 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1ECF57FD0))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&unk_1ECF57FD0, 0, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::cryptographicallyRandomNumber<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  unint64_t v11;
  int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned __int8 v24;
  int v25;
  char v27;
  _QWORD *v28;
  _QWORD bytes[18];

  bytes[16] = *MEMORY[0x1E0C80C00];
  v8 = atomic_load(&_MergedGlobals_3);
  if (v8 != -1)
  {
    bytes[0] = &v27;
    v28 = bytes;
  }
  if (__ldaxr((unsigned __int8 *)&unk_1ECF57FD0))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&unk_1ECF57FD0);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)&unk_1ECF57FD0))
    goto LABEL_6;
LABEL_7:
  v10 = 0;
  v11 = 0;
  v12 = dword_1ECF580D4;
  do
  {
    dword_1ECF580D4 = v12 - 1;
    if (v12 >= 2)
    {
      v13 = byte_1ECF57FD1;
      v14 = byte_1ECF57FD2;
      --v12;
    }
    else
    {
      v19 = atomic_load(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag);
      if (v19 != -1)
      {
        v28 = bytes;
        bytes[0] = &v27;
        std::__call_once(&WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::cryptographicallyRandomValuesFromOS(std::span<unsigned char,18446744073709551615ul>)::$_0 &&>>);
      }
      if (CCRandomGenerateBytes(bytes, 0x80uLL))
      {
        __break(0xC471u);
        JUMPOUT(0x197ABDCCCLL);
      }
      v20 = 0;
      v14 = byte_1ECF57FD1 - 1;
      v21 = byte_1ECF57FD2;
      do
      {
        v22 = byte_1ECF57FD3[++v14];
        v23 = v20 - 128;
        if (v20 < 0x80)
          v23 = v20;
        v21 += v22 + *((unsigned __int8 *)bytes + v23);
        byte_1ECF57FD3[v14] = byte_1ECF57FD3[v21];
        byte_1ECF57FD3[v21] = v22;
        ++v20;
      }
      while (v20 != 256);
      v13 = v14;
      do
      {
        v24 = byte_1ECF57FD3[++v13];
        v14 += v24;
        byte_1ECF57FD3[v13] = byte_1ECF57FD3[v14];
        byte_1ECF57FD3[v14] = v24;
        LODWORD(v20) = v20 - 1;
      }
      while ((_DWORD)v20);
      dword_1ECF580D4 = 1600000;
      v12 = 1600000;
    }
    byte_1ECF57FD1 = v13 + 1;
    v15 = (v13 + 1);
    v16 = byte_1ECF57FD3[v15];
    v17 = v16 + v14;
    v18 = byte_1ECF57FD3[v17];
    byte_1ECF57FD2 = v17;
    byte_1ECF57FD3[v15] = v18;
    byte_1ECF57FD3[v17] = v16;
    v11 = byte_1ECF57FD3[(v18 + v16)] | (v11 << 8);
    ++v10;
  }
  while (v10 != 8);
  v25 = __ldxr((unsigned __int8 *)&unk_1ECF57FD0);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1ECF57FD0))
      return v11;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&unk_1ECF57FD0, 0, a3, a4, a5, a6, a7, a8);
  return v11;
}

double WTF::cryptographicallyRandomUnitInterval(WTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (double)WTF::cryptographicallyRandomNumber<unsigned int>((uint64_t)this, a2, a3, a4, a5, a6, a7, a8)* 2.32830644e-10;
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::`anonymous namespace'::sharedRandomNumberGenerator(void)::$_0 &&>>()
{
  double result;

  dword_1ECF580D0 = 0;
  unk_1ECF57FD0 = 0u;
  unk_1ECF57FD3 = xmmword_19911D0A0;
  unk_1ECF57FE3 = xmmword_19911D0B0;
  *(__int128 *)((char *)&xmmword_1ECF57FF0 + 3) = xmmword_19911D0C0;
  unk_1ECF58003 = xmmword_19911D0D0;
  *(__int128 *)((char *)&xmmword_1ECF58010 + 3) = xmmword_19911D0E0;
  unk_1ECF58023 = xmmword_19911D0F0;
  *(__int128 *)((char *)&xmmword_1ECF58030 + 3) = xmmword_19911D100;
  unk_1ECF58043 = xmmword_19911D110;
  *(__int128 *)((char *)&xmmword_1ECF58050 + 3) = xmmword_19911D120;
  unk_1ECF58063 = xmmword_19911D130;
  *(__int128 *)((char *)&xmmword_1ECF58070 + 3) = xmmword_19911D140;
  unk_1ECF58083 = xmmword_19911D150;
  *(__int128 *)((char *)&xmmword_1ECF58090 + 3) = xmmword_19911D160;
  unk_1ECF580A3 = xmmword_19911D170;
  *(__int128 *)((char *)&xmmword_1ECF580B0 + 3) = xmmword_19911D180;
  result = -7.58128041e269;
  unk_1ECF580C3 = xmmword_19911D190;
  dword_1ECF580D4 = 0;
  return result;
}

WTF::CString *WTF::CString::CString(WTF::CString *this, const char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  *(_QWORD *)this = 0;
  if (__s)
  {
    v4 = strlen(__s);
    v5 = v4 + 16;
    if (v4 >= 0xFFFFFFFFFFFFFFF0 || (v6 = v4, v7 = (WTF *)(v4 + 17), v5 == -1))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABDE9CLL);
    }
    v8 = WTF::fastMalloc(v7);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v6;
    v16 = *(_DWORD **)this;
    *(_QWORD *)this = v8;
    if (v16)
    {
      if (*v16 == 1)
      {
        WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
        v8 = *(_QWORD *)this;
      }
      else
      {
        --*v16;
      }
    }
    memcpy((void *)(v8 + 16), __s, v6);
    *(_BYTE *)(*(_QWORD *)this + v6 + 16) = 0;
  }
  return this;
}

{
  size_t v4;
  size_t v5;
  size_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  *(_QWORD *)this = 0;
  if (__s)
  {
    v4 = strlen(__s);
    v5 = v4 + 16;
    if (v4 >= 0xFFFFFFFFFFFFFFF0 || (v6 = v4, v7 = (WTF *)(v4 + 17), v5 == -1))
    {
      __break(0xC471u);
      JUMPOUT(0x197ABDF54);
    }
    v8 = WTF::fastMalloc(v7);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v6;
    v16 = *(_DWORD **)this;
    *(_QWORD *)this = v8;
    if (v16)
    {
      if (*v16 == 1)
      {
        WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
        v8 = *(_QWORD *)this;
      }
      else
      {
        --*v16;
      }
    }
    memcpy((void *)(v8 + 16), __s, v6);
    *(_BYTE *)(*(_QWORD *)this + v6 + 16) = 0;
  }
  return this;
}

uint64_t *WTF::CString::CString(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  *a1 = 0;
  if (a2)
  {
    if (a3 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x197ABE004);
    }
    v6 = WTF::fastMalloc((WTF *)(a3 + 17));
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a3;
    v14 = (_DWORD *)*a1;
    *a1 = v6;
    if (v14)
    {
      if (*v14 == 1)
      {
        WTF::fastFree((unint64_t)v14, v7, v8, v9, v10, v11, v12, v13);
        v6 = *a1;
      }
      else
      {
        --*v14;
      }
    }
    memcpy((void *)(v6 + 16), a2, a3);
    *(_BYTE *)(*a1 + a3 + 16) = 0;
  }
  return a1;
}

{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  *a1 = 0;
  if (a2)
  {
    if (a3 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x197ABE0B4);
    }
    v6 = WTF::fastMalloc((WTF *)(a3 + 17));
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a3;
    v14 = (_DWORD *)*a1;
    *a1 = v6;
    if (v14)
    {
      if (*v14 == 1)
      {
        WTF::fastFree((unint64_t)v14, v7, v8, v9, v10, v11, v12, v13);
        v6 = *a1;
      }
      else
      {
        --*v14;
      }
    }
    memcpy((void *)(v6 + 16), a2, a3);
    *(_BYTE *)(*a1 + a3 + 16) = 0;
  }
  return a1;
}

unint64_t WTF::CString::mutableData(WTF::CString *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(_DWORD *)v1 == 1)
      return v1 + 16;
    *(_QWORD *)this = 0;
    v3 = *(_QWORD *)(v1 + 8);
    if (v3 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x197ABE1A0);
    }
    v4 = WTF::fastMalloc((WTF *)(v3 + 17));
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v3;
    v12 = *(_DWORD **)this;
    *(_QWORD *)this = v4;
    if (v12)
    {
      if (*v12 == 1)
      {
        WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
        v4 = *(_QWORD *)this;
      }
      else
      {
        --*v12;
      }
    }
    memcpy((void *)(v4 + 16), (const void *)(v1 + 16), v3 + 1);
    if (*(_DWORD *)v1 == 1)
    {
      WTF::fastFree(v1, v13, v14, v15, v16, v17, v18, v19);
      v1 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        return v1 + 16;
    }
    else
    {
      --*(_DWORD *)v1;
      v1 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        return v1 + 16;
    }
  }
  return 0;
}

uint64_t WTF::CString::newUninitialized@<X0>(WTF::CString *this@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  WTF *v7;
  uint64_t result;

  v5 = (char *)this + 16;
  if ((unint64_t)this >= 0xFFFFFFFFFFFFFFF0 || (v7 = (WTF::CString *)((char *)this + 17), v5 == (char *)-1))
  {
    __break(0xC471u);
    JUMPOUT(0x197ABE20CLL);
  }
  result = WTF::fastMalloc(v7);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = this;
  *a3 = result;
  *((_BYTE *)this + result + 16) = 0;
  *a2 = result + 16;
  return result;
}

void WTF::CString::grow(WTF::CString *this, unint64_t a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if (a2 >= 0xFFFFFFFFFFFFFFF0 || a2 == -17)
  {
    __break(0xC471u);
    JUMPOUT(0x197ABE2B0);
  }
  v4 = WTF::fastMalloc((WTF *)(a2 + 17));
  v5 = 1;
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  if (*(_QWORD *)this)
    v5 = *(_QWORD *)(*(_QWORD *)this + 8) + 1;
  memcpy((void *)(v4 + 16), (const void *)(*(_QWORD *)this + 16), v5);
  v13 = *(_DWORD **)this;
  *(_QWORD *)this = v4;
  if (v13)
  {
    if (*v13 == 1)
      WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
    else
      --*v13;
  }
}

uint64_t WTF::operator==(uint64_t result, int8x16_t **a2)
{
  int8x16_t *v2;
  int8x16_t *v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t *v6;
  uint8x16_t v7;
  uint8x16_t v8;
  unsigned int v9;
  uint8x16_t v10;
  BOOL v11;

  v2 = *(int8x16_t **)result;
  v3 = *a2;
  if ((*(_QWORD *)result == 0) != (*a2 == 0))
    return 0;
  if (!v2)
  {
    if (v3)
    {
      v4 = 0;
      if (!v3->i64[1])
        goto LABEL_8;
      return 0;
    }
    return 1;
  }
  v4 = v2->i64[1];
  if (!v3)
    return !v4;
  if (v4 != v3->i64[1])
    return 0;
LABEL_8:
  if (v2)
    v5 = v2 + 1;
  else
    v5 = 0;
  if (!(_DWORD)v4)
    return 1;
  v6 = v3 + 1;
  if ((_DWORD)v4 == 1)
  {
    if (v4)
      return v5->u8[0] == v6->u8[0];
    else
      __break(1u);
  }
  else
  {
    switch(31 - __clz(v4 - 1))
    {
      case 0u:
        result = v5->u16[0] == v6->u16[0];
        break;
      case 1u:
        if (v5->u16[0] != v6->u16[0])
          return 0;
        result = *(unsigned __int16 *)((char *)&v5->u16[-1] + v4) == *(unsigned __int16 *)((char *)&v6->u16[-1] + v4);
        break;
      case 2u:
        if (v5->i32[0] != v6->i32[0])
          return 0;
        result = *(__int32 *)((char *)&v5->i32[-1] + v4) == *(__int32 *)((char *)&v6->i32[-1]
                                                                                     + v4);
        break;
      case 3u:
        if (v5->i64[0] != v6->i64[0])
          return 0;
        result = *(uint64_t *)((char *)&v5->i64[-1] + v4) == *(uint64_t *)((char *)&v6->i64[-1]
                                                                                     + v4);
        break;
      case 4u:
        v8 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v5[-1] + v4), *(int8x16_t *)((char *)&v6[-1] + v4)), vceqq_s8(*v5, *v6));
        v8.i8[0] = vminvq_u8(v8);
        result = v8.i32[0] != 0;
        break;
      default:
        v7 = (uint8x16_t)vceqq_s8(*v5, *v6);
        v7.i8[0] = vminvq_u8(v7);
        if (!v7.i32[0])
          return 0;
        if (v4 < 0x10)
          return 1;
        v9 = v4 & 0xF;
        do
        {
          v10 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v5 + v9), *(int8x16_t *)((char *)v6 + v9));
          v10.i8[0] = vminvq_u8(v10);
          result = v10.i32[0] != 0;
          v9 += 16;
          if (v10.i32[0])
            v11 = v9 >= v4;
          else
            v11 = 1;
        }
        while (!v11);
        break;
    }
  }
  return result;
}

BOOL WTF::operator==(uint64_t *a1, const char *a2)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = *a1;
  result = (a2 == 0) == (*a1 == 0);
  if (a2)
  {
    if (v2)
      return strcmp((const char *)(v2 + 16), a2) == 0;
  }
  return result;
}

uint64_t WTF::CString::hash(WTF::CString *this)
{
  uint64_t v1;
  int v2;
  char v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v2 = -1640531527;
  v3 = *(_BYTE *)(v1 + 16);
  if (v3)
  {
    v4 = (unsigned __int8 *)(v1 + 18);
    while (*(v4 - 1))
    {
      v5 = ((unsigned __int16)(char)*(v4 - 1) << 11) ^ ((v2 + (unsigned __int16)v3) << 16) ^ (v2 + (unsigned __int16)v3);
      v2 = v5 + (v5 >> 11);
      v6 = *v4;
      v4 += 2;
      v3 = v6;
      if (!v6)
        goto LABEL_9;
    }
    v8 = (v2 + (unsigned __int16)v3) ^ ((v2 + (unsigned __int16)v3) << 11);
    v2 = v8 + (v8 >> 17);
  }
LABEL_9:
  v9 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  if (v11)
    return v11;
  else
    return 0x800000;
}

BOOL WTF::operator<(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_QWORD *)a1)
    return v2 != 0;
  if (v2)
    return strcmp((const char *)(*(_QWORD *)a1 + 16), (const char *)(v2 + 16)) >> 31;
  return 0;
}

uint64_t WTF::CStringHash::equal(WTF::CStringHash *this, int8x16_t **a2, const WTF::CString *a3)
{
  if (*(_QWORD *)this == -1 || &(*a2)->i8[1] == 0)
    return (*(_QWORD *)this & (unint64_t)*a2) == -1;
  else
    return WTF::operator==((uint64_t)this, a2);
}

__darwin_time_t WTF::currentTimeInNanoseconds(WTF *this)
{
  timespec v2;

  v2.tv_sec = 0;
  v2.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v2);
  return 1000000000 * v2.tv_sec + v2.tv_nsec;
}

double WTF::WallTime::now(WTF::WallTime *this)
{
  timespec v2;

  v2.tv_sec = 0;
  v2.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v2);
  return (double)v2.tv_nsec / 1000000000.0 + (double)v2.tv_sec;
}

double WTF::MonotonicTime::fromMachAbsoluteTime(WTF::MonotonicTime *this, double a2, double a3)
{
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a3) = dword_1ECF4400C;
  return (double)(WTF::machTimebaseInfo(void)::timebaseInfo * (unint64_t)this)
       / ((double)*(unint64_t *)&a3
        * 1000000000.0);
}

unint64_t WTF::MonotonicTime::toMachAbsoluteTime(WTF::MonotonicTime *this, double a2, double a3, double a4)
{
  unint64_t v5;
  char v7;
  char **v8;
  char *v9;

  v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a4) = WTF::machTimebaseInfo(void)::timebaseInfo;
  return (unint64_t)(*(double *)this
                          * 1000000000.0
                          * (double)(dword_1ECF4400C | 0x41CDCD6500000000uLL)
                          / (double)*(unint64_t *)&a4);
}

double WTF::ApproximateTime::fromMachApproximateTime(WTF::ApproximateTime *this, double a2, double a3)
{
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a3) = dword_1ECF4400C;
  return (double)(WTF::machTimebaseInfo(void)::timebaseInfo * (unint64_t)this)
       / ((double)*(unint64_t *)&a3
        * 1000000000.0);
}

unint64_t WTF::ApproximateTime::toMachApproximateTime(WTF::ApproximateTime *this, double a2, double a3, double a4)
{
  unint64_t v5;
  char v7;
  char **v8;
  char *v9;

  v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(a4) = WTF::machTimebaseInfo(void)::timebaseInfo;
  return (unint64_t)(*(double *)this
                          * 1000000000.0
                          * (double)(dword_1ECF4400C | 0x41CDCD6500000000uLL)
                          / (double)*(unint64_t *)&a4);
}

double WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;

  v1 = mach_absolute_time();
  v3 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v2) = dword_1ECF4400C;
  return (double)(v1 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v2 * 1000000000.0);
}

double WTF::ApproximateTime::now(WTF::ApproximateTime *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;

  v1 = mach_approximate_time();
  v3 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v2) = dword_1ECF4400C;
  return (double)(v1 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v2 * 1000000000.0);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>()
{
  return mach_timebase_info((mach_timebase_info_t)&WTF::machTimebaseInfo(void)::timebaseInfo);
}

uint64_t WTF::setDataFile(WTF *this, const char *a2)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  size_t v8;
  pid_t v9;
  unsigned int v10;
  FILE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  FILE *v28;
  uint64_t result;
  char __dst[1025];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v2 = (char *)this;
    v3 = strstr((char *)this, "%pid");
    if (v3)
    {
      v4 = v3;
      v5 = v3 - v2;
      if ((unint64_t)(v3 - v2) >= 0x400)
        v6 = 1024;
      else
        v6 = v3 - v2;
      strncpy(__dst, v2, v6);
      if (v5 <= 0x3FF)
      {
        v7 = &__dst[v6];
        v8 = 1024 - v6;
        v9 = getpid();
        v10 = snprintf(v7, v8, "%d", v9);
        if ((v10 & 0x80000000) == 0 && v8 > v10)
          strncpy(&v7[v10], v4 + 4, v8 - v10);
      }
      __dst[1024] = 0;
      v2 = __dst;
    }
    v11 = fopen(v2, "w");
    if (v11)
    {
      v19 = v11;
      v20 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      *v20 = (uint64_t)off_1E3571C18;
      v20[1] = (uint64_t)v19;
      *((_DWORD *)v20 + 4) = 0;
      WTFLogAlways("*** DataLog output to \"%s\" ***\n", v21, v22, v23, v24, v25, v26, v27, (char)v2);
      v28 = (FILE *)v20[1];
      goto LABEL_15;
    }
    WTFLogAlways("Warning: Could not open DataLog file %s for writing.\n", v12, v13, v14, v15, v16, v17, v18, (char)v2);
  }
  v28 = (FILE *)*MEMORY[0x1E0C80C10];
  v20 = &WTF::s_fileData;
  WTF::s_fileData = (uint64_t)off_1E3571C18;
  *(_QWORD *)algn_1EE342A78 = v28;
  dword_1EE342A80 = 1;
LABEL_15:
  setvbuf(v28, 0, 2, 0);
  result = WTF::s_file;
  if (WTF::s_file)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 24))(WTF::s_file);
  WTF::s_lockedFileData = (uint64_t)off_1E3571D18;
  *(_QWORD *)algn_1EE342A98 = 0;
  dword_1EE342AA0 = 0;
  qword_1EE342AA8 = 0;
  unk_1EE342AB0 = v20;
  WTF::s_file = (uint64_t)&WTF::s_lockedFileData;
  return result;
}

uint64_t WTF::setDataFile(uint64_t result)
{
  BOOL v1;
  uint64_t v2;

  if (WTF::s_file)
    v1 = WTF::s_file == (_QWORD)&WTF::s_lockedFileData;
  else
    v1 = 1;
  if (v1)
  {
    v2 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    WTF::s_file = v2;
  }
  else
  {
    result = 183;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::dataFile(WTF *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  return WTF::s_file;
}

uint64_t WTF::dataLogFV(WTF *this, const char *a2, char *a3)
{
  unint64_t v5;
  char v7;
  char **v8;
  char *v9;

  v5 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  return (*(uint64_t (**)(uint64_t, WTF *, const char *))(*(_QWORD *)WTF::s_file + 16))(WTF::s_file, this, a2);
}

uint64_t WTF::dataLogF(WTF *this, const char *a2, ...)
{
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;
  va_list va;

  va_start(va, a2);
  v3 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  return (*(uint64_t (**)(uint64_t, WTF *, uint64_t *))(*(_QWORD *)WTF::s_file + 16))(WTF::s_file, this, (uint64_t *)va);
}

uint64_t WTF::dataLogFString(WTF *this, const char *a2)
{
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;

  v3 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  return WTF::PrintStream::printf((WTF::PrintStream *)WTF::s_file, "%s", (const char *)this);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>()
{
  FILE *v0;

  if (!WTF::s_file)
  {
    v0 = (FILE *)*MEMORY[0x1E0C80C10];
    WTF::s_fileData = (uint64_t)off_1E3571C18;
    *(_QWORD *)algn_1EE342A78 = v0;
    dword_1EE342A80 = 1;
    setvbuf(v0, 0, 2, 0);
    if (WTF::s_file)
      (*(void (**)(uint64_t))(*(_QWORD *)WTF::s_file + 24))(WTF::s_file);
    WTF::s_lockedFileData = (uint64_t)off_1E3571D18;
    *(_QWORD *)algn_1EE342A98 = 0;
    dword_1EE342AA0 = 0;
    qword_1EE342AA8 = 0;
    unk_1EE342AB0 = &WTF::s_fileData;
    WTF::s_file = (uint64_t)&WTF::s_lockedFileData;
  }
}

unint64_t WTF::calculateLocalTimeOffset(WTF::WallTime *a1, double a2)
{
  double v3;
  int v4;
  double v5;
  int v6;
  double v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  int v12;
  int v13;
  _BOOL4 v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  _BOOL4 v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v42;
  double v43;
  int v44;
  double v45;
  double v46;
  unsigned int v47;
  unint64_t v48;
  BOOL v49;
  tm v50;
  time_t v51;

  v3 = 0.0;
  if ((_DWORD)a1 == 1)
  {
    v51 = time(0);
    localtime_r(&v51, &v50);
    *(_OWORD *)&v50.tm_sec = xmmword_19911D1B0;
    v50.tm_mon = 0;
    *(_QWORD *)&v50.tm_wday = 0;
    v50.tm_isdst = 0;
    v50.tm_gmtoff = 0;
    v50.tm_zone = 0;
    v4 = timegm(&v50);
    a1 = (WTF::WallTime *)mktime(&v50);
    v3 = (double)(1000 * (v4 - (int)a1));
  }
  v5 = a2 - v3;
  v6 = (int)(floor(v5 / 3.1556952e10) + 1970.0);
  v7 = (floor(((double)v6 + -1.0) / 400.0)
      + -4.0
      + floor(((double)v6 + -1.0) * 0.25)
      + -492.0
      + ((double)v6 + -1970.0) * 365.0
      - (floor(((double)v6 + -1.0) / 100.0)
       + -19.0))
     * 86400000.0;
  if (v7 <= v5)
  {
    HIDWORD(v9) = -1030792151 * v6 + 85899344;
    LODWORD(v9) = HIDWORD(v9);
    v8 = v9 >> 4;
    LODWORD(v9) = HIDWORD(v9);
    v10 = (v9 >> 2) <= 0x28F5C28 && v8 >= 0xA3D70B;
    v11 = 365.0;
    if (!v10)
      v11 = 366.0;
    if ((v6 & 3) != 0)
      v11 = 365.0;
    if (v7 + v11 * 86400000.0 <= v5)
      ++v6;
  }
  else
  {
    --v6;
  }
  {
    v12 = WTF::equivalentYearForDST(int)::minYear;
    if (v6 > 2037)
      goto LABEL_18;
  }
  else
  {
    v42 = v5;
    v43 = floor(WTF::WallTime::now(a1) * 1000.0);
    v44 = (int)(floor(v43 / 3.1556952e10) + 1970.0);
    v45 = (floor(((double)v44 + -1.0) / 400.0)
         + -4.0
         + floor(((double)v44 + -1.0) * 0.25)
         + -492.0
         + ((double)v44 + -1970.0) * 365.0
         - (floor(((double)v44 + -1.0) / 100.0)
          + -19.0))
        * 86400000.0;
    if (v45 <= v43)
    {
      if ((v44 & 3) != 0)
      {
        v46 = 365.0;
      }
      else
      {
        HIDWORD(v48) = -1030792151 * v44 + 85899344;
        LODWORD(v48) = HIDWORD(v48);
        v47 = v48 >> 4;
        LODWORD(v48) = HIDWORD(v48);
        v49 = (v48 >> 2) <= 0x28F5C28 && v47 >= 0xA3D70B;
        v46 = 365.0;
        if (!v49)
          v46 = 366.0;
      }
      if (v45 + v46 * 86400000.0 <= v43)
        ++v44;
    }
    else
    {
      --v44;
    }
    if (v44 >= 2010)
      v12 = 2010;
    else
      v12 = v44;
    WTF::equivalentYearForDST(int)::minYear = v12;
    v5 = v42;
    if (v6 > 2037)
      goto LABEL_18;
  }
  v13 = v6;
  if (v12 <= v6)
    goto LABEL_19;
  v12 = 2037;
LABEL_18:
  v13 = v6 + 28 * ((v12 - v6) / 28);
LABEL_19:
  if (v6 == v13)
    goto LABEL_83;
  if ((v6 & 3) != 0)
  {
    v14 = 0;
  }
  else
  {
    HIDWORD(v15) = -1030792151 * v6 + 85899344;
    LODWORD(v15) = HIDWORD(v15);
    if ((v15 >> 4) < 0xA3D70B)
    {
      v14 = 1;
    }
    else
    {
      HIDWORD(v16) = -1030792151 * v6 + 85899344;
      LODWORD(v16) = HIDWORD(v16);
      v14 = (v16 >> 2) > 0x28F5C28;
    }
  }
  v17 = (int)(floor(v5 / 86400000.0)
            - (floor(((double)v6 + -1.0) / 400.0)
             + -4.0
             + floor(((double)v6 + -1.0) * 0.25)
             + -492.0
             + ((double)v6 + -1970.0) * 365.0
             - (floor(((double)v6 + -1.0) / 100.0)
              + -19.0)));
  if ((int)v17 > 30)
  {
    if (v14)
      v20 = 59;
    else
      v20 = 58;
    if (v20 >= v17)
    {
      v19 = v17 - 30;
      if (v14)
        v30 = 60;
      else
        v30 = 59;
      if (v30 > v17)
      {
LABEL_52:
        v18 = 1;
        goto LABEL_75;
      }
    }
    else
    {
      v21 = v20;
      if (v20 + 31 < v17)
      {
        v22 = v20 + 61;
        v21 = v20 + 31;
        if (v20 + 61 < v17)
        {
          v23 = v20 + 92;
          v24 = v20 + 122;
          v25 = v20 + 153;
          v26 = v20 + 184;
          v27 = v20 + 214;
          v28 = v20 + 245;
          v29 = v20 + 275;
          if (v29 >= v17)
            v29 = v28;
          if (v28 >= v17)
            v29 = v27;
          if (v27 >= v17)
            v29 = v26;
          if (v26 >= v17)
            v29 = v25;
          if (v25 >= v17)
            v29 = v24;
          if (v24 >= v17)
            v29 = v23;
          if (v23 < v17)
            v21 = v29;
          else
            v21 = v22;
        }
      }
      v19 = v17 - v21;
      if (v14)
        v30 = 60;
      else
        v30 = 59;
      if (v30 > v17)
        goto LABEL_52;
    }
    if (v30 + 31 <= v17)
    {
      if (v30 + 61 <= v17)
      {
        if (v30 + 92 <= v17)
        {
          if (v30 + 122 <= v17)
          {
            if (v30 + 153 <= v17)
            {
              if (v30 + 184 <= v17)
              {
                v31 = v30 + 214;
                v32 = v30 + 245;
                v33 = v30 + 275 > v17;
                v18 = 10;
                if (!v33)
                  v18 = 11;
                if (v32 > v17)
                  v18 = 9;
                if (v31 > v17)
                  v18 = 8;
              }
              else
              {
                v18 = 7;
              }
            }
            else
            {
              v18 = 6;
            }
          }
          else
          {
            v18 = 5;
          }
        }
        else
        {
          v18 = 4;
        }
      }
      else
      {
        v18 = 3;
      }
    }
    else
    {
      v18 = 2;
    }
    goto LABEL_75;
  }
  v18 = 0;
  v19 = v17 + 1;
LABEL_75:
  if ((v13 & 3) != 0)
  {
    v34 = 0;
  }
  else
  {
    HIDWORD(v35) = -1030792151 * v13 + 85899344;
    LODWORD(v35) = HIDWORD(v35);
    if ((v35 >> 4) < 0xA3D70B)
    {
      v34 = 1;
    }
    else
    {
      HIDWORD(v36) = -1030792151 * v13 + 85899344;
      LODWORD(v36) = HIDWORD(v36);
      v34 = (v36 >> 2) > 0x28F5C28;
    }
  }
  v37 = floor(floor(((double)v13 + -1.0) / 400.0)+ -4.0+ floor(((double)v13 + -1.0) * 0.25)+ -492.0+ ((double)v13 + -1970.0) * 365.0- (floor(((double)v13 + -1.0) / 100.0)+ -19.0))+ (double)(int)(v19 + WTF::firstDayOfMonth[12 * v34 + v18] - 1);
  v38 = fmod(v5, 86400000.0);
  if (v38 < 0.0)
    v38 = v38 + 86400000.0;
  v5 = v38 + v37 * 86400000.0;
LABEL_83:
  v39 = v5 / 1000.0;
  v40 = 2145859200.0;
  if (v39 <= 2145859200.0)
  {
    if (v39 >= 0.0)
      v40 = v39;
    else
      v40 = v39 + 86400.0;
  }
  v51 = (uint64_t)v40;
  localtime_r(&v51, &v50);
  return (v50.tm_isdst != 0) | ((unint64_t)(int)((double)v50.tm_gmtoff * 1000.0) << 32);
}

void WTF::parseES5Date(char *__str, unint64_t a2, _BYTE *a3)
{
  WTF *v3;
  unint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  double v28;
  double v29;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  int v44[2];
  unint64_t v45;
  char *__endptr;
  uint64_t v47;
  char *v48;

  v5 = a2;
  *a3 = 0;
  v7 = 1;
  v43 = 1;
  *(_QWORD *)v44 = 1;
  v42 = 0uLL;
  if (a2)
    v7 = *__str != 45;
  __endptr = 0;
  v8 = strtol(__str, &__endptr, 10);
  v9 = __endptr - __str;
  v10 = __endptr == __str || v8 < -2147483647;
  v11 = 2147483646;
  if (v10 || v8 > 2147483646)
    return;
  v13 = v5 - v9;
  if (v5 < v9)
    goto LABEL_79;
  v3 = (WTF *)v8;
  if ((_DWORD)v8)
    v14 = 1;
  else
    v14 = v7;
  if (v14 != 1)
    return;
  v15 = __endptr;
  if (v5 != v9 && *__endptr == 45)
  {
    if (v13 == 1)
      return;
    v16 = __endptr + 1;
    if (__endptr[1] - 48 > 9)
      return;
    ++__endptr;
    v47 = v13 - 1;
    if (!WTF::parseLong((uint64_t)&__endptr, (uint64_t *)v44))
      return;
    v15 = __endptr;
    if (__endptr - v16 != 2)
      return;
    v13 = v47;
    if (v47 && *__endptr == 45)
    {
      if (v47 == 1)
        return;
      v17 = __endptr + 1;
      if (__endptr[1] - 48 > 9)
        return;
      ++__endptr;
      --v47;
      if (!WTF::parseLong((uint64_t)&__endptr, &v43))
        return;
      v15 = __endptr;
      if (__endptr - v17 != 2)
        return;
      v13 = v47;
    }
  }
  if (!v13)
  {
    v5 = 0;
    v29 = 0.0;
    goto LABEL_59;
  }
  v18 = *v15;
  if (v18 != 32 && v18 != 116 && v18 != 84)
    return;
  *a3 = 0;
  v19 = v13 - 1;
  if (v13 == 1)
    return;
  v20 = v15 + 1;
  if (v15[1] - 48 > 9)
    return;
  __endptr = v15 + 1;
  v47 = v13 - 1;
  v48 = 0;
  v21 = strtol(v20, &v48, 10);
  if (v20 == v48)
    return;
  v5 = v21;
  if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2)
    return;
  v11 = v48 - v20;
  if (v19 < v48 - v20)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v19 == v11)
    return;
  if (v11 != 2)
    return;
  v22 = v20 + 2;
  if (v20[2] != 58)
    return;
  if (v13 == 4)
    return;
  v23 = v20 + 3;
  if (v22[1] - 48 > 9)
    return;
  __endptr = v23;
  v47 = v13 - 4;
  if (!WTF::parseLong((uint64_t)&__endptr, (uint64_t *)&v42 + 1))
    return;
  v24 = __endptr;
  if (__endptr - v23 != 2)
    return;
  v11 = v47;
  if (!v47)
    goto LABEL_80;
  v25 = *__endptr;
  if (v25 != 58)
  {
LABEL_82:
    v41 = 0.0;
    goto LABEL_83;
  }
  if (v47 == 1)
    return;
  v26 = __endptr + 1;
  if (__endptr[1] - 48 > 9)
    return;
  ++__endptr;
  --v47;
  if (!WTF::parseLong((uint64_t)&__endptr, (uint64_t *)&v42))
    return;
  v24 = __endptr;
  if (__endptr - v26 != 2)
    return;
  v11 = v47;
  if (!v47)
  {
LABEL_80:
    v29 = 0.0;
    *a3 = 1;
    if (v11)
      return;
    goto LABEL_59;
  }
  v25 = *__endptr;
  if (v25 != 46)
    goto LABEL_82;
  if (v47 == 1)
    return;
  v27 = __endptr + 1;
  if (__endptr[1] - 48 > 9)
    return;
  --v47;
  v48 = 0;
  ++__endptr;
  if (!WTF::parseLong((uint64_t)&__endptr, (uint64_t *)&v48))
    return;
  v24 = __endptr;
  v28 = (double)(uint64_t)v48;
  v41 = __exp10((double)(v27 - __endptr + 3)) * v28;
  v11 = v47;
  if (!v47)
    goto LABEL_102;
  v25 = *v24;
LABEL_83:
  if (v25 == 90)
  {
    v29 = v41;
    if (v11 != 1)
      return;
    goto LABEL_59;
  }
  if (v25 == 43 || v25 == 45)
  {
    v48 = 0;
    v45 = 0;
    v35 = v11 - 1;
    if (!v35)
      return;
    v36 = v24 + 1;
    if (v24[1] - 48 > 9)
      return;
    __endptr = v24 + 1;
    v47 = v35;
    if (!WTF::parseLong((uint64_t)&__endptr, (uint64_t *)&v48))
      return;
    v37 = v47;
    if (v47 && *__endptr == 58)
    {
      if (__endptr - v36 != 2)
        return;
      v38 = (uint64_t)v48 >= 0 ? (unint64_t)v48 : -(uint64_t)v48;
      if (v47 == 1)
        return;
      v39 = __endptr + 1;
      if (__endptr[1] - 48 > 9)
        return;
      ++__endptr;
      --v47;
      if (!WTF::parseLong((uint64_t)&__endptr, (uint64_t *)&v45) || __endptr - v39 != 2)
        return;
      v37 = v47;
    }
    else if (__endptr - v36 == 4)
    {
      v40 = (unint64_t)v48;
      if ((uint64_t)v48 < 0)
        v40 = -(uint64_t)v48;
      v38 = v40 / 0x64;
      v45 = v40 % 0x64;
    }
    else
    {
      if (__endptr - v36 != 2)
        return;
      if ((uint64_t)v48 >= 0)
        v38 = (unint64_t)v48;
      else
        v38 = -(uint64_t)v48;
    }
    if (v38 > 0x18)
      return;
    if (v45 > 0x3B)
      return;
    v29 = v41;
    if (v37)
      return;
    goto LABEL_59;
  }
LABEL_102:
  v29 = v41;
  *a3 = 1;
  if (v11)
    return;
LABEL_59:
  if ((unint64_t)(*(_QWORD *)v44 - 13) >= 0xFFFFFFFFFFFFFFF4
    && v43 >= 1
    && v43 <= WTF::parseES5Date(std::span<unsigned char const,18446744073709551615ul>,BOOL &)::daysPerMonth[*(_QWORD *)v44 - 1])
  {
    if (*(_QWORD *)v44 != 2
      || (unint64_t)v43 < 0x1D
      || (v3 & 3) == 0
      && ((HIDWORD(v31) = -1030792151 * (_DWORD)v3 + 85899344,
           LODWORD(v31) = HIDWORD(v31),
           v30 = v31 >> 4,
           LODWORD(v31) = HIDWORD(v31),
           (v31 >> 2) < 0x28F5C29)
        ? (v32 = v30 > 0xA3D70A)
        : (v32 = 0),
          !v32))
    {
      if (v5 <= 0x18)
      {
        v33 = *((_QWORD *)&v42 + 1);
        if (v5 == 24)
        {
          if (v42 != 0)
            return;
          v34 = 0;
          v33 = 0;
        }
        else
        {
          if (*((_QWORD *)&v42 + 1) > 0x3BuLL)
            return;
          v34 = v42;
          if ((unint64_t)v42 > 0x3C)
            return;
          if ((_QWORD)v42 == 60)
            v29 = 0.0;
        }
        WTF::ymdhmsToMilliseconds(v3, *(uint64_t *)v44, v43, v5, v33, v34, v29);
      }
    }
  }
}

double WTF::ymdhmsToMilliseconds(WTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _BOOL4 v10;
  double result;

  v7 = 1;
  HIDWORD(v9) = -1030792151 * (_DWORD)this + 85899344;
  LODWORD(v9) = HIDWORD(v9);
  v8 = v9 >> 4;
  LODWORD(v9) = HIDWORD(v9);
  v10 = (v9 >> 2) > 0x28F5C28;
  if (v8 >= 0xA3D70B)
    v7 = v10;
  if ((this & 3) != 0)
    v7 = 0;
  result = a7
         + (double)a6 * 1000.0
         + (double)a5 * 60000.0
         + (double)a4 * 3600000.0
         + (floor(((double)(int)this + -1.0) / 400.0)
          + -4.0
          + floor(((double)(int)this + -1.0) * 0.25)
          + -492.0
          + ((double)(int)this + -1970.0) * 365.0
          - (floor(((double)(int)this + -1.0) / 100.0)
           + -19.0)
          + (double)(a3 + WTF::firstDayOfMonth[12 * v7 - 1 + a2] - 1))
         * 86400000.0;
  if (result > 8.64e15 || result < -8.64e15)
    return NAN;
  return result;
}

void WTF::parseDate(const char *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char *v15;
  signed int v16;
  int v17;
  int v18;
  const char *i;
  int v20;
  unint64_t v22;
  char *v23;
  signed int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  const char *v33;
  unint64_t v34;
  int v35;
  int v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  int v55;
  const char *v56;
  size_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  signed int v62;
  int v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char __s2[16];
  uint64_t v79;
  unint64_t v80;
  __int128 v81;

  *a3 = 1;
  if (!a2)
    return;
  v4 = a2;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)a1;
    if ((v6 - 9) < 5 || v6 == 32)
      goto LABEL_4;
    if (v6 != 40)
      break;
    ++v5;
LABEL_4:
    ++a1;
    if (!--v4)
      return;
  }
  v7 = v6 != 41 || v5 < 1;
  if (!v7)
  {
    --v5;
    goto LABEL_4;
  }
  if (v5)
    goto LABEL_4;
  *(_QWORD *)&v81 = a1;
  *((_QWORD *)&v81 + 1) = v4;
  v8 = -1;
  v80 = -1;
  v9 = a1;
  v10 = v4;
  do
  {
    v11 = *(unsigned __int8 *)v9;
    v12 = v11 - 58;
    if (v11 - 58 > 0xFFFFFFF5)
    {
      v22 = v4;
      if (v8 == -1 && a1 != v9)
      {
LABEL_46:
        if (v10 < 3
          || (__s2[0] = WTF::asciiCaseFoldTable[*(unsigned __int8 *)a1],
              __s2[1] = WTF::asciiCaseFoldTable[*((unsigned __int8 *)a1 + 1)],
              __s2[2] = WTF::asciiCaseFoldTable[*((unsigned __int8 *)a1 + 2)],
              __s2[3] = 0,
              (v23 = strstr("janfebmaraprmayjunjulaugsepoctnovdec", __s2)) == 0)
          || (v24 = (_DWORD)v23 - "janfebmaraprmayjunjulaugsepoctnovdec",
              v25 = v24 / 3,
              v24 != 3 * (v24 / 3)))
        {
          v25 = -1;
        }
        v8 = v25;
        v80 = v25;
        if (v12 < 0xFFFFFFF6)
          goto LABEL_51;
      }
      v32 = 0;
      v33 = v9 + 1;
      v34 = v22 - 1;
      while (1)
      {
        v35 = *(unsigned __int8 *)v9;
        if ((v35 - 9) >= 5 && v35 != 32)
        {
          if (v35 == 40)
          {
            ++v32;
          }
          else if (v35 != 41 || v32 < 1)
          {
            if (!v32)
              goto LABEL_51;
          }
          else
          {
            --v32;
          }
        }
        v4 = v22 - 1;
        ++v9;
        *(_QWORD *)&v81 = v33;
        *((_QWORD *)&v81 + 1) = v34;
        ++v33;
        --v34;
        --v22;
        if (v34 == -1)
          return;
      }
    }
    v7 = v11 > 0x28;
    v13 = (1 << v11) & 0x10100003E00;
    if (!v7 && v13 != 0)
    {
      if (v9 - a1 >= 3)
      {
        if (v10 < 3
          || (__s2[0] = WTF::asciiCaseFoldTable[*(unsigned __int8 *)a1],
              __s2[1] = WTF::asciiCaseFoldTable[*((unsigned __int8 *)a1 + 1)],
              __s2[2] = WTF::asciiCaseFoldTable[*((unsigned __int8 *)a1 + 2)],
              __s2[3] = 0,
              (v15 = strstr("janfebmaraprmayjunjulaugsepoctnovdec", __s2)) == 0)
          || (v16 = (_DWORD)v15 - "janfebmaraprmayjunjulaugsepoctnovdec",
              v17 = v16 / 3,
              v16 != 3 * (v16 / 3)))
        {
          v17 = -1;
        }
        v8 = v17;
        v80 = v17;
      }
      v18 = 0;
      for (i = v9 + 1; ; ++i)
      {
        v20 = *(unsigned __int8 *)v9;
        if ((v20 - 9) >= 5 && v20 != 32)
        {
          if (v20 == 40)
          {
            ++v18;
          }
          else if (v20 != 41 || v18 < 1)
          {
            if (!v18)
            {
              a1 = v9;
              v10 = v4;
              goto LABEL_40;
            }
          }
          else
          {
            --v18;
          }
        }
        ++v9;
        --v4;
        *(_QWORD *)&v81 = i;
        *((_QWORD *)&v81 + 1) = v4;
        if (!v4)
          return;
      }
    }
    --v4;
    *(_QWORD *)&v81 = ++v9;
    *((_QWORD *)&v81 + 1) = v4;
LABEL_40:
    ;
  }
  while (v4);
  if (v8 == -1 && a1 != v9)
  {
    v22 = 0;
    goto LABEL_46;
  }
LABEL_51:
  if (!v4)
    return;
  v79 = 0;
  *(_QWORD *)__s2 = 0;
  v26 = strtol(v9, (char **)__s2, 10);
  v79 = v26;
  if (v9 == *(const char **)__s2 || v26 - 0x7FFFFFFFFFFFFFFFLL < 2)
    return;
  v27 = v4 - (*(_QWORD *)__s2 - (_QWORD)v9);
  if (v4 < *(_QWORD *)__s2 - (_QWORD)v9)
    goto LABEL_225;
  v28 = *(unsigned __int8 **)__s2;
  *(_QWORD *)&v81 = *(_QWORD *)__s2;
  *((_QWORD *)&v81 + 1) = v27;
  if ((v26 & 0x8000000000000000) != 0)
    return;
  v29 = v26;
  if (v26 >= 0x20)
  {
    if (!v27)
      return;
    if (**(_BYTE **)__s2 != 47)
      return;
    *(_QWORD *)&v81 = *(_QWORD *)__s2 + 1;
    *((_QWORD *)&v81 + 1) = v27 - 1;
    if (v27 == 1)
      return;
    if (v26 > 0x7FFFFFFE)
      return;
    if (!WTF::parseLong((uint64_t)&v81, (uint64_t *)&v80))
      return;
    v8 = --v80;
    if (!*((_QWORD *)&v81 + 1))
      return;
    if (*(_BYTE *)v81 != 47)
      return;
    *(_QWORD *)&v81 = v81 + 1;
    if (!--*((_QWORD *)&v81 + 1))
      return;
    if ((WTF::parseLong((uint64_t)&v81, &v79) & 1) == 0)
      return;
    v30 = 1;
    v31 = v29;
    if (v8 > 0xB)
      return;
LABEL_109:
    *(_OWORD *)__s2 = v81;
    if (*((_QWORD *)&v81 + 1))
      v45 = 1;
    else
      v45 = v30;
    if (v29 <= 0x1F && *((_QWORD *)&v81 + 1))
    {
      LODWORD(v77) = 0;
      if (!WTF::parseInt((uint64_t)__s2, &v77))
        return;
      v31 = v77;
      v45 = 1;
    }
    v76 = 0;
    v77 = 0;
    v75 = 0;
    if (!*(_QWORD *)&__s2[8])
    {
      v49 = 0;
      v50 = 0;
      v81 = *(unint64_t *)__s2;
      goto LABEL_147;
    }
    v46 = **(_BYTE **)__s2;
    if (v46 > 0x3A)
      return;
    if (((1 << v46) & 0x100100003E00) != 0)
    {
      if (*(_QWORD *)&__s2[8] >= 3uLL
        && ((v46 - 9) < 5 || (_DWORD)v46 == 32)
        && (*(_BYTE *)(*(_QWORD *)__s2 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(*(_QWORD *)__s2 + 2) & 0xDF) == 0x54)
      {
        v47 = -3;
        v48 = 3;
      }
      else
      {
        v47 = -1;
        v48 = 1;
      }
      *(_QWORD *)__s2 += v48;
      *(_QWORD *)&__s2[8] += v47;
      v81 = *(_OWORD *)__s2;
      WTF::skipSpacesAndComments((uint64_t *)&v81);
    }
    else
    {
      if (v46 != 58)
        return;
      v45 = 0;
    }
    *(_OWORD *)__s2 = v81;
    WTF::parseLong((uint64_t)__s2, &v77);
    if (*(_QWORD *)__s2 == (_QWORD)v81)
    {
      v49 = 0;
      v50 = 0;
      goto LABEL_147;
    }
    v81 = *(_OWORD *)__s2;
    v51 = v77;
    if ((unint64_t)v77 > 0x17)
      return;
    if (!*((_QWORD *)&v81 + 1))
      return;
    if (*(_BYTE *)v81 != 58)
      return;
    *(_QWORD *)&v81 = v81 + 1;
    --*((_QWORD *)&v81 + 1);
    if (!WTF::parseLong((uint64_t)&v81, (uint64_t *)&v76))
      return;
    v50 = v76;
    if (v76 > 0x3B)
      return;
    if (*((_QWORD *)&v81 + 1))
    {
      v49 = 0;
      v52 = *(unsigned __int8 *)v81;
      if ((v52 - 9) >= 5 && v52 != 32)
      {
        if (v52 != 58)
          return;
        *(_QWORD *)&v81 = v81 + 1;
        --*((_QWORD *)&v81 + 1);
        if (!WTF::parseLong((uint64_t)&v81, (uint64_t *)&v75))
          return;
        v49 = v75;
        if (v75 > 0x3B)
          return;
      }
    }
    else
    {
      v49 = 0;
    }
    WTF::skipSpacesAndComments((uint64_t *)&v81);
    v71 = v81;
    v72 = DWORD2(v81) | 0x100000000;
    if (WTF::startsWithLettersIgnoringASCIICase(v81, v72, (uint64_t)"am", 3uLL))
    {
      if (v51 > 0xC)
        return;
      if (v51 == 12)
        v77 = 0;
      goto LABEL_223;
    }
    if (WTF::startsWithLettersIgnoringASCIICase(v71, v72, (uint64_t)"pm", 3uLL))
    {
      if (v51 > 0xC)
        return;
      if (v51 != 12)
        v77 = v51 + 12;
LABEL_223:
      if (*((_QWORD *)&v71 + 1) > 1uLL)
      {
        *(_QWORD *)&v81 = v71 + 2;
        *((_QWORD *)&v81 + 1) = *((_QWORD *)&v71 + 1) - 2;
        WTF::skipSpacesAndComments((uint64_t *)&v81);
        goto LABEL_147;
      }
LABEL_225:
      __break(1u);
      return;
    }
LABEL_147:
    v53 = *((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v54 = (unsigned __int8 *)v81;
      if (*(unsigned __int8 *)v81 - 48 > 9)
        goto LABEL_151;
      if (v45)
      {
        v45 = 1;
        goto LABEL_151;
      }
      v74 = 0;
      if ((WTF::parseInt((uint64_t)&v81, &v74) & 1) == 0)
        return;
      v31 = v74;
      WTF::skipSpacesAndComments((uint64_t *)&v81);
      v53 = *((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v45 = 1;
        v54 = (unsigned __int8 *)v81;
        if ((WTF::startsWithLettersIgnoringASCIICase((uint64_t)v54, v53 | 0x100000000, (uint64_t)"gmt", 4uLL) & 1) != 0|| WTF::startsWithLettersIgnoringASCIICase((uint64_t)v54, v53 | 0x100000000, (uint64_t)"utc", 4uLL))
        {
          if (v53 <= 2)
            goto LABEL_225;
          *a3 = 0;
          v53 -= 3;
          v54 += 3;
          *(_QWORD *)&v81 = v54;
          *((_QWORD *)&v81 + 1) = v53;
          if (!v53)
            goto LABEL_163;
        }
LABEL_151:
        v55 = *v54;
        if (v55 == 45 || v55 == 43)
        {
          v74 = 0;
          if (!WTF::parseInt((uint64_t)&v81, &v74))
            return;
          if (v74 - 9960 < 0xFFFFB231)
            return;
          if (*((_QWORD *)&v81 + 1))
          {
            if (*(_BYTE *)v81 == 58)
            {
              *(_QWORD *)&v81 = v81 + 1;
              --*((_QWORD *)&v81 + 1);
              v73 = 0;
              if (!WTF::parseInt((uint64_t)&v81, &v73))
                return;
            }
          }
          *a3 = 0;
        }
        else
        {
LABEL_163:
          v56 = (const char *)&WTF::knownZones;
          while (1)
          {
            v57 = strlen(v56);
            if (v53 >= v57)
              break;
LABEL_165:
            v56 += 8;
            if (v56 == (const char *)&qword_19911D308)
              goto LABEL_201;
          }
          if (v57)
          {
            if (v53 > v57)
            {
              v58 = 0;
              v60 = 0;
              while (v53 != v60)
              {
                if ((v54[v60] | 0x20) == v56[v60])
                {
                  v58 = ++v60 >= v57;
                  if (v57 != v60)
                    continue;
                }
LABEL_164:
                if (v58)
                  goto LABEL_180;
                goto LABEL_165;
              }
            }
            else
            {
              v58 = 0;
              v59 = 0;
              while (v53 != v59)
              {
                if ((v54[v59] | 0x20) == v56[v59])
                {
                  v58 = ++v59 >= v57;
                  if (v57 != v59)
                    continue;
                }
                goto LABEL_164;
              }
            }
            goto LABEL_225;
          }
LABEL_180:
          *(_QWORD *)&v81 = &v54[v57];
          *((_QWORD *)&v81 + 1) = v53 - v57;
          *a3 = 0;
        }
      }
      else
      {
        v45 = 1;
      }
    }
LABEL_201:
    WTF::skipSpacesAndComments((uint64_t *)&v81);
    if (*((_QWORD *)&v81 + 1))
    {
      if (v45)
        return;
      v74 = 0;
      if ((WTF::parseInt((uint64_t)&v81, &v74) & 1) == 0)
        return;
      v31 = v74;
      WTF::skipSpacesAndComments((uint64_t *)&v81);
      if (*((_QWORD *)&v81 + 1))
        return;
LABEL_207:
      v69 = v31 + 1900;
      if (v31 <= 0x31)
        v69 = v31 + 2000;
      if (v31 <= 0x63)
        v70 = v69;
      else
        v70 = v31;
    }
    else
    {
      if (v45)
        goto LABEL_207;
      v70 = 2000;
    }
    WTF::ymdhmsToMilliseconds((WTF *)v70, v8 + 1, v79, v77, v50, v49, 0.0);
    return;
  }
  if (!v27)
    goto LABEL_105;
  v37 = **(_BYTE **)__s2;
  if (v8 == -1 && v37 == 47)
  {
    *(_QWORD *)&v81 = *(_QWORD *)__s2 + 1;
    *((_QWORD *)&v81 + 1) = v27 - 1;
    v8 = v26 - 1;
    v80 = v26 - 1;
    if (!WTF::parseLong((uint64_t)&v81, &v79))
      return;
    if ((unint64_t)(v79 - 32) < 0xFFFFFFFFFFFFFFE1)
      return;
    if (!*((_QWORD *)&v81 + 1))
      return;
    if (*(_BYTE *)v81 == 47)
    {
      *(_QWORD *)&v81 = v81 + 1;
      if (!--*((_QWORD *)&v81 + 1))
        return;
    }
    goto LABEL_108;
  }
  if (v37 == 45)
  {
    --v27;
    v28 = (unsigned __int8 *)(*(_QWORD *)__s2 + 1);
    *(_QWORD *)&v81 = *(_QWORD *)__s2 + 1;
    *((_QWORD *)&v81 + 1) = v27;
    if (!v27)
    {
LABEL_105:
      v44 = 0;
      v40 = v28;
      if (v8 == -1)
        goto LABEL_185;
LABEL_108:
      v31 = 0;
      v30 = 0;
      if (v8 > 0xB)
        return;
      goto LABEL_109;
    }
  }
  v38 = 0;
  v39 = 0;
  v40 = &v28[v27];
  v41 = v28;
  while (2)
  {
    v42 = v28[v38];
    if ((v42 - 9) < 5 || v42 == 32)
      goto LABEL_94;
    if (v42 == 40)
    {
      ++v39;
      goto LABEL_94;
    }
    if (v42 == 41 && v39 >= 1)
    {
      --v39;
      goto LABEL_94;
    }
    if (v39)
    {
LABEL_94:
      ++v41;
      if (v27 == ++v38)
      {
        v44 = 0;
        v81 = (unint64_t)&v28[v27];
        v28 += v27;
        if (v8 == -1)
          goto LABEL_185;
        goto LABEL_108;
      }
      continue;
    }
    break;
  }
  v44 = v27 - v38;
  *(_QWORD *)&v81 = v41;
  *((_QWORD *)&v81 + 1) = v27 - v38;
  v28 += v38;
  if (v42 == 44)
  {
    v44 = ~v38 + v27;
    v40 = v28 + 1;
    *(_QWORD *)&v81 = v28 + 1;
    *((_QWORD *)&v81 + 1) = v44;
    ++v28;
    if (v8 != -1)
      goto LABEL_108;
  }
  else
  {
    v40 = v41;
    if (v8 != -1)
      goto LABEL_108;
  }
LABEL_185:
  if (v44 >= 3)
  {
    __s2[0] = WTF::asciiCaseFoldTable[*v40];
    __s2[1] = WTF::asciiCaseFoldTable[v40[1]];
    __s2[2] = WTF::asciiCaseFoldTable[v40[2]];
    __s2[3] = 0;
    v61 = strstr("janfebmaraprmayjunjulaugsepoctnovdec", __s2);
    if (v61)
    {
      v62 = (_DWORD)v61 - "janfebmaraprmayjunjulaugsepoctnovdec";
      v63 = v62 / 3;
      if (v62 == 3 * (v62 / 3))
      {
        v8 = v63;
        v80 = v63;
        if ((v62 + 5) >= 3)
        {
          v64 = v28 + 1;
          v65 = v44 - 1;
          while (1)
          {
            v66 = *v28;
            v7 = v66 > 0x2D;
            v67 = (1 << v66) & 0x300100003E00;
            if (!v7 && v67 != 0)
              break;
            ++v28;
            *(_QWORD *)&v81 = v64;
            *((_QWORD *)&v81 + 1) = v65;
            ++v64;
            if (--v65 == -1)
              return;
          }
          v31 = 0;
          v30 = 0;
          *(_QWORD *)&v81 = v64;
          *((_QWORD *)&v81 + 1) = v65;
          if (v8 <= 0xB)
            goto LABEL_109;
        }
      }
    }
  }
}

uint64_t *WTF::skipSpacesAndComments(uint64_t *result)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *i;
  int v6;

  v1 = (unsigned __int8 *)result[1];
  if (v1)
  {
    v2 = 0;
    v3 = (unsigned __int8 *)*result;
    v4 = *result + 1;
    for (i = v1 - 1; i != (unsigned __int8 *)-1; --i)
    {
      v6 = *v3;
      if ((v6 - 9) >= 5 && v6 != 32)
      {
        if (v6 == 40)
        {
          ++v2;
        }
        else if (v6 != 41 || v2 < 1)
        {
          if (!v2)
            return result;
        }
        else
        {
          --v2;
        }
      }
      ++v3;
      *result = v4;
      result[1] = (uint64_t)i;
      ++v4;
    }
  }
  return result;
}

uint64_t WTF::parseLong(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  const char *v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  char *__endptr;

  __endptr = 0;
  result = strtol(*(const char **)a1, &__endptr, 10);
  *a2 = result;
  v5 = *(const char **)a1;
  v6 = *(_QWORD *)a1 == (_QWORD)__endptr || (unint64_t)(result - 0x7FFFFFFFFFFFFFFFLL) < 2;
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = v7 >= __endptr - v5;
    v9 = v7 - (__endptr - v5);
    if (!v8)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)a1 = __endptr;
    *(_QWORD *)(a1 + 8) = v9;
  }
  return !v6;
}

uint64_t WTF::parseInt(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  const char *v5;
  _BOOL8 v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *__endptr;

  __endptr = 0;
  result = strtol(*(const char **)a1, &__endptr, 10);
  v5 = *(const char **)a1;
  v8 = *(char **)a1 != __endptr && result > (uint64_t)0xFFFFFFFF80000000 && result < 0x7FFFFFFF;
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v9 >= __endptr - v5;
    v11 = v9 - (__endptr - v5);
    if (!v10)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)a1 = __endptr;
    *(_QWORD *)(a1 + 8) = v11;
    *a2 = result;
  }
  return v8;
}

uint64_t WTF::startsWithLettersIgnoringASCIICase(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a4 - 1;
  if (!a4)
    v4 = 0;
  if (a4 < 2)
    return 1;
  if (v4 > a2)
    return 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v4 < a2)
    {
      v5 = 0;
      v8 = 0;
      while (a2 != v8)
      {
        if ((*(unsigned __int8 *)(result + v8) | 0x20) == *(unsigned __int8 *)(a3 + v8))
        {
          v5 = ++v8 >= v4;
          if (v4 != v8)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (a2 != v6)
      {
        if ((*(unsigned __int8 *)(result + v6) | 0x20) == *(unsigned __int8 *)(a3 + v6))
        {
          v5 = ++v6 >= v4;
          if (v4 != v6)
            continue;
        }
        return v5;
      }
    }
  }
  else if (v4 < a2)
  {
    v5 = 0;
    v9 = 0;
    while (a2 != v9)
    {
      if ((*(unsigned __int16 *)(result + 2 * v9) | 0x20) == (unsigned __int16)*(char *)(a3 + v9))
      {
        v5 = ++v9 >= v4;
        if (v4 != v9)
          continue;
      }
      return v5;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
    while (a2 != v7)
    {
      if ((*(unsigned __int16 *)(result + 2 * v7) | 0x20) == (unsigned __int16)*(char *)(a3 + v7))
      {
        v5 = ++v7 >= v4;
        if (v4 != v7)
          continue;
      }
      return v5;
    }
  }
  __break(1u);
  return result;
}

double WTF::parseDate(const char *a1, unint64_t a2)
{
  double v2;
  double v3;
  char v5;

  v5 = 0;
  WTF::parseDate(a1, a2, &v5);
  v3 = v2;
  if (v5)
    return v2 - (double)(int)(WTF::calculateLocalTimeOffset((WTF::WallTime *)1, v2) >> 32);
  return v3;
}

void WTF::makeRFC2822DateString(WTF *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringBuilder *a5@<X4>, WTF::StringBuilder *a6@<X5>, WTF::StringBuilder *a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>, int a10)
{
  int v10;
  unsigned int v14;
  unsigned int v15;
  int v17;
  char *v18;
  char *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  unsigned int v44;
  void *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  char v132;
  _BYTE v133[13];
  uint64_t v134;

  v10 = a8;
  v14 = a4;
  v15 = a2;
  v17 = 0;
  v134 = *MEMORY[0x1E0C80C00];
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 1;
  v18 = (&WTF::weekdayName)[2 * this];
  v19 = (&WTF::monthName)[2 * a3];
  v20 = a2;
  do
  {
    ++v17;
    v21 = v20 > 9;
    v20 /= 0xAu;
  }
  while (v21);
  v22 = 0;
  v23 = a4;
  do
  {
    ++v22;
    v21 = v23 > 9;
    v23 /= 0xAu;
  }
  while (v21);
  v24 = __CFADD__(v22, 6);
  v25 = v22 + 6;
  if (v24)
    v25 = -1;
  v24 = __CFADD__(v17, v25);
  v26 = v17 + v25;
  if (v24)
    v26 = -1;
  v24 = __CFADD__(v26, 5);
  v27 = v26 + 5;
  if (v24)
    v28 = 0xFFFFFFFFLL;
  else
    v28 = v27;
  v29 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v129, (WTF::AtomStringImpl *)v28, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  if (v29)
  {
    v36 = 0;
    v37 = *(_WORD *)v18;
    *(_BYTE *)(v29 + 2) = v18[2];
    *(_WORD *)v29 = v37;
    *(_WORD *)(v29 + 3) = 8236;
    v38 = v15;
    do
    {
      v133[v36-- + 12] = (v38 % 0xA) | 0x30;
      v21 = v38 > 9;
      v38 /= 0xAu;
    }
    while (v21);
    v39 = v29 + 5;
    if (v36 + 14 <= 13)
      memcpy((void *)(v29 + 5), &v133[v36 + 13], -v36);
    v40 = 0;
    do
    {
      ++v40;
      v21 = v15 > 9;
      v15 /= 0xAu;
    }
    while (v21);
    v41 = 0;
    v42 = v39 + v40;
    *(_BYTE *)v42 = 32;
    v43 = *(_WORD *)v19;
    *(_BYTE *)(v42 + 3) = v19[2];
    *(_WORD *)(v42 + 1) = v43;
    *(_BYTE *)(v42 + 4) = 32;
    v44 = v14;
    do
    {
      v133[v41-- + 12] = (v44 % 0xA) | 0x30;
      v21 = v44 > 9;
      v44 /= 0xAu;
    }
    while (v21);
    v45 = (void *)(v42 + 5);
    if (v41 + 14 <= 13)
      memcpy(v45, &v133[v41 + 13], -v41);
    v46 = 0;
    do
    {
      ++v46;
      v21 = v14 > 9;
      v14 /= 0xAu;
    }
    while (v21);
    *((_BYTE *)v45 + v46) = 32;
  }
  WTF::appendTwoDigitNumber((uint64_t)&v129, a5, v30, v31, v32, v33, v34, v35);
  v133[0] = 58;
  if (v130 && ((v53 = v131, v131 < *((_DWORD *)v130 + 1)) ? (v54 = v129 == 0) : (v54 = 0), v54))
  {
    v98 = *((_DWORD *)v130 + 4);
    v99 = *((_QWORD *)v130 + 1);
    ++v131;
    if ((v98 & 4) != 0)
      *(_BYTE *)(v99 + v53) = 58;
    else
      *(_WORD *)(v99 + 2 * v53) = 58;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v129, (int8x16_t *)v133, 1uLL, v48, v49, v50, v51, v52);
  }
  WTF::appendTwoDigitNumber((uint64_t)&v129, a6, v47, v48, v49, v50, v51, v52);
  v133[0] = 58;
  if (v130 && ((v61 = v131, v131 < *((_DWORD *)v130 + 1)) ? (v62 = v129 == 0) : (v62 = 0), v62))
  {
    v100 = *((_DWORD *)v130 + 4);
    v101 = *((_QWORD *)v130 + 1);
    ++v131;
    if ((v100 & 4) != 0)
      *(_BYTE *)(v101 + v61) = 58;
    else
      *(_WORD *)(v101 + 2 * v61) = 58;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v129, (int8x16_t *)v133, 1uLL, v56, v57, v58, v59, v60);
  }
  WTF::appendTwoDigitNumber((uint64_t)&v129, a7, v55, v56, v57, v58, v59, v60);
  v133[0] = 32;
  if (!v130 || (v69 = v131, v131 >= *((_DWORD *)v130 + 1)) || v129)
  {
    WTF::StringBuilder::append((uint64_t)&v129, (int8x16_t *)v133, 1uLL, v64, v65, v66, v67, v68);
  }
  else
  {
    v70 = *((_DWORD *)v130 + 4);
    v71 = *((_QWORD *)v130 + 1);
    ++v131;
    if ((v70 & 4) != 0)
      *(_BYTE *)(v71 + v69) = 32;
    else
      *(_WORD *)(v71 + 2 * v69) = 32;
  }
  if (v10 <= 0)
    v72 = 45;
  else
    v72 = 43;
  v133[0] = v72;
  if (!v130 || (v73 = v131, v131 >= *((_DWORD *)v130 + 1)) || v129)
  {
    WTF::StringBuilder::append((uint64_t)&v129, (int8x16_t *)v133, 1uLL, v64, v65, v66, v67, v68);
  }
  else
  {
    v74 = *((_DWORD *)v130 + 4);
    v75 = *((_QWORD *)v130 + 1);
    ++v131;
    if ((v74 & 4) != 0)
      *(_BYTE *)(v75 + v73) = v72;
    else
      *(_WORD *)(v75 + 2 * v73) = v72;
  }
  if (v10 >= 0)
    v76 = v10;
  else
    v76 = -v10;
  WTF::appendTwoDigitNumber((uint64_t)&v129, (WTF::StringBuilder *)(v76 / 0x3CuLL), v63, v64, v65, v66, v67, v68);
  WTF::appendTwoDigitNumber((uint64_t)&v129, (WTF::StringBuilder *)(v76 % 0x3C), v77, v78, v79, v80, v81, v82);
  v90 = v129;
  if (v129)
    goto LABEL_78;
  if ((v131 & 0x80000000) == 0 && v130 && *((_DWORD *)v130 + 1) > v131 + (v131 >> 2))
  {
    if ((*((_BYTE *)v130 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v129, (WTF::AtomStringImpl *)v131, v84, v85, v86, v87, v88, v89);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v129, (WTF::AtomStringImpl *)v131, v84, v85, v86, v87, v88, v89);
    v102 = v129;
    v129 = v130;
    v130 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
      {
        WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v102 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v129);
  v90 = v129;
  if (v129)
LABEL_78:
    *(_DWORD *)v90 += 2;
  *a9 = v90;
  v111 = v130;
  v130 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v83, v84, v85, v86, v87, v88, v89);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
      v112 = v129;
      v129 = 0;
      if (!v112)
        return;
      goto LABEL_85;
    }
    *(_DWORD *)v111 -= 2;
  }
  v112 = v129;
  v129 = 0;
  if (!v112)
    return;
LABEL_85:
  if (*(_DWORD *)v112 == 2)
  {
    WTF::StringImpl::~StringImpl(v112, v83, v84, v85, v86, v87, v88, v89);
    WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
  }
  else
  {
    *(_DWORD *)v112 -= 2;
  }
}

uint64_t WTF::appendTwoDigitNumber(uint64_t this, WTF::StringBuilder *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int8x16_t v21;

  v8 = (char)a2;
  v9 = this;
  v10 = (int)a2 / 10;
  v21.i8[0] = (int)a2 / 10 + 48;
  v11 = *(_QWORD *)(this + 8);
  if (v11
    && ((v12 = *(unsigned int *)(this + 16), v12 < *(_DWORD *)(v11 + 4))
      ? (v13 = *(_QWORD *)this == 0)
      : (v13 = 0),
        v13))
  {
    v17 = *(_DWORD *)(v11 + 16);
    v18 = *(_QWORD *)(v11 + 8);
    *(_DWORD *)(this + 16) = v12 + 1;
    if ((v17 & 4) != 0)
      *(_BYTE *)(v18 + v12) = (int)a2 / 10 + 48;
    else
      *(_WORD *)(v18 + 2 * v12) = ((int)a2 / 10 + 48);
  }
  else
  {
    this = WTF::StringBuilder::append(this, &v21, 1uLL, a4, a5, a6, a7, a8);
  }
  v21.i8[1] = v8 - 10 * v10 + 48;
  v14 = *(_QWORD *)(v9 + 8);
  if (!v14)
    return WTF::StringBuilder::append(v9, (int8x16_t *)&v21.i8[1], 1uLL, a4, a5, a6, a7, a8);
  v15 = *(unsigned int *)(v9 + 16);
  if (v15 >= *(_DWORD *)(v14 + 4) || *(_QWORD *)v9 != 0)
    return WTF::StringBuilder::append(v9, (int8x16_t *)&v21.i8[1], 1uLL, a4, a5, a6, a7, a8);
  v19 = *(_DWORD *)(v14 + 16);
  v20 = *(_QWORD *)(v14 + 8);
  *(_DWORD *)(v9 + 16) = v15 + 1;
  if ((v19 & 4) != 0)
    *(_BYTE *)(v20 + v15) = v8 - 10 * v10 + 48;
  else
    *(_WORD *)(v20 + 2 * v15) = (v8 - 10 * v10 + 48);
  return this;
}

BOOL WTF::isTimeZoneValid(WTF *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  WTF *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;

  WTF::validateTimeZone((uint64_t)&v13, a1, a2);
  v9 = v16;
  if (v16)
  {
    v10 = v13;
    if (&v15 != (uint64_t *)v13 && v13 != 0)
    {
      v13 = 0;
      v14 = 0;
      WTF::fastFree((unint64_t)v10, v2, v3, v4, v5, v6, v7, v8);
    }
  }
  return v9 != 0;
}

void WTF::validateTimeZone(uint64_t a1, WTF *a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  WTF *v9;
  __int128 v10;
  char *v11;
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  WTF *v22;
  __int16 v23;
  unsigned int CanonicalTimeZoneID;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  WTF *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  WTF *v38;
  uint8x8_t *v39;
  uint16x8_t *v40;
  unint64_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint8x8_t *v45;
  uint16x8_t *v46;
  unint64_t v47;
  uint8x8_t v48;
  WTF *v49;
  int v50;
  unsigned int v51;
  _BYTE v52[64];
  WTF *v53;
  unint64_t v54;
  _BYTE v55[64];
  WTF *v56;
  unint64_t v57;
  int v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v3 = a3;
  v53 = (WTF *)v55;
  v54 = 32;
  v56 = 0;
  v57 = 0;
  v6 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (a3 <= 0x20uLL)
    {
      HIDWORD(v54) = a3;
      v8 = (WTF *)v55;
      v9 = (WTF *)v55;
    }
    else
    {
      if (a3 <= 0x29uLL)
        v7 = 41;
      else
        v7 = a3;
      if (v7 >> 31)
      {
        __break(0xC471u);
        goto LABEL_58;
      }
      v8 = (WTF *)WTF::fastMalloc((WTF *)(2 * v7));
      v53 = v8;
      v54 = __PAIR64__(v3, v7);
      if (v6 < 0x40)
      {
        v9 = v8;
        v18 = (WTF *)((char *)v8 + 2 * v6);
        if (v8 != v18)
          goto LABEL_13;
        goto LABEL_18;
      }
      v9 = (WTF *)((char *)v8 + 2 * (v3 & 0xFFFFFFC0));
      v10 = 0uLL;
      v11 = (char *)v8;
      do
      {
        v59.val[0] = *(int8x16_t *)a2;
        v12 = *((int8x16_t *)a2 + 1);
        v60.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
        v13 = *((_OWORD *)a2 + 3);
        a2 = (WTF *)((char *)a2 + 64);
        v14 = v13;
        v60.val[1] = 0uLL;
        v61.val[0] = v12;
        v59.val[1] = 0uLL;
        v15 = v11;
        vst2q_s8(v15, v59);
        v15 += 32;
        v61.val[1] = 0uLL;
        vst2q_s8(v15, v61);
        v16 = v11 + 64;
        vst2q_s8(v16, v60);
        v17 = v11 + 96;
        vst2q_s8(v17, *(int8x16x2_t *)(&v10 - 1));
        v11 += 128;
      }
      while (v11 != (char *)v9);
    }
    v18 = (WTF *)((char *)v8 + 2 * v6);
    if (v9 != v18)
    {
LABEL_13:
      v19 = v18 - v9 - 2;
      if (v19 < 0xE
        || (v20 = (WTF *)((char *)v8 + 2 * v6) - v9 - 2, v9 < (WTF *)((char *)a2 + (v20 >> 1) + 1))
        && a2 < (WTF *)((char *)v9 + (v20 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v21 = v9;
        v22 = a2;
        goto LABEL_17;
      }
      v35 = (v19 >> 1) + 1;
      if (v19 >= 0x3E)
      {
        v36 = v35 & 0xFFFFFFFFFFFFFFE0;
        v39 = (uint8x8_t *)((char *)a2 + 16);
        v40 = (uint16x8_t *)((char *)v9 + 32);
        v41 = v35 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v42 = *(uint8x16_t *)v39[-2].i8;
          v43 = vmovl_u8(*v39);
          v44 = vmovl_high_u8(*(uint8x16_t *)v39->i8);
          v40[-2] = vmovl_u8(*(uint8x8_t *)v42.i8);
          v40[-1] = vmovl_high_u8(v42);
          *v40 = v43;
          v40[1] = v44;
          v40 += 4;
          v39 += 4;
          v41 -= 32;
        }
        while (v41);
        if (v35 == v36)
          goto LABEL_18;
        if ((v35 & 0x18) == 0)
        {
          v22 = (WTF *)((char *)a2 + v36);
          v21 = (WTF *)((char *)v9 + 2 * v36);
          do
          {
LABEL_17:
            v23 = *(unsigned __int8 *)v22;
            v22 = (WTF *)((char *)v22 + 1);
            *(_WORD *)v21 = v23;
            v21 = (WTF *)((char *)v21 + 2);
          }
          while (v21 != v18);
          goto LABEL_18;
        }
      }
      else
      {
        v36 = 0;
      }
      v21 = (WTF *)((char *)v9 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
      v22 = (WTF *)((char *)a2 + (v35 & 0xFFFFFFFFFFFFFFF8));
      v45 = (uint8x8_t *)((char *)a2 + v36);
      v46 = (uint16x8_t *)((char *)v9 + 2 * v36);
      v47 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v48 = *v45++;
        *v46++ = vmovl_u8(v48);
        v47 += 8;
      }
      while (v47);
      if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_18:
    a2 = v53;
    v6 = HIDWORD(v54);
  }
  v56 = a2;
  v57 = v6;
  v49 = (WTF *)v52;
  v50 = 32;
  v58 = 0;
  CanonicalTimeZoneID = ucal_getCanonicalTimeZoneID();
  v32 = CanonicalTimeZoneID;
  if (v58 <= 0)
  {
    v51 = CanonicalTimeZoneID;
    goto LABEL_39;
  }
  if (v58 == 15)
  {
    v58 = 0;
    if ((unint64_t)(int)CanonicalTimeZoneID <= 0x20)
      goto LABEL_35;
    if ((unint64_t)(int)CanonicalTimeZoneID >= 0x29)
      v33 = (int)CanonicalTimeZoneID;
    else
      v33 = 41;
    if (v33 < 0x21)
    {
      v49 = (WTF *)v52;
      v50 = 32;
      v34 = (WTF *)v52;
      goto LABEL_34;
    }
    if (!(v33 >> 31))
    {
      v34 = (WTF *)WTF::fastMalloc((WTF *)(2 * v33));
      v50 = v33;
      v49 = v34;
LABEL_34:
      memcpy(v34, v52, 0x40uLL);
LABEL_35:
      v51 = v32;
      ucal_getCanonicalTimeZoneID();
      if (v58 > 0)
        goto LABEL_36;
LABEL_39:
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
      if (v49 == (WTF *)v52)
      {
        v37 = v51;
        memcpy((void *)(a1 + 16), v52, 2 * v51);
      }
      else
      {
        *(_QWORD *)a1 = v49;
        v37 = v51;
        *(_DWORD *)(a1 + 8) = v50;
      }
      *(_DWORD *)(a1 + 12) = v37;
      *(_BYTE *)(a1 + 80) = 1;
      goto LABEL_43;
    }
    __break(0xC471u);
LABEL_58:
    JUMPOUT(0x197AC17BCLL);
  }
LABEL_36:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (v52 != (_BYTE *)v49 && v49)
    WTF::fastFree((unint64_t)v49, v25, v26, v27, v28, v29, v30, v31);
LABEL_43:
  v38 = v53;
  if (v55 != (_BYTE *)v53)
  {
    if (v53)
    {
      v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree((unint64_t)v38, v25, v26, v27, v28, v29, v30, v31);
    }
  }
}

void WTF::setTimeZoneOverride(WTF *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  int v48;
  void *__src;
  int v50;
  unsigned int v51;
  uint64_t v52;
  char v53;

  v10 = (uint64_t)a2;
  if (!(_DWORD)a2)
  {
    if (__ldaxr(WTF::innerTimeZoneOverrideLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::innerTimeZoneOverrideLock))
    {
      goto LABEL_16;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::innerTimeZoneOverrideLock);
LABEL_16:
    {
      if (dword_1EE342AD0)
      {
        if (dword_1EE342AD4)
          dword_1EE342AD4 = 0;
        v25 = WTF::innerTimeZoneOverride(void)::timeZoneOverride;
        if (WTF::innerTimeZoneOverride(void)::timeZoneOverride)
        {
          WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
          dword_1EE342AD0 = 0;
          WTF::fastFree(v25, a2, v10, a4, a5, a6, a7, a8);
        }
      }
      v26 = __ldxr(WTF::innerTimeZoneOverrideLock);
      if (v26 == 1)
      {
LABEL_23:
        if (!__stlxr(0, WTF::innerTimeZoneOverrideLock))
          return;
        goto LABEL_52;
      }
    }
    else
    {
      WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
      *(_QWORD *)&dword_1EE342AD0 = 0;
      v48 = __ldxr(WTF::innerTimeZoneOverrideLock);
      if (v48 == 1)
        goto LABEL_23;
    }
    __clrex();
LABEL_52:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::innerTimeZoneOverrideLock, 0, v10, a4, a5, a6, a7, a8);
    return;
  }
  WTF::validateTimeZone((uint64_t)&__src, a1, (uint64_t)a2);
  if (!v53)
    return;
  if (__ldaxr(WTF::innerTimeZoneOverrideLock))
  {
    __clrex();
  }
  else
  {
    v20 = (unsigned __int8 *)__stxr(1u, WTF::innerTimeZoneOverrideLock);
    if (!(_DWORD)v20)
      goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::innerTimeZoneOverrideLock);
LABEL_9:
  if (!v53)
  {
    __break(1u);
    goto LABEL_26;
  }
  v20 = WTF::AtomStringTableLocker::s_stringTableLock;
  v9 = 0x1EE342000uLL;
  v8 = 0x1EE342000uLL;
  {
LABEL_26:
    v21 = 0;
    WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
    *(_QWORD *)&dword_1EE342AD0 = 0;
    v20[32] = 1;
    v22 = v51;
    goto LABEL_27;
  }
  v21 = dword_1EE342AD4;
  v22 = v51;
  if (dword_1EE342AD4 <= v51)
  {
LABEL_27:
    v27 = dword_1EE342AD0;
    if (v22 > dword_1EE342AD0)
    {
      if (dword_1EE342AD0)
      {
        if (v21)
          *(_DWORD *)(v8 + 2772) = 0;
        v28 = *(_QWORD *)(v9 + 2760);
        if (v28)
        {
          WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
          dword_1EE342AD0 = 0;
          WTF::fastFree(v28, v11, v12, v13, v14, v15, v16, v17);
          v27 = dword_1EE342AD0;
          v22 = v51;
        }
      }
      if (v27 < v22)
      {
        if ((v22 & 0x80000000) != 0)
        {
          __break(0xC471u);
          return;
        }
        v29 = *(const void **)(v9 + 2760);
        v30 = dword_1EE342AD4;
        v31 = (void *)WTF::fastMalloc((WTF *)(2 * v22));
        dword_1EE342AD0 = v22;
        WTF::innerTimeZoneOverride(void)::timeZoneOverride = (uint64_t)v31;
        memcpy(v31, v29, 2 * v30);
        if (v29)
        {
          if (*(const void **)(v9 + 2760) == v29)
          {
            WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
            dword_1EE342AD0 = 0;
          }
          WTF::fastFree((unint64_t)v29, v32, v33, v34, v35, v36, v37, v38);
        }
      }
    }
    v22 = *(_DWORD *)(v8 + 2772);
    v23 = *(char **)(v9 + 2760);
    if (!v22)
      goto LABEL_13;
    goto LABEL_40;
  }
  dword_1EE342AD4 = v51;
  v23 = (char *)WTF::innerTimeZoneOverride(void)::timeZoneOverride;
  if (!v51)
  {
LABEL_13:
    v24 = 0;
    goto LABEL_41;
  }
LABEL_40:
  memmove(v23, __src, 2 * v22);
  v24 = dword_1EE342AD4;
  v23 = (char *)WTF::innerTimeZoneOverride(void)::timeZoneOverride;
LABEL_41:
  memcpy(&v23[2 * v24], (char *)__src + 2 * v24, 2 * v51 - 2 * v24);
  *(_DWORD *)(v8 + 2772) = v51;
  v46 = __ldxr(WTF::innerTimeZoneOverrideLock);
  if (v46 != 1)
  {
    __clrex();
LABEL_46:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::innerTimeZoneOverrideLock, 0, v40, v41, v42, v43, v44, v45);
    if (!v53)
      return;
    goto LABEL_47;
  }
  if (__stlxr(0, WTF::innerTimeZoneOverrideLock))
    goto LABEL_46;
  if (!v53)
    return;
LABEL_47:
  v47 = __src;
  if (&v52 != __src)
  {
    if (__src)
    {
      __src = 0;
      v50 = 0;
      WTF::fastFree((unint64_t)v47, v39, v40, v41, v42, v43, v44, v45);
    }
  }
}

void WTF::getTimeZoneOverride(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (__ldaxr(WTF::innerTimeZoneOverrideLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WTF::innerTimeZoneOverrideLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::innerTimeZoneOverrideLock);
LABEL_5:
  {
    WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
    *(_QWORD *)&dword_1EE342AD0 = 0;
  }
  WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1, (uint64_t)&WTF::innerTimeZoneOverride(void)::timeZoneOverride, a3, a4, a5, a6, a7, a8);
  v16 = __ldxr(WTF::innerTimeZoneOverrideLock);
  if (v16 == 1)
  {
    if (!__stlxr(0, WTF::innerTimeZoneOverrideLock))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::innerTimeZoneOverrideLock, 0, v10, v11, v12, v13, v14, v15);
}

unint64_t WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = result;
  v10 = *(_DWORD *)(result + 12);
  v11 = *(_DWORD *)(a2 + 12);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
    v12 = *(char **)result;
    if (v11)
    {
LABEL_3:
      memmove(v12, *(const void **)a2, 2 * v11);
      v13 = *(unsigned int *)(v9 + 12);
      v12 = *(char **)v9;
LABEL_28:
      memcpy(&v12[2 * v13], (const void *)(*(_QWORD *)a2 + 2 * v13), *(_QWORD *)a2 + 2 * *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + 2 * v13));
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
      return v9;
    }
LABEL_27:
    v13 = 0;
    goto LABEL_28;
  }
  v14 = *(_DWORD *)(result + 8);
  if (v11 <= v14)
  {
LABEL_26:
    v11 = *(_DWORD *)(v9 + 12);
    v12 = *(char **)v9;
    if (v11)
      goto LABEL_3;
    goto LABEL_27;
  }
  if (v14)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v9 + 16 != *(_QWORD *)v9 && result)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(result, (void *)a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v9;
    }
    if (result)
    {
      v15 = *(unsigned int *)(a2 + 12);
      if (*(_DWORD *)(v9 + 8) >= v15)
        goto LABEL_26;
    }
    else
    {
      *(_QWORD *)v9 = v9 + 16;
      *(_DWORD *)(v9 + 8) = 32;
      v15 = *(unsigned int *)(a2 + 12);
      if (v15 <= 0x20)
        goto LABEL_26;
    }
  }
  else
  {
    v15 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v15)
      goto LABEL_26;
  }
  v16 = *(const void **)v9;
  v17 = *(unsigned int *)(v9 + 12);
  if (v15 < 0x21)
  {
    v18 = (void *)(v9 + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 32;
    goto LABEL_21;
  }
  if ((v15 & 0x80000000) == 0)
  {
    v18 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
    *(_DWORD *)(v9 + 8) = v15;
    *(_QWORD *)v9 = v18;
LABEL_21:
    memcpy(v18, v16, 2 * v17);
    if ((const void *)(v9 + 16) != v16 && v16)
    {
      if (*(const void **)v9 == v16)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v16, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_26;
  }
  __break(0xC471u);
  return result;
}

void *WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(WTF::double_conversion::DoubleToStringConverter *this)
{
  return &WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter;
}

void *WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverterWithTrailingPoint(WTF::double_conversion::DoubleToStringConverter *this)
{
  return &WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverterWithTrailingPoint(void)::converter;
}

void *WTF::double_conversion::DoubleToStringConverter::CSSConverter(WTF::double_conversion::DoubleToStringConverter *this)
{
  return &WTF::double_conversion::DoubleToStringConverter::CSSConverter(void)::converter;
}

_BYTE *WTF::double_conversion::DoubleToStringConverter::CreateExponentialRepresentation(_BYTE *result, char *a2, int a3, unsigned int a4, uint64_t a5)
{
  _BYTE *v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BYTE v19[6];

  v7 = result;
  v8 = *a2;
  v9 = *(int *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = v9 + 1;
  *(_BYTE *)(*(_QWORD *)a5 + v9) = v8;
  v10 = *(_DWORD *)(a5 + 16);
  v11 = a3 - 1;
  if (a3 != 1)
  {
    *(_DWORD *)(a5 + 16) = v10 + 1;
    *(_BYTE *)(*(_QWORD *)a5 + v10) = 46;
    result = memmove((void *)(*(_QWORD *)a5 + *(int *)(a5 + 16)), a2 + 1, v11);
    v10 = *(_DWORD *)(a5 + 16) + v11;
  }
  v12 = v7[24];
  *(_DWORD *)(a5 + 16) = v10 + 1;
  *(_BYTE *)(*(_QWORD *)a5 + v10) = v12;
  if ((a4 & 0x80000000) != 0)
  {
    v15 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a5 + v15) = 45;
    a4 = -a4;
  }
  else
  {
    if ((*v7 & 1) != 0)
    {
      v13 = *(int *)(a5 + 16);
      *(_DWORD *)(a5 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a5 + v13) = 43;
    }
    if (!a4)
    {
      v14 = *(int *)(a5 + 16);
      *(_DWORD *)(a5 + 16) = v14 + 1;
      *(_BYTE *)(*(_QWORD *)a5 + v14) = 48;
      return result;
    }
  }
  v16 = 0;
  v17 = 0x500000000;
  v19[5] = 0;
  do
  {
    v19[v16 + 4] = (a4 % 0xA) | 0x30;
    v17 -= 0x100000000;
    --v16;
    v18 = a4 > 9;
    a4 /= 0xAu;
  }
  while (v18);
  result = memcpy((void *)(*(_QWORD *)a5 + *(int *)(a5 + 16)), &v19[v17 >> 32], -(int)v16);
  *(_DWORD *)(a5 + 16) -= v16;
  return result;
}

int *WTF::double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(int *result, char *__src, int a3, size_t __len, int a5, uint64_t a6)
{
  int v8;
  int *v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v8 = __len;
  v11 = result;
  if ((int)__len <= 0)
  {
    v18 = *(int *)(a6 + 16);
    *(_DWORD *)(a6 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a6 + v18) = 48;
    if (a5 >= 1)
    {
      v19 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v19) = 46;
      if ((_DWORD)__len)
      {
        v20 = __len;
        do
        {
          v21 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v21 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v21) = 48;
        }
        while (!__CFADD__(v20++, 1));
      }
      result = (int *)memmove((void *)(*(_QWORD *)a6 + *(int *)(a6 + 16)), __src, a3);
      *(_DWORD *)(a6 + 16) += a3;
      v23 = v8 - a3 + a5;
      if (v23 >= 1)
      {
        do
        {
          v24 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v24 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v24) = 48;
          --v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    v12 = (void *)(*(_QWORD *)a6 + *(int *)(a6 + 16));
    v13 = __len - a3;
    if ((int)__len >= a3)
    {
      result = (int *)memmove(v12, __src, a3);
      *(_DWORD *)(a6 + 16) += a3;
      if (v13 >= 1)
      {
        do
        {
          v25 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v25 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v25) = 48;
          --v13;
        }
        while (v13);
      }
      if (a5 >= 1)
      {
        v26 = *(int *)(a6 + 16);
        *(_DWORD *)(a6 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a6 + v26) = 46;
        v27 = a5;
        do
        {
          v28 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v28 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v28) = 48;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      memmove(v12, __src, __len);
      v14 = *(int *)(a6 + 16) + (uint64_t)v8;
      *(_DWORD *)(a6 + 16) = v14 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v14) = 46;
      v15 = a3 - v8;
      result = (int *)memmove((void *)(*(_QWORD *)a6 + *(int *)(a6 + 16)), &__src[v8], v15);
      *(_DWORD *)(a6 + 16) += v15;
      v16 = a5 - v15;
      if (a5 - v15 >= 1)
      {
        do
        {
          v17 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v17 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v17) = 48;
          --v16;
        }
        while (v16);
      }
    }
  }
  if (!a5)
  {
    v29 = *v11;
    if ((*v11 & 2) != 0)
    {
      v30 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v30) = 46;
      v29 = *v11;
    }
    if ((v29 & 4) != 0)
    {
      v31 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v31) = 48;
    }
  }
  return result;
}

uint64_t WTF::double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  const char *v8;
  uint64_t v9;
  double v11;
  int v12;
  double v14;
  unsigned int v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  int __len;
  _WORD __len_6[9];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
  {
    v18 = 0;
    __len = 0;
    if (a4 >= 0.0)
      v11 = a4;
    else
      v11 = -a4;
    if ((_DWORD)a3 == 3)
    {
      LOBYTE(__len_6[0]) = 0;
      v18 = 0;
LABEL_24:
      v16 = (*(_BYTE *)a1 & 8) == 0 || a4 != 0.0;
      if ((*(_QWORD *)&a4 & 0x8000000000000000) != 0 && v16)
      {
        v17 = *(int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v17) = 45;
      }
      if (*(_DWORD *)(a1 + 28) >= __len || __len > *(_DWORD *)(a1 + 32))
        WTF::double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((_BYTE *)a1, (char *)__len_6, v18, __len - 1, a2);
      else
        WTF::double_conversion::DoubleToStringConverter::CreateDecimalRepresentation((int *)a1, (char *)__len_6, v18, __len, (v18 - __len) & ~((v18 - __len) >> 31), a2);
      return 1;
    }
    if (v11 == 0.0)
    {
      __len_6[0] = 48;
      v18 = 1;
      __len = 1;
      goto LABEL_24;
    }
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 2)
      {
        if ((WTF::double_conversion::FastFixedDtoa(0, __len_6, 18, &v18, &__len, v11) & 1) != 0)
          goto LABEL_24;
        goto LABEL_23;
      }
      if ((_DWORD)a3 != 1)
        abort();
      v14 = v11;
      v15 = 1;
    }
    else
    {
      v14 = v11;
      v15 = 0;
    }
    if ((WTF::double_conversion::FastDtoa(v15, 0, __len_6, v14, 18, &v18, &__len) & 1) != 0)
      goto LABEL_24;
LABEL_23:
    WTF::double_conversion::BignumDtoa(a3, 0, __len_6, 18, &v18, &__len, v11);
    *((_BYTE *)__len_6 + v18) = 0;
    goto LABEL_24;
  }
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0x7FF0000000000000)
  {
    if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      v8 = *(const char **)(a1 + 16);
      if (v8)
        goto LABEL_13;
    }
    return 0;
  }
  v8 = *(const char **)(a1 + 8);
  if (!v8)
    return 0;
  if (a4 < 0.0)
  {
    v9 = *(int *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v9 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v9) = 45;
    v8 = *(const char **)(a1 + 8);
  }
LABEL_13:
  v12 = strlen(v8);
  memmove((void *)(*(_QWORD *)a2 + *(int *)(a2 + 16)), v8, v12);
  *(_DWORD *)(a2 + 16) += v12;
  return 1;
}

uint64_t WTF::double_conversion::DoubleToStringConverter::ToFixedInternal(int *a1, int a2, char *__src, unsigned int a4, uint64_t a5, double a6)
{
  double v12;
  double v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v18;

  v18 = 0;
  v12 = -a6;
  if (a6 >= 0.0)
    v13 = a6;
  else
    v13 = v12;
  if (v13 == 0.0)
  {
    *(_WORD *)__src = 48;
    v18 = 0x100000001;
  }
  else
  {
    v14 = a4;
    if ((WTF::double_conversion::FastFixedDtoa(a2, __src, a4, (int *)&v18, (int *)&v18 + 1, v13) & 1) == 0)
    {
      WTF::double_conversion::BignumDtoa(2, a2, __src, v14, (int *)&v18, (int *)&v18 + 1, v13);
      __src[(int)v18] = 0;
    }
  }
  v15 = (*(_BYTE *)a1 & 8) == 0 || a6 != 0.0;
  if ((*(_QWORD *)&a6 & 0x8000000000000000) != 0 && v15)
  {
    v16 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a5 + v16) = 45;
  }
  WTF::double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __src, v18, HIDWORD(v18), a2, a5);
  return 1;
}

uint64_t WTF::double_conversion::DoubleToStringConverter::ToFixed(uint64_t a1, int a2, uint64_t a3, double a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char __src[122];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
  {
    if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
    {
      v5 = *(const char **)(a1 + 8);
      if (v5)
      {
        if (a4 < 0.0)
        {
          v6 = *(int *)(a3 + 16);
          *(_DWORD *)(a3 + 16) = v6 + 1;
          *(_BYTE *)(*(_QWORD *)a3 + v6) = 45;
          v5 = *(const char **)(a1 + 8);
        }
        goto LABEL_12;
      }
    }
    else if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      v5 = *(const char **)(a1 + 16);
      if (v5)
      {
LABEL_12:
        v8 = strlen(v5);
        memmove((void *)(*(_QWORD *)a3 + *(int *)(a3 + 16)), v5, v8);
        *(_DWORD *)(a3 + 16) += v8;
        return 1;
      }
    }
    return 0;
  }
  if (a2 > 100)
    return 0;
  v7 = 0;
  if (a4 < 1.0e21 && a4 > -1.0e21)
  {
    WTF::double_conversion::DoubleToStringConverter::ToFixedInternal((int *)a1, a2, __src, 0x7Au, a3, a4);
    return 1;
  }
  return v7;
}

uint64_t WTF::double_conversion::DoubleToStringConverter::ToFixedUncapped(uint64_t a1, int a2, uint64_t a3, double a4)
{
  const char *v5;
  uint64_t v6;
  int v7;
  char __src[411];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
  {
    if (a2 <= 100)
    {
      WTF::double_conversion::DoubleToStringConverter::ToFixedInternal((int *)a1, a2, __src, 0x19Bu, a3, a4);
      return 1;
    }
  }
  else if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    v5 = *(const char **)(a1 + 8);
    if (v5)
    {
      if (a4 < 0.0)
      {
        v6 = *(int *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = v6 + 1;
        *(_BYTE *)(*(_QWORD *)a3 + v6) = 45;
        v5 = *(const char **)(a1 + 8);
      }
LABEL_10:
      v7 = strlen(v5);
      memmove((void *)(*(_QWORD *)a3 + *(int *)(a3 + 16)), v5, v7);
      *(_DWORD *)(a3 + 16) += v7;
      return 1;
    }
  }
  else if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v5 = *(const char **)(a1 + 16);
    if (v5)
      goto LABEL_10;
  }
  return 0;
}

uint64_t WTF::double_conversion::DoubleToStringConverter::ToExponential(uint64_t a1, unsigned int a2, uint64_t a3, double a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  int v13;
  int v14;
  double v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  char v20[102];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
  {
    if (a2 - 101 >= 0xFFFFFF9A)
    {
      v19 = 0;
      if (a2 == -1)
      {
        if (a4 >= 0.0)
          v16 = a4;
        else
          v16 = -a4;
        if (v16 == 0.0)
        {
          *(_WORD *)v20 = 48;
          v19 = 0x100000001;
        }
        else if ((WTF::double_conversion::FastDtoa(0, 0, v20, v16, 102, (int *)&v19, (_DWORD *)&v19 + 1) & 1) == 0)
        {
          WTF::double_conversion::BignumDtoa(0, 0, v20, 102, (int *)&v19, (int *)&v19 + 1, v16);
          v20[(int)v19] = 0;
        }
      }
      else
      {
        v11 = a2 + 1;
        if (a4 >= 0.0)
          v12 = a4;
        else
          v12 = -a4;
        if (v12 == 0.0)
        {
          *(_WORD *)v20 = 48;
          v13 = 1;
          v19 = 0x100000001;
        }
        else if (WTF::double_conversion::FastDtoa(2u, a2 + 1, v20, v12, 102, (int *)&v19, (_DWORD *)&v19 + 1))
        {
          v13 = v19;
        }
        else
        {
          WTF::double_conversion::BignumDtoa(3, a2 + 1, v20, 102, (int *)&v19, (int *)&v19 + 1, v12);
          v13 = v19;
          v20[(int)v19] = 0;
        }
        if ((int)a2 >= v13)
        {
          memset(&v20[v13], 48, a2 - v13 + 1);
          LODWORD(v19) = v11;
          v20[v11] = 0;
        }
      }
      v17 = (*(_BYTE *)a1 & 8) == 0 || a4 != 0.0;
      if ((*(_QWORD *)&a4 & 0x8000000000000000) != 0 && v17)
      {
        v18 = *(int *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a3 + v18) = 45;
      }
      WTF::double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((_BYTE *)a1, v20, v19, HIDWORD(v19) - 1, a3);
      return 1;
    }
    return 0;
  }
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0x7FF0000000000000)
  {
    if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      v8 = *(const char **)(a1 + 16);
      if (v8)
        goto LABEL_15;
    }
    return 0;
  }
  v8 = *(const char **)(a1 + 8);
  if (!v8)
    return 0;
  if (a4 < 0.0)
  {
    v9 = *(int *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = v9 + 1;
    *(_BYTE *)(*(_QWORD *)a3 + v9) = 45;
    v8 = *(const char **)(a1 + 8);
  }
LABEL_15:
  v14 = strlen(v8);
  memmove((void *)(*(_QWORD *)a3 + *(int *)(a3 + 16)), v8, v14);
  *(_DWORD *)(a3 + 16) += v14;
  return 1;
}

uint64_t WTF::double_conversion::DoubleToStringConverter::ToPrecision(uint64_t a1, int a2, uint64_t a3, double a4)
{
  const char *v8;
  uint64_t v9;
  double v11;
  int v12;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  size_t __len;
  char __src[101];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
  {
    if ((a2 - 101) >= 0xFFFFFF9C)
    {
      __len = 0;
      if (a4 >= 0.0)
        v11 = a4;
      else
        v11 = -a4;
      if (v11 == 0.0)
      {
        *(_WORD *)__src = 48;
        __len = 0x100000001;
      }
      else if ((WTF::double_conversion::FastDtoa(2u, a2, __src, v11, 101, (int *)&__len, (_DWORD *)&__len + 1) & 1) == 0)
      {
        WTF::double_conversion::BignumDtoa(3, a2, __src, 101, (int *)&__len, (int *)&__len + 1, v11);
        __src[(int)__len] = 0;
      }
      v14 = (*(_BYTE *)a1 & 8) == 0 || a4 != 0.0;
      if ((*(_QWORD *)&a4 & 0x8000000000000000) != 0 && v14)
      {
        v15 = *(int *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = v15 + 1;
        *(_BYTE *)(*(_QWORD *)a3 + v15) = 45;
      }
      if (1 - HIDWORD(__len) <= *(_DWORD *)(a1 + 36))
      {
        v16 = __len;
        if (HIDWORD(__len) - a2 + ((*(_DWORD *)a1 >> 2) & 1) <= *(_DWORD *)(a1 + 40))
        {
          WTF::double_conversion::DoubleToStringConverter::CreateDecimalRepresentation((int *)a1, __src, __len, HIDWORD(__len), (a2 - HIDWORD(__len)) & ~((a2 - HIDWORD(__len)) >> 31), a3);
          return 1;
        }
      }
      else
      {
        v16 = __len;
      }
      v17 = HIDWORD(__len) - 1;
      if (v16 < a2)
        memset(&__src[v16], 48, (~v16 + a2) + 1);
      WTF::double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((_BYTE *)a1, __src, a2, v17, a3);
      return 1;
    }
    return 0;
  }
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0x7FF0000000000000)
  {
    if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      v8 = *(const char **)(a1 + 16);
      if (v8)
        goto LABEL_14;
    }
    return 0;
  }
  v8 = *(const char **)(a1 + 8);
  if (!v8)
    return 0;
  if (a4 < 0.0)
  {
    v9 = *(int *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = v9 + 1;
    *(_BYTE *)(*(_QWORD *)a3 + v9) = 45;
    v8 = *(const char **)(a1 + 8);
  }
LABEL_14:
  v12 = strlen(v8);
  memmove((void *)(*(_QWORD *)a3 + *(int *)(a3 + 16)), v8, v12);
  *(_DWORD *)(a3 + 16) += v12;
  return 1;
}

double WTF::double_conversion::StringToDoubleConverter::StringToDouble(WTF::double_conversion::StringToDoubleConverter *this, const char *a2, _QWORD *a3, unint64_t *a4)
{
  int v6;
  double result;
  WTF::double_conversion::StringToDoubleConverter *v8;
  int v9;
  WTF::double_conversion::StringToDoubleConverter *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  const char *v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  int v31;
  const char *v32;
  int v33;
  unsigned int v34;
  int v35;
  _OWORD v36[48];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (!a2)
    return 0.0;
  v6 = *(unsigned __int8 *)this;
  if (v6 == 45 || v6 == 43)
  {
    result = 0.0;
    if (a2 == (const char *)1)
      return result;
    v28 = v6 == 45;
    v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 1);
    v6 = *((unsigned __int8 *)this + 1);
    v9 = v28;
    v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 1);
    v11 = &a2[(_QWORD)this];
    if (v6 == 48)
      goto LABEL_23;
  }
  else
  {
    v9 = 0;
    v8 = this;
    v10 = this;
    v11 = &a2[(_QWORD)this];
    if (v6 == 48)
    {
LABEL_23:
      if ((char *)v10 + 1 == v11)
      {
        *a3 = a2;
      }
      else
      {
        v23 = (char *)v10 + &a2[(_QWORD)this] - (const char *)v8;
        v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v10 + 1);
        v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v10 + 1);
        do
        {
          if (*(_BYTE *)v10 != 48)
            goto LABEL_12;
          v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v10 + 1);
          v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v8 + 1);
        }
        while (v10 != (WTF::double_conversion::StringToDoubleConverter *)v11);
        *a3 = v23 - (const char *)this;
      }
      goto LABEL_37;
    }
  }
LABEL_12:
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (char *)v10 + 2;
  while (1)
  {
    v18 = *(v16 - 2);
    if ((v18 - 48) > 9)
      break;
    if (v13 > 771)
    {
      ++v14;
      v15 |= v18 != 48;
      v17 = (uint64_t)(v16++ - 1);
      if ((const char *)v17 == v11)
        goto LABEL_17;
    }
    else
    {
      *((_BYTE *)v36 + v12++) = v18;
      ++v13;
      v19 = (uint64_t)(v16++ - 1);
      if ((const char *)v19 == v11)
        goto LABEL_17;
    }
  }
  if (v18 != 46)
  {
    v20 = 0;
    v22 = v16 - 2;
LABEL_41:
    if (v6 != 48 && !v20)
    {
      result = 0.0;
      if (!v13)
        return result;
    }
    v27 = v22 + 1;
    v28 = (v18 | 0x20) != 0x65 || v27 == v11;
    if (!v28)
    {
      v29 = *(unsigned __int8 *)v27;
      if (v29 == 45 || v29 == 43)
      {
        v27 = v22 + 2;
        if (v22 + 2 != v11)
        {
          v30 = *(unsigned __int8 *)v27;
          if (v30 - 58 >= 0xFFFFFFF6)
            goto LABEL_70;
        }
      }
      else if ((v29 - 58) >= 0xFFFFFFF6)
      {
        v30 = *(unsigned __int8 *)v27;
        v29 = 0;
LABEL_70:
        v31 = 0;
        v22 = &a2[(_QWORD)this];
        v32 = v27 + 1;
        while (1)
        {
          if (v31 <= 107374181 || (v33 = 0x3FFFFFFF, v30 <= 0x33) && v31 == 107374182)
            v33 = v30 + 10 * v31 - 48;
          if (v32 == v11)
            break;
          v34 = *(unsigned __int8 *)v32++;
          v30 = v34;
          v31 = v33;
          if (v34 - 48 >= 0xA)
          {
            v22 = v32 - 1;
            break;
          }
        }
        if (v29 == 45)
          v35 = -v33;
        else
          v35 = v33;
        v21 = v20 + v14 + v35;
        if ((v15 & 1) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
      v21 = v20 + v14;
      if ((v15 & 1) == 0)
      {
LABEL_20:
        *((_BYTE *)v36 + v12) = 0;
        result = WTF::double_conversion::Strtod(v36, v12, v21);
        *a3 = v22 - (const char *)this;
        if (v9)
          return -result;
        return result;
      }
LABEL_19:
      *((_BYTE *)v36 + v12++) = 49;
      --v21;
      goto LABEL_20;
    }
    v11 = v22;
LABEL_18:
    v21 = v14 + v20;
    v22 = v11;
    if ((v15 & 1) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v22 = v16 - 1;
  if (v16 - 1 == v11)
  {
    if (!v13)
    {
      result = 0.0;
      if (v6 != 48)
        return result;
    }
LABEL_17:
    v20 = 0;
    goto LABEL_18;
  }
  if (v13 || *v22 != 48)
  {
    v20 = 0;
LABEL_53:
    while (1)
    {
      v18 = *(unsigned __int8 *)v22;
      if ((v18 - 48) > 9)
        goto LABEL_41;
      if (v13 > 771)
      {
        v15 |= v18 != 48;
        if (++v22 == v11)
          goto LABEL_18;
      }
      else
      {
        *((_BYTE *)v36 + v12++) = v18;
        ++v13;
        --v20;
        if (++v22 == v11)
          goto LABEL_18;
      }
    }
  }
  v24 = 0;
  v25 = (char *)v10 + &a2[(_QWORD)this] - (const char *)v8;
  while (&v16[v24] != v11)
  {
    v26 = v16[v24++];
    if (v26 != 48)
    {
      v20 = -(int)v24;
      v22 = &v16[v24 - 1];
      goto LABEL_53;
    }
  }
  *a3 = v25 - (const char *)this;
LABEL_37:
  result = -0.0;
  if (!v9)
    return 0.0;
  return result;
}

double WTF::double_conversion::StringToDoubleConverter::StringToDouble(WTF::double_conversion::StringToDoubleConverter *this, int64_t a2, int64_t *a3, unint64_t *a4)
{
  int v6;
  double result;
  WTF::double_conversion::StringToDoubleConverter *v8;
  int v9;
  WTF::double_conversion::StringToDoubleConverter *v10;
  int v11;
  int v12;
  int v13;
  char v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v18;
  WTF::double_conversion::StringToDoubleConverter *v19;
  int v20;
  int v21;
  WTF::double_conversion::StringToDoubleConverter *v22;
  BOOL v23;
  int v24;
  char v25;
  int v26;
  WTF::double_conversion::StringToDoubleConverter *v27;
  int v28;
  int v29;
  int v30;
  _OWORD v31[48];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (!a2)
    return 0.0;
  v6 = *(unsigned __int16 *)this;
  if (v6 == 45 || v6 == 43)
  {
    result = 0.0;
    if (a2 == 1)
      return result;
    v23 = v6 == 45;
    v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 2);
    v6 = *((unsigned __int16 *)this + 1);
    v9 = v23;
    v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 2 * a2);
    if (v6 == 48)
    {
LABEL_9:
      do
      {
        v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v8 + 2);
        if (v8 == v10)
          goto LABEL_34;
      }
      while (*(_WORD *)v8 == 48);
    }
  }
  else
  {
    v9 = 0;
    v8 = this;
    v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 2 * a2);
    if (v6 == 48)
      goto LABEL_9;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = (unsigned __int16 *)((char *)v8 + 2);
  while (1)
  {
    v16 = *(v15 - 1);
    if ((v16 - 48) > 9)
      break;
    if (v12 > 771)
    {
      ++v13;
      v14 |= v16 != 48;
      v23 = v15++ == (unsigned __int16 *)v10;
      if (v23)
        goto LABEL_20;
    }
    else
    {
      *((_BYTE *)v31 + v11++) = v16;
      ++v12;
      v23 = v15++ == (unsigned __int16 *)v10;
      if (v23)
        goto LABEL_20;
    }
  }
  if (v16 != 46)
  {
    v17 = 0;
    --v15;
    goto LABEL_38;
  }
  if (v15 == (unsigned __int16 *)v10)
  {
    if (!v12)
    {
      result = 0.0;
      if (v6 != 48)
        return result;
    }
LABEL_20:
    v17 = 0;
LABEL_21:
    v18 = v13 + v17;
    v15 = (unsigned __int16 *)v10;
    if ((v14 & 1) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v12 || *v15 != 48)
  {
    v17 = 0;
LABEL_51:
    while (1)
    {
      v16 = *v15;
      if ((v16 - 48) > 9)
        break;
      if (v12 > 771)
      {
        v14 |= v16 != 48;
        if (++v15 == (unsigned __int16 *)v10)
          goto LABEL_21;
      }
      else
      {
        *((_BYTE *)v31 + v11++) = v16;
        ++v12;
        --v17;
        if (++v15 == (unsigned __int16 *)v10)
          goto LABEL_21;
      }
    }
LABEL_38:
    if (v6 != 48 && !v17)
    {
      result = 0.0;
      if (!v12)
        return result;
    }
    v21 = v16 | 0x20;
    v22 = (WTF::double_conversion::StringToDoubleConverter *)(v15 + 1);
    v23 = v21 != 101 || v22 == v10;
    if (v23)
    {
      v18 = v13 + v17;
      if ((v14 & 1) == 0)
        goto LABEL_23;
    }
    else
    {
      v24 = *(unsigned __int16 *)v22;
      if (v24 == 45 || v24 == 43)
      {
        v22 = (WTF::double_conversion::StringToDoubleConverter *)(v15 + 2);
        if (v15 + 2 != (unsigned __int16 *)v10 && (unsigned __int16)(*(_WORD *)v22 - 58) >= 0xFFF6u)
        {
          v25 = v24;
          LOWORD(v24) = *(_WORD *)v22;
LABEL_67:
          v26 = 0;
          v27 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v22 + 2);
          while (1)
          {
            if (v26 <= 107374181 || (v28 = 0x3FFFFFFF, (unsigned __int16)v24 <= 0x33u) && v26 == 107374182)
              v28 = (unsigned __int16)v24 + 10 * v26 - 48;
            if (v27 == v10)
              break;
            v29 = *(unsigned __int16 *)v27;
            v27 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v27 + 2);
            LOWORD(v24) = v29;
            v26 = v28;
            if ((v29 - 48) >= 0xA)
            {
              v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v27 - 2);
              break;
            }
          }
          if (v25 == 45)
            v30 = -v28;
          else
            v30 = v28;
          v18 = v17 + v13 + v30;
          v15 = (unsigned __int16 *)v10;
          if ((v14 & 1) == 0)
            goto LABEL_23;
          goto LABEL_22;
        }
      }
      else if ((unsigned __int16)(v24 - 58) >= 0xFFF6u)
      {
        v25 = 0;
        goto LABEL_67;
      }
      v18 = v17 + v13;
      if ((v14 & 1) == 0)
      {
LABEL_23:
        *((_BYTE *)v31 + v11) = 0;
        result = WTF::double_conversion::Strtod(v31, v11, v18);
        *a3 = ((char *)v15 - (char *)this) >> 1;
        if (v9)
          return -result;
        return result;
      }
    }
LABEL_22:
    *((_BYTE *)v31 + v11++) = 49;
    --v18;
    goto LABEL_23;
  }
  v17 = 0;
  v19 = (WTF::double_conversion::StringToDoubleConverter *)(v15 + 1);
  while (v19 != v10)
  {
    --v17;
    v20 = *(unsigned __int16 *)v19;
    v19 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v19 + 2);
    if (v20 != 48)
    {
      v15 = (unsigned __int16 *)((char *)v19 - 2);
      goto LABEL_51;
    }
  }
LABEL_34:
  *a3 = a2;
  result = -0.0;
  if (!v9)
    return 0.0;
  return result;
}

float WTF::double_conversion::StringToDoubleConverter::StringToFloat(WTF::double_conversion::StringToDoubleConverter *this, const char *a2, _QWORD *a3, unint64_t *a4)
{
  int v6;
  float result;
  WTF::double_conversion::StringToDoubleConverter *v8;
  int v9;
  WTF::double_conversion::StringToDoubleConverter *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  const char *v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  int v31;
  const char *v32;
  int v33;
  unsigned int v34;
  int v35;
  _OWORD v36[48];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (!a2)
    return 0.0;
  v6 = *(unsigned __int8 *)this;
  if (v6 == 45 || v6 == 43)
  {
    result = 0.0;
    if (a2 == (const char *)1)
      return result;
    v28 = v6 == 45;
    v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 1);
    v6 = *((unsigned __int8 *)this + 1);
    v9 = v28;
    v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 1);
    v11 = &a2[(_QWORD)this];
    if (v6 == 48)
      goto LABEL_23;
  }
  else
  {
    v9 = 0;
    v8 = this;
    v10 = this;
    v11 = &a2[(_QWORD)this];
    if (v6 == 48)
    {
LABEL_23:
      if ((char *)v10 + 1 == v11)
      {
        *a3 = a2;
      }
      else
      {
        v23 = (char *)v10 + &a2[(_QWORD)this] - (const char *)v8;
        v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v10 + 1);
        v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v10 + 1);
        do
        {
          if (*(_BYTE *)v10 != 48)
            goto LABEL_12;
          v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v10 + 1);
          v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v8 + 1);
        }
        while (v10 != (WTF::double_conversion::StringToDoubleConverter *)v11);
        *a3 = v23 - (const char *)this;
      }
      goto LABEL_37;
    }
  }
LABEL_12:
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (char *)v10 + 2;
  while (1)
  {
    v18 = *(v16 - 2);
    if ((v18 - 48) > 9)
      break;
    if (v13 > 771)
    {
      ++v14;
      v15 |= v18 != 48;
      v17 = (uint64_t)(v16++ - 1);
      if ((const char *)v17 == v11)
        goto LABEL_17;
    }
    else
    {
      *((_BYTE *)v36 + v12++) = v18;
      ++v13;
      v19 = (uint64_t)(v16++ - 1);
      if ((const char *)v19 == v11)
        goto LABEL_17;
    }
  }
  if (v18 != 46)
  {
    v20 = 0;
    v22 = v16 - 2;
LABEL_41:
    if (v6 != 48 && !v20)
    {
      result = 0.0;
      if (!v13)
        return result;
    }
    v27 = v22 + 1;
    v28 = (v18 | 0x20) != 0x65 || v27 == v11;
    if (!v28)
    {
      v29 = *(unsigned __int8 *)v27;
      if (v29 == 45 || v29 == 43)
      {
        v27 = v22 + 2;
        if (v22 + 2 != v11)
        {
          v30 = *(unsigned __int8 *)v27;
          if (v30 - 58 >= 0xFFFFFFF6)
            goto LABEL_70;
        }
      }
      else if ((v29 - 58) >= 0xFFFFFFF6)
      {
        v30 = *(unsigned __int8 *)v27;
        v29 = 0;
LABEL_70:
        v31 = 0;
        v22 = &a2[(_QWORD)this];
        v32 = v27 + 1;
        while (1)
        {
          if (v31 <= 107374181 || (v33 = 0x3FFFFFFF, v30 <= 0x33) && v31 == 107374182)
            v33 = v30 + 10 * v31 - 48;
          if (v32 == v11)
            break;
          v34 = *(unsigned __int8 *)v32++;
          v30 = v34;
          v31 = v33;
          if (v34 - 48 >= 0xA)
          {
            v22 = v32 - 1;
            break;
          }
        }
        if (v29 == 45)
          v35 = -v33;
        else
          v35 = v33;
        v21 = v20 + v14 + v35;
        if ((v15 & 1) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
      v21 = v20 + v14;
      if ((v15 & 1) == 0)
      {
LABEL_20:
        *((_BYTE *)v36 + v12) = 0;
        WTF::double_conversion::Strtof(v36, v12, v21);
        *a3 = v22 - (const char *)this;
        if (v9)
          return -result;
        return result;
      }
LABEL_19:
      *((_BYTE *)v36 + v12++) = 49;
      --v21;
      goto LABEL_20;
    }
    v11 = v22;
LABEL_18:
    v21 = v14 + v20;
    v22 = v11;
    if ((v15 & 1) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v22 = v16 - 1;
  if (v16 - 1 == v11)
  {
    if (!v13)
    {
      result = 0.0;
      if (v6 != 48)
        return result;
    }
LABEL_17:
    v20 = 0;
    goto LABEL_18;
  }
  if (v13 || *v22 != 48)
  {
    v20 = 0;
LABEL_53:
    while (1)
    {
      v18 = *(unsigned __int8 *)v22;
      if ((v18 - 48) > 9)
        goto LABEL_41;
      if (v13 > 771)
      {
        v15 |= v18 != 48;
        if (++v22 == v11)
          goto LABEL_18;
      }
      else
      {
        *((_BYTE *)v36 + v12++) = v18;
        ++v13;
        --v20;
        if (++v22 == v11)
          goto LABEL_18;
      }
    }
  }
  v24 = 0;
  v25 = (char *)v10 + &a2[(_QWORD)this] - (const char *)v8;
  while (&v16[v24] != v11)
  {
    v26 = v16[v24++];
    if (v26 != 48)
    {
      v20 = -(int)v24;
      v22 = &v16[v24 - 1];
      goto LABEL_53;
    }
  }
  *a3 = v25 - (const char *)this;
LABEL_37:
  result = -0.0;
  if (!v9)
    return 0.0;
  return result;
}

float WTF::double_conversion::StringToDoubleConverter::StringToFloat(WTF::double_conversion::StringToDoubleConverter *this, int64_t a2, int64_t *a3, unint64_t *a4)
{
  int v6;
  float result;
  WTF::double_conversion::StringToDoubleConverter *v8;
  int v9;
  WTF::double_conversion::StringToDoubleConverter *v10;
  int v11;
  int v12;
  int v13;
  char v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v18;
  WTF::double_conversion::StringToDoubleConverter *v19;
  int v20;
  int v21;
  WTF::double_conversion::StringToDoubleConverter *v22;
  BOOL v23;
  int v24;
  char v25;
  int v26;
  WTF::double_conversion::StringToDoubleConverter *v27;
  int v28;
  int v29;
  int v30;
  _OWORD v31[48];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (!a2)
    return 0.0;
  v6 = *(unsigned __int16 *)this;
  if (v6 == 45 || v6 == 43)
  {
    result = 0.0;
    if (a2 == 1)
      return result;
    v23 = v6 == 45;
    v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 2);
    v6 = *((unsigned __int16 *)this + 1);
    v9 = v23;
    v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 2 * a2);
    if (v6 == 48)
    {
LABEL_9:
      do
      {
        v8 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v8 + 2);
        if (v8 == v10)
          goto LABEL_34;
      }
      while (*(_WORD *)v8 == 48);
    }
  }
  else
  {
    v9 = 0;
    v8 = this;
    v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)this + 2 * a2);
    if (v6 == 48)
      goto LABEL_9;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = (unsigned __int16 *)((char *)v8 + 2);
  while (1)
  {
    v16 = *(v15 - 1);
    if ((v16 - 48) > 9)
      break;
    if (v12 > 771)
    {
      ++v13;
      v14 |= v16 != 48;
      v23 = v15++ == (unsigned __int16 *)v10;
      if (v23)
        goto LABEL_20;
    }
    else
    {
      *((_BYTE *)v31 + v11++) = v16;
      ++v12;
      v23 = v15++ == (unsigned __int16 *)v10;
      if (v23)
        goto LABEL_20;
    }
  }
  if (v16 != 46)
  {
    v17 = 0;
    --v15;
    goto LABEL_38;
  }
  if (v15 == (unsigned __int16 *)v10)
  {
    if (!v12)
    {
      result = 0.0;
      if (v6 != 48)
        return result;
    }
LABEL_20:
    v17 = 0;
LABEL_21:
    v18 = v13 + v17;
    v15 = (unsigned __int16 *)v10;
    if ((v14 & 1) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v12 || *v15 != 48)
  {
    v17 = 0;
LABEL_51:
    while (1)
    {
      v16 = *v15;
      if ((v16 - 48) > 9)
        break;
      if (v12 > 771)
      {
        v14 |= v16 != 48;
        if (++v15 == (unsigned __int16 *)v10)
          goto LABEL_21;
      }
      else
      {
        *((_BYTE *)v31 + v11++) = v16;
        ++v12;
        --v17;
        if (++v15 == (unsigned __int16 *)v10)
          goto LABEL_21;
      }
    }
LABEL_38:
    if (v6 != 48 && !v17)
    {
      result = 0.0;
      if (!v12)
        return result;
    }
    v21 = v16 | 0x20;
    v22 = (WTF::double_conversion::StringToDoubleConverter *)(v15 + 1);
    v23 = v21 != 101 || v22 == v10;
    if (v23)
    {
      v18 = v13 + v17;
      if ((v14 & 1) == 0)
        goto LABEL_23;
    }
    else
    {
      v24 = *(unsigned __int16 *)v22;
      if (v24 == 45 || v24 == 43)
      {
        v22 = (WTF::double_conversion::StringToDoubleConverter *)(v15 + 2);
        if (v15 + 2 != (unsigned __int16 *)v10 && (unsigned __int16)(*(_WORD *)v22 - 58) >= 0xFFF6u)
        {
          v25 = v24;
          LOWORD(v24) = *(_WORD *)v22;
LABEL_67:
          v26 = 0;
          v27 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v22 + 2);
          while (1)
          {
            if (v26 <= 107374181 || (v28 = 0x3FFFFFFF, (unsigned __int16)v24 <= 0x33u) && v26 == 107374182)
              v28 = (unsigned __int16)v24 + 10 * v26 - 48;
            if (v27 == v10)
              break;
            v29 = *(unsigned __int16 *)v27;
            v27 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v27 + 2);
            LOWORD(v24) = v29;
            v26 = v28;
            if ((v29 - 48) >= 0xA)
            {
              v10 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v27 - 2);
              break;
            }
          }
          if (v25 == 45)
            v30 = -v28;
          else
            v30 = v28;
          v18 = v17 + v13 + v30;
          v15 = (unsigned __int16 *)v10;
          if ((v14 & 1) == 0)
            goto LABEL_23;
          goto LABEL_22;
        }
      }
      else if ((unsigned __int16)(v24 - 58) >= 0xFFF6u)
      {
        v25 = 0;
        goto LABEL_67;
      }
      v18 = v17 + v13;
      if ((v14 & 1) == 0)
      {
LABEL_23:
        *((_BYTE *)v31 + v11) = 0;
        WTF::double_conversion::Strtof(v31, v11, v18);
        *a3 = ((char *)v15 - (char *)this) >> 1;
        if (v9)
          return -result;
        return result;
      }
    }
LABEL_22:
    *((_BYTE *)v31 + v11++) = 49;
    --v18;
    goto LABEL_23;
  }
  v17 = 0;
  v19 = (WTF::double_conversion::StringToDoubleConverter *)(v15 + 1);
  while (v19 != v10)
  {
    --v17;
    v20 = *(unsigned __int16 *)v19;
    v19 = (WTF::double_conversion::StringToDoubleConverter *)((char *)v19 + 2);
    if (v20 != 48)
    {
      v15 = (unsigned __int16 *)((char *)v19 - 2);
      goto LABEL_51;
    }
  }
LABEL_34:
  *a3 = a2;
  result = -0.0;
  if (!v9)
    return 0.0;
  return result;
}

char *WTF::dragonbox::detail::to_chars_impl<float,WTF::dragonbox::default_float_traits<float>,(WTF::dragonbox::Mode)2,(WTF::dragonbox::PrintTrailingZero)1>(unsigned int a1, int a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  _WORD *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;

  if (a1 >= 0x5F5E100)
  {
    v3 = 1441151882 * a1;
    *a3 = *(_WORD *)((char *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v3) & 0x7E));
    v4 = 100 * (v3 >> 25);
    a3[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v4 >> 31) & 0xFE];
    v5 = 100 * (v4 & 0xFFFFFFFC);
    a3[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v5 >> 31) & 0xFE];
    v6 = 100 * (v5 & 0xFFFFFFF0);
    a3[3] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v6 >> 31) & 0xFE];
    a3[4] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v6 & 0xFFFFFFC0)) >> 31) & 0xFE];
    v7 = a2 + 8;
    v8 = (char *)(a3 + 5);
    goto LABEL_55;
  }
  if (a1 >= 0xF4240)
  {
    v9 = 281474978 * a1;
    v10 = HIWORD(v9);
    if (HIWORD(HIDWORD(v9)) <= 9u)
      v11 = 6;
    else
      v11 = 7;
    v7 = v11 + a2;
    *a3 = WTF::dragonbox::radix_100_head_table[v10];
    v12 = WTF::dragonbox::radix_100_table[2 * v10 + 1];
    *((_BYTE *)a3 + 2) = WTF::dragonbox::radix_100_table[2 * v10 + 1];
    if ((v9 >> 16) > 0x10C6)
    {
      if (v10 <= 9)
        v13 = a3;
      else
        v13 = (_WORD *)((char *)a3 + 1);
      v14 = 100 * (v9 >> 16);
      v15 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v14 >> 31) & 0xFE];
      v13[1] = v15;
      if (v14 >= 0x68DB9)
      {
        v16 = 100 * (v14 & 0xFFFFFFFC);
        v17 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v16 >> 31) & 0xFE];
        v13[2] = v17;
        if (v16 < 0x28F5C29)
        {
          v18 = v17 >> 8;
LABEL_51:
          v27 = v18 <= 48;
          v28 = 5;
          goto LABEL_52;
        }
        v30 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v16 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v13[3] = v30;
        v27 = v30 >> 8 <= 48;
        v28 = 7;
LABEL_52:
        if (!v27)
          ++v28;
        v8 = (char *)v13 + v28;
        goto LABEL_55;
      }
LABEL_37:
      v27 = v15 >> 8 <= 48;
      v28 = 3;
      goto LABEL_52;
    }
LABEL_19:
    v21 = v12 > 48 && v10 > 9;
    goto LABEL_22;
  }
  if (a1 >> 4 >= 0x271)
  {
    v19 = 429497 * a1;
    v10 = HIDWORD(v19);
    if (HIDWORD(v19) <= 9)
      v20 = 4;
    else
      v20 = 5;
    v7 = v20 + a2;
    *a3 = WTF::dragonbox::radix_100_head_table[v10];
    v12 = WTF::dragonbox::radix_100_table[2 * v10 + 1];
    *((_BYTE *)a3 + 2) = WTF::dragonbox::radix_100_table[2 * v10 + 1];
    if (v19 >= 0x68DB9)
    {
      if (HIDWORD(v19) <= 9)
        v13 = a3;
      else
        v13 = (_WORD *)((char *)a3 + 1);
      v26 = 100 * v19;
      v15 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v26 >> 31) & 0xFE];
      v13[1] = v15;
      if (v26 >= 0x28F5C29)
      {
        v34 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v26 & 0xFFFFFFFC)) >> 31) & 0xFE];
        v13[2] = v34;
        v18 = v34 >> 8;
        goto LABEL_51;
      }
      goto LABEL_37;
    }
    goto LABEL_19;
  }
  if (a1 < 0x64)
  {
    if (a1 <= 9)
      v7 = a2;
    else
      v7 = a2 + 1;
    *a3 = WTF::dragonbox::radix_100_head_table[a1];
    v29 = WTF::dragonbox::radix_100_table[2 * a1 + 1];
    *((_BYTE *)a3 + 2) = v29;
    v8 = (char *)a3 + 3;
    if (a1 <= 9 || v29 <= 48)
      v8 = (char *)a3 + 1;
  }
  else
  {
    v22 = 42949673 * a1;
    v23 = HIDWORD(v22);
    if (HIDWORD(v22) <= 9)
      v24 = 2;
    else
      v24 = 3;
    v7 = v24 + a2;
    *a3 = WTF::dragonbox::radix_100_head_table[v23];
    v25 = WTF::dragonbox::radix_100_table[2 * v23 + 1];
    *((_BYTE *)a3 + 2) = WTF::dragonbox::radix_100_table[2 * v23 + 1];
    if (v22 < 0x28F5C29)
    {
      v21 = v25 > 48 && HIDWORD(v22) > 9;
LABEL_22:
      v8 = (char *)a3 + 3;
      if (!v21)
        v8 = (char *)a3 + 1;
      goto LABEL_55;
    }
    if (HIDWORD(v22) <= 9)
      v31 = (char *)a3;
    else
      v31 = (char *)a3 + 1;
    v32 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)v22) >> 31) & 0xFE];
    *((_WORD *)v31 + 1) = v32;
    v21 = v32 >> 8 <= 48;
    v33 = 3;
    if (!v21)
      v33 = 4;
    v8 = &v31[v33];
  }
LABEL_55:
  if (v7 >= 0)
    v35 = 11109;
  else
    v35 = 11621;
  if (v7 < 0)
    v7 = -v7;
  *(_WORD *)v8 = v35;
  if (v7 < 0xA)
  {
    v8[2] = v7 | 0x30;
    return v8 + 3;
  }
  else
  {
    *((_WORD *)v8 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[2 * v7];
    return v8 + 4;
  }
}

char *WTF::dragonbox::detail::to_chars_impl<double,WTF::dragonbox::default_float_traits<double>,(WTF::dragonbox::Mode)2,(WTF::dragonbox::PrintTrailingZero)1>(unint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  _WORD *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  int v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _WORD *v34;
  unint64_t v35;
  unint64_t v36;
  _WORD *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  _WORD *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  unsigned int v69;

  if (a1 <= 0x5F5E0FF)
  {
    v5 = a2;
    LODWORD(v3) = a1;
  }
  else
  {
    v3 = a1 / 0x5F5E100;
    v4 = a1 % 0x5F5E100;
    v5 = a2 + 8;
    if (v4)
    {
      if (v3 < 0x5F5E100)
      {
        if (v3 <= 0xF423F)
        {
          if (v3 >> 4 < 0x271)
          {
            if (v3 < 0x64)
            {
              v26 = v3 > 9;
              v33 = v3 > 9;
              *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[(a1 / 0x5F5E100)];
              *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * (a1 / 0x5F5E100) + 1];
              v58 = 2;
              if (v26)
                v58 = 3;
              v37 = (_WORD *)(a3 + v58);
            }
            else
            {
              v54 = 42949673 * v3;
              v55 = HIDWORD(v54);
              *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v55];
              *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[v55 * 2 + 1];
              if (HIDWORD(v54) <= 9)
                v33 = 2;
              else
                v33 = 3;
              if (HIDWORD(v54) <= 9)
                v56 = a3;
              else
                v56 = a3 + 1;
              *(_WORD *)(v56 + 2) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                               * (unint64_t)v54) >> 31) & 0xFE];
              v37 = (_WORD *)(v56 + 4);
            }
          }
          else
          {
            v42 = 429497 * v3;
            v43 = HIDWORD(v42);
            *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v43];
            *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[v43 * 2 + 1];
            if (HIDWORD(v42) <= 9)
              v33 = 4;
            else
              v33 = 5;
            if (HIDWORD(v42) <= 9)
              v44 = (_WORD *)a3;
            else
              v44 = (_WORD *)(a3 + 1);
            v45 = 100 * v42;
            v44[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v45 >> 31) & 0xFE];
            v44[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                * (unint64_t)(v45 & 0xFFFFFFFC)) >> 31) & 0xFE];
            v37 = v44 + 3;
          }
        }
        else
        {
          v31 = 281474978 * v3;
          v32 = HIWORD(v31);
          *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v32];
          *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[v32 * 2 + 1];
          if (HIWORD(v31) <= 9)
            v33 = 6;
          else
            v33 = 7;
          if (HIWORD(v31) <= 9)
            v34 = (_WORD *)a3;
          else
            v34 = (_WORD *)(a3 + 1);
          v35 = 100 * (v31 >> 16);
          v34[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v35 >> 31) & 0xFE];
          v36 = 100 * (v35 & 0xFFFFFFFC);
          v34[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v36 >> 31) & 0xFE];
          v34[3] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v36 & 0xFFFFFFF0)) >> 31) & 0xFE];
          v37 = v34 + 4;
        }
        v5 += v33;
        v59 = ((281474978 * (unint64_t)v4) >> 16) + 1;
        v60 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v59 >> 31) & 0x7FFE];
        *v37 = v60;
        if (v59 > 0x10C6)
        {
          v63 = 100 * v59;
          v64 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v63 >> 31) & 0xFE];
          v37[1] = v64;
          if (v63 >= 0x68DB9)
          {
            v65 = 100 * (v63 & 0xFFFFFFFC);
            v66 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v65 >> 31) & 0xFE];
            v37[2] = v66;
            if (v65 >= 0x28F5C29)
            {
              v67 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v65 & 0xFFFFFFF0)) >> 31) & 0xFE];
              v37[3] = v67;
              v61 = v67 >> 8 <= 48;
              v62 = 7;
            }
            else
            {
              v61 = v66 >> 8 <= 48;
              v62 = 5;
            }
          }
          else
          {
            v61 = v64 >> 8 <= 48;
            v62 = 3;
          }
        }
        else
        {
          v61 = v60 >> 8 <= 48;
          v62 = 1;
        }
        if (!v61)
          ++v62;
        v13 = (char *)v37 + v62;
      }
      else
      {
        v6 = 1441151882 * v3;
        *(_WORD *)a3 = *(_WORD *)((char *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v6) & 0x7E));
        v7 = 100 * (v6 >> 25);
        *(_WORD *)(a3 + 2) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v7 >> 31) & 0xFE];
        v8 = 100 * (v7 & 0xFFFFFFFC);
        *(_WORD *)(a3 + 4) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v8 >> 31) & 0xFE];
        v9 = 100 * (v8 & 0xFFFFFFF0);
        *(_WORD *)(a3 + 6) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v9 >> 31) & 0xFE];
        *(_WORD *)(a3 + 8) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                        * (unint64_t)(v9 & 0xFFFFFFC0)) >> 31) & 0xFE];
        v10 = ((281474978 * (unint64_t)v4) >> 16) + 1;
        *(_WORD *)(a3 + 10) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v10 >> 31) & 0x7FFE];
        v11 = 100 * v10;
        *(_WORD *)(a3 + 12) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v11 >> 31) & 0xFE];
        v12 = 100 * (v11 & 0xFFFFFFFC);
        *(_WORD *)(a3 + 14) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v12 >> 31) & 0xFE];
        *(_WORD *)(a3 + 16) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                         * (unint64_t)(v12 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v5 = a2 + 16;
        v13 = (char *)(a3 + 18);
      }
      goto LABEL_96;
    }
    if (v3 >= 0x5F5E100)
    {
      v27 = 1441151882 * v3;
      *(_WORD *)a3 = *(_WORD *)((char *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v27) & 0x7E));
      v28 = 100 * (v27 >> 25);
      *(_WORD *)(a3 + 2) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v28 >> 31) & 0xFE];
      v29 = 100 * (v28 & 0xFFFFFFFC);
      *(_WORD *)(a3 + 4) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v29 >> 31) & 0xFE];
      v30 = 100 * (v29 & 0xFFFFFFF0);
      *(_WORD *)(a3 + 6) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v30 >> 31) & 0xFE];
      *(_WORD *)(a3 + 8) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                      * (unint64_t)(v30 & 0xFFFFFFC0)) >> 31) & 0xFE];
      v5 = a2 + 16;
      v13 = (char *)(a3 + 10);
      goto LABEL_96;
    }
  }
  if (v3 > 0xF423F)
  {
    v14 = 281474978 * v3;
    v15 = HIWORD(v14);
    if (HIWORD(v14) <= 9)
      v16 = 6;
    else
      v16 = 7;
    v5 += v16;
    *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v15];
    v17 = WTF::dragonbox::radix_100_table[2 * v15 + 1];
    *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * v15 + 1];
    if ((v14 >> 16) > 0x10C6)
    {
      if (v15 <= 9)
        v18 = (_WORD *)a3;
      else
        v18 = (_WORD *)(a3 + 1);
      v19 = 100 * (v14 >> 16);
      v20 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v19 >> 31) & 0xFE];
      v18[1] = v20;
      if (v19 >= 0x68DB9)
      {
        v21 = 100 * (v19 & 0xFFFFFFFC);
        v22 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v21 >> 31) & 0xFE];
        v18[2] = v22;
        if (v21 < 0x28F5C29)
        {
          v23 = v22 >> 8;
LABEL_79:
          v47 = v23 <= 48;
          v48 = 5;
          goto LABEL_80;
        }
        v50 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v21 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v18[3] = v50;
        v47 = v50 >> 8 <= 48;
        v48 = 7;
LABEL_80:
        if (!v47)
          ++v48;
        v13 = (char *)v18 + v48;
        goto LABEL_96;
      }
LABEL_58:
      v47 = v20 >> 8 <= 48;
      v48 = 3;
      goto LABEL_80;
    }
LABEL_22:
    v26 = v17 > 48 && v15 > 9;
    goto LABEL_25;
  }
  if (v3 >> 4 >= 0x271)
  {
    v24 = 429497 * v3;
    v15 = HIDWORD(v24);
    if (HIDWORD(v24) <= 9)
      v25 = 4;
    else
      v25 = 5;
    v5 += v25;
    *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v15];
    v17 = WTF::dragonbox::radix_100_table[2 * v15 + 1];
    *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * v15 + 1];
    if (v24 >= 0x68DB9)
    {
      if (HIDWORD(v24) <= 9)
        v18 = (_WORD *)a3;
      else
        v18 = (_WORD *)(a3 + 1);
      v46 = 100 * v24;
      v20 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v46 >> 31) & 0xFE];
      v18[1] = v20;
      if (v46 >= 0x28F5C29)
      {
        v57 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v46 & 0xFFFFFFFC)) >> 31) & 0xFE];
        v18[2] = v57;
        v23 = v57 >> 8;
        goto LABEL_79;
      }
      goto LABEL_58;
    }
    goto LABEL_22;
  }
  if (v3 < 0x64)
  {
    if (v3 > 9)
      ++v5;
    *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v3];
    v49 = WTF::dragonbox::radix_100_table[(2 * v3) + 1];
    *(_BYTE *)(a3 + 2) = v49;
    v13 = (char *)(a3 + 3);
    if (v3 <= 9 || v49 <= 48)
      v13 = (char *)(a3 + 1);
  }
  else
  {
    v38 = 42949673 * v3;
    v39 = HIDWORD(v38);
    if (HIDWORD(v38) <= 9)
      v40 = 2;
    else
      v40 = 3;
    v5 += v40;
    *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v39];
    v41 = WTF::dragonbox::radix_100_table[2 * v39 + 1];
    *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * v39 + 1];
    if (v38 < 0x28F5C29)
    {
      v26 = v41 > 48 && HIDWORD(v38) > 9;
LABEL_25:
      v13 = (char *)(a3 + 3);
      if (!v26)
        v13 = (char *)(a3 + 1);
      goto LABEL_96;
    }
    if (HIDWORD(v38) <= 9)
      v51 = a3;
    else
      v51 = a3 + 1;
    v52 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)v38) >> 31) & 0xFE];
    *(_WORD *)(v51 + 2) = v52;
    v26 = v52 >> 8 <= 48;
    v53 = 3;
    if (!v26)
      v53 = 4;
    v13 = (char *)(v51 + v53);
  }
LABEL_96:
  if (v5 >= 0)
    v68 = 11109;
  else
    v68 = 11621;
  if (v5 < 0)
    v5 = -v5;
  *(_WORD *)v13 = v68;
  if (v5 < 0x64)
  {
    if (v5 < 0xA)
    {
      v13[2] = v5 | 0x30;
      return v13 + 3;
    }
    else
    {
      *((_WORD *)v13 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[2 * v5];
      return v13 + 4;
    }
  }
  else
  {
    v69 = 6554 * v5;
    *((_WORD *)v13 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v69 >> 15) & 0x1FFFE];
    v13[4] = ((5 * (v69 & 0xFFFE)) >> 15) | 0x30;
    return v13 + 5;
  }
}

char *WTF::dragonbox::detail::to_shortest(unint64_t this, size_t __len, uint64_t a3, char *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  _WORD *v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  _WORD *v66;
  unint64_t v67;
  unint64_t v68;
  _WORD *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  _BYTE *v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _WORD *v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  unint64_t v135;
  _WORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  __int16 v143;
  BOOL v144;
  uint64_t v145;
  unint64_t v146;
  __int16 v147;
  unint64_t v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  unint64_t v161;
  int v162;
  BOOL v163;
  unint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  unint64_t v168;
  __int16 v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  __int16 v173;
  unint64_t v174;
  __int16 v175;
  __int16 v176;
  uint64_t v177;
  char *v178;
  unint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  _BYTE *v183;
  unint64_t v184;
  unint64_t v185;
  _WORD *v186;
  unint64_t v187;
  _BYTE *v188;
  unint64_t v189;
  __int16 v190;
  unint64_t v191;
  __int16 v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  unint64_t v202;
  int v203;
  __int16 v204;
  __int16 v205;
  __int16 v206;
  unint64_t v207;
  _BYTE *v208;
  uint64_t v209;
  unint64_t v210;
  __int16 v211;
  BOOL v212;
  uint64_t v213;
  unint64_t v214;
  __int16 v215;
  unint64_t v216;
  __int16 v217;
  __int16 v218;

  if (this <= 0x2386F26FC0FFFFLL)
  {
    if (this <= 0x38D7EA4C67FFFLL)
    {
      if (this <= 0x5AF3107A3FFFLL)
      {
        if (this <= 0x9184E729FFFLL)
        {
          if (this <= 0xE8D4A50FFFLL)
          {
            if (this <= 0x174876E7FFLL)
            {
              if (this <= 0x2540BE3FFLL)
              {
                if (this <= 0x3B9AC9FF)
                {
                  if (this <= 0x5F5E0FF)
                  {
                    if (this <= 0x98967F)
                    {
                      if (this <= 0xF423F)
                      {
                        if (this >> 5 <= 0xC34)
                        {
                          if (this >> 4 <= 0x270)
                          {
                            if (this <= 0x3E7)
                            {
                              if (this <= 0x63)
                              {
                                if (this <= 9)
                                  v6 = 1;
                                else
                                  v6 = 2;
                              }
                              else
                              {
                                v6 = 3;
                              }
                            }
                            else
                            {
                              v6 = 4;
                            }
                          }
                          else
                          {
                            v6 = 5;
                          }
                        }
                        else
                        {
                          v6 = 6;
                        }
                      }
                      else
                      {
                        v6 = 7;
                      }
                    }
                    else
                    {
                      v6 = 8;
                    }
                  }
                  else
                  {
                    v6 = 9;
                  }
                }
                else
                {
                  v6 = 10;
                }
              }
              else
              {
                v6 = 11;
              }
            }
            else
            {
              v6 = 12;
            }
          }
          else
          {
            v6 = 13;
          }
        }
        else
        {
          v6 = 14;
        }
      }
      else
      {
        v6 = 15;
      }
    }
    else
    {
      v6 = 16;
    }
  }
  else
  {
    v6 = 17;
  }
  v7 = v6 + __len;
  if ((v7 + 5) < 0x1B)
  {
    if ((__len & 0x80000000) == 0)
    {
      if (this <= 0x5F5E0FF)
      {
        v9 = 1;
        LODWORD(v8) = this;
      }
      else
      {
        v8 = this / 0x5F5E100;
        v9 = ((281474978 * (this % 0x5F5E100)) >> 16) + 1;
        if ((this / 0x5F5E100) > 0x5F5E0FF)
        {
          v46 = 1441151882 * v8;
          *(_BYTE *)a3 = *((_BYTE *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v46) & 0x7E));
          v47 = 100 * (v46 >> 25);
          *(_WORD *)(a3 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v47 >> 31) & 0xFE];
          v48 = 100 * (v47 & 0xFFFFFFFC);
          *(_WORD *)(a3 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v48 >> 31) & 0xFE];
          v49 = 100 * (v48 & 0xFFFFFFF0);
          *(_WORD *)(a3 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v49 >> 31) & 0xFE];
          *(_WORD *)(a3 + 7) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                          * (unint64_t)(v49 & 0xFFFFFFC0)) >> 31) & 0xFE];
          *(_WORD *)(a3 + 9) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v9 >> 31) & 0x7FFE];
          v50 = 100 * v9;
          *(_WORD *)(a3 + 11) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v50 >> 31) & 0xFE];
          v51 = 100 * (v50 & 0xFFFFFFFC);
          *(_WORD *)(a3 + 13) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v51 >> 31) & 0xFE];
          *(_WORD *)(a3 + 15) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                           * (unint64_t)(v51 & 0xFFFFFFF0)) >> 31) & 0xFE];
          v15 = (_WORD *)(a3 + 17);
LABEL_151:
          if ((_DWORD)__len)
          {
            v115 = __len;
            memset(v15, 48, __len);
            return (char *)v15 + v115;
          }
          return (char *)v15;
        }
      }
      if (v8 <= 0xF423F)
      {
        if (v8 >> 4 < 0x271)
        {
          if (v8 < 0x64)
          {
            *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v8];
            *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[(2 * v8) + 1];
            v54 = v8 > 9;
            v112 = 1;
            if (v54)
              v112 = 2;
            v15 = (_WORD *)(a3 + v112);
          }
          else
          {
            v91 = 42949673 * v8;
            v92 = HIDWORD(v91);
            *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v92];
            *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[v92 * 2 + 1];
            if (HIDWORD(v91) <= 9)
              v93 = a3;
            else
              v93 = a3 + 1;
            *(_WORD *)(v93 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)v91) >> 31) & 0xFE];
            v15 = (_WORD *)(v93 + 3);
          }
        }
        else
        {
          v59 = 429497 * v8;
          v60 = HIDWORD(v59);
          *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v60];
          *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[v60 * 2 + 1];
          if (HIDWORD(v59) <= 9)
            v61 = a3;
          else
            v61 = a3 + 1;
          v62 = 100 * v59;
          *(_WORD *)(v61 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v62 >> 31) & 0xFE];
          *(_WORD *)(v61 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                           * (unint64_t)(v62 & 0xFFFFFFFC)) >> 31) & 0xFE];
          v15 = (_WORD *)(v61 + 5);
        }
      }
      else
      {
        v10 = 281474978 * v8;
        v11 = HIWORD(v10);
        *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v11];
        *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[v11 * 2 + 1];
        if (HIWORD(v10) <= 9)
          v12 = a3;
        else
          v12 = a3 + 1;
        v13 = 100 * (v10 >> 16);
        *(_WORD *)(v12 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v13 >> 31) & 0xFE];
        v14 = 100 * (v13 & 0xFFFFFFFC);
        *(_WORD *)(v12 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v14 >> 31) & 0xFE];
        *(_WORD *)(v12 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                         * (unint64_t)(v14 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v15 = (_WORD *)(v12 + 7);
      }
      if (this > 0x5F5E0FF)
      {
        *v15 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v9 >> 31) & 0x7FFE];
        v113 = 100 * v9;
        v15[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v113 >> 31) & 0xFE];
        v114 = 100 * (v113 & 0xFFFFFFFC);
        v15[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v114 >> 31) & 0xFE];
        v15[3] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v114 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v15 += 4;
      }
      goto LABEL_151;
    }
    if (v7 < 1)
    {
      *(_WORD *)a3 = 11824;
      v74 = (_BYTE *)(a3 + 2);
      if (v7 < 0)
      {
        v75 = ~v7;
        memset(v74, 48, v75 + 1);
        v74 = (_BYTE *)(v75 + a3 + 3);
      }
      if (this <= 0x5F5E0FF)
      {
        LODWORD(v76) = this;
      }
      else
      {
        v76 = this / 0x5F5E100;
        v77 = this % 0x5F5E100;
        if (v77)
        {
          if (v76 > 0x5F5E0FF)
          {
            v78 = 1441151882 * v76;
            *v74 = *((_BYTE *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v78) & 0x7E));
            v79 = 100 * (v78 >> 25);
            *(_WORD *)(v74 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v79 >> 31) & 0xFE];
            v80 = 100 * (v79 & 0xFFFFFFFC);
            *(_WORD *)(v74 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v80 >> 31) & 0xFE];
            v81 = 100 * (v80 & 0xFFFFFFF0);
            *(_WORD *)(v74 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v81 >> 31) & 0xFE];
            *(_WORD *)(v74 + 7) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                             * (unint64_t)(v81 & 0xFFFFFFC0)) >> 31) & 0xFE];
            v82 = ((281474978 * (unint64_t)v77) >> 16) + 1;
            *(_WORD *)(v74 + 9) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v82 >> 31) & 0x7FFE];
            v83 = 100 * v82;
            *(_WORD *)(v74 + 11) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v83 >> 31) & 0xFE];
            v84 = 100 * (v83 & 0xFFFFFFFC);
            *(_WORD *)(v74 + 13) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v84 >> 31) & 0xFE];
            *(_WORD *)(v74 + 15) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                              * (unint64_t)(v84 & 0xFFFFFFF0)) >> 31) & 0xFE];
            return v74 + 17;
          }
          if (v76 <= 0xF423F)
          {
            if (v76 >> 4 < 0x271)
            {
              if (v76 < 0x64)
              {
                *v74 = WTF::dragonbox::radix_100_head_table[(this / 0x5F5E100)];
                v74[1] = WTF::dragonbox::radix_100_table[2 * (this / 0x5F5E100) + 1];
                v54 = v76 > 9;
                v167 = 1;
                if (v54)
                  v167 = 2;
                v136 = &v74[v167];
              }
              else
              {
                v164 = 42949673 * v76;
                v165 = HIDWORD(v164);
                *v74 = WTF::dragonbox::radix_100_head_table[v165];
                v74[1] = WTF::dragonbox::radix_100_table[v165 * 2 + 1];
                if (HIDWORD(v164) <= 9)
                  v166 = v74;
                else
                  v166 = v74 + 1;
                *(_WORD *)(v166 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                  * (unint64_t)v164) >> 31) & 0xFE];
                v136 = v166 + 3;
              }
            }
            else
            {
              v158 = 429497 * v76;
              v159 = HIDWORD(v158);
              *v74 = WTF::dragonbox::radix_100_head_table[v159];
              v74[1] = WTF::dragonbox::radix_100_table[v159 * 2 + 1];
              if (HIDWORD(v158) <= 9)
                v160 = v74;
              else
                v160 = v74 + 1;
              v161 = 100 * v158;
              *(_WORD *)(v160 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v161 >> 31) & 0xFE];
              *(_WORD *)(v160 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                * (unint64_t)(v161 & 0xFFFFFFFC)) >> 31) & 0xFE];
              v136 = v160 + 5;
            }
          }
          else
          {
            v131 = 281474978 * v76;
            v132 = HIWORD(v131);
            *v74 = WTF::dragonbox::radix_100_head_table[v132];
            v74[1] = WTF::dragonbox::radix_100_table[v132 * 2 + 1];
            if (HIWORD(v131) <= 9)
              v133 = v74;
            else
              v133 = v74 + 1;
            v134 = 100 * (v131 >> 16);
            *(_WORD *)(v133 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v134 >> 31) & 0xFE];
            v135 = 100 * (v134 & 0xFFFFFFFC);
            *(_WORD *)(v133 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v135 >> 31) & 0xFE];
            *(_WORD *)(v133 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                              * (unint64_t)(v135 & 0xFFFFFFF0)) >> 31) & 0xFE];
            v136 = v133 + 7;
          }
          v168 = ((281474978 * (unint64_t)v77) >> 16) + 1;
          v169 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v168 >> 31) & 0x7FFE];
          *v136 = v169;
          if (v168 > 0x10C6)
          {
            v172 = 100 * v168;
            v173 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v172 >> 31) & 0xFE];
            v136[1] = v173;
            if (v172 >= 0x68DB9)
            {
              v174 = 100 * (v172 & 0xFFFFFFFC);
              v175 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v174 >> 31) & 0xFE];
              v136[2] = v175;
              if (v174 >= 0x28F5C29)
              {
                v176 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                  * (unint64_t)(v174 & 0xFFFFFFF0)) >> 31) & 0xFE];
                v136[3] = v176;
                v170 = v176 >> 8 <= 48;
                v171 = 7;
              }
              else
              {
                v170 = v175 >> 8 <= 48;
                v171 = 5;
              }
            }
            else
            {
              v170 = v173 >> 8 <= 48;
              v171 = 3;
            }
          }
          else
          {
            v170 = v169 >> 8 <= 48;
            v171 = 1;
          }
LABEL_323:
          if (!v170)
            ++v171;
          return (char *)v136 + v171;
        }
        if (v76 > 0x5F5E0FF)
        {
          v127 = 1441151882 * v76;
          *v74 = *((_BYTE *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v127) & 0x7E));
          v128 = 100 * (v127 >> 25);
          *(_WORD *)(v74 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v128 >> 31) & 0xFE];
          v129 = 100 * (v128 & 0xFFFFFFFC);
          *(_WORD *)(v74 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v129 >> 31) & 0xFE];
          v130 = 100 * (v129 & 0xFFFFFFF0);
          *(_WORD *)(v74 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v130 >> 31) & 0xFE];
          *(_WORD *)(v74 + 7) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                           * (unint64_t)(v130 & 0xFFFFFFC0)) >> 31) & 0xFE];
          return v74 + 9;
        }
      }
      if (v76 > 0xF423F)
      {
        v102 = 281474978 * v76;
        v103 = HIWORD(v102);
        v104 = HIWORD(v102);
        *v74 = WTF::dragonbox::radix_100_head_table[v104];
        v105 = WTF::dragonbox::radix_100_table[v104 * 2 + 1];
        v74[1] = v105;
        if ((v102 >> 16) > 0x10C6)
          goto LABEL_283;
        goto LABEL_292;
      }
      if (v76 >> 4 >= 0x271)
      {
        v110 = 429497 * v76;
        v103 = HIDWORD(v110);
        v111 = HIDWORD(v110);
        *v74 = WTF::dragonbox::radix_100_head_table[v111];
        v105 = WTF::dragonbox::radix_100_table[v111 * 2 + 1];
        v74[1] = v105;
        goto LABEL_291;
      }
      if (v76 < 0x64)
      {
        v162 = WTF::dragonbox::radix_100_table[(2 * v76) + 1];
        v163 = v162 > 48 && v76 > 9;
        *v74 = WTF::dragonbox::radix_100_head_table[v76];
        v74[1] = v162;
        goto LABEL_295;
      }
      v137 = 42949673 * v76;
      v138 = HIDWORD(v137);
      v139 = HIDWORD(v137);
      *v74 = WTF::dragonbox::radix_100_head_table[v139];
      v140 = WTF::dragonbox::radix_100_table[v139 * 2 + 1];
      v74[1] = v140;
LABEL_300:
      if (v137 < 0x28F5C29)
      {
        v163 = v140 > 48 && v138 > 9;
        goto LABEL_295;
      }
      if (v138 <= 9)
        v136 = v74;
      else
        v136 = v74 + 1;
      v205 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)v137) >> 31) & 0xFE];
      *(_WORD *)((char *)v136 + 1) = v205;
      v170 = v205 >> 8 <= 48;
      v171 = 2;
      goto LABEL_323;
    }
    if (__len < 0xFFFFFFF0)
    {
      v37 = 0;
      v38 = this / 0;
      if (this / 0 <= 0x5F5E0FF)
      {
LABEL_62:
        v39 = 1;
        LODWORD(v40) = v38;
        if (v38 <= 0x5F5E0FF)
        {
LABEL_63:
          if (v40 <= 0xF423F)
          {
            if (v40 >> 4 < 0x271)
            {
              if (v40 < 0x64)
              {
                *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v40];
                *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[(2 * v40) + 1];
                v54 = v40 > 9;
                v153 = 1;
                if (v54)
                  v153 = 2;
                v15 = (_WORD *)(a3 + v153);
              }
              else
              {
                v124 = 42949673 * v40;
                v125 = HIDWORD(v124);
                *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v125];
                *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[v125 * 2 + 1];
                if (HIDWORD(v124) <= 9)
                  v126 = a3;
                else
                  v126 = a3 + 1;
                *(_WORD *)(v126 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                  * (unint64_t)v124) >> 31) & 0xFE];
                v15 = (_WORD *)(v126 + 3);
              }
            }
            else
            {
              v106 = 429497 * v40;
              v107 = HIDWORD(v106);
              *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v107];
              *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[v107 * 2 + 1];
              if (HIDWORD(v106) <= 9)
                v108 = a3;
              else
                v108 = a3 + 1;
              v109 = 100 * v106;
              *(_WORD *)(v108 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v109 >> 31) & 0xFE];
              *(_WORD *)(v108 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                * (unint64_t)(v109 & 0xFFFFFFFC)) >> 31) & 0xFE];
              v15 = (_WORD *)(v108 + 5);
            }
          }
          else
          {
            v41 = 281474978 * v40;
            v42 = HIWORD(v41);
            *(_BYTE *)a3 = WTF::dragonbox::radix_100_head_table[v42];
            *(_BYTE *)(a3 + 1) = WTF::dragonbox::radix_100_table[v42 * 2 + 1];
            if (HIWORD(v41) <= 9)
              v43 = a3;
            else
              v43 = a3 + 1;
            v44 = 100 * (v41 >> 16);
            *(_WORD *)(v43 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v44 >> 31) & 0xFE];
            v45 = 100 * (v44 & 0xFFFFFFFC);
            *(_WORD *)(v43 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v45 >> 31) & 0xFE];
            *(_WORD *)(v43 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                             * (unint64_t)(v45 & 0xFFFFFFF0)) >> 31) & 0xFE];
            v15 = (_WORD *)(v43 + 7);
          }
          if (v38 > 0x5F5E0FF)
          {
            *v15 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v39 >> 31) & 0x7FFE];
            v154 = 100 * v39;
            v15[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v154 >> 31) & 0xFE];
            v155 = 100 * (v154 & 0xFFFFFFFC);
            v15[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v155 >> 31) & 0xFE];
            v15[3] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                * (unint64_t)(v155 & 0xFFFFFFF0)) >> 31) & 0xFE];
            v15 += 4;
          }
          goto LABEL_215;
        }
LABEL_112:
        v85 = 1441151882 * v40;
        *(_BYTE *)a3 = *((_BYTE *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v85) & 0x7E));
        v86 = 100 * (v85 >> 25);
        *(_WORD *)(a3 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v86 >> 31) & 0xFE];
        v87 = 100 * (v86 & 0xFFFFFFFC);
        *(_WORD *)(a3 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v87 >> 31) & 0xFE];
        v88 = 100 * (v87 & 0xFFFFFFF0);
        *(_WORD *)(a3 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v88 >> 31) & 0xFE];
        *(_WORD *)(a3 + 7) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                        * (unint64_t)(v88 & 0xFFFFFFC0)) >> 31) & 0xFE];
        *(_WORD *)(a3 + 9) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v39 >> 31) & 0x7FFE];
        v89 = 100 * v39;
        *(_WORD *)(a3 + 11) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v89 >> 31) & 0xFE];
        v90 = 100 * (v89 & 0xFFFFFFFC);
        *(_WORD *)(a3 + 13) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v90 >> 31) & 0xFE];
        *(_WORD *)(a3 + 15) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                         * (unint64_t)(v90 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v15 = (_WORD *)(a3 + 17);
LABEL_215:
        v156 = this - v38 * v37;
        if (!v156)
          return (char *)v15;
        if (v156 <= 0x38D7EA4C67FFFLL)
        {
          if (v156 <= 0x5AF3107A3FFFLL)
          {
            if (v156 <= 0x9184E729FFFLL)
            {
              if (v156 <= 0xE8D4A50FFFLL)
              {
                if (v156 <= 0x174876E7FFLL)
                {
                  if (v156 <= 0x2540BE3FFLL)
                  {
                    if (v156 <= 0x3B9AC9FF)
                    {
                      if (v156 <= 0x5F5E0FF)
                      {
                        if (v156 <= 0x98967F)
                        {
                          if (v156 <= 0xF423F)
                          {
                            if (v156 >> 5 <= 0xC34)
                            {
                              if (v156 >> 4 <= 0x270)
                              {
                                if (v156 <= 0x3E7)
                                {
                                  if (v156 <= 0x63)
                                  {
                                    if (v156 <= 9)
                                      v157 = 1;
                                    else
                                      v157 = 2;
                                  }
                                  else
                                  {
                                    v157 = 3;
                                  }
                                }
                                else
                                {
                                  v157 = 4;
                                }
                              }
                              else
                              {
                                v157 = 5;
                              }
                            }
                            else
                            {
                              v157 = 6;
                            }
                          }
                          else
                          {
                            v157 = 7;
                          }
                        }
                        else
                        {
                          v157 = 8;
                        }
                      }
                      else
                      {
                        v157 = 9;
                      }
                    }
                    else
                    {
                      v157 = 10;
                    }
                  }
                  else
                  {
                    v157 = 11;
                  }
                }
                else
                {
                  v157 = 12;
                }
              }
              else
              {
                v157 = 13;
              }
            }
            else
            {
              v157 = 14;
            }
          }
          else
          {
            v157 = 15;
          }
        }
        else
        {
          v157 = 16;
        }
        *(_BYTE *)v15 = 46;
        v74 = (char *)v15 + 1;
        if (v157 < -(int)__len)
        {
          v177 = (~v157 - __len);
          memset(v74, 48, v177 + 1);
          v178 = (char *)v15 + v177;
          v15 = (_WORD *)((char *)v15 + v177 + 1);
          v74 = v178 + 2;
        }
        if (v156 <= 0x5F5E0FF)
        {
          LODWORD(v179) = v156;
        }
        else
        {
          v179 = v156 / 0x5F5E100;
          v180 = v156 % 0x5F5E100;
          if (v180)
          {
            if (v179 <= 0xF423F)
            {
              if (v179 >> 4 < 0x271)
              {
                if (v179 < 0x64)
                {
                  *v74 = WTF::dragonbox::radix_100_head_table[(v156 / 0x5F5E100)];
                  *((_BYTE *)v15 + 2) = WTF::dragonbox::radix_100_table[2 * (v156 / 0x5F5E100) + 1];
                  v54 = v179 > 9;
                  v209 = 1;
                  if (v54)
                    v209 = 2;
                  v186 = &v74[v209];
                }
                else
                {
                  v207 = 42949673 * v179;
                  *v74 = WTF::dragonbox::radix_100_head_table[HIDWORD(v207)];
                  *((_BYTE *)v15 + 2) = WTF::dragonbox::radix_100_table[2 * HIDWORD(v207) + 1];
                  if (HIDWORD(v207) > 9)
                    v208 = v74 + 1;
                  else
                    v208 = v74;
                  *(_WORD *)(v208 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                    * (unint64_t)v207) >> 31) & 0xFE];
                  v186 = v208 + 3;
                }
              }
              else
              {
                v200 = 429497 * v179;
                *v74 = WTF::dragonbox::radix_100_head_table[HIDWORD(v200)];
                *((_BYTE *)v15 + 2) = WTF::dragonbox::radix_100_table[2 * HIDWORD(v200) + 1];
                if (HIDWORD(v200) > 9)
                  v201 = v74 + 1;
                else
                  v201 = v74;
                v202 = 100 * v200;
                *(_WORD *)(v201 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v202 >> 31) & 0xFE];
                *(_WORD *)(v201 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                  * (unint64_t)(v202 & 0xFFFFFFFC)) >> 31) & 0xFE];
                v186 = v201 + 5;
              }
            }
            else
            {
              v181 = 281474978 * v179;
              v182 = HIWORD(v181);
              *v74 = WTF::dragonbox::radix_100_head_table[v182];
              *((_BYTE *)v15 + 2) = WTF::dragonbox::radix_100_table[v182 * 2 + 1];
              if (HIWORD(v181) > 9)
                v183 = v74 + 1;
              else
                v183 = v74;
              v184 = 100 * (v181 >> 16);
              *(_WORD *)(v183 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v184 >> 31) & 0xFE];
              v185 = 100 * (v184 & 0xFFFFFFFC);
              *(_WORD *)(v183 + 3) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v185 >> 31) & 0xFE];
              *(_WORD *)(v183 + 5) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                                * (unint64_t)(v185 & 0xFFFFFFF0)) >> 31) & 0xFE];
              v186 = v183 + 7;
            }
            v210 = ((281474978 * (unint64_t)v180) >> 16) + 1;
            v211 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v210 >> 31) & 0x7FFE];
            *v186 = v211;
            if (v210 > 0x10C6)
            {
              v214 = 100 * v210;
              v215 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v214 >> 31) & 0xFE];
              v186[1] = v215;
              if (v214 >= 0x68DB9)
              {
                v216 = 100 * (v214 & 0xFFFFFFFC);
                v217 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v216 >> 31) & 0xFE];
                v186[2] = v217;
                if (v216 >= 0x28F5C29)
                {
                  v218 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                    * (unint64_t)(v216 & 0xFFFFFFF0)) >> 31) & 0xFE];
                  v186[3] = v218;
                  v212 = v218 >> 8 <= 48;
                  v213 = 7;
                }
                else
                {
                  v212 = v217 >> 8 <= 48;
                  v213 = 5;
                }
              }
              else
              {
                v212 = v215 >> 8 <= 48;
                v213 = 3;
              }
            }
            else
            {
              v212 = v211 >> 8 <= 48;
              v213 = 1;
            }
            if (!v212)
              ++v213;
            return (char *)v186 + v213;
          }
        }
        if (v179 > 0xF423F)
        {
          v102 = 281474978 * v179;
          v103 = HIWORD(v102);
          v187 = HIWORD(v102);
          *v74 = WTF::dragonbox::radix_100_head_table[v187];
          v105 = WTF::dragonbox::radix_100_table[v187 * 2 + 1];
          *((_BYTE *)v15 + 2) = v105;
          if ((v102 >> 16) > 0x10C6)
          {
LABEL_283:
            if (v103 <= 9)
              v188 = v74;
            else
              v188 = v74 + 1;
            v189 = 100 * (v102 >> 16);
            v190 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v189 >> 31) & 0xFE];
            *(_WORD *)(v188 + 1) = v190;
            if (v189 >= 0x68DB9)
            {
              v191 = 100 * (v189 & 0xFFFFFFFC);
              v192 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v191 >> 31) & 0xFE];
              *(_WORD *)(v188 + 3) = v192;
              if (v191 < 0x28F5C29)
              {
                v193 = v192 >> 8;
LABEL_327:
                v198 = v193 <= 48;
                v199 = 4;
                goto LABEL_328;
              }
              v204 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                * (unint64_t)(v191 & 0xFFFFFFF0)) >> 31) & 0xFE];
              *(_WORD *)(v188 + 5) = v204;
              v198 = v204 >> 8 <= 48;
              v199 = 6;
LABEL_328:
              if (!v198)
                ++v199;
              return &v188[v199];
            }
LABEL_308:
            v198 = v190 >> 8 <= 48;
            v199 = 2;
            goto LABEL_328;
          }
          goto LABEL_292;
        }
        if (v179 >> 4 >= 0x271)
        {
          v110 = 429497 * v179;
          v103 = HIDWORD(v110);
          v194 = HIDWORD(v110);
          *v74 = WTF::dragonbox::radix_100_head_table[v194];
          v105 = WTF::dragonbox::radix_100_table[v194 * 2 + 1];
          *((_BYTE *)v15 + 2) = v105;
LABEL_291:
          if (v110 >= 0x68DB9)
          {
            if (v103 <= 9)
              v188 = v74;
            else
              v188 = v74 + 1;
            v197 = 100 * v110;
            v190 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v197 >> 31) & 0xFE];
            *(_WORD *)(v188 + 1) = v190;
            if (v197 >= 0x28F5C29)
            {
              v206 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                * (unint64_t)(v197 & 0xFFFFFFFC)) >> 31) & 0xFE];
              *(_WORD *)(v188 + 3) = v206;
              v193 = v206 >> 8;
              goto LABEL_327;
            }
            goto LABEL_308;
          }
LABEL_292:
          v163 = v105 > 48 && v103 > 9;
LABEL_295:
          v195 = 1;
          if (v163)
            v195 = 2;
          return &v74[v195];
        }
        if (v179 < 0x64)
        {
          v203 = WTF::dragonbox::radix_100_table[(2 * v179) + 1];
          v163 = v203 > 48 && v179 > 9;
          *v74 = WTF::dragonbox::radix_100_head_table[v179];
          *((_BYTE *)v15 + 2) = v203;
          goto LABEL_295;
        }
        v137 = 42949673 * v179;
        v138 = HIDWORD(v137);
        v196 = HIDWORD(v137);
        *v74 = WTF::dragonbox::radix_100_head_table[v196];
        v140 = WTF::dragonbox::radix_100_table[v196 * 2 + 1];
        *((_BYTE *)v15 + 2) = v140;
        goto LABEL_300;
      }
    }
    else
    {
      v37 = *(_QWORD *)&WTF::dragonbox::radix_100_table[8 * ~(_DWORD)__len + 200];
      v38 = this / v37;
      if (this / v37 <= 0x5F5E0FF)
        goto LABEL_62;
    }
    v40 = v38 / 0x5F5E100;
    v39 = ((281474978 * (v38 % 0x5F5E100)) >> 16) + 1;
    if ((v38 / 0x5F5E100) <= 0x5F5E0FF)
      goto LABEL_63;
    goto LABEL_112;
  }
  if (this <= 0x5F5E0FF)
  {
    v18 = __len;
    LODWORD(v16) = this;
    goto LABEL_48;
  }
  v16 = this / 0x5F5E100;
  v17 = this % 0x5F5E100;
  v18 = __len + 8;
  if (v17)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0xF423F)
      {
        if (v16 >> 4 < 0x271)
        {
          if (v16 < 0x64)
          {
            v54 = v16 > 9;
            v65 = v16 > 9;
            *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[(this / 0x5F5E100)];
            *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * (this / 0x5F5E100) + 1];
            v141 = 2;
            if (v54)
              v141 = 3;
            v69 = (_WORD *)(a3 + v141);
          }
          else
          {
            v116 = 42949673 * v16;
            v117 = HIDWORD(v116);
            *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v117];
            *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[v117 * 2 + 1];
            if (HIDWORD(v116) <= 9)
              v65 = 2;
            else
              v65 = 3;
            if (HIDWORD(v116) <= 9)
              v118 = a3;
            else
              v118 = a3 + 1;
            *(_WORD *)(v118 + 2) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                              * (unint64_t)v116) >> 31) & 0xFE];
            v69 = (_WORD *)(v118 + 4);
          }
        }
        else
        {
          v94 = 429497 * v16;
          v95 = HIDWORD(v94);
          *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v95];
          *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[v95 * 2 + 1];
          if (HIDWORD(v94) <= 9)
            v65 = 4;
          else
            v65 = 5;
          if (HIDWORD(v94) <= 9)
            v96 = (_WORD *)a3;
          else
            v96 = (_WORD *)(a3 + 1);
          v97 = 100 * v94;
          v96[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v97 >> 31) & 0xFE];
          v96[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v97 & 0xFFFFFFFC)) >> 31) & 0xFE];
          v69 = v96 + 3;
        }
      }
      else
      {
        v63 = 281474978 * v16;
        v64 = HIWORD(v63);
        *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v64];
        *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[v64 * 2 + 1];
        if (HIWORD(v63) <= 9)
          v65 = 6;
        else
          v65 = 7;
        if (HIWORD(v63) <= 9)
          v66 = (_WORD *)a3;
        else
          v66 = (_WORD *)(a3 + 1);
        v67 = 100 * (v63 >> 16);
        v66[1] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v67 >> 31) & 0xFE];
        v68 = 100 * (v67 & 0xFFFFFFFC);
        v66[2] = *(_WORD *)&WTF::dragonbox::radix_100_table[(v68 >> 31) & 0xFE];
        v66[3] = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v68 & 0xFFFFFFF0)) >> 31) & 0xFE];
        v69 = v66 + 4;
      }
      v18 += v65;
      v142 = ((281474978 * (unint64_t)v17) >> 16) + 1;
      v143 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v142 >> 31) & 0x7FFE];
      *v69 = v143;
      if (v142 > 0x10C6)
      {
        v146 = 100 * v142;
        v147 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v146 >> 31) & 0xFE];
        v69[1] = v147;
        if (v146 >= 0x68DB9)
        {
          v148 = 100 * (v146 & 0xFFFFFFFC);
          v149 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v148 >> 31) & 0xFE];
          v69[2] = v149;
          if (v148 >= 0x28F5C29)
          {
            v150 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v148 & 0xFFFFFFF0)) >> 31) & 0xFE];
            v69[3] = v150;
            v144 = v150 >> 8 <= 48;
            v145 = 7;
          }
          else
          {
            v144 = v149 >> 8 <= 48;
            v145 = 5;
          }
        }
        else
        {
          v144 = v147 >> 8 <= 48;
          v145 = 3;
        }
      }
      else
      {
        v144 = v143 >> 8 <= 48;
        v145 = 1;
      }
      if (!v144)
        ++v145;
      v26 = (char *)v69 + v145;
    }
    else
    {
      v19 = 1441151882 * v16;
      *(_WORD *)a3 = *(_WORD *)((char *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v19) & 0x7E));
      v20 = 100 * (v19 >> 25);
      *(_WORD *)(a3 + 2) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v20 >> 31) & 0xFE];
      v21 = 100 * (v20 & 0xFFFFFFFC);
      *(_WORD *)(a3 + 4) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v21 >> 31) & 0xFE];
      v22 = 100 * (v21 & 0xFFFFFFF0);
      *(_WORD *)(a3 + 6) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v22 >> 31) & 0xFE];
      *(_WORD *)(a3 + 8) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                      * (unint64_t)(v22 & 0xFFFFFFC0)) >> 31) & 0xFE];
      v23 = ((281474978 * (unint64_t)v17) >> 16) + 1;
      *(_WORD *)(a3 + 10) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v23 >> 31) & 0x7FFE];
      v24 = 100 * v23;
      *(_WORD *)(a3 + 12) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v24 >> 31) & 0xFE];
      v25 = 100 * (v24 & 0xFFFFFFFC);
      *(_WORD *)(a3 + 14) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v25 >> 31) & 0xFE];
      *(_WORD *)(a3 + 16) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                       * (unint64_t)(v25 & 0xFFFFFFF0)) >> 31) & 0xFE];
      v18 = __len + 16;
      v26 = (char *)(a3 + 18);
    }
    goto LABEL_200;
  }
  if (v16 <= 0x5F5E0FF)
  {
LABEL_48:
    if (v16 <= 0xF423F)
    {
      if (v16 >> 4 < 0x271)
      {
        if (v16 < 0x64)
        {
          if (v16 > 9)
            ++v18;
          *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v16];
          v101 = WTF::dragonbox::radix_100_table[(2 * v16) + 1];
          *(_BYTE *)(a3 + 2) = v101;
          v26 = (char *)(a3 + 3);
          if (v16 <= 9 || v101 <= 48)
            v26 = (char *)(a3 + 1);
          goto LABEL_200;
        }
        v70 = 42949673 * v16;
        v71 = HIDWORD(v70);
        if (HIDWORD(v70) <= 9)
          v72 = 2;
        else
          v72 = 3;
        v18 += v72;
        *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v71];
        v73 = WTF::dragonbox::radix_100_table[2 * v71 + 1];
        *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * v71 + 1];
        if (v70 >= 0x28F5C29)
        {
          if (HIDWORD(v70) <= 9)
            v120 = a3;
          else
            v120 = a3 + 1;
          v121 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)v70) >> 31) & 0xFE];
          *(_WORD *)(v120 + 2) = v121;
          v54 = v121 >> 8 <= 48;
          v122 = 3;
          if (!v54)
            v122 = 4;
          v26 = (char *)(v120 + v122);
          goto LABEL_200;
        }
        v54 = v73 > 48 && HIDWORD(v70) > 9;
        goto LABEL_78;
      }
      v52 = 429497 * v16;
      v28 = HIDWORD(v52);
      if (HIDWORD(v52) <= 9)
        v53 = 4;
      else
        v53 = 5;
      v18 += v53;
      *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v28];
      v30 = WTF::dragonbox::radix_100_table[2 * v28 + 1];
      *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * v28 + 1];
      if (v52 >= 0x68DB9)
      {
        if (HIDWORD(v52) <= 9)
          v31 = (_WORD *)a3;
        else
          v31 = (_WORD *)(a3 + 1);
        v98 = 100 * v52;
        v33 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v98 >> 31) & 0xFE];
        v31[1] = v33;
        if (v98 >= 0x28F5C29)
        {
          v123 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v98 & 0xFFFFFFFC)) >> 31) & 0xFE];
          v31[2] = v123;
          v36 = v123 >> 8;
          goto LABEL_169;
        }
        goto LABEL_130;
      }
    }
    else
    {
      v27 = 281474978 * v16;
      v28 = HIWORD(v27);
      if (HIWORD(v27) <= 9)
        v29 = 6;
      else
        v29 = 7;
      v18 += v29;
      *(_WORD *)a3 = WTF::dragonbox::radix_100_head_table[v28];
      v30 = WTF::dragonbox::radix_100_table[2 * v28 + 1];
      *(_BYTE *)(a3 + 2) = WTF::dragonbox::radix_100_table[2 * v28 + 1];
      if ((v27 >> 16) > 0x10C6)
      {
        if (v28 <= 9)
          v31 = (_WORD *)a3;
        else
          v31 = (_WORD *)(a3 + 1);
        v32 = 100 * (v27 >> 16);
        v33 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v32 >> 31) & 0xFE];
        v31[1] = v33;
        if (v32 >= 0x68DB9)
        {
          v34 = 100 * (v32 & 0xFFFFFFFC);
          v35 = *(_WORD *)&WTF::dragonbox::radix_100_table[(v34 >> 31) & 0xFE];
          v31[2] = v35;
          if (v34 < 0x28F5C29)
          {
            v36 = v35 >> 8;
LABEL_169:
            v99 = v36 <= 48;
            v100 = 5;
            goto LABEL_170;
          }
          v119 = *(_WORD *)&WTF::dragonbox::radix_100_table[((100 * (unint64_t)(v34 & 0xFFFFFFF0)) >> 31) & 0xFE];
          v31[3] = v119;
          v99 = v119 >> 8 <= 48;
          v100 = 7;
LABEL_170:
          if (!v99)
            ++v100;
          v26 = (char *)v31 + v100;
          goto LABEL_200;
        }
LABEL_130:
        v99 = v33 >> 8 <= 48;
        v100 = 3;
        goto LABEL_170;
      }
    }
    v54 = v30 > 48 && v28 > 9;
LABEL_78:
    v26 = (char *)(a3 + 3);
    if (!v54)
      v26 = (char *)(a3 + 1);
    goto LABEL_200;
  }
  v55 = 1441151882 * v16;
  *(_WORD *)a3 = *(_WORD *)((char *)WTF::dragonbox::radix_100_head_table + (HIBYTE(v55) & 0x7E));
  v56 = 100 * (v55 >> 25);
  *(_WORD *)(a3 + 2) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v56 >> 31) & 0xFE];
  v57 = 100 * (v56 & 0xFFFFFFFC);
  *(_WORD *)(a3 + 4) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v57 >> 31) & 0xFE];
  v58 = 100 * (v57 & 0xFFFFFFF0);
  *(_WORD *)(a3 + 6) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v58 >> 31) & 0xFE];
  *(_WORD *)(a3 + 8) = *(_WORD *)&WTF::dragonbox::radix_100_table[((100
                                                                  * (unint64_t)(v58 & 0xFFFFFFC0)) >> 31) & 0xFE];
  v18 = __len + 16;
  v26 = (char *)(a3 + 10);
LABEL_200:
  if (v18 >= 0)
    v151 = 11109;
  else
    v151 = 11621;
  if (v18 < 0)
    v18 = -v18;
  *(_WORD *)v26 = v151;
  if (v18 < 0x64)
  {
    if (v18 < 0xA)
    {
      v26[2] = v18 | 0x30;
      return v26 + 3;
    }
    else
    {
      *((_WORD *)v26 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[2 * v18];
      return v26 + 4;
    }
  }
  else
  {
    v152 = 6554 * v18;
    *((_WORD *)v26 + 1) = *(_WORD *)&WTF::dragonbox::radix_100_table[(v152 >> 15) & 0x1FFFE];
    v26[4] = ((5 * (v152 & 0xFFFE)) >> 15) | 0x30;
    return v26 + 5;
  }
}

void *WTF::numberToString(void *a1, float a2)
{
  int v3;
  int v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  size_t v10;
  _BYTE v12[3];
  _BYTE v13[29];

  *(_QWORD *)&v13[21] = *MEMORY[0x1E0C80C00];
  v3 = (LODWORD(a2) >> 23);
  v4 = LODWORD(a2) ^ (v3 << 23);
  if (v3 == 255)
  {
    if ((v4 & 0x7FFFFFFF) != 0)
    {
      qmemcpy(v12, "NaN", sizeof(v12));
      v5 = v13;
    }
    else
    {
      v9 = v12;
      if (v4 < 0)
      {
        v12[0] = 45;
        v9 = &v12[1];
      }
      *(_QWORD *)v9 = 0x7974696E69666E49;
      v5 = v9 + 8;
    }
  }
  else
  {
    if ((LODWORD(a2) & 0x7FFFFFFF) != 0 && v4 < 0)
    {
      v12[0] = 45;
      v6 = &v12[1];
    }
    else
    {
      v6 = v12;
      if ((LODWORD(a2) & 0x7FFFFFFF) == 0)
      {
        v5 = &v12[1];
        v12[0] = 48;
        goto LABEL_13;
      }
    }
    v7 = WTF::dragonbox::detail::to_decimal_impl<float,WTF::dragonbox::default_float_traits<float>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v4, v3);
    v5 = WTF::dragonbox::detail::to_shortest(v7, HIDWORD(v7), (uint64_t)v6, v8);
  }
LABEL_13:
  *v5 = 0;
  v10 = (int)strlen(v12);
  memcpy(a1, v12, v10);
  *((_BYTE *)a1 + v10) = 0;
  return a1;
}

void *WTF::numberToString(void *a1, double a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  size_t v11;
  char __s[3];
  _BYTE v14[31];

  *(_QWORD *)&v14[23] = *MEMORY[0x1E0C80C00];
  v3 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  if ((_DWORD)v3 == 2047)
  {
    if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", sizeof(__s));
      v4 = v14;
    }
    else
    {
      v10 = __s;
      if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v10 = &__s[1];
      }
      *(_QWORD *)v10 = 0x7974696E69666E49;
      v4 = v10 + 8;
    }
  }
  else
  {
    v5 = *(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0 && v5)
    {
      __s[0] = 45;
      v6 = &__s[1];
    }
    else
    {
      v6 = __s;
      if (!v5)
      {
        v4 = &__s[1];
        __s[0] = 48;
        goto LABEL_13;
      }
    }
    v7 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&a2 & 0x800FFFFFFFFFFFFFLL, v3);
    v4 = WTF::dragonbox::detail::to_shortest(v7, v8, (uint64_t)v6, v9);
  }
LABEL_13:
  *v4 = 0;
  v11 = (int)strlen(__s);
  memcpy(a1, __s, v11);
  *((_BYTE *)a1 + v11) = 0;
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WTF::numberToStringWithTrailingPoint(double a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v2 = 124;
  v3 = 0;
  WTF::double_conversion::DoubleToStringConverter::ToShortestIeeeNumber((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverterWithTrailingPoint(void)::converter, (uint64_t)&v1, 0, a1);
  *(_BYTE *)(v1 + v3) = 0;
}

uint64_t WTF::numberToFixedPrecisionString(int a1, uint64_t a2, int a3, float a4)
{
  return WTF::numberToFixedPrecisionString(a1, a2, a3, a4);
}

uint64_t WTF::numberToFixedPrecisionString(int a1, uint64_t a2, int a3, double a4)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;

  v16 = a2;
  v17 = 124;
  v18 = 0;
  WTF::double_conversion::DoubleToStringConverter::ToPrecision((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, a1, (uint64_t)&v16, a4);
  v6 = v18;
  if (a3)
  {
    v7 = 0;
    if (v18)
    {
      while (*(_BYTE *)(a2 + v7) != 46)
      {
        if (v18 == ++v7)
          goto LABEL_23;
      }
    }
    if (v7 != v18)
    {
      v8 = v7 + 1;
      v9 = v7 + 1;
      if (v7 + 1 < (unint64_t)v18)
      {
        while (*(_BYTE *)(a2 + v9) != 101)
        {
          if (v18 == ++v9)
          {
            v9 = v18;
            break;
          }
        }
      }
      if (v9 >= v8)
        v10 = v7 + 1;
      else
        v10 = v9;
      v11 = v9;
      while (v11 > v8)
      {
        v12 = v11 - 1;
        v13 = *(unsigned __int8 *)(a2 - 1 + v11--);
        if (v13 != 48)
        {
          v10 = v12 + 1;
          break;
        }
      }
      if (v10 != v9)
      {
        if (v10 == v8)
          v14 = v7;
        else
          v14 = v10;
        memmove((void *)(v16 + v14), (const void *)(v16 + (int)v9), v18 - (int)v9);
        v6 = v14 - v9 + v18;
      }
    }
  }
LABEL_23:
  *(_BYTE *)(v16 + v6) = 0;
  return v16;
}

uint64_t WTF::numberToFixedWidthString(int a1, uint64_t a2, float a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  v4 = a2;
  v5 = 124;
  v6 = 0;
  WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, a1, (uint64_t)&v4, a3);
  result = v4;
  *(_BYTE *)(v4 + v6) = 0;
  return result;
}

uint64_t WTF::numberToFixedWidthString(int a1, uint64_t a2, double a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  v4 = a2;
  v5 = 124;
  v6 = 0;
  WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, a1, (uint64_t)&v4, a3);
  result = v4;
  *(_BYTE *)(v4 + v6) = 0;
  return result;
}

_BYTE *WTF::numberToCSSString(_BYTE *a1, double a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  _BYTE *result;
  _BYTE *v13;
  int v14;
  int v15;

  v13 = a1;
  v14 = 329;
  v15 = 0;
  WTF::double_conversion::DoubleToStringConverter::ToFixedUncapped((uint64_t)&WTF::double_conversion::DoubleToStringConverter::CSSConverter(void)::converter, 6, (uint64_t)&v13, a2);
  v3 = v15;
  v4 = 0;
  if (v15)
  {
    while (a1[v4] != 46)
    {
      if (v15 == ++v4)
        goto LABEL_22;
    }
  }
  if (v4 != v15)
  {
    v5 = v4 + 1;
    v6 = v4 + 1;
    if (v4 + 1 < (unint64_t)v15)
    {
      while (a1[v6] != 101)
      {
        if (v15 == ++v6)
        {
          v6 = v15;
          break;
        }
      }
    }
    if (v6 >= v5)
      v7 = v4 + 1;
    else
      v7 = v6;
    v8 = v6;
    while (v8 > v5)
    {
      v9 = v8 - 1;
      v10 = a1[--v8];
      if (v10 != 48)
      {
        v7 = v9 + 1;
        break;
      }
    }
    if (v7 != v6)
    {
      if (v7 == v5)
        v11 = v4;
      else
        v11 = v7;
      memmove(&v13[v11], &v13[(int)v6], v15 - (int)v6);
      v3 += v11 - v6;
    }
  }
LABEL_22:
  result = v13;
  if (v3 == 2 && *a1 == 45 && a1[1] == 48)
  {
    *v13 = v13[1];
    v3 = 1;
  }
  result[v3] = 0;
  return result;
}

unint64_t WTF::dragonbox::detail::to_decimal_impl<float,WTF::dragonbox::default_float_traits<float>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(int a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;

  v2 = 2 * a1;
  if (a2)
  {
    v3 = a2 - 150;
    if (!v2)
    {
      LODWORD(v14) = (631305 * v3 - 261663) >> 21;
      v15 = WTF::dragonbox::detail::cache_holder<WTF::dragonbox::ieee754_binary32,void>::cache[31 - (int)v14];
      v16 = 40 - (a2 + 106 + ((-1741647 * (int)v14) >> 19));
      v17 = (v15 - (v15 >> 25)) >> v16;
      v18 = (v15 + (v15 >> 24)) >> v16;
      if ((v3 & 0xFFFFFFFE) != 2)
        LODWORD(v17) = v17 + 1;
      v19 = v18 / 0xA;
      v20 = 10 * v19;
      v21 = (v15 >> (39 - (a2 + 106 + ((-1741647 * (int)v14) >> 19)))) + 1;
      v22 = v21 >> 1;
      if (((v3 == -35) & ((v21 & 2) >> 1)) != 0)
        v23 = -1;
      else
        v23 = v21 >> 1 < v17;
      LODWORD(v24) = v23 + v22;
      if (v20 < v17)
        v14 = v14;
      else
        v14 = (v14 + 1);
      if (v20 >= v17)
        v24 = v19;
      else
        v24 = v24;
      return v24 | (v14 << 32);
    }
    v2 |= 0x1000000u;
  }
  else
  {
    v3 = -149;
  }
  v4 = ((315653 * v3) >> 20);
  v5 = WTF::dragonbox::detail::cache_holder<WTF::dragonbox::ieee754_binary32,void>::cache[32 - (int)v4];
  v6 = v3 + ((1741647 - 1741647 * (int)v4) >> 19);
  v7 = v5 >> ~(_BYTE)v6;
  v8 = ((((unint64_t)((v2 | 1) << v6) << 32) * (unsigned __int128)v5) >> 96) / 0x64;
  v9 = ((((unint64_t)((v2 | 1) << v6) << 32) * (unsigned __int128)v5) >> 96) % 0x64;
  if (v9 >= v7)
  {
    if (v9 <= v7)
    {
      v13 = v5 * (v2 - 1);
      if (((v13 >> -(char)v6) & 1) != 0 || !(a1 & 1 | (v13 >> (32 - v6))))
        return v8 | ((unint64_t)(v4 + 1) << 32);
    }
  }
  else
  {
    if (v9)
      v10 = 1;
    else
      v10 = (a1 & 1) == 0;
    if (v10 || ((((unint64_t)((v2 | 1) << v6) << 32) * (unsigned __int128)v5) >> 64) != 0)
      return v8 | ((unint64_t)(v4 + 1) << 32);
    LODWORD(v8) = v8 - 1;
    v9 = 100;
  }
  v25 = v9 - (v7 >> 1);
  v26 = 6554 * v25 + 32770;
  v27 = 10 * v8 + HIWORD(v26);
  v28 = v5 * v2;
  v29 = (v28 >> -(char)v6) ^ ((v25 & 1) == 0);
  v10 = (v28 >> (32 - v6)) == 0;
  v30 = HIWORD(v26) & 1;
  if (!v10)
    v30 = 0;
  LODWORD(v31) = v27 - v30;
  if ((v29 & 1) == 0)
    LODWORD(v31) = v27 - 1;
  if ((unsigned __int16)((unsigned __int16)(6554 * v25 - 32766) >> 1) <= 0xCCCu)
    v31 = v31;
  else
    v31 = v27;
  return v31 | (v4 << 32);
}

unint64_t WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t result;
  unsigned int v19;
  BOOL v20;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = 2 * a1;
  if (!a2)
  {
    v3 = -1074;
LABEL_5:
    v4 = a1 & 1;
    v5 = (315653 * v3) >> 20;
    v6 = &WTF::dragonbox::detail::cache_holder<WTF::dragonbox::ieee754_binary64,void>::cache[2 * (294 - v5)];
    v7 = *v6;
    v8 = v6[1];
    v9 = v3 + ((1741647 * (2 - v5)) >> 19);
    v10 = v8 >> ~(_BYTE)v9;
    v11 = (v2 | 1) << v9;
    v12 = (v8 * (unsigned __int128)(unint64_t)v11) >> 64;
    v13 = v8 * v11;
    v14 = (v7 * (unsigned __int128)(unint64_t)v11) >> 64;
    v15 = __CFADD__(v14, v13);
    v16 = v14 + v13;
    if (v15)
      v17 = v12 + 1;
    else
      v17 = v12;
    result = (unint64_t)((v17 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 7;
    v19 = v17 - 1000 * result;
    if (v10 <= v19)
    {
      if (v10 >= v19)
      {
        v22 = (__PAIR128__(v8, v7) * (unint64_t)(v2 - 1)) >> 64;
        if (((v22 >> -(char)v9) & 1) != 0 || !((v22 << v9) | ((v7 * (v2 - 1)) >> -(char)v9) | v4))
          return result;
      }
    }
    else
    {
      if (v19)
        v20 = 1;
      else
        v20 = v4 == 0;
      if (v20 || v16 != 0)
        return result;
      --result;
      v19 = 1000;
    }
    v23 = v19 - (v10 >> 1);
    result = ((656 * v23 + 32800) >> 16) + 10 * result;
    if (((656 * (_WORD)v23 - 32736) & 0xFFF0u) <= 0x28F)
    {
      v24 = (__PAIR128__(v8, v7) * (unint64_t)v2) >> 64;
      if ((((v24 >> -(char)v9) ^ ((v23 & 1) == 0)) & 1) != 0)
        result -= ((((v7 * v2) >> (64 - v9)) | (v24 << v9)) == 0) & ((656 * v23 + 32800) >> 16);
      else
        --result;
    }
    return result;
  }
  v3 = a2 - 1075;
  if (v2)
  {
    v2 |= 0x20000000000000uLL;
    goto LABEL_5;
  }
  v25 = (631305 * v3 - 261663) >> 21;
  v26 = WTF::dragonbox::detail::cache_holder<WTF::dragonbox::ieee754_binary64,void>::cache[2 * (292 - v25) + 1];
  v27 = 11 - (v3 + ((-1741647 * v25) >> 19));
  v28 = (v26 - (v26 >> 54)) >> v27;
  v29 = (v26 + (v26 >> 53)) >> v27;
  if ((v3 & 0xFFFFFFFE) != 2)
    ++v28;
  v30 = v29 / 0xA;
  v31 = ((v26 >> (10 - (v3 + ((-1741647 * v25) >> 19)))) + 1) >> 1;
  if (((v3 == -77) & v31 & 1) != 0)
    v32 = -1;
  else
    v32 = v31 < v28;
  v33 = v32 + v31;
  if (10 * v30 >= v28)
    return v30;
  else
    return v33;
}

BOOL WTF::hasEntitlement(_BOOL8 a1, const char *a2)
{
  _BOOL8 v2;
  const __CFString *v3;
  CFTypeRef v4;

  v2 = a1;
  if (a1)
  {
    v3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v4 = SecTaskCopyValueForEntitlement((SecTaskRef)v2, v3, 0);
    v2 = v4 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
    if (v4)
      CFRelease(v4);
    if (v3)
      CFRelease(v3);
  }
  return v2;
}

void sub_197AC70A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

BOOL WTF::hasEntitlement(_OWORD *a1, const char *a2)
{
  const __CFAllocator *v3;
  __int128 v4;
  SecTaskRef v5;
  __SecTask *v6;
  const __CFString *v7;
  CFTypeRef v8;
  _BOOL8 v9;
  audit_token_t v11;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = a1[1];
  *(_OWORD *)v11.val = *a1;
  *(_OWORD *)&v11.val[4] = v4;
  v5 = SecTaskCreateWithAuditToken(v3, &v11);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = CFStringCreateWithCStringNoCopy(v3, a2, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v8 = SecTaskCopyValueForEntitlement(v6, v7, 0);
  v9 = v8 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  CFRelease(v6);
  return v9;
}

void sub_197AC7194(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
  {
    CFRelease(v2);
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WTF::hasEntitlement(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  WTF *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _BOOL8 v21;
  WTF *v23;
  _QWORD v24[2];

  v24[0] = a2;
  v24[1] = a3;
  v3 = a1;
  WTF::StringView::utf8((uint64_t)v24, 0, v4, v5, v6, v7, v8, &v23, v9);
  v10 = v23;
  v11 = xpc_connection_copy_entitlement_value();
  v19 = (void *)v11;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
      if (v19)
        goto LABEL_5;
LABEL_8:
      v21 = 0;
      goto LABEL_11;
    }
    --*(_DWORD *)v10;
  }
  if (!v11)
    goto LABEL_8;
LABEL_5:
  v20 = v19;
  v21 = object_getClass(v20) == (Class)MEMORY[0x1E0C812D0] && xpc_BOOL_get_value(v20);

LABEL_11:
  return v21;
}

void sub_197AC7294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AC72B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  _DWORD *v9;

  if (v9)
  {
    if (*v9 == 1)
    {
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);

      _Unwind_Resume(a1);
    }
    --*v9;
  }

  _Unwind_Resume(a1);
}

BOOL WTF::hasEntitlement()
{
  void *v0;
  void *v1;
  id v2;
  _BOOL8 v3;

  v0 = (void *)xpc_connection_copy_entitlement_value();
  v1 = v0;
  if (v0)
  {
    v2 = v0;
    v3 = object_getClass(v2) == (Class)MEMORY[0x1E0C812D0] && xpc_BOOL_get_value(v2);

    return v3;
  }
  else
  {

    return 0;
  }
}

void sub_197AC736C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197AC7380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WTF::processHasEntitlement(const char *a1)
{
  const __CFAllocator *v2;
  SecTaskRef v3;
  __SecTask *v4;
  const __CFString *v5;
  CFTypeRef v6;
  _BOOL8 v7;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = CFStringCreateWithCStringNoCopy(v2, a1, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v6 = SecTaskCopyValueForEntitlement(v4, v5, 0);
  v7 = v6 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  CFRelease(v4);
  return v7;
}

void sub_197AC7450(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
  {
    CFRelease(v2);
    CFRelease(v1);
    _Unwind_Resume(a1);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WTF::hasEntitlementValue(_OWORD *a1, const char *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  const __CFAllocator *v8;
  __int128 v9;
  SecTaskRef v10;
  __SecTask *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFTypeID v15;
  const __CFString *v16;
  _BOOL8 v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  audit_token_t token;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = a1[1];
  *(_OWORD *)token.val = *a1;
  *(_OWORD *)&token.val[4] = v9;
  v10 = SecTaskCreateWithAuditToken(v8, &token);
  if (v10)
  {
    v11 = v10;
    v12 = CFStringCreateWithCStringNoCopy(v8, a2, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v13 = (const __CFString *)SecTaskCopyValueForEntitlement(v11, v12, 0);
    v14 = v13;
    if (v13)
    {
      v15 = CFGetTypeID(v13);
      if (v15 == CFStringGetTypeID())
        v16 = v14;
      else
        v16 = 0;
      WTF::String::String(&v36, v16);
      CFRelease(v14);
    }
    else
    {
      WTF::String::String(&v36, 0);
    }
    if (a5)
      v18 = a5 - 1;
    else
      v18 = 0;
    v17 = WTF::equalInternal<unsigned char>((uint64_t)v36, a4, v18);
    v26 = v36;
    v36 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        if (!v12)
          goto LABEL_17;
        goto LABEL_16;
      }
      *(_DWORD *)v26 -= 2;
    }
    if (!v12)
    {
LABEL_17:
      CFRelease(v11);
      return v17;
    }
LABEL_16:
    CFRelease(v12);
    goto LABEL_17;
  }
  return 0;
}

void sub_197AC75BC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WTF::hasEntitlementValueInArray(_OWORD *a1, const char *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  const __CFAllocator *v8;
  __int128 v9;
  SecTaskRef v10;
  __SecTask *v11;
  const __CFString *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeID v15;
  CFIndex v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFIndex Count;
  _BOOL8 v27;
  const __CFString *ValueAtIndex;
  CFTypeID v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v40;
  audit_token_t token;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = a1[1];
  *(_OWORD *)token.val = *a1;
  *(_OWORD *)&token.val[4] = v9;
  v10 = SecTaskCreateWithAuditToken(v8, &token);
  if (!v10)
    return 0;
  v11 = v10;
  v12 = CFStringCreateWithCStringNoCopy(v8, a2, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v13 = SecTaskCopyValueForEntitlement(v11, v12, 0);
  v14 = v13;
  if (v13)
  {
    CFRelease(v13);
    v15 = CFGetTypeID(v14);
    if (v15 == CFArrayGetTypeID())
    {
      CFRetain(v14);
      v16 = 0;
      if (a5)
        v17 = a5 - 1;
      else
        v17 = 0;
      while (1)
      {
        Count = CFArrayGetCount((CFArrayRef)v14);
        v27 = v16 < Count;
        if (v16 >= Count)
          break;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v14, v16);
        v29 = CFGetTypeID(ValueAtIndex);
        if (v29 == CFStringGetTypeID())
        {
          WTF::String::String(&v40, ValueAtIndex);
          v37 = WTF::equalInternal<unsigned char>((uint64_t)v40, a4, v17);
          v38 = v40;
          v40 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          if (v37)
            break;
        }
        ++v16;
      }
      CFRelease(v14);
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v27 = 0;
  if (v12)
LABEL_16:
    CFRelease(v12);
LABEL_17:
  CFRelease(v11);
  return v27;
}

void sub_197AC77A0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::ExternalStringImpl::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 8) = a1;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v9;
  *(_DWORD *)(result + 16) = 7;
  *a4 = result;
  return result;
}

{
  uint64_t result;
  uint64_t v9;

  result = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)result = 2;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 8) = a1;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 24) = v9;
  *(_DWORD *)(result + 16) = 3;
  *a4 = result;
  return result;
}

uint64_t WTF::double_conversion::FastDtoa(unsigned int a1, int a2, _BYTE *a3, double a4, uint64_t a5, int *a6, _DWORD *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  float v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  signed int v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t result;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  unint64_t v67;
  _BOOL4 v68;
  _BOOL4 v69;
  uint64_t v70;
  char v71;
  BOOL v72;
  char v73;
  uint64_t v74;
  signed int v75;
  int v76;
  int v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  BOOL v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  char v151;
  uint64_t v152;
  char v153;
  int v154;
  int v155;
  _DWORD *v156;
  int v157;
  unint64_t v158;
  uint64_t v159;

  if (a1 >= 2)
  {
    if (a1 != 2)
      abort();
    v31 = ((*(_QWORD *)&a4 >> 52) & 0x7FF) - 1075;
    v32 = __clz(*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL);
    v33 = (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) << (v32 - 11);
    v34 = -1063 - v32;
    if ((*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
      v33 = *(_QWORD *)&a4 | 0x10000000000000;
    else
      v31 = v34;
    v35 = vcvtpd_s64_f64((double)(-50 - v31) * 0.301029996);
    v36 = v35 + 347;
    v130 = v35 < -347;
    v37 = v35 + 354;
    if (!v130)
      v37 = v36;
    v38 = (char *)&WTF::double_conversion::kCachedPowers + 16 * (v37 >> 3);
    v39 = *((_QWORD *)v38 + 2);
    v40 = *((__int16 *)v38 + 12);
    v41 = *((__int16 *)v38 + 13);
    v42 = ((v39 * (unint64_t)(v33 >> 21)) >> 32)
        + HIDWORD(v39) * (unint64_t)(v33 >> 21)
        + ((HIDWORD(v39) * (unint64_t)((_DWORD)v33 << 11)) >> 32)
        + ((((v39 * (unint64_t)((_DWORD)v33 << 11)) >> 32)
          + v39 * (v33 >> 21)
          + ((HIDWORD(v39) * (unint64_t)((_DWORD)v33 << 11)) & 0xFFFFF800)
          + 0x80000000) >> 32);
    v43 = v31 + v40;
    v44 = -53 - v43;
    v45 = 1 << (-53 - v43);
    v46 = v42 >> (-53 - v43);
    v47 = v42 & (v45 - 1);
    LODWORD(v42) = 1233 * v43 + 145494;
    v48 = (int)v42 >> 12;
    v49 = ((uint64_t)(int)v42 >> 12) + 1;
    if (WTF::double_conversion::kSmallPowersOfTen[v49] > v46)
      LODWORD(v49) = v48;
    v50 = WTF::double_conversion::kSmallPowersOfTen[(int)v49];
    *a6 = 0;
    if ((int)v49 < 1)
    {
      v51 = 0;
      if (a2)
      {
LABEL_38:
        result = 0;
        if (a2 < 1 || v47 < 2)
          return result;
        v53 = -(int)v49;
        v54 = 1;
        do
        {
          v55 = v54;
          v56 = a2;
          v57 = 10 * v47;
          v54 *= 10;
          a3[v51] = (v57 >> v44) + 48;
          v58 = *a6;
          v51 = v58 + 1;
          *a6 = v58 + 1;
          --a2;
          v47 = v57 & (v45 - 1);
          ++v53;
        }
        while (v56 >= 2 && v47 > v54);
        result = 0;
        if (a2)
          return result;
        result = 0;
        if (v45 <= v54 || v45 - v54 <= v54)
          return result;
        if (v45 - v47 <= v47)
        {
          if (v47 <= v54)
            return 0;
        }
        else
        {
          v59 = v45 - 2 * v47;
          if (v59 >= 20 * v55 || v47 <= v54)
          {
            result = 0;
            if (v59 >= 20 * v55)
            {
              v60 = -(v41 + v53);
              goto LABEL_129;
            }
            return result;
          }
        }
        if (v45 - (v47 - v54) > v47 - v54)
          return 0;
        v152 = v58;
        LODWORD(v49) = -v53;
        ++a3[v58];
        if ((int)v58 >= 1)
        {
          v153 = a3[v58];
          v154 = v58 - 1;
          do
          {
            if (v153 != 58)
              break;
            a3[v152] = 48;
            v153 = a3[v154] + 1;
            a3[v154--] = v153;
            v130 = v152-- <= 1;
          }
          while (!v130);
        }
        goto LABEL_151;
      }
    }
    else
    {
      v51 = 0;
      while (1)
      {
        a3[v51] = v46 / v50 + 48;
        v51 = *a6 + 1;
        *a6 = v51;
        LODWORD(v46) = v46 % v50;
        LODWORD(v49) = v49 - 1;
        if (!--a2)
          break;
        v50 /= 0xAu;
        if ((v49 + 1) <= 1)
          goto LABEL_38;
      }
    }
    v147 = (unint64_t)v50 << v44;
    if (v147 < 3)
      return 0;
    v148 = ((unint64_t)v46 << v44) + v47;
    if (v147 - v148 > v148 && v147 - 2 * v148 > 1)
      goto LABEL_153;
    if (v148 < 2 || v147 - (v148 - 1) > v148 - 1)
      return 0;
    v149 = v51 - 1;
    ++a3[v149];
    v150 = v51 - 2;
    if (v51 >= 2)
    {
      v149 = v149;
      v151 = a3[v149];
      do
      {
        if (v151 != 58)
          break;
        a3[v149] = 48;
        v151 = a3[v150] + 1;
        a3[v150--] = v151;
        v130 = v149-- <= 1;
      }
      while (!v130);
    }
LABEL_151:
    if (*a3 == 58)
    {
      *a3 = 49;
      LODWORD(v49) = v49 + 1;
    }
LABEL_153:
    v60 = v49 - v41;
LABEL_129:
    *a7 = *a6 + v60;
    a3[*a6] = 0;
    return 1;
  }
  v7 = __clz(*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL);
  v8 = *(_QWORD *)&a4 & 0x7FF0000000000000;
  v9 = (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) << (v7 - 11);
  v10 = -1063 - v7;
  if ((*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
    v11 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v11 = v9;
  if ((*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
    v12 = ((*(_QWORD *)&a4 >> 52) & 0x7FF) - 1075;
  else
    v12 = v10;
  v13 = v11 << 11;
  v156 = a7;
  if (a1)
  {
    v14 = a4;
    v15 = LODWORD(v14) & 0x7FFFFF;
    v16 = (LODWORD(v14) >> 23) + 106;
    if ((LODWORD(v14) & 0x7F800000) != 0)
      v17 = LODWORD(v14) & 0x7FFFFF | 0x800000u;
    else
      v17 = v15;
    if ((LODWORD(v14) & 0x7F800000) == 0)
      v16 = 107;
    v18 = 2 * v17;
    v19 = (2 * (v17 & 0xFFFFFF)) | 1;
    v20 = v16 - 1;
    v21 = v16 - 1;
    do
    {
      v22 = v19 >> 44;
      v19 <<= 10;
      v21 -= 10;
    }
    while (!v22);
    for (; (v19 & 0x8000000000000000) == 0; --v21)
      v19 *= 2;
    v23 = v15 == 0;
    v24 = (LODWORD(v14) & 0x7F000000) != 0;
    v25 = 4 * v17;
    v26 = v16 - 2;
    v27 = !v23 || !v24;
    if (v23 && v24)
      v28 = v25;
    else
      v28 = v18;
    if (v27)
      v29 = v20;
    else
      v29 = v26;
    v30 = v29 - v21;
  }
  else
  {
    v61 = v8 == 0;
    if (v8)
      v62 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    else
      v62 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL;
    v63 = 2 * v62;
    v19 = (2 * (v62 & 0x1FFFFFFFFFFFFFLL)) | 1;
    if (v61)
      v64 = -50;
    else
      v64 = (*(_QWORD *)&a4 >> 52) - 51;
    v65 = v64 - 1;
    v66 = v64 - 1;
    do
    {
      v67 = v19 >> 44;
      v19 <<= 10;
      v66 -= 10;
    }
    while (!v67);
    for (; (v19 & 0x8000000000000000) == 0; --v66)
      v19 *= 2;
    v68 = (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) == 0;
    v69 = (*(_QWORD *)&a4 & 0x7FE0000000000000) != 0;
    v70 = 4 * v62;
    v71 = v64 - 2;
    v72 = !v68 || !v69;
    if (v68 && v69)
      v28 = v70;
    else
      v28 = v63;
    if (v72)
      v73 = v65;
    else
      v73 = v71;
    v30 = v73 - v66;
  }
  v74 = (v28 - 1) << v30;
  v75 = vcvtpd_s64_f64((double)(-50 - v12) * 0.301029996);
  v76 = v75 + 347;
  v130 = v75 < -347;
  v77 = v75 + 354;
  if (!v130)
    v77 = v76;
  v78 = (char *)&WTF::double_conversion::kCachedPowers + 16 * (v77 >> 3);
  v79 = *((_QWORD *)v78 + 2);
  v80 = HIDWORD(v13);
  v81 = v13 & 0xFFFFF800;
  v82 = HIDWORD(v79);
  v155 = *((__int16 *)v78 + 13);
  v83 = HIDWORD(v79) * (unint64_t)v81;
  v84 = v79 * (unint64_t)v80;
  v85 = ((v79 * (unint64_t)v81) >> 32)
      + v84
      + (v83 & 0xFFFFF800)
      + 0x80000000;
  v86 = HIDWORD(v84);
  v87 = HIDWORD(v83);
  v88 = HIDWORD(v85);
  v89 = v12 + *((__int16 *)v78 + 12);
  v90 = HIDWORD(v19);
  v91 = HIDWORD(v79) * (unint64_t)v19;
  v92 = v79 * (unint64_t)HIDWORD(v19);
  v93 = HIDWORD(v91);
  v94 = HIDWORD(v92) + HIDWORD(v91);
  v95 = (((v79 * (unint64_t)v19) >> 32)
       + v92
       + v91
       + 0x80000000) >> 32;
  v96 = v94 + HIDWORD(v79) * (unint64_t)HIDWORD(v19) + v95;
  v97 = v96 + 1;
  v98 = ((v79 * (unint64_t)HIDWORD(v74)) >> 32)
      + HIDWORD(v79) * (unint64_t)HIDWORD(v74)
      + ((HIDWORD(v79) * (unint64_t)v74) >> 32)
      + ((((v79 * (unint64_t)v74) >> 32)
        + (v79 * HIDWORD(v74))
        + (HIDWORD(v79) * v74)
        + 0x80000000) >> 32);
  v99 = v96 - v98;
  v100 = v96 - v98 + 2;
  v101 = -53 - v89;
  v102 = 1 << (-53 - v89);
  v103 = v97 >> (-53 - v89);
  v104 = v97 & (v102 - 1);
  LODWORD(v79) = 1233 * v89 + 145494;
  v105 = (int)v79 >> 12;
  v106 = ((uint64_t)(int)v79 >> 12) + 1;
  if (WTF::double_conversion::kSmallPowersOfTen[v106] > v103)
    LODWORD(v106) = v105;
  v107 = WTF::double_conversion::kSmallPowersOfTen[(int)v106];
  *a6 = 0;
  v108 = v86 + v82 * (unint64_t)v80 + v87 + v88;
  v109 = v97 - v108;
  v110 = v97 - v108 - 1;
  v111 = v109 + 1;
  v112 = v99 - 2;
  v157 = v106 & ((int)v106 >> 31);
  v159 = -(uint64_t)v108;
  v158 = v94 + v95 + v82 * (unint64_t)v90;
  v113 = v104 + v87 + v86 + v88 + v82 * (v80 - v90) - HIDWORD(v92) - v93 - v95;
  v114 = 2 - v98;
  LODWORD(v87) = v103;
  do
  {
    if ((int)v106 <= 0)
    {
      v131 = 1;
      LODWORD(v106) = v157;
      while (1)
      {
        v133 = 10 * v131;
        a3[*a6] = ((10 * v104) >> v101) + 48;
        v100 *= 10;
        v134 = *a6;
        *a6 = v134 + 1;
        v104 = (10 * v104) & (v102 - 1);
        v135 = v100 - v104;
        if (v100 <= v104)
          goto LABEL_109;
        v136 = v133 * v109;
        v137 = v135 < v102;
        if (v135 >= v102)
        {
          v138 = v136 - v133;
          v143 = v104;
          if (v136 - v133 > v104)
          {
            v139 = 0;
            v140 = v100 - v102 - v104;
            v141 = v104;
            while (1)
            {
              v143 = v141 + v102;
              if (v141 + v102 >= v138 && v136 - v133 - v104 + v139 < v102 - v138 + v141)
                break;
              --a3[v134];
              v142 = v140 + v139;
              v137 = v140 + v139 < v102;
              if (v143 < v138)
              {
                v139 -= v102;
                v141 += v102;
                if (v142 >= v102)
                  continue;
              }
              goto LABEL_119;
            }
            v137 = 0;
            v143 = v141;
            v144 = v136 + v133;
            v145 = v136 + v133 - v141;
            if (v136 + v133 <= v141)
            {
LABEL_103:
              LOBYTE(v90) = 20 * v131 <= v143 && v143 <= v100 - 40 * v131;
              goto LABEL_109;
            }
            goto LABEL_120;
          }
        }
        else
        {
          v143 = v104;
        }
LABEL_119:
        v144 = v136 + v133;
        v145 = v136 + v133 - v143;
        if (v136 + v133 <= v143)
          goto LABEL_103;
LABEL_120:
        if (v137)
          goto LABEL_103;
        v121 = v143 + v102 >= v144;
        v146 = v143 + v102 - v144;
        if (v121 && v145 <= v146)
          goto LABEL_103;
        LOBYTE(v90) = 0;
LABEL_109:
        LODWORD(v106) = v106 - 1;
        v131 *= 10;
        if (v100 > v104)
          goto LABEL_127;
      }
    }
    a3[*a6] = v87 / v107 + 48;
    v115 = *a6;
    *a6 = v115 + 1;
    v87 = v87 % v107;
    v116 = v87 << v101;
    v117 = (v87 << v101) + v104;
    v118 = v100 - v117;
    if (v100 <= v117)
    {
      v107 /= 0xAu;
      goto LABEL_74;
    }
    v119 = (unint64_t)v107 << v101;
    v120 = v118 < v119;
    v121 = v110 > v117 && v118 >= v119;
    if (v121)
    {
      v124 = v158;
      v125 = v113 + v119;
      v126 = v104 + v119;
      v127 = v114 - (v104 + v119) - v116;
      v128 = v104;
      while (v116 + v126 < v110 || v159 - v117 + v124 >= v116 + v125)
      {
        --a3[v115];
        v129 = v127 + v124;
        v120 = v127 + v124 < v119;
        v128 += v119;
        if (v116 + v126 < v110)
        {
          v124 -= v119;
          v125 += v119;
          v126 += v119;
          if (v129 >= v119)
            continue;
        }
        v122 = v116 + v128;
        v121 = v111 >= v116 + v128;
        v123 = v111 - (v116 + v128);
        if (v123 != 0 && v121)
          goto LABEL_92;
        goto LABEL_96;
      }
      v120 = 0;
      v122 = v116 + v128;
      v121 = v111 >= v116 + v128;
      v123 = v111 - (v116 + v128);
      if (v123 != 0 && v121)
        goto LABEL_92;
    }
    else
    {
      v122 = (v87 << v101) + v104;
      v123 = v111 - v117;
      if (v111 > v117)
      {
LABEL_92:
        if (!v120 && (v122 + v119 < v111 || v123 > v122 + v119 - v111))
        {
          LOBYTE(v90) = 0;
          goto LABEL_74;
        }
      }
    }
LABEL_96:
    v130 = v122 <= 1 || v122 > v112;
    LOBYTE(v90) = !v130;
LABEL_74:
    LODWORD(v106) = v106 - 1;
  }
  while (v100 <= v117);
LABEL_127:
  if ((v90 & 1) != 0)
  {
    v60 = v106 - v155;
    a7 = v156;
    goto LABEL_129;
  }
  return 0;
}

void WTF::FastBitVectorWordOwner::setEqualsSlow(unint64_t *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = (void *)WTF::fastMalloc((WTF *)(((unint64_t)(*(_QWORD *)(a2 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
  memcpy(v4, *(const void **)a2, ((unint64_t)(*(_QWORD *)(a2 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if (*a1)
    WTF::fastFree(*a1, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 8);
  *a1 = (unint64_t)v4;
  a1[1] = v12;
}

void WTF::FastBitVectorWordOwner::resizeSlow(WTF::FastBitVectorWordOwner *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unint64_t)(a2 + 31) >> 5;
  v3 = (unint64_t)(*((_QWORD *)this + 1) + 31) >> 5;
  v4 = v2 - v3;
  if (v2 < v3)
  {
    __break(0xC471u);
  }
  else
  {
    v6 = (char *)WTF::fastMalloc((WTF *)(4 * v2));
    v7 = 4 * v3;
    memcpy(v6, *(const void **)this, v7);
    bzero(&v6[v7], 4 * v4);
    if (*(_QWORD *)this)
      WTF::fastFree(*(_QWORD *)this, v8, v9, v10, v11, v12, v13, v14);
    *(_QWORD *)this = v6;
  }
}

void WTF::FastBitVector::clearRange(WTF::FastBitVector *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (a3 - a2 > 0x1F)
  {
    v4 = a2 + 31;
    v5 = (a2 + 31) & 0xFFFFFFFFFFFFFFE0;
    v6 = a3 & 0xFFFFFFFFFFFFFFE0;
    if (v5 > a2)
    {
      v7 = *(_QWORD *)this;
      do
      {
        *(_DWORD *)(v7 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << a2);
        ++a2;
      }
      while (v5 != a2);
    }
    if (v6 < a3)
    {
      v8 = *(_QWORD *)this;
      do
      {
        *(_DWORD *)(v8 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v6);
        ++v6;
      }
      while (a3 != v6);
    }
    v9 = v4 >> 5;
    if (a3 >> 5 > v9)
      bzero((void *)(*(_QWORD *)this + 4 * v9), 4 * ((a3 >> 5) - v9));
  }
  else if (a3 > a2)
  {
    v3 = *(_QWORD *)this;
    do
    {
      *(_DWORD *)(v3 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << a2);
      ++a2;
    }
    while (a3 != a2);
  }
}

double WTF::parseDouble(unsigned __int8 *a1, uint64_t a2, _QWORD *a3)
{
  double v4;

  v4 = 0.0;
  *a3 = fast_float::from_chars_advanced<double,char>(a1, &a1[a2], (unint64_t *)&v4, 0x2E00000005) - a1;
  return v4;
}

double WTF::parseDouble(unsigned __int16 *a1, uint64_t a2, _QWORD *a3)
{
  double v4;

  v4 = 0.0;
  *a3 = fast_float::from_chars_advanced<double,char16_t>(a1, &a1[a2], &v4, 0x2E00000005) - a1;
  return v4;
}

unsigned __int8 *fast_float::from_chars_advanced<double,char>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4)
{
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  double v42;
  double v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  unsigned int v119;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  double v189;
  _OWORD v190[31];
  uint64_t v191;

  if (a1 == a2)
    return a2;
  v5 = a1;
  v6 = *a1;
  if (v6 != 45 && (v7 = (unint64_t)a1, v6 != 43)
    || (v7 = (unint64_t)(a1 + 1), a1 + 1 != a2)
    && ((v8 = *(unsigned __int8 *)v7, (v8 - 48) >= 0xA) ? (v9 = v8 == BYTE4(a4)) : (v9 = 1), v9))
  {
    v10 = 0;
    v11 = 0;
    v12 = (uint64_t)&a2[-v7];
    v13 = ~v7;
    while (1)
    {
      v14 = *(unsigned __int8 *)(v7 + v10);
      if ((v14 - 48) > 9)
        break;
      v11 = v14 + 10 * v11 - 48;
      ++v10;
      if ((unsigned __int8 *)(v7 + v10) == a2)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v10 = (uint64_t)&a2[-v7];
        v18 = a2;
        v19 = a2;
        if (!v12)
          return v5;
        goto LABEL_32;
      }
    }
    v18 = (unsigned __int8 *)(v7 + v10);
    if ((_DWORD)v14 != BYTE4(a4))
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v19 = (unsigned __int8 *)(v7 + v10);
      v12 = v10;
      if (!v10)
        return v5;
      goto LABEL_32;
    }
    v15 = (char *)(v18 + 1);
    v16 = (uint64_t)&a2[~v7 - v10];
    if (v16 < 8)
    {
      v22 = v18 + 1;
      v19 = v18 + 1;
      if (v15 != (char *)a2)
        goto LABEL_22;
    }
    else
    {
      v20 = v13 - v10;
      v19 = v18 + 1;
      do
      {
        v21 = *(_QWORD *)v19 - 0x3030303030303030;
        if ((((*(_QWORD *)v19 + 0x4646464646464646) | v21) & 0x8080808080808080) != 0)
          break;
        v11 = 100000000 * v11
            + ((0xF424000000064 * ((10 * v21 + (v21 >> 8)) & 0xFF000000FFLL)
              + 0x271000000001 * (((10 * v21 + (v21 >> 8)) >> 16) & 0xFF000000FFLL)) >> 32);
        v19 += 8;
        v20 -= 8;
      }
      while ((uint64_t)&a2[v20] > 7);
      v22 = (unsigned __int8 *)-(uint64_t)v20;
      if (v19 != a2)
      {
LABEL_22:
        v23 = &v19[a2 - v22];
        do
        {
          v24 = *v19 - 48;
          if (v24 > 9)
            goto LABEL_26;
          ++v19;
          v11 = 10 * v11 + v24;
        }
        while (v19 != a2);
        v19 = v23;
LABEL_26:
        v16 = (uint64_t)&v19[v13 - v10];
        v17 = v7 - (_QWORD)v19 + v10 + 1;
        v12 = -(uint64_t)(v7 - (_QWORD)v19 + 1);
        if (v7 - (_QWORD)v19 == -1)
          return v5;
LABEL_32:
        if ((a4 & 1) != 0)
        {
          if (v19 != a2 && (*v19 | 0x20) == 0x65)
          {
            v25 = v19 + 1;
            if (v19 + 1 != a2)
            {
              v26 = v19[1];
              if (v26 == 43 || v26 == 45)
                v25 = v19 + 2;
              if (v25 != a2 && *v25 - 48 <= 9)
              {
                v28 = 0;
                do
                {
                  v29 = *v25 - 48;
                  if (v29 > 9)
                    goto LABEL_49;
                  v30 = 10 * v28 + v29;
                  if (v28 < 0x10000000)
                    v28 = v30;
                  ++v25;
                }
                while (v25 != a2);
                v25 = a2;
LABEL_49:
                if (v26 == 45)
                  v31 = -v28;
                else
                  v31 = v28;
                v17 += v31;
                v5 = v25;
LABEL_56:
                if (v12 >= 20)
                {
                  v32 = (unsigned __int8 *)v7;
                  do
                  {
                    v33 = *v32;
                    if (v33 != 48 && v33 != BYTE4(a4))
                      break;
                    v12 -= v33 == 48;
                    ++v32;
                  }
                  while (v32 != a2);
                  if (v12 >= 20)
                  {
                    v11 = 0;
                    if (!v10)
                      goto LABEL_73;
                    v35 = v10 - 1;
                    v36 = (char *)v7;
                    do
                    {
                      v37 = *v36++;
                      v11 = v37 + 10 * v11 - 48;
                    }
                    while (v11 < 0xDE0B6B3A7640000 && v35-- != 0);
                    if (v11 <= 0xDE0B6B3A763FFFFLL)
                    {
LABEL_73:
                      if (v16)
                      {
                        v39 = v16 - 1;
                        v36 = v15;
                        do
                        {
                          v40 = *v36++;
                          v11 = v40 + 10 * v11 - 48;
                        }
                        while (v11 < 0xDE0B6B3A7640000 && v39-- != 0);
                      }
                      else
                      {
                        v36 = v15;
                      }
                      v18 = (unsigned __int8 *)v15;
                    }
                    v17 = (uint64_t)&v18[v31 - (_QWORD)v36];
                    v44 = 1;
                    v45 = 0;
                    v46 = 0;
                    if (v17 < -342)
                    {
LABEL_132:
                      if (v44)
                      {
                        v63 = 0;
                        v64 = 0;
                        v65 = v11 + 1;
                        if (v17 >= -342 && v11 != -1)
                        {
                          if (v17 <= 308)
                          {
                            v66 = __clz(v65);
                            v67 = v65 << v66;
                            v68 = fast_float::powers_template<void>::power_of_five_128[2 * (int)v17 + 684];
                            v69 = v68 * v67;
                            v70 = (v68 * (unsigned __int128)v67) >> 64;
                            if ((~(_WORD)v70 & 0x1FF) == 0)
                            {
                              v71 = (fast_float::powers_template<void>::power_of_five_128[2 * (int)v17 + 685]
                                   * (unsigned __int128)v67) >> 64;
                              v55 = __CFADD__(v71, v69);
                              v69 += v71;
                              if (v55)
                                ++v70;
                            }
                            v72 = (v70 >> 63) + 9;
                            v73 = v70 >> v72;
                            v64 = (v70 >> 63) - v66 + ((217706 * (int)v17) >> 16) + 1086;
                            if (v64 <= 0)
                            {
                              if ((1 - v64) <= 0x3F)
                              {
                                v82 = ((v73 >> (1 - v64)) & 1) + (v73 >> (1 - v64));
                                v63 = v82 >> 1;
                                v64 = v82 >> 53 != 0;
                              }
                              else
                              {
                                v64 = 0;
                                v63 = 0;
                              }
                            }
                            else
                            {
                              v76 = v73 << v72 != v70
                                 || ((v70 >> v72) & 3) != 1
                                 || v69 >= 2
                                 || (unint64_t)(v17 + 4) >= 0x1C;
                              v77 = v73 & 0xFFFFFFFFFFFFFELL;
                              if (v76)
                                v77 = v70 >> v72;
                              v78 = (v77 & 1) + v77;
                              v79 = v78 >> 1;
                              v78 >>= 54;
                              v80 = v78 == 0;
                              if (v78)
                                ++v64;
                              v63 = v79 & 0xFFEFFFFFFFFFFFFFLL;
                              if (!v80 || v64 >= 0x7FF)
                                v63 = 0;
                              if (v64 >= 2047)
                                v64 = 2047;
                            }
                          }
                          else
                          {
                            v63 = 0;
                            v64 = 2047;
                          }
                        }
                        if (v46 != v63 || v64 != (_DWORD)v45)
                        {
                          v83 = __clz(v11);
                          v84 = fast_float::powers_template<void>::power_of_five_128[2 * (int)v17 + 684];
                          v85 = (v84 * (unsigned __int128)(v11 << v83)) >> 64;
                          if ((~(_WORD)v85 & 0x1FF) == 0
                            && __CFADD__((fast_float::powers_template<void>::power_of_five_128[2 * (int)v17 + 685]* (unsigned __int128)(v11 << v83)) >> 64, v84 * (v11 << v83)))
                          {
                            ++v85;
                          }
                          v86 = v85 >> 63;
                          v46 = v85 << ((v85 & 0x8000000000000000) == 0);
                          v45 = (v86 - v83 + ((217706 * (int)v17) >> 16) - 31693);
                        }
                      }
                      if ((v45 & 0x80000000) == 0)
                        goto LABEL_392;
                      if (v11 >> 4 < 0x271)
                      {
                        v88 = v11;
                        if (v11 >= 0x64)
                        {
                          do
                          {
LABEL_177:
                            v89 = v88 / 0x64;
                            LODWORD(v17) = v17 + 2;
                            v90 = v88 >> 4;
                            v88 /= 0x64uLL;
                          }
                          while (v90 > 0x270);
LABEL_181:
                          if (v89 >= 0xA)
                          {
                            do
                            {
                              LODWORD(v17) = v17 + 1;
                              v100 = v89 > 0x63;
                              v89 /= 0xAuLL;
                            }
                            while (v100);
                          }
                          v191 = 0;
                          v91 = (unsigned __int8 *)(v7 + v10);
                          v92 = v7;
                          v93 = (unsigned __int8 *)v7;
                          memset(v190, 0, sizeof(v190));
                          if (v10 >= 8)
                          {
                            v94 = v10;
                            v92 = v7;
                            v93 = (unsigned __int8 *)v7;
                            do
                            {
                              if (*(_QWORD *)v93 != 0x3030303030303030)
                                break;
                              v93 += 8;
                              v92 += 8;
                              v94 -= 8;
                            }
                            while (v94 > 7);
                          }
                          if (v93 != v91)
                          {
                            v95 = &v93[v10 + v7 - v92];
                            do
                            {
                              if (*v93 != 48)
                                goto LABEL_192;
                              ++v93;
                            }
                            while (v93 != v91);
                            v93 = v95;
LABEL_192:
                            if (v93 != v91)
                            {
                              v96 = 0;
                              v97 = 0;
                              v98 = 0;
                              while (1)
                              {
                                v100 = v98 - 770 > 0xFFFFFFFFFFFFFFF7 || v91 - v93 < 8;
                                if (v100)
                                {
                                  v101 = 0;
                                  v102 = 0;
                                  if (v98 > 0x300)
                                    goto LABEL_216;
                                }
                                else
                                {
                                  v103 = 10 * (*(_QWORD *)v93 - 0x3030303030303030)
                                       + ((unint64_t)(*(_QWORD *)v93 - 0x3030303030303030) >> 8);
                                  v102 = (0xF424000000064 * (v103 & 0xFF000000FFLL)
                                        + 0x271000000001 * ((v103 >> 16) & 0xFF000000FFLL)) >> 32;
                                  if (v98 - 762 > 0xFFFFFFFFFFFFFFF7 || v91 - (v93 + 8) < 8)
                                  {
                                    v98 += 8;
                                    v101 = 8;
                                    v93 += 8;
                                    if (v98 > 0x300)
                                      goto LABEL_216;
                                  }
                                  else
                                  {
                                    v104 = *((_QWORD *)v93 + 1);
                                    v98 += 16;
                                    v93 += 16;
                                    v105 = 10 * (v104 - 0x3030303030303030)
                                         + ((unint64_t)(v104 - 0x3030303030303030) >> 8);
                                    v102 = ((0xF424000000064 * (v105 & 0xFF000000FFLL)
                                           + 0x271000000001 * ((v105 >> 16) & 0xFF000000FFLL)) >> 32)
                                         + 100000000 * v102;
                                    v101 = 16;
                                    if (v98 > 0x300)
                                      goto LABEL_216;
                                  }
                                }
                                if (v93 != v91)
                                {
                                  v106 = v98;
                                  do
                                  {
                                    v107 = (char)*v93++;
                                    v108 = v101;
                                    v102 = v107 + 10 * v102 - 48;
                                    ++v101;
                                    v98 = v106 + 1;
                                    if (v108 > 0x11)
                                      break;
                                    if (v93 == v91)
                                      break;
                                    v55 = v106++ >= 0x300;
                                  }
                                  while (!v55);
                                }
LABEL_216:
                                if (v98 == 769)
                                {
                                  if (v96)
                                  {
                                    v139 = 0;
                                    v140 = 0;
                                    v141 = fast_float::powers_of_ten_uint64[v101];
                                    do
                                    {
                                      v142 = *(_QWORD *)((char *)v190 + v139);
                                      v143 = (v142 * (unsigned __int128)v141) >> 64;
                                      v144 = v142 * v141;
                                      v55 = __CFADD__(v144, v140);
                                      v145 = v144 + v140;
                                      if (v55)
                                        v140 = v143 + 1;
                                      else
                                        v140 = v143;
                                      *(_QWORD *)((char *)v190 + v139) = v145;
                                      v139 += 8;
                                    }
                                    while (8 * v96 != v139);
                                    if (v96 <= 0x3D && v140)
                                    {
                                      *((_QWORD *)v190 + v96++) = v140;
                                      LOWORD(v191) = v96;
                                    }
                                    if (v102)
                                    {
                                      v55 = __CFADD__(*(_QWORD *)&v190[0], v102);
                                      *(_QWORD *)&v190[0] += v102;
                                      if (v55)
                                      {
                                        v146 = v96;
                                        v147 = (_QWORD *)v190 + 1;
                                        v148 = v96 - 1;
                                        while (v148)
                                        {
                                          --v148;
                                          v55 = __CFADD__((*v147++)++, 1);
                                          if (!v55)
                                            goto LABEL_324;
                                        }
                                        if (v96 <= 0x3D)
                                        {
                                          v102 = 1;
LABEL_323:
                                          *((_QWORD *)v190 + v146) = v102;
                                          LOWORD(v191) = ++v96;
                                        }
                                      }
                                    }
                                  }
                                  else if (v102)
                                  {
                                    v146 = 0;
                                    goto LABEL_323;
                                  }
LABEL_324:
                                  v162 = v91 - v93;
                                  if (v91 - v93 < 8)
                                  {
LABEL_327:
                                    if (v93 != v91)
                                    {
                                      while (*v93 == 48)
                                      {
                                        if (++v93 == v91)
                                          goto LABEL_330;
                                      }
                                      goto LABEL_332;
                                    }
LABEL_330:
                                    if (v15)
                                    {
                                      v163 = 0;
                                      goto LABEL_334;
                                    }
                                  }
                                  else
                                  {
                                    while (*(_QWORD *)v93 == 0x3030303030303030)
                                    {
                                      v93 += 8;
                                      v162 -= 8;
                                      if (v162 <= 7)
                                        goto LABEL_327;
                                    }
LABEL_332:
                                    if (!v15)
                                    {
LABEL_342:
                                      if (!v96)
                                        goto LABEL_385;
                                      v167 = 0;
                                      v168 = 0;
                                      v169 = v96;
                                      do
                                      {
                                        v170 = *(_QWORD *)((char *)v190 + v167);
                                        v171 = (v170 * (unsigned __int128)0xAuLL) >> 64;
                                        v55 = __CFADD__(v168, 10 * v170);
                                        v172 = v168 + 10 * v170;
                                        if (v55)
                                          v168 = v171 + 1;
                                        else
                                          v168 = v171;
                                        *(_QWORD *)((char *)v190 + v167) = v172;
                                        v167 += 8;
                                      }
                                      while (8 * v96 != v167);
                                      if (v96 <= 0x3D && v168)
                                      {
                                        *((_QWORD *)v190 + v96) = v168;
                                        v169 = v96 + 1;
                                        LOWORD(v191) = ++v96;
                                      }
                                      v55 = __CFADD__((*(_QWORD *)&v190[0])++, 1);
                                      if (v55)
                                      {
                                        v173 = 1;
                                        LODWORD(v98) = 770;
                                        do
                                        {
                                          if (v169 == v173)
                                            goto LABEL_397;
                                          v174 = 8 * v173;
                                          v175 = *((_QWORD *)v190 + v173++);
                                          *(_QWORD *)((char *)v190 + v174) = v175 + 1;
                                        }
                                        while (v175 == -1);
                                      }
                                      else
                                      {
LABEL_387:
                                        LODWORD(v98) = 770;
                                      }
                                      goto LABEL_388;
                                    }
                                    v163 = 1;
LABEL_334:
                                    v164 = v15;
                                    if (v16 >= 8)
                                    {
                                      v165 = v16;
                                      v164 = v15;
                                      while (*(_QWORD *)v164 == 0x3030303030303030)
                                      {
                                        v164 += 8;
                                        v165 -= 8;
                                        if (v165 <= 7)
                                          goto LABEL_338;
                                      }
                                      goto LABEL_342;
                                    }
LABEL_338:
                                    v166 = &v15[v16];
                                    if (v164 != v166)
                                    {
                                      while (*v164 == 48)
                                      {
                                        if (++v164 == v166)
                                          goto LABEL_341;
                                      }
                                      goto LABEL_342;
                                    }
LABEL_341:
                                    if (v163)
                                      goto LABEL_342;
                                  }
                                  LODWORD(v98) = 769;
                                  goto LABEL_388;
                                }
                                if (v97)
                                {
                                  v109 = 0;
                                  v110 = 0;
                                  v111 = fast_float::powers_of_ten_uint64[v101];
                                  do
                                  {
                                    v112 = *(_QWORD *)((char *)v190 + v109);
                                    v113 = (v112 * (unsigned __int128)v111) >> 64;
                                    v114 = v112 * v111;
                                    v55 = __CFADD__(v114, v110);
                                    v115 = v114 + v110;
                                    if (v55)
                                      v110 = v113 + 1;
                                    else
                                      v110 = v113;
                                    *(_QWORD *)((char *)v190 + v109) = v115;
                                    v109 += 8;
                                  }
                                  while (8 * v97 != v109);
                                  if (v97 <= 0x3D && v110)
                                  {
                                    *((_QWORD *)v190 + v97) = v110;
                                    v96 = v97 + 1;
                                    LOWORD(v191) = ++v97;
                                  }
                                  if (!v102)
                                    goto LABEL_197;
                                  v55 = __CFADD__(*(_QWORD *)&v190[0], v102);
                                  *(_QWORD *)&v190[0] += v102;
                                  if (!v55)
                                    goto LABEL_197;
                                  v99 = v97;
                                  v116 = v97 - 1;
                                  v117 = (_QWORD *)v190 + 1;
                                  while (v116)
                                  {
                                    --v116;
                                    v55 = __CFADD__((*v117++)++, 1);
                                    if (!v55)
                                      goto LABEL_197;
                                  }
                                  if (v97 > 0x3D)
                                    goto LABEL_197;
                                  v102 = 1;
                                  goto LABEL_196;
                                }
                                if (v102)
                                {
                                  v99 = 0;
LABEL_196:
                                  *((_QWORD *)v190 + v99) = v102;
                                  v96 = v97 + 1;
                                  LOWORD(v191) = ++v97;
                                }
LABEL_197:
                                if (v93 == v91)
                                  goto LABEL_236;
                              }
                            }
                          }
                          v96 = 0;
                          v98 = 0;
LABEL_236:
                          if (!v15)
                            goto LABEL_388;
                          v118 = &v15[v16];
                          if (!v98)
                          {
                            v149 = v15;
                            v150 = v15;
                            if (v16 >= 8)
                            {
                              v151 = v16;
                              v149 = v15;
                              v150 = v15;
                              do
                              {
                                if (*(_QWORD *)v150 != 0x3030303030303030)
                                  break;
                                v150 += 8;
                                v149 += 8;
                                v151 -= 8;
                              }
                              while (v151 > 7);
                            }
                            if (v150 == v118)
                            {
                              LODWORD(v98) = 0;
                              goto LABEL_388;
                            }
                            v15 = &v150[&v15[v16] - v149];
                            while (*v150 == 48)
                            {
                              if (++v150 == v118)
                                goto LABEL_238;
                            }
                            v15 = v150;
                          }
LABEL_238:
                          if (v15 == v118)
                            goto LABEL_388;
                          v119 = v96;
                          while (1)
                          {
                            if (v98 - 770 > 0xFFFFFFFFFFFFFFF7 || v118 - v15 < 8)
                            {
                              v121 = 0;
                              v122 = 0;
                            }
                            else
                            {
                              v123 = 10 * (*(_QWORD *)v15 - 0x3030303030303030)
                                   + ((unint64_t)(*(_QWORD *)v15 - 0x3030303030303030) >> 8);
                              v122 = (0xF424000000064 * (v123 & 0xFF000000FFLL)
                                    + 0x271000000001 * ((v123 >> 16) & 0xFF000000FFLL)) >> 32;
                              if (v98 - 762 > 0xFFFFFFFFFFFFFFF7 || v118 - (v15 + 8) < 8)
                              {
                                v98 += 8;
                                v121 = 8;
                                v15 += 8;
                              }
                              else
                              {
                                v124 = *((_QWORD *)v15 + 1);
                                v98 += 16;
                                v15 += 16;
                                v125 = 10 * (v124 - 0x3030303030303030)
                                     + ((unint64_t)(v124 - 0x3030303030303030) >> 8);
                                v122 = ((0xF424000000064 * (v125 & 0xFF000000FFLL)
                                       + 0x271000000001 * ((v125 >> 16) & 0xFF000000FFLL)) >> 32)
                                     + 100000000 * v122;
                                v121 = 16;
                              }
                            }
                            if (v98 <= 0x300 && v15 != v118)
                            {
                              v126 = v98;
                              do
                              {
                                v127 = *v15++;
                                v128 = v121;
                                v122 = v127 + 10 * v122 - 48;
                                ++v121;
                                v98 = v126 + 1;
                                if (v128 > 0x11)
                                  break;
                                if (v15 == v118)
                                  break;
                                v55 = v126++ >= 0x300;
                              }
                              while (!v55);
                            }
                            if (v98 == 769)
                            {
                              if (v96)
                              {
                                v152 = 0;
                                v153 = 0;
                                v154 = fast_float::powers_of_ten_uint64[v121];
                                do
                                {
                                  v155 = *(_QWORD *)((char *)v190 + v152);
                                  v156 = (v155 * (unsigned __int128)v154) >> 64;
                                  v157 = v155 * v154;
                                  v55 = __CFADD__(v157, v153);
                                  v158 = v157 + v153;
                                  if (v55)
                                    v153 = v156 + 1;
                                  else
                                    v153 = v156;
                                  *(_QWORD *)((char *)v190 + v152) = v158;
                                  v152 += 8;
                                }
                                while (8 * v96 != v152);
                                if (v96 <= 0x3D && v153)
                                {
                                  *((_QWORD *)v190 + v96++) = v153;
                                  LOWORD(v191) = v96;
                                }
                                if (v122)
                                {
                                  v55 = __CFADD__(*(_QWORD *)&v190[0], v122);
                                  *(_QWORD *)&v190[0] += v122;
                                  if (v55)
                                  {
                                    v159 = v96;
                                    v160 = (_QWORD *)v190 + 1;
                                    v161 = v96 - 1;
                                    while (v161)
                                    {
                                      --v161;
                                      v55 = __CFADD__((*v160++)++, 1);
                                      if (!v55)
                                        goto LABEL_363;
                                    }
                                    if (v96 <= 0x3D)
                                    {
                                      v122 = 1;
LABEL_362:
                                      *((_QWORD *)v190 + v159) = v122;
                                      LOWORD(v191) = ++v96;
                                    }
                                  }
                                }
                              }
                              else if (v122)
                              {
                                v159 = 0;
                                goto LABEL_362;
                              }
LABEL_363:
                              v176 = v118 - v15;
                              if (v118 - v15 >= 8)
                              {
                                while (*(_QWORD *)v15 == 0x3030303030303030)
                                {
                                  v15 += 8;
                                  v176 -= 8;
                                  if (v176 <= 7)
                                    goto LABEL_366;
                                }
LABEL_370:
                                if (v96)
                                {
                                  v177 = 0;
                                  v178 = 0;
                                  v169 = v96;
                                  do
                                  {
                                    v179 = *(_QWORD *)((char *)v190 + v177);
                                    v180 = (v179 * (unsigned __int128)0xAuLL) >> 64;
                                    v55 = __CFADD__(v178, 10 * v179);
                                    v181 = v178 + 10 * v179;
                                    if (v55)
                                      v178 = v180 + 1;
                                    else
                                      v178 = v180;
                                    *(_QWORD *)((char *)v190 + v177) = v181;
                                    v177 += 8;
                                  }
                                  while (8 * v96 != v177);
                                  if (v96 <= 0x3D && v178)
                                  {
                                    *((_QWORD *)v190 + v96) = v178;
                                    v169 = v96 + 1;
                                    LOWORD(v191) = ++v96;
                                  }
                                  v55 = __CFADD__((*(_QWORD *)&v190[0])++, 1);
                                  if (!v55)
                                    goto LABEL_387;
                                  v182 = 1;
                                  LODWORD(v98) = 770;
                                  while (v169 != v182)
                                  {
                                    v183 = 8 * v182;
                                    v184 = *((_QWORD *)v190 + v182++);
                                    *(_QWORD *)((char *)v190 + v183) = v184 + 1;
                                    if (v184 != -1)
                                      goto LABEL_388;
                                  }
LABEL_397:
                                  if (v96 >= 0x3E)
                                    goto LABEL_387;
LABEL_386:
                                  *((_QWORD *)v190 + v169) = 1;
                                  LOWORD(v191) = v96 + 1;
                                  goto LABEL_387;
                                }
LABEL_385:
                                v169 = 0;
                                goto LABEL_386;
                              }
LABEL_366:
                              LODWORD(v98) = 769;
                              if (v15 != v118)
                              {
                                while (*v15 == 48)
                                {
                                  if (++v15 == v118)
                                    goto LABEL_388;
                                }
                                goto LABEL_370;
                              }
LABEL_388:
                              v185 = v17 - v98;
                              if (v185 + 1 < 0)
                                v186 = fast_float::negative_digit_comp<double>((unsigned __int16 *)v190, v46, (int)v45 + 0x8000, v185 + 1);
                              else
                                v186 = fast_float::positive_digit_comp<double>((unsigned __int16 *)v190, v185 + 1);
                              v46 = v186;
                              v45 = v187;
LABEL_392:
                              *a3 = (v45 << 52) | ((unint64_t)(v6 == 45) << 63) | v46;
                              return v5;
                            }
                            if (v119)
                            {
                              v129 = 0;
                              v130 = 0;
                              v131 = fast_float::powers_of_ten_uint64[v121];
                              do
                              {
                                v132 = *(_QWORD *)((char *)v190 + v129);
                                v133 = (v132 * (unsigned __int128)v131) >> 64;
                                v134 = v132 * v131;
                                v55 = __CFADD__(v134, v130);
                                v135 = v134 + v130;
                                if (v55)
                                  v130 = v133 + 1;
                                else
                                  v130 = v133;
                                *(_QWORD *)((char *)v190 + v129) = v135;
                                v129 += 8;
                              }
                              while (8 * v119 != v129);
                              if (v119 <= 0x3D && v130)
                              {
                                *((_QWORD *)v190 + v119) = v130;
                                v96 = v119 + 1;
                                LOWORD(v191) = ++v119;
                              }
                              if (!v122)
                                goto LABEL_241;
                              v55 = __CFADD__(*(_QWORD *)&v190[0], v122);
                              *(_QWORD *)&v190[0] += v122;
                              if (!v55)
                                goto LABEL_241;
                              v136 = v119;
                              v137 = v119 - 1;
                              v138 = (_QWORD *)v190 + 1;
                              while (v137)
                              {
                                --v137;
                                v55 = __CFADD__((*v138++)++, 1);
                                if (!v55)
                                  goto LABEL_241;
                              }
                              if (v119 > 0x3D)
                                goto LABEL_241;
                              v122 = 1;
                            }
                            else
                            {
                              if (!v122)
                                goto LABEL_241;
                              v136 = 0;
                            }
                            *((_QWORD *)v190 + v136) = v122;
                            v96 = v119 + 1;
                            LOWORD(v191) = ++v119;
LABEL_241:
                            if (v15 == v118)
                              goto LABEL_388;
                          }
                        }
                      }
                      else
                      {
                        v87 = v11;
                        do
                        {
                          v88 = v87 / 0x2710;
                          LODWORD(v17) = v17 + 4;
                          v100 = v87 > 0x5F5E0FF;
                          v87 /= 0x2710uLL;
                        }
                        while (v100);
                        if (v88 >= 0x64)
                          goto LABEL_177;
                      }
                      v89 = v88;
                      goto LABEL_181;
                    }
LABEL_93:
                    if (v11)
                    {
                      if (v17 <= 308)
                      {
                        v47 = __clz(v11);
                        v48 = fast_float::powers_template<void>::power_of_five_128[2 * (int)v17 + 684];
                        v49 = v48 * (v11 << v47);
                        v50 = (v48 * (unsigned __int128)(v11 << v47)) >> 64;
                        if ((~(_WORD)v50 & 0x1FF) == 0)
                        {
                          v51 = (fast_float::powers_template<void>::power_of_five_128[2 * (int)v17 + 685]
                               * (unsigned __int128)(v11 << v47)) >> 64;
                          v55 = __CFADD__(v51, v49);
                          v49 += v51;
                          if (v55)
                            ++v50;
                        }
                        v52 = (v50 >> 63) + 9;
                        v53 = v50 >> v52;
                        LODWORD(v45) = (v50 >> 63) - v47 + ((217706 * (int)v17) >> 16) + 1086;
                        if ((int)v45 <= 0)
                        {
                          if ((1 - v45) <= 0x3F)
                          {
                            v62 = ((v53 >> (1 - v45)) & 1) + (v53 >> (1 - v45));
                            v46 = v62 >> 1;
                            v45 = v62 >> 53 != 0;
                          }
                          else
                          {
                            v45 = 0;
                            v46 = 0;
                          }
                        }
                        else
                        {
                          v55 = v53 << v52 != v50 || ((v50 >> v52) & 3) != 1 || v49 >= 2;
                          v56 = v55 || (unint64_t)(v17 + 4) >= 0x1C;
                          v57 = v53 & 0xFFFFFFFFFFFFFELL;
                          if (v56)
                            v57 = v50 >> v52;
                          v58 = (v57 & 1) + v57;
                          v59 = v58 >> 1;
                          v58 >>= 54;
                          v60 = v58 == 0;
                          if (v58)
                            LODWORD(v45) = v45 + 1;
                          v46 = v59 & 0xFFEFFFFFFFFFFFFFLL;
                          if (!v60 || v45 >= 0x7FF)
                            v46 = 0;
                          if ((int)v45 >= 2047)
                            v45 = 2047;
                          else
                            v45 = v45;
                        }
                      }
                      else
                      {
                        v46 = 0;
                        v45 = 2047;
                      }
                    }
                    goto LABEL_132;
                  }
                }
                if ((unint64_t)(v17 + 22) <= 0x2C)
                {
                  if ((float)(*(float *)&fast_float::detail::rounds_to_nearest(void)::fmin + 1.0) == (float)(1.0 - *(float *)&fast_float::detail::rounds_to_nearest(void)::fmin))
                  {
                    if (v11 <= 0x20000000000000)
                    {
                      v42 = (double)v11;
                      if (v17 < 0)
                        v43 = v42 / fast_float::binary_format_lookup_tables<double,void>::powers_of_ten[-v17];
                      else
                        v43 = fast_float::binary_format_lookup_tables<double,void>::powers_of_ten[v17] * v42;
                      *(double *)a3 = v43;
                      if (v6 != 45)
                        return v5;
                      goto LABEL_127;
                    }
                  }
                  else if ((v17 & 0x8000000000000000) == 0
                         && v11 <= fast_float::binary_format_lookup_tables<double,void>::max_mantissa[v17])
                  {
                    if (!v11)
                    {
                      v189 = -0.0;
                      if (v6 != 45)
                        v189 = 0.0;
                      *(double *)a3 = v189;
                      return v5;
                    }
                    v43 = fast_float::binary_format_lookup_tables<double,void>::powers_of_ten[v17] * (double)v11;
                    *(double *)a3 = v43;
                    if (v6 != 45)
                      return v5;
LABEL_127:
                    *(double *)a3 = -v43;
                    return v5;
                  }
                }
                v44 = 0;
                v45 = 0;
                v46 = 0;
                if (v17 < -342)
                  goto LABEL_132;
                goto LABEL_93;
              }
            }
          }
          if ((a4 & 4) == 0)
            return v5;
        }
        v31 = 0;
        v5 = v19;
        goto LABEL_56;
      }
    }
    v19 = a2;
    v17 = v7 - (_QWORD)a2 + v10 + 1;
    v12 = -(uint64_t)(v7 - (_QWORD)a2 + 1);
    if (v7 - (_QWORD)a2 == -1)
      return v5;
    goto LABEL_32;
  }
  return v5;
}

unint64_t fast_float::positive_digit_comp<double>(unsigned __int16 *a1, unsigned int a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64x2_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  uint64x2_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64x2_t v16;
  uint64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  BOOL v45;

  if (!fast_float::bigint::pow5((fast_float::bigint *)a1, a2))
    goto LABEL_18;
  v4 = a2;
  v5 = a2 & 0x3F;
  if (v5)
  {
    v6 = a1[248];
    if (a1[248])
    {
      v7 = 64 - v5;
      if (v6 >= 4)
      {
        v8 = (unsigned __int16)v6 & 0xFFFC;
        v10 = (uint64x2_t)vdupq_n_s64(v5);
        v11 = (int8x16_t *)(a1 + 8);
        v12 = 0uLL;
        v13 = (uint64x2_t)vnegq_s64(vdupq_n_s64(v7));
        v14 = v8;
        do
        {
          v15 = v11[-1];
          v16 = (uint64x2_t)vextq_s8(v12, v15, 8uLL);
          v12 = *v11;
          v17 = (uint64x2_t)vextq_s8(v15, *v11, 8uLL);
          v18 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)v15, v10), (int8x16_t)vshlq_u64(v16, v13));
          v19 = vorrq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)v11, v10), (int8x16_t)vshlq_u64(v17, v13));
          v11[-1] = v18;
          *v11 = v19;
          v11 += 2;
          v14 -= 4;
        }
        while (v14);
        v9 = v12.u64[1];
        if (v8 == v6)
        {
LABEL_11:
          if (v9 >> v7)
          {
            if (v6 > 0x3D)
              goto LABEL_18;
            *(_QWORD *)&a1[4 * v6] = v9 >> v7;
            a1[248] = v6 + 1;
          }
          goto LABEL_14;
        }
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      v20 = v6 - v8;
      v21 = &a1[4 * v8];
      v22 = v9;
      do
      {
        v9 = *(_QWORD *)v21;
        *(_QWORD *)v21 = (*(_QWORD *)v21 << v5) | (v22 >> v7);
        v21 += 4;
        v22 = v9;
        --v20;
      }
      while (v20);
      goto LABEL_11;
    }
  }
LABEL_14:
  if (a2 >= 0x40)
  {
    v23 = a1[248];
    if (a1[248])
    {
      v24 = (unint64_t)a2 >> 6;
      if (v24 + v23 <= 0x3E)
      {
        v25 = 8 * v24;
        memmove(&a1[4 * v24], a1, 8 * v23);
        bzero(a1, v25);
        a1[248] += v4 >> 6;
      }
    }
  }
LABEL_18:
  v26 = a1[248];
  if (!a1[248])
  {
    v27 = 0;
    v31 = a1[248];
    v29 = a1[248];
    v30 = v31;
    goto LABEL_45;
  }
  if ((_DWORD)v26 == 1)
  {
    v27 = 0;
    v28 = *(_QWORD *)&a1[4 * v26 - 4];
    v29 = __clz(v28);
    v30 = v28 << v29;
    v31 = v30 & 0x7FF;
    if (v31 <= 0x400)
    {
LABEL_45:
      LODWORD(v37) = v27 | (v30 >> 11) & 1;
      if (v31 == 1024)
        v37 = v37;
      else
        v37 = 0;
      goto LABEL_48;
    }
  }
  else
  {
    v32 = &a1[4 * v26];
    v34 = *((_QWORD *)v32 - 2);
    v33 = *((_QWORD *)v32 - 1);
    v29 = __clz(v33);
    v35 = v34 << v29;
    v30 = (v33 << v29) | (v34 >> 1 >> ~(_BYTE)v29);
    if (v26 < 3 || *((_QWORD *)v32 - 3))
    {
      v27 = v26 > 2 || v35 != 0;
      v31 = v30 & 0x7FF;
      if (v31 <= 0x400)
        goto LABEL_45;
    }
    else
    {
      v38 = 4 * v26;
      v39 = 2;
      while (v38 != 12)
      {
        v40 = *(_QWORD *)&a1[v38 - 16];
        v38 -= 4;
        ++v39;
        if (v40)
          goto LABEL_38;
      }
      v39 = a1[248];
LABEL_38:
      if (v35)
        v41 = 0;
      else
        v41 = v39 >= v26;
      v27 = !v41;
      v31 = v30 & 0x7FF;
      if (v31 <= 0x400)
        goto LABEL_45;
    }
  }
  v37 = 1;
LABEL_48:
  v42 = v37 + (v30 >> 11);
  if (v42 >> 53)
    v43 = 1023;
  else
    v43 = 1022;
  v44 = v43 - v29 + ((_DWORD)v26 << 6);
  if (v42 >> 53)
    v45 = 1;
  else
    v45 = v44 >= 0x7FF;
  if (v45)
    return 0;
  else
    return v42 & 0xFFEFFFFFFFFFFFFFLL;
}

unint64_t fast_float::negative_digit_comp<double>(unsigned __int16 *a1, unint64_t a2, int a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64x2_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  uint64x2_t v29;
  uint64_t v30;
  int8x16_t v31;
  uint64x2_t v32;
  uint64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  uint64x2_t v41;
  int8x16_t *v42;
  int8x16_t v43;
  uint64x2_t v44;
  uint64_t v45;
  int8x16_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  char v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  _BYTE v73[8];
  _QWORD __src[61];
  __int128 v75;

  if (a3 <= -11)
  {
    if (1 - a3 >= 64)
      v13 = 64;
    else
      v13 = 1 - a3;
    v8 = a2 >> v13;
    if (1 - a3 > 63)
      v8 = 0;
    v9 = (v8 | ((unint64_t)(v8 >> 52 != 0) << 52)) & 0x7FF0000000000000;
    if (v9)
      goto LABEL_9;
  }
  else
  {
    if (a3 + 11 >= 2047)
      v7 = 2047;
    else
      v7 = (a3 + 11);
    if (a3 + 11 >= 2047)
      v8 = 0;
    else
      v8 = (a2 >> 11) & 0xFFFFFFFFFFFFFLL;
    v9 = (v8 | (v7 << 52)) & 0x7FF0000000000000;
    if (v9)
    {
LABEL_9:
      v10 = v9 >> 52;
      v11 = v8 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
      v12 = v10 - 1076;
      goto LABEL_17;
    }
  }
  v11 = v8 & 0xFFFFFFFFFFFFFLL;
  v12 = -1075;
LABEL_17:
  v75 = 0u;
  memset(&__src[1], 0, 480);
  __src[0] = (2 * v11) | 1;
  v14 = (v12 - a4);
  WORD4(v75) = 1;
  fast_float::bigint::pow5((fast_float::bigint *)__src, -a4);
  if ((int)v14 >= 1)
  {
    v15 = v14 & 0x3F;
    if ((v14 & 0x3F) == 0)
      goto LABEL_35;
    v16 = WORD4(v75);
    if (!WORD4(v75))
      goto LABEL_35;
    v17 = 64 - v15;
    if (WORD4(v75) >= 4u)
    {
      v26 = (uint64x2_t)vdupq_n_s64(v15);
      v18 = WORD4(v75) & 0xFFFC;
      v27 = (int8x16_t *)&__src[2];
      v28 = 0uLL;
      v29 = (uint64x2_t)vnegq_s64(vdupq_n_s64(v17));
      v30 = v18;
      do
      {
        v31 = v27[-1];
        v32 = (uint64x2_t)vextq_s8(v28, v31, 8uLL);
        v28 = *v27;
        v33 = (uint64x2_t)vextq_s8(v31, *v27, 8uLL);
        v34 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)v31, v26), (int8x16_t)vshlq_u64(v32, v29));
        v35 = vorrq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)v27, v26), (int8x16_t)vshlq_u64(v33, v29));
        v27[-1] = v34;
        *v27 = v35;
        v27 += 2;
        v30 -= 4;
      }
      while (v30);
      v19 = v28.u64[1];
      if (v18 == v16)
      {
LABEL_32:
        if (v19 >> v17)
        {
          if (v16 > 0x3D)
            goto LABEL_52;
          __src[v16] = v19 >> v17;
          WORD4(v75) = v16 + 1;
        }
LABEL_35:
        if (v14 >= 0x40)
        {
          if (WORD4(v75))
          {
            v39 = v14 >> 6;
            if ((v14 >> 6) + WORD4(v75) <= 0x3E)
            {
              v40 = (unsigned __int16 *)__src;
              memmove(&__src[v39], __src, 8 * WORD4(v75));
LABEL_39:
              bzero(v40, 8 * v39);
              v40[248] += v39;
              goto LABEL_52;
            }
          }
        }
        goto LABEL_52;
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v36 = v16 - v18;
    v37 = &__src[v18];
    v38 = v19;
    do
    {
      v19 = *v37;
      *v37 = (*v37 << v15) | (v38 >> v17);
      ++v37;
      v38 = v19;
      --v36;
    }
    while (v36);
    goto LABEL_32;
  }
  if ((v14 & 0x80000000) == 0)
    goto LABEL_52;
  v20 = -(int)v14;
  v21 = -(char)v14 & 0x3F;
  if ((-(char)v14 & 0x3F) != 0)
  {
    v22 = a1[248];
    if (a1[248])
    {
      v23 = 64 - v21;
      if (v22 >= 4)
      {
        v24 = (unsigned __int16)v22 & 0xFFFC;
        v41 = (uint64x2_t)vdupq_n_s64(v21);
        v42 = (int8x16_t *)(a1 + 8);
        v43 = 0uLL;
        v44 = (uint64x2_t)vnegq_s64(vdupq_n_s64(v23));
        v45 = v24;
        do
        {
          v46 = v42[-1];
          v47 = (uint64x2_t)vextq_s8(v43, v46, 8uLL);
          v43 = *v42;
          v48 = (uint64x2_t)vextq_s8(v46, *v42, 8uLL);
          v49 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)v46, v41), (int8x16_t)vshlq_u64(v47, v44));
          v50 = vorrq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)v42, v41), (int8x16_t)vshlq_u64(v48, v44));
          v42[-1] = v49;
          *v42 = v50;
          v42 += 2;
          v45 -= 4;
        }
        while (v45);
        v25 = v43.u64[1];
        if (v24 == v22)
        {
LABEL_45:
          if (v25 >> v23)
          {
            if (v22 > 0x3D)
              goto LABEL_52;
            *(_QWORD *)&a1[4 * v22] = v25 >> v23;
            a1[248] = v22 + 1;
          }
          goto LABEL_48;
        }
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v51 = v22 - v24;
      v52 = &a1[4 * v24];
      v53 = v25;
      do
      {
        v25 = *(_QWORD *)v52;
        *(_QWORD *)v52 = (*(_QWORD *)v52 << v21) | (v53 >> v23);
        v52 += 4;
        v53 = v25;
        --v51;
      }
      while (v51);
      goto LABEL_45;
    }
  }
LABEL_48:
  if (v20 >= 0x40)
  {
    v54 = a1[248];
    if (a1[248])
    {
      v39 = v20 >> 6;
      if ((v20 >> 6) + v54 <= 0x3E)
      {
        memmove(&a1[4 * v39], a1, 8 * v54);
        v40 = a1;
        goto LABEL_39;
      }
    }
  }
LABEL_52:
  v55 = a1[248];
  LODWORD(v56) = 1;
  if (v55 <= WORD4(v75))
  {
    if (v55 >= WORD4(v75))
    {
      v56 = (uint64_t)__src;
      v57 = 4 * v55;
      while (v57 * 2)
      {
        v58 = *(_QWORD *)&a1[v57 - 4];
        v59 = *(_QWORD *)&v73[v57 * 2];
        v57 -= 4;
        if (v58 < v59)
          LODWORD(v56) = -1;
        if (v58 > v59)
          LODWORD(v56) = 1;
        if (v58 != v59)
          goto LABEL_64;
      }
      LODWORD(v56) = 0;
    }
    else
    {
      LODWORD(v56) = -1;
    }
  }
LABEL_64:
  LODWORD(v60) = (a2 >> 11) & ((_DWORD)v56 == 0);
  if ((int)v56 > 0)
    v60 = 1;
  else
    v60 = v60;
  v61 = (a2 >> 11) + v60;
  v62 = v61 >> 53 == 0;
  if (v61 >> 53)
    v63 = 12;
  else
    v63 = 11;
  v64 = v63 + a3;
  v65 = v61 & 0xFFEFFFFFFFFFFFFFLL;
  if (!v62 || v64 >= 0x7FF)
    v65 = 0;
  if (1 - a3 >= 64)
    v67 = 64;
  else
    v67 = 1 - a3;
  v68 = a2 >> v67;
  if (1 - a3 <= 63)
    v69 = v68;
  else
    v69 = 0;
  v70 = (int)v56 <= 0;
  LODWORD(v56) = v69 & ((_DWORD)v56 == 0);
  if (v70)
    v56 = v56;
  else
    v56 = 1;
  v71 = v69 + v56;
  if (a3 <= -11)
    return v71;
  else
    return v65;
}

uint64_t fast_float::bigint::pow5(fast_float::bigint *this, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  fast_float::bigint *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  fast_float::bigint *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  fast_float::bigint *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t __n;
  unsigned __int16 v62;
  _QWORD v63[62];
  __int16 v64;
  _BYTE __dst[496];
  unsigned __int16 v66;

  v2 = a2;
  if (a2 >= 0x87)
  {
    LODWORD(v4) = *((unsigned __int16 *)this + 248);
    v60 = (char *)this + 8;
    while (1)
    {
      v66 = 0;
      if ((unsigned __int16)v4 > 0x3Eu)
        break;
      if ((_WORD)v4)
      {
        memcpy(__dst, this, 8 * (unsigned __int16)v4);
        v66 += v4;
        v62 = v66;
        v5 = v66;
        goto LABEL_10;
      }
      __n = 0;
      v62 = 0;
      LODWORD(v4) = 0;
      v12 = 1;
LABEL_20:
      v13 = -1;
      v14 = (uint64_t *)v60;
      v15 = 1;
      v16 = v4;
      do
      {
        v17 = fast_float::pow5_tables<void>::large_power_of_5[v15];
        if (!v17)
          goto LABEL_21;
        v18 = 0;
        v64 = 0;
        if (!v12)
        {
          memcpy(v63, __dst, __n);
          v18 = v64;
        }
        v19 = v18 + v62;
        if (v19)
        {
          v20 = 0;
          v21 = v63;
          v22 = v19;
          do
          {
            v23 = *v21 * v17;
            v10 = __CFADD__(v23, v20);
            v24 = v23 + v20;
            if (v10)
              v20 = (((unint64_t)*v21 * (unsigned __int128)v17) >> 64) + 1;
            else
              v20 = ((unint64_t)*v21 * (unsigned __int128)v17) >> 64;
            *v21++ = v24;
            --v22;
          }
          while (v22);
          if (v20)
          {
            if (v19 > 0x3Du)
              return 0;
            v63[v19++] = v20;
          }
          v25 = v19;
          v26 = (unsigned __int16)v16;
          v27 = (unsigned __int16)v16 - v15;
          if ((unsigned __int16)v16 >= v15)
          {
LABEL_37:
            if (v27 >= v25)
              goto LABEL_43;
          }
        }
        else
        {
          v25 = 0;
          v26 = (unsigned __int16)v16;
          v27 = (unsigned __int16)v16 - v15;
          if ((unsigned __int16)v16 >= v15)
            goto LABEL_37;
        }
        v4 = v15 + v25;
        if (v15 + v25 > 0x3E)
          return 0;
        if (v4 > v26)
        {
          v28 = 8 * v4 - 8 * v26;
          if (v28 >= 1)
            bzero((char *)this + 8 * v26, v28);
        }
        *((_WORD *)this + 248) = v4;
        v16 = v15 + v25;
LABEL_43:
        if ((_DWORD)v25)
        {
          v29 = 0;
          v30 = v63;
          v31 = v14;
          v32 = v25;
          do
          {
            v33 = v29;
            v35 = *v30++;
            v34 = v35;
            v36 = *v31;
            v37 = *v31 + v35;
            v10 = __CFADD__(v37, 1);
            v38 = v37 + 1;
            v39 = v10;
            v10 = __CFADD__(v36, v34);
            v40 = v36 + v34;
            v29 = v33 & v39;
            if (v10)
              v29 = 1;
            if ((v33 & 1) != 0)
              v41 = v38;
            else
              v41 = v40;
            *v31++ = v41;
            --v32;
          }
          while (v32);
          if (v29)
          {
            v42 = v15 + v25;
            if (v15 + v25 <= (unsigned __int16)v16)
              v42 = (unsigned __int16)v16;
            v43 = v42 + v13;
            while (v43 != v25)
            {
              v44 = v25;
              v45 = v14[v25++];
              v14[v44] = v45 + 1;
              if (v45 != -1)
                goto LABEL_21;
            }
            if ((unsigned __int16)v16 > 0x3Du)
              return 0;
            *((_QWORD *)this + (unsigned __int16)v16) = 1;
            LODWORD(v4) = v16 + 1;
            *((_WORD *)this + 248) = ++v16;
          }
        }
LABEL_21:
        ++v15;
        ++v14;
        --v13;
      }
      while (v15 != 5);
      if ((_WORD)v16 && !*((_QWORD *)this + (unsigned __int16)v16 - 1))
      {
        do
        {
          if (!(_WORD)--v16)
          {
            LODWORD(v4) = 0;
            goto LABEL_4;
          }
        }
        while (!*((_QWORD *)this + (unsigned __int16)v16 - 1));
        LODWORD(v4) = v16;
LABEL_4:
        *((_WORD *)this + 248) = v16;
      }
      v2 -= 135;
      if (v2 <= 0x86)
        goto LABEL_70;
    }
    v5 = 0;
    v62 = 0;
LABEL_10:
    v6 = 0;
    v7 = this;
    v8 = (unsigned __int16)v4;
    do
    {
      v9 = 0x13A1D71CFF1B172DLL * *(_QWORD *)v7;
      v10 = __CFADD__(v9, v6);
      v11 = v9 + v6;
      if (v10)
        v6 = ((*(unint64_t *)v7 * (unsigned __int128)0x13A1D71CFF1B172DuLL) >> 64) + 1;
      else
        v6 = (*(unint64_t *)v7 * (unsigned __int128)0x13A1D71CFF1B172DuLL) >> 64;
      *(_QWORD *)v7 = v11;
      v7 = (fast_float::bigint *)((char *)v7 + 8);
      --v8;
    }
    while (v8);
    if (v6)
    {
      if ((unsigned __int16)v4 > 0x3Du)
        return 0;
      *((_QWORD *)this + (unsigned __int16)v4) = v6;
      LODWORD(v4) = v4 + 1;
      *((_WORD *)this + 248) = v4;
    }
    v12 = v62 == 0;
    if (v62 > 0x3Eu)
      return 0;
    __n = 8 * v5;
    goto LABEL_20;
  }
LABEL_70:
  if (v2 >= 0x1B)
  {
    v46 = *((unsigned __int16 *)this + 248);
    do
    {
      if (v46)
      {
        v47 = 0;
        v48 = this;
        v49 = v46;
        do
        {
          v50 = 0x6765C793FA10079DLL * *(_QWORD *)v48;
          v10 = __CFADD__(v50, v47);
          v51 = v50 + v47;
          if (v10)
            v47 = ((*(unint64_t *)v48 * (unsigned __int128)0x6765C793FA10079DuLL) >> 64) + 1;
          else
            v47 = (*(unint64_t *)v48 * (unsigned __int128)0x6765C793FA10079DuLL) >> 64;
          *(_QWORD *)v48 = v51;
          v48 = (fast_float::bigint *)((char *)v48 + 8);
          --v49;
        }
        while (v49);
        if (v47)
        {
          if (v46 > 0x3D)
            return 0;
          *((_QWORD *)this + v46++) = v47;
          *((_WORD *)this + 248) = v46;
        }
      }
      v2 -= 27;
    }
    while (v2 > 0x1A);
  }
  if (!v2)
    return 1;
  v52 = *((unsigned __int16 *)this + 248);
  if (!*((_WORD *)this + 248))
    return 1;
  v53 = 0;
  v54 = fast_float::pow5_tables<void>::small_power_of_5[v2];
  v55 = this;
  v56 = *((unsigned __int16 *)this + 248);
  do
  {
    v57 = *(_QWORD *)v55 * v54;
    v10 = __CFADD__(v57, v53);
    v58 = v57 + v53;
    if (v10)
      v53 = ((*(unint64_t *)v55 * (unsigned __int128)v54) >> 64) + 1;
    else
      v53 = (*(unint64_t *)v55 * (unsigned __int128)v54) >> 64;
    *(_QWORD *)v55 = v58;
    v55 = (fast_float::bigint *)((char *)v55 + 8);
    --v56;
  }
  while (v56);
  if (!v53)
    return 1;
  if (v52 <= 0x3D)
  {
    *((_QWORD *)this + v52) = v53;
    *((_WORD *)this + 248) = v52 + 1;
    return 1;
  }
  return 0;
}

unsigned __int16 *fast_float::from_chars_advanced<double,char16_t>(unsigned __int16 *a1, unsigned __int16 *a2, double *a3, uint64_t a4)
{
  unsigned __int16 *v4;
  int v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v29;
  int v30;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  double v39;
  double v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unsigned __int8 *v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  uint16x4_t v96;
  uint32x4_t v97;
  uint64x2_t v98;
  uint64x2_t v99;
  int8x16_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint32x4_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  int8x16_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v126;
  unint64_t v127;
  uint16x4_t v128;
  uint32x4_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  int8x16_t v132;
  unint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint32x4_t v139;
  uint64x2_t v140;
  uint64x2_t v141;
  int8x16_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  int v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  unsigned int v204;
  _OWORD v205[31];
  uint64_t v206;

  v4 = a1;
  if (a1 == a2)
    return v4;
  v6 = *a1;
  if (v6 == 45 || (v7 = a1, v6 == 43))
  {
    v7 = a1 + 1;
    if (a1 + 1 == a2)
      return v4;
    v8 = *v7;
    if ((v8 - 48) >= 0xA && v8 != WORD2(a4))
      return v4;
  }
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v7[v10];
    if ((v12 - 48) > 9)
      break;
    v11 = v12 + 10 * v11 - 48;
    if (&v7[++v10] == a2)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = a2 - v7;
      v17 = a2;
      v18 = a2;
      v19 = v16;
      if (!v16)
        return v4;
      goto LABEL_24;
    }
  }
  v17 = &v7[v10];
  v16 = (v10 * 2) >> 1;
  if ((_DWORD)v12 == WORD2(a4))
  {
    v13 = (unsigned __int8 *)(v17 + 1);
    if (v17 + 1 == a2)
    {
LABEL_20:
      v18 = a2;
    }
    else
    {
      v18 = v17 + 1;
      while (1)
      {
        v20 = *v18;
        if ((v20 - 48) > 9)
          break;
        ++v18;
        v11 = 10 * v11 + (v20 - 48);
        if (v18 == a2)
          goto LABEL_20;
      }
    }
    v15 = ((char *)v7 - (char *)v18 + v10 * 2 + 2) >> 1;
    v14 = ((char *)v18 - (char *)v7 - v10 * 2 - 2) >> 1;
    v19 = v16 - v15;
    if (v16 == v15)
      return v4;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v18 = &v7[v10];
    v19 = (v10 * 2) >> 1;
    if (!v16)
      return v4;
  }
LABEL_24:
  if ((a4 & 1) == 0)
    goto LABEL_47;
  if (v18 == a2)
    goto LABEL_45;
  if ((*v18 | 0x20) != 0x65)
    goto LABEL_45;
  v21 = v18 + 1;
  if (v18 + 1 == a2)
    goto LABEL_45;
  v22 = v18[1];
  if (v22 == 43 || v22 == 45)
    v21 = v18 + 2;
  if (v21 == a2 || *v21 - 48 > 9)
  {
LABEL_45:
    if ((a4 & 4) == 0)
      return v4;
LABEL_47:
    v27 = 0;
    v4 = v18;
    goto LABEL_48;
  }
  v24 = 0;
  while (1)
  {
    v25 = *v21;
    if ((v25 - 48) > 9)
      break;
    v26 = 10 * v24 + (v25 - 48);
    if (v24 < 0x10000000)
      v24 = v26;
    if (++v21 == a2)
    {
      v21 = a2;
      break;
    }
  }
  if (v22 == 45)
    v27 = -v24;
  else
    v27 = v24;
  v15 += v27;
  v4 = v21;
LABEL_48:
  if (v19 < 20)
    goto LABEL_73;
  v29 = v7;
  do
  {
    v30 = *v29;
    if (v30 != 48 && v30 != WORD2(a4))
      break;
    v19 -= v30 == 48;
    ++v29;
  }
  while (v29 != a2);
  if (v19 < 20)
  {
LABEL_73:
    if ((unint64_t)(v15 + 22) <= 0x2C)
    {
      if ((float)(*(float *)&fast_float::detail::rounds_to_nearest(void)::fmin + 1.0) == (float)(1.0
                                                                                                - *(float *)&fast_float::detail::rounds_to_nearest(void)::fmin))
      {
        if (v11 <= 0x20000000000000)
        {
          v39 = (double)v11;
          if (v15 < 0)
            v40 = v39 / fast_float::binary_format_lookup_tables<double,void>::powers_of_ten[-v15];
          else
            v40 = fast_float::binary_format_lookup_tables<double,void>::powers_of_ten[v15] * v39;
          *a3 = v40;
          if (v6 != 45)
            return v4;
          goto LABEL_119;
        }
      }
      else if ((v15 & 0x8000000000000000) == 0
             && v11 <= fast_float::binary_format_lookup_tables<double,void>::max_mantissa[v15])
      {
        if (!v11)
        {
          v188 = -0.0;
          if (v6 != 45)
            v188 = 0.0;
          *a3 = v188;
          return v4;
        }
        v40 = fast_float::binary_format_lookup_tables<double,void>::powers_of_ten[v15] * (double)v11;
        *a3 = v40;
        if (v6 != 45)
          return v4;
LABEL_119:
        *a3 = -v40;
        return v4;
      }
    }
    v41 = 0;
    v42 = 0;
    v43 = 0;
    if (v15 < -342)
      goto LABEL_124;
    goto LABEL_85;
  }
  v11 = 0;
  if (!v16)
    goto LABEL_65;
  v32 = 2 * v16 - 2;
  v33 = v7;
  do
  {
    v34 = *v33++;
    v11 = v34 + 10 * v11 - 48;
    v35 = v11 >= 0xDE0B6B3A7640000 || v32 == 0;
    v32 -= 2;
  }
  while (!v35);
  if (v11 <= 0xDE0B6B3A763FFFFLL)
  {
LABEL_65:
    if (v14)
    {
      v36 = 2 * v14 - 2;
      v33 = (unsigned __int16 *)v13;
      do
      {
        v37 = *v33++;
        v11 = v37 + 10 * v11 - 48;
        v38 = v11 >= 0xDE0B6B3A7640000 || v36 == 0;
        v36 -= 2;
      }
      while (!v38);
    }
    else
    {
      v33 = (unsigned __int16 *)v13;
    }
    v17 = (unsigned __int16 *)v13;
  }
  v15 = v27 + v17 - v33;
  v41 = 1;
  v42 = 0;
  v43 = 0;
  if (v15 >= -342)
  {
LABEL_85:
    if (v11)
    {
      if (v15 <= 308)
      {
        v44 = __clz(v11);
        v45 = fast_float::powers_template<void>::power_of_five_128[2 * (int)v15 + 684];
        v46 = v45 * (v11 << v44);
        v47 = (v45 * (unsigned __int128)(v11 << v44)) >> 64;
        if ((~(_WORD)v47 & 0x1FF) == 0)
        {
          v48 = (fast_float::powers_template<void>::power_of_five_128[2 * (int)v15 + 685]
               * (unsigned __int128)(v11 << v44)) >> 64;
          v52 = __CFADD__(v48, v46);
          v46 += v48;
          if (v52)
            ++v47;
        }
        v49 = (v47 >> 63) + 9;
        v50 = v47 >> v49;
        LODWORD(v42) = (v47 >> 63) - v44 + ((217706 * (int)v15) >> 16) + 1086;
        if ((int)v42 <= 0)
        {
          if ((1 - v42) <= 0x3F)
          {
            v59 = ((v50 >> (1 - v42)) & 1) + (v50 >> (1 - v42));
            v43 = v59 >> 1;
            v42 = v59 >> 53 != 0;
          }
          else
          {
            v42 = 0;
            v43 = 0;
          }
        }
        else
        {
          v52 = v50 << v49 != v47 || ((v47 >> v49) & 3) != 1 || v46 >= 2;
          v53 = v52 || (unint64_t)(v15 + 4) >= 0x1C;
          v54 = v50 & 0xFFFFFFFFFFFFFELL;
          if (v53)
            v54 = v47 >> v49;
          v55 = (v54 & 1) + v54;
          v56 = v55 >> 1;
          v55 >>= 54;
          v57 = v55 == 0;
          if (v55)
            LODWORD(v42) = v42 + 1;
          v43 = v56 & 0xFFEFFFFFFFFFFFFFLL;
          if (!v57 || v42 >= 0x7FF)
            v43 = 0;
          if ((int)v42 >= 2047)
            v42 = 2047;
          else
            v42 = v42;
        }
      }
      else
      {
        v43 = 0;
        v42 = 2047;
      }
    }
  }
LABEL_124:
  if (v41)
  {
    v60 = 0;
    v61 = 0;
    v62 = v11 + 1;
    if (v15 >= -342 && v11 != -1)
    {
      if (v15 <= 308)
      {
        v63 = __clz(v62);
        v64 = v62 << v63;
        v65 = fast_float::powers_template<void>::power_of_five_128[2 * (int)v15 + 684];
        v66 = v65 * v64;
        v67 = (v65 * (unsigned __int128)v64) >> 64;
        if ((~(_WORD)v67 & 0x1FF) == 0)
        {
          v68 = (fast_float::powers_template<void>::power_of_five_128[2 * (int)v15 + 685] * (unsigned __int128)v64) >> 64;
          v52 = __CFADD__(v68, v66);
          v66 += v68;
          if (v52)
            ++v67;
        }
        v69 = (v67 >> 63) + 9;
        v70 = v67 >> v69;
        v61 = (v67 >> 63) - v63 + ((217706 * (int)v15) >> 16) + 1086;
        if (v61 <= 0)
        {
          if ((1 - v61) <= 0x3F)
          {
            v79 = ((v70 >> (1 - v61)) & 1) + (v70 >> (1 - v61));
            v60 = v79 >> 1;
            v61 = v79 >> 53 != 0;
          }
          else
          {
            v61 = 0;
            v60 = 0;
          }
        }
        else
        {
          v73 = v70 << v69 != v67 || ((v67 >> v69) & 3) != 1 || v66 >= 2 || (unint64_t)(v15 + 4) >= 0x1C;
          v74 = v70 & 0xFFFFFFFFFFFFFELL;
          if (v73)
            v74 = v67 >> v69;
          v75 = (v74 & 1) + v74;
          v76 = v75 >> 1;
          v75 >>= 54;
          v77 = v75 == 0;
          if (v75)
            ++v61;
          v60 = v76 & 0xFFEFFFFFFFFFFFFFLL;
          if (!v77 || v61 >= 0x7FF)
            v60 = 0;
          if (v61 >= 2047)
            v61 = 2047;
        }
      }
      else
      {
        v60 = 0;
        v61 = 2047;
      }
    }
    if (v43 != v60 || v61 != (_DWORD)v42)
    {
      v80 = __clz(v11);
      v81 = fast_float::powers_template<void>::power_of_five_128[2 * (int)v15 + 684];
      v82 = (v81 * (unsigned __int128)(v11 << v80)) >> 64;
      if ((~(_WORD)v82 & 0x1FF) == 0
        && __CFADD__((fast_float::powers_template<void>::power_of_five_128[2 * (int)v15 + 685] * (unsigned __int128)(v11 << v80)) >> 64, v81 * (v11 << v80)))
      {
        ++v82;
      }
      v83 = v82 >> 63;
      v43 = v82 << ((v82 & 0x8000000000000000) == 0);
      v42 = (v83 - v80 + ((217706 * (int)v15) >> 16) - 31693);
    }
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_384;
  if (v11 >> 4 >= 0x271)
  {
    v84 = v11;
    do
    {
      v85 = v84 / 0x2710;
      LODWORD(v15) = v15 + 4;
      v93 = v84 > 0x5F5E0FF;
      v84 /= 0x2710uLL;
    }
    while (v93);
    if (v85 >= 0x64)
      goto LABEL_169;
LABEL_172:
    v86 = v85;
    goto LABEL_173;
  }
  v85 = v11;
  if (v11 < 0x64)
    goto LABEL_172;
  do
  {
LABEL_169:
    v86 = v85 / 0x64;
    LODWORD(v15) = v15 + 2;
    v87 = v85 >> 4;
    v85 /= 0x64uLL;
  }
  while (v87 > 0x270);
LABEL_173:
  if (v86 >= 0xA)
  {
    do
    {
      LODWORD(v15) = v15 + 1;
      v93 = v86 > 0x63;
      v86 /= 0xAuLL;
    }
    while (v93);
  }
  v206 = 0;
  v88 = &v7[v16];
  memset(v205, 0, sizeof(v205));
  if (v16 >= 4)
  {
    v89 = 2 * v16;
    do
    {
      if (*(_QWORD *)v7 != 0x30003000300030)
        break;
      v7 += 4;
      v89 -= 8;
    }
    while (v89 > 6);
  }
  while (1)
  {
    if (v7 == v88)
      goto LABEL_183;
    if (*v7 != 48)
      break;
    ++v7;
  }
  if (v7 == v88)
  {
LABEL_183:
    v90 = 0;
    v91 = 0;
    if (!v13)
      goto LABEL_380;
    goto LABEL_184;
  }
  v90 = 0;
  v91 = 0;
  do
  {
    if (v91 - 770 > 0xFFFFFFFFFFFFFFF7 || (char *)v88 - (char *)v7 < 15)
    {
      v126 = 0;
      v127 = 0;
    }
    else
    {
      v128.i16[0] = *(_QWORD *)(v7 + 2);
      v128.i16[1] = BYTE2(*(_QWORD *)(v7 + 2));
      v128.i16[2] = BYTE4(*(_QWORD *)(v7 + 2));
      v128.i16[3] = BYTE6(*(_QWORD *)(v7 + 2));
      v129 = vmovl_u16(v128);
      v130.i64[0] = v129.u32[0];
      v130.i64[1] = v129.u32[1];
      v131 = v130;
      v130.i64[0] = v129.u32[2];
      v130.i64[1] = v129.u32[3];
      v132 = vorrq_s8((int8x16_t)vshlq_u64(v131, (uint64x2_t)xmmword_19911FE90), (int8x16_t)vshlq_u64(v130, (uint64x2_t)xmmword_19911FE80));
      v133 = (*(_QWORD *)&vorr_s8(*(int8x8_t *)v132.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL)) | ((unint64_t)*((unsigned __int8 *)v7 + 12) << 48) | *(unsigned __int8 *)v7 | ((unint64_t)v7[1] << 8) | ((unint64_t)v7[7] << 56))
           - 0x3030303030303030;
      v127 = (0xF424000000064 * ((10 * v133 + (v133 >> 8)) & 0xFF000000FFLL)
            + 0x271000000001 * (((10 * v133 + (v133 >> 8)) >> 16) & 0xFF000000FFLL)) >> 32;
      if (v91 - 762 > 0xFFFFFFFFFFFFFFF7 || (char *)v88 - (char *)(v7 + 8) < 15)
      {
        v91 += 8;
        v126 = 8;
        v7 += 8;
      }
      else
      {
        v134 = *((unsigned __int8 *)v7 + 16);
        v135 = v7[9];
        v136 = *((unsigned __int8 *)v7 + 28);
        v137 = v7[15];
        v91 += 16;
        v138 = *(_QWORD *)(v7 + 10);
        v7 += 16;
        v139 = vmovl_u16((uint16x4_t)(v138 & 0xFF00FF00FF00FFLL));
        v140.i64[0] = v139.u32[0];
        v140.i64[1] = v139.u32[1];
        v141 = v140;
        v140.i64[0] = v139.u32[2];
        v140.i64[1] = v139.u32[3];
        v142 = vorrq_s8((int8x16_t)vshlq_u64(v141, (uint64x2_t)xmmword_19911FE90), (int8x16_t)vshlq_u64(v140, (uint64x2_t)xmmword_19911FE80));
        v143 = (*(_QWORD *)&vorr_s8(*(int8x8_t *)v142.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL)) | (v136 << 48) | v134 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v135 << 8) | (v137 << 56))
             - 0x3030303030303030;
        v127 = ((0xF424000000064 * ((10 * v143 + (v143 >> 8)) & 0xFF000000FFLL)
               + 0x271000000001 * (((10 * v143 + (v143 >> 8)) >> 16) & 0xFF000000FFLL)) >> 32)
             + 100000000 * v127;
        v126 = 16;
      }
    }
    if (v91 <= 0x300 && v7 != v88)
    {
      v144 = v91;
      do
      {
        v145 = *v7++;
        v146 = v126;
        v127 = v145 + 10 * v127 - 48;
        ++v126;
        v91 = v144 + 1;
        if (v146 > 0x11)
          break;
        if (v7 == v88)
          break;
        v52 = v144++ >= 0x300;
      }
      while (!v52);
    }
    if (v91 == 769)
    {
      LOWORD(v206) = v90;
      if (v90)
      {
        v168 = 0;
        v169 = 0;
        v170 = fast_float::powers_of_ten_uint64[v126];
        do
        {
          v171 = *(_QWORD *)((char *)v205 + v168);
          v172 = (v171 * (unsigned __int128)v170) >> 64;
          v173 = v171 * v170;
          v52 = __CFADD__(v173, v169);
          v174 = v173 + v169;
          if (v52)
            v169 = v172 + 1;
          else
            v169 = v172;
          *(_QWORD *)((char *)v205 + v168) = v174;
          v168 += 8;
        }
        while (8 * v90 != v168);
        if (v90 <= 0x3D && v169)
        {
          *((_QWORD *)v205 + v90++) = v169;
          LOWORD(v206) = v90;
        }
        if (!v127)
          goto LABEL_343;
        v52 = __CFADD__(*(_QWORD *)&v205[0], v127);
        *(_QWORD *)&v205[0] += v127;
        if (!v52)
          goto LABEL_343;
        v175 = v90;
        v176 = (_QWORD *)v205 + 1;
        v177 = v90 - 1;
        while (v177)
        {
          --v177;
          v52 = __CFADD__((*v176++)++, 1);
          if (!v52)
            goto LABEL_343;
        }
        if (v90 > 0x3D)
        {
LABEL_343:
          v189 = (char *)v88 - (char *)v7;
          if ((char *)v88 - (char *)v7 < 7)
          {
LABEL_346:
            if (v7 == v88)
            {
LABEL_349:
              if (!v13)
                goto LABEL_379;
              v190 = 0;
LABEL_353:
              v191 = v13;
              if (v14 >= 4)
              {
                v192 = 2 * v14;
                v191 = v13;
                while (*(_QWORD *)v191 == 0x30003000300030)
                {
                  v191 += 8;
                  v192 -= 8;
                  if (v192 <= 6)
                    goto LABEL_357;
                }
LABEL_361:
                if (!v90)
                  goto LABEL_376;
                v194 = 0;
                v195 = 0;
                v181 = v90;
                do
                {
                  v196 = *(_QWORD *)((char *)v205 + v194);
                  v197 = (v196 * (unsigned __int128)0xAuLL) >> 64;
                  v52 = __CFADD__(v195, 10 * v196);
                  v198 = v195 + 10 * v196;
                  if (v52)
                    v195 = v197 + 1;
                  else
                    v195 = v197;
                  *(_QWORD *)((char *)v205 + v194) = v198;
                  v194 += 8;
                }
                while (8 * v90 != v194);
                if (v90 <= 0x3D && v195)
                {
                  *((_QWORD *)v205 + v90) = v195;
                  v181 = v90 + 1;
                  LOWORD(v206) = ++v90;
                }
                v52 = __CFADD__((*(_QWORD *)&v205[0])++, 1);
                if (v52)
                {
                  v199 = 1;
                  LODWORD(v91) = 770;
                  do
                  {
                    if (v181 == v199)
                      goto LABEL_385;
                    v200 = 8 * v199;
                    v201 = *((_QWORD *)v205 + v199++);
                    *(_QWORD *)((char *)v205 + v200) = v201 + 1;
                  }
                  while (v201 == -1);
                }
                else
                {
LABEL_378:
                  LODWORD(v91) = 770;
                }
                goto LABEL_380;
              }
LABEL_357:
              v193 = &v13[2 * v14];
              if (v191 != v193)
              {
                while (*(_WORD *)v191 == 48)
                {
                  v191 += 2;
                  if (v191 == v193)
                    goto LABEL_360;
                }
                goto LABEL_361;
              }
LABEL_360:
              if (v190)
                goto LABEL_361;
LABEL_379:
              LODWORD(v91) = 769;
              goto LABEL_380;
            }
            while (*v7 == 48)
            {
              if (++v7 == v88)
                goto LABEL_349;
            }
          }
          else
          {
            while (*(_QWORD *)v7 == 0x30003000300030)
            {
              v7 += 4;
              v189 -= 8;
              if (v189 <= 6)
                goto LABEL_346;
            }
          }
          if (!v13)
            goto LABEL_361;
          v190 = 1;
          goto LABEL_353;
        }
        v127 = 1;
      }
      else
      {
        if (!v127)
          goto LABEL_343;
        v175 = 0;
      }
      *((_QWORD *)v205 + v175) = v127;
      LOWORD(v206) = ++v90;
      goto LABEL_343;
    }
    if (v90)
    {
      v147 = 0;
      v148 = 0;
      v149 = fast_float::powers_of_ten_uint64[v126];
      do
      {
        v150 = *(_QWORD *)((char *)v205 + v147);
        v151 = (v150 * (unsigned __int128)v149) >> 64;
        v152 = v150 * v149;
        v52 = __CFADD__(v152, v148);
        v153 = v152 + v148;
        if (v52)
          v148 = v151 + 1;
        else
          v148 = v151;
        *(_QWORD *)((char *)v205 + v147) = v153;
        v147 += 8;
      }
      while (8 * v90 != v147);
      if (v90 <= 0x3D && v148)
        *((_QWORD *)v205 + v90++) = v148;
      if (v127)
      {
        v52 = __CFADD__(*(_QWORD *)&v205[0], v127);
        *(_QWORD *)&v205[0] += v127;
        if (v52)
        {
          v154 = v90;
          v155 = v90 - 1;
          v156 = (_QWORD *)v205 + 1;
          while (v155)
          {
            --v155;
            v52 = __CFADD__((*v156++)++, 1);
            if (!v52)
              goto LABEL_230;
          }
          if (v90 <= 0x3D)
          {
            v127 = 1;
            goto LABEL_229;
          }
        }
      }
    }
    else if (v127)
    {
      v154 = 0;
LABEL_229:
      *((_QWORD *)v205 + v154) = v127;
      ++v90;
    }
LABEL_230:
    ;
  }
  while (v7 != v88);
  LOWORD(v206) = v90;
  if (!v13)
    goto LABEL_380;
LABEL_184:
  v92 = &v13[2 * v14];
  if (!v91)
  {
    if (v14 >= 4)
    {
      v157 = 2 * v14;
      do
      {
        if (*(_QWORD *)v13 != 0x30003000300030)
          break;
        v13 += 8;
        v157 -= 8;
      }
      while (v157 > 6);
    }
    if (v13 == v92)
    {
LABEL_276:
      LODWORD(v91) = 0;
      goto LABEL_380;
    }
    while (*(_WORD *)v13 == 48)
    {
      v13 += 2;
      if (v13 == v92)
        goto LABEL_276;
    }
  }
  if (v13 == v92)
    goto LABEL_380;
  while (2)
  {
    v93 = v91 - 770 > 0xFFFFFFFFFFFFFFF7 || v92 - v13 < 15;
    if (v93)
    {
      v94 = 0;
      v95 = 0;
    }
    else
    {
      v96.i16[0] = *(_QWORD *)(v13 + 4);
      v96.i16[1] = BYTE2(*(_QWORD *)(v13 + 4));
      v96.i16[2] = BYTE4(*(_QWORD *)(v13 + 4));
      v96.i16[3] = BYTE6(*(_QWORD *)(v13 + 4));
      v97 = vmovl_u16(v96);
      v98.i64[0] = v97.u32[0];
      v98.i64[1] = v97.u32[1];
      v99 = v98;
      v98.i64[0] = v97.u32[2];
      v98.i64[1] = v97.u32[3];
      v100 = vorrq_s8((int8x16_t)vshlq_u64(v99, (uint64x2_t)xmmword_19911FE90), (int8x16_t)vshlq_u64(v98, (uint64x2_t)xmmword_19911FE80));
      v101 = (*(_QWORD *)&vorr_s8(*(int8x8_t *)v100.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)) | ((unint64_t)v13[12] << 48) | *v13 | ((unint64_t)*((_WORD *)v13 + 1) << 8) | ((unint64_t)*((unsigned __int16 *)v13 + 7) << 56))
           - 0x3030303030303030;
      v95 = (0xF424000000064 * ((10 * v101 + (v101 >> 8)) & 0xFF000000FFLL)
           + 0x271000000001 * (((10 * v101 + (v101 >> 8)) >> 16) & 0xFF000000FFLL)) >> 32;
      if (v91 - 762 > 0xFFFFFFFFFFFFFFF7 || v92 - (v13 + 16) < 15)
      {
        v91 += 8;
        v94 = 8;
        v13 += 16;
      }
      else
      {
        v102 = v13[16];
        v103 = *((_WORD *)v13 + 9);
        v104 = v13[28];
        v105 = *((unsigned __int16 *)v13 + 15);
        v91 += 16;
        v106 = *(_QWORD *)(v13 + 20);
        v13 += 32;
        v107 = vmovl_u16((uint16x4_t)(v106 & 0xFF00FF00FF00FFLL));
        v108.i64[0] = v107.u32[0];
        v108.i64[1] = v107.u32[1];
        v109 = v108;
        v108.i64[0] = v107.u32[2];
        v108.i64[1] = v107.u32[3];
        v110 = vorrq_s8((int8x16_t)vshlq_u64(v109, (uint64x2_t)xmmword_19911FE90), (int8x16_t)vshlq_u64(v108, (uint64x2_t)xmmword_19911FE80));
        v111 = (*(_QWORD *)&vorr_s8(*(int8x8_t *)v110.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL)) | (v104 << 48) | v102 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v103 << 8) | (v105 << 56))
             - 0x3030303030303030;
        v95 = ((0xF424000000064 * ((10 * v111 + (v111 >> 8)) & 0xFF000000FFLL)
              + 0x271000000001 * (((10 * v111 + (v111 >> 8)) >> 16) & 0xFF000000FFLL)) >> 32)
            + 100000000 * v95;
        v94 = 16;
      }
    }
    if (v91 <= 0x300 && v13 != v92)
    {
      v112 = v91;
      do
      {
        v113 = *(unsigned __int16 *)v13;
        v13 += 2;
        v114 = v94;
        v95 = v113 + 10 * v95 - 48;
        ++v94;
        v91 = v112 + 1;
        if (v114 > 0x11)
          break;
        if (v13 == v92)
          break;
        v52 = v112++ >= 0x300;
      }
      while (!v52);
    }
    if (v91 != 769)
    {
      if (v90)
      {
        v115 = 0;
        v116 = 0;
        v117 = fast_float::powers_of_ten_uint64[v94];
        do
        {
          v118 = *(_QWORD *)((char *)v205 + v115);
          v119 = (v118 * (unsigned __int128)v117) >> 64;
          v120 = v118 * v117;
          v52 = __CFADD__(v120, v116);
          v121 = v120 + v116;
          if (v52)
            v116 = v119 + 1;
          else
            v116 = v119;
          *(_QWORD *)((char *)v205 + v115) = v121;
          v115 += 8;
        }
        while (8 * v90 != v115);
        if (v90 <= 0x3D && v116)
          *((_QWORD *)v205 + v90++) = v116;
        if (v95)
        {
          v52 = __CFADD__(*(_QWORD *)&v205[0], v95);
          *(_QWORD *)&v205[0] += v95;
          if (v52)
          {
            v122 = v90;
            v123 = v90 - 1;
            v124 = (_QWORD *)v205 + 1;
            while (v123)
            {
              --v123;
              v52 = __CFADD__((*v124++)++, 1);
              if (!v52)
                goto LABEL_188;
            }
            if (v90 <= 0x3D)
            {
              v95 = 1;
LABEL_187:
              *((_QWORD *)v205 + v122) = v95;
              ++v90;
            }
          }
        }
      }
      else if (v95)
      {
        v122 = 0;
        goto LABEL_187;
      }
LABEL_188:
      if (v13 == v92)
      {
        LOWORD(v206) = v90;
        goto LABEL_380;
      }
      continue;
    }
    break;
  }
  LOWORD(v206) = v90;
  if (v90)
  {
    v158 = 0;
    v159 = 0;
    v160 = fast_float::powers_of_ten_uint64[v94];
    do
    {
      v161 = *(_QWORD *)((char *)v205 + v158);
      v162 = (v161 * (unsigned __int128)v160) >> 64;
      v163 = v161 * v160;
      v52 = __CFADD__(v163, v159);
      v164 = v163 + v159;
      if (v52)
        v159 = v162 + 1;
      else
        v159 = v162;
      *(_QWORD *)((char *)v205 + v158) = v164;
      v158 += 8;
    }
    while (8 * v90 != v158);
    if (v90 <= 0x3D && v159)
    {
      *((_QWORD *)v205 + v90++) = v159;
      LOWORD(v206) = v90;
    }
    if (v95)
    {
      v52 = __CFADD__(*(_QWORD *)&v205[0], v95);
      *(_QWORD *)&v205[0] += v95;
      if (v52)
      {
        v165 = v90;
        v166 = (_QWORD *)v205 + 1;
        v167 = v90 - 1;
        while (v167)
        {
          --v167;
          v52 = __CFADD__((*v166++)++, 1);
          if (!v52)
            goto LABEL_315;
        }
        if (v90 <= 0x3D)
        {
          v95 = 1;
LABEL_314:
          *((_QWORD *)v205 + v165) = v95;
          LOWORD(v206) = ++v90;
        }
      }
    }
  }
  else if (v95)
  {
    v165 = 0;
    goto LABEL_314;
  }
LABEL_315:
  v178 = v92 - v13;
  if (v92 - v13 >= 7)
  {
    while (*(_QWORD *)v13 == 0x30003000300030)
    {
      v13 += 8;
      v178 -= 8;
      if (v178 <= 6)
        goto LABEL_318;
    }
LABEL_322:
    if (v90)
    {
      v179 = 0;
      v180 = 0;
      v181 = v90;
      do
      {
        v182 = *(_QWORD *)((char *)v205 + v179);
        v183 = (v182 * (unsigned __int128)0xAuLL) >> 64;
        v52 = __CFADD__(v180, 10 * v182);
        v184 = v180 + 10 * v182;
        if (v52)
          v180 = v183 + 1;
        else
          v180 = v183;
        *(_QWORD *)((char *)v205 + v179) = v184;
        v179 += 8;
      }
      while (8 * v90 != v179);
      if (v90 <= 0x3D && v180)
      {
        *((_QWORD *)v205 + v90) = v180;
        v181 = v90 + 1;
        LOWORD(v206) = ++v90;
      }
      v52 = __CFADD__((*(_QWORD *)&v205[0])++, 1);
      if (!v52)
        goto LABEL_378;
      v185 = 1;
      LODWORD(v91) = 770;
      while (v181 != v185)
      {
        v186 = 8 * v185;
        v187 = *((_QWORD *)v205 + v185++);
        *(_QWORD *)((char *)v205 + v186) = v187 + 1;
        if (v187 != -1)
          goto LABEL_380;
      }
LABEL_385:
      if (v90 >= 0x3E)
        goto LABEL_378;
LABEL_377:
      *((_QWORD *)v205 + v181) = 1;
      LOWORD(v206) = v90 + 1;
      goto LABEL_378;
    }
LABEL_376:
    v181 = 0;
    goto LABEL_377;
  }
LABEL_318:
  LODWORD(v91) = 769;
  if (v13 != v92)
  {
    while (*(_WORD *)v13 == 48)
    {
      v13 += 2;
      if (v13 == v92)
        goto LABEL_380;
    }
    goto LABEL_322;
  }
LABEL_380:
  v202 = v15 - v91;
  if (v202 + 1 < 0)
    v203 = fast_float::negative_digit_comp<double>((unsigned __int16 *)v205, v43, (int)v42 + 0x8000, v202 + 1);
  else
    v203 = fast_float::positive_digit_comp<double>((unsigned __int16 *)v205, v202 + 1);
  v43 = v203;
  v42 = v204;
LABEL_384:
  *(_QWORD *)a3 = (v42 << 52) | ((unint64_t)(v6 == 45) << 63) | v43;
  return v4;
}

void *WTF::fastStrDup(WTF *this, const char *a2)
{
  WTF *v3;
  void *v4;

  v3 = (WTF *)(strlen((const char *)this) + 1);
  v4 = (void *)WTF::fastMalloc(v3);
  return memcpy(v4, this, (size_t)v3);
}

uint64_t WTF::fastMalloc(WTF *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v1)
    return bmalloc_allocate_casual(this, 1);
  v2 = ((unint64_t)this + 15) >> 4;
  if ((unint64_t)this + 15 <= 0x1AF)
  {
    v3 = 23 * v2 + 7;
  }
  else
  {
    if (((unint64_t)this + 15) >> 5 > 0x138)
      return bmalloc_allocate_casual(this, 1);
    v3 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v2 + 626);
    if (*(_DWORD *)(v1 + 8052) <= v3)
      return bmalloc_allocate_casual(this, 1);
  }
  v4 = v1 + 8 * v3;
  v5 = v4 + 8064;
  *(_BYTE *)(v4 + 8064) = 1;
  v6 = *(unsigned int *)(v4 + 8080);
  if ((_DWORD)v6)
  {
    *(_DWORD *)(v5 + 16) = v6 - *(_DWORD *)(v5 + 20);
    result = *(_QWORD *)(v5 + 8) - v6;
    *(_BYTE *)v5 = 0;
    return result;
  }
  v8 = *(_QWORD *)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 24);
  if (v8)
  {
LABEL_10:
    v10 = __clz(v8);
    *(_QWORD *)(v5 + 40) = v8 & ~(0x8000000000000000 >> v10);
    result = v9 + 16 * v10;
    *(_BYTE *)v5 = 0;
    return result;
  }
  if (*(_BYTE *)(v5 + 5) == 6)
  {
    v11 = *(unsigned int *)(v5 + 32);
    v12 = *(_DWORD *)(v5 + 36);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 8 * v11 + 56) = 0;
      v13 = (unint64_t *)(8 * v11 + 8 * v3 + v1 + 8128);
      v14 = v12 - 1 - v11;
      while (v14)
      {
        v9 += 1024;
        v16 = *v13++;
        v15 = v16;
        LODWORD(v11) = v11 + 1;
        --v14;
        if (v16)
        {
          v8 = __rbit64(v15);
          *(_DWORD *)(v5 + 32) = v11;
          *(_QWORD *)(v5 + 24) = v9;
          goto LABEL_10;
        }
      }
      *(_DWORD *)(v5 + 32) = v12;
    }
  }
  *(_BYTE *)v5 = 0;
  return bmalloc_allocate_casual(this, 1);
}

void *WTF::fastMemDup(WTF *this, WTF *a2)
{
  void *v2;

  v2 = 0;
  if (this && a2)
  {
    v2 = (void *)WTF::fastMalloc(a2);
    memcpy(v2, this, (size_t)a2);
  }
  return v2;
}

void *WTF::fastCompactStrDup(WTF *this, const char *a2)
{
  WTF *v3;
  void *v4;

  v3 = (WTF *)(strlen((const char *)this) + 1);
  v4 = (void *)WTF::fastCompactMalloc(v3);
  return memcpy(v4, this, (size_t)v3);
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v1)
    return bmalloc_allocate_casual(this, 0);
  v2 = ((unint64_t)this + 15) >> 4;
  if ((unint64_t)this + 15 <= 0x1AF)
  {
    v3 = 23 * v2 + 7;
  }
  else
  {
    if (((unint64_t)this + 15) >> 5 > 0x138)
      return bmalloc_allocate_casual(this, 0);
    v3 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v2 + 626);
    if (*(_DWORD *)(v1 + 8052) <= v3)
      return bmalloc_allocate_casual(this, 0);
  }
  v4 = v1 + 8 * v3;
  v5 = v4 + 8064;
  *(_BYTE *)(v4 + 8064) = 1;
  v6 = *(unsigned int *)(v4 + 8080);
  if ((_DWORD)v6)
  {
    *(_DWORD *)(v5 + 16) = v6 - *(_DWORD *)(v5 + 20);
    result = *(_QWORD *)(v5 + 8) - v6;
    *(_BYTE *)v5 = 0;
    return result;
  }
  v8 = *(_QWORD *)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 24);
  if (v8)
  {
LABEL_10:
    v10 = __clz(v8);
    *(_QWORD *)(v5 + 40) = v8 & ~(0x8000000000000000 >> v10);
    result = v9 + 16 * v10;
    *(_BYTE *)v5 = 0;
    return result;
  }
  if (*(_BYTE *)(v5 + 5) == 6)
  {
    v11 = *(unsigned int *)(v5 + 32);
    v12 = *(_DWORD *)(v5 + 36);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 8 * v11 + 56) = 0;
      v13 = (unint64_t *)(8 * v11 + 8 * v3 + v1 + 8128);
      v14 = v12 - 1 - v11;
      while (v14)
      {
        v9 += 1024;
        v16 = *v13++;
        v15 = v16;
        LODWORD(v11) = v11 + 1;
        --v14;
        if (v16)
        {
          v8 = __rbit64(v15);
          *(_DWORD *)(v5 + 32) = v11;
          *(_QWORD *)(v5 + 24) = v9;
          goto LABEL_10;
        }
      }
      *(_DWORD *)(v5 + 32) = v12;
    }
  }
  *(_BYTE *)v5 = 0;
  return bmalloc_allocate_casual(this, 0);
}

void *WTF::fastCompactMemDup(WTF *this, WTF *a2)
{
  void *v2;

  v2 = 0;
  if (this && a2)
  {
    v2 = (void *)WTF::fastCompactMalloc(a2);
    memcpy(v2, this, (size_t)a2);
  }
  return v2;
}

BOOL WTF::isFastMallocEnabled(WTF *this)
{
  if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
    return *(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object == 0;
  else
    return *(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0) == 0;
}

unint64_t WTF::fastZeroedMalloc(size_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t impl_casual_case;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v9)
  {
    v10 = (this + 15) >> 4;
    if (this + 15 <= 0x1AF)
    {
      v11 = 23 * v10 + 7;
    }
    else
    {
      if ((this + 15) >> 5 > 0x138)
        goto LABEL_29;
      v11 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v10 + 626);
      if (*(_DWORD *)(v9 + 8052) <= v11)
        goto LABEL_29;
    }
    v12 = v9 + 8 * v11;
    v13 = v12 + 8064;
    *(_BYTE *)(v12 + 8064) = 1;
    v14 = *(unsigned int *)(v12 + 8080);
    if ((_DWORD)v14)
    {
      *(_DWORD *)(v13 + 16) = v14 - *(_DWORD *)(v13 + 20);
      impl_casual_case = *(_QWORD *)(v13 + 8) - v14;
      *(_BYTE *)v13 = 0;
      v16 = 1;
      goto LABEL_11;
    }
    v17 = *(_QWORD *)(v13 + 40);
    v18 = *(_QWORD *)(v13 + 24);
    if (v17)
    {
LABEL_10:
      v19 = __clz(v17);
      *(_QWORD *)(v13 + 40) = v17 & ~(0x8000000000000000 >> v19);
      impl_casual_case = v18 + 16 * v19;
      *(_BYTE *)v13 = 0;
      v16 = 1;
      goto LABEL_11;
    }
    if (*(_BYTE *)(v13 + 5) == 6)
    {
      v22 = *(unsigned int *)(v13 + 32);
      v23 = *(_DWORD *)(v13 + 36);
      if (v22 < v23)
      {
        *(_QWORD *)(v13 + 8 * v22 + 56) = 0;
        v24 = (unint64_t *)(8 * v22 + 8 * v11 + v9 + 8128);
        v25 = v23 - 1 - v22;
        while (v25)
        {
          v18 += 1024;
          v27 = *v24++;
          v26 = v27;
          LODWORD(v22) = v22 + 1;
          --v25;
          if (v27)
          {
            v17 = __rbit64(v26);
            *(_DWORD *)(v13 + 32) = v22;
            *(_QWORD *)(v13 + 24) = v18;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v13 + 32) = v23;
      }
    }
    *(_BYTE *)v13 = 0;
  }
LABEL_29:
  impl_casual_case = (unint64_t)bmalloc_allocate_impl_casual_case(this, 1, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0)
    return impl_casual_case;
LABEL_11:
  if ((v16 & 0xFFFFFFFF00000000) == 0x100000000)
    return impl_casual_case;
  if (this >> 24)
  {
    v20 = pas_page_malloc_cached_alignment;
    if (pas_page_malloc_cached_alignment)
    {
      if (((pas_page_malloc_cached_alignment - 1) & (this | impl_casual_case)) == 0)
      {
LABEL_15:
        if (!v20)
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
        mmap((void *)impl_casual_case, this, 3, 4114, 889192448, 0);
        return impl_casual_case;
      }
    }
    else
    {
      v20 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v20;
      if (((v20 - 1) & (this | impl_casual_case)) == 0)
        goto LABEL_15;
    }
  }
  bzero((void *)impl_casual_case, this);
  return impl_casual_case;
}

void WTF::tryFastZeroedMalloc(size_t this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t *a8@<X8>)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t impl_casual_case;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (this + 15) >> 4;
    if (this + 15 <= 0x1AF)
    {
      v12 = 23 * v11 + 7;
    }
    else
    {
      if ((this + 15) >> 5 > 0x138)
        goto LABEL_29;
      v12 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v11 + 626);
      if (*(_DWORD *)(v10 + 8052) <= v12)
        goto LABEL_29;
    }
    v13 = v10 + 8 * v12;
    v14 = v13 + 8064;
    *(_BYTE *)(v13 + 8064) = 1;
    v15 = *(unsigned int *)(v13 + 8080);
    if ((_DWORD)v15)
    {
      *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
      impl_casual_case = *(_QWORD *)(v14 + 8) - v15;
      *(_BYTE *)v14 = 0;
      v17 = 1;
      goto LABEL_11;
    }
    v18 = *(_QWORD *)(v14 + 40);
    v19 = *(_QWORD *)(v14 + 24);
    if (v18)
    {
LABEL_10:
      v20 = __clz(v18);
      *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
      impl_casual_case = v19 + 16 * v20;
      *(_BYTE *)v14 = 0;
      v17 = 1;
      goto LABEL_11;
    }
    if (*(_BYTE *)(v14 + 5) == 6)
    {
      v22 = *(unsigned int *)(v14 + 32);
      v23 = *(_DWORD *)(v14 + 36);
      if (v22 < v23)
      {
        *(_QWORD *)(v14 + 8 * v22 + 56) = 0;
        v24 = (unint64_t *)(8 * v22 + 8 * v12 + v10 + 8128);
        v25 = v23 - 1 - v22;
        while (v25)
        {
          v19 += 1024;
          v27 = *v24++;
          v26 = v27;
          LODWORD(v22) = v22 + 1;
          --v25;
          if (v27)
          {
            v18 = __rbit64(v26);
            *(_DWORD *)(v14 + 32) = v22;
            *(_QWORD *)(v14 + 24) = v19;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v14 + 32) = v23;
      }
    }
    *(_BYTE *)v14 = 0;
  }
LABEL_29:
  impl_casual_case = (unint64_t)bmalloc_try_allocate_impl_casual_case(this, 1, a2, a3, a4, a5, a6, a7);
  if ((v17 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  if ((v17 & 0xFFFFFFFF00000000) == 0x100000000)
  {
LABEL_18:
    *a8 = impl_casual_case;
    return;
  }
  if (this >> 24)
  {
    v21 = pas_page_malloc_cached_alignment;
    if (pas_page_malloc_cached_alignment)
    {
      if (((pas_page_malloc_cached_alignment - 1) & (this | impl_casual_case)) == 0)
      {
LABEL_15:
        if (!v21)
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
        mmap((void *)impl_casual_case, this, 3, 4114, 889192448, 0);
        goto LABEL_18;
      }
    }
    else
    {
      v21 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v21;
      if (((v21 - 1) & (this | impl_casual_case)) == 0)
        goto LABEL_15;
    }
  }
  bzero((void *)impl_casual_case, this);
  *a8 = impl_casual_case;
}

uint64_t WTF::fastCalloc(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (is_mul_ok(a2, this))
    return WTF::fastZeroedMalloc(a2 * this, a2, a3, a4, a5, a6, a7, a8);
  __break(0xC471u);
  return this;
}

void *WTF::fastRealloc(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  void *impl_for_realloc;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  os_unfair_lock_s *v47;
  os_unfair_lock_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  size_t v61;
  unint64_t StatusReg;
  os_unfair_lock_s *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t allocation_size_with_page;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  void *v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  void *v110;
  size_t v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  char *v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  os_unfair_lock_s *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  unint64_t v162;
  _BOOL8 v163;
  unint64_t v164;
  unint64_t v165;
  int8x16_t *v166;
  int8x16_t v167;
  int8x16_t v168;
  unint64_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x8_t v176;
  int8x8_t *v177;
  unint64_t v178;
  int8x8_t v179;
  int8x8_t v180;
  uint64_t v181;
  _BYTE *v182;
  char v183;
  int v184;
  unsigned int v185;
  unint64_t v186[3];

  if (!(this >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) != 0)
  {
LABEL_3:
    v10 = *(unsigned int *)((this & 0xFFFFFFFFFFFFC000) + 4);
    impl_for_realloc = bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
    v12 = impl_for_realloc;
    if (!impl_for_realloc)
      return v12;
    if (a2 >= v10)
      v13 = v10;
    else
      v13 = a2;
    memcpy(impl_for_realloc, (const void *)this, v13);
    v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v19)
    {
LABEL_8:
      v20 = *(unsigned int *)(v19 + 8000);
      if (v20 >= 0x3E7)
      {
        v68 = (WTF *)this;
        v69 = 5;
LABEL_76:
        pas_thread_local_cache_append_deallocation_slow(v19, (uint64_t)v68, (os_unfair_lock_s *)v69, v14, v15, v16, v17, v18);
      }
      else
      {
        v21 = this | 0x5000000000000;
LABEL_10:
        *(_QWORD *)(v19 + 8 * v20) = v21;
        *(_DWORD *)(v19 + 8000) = v20 + 1;
      }
      return v12;
    }
LABEL_143:
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    return v12;
  }
  if (this >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > this >> 24)
  {
    v22 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
    if (v22)
    {
      if (v22 != 2)
      {
        if (v22 == 1)
          goto LABEL_3;
        return 0;
      }
      v30 = this & 0xFFFFFFFFFFFFC000;
      v53 = *(unsigned __int8 *)(this & 0xFFFFFFFFFFFFC000);
      if (v53 != 5)
      {
        if (v53 != 1)
          return 0;
        v54 = (this >> 8) & 0x3F;
        v55 = *(unsigned int *)((*(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8) + 4 * v54 + 20);
        if ((_DWORD)v55)
          v56 = pas_compact_heap_reservation_base + 8 * v55;
        else
          v56 = 0;
        v57 = *(unsigned __int16 *)(v56 + 7) | ((unint64_t)*(unsigned __int8 *)(v56 + 9) << 16);
        if ((_DWORD)v57)
          v58 = pas_compact_heap_reservation_base + 8 * v57;
        else
          v58 = 0;
        v59 = *(_DWORD *)(v58 + 24);
        v60 = bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
        v12 = v60;
        if (!v60)
          return v12;
        if (a2 >= (v59 & 0x7FFFFFFu))
          v61 = v59 & 0x7FFFFFF;
        else
          v61 = a2;
        memcpy(v60, (const void *)this, v61);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        if (!*(_QWORD *)(StatusReg + 752))
          goto LABEL_143;
        v63 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
        if (v63)
          v48 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v63);
        else
          v48 = 0;
        v64 = v30 + 4 * ((this >> 9) & 0x1F);
        v65 = *(_DWORD *)(v64 + 44) & ~(1 << (this >> 4));
        *(_DWORD *)(v64 + 44) = v65;
        v66 = *(unsigned int *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v54 + 20);
        if ((_DWORD)v66)
          v67 = pas_compact_heap_reservation_base + 8 * v66;
        else
          v67 = 0;
        if ((*(_BYTE *)(v67 + 19) & 4) != 0)
        {
          if (!v65)
          {
LABEL_71:
            if (*(_QWORD *)(v30 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v30, 0);
              if (!v48)
                return v12;
            }
            else
            {
              --*(_QWORD *)(v30 + 24);
              if (!v48)
                return v12;
            }
            goto LABEL_106;
          }
        }
        else
        {
          pas_segregated_partial_view_note_eligibility(v67, v30);
          if (!v65)
            goto LABEL_71;
        }
        if (!v48)
          return v12;
LABEL_106:
        v99 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v100 = __ldxr(&v48->_os_unfair_lock_opaque);
          if (v100 != v99)
            break;
          if (!__stlxr(0, &v48->_os_unfair_lock_opaque))
            return v12;
        }
LABEL_224:
        __clrex();
        os_unfair_lock_unlock(v48);
        return v12;
      }
LABEL_83:
      allocation_size_with_page = bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v30, this);
      v80 = bmalloc_allocate_impl_for_realloc(a2, 1, v74, v75, v76, v77, v78, v79);
      v12 = v80;
      if (!v80)
        return v12;
      if (a2 >= allocation_size_with_page)
        v81 = allocation_size_with_page;
      else
        v81 = a2;
      memcpy(v80, (const void *)this, v81);
      bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page(v30, this, v82, v83, v84, v85, v86, v87);
LABEL_155:
      if (*MEMORY[0x1E0C83EB8])
        pas_msl_free_logging_slow(this);
      return v12;
    }
  }
  v23 = this & 0xFFFFFFFFFFFE0000;
  if (off_1ECF42618)
  {
    v24 = (this >> 17) ^ ((this >> 17) >> 4);
    v25 = ((v24 ^ 0xDEADBEEF) + 32 * v24) ^ (((v24 ^ 0xDEADBEEF) + 32 * v24) >> 11);
    v26 = (char *)off_1ECF42618 + 32;
    v27 = *((_DWORD *)off_1ECF42618 + 3) & v25;
    v28 = *((_QWORD *)off_1ECF42618 + 2 * v27 + 4);
    if (v28 == v23)
    {
LABEL_22:
      v30 = *(_QWORD *)&v26[16 * v27 + 8];
      if (v30)
      {
LABEL_29:
        switch(*(_BYTE *)v30)
        {
          case 1:
            v37 = (this >> 8) & 0x3F;
            v38 = *(unsigned int *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v37 + 20);
            if ((_DWORD)v38)
              v39 = pas_compact_heap_reservation_base + 8 * v38;
            else
              v39 = 0;
            v40 = *(unsigned __int16 *)(v39 + 7) | ((unint64_t)*(unsigned __int8 *)(v39 + 9) << 16);
            if ((_DWORD)v40)
              v41 = pas_compact_heap_reservation_base + 8 * v40;
            else
              v41 = 0;
            v42 = *(_DWORD *)(v41 + 24);
            v43 = bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v12 = v43;
            if (!v43)
              return v12;
            if (a2 >= (v42 & 0x7FFFFFFu))
              v44 = v42 & 0x7FFFFFF;
            else
              v44 = a2;
            memcpy(v43, (const void *)this, v44);
            v45 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v45 + 752))
              goto LABEL_143;
            v46 = this & 0xFFFFFFFFFFFFC000;
            v47 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
            if (v47)
              v48 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v47);
            else
              v48 = 0;
            v49 = v46 + 4 * ((this >> 9) & 0x1F);
            v50 = *(_DWORD *)(v49 + 44) & ~(1 << (this >> 4));
            *(_DWORD *)(v49 + 44) = v50;
            v51 = *(unsigned int *)((*(_QWORD *)(v46 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v37 + 20);
            if ((_DWORD)v51)
              v52 = pas_compact_heap_reservation_base + 8 * v51;
            else
              v52 = 0;
            if ((*(_BYTE *)(v52 + 19) & 4) != 0)
            {
              if (!v50)
                goto LABEL_48;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v52, v46);
              if (!v50)
              {
LABEL_48:
                if (*(_QWORD *)(v46 + 24) == 1)
                {
                  pas_segregated_page_note_emptiness(v46, 0);
                  if (!v48)
                    return v12;
                }
                else
                {
                  --*(_QWORD *)(v46 + 24);
                  if (!v48)
                    return v12;
                }
LABEL_159:
                v148 = *(_DWORD *)(v45 + 24);
                do
                {
                  v149 = __ldxr(&v48->_os_unfair_lock_opaque);
                  if (v149 != v148)
                    goto LABEL_224;
                }
                while (__stlxr(0, &v48->_os_unfair_lock_opaque));
                return v12;
              }
            }
            if (!v48)
              return v12;
            goto LABEL_159;
          case 2:
            v101 = *(unsigned int *)(v30 + 4);
            v102 = bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v12 = v102;
            if (!v102)
              return v12;
            if (a2 >= v101)
              v103 = v101;
            else
              v103 = a2;
            memcpy(v102, (const void *)this, v103);
            v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v19)
              goto LABEL_143;
            goto LABEL_8;
          case 3:
            v104 = (this >> 12) & 0x1F;
            v105 = *(unsigned int *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v104 + 20);
            if ((_DWORD)v105)
              v106 = pas_compact_heap_reservation_base + 8 * v105;
            else
              v106 = 0;
            v107 = *(unsigned __int16 *)(v106 + 7) | ((unint64_t)*(unsigned __int8 *)(v106 + 9) << 16);
            if ((_DWORD)v107)
              v108 = pas_compact_heap_reservation_base + 8 * v107;
            else
              v108 = 0;
            v109 = *(_DWORD *)(v108 + 24);
            v110 = bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v12 = v110;
            if (!v110)
              return v12;
            if (a2 >= (v109 & 0x7FFFFFFu))
              v111 = v109 & 0x7FFFFFF;
            else
              v111 = a2;
            memcpy(v110, (const void *)this, v111);
            v112 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v112 + 752))
              goto LABEL_143;
            if (!off_1ECF42618)
              goto LABEL_167;
            v113 = (this >> 17) ^ ((this >> 17) >> 4);
            v114 = ((v113 ^ 0xDEADBEEF) + 32 * v113) ^ (((v113 ^ 0xDEADBEEF) + 32 * v113) >> 11);
            v115 = (char *)off_1ECF42618 + 32;
            v116 = *((_DWORD *)off_1ECF42618 + 3) & v114;
            v117 = *((_QWORD *)off_1ECF42618 + 2 * v116 + 4);
            if (v117 == v23)
              goto LABEL_132;
            v118 = v114 + 1;
            while (v117 != -1)
            {
              v116 = *((_DWORD *)off_1ECF42618 + 3) & v118;
              v117 = *(_QWORD *)&v115[16 * v116];
              ++v118;
              if (v117 == v23)
              {
LABEL_132:
                v119 = *(_QWORD *)&v115[16 * v116 + 8];
                goto LABEL_168;
              }
            }
LABEL_167:
            v119 = 0;
LABEL_168:
            v150 = *(os_unfair_lock_s **)(v119 + 8);
            if (v150)
              v48 = pas_segregated_page_switch_lock_slow(v119, 0, v150);
            else
              v48 = 0;
            v151 = v119 + 4 * ((this >> 14) & 7);
            v152 = *(_DWORD *)(v151 + 44) & ~(1 << (this >> 9));
            *(_DWORD *)(v151 + 44) = v152;
            v153 = *(_QWORD *)(v119 + 32);
            v154 = *(unsigned int *)((v153 & 0xFFFFFFFFFFFFFFF8) + 4 * v104 + 20);
            if ((_DWORD)v154)
              v155 = pas_compact_heap_reservation_base + 8 * v154;
            else
              v155 = 0;
            if ((*(_BYTE *)(v155 + 19) & 4) == 0)
            {
              pas_segregated_partial_view_note_eligibility(v155, v119);
              v153 = *(_QWORD *)(v119 + 32);
            }
            if ((v153 & 6) != 0)
            {
              v156 = *(unsigned int *)((v153 & 0xFFFFFFFFFFFFFFF8) + 4 * v104 + 20);
              if ((_DWORD)v156)
                v157 = pas_compact_heap_reservation_base + 8 * v156;
              else
                v157 = 0;
              v158 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v157 + 7)) | ((unint64_t)*(unsigned __int8 *)(v157 + 9) << 19))
                               + pas_compact_heap_reservation_base
                               + 24) & 0x7FFFFFF;
            }
            else
            {
              v158 = *(_DWORD *)(v119 + 4);
            }
            if (!v158 || (v159 = (this & 0x1FFFF) >> 14, v160 = ((this & 0x1FFFF) + v158 - 1) >> 14, v159 > v160))
            {
              v161 = 1;
              goto LABEL_204;
            }
            v162 = v160 - v159 + 1;
            if (v162 < 8)
            {
              LOBYTE(v163) = 0;
              v164 = (this & 0x1FFFF) >> 14;
              goto LABEL_199;
            }
            if (v162 >= 0x20)
            {
              v165 = v162 & 0xFFFFFFFFFFFFFFE0;
              v166 = (int8x16_t *)(v159 + v119 + 92);
              v167 = 0uLL;
              v168.i64[0] = -1;
              v168.i64[1] = -1;
              v169 = v162 & 0xFFFFFFFFFFFFFFE0;
              v170 = 0uLL;
              do
              {
                v171 = vaddq_s8(v166[-1], v168);
                v172 = vaddq_s8(*v166, v168);
                v166[-1] = v171;
                *v166 = v172;
                v173 = vceqzq_s8(v171);
                v174 = vceqzq_s8(v172);
                v167 = vsubq_s8(vbicq_s8(v167, v173), v173);
                v170 = vsubq_s8(vbicq_s8(v170, v174), v174);
                v166 += 2;
                v169 -= 32;
              }
              while (v169);
              v175 = vorrq_s8(v167, v170);
              LODWORD(v163) = vmaxvq_u8((uint8x16_t)vtstq_s8(v175, v175)) & 1;
              if (v162 == v165)
                goto LABEL_203;
              if ((v162 & 0x18) == 0)
              {
                v164 = v159 | v165;
                goto LABEL_199;
              }
            }
            else
            {
              LODWORD(v163) = 0;
              v165 = 0;
            }
            v176 = vdup_n_s8(v163);
            v164 = v159 | v162 & 0xFFFFFFFFFFFFFFF8;
            v177 = (int8x8_t *)(v165 + v159 + v119 + 76);
            v178 = v165 - (v162 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v179 = vadd_s8(*v177, (int8x8_t)-1);
              *v177++ = v179;
              v180 = vceqz_s8(v179);
              v176 = vsub_s8(vbic_s8(v176, v180), v180);
              v178 += 8;
            }
            while (v178);
            v163 = *(_QWORD *)&v176 != 0;
            if (v162 == (v162 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_203;
LABEL_199:
            v181 = v160 - v164 + 1;
            v182 = (_BYTE *)(v164 + v119 + 76);
            do
            {
              v183 = *v182 - 1;
              *v182++ = v183;
              if (!v183)
                LOBYTE(v163) = 1;
              --v181;
            }
            while (v181);
LABEL_203:
            v161 = !v163;
LABEL_204:
            if (pas_segregated_page_deallocate_should_verify_granules)
              pas_segregated_page_verify_granules((unsigned __int8 *)v119);
            if (v161)
            {
              if (v152)
                goto LABEL_208;
            }
            else
            {
              pas_segregated_page_note_emptiness(v119, 1);
              if (v152)
              {
LABEL_208:
                if (!v48)
                  return v12;
                goto LABEL_209;
              }
            }
            if (*(_QWORD *)(v119 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v119, 0);
              if (!v48)
                return v12;
            }
            else
            {
              --*(_QWORD *)(v119 + 24);
              if (!v48)
                return v12;
            }
LABEL_209:
            v184 = *(_DWORD *)(v112 + 24);
            while (1)
            {
              v185 = __ldxr(&v48->_os_unfair_lock_opaque);
              if (v185 != v184)
                break;
              if (!__stlxr(0, &v48->_os_unfair_lock_opaque))
                return v12;
            }
            goto LABEL_224;
          case 4:
            v120 = *(unsigned int *)(v30 + 4);
            v121 = bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v12 = v121;
            if (!v121)
              return v12;
            if (a2 >= v120)
              v122 = v120;
            else
              v122 = a2;
            memcpy(v121, (const void *)this, v122);
            v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v19)
              goto LABEL_143;
            v123 = (this >> 17) ^ ((this >> 17) >> 4);
            v124 = ((v123 ^ 0xDEADBEEF) + 32 * v123) ^ (((v123 ^ 0xDEADBEEF) + 32 * v123) >> 11);
            v125 = (char *)off_1ECF42618 + 32;
            v126 = *((_DWORD *)off_1ECF42618 + 3) & v124;
            if (*((_QWORD *)off_1ECF42618 + 2 * v126 + 4) != v23)
            {
              v127 = v124 + 1;
              do
                v126 = *((_DWORD *)off_1ECF42618 + 3) & v127++;
              while (*(_QWORD *)&v125[16 * v126] != v23);
            }
            v128 = *(_QWORD *)(v19 + 8008) + *(unsigned int *)(*(_QWORD *)&v125[16 * v126 + 8] + 4);
            if (v128 > 0xC350
              || (*(_QWORD *)(v19 + 8008) = v128, v20 = *(unsigned int *)(v19 + 8000), v20 >= 0x3E7))
            {
              v68 = (WTF *)this;
              v69 = 7;
              goto LABEL_76;
            }
            v21 = this | 0x7000000000000;
            goto LABEL_10;
          case 5:
            goto LABEL_83;
          case 6:
            v130 = bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(v30, this);
            v137 = bmalloc_allocate_impl_for_realloc(a2, 1, v131, v132, v133, v134, v135, v136);
            v12 = v137;
            if (!v137)
              return v12;
            if (a2 >= v130)
              v138 = v130;
            else
              v138 = a2;
            memcpy(v137, (const void *)this, v138);
            bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page(v30, this);
            goto LABEL_155;
          case 7:
            v139 = bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(v30, this);
            v146 = bmalloc_allocate_impl_for_realloc(a2, 1, v140, v141, v142, v143, v144, v145);
            v12 = v146;
            if (!v146)
              return v12;
            if (a2 >= v139)
              v147 = v139;
            else
              v147 = a2;
            memcpy(v146, (const void *)this, v147);
            bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page(v30, this);
            goto LABEL_155;
          default:
            return 0;
        }
      }
    }
    else
    {
      v29 = v25 + 1;
      while (v28 != -1)
      {
        v27 = *((_DWORD *)off_1ECF42618 + 3) & v29;
        v28 = *(_QWORD *)&v26[16 * v27];
        ++v29;
        if (v28 == v23)
          goto LABEL_22;
      }
    }
  }
  if (!off_1ECF42608)
    goto LABEL_77;
  v31 = (this >> 22) ^ ((this >> 22) >> 4);
  v32 = ((v31 ^ 0xDEADBEEF) + 32 * v31) ^ (((v31 ^ 0xDEADBEEF) + 32 * v31) >> 11);
  v33 = (char *)off_1ECF42608 + 32;
  v34 = *((_DWORD *)off_1ECF42608 + 3) & v32;
  v35 = *((_QWORD *)off_1ECF42608 + 2 * v34 + 4);
  if (v35 == (this & 0xFFFFFFFFFFC00000))
  {
LABEL_28:
    v30 = *(_QWORD *)&v33[16 * v34 + 8];
    if (!v30)
      goto LABEL_77;
    goto LABEL_29;
  }
  v36 = v32 + 1;
  while (v35 != -1)
  {
    v34 = *((_DWORD *)off_1ECF42608 + 3) & v36;
    v35 = *(_QWORD *)&v33[16 * v34];
    ++v36;
    if (v35 == (this & 0xFFFFFFFFFFC00000))
      goto LABEL_28;
  }
LABEL_77:
  if (!this)
    return bmalloc_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
  if (pas_debug_heap_is_enabled(2))
    return pas_debug_heap_realloc((void *)this, a2);
  v70 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v71 = *(_DWORD *)(v70 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v71, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_90;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_90:
  if (pas_probabilistic_guard_malloc_check_exists(this))
  {
    pas_probabilistic_guard_malloc_return_as_large_map_entry(this, v186);
  }
  else
  {
    pas_large_map_find(this, v186);
    if (!v186[0])
      pas_reallocation_did_fail((uint64_t)"Source object not allocated", 0, (uint64_t)&bmalloc_common_primitive_heap, this, 0, a2, v92, v93);
  }
  v94 = v186[1] - this;
  v95 = *(_DWORD *)(v70 + 24);
  while (1)
  {
    v96 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v96 != v95)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_98;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_98:
  v97 = bmalloc_allocate_impl_for_realloc(a2, 1, v88, v89, v90, v91, v92, v93);
  v12 = v97;
  if (v97)
  {
    if (a2 >= v94)
      v98 = v94;
    else
      v98 = a2;
    memcpy(v97, (const void *)this, v98);
    if (!pas_try_deallocate_pgm_large(this, (uint64_t)&bmalloc_heap_config))
      pas_deallocate_known_large(this, (uint64_t)&bmalloc_heap_config);
    goto LABEL_155;
  }
  return v12;
}

void WTF::fastFree(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF *v11;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v9)
  {
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (this >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) == 0)
  {
    if (this >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= this >> 24)
    {
      a4 = 0;
      v11 = (WTF *)this;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_4;
      v11 = (WTF *)this;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v9, (unint64_t)v11, 1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_4:
  v10 = *(unsigned int *)(v9 + 8000);
  if (v10 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v9, this, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 8 * v10) = this | 0x5000000000000;
    *(_DWORD *)(v9 + 8000) = v10 + 1;
  }
}

uint64_t WTF::fastMallocSize(WTF *this, const void *a2)
{
  uint64_t result;

  if (bmalloc::debugHeapCache == 1)
    return bmalloc_get_allocation_size((unint64_t)this);
  if (bmalloc::debugHeapCache)
    return malloc_size(this);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    return bmalloc_get_allocation_size((unint64_t)this);
  }
LABEL_5:
  result = bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = result;
  if (result)
    return malloc_size(this);
  __break(0xC471u);
  return result;
}

uint64_t WTF::fastMallocGoodSize(size_t size)
{
  uint64_t result;

  if (bmalloc::debugHeapCache == 1)
    return size;
  if (bmalloc::debugHeapCache)
    return malloc_good_size(size);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    return size;
  }
LABEL_5:
  result = bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = result;
  if (result)
    return malloc_good_size(size);
  __break(0xC471u);
  return result;
}

void *WTF::fastAlignedMalloc(unint64_t this, size_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = (uint8x8_t)vcnt_s8((int8x8_t)this);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] != 1)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v9 = (this + a2 - 1) & -(uint64_t)this;
  if (a2 < this)
    v9 = this;
  if (this == 1)
    v9 = a2;
  v10 = v9 + 15;
  if (v10 >> 5 > 0x138)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v11)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v12 = *((unsigned int *)&bmalloc_common_primitive_heap_support + (v10 >> 4) + 626);
  if (*(_DWORD *)(v11 + 8052) <= v12)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v13 = v11 + 8 * v12 + 8064;
  if (this != 1 && 1 << *(_BYTE *)(v11 + 8 * v12 + 8068) < this)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  *(_BYTE *)v13 = 1;
  v15 = *(unsigned int *)(v11 + 8 * v12 + 8080);
  if ((_DWORD)v15)
  {
    *(_DWORD *)(v11 + 8 * v12 + 8080) = v15 - *(_DWORD *)(v11 + 8 * v12 + 8084);
    result = (void *)(*(_QWORD *)(v11 + 8 * v12 + 8072) - v15);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8 * v12 + 8104);
    v17 = *(_QWORD *)(v11 + 8 * v12 + 8088);
    if (v16)
    {
LABEL_15:
      v18 = __clz(v16);
      *(_QWORD *)(v13 + 40) = v16 & ~(0x8000000000000000 >> v18);
      result = (void *)(v17 + 16 * v18);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 8 * v12 + 8069) == 6)
      {
        v19 = *(unsigned int *)(v11 + 8 * v12 + 8096);
        v20 = *(_DWORD *)(v11 + 8 * v12 + 8100);
        if (v19 < v20)
        {
          *(_QWORD *)(v13 + 8 * v19 + 56) = 0;
          v21 = (unint64_t *)(8 * v19 + 8 * v12 + v11 + 8128);
          v22 = v20 - 1 - v19;
          while (v22)
          {
            v17 += 1024;
            v24 = *v21++;
            v23 = v24;
            LODWORD(v19) = v19 + 1;
            --v22;
            if (v24)
            {
              v16 = __rbit64(v23);
              *(_DWORD *)(v13 + 32) = v19;
              *(_QWORD *)(v13 + 24) = v17;
              goto LABEL_15;
            }
          }
          *(_DWORD *)(v13 + 32) = v20;
        }
      }
      *(_BYTE *)v13 = 0;
      return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

void *WTF::tryFastAlignedMalloc(unint64_t this, size_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = (uint8x8_t)vcnt_s8((int8x8_t)this);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] != 1)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v9 = (this + a2 - 1) & -(uint64_t)this;
  if (a2 < this)
    v9 = this;
  if (this == 1)
    v9 = a2;
  v10 = v9 + 15;
  if (v10 >> 5 > 0x138)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v11)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v12 = *((unsigned int *)&bmalloc_common_primitive_heap_support + (v10 >> 4) + 626);
  if (*(_DWORD *)(v11 + 8052) <= v12)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  v13 = v11 + 8 * v12 + 8064;
  if (this != 1 && 1 << *(_BYTE *)(v11 + 8 * v12 + 8068) < this)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
  *(_BYTE *)v13 = 1;
  v15 = *(unsigned int *)(v11 + 8 * v12 + 8080);
  if ((_DWORD)v15)
  {
    *(_DWORD *)(v11 + 8 * v12 + 8080) = v15 - *(_DWORD *)(v11 + 8 * v12 + 8084);
    result = (void *)(*(_QWORD *)(v11 + 8 * v12 + 8072) - v15);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8 * v12 + 8104);
    v17 = *(_QWORD *)(v11 + 8 * v12 + 8088);
    if (v16)
    {
LABEL_15:
      v18 = __clz(v16);
      *(_QWORD *)(v13 + 40) = v16 & ~(0x8000000000000000 >> v18);
      result = (void *)(v17 + 16 * v18);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 8 * v12 + 8069) == 6)
      {
        v19 = *(unsigned int *)(v11 + 8 * v12 + 8096);
        v20 = *(_DWORD *)(v11 + 8 * v12 + 8100);
        if (v19 < v20)
        {
          *(_QWORD *)(v13 + 8 * v19 + 56) = 0;
          v21 = (unint64_t *)(8 * v19 + 8 * v12 + v11 + 8128);
          v22 = v20 - 1 - v19;
          while (v22)
          {
            v17 += 1024;
            v24 = *v21++;
            v23 = v24;
            LODWORD(v19) = v19 + 1;
            --v22;
            if (v24)
            {
              v16 = __rbit64(v23);
              *(_DWORD *)(v13 + 32) = v19;
              *(_QWORD *)(v13 + 24) = v17;
              goto LABEL_15;
            }
          }
          *(_DWORD *)(v13 + 32) = v20;
        }
      }
      *(_BYTE *)v13 = 0;
      return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 1, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

void WTF::fastAlignedFree(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF *v11;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v9)
  {
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (this >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) == 0)
  {
    if (this >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= this >> 24)
    {
      a4 = 0;
      v11 = (WTF *)this;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_4;
      v11 = (WTF *)this;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v9, (unint64_t)v11, 1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_4:
  v10 = *(unsigned int *)(v9 + 8000);
  if (v10 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v9, this, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 8 * v10) = this | 0x5000000000000;
    *(_DWORD *)(v9 + 8000) = v10 + 1;
  }
}

uint64_t WTF::tryFastMalloc@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v3)
    goto LABEL_19;
  v4 = ((unint64_t)this + 15) >> 4;
  if ((unint64_t)this + 15 <= 0x1AF)
  {
    v5 = 23 * v4 + 7;
  }
  else
  {
    if (((unint64_t)this + 15) >> 5 > 0x138)
      goto LABEL_19;
    v5 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v4 + 626);
    if (*(_DWORD *)(v3 + 8052) <= v5)
      goto LABEL_19;
  }
  v6 = v3 + 8 * v5;
  v7 = v6 + 8064;
  *(_BYTE *)(v6 + 8064) = 1;
  v8 = *(unsigned int *)(v6 + 8080);
  if ((_DWORD)v8)
  {
    *(_DWORD *)(v7 + 16) = v8 - *(_DWORD *)(v7 + 20);
    result = *(_QWORD *)(v7 + 8) - v8;
    *(_BYTE *)v7 = 0;
    *a2 = result;
    return result;
  }
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 24);
  if (v10)
  {
LABEL_10:
    v12 = __clz(v10);
    *(_QWORD *)(v7 + 40) = v10 & ~(0x8000000000000000 >> v12);
    result = v11 + 16 * v12;
    *(_BYTE *)v7 = 0;
    *a2 = result;
    return result;
  }
  if (*(_BYTE *)(v7 + 5) == 6)
  {
    v13 = *(unsigned int *)(v7 + 32);
    v14 = *(_DWORD *)(v7 + 36);
    if (v13 < v14)
    {
      *(_QWORD *)(v7 + 8 * v13 + 56) = 0;
      v15 = (unint64_t *)(8 * v13 + 8 * v5 + v3 + 8128);
      v16 = v14 - 1 - v13;
      while (v16)
      {
        v11 += 1024;
        v18 = *v15++;
        v17 = v18;
        LODWORD(v13) = v13 + 1;
        --v16;
        if (v18)
        {
          v10 = __rbit64(v17);
          *(_DWORD *)(v7 + 32) = v13;
          *(_QWORD *)(v7 + 24) = v11;
          goto LABEL_10;
        }
      }
      *(_DWORD *)(v7 + 32) = v14;
    }
  }
  *(_BYTE *)v7 = 0;
LABEL_19:
  result = bmalloc_try_allocate_casual(this, 1);
  *a2 = result;
  return result;
}

void WTF::tryFastCalloc(unint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  if (is_mul_ok(a2, this))
    WTF::tryFastZeroedMalloc(a2 * this, a3, a4, a5, a6, a7, a8, a9);
  else
    *a9 = 0;
}

void WTF::tryFastRealloc(unint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unint64_t v12;
  void *impl_for_realloc;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  size_t v46;
  unint64_t v47;
  unint64_t v48;
  os_unfair_lock_s *v49;
  os_unfair_lock_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  size_t v63;
  unint64_t StatusReg;
  os_unfair_lock_s *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t allocation_size_with_page;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  void *v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  unint64_t v103;
  void *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  void *v112;
  size_t v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  unint64_t v124;
  int v125;
  unsigned int v126;
  char *v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  unint64_t v148;
  int v149;
  unsigned int v150;
  os_unfair_lock_s *v151;
  os_unfair_lock_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  unint64_t v164;
  _BOOL8 v165;
  unint64_t v166;
  unint64_t v167;
  int8x16_t *v168;
  int8x16_t v169;
  int8x16_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x8_t v178;
  int8x8_t *v179;
  unint64_t v180;
  int8x8_t v181;
  int8x8_t v182;
  uint64_t v183;
  _BYTE *v184;
  char v185;
  int v186;
  unsigned int v187;
  unint64_t v188[3];

  if (!(this >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) != 0)
  {
LABEL_3:
    v12 = *(unsigned int *)((this & 0xFFFFFFFFFFFFC000) + 4);
    impl_for_realloc = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
    v14 = impl_for_realloc;
    if (!impl_for_realloc)
      goto LABEL_144;
    if (a2 >= v12)
      v15 = v12;
    else
      v15 = a2;
    memcpy(impl_for_realloc, (const void *)this, v15);
    v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v21)
    {
LABEL_8:
      v22 = *(unsigned int *)(v21 + 8000);
      if (v22 >= 0x3E7)
      {
        v70 = (WTF *)this;
        v71 = 5;
LABEL_76:
        pas_thread_local_cache_append_deallocation_slow(v21, (uint64_t)v70, (os_unfair_lock_s *)v71, v16, v17, v18, v19, v20);
      }
      else
      {
        v23 = this | 0x5000000000000;
LABEL_10:
        *(_QWORD *)(v21 + 8 * v22) = v23;
        *(_DWORD *)(v21 + 8000) = v22 + 1;
      }
      goto LABEL_144;
    }
LABEL_143:
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    goto LABEL_144;
  }
  if (this >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > this >> 24)
  {
    v24 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
    if (v24)
    {
      if (v24 != 2)
      {
        if (v24 == 1)
          goto LABEL_3;
LABEL_74:
        v14 = 0;
        goto LABEL_144;
      }
      v32 = this & 0xFFFFFFFFFFFFC000;
      v55 = *(unsigned __int8 *)(this & 0xFFFFFFFFFFFFC000);
      if (v55 != 5)
      {
        if (v55 != 1)
          goto LABEL_74;
        v56 = (this >> 8) & 0x3F;
        v57 = *(unsigned int *)((*(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8) + 4 * v56 + 20);
        if ((_DWORD)v57)
          v58 = pas_compact_heap_reservation_base + 8 * v57;
        else
          v58 = 0;
        v59 = *(unsigned __int16 *)(v58 + 7) | ((unint64_t)*(unsigned __int8 *)(v58 + 9) << 16);
        if ((_DWORD)v59)
          v60 = pas_compact_heap_reservation_base + 8 * v59;
        else
          v60 = 0;
        v61 = *(_DWORD *)(v60 + 24);
        v62 = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
        v14 = v62;
        if (!v62)
          goto LABEL_144;
        if (a2 >= (v61 & 0x7FFFFFFu))
          v63 = v61 & 0x7FFFFFF;
        else
          v63 = a2;
        memcpy(v62, (const void *)this, v63);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        if (!*(_QWORD *)(StatusReg + 752))
          goto LABEL_143;
        v65 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
        if (v65)
          v50 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v65);
        else
          v50 = 0;
        v66 = v32 + 4 * ((this >> 9) & 0x1F);
        v67 = *(_DWORD *)(v66 + 44) & ~(1 << (this >> 4));
        *(_DWORD *)(v66 + 44) = v67;
        v68 = *(unsigned int *)((*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v56 + 20);
        if ((_DWORD)v68)
          v69 = pas_compact_heap_reservation_base + 8 * v68;
        else
          v69 = 0;
        if ((*(_BYTE *)(v69 + 19) & 4) != 0)
        {
          if (!v67)
          {
LABEL_71:
            if (*(_QWORD *)(v32 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v32, 0);
              if (!v50)
                goto LABEL_144;
            }
            else
            {
              --*(_QWORD *)(v32 + 24);
              if (!v50)
                goto LABEL_144;
            }
            goto LABEL_106;
          }
        }
        else
        {
          pas_segregated_partial_view_note_eligibility(v69, v32);
          if (!v67)
            goto LABEL_71;
        }
        if (!v50)
          goto LABEL_144;
LABEL_106:
        v101 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v102 = __ldxr(&v50->_os_unfair_lock_opaque);
          if (v102 != v101)
            break;
          if (!__stlxr(0, &v50->_os_unfair_lock_opaque))
            goto LABEL_144;
        }
LABEL_221:
        __clrex();
        os_unfair_lock_unlock(v50);
        goto LABEL_144;
      }
LABEL_83:
      allocation_size_with_page = bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v32, this);
      v82 = bmalloc_try_allocate_impl_for_realloc(a2, 1, v76, v77, v78, v79, v80, v81);
      v14 = v82;
      if (!v82)
        goto LABEL_144;
      if (a2 >= allocation_size_with_page)
        v83 = allocation_size_with_page;
      else
        v83 = a2;
      memcpy(v82, (const void *)this, v83);
      bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page(v32, this, v84, v85, v86, v87, v88, v89);
LABEL_155:
      if (*MEMORY[0x1E0C83EB8])
        pas_msl_free_logging_slow(this);
      goto LABEL_144;
    }
  }
  v25 = this & 0xFFFFFFFFFFFE0000;
  if (off_1ECF42618)
  {
    v26 = (this >> 17) ^ ((this >> 17) >> 4);
    v27 = ((v26 ^ 0xDEADBEEF) + 32 * v26) ^ (((v26 ^ 0xDEADBEEF) + 32 * v26) >> 11);
    v28 = (char *)off_1ECF42618 + 32;
    v29 = *((_DWORD *)off_1ECF42618 + 3) & v27;
    v30 = *((_QWORD *)off_1ECF42618 + 2 * v29 + 4);
    if (v30 == v25)
    {
LABEL_22:
      v32 = *(_QWORD *)&v28[16 * v29 + 8];
      if (v32)
      {
LABEL_29:
        switch(*(_BYTE *)v32)
        {
          case 1:
            v39 = (this >> 8) & 0x3F;
            v40 = *(unsigned int *)((*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v39 + 20);
            if ((_DWORD)v40)
              v41 = pas_compact_heap_reservation_base + 8 * v40;
            else
              v41 = 0;
            v42 = *(unsigned __int16 *)(v41 + 7) | ((unint64_t)*(unsigned __int8 *)(v41 + 9) << 16);
            if ((_DWORD)v42)
              v43 = pas_compact_heap_reservation_base + 8 * v42;
            else
              v43 = 0;
            v44 = *(_DWORD *)(v43 + 24);
            v45 = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v14 = v45;
            if (!v45)
              goto LABEL_144;
            if (a2 >= (v44 & 0x7FFFFFFu))
              v46 = v44 & 0x7FFFFFF;
            else
              v46 = a2;
            memcpy(v45, (const void *)this, v46);
            v47 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v47 + 752))
              goto LABEL_143;
            v48 = this & 0xFFFFFFFFFFFFC000;
            v49 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
            if (v49)
              v50 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v49);
            else
              v50 = 0;
            v51 = v48 + 4 * ((this >> 9) & 0x1F);
            v52 = *(_DWORD *)(v51 + 44) & ~(1 << (this >> 4));
            *(_DWORD *)(v51 + 44) = v52;
            v53 = *(unsigned int *)((*(_QWORD *)(v48 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v39 + 20);
            if ((_DWORD)v53)
              v54 = pas_compact_heap_reservation_base + 8 * v53;
            else
              v54 = 0;
            if ((*(_BYTE *)(v54 + 19) & 4) != 0)
            {
              if (!v52)
                goto LABEL_48;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v54, v48);
              if (!v52)
              {
LABEL_48:
                if (*(_QWORD *)(v48 + 24) == 1)
                {
                  pas_segregated_page_note_emptiness(v48, 0);
                  if (!v50)
                    goto LABEL_144;
                }
                else
                {
                  --*(_QWORD *)(v48 + 24);
                  if (!v50)
                    goto LABEL_144;
                }
LABEL_159:
                v149 = *(_DWORD *)(v47 + 24);
                do
                {
                  v150 = __ldxr(&v50->_os_unfair_lock_opaque);
                  if (v150 != v149)
                    goto LABEL_221;
                }
                while (__stlxr(0, &v50->_os_unfair_lock_opaque));
                goto LABEL_144;
              }
            }
            if (!v50)
              goto LABEL_144;
            goto LABEL_159;
          case 2:
            v103 = *(unsigned int *)(v32 + 4);
            v104 = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v14 = v104;
            if (!v104)
              goto LABEL_144;
            if (a2 >= v103)
              v105 = v103;
            else
              v105 = a2;
            memcpy(v104, (const void *)this, v105);
            v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v21)
              goto LABEL_143;
            goto LABEL_8;
          case 3:
            v106 = (this >> 12) & 0x1F;
            v107 = *(unsigned int *)((*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v106 + 20);
            if ((_DWORD)v107)
              v108 = pas_compact_heap_reservation_base + 8 * v107;
            else
              v108 = 0;
            v109 = *(unsigned __int16 *)(v108 + 7) | ((unint64_t)*(unsigned __int8 *)(v108 + 9) << 16);
            if ((_DWORD)v109)
              v110 = pas_compact_heap_reservation_base + 8 * v109;
            else
              v110 = 0;
            v111 = *(_DWORD *)(v110 + 24);
            v112 = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v14 = v112;
            if (!v112)
              goto LABEL_144;
            if (a2 >= (v111 & 0x7FFFFFFu))
              v113 = v111 & 0x7FFFFFF;
            else
              v113 = a2;
            memcpy(v112, (const void *)this, v113);
            v114 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v114 + 752))
              goto LABEL_143;
            if (!off_1ECF42618)
              goto LABEL_167;
            v115 = (this >> 17) ^ ((this >> 17) >> 4);
            v116 = ((v115 ^ 0xDEADBEEF) + 32 * v115) ^ (((v115 ^ 0xDEADBEEF) + 32 * v115) >> 11);
            v117 = (char *)off_1ECF42618 + 32;
            v118 = *((_DWORD *)off_1ECF42618 + 3) & v116;
            v119 = *((_QWORD *)off_1ECF42618 + 2 * v118 + 4);
            if (v119 == v25)
              goto LABEL_132;
            v120 = v116 + 1;
            while (v119 != -1)
            {
              v118 = *((_DWORD *)off_1ECF42618 + 3) & v120;
              v119 = *(_QWORD *)&v117[16 * v118];
              ++v120;
              if (v119 == v25)
              {
LABEL_132:
                v121 = *(_QWORD *)&v117[16 * v118 + 8];
                goto LABEL_168;
              }
            }
LABEL_167:
            v121 = 0;
LABEL_168:
            v151 = *(os_unfair_lock_s **)(v121 + 8);
            if (v151)
              v152 = pas_segregated_page_switch_lock_slow(v121, 0, v151);
            else
              v152 = 0;
            v153 = v121 + 4 * ((this >> 14) & 7);
            v154 = *(_DWORD *)(v153 + 44) & ~(1 << (this >> 9));
            *(_DWORD *)(v153 + 44) = v154;
            v155 = *(_QWORD *)(v121 + 32);
            v156 = *(unsigned int *)((v155 & 0xFFFFFFFFFFFFFFF8) + 4 * v106 + 20);
            if ((_DWORD)v156)
              v157 = pas_compact_heap_reservation_base + 8 * v156;
            else
              v157 = 0;
            if ((*(_BYTE *)(v157 + 19) & 4) == 0)
            {
              pas_segregated_partial_view_note_eligibility(v157, v121);
              v155 = *(_QWORD *)(v121 + 32);
            }
            if ((v155 & 6) != 0)
            {
              v158 = *(unsigned int *)((v155 & 0xFFFFFFFFFFFFFFF8) + 4 * v106 + 20);
              if ((_DWORD)v158)
                v159 = pas_compact_heap_reservation_base + 8 * v158;
              else
                v159 = 0;
              v160 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v159 + 7)) | ((unint64_t)*(unsigned __int8 *)(v159 + 9) << 19))
                               + pas_compact_heap_reservation_base
                               + 24) & 0x7FFFFFF;
            }
            else
            {
              v160 = *(_DWORD *)(v121 + 4);
            }
            if (!v160 || (v161 = (this & 0x1FFFF) >> 14, v162 = ((this & 0x1FFFF) + v160 - 1) >> 14, v161 > v162))
            {
              v163 = 1;
              goto LABEL_204;
            }
            v164 = v162 - v161 + 1;
            if (v164 < 8)
            {
              LOBYTE(v165) = 0;
              v166 = (this & 0x1FFFF) >> 14;
              goto LABEL_199;
            }
            if (v164 >= 0x20)
            {
              v167 = v164 & 0xFFFFFFFFFFFFFFE0;
              v168 = (int8x16_t *)(v161 + v121 + 92);
              v169 = 0uLL;
              v170.i64[0] = -1;
              v170.i64[1] = -1;
              v171 = v164 & 0xFFFFFFFFFFFFFFE0;
              v172 = 0uLL;
              do
              {
                v173 = vaddq_s8(v168[-1], v170);
                v174 = vaddq_s8(*v168, v170);
                v168[-1] = v173;
                *v168 = v174;
                v175 = vceqzq_s8(v173);
                v176 = vceqzq_s8(v174);
                v169 = vsubq_s8(vbicq_s8(v169, v175), v175);
                v172 = vsubq_s8(vbicq_s8(v172, v176), v176);
                v168 += 2;
                v171 -= 32;
              }
              while (v171);
              v177 = vorrq_s8(v169, v172);
              LODWORD(v165) = vmaxvq_u8((uint8x16_t)vtstq_s8(v177, v177)) & 1;
              if (v164 == v167)
                goto LABEL_203;
              if ((v164 & 0x18) == 0)
              {
                v166 = v161 | v167;
                goto LABEL_199;
              }
            }
            else
            {
              LODWORD(v165) = 0;
              v167 = 0;
            }
            v178 = vdup_n_s8(v165);
            v166 = v161 | v164 & 0xFFFFFFFFFFFFFFF8;
            v179 = (int8x8_t *)(v167 + v161 + v121 + 76);
            v180 = v167 - (v164 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v181 = vadd_s8(*v179, (int8x8_t)-1);
              *v179++ = v181;
              v182 = vceqz_s8(v181);
              v178 = vsub_s8(vbic_s8(v178, v182), v182);
              v180 += 8;
            }
            while (v180);
            v165 = *(_QWORD *)&v178 != 0;
            if (v164 == (v164 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_203;
LABEL_199:
            v183 = v162 - v166 + 1;
            v184 = (_BYTE *)(v166 + v121 + 76);
            do
            {
              v185 = *v184 - 1;
              *v184++ = v185;
              if (!v185)
                LOBYTE(v165) = 1;
              --v183;
            }
            while (v183);
LABEL_203:
            v163 = !v165;
LABEL_204:
            if (pas_segregated_page_deallocate_should_verify_granules)
              pas_segregated_page_verify_granules((unsigned __int8 *)v121);
            if (v163)
            {
              if (v154)
                goto LABEL_208;
            }
            else
            {
              pas_segregated_page_note_emptiness(v121, 1);
              if (v154)
              {
LABEL_208:
                if (!v152)
                  goto LABEL_144;
                goto LABEL_209;
              }
            }
            if (*(_QWORD *)(v121 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v121, 0);
              if (!v152)
                goto LABEL_144;
            }
            else
            {
              --*(_QWORD *)(v121 + 24);
              if (!v152)
                goto LABEL_144;
            }
LABEL_209:
            v186 = *(_DWORD *)(v114 + 24);
            while (1)
            {
              v187 = __ldxr(&v152->_os_unfair_lock_opaque);
              if (v187 != v186)
                break;
              if (!__stlxr(0, &v152->_os_unfair_lock_opaque))
                goto LABEL_144;
            }
            __clrex();
            os_unfair_lock_unlock(v152);
            goto LABEL_144;
          case 4:
            v122 = *(unsigned int *)(v32 + 4);
            v123 = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
            v14 = v123;
            if (!v123)
              goto LABEL_144;
            if (a2 >= v122)
              v124 = v122;
            else
              v124 = a2;
            memcpy(v123, (const void *)this, v124);
            v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v21)
              goto LABEL_143;
            v125 = (this >> 17) ^ ((this >> 17) >> 4);
            v126 = ((v125 ^ 0xDEADBEEF) + 32 * v125) ^ (((v125 ^ 0xDEADBEEF) + 32 * v125) >> 11);
            v127 = (char *)off_1ECF42618 + 32;
            v128 = *((_DWORD *)off_1ECF42618 + 3) & v126;
            if (*((_QWORD *)off_1ECF42618 + 2 * v128 + 4) != v25)
            {
              v129 = v126 + 1;
              do
                v128 = *((_DWORD *)off_1ECF42618 + 3) & v129++;
              while (*(_QWORD *)&v127[16 * v128] != v25);
            }
            v130 = *(_QWORD *)(v21 + 8008) + *(unsigned int *)(*(_QWORD *)&v127[16 * v128 + 8] + 4);
            if (v130 > 0xC350
              || (*(_QWORD *)(v21 + 8008) = v130, v22 = *(unsigned int *)(v21 + 8000), v22 >= 0x3E7))
            {
              v70 = (WTF *)this;
              v71 = 7;
              goto LABEL_76;
            }
            v23 = this | 0x7000000000000;
            goto LABEL_10;
          case 5:
            goto LABEL_83;
          case 6:
            v131 = bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(v32, this);
            v138 = bmalloc_try_allocate_impl_for_realloc(a2, 1, v132, v133, v134, v135, v136, v137);
            v14 = v138;
            if (!v138)
              goto LABEL_144;
            if (a2 >= v131)
              v139 = v131;
            else
              v139 = a2;
            memcpy(v138, (const void *)this, v139);
            bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page(v32, this);
            goto LABEL_155;
          case 7:
            v140 = bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(v32, this);
            v147 = bmalloc_try_allocate_impl_for_realloc(a2, 1, v141, v142, v143, v144, v145, v146);
            v14 = v147;
            if (!v147)
              goto LABEL_144;
            if (a2 >= v140)
              v148 = v140;
            else
              v148 = a2;
            memcpy(v147, (const void *)this, v148);
            bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page(v32, this);
            goto LABEL_155;
          default:
            goto LABEL_74;
        }
      }
    }
    else
    {
      v31 = v27 + 1;
      while (v30 != -1)
      {
        v29 = *((_DWORD *)off_1ECF42618 + 3) & v31;
        v30 = *(_QWORD *)&v28[16 * v29];
        ++v31;
        if (v30 == v25)
          goto LABEL_22;
      }
    }
  }
  if (!off_1ECF42608)
    goto LABEL_77;
  v33 = (this >> 22) ^ ((this >> 22) >> 4);
  v34 = ((v33 ^ 0xDEADBEEF) + 32 * v33) ^ (((v33 ^ 0xDEADBEEF) + 32 * v33) >> 11);
  v35 = (char *)off_1ECF42608 + 32;
  v36 = *((_DWORD *)off_1ECF42608 + 3) & v34;
  v37 = *((_QWORD *)off_1ECF42608 + 2 * v36 + 4);
  if (v37 == (this & 0xFFFFFFFFFFC00000))
  {
LABEL_28:
    v32 = *(_QWORD *)&v35[16 * v36 + 8];
    if (!v32)
      goto LABEL_77;
    goto LABEL_29;
  }
  v38 = v34 + 1;
  while (v37 != -1)
  {
    v36 = *((_DWORD *)off_1ECF42608 + 3) & v38;
    v37 = *(_QWORD *)&v35[16 * v36];
    ++v38;
    if (v37 == (this & 0xFFFFFFFFFFC00000))
      goto LABEL_28;
  }
LABEL_77:
  if (!this)
  {
    v14 = bmalloc_try_allocate_impl_for_realloc(a2, 1, a3, a4, a5, a6, a7, a8);
    goto LABEL_144;
  }
  if (pas_debug_heap_is_enabled(2))
  {
    v14 = pas_debug_heap_realloc((void *)this, a2);
    goto LABEL_144;
  }
  v72 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v73 = *(_DWORD *)(v72 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v73, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_90;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_90:
  if (pas_probabilistic_guard_malloc_check_exists(this))
  {
    pas_probabilistic_guard_malloc_return_as_large_map_entry(this, v188);
  }
  else
  {
    pas_large_map_find(this, v188);
    if (!v188[0])
      pas_reallocation_did_fail((uint64_t)"Source object not allocated", 0, (uint64_t)&bmalloc_common_primitive_heap, this, 0, a2, v94, v95);
  }
  v96 = v188[1] - this;
  v97 = *(_DWORD *)(v72 + 24);
  while (1)
  {
    v98 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v98 != v97)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_98;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_98:
  v99 = bmalloc_try_allocate_impl_for_realloc(a2, 1, v90, v91, v92, v93, v94, v95);
  v14 = v99;
  if (v99)
  {
    if (a2 >= v96)
      v100 = v96;
    else
      v100 = a2;
    memcpy(v99, (const void *)this, v100);
    if (!pas_try_deallocate_pgm_large(this, (uint64_t)&bmalloc_heap_config))
      pas_deallocate_known_large(this, (uint64_t)&bmalloc_heap_config);
    goto LABEL_155;
  }
LABEL_144:
  *a9 = v14;
}

unint64_t WTF::fastCompactZeroedMalloc(size_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t impl_casual_case;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v9)
  {
    v10 = (this + 15) >> 4;
    if (this + 15 <= 0x1AF)
    {
      v11 = 23 * v10 + 7;
    }
    else
    {
      if ((this + 15) >> 5 > 0x138)
        goto LABEL_29;
      v11 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v10 + 626);
      if (*(_DWORD *)(v9 + 8052) <= v11)
        goto LABEL_29;
    }
    v12 = v9 + 8 * v11;
    v13 = v12 + 8064;
    *(_BYTE *)(v12 + 8064) = 1;
    v14 = *(unsigned int *)(v12 + 8080);
    if ((_DWORD)v14)
    {
      *(_DWORD *)(v13 + 16) = v14 - *(_DWORD *)(v13 + 20);
      impl_casual_case = *(_QWORD *)(v13 + 8) - v14;
      *(_BYTE *)v13 = 0;
      v16 = 1;
      goto LABEL_11;
    }
    v17 = *(_QWORD *)(v13 + 40);
    v18 = *(_QWORD *)(v13 + 24);
    if (v17)
    {
LABEL_10:
      v19 = __clz(v17);
      *(_QWORD *)(v13 + 40) = v17 & ~(0x8000000000000000 >> v19);
      impl_casual_case = v18 + 16 * v19;
      *(_BYTE *)v13 = 0;
      v16 = 1;
      goto LABEL_11;
    }
    if (*(_BYTE *)(v13 + 5) == 6)
    {
      v22 = *(unsigned int *)(v13 + 32);
      v23 = *(_DWORD *)(v13 + 36);
      if (v22 < v23)
      {
        *(_QWORD *)(v13 + 8 * v22 + 56) = 0;
        v24 = (unint64_t *)(8 * v22 + 8 * v11 + v9 + 8128);
        v25 = v23 - 1 - v22;
        while (v25)
        {
          v18 += 1024;
          v27 = *v24++;
          v26 = v27;
          LODWORD(v22) = v22 + 1;
          --v25;
          if (v27)
          {
            v17 = __rbit64(v26);
            *(_DWORD *)(v13 + 32) = v22;
            *(_QWORD *)(v13 + 24) = v18;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v13 + 32) = v23;
      }
    }
    *(_BYTE *)v13 = 0;
  }
LABEL_29:
  impl_casual_case = (unint64_t)bmalloc_allocate_impl_casual_case(this, 0, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0)
    return impl_casual_case;
LABEL_11:
  if ((v16 & 0xFFFFFFFF00000000) == 0x100000000)
    return impl_casual_case;
  if (this >> 24)
  {
    v20 = pas_page_malloc_cached_alignment;
    if (pas_page_malloc_cached_alignment)
    {
      if (((pas_page_malloc_cached_alignment - 1) & (this | impl_casual_case)) == 0)
      {
LABEL_15:
        if (!v20)
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
        mmap((void *)impl_casual_case, this, 3, 4114, 889192448, 0);
        return impl_casual_case;
      }
    }
    else
    {
      v20 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v20;
      if (((v20 - 1) & (this | impl_casual_case)) == 0)
        goto LABEL_15;
    }
  }
  bzero((void *)impl_casual_case, this);
  return impl_casual_case;
}

void WTF::tryFastCompactZeroedMalloc(size_t this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t *a8@<X8>)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t impl_casual_case;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v10)
  {
    v11 = (this + 15) >> 4;
    if (this + 15 <= 0x1AF)
    {
      v12 = 23 * v11 + 7;
    }
    else
    {
      if ((this + 15) >> 5 > 0x138)
        goto LABEL_29;
      v12 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v11 + 626);
      if (*(_DWORD *)(v10 + 8052) <= v12)
        goto LABEL_29;
    }
    v13 = v10 + 8 * v12;
    v14 = v13 + 8064;
    *(_BYTE *)(v13 + 8064) = 1;
    v15 = *(unsigned int *)(v13 + 8080);
    if ((_DWORD)v15)
    {
      *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
      impl_casual_case = *(_QWORD *)(v14 + 8) - v15;
      *(_BYTE *)v14 = 0;
      v17 = 1;
      goto LABEL_11;
    }
    v18 = *(_QWORD *)(v14 + 40);
    v19 = *(_QWORD *)(v14 + 24);
    if (v18)
    {
LABEL_10:
      v20 = __clz(v18);
      *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
      impl_casual_case = v19 + 16 * v20;
      *(_BYTE *)v14 = 0;
      v17 = 1;
      goto LABEL_11;
    }
    if (*(_BYTE *)(v14 + 5) == 6)
    {
      v22 = *(unsigned int *)(v14 + 32);
      v23 = *(_DWORD *)(v14 + 36);
      if (v22 < v23)
      {
        *(_QWORD *)(v14 + 8 * v22 + 56) = 0;
        v24 = (unint64_t *)(8 * v22 + 8 * v12 + v10 + 8128);
        v25 = v23 - 1 - v22;
        while (v25)
        {
          v19 += 1024;
          v27 = *v24++;
          v26 = v27;
          LODWORD(v22) = v22 + 1;
          --v25;
          if (v27)
          {
            v18 = __rbit64(v26);
            *(_DWORD *)(v14 + 32) = v22;
            *(_QWORD *)(v14 + 24) = v19;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v14 + 32) = v23;
      }
    }
    *(_BYTE *)v14 = 0;
  }
LABEL_29:
  impl_casual_case = (unint64_t)bmalloc_try_allocate_impl_casual_case(this, 0, a2, a3, a4, a5, a6, a7);
  if ((v17 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  if ((v17 & 0xFFFFFFFF00000000) == 0x100000000)
  {
LABEL_18:
    *a8 = impl_casual_case;
    return;
  }
  if (this >> 24)
  {
    v21 = pas_page_malloc_cached_alignment;
    if (pas_page_malloc_cached_alignment)
    {
      if (((pas_page_malloc_cached_alignment - 1) & (this | impl_casual_case)) == 0)
      {
LABEL_15:
        if (!v21)
          pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
        mmap((void *)impl_casual_case, this, 3, 4114, 889192448, 0);
        goto LABEL_18;
      }
    }
    else
    {
      v21 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v21;
      if (((v21 - 1) & (this | impl_casual_case)) == 0)
        goto LABEL_15;
    }
  }
  bzero((void *)impl_casual_case, this);
  *a8 = impl_casual_case;
}

uint64_t WTF::fastCompactCalloc(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (is_mul_ok(a2, this))
    return WTF::fastZeroedMalloc(a2 * this, a2, a3, a4, a5, a6, a7, a8);
  __break(0xC471u);
  return this;
}

void *WTF::fastCompactRealloc(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  void *impl_for_realloc;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  os_unfair_lock_s *v47;
  os_unfair_lock_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  size_t v61;
  unint64_t StatusReg;
  os_unfair_lock_s *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t allocation_size_with_page;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  void *v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  void *v110;
  size_t v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  char *v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  os_unfair_lock_s *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  unint64_t v162;
  _BOOL8 v163;
  unint64_t v164;
  unint64_t v165;
  int8x16_t *v166;
  int8x16_t v167;
  int8x16_t v168;
  unint64_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x8_t v176;
  int8x8_t *v177;
  unint64_t v178;
  int8x8_t v179;
  int8x8_t v180;
  uint64_t v181;
  _BYTE *v182;
  char v183;
  int v184;
  unsigned int v185;
  unint64_t v186[3];

  if (!(this >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) != 0)
  {
LABEL_3:
    v10 = *(unsigned int *)((this & 0xFFFFFFFFFFFFC000) + 4);
    impl_for_realloc = bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
    v12 = impl_for_realloc;
    if (!impl_for_realloc)
      return v12;
    if (a2 >= v10)
      v13 = v10;
    else
      v13 = a2;
    memcpy(impl_for_realloc, (const void *)this, v13);
    v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v19)
    {
LABEL_8:
      v20 = *(unsigned int *)(v19 + 8000);
      if (v20 >= 0x3E7)
      {
        v68 = (WTF *)this;
        v69 = 5;
LABEL_76:
        pas_thread_local_cache_append_deallocation_slow(v19, (uint64_t)v68, (os_unfair_lock_s *)v69, v14, v15, v16, v17, v18);
      }
      else
      {
        v21 = this | 0x5000000000000;
LABEL_10:
        *(_QWORD *)(v19 + 8 * v20) = v21;
        *(_DWORD *)(v19 + 8000) = v20 + 1;
      }
      return v12;
    }
LABEL_143:
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    return v12;
  }
  if (this >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > this >> 24)
  {
    v22 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
    if (v22)
    {
      if (v22 != 2)
      {
        if (v22 == 1)
          goto LABEL_3;
        return 0;
      }
      v30 = this & 0xFFFFFFFFFFFFC000;
      v53 = *(unsigned __int8 *)(this & 0xFFFFFFFFFFFFC000);
      if (v53 != 5)
      {
        if (v53 != 1)
          return 0;
        v54 = (this >> 8) & 0x3F;
        v55 = *(unsigned int *)((*(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8) + 4 * v54 + 20);
        if ((_DWORD)v55)
          v56 = pas_compact_heap_reservation_base + 8 * v55;
        else
          v56 = 0;
        v57 = *(unsigned __int16 *)(v56 + 7) | ((unint64_t)*(unsigned __int8 *)(v56 + 9) << 16);
        if ((_DWORD)v57)
          v58 = pas_compact_heap_reservation_base + 8 * v57;
        else
          v58 = 0;
        v59 = *(_DWORD *)(v58 + 24);
        v60 = bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
        v12 = v60;
        if (!v60)
          return v12;
        if (a2 >= (v59 & 0x7FFFFFFu))
          v61 = v59 & 0x7FFFFFF;
        else
          v61 = a2;
        memcpy(v60, (const void *)this, v61);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        if (!*(_QWORD *)(StatusReg + 752))
          goto LABEL_143;
        v63 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
        if (v63)
          v48 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v63);
        else
          v48 = 0;
        v64 = v30 + 4 * ((this >> 9) & 0x1F);
        v65 = *(_DWORD *)(v64 + 44) & ~(1 << (this >> 4));
        *(_DWORD *)(v64 + 44) = v65;
        v66 = *(unsigned int *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v54 + 20);
        if ((_DWORD)v66)
          v67 = pas_compact_heap_reservation_base + 8 * v66;
        else
          v67 = 0;
        if ((*(_BYTE *)(v67 + 19) & 4) != 0)
        {
          if (!v65)
          {
LABEL_71:
            if (*(_QWORD *)(v30 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v30, 0);
              if (!v48)
                return v12;
            }
            else
            {
              --*(_QWORD *)(v30 + 24);
              if (!v48)
                return v12;
            }
            goto LABEL_106;
          }
        }
        else
        {
          pas_segregated_partial_view_note_eligibility(v67, v30);
          if (!v65)
            goto LABEL_71;
        }
        if (!v48)
          return v12;
LABEL_106:
        v99 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v100 = __ldxr(&v48->_os_unfair_lock_opaque);
          if (v100 != v99)
            break;
          if (!__stlxr(0, &v48->_os_unfair_lock_opaque))
            return v12;
        }
LABEL_224:
        __clrex();
        os_unfair_lock_unlock(v48);
        return v12;
      }
LABEL_83:
      allocation_size_with_page = bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v30, this);
      v80 = bmalloc_allocate_impl_for_realloc(a2, 0, v74, v75, v76, v77, v78, v79);
      v12 = v80;
      if (!v80)
        return v12;
      if (a2 >= allocation_size_with_page)
        v81 = allocation_size_with_page;
      else
        v81 = a2;
      memcpy(v80, (const void *)this, v81);
      bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page(v30, this, v82, v83, v84, v85, v86, v87);
LABEL_155:
      if (*MEMORY[0x1E0C83EB8])
        pas_msl_free_logging_slow(this);
      return v12;
    }
  }
  v23 = this & 0xFFFFFFFFFFFE0000;
  if (off_1ECF42618)
  {
    v24 = (this >> 17) ^ ((this >> 17) >> 4);
    v25 = ((v24 ^ 0xDEADBEEF) + 32 * v24) ^ (((v24 ^ 0xDEADBEEF) + 32 * v24) >> 11);
    v26 = (char *)off_1ECF42618 + 32;
    v27 = *((_DWORD *)off_1ECF42618 + 3) & v25;
    v28 = *((_QWORD *)off_1ECF42618 + 2 * v27 + 4);
    if (v28 == v23)
    {
LABEL_22:
      v30 = *(_QWORD *)&v26[16 * v27 + 8];
      if (v30)
      {
LABEL_29:
        switch(*(_BYTE *)v30)
        {
          case 1:
            v37 = (this >> 8) & 0x3F;
            v38 = *(unsigned int *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v37 + 20);
            if ((_DWORD)v38)
              v39 = pas_compact_heap_reservation_base + 8 * v38;
            else
              v39 = 0;
            v40 = *(unsigned __int16 *)(v39 + 7) | ((unint64_t)*(unsigned __int8 *)(v39 + 9) << 16);
            if ((_DWORD)v40)
              v41 = pas_compact_heap_reservation_base + 8 * v40;
            else
              v41 = 0;
            v42 = *(_DWORD *)(v41 + 24);
            v43 = bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v12 = v43;
            if (!v43)
              return v12;
            if (a2 >= (v42 & 0x7FFFFFFu))
              v44 = v42 & 0x7FFFFFF;
            else
              v44 = a2;
            memcpy(v43, (const void *)this, v44);
            v45 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v45 + 752))
              goto LABEL_143;
            v46 = this & 0xFFFFFFFFFFFFC000;
            v47 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
            if (v47)
              v48 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v47);
            else
              v48 = 0;
            v49 = v46 + 4 * ((this >> 9) & 0x1F);
            v50 = *(_DWORD *)(v49 + 44) & ~(1 << (this >> 4));
            *(_DWORD *)(v49 + 44) = v50;
            v51 = *(unsigned int *)((*(_QWORD *)(v46 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v37 + 20);
            if ((_DWORD)v51)
              v52 = pas_compact_heap_reservation_base + 8 * v51;
            else
              v52 = 0;
            if ((*(_BYTE *)(v52 + 19) & 4) != 0)
            {
              if (!v50)
                goto LABEL_48;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v52, v46);
              if (!v50)
              {
LABEL_48:
                if (*(_QWORD *)(v46 + 24) == 1)
                {
                  pas_segregated_page_note_emptiness(v46, 0);
                  if (!v48)
                    return v12;
                }
                else
                {
                  --*(_QWORD *)(v46 + 24);
                  if (!v48)
                    return v12;
                }
LABEL_159:
                v148 = *(_DWORD *)(v45 + 24);
                do
                {
                  v149 = __ldxr(&v48->_os_unfair_lock_opaque);
                  if (v149 != v148)
                    goto LABEL_224;
                }
                while (__stlxr(0, &v48->_os_unfair_lock_opaque));
                return v12;
              }
            }
            if (!v48)
              return v12;
            goto LABEL_159;
          case 2:
            v101 = *(unsigned int *)(v30 + 4);
            v102 = bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v12 = v102;
            if (!v102)
              return v12;
            if (a2 >= v101)
              v103 = v101;
            else
              v103 = a2;
            memcpy(v102, (const void *)this, v103);
            v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v19)
              goto LABEL_143;
            goto LABEL_8;
          case 3:
            v104 = (this >> 12) & 0x1F;
            v105 = *(unsigned int *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v104 + 20);
            if ((_DWORD)v105)
              v106 = pas_compact_heap_reservation_base + 8 * v105;
            else
              v106 = 0;
            v107 = *(unsigned __int16 *)(v106 + 7) | ((unint64_t)*(unsigned __int8 *)(v106 + 9) << 16);
            if ((_DWORD)v107)
              v108 = pas_compact_heap_reservation_base + 8 * v107;
            else
              v108 = 0;
            v109 = *(_DWORD *)(v108 + 24);
            v110 = bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v12 = v110;
            if (!v110)
              return v12;
            if (a2 >= (v109 & 0x7FFFFFFu))
              v111 = v109 & 0x7FFFFFF;
            else
              v111 = a2;
            memcpy(v110, (const void *)this, v111);
            v112 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v112 + 752))
              goto LABEL_143;
            if (!off_1ECF42618)
              goto LABEL_167;
            v113 = (this >> 17) ^ ((this >> 17) >> 4);
            v114 = ((v113 ^ 0xDEADBEEF) + 32 * v113) ^ (((v113 ^ 0xDEADBEEF) + 32 * v113) >> 11);
            v115 = (char *)off_1ECF42618 + 32;
            v116 = *((_DWORD *)off_1ECF42618 + 3) & v114;
            v117 = *((_QWORD *)off_1ECF42618 + 2 * v116 + 4);
            if (v117 == v23)
              goto LABEL_132;
            v118 = v114 + 1;
            while (v117 != -1)
            {
              v116 = *((_DWORD *)off_1ECF42618 + 3) & v118;
              v117 = *(_QWORD *)&v115[16 * v116];
              ++v118;
              if (v117 == v23)
              {
LABEL_132:
                v119 = *(_QWORD *)&v115[16 * v116 + 8];
                goto LABEL_168;
              }
            }
LABEL_167:
            v119 = 0;
LABEL_168:
            v150 = *(os_unfair_lock_s **)(v119 + 8);
            if (v150)
              v48 = pas_segregated_page_switch_lock_slow(v119, 0, v150);
            else
              v48 = 0;
            v151 = v119 + 4 * ((this >> 14) & 7);
            v152 = *(_DWORD *)(v151 + 44) & ~(1 << (this >> 9));
            *(_DWORD *)(v151 + 44) = v152;
            v153 = *(_QWORD *)(v119 + 32);
            v154 = *(unsigned int *)((v153 & 0xFFFFFFFFFFFFFFF8) + 4 * v104 + 20);
            if ((_DWORD)v154)
              v155 = pas_compact_heap_reservation_base + 8 * v154;
            else
              v155 = 0;
            if ((*(_BYTE *)(v155 + 19) & 4) == 0)
            {
              pas_segregated_partial_view_note_eligibility(v155, v119);
              v153 = *(_QWORD *)(v119 + 32);
            }
            if ((v153 & 6) != 0)
            {
              v156 = *(unsigned int *)((v153 & 0xFFFFFFFFFFFFFFF8) + 4 * v104 + 20);
              if ((_DWORD)v156)
                v157 = pas_compact_heap_reservation_base + 8 * v156;
              else
                v157 = 0;
              v158 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v157 + 7)) | ((unint64_t)*(unsigned __int8 *)(v157 + 9) << 19))
                               + pas_compact_heap_reservation_base
                               + 24) & 0x7FFFFFF;
            }
            else
            {
              v158 = *(_DWORD *)(v119 + 4);
            }
            if (!v158 || (v159 = (this & 0x1FFFF) >> 14, v160 = ((this & 0x1FFFF) + v158 - 1) >> 14, v159 > v160))
            {
              v161 = 1;
              goto LABEL_204;
            }
            v162 = v160 - v159 + 1;
            if (v162 < 8)
            {
              LOBYTE(v163) = 0;
              v164 = (this & 0x1FFFF) >> 14;
              goto LABEL_199;
            }
            if (v162 >= 0x20)
            {
              v165 = v162 & 0xFFFFFFFFFFFFFFE0;
              v166 = (int8x16_t *)(v159 + v119 + 92);
              v167 = 0uLL;
              v168.i64[0] = -1;
              v168.i64[1] = -1;
              v169 = v162 & 0xFFFFFFFFFFFFFFE0;
              v170 = 0uLL;
              do
              {
                v171 = vaddq_s8(v166[-1], v168);
                v172 = vaddq_s8(*v166, v168);
                v166[-1] = v171;
                *v166 = v172;
                v173 = vceqzq_s8(v171);
                v174 = vceqzq_s8(v172);
                v167 = vsubq_s8(vbicq_s8(v167, v173), v173);
                v170 = vsubq_s8(vbicq_s8(v170, v174), v174);
                v166 += 2;
                v169 -= 32;
              }
              while (v169);
              v175 = vorrq_s8(v167, v170);
              LODWORD(v163) = vmaxvq_u8((uint8x16_t)vtstq_s8(v175, v175)) & 1;
              if (v162 == v165)
                goto LABEL_203;
              if ((v162 & 0x18) == 0)
              {
                v164 = v159 | v165;
                goto LABEL_199;
              }
            }
            else
            {
              LODWORD(v163) = 0;
              v165 = 0;
            }
            v176 = vdup_n_s8(v163);
            v164 = v159 | v162 & 0xFFFFFFFFFFFFFFF8;
            v177 = (int8x8_t *)(v165 + v159 + v119 + 76);
            v178 = v165 - (v162 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v179 = vadd_s8(*v177, (int8x8_t)-1);
              *v177++ = v179;
              v180 = vceqz_s8(v179);
              v176 = vsub_s8(vbic_s8(v176, v180), v180);
              v178 += 8;
            }
            while (v178);
            v163 = *(_QWORD *)&v176 != 0;
            if (v162 == (v162 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_203;
LABEL_199:
            v181 = v160 - v164 + 1;
            v182 = (_BYTE *)(v164 + v119 + 76);
            do
            {
              v183 = *v182 - 1;
              *v182++ = v183;
              if (!v183)
                LOBYTE(v163) = 1;
              --v181;
            }
            while (v181);
LABEL_203:
            v161 = !v163;
LABEL_204:
            if (pas_segregated_page_deallocate_should_verify_granules)
              pas_segregated_page_verify_granules((unsigned __int8 *)v119);
            if (v161)
            {
              if (v152)
                goto LABEL_208;
            }
            else
            {
              pas_segregated_page_note_emptiness(v119, 1);
              if (v152)
              {
LABEL_208:
                if (!v48)
                  return v12;
                goto LABEL_209;
              }
            }
            if (*(_QWORD *)(v119 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v119, 0);
              if (!v48)
                return v12;
            }
            else
            {
              --*(_QWORD *)(v119 + 24);
              if (!v48)
                return v12;
            }
LABEL_209:
            v184 = *(_DWORD *)(v112 + 24);
            while (1)
            {
              v185 = __ldxr(&v48->_os_unfair_lock_opaque);
              if (v185 != v184)
                break;
              if (!__stlxr(0, &v48->_os_unfair_lock_opaque))
                return v12;
            }
            goto LABEL_224;
          case 4:
            v120 = *(unsigned int *)(v30 + 4);
            v121 = bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v12 = v121;
            if (!v121)
              return v12;
            if (a2 >= v120)
              v122 = v120;
            else
              v122 = a2;
            memcpy(v121, (const void *)this, v122);
            v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v19)
              goto LABEL_143;
            v123 = (this >> 17) ^ ((this >> 17) >> 4);
            v124 = ((v123 ^ 0xDEADBEEF) + 32 * v123) ^ (((v123 ^ 0xDEADBEEF) + 32 * v123) >> 11);
            v125 = (char *)off_1ECF42618 + 32;
            v126 = *((_DWORD *)off_1ECF42618 + 3) & v124;
            if (*((_QWORD *)off_1ECF42618 + 2 * v126 + 4) != v23)
            {
              v127 = v124 + 1;
              do
                v126 = *((_DWORD *)off_1ECF42618 + 3) & v127++;
              while (*(_QWORD *)&v125[16 * v126] != v23);
            }
            v128 = *(_QWORD *)(v19 + 8008) + *(unsigned int *)(*(_QWORD *)&v125[16 * v126 + 8] + 4);
            if (v128 > 0xC350
              || (*(_QWORD *)(v19 + 8008) = v128, v20 = *(unsigned int *)(v19 + 8000), v20 >= 0x3E7))
            {
              v68 = (WTF *)this;
              v69 = 7;
              goto LABEL_76;
            }
            v21 = this | 0x7000000000000;
            goto LABEL_10;
          case 5:
            goto LABEL_83;
          case 6:
            v130 = bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(v30, this);
            v137 = bmalloc_allocate_impl_for_realloc(a2, 0, v131, v132, v133, v134, v135, v136);
            v12 = v137;
            if (!v137)
              return v12;
            if (a2 >= v130)
              v138 = v130;
            else
              v138 = a2;
            memcpy(v137, (const void *)this, v138);
            bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page(v30, this);
            goto LABEL_155;
          case 7:
            v139 = bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(v30, this);
            v146 = bmalloc_allocate_impl_for_realloc(a2, 0, v140, v141, v142, v143, v144, v145);
            v12 = v146;
            if (!v146)
              return v12;
            if (a2 >= v139)
              v147 = v139;
            else
              v147 = a2;
            memcpy(v146, (const void *)this, v147);
            bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page(v30, this);
            goto LABEL_155;
          default:
            return 0;
        }
      }
    }
    else
    {
      v29 = v25 + 1;
      while (v28 != -1)
      {
        v27 = *((_DWORD *)off_1ECF42618 + 3) & v29;
        v28 = *(_QWORD *)&v26[16 * v27];
        ++v29;
        if (v28 == v23)
          goto LABEL_22;
      }
    }
  }
  if (!off_1ECF42608)
    goto LABEL_77;
  v31 = (this >> 22) ^ ((this >> 22) >> 4);
  v32 = ((v31 ^ 0xDEADBEEF) + 32 * v31) ^ (((v31 ^ 0xDEADBEEF) + 32 * v31) >> 11);
  v33 = (char *)off_1ECF42608 + 32;
  v34 = *((_DWORD *)off_1ECF42608 + 3) & v32;
  v35 = *((_QWORD *)off_1ECF42608 + 2 * v34 + 4);
  if (v35 == (this & 0xFFFFFFFFFFC00000))
  {
LABEL_28:
    v30 = *(_QWORD *)&v33[16 * v34 + 8];
    if (!v30)
      goto LABEL_77;
    goto LABEL_29;
  }
  v36 = v32 + 1;
  while (v35 != -1)
  {
    v34 = *((_DWORD *)off_1ECF42608 + 3) & v36;
    v35 = *(_QWORD *)&v33[16 * v34];
    ++v36;
    if (v35 == (this & 0xFFFFFFFFFFC00000))
      goto LABEL_28;
  }
LABEL_77:
  if (!this)
    return bmalloc_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
  if (pas_debug_heap_is_enabled(2))
    return pas_debug_heap_realloc((void *)this, a2);
  v70 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v71 = *(_DWORD *)(v70 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v71, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_90;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_90:
  if (pas_probabilistic_guard_malloc_check_exists(this))
  {
    pas_probabilistic_guard_malloc_return_as_large_map_entry(this, v186);
  }
  else
  {
    pas_large_map_find(this, v186);
    if (!v186[0])
      pas_reallocation_did_fail((uint64_t)"Source object not allocated", 0, (uint64_t)&bmalloc_common_primitive_heap, this, 0, a2, v92, v93);
  }
  v94 = v186[1] - this;
  v95 = *(_DWORD *)(v70 + 24);
  while (1)
  {
    v96 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v96 != v95)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_98;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_98:
  v97 = bmalloc_allocate_impl_for_realloc(a2, 0, v88, v89, v90, v91, v92, v93);
  v12 = v97;
  if (v97)
  {
    if (a2 >= v94)
      v98 = v94;
    else
      v98 = a2;
    memcpy(v97, (const void *)this, v98);
    if (!pas_try_deallocate_pgm_large(this, (uint64_t)&bmalloc_heap_config))
      pas_deallocate_known_large(this, (uint64_t)&bmalloc_heap_config);
    goto LABEL_155;
  }
  return v12;
}

void *WTF::fastCompactAlignedMalloc(unint64_t this, size_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = (uint8x8_t)vcnt_s8((int8x8_t)this);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] != 1)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v9 = (this + a2 - 1) & -(uint64_t)this;
  if (a2 < this)
    v9 = this;
  if (this == 1)
    v9 = a2;
  v10 = v9 + 15;
  if (v10 >> 5 > 0x138)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v11)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v12 = *((unsigned int *)&bmalloc_common_primitive_heap_support + (v10 >> 4) + 626);
  if (*(_DWORD *)(v11 + 8052) <= v12)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v13 = v11 + 8 * v12 + 8064;
  if (this != 1 && 1 << *(_BYTE *)(v11 + 8 * v12 + 8068) < this)
    return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  *(_BYTE *)v13 = 1;
  v15 = *(unsigned int *)(v11 + 8 * v12 + 8080);
  if ((_DWORD)v15)
  {
    *(_DWORD *)(v11 + 8 * v12 + 8080) = v15 - *(_DWORD *)(v11 + 8 * v12 + 8084);
    result = (void *)(*(_QWORD *)(v11 + 8 * v12 + 8072) - v15);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8 * v12 + 8104);
    v17 = *(_QWORD *)(v11 + 8 * v12 + 8088);
    if (v16)
    {
LABEL_15:
      v18 = __clz(v16);
      *(_QWORD *)(v13 + 40) = v16 & ~(0x8000000000000000 >> v18);
      result = (void *)(v17 + 16 * v18);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 8 * v12 + 8069) == 6)
      {
        v19 = *(unsigned int *)(v11 + 8 * v12 + 8096);
        v20 = *(_DWORD *)(v11 + 8 * v12 + 8100);
        if (v19 < v20)
        {
          *(_QWORD *)(v13 + 8 * v19 + 56) = 0;
          v21 = (unint64_t *)(8 * v19 + 8 * v12 + v11 + 8128);
          v22 = v20 - 1 - v19;
          while (v22)
          {
            v17 += 1024;
            v24 = *v21++;
            v23 = v24;
            LODWORD(v19) = v19 + 1;
            --v22;
            if (v24)
            {
              v16 = __rbit64(v23);
              *(_DWORD *)(v13 + 32) = v19;
              *(_QWORD *)(v13 + 24) = v17;
              goto LABEL_15;
            }
          }
          *(_DWORD *)(v13 + 32) = v20;
        }
      }
      *(_BYTE *)v13 = 0;
      return bmalloc_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

void *WTF::tryFastCompactAlignedMalloc(unint64_t this, size_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = (uint8x8_t)vcnt_s8((int8x8_t)this);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] != 1)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v9 = (this + a2 - 1) & -(uint64_t)this;
  if (a2 < this)
    v9 = this;
  if (this == 1)
    v9 = a2;
  v10 = v9 + 15;
  if (v10 >> 5 > 0x138)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v11)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v12 = *((unsigned int *)&bmalloc_common_primitive_heap_support + (v10 >> 4) + 626);
  if (*(_DWORD *)(v11 + 8052) <= v12)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  v13 = v11 + 8 * v12 + 8064;
  if (this != 1 && 1 << *(_BYTE *)(v11 + 8 * v12 + 8068) < this)
    return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
  *(_BYTE *)v13 = 1;
  v15 = *(unsigned int *)(v11 + 8 * v12 + 8080);
  if ((_DWORD)v15)
  {
    *(_DWORD *)(v11 + 8 * v12 + 8080) = v15 - *(_DWORD *)(v11 + 8 * v12 + 8084);
    result = (void *)(*(_QWORD *)(v11 + 8 * v12 + 8072) - v15);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8 * v12 + 8104);
    v17 = *(_QWORD *)(v11 + 8 * v12 + 8088);
    if (v16)
    {
LABEL_15:
      v18 = __clz(v16);
      *(_QWORD *)(v13 + 40) = v16 & ~(0x8000000000000000 >> v18);
      result = (void *)(v17 + 16 * v18);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 8 * v12 + 8069) == 6)
      {
        v19 = *(unsigned int *)(v11 + 8 * v12 + 8096);
        v20 = *(_DWORD *)(v11 + 8 * v12 + 8100);
        if (v19 < v20)
        {
          *(_QWORD *)(v13 + 8 * v19 + 56) = 0;
          v21 = (unint64_t *)(8 * v19 + 8 * v12 + v11 + 8128);
          v22 = v20 - 1 - v19;
          while (v22)
          {
            v17 += 1024;
            v24 = *v21++;
            v23 = v24;
            LODWORD(v19) = v19 + 1;
            --v22;
            if (v24)
            {
              v16 = __rbit64(v23);
              *(_DWORD *)(v13 + 32) = v19;
              *(_QWORD *)(v13 + 24) = v17;
              goto LABEL_15;
            }
          }
          *(_DWORD *)(v13 + 32) = v20;
        }
      }
      *(_BYTE *)v13 = 0;
      return bmalloc_try_allocate_with_alignment_impl_casual_case(a2, this, 0, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

uint64_t WTF::tryFastCompactMalloc@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v3)
    goto LABEL_19;
  v4 = ((unint64_t)this + 15) >> 4;
  if ((unint64_t)this + 15 <= 0x1AF)
  {
    v5 = 23 * v4 + 7;
  }
  else
  {
    if (((unint64_t)this + 15) >> 5 > 0x138)
      goto LABEL_19;
    v5 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v4 + 626);
    if (*(_DWORD *)(v3 + 8052) <= v5)
      goto LABEL_19;
  }
  v6 = v3 + 8 * v5;
  v7 = v6 + 8064;
  *(_BYTE *)(v6 + 8064) = 1;
  v8 = *(unsigned int *)(v6 + 8080);
  if ((_DWORD)v8)
  {
    *(_DWORD *)(v7 + 16) = v8 - *(_DWORD *)(v7 + 20);
    result = *(_QWORD *)(v7 + 8) - v8;
    *(_BYTE *)v7 = 0;
    *a2 = result;
    return result;
  }
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 24);
  if (v10)
  {
LABEL_10:
    v12 = __clz(v10);
    *(_QWORD *)(v7 + 40) = v10 & ~(0x8000000000000000 >> v12);
    result = v11 + 16 * v12;
    *(_BYTE *)v7 = 0;
    *a2 = result;
    return result;
  }
  if (*(_BYTE *)(v7 + 5) == 6)
  {
    v13 = *(unsigned int *)(v7 + 32);
    v14 = *(_DWORD *)(v7 + 36);
    if (v13 < v14)
    {
      *(_QWORD *)(v7 + 8 * v13 + 56) = 0;
      v15 = (unint64_t *)(8 * v13 + 8 * v5 + v3 + 8128);
      v16 = v14 - 1 - v13;
      while (v16)
      {
        v11 += 1024;
        v18 = *v15++;
        v17 = v18;
        LODWORD(v13) = v13 + 1;
        --v16;
        if (v18)
        {
          v10 = __rbit64(v17);
          *(_DWORD *)(v7 + 32) = v13;
          *(_QWORD *)(v7 + 24) = v11;
          goto LABEL_10;
        }
      }
      *(_DWORD *)(v7 + 32) = v14;
    }
  }
  *(_BYTE *)v7 = 0;
LABEL_19:
  result = bmalloc_try_allocate_casual(this, 0);
  *a2 = result;
  return result;
}

void WTF::tryFastCompactCalloc(unint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  if (is_mul_ok(a2, this))
    WTF::tryFastCompactZeroedMalloc(a2 * this, a3, a4, a5, a6, a7, a8, a9);
  else
    *a9 = 0;
}

void WTF::tryFastCompactRealloc(unint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unint64_t v12;
  void *impl_for_realloc;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  size_t v46;
  unint64_t v47;
  unint64_t v48;
  os_unfair_lock_s *v49;
  os_unfair_lock_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  size_t v63;
  unint64_t StatusReg;
  os_unfair_lock_s *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t allocation_size_with_page;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  void *v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  unint64_t v103;
  void *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  void *v112;
  size_t v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  unint64_t v124;
  int v125;
  unsigned int v126;
  char *v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  unint64_t v148;
  int v149;
  unsigned int v150;
  os_unfair_lock_s *v151;
  os_unfair_lock_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  unint64_t v164;
  _BOOL8 v165;
  unint64_t v166;
  unint64_t v167;
  int8x16_t *v168;
  int8x16_t v169;
  int8x16_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x8_t v178;
  int8x8_t *v179;
  unint64_t v180;
  int8x8_t v181;
  int8x8_t v182;
  uint64_t v183;
  _BYTE *v184;
  char v185;
  int v186;
  unsigned int v187;
  unint64_t v188[3];

  if (!(this >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((this >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(this)) & 1) != 0)
  {
LABEL_3:
    v12 = *(unsigned int *)((this & 0xFFFFFFFFFFFFC000) + 4);
    impl_for_realloc = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
    v14 = impl_for_realloc;
    if (!impl_for_realloc)
      goto LABEL_144;
    if (a2 >= v12)
      v15 = v12;
    else
      v15 = a2;
    memcpy(impl_for_realloc, (const void *)this, v15);
    v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v21)
    {
LABEL_8:
      v22 = *(unsigned int *)(v21 + 8000);
      if (v22 >= 0x3E7)
      {
        v70 = (WTF *)this;
        v71 = 5;
LABEL_76:
        pas_thread_local_cache_append_deallocation_slow(v21, (uint64_t)v70, (os_unfair_lock_s *)v71, v16, v17, v18, v19, v20);
      }
      else
      {
        v23 = this | 0x5000000000000;
LABEL_10:
        *(_QWORD *)(v21 + 8 * v22) = v23;
        *(_DWORD *)(v21 + 8000) = v22 + 1;
      }
      goto LABEL_144;
    }
LABEL_143:
    pas_try_deallocate_slow_no_cache(this, (uint64_t)&bmalloc_heap_config, 1);
    goto LABEL_144;
  }
  if (this >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > this >> 24)
  {
    v24 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((this >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(this) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
    if (v24)
    {
      if (v24 != 2)
      {
        if (v24 == 1)
          goto LABEL_3;
LABEL_74:
        v14 = 0;
        goto LABEL_144;
      }
      v32 = this & 0xFFFFFFFFFFFFC000;
      v55 = *(unsigned __int8 *)(this & 0xFFFFFFFFFFFFC000);
      if (v55 != 5)
      {
        if (v55 != 1)
          goto LABEL_74;
        v56 = (this >> 8) & 0x3F;
        v57 = *(unsigned int *)((*(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8) + 4 * v56 + 20);
        if ((_DWORD)v57)
          v58 = pas_compact_heap_reservation_base + 8 * v57;
        else
          v58 = 0;
        v59 = *(unsigned __int16 *)(v58 + 7) | ((unint64_t)*(unsigned __int8 *)(v58 + 9) << 16);
        if ((_DWORD)v59)
          v60 = pas_compact_heap_reservation_base + 8 * v59;
        else
          v60 = 0;
        v61 = *(_DWORD *)(v60 + 24);
        v62 = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
        v14 = v62;
        if (!v62)
          goto LABEL_144;
        if (a2 >= (v61 & 0x7FFFFFFu))
          v63 = v61 & 0x7FFFFFF;
        else
          v63 = a2;
        memcpy(v62, (const void *)this, v63);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        if (!*(_QWORD *)(StatusReg + 752))
          goto LABEL_143;
        v65 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
        if (v65)
          v50 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v65);
        else
          v50 = 0;
        v66 = v32 + 4 * ((this >> 9) & 0x1F);
        v67 = *(_DWORD *)(v66 + 44) & ~(1 << (this >> 4));
        *(_DWORD *)(v66 + 44) = v67;
        v68 = *(unsigned int *)((*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v56 + 20);
        if ((_DWORD)v68)
          v69 = pas_compact_heap_reservation_base + 8 * v68;
        else
          v69 = 0;
        if ((*(_BYTE *)(v69 + 19) & 4) != 0)
        {
          if (!v67)
          {
LABEL_71:
            if (*(_QWORD *)(v32 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v32, 0);
              if (!v50)
                goto LABEL_144;
            }
            else
            {
              --*(_QWORD *)(v32 + 24);
              if (!v50)
                goto LABEL_144;
            }
            goto LABEL_106;
          }
        }
        else
        {
          pas_segregated_partial_view_note_eligibility(v69, v32);
          if (!v67)
            goto LABEL_71;
        }
        if (!v50)
          goto LABEL_144;
LABEL_106:
        v101 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v102 = __ldxr(&v50->_os_unfair_lock_opaque);
          if (v102 != v101)
            break;
          if (!__stlxr(0, &v50->_os_unfair_lock_opaque))
            goto LABEL_144;
        }
LABEL_221:
        __clrex();
        os_unfair_lock_unlock(v50);
        goto LABEL_144;
      }
LABEL_83:
      allocation_size_with_page = bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v32, this);
      v82 = bmalloc_try_allocate_impl_for_realloc(a2, 0, v76, v77, v78, v79, v80, v81);
      v14 = v82;
      if (!v82)
        goto LABEL_144;
      if (a2 >= allocation_size_with_page)
        v83 = allocation_size_with_page;
      else
        v83 = a2;
      memcpy(v82, (const void *)this, v83);
      bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page(v32, this, v84, v85, v86, v87, v88, v89);
LABEL_155:
      if (*MEMORY[0x1E0C83EB8])
        pas_msl_free_logging_slow(this);
      goto LABEL_144;
    }
  }
  v25 = this & 0xFFFFFFFFFFFE0000;
  if (off_1ECF42618)
  {
    v26 = (this >> 17) ^ ((this >> 17) >> 4);
    v27 = ((v26 ^ 0xDEADBEEF) + 32 * v26) ^ (((v26 ^ 0xDEADBEEF) + 32 * v26) >> 11);
    v28 = (char *)off_1ECF42618 + 32;
    v29 = *((_DWORD *)off_1ECF42618 + 3) & v27;
    v30 = *((_QWORD *)off_1ECF42618 + 2 * v29 + 4);
    if (v30 == v25)
    {
LABEL_22:
      v32 = *(_QWORD *)&v28[16 * v29 + 8];
      if (v32)
      {
LABEL_29:
        switch(*(_BYTE *)v32)
        {
          case 1:
            v39 = (this >> 8) & 0x3F;
            v40 = *(unsigned int *)((*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v39 + 20);
            if ((_DWORD)v40)
              v41 = pas_compact_heap_reservation_base + 8 * v40;
            else
              v41 = 0;
            v42 = *(unsigned __int16 *)(v41 + 7) | ((unint64_t)*(unsigned __int8 *)(v41 + 9) << 16);
            if ((_DWORD)v42)
              v43 = pas_compact_heap_reservation_base + 8 * v42;
            else
              v43 = 0;
            v44 = *(_DWORD *)(v43 + 24);
            v45 = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v14 = v45;
            if (!v45)
              goto LABEL_144;
            if (a2 >= (v44 & 0x7FFFFFFu))
              v46 = v44 & 0x7FFFFFF;
            else
              v46 = a2;
            memcpy(v45, (const void *)this, v46);
            v47 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v47 + 752))
              goto LABEL_143;
            v48 = this & 0xFFFFFFFFFFFFC000;
            v49 = *(os_unfair_lock_s **)((this & 0xFFFFFFFFFFFFC000) + 8);
            if (v49)
              v50 = pas_segregated_page_switch_lock_slow(this & 0xFFFFFFFFFFFFC000, 0, v49);
            else
              v50 = 0;
            v51 = v48 + 4 * ((this >> 9) & 0x1F);
            v52 = *(_DWORD *)(v51 + 44) & ~(1 << (this >> 4));
            *(_DWORD *)(v51 + 44) = v52;
            v53 = *(unsigned int *)((*(_QWORD *)(v48 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v39 + 20);
            if ((_DWORD)v53)
              v54 = pas_compact_heap_reservation_base + 8 * v53;
            else
              v54 = 0;
            if ((*(_BYTE *)(v54 + 19) & 4) != 0)
            {
              if (!v52)
                goto LABEL_48;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v54, v48);
              if (!v52)
              {
LABEL_48:
                if (*(_QWORD *)(v48 + 24) == 1)
                {
                  pas_segregated_page_note_emptiness(v48, 0);
                  if (!v50)
                    goto LABEL_144;
                }
                else
                {
                  --*(_QWORD *)(v48 + 24);
                  if (!v50)
                    goto LABEL_144;
                }
LABEL_159:
                v149 = *(_DWORD *)(v47 + 24);
                do
                {
                  v150 = __ldxr(&v50->_os_unfair_lock_opaque);
                  if (v150 != v149)
                    goto LABEL_221;
                }
                while (__stlxr(0, &v50->_os_unfair_lock_opaque));
                goto LABEL_144;
              }
            }
            if (!v50)
              goto LABEL_144;
            goto LABEL_159;
          case 2:
            v103 = *(unsigned int *)(v32 + 4);
            v104 = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v14 = v104;
            if (!v104)
              goto LABEL_144;
            if (a2 >= v103)
              v105 = v103;
            else
              v105 = a2;
            memcpy(v104, (const void *)this, v105);
            v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v21)
              goto LABEL_143;
            goto LABEL_8;
          case 3:
            v106 = (this >> 12) & 0x1F;
            v107 = *(unsigned int *)((*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v106 + 20);
            if ((_DWORD)v107)
              v108 = pas_compact_heap_reservation_base + 8 * v107;
            else
              v108 = 0;
            v109 = *(unsigned __int16 *)(v108 + 7) | ((unint64_t)*(unsigned __int8 *)(v108 + 9) << 16);
            if ((_DWORD)v109)
              v110 = pas_compact_heap_reservation_base + 8 * v109;
            else
              v110 = 0;
            v111 = *(_DWORD *)(v110 + 24);
            v112 = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v14 = v112;
            if (!v112)
              goto LABEL_144;
            if (a2 >= (v111 & 0x7FFFFFFu))
              v113 = v111 & 0x7FFFFFF;
            else
              v113 = a2;
            memcpy(v112, (const void *)this, v113);
            v114 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v114 + 752))
              goto LABEL_143;
            if (!off_1ECF42618)
              goto LABEL_167;
            v115 = (this >> 17) ^ ((this >> 17) >> 4);
            v116 = ((v115 ^ 0xDEADBEEF) + 32 * v115) ^ (((v115 ^ 0xDEADBEEF) + 32 * v115) >> 11);
            v117 = (char *)off_1ECF42618 + 32;
            v118 = *((_DWORD *)off_1ECF42618 + 3) & v116;
            v119 = *((_QWORD *)off_1ECF42618 + 2 * v118 + 4);
            if (v119 == v25)
              goto LABEL_132;
            v120 = v116 + 1;
            while (v119 != -1)
            {
              v118 = *((_DWORD *)off_1ECF42618 + 3) & v120;
              v119 = *(_QWORD *)&v117[16 * v118];
              ++v120;
              if (v119 == v25)
              {
LABEL_132:
                v121 = *(_QWORD *)&v117[16 * v118 + 8];
                goto LABEL_168;
              }
            }
LABEL_167:
            v121 = 0;
LABEL_168:
            v151 = *(os_unfair_lock_s **)(v121 + 8);
            if (v151)
              v152 = pas_segregated_page_switch_lock_slow(v121, 0, v151);
            else
              v152 = 0;
            v153 = v121 + 4 * ((this >> 14) & 7);
            v154 = *(_DWORD *)(v153 + 44) & ~(1 << (this >> 9));
            *(_DWORD *)(v153 + 44) = v154;
            v155 = *(_QWORD *)(v121 + 32);
            v156 = *(unsigned int *)((v155 & 0xFFFFFFFFFFFFFFF8) + 4 * v106 + 20);
            if ((_DWORD)v156)
              v157 = pas_compact_heap_reservation_base + 8 * v156;
            else
              v157 = 0;
            if ((*(_BYTE *)(v157 + 19) & 4) == 0)
            {
              pas_segregated_partial_view_note_eligibility(v157, v121);
              v155 = *(_QWORD *)(v121 + 32);
            }
            if ((v155 & 6) != 0)
            {
              v158 = *(unsigned int *)((v155 & 0xFFFFFFFFFFFFFFF8) + 4 * v106 + 20);
              if ((_DWORD)v158)
                v159 = pas_compact_heap_reservation_base + 8 * v158;
              else
                v159 = 0;
              v160 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v159 + 7)) | ((unint64_t)*(unsigned __int8 *)(v159 + 9) << 19))
                               + pas_compact_heap_reservation_base
                               + 24) & 0x7FFFFFF;
            }
            else
            {
              v160 = *(_DWORD *)(v121 + 4);
            }
            if (!v160 || (v161 = (this & 0x1FFFF) >> 14, v162 = ((this & 0x1FFFF) + v160 - 1) >> 14, v161 > v162))
            {
              v163 = 1;
              goto LABEL_204;
            }
            v164 = v162 - v161 + 1;
            if (v164 < 8)
            {
              LOBYTE(v165) = 0;
              v166 = (this & 0x1FFFF) >> 14;
              goto LABEL_199;
            }
            if (v164 >= 0x20)
            {
              v167 = v164 & 0xFFFFFFFFFFFFFFE0;
              v168 = (int8x16_t *)(v161 + v121 + 92);
              v169 = 0uLL;
              v170.i64[0] = -1;
              v170.i64[1] = -1;
              v171 = v164 & 0xFFFFFFFFFFFFFFE0;
              v172 = 0uLL;
              do
              {
                v173 = vaddq_s8(v168[-1], v170);
                v174 = vaddq_s8(*v168, v170);
                v168[-1] = v173;
                *v168 = v174;
                v175 = vceqzq_s8(v173);
                v176 = vceqzq_s8(v174);
                v169 = vsubq_s8(vbicq_s8(v169, v175), v175);
                v172 = vsubq_s8(vbicq_s8(v172, v176), v176);
                v168 += 2;
                v171 -= 32;
              }
              while (v171);
              v177 = vorrq_s8(v169, v172);
              LODWORD(v165) = vmaxvq_u8((uint8x16_t)vtstq_s8(v177, v177)) & 1;
              if (v164 == v167)
                goto LABEL_203;
              if ((v164 & 0x18) == 0)
              {
                v166 = v161 | v167;
                goto LABEL_199;
              }
            }
            else
            {
              LODWORD(v165) = 0;
              v167 = 0;
            }
            v178 = vdup_n_s8(v165);
            v166 = v161 | v164 & 0xFFFFFFFFFFFFFFF8;
            v179 = (int8x8_t *)(v167 + v161 + v121 + 76);
            v180 = v167 - (v164 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v181 = vadd_s8(*v179, (int8x8_t)-1);
              *v179++ = v181;
              v182 = vceqz_s8(v181);
              v178 = vsub_s8(vbic_s8(v178, v182), v182);
              v180 += 8;
            }
            while (v180);
            v165 = *(_QWORD *)&v178 != 0;
            if (v164 == (v164 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_203;
LABEL_199:
            v183 = v162 - v166 + 1;
            v184 = (_BYTE *)(v166 + v121 + 76);
            do
            {
              v185 = *v184 - 1;
              *v184++ = v185;
              if (!v185)
                LOBYTE(v165) = 1;
              --v183;
            }
            while (v183);
LABEL_203:
            v163 = !v165;
LABEL_204:
            if (pas_segregated_page_deallocate_should_verify_granules)
              pas_segregated_page_verify_granules((unsigned __int8 *)v121);
            if (v163)
            {
              if (v154)
                goto LABEL_208;
            }
            else
            {
              pas_segregated_page_note_emptiness(v121, 1);
              if (v154)
              {
LABEL_208:
                if (!v152)
                  goto LABEL_144;
                goto LABEL_209;
              }
            }
            if (*(_QWORD *)(v121 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v121, 0);
              if (!v152)
                goto LABEL_144;
            }
            else
            {
              --*(_QWORD *)(v121 + 24);
              if (!v152)
                goto LABEL_144;
            }
LABEL_209:
            v186 = *(_DWORD *)(v114 + 24);
            while (1)
            {
              v187 = __ldxr(&v152->_os_unfair_lock_opaque);
              if (v187 != v186)
                break;
              if (!__stlxr(0, &v152->_os_unfair_lock_opaque))
                goto LABEL_144;
            }
            __clrex();
            os_unfair_lock_unlock(v152);
            goto LABEL_144;
          case 4:
            v122 = *(unsigned int *)(v32 + 4);
            v123 = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
            v14 = v123;
            if (!v123)
              goto LABEL_144;
            if (a2 >= v122)
              v124 = v122;
            else
              v124 = a2;
            memcpy(v123, (const void *)this, v124);
            v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v21)
              goto LABEL_143;
            v125 = (this >> 17) ^ ((this >> 17) >> 4);
            v126 = ((v125 ^ 0xDEADBEEF) + 32 * v125) ^ (((v125 ^ 0xDEADBEEF) + 32 * v125) >> 11);
            v127 = (char *)off_1ECF42618 + 32;
            v128 = *((_DWORD *)off_1ECF42618 + 3) & v126;
            if (*((_QWORD *)off_1ECF42618 + 2 * v128 + 4) != v25)
            {
              v129 = v126 + 1;
              do
                v128 = *((_DWORD *)off_1ECF42618 + 3) & v129++;
              while (*(_QWORD *)&v127[16 * v128] != v25);
            }
            v130 = *(_QWORD *)(v21 + 8008) + *(unsigned int *)(*(_QWORD *)&v127[16 * v128 + 8] + 4);
            if (v130 > 0xC350
              || (*(_QWORD *)(v21 + 8008) = v130, v22 = *(unsigned int *)(v21 + 8000), v22 >= 0x3E7))
            {
              v70 = (WTF *)this;
              v71 = 7;
              goto LABEL_76;
            }
            v23 = this | 0x7000000000000;
            goto LABEL_10;
          case 5:
            goto LABEL_83;
          case 6:
            v131 = bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(v32, this);
            v138 = bmalloc_try_allocate_impl_for_realloc(a2, 0, v132, v133, v134, v135, v136, v137);
            v14 = v138;
            if (!v138)
              goto LABEL_144;
            if (a2 >= v131)
              v139 = v131;
            else
              v139 = a2;
            memcpy(v138, (const void *)this, v139);
            bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page(v32, this);
            goto LABEL_155;
          case 7:
            v140 = bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(v32, this);
            v147 = bmalloc_try_allocate_impl_for_realloc(a2, 0, v141, v142, v143, v144, v145, v146);
            v14 = v147;
            if (!v147)
              goto LABEL_144;
            if (a2 >= v140)
              v148 = v140;
            else
              v148 = a2;
            memcpy(v147, (const void *)this, v148);
            bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page(v32, this);
            goto LABEL_155;
          default:
            goto LABEL_74;
        }
      }
    }
    else
    {
      v31 = v27 + 1;
      while (v30 != -1)
      {
        v29 = *((_DWORD *)off_1ECF42618 + 3) & v31;
        v30 = *(_QWORD *)&v28[16 * v29];
        ++v31;
        if (v30 == v25)
          goto LABEL_22;
      }
    }
  }
  if (!off_1ECF42608)
    goto LABEL_77;
  v33 = (this >> 22) ^ ((this >> 22) >> 4);
  v34 = ((v33 ^ 0xDEADBEEF) + 32 * v33) ^ (((v33 ^ 0xDEADBEEF) + 32 * v33) >> 11);
  v35 = (char *)off_1ECF42608 + 32;
  v36 = *((_DWORD *)off_1ECF42608 + 3) & v34;
  v37 = *((_QWORD *)off_1ECF42608 + 2 * v36 + 4);
  if (v37 == (this & 0xFFFFFFFFFFC00000))
  {
LABEL_28:
    v32 = *(_QWORD *)&v35[16 * v36 + 8];
    if (!v32)
      goto LABEL_77;
    goto LABEL_29;
  }
  v38 = v34 + 1;
  while (v37 != -1)
  {
    v36 = *((_DWORD *)off_1ECF42608 + 3) & v38;
    v37 = *(_QWORD *)&v35[16 * v36];
    ++v38;
    if (v37 == (this & 0xFFFFFFFFFFC00000))
      goto LABEL_28;
  }
LABEL_77:
  if (!this)
  {
    v14 = bmalloc_try_allocate_impl_for_realloc(a2, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_144;
  }
  if (pas_debug_heap_is_enabled(2))
  {
    v14 = pas_debug_heap_realloc((void *)this, a2);
    goto LABEL_144;
  }
  v72 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v73 = *(_DWORD *)(v72 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v73, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_90;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_90:
  if (pas_probabilistic_guard_malloc_check_exists(this))
  {
    pas_probabilistic_guard_malloc_return_as_large_map_entry(this, v188);
  }
  else
  {
    pas_large_map_find(this, v188);
    if (!v188[0])
      pas_reallocation_did_fail((uint64_t)"Source object not allocated", 0, (uint64_t)&bmalloc_common_primitive_heap, this, 0, a2, v94, v95);
  }
  v96 = v188[1] - this;
  v97 = *(_DWORD *)(v72 + 24);
  while (1)
  {
    v98 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v98 != v97)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_98;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_98:
  v99 = bmalloc_try_allocate_impl_for_realloc(a2, 0, v90, v91, v92, v93, v94, v95);
  v14 = v99;
  if (v99)
  {
    if (a2 >= v96)
      v100 = v96;
    else
      v100 = a2;
    memcpy(v99, (const void *)this, v100);
    if (!pas_try_deallocate_pgm_large(this, (uint64_t)&bmalloc_heap_config))
      pas_deallocate_known_large(this, (uint64_t)&bmalloc_heap_config);
    goto LABEL_155;
  }
LABEL_144:
  *a9 = v14;
}

uint64_t WTF::fastMallocStatistics@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  rusage v4;

  a1[2] = 0;
  *a1 = 0;
  result = getrusage(0, &v4);
  a1[1] = v4.ru_maxrss;
  return result;
}

int *WTF::fastDecommitAlignedMemory(WTF *this, size_t a2)
{
  int *result;

  do
  {
    result = (int *)madvise(this, a2, 7);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

double WTF::fastEnableMiniMode(WTF *this)
{
  char *v1;
  const char *v2;
  int v3;
  int v4;
  double result;

  v1 = getenv("XPC_SERVICE_NAME");
  if (!v1
    || (v2 = v1, v3 = strncmp(v1, "application.", 0xCuLL), v4 = strncmp(v2, "com.apple.WebKit.", 0x11uLL), v3) && v4)
  {
    pas_scavenger_period_in_milliseconds = 0x4014000000000000;
    pas_scavenger_max_epoch_delta = 5000000;
    pas_physical_page_sharing_pool_balancing_enabled = 1;
    pas_physical_page_sharing_pool_balancing_enabled_for_utility = 1;
    result = NAN;
    qword_1ECF325B8 = 0xFFFFFFFF00000000;
    qword_1ECF325E0 = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t WTF::fastDisableScavenger(WTF *this)
{
  unint64_t v1;

  v1 = ensure_data_instance();
  pthread_mutex_lock((pthread_mutex_t *)v1);
  ++pas_scavenger_should_suspend_count;
  while (pas_scavenger_current_state)
    pthread_cond_wait((pthread_cond_t *)(v1 + 64), (pthread_mutex_t *)v1);
  return pthread_mutex_unlock((pthread_mutex_t *)v1);
}

void WTF::forceEnablePGM(WTF *this)
{
  pas_probabilistic_guard_malloc_is_initialized = 1;
  pas_probabilistic_guard_malloc_can_use = 1;
  pas_probabilistic_guard_malloc_random = 1;
  pas_probabilistic_guard_malloc_counter = 0;
}

uint64_t pas_allocation_result_crash_on_error(uint64_t result, uint64_t a2)
{
  if ((a2 & 1) == 0)
    pas_panic_on_out_of_memory_error(result, a2);
  return result;
}

{
  if ((a2 & 1) == 0)
    pas_panic_on_out_of_memory_error(result, a2);
  return result;
}

void *bmalloc_allocate_impl_casual_case(size_t size, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  int v33;

  if (bmalloc::debugHeapCache == 1)
  {
LABEL_11:
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v11)
    {
      v12 = (size + 15) >> 4;
      if (size + 15 <= 0x1AF)
      {
        v14 = v11 + 184 * v12 + 8120;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
LABEL_26:
        v18 = *(_QWORD *)(v14 + 40);
        v19 = *(_QWORD *)(v14 + 24);
        if (!v18)
        {
          if (*(_BYTE *)(v14 + 5) == 6)
          {
            v21 = *(unsigned int *)(v14 + 32);
            v22 = *(_DWORD *)(v14 + 36);
            if (v21 < v22)
            {
              v23 = v14 + 8 * v21;
              *(_QWORD *)(v23 + 56) = 0;
              v24 = (unint64_t *)(v23 + 64);
              v25 = v22 - 1 - v21;
              while (v25)
              {
                v19 += 1024;
                v27 = *v24++;
                v26 = v27;
                LODWORD(v21) = v21 + 1;
                --v25;
                if (v27)
                {
                  v18 = __rbit64(v26);
                  *(_DWORD *)(v14 + 32) = v21;
                  *(_QWORD *)(v14 + 24) = v19;
                  goto LABEL_27;
                }
              }
              *(_DWORD *)(v14 + 32) = v22;
            }
          }
          if (pas_debug_heap_is_enabled(2))
            return pas_debug_heap_malloc(size);
          if (*(_BYTE *)(v14 + 5) == 6)
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v14, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_crash_on_error, v28, v29, v30, v31);
          else
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v14, size, 1uLL, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_crash_on_error);
        }
LABEL_27:
        v20 = __clz(v18);
        *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
        result = (void *)(v19 + 16 * v20);
LABEL_28:
        *(_BYTE *)v14 = 0;
        return result;
      }
      if ((size + 15) >> 5 >= 0x139)
      {
        v16 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v12, 0, 0);
        if (!v16)
          goto LABEL_29;
        v13 = *(unsigned int *)(v16 + 4);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      else
      {
        v13 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v12 + 626);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      if (*(_DWORD *)(v11 + 8052) > v13)
      {
        v14 = v11 + 8 * v13 + 8064;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if (!(_DWORD)v15)
          goto LABEL_26;
LABEL_19:
        *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
        result = (void *)(*(_QWORD *)(v14 + 8) - v15);
        goto LABEL_28;
      }
      if ((_DWORD)v13 != -1
        && (pas_thread_local_cache_get_local_allocator_slow(v11, v13, 0, a4, a5, a6, a7, a8) & 1) != 0)
      {
        v14 = v17;
        *(_BYTE *)v17 = 1;
        v15 = *(unsigned int *)(v17 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
        goto LABEL_26;
      }
    }
LABEL_29:
    v32[0] = (uint64_t)off_1ECF324B0;
    v32[1] = (uint64_t)&bmalloc_common_primitive_heap;
    v33 = 0;
    return bmalloc_allocate_impl_impl_slow(v32, size, a2);
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_malloc(size);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    goto LABEL_11;
  }
LABEL_5:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_malloc(size);
  __break(0xC471u);
  return result;
}

{
  void *result;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  if (bmalloc::debugHeapCache == 1)
  {
LABEL_11:
    v32[2] = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v11)
    {
      v12 = (size + 15) >> 4;
      if (size + 15 <= 0x1AF)
      {
        v14 = v11 + 184 * v12 + 8120;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
LABEL_26:
        v18 = *(_QWORD *)(v14 + 40);
        v19 = *(_QWORD *)(v14 + 24);
        if (!v18)
        {
          if (*(_BYTE *)(v14 + 5) == 6)
          {
            v21 = *(unsigned int *)(v14 + 32);
            v22 = *(_DWORD *)(v14 + 36);
            if (v21 < v22)
            {
              v23 = v14 + 8 * v21;
              *(_QWORD *)(v23 + 56) = 0;
              v24 = (unint64_t *)(v23 + 64);
              v25 = v22 - 1 - v21;
              while (v25)
              {
                v19 += 1024;
                v27 = *v24++;
                v26 = v27;
                LODWORD(v21) = v21 + 1;
                --v25;
                if (v27)
                {
                  v18 = __rbit64(v26);
                  *(_DWORD *)(v14 + 32) = v21;
                  *(_QWORD *)(v14 + 24) = v19;
                  goto LABEL_27;
                }
              }
              *(_DWORD *)(v14 + 32) = v22;
            }
          }
          if (pas_debug_heap_is_enabled(2))
            return pas_debug_heap_malloc(size);
          if (*(_BYTE *)(v14 + 5) == 6)
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v14, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_crash_on_error, v28, v29, v30, v31);
          else
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v14, size, 1uLL, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_crash_on_error);
        }
LABEL_27:
        v20 = __clz(v18);
        *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
        result = (void *)(v19 + 16 * v20);
LABEL_28:
        *(_BYTE *)v14 = 0;
        return result;
      }
      if ((size + 15) >> 5 >= 0x139)
      {
        v16 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v12, 0, 0);
        if (!v16)
          goto LABEL_29;
        v13 = *(unsigned int *)(v16 + 4);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      else
      {
        v13 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v12 + 626);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      if (*(_DWORD *)(v11 + 8052) > v13)
      {
        v14 = v11 + 8 * v13 + 8064;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if (!(_DWORD)v15)
          goto LABEL_26;
LABEL_19:
        *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
        result = (void *)(*(_QWORD *)(v14 + 8) - v15);
        goto LABEL_28;
      }
      if ((_DWORD)v13 != -1
        && (pas_thread_local_cache_get_local_allocator_slow(v11, v13, 0, a4, a5, a6, a7, a8) & 1) != 0)
      {
        v14 = v17;
        *(_BYTE *)v17 = 1;
        v15 = *(unsigned int *)(v17 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
        goto LABEL_26;
      }
    }
LABEL_29:
    v32[0] = (uint64_t)off_1ECF324B0;
    v32[1] = (uint64_t)&bmalloc_common_primitive_heap;
    return bmalloc_allocate_impl_impl_slow(v32, size, a2);
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_malloc(size);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    goto LABEL_11;
  }
LABEL_5:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_malloc(size);
  __break(0xC471u);
  return result;
}

void *bmalloc_allocate_impl_impl_slow(uint64_t *a1, size_t a2, uint64_t a3)
{
  void *result;
  uint64_t v4;

  result = bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 2, a2, 1uLL, a3, (uint64_t)&bmalloc_intrinsic_runtime_config, (uint64_t)&bmalloc_allocator_counts, 1);
  if ((v4 & 1) == 0)
    pas_panic_on_out_of_memory_error(result, v4);
  return result;
}

void *pas_debug_heap_allocate(size_t size, size_t alignment)
{
  malloc_zone_t **v3;
  _BYTE *v5;
  _BYTE *SlowCase;

  v3 = (malloc_zone_t **)bmalloc::debugHeapCache;
  if (alignment < 9)
  {
    if (bmalloc::debugHeapCache)
    {
      if (bmalloc::debugHeapCache == 1)
        goto LABEL_25;
    }
    else
    {
      SlowCase = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
      if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
        SlowCase = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
      if (!*SlowCase)
      {
        bmalloc::debugHeapCache = 1;
        __break(0xC471u);
        JUMPOUT(0x197AD04A4);
      }
      v3 = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
      if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
        v3 = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
      bmalloc::debugHeapCache = (uint64_t)v3;
      if (!v3)
      {
        __break(0xC471u);
        JUMPOUT(0x197AD0418);
      }
    }
    return malloc_type_zone_malloc(*v3, size, 0x107A63CuLL);
  }
  else
  {
    if (bmalloc::debugHeapCache)
    {
      if (bmalloc::debugHeapCache == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197AD04ACLL);
      }
    }
    else
    {
      v5 = (_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object;
      if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
        v5 = (_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0);
      if (!*v5)
      {
        bmalloc::debugHeapCache = 1;
        __break(0xC471u);
        JUMPOUT(0x197AD0494);
      }
      v3 = (malloc_zone_t **)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
      if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
        v3 = (malloc_zone_t **)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
      bmalloc::debugHeapCache = (uint64_t)v3;
      if (!v3)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x197AD03D4);
      }
    }
    return malloc_type_zone_memalign(*v3, alignment, size, 0x52BEF45BuLL);
  }
}

void *bmalloc_try_allocate_impl_casual_case(size_t size, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  int v33;

  if (bmalloc::debugHeapCache == 1)
  {
LABEL_11:
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v11)
    {
      v12 = (size + 15) >> 4;
      if (size + 15 <= 0x1AF)
      {
        v14 = v11 + 184 * v12 + 8120;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
LABEL_26:
        v18 = *(_QWORD *)(v14 + 40);
        v19 = *(_QWORD *)(v14 + 24);
        if (!v18)
        {
          if (*(_BYTE *)(v14 + 5) == 6)
          {
            v21 = *(unsigned int *)(v14 + 32);
            v22 = *(_DWORD *)(v14 + 36);
            if (v21 < v22)
            {
              v23 = v14 + 8 * v21;
              *(_QWORD *)(v23 + 56) = 0;
              v24 = (unint64_t *)(v23 + 64);
              v25 = v22 - 1 - v21;
              while (v25)
              {
                v19 += 1024;
                v27 = *v24++;
                v26 = v27;
                LODWORD(v21) = v21 + 1;
                --v25;
                if (v27)
                {
                  v18 = __rbit64(v26);
                  *(_DWORD *)(v14 + 32) = v21;
                  *(_QWORD *)(v14 + 24) = v19;
                  goto LABEL_27;
                }
              }
              *(_DWORD *)(v14 + 32) = v22;
            }
          }
          if (pas_debug_heap_is_enabled(2))
            return pas_debug_heap_malloc(size);
          if (*(_BYTE *)(v14 + 5) == 6)
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v14, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v28, v29, v30, v31);
          else
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v14, size, 1uLL, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
        }
LABEL_27:
        v20 = __clz(v18);
        *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
        result = (void *)(v19 + 16 * v20);
LABEL_28:
        *(_BYTE *)v14 = 0;
        return result;
      }
      if ((size + 15) >> 5 >= 0x139)
      {
        v16 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v12, 0, 0);
        if (!v16)
          goto LABEL_29;
        v13 = *(unsigned int *)(v16 + 4);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      else
      {
        v13 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v12 + 626);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      if (*(_DWORD *)(v11 + 8052) > v13)
      {
        v14 = v11 + 8 * v13 + 8064;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if (!(_DWORD)v15)
          goto LABEL_26;
LABEL_19:
        *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
        result = (void *)(*(_QWORD *)(v14 + 8) - v15);
        goto LABEL_28;
      }
      if ((_DWORD)v13 != -1
        && (pas_thread_local_cache_get_local_allocator_slow(v11, v13, 0, a4, a5, a6, a7, a8) & 1) != 0)
      {
        v14 = v17;
        *(_BYTE *)v17 = 1;
        v15 = *(unsigned int *)(v17 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
        goto LABEL_26;
      }
    }
LABEL_29:
    v32[0] = (uint64_t)off_1ECF324B0;
    v32[1] = (uint64_t)&bmalloc_common_primitive_heap;
    v33 = 0;
    return bmalloc_try_allocate_impl_impl_slow(v32, size, a2);
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_malloc(size);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    goto LABEL_11;
  }
LABEL_5:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_malloc(size);
  __break(0xC471u);
  return result;
}

{
  void *result;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  if (bmalloc::debugHeapCache == 1)
  {
LABEL_11:
    v32[2] = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v11)
    {
      v12 = (size + 15) >> 4;
      if (size + 15 <= 0x1AF)
      {
        v14 = v11 + 184 * v12 + 8120;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
LABEL_26:
        v18 = *(_QWORD *)(v14 + 40);
        v19 = *(_QWORD *)(v14 + 24);
        if (!v18)
        {
          if (*(_BYTE *)(v14 + 5) == 6)
          {
            v21 = *(unsigned int *)(v14 + 32);
            v22 = *(_DWORD *)(v14 + 36);
            if (v21 < v22)
            {
              v23 = v14 + 8 * v21;
              *(_QWORD *)(v23 + 56) = 0;
              v24 = (unint64_t *)(v23 + 64);
              v25 = v22 - 1 - v21;
              while (v25)
              {
                v19 += 1024;
                v27 = *v24++;
                v26 = v27;
                LODWORD(v21) = v21 + 1;
                --v25;
                if (v27)
                {
                  v18 = __rbit64(v26);
                  *(_DWORD *)(v14 + 32) = v21;
                  *(_QWORD *)(v14 + 24) = v19;
                  goto LABEL_27;
                }
              }
              *(_DWORD *)(v14 + 32) = v22;
            }
          }
          if (pas_debug_heap_is_enabled(2))
            return pas_debug_heap_malloc(size);
          if (*(_BYTE *)(v14 + 5) == 6)
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v14, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v28, v29, v30, v31);
          else
            return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v14, size, 1uLL, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
        }
LABEL_27:
        v20 = __clz(v18);
        *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
        result = (void *)(v19 + 16 * v20);
LABEL_28:
        *(_BYTE *)v14 = 0;
        return result;
      }
      if ((size + 15) >> 5 >= 0x139)
      {
        v16 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v12, 0, 0);
        if (!v16)
          goto LABEL_29;
        v13 = *(unsigned int *)(v16 + 4);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      else
      {
        v13 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v12 + 626);
        if (!(_DWORD)v13)
          goto LABEL_29;
      }
      if (*(_DWORD *)(v11 + 8052) > v13)
      {
        v14 = v11 + 8 * v13 + 8064;
        *(_BYTE *)v14 = 1;
        v15 = *(unsigned int *)(v14 + 16);
        if (!(_DWORD)v15)
          goto LABEL_26;
LABEL_19:
        *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
        result = (void *)(*(_QWORD *)(v14 + 8) - v15);
        goto LABEL_28;
      }
      if ((_DWORD)v13 != -1
        && (pas_thread_local_cache_get_local_allocator_slow(v11, v13, 0, a4, a5, a6, a7, a8) & 1) != 0)
      {
        v14 = v17;
        *(_BYTE *)v17 = 1;
        v15 = *(unsigned int *)(v17 + 16);
        if ((_DWORD)v15)
          goto LABEL_19;
        goto LABEL_26;
      }
    }
LABEL_29:
    v32[0] = (uint64_t)off_1ECF324B0;
    v32[1] = (uint64_t)&bmalloc_common_primitive_heap;
    return bmalloc_try_allocate_impl_impl_slow(v32, size, a2);
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_malloc(size);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_5;
    goto LABEL_10;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_10:
    bmalloc::debugHeapCache = 1;
    goto LABEL_11;
  }
LABEL_5:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_malloc(size);
  __break(0xC471u);
  return result;
}

void *bmalloc_try_allocate_impl_impl_slow(uint64_t *a1, size_t a2, uint64_t a3)
{
  return bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 2, a2, 1uLL, a3, (uint64_t)&bmalloc_intrinsic_runtime_config, (uint64_t)&bmalloc_allocator_counts, 1);
}

void *bmalloc_allocate_impl_for_realloc(size_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v8)
    return bmalloc_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = (a1 + 15) >> 4;
  if (a1 + 15 <= 0x1AF)
  {
    v10 = 23 * v9 + 7;
  }
  else
  {
    if ((a1 + 15) >> 5 > 0x138)
      return bmalloc_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
    v10 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v9 + 626);
    if (*(_DWORD *)(v8 + 8052) <= v10)
      return bmalloc_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = v8 + 8 * v10;
  v12 = v11 + 8064;
  *(_BYTE *)(v11 + 8064) = 1;
  v13 = *(unsigned int *)(v11 + 8080);
  if ((_DWORD)v13)
  {
    *(_DWORD *)(v12 + 16) = v13 - *(_DWORD *)(v12 + 20);
    result = (void *)(*(_QWORD *)(v12 + 8) - v13);
    *(_BYTE *)v12 = 0;
    return result;
  }
  v15 = *(_QWORD *)(v12 + 40);
  v16 = *(_QWORD *)(v12 + 24);
  if (v15)
  {
LABEL_10:
    v17 = __clz(v15);
    *(_QWORD *)(v12 + 40) = v15 & ~(0x8000000000000000 >> v17);
    result = (void *)(v16 + 16 * v17);
    *(_BYTE *)v12 = 0;
    return result;
  }
  if (*(_BYTE *)(v12 + 5) == 6)
  {
    v18 = *(unsigned int *)(v12 + 32);
    v19 = *(_DWORD *)(v12 + 36);
    if (v18 < v19)
    {
      *(_QWORD *)(v12 + 8 * v18 + 56) = 0;
      v20 = (unint64_t *)(8 * v18 + 8 * v10 + v8 + 8128);
      v21 = v19 - 1 - v18;
      while (v21)
      {
        v16 += 1024;
        v23 = *v20++;
        v22 = v23;
        LODWORD(v18) = v18 + 1;
        --v21;
        if (v23)
        {
          v15 = __rbit64(v22);
          *(_DWORD *)(v12 + 32) = v18;
          *(_QWORD *)(v12 + 24) = v16;
          goto LABEL_10;
        }
      }
      *(_DWORD *)(v12 + 32) = v19;
    }
  }
  *(_BYTE *)v12 = 0;
  return bmalloc_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
}

void *bmalloc_allocate_with_alignment_impl_casual_case(size_t size, size_t alignment, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9;
  void *result;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char local_allocator_slow;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  int v38;

  v9 = (uint8x8_t)vcnt_s8((int8x8_t)alignment);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
    return 0;
  if (bmalloc::debugHeapCache == 1)
  {
LABEL_13:
    v13 = (size + alignment - 1) & -(uint64_t)alignment;
    if (size < alignment)
      v13 = alignment;
    if (alignment != 1)
      size = v13;
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v14)
      goto LABEL_23;
    v15 = (size + 15) >> 4;
    if ((size + 15) >> 5 >= 0x139)
    {
      v18 = v14;
      v19 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v15, 0, 0);
      if (!v19)
        goto LABEL_23;
      v14 = v18;
      v16 = *(unsigned int *)(v19 + 4);
      if (!*(_DWORD *)(v19 + 4))
        goto LABEL_23;
    }
    else
    {
      v16 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626);
      if (!(_DWORD)v16)
      {
LABEL_23:
        v37[0] = (uint64_t)off_1ECF324B0;
        v37[1] = (uint64_t)&bmalloc_common_primitive_heap;
        v38 = 0;
        return bmalloc_allocate_with_alignment_impl_impl_slow(v37, size, alignment, a3);
      }
    }
    if (*(_DWORD *)(v14 + 8052) <= v16)
    {
      if ((_DWORD)v16 == -1)
        goto LABEL_23;
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v14, v16, 0, a4, a5, a6, a7, a8);
      if (alignment == 1 || (local_allocator_slow & 1) == 0)
      {
        if ((local_allocator_slow & 1) == 0)
          goto LABEL_23;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = v14 + 8 * v16 + 8064;
      if (alignment == 1)
        goto LABEL_31;
    }
    if (1 << *(_BYTE *)(v17 + 4) < alignment)
      goto LABEL_23;
LABEL_31:
    *(_BYTE *)v17 = 1;
    v21 = *(unsigned int *)(v17 + 16);
    if ((_DWORD)v21)
    {
      *(_DWORD *)(v17 + 16) = v21 - *(_DWORD *)(v17 + 20);
      result = (void *)(*(_QWORD *)(v17 + 8) - v21);
    }
    else
    {
      v22 = *(_QWORD *)(v17 + 40);
      v23 = *(_QWORD *)(v17 + 24);
      if (!v22)
      {
        v36 = v17;
        if (*(_BYTE *)(v17 + 5) == 6)
        {
          v25 = *(unsigned int *)(v17 + 32);
          v26 = *(_DWORD *)(v17 + 36);
          if (v25 < v26)
          {
            v27 = v17 + 8 * v25;
            *(_QWORD *)(v27 + 56) = 0;
            v28 = (unint64_t *)(v27 + 64);
            v29 = v26 - 1 - v25;
            while (v29)
            {
              v23 += 1024;
              v31 = *v28++;
              v30 = v31;
              LODWORD(v25) = v25 + 1;
              --v29;
              if (v31)
              {
                v22 = __rbit64(v30);
                *(_DWORD *)(v17 + 32) = v25;
                *(_QWORD *)(v17 + 24) = v23;
                goto LABEL_34;
              }
            }
            *(_DWORD *)(v17 + 32) = v26;
          }
        }
        if (pas_debug_heap_is_enabled(2))
          return pas_debug_heap_allocate(size, alignment);
        if (*(_BYTE *)(v36 + 5) == 6)
          return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v36, a3, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_crash_on_error, v32, v33, v34, v35);
        else
          return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v36, size, alignment, a3, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_crash_on_error);
      }
LABEL_34:
      v24 = __clz(v22);
      *(_QWORD *)(v17 + 40) = v22 & ~(0x8000000000000000 >> v24);
      result = (void *)(v23 + 16 * v24);
    }
    *(_BYTE *)v17 = 0;
    return result;
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_allocate(size, alignment);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_6;
    goto LABEL_12;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_12:
    bmalloc::debugHeapCache = 1;
    goto LABEL_13;
  }
LABEL_6:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_allocate(size, alignment);
  __break(0xC471u);
  return result;
}

void *bmalloc_allocate_with_alignment_impl_impl_slow(uint64_t *a1, size_t a2, unint64_t a3, uint64_t a4)
{
  void *result;
  uint64_t v5;

  result = bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 2, a2, a3, a4, (uint64_t)&bmalloc_intrinsic_runtime_config, (uint64_t)&bmalloc_allocator_counts, 1);
  if ((v5 & 1) == 0)
    pas_panic_on_out_of_memory_error(result, v5);
  return result;
}

void *bmalloc_try_allocate_with_alignment_impl_casual_case(size_t size, size_t alignment, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9;
  void *result;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char local_allocator_slow;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  int v38;

  v9 = (uint8x8_t)vcnt_s8((int8x8_t)alignment);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
    return 0;
  if (bmalloc::debugHeapCache == 1)
  {
LABEL_13:
    v13 = (size + alignment - 1) & -(uint64_t)alignment;
    if (size < alignment)
      v13 = alignment;
    if (alignment != 1)
      size = v13;
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v14)
      goto LABEL_23;
    v15 = (size + 15) >> 4;
    if ((size + 15) >> 5 >= 0x139)
    {
      v18 = v14;
      v19 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v15, 0, 0);
      if (!v19)
        goto LABEL_23;
      v14 = v18;
      v16 = *(unsigned int *)(v19 + 4);
      if (!*(_DWORD *)(v19 + 4))
        goto LABEL_23;
    }
    else
    {
      v16 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626);
      if (!(_DWORD)v16)
      {
LABEL_23:
        v37[0] = (uint64_t)off_1ECF324B0;
        v37[1] = (uint64_t)&bmalloc_common_primitive_heap;
        v38 = 0;
        return bmalloc_try_allocate_with_alignment_impl_impl_slow(v37, size, alignment, a3);
      }
    }
    if (*(_DWORD *)(v14 + 8052) <= v16)
    {
      if ((_DWORD)v16 == -1)
        goto LABEL_23;
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v14, v16, 0, a4, a5, a6, a7, a8);
      if (alignment == 1 || (local_allocator_slow & 1) == 0)
      {
        if ((local_allocator_slow & 1) == 0)
          goto LABEL_23;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = v14 + 8 * v16 + 8064;
      if (alignment == 1)
        goto LABEL_31;
    }
    if (1 << *(_BYTE *)(v17 + 4) < alignment)
      goto LABEL_23;
LABEL_31:
    *(_BYTE *)v17 = 1;
    v21 = *(unsigned int *)(v17 + 16);
    if ((_DWORD)v21)
    {
      *(_DWORD *)(v17 + 16) = v21 - *(_DWORD *)(v17 + 20);
      result = (void *)(*(_QWORD *)(v17 + 8) - v21);
    }
    else
    {
      v22 = *(_QWORD *)(v17 + 40);
      v23 = *(_QWORD *)(v17 + 24);
      if (!v22)
      {
        v36 = v17;
        if (*(_BYTE *)(v17 + 5) == 6)
        {
          v25 = *(unsigned int *)(v17 + 32);
          v26 = *(_DWORD *)(v17 + 36);
          if (v25 < v26)
          {
            v27 = v17 + 8 * v25;
            *(_QWORD *)(v27 + 56) = 0;
            v28 = (unint64_t *)(v27 + 64);
            v29 = v26 - 1 - v25;
            while (v29)
            {
              v23 += 1024;
              v31 = *v28++;
              v30 = v31;
              LODWORD(v25) = v25 + 1;
              --v29;
              if (v31)
              {
                v22 = __rbit64(v30);
                *(_DWORD *)(v17 + 32) = v25;
                *(_QWORD *)(v17 + 24) = v23;
                goto LABEL_34;
              }
            }
            *(_DWORD *)(v17 + 32) = v26;
          }
        }
        if (pas_debug_heap_is_enabled(2))
          return pas_debug_heap_allocate(size, alignment);
        if (*(_BYTE *)(v36 + 5) == 6)
          return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v36, a3, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v32, v33, v34, v35);
        else
          return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v36, size, alignment, a3, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
      }
LABEL_34:
      v24 = __clz(v22);
      *(_QWORD *)(v17 + 40) = v22 & ~(0x8000000000000000 >> v24);
      result = (void *)(v23 + 16 * v24);
    }
    *(_BYTE *)v17 = 0;
    return result;
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_allocate(size, alignment);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_6;
    goto LABEL_12;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_12:
    bmalloc::debugHeapCache = 1;
    goto LABEL_13;
  }
LABEL_6:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_allocate(size, alignment);
  __break(0xC471u);
  return result;
}

{
  uint8x8_t v9;
  void *result;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char local_allocator_slow;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  int v38;

  v9 = (uint8x8_t)vcnt_s8((int8x8_t)alignment);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
    return 0;
  if (bmalloc::debugHeapCache == 1)
  {
LABEL_13:
    v13 = (size + alignment - 1) & -(uint64_t)alignment;
    if (size < alignment)
      v13 = alignment;
    if (alignment != 1)
      size = v13;
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v14)
      goto LABEL_23;
    v15 = (size + 15) >> 4;
    if ((size + 15) >> 5 >= 0x139)
    {
      v18 = v14;
      v19 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&bmalloc_common_primitive_heap, v15, 0, 0);
      if (!v19)
        goto LABEL_23;
      v14 = v18;
      v16 = *(unsigned int *)(v19 + 4);
      if (!*(_DWORD *)(v19 + 4))
        goto LABEL_23;
    }
    else
    {
      v16 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626);
      if (!(_DWORD)v16)
      {
LABEL_23:
        v37[0] = (uint64_t)off_1ECF324B0;
        v37[1] = (uint64_t)&bmalloc_common_primitive_heap;
        v38 = 0;
        return bmalloc_try_allocate_with_alignment_impl_impl_slow(v37, size, alignment, a3);
      }
    }
    if (*(_DWORD *)(v14 + 8052) <= v16)
    {
      if ((_DWORD)v16 == -1)
        goto LABEL_23;
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v14, v16, 0, a4, a5, a6, a7, a8);
      if (alignment == 1 || (local_allocator_slow & 1) == 0)
      {
        if ((local_allocator_slow & 1) == 0)
          goto LABEL_23;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = v14 + 8 * v16 + 8064;
      if (alignment == 1)
        goto LABEL_31;
    }
    if (1 << *(_BYTE *)(v17 + 4) < alignment)
      goto LABEL_23;
LABEL_31:
    *(_BYTE *)v17 = 1;
    v21 = *(unsigned int *)(v17 + 16);
    if ((_DWORD)v21)
    {
      *(_DWORD *)(v17 + 16) = v21 - *(_DWORD *)(v17 + 20);
      result = (void *)(*(_QWORD *)(v17 + 8) - v21);
    }
    else
    {
      v22 = *(_QWORD *)(v17 + 40);
      v23 = *(_QWORD *)(v17 + 24);
      if (!v22)
      {
        v36 = v17;
        if (*(_BYTE *)(v17 + 5) == 6)
        {
          v25 = *(unsigned int *)(v17 + 32);
          v26 = *(_DWORD *)(v17 + 36);
          if (v25 < v26)
          {
            v27 = v17 + 8 * v25;
            *(_QWORD *)(v27 + 56) = 0;
            v28 = (unint64_t *)(v27 + 64);
            v29 = v26 - 1 - v25;
            while (v29)
            {
              v23 += 1024;
              v31 = *v28++;
              v30 = v31;
              LODWORD(v25) = v25 + 1;
              --v29;
              if (v31)
              {
                v22 = __rbit64(v30);
                *(_DWORD *)(v17 + 32) = v25;
                *(_QWORD *)(v17 + 24) = v23;
                goto LABEL_34;
              }
            }
            *(_DWORD *)(v17 + 32) = v26;
          }
        }
        if (pas_debug_heap_is_enabled(2))
          return pas_debug_heap_allocate(size, alignment);
        if (*(_BYTE *)(v36 + 5) == 6)
          return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v36, a3, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v32, v33, v34, v35);
        else
          return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v36, size, alignment, a3, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
      }
LABEL_34:
      v24 = __clz(v22);
      *(_QWORD *)(v17 + 40) = v22 & ~(0x8000000000000000 >> v24);
      result = (void *)(v23 + 16 * v24);
    }
    *(_BYTE *)v17 = 0;
    return result;
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_allocate(size, alignment);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_6;
    goto LABEL_12;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_12:
    bmalloc::debugHeapCache = 1;
    goto LABEL_13;
  }
LABEL_6:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_allocate(size, alignment);
  __break(0xC471u);
  return result;
}

void *bmalloc_try_allocate_with_alignment_impl_impl_slow(uint64_t *a1, size_t a2, unint64_t a3, uint64_t a4)
{
  return bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 2, a2, a3, a4, (uint64_t)&bmalloc_intrinsic_runtime_config, (uint64_t)&bmalloc_allocator_counts, 1);
}

void *bmalloc_try_allocate_impl_for_realloc(size_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v8)
    return bmalloc_try_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = (a1 + 15) >> 4;
  if (a1 + 15 <= 0x1AF)
  {
    v10 = 23 * v9 + 7;
  }
  else
  {
    if ((a1 + 15) >> 5 > 0x138)
      return bmalloc_try_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
    v10 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v9 + 626);
    if (*(_DWORD *)(v8 + 8052) <= v10)
      return bmalloc_try_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = v8 + 8 * v10;
  v12 = v11 + 8064;
  *(_BYTE *)(v11 + 8064) = 1;
  v13 = *(unsigned int *)(v11 + 8080);
  if ((_DWORD)v13)
  {
    *(_DWORD *)(v12 + 16) = v13 - *(_DWORD *)(v12 + 20);
    result = (void *)(*(_QWORD *)(v12 + 8) - v13);
    *(_BYTE *)v12 = 0;
    return result;
  }
  v15 = *(_QWORD *)(v12 + 40);
  v16 = *(_QWORD *)(v12 + 24);
  if (v15)
  {
LABEL_10:
    v17 = __clz(v15);
    *(_QWORD *)(v12 + 40) = v15 & ~(0x8000000000000000 >> v17);
    result = (void *)(v16 + 16 * v17);
    *(_BYTE *)v12 = 0;
    return result;
  }
  if (*(_BYTE *)(v12 + 5) == 6)
  {
    v18 = *(unsigned int *)(v12 + 32);
    v19 = *(_DWORD *)(v12 + 36);
    if (v18 < v19)
    {
      *(_QWORD *)(v12 + 8 * v18 + 56) = 0;
      v20 = (unint64_t *)(8 * v18 + 8 * v10 + v8 + 8128);
      v21 = v19 - 1 - v18;
      while (v21)
      {
        v16 += 1024;
        v23 = *v20++;
        v22 = v23;
        LODWORD(v18) = v18 + 1;
        --v21;
        if (v23)
        {
          v15 = __rbit64(v22);
          *(_DWORD *)(v12 + 32) = v18;
          *(_QWORD *)(v12 + 24) = v16;
          goto LABEL_10;
        }
      }
      *(_DWORD *)(v12 + 32) = v19;
    }
  }
  *(_BYTE *)v12 = 0;
  return bmalloc_try_allocate_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::FilePrintStream::~FilePrintStream(FILE **this)
{
  if (*((_DWORD *)this + 4) != 1)
    fclose(this[1]);
}

{
  if (*((_DWORD *)this + 4) != 1)
    fclose(this[1]);
}

void WTF::FilePrintStream::~FilePrintStream(FILE **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 4) != 1)
    fclose(this[1]);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::FilePrintStream::open@<X0>(WTF::FilePrintStream *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = (uint64_t)fopen((const char *)this, a2);
  if (result)
  {
    v6 = result;
    result = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)result = off_1E3571C18;
    *(_QWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 16) = 0;
  }
  *a3 = result;
  return result;
}

uint64_t WTF::FilePrintStream::vprintf(FILE **this, const char *a2, va_list a3)
{
  return vfprintf(this[1], a2, a3);
}

uint64_t WTF::FilePrintStream::flush(FILE **this)
{
  return fflush(this[1]);
}

void WTF::FileSystemImpl::encodeForFileName(WTF::StringImpl **this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::StringImpl **a8@<X8>)
{
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unint64_t v22;
  __int16 v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  char v81;
  _WORD **v82;
  _WORD *v83;
  const char *v84;
  int v85;
  _WORD *v86;
  _BYTE v87[2];
  unsigned int v88;
  _WORD v89[7];
  _BYTE v90[2];
  unsigned int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v10 = *this;
  if (!*this)
    goto LABEL_9;
  v11 = (WTF::AtomStringImpl *)*((unsigned int *)v10 + 1);
  if (!(_DWORD)v11)
  {
    *(_DWORD *)v10 += 2;
LABEL_9:
    *a8 = v10;
    return;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v78, v11, a2, a3, a4, a5, a6, a7);
  v19 = *this;
  if (*this && *((_DWORD *)v19 + 1))
  {
    v20 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
    if ((*((_BYTE *)v19 + 16) & 4) != 0)
      v21 = *v20;
    else
      v21 = *(unsigned __int16 *)v20;
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = v21;
    if (++v22 < (unint64_t)v11 && (v25 = *this) != 0 && v22 < *((unsigned int *)v25 + 1))
    {
      v26 = *((_QWORD *)v25 + 1);
      if ((*((_BYTE *)v25 + 16) & 4) != 0)
      {
        v21 = *(unsigned __int8 *)(v26 + v22);
        if (v24 > 0x7F)
        {
LABEL_29:
          if ((v24 & 0xFC00) == 0xD800 && (v21 & 0xFC00) != 0xDC00
            || (v23 & 0xFC00) != 0xD800 && (v24 & 0xFC00) == 0xDC00)
          {
            v31 = v24 >> 8;
            v32 = 15;
            do
            {
              *((_BYTE *)v89 + v32--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v31 & 0xF];
              v29 = v31 > 0xF;
              v31 >>= 4;
            }
            while (v29);
            v77 = v21;
            if (v32 + 2 < 16)
            {
              v33 = v89 + v32 + 1;
            }
            else
            {
              memset(v90, 48, v32 - 13);
              v33 = v90;
            }
            v91 = &v91 - v33;
            v37 = v24;
            v38 = 15;
            do
            {
              v87[v38-- - 2] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v37 & 0xF];
              v29 = v37 > 0xF;
              v37 >>= 4;
            }
            while (v29);
            if (v38 + 2 < 16)
            {
              v39 = &v87[v38 - 1];
            }
            else
            {
              v39 = v87;
              memset(v87, 48, v38 - 13);
            }
            v88 = &v88 - (_DWORD)v39;
            v83 = v89;
            v84 = "%+";
            v85 = 2;
            v82 = &v86;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((uint64_t)&v78, (uint64_t)&v84, (uint64_t)&v83, (uint64_t)&v82, v15, v16, v17, v18);
            v21 = v77;
            goto LABEL_13;
          }
          goto LABEL_37;
        }
      }
      else
      {
        v21 = *(unsigned __int16 *)(v26 + 2 * v22);
        if (v24 > 0x7F)
          goto LABEL_29;
      }
    }
    else
    {
      v21 = 0u;
      if (v24 > 0x7F)
        goto LABEL_29;
    }
    v27 = v24;
    if (WTF::FileSystemImpl::needsEscaping[v24])
    {
      v28 = 15;
      do
      {
        *((_BYTE *)v89 + v28--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v27 & 0xF];
        v29 = v27 > 0xF;
        v27 >>= 4;
      }
      while (v29);
      if (v28 + 2 < 16)
      {
        v30 = v89 + v28 + 1;
      }
      else
      {
        memset(v90, 48, v28 - 13);
        v30 = v90;
      }
      v91 = &v91 - v30;
      LOBYTE(v84) = 37;
      v86 = v89;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((uint64_t)&v78, &v84, (uint64_t)&v86, v14, v15, v16, v17, v18);
      goto LABEL_13;
    }
LABEL_37:
    v89[0] = v24;
    if (!v79 || ((v34 = v80, v80 < *((_DWORD *)v79 + 1)) ? (v35 = v78 == 0) : (v35 = 0), !v35))
    {
LABEL_12:
      WTF::StringBuilder::append((uint64_t)&v78, v89, 1uLL, v14, v15, v16, v17, v18);
      goto LABEL_13;
    }
    if ((*((_BYTE *)v79 + 16) & 4) != 0)
    {
      if (v24 > 0xFF)
        goto LABEL_12;
      v40 = *((_QWORD *)v79 + 1);
      ++v80;
      *(_BYTE *)(v40 + v34) = v24;
    }
    else
    {
      v36 = *((_QWORD *)v79 + 1);
      ++v80;
      *(_WORD *)(v36 + 2 * v34) = v24;
    }
LABEL_13:
    v23 = v24;
  }
  while ((WTF::AtomStringImpl *)v22 != v11);
  v41 = v78;
  if (v78)
    goto LABEL_66;
  if ((v80 & 0x80000000) == 0 && v79 && *((_DWORD *)v79 + 1) > v80 + (v80 >> 2))
  {
    if ((*((_BYTE *)v79 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v78, (WTF::AtomStringImpl *)v80, v13, v14, v15, v16, v17, v18);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v78, (WTF::AtomStringImpl *)v80, v13, v14, v15, v16, v17, v18);
    v49 = v78;
    v78 = v79;
    v79 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v78);
  v41 = v78;
  if (v78)
LABEL_66:
    *(_DWORD *)v41 += 2;
  *a8 = v41;
  v58 = v79;
  v79 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 != 2)
    {
      *(_DWORD *)v58 -= 2;
      goto LABEL_70;
    }
    WTF::StringImpl::~StringImpl(v58, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    v59 = v78;
    v78 = 0;
    if (v59)
    {
LABEL_73:
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  else
  {
LABEL_70:
    v59 = v78;
    v78 = 0;
    if (v59)
      goto LABEL_73;
  }
}

void WTF::FileSystemImpl::decodeFromFilename(WTF::StringImpl **this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::StringImpl **a8@<X8>)
{
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  __int16 v52;
  __int16 v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  __int16 v57;
  char v58;
  char v59;
  unsigned __int8 v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  char v103;
  int8x16_t v104;

  v10 = *this;
  if (!*this)
    goto LABEL_146;
  v11 = (WTF::AtomStringImpl *)*((unsigned int *)v10 + 1);
  if (!(_DWORD)v11)
  {
    *(_DWORD *)v10 += 2;
LABEL_146:
    *a8 = v10;
    return;
  }
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v100, v11, a2, a3, a4, a5, a6, a7);
  v20 = 0;
  do
  {
    v21 = *this;
    if (!*this || (v22 = *((_DWORD *)v21 + 1), v22 <= v20))
    {
      v25 = 0;
      goto LABEL_12;
    }
    v23 = *((_DWORD *)v21 + 4);
    v24 = *((_QWORD *)v21 + 1);
    if ((v23 & 4) != 0)
    {
      v25 = *(unsigned __int8 *)(v24 + v20);
      if (v25 != 37)
        goto LABEL_12;
LABEL_21:
      v29 = v20 + 2;
      if (v29 >= v11)
        goto LABEL_148;
      v30 = v20 + 1;
      if (v22 <= v20 + 1)
      {
        LOWORD(v31) = 0;
      }
      else
      {
        if ((v23 & 4) != 0)
        {
          v31 = *(unsigned __int8 *)(v24 + v30);
          if (v31 == 43)
          {
LABEL_37:
            v34 = v20 + 5;
            if (v34 >= v11)
              goto LABEL_148;
            if (v22 <= v29)
            {
              v35 = 0;
            }
            else if ((v23 & 4) != 0)
            {
              v35 = *(unsigned __int8 *)(v24 + v29);
              if ((v35 - 48) < 0xA)
                goto LABEL_73;
            }
            else
            {
              v35 = *(unsigned __int16 *)(v24 + 2 * v29);
              if ((v35 - 48) < 0xA)
                goto LABEL_73;
            }
            if ((v35 | 0x20u) - 97 > 5)
              goto LABEL_148;
LABEL_73:
            v45 = v20 + 3;
            if (v22 <= v45)
            {
              v46 = 0;
            }
            else if ((v23 & 4) != 0)
            {
              v46 = *(unsigned __int8 *)(v24 + v45);
              if ((v46 - 48) < 0xA)
                goto LABEL_80;
            }
            else
            {
              v46 = *(unsigned __int16 *)(v24 + 2 * v45);
              if ((v46 - 48) < 0xA)
                goto LABEL_80;
            }
            if ((v46 | 0x20u) - 97 > 5)
              goto LABEL_148;
LABEL_80:
            v47 = v20 + 4;
            if (v22 <= v47)
            {
              v48 = 0;
            }
            else if ((v23 & 4) != 0)
            {
              v48 = *(unsigned __int8 *)(v24 + v47);
              if ((v48 - 48) < 0xA)
                goto LABEL_87;
            }
            else
            {
              v48 = *(unsigned __int16 *)(v24 + 2 * v47);
              if ((v48 - 48) < 0xA)
                goto LABEL_87;
            }
            if ((v48 | 0x20u) - 97 > 5)
              goto LABEL_148;
LABEL_87:
            if (v22 <= v34)
            {
              v49 = 0;
            }
            else if ((v23 & 4) != 0)
            {
              v49 = *(unsigned __int8 *)(v24 + v34);
              if ((v49 - 48) < 0xA)
                goto LABEL_94;
            }
            else
            {
              v49 = *(unsigned __int16 *)(v24 + 2 * v34);
              if ((v49 - 48) < 0xA)
                goto LABEL_94;
            }
            if ((v49 | 0x20u) - 97 > 5)
            {
LABEL_148:
              v65 = 0;
              goto LABEL_156;
            }
LABEL_94:
            if (v22 <= v29)
            {
              if (v22 <= v45)
              {
                LOWORD(v50) = 0;
                v51 = 0;
                goto LABEL_107;
              }
              v50 = 0;
              if ((v23 & 4) == 0)
                goto LABEL_100;
            }
            else
            {
              if ((v23 & 4) == 0)
              {
                v50 = *(unsigned __int16 *)(v24 + 2 * v29);
                if (v22 <= v45)
                {
LABEL_106:
                  v51 = 0;
                  if (v50 <= 0x40)
                    goto LABEL_107;
LABEL_108:
                  v52 = 9;
LABEL_109:
                  if (v51 >= 0x41)
                    v53 = ((_BYTE)v51 + 9) & 0xF;
                  else
                    v53 = v51 - 48;
                  if (v22 <= v47)
                  {
                    if (v22 <= v34)
                    {
                      LOBYTE(v54) = 0;
                      v55 = 0;
                      goto LABEL_125;
                    }
                    v54 = 0;
                    if ((v23 & 4) == 0)
                      goto LABEL_118;
                  }
                  else
                  {
                    if ((v23 & 4) == 0)
                    {
                      v54 = *(unsigned __int16 *)(v24 + 2 * v47);
                      if (v22 <= v34)
                      {
LABEL_124:
                        v55 = 0;
                        if (v54 <= 0x40)
                          goto LABEL_125;
LABEL_126:
                        v56 = 9;
LABEL_127:
                        v57 = ((v52 + (_WORD)v50) << 12) | (v53 << 8);
                        v58 = v56 + v54;
                        if (v55 >= 0x41)
                          v59 = (v55 + 9) & 0xF;
                        else
                          v59 = v55 - 48;
                        v60 = v59 | (16 * v58);
                        v61 = v57 | v60;
                        v104.i16[0] = v61;
                        if (v101)
                        {
                          v62 = v102;
                          if (v102 < *((_DWORD *)v101 + 1) && !v100)
                          {
                            if ((*((_BYTE *)v101 + 16) & 4) == 0)
                            {
                              v63 = *((_QWORD *)v101 + 1);
                              ++v102;
                              *(_WORD *)(v63 + 2 * v62) = v61;
LABEL_138:
                              v20 += 5;
                              goto LABEL_5;
                            }
                            if ((unsigned __int16)(v57 | v60) <= 0xFFu)
                            {
                              v64 = *((_QWORD *)v101 + 1);
                              ++v102;
                              *(_BYTE *)(v64 + v62) = v60;
                              goto LABEL_138;
                            }
                          }
                        }
                        WTF::StringBuilder::append((uint64_t)&v100, &v104, 1uLL, v15, v16, v17, v18, v19);
                        goto LABEL_138;
                      }
LABEL_118:
                      v55 = *(unsigned __int16 *)(v24 + 2 * v34);
                      if (v54 <= 0x40)
                        goto LABEL_125;
                      goto LABEL_126;
                    }
                    v54 = *(unsigned __int8 *)(v24 + v47);
                    if (v22 <= v34)
                      goto LABEL_124;
                  }
                  v55 = *(unsigned __int8 *)(v24 + v34);
                  if (v54 > 0x40)
                    goto LABEL_126;
LABEL_125:
                  v56 = 0;
                  goto LABEL_127;
                }
LABEL_100:
                v51 = *(unsigned __int16 *)(v24 + 2 * v45);
                if (v50 <= 0x40)
                  goto LABEL_107;
                goto LABEL_108;
              }
              v50 = *(unsigned __int8 *)(v24 + v29);
              if (v22 <= v45)
                goto LABEL_106;
            }
            v51 = *(unsigned __int8 *)(v24 + v45);
            if (v50 > 0x40)
              goto LABEL_108;
LABEL_107:
            v52 = 0;
            goto LABEL_109;
          }
        }
        else
        {
          v31 = *(unsigned __int16 *)(v24 + 2 * v30);
          if (v31 == 43)
            goto LABEL_37;
        }
        if ((v31 - 48) < 0xA)
        {
LABEL_31:
          if (v22 <= v29)
          {
            v33 = 0;
          }
          else if ((v23 & 4) != 0)
          {
            v33 = *(unsigned __int8 *)(v24 + v29);
            if ((v33 - 48) < 0xA)
              goto LABEL_44;
          }
          else
          {
            v33 = *(unsigned __int16 *)(v24 + 2 * v29);
            if ((v33 - 48) < 0xA)
              goto LABEL_44;
          }
          if ((v33 | 0x20u) - 97 > 5)
            goto LABEL_148;
LABEL_44:
          if (v22 <= v30)
          {
            if (v22 <= v29)
            {
              LOBYTE(v36) = 0;
              v37 = 0;
              goto LABEL_57;
            }
            v36 = 0;
            if ((v23 & 4) == 0)
            {
LABEL_50:
              v37 = *(unsigned __int16 *)(v24 + 2 * v29);
              if (v36 > 0x40)
                goto LABEL_58;
LABEL_57:
              v38 = 0;
LABEL_59:
              v39 = v38 + v36;
              if (v37 >= 0x41)
                v40 = (v37 + 9) & 0xF;
              else
                v40 = v37 - 48;
              v41 = v40 | (16 * v39);
              v104.i8[0] = v41;
              if (!v101 || (v42 = v102, v102 >= *((_DWORD *)v101 + 1)) || v100)
              {
                WTF::StringBuilder::append((uint64_t)&v100, &v104, 1uLL, v15, v16, v17, v18, v19);
                v20 += 2;
              }
              else
              {
                v43 = *((_DWORD *)v101 + 4);
                v44 = *((_QWORD *)v101 + 1);
                ++v102;
                if ((v43 & 4) != 0)
                  *(_BYTE *)(v44 + v42) = v41;
                else
                  *(_WORD *)(v44 + 2 * v42) = v41;
                v20 += 2;
              }
              goto LABEL_5;
            }
          }
          else
          {
            if ((v23 & 4) == 0)
            {
              v36 = *(unsigned __int16 *)(v24 + 2 * v30);
              if (v22 <= v29)
              {
LABEL_56:
                v37 = 0;
                if (v36 <= 0x40)
                  goto LABEL_57;
LABEL_58:
                v38 = 9;
                goto LABEL_59;
              }
              goto LABEL_50;
            }
            v36 = *(unsigned __int8 *)(v24 + v30);
            if (v22 <= v29)
              goto LABEL_56;
          }
          v37 = *(unsigned __int8 *)(v24 + v29);
          if (v36 <= 0x40)
            goto LABEL_57;
          goto LABEL_58;
        }
      }
      if ((unsigned __int16)((v31 | 0x20) - 97) > 5u)
        goto LABEL_148;
      goto LABEL_31;
    }
    v25 = *(unsigned __int16 *)(v24 + 2 * v20);
    if (v25 == 37)
      goto LABEL_21;
LABEL_12:
    v104.i16[0] = v25;
    if (!v101 || ((v26 = v102, v102 < *((_DWORD *)v101 + 1)) ? (v27 = v100 == 0) : (v27 = 0), !v27))
    {
LABEL_4:
      WTF::StringBuilder::append((uint64_t)&v100, &v104, 1uLL, v15, v16, v17, v18, v19);
      goto LABEL_5;
    }
    if ((*((_BYTE *)v101 + 16) & 4) != 0)
    {
      if (v25 > 0xFF)
        goto LABEL_4;
      v32 = *((_QWORD *)v101 + 1);
      ++v102;
      *(_BYTE *)(v32 + v26) = v25;
    }
    else
    {
      v28 = *((_QWORD *)v101 + 1);
      ++v102;
      *(_WORD *)(v28 + 2 * v26) = v25;
    }
LABEL_5:
    ++v20;
  }
  while (v20 < v11);
  v65 = v100;
  if (v100)
    goto LABEL_155;
  if ((v102 & 0x80000000) == 0 && v101 && *((_DWORD *)v101 + 1) > v102 + (v102 >> 2))
  {
    if ((*((_BYTE *)v101 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v100, (WTF::AtomStringImpl *)v102, v14, v15, v16, v17, v18, v19);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v100, (WTF::AtomStringImpl *)v102, v14, v15, v16, v17, v18, v19);
    v73 = v100;
    v100 = v101;
    v101 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, v66, v67, v68, v69, v70, v71, v72);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v100);
  v65 = v100;
  if (v100)
LABEL_155:
    *(_DWORD *)v65 += 2;
LABEL_156:
  *a8 = v65;
  v82 = v101;
  v101 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 != 2)
    {
      *(_DWORD *)v82 -= 2;
      goto LABEL_159;
    }
    WTF::StringImpl::~StringImpl(v82, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    v83 = v100;
    v100 = 0;
    if (v83)
    {
LABEL_162:
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::~StringImpl(v83, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      }
      else
      {
        *(_DWORD *)v83 -= 2;
      }
    }
  }
  else
  {
LABEL_159:
    v83 = v100;
    v100 = 0;
    if (v83)
      goto LABEL_162;
  }
}

_QWORD *WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash@<X0>(WTF::FileSystemImpl *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;

  result = *(_QWORD **)this;
  if (!result)
    goto LABEL_54;
  v4 = *((_DWORD *)result + 4);
  v5 = result[1];
  v6 = *((unsigned int *)result + 1);
  if ((v4 & 4) != 0)
  {
    if (!(_DWORD)v6)
      goto LABEL_53;
    v7 = 0x7FFFFFFFLL;
    if ((v6 & 0x80000000) == 0)
      v7 = v6 - 1;
    if (v7 >= v6)
      goto LABEL_56;
    v8 = *(unsigned __int8 *)(v5 + v7);
    if (v7 - 1 < v6)
    {
      if (v8 != 47)
      {
        while (v7)
        {
          v9 = v7 - 1;
          v20 = *(unsigned __int8 *)(v5 - 1 + v7--);
          if (v20 == 47)
            goto LABEL_19;
        }
        goto LABEL_53;
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!(_DWORD)v6)
      goto LABEL_53;
    v7 = 0x7FFFFFFFLL;
    if ((v6 & 0x80000000) == 0)
      v7 = v6 - 1;
    if (v7 >= v6)
      goto LABEL_56;
    v8 = *(unsigned __int16 *)(v5 + 2 * v7);
    if (v7 - 1 < v6)
    {
      if (v8 != 47)
      {
        while (v7)
        {
          v9 = v7 - 1;
          v10 = *(unsigned __int16 *)(v5 - 2 + 2 * v7--);
          if (v10 == 47)
            goto LABEL_19;
        }
        goto LABEL_53;
      }
      goto LABEL_18;
    }
  }
  if (v8 != 47)
  {
    if (v7)
      goto LABEL_56;
LABEL_53:
    *(_DWORD *)result += 2;
LABEL_54:
    *a2 = (uint64_t)result;
    return result;
  }
LABEL_18:
  v9 = v7;
LABEL_19:
  v11 = (v6 - 1);
  if (v9 != v11)
  {
    v18 = v11 - v9;
    v19 = v9 + 1;
    if ((_DWORD)v9 == -1)
      goto LABEL_52;
    return WTF::StringImpl::substring(result, v19, v18, a2);
  }
  v12 = v9 - 1;
  if ((v4 & 4) != 0)
  {
    v13 = v6 - 1;
    if (v12 < v6)
      v13 = v12;
    if (v13 >= v6)
      goto LABEL_56;
    v14 = *(unsigned __int8 *)(v5 + v13);
    if (v13 - 1 < v6)
    {
      if (v14 != 47)
      {
        v21 = v5 - 1;
        while (v13)
        {
          v16 = v13 - 1;
          v22 = *(unsigned __int8 *)(v21 + v13--);
          if (v22 == 47)
            goto LABEL_51;
        }
        goto LABEL_50;
      }
      goto LABEL_40;
    }
  }
  else
  {
    v13 = v6 - 1;
    if (v12 < v6)
      v13 = v12;
    if (v13 >= v6)
      goto LABEL_56;
    v14 = *(unsigned __int16 *)(v5 + 2 * v13);
    if (v13 - 1 < v6)
    {
      if (v14 != 47)
      {
        v15 = v5 - 2;
        while (v13)
        {
          v16 = v13 - 1;
          v17 = *(unsigned __int16 *)(v15 + 2 * v13--);
          if (v17 == 47)
            goto LABEL_51;
        }
        goto LABEL_50;
      }
LABEL_40:
      v16 = v13;
      goto LABEL_51;
    }
  }
  if (v14 == 47)
    goto LABEL_40;
  if (!v13)
  {
LABEL_50:
    v16 = -1;
LABEL_51:
    v18 = v12 - v16;
    v19 = v16 + 1;
    if (v16 == -1)
    {
LABEL_52:
      if (v6 <= v18)
        goto LABEL_53;
    }
    return WTF::StringImpl::substring(result, v19, v18, a2);
  }
LABEL_56:
  __break(1u);
  return result;
}

ssize_t WTF::FileSystemImpl::appendFileContentsToFileHandle(WTF::StringImpl **this, const WTF::String *a2, int *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF *v12;
  void *v13;
  ssize_t result;
  unsigned int v15;
  uint64_t v16;
  int v17;
  ssize_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v27);
  if (!v27)
    return 0;
  v11 = open((const char *)v27 + 16, 0, 438);
  v12 = v27;
  v27 = 0;
  if (!v12)
  {
LABEL_5:
    if (v11 != -1)
      goto LABEL_6;
    return 0;
  }
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    goto LABEL_5;
  }
  WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
  if (v11 == -1)
    return 0;
LABEL_6:
  v13 = (void *)WTF::fastMalloc((WTF *)0x80000);
  while (1)
  {
    while (1)
    {
      result = read(v11, v13, 0x80000uLL);
      if ((result & 0x8000000000000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_18;
    }
    v15 = result;
    if ((result & 0x80000000) != 0)
    {
LABEL_18:
      v19 = 0;
      goto LABEL_19;
    }
    v16 = result;
    if (result > 0x80000uLL)
      break;
    v17 = *(_DWORD *)a2;
    while (1)
    {
      v18 = write(v17, v13, v15);
      if ((v18 & 0x8000000000000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_18;
    }
    if (v18 != v16)
      goto LABEL_18;
    if (!(v15 >> 19))
    {
      v19 = 1;
LABEL_19:
      close(v11);
      WTF::fastFree((unint64_t)v13, v20, v21, v22, v23, v24, v25, v26);
      return v19;
    }
  }
  __break(1u);
  return result;
}

BOOL WTF::FileSystemImpl::filesHaveSameVolume(WTF::StringImpl **this, WTF::StringImpl **a2, const WTF::String *a3)
{
  BOOL v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 st_dev;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  stat v32;
  uint64_t v33;

  if (*this)
    v3 = *a2 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  WTF::FileSystemImpl::fileSystemRepresentation(this, &v33);
  if (v33)
  {
    v12 = stat((const char *)(v33 + 16), &v32);
    st_dev = v32.st_dev;
    v14 = v32.st_dev >> 8;
    if (v12 == -1)
      st_dev = 0;
    v15 = (_DWORD *)v33;
    v33 = 0;
    if (v15)
    {
      v16 = st_dev | (v14 << 8);
      if (*v15 != 1)
      {
        --*v15;
        if (v12 != -1)
          goto LABEL_11;
LABEL_16:
        v17 = 0;
        WTF::FileSystemImpl::fileSystemRepresentation(a2, &v33);
        v18 = v33;
        if (!v33)
          return 0;
        goto LABEL_17;
      }
      WTF::fastFree((unint64_t)v15, v5, v6, v7, v8, v9, v10, v11);
      if (v12 == -1)
        goto LABEL_16;
    }
    else
    {
      v16 = st_dev | (v14 << 8);
      if (v12 == -1)
        goto LABEL_16;
    }
LABEL_11:
    v17 = 1;
    WTF::FileSystemImpl::fileSystemRepresentation(a2, &v33);
    v18 = v33;
    if (!v33)
      return 0;
    goto LABEL_17;
  }
  v16 = 0;
  v17 = 0;
  WTF::FileSystemImpl::fileSystemRepresentation(a2, &v33);
  v18 = v33;
  if (!v33)
    return 0;
LABEL_17:
  v26 = stat((const char *)(v18 + 16), &v32);
  v27 = v32.st_dev;
  v28 = v32.st_dev >> 8;
  if (v26 == -1)
    v27 = 0;
  v29 = (_DWORD *)v33;
  v33 = 0;
  if (!v29)
  {
    if (v26 == -1)
      return 0;
    v30 = v27 | (v28 << 8);
    if (!v17)
      return 0;
    return v16 == v30;
  }
  v30 = v27 | (v28 << 8);
  if (*v29 == 1)
  {
    WTF::fastFree((unint64_t)v29, v19, v20, v21, v22, v23, v24, v25);
    if (v26 == -1)
      return 0;
  }
  else
  {
    --*v29;
    if (v26 == -1)
      return 0;
  }
  if (v17)
    return v16 == v30;
  return 0;
}

uint64_t WTF::FileSystemImpl::MappedFileData::MappedFileData(uint64_t a1, WTF::StringImpl **a2, int a3, char *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  int st_size;
  char v17;
  int v18;
  void *v19;
  stat v21;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  WTF::FileSystemImpl::fileSystemRepresentation(a2, (uint64_t *)&v21.st_dev);
  if (!*(_QWORD *)&v21.st_dev)
    goto LABEL_17;
  v14 = open((const char *)(*(_QWORD *)&v21.st_dev + 16), 0, 438);
  v15 = *(_DWORD **)&v21.st_dev;
  *(_QWORD *)&v21.st_dev = 0;
  if (v15)
  {
    if (*v15 == 1)
    {
      WTF::fastFree((unint64_t)v15, v7, v8, v9, v10, v11, v12, v13);
      if (v14 != -1)
        goto LABEL_6;
LABEL_17:
      *a4 = 0;
      return a1;
    }
    --*v15;
  }
  if (v14 == -1)
    goto LABEL_17;
LABEL_6:
  if (fstat(v14, &v21))
    goto LABEL_14;
  st_size = v21.st_size;
  if (HIDWORD(v21.st_size))
    goto LABEL_14;
  v17 = 1;
  if (LODWORD(v21.st_size))
  {
    if (a3)
      v18 = 2;
    else
      v18 = 1;
    v19 = mmap(0, v21.st_size, 1, v18, v14, 0);
    if (v19 != (void *)-1)
    {
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 8) = st_size;
      v17 = 1;
      goto LABEL_15;
    }
LABEL_14:
    v17 = 0;
  }
LABEL_15:
  *a4 = v17;
  close(v14);
  return a1;
}

uint64_t WTF::FileSystemImpl::MappedFileData::mapFileHandle(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int st_size;
  int v12;
  int v13;
  int v14;
  void *v15;
  stat v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 == -1)
    return 0;
  v17 = v4;
  v18 = v5;
  if (fstat(a2, &v16))
    return 0;
  st_size = v16.st_size;
  if (HIDWORD(v16.st_size))
    return 0;
  result = 1;
  if (LODWORD(v16.st_size))
  {
    if (a3 == 1)
      v12 = 2;
    else
      v12 = 1;
    if (a3 == 2)
      v13 = 3;
    else
      v13 = v12;
    if (a4)
      v14 = 2;
    else
      v14 = 1;
    v15 = mmap(0, v16.st_size, v13, v14, a2, 0);
    if (v15 != (void *)-1)
    {
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 8) = st_size;
      return 1;
    }
    return 0;
  }
  return result;
}

void WTF::FileSystemImpl::MappedFileData::~MappedFileData(void **this)
{
  void *v2;

  v2 = *this;
  if (v2)
    munmap(v2, *((unsigned int *)this + 2));
}

{
  void *v2;

  v2 = *this;
  if (v2)
    munmap(v2, *((unsigned int *)this + 2));
}

uint64_t WTF::FileSystemImpl::openAndLockFile(WTF::StringImpl **a1, int a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  WTF *v16;

  WTF::FileSystemImpl::fileSystemRepresentation(a1, (uint64_t *)&v16);
  if (!v16)
    return 0xFFFFFFFFLL;
  if ((a2 - 1) > 2)
    v5 = open((const char *)v16 + 16, 0, 438);
  else
    v5 = open((const char *)v16 + 16, dword_199122AF0[a2 - 1], 438);
  v13 = v5;
  v15 = v16;
  v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 != 1)
    {
      --*(_DWORD *)v15;
      goto LABEL_10;
    }
    WTF::fastFree((unint64_t)v15, v6, v7, v8, v9, v10, v11, v12);
    if ((_DWORD)v13 != -1)
      goto LABEL_13;
    return v13;
  }
LABEL_10:
  if ((_DWORD)v13 == -1)
    return v13;
LABEL_13:
  flock(v13, a3);
  return v13;
}

uint64_t WTF::FileSystemImpl::unlockAndCloseFile(WTF::FileSystemImpl *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = flock((int)this, 8);
  if (v1 != -1)
    return close(v1);
  return result;
}

void WTF::FileSystemImpl::createMappedFileData(WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  const WTF::String *v18;
  NSObject *v19;
  int st_size;
  void *v21;
  stat buf;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&buf.st_dev);
  if (!*(_QWORD *)&buf.st_dev)
    goto LABEL_10;
  v16 = open((const char *)(*(_QWORD *)&buf.st_dev + 16), 2562, 384);
  v17 = *(_DWORD **)&buf.st_dev;
  *(_QWORD *)&buf.st_dev = 0;
  if (!v17)
    goto LABEL_5;
  if (*v17 != 1)
  {
    --*v17;
LABEL_5:
    if (v16 != -1)
      goto LABEL_6;
LABEL_10:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    return;
  }
  WTF::fastFree((unint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
  if (v16 == -1)
    goto LABEL_10;
LABEL_6:
  if (ftruncate(v16, (off_t)a2))
  {
    v19 = qword_1ECF2C3B8;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_fault_impl(&dword_197AA9000, v19, OS_LOG_TYPE_FAULT, "Unable to truncate file", (uint8_t *)&buf, 2u);
    }
LABEL_18:
    v21 = 0;
    st_size = 0;
    goto LABEL_19;
  }
  if (!WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath(this, v18))
    goto LABEL_18;
  if (fstat(v16, &buf))
    goto LABEL_18;
  st_size = buf.st_size;
  if (HIDWORD(buf.st_size))
    goto LABEL_18;
  v21 = 0;
  if (LODWORD(buf.st_size))
  {
    v21 = mmap(0, buf.st_size, 3, 1, v16, 0);
    if (v21 == (void *)-1)
      goto LABEL_18;
  }
  if (a3)
  {
    *a3 = v16;
    *(_QWORD *)a4 = v21;
    *(_DWORD *)(a4 + 8) = st_size;
    return;
  }
LABEL_19:
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = st_size;
  close(v16);
}

uint64_t WTF::FileSystemImpl::finalizeMappedFileData(void **this, WTF::FileSystemImpl::MappedFileData *a2)
{
  void *v3;

  v3 = *this;
  mprotect(*this, (size_t)a2, 1);
  return msync(v3, (size_t)a2, 1);
}

void WTF::FileSystemImpl::mapToFile(WTF::StringImpl **a1@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[2];
  void *v14;
  unsigned int v15;

  WTF::FileSystemImpl::createMappedFileData(a1, a2, a4, (uint64_t)&v14);
  v8 = v14;
  if (v14)
  {
    v9 = v15;
    v13[0] = v14;
    v13[1] = v15;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E3571C58;
    v10[1] = v13;
    v12 = v10;
    (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)*a3 + 16))(*a3, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    mprotect(v8, (size_t)a2, 1);
    msync(v8, (size_t)a2, 1);
    *(_QWORD *)a5 = v8;
    *(_DWORD *)(a5 + 8) = v9;
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
}

unint64_t WTF::FileSystemImpl::readOrMakeSalt(WTF::StringImpl **this, const WTF::String *a2)
{
  const char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF *v21;
  ssize_t v22;
  uint64_t v23;
  WTF *v24;
  unint64_t v25;
  const char *v26;
  void *v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float v36;
  const WTF::String *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  ssize_t v63;
  ssize_t v64;
  unint64_t __buf;
  WTF *v67[2];

  v67[1] = *(WTF **)MEMORY[0x1E0C80C00];
  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)v67);
  if (v67[0])
    v3 = (char *)v67[0] + 16;
  else
    v3 = 0;
  v11 = access(v3, 0);
  v12 = v67[0];
  v67[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
      if (v11 == -1)
        goto LABEL_32;
      goto LABEL_10;
    }
    --*(_DWORD *)v12;
  }
  if (v11 == -1)
    goto LABEL_32;
LABEL_10:
  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)v67);
  if (v67[0])
  {
    v20 = open((const char *)v67[0] + 16, 0, 438);
    v21 = v67[0];
    v67[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree((unint64_t)v21, v13, v14, v15, v16, v17, v18, v19);
      else
        --*(_DWORD *)v21;
    }
  }
  else
  {
    v20 = -1;
  }
  while (1)
  {
    v22 = read(v20, &__buf, 8uLL);
    if ((v22 & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
    {
      v23 = -1;
      if (v20 == -1)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  v23 = v22;
  if (v20 == -1)
    goto LABEL_22;
LABEL_21:
  close(v20);
LABEL_22:
  if (v23 == 8)
    goto LABEL_23;
  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)v67);
  if (v67[0])
    v26 = (char *)v67[0] + 16;
  else
    v26 = 0;
  v28 = unlink(v26);
  v29 = v67[0];
  v67[0] = 0;
  if (!v29)
  {
LABEL_30:
    if (!v28)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (*(_DWORD *)v29 != 1)
  {
    --*(_DWORD *)v29;
    goto LABEL_30;
  }
  WTF::fastFree((unint64_t)v29, v27, v5, v6, v7, v8, v9, v10);
  if (v28)
LABEL_31:
    __error();
LABEL_32:
  WTF::cryptographicallyRandomValues((uint64_t)v67, 8, v5, v6, v7, v8, v9, v10);
  __buf = (unint64_t)v67[0];
  WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)this, v30, v31, v32, v33, v34, (WTF::FileSystemImpl *)v67, v35, v36);
  WTF::FileSystemImpl::makeAllDirectories(v67, v37);
  v45 = v67[0];
  v67[0] = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)v67);
      v24 = v67[0];
      if (!v67[0])
      {
LABEL_49:
        v25 = 0;
        return v25 & 0xFFFFFFFFFFFFFF00 | v24;
      }
      goto LABEL_38;
    }
    *(_DWORD *)v45 -= 2;
  }
  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)v67);
  v24 = v67[0];
  if (!v67[0])
    goto LABEL_49;
LABEL_38:
  v61 = open((const char *)v24 + 16, 1537, 384);
  v62 = v67[0];
  v67[0] = 0;
  if (!v62)
    goto LABEL_41;
  if (*(_DWORD *)v62 != 1)
  {
    --*(_DWORD *)v62;
LABEL_41:
    if (v61 != -1)
      goto LABEL_44;
    goto LABEL_48;
  }
  WTF::fastFree((unint64_t)v62, v54, v55, v56, v57, v58, v59, v60);
  if (v61 == -1)
  {
LABEL_48:
    LOBYTE(v24) = 0;
    goto LABEL_49;
  }
LABEL_44:
  while (1)
  {
    v63 = write(v61, &__buf, 8uLL);
    if ((v63 & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
    {
      close(v61);
      goto LABEL_48;
    }
  }
  v64 = v63;
  close(v61);
  if (v64 != 8)
    goto LABEL_48;
LABEL_23:
  LOBYTE(v24) = __buf;
  v25 = __buf & 0xFFFFFFFFFFFFFF00;
  return v25 & 0xFFFFFFFFFFFFFF00 | v24;
}

void WTF::FileSystemImpl::parentPath(WTF::FileSystemImpl *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::FileSystemImpl *a7@<X8>, double a8@<D0>, float a9@<S1>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::__fs::filesystem::path::__string_view v14;
  std::__fs::filesystem::path *v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  const std::string_view::value_type *v18;
  std::__fs::filesystem::path v20;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v22;

  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v20.__pn_, v12, v13, a2, a3, a4, a5, a6, a8, a9);
  v14 = std::__fs::filesystem::path::__parent_path(&v20);
  if (v14.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
    abort();
  if (v14.__size_ > 0x16)
  {
    v16 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14.__size_ | 7) != 0x17)
      v16 = v14.__size_ | 7;
    v17 = v16 + 1;
    v15 = (std::__fs::filesystem::path *)operator new(v16 + 1);
    v22.__pn_.__r_.__value_.__l.__size_ = v14.__size_;
    v22.__pn_.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    v22.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  }
  else
  {
    *((_BYTE *)&v22.__pn_.__r_.__value_.__s + 23) = v14.__size_;
    v15 = &v22;
  }
  v18 = (char *)v15 + v14.__size_;
  if ((const std::string_view::value_type *)v15 <= v14.__data_ && v18 > v14.__data_)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v14.__size_)
    memmove(v15, v14.__data_, v14.__size_);
  *v18 = 0;
  __p = v22;
  WTF::FileSystemImpl::fromStdFileSystemPath(a7, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(v20.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
}

void WTF::FileSystemImpl::readEntireFile(WTF::FileSystemImpl *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  unint64_t st_size;
  unint64_t v6;
  unint64_t v7;
  ssize_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  stat v16;

  if ((_DWORD)this == -1
    || ((v3 = (int)this, (v4 = fstat((int)this, &v16)) == 0) ? (st_size = v16.st_size) : (st_size = 0), v4 || !st_size))
  {
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  else if (HIDWORD(st_size))
  {
    __break(0xC471u);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)st_size);
    v7 = 0;
    while (1)
    {
      while (1)
      {
        v8 = read(v3, (void *)(v6 + v7), st_size - v7);
        if ((v8 & 0x8000000000000000) == 0)
          break;
        if (*__error() != 4)
          goto LABEL_17;
      }
      if ((int)v8 < 1)
        break;
      v7 += v8;
      if (st_size < v7)
      {
        __break(1u);
        goto LABEL_15;
      }
    }
LABEL_17:
    if (st_size == v7)
    {
      *(_QWORD *)a2 = v6;
      *(_DWORD *)(a2 + 8) = st_size;
      *(_DWORD *)(a2 + 12) = st_size;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      WTF::fastFree(v6, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

void WTF::FileSystemImpl::readEntireFile(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::FileSystemImpl *v11;
  WTF *v12;
  WTF *v13;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v13);
  if (!v13)
  {
    WTF::FileSystemImpl::readEntireFile((WTF::FileSystemImpl *)0xFFFFFFFFLL, a2);
    return;
  }
  v11 = (WTF::FileSystemImpl *)open((const char *)v13 + 16, 0, 438);
  v12 = v13;
  v13 = 0;
  if (!v12)
  {
LABEL_5:
    WTF::FileSystemImpl::readEntireFile(v11, a2);
    if ((_DWORD)v11 == -1)
      return;
    goto LABEL_6;
  }
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    goto LABEL_5;
  }
  WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
  WTF::FileSystemImpl::readEntireFile(v11, a2);
  if ((_DWORD)v11 == -1)
    return;
LABEL_6:
  close((int)v11);
}

uint64_t WTF::FileSystemImpl::overwriteEntireFile(WTF::StringImpl **a1, const void *a2, size_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  ssize_t v14;
  uint64_t v15;
  WTF *v17;

  WTF::FileSystemImpl::fileSystemRepresentation(a1, (uint64_t *)&v17);
  if (!v17)
    return 0xFFFFFFFFLL;
  v12 = open((const char *)v17 + 16, 1537, 438);
  v13 = v17;
  v17 = 0;
  if (!v13)
    goto LABEL_5;
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
LABEL_5:
    if (v12 != -1)
      goto LABEL_6;
    return 0xFFFFFFFFLL;
  }
  WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  if (v12 == -1)
    return 0xFFFFFFFFLL;
LABEL_6:
  while (1)
  {
    v14 = write(v12, a2, a3);
    if ((v14 & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
    {
      v15 = -1;
      goto LABEL_12;
    }
  }
  v15 = v14;
LABEL_12:
  close(v12);
  return v15;
}

void WTF::FileSystemImpl::deleteAllFilesModifiedSince(WTF::FileSystemImpl *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const WTF::String *v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  const char *v33;
  int v34;
  _DWORD *v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  std::__fs::filesystem::path v66;
  std::error_code __ec;

  if (a2 == -INFINITY)
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    WTF::FileSystemImpl::toStdFileSystemPath(&v66.__pn_, v12, v13, v4, v5, v6, v7, v8, v9, v10);
    std::__fs::filesystem::__remove_all(&v66, &__ec);
    if (SHIBYTE(v66.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  WTF::FileSystemImpl::listDirectory(a1, (uint64_t)&v66);
  if (HIDWORD(v66.__pn_.__r_.__value_.__r.__words[1]))
  {
    v15 = (uint64_t *)v66.__pn_.__r_.__value_.__r.__words[0];
    for (i = 8 * HIDWORD(v66.__pn_.__r_.__value_.__r.__words[1]); i; i -= 8)
    {
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v18 = *(unsigned int *)(v17 + 16);
        v19 = *(int8x16_t **)(v17 + 8);
        v17 = *(unsigned int *)(v17 + 4);
        v20 = (v18 >> 2) & 1;
        v21 = *v15;
        if (*v15)
          goto LABEL_10;
      }
      else
      {
        v19 = 0;
        v20 = 1;
        v21 = *v15;
        if (*v15)
        {
LABEL_10:
          v22 = *(unsigned int *)(v21 + 16);
          v23 = *(int8x16_t **)(v21 + 8);
          v21 = *(unsigned int *)(v21 + 4);
          v24 = (v22 >> 2) & 1;
          goto LABEL_13;
        }
      }
      v23 = 0;
      v24 = 1;
LABEL_13:
      WTF::FileSystemImpl::pathByAppendingComponent(v19, v17 | (v20 << 32), v23, v21 | (v24 << 32), (int **)&v65);
      v25 = WTF::FileSystemImpl::fileTypePotentiallyFollowingSymLinks((uint64_t *)&v65, 0);
      if (HIDWORD(v25))
      {
        if ((_DWORD)v25 == 1)
        {
          WTF::FileSystemImpl::deleteAllFilesModifiedSince(&v65, a2);
          WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v65, v36);
        }
        else
        {
          if ((_DWORD)v25)
            goto LABEL_29;
          WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v65, v14);
          if (!(_BYTE)v14 || a2 > v32)
            goto LABEL_29;
          WTF::FileSystemImpl::fileSystemRepresentation(&v65, (uint64_t *)&__ec.__val_);
          if (*(_QWORD *)&__ec.__val_)
            v33 = (const char *)(*(_QWORD *)&__ec.__val_ + 16);
          else
            v33 = 0;
          v34 = unlink(v33);
          v35 = *(_DWORD **)&__ec.__val_;
          *(_QWORD *)&__ec.__val_ = 0;
          if (!v35)
            goto LABEL_24;
          if (*v35 != 1)
          {
            --*v35;
LABEL_24:
            if (!v34)
              goto LABEL_29;
LABEL_28:
            __error();
            goto LABEL_29;
          }
          WTF::fastFree((unint64_t)v35, v14, v26, v27, v28, v29, v30, v31);
          if (v34)
            goto LABEL_28;
        }
      }
LABEL_29:
      v37 = v65;
      v65 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v14, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
      ++v15;
    }
  }
  WTF::FileSystemImpl::deleteEmptyDirectory(a1, v14);
  if (HIDWORD(v66.__pn_.__r_.__value_.__r.__words[1]))
  {
    v53 = (WTF::StringImpl **)v66.__pn_.__r_.__value_.__r.__words[0];
    v54 = 8 * HIDWORD(v66.__pn_.__r_.__value_.__r.__words[1]);
    do
    {
      v55 = *v53;
      *v53 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
  v64 = v66.__pn_.__r_.__value_.__r.__words[0];
  if (v66.__pn_.__r_.__value_.__r.__words[0])
  {
    v66.__pn_.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v66.__pn_.__r_.__value_.__r.__words[1]) = 0;
    WTF::fastFree(v64, v46, v47, v48, v49, v50, v51, v52);
  }
}

BOOL WTF::FileSystemImpl::deleteNonEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__fs::filesystem::path v14;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v14.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  std::__fs::filesystem::__remove_all(&v14, &__ec);
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
  return __ec.__val_ == 0;
}

void WTF::FileSystemImpl::listDirectory(WTF::FileSystemImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  const std::__fs::filesystem::directory_entry *v25;
  std::__fs::filesystem::path::__string_view v26;
  std::string *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  const std::string_view::value_type *v30;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *cntrl;
  uint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__fs::filesystem::path v60;
  std::__fs::filesystem::directory_iterator v61;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v62;
  std::__shared_weak_count *v63;
  std::error_code __ec;
  std::string __p;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v13, v14, v5, v6, v7, v8, v9, v10, v11);
  MEMORY[0x19AEBADAC](&v62, &__p, &__ec, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v62;
    v16 = v63;
    if (v63)
      goto LABEL_6;
LABEL_21:
    v61.__imp_.__ptr_ = v15;
    v61.__imp_.__cntrl_ = 0;
    if (__ec.__val_)
      v24 = 1;
    else
      v24 = v61.__imp_.__ptr_ == 0;
    if (!v24)
      goto LABEL_25;
    goto LABEL_51;
  }
  v15 = v62;
  v16 = v63;
  if (!v63)
    goto LABEL_21;
LABEL_6:
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  v19 = v63;
  v61.__imp_.__ptr_ = v15;
  v61.__imp_.__cntrl_ = v16;
  if (v63)
  {
    v20 = (unint64_t *)&v63->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__ec.__val_)
    v23 = 1;
  else
    v23 = v61.__imp_.__ptr_ == 0;
  if (!v23)
  {
    while (1)
    {
LABEL_25:
      v25 = std::__fs::filesystem::directory_iterator::__dereference(&v61);
      v26 = std::__fs::filesystem::path::__filename(&v25->__p_);
      if (v26.__size_ >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_63;
      if (v26.__size_ > 0x16)
      {
        v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26.__size_ | 7) != 0x17)
          v28 = v26.__size_ | 7;
        v29 = v28 + 1;
        p_p = (std::string *)operator new(v28 + 1);
        __p.__r_.__value_.__l.__size_ = v26.__size_;
        __p.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v26.__size_;
        p_p = &__p;
      }
      v30 = (char *)p_p + v26.__size_;
      if ((const std::string_view::value_type *)p_p <= v26.__data_ && v30 > v26.__data_)
      {
        __break(1u);
LABEL_63:
        abort();
      }
      if (v26.__size_)
        memmove(p_p, v26.__data_, v26.__size_);
      *v30 = 0;
      v60.__pn_ = __p;
      WTF::FileSystemImpl::fromStdFileSystemPath((WTF::FileSystemImpl *)&__p, &v60);
      if (SHIBYTE(v60.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__pn_.__r_.__value_.__l.__data_);
        v39 = __p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_47;
      }
      else
      {
        v39 = __p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_47;
      }
      v40 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v40 == *(_DWORD *)(a2 + 8))
      {
        v41 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v40 + 1, (unint64_t)&__p);
        v40 = *(unsigned int *)(a2 + 12);
        v42 = *(_QWORD *)a2;
        v43 = *v41;
        *v41 = 0;
        *(_QWORD *)(v42 + 8 * v40) = v43;
      }
      else
      {
        v44 = *(_QWORD *)a2;
        __p.__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)(v44 + 8 * v40) = v39;
      }
      *(_DWORD *)(a2 + 12) = v40 + 1;
      v45 = (WTF::StringImpl *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (!v45)
        goto LABEL_47;
      if (*(_DWORD *)v45 != 2)
        break;
      WTF::StringImpl::~StringImpl(v45, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      std::__fs::filesystem::directory_iterator::__increment(&v61, &__ec);
      if (__ec.__val_)
        goto LABEL_51;
LABEL_48:
      if (!v61.__imp_.__ptr_)
        goto LABEL_51;
    }
    *(_DWORD *)v45 -= 2;
LABEL_47:
    std::__fs::filesystem::directory_iterator::__increment(&v61, &__ec);
    if (__ec.__val_)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_51:
  cntrl = v61.__imp_.__cntrl_;
  if (v61.__imp_.__cntrl_)
  {
    v55 = &v61.__imp_.__cntrl_->__shared_owners_;
    do
      v56 = __ldaxr((unint64_t *)v55);
    while (__stlxr(v56 - 1, (unint64_t *)v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v57 = v63;
  if (v63)
  {
    v58 = (unint64_t *)&v63->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

uint64_t WTF::FileSystemImpl::fileType(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::fileTypePotentiallyFollowingSymLinks((uint64_t *)this, 0);
}

double WTF::FileSystemImpl::fileModificationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double result;
  std::__fs::filesystem::path v14;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v14.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  std::__fs::filesystem::__last_write_time(&v14, &__ec);
  if ((SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (__ec.__val_)
      return result;
LABEL_8:
    std::__fs::filesystem::_FilesystemClock::now();
    std::chrono::system_clock::now();
    v14.__pn_.__r_.__value_.__r.__words[0] = __divti3();
    return (double)std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v14);
  }
  operator delete(v14.__pn_.__r_.__value_.__l.__data_);
  if (!__ec.__val_)
    goto LABEL_8;
  return result;
}

BOOL WTF::FileSystemImpl::deleteEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  char v15;
  std::__fs::filesystem::path v16;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v16.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  std::__fs::filesystem::__symlink_status(&v16, &__ec);
  v13 = 0;
  if (!__ec.__val_ && v15 == 2)
    v13 = std::__fs::filesystem::__remove(&v16, &__ec);
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  return v13;
}

void WTF::FileSystemImpl::toStdFileSystemPath(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void **v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  void **p_dst;
  void **v25;
  char v27;
  std::string::value_type *v28;
  uint64_t v29;
  std::string::value_type v30;
  int v31;
  WTF *v32;
  void **__dst;
  size_t v34;
  int64_t v35;
  _QWORD v36[2];

  v36[0] = a2;
  v36[1] = a3;
  WTF::StringView::utf8((uint64_t)v36, 0, a4, a5, a6, a7, a8, &v32, a10);
  v18 = v32;
  if (v32)
    v19 = (void **)((char *)v32 + 16);
  else
    v19 = 0;
  if (!v32)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!*((_BYTE *)v32 + 16))
  {
    v20 = 0;
LABEL_14:
    HIBYTE(v35) = v20;
    p_dst = (void **)&__dst;
    goto LABEL_15;
  }
  v20 = 0;
  while (*((unsigned __int8 *)v32 + v20++ + 17))
    ;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
    abort();
  if (v20 <= 0x16)
    goto LABEL_14;
  v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17)
    v22 = v20 | 7;
  v23 = v22 + 1;
  p_dst = (void **)operator new(v22 + 1);
  v34 = v20;
  v35 = v23 | 0x8000000000000000;
  __dst = p_dst;
LABEL_15:
  v25 = (void **)((char *)p_dst + v20);
  if (p_dst <= v19 && v25 > v19)
    goto LABEL_35;
  if (v20)
    memmove(p_dst, v19, v20);
  *(_BYTE *)v25 = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  v27 = HIBYTE(v35);
  if (v35 >= 0)
    v28 = (std::string::value_type *)&__dst;
  else
    v28 = (std::string::value_type *)__dst;
  if (v35 >= 0)
    v29 = HIBYTE(v35);
  else
    v29 = v34;
  if (v29 >= 1)
  {
    do
    {
      v30 = *v28++;
      std::string::push_back(a1, v30);
      --v29;
    }
    while (v29);
    v27 = HIBYTE(v35);
  }
  if (v27 < 0)
  {
    operator delete(__dst);
    v31 = *(_DWORD *)v18 - 1;
    if (*(_DWORD *)v18 != 1)
      goto LABEL_32;
  }
  else
  {
    v31 = *(_DWORD *)v18 - 1;
    if (*(_DWORD *)v18 != 1)
    {
LABEL_32:
      *(_DWORD *)v18 = v31;
      return;
    }
  }
  WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
}

BOOL WTF::FileSystemImpl::moveFile(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const std::error_category *v21;
  _BOOL8 v22;
  std::error_code v24;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __from;

  if (*(_QWORD *)this)
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__from.__pn_, *(_QWORD *)(*(_QWORD *)this + 8), *(unsigned int *)(*(_QWORD *)this + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)this + 16) >> 2) & 1) << 32), a4, a5, a6, a7, a8, a9, a10);
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_3:
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      goto LABEL_6;
    }
  }
  else
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__from.__pn_, 0, 0x100000000, a4, a5, a6, a7, a8, a9, a10);
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_3;
  }
  v19 = 0;
  v20 = 0x100000000;
LABEL_6:
  WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, v19, v20, v11, v12, v13, v14, v15, v16, v17);
  v24.__val_ = 0;
  v24.__cat_ = std::system_category();
  std::__fs::filesystem::__rename(&__from, &__to, &v24);
  if (v24.__val_)
  {
    v21 = std::system_category();
    v24.__val_ = 0;
    v24.__cat_ = v21;
    std::__fs::filesystem::__copy(&__from, &__to, recursive|overwrite_existing, &v24);
    v22 = 0;
    if (v24.__val_)
    {
      if ((SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_9;
LABEL_14:
      operator delete(__to.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v22;
      goto LABEL_15;
    }
    v22 = std::__fs::filesystem::__remove_all(&__from, &v24) != 0;
    if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_14;
  }
  else
  {
    v22 = 1;
    if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_14;
  }
LABEL_9:
  if ((SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v22;
LABEL_15:
  operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  return v22;
}

uintmax_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uintmax_t v13;
  std::__fs::filesystem::path v15;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v15.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  v13 = std::__fs::filesystem::__file_size(&v15, &__ec);
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (__ec.__val_)
    return 0;
  else
    return v13;
}

void WTF::FileSystemImpl::directorySize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uintmax_t v22;
  const std::__fs::filesystem::directory_entry *v23;
  const std::__fs::filesystem::path *p_p;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int val;
  uintmax_t v33;
  uintmax_t v34;
  int v35;
  WTF::StringImpl *v36;
  const std::error_category *v37;
  unsigned int v38;
  const std::error_category *v39;
  const std::error_category *v40;
  uint64_t v41;
  std::string::size_type size;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *cntrl;
  uint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  std::__fs::filesystem::recursive_directory_iterator v64;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v65;
  std::__shared_weak_count *v66;
  BOOL v67;
  std::__fs::filesystem::path v68;
  std::error_code __ec;
  std::error_code v70;
  unsigned __int8 v71;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    return;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v68.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  std::__fs::filesystem::__status(&v68, &__ec);
  if (v65 != 2)
    goto LABEL_70;
  MEMORY[0x19AEBADC4](&v65, &v68, 0, &__ec);
  v13 = v65;
  v14 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v66;
    v64.__imp_.__ptr_ = v13;
    v64.__imp_.__cntrl_ = v14;
    v64.__rec_ = v67;
    if (v66)
    {
      v18 = (unint64_t *)&v66->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v64.__imp_.__ptr_)
      goto LABEL_18;
  }
  else
  {
    v64.__imp_.__ptr_ = v65;
    v64.__imp_.__cntrl_ = 0;
    v64.__rec_ = v67;
    if (v65)
    {
LABEL_18:
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v64);
        if (__ec.__val_)
        {
LABEL_60:
          cntrl = v64.__imp_.__cntrl_;
          if (v64.__imp_.__cntrl_)
          {
            v52 = &v64.__imp_.__cntrl_->__shared_owners_;
            do
              v53 = __ldaxr((unint64_t *)v52);
            while (__stlxr(v53 - 1, (unint64_t *)v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
              std::__shared_weak_count::__release_weak(cntrl);
            }
          }
          v54 = v66;
          if (v66)
          {
            v55 = (unint64_t *)&v66->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
LABEL_70:
          if (SHIBYTE(v68.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_71:
            operator delete(v68.__pn_.__r_.__value_.__l.__data_);
          return;
        }
        p_p = &v23->__p_;
        WTF::FileSystemImpl::fromStdFileSystemPath((WTF::FileSystemImpl *)&v63, &v23->__p_);
        if (((1 << p_p[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
        {
          std::__fs::filesystem::__status(p_p, &__ec);
          val = __ec.__val_;
          if (LOBYTE(v70.__val_) != 1)
            goto LABEL_32;
        }
        else if ((p_p[3].__pn_.__r_.__value_.__s.__data_[0] + 1) > 1u)
        {
          __ec.__val_ = 0;
          __ec.__cat_ = std::system_category();
          val = __ec.__val_;
          if (p_p[3].__pn_.__r_.__value_.__s.__data_[0] != 1)
          {
LABEL_32:
            if (val)
              goto LABEL_33;
            goto LABEL_49;
          }
        }
        else
        {
          v37 = std::generic_category();
          *(_QWORD *)&__ec.__val_ = 2;
          __ec.__cat_ = v37;
          val = 2;
          if (p_p[3].__pn_.__r_.__value_.__s.__data_[0] != 1)
            goto LABEL_32;
        }
        if (val)
          goto LABEL_33;
        if (((1 << p_p[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x17) != 0)
        {
          v33 = std::__fs::filesystem::__file_size(p_p, &__ec);
          v34 = v22 + v33;
          if (__CFADD__(v22, v33))
            goto LABEL_26;
          goto LABEL_48;
        }
        v70.__val_ = 0;
        v70.__cat_ = std::system_category();
        if (((1 << p_p[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
        {
          std::__fs::filesystem::__status(p_p, &v70);
          v38 = v71;
          __ec = v70;
          if (v71 < 2u)
            goto LABEL_47;
        }
        else
        {
          if ((p_p[3].__pn_.__r_.__value_.__s.__data_[0] + 1) > 1u)
          {
            v70.__val_ = 0;
            v39 = std::system_category();
          }
          else
          {
            v39 = std::generic_category();
            *(_QWORD *)&v70.__val_ = 2;
          }
          v70.__cat_ = v39;
          v38 = p_p[3].__pn_.__r_.__value_.__s.__data_[0];
          __ec = v70;
          if (v38 < 2)
            goto LABEL_47;
        }
        if (v38 != 255)
        {
          v40 = std::generic_category();
          if (v38 == 2)
            v41 = 21;
          else
            v41 = 45;
          *(_QWORD *)&__ec.__val_ = v41;
          __ec.__cat_ = v40;
        }
LABEL_47:
        size = p_p[1].__pn_.__r_.__value_.__l.__size_;
        v34 = v22 + size;
        if (__CFADD__(v22, size))
        {
LABEL_26:
          v35 = 0;
          v21 = 1;
          v36 = v63;
          v63 = 0;
          if (!v36)
            goto LABEL_55;
          goto LABEL_53;
        }
LABEL_48:
        v22 = v34;
        if (__ec.__val_)
        {
LABEL_33:
          v35 = 0;
          v36 = v63;
          v63 = 0;
          if (!v36)
            goto LABEL_55;
          goto LABEL_53;
        }
LABEL_49:
        if (v21)
        {
          v35 = 0;
          v21 = 1;
          v36 = v63;
          v63 = 0;
          if (!v36)
            goto LABEL_55;
        }
        else
        {
          v35 = 1;
          v36 = v63;
          v63 = 0;
          if (!v36)
            goto LABEL_55;
        }
LABEL_53:
        if (*(_DWORD *)v36 != 2)
        {
          *(_DWORD *)v36 -= 2;
LABEL_55:
          if (!v35)
            goto LABEL_60;
          goto LABEL_58;
        }
        WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        if (!v35)
          goto LABEL_60;
LABEL_58:
        std::__fs::filesystem::recursive_directory_iterator::__increment(&v64, 0);
        if (!v64.__imp_.__ptr_)
          goto LABEL_75;
      }
    }
  }
  v21 = 0;
LABEL_75:
  v57 = v64.__imp_.__cntrl_;
  if (v64.__imp_.__cntrl_)
  {
    v58 = &v64.__imp_.__cntrl_->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v66;
  if (v66)
  {
    v61 = (unint64_t *)&v66->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v21)
  {
    __break(0xC471u);
  }
  else if (SHIBYTE(v68.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    goto LABEL_71;
  }
}

void WTF::FileSystemImpl::fromStdFileSystemPath(WTF::FileSystemImpl *this, const std::__fs::filesystem::path *a2)
{
  const std::__fs::filesystem::path *v2;
  std::string::size_type size;
  const std::__fs::filesystem::path *v5;
  _OWORD *p_p;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  const std::__fs::filesystem::path *v11;
  std::string::size_type *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  std::string::value_type v16;
  char v17;
  void *v18;
  size_t v19;
  void *__p;
  std::string::size_type v21;
  int64_t v22;

  v2 = a2;
  if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]);
    v5 = (const std::__fs::filesystem::path *)((char *)a2 + size);
    if (size < 0x17)
      goto LABEL_3;
LABEL_7:
    v8 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v8 = size | 7;
    v9 = v8 + 1;
    p_p = operator new(v8 + 1);
    v21 = size;
    v22 = v9 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_10;
  }
  size = a2->__pn_.__r_.__value_.__l.__size_;
  if (size >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  v5 = (const std::__fs::filesystem::path *)(a2->__pn_.__r_.__value_.__r.__words[0] + size);
  if (size >= 0x17)
    goto LABEL_7;
LABEL_3:
  HIBYTE(v22) = size;
  p_p = &__p;
  if (!size)
  {
    v7 = &__p;
    goto LABEL_18;
  }
LABEL_10:
  v10 = (char *)v5 - (char *)v2;
  if ((unint64_t)((char *)v5 - (char *)v2) < 0x20 || (unint64_t)((char *)p_p - (char *)v2) < 0x20)
  {
    v7 = (void **)p_p;
    v11 = v2;
  }
  else
  {
    v7 = (void **)((char *)p_p + (v10 & 0xFFFFFFFFFFFFFFE0));
    v11 = (const std::__fs::filesystem::path *)((char *)v2 + (v10 & 0xFFFFFFFFFFFFFFE0));
    v12 = &v2->__pn_.__r_.__value_.__r.__words[2];
    v13 = p_p + 1;
    v14 = v10 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *(_OWORD *)v12;
      *(v13 - 1) = *((_OWORD *)v12 - 1);
      *v13 = v15;
      v12 += 4;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v10 == (v10 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_18;
  }
  do
  {
    v16 = v11->__pn_.__r_.__value_.__s.__data_[0];
    v11 = (const std::__fs::filesystem::path *)((char *)v11 + 1);
    *(_BYTE *)v7 = v16;
    v7 = (void **)((char *)v7 + 1);
  }
  while (v11 != v5);
LABEL_18:
  *(_BYTE *)v7 = 0;
  v17 = HIBYTE(v22);
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (!v18)
  {
    *(_QWORD *)this = 0;
    if ((v17 & 0x80) == 0)
      return;
LABEL_28:
    operator delete(__p);
    return;
  }
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  WTF::fromUTF8Impl<false>((unint64_t)v18, v19, (uint64_t *)this);
  if (v22 < 0)
    goto LABEL_28;
}

uintmax_t WTF::FileSystemImpl::volumeFreeSpace(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string __p;
  std::__fs::filesystem::space_info v15;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(&v15, 0, sizeof(v15));
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  std::__fs::filesystem::__space(&v15, (const std::__fs::filesystem::path *)&__p, &__ec);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (__ec.__val_)
    return 0;
  else
    return v15.available;
}

uintmax_t WTF::FileSystemImpl::volumeCapacity(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string __p;
  std::__fs::filesystem::space_info v15;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(&v15, 0, sizeof(v15));
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  std::__fs::filesystem::__space(&v15, (const std::__fs::filesystem::path *)&__p, &__ec);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (__ec.__val_)
    return 0;
  else
    return v15.capacity;
}

BOOL WTF::FileSystemImpl::createSymbolicLink(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::string __p;
  std::__fs::filesystem::path __to;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  if (*(_QWORD *)this)
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, *(_QWORD *)(*(_QWORD *)this + 8), *(unsigned int *)(*(_QWORD *)this + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)this + 16) >> 2) & 1) << 32), v5, v6, v7, v8, v9, v10, v11);
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_3:
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
      goto LABEL_6;
    }
  }
  else
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, 0, 0x100000000, v5, v6, v7, v8, v9, v10, v11);
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_3;
  }
  v20 = 0;
  v21 = 0x100000000;
LABEL_6:
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v20, v21, v12, v13, v14, v15, v16, v17, v18);
  std::__fs::filesystem::__create_symlink(&__to, (const std::__fs::filesystem::path *)&__p, &__ec);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return __ec.__val_ == 0;
LABEL_10:
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
    return __ec.__val_ == 0;
  }
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
  return __ec.__val_ == 0;
}

BOOL WTF::FileSystemImpl::hardLink(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::string __p;
  std::__fs::filesystem::path __to;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  if (*(_QWORD *)this)
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, *(_QWORD *)(*(_QWORD *)this + 8), *(unsigned int *)(*(_QWORD *)this + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)this + 16) >> 2) & 1) << 32), v5, v6, v7, v8, v9, v10, v11);
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_3:
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
      goto LABEL_6;
    }
  }
  else
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, 0, 0x100000000, v5, v6, v7, v8, v9, v10, v11);
    v19 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_3;
  }
  v20 = 0;
  v21 = 0x100000000;
LABEL_6:
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v20, v21, v12, v13, v14, v15, v16, v17, v18);
  std::__fs::filesystem::__create_hard_link(&__to, (const std::__fs::filesystem::path *)&__p, &__ec);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return __ec.__val_ == 0;
LABEL_10:
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
    return __ec.__val_ == 0;
  }
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
  return __ec.__val_ == 0;
}

BOOL WTF::FileSystemImpl::hardLinkOrCopyFile(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL8 v21;
  std::error_code v23;
  std::__fs::filesystem::path __new_hard_link;
  std::__fs::filesystem::path __to;

  if (*(_QWORD *)this)
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, *(_QWORD *)(*(_QWORD *)this + 8), *(unsigned int *)(*(_QWORD *)this + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)this + 16) >> 2) & 1) << 32), a4, a5, a6, a7, a8, a9, a10);
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
LABEL_3:
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      goto LABEL_6;
    }
  }
  else
  {
    WTF::FileSystemImpl::toStdFileSystemPath(&__to.__pn_, 0, 0x100000000, a4, a5, a6, a7, a8, a9, a10);
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_3;
  }
  v19 = 0;
  v20 = 0x100000000;
LABEL_6:
  WTF::FileSystemImpl::toStdFileSystemPath(&__new_hard_link.__pn_, v19, v20, v11, v12, v13, v14, v15, v16, v17);
  v23.__val_ = 0;
  v23.__cat_ = std::system_category();
  std::__fs::filesystem::__create_hard_link(&__to, &__new_hard_link, &v23);
  if (v23.__val_)
  {
    std::__fs::filesystem::__copy_file(&__to, &__new_hard_link, (std::__fs::filesystem::copy_options)0, &v23);
    v21 = v23.__val_ == 0;
    if ((SHIBYTE(__new_hard_link.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_11:
    operator delete(__new_hard_link.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v21;
    goto LABEL_12;
  }
  v21 = 1;
  if (SHIBYTE(__new_hard_link.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
LABEL_8:
  if ((SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v21;
LABEL_12:
  operator delete(__to.__pn_.__r_.__value_.__l.__data_);
  return v21;
}

uintmax_t WTF::FileSystemImpl::hardLinkCount(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uintmax_t v13;
  std::__fs::filesystem::path v15;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v15.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  v13 = std::__fs::filesystem::__hard_link_count(&v15, &__ec);
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (__ec.__val_)
    return 0;
  else
    return v13;
}

BOOL WTF::FileSystemImpl::updateFileModificationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__fs::filesystem::path v14;
  std::error_code __ec;
  std::__fs::filesystem::file_time_type v16;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v14.__pn_, v11, v12, v3, v4, v5, v6, v7, v8, v9);
  v16.__d_.__rep_ = std::__fs::filesystem::_FilesystemClock::now().__d_.__rep_;
  std::__fs::filesystem::__last_write_time(&v14, v16, &__ec);
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
  return __ec.__val_ == 0;
}

BOOL WTF::FileSystemImpl::isHiddenFile(WTF::FileSystemImpl *this, const WTF::String *a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__fs::filesystem::path::__string_view v13;
  std::string *p_s;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  const std::string_view::value_type *v17;
  void *v19;
  _BOOL8 v20;
  std::string __p;
  std::string __s;

  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v11, v12, a6, a7, a8, a9, a10, a3, a4);
  v13 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&__p);
  if (v13.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    abort();
  if (v13.__size_ > 0x16)
  {
    v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13.__size_ | 7) != 0x17)
      v15 = v13.__size_ | 7;
    v16 = v15 + 1;
    p_s = (std::string *)operator new(v15 + 1);
    __s.__r_.__value_.__l.__size_ = v13.__size_;
    __s.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  }
  else
  {
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = v13.__size_;
    p_s = &__s;
  }
  v17 = (char *)p_s + v13.__size_;
  if ((const std::string_view::value_type *)p_s <= v13.__data_ && v17 > v13.__data_)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13.__size_)
    memmove(p_s, v13.__data_, v13.__size_);
  *v17 = 0;
  v19 = (void *)__s.__r_.__value_.__r.__words[0];
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
      goto LABEL_18;
LABEL_22:
    v20 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v20;
    goto LABEL_28;
  }
  std::string::__init_copy_ctor_external(&__s, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  operator delete(v19);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
    {
LABEL_18:
      v20 = __s.__r_.__value_.__s.__data_[0] == 46;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
      return v20;
    }
    goto LABEL_22;
  }
  if (__s.__r_.__value_.__l.__size_)
  {
    v20 = *__s.__r_.__value_.__l.__data_ == 46;
    operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
    return v20;
  }
  v20 = 0;
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v20;
LABEL_28:
  operator delete(__p.__r_.__value_.__l.__data_);
  return v20;
}

uint64_t WTF::FileSystemImpl::fileTypePotentiallyFollowingSymLinks(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  char v21;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  if (a2)
  {
    v11 = *a1;
    if (*a1)
    {
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v13 = 0x100000000;
    }
    WTF::FileSystemImpl::toStdFileSystemPath(&__p, v12, v13, v4, v5, v6, v7, v8, v9, v10);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, &__ec);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
  else
  {
    v14 = *a1;
    if (*a1)
    {
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v15 = 0;
      v16 = 0x100000000;
    }
    WTF::FileSystemImpl::toStdFileSystemPath(&__p, v15, v16, v4, v5, v6, v7, v8, v9, v10);
    std::__fs::filesystem::__symlink_status((const std::__fs::filesystem::path *)&__p, &__ec);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_13:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!__ec.__val_)
        goto LABEL_14;
      return 0;
    }
  }
  if (__ec.__val_)
    return 0;
LABEL_14:
  if (v21 == 3)
    v18 = 2;
  else
    v18 = 0;
  if (v21 == 2)
    v19 = 1;
  else
    v19 = v18;
  return v19 | 0x100000000;
}

uint64_t WTF::FileSystemImpl::fileTypeFollowingSymlinks(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::fileTypePotentiallyFollowingSymLinks((uint64_t *)this, 1);
}

void WTF::FileSystemImpl::pathFileName(WTF::FileSystemImpl *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, WTF::FileSystemImpl *a7@<X8>, double a8@<D0>, float a9@<S1>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::__fs::filesystem::path::__string_view v14;
  std::__fs::filesystem::path *v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  const std::string_view::value_type *v18;
  std::__fs::filesystem::path v20;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v22;

  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&v20.__pn_, v12, v13, a2, a3, a4, a5, a6, a8, a9);
  v14 = std::__fs::filesystem::path::__filename(&v20);
  if (v14.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
    abort();
  if (v14.__size_ > 0x16)
  {
    v16 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14.__size_ | 7) != 0x17)
      v16 = v14.__size_ | 7;
    v17 = v16 + 1;
    v15 = (std::__fs::filesystem::path *)operator new(v16 + 1);
    v22.__pn_.__r_.__value_.__l.__size_ = v14.__size_;
    v22.__pn_.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    v22.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  }
  else
  {
    *((_BYTE *)&v22.__pn_.__r_.__value_.__s + 23) = v14.__size_;
    v15 = &v22;
  }
  v18 = (char *)v15 + v14.__size_;
  if ((const std::string_view::value_type *)v15 <= v14.__data_ && v18 > v14.__data_)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v14.__size_)
    memmove(v15, v14.__data_, v14.__size_);
  *v18 = 0;
  __p = v22;
  WTF::FileSystemImpl::fromStdFileSystemPath(a7, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(v20.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
}

void WTF::FileSystemImpl::createTemporaryFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;

  WTF::FileSystemImpl::openTemporaryFile(a1, a2, a3, a4, (uint64_t)&v23);
  if (v24 != -1)
  {
    close(v24);
    v24 = -1;
  }
  v13 = v23;
  if (v23)
  {
    v14 = *(_DWORD *)v23;
    *(_DWORD *)v23 += 2;
    *a5 = v13;
    v23 = 0;
    if (v14)
    {
      *(_DWORD *)v13 = v14;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  else
  {
    *a5 = 0;
  }
}

void WTF::FileSystemImpl::realPath(WTF::FileSystemImpl *this@<X0>, WTF::FileSystemImpl *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  std::string __p;
  std::__fs::filesystem::path v17;
  std::error_code __ec;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v12 = *(_DWORD **)this;
  if (*(_QWORD *)this)
  {
    v13 = *((_QWORD *)v12 + 1);
    v14 = v12[1] | ((unint64_t)((v12[4] >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  WTF::FileSystemImpl::toStdFileSystemPath(&__p, v13, v14, v5, v6, v7, v8, v9, v10, v11);
  std::__fs::filesystem::__canonical(&v17, (const std::__fs::filesystem::path *)&__p, &__ec);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (__ec.__val_)
      goto LABEL_6;
LABEL_11:
    WTF::FileSystemImpl::fromStdFileSystemPath(a2, &v17);
    if ((SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!__ec.__val_)
    goto LABEL_11;
LABEL_6:
  v15 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v15 += 2;
  *(_QWORD *)a2 = v15;
  if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  size_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;

  v5 = this;
  if (__sz <= 0x16)
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
    v6 = __sz + 1;
    if (this > (std::string *)__s)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (__sz >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_11;
  v7 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__sz | 7) != 0x17)
    v7 = __sz | 7;
  v8 = v7 + 1;
  v9 = (std::string *)operator new(v7 + 1);
  v5->__r_.__value_.__l.__size_ = __sz;
  v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  v5 = v9;
  v6 = __sz + 1;
  if (v9 <= (std::string *)__s)
  {
LABEL_8:
    if ((char *)v5 + v6 <= __s)
      goto LABEL_9;
    __break(1u);
LABEL_11:
    abort();
  }
LABEL_9:
  memmove(v5, __s, v6);
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE *v37;
  _WORD *v38;
  unsigned __int8 *v39;
  __int16 v40;
  uint8x8_t *v41;
  uint16x8_t *v42;
  unint64_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x8_t *v47;
  uint16x8_t *v48;
  unint64_t v49;
  uint8x8_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v30 = __CFADD__(v11, 1);
  v12 = v11 + 1;
  if (v30)
    v12 = -1;
  v30 = __CFADD__(v10, v12);
  v13 = v10 + v12;
  if (v30)
    v14 = 0xFFFFFFFFLL;
  else
    v14 = v13;
  v15 = *(_QWORD *)(a1 + 8);
  if ((v15 || (v15 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      *result = (char)*a2;
      v17 = (unint64_t)(result + 1);
      v18 = *(unsigned int *)(*(_QWORD *)a3 + 16);
      v19 = *(_QWORD *)a3 + 16 - v18;
      v20 = (uint64_t)&result[v18 + 1];
      if (v18 >= 0x40)
      {
        v21 = v17 + 2 * (v18 & 0xFFFFFFC0);
        v22 = 0uLL;
        do
        {
          v51.val[0] = *(int8x16_t *)v19;
          v23 = *(int8x16_t *)(v19 + 16);
          v52.val[0] = *(int8x16_t *)(v19 + 32);
          v24 = *(_OWORD *)(v19 + 48);
          v19 += 64;
          v25 = v24;
          v52.val[1] = 0uLL;
          v53.val[0] = v23;
          v51.val[1] = 0uLL;
          v26 = (char *)v17;
          vst2q_s8(v26, v51);
          v26 += 32;
          v53.val[1] = 0uLL;
          vst2q_s8(v26, v53);
          v27 = (char *)(v17 + 64);
          vst2q_s8(v27, v52);
          v28 = (char *)(v17 + 96);
          vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
          v17 += 128;
        }
        while (v17 != v21);
        v17 = v21;
      }
      if (v17 != v20)
      {
        v29 = (unint64_t)&result[v18] - v17;
        if (v29 < 0xE
          || (v17 < v19 + (v29 >> 1) + 1 ? (v30 = v19 >= (v29 & 0xFFFFFFFFFFFFFFFELL) + v17 + 2) : (v30 = 1), !v30))
        {
          v38 = (_WORD *)v17;
          v39 = (unsigned __int8 *)v19;
          goto LABEL_29;
        }
        v31 = (v29 >> 1) + 1;
        if (v29 >= 0x3E)
        {
          v32 = v31 & 0xFFFFFFFFFFFFFFE0;
          v41 = (uint8x8_t *)(v19 + 16);
          v42 = (uint16x8_t *)(v17 + 32);
          v43 = v31 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v44 = *(uint8x16_t *)v41[-2].i8;
            v45 = vmovl_u8(*v41);
            v46 = vmovl_high_u8(*(uint8x16_t *)v41->i8);
            v42[-2] = vmovl_u8(*(uint8x8_t *)v44.i8);
            v42[-1] = vmovl_high_u8(v44);
            *v42 = v45;
            v42[1] = v46;
            v42 += 4;
            v41 += 4;
            v43 -= 32;
          }
          while (v43);
          if (v31 == v32)
            return result;
          if ((v31 & 0x18) == 0)
          {
            v39 = (unsigned __int8 *)(v19 + v32);
            v38 = (_WORD *)(v17 + 2 * v32);
            do
            {
LABEL_29:
              v40 = *v39++;
              *v38++ = v40;
            }
            while (v38 != (_WORD *)v20);
            return result;
          }
        }
        else
        {
          v32 = 0;
        }
        v38 = (_WORD *)(v17 + 2 * (v31 & 0xFFFFFFFFFFFFFFF8));
        v39 = (unsigned __int8 *)(v19 + (v31 & 0xFFFFFFFFFFFFFFF8));
        v47 = (uint8x8_t *)(v19 + v32);
        v48 = (uint16x8_t *)(v17 + 2 * v32);
        v49 = v32 - (v31 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v50 = *v47++;
          *v48++ = vmovl_u8(v50);
          v49 += 8;
        }
        while (v49);
        if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
    }
  }
  else
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v33 = *(_QWORD *)a3;
      *(_BYTE *)result = *a2;
      result = (_WORD *)((char *)result + 1);
      v36 = *(_DWORD *)(v33 + 16);
      v35 = v33 + 16;
      v34 = v36;
      if (v36)
      {
        v37 = (_BYTE *)(v35 - v34);
        if ((_DWORD)v34 == 1)
          *(_BYTE *)result = *v37;
        else
          return memcpy(result, v37, v34);
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  int8x16_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  size_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  size_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE *v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unsigned __int8 *v57;
  __int16 v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  int8x16_t v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  unsigned __int8 *v75;
  __int16 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  _WORD *v82;
  unint64_t v83;
  __int128 v84;
  int8x16_t v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  _WORD *v95;
  unsigned __int8 *v96;
  __int16 v97;
  uint64_t v98;
  unint64_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint8x8_t *v106;
  uint16x8_t *v107;
  unint64_t v108;
  uint8x8_t v109;
  uint8x8_t *v110;
  uint16x8_t *v111;
  unint64_t v112;
  uint8x16_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint8x8_t *v116;
  uint16x8_t *v117;
  unint64_t v118;
  uint8x8_t v119;
  uint8x8_t *v120;
  uint16x8_t *v121;
  unint64_t v122;
  uint8x16_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  uint8x8_t *v126;
  uint16x8_t *v127;
  unint64_t v128;
  uint8x8_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;

  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v14 = *(_DWORD *)(*(_QWORD *)a4 + 16);
  v53 = __CFADD__(v13, v14);
  v15 = v13 + v14;
  if (v53)
    v15 = -1;
  v53 = __CFADD__(v12, v15);
  v16 = v12 + v15;
  if (v53)
    v16 = -1;
  v53 = __CFADD__(v11, v16);
  v17 = v11 + v16;
  if (v53)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a1 + 8);
  if (!v19 && (v19 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v19 + 16) & 4) != 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v18, a3, a4, a5, a6, a7, a8);
    if (!result)
      return result;
    v35 = result;
    v36 = *(_QWORD *)(a2 + 8);
    v37 = v36;
    v38 = *(_QWORD *)a3;
    v39 = *(_QWORD *)a4;
    if ((_DWORD)v36)
    {
      v40 = *(_BYTE **)a2;
      if ((_DWORD)v36 != 1)
      {
        result = (char *)memcpy(result, v40, *(_QWORD *)(a2 + 8));
        v41 = &v35[v37];
        v45 = *(_DWORD *)(v38 + 16);
        v43 = (unsigned int *)(v38 + 16);
        v42 = v45;
        if (!v45)
          goto LABEL_28;
LABEL_26:
        v46 = (char *)v43 - v42;
        if ((_DWORD)v42 != 1)
        {
          result = (char *)memcpy(v41, v46, v42);
          v50 = *(_DWORD *)(v39 + 16);
          v48 = v39 + 16;
          v47 = v50;
          if (!v50)
            return result;
          goto LABEL_31;
        }
        *v41 = *v46;
LABEL_28:
        v49 = *(_DWORD *)(v39 + 16);
        v48 = v39 + 16;
        v47 = v49;
        if (!v49)
          return result;
LABEL_31:
        result = &v41[*v43];
        v51 = (_BYTE *)(v48 - v47);
        if ((_DWORD)v47 != 1)
          return (char *)memcpy(result, v51, v47);
        *result = *v51;
        return result;
      }
      *result = *v40;
    }
    v41 = &result[v36];
    v44 = *(_DWORD *)(v38 + 16);
    v43 = (unsigned int *)(v38 + 16);
    v42 = v44;
    if (!v44)
      goto LABEL_28;
    goto LABEL_26;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v18, a3, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v22 = *(_QWORD *)a2;
  v21 = *(_QWORD *)(a2 + 8);
  v23 = *(_QWORD *)a3;
  v24 = *(_QWORD *)a4;
  v25 = &result[2 * v21];
  if ((v21 & 0xFFFFFFC0) == 0)
  {
    v26 = (unint64_t)result;
    v21 = *(_QWORD *)(a2 + 8);
    if (result == v25)
      goto LABEL_45;
LABEL_35:
    v52 = (unint64_t)&result[2 * v21 - v26 - 2];
    if (v52 < 0xE
      || (v26 < v22 + (v52 >> 1) + 1 ? (v53 = v22 >= (v52 & 0xFFFFFFFFFFFFFFFELL) + v26 + 2) : (v53 = 1), !v53))
    {
      v56 = (char *)v26;
      v57 = (unsigned __int8 *)v22;
      goto LABEL_44;
    }
    v54 = (v52 >> 1) + 1;
    if (v52 >= 0x3E)
    {
      v55 = v54 & 0xFFFFFFFFFFFFFFE0;
      v100 = (uint8x8_t *)(v22 + 16);
      v101 = (uint16x8_t *)(v26 + 32);
      v102 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v103 = *(uint8x16_t *)v100[-2].i8;
        v104 = vmovl_u8(*v100);
        v105 = vmovl_high_u8(*(uint8x16_t *)v100->i8);
        v101[-2] = vmovl_u8(*(uint8x8_t *)v103.i8);
        v101[-1] = vmovl_high_u8(v103);
        *v101 = v104;
        v101[1] = v105;
        v101 += 4;
        v100 += 4;
        v102 -= 32;
      }
      while (v102);
      if (v54 == v55)
        goto LABEL_45;
      if ((v54 & 0x18) == 0)
      {
        v57 = (unsigned __int8 *)(v22 + v55);
        v56 = (char *)(v26 + 2 * v55);
        goto LABEL_44;
      }
    }
    else
    {
      v55 = 0;
    }
    v56 = (char *)(v26 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
    v57 = (unsigned __int8 *)(v22 + (v54 & 0xFFFFFFFFFFFFFFF8));
    v106 = (uint8x8_t *)(v22 + v55);
    v107 = (uint16x8_t *)(v26 + 2 * v55);
    v108 = v55 - (v54 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v109 = *v106++;
      *v107++ = vmovl_u8(v109);
      v108 += 8;
    }
    while (v108);
    if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_45;
    do
    {
LABEL_44:
      v58 = *v57++;
      *(_WORD *)v56 = v58;
      v56 += 2;
    }
    while (v56 != v25);
    goto LABEL_45;
  }
  v26 = (unint64_t)&result[2 * (*(_QWORD *)(a2 + 8) & 0xFFFFFFC0)];
  v27 = 0uLL;
  v28 = result;
  do
  {
    v130.val[0] = *(int8x16_t *)v22;
    v29 = *(int8x16_t *)(v22 + 16);
    v133.val[0] = *(int8x16_t *)(v22 + 32);
    v30 = *(_OWORD *)(v22 + 48);
    v22 += 64;
    v31 = v30;
    v133.val[1] = 0uLL;
    v136.val[0] = v29;
    v130.val[1] = 0uLL;
    v32 = v28;
    vst2q_s8(v32, v130);
    v32 += 32;
    v136.val[1] = 0uLL;
    vst2q_s8(v32, v136);
    v33 = v28 + 64;
    vst2q_s8(v33, v133);
    v34 = v28 + 96;
    vst2q_s8(v34, *(int8x16x2_t *)(&v27 - 1));
    v28 += 128;
  }
  while (v28 != (char *)v26);
  v21 = v21;
  if ((char *)v26 != v25)
    goto LABEL_35;
LABEL_45:
  v61 = *(_DWORD *)(v23 + 16);
  v59 = (unsigned int *)(v23 + 16);
  v60 = v61;
  v62 = (unint64_t)v59 - v61;
  v63 = &v25[2 * v61];
  if (v61 < 0x40)
  {
    v64 = (unint64_t)v25;
    if (v25 == v63)
      goto LABEL_56;
LABEL_51:
    v73 = (unint64_t)&result[2 * v21 + 2 * v60 - v64 - 2];
    if (v73 < 0xE || v64 < v62 + (v73 >> 1) + 1 && v62 < (v73 & 0xFFFFFFFFFFFFFFFELL) + v64 + 2)
    {
      v74 = (char *)v64;
      v75 = (unsigned __int8 *)v62;
      goto LABEL_55;
    }
    v98 = (v73 >> 1) + 1;
    if (v73 >= 0x3E)
    {
      v99 = v98 & 0xFFFFFFFFFFFFFFE0;
      v120 = (uint8x8_t *)(v62 + 16);
      v121 = (uint16x8_t *)(v64 + 32);
      v122 = v98 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v123 = *(uint8x16_t *)v120[-2].i8;
        v124 = vmovl_u8(*v120);
        v125 = vmovl_high_u8(*(uint8x16_t *)v120->i8);
        v121[-2] = vmovl_u8(*(uint8x8_t *)v123.i8);
        v121[-1] = vmovl_high_u8(v123);
        *v121 = v124;
        v121[1] = v125;
        v121 += 4;
        v120 += 4;
        v122 -= 32;
      }
      while (v122);
      if (v98 == v99)
        goto LABEL_56;
      if ((v98 & 0x18) == 0)
      {
        v75 = (unsigned __int8 *)(v62 + v99);
        v74 = (char *)(v64 + 2 * v99);
        goto LABEL_55;
      }
    }
    else
    {
      v99 = 0;
    }
    v74 = (char *)(v64 + 2 * (v98 & 0xFFFFFFFFFFFFFFF8));
    v75 = (unsigned __int8 *)(v62 + (v98 & 0xFFFFFFFFFFFFFFF8));
    v126 = (uint8x8_t *)(v62 + v99);
    v127 = (uint16x8_t *)(v64 + 2 * v99);
    v128 = v99 - (v98 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v129 = *v126++;
      *v127++ = vmovl_u8(v129);
      v128 += 8;
    }
    while (v128);
    if (v98 == (v98 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_56;
    do
    {
LABEL_55:
      v76 = *v75++;
      *(_WORD *)v74 = v76;
      v74 += 2;
    }
    while (v74 != v63);
    goto LABEL_56;
  }
  v64 = (unint64_t)&v25[2 * (v60 & 0xFFFFFFC0)];
  v65 = 0uLL;
  v66 = v25;
  do
  {
    v131.val[0] = *(int8x16_t *)v62;
    v67 = *(int8x16_t *)(v62 + 16);
    v134.val[0] = *(int8x16_t *)(v62 + 32);
    v68 = *(_OWORD *)(v62 + 48);
    v62 += 64;
    v69 = v68;
    v134.val[1] = 0uLL;
    v137.val[0] = v67;
    v131.val[1] = 0uLL;
    v70 = v66;
    vst2q_s8(v70, v131);
    v70 += 32;
    v137.val[1] = 0uLL;
    vst2q_s8(v70, v137);
    v71 = v66 + 64;
    vst2q_s8(v71, v134);
    v72 = v66 + 96;
    vst2q_s8(v72, *(int8x16x2_t *)(&v65 - 1));
    v66 += 128;
  }
  while (v66 != (char *)v64);
  if ((char *)v64 != v63)
    goto LABEL_51;
LABEL_56:
  v77 = *v59;
  v78 = (unint64_t)&v25[2 * v77];
  v80 = *(_DWORD *)(v24 + 16);
  v79 = v80;
  v81 = v24 + 16 - v80;
  v82 = (_WORD *)(v78 + 2 * v80);
  if (v80 >= 0x40)
  {
    v83 = v78 + 2 * (v79 & 0xFFFFFFC0);
    v84 = 0uLL;
    do
    {
      v132.val[0] = *(int8x16_t *)v81;
      v85 = *(int8x16_t *)(v81 + 16);
      v135.val[0] = *(int8x16_t *)(v81 + 32);
      v86 = *(_OWORD *)(v81 + 48);
      v81 += 64;
      v87 = v86;
      v135.val[1] = 0uLL;
      v138.val[0] = v85;
      v132.val[1] = 0uLL;
      v88 = (char *)v78;
      vst2q_s8(v88, v132);
      v88 += 32;
      v138.val[1] = 0uLL;
      vst2q_s8(v88, v138);
      v89 = (char *)(v78 + 64);
      vst2q_s8(v89, v135);
      v90 = (char *)(v78 + 96);
      vst2q_s8(v90, *(int8x16x2_t *)(&v84 - 1));
      v78 += 128;
    }
    while (v78 != v83);
    v78 = v83;
  }
  if ((_WORD *)v78 != v82)
  {
    v91 = (unint64_t)&result[2 * v77 + 2 * v79 + 2 * v21 - v78 - 2];
    if (v91 < 0xE
      || (v78 < v81 + (v91 >> 1) + 1 ? (v92 = v81 >= (v91 & 0xFFFFFFFFFFFFFFFELL) + v78 + 2) : (v92 = 1), !v92))
    {
      v95 = (_WORD *)v78;
      v96 = (unsigned __int8 *)v81;
      goto LABEL_70;
    }
    v93 = (v91 >> 1) + 1;
    if (v91 >= 0x3E)
    {
      v94 = v93 & 0xFFFFFFFFFFFFFFE0;
      v110 = (uint8x8_t *)(v81 + 16);
      v111 = (uint16x8_t *)(v78 + 32);
      v112 = v93 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v113 = *(uint8x16_t *)v110[-2].i8;
        v114 = vmovl_u8(*v110);
        v115 = vmovl_high_u8(*(uint8x16_t *)v110->i8);
        v111[-2] = vmovl_u8(*(uint8x8_t *)v113.i8);
        v111[-1] = vmovl_high_u8(v113);
        *v111 = v114;
        v111[1] = v115;
        v111 += 4;
        v110 += 4;
        v112 -= 32;
      }
      while (v112);
      if (v93 == v94)
        return result;
      if ((v93 & 0x18) == 0)
      {
        v96 = (unsigned __int8 *)(v81 + v94);
        v95 = (_WORD *)(v78 + 2 * v94);
        do
        {
LABEL_70:
          v97 = *v96++;
          *v95++ = v97;
        }
        while (v95 != v82);
        return result;
      }
    }
    else
    {
      v94 = 0;
    }
    v95 = (_WORD *)(v78 + 2 * (v93 & 0xFFFFFFFFFFFFFFF8));
    v96 = (unsigned __int8 *)(v81 + (v93 & 0xFFFFFFFFFFFFFFF8));
    v116 = (uint8x8_t *)(v81 + v94);
    v117 = (uint16x8_t *)(v78 + 2 * v94);
    v118 = v94 - (v93 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v119 = *v116++;
      *v117++ = vmovl_u8(v119);
      v118 += 8;
    }
    while (v118);
    if (v93 != (v93 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_70;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::FileSystemImpl::mapToFile(WTF::String const&,unsigned long,WTF::Function<void ()(WTF::Function<BOOL ()(std::span<unsigned char const,18446744073709551615ul>)> const&)> &&,int *)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t result, const void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  BOOL v8;
  size_t v9;

  v3 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v3 + 8) >= a3
    && (v5 = result,
        result = (uint64_t)memcpy(*(void **)v3, a2, a3),
        v6 = *(_QWORD **)(v5 + 8),
        v7 = v6[1],
        v8 = v7 >= a3,
        v9 = v7 - a3,
        v8))
  {
    *v6 += a3;
    v6[1] = v9;
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WTF::FileSystemImpl::fileSystemRepresentation(WTF::StringImpl **this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t MaximumSizeOfFileSystemRepresentation;
  CFIndex v5;
  char *v6;
  int FileSystemRepresentation;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  CFStringRef v22;
  CFStringRef string;

  WTF::String::createCFString(this, &string);
  if (!string)
  {
    *a2 = 0;
    return;
  }
  MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(string);
  v5 = MaximumSizeOfFileSystemRepresentation;
  if (MaximumSizeOfFileSystemRepresentation)
  {
    if (HIDWORD(MaximumSizeOfFileSystemRepresentation))
      goto LABEL_18;
    v6 = (char *)WTF::fastMalloc((WTF *)MaximumSizeOfFileSystemRepresentation);
    FileSystemRepresentation = CFStringGetFileSystemRepresentation(string, v6, v5);
    *a2 = 0;
    if (FileSystemRepresentation)
      goto LABEL_5;
LABEL_12:
    if (!v6)
      goto LABEL_14;
    goto LABEL_13;
  }
  v6 = 0;
  v21 = CFStringGetFileSystemRepresentation(string, 0, 0);
  *a2 = 0;
  if (!v21)
    goto LABEL_12;
LABEL_5:
  if (!v6)
    goto LABEL_14;
  v15 = strlen(v6);
  v16 = v15 + 16;
  if (v15 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x197AD5648);
  }
  v17 = v15;
  v18 = (WTF *)(v15 + 17);
  if (v16 == -1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x197AD5640);
  }
  v19 = WTF::fastMalloc(v18);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v17;
  *a2 = v19;
  v20 = v19 + 16;
  memcpy((void *)(v19 + 16), v6, v17);
  *(_BYTE *)(v20 + v17) = 0;
LABEL_13:
  WTF::fastFree((unint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
LABEL_14:
  v22 = string;
  string = 0;
  if (v22)
    CFRelease(v22);
}

void WTF::FileSystemImpl::stringFromFileSystemRepresentation(WTF::FileSystemImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  const __CFString *v4;

  v4 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)this);
  WTF::String::String(a2, v4);
  if (v4)
    CFRelease(v4);
}

void WTF::FileSystemImpl::pathAsURL(WTF::StringImpl **this@<X0>, CFURLRef *a2@<X8>)
{
  CFStringRef v4;
  CFStringRef filePath;

  WTF::String::createCFString(this, &filePath);
  *a2 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 0);
  v4 = filePath;
  filePath = 0;
  if (v4)
    CFRelease(v4);
}

void WTF::FileSystemImpl::createTemporaryZipArchive(WTF::StringImpl **this@<X0>, _QWORD *a2@<X8>)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  __CFString *v9;
  void *v10;
  _QWORD v11[5];
  id v12;

  *a2 = 0;
  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3600]), "initWithFilePresenter:", 0);
  v6 = v5;
  if (v5)
    CFRetain(v5);

  v7 = v6;
  v8 = (void *)MEMORY[0x1E0C99E98];
  if (*this)
  {
    WTF::StringImpl::createCFString(*this, (CFStringRef *)&v12);
    v9 = (__CFString *)v12;
  }
  else
  {
    v9 = &stru_1E35BF3F0;
  }
  objc_msgSend(v8, "fileURLWithPath:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3321888768;
  v11[2] = ___ZN3WTF14FileSystemImpl25createTemporaryZipArchiveERKNS_6StringE_block_invoke;
  v11[3] = &__block_descriptor_40_ea8_32c73_ZTSKZN3WTF14FileSystemImpl25createTemporaryZipArchiveERKNS_6StringEE3__0_e15_v16__0__NSURL_8l;
  v11[4] = a2;
  objc_msgSend(v7, "coordinateReadingItemAtURL:options:error:byAccessor:", v10, 1, 0, v11);

  if (v6)
    CFRelease(v7);
}

void sub_197AD5854(_Unwind_Exception *a1)
{
  WTF::StringImpl **v1;
  void *v2;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = *v1;
  *v1 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

void ___ZN3WTF14FileSystemImpl25createTemporaryZipArchiveERKNS_6StringE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  const char *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  WTF *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _QWORD v65[4];
  _QWORD v66[5];

  v66[4] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  NSTemporaryDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("WebKitGeneratedFileXXXXXX"));
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = (const char *)objc_msgSend(v5, "fileSystemRepresentation");
  v7 = v6;
  if (!v6)
  {

    v13 = 0;
    v14 = 0;
    goto LABEL_13;
  }
  v8 = strlen(v6);
  v9 = v8 + 16;
  if (v8 >= 0xFFFFFFFFFFFFFFF0)
    goto LABEL_39;
  v10 = v8;
  v11 = (WTF *)(v8 + 17);
  if (v9 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x197AD5BE0);
  }
  v12 = WTF::fastMalloc(v11);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v10;
  memcpy((void *)(v12 + 16), v7, v10);
  *(_BYTE *)(v12 + 16 + v10) = 0;

  if (*(_DWORD *)v12 != 1)
  {
    v15 = *(_QWORD *)(v12 + 8);
    if (v15 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197AD5BE8);
    }
    if (v15 != -17)
    {
      v13 = WTF::fastMalloc((WTF *)(v15 + 17));
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = v15;
      memcpy((void *)(v13 + 16), (const void *)(v12 + 16), v15 + 1);
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v16, v17, v18, v19, v20, v21, v22);
      else
        --*(_DWORD *)v12;
      goto LABEL_12;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x197AD5BD8);
  }
  v13 = v12;
LABEL_12:
  v14 = (char *)(v13 + 16);
LABEL_13:
  if (mkstemp(v14) == -1)
    goto LABEL_31;
  v65[0] = CFSTR("createPKZip");
  v65[1] = CFSTR("sequesterResources");
  v66[0] = MEMORY[0x1E0C9AAB0];
  v66[1] = MEMORY[0x1E0C9AAB0];
  v65[2] = CFSTR("keepParent");
  v65[3] = CFSTR("copyResources");
  v66[2] = MEMORY[0x1E0C9AAB0];
  v66[3] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, v65, 4);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = _MergedGlobals_0();
  objc_msgSend(v3, "path");
  v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v33 = objc_msgSend(v32, "fileSystemRepresentation");
  if (v13)
    v34 = v13 + 16;
  else
    v34 = 0;
  v35 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_1ECF2C2E8[0])(v31, v33, v34, (uint64_t)v30) == 0;

  if (v35)
  {
    if (v13)
    {
      WTF::fromUTF8Impl<false>(v13 + 16, *(_QWORD *)(v13 + 8), (uint64_t *)&v64);
      v43 = v64;
      v44 = *(WTF::StringImpl ***)(a1 + 32);
      v64 = 0;
      v45 = *v44;
      *v44 = v43;
      if (!v45)
      {
LABEL_24:
        v47 = v64;
        v64 = 0;
        if (!v47)
          goto LABEL_30;
LABEL_27:
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v36, v37, v38, v39, v40, v41, v42);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
        goto LABEL_30;
      }
    }
    else
    {
      v46 = *(WTF::StringImpl ***)(a1 + 32);
      v64 = 0;
      v45 = *v46;
      *v46 = 0;
      if (!v45)
        goto LABEL_24;
    }
    if (*(_DWORD *)v45 != 2)
    {
      *(_DWORD *)v45 -= 2;
      goto LABEL_24;
    }
    WTF::StringImpl::~StringImpl(v45, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    v47 = v64;
    v64 = 0;
    if (v47)
      goto LABEL_27;
  }
LABEL_30:
  off_1ECF2C2F0(v31);

LABEL_31:
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v13;
  }

}

void sub_197AD5BF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  _DWORD *v9;

  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZN3WTF14FileSystemImpl25createTemporaryZipArchiveERKNS_6StringEE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void WTF::FileSystemImpl::openTemporaryFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  WTF *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  __int128 *v45;
  char *v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  char *v61;
  WTF *v62;
  uint64_t v63;
  size_t v64;
  int v65;
  size_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  _QWORD v84[2];
  _QWORD v85[2];

  v85[0] = a1;
  v85[1] = a2;
  v84[0] = a3;
  v84[1] = a4;
  v6 = (char *)WTF::fastMalloc((WTF *)0x400);
  if (!confstr(65537, v6, 0x400uLL))
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = -1;
    goto LABEL_78;
  }
  v14 = strlen(v6);
  WTF::StringView::utf8((uint64_t)v85, 0, v15, v16, v17, v18, v19, &v83, v20);
  v29 = v83;
  if (!v83)
  {
    LODWORD(v32) = 1024;
    goto LABEL_38;
  }
  v30 = *((_QWORD *)v83 + 1);
  if (v30)
  {
    v31 = v30 + v14;
    if (v31 < 0x401)
    {
      LODWORD(v32) = 1024;
    }
    else
    {
      if (v31 <= 0x501)
        v32 = 1281;
      else
        v32 = v30 + v14;
      if (HIDWORD(v32))
      {
        __break(0xC471u);
        JUMPOUT(0x197AD6064);
      }
      v33 = (char *)WTF::fastMalloc((WTF *)v32);
      memcpy(v33, v6, v14);
      if (v33 == v6)
      {
        v33 = 0;
        LODWORD(v32) = 0;
      }
      WTF::fastFree((unint64_t)v6, v34, v35, v36, v37, v38, v39, v40);
      v6 = v33;
    }
    if (v31 < v14)
    {
      __break(0xC471u);
      JUMPOUT(0x197AD6054);
    }
    v41 = (char *)v29 + 16;
    v42 = &v6[v14];
    if (v30 < 8)
    {
      v43 = (char *)v29 + 16;
      goto LABEL_31;
    }
    v43 = (char *)v29 + 16;
    if ((unint64_t)(&v6[v14] - (char *)v29 - 16) >= 0x20)
    {
      if (v30 < 0x20)
      {
        v44 = 0;
        goto LABEL_26;
      }
      v44 = v30 & 0xFFFFFFFFFFFFFFE0;
      v45 = (__int128 *)((char *)v29 + 32);
      v46 = &v6[v14 + 16];
      v47 = v30 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *v45;
        *((_OWORD *)v46 - 1) = *(v45 - 1);
        *(_OWORD *)v46 = v28;
        v45 += 2;
        v46 += 32;
        v47 -= 32;
      }
      while (v47);
      if (v30 == v44)
        goto LABEL_33;
      if ((v30 & 0x18) != 0)
      {
LABEL_26:
        v42 += v30 & 0xFFFFFFFFFFFFFFF8;
        v43 = &v41[v30 & 0xFFFFFFFFFFFFFFF8];
        v48 = (uint64_t *)((char *)v29 + v44 + 16);
        v49 = &v6[v44 + v14];
        v50 = v44 - (v30 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v51 = *v48++;
          *(_QWORD *)v49 = v51;
          v49 += 8;
          v50 += 8;
        }
        while (v50);
        if (v30 != (v30 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_31;
LABEL_33:
        v29 = v83;
        v14 += v30;
        if (!v83)
          goto LABEL_38;
        goto LABEL_34;
      }
      v43 = &v41[v44];
      v42 += v44;
    }
LABEL_31:
    v52 = &v41[v30];
    do
    {
      v53 = *v43++;
      *v42++ = v53;
    }
    while (v43 != v52);
    goto LABEL_33;
  }
  LODWORD(v32) = 1024;
  LODWORD(v31) = v14;
LABEL_34:
  if (*(_DWORD *)v29 == 1)
    WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
  else
    --*(_DWORD *)v29;
  v14 = v31;
LABEL_38:
  v54 = v14;
  v55 = v14 + 6;
  if (v55 > v32)
  {
    v56 = v32 + ((unint64_t)v32 >> 2);
    if (v56 >= 0x10)
      v57 = v56 + 1;
    else
      v57 = 16;
    if (v57 <= v55)
      v32 = v14 + 6;
    else
      v32 = v57;
    if (HIDWORD(v32))
      goto LABEL_86;
    v58 = (char *)WTF::fastMalloc((WTF *)v32);
    memcpy(v58, v6, v54);
    if (v6)
    {
      if (v58 == v6)
      {
        v58 = 0;
        LODWORD(v32) = 0;
      }
      WTF::fastFree((unint64_t)v6, v59, v60, v23, v24, v25, v26, v27);
    }
    v6 = v58;
  }
  v61 = &v6[v54];
  *((_WORD *)v61 + 2) = 22616;
  *(_DWORD *)v61 = 1482184792;
  WTF::StringView::utf8((uint64_t)v84, 0, v23, v24, v25, v26, v27, &v83, *(float *)&v28);
  v62 = v83;
  if (!v83)
  {
    v65 = 0;
    goto LABEL_68;
  }
  v63 = *((_QWORD *)v83 + 1);
  v64 = v63 + 1;
  if (v63 == -1)
  {
    v65 = -1;
    goto LABEL_68;
  }
  v66 = v55;
  v67 = v64 + v55;
  if (v67 > v32)
  {
    v68 = v32 + ((unint64_t)v32 >> 2);
    if (v68 >= 0x10)
      v69 = v68 + 1;
    else
      v69 = 16;
    if (v69 <= v67)
      v70 = v67;
    else
      v70 = v69;
    if (!HIDWORD(v70))
    {
      v71 = (char *)WTF::fastMalloc((WTF *)v70);
      memcpy(v71, v6, v66);
      if (v71 == v6)
        v71 = 0;
      WTF::fastFree((unint64_t)v6, v72, v73, v74, v75, v76, v77, v78);
      v6 = v71;
      goto LABEL_66;
    }
LABEL_86:
    __break(0xC471u);
    JUMPOUT(0x197AD604CLL);
  }
LABEL_66:
  if (v67 < v66)
  {
    __break(0xC471u);
    JUMPOUT(0x197AD605CLL);
  }
  memcpy(&v6[v66], (char *)v62 + 16, v64);
  v65 = *((_DWORD *)v62 + 2);
LABEL_68:
  v79 = mkstemps(v6, v65);
  if (v79 == -1)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = -1;
  }
  else
  {
    if (v6)
    {
      v80 = strlen(v6);
      WTF::fromUTF8Impl<false>((unint64_t)v6, v80, &v82);
      v81 = v82;
    }
    else
    {
      v81 = 0;
    }
    *(_QWORD *)a5 = v81;
    *(_DWORD *)(a5 + 8) = v79;
  }
  if (!v83)
  {
LABEL_77:
    if (!v6)
      return;
    goto LABEL_78;
  }
  if (*(_DWORD *)v83 != 1)
  {
    --*(_DWORD *)v83;
    goto LABEL_77;
  }
  WTF::fastFree((unint64_t)v83, v7, v8, v9, v10, v11, v12, v13);
  if (v6)
LABEL_78:
    WTF::fastFree((unint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_197AD6070(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10)
{
  unint64_t v10;
  _DWORD *v11;

  if (*v11 == 1)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  else
    --*v11;
  WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

id WTF::FileSystemImpl::createTemporaryDirectory(WTF::FileSystemImpl *this, NSString *a2)
{
  WTF::FileSystemImpl *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  const void *v9;
  size_t v10;
  size_t v12;
  void *v13;
  char v14[1032];

  v2 = this;
  NSTemporaryDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
    goto LABEL_9;
  v5 = objc_msgSend(v3, "length");
  v6 = 0;
  if (!v2 || !v5)
    goto LABEL_10;
  if (!-[WTF::FileSystemImpl length](v2, "length"))
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  -[WTF::FileSystemImpl stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("-XXXXXXXX"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathComponent:", v7);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = (const void *)objc_msgSend(v8, "fileSystemRepresentation");

  if (v9 && (v10 = strlen((const char *)v9), v10 <= 0x400))
  {
    v12 = v10;
    memcpy(v14, v9, v10 + 1);
    if (mkdtemp(v14))
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "stringWithFileSystemRepresentation:length:", v14, v12);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
  }

LABEL_10:
  return v6;
}

void sub_197AD6244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  void *v11;
  void *v12;
  void *v13;
  WTF *v14;
  void *v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (v14 != a10)
  {
    if (a10)
    {
      WTF::fastFree((unint64_t)a10, v17, v18, v19, v20, v21, v22, v23);

      _Unwind_Resume(a1);
    }
  }

  _Unwind_Resume(a1);
}

void sub_197AD62B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AD62CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AD62E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WTF::FileSystemImpl::setAllowsMaterializingDatalessFiles(int a1, int a2)
{
  _BOOL4 v2;
  int v3;

  v2 = a2 != 0;
  if (a1)
    v3 = 2;
  else
    v3 = 1;
  return setiopolicy_np(3, v2, v3) != -1;
}

uint64_t WTF::FileSystemImpl::allowsMaterializingDatalessFiles(int a1)
{
  int v1;
  int v2;

  v1 = getiopolicy_np(3, a1 != 0);
  v2 = v1 == 2 || v1 == 1;
  return (v1 == 2) | (v2 << 8);
}

uint64_t WTF::FileSystemImpl::isSafeToUseMemoryMapForPath(WTF::StringImpl **this, const WTF::String *a2)
{
  void *v3;
  __CFString *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  int v9;
  id v11;
  id v12;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (*this)
  {
    WTF::StringImpl::createCFString(*this, (CFStringRef *)&v12);
    v4 = (__CFString *)v12;
  }
  else
  {
    v4 = &stru_1E35BF3F0;
  }
  v11 = 0;
  objc_msgSend(v3, "attributesOfItemAtPath:error:", v4, &v11);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v11;

  if (v6)
  {
    v7 = 0;
  }
  else
  {
    objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0CB2AD8]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB2AB0]);

    v7 = v9 ^ 1u;
  }

  return v7;
}

void sub_197AD6454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AD646C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197AD6480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath(WTF::StringImpl **this, const WTF::String *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  __CFString *v6;
  unsigned int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  id v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if ((WTF::FileSystemImpl::isSafeToUseMemoryMapForPath(this, a2) & 1) != 0)
    return 1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *MEMORY[0x1E0CB2AD8];
  v35[0] = *MEMORY[0x1E0CB2AB8];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (*this)
  {
    WTF::StringImpl::createCFString(*this, (CFStringRef *)&v33);
    v6 = (__CFString *)v33;
  }
  else
  {
    v6 = &stru_1E35BF3F0;
  }
  v32 = 0;
  v7 = objc_msgSend(v4, "setAttributes:ofItemAtPath:error:", v5, v6, &v32);
  v8 = v32;

  if (v8)
    v3 = 0;
  else
    v3 = v7;
  if ((v3 & 1) == 0)
  {
    WTF::String::utf8((uint64_t *)this, 0, v9, v10, v11, v12, v13, &v33, v14);
    v22 = v33;
    v23 = (_BYTE)v33 + 16;
    if (!v33)
      v23 = 0;
    WTFLogAlways("makeSafeToUseMemoryMapForPath(%s) failed with error %@", v15, v16, v17, v18, v19, v20, v21, v23);
    if (v22)
    {
      if (*v22 == 1)
        WTF::fastFree((unint64_t)v22, v24, v25, v26, v27, v28, v29, v30);
      else
        --*v22;
    }
  }

  return v3;
}

void sub_197AD661C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WTF::FileSystemImpl::setExcludedFromBackup(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  id v11;

  v2 = *this;
  if (!v2 || !*((_DWORD *)v2 + 1))
    return 0;
  v4 = (void *)MEMORY[0x1E0C99E98];
  WTF::StringImpl::createCFString(v2, (CFStringRef *)&v11);
  objc_msgSend(v4, "fileURLWithPath:isDirectory:", v11, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *MEMORY[0x1E0C999D8];
  v10 = 0;
  v8 = objc_msgSend(v5, "setResourceValue:forKey:error:", v6, v7, &v10);

  return v8;
}

void sub_197AD6714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AD6728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL WTF::FileSystemImpl::markPurgeable(WTF::StringImpl **this, const WTF::String *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  WTF *v10;
  uint64_t v12;
  WTF *v13;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v13);
  if (!v13)
    return 0;
  v12 = 73733;
  v9 = fsctl((const char *)v13 + 16, 0xC0084A44uLL, &v12, 0) == 0;
  v10 = v13;
  v13 = 0;
  if (!v10)
    return v9;
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
    return v9;
  }
  WTF::fastFree((unint64_t)v10, v2, v3, v4, v5, v6, v7, v8);
  return v9;
}

void sub_197AD67E4(_Unwind_Exception *exception_object, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree((unint64_t)a10, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

id WTF::FileSystemImpl::systemDirectoryPath(WTF::FileSystemImpl *this)
{
  if ((_MergedGlobals_31 & 1) == 0)
  {
    WTF::NeverDestroyed<WTF::RetainPtr<NSString>,WTF::AnyThreadsAccessTraits>::NeverDestroyed<NSString* {__strong}>(CFSTR("/System/"));

    _MergedGlobals_31 = 1;
  }
  return (id)qword_1EE345230;
}

void sub_197AD6878(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void WTF::NeverDestroyed<WTF::RetainPtr<NSString>,WTF::AnyThreadsAccessTraits>::NeverDestroyed<NSString* {__strong}>(void *a1)
{
  void *cf;

  qword_1EE345230 = a1;
  cf = (void *)qword_1EE345230;
  if (qword_1EE345230)
    CFRetain((CFTypeRef)qword_1EE345230);

}

void sub_197AD68DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t initBOMCopierNew(void)
{
  uint64_t (*v0)(void);
  uint64_t result;

  if (byte_1EE345229 == 1)
  {
    v0 = (uint64_t (*)(void))dlsym((void *)qword_1EE345238, "BOMCopierNew");
    _MergedGlobals_0 = v0;
    if (v0)
      return v0();
  }
  else
  {
    qword_1EE345238 = ___ZL10BomLibraryv_block_invoke();
    byte_1EE345229 = 1;
    v0 = (uint64_t (*)(void))dlsym((void *)qword_1EE345238, "BOMCopierNew");
    _MergedGlobals_0 = v0;
    if (v0)
      return v0();
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t ___ZL10BomLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Bom.framework/Bom", 2);
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t initBOMCopierCopyWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)();
  uint64_t result;

  if (byte_1EE345229 == 1)
  {
    v8 = (uint64_t (*)())dlsym((void *)qword_1EE345238, "BOMCopierCopyWithOptions");
    off_1ECF2C2E8[0] = v8;
    if (v8)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
  }
  else
  {
    qword_1EE345238 = ___ZL10BomLibraryv_block_invoke();
    byte_1EE345229 = 1;
    v8 = (uint64_t (*)())dlsym((void *)qword_1EE345238, "BOMCopierCopyWithOptions");
    off_1ECF2C2E8[0] = v8;
    if (v8)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t initBOMCopierFree(uint64_t a1)
{
  uint64_t (*v2)();
  uint64_t result;

  if (byte_1EE345229 == 1)
  {
    v2 = (uint64_t (*)())dlsym((void *)qword_1EE345238, "BOMCopierFree");
    off_1ECF2C2F0 = v2;
    if (v2)
      return ((uint64_t (*)(uint64_t))v2)(a1);
  }
  else
  {
    qword_1EE345238 = ___ZL10BomLibraryv_block_invoke();
    byte_1EE345229 = 1;
    v2 = (uint64_t (*)())dlsym((void *)qword_1EE345238, "BOMCopierFree");
    off_1ECF2C2F0 = v2;
    if (v2)
      return ((uint64_t (*)(uint64_t))v2)(a1);
  }
  result = 43;
  __break(0xC471u);
  return result;
}

uint64_t WTF::FileSystemImpl::openFile(WTF::StringImpl **a1, int a2, int a3, int a4)
{
  int v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;

  WTF::FileSystemImpl::fileSystemRepresentation(a1, (uint64_t *)&v20);
  if (!v20)
    return 0xFFFFFFFFLL;
  if ((a2 - 1) > 2)
    v7 = 0;
  else
    v7 = dword_199122B08[a2 - 1];
  if (a4)
    v10 = v7 | 0xA00;
  else
    v10 = v7;
  v11 = 384;
  if (a3)
    v11 = 438;
  v8 = open((const char *)v20 + 16, v10, v11);
  v19 = v20;
  v20 = 0;
  if (!v19)
    return v8;
  if (*(_DWORD *)v19 == 1)
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  else
    --*(_DWORD *)v19;
  return v8;
}

uint64_t WTF::FileSystemImpl::closeFile(WTF::FileSystemImpl *this, int *a2)
{
  uint64_t result;

  result = *(unsigned int *)this;
  if ((_DWORD)result != -1)
  {
    result = close(result);
    *(_DWORD *)this = -1;
  }
  return result;
}

off_t WTF::FileSystemImpl::seekFile(int a1, off_t a2, int a3)
{
  int v3;

  if (a3 == 2)
    v3 = 2;
  else
    v3 = a3 == 1;
  return lseek(a1, a2, v3);
}

BOOL WTF::FileSystemImpl::truncateFile(WTF::FileSystemImpl *this, off_t a2)
{
  return ftruncate((int)this, a2) == 0;
}

BOOL WTF::FileSystemImpl::flushFile(WTF::FileSystemImpl *this)
{
  return fsync((int)this) == 0;
}

ssize_t WTF::FileSystemImpl::writeToFile(int __fd, void *__buf, size_t __nbyte)
{
  ssize_t result;

  while (1)
  {
    result = write(__fd, __buf, __nbyte);
    if ((result & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
      return -1;
  }
  return result;
}

ssize_t WTF::FileSystemImpl::readFromFile(int a1, void *a2, size_t a3)
{
  ssize_t result;

  while (1)
  {
    result = read(a1, a2, a3);
    if ((result & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
      return -1;
  }
  return result;
}

BOOL WTF::FileSystemImpl::lockFile(int a1, int a2)
{
  return flock(a1, a2) != -1;
}

BOOL WTF::FileSystemImpl::unlockFile(WTF::FileSystemImpl *this)
{
  return flock((int)this, 8) != -1;
}

off_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this)
{
  stat v2;

  if (fstat((int)this, &v2))
    return 0;
  else
    return v2.st_size;
}

unint64_t WTF::FileSystemImpl::fileCreationTime(WTF::StringImpl **this, const WTF::String *a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  double tv_sec;
  unsigned __int8 v13;
  int v14;
  stat v16;
  uint64_t v17;

  WTF::FileSystemImpl::fileSystemRepresentation(this, &v17);
  v10 = (int *)v17;
  if (!v17)
  {
    v13 = 0;
    return v13 | (v2 << 8);
  }
  if (!*(_BYTE *)(v17 + 16))
  {
    v13 = 0;
    v17 = 0;
    v14 = *v10 - 1;
    if (*v10 != 1)
      goto LABEL_8;
    goto LABEL_11;
  }
  v11 = stat((const char *)(v17 + 16), &v16);
  v2 = COERCE_UNSIGNED_INT64((double)v16.st_birthtimespec.tv_sec) >> 8;
  if (v11 == -1)
  {
    v13 = 0;
  }
  else
  {
    tv_sec = (double)v16.st_birthtimespec.tv_sec;
    v13 = LOBYTE(tv_sec);
  }
  v10 = (int *)v17;
  v17 = 0;
  if (v10)
  {
    v14 = *v10 - 1;
    if (*v10 != 1)
    {
LABEL_8:
      *v10 = v14;
      return v13 | (v2 << 8);
    }
LABEL_11:
    WTF::fastFree((unint64_t)v10, v3, v4, v5, v6, v7, v8, v9);
  }
  return v13 | (v2 << 8);
}

__darwin_ino64_t WTF::FileSystemImpl::fileID(WTF::FileSystemImpl *this)
{
  stat v2;

  if (fstat((int)this, &v2))
    return 0;
  else
    return v2.st_ino;
}

BOOL WTF::FileSystemImpl::fileIDsAreEqual(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;

  if (a4)
    v4 = a1 == a3;
  else
    v4 = a2 == 0;
  if (a2)
    return v4;
  else
    return a4 == 0;
}

uint64_t WTF::FileSystemImpl::volumeFileBlockSize(WTF::StringImpl **this, const WTF::String *a2)
{
  const char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  WTF *v13;
  statvfs v14;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v13);
  if (v13)
    v2 = (char *)v13 + 16;
  else
    v2 = 0;
  v10 = statvfs(v2, &v14);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree((unint64_t)v11, v3, v4, v5, v6, v7, v8, v9);
    else
      --*(_DWORD *)v11;
  }
  if (v10)
    return 0;
  else
    return LODWORD(v14.f_frsize) | 0x100000000;
}

unint64_t WTF::FileSystemImpl::getFileDeviceId(WTF::StringImpl **this, const WTF::String *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 st_dev;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  stat v15;
  uint64_t v16;

  WTF::FileSystemImpl::fileSystemRepresentation(this, &v16);
  if (!v16)
    return 0;
  v9 = stat((const char *)(v16 + 16), &v15);
  st_dev = v15.st_dev;
  v11 = v15.st_dev >> 8;
  if (v9 == -1)
    st_dev = 0;
  v12 = (_DWORD *)v16;
  v16 = 0;
  if (v12)
  {
    v13 = st_dev | (unint64_t)(v11 << 8);
    if (*v12 == 1)
    {
      WTF::fastFree((unint64_t)v12, v2, v3, v4, v5, v6, v7, v8);
      if (v9 != -1)
        return v13 | 0x100000000;
    }
    else
    {
      --*v12;
      if (v9 != -1)
        return v13 | 0x100000000;
    }
  }
  else
  {
    v13 = st_dev | (unint64_t)(v11 << 8);
    if (v9 != -1)
      return v13 | 0x100000000;
  }
  return v13;
}

BOOL WTF::FileSystemImpl::fileExists(WTF::StringImpl **this, const WTF::String *a2)
{
  const char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  WTF *v13;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v13);
  if (v13)
    v2 = (char *)v13 + 16;
  else
    v2 = 0;
  v10 = access(v2, 0);
  v11 = v13;
  v13 = 0;
  if (!v11)
    return v10 != -1;
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
    return v10 != -1;
  }
  WTF::fastFree((unint64_t)v11, v3, v4, v5, v6, v7, v8, v9);
  return v10 != -1;
}

BOOL WTF::FileSystemImpl::deleteFile(WTF::StringImpl **this, const WTF::String *a2)
{
  const char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  WTF *v13;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v13);
  if (v13)
    v2 = (char *)v13 + 16;
  else
    v2 = 0;
  v10 = unlink(v2);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WTF::fastFree((unint64_t)v11, v3, v4, v5, v6, v7, v8, v9);
      if (!v10)
        return v10 == 0;
      goto LABEL_8;
    }
    --*(_DWORD *)v11;
  }
  if (v10)
LABEL_8:
    __error();
  return v10 == 0;
}

uint64_t WTF::FileSystemImpl::makeAllDirectories(WTF::StringImpl **this, const WTF::String *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  WTF *v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  WTF *v36;
  WTF *v37;

  WTF::FileSystemImpl::fileSystemRepresentation(this, (uint64_t *)&v37);
  if (!v37)
    return 0;
  v9 = *((_DWORD *)v37 + 2);
  if (!v9)
    goto LABEL_38;
  if (!access((const char *)v37 + 16, 0))
    goto LABEL_40;
  v10 = v37;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
      goto LABEL_15;
    v37 = 0;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x197AD7364);
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)(v11 + 17));
    *(_DWORD *)v19 = 1;
    v19[1] = v11;
    v20 = v37;
    v37 = (WTF *)v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WTF::fastFree((unint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
        v19 = v37;
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
    memcpy(v19 + 2, (char *)v10 + 16, v11 + 1);
    if (*(_DWORD *)v10 == 1)
    {
      WTF::fastFree((unint64_t)v10, v23, v24, v25, v26, v27, v28, v29);
      v10 = v37;
      if (v37)
      {
LABEL_15:
        v30 = (uint64_t)v10 + 17;
        v31 = v9 - 1;
        if (*(_BYTE *)(v30 + v31) != 47)
          goto LABEL_20;
        goto LABEL_16;
      }
    }
    else
    {
      --*(_DWORD *)v10;
      v10 = (WTF *)v19;
      if (v19)
        goto LABEL_15;
    }
  }
  v30 = 1;
  v31 = v9 - 1;
  if (*(_BYTE *)(v31 + 1) == 47)
LABEL_16:
    *(_BYTE *)(v30 + v31) = 0;
LABEL_20:
  while (*(_BYTE *)v30 == 47)
  {
    *(_BYTE *)v30 = 0;
    if (v37)
      v32 = (char *)v37 + 16;
    else
      v32 = 0;
    if (access(v32, 0))
    {
      v33 = v37 ? (char *)v37 + 16 : 0;
      if (mkdir(v33, 0x1C0u))
        goto LABEL_38;
    }
    *(_BYTE *)v30 = 47;
LABEL_19:
    ++v30;
  }
  if (*(_BYTE *)v30)
    goto LABEL_19;
  v34 = v37 ? (char *)v37 + 16 : 0;
  if (!access(v34, 0) || (v37 ? (v35 = (char *)v37 + 16) : (v35 = 0), !mkdir(v35, 0x1C0u)))
  {
LABEL_40:
    v21 = 1;
    v36 = v37;
    v37 = 0;
    if (!v36)
      return v21;
    goto LABEL_41;
  }
LABEL_38:
  v21 = 0;
  v36 = v37;
  v37 = 0;
  if (!v36)
    return v21;
LABEL_41:
  if (*(_DWORD *)v36 == 1)
    WTF::fastFree((unint64_t)v36, v2, v3, v4, v5, v6, v7, v8);
  else
    --*(_DWORD *)v36;
  return v21;
}

unint64_t WTF::FileSystemImpl::pathByAppendingComponent@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  _BOOL4 v13;
  unint64_t result;
  int v15;
  char v16;
  unint64_t v17;
  int v18;

  if (!(_DWORD)a2)
    goto LABEL_15;
  v10 = (a2 - 1);
  if ((a2 & 0xFF00000000) != 0)
  {
    if (a1->i8[v10] == 47)
      goto LABEL_4;
LABEL_15:
    if ((a4 & 0x80000000) != 0
      || ((v15 = a4 + 1, !__OFADD__((_DWORD)a4, 1)) ? (v16 = 0) : (v16 = 1),
          (a2 & 0x80000000) != 0 || (v16 & 1) != 0 || (v17 = (a2 + v15), __OFADD__((_DWORD)a2, v15))))
    {
      *a5 = 0;
      __break(0xC471u);
      JUMPOUT(0x197AD7448);
    }
    v18 = (a4 & 0xFF00000000) != 0 && (a2 & 0xFF00000000) != 0;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v17, v18, a1, a2, 47, a3, a4, a5);
    if (!*a5)
    {
      __break(0xC471u);
      JUMPOUT(0x197AD7450);
    }
    return result;
  }
  if (a1->i16[v10] != 47)
    goto LABEL_15;
LABEL_4:
  if (((a4 | a2) & 0x80000000) != 0
    || (v11 = (a2 + a4), __OFADD__((_DWORD)a2, (_DWORD)a4)))
  {
    *a5 = 0;
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x197AD73E4);
  }
  v13 = (a4 & 0xFF00000000) != 0 && (a2 & 0xFF00000000) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v11, v13, a1, a2, a3, a4, a5);
  if (!*a5)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  return result;
}

void WTF::FileSystemImpl::pathByAppendingComponents(int8x16_t *a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  int v10;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  int8x16_t *v25;
  size_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  char v68;
  __int128 v69;
  char v70;

  v10 = a2;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 1;
  v13 = a2;
  v14 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    WTF::StringBuilder::append((uint64_t)&v65, a1, a2, a4, a5, a6, a7, a8);
    v22 = *((unsigned int *)a3 + 3);
    if (!(_DWORD)v22)
      goto LABEL_15;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v65, a1, a2, a4, a5, a6, a7, a8);
    v22 = *((unsigned int *)a3 + 3);
    if (!(_DWORD)v22)
      goto LABEL_15;
  }
  v23 = *a3;
  if (v13)
  {
    v24 = (v10 - 1);
    if (v14)
    {
      if (a1->i8[v24] == 47)
        goto LABEL_8;
    }
    else if (a1->i16[v24] == 47)
    {
LABEL_8:
      v25 = *(int8x16_t **)v23;
      v26 = *((_QWORD *)v23 + 1);
      if ((*((_QWORD *)v23 + 1) & 0xFF00000000) != 0)
      {
        WTF::StringBuilder::append((uint64_t)&v65, v25, v26, v17, v18, v19, v20, v21);
        if ((_DWORD)v22 == 1)
          goto LABEL_15;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v65, v25, v26, v17, v18, v19, v20, v21);
        if ((_DWORD)v22 == 1)
          goto LABEL_15;
      }
LABEL_13:
      v27 = v23 + 1;
      v28 = 16 * v22 - 16;
      do
      {
        v70 = 47;
        v29 = *v27++;
        v69 = v29;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((uint64_t)&v65, &v70, (uint64_t)&v69, v17, v18, v19, v20, v21);
        v28 -= 16;
      }
      while (v28);
      goto LABEL_15;
    }
  }
  v70 = 47;
  v69 = *v23;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((uint64_t)&v65, &v70, (uint64_t)&v69, v17, v18, v19, v20, v21);
  if ((_DWORD)v22 != 1)
    goto LABEL_13;
LABEL_15:
  v30 = v65;
  if (v65)
    goto LABEL_29;
  if ((v67 & 0x80000000) == 0 && v66 && *((_DWORD *)v66 + 1) > v67 + (v67 >> 2))
  {
    if ((*((_BYTE *)v66 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v65, (WTF::AtomStringImpl *)v67, v16, v17, v18, v19, v20, v21);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v65, (WTF::AtomStringImpl *)v67, v16, v17, v18, v19, v20, v21);
    v38 = v65;
    v65 = v66;
    v66 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v65);
  v30 = v65;
  if (v65)
LABEL_29:
    *(_DWORD *)v30 += 2;
  *a9 = v30;
  v47 = v66;
  v66 = 0;
  if (!v47)
  {
LABEL_33:
    v48 = v65;
    v65 = 0;
    if (!v48)
      return;
    goto LABEL_36;
  }
  if (*(_DWORD *)v47 != 2)
  {
    *(_DWORD *)v47 -= 2;
    goto LABEL_33;
  }
  WTF::StringImpl::~StringImpl(v47, v15, v16, v17, v18, v19, v20, v21);
  WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  v48 = v65;
  v65 = 0;
  if (!v48)
    return;
LABEL_36:
  if (*(_DWORD *)v48 == 2)
  {
    WTF::StringImpl::~StringImpl(v48, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
  }
  else
  {
    *(_DWORD *)v48 -= 2;
  }
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, uint64_t a6@<X5>, int **a7@<X8>)
{
  int v11;
  int *v13;
  _BYTE *v14;
  _WORD *v15;
  _WORD *v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  unint64_t v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  _WORD *v34;
  int8x16_t *v35;
  __int16 v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  _BYTE *v41;
  int8x16_t *v42;
  char v43;
  _BYTE *v44;
  unint64_t v45;
  unsigned __int128 v46;
  char *v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  size_t v51;
  _BYTE *v52;
  int8x16_t *v53;
  char v54;
  uint8x8_t *v55;
  uint16x8_t *v56;
  unint64_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint8x8_t *v61;
  uint16x8_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  _WORD *v65;
  unint64_t v66;
  __int128 v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  _WORD *v75;
  int8x16_t *v76;
  __int16 v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint8x8_t *v86;
  uint16x8_t *v87;
  unint64_t v88;
  uint8x8_t v89;
  int8x16_t *v90;
  int8x16_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int16x8_t *v97;
  int8x8_t *v98;
  unint64_t v99;
  int16x8_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  unint64_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int16x8_t *v108;
  int8x8_t *v109;
  unint64_t v110;
  int16x8_t v111;
  _DWORD *v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x2_t v118;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v112);
        v13 = v112;
        if (!v112)
          goto LABEL_13;
        v14 = v112 + 5;
        *v112 = 2;
        v13[1] = v11;
        *((_QWORD *)v13 + 1) = v13 + 5;
        v13[4] = 4;
        if ((a4 & 0xFF00000000) != 0)
        {
          if ((_DWORD)a4)
          {
            if ((_DWORD)a4 == 1)
              *v14 = a3->i8[0];
            else
              memcpy(v13 + 5, a3, a4);
          }
LABEL_53:
          result = (unint64_t)&v14[a4];
          if ((a6 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a6)
            {
              if ((_DWORD)a6 == 1)
              {
                *(_BYTE *)result = a5->i8[0];
                goto LABEL_13;
              }
              v51 = a6;
LABEL_98:
              result = (unint64_t)memcpy((void *)result, a5, v51);
              goto LABEL_13;
            }
            goto LABEL_13;
          }
          v44 = (_BYTE *)(result + a6);
          if (a6 >= 0x10)
          {
            v45 = result + (a6 & 0xFFFFFFF0);
            do
            {
              v46 = (unsigned __int128)vld2q_s8(a5->i8);
              a5 += 2;
              *(_OWORD *)result = v46;
              result += 16;
            }
            while (result != v45);
            result = v45;
          }
          if ((_BYTE *)result == v44)
            goto LABEL_13;
          v47 = (char *)v13 + a4 + a6;
          v48 = (unint64_t)&v47[-result + 20];
          if (v48 < 8
            || (result < (unint64_t)&a5[2].u64[1] + 2 * (_QWORD)v47 + -2 * result
              ? (v49 = a5 >= (int8x16_t *)((char *)v13 + a6 + a4 + 20))
              : (v49 = 1),
                !v49))
          {
            v52 = (_BYTE *)result;
            v53 = a5;
            goto LABEL_72;
          }
          if (v48 >= 0x20)
          {
            v50 = v48 & 0xFFFFFFFFFFFFFFE0;
            v101 = a5 + 2;
            v102 = (int8x16_t *)(result + 16);
            v103 = v48 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v105 = v101[-2];
              v104 = v101[-1];
              v107 = *v101;
              v106 = v101[1];
              v101 += 4;
              v102[-1] = vuzp1q_s8(v105, v104);
              *v102 = vuzp1q_s8(v107, v106);
              v102 += 2;
              v103 -= 32;
            }
            while (v103);
            if (v48 == v50)
              goto LABEL_13;
            if ((v48 & 0x18) == 0)
            {
              v53 = (int8x16_t *)((char *)a5 + 2 * v50);
              v52 = (_BYTE *)(result + v50);
              goto LABEL_72;
            }
          }
          else
          {
            v50 = 0;
          }
          v52 = (_BYTE *)(result + (v48 & 0xFFFFFFFFFFFFFFF8));
          v53 = (int8x16_t *)((char *)a5 + 2 * (v48 & 0xFFFFFFFFFFFFFFF8));
          v108 = (int16x8_t *)((char *)a5 + 2 * v50);
          v109 = (int8x8_t *)(result + v50);
          v110 = v50 - (v48 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v111 = *v108++;
            *v109++ = vmovn_s16(v111);
            v110 += 8;
          }
          while (v110);
          if (v48 == (v48 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_13;
          do
          {
LABEL_72:
            v54 = v53->i8[0];
            v53 = (int8x16_t *)((char *)v53 + 2);
            *v52++ = v54;
          }
          while (v52 != v44);
          goto LABEL_13;
        }
        v26 = &v14[a4];
        if (a4 < 0x10)
        {
          v27 = (unint64_t)(v13 + 5);
        }
        else
        {
          v27 = (unint64_t)&v14[a4 & 0xFFFFFFF0];
          v28 = (unsigned __int128 *)(v13 + 5);
          do
          {
            v29 = (unsigned __int128)vld2q_s8(a3->i8);
            a3 += 2;
            *v28++ = v29;
          }
          while (v28 != (unsigned __int128 *)v27);
        }
        if ((_BYTE *)v27 == v26)
          goto LABEL_53;
        v37 = (char *)v13 + a4;
        v38 = (unint64_t)&v37[-v27 + 20];
        if (v38 < 8
          || (v27 < (unint64_t)&a3[2].u64[1] + 2 * (_QWORD)v37 + -2 * v27
            ? (v39 = a3 >= (int8x16_t *)(v37 + 20))
            : (v39 = 1),
              !v39))
        {
          v41 = (_BYTE *)v27;
          v42 = a3;
          goto LABEL_52;
        }
        if (v38 >= 0x20)
        {
          v40 = v38 & 0xFFFFFFFFFFFFFFE0;
          v90 = a3 + 2;
          v91 = (int8x16_t *)(v27 + 16);
          v92 = v38 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v94 = v90[-2];
            v93 = v90[-1];
            v96 = *v90;
            v95 = v90[1];
            v90 += 4;
            v91[-1] = vuzp1q_s8(v94, v93);
            *v91 = vuzp1q_s8(v96, v95);
            v91 += 2;
            v92 -= 32;
          }
          while (v92);
          if (v38 == v40)
            goto LABEL_53;
          if ((v38 & 0x18) == 0)
          {
            v42 = (int8x16_t *)((char *)a3 + 2 * v40);
            v41 = (_BYTE *)(v27 + v40);
            goto LABEL_52;
          }
        }
        else
        {
          v40 = 0;
        }
        v41 = (_BYTE *)(v27 + (v38 & 0xFFFFFFFFFFFFFFF8));
        v42 = (int8x16_t *)((char *)a3 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
        v97 = (int16x8_t *)((char *)a3 + 2 * v40);
        v98 = (int8x8_t *)(v27 + v40);
        v99 = v40 - (v38 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v100 = *v97++;
          *v98++ = vmovn_s16(v100);
          v99 += 8;
        }
        while (v99);
        if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_53;
        do
        {
LABEL_52:
          v43 = v42->i8[0];
          v42 = (int8x16_t *)((char *)v42 + 2);
          *v41++ = v43;
        }
        while (v41 != v26);
        goto LABEL_53;
      }
LABEL_11:
      v13 = 0;
      goto LABEL_13;
    }
LABEL_12:
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_13;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if (result > 0x7FFFFFEF)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v112);
  v13 = v112;
  if (!v112)
    goto LABEL_13;
  v15 = v112 + 5;
  *v112 = 2;
  v13[1] = v11;
  *((_QWORD *)v13 + 1) = v13 + 5;
  v13[4] = 0;
  if ((a4 & 0xFF00000000) != 0)
  {
    v16 = &v15[a4];
    if (a4 < 0x40)
    {
      v17 = (unint64_t)(v13 + 5);
    }
    else
    {
      v17 = (unint64_t)&v15[a4 & 0xFFFFFFC0];
      v18 = 0uLL;
      v19 = (char *)(v13 + 5);
      do
      {
        v113.val[0] = *a3;
        v20 = a3[1];
        v115.val[0] = a3[2];
        v21 = a3[3];
        a3 += 4;
        v22 = v21;
        v115.val[1] = 0uLL;
        v117.val[0] = v20;
        v113.val[1] = 0uLL;
        v23 = v19;
        vst2q_s8(v23, v113);
        v23 += 32;
        v117.val[1] = 0uLL;
        vst2q_s8(v23, v117);
        v24 = v19 + 64;
        vst2q_s8(v24, v115);
        v25 = v19 + 96;
        vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
        v19 += 128;
      }
      while (v19 != (char *)v17);
    }
    if ((_WORD *)v17 != v16)
    {
      v30 = (unint64_t)v13 + 2 * a4 - v17 + 18;
      if (v30 < 0xE
        || (v17 < (unint64_t)a3->u64 + (v30 >> 1) + 1
          ? (v31 = (unint64_t)a3 >= (v30 & 0xFFFFFFFFFFFFFFFELL) + v17 + 2)
          : (v31 = 1),
            !v31))
      {
        v34 = (_WORD *)v17;
        v35 = a3;
        goto LABEL_38;
      }
      v32 = (v30 >> 1) + 1;
      if (v30 >= 0x3E)
      {
        v33 = v32 & 0xFFFFFFFFFFFFFFE0;
        v55 = (uint8x8_t *)&a3[1];
        v56 = (uint16x8_t *)(v17 + 32);
        v57 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v58 = *(uint8x16_t *)v55[-2].i8;
          v59 = vmovl_u8(*v55);
          v60 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
          v56[-2] = vmovl_u8(*(uint8x8_t *)v58.i8);
          v56[-1] = vmovl_high_u8(v58);
          *v56 = v59;
          v56[1] = v60;
          v56 += 4;
          v55 += 4;
          v57 -= 32;
        }
        while (v57);
        if (v32 == v33)
          goto LABEL_82;
        if ((v32 & 0x18) == 0)
        {
          v35 = (int8x16_t *)((char *)a3 + v33);
          v34 = (_WORD *)(v17 + 2 * v33);
          do
          {
LABEL_38:
            v36 = v35->u8[0];
            v35 = (int8x16_t *)((char *)v35 + 1);
            *v34++ = v36;
          }
          while (v34 != v16);
          goto LABEL_82;
        }
      }
      else
      {
        v33 = 0;
      }
      v34 = (_WORD *)(v17 + 2 * (v32 & 0xFFFFFFFFFFFFFFF8));
      v35 = (int8x16_t *)((char *)a3 + (v32 & 0xFFFFFFFFFFFFFFF8));
      v61 = (uint8x8_t *)&a3->i8[v33];
      v62 = (uint16x8_t *)(v17 + 2 * v33);
      v63 = v33 - (v32 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v64 = *v61++;
        *v62++ = vmovl_u8(v64);
        v63 += 8;
      }
      while (v63);
      if (v32 != (v32 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_38;
    }
  }
  else if ((_DWORD)a4)
  {
    if ((_DWORD)a4 == 1)
      *v15 = a3->i16[0];
    else
      memcpy(v13 + 5, a3, 2 * a4);
  }
LABEL_82:
  result = (unint64_t)&v15[a4];
  if ((a6 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)a6)
      goto LABEL_13;
    if ((_DWORD)a6 == 1)
    {
      *(_WORD *)result = a5->i16[0];
      goto LABEL_13;
    }
    v51 = 2 * a6;
    goto LABEL_98;
  }
  v65 = (_WORD *)(result + 2 * a6);
  if (a6 >= 0x40)
  {
    v66 = result + 2 * (a6 & 0xFFFFFFC0);
    v67 = 0uLL;
    do
    {
      v114.val[0] = *a5;
      v68 = a5[1];
      v116.val[0] = a5[2];
      v69 = a5[3];
      a5 += 4;
      v70 = v69;
      v116.val[1] = 0uLL;
      v118.val[0] = v68;
      v114.val[1] = 0uLL;
      v71 = (char *)result;
      vst2q_s8(v71, v114);
      v71 += 32;
      v118.val[1] = 0uLL;
      vst2q_s8(v71, v118);
      v72 = (char *)(result + 64);
      vst2q_s8(v72, v116);
      v73 = (char *)(result + 96);
      vst2q_s8(v73, *(int8x16x2_t *)(&v67 - 1));
      result += 128;
    }
    while (result != v66);
    result = v66;
  }
  if ((_WORD *)result != v65)
  {
    v74 = (unint64_t)v13 + 2 * a4 + 2 * (unint64_t)a6 - result + 18;
    if (v74 < 0xE
      || result < (unint64_t)a5->u64 + (v74 >> 1) + 1
      && (unint64_t)a5 < (v74 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
    {
      v75 = (_WORD *)result;
      v76 = a5;
      goto LABEL_92;
    }
    v78 = (v74 >> 1) + 1;
    if (v74 >= 0x3E)
    {
      v79 = v78 & 0xFFFFFFFFFFFFFFE0;
      v80 = (uint8x8_t *)&a5[1];
      v81 = (uint16x8_t *)(result + 32);
      v82 = v78 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v83 = *(uint8x16_t *)v80[-2].i8;
        v84 = vmovl_u8(*v80);
        v85 = vmovl_high_u8(*(uint8x16_t *)v80->i8);
        v81[-2] = vmovl_u8(*(uint8x8_t *)v83.i8);
        v81[-1] = vmovl_high_u8(v83);
        *v81 = v84;
        v81[1] = v85;
        v81 += 4;
        v80 += 4;
        v82 -= 32;
      }
      while (v82);
      if (v78 == v79)
        goto LABEL_13;
      if ((v78 & 0x18) == 0)
      {
        v76 = (int8x16_t *)((char *)a5 + v79);
        v75 = (_WORD *)(result + 2 * v79);
        goto LABEL_92;
      }
    }
    else
    {
      v79 = 0;
    }
    v75 = (_WORD *)(result + 2 * (v78 & 0xFFFFFFFFFFFFFFF8));
    v76 = (int8x16_t *)((char *)a5 + (v78 & 0xFFFFFFFFFFFFFFF8));
    v86 = (uint8x8_t *)&a5->i8[v79];
    v87 = (uint16x8_t *)(result + 2 * v79);
    v88 = v79 - (v78 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v89 = *v86++;
      *v87++ = vmovl_u8(v89);
      v88 += 8;
    }
    while (v88);
    if (v78 == (v78 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
    do
    {
LABEL_92:
      v77 = v76->u8[0];
      v76 = (int8x16_t *)((char *)v76 + 1);
      *v75++ = v77;
    }
    while (v75 != v65);
  }
LABEL_13:
  *a7 = v13;
  return result;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int8x16_t *a6@<X5>, uint64_t a7@<X6>, int **a8@<X8>)
{
  int v13;
  int *v15;
  _BYTE *v16;
  _WORD *v17;
  _WORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  _WORD *v36;
  int8x16_t *v37;
  __int16 v38;
  char *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  _BYTE *v43;
  int8x16_t *v44;
  char v45;
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  unsigned __int128 v49;
  char *v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  size_t v54;
  _BYTE *v55;
  int8x16_t *v56;
  char v57;
  uint8x8_t *v58;
  uint16x8_t *v59;
  unint64_t v60;
  uint8x16_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint8x8_t *v64;
  uint16x8_t *v65;
  unint64_t v66;
  uint8x8_t v67;
  _WORD *v68;
  _WORD *v69;
  unint64_t v70;
  __int128 v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  _WORD *v79;
  int8x16_t *v80;
  __int16 v81;
  uint64_t v82;
  unint64_t v83;
  uint8x8_t *v84;
  uint16x8_t *v85;
  unint64_t v86;
  uint8x16_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint8x8_t *v90;
  uint16x8_t *v91;
  unint64_t v92;
  uint8x8_t v93;
  int8x16_t *v94;
  int8x16_t *v95;
  unint64_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int16x8_t *v101;
  int8x8_t *v102;
  unint64_t v103;
  int16x8_t v104;
  int8x16_t *v105;
  int8x16_t *v106;
  unint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t *v112;
  int8x8_t *v113;
  unint64_t v114;
  int16x8_t v115;
  _DWORD *v116;
  int8x16x2_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v116);
        v15 = v116;
        if (!v116)
          goto LABEL_13;
        v16 = v116 + 5;
        *v116 = 2;
        v15[1] = v13;
        *((_QWORD *)v15 + 1) = v15 + 5;
        v15[4] = 4;
        if ((a4 & 0xFF00000000) != 0)
        {
          if ((_DWORD)a4)
          {
            if ((_DWORD)a4 == 1)
              *v16 = a3->i8[0];
            else
              memcpy(v15 + 5, a3, a4);
          }
LABEL_53:
          v46 = &v16[a4];
          *v46 = a5;
          result = (unint64_t)(v46 + 1);
          if ((a7 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a7)
            {
              if ((_DWORD)a7 == 1)
              {
                *(_BYTE *)result = a6->i8[0];
                goto LABEL_13;
              }
              v54 = a7;
LABEL_98:
              result = (unint64_t)memcpy((void *)result, a6, v54);
              goto LABEL_13;
            }
            goto LABEL_13;
          }
          v47 = (_BYTE *)(result + a7);
          if (a7 >= 0x10)
          {
            v48 = result + (a7 & 0xFFFFFFF0);
            do
            {
              v49 = (unsigned __int128)vld2q_s8(a6->i8);
              a6 += 2;
              *(_OWORD *)result = v49;
              result += 16;
            }
            while (result != v48);
            result = v48;
          }
          if ((_BYTE *)result == v47)
            goto LABEL_13;
          v50 = (char *)v15 + a4 + a7;
          v51 = (unint64_t)&v50[-result + 21];
          if (v51 < 8
            || (result < (unint64_t)&a6[2].u64[1] + 2 * (_QWORD)v50 + -2 * result + 2
              ? (v52 = a6 >= (int8x16_t *)((char *)v15 + a7 + a4 + 21))
              : (v52 = 1),
                !v52))
          {
            v55 = (_BYTE *)result;
            v56 = a6;
            goto LABEL_72;
          }
          if (v51 >= 0x20)
          {
            v53 = v51 & 0xFFFFFFFFFFFFFFE0;
            v105 = a6 + 2;
            v106 = (int8x16_t *)(result + 16);
            v107 = v51 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v109 = v105[-2];
              v108 = v105[-1];
              v111 = *v105;
              v110 = v105[1];
              v105 += 4;
              v106[-1] = vuzp1q_s8(v109, v108);
              *v106 = vuzp1q_s8(v111, v110);
              v106 += 2;
              v107 -= 32;
            }
            while (v107);
            if (v51 == v53)
              goto LABEL_13;
            if ((v51 & 0x18) == 0)
            {
              v56 = (int8x16_t *)((char *)a6 + 2 * v53);
              v55 = (_BYTE *)(result + v53);
              goto LABEL_72;
            }
          }
          else
          {
            v53 = 0;
          }
          v55 = (_BYTE *)(result + (v51 & 0xFFFFFFFFFFFFFFF8));
          v56 = (int8x16_t *)((char *)a6 + 2 * (v51 & 0xFFFFFFFFFFFFFFF8));
          v112 = (int16x8_t *)((char *)a6 + 2 * v53);
          v113 = (int8x8_t *)(result + v53);
          v114 = v53 - (v51 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v115 = *v112++;
            *v113++ = vmovn_s16(v115);
            v114 += 8;
          }
          while (v114);
          if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_13;
          do
          {
LABEL_72:
            v57 = v56->i8[0];
            v56 = (int8x16_t *)((char *)v56 + 2);
            *v55++ = v57;
          }
          while (v55 != v47);
          goto LABEL_13;
        }
        v28 = &v16[a4];
        if (a4 < 0x10)
        {
          v29 = (unint64_t)(v15 + 5);
        }
        else
        {
          v29 = (unint64_t)&v16[a4 & 0xFFFFFFF0];
          v30 = (unsigned __int128 *)(v15 + 5);
          do
          {
            v31 = (unsigned __int128)vld2q_s8(a3->i8);
            a3 += 2;
            *v30++ = v31;
          }
          while (v30 != (unsigned __int128 *)v29);
        }
        if ((_BYTE *)v29 == v28)
          goto LABEL_53;
        v39 = (char *)v15 + a4;
        v40 = (unint64_t)&v39[-v29 + 20];
        if (v40 < 8
          || (v29 < (unint64_t)&a3[2].u64[1] + 2 * (_QWORD)v39 + -2 * v29
            ? (v41 = a3 >= (int8x16_t *)(v39 + 20))
            : (v41 = 1),
              !v41))
        {
          v43 = (_BYTE *)v29;
          v44 = a3;
          goto LABEL_52;
        }
        if (v40 >= 0x20)
        {
          v42 = v40 & 0xFFFFFFFFFFFFFFE0;
          v94 = a3 + 2;
          v95 = (int8x16_t *)(v29 + 16);
          v96 = v40 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v98 = v94[-2];
            v97 = v94[-1];
            v100 = *v94;
            v99 = v94[1];
            v94 += 4;
            v95[-1] = vuzp1q_s8(v98, v97);
            *v95 = vuzp1q_s8(v100, v99);
            v95 += 2;
            v96 -= 32;
          }
          while (v96);
          if (v40 == v42)
            goto LABEL_53;
          if ((v40 & 0x18) == 0)
          {
            v44 = (int8x16_t *)((char *)a3 + 2 * v42);
            v43 = (_BYTE *)(v29 + v42);
            goto LABEL_52;
          }
        }
        else
        {
          v42 = 0;
        }
        v43 = (_BYTE *)(v29 + (v40 & 0xFFFFFFFFFFFFFFF8));
        v44 = (int8x16_t *)((char *)a3 + 2 * (v40 & 0xFFFFFFFFFFFFFFF8));
        v101 = (int16x8_t *)((char *)a3 + 2 * v42);
        v102 = (int8x8_t *)(v29 + v42);
        v103 = v42 - (v40 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v104 = *v101++;
          *v102++ = vmovn_s16(v104);
          v103 += 8;
        }
        while (v103);
        if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_53;
        do
        {
LABEL_52:
          v45 = v44->i8[0];
          v44 = (int8x16_t *)((char *)v44 + 2);
          *v43++ = v45;
        }
        while (v43 != v28);
        goto LABEL_53;
      }
LABEL_11:
      v15 = 0;
      goto LABEL_13;
    }
LABEL_12:
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_13;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if (result > 0x7FFFFFEF)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v116);
  v15 = v116;
  if (!v116)
    goto LABEL_13;
  v17 = v116 + 5;
  *v116 = 2;
  v15[1] = v13;
  *((_QWORD *)v15 + 1) = v15 + 5;
  v15[4] = 0;
  if ((a4 & 0xFF00000000) != 0)
  {
    v18 = &v17[a4];
    if (a4 < 0x40)
    {
      v19 = (unint64_t)(v15 + 5);
    }
    else
    {
      v19 = (unint64_t)&v17[a4 & 0xFFFFFFC0];
      v20 = 0uLL;
      v21 = (char *)(v15 + 5);
      do
      {
        v117.val[0] = *a3;
        v22 = a3[1];
        v119.val[0] = a3[2];
        v23 = a3[3];
        a3 += 4;
        v24 = v23;
        v119.val[1] = 0uLL;
        v121.val[0] = v22;
        v117.val[1] = 0uLL;
        v25 = v21;
        vst2q_s8(v25, v117);
        v25 += 32;
        v121.val[1] = 0uLL;
        vst2q_s8(v25, v121);
        v26 = v21 + 64;
        vst2q_s8(v26, v119);
        v27 = v21 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
        v21 += 128;
      }
      while (v21 != (char *)v19);
    }
    if ((_WORD *)v19 != v18)
    {
      v32 = (unint64_t)v15 + 2 * a4 - v19 + 18;
      if (v32 < 0xE
        || (v19 < (unint64_t)a3->u64 + (v32 >> 1) + 1
          ? (v33 = (unint64_t)a3 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v19 + 2)
          : (v33 = 1),
            !v33))
      {
        v36 = (_WORD *)v19;
        v37 = a3;
        goto LABEL_38;
      }
      v34 = (v32 >> 1) + 1;
      if (v32 >= 0x3E)
      {
        v35 = v34 & 0xFFFFFFFFFFFFFFE0;
        v58 = (uint8x8_t *)&a3[1];
        v59 = (uint16x8_t *)(v19 + 32);
        v60 = v34 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v61 = *(uint8x16_t *)v58[-2].i8;
          v62 = vmovl_u8(*v58);
          v63 = vmovl_high_u8(*(uint8x16_t *)v58->i8);
          v59[-2] = vmovl_u8(*(uint8x8_t *)v61.i8);
          v59[-1] = vmovl_high_u8(v61);
          *v59 = v62;
          v59[1] = v63;
          v59 += 4;
          v58 += 4;
          v60 -= 32;
        }
        while (v60);
        if (v34 == v35)
          goto LABEL_82;
        if ((v34 & 0x18) == 0)
        {
          v37 = (int8x16_t *)((char *)a3 + v35);
          v36 = (_WORD *)(v19 + 2 * v35);
          do
          {
LABEL_38:
            v38 = v37->u8[0];
            v37 = (int8x16_t *)((char *)v37 + 1);
            *v36++ = v38;
          }
          while (v36 != v18);
          goto LABEL_82;
        }
      }
      else
      {
        v35 = 0;
      }
      v36 = (_WORD *)(v19 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
      v37 = (int8x16_t *)((char *)a3 + (v34 & 0xFFFFFFFFFFFFFFF8));
      v64 = (uint8x8_t *)&a3->i8[v35];
      v65 = (uint16x8_t *)(v19 + 2 * v35);
      v66 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v67 = *v64++;
        *v65++ = vmovl_u8(v67);
        v66 += 8;
      }
      while (v66);
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_38;
    }
  }
  else if ((_DWORD)a4)
  {
    if ((_DWORD)a4 == 1)
      *v17 = a3->i16[0];
    else
      memcpy(v15 + 5, a3, 2 * a4);
  }
LABEL_82:
  v68 = &v17[a4];
  *v68 = a5;
  result = (unint64_t)(v68 + 1);
  if ((a7 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)a7)
      goto LABEL_13;
    if ((_DWORD)a7 == 1)
    {
      *(_WORD *)result = a6->i16[0];
      goto LABEL_13;
    }
    v54 = 2 * a7;
    goto LABEL_98;
  }
  v69 = (_WORD *)(result + 2 * a7);
  if (a7 >= 0x40)
  {
    v70 = result + 2 * (a7 & 0xFFFFFFC0);
    v71 = 0uLL;
    do
    {
      v118.val[0] = *a6;
      v72 = a6[1];
      v120.val[0] = a6[2];
      v73 = a6[3];
      a6 += 4;
      v74 = v73;
      v120.val[1] = 0uLL;
      v122.val[0] = v72;
      v118.val[1] = 0uLL;
      v75 = (char *)result;
      vst2q_s8(v75, v118);
      v75 += 32;
      v122.val[1] = 0uLL;
      vst2q_s8(v75, v122);
      v76 = (char *)(result + 64);
      vst2q_s8(v76, v120);
      v77 = (char *)(result + 96);
      vst2q_s8(v77, *(int8x16x2_t *)(&v71 - 1));
      result += 128;
    }
    while (result != v70);
    result = v70;
  }
  if ((_WORD *)result != v69)
  {
    v78 = (unint64_t)v15 + 2 * a4 + 2 * (unint64_t)a7 - result + 20;
    if (v78 < 0xE
      || result < (unint64_t)a6->u64 + (v78 >> 1) + 1
      && (unint64_t)a6 < (v78 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
    {
      v79 = (_WORD *)result;
      v80 = a6;
      goto LABEL_92;
    }
    v82 = (v78 >> 1) + 1;
    if (v78 >= 0x3E)
    {
      v83 = v82 & 0xFFFFFFFFFFFFFFE0;
      v84 = (uint8x8_t *)&a6[1];
      v85 = (uint16x8_t *)(result + 32);
      v86 = v82 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v87 = *(uint8x16_t *)v84[-2].i8;
        v88 = vmovl_u8(*v84);
        v89 = vmovl_high_u8(*(uint8x16_t *)v84->i8);
        v85[-2] = vmovl_u8(*(uint8x8_t *)v87.i8);
        v85[-1] = vmovl_high_u8(v87);
        *v85 = v88;
        v85[1] = v89;
        v85 += 4;
        v84 += 4;
        v86 -= 32;
      }
      while (v86);
      if (v82 == v83)
        goto LABEL_13;
      if ((v82 & 0x18) == 0)
      {
        v80 = (int8x16_t *)((char *)a6 + v83);
        v79 = (_WORD *)(result + 2 * v83);
        goto LABEL_92;
      }
    }
    else
    {
      v83 = 0;
    }
    v79 = (_WORD *)(result + 2 * (v82 & 0xFFFFFFFFFFFFFFF8));
    v80 = (int8x16_t *)((char *)a6 + (v82 & 0xFFFFFFFFFFFFFFF8));
    v90 = (uint8x8_t *)&a6->i8[v83];
    v91 = (uint16x8_t *)(result + 2 * v83);
    v92 = v83 - (v82 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v93 = *v90++;
      *v91++ = vmovl_u8(v93);
      v92 += 8;
    }
    while (v92);
    if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
    do
    {
LABEL_92:
      v81 = v80->u8[0];
      v80 = (int8x16_t *)((char *)v80 + 1);
      *v79++ = v81;
    }
    while (v79 != v69);
  }
LABEL_13:
  *a8 = v15;
  return result;
}

__int16 *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *result;
  __int16 *v17;
  int8x16_t *v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  __int16 *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 *v37;
  unsigned __int128 v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  __int16 *v45;
  int8x16_t *v46;
  __int16 v47;
  size_t v48;
  __int16 *v49;
  int8x16_t *v50;
  char v51;
  uint8x8_t *v52;
  uint16x8_t *v53;
  unint64_t v54;
  uint8x16_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x8_t *v58;
  uint16x8_t *v59;
  unint64_t v60;
  uint8x8_t v61;
  int8x16_t *v62;
  int8x16_t *v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int16x8_t *v69;
  int8x8_t *v70;
  unint64_t v71;
  int16x8_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a3 + 8);
  v32 = __CFADD__(v11, 1);
  v12 = v11 + 1;
  if (v32)
    v12 = -1;
  v32 = __CFADD__(v10, v12);
  v13 = v10 + v12;
  if (v32)
    v14 = 0xFFFFFFFFLL;
  else
    v14 = v13;
  v15 = *(_QWORD *)(a1 + 8);
  if ((v15 || (v15 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0 || !*(_BYTE *)(a3 + 12))
  {
    result = (__int16 *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
    if (!result)
      return result;
    v20 = result;
    v18 = *(int8x16_t **)a3;
    v21 = *(_QWORD *)(a3 + 8);
    *result++ = (char)*a2;
    if ((v21 & 0xFF00000000) == 0)
    {
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
        {
          *result = v18->i16[0];
          return result;
        }
        v48 = 2 * v21;
        return (__int16 *)memcpy(result, v18, v48);
      }
      return result;
    }
    v22 = &result[v21];
    if (v21 >= 0x40)
    {
      v23 = &result[v21 & 0xFFFFFFC0];
      v24 = 0uLL;
      do
      {
        v73.val[0] = *v18;
        v25 = v18[1];
        v74.val[0] = v18[2];
        v26 = v18[3];
        v18 += 4;
        v27 = v26;
        v74.val[1] = 0uLL;
        v75.val[0] = v25;
        v73.val[1] = 0uLL;
        v28 = (char *)result;
        vst2q_s8(v28, v73);
        v28 += 32;
        v75.val[1] = 0uLL;
        vst2q_s8(v28, v75);
        v29 = (char *)(result + 32);
        vst2q_s8(v29, v74);
        v30 = (char *)(result + 48);
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        result += 64;
      }
      while (result != v23);
      result = v23;
    }
    if (result == v22)
      return result;
    v31 = (char *)&v20[v21] - (char *)result;
    if (v31 < 0xE
      || (result < (__int16 *)((char *)v18->i16 + (v31 >> 1) + 1)
        ? (v32 = v18 >= (int8x16_t *)((char *)result + (v31 & 0xFFFFFFFFFFFFFFFELL) + 2))
        : (v32 = 1),
          !v32))
    {
      v45 = result;
      v46 = v18;
      goto LABEL_49;
    }
    v33 = (v31 >> 1) + 1;
    if (v31 >= 0x3E)
    {
      v34 = v33 & 0xFFFFFFFFFFFFFFE0;
      v52 = (uint8x8_t *)&v18[1];
      v53 = (uint16x8_t *)(result + 16);
      v54 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v55 = *(uint8x16_t *)v52[-2].i8;
        v56 = vmovl_u8(*v52);
        v57 = vmovl_high_u8(*(uint8x16_t *)v52->i8);
        v53[-2] = vmovl_u8(*(uint8x8_t *)v55.i8);
        v53[-1] = vmovl_high_u8(v55);
        *v53 = v56;
        v53[1] = v57;
        v53 += 4;
        v52 += 4;
        v54 -= 32;
      }
      while (v54);
      if (v33 == v34)
        return result;
      if ((v33 & 0x18) == 0)
      {
        v46 = (int8x16_t *)((char *)v18 + v34);
        v45 = &result[v34];
        goto LABEL_49;
      }
    }
    else
    {
      v34 = 0;
    }
    v45 = &result[v33 & 0xFFFFFFFFFFFFFFF8];
    v46 = (int8x16_t *)((char *)v18 + (v33 & 0xFFFFFFFFFFFFFFF8));
    v58 = (uint8x8_t *)&v18->i8[v34];
    v59 = (uint16x8_t *)&result[v34];
    v60 = v34 - (v33 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v61 = *v58++;
      *v59++ = vmovl_u8(v61);
      v60 += 8;
    }
    while (v60);
    if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_49:
      v47 = v46->u8[0];
      v46 = (int8x16_t *)((char *)v46 + 1);
      *v45++ = v47;
    }
    while (v45 != v22);
    return result;
  }
  result = (__int16 *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v14, a3, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v17 = result;
  v18 = *(int8x16_t **)a3;
  v19 = *(_QWORD *)(a3 + 8);
  *(_BYTE *)result = *a2;
  result = (__int16 *)((char *)result + 1);
  if ((v19 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v19)
      return result;
    if ((_DWORD)v19 == 1)
    {
      *(_BYTE *)result = v18->i8[0];
      return result;
    }
    v48 = v19;
    return (__int16 *)memcpy(result, v18, v48);
  }
  v35 = v19;
  v36 = (__int16 *)((char *)result + v19);
  if (v19 >= 0x10)
  {
    v37 = (__int16 *)((char *)result + (v19 & 0xFFFFFFF0));
    do
    {
      v38 = (unsigned __int128)vld2q_s8(v18->i8);
      v18 += 2;
      *(_OWORD *)result = v38;
      result += 8;
    }
    while (result != v37);
    result = v37;
  }
  if (result != v36)
  {
    v39 = (char *)v17 + v35;
    v40 = v39 - (char *)result;
    v41 = v39 - (char *)result + 1;
    if (v41 < 8
      || ((v42 = (unint64_t)(v39 + 1), result < &v18->i16[v40 + 1])
        ? (v43 = (unint64_t)v18 >= v42)
        : (v43 = 1),
          !v43))
    {
      v49 = result;
      v50 = v18;
      goto LABEL_54;
    }
    if (v41 >= 0x20)
    {
      v44 = v41 & 0xFFFFFFFFFFFFFFE0;
      v62 = v18 + 2;
      v63 = (int8x16_t *)(result + 8);
      v64 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v66 = v62[-2];
        v65 = v62[-1];
        v68 = *v62;
        v67 = v62[1];
        v62 += 4;
        v63[-1] = vuzp1q_s8(v66, v65);
        *v63 = vuzp1q_s8(v68, v67);
        v63 += 2;
        v64 -= 32;
      }
      while (v64);
      if (v41 == v44)
        return result;
      if ((v41 & 0x18) == 0)
      {
        v50 = (int8x16_t *)((char *)v18 + 2 * v44);
        v49 = (__int16 *)((char *)result + v44);
        do
        {
LABEL_54:
          v51 = v50->i8[0];
          v50 = (int8x16_t *)((char *)v50 + 2);
          *(_BYTE *)v49 = v51;
          v49 = (__int16 *)((char *)v49 + 1);
        }
        while (v49 != v36);
        return result;
      }
    }
    else
    {
      v44 = 0;
    }
    v49 = (__int16 *)((char *)result + (v41 & 0xFFFFFFFFFFFFFFF8));
    v50 = (int8x16_t *)((char *)v18 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
    v69 = (int16x8_t *)((char *)v18 + 2 * v44);
    v70 = (int8x8_t *)((char *)result + v44);
    v71 = v44 - (v41 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v72 = *v69++;
      *v70++ = vmovn_s16(v72);
      v71 += 8;
    }
    while (v71);
    if (v41 != (v41 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_54;
  }
  return result;
}

uint64_t WTF::double_conversion::FastFixedDtoa(int a1, _BYTE *a2, uint64_t a3, int *a4, int *a5, double a6)
{
  unint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int64_t v36;
  char v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;

  if ((*(_QWORD *)&a6 & 0x7FF0000000000000) != 0)
    v7 = *(_QWORD *)&a6 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v7 = *(_QWORD *)&a6 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&a6 & 0x7FF0000000000000) != 0)
    v8 = ((*(_QWORD *)&a6 >> 52) & 0x7FF) - 1075;
  else
    v8 = -1074;
  v9 = a1 < 21 && v8 < 21;
  v10 = v9;
  if ((_DWORD)v10 != 1)
    return v10;
  *a4 = 0;
  if (v8 < 12)
  {
    if ((v8 & 0x80000000) == 0)
    {
      WTF::double_conversion::FillDigits64(v7 << v8, (uint64_t)a2, a3, a4);
      *a5 = *a4;
      goto LABEL_48;
    }
    if (v8 < 0xFFFFFFCC)
    {
      if (v8 <= 0xFFFFFF7F)
      {
        *a2 = 0;
        *a4 = 0;
        *a5 = -a1;
        goto LABEL_48;
      }
      *a5 = 0;
    }
    else
    {
      v31 = v7 >> -(char)v8;
      v32 = v7 - (v31 << -(char)v8);
      if (HIDWORD(v31))
      {
        WTF::double_conversion::FillDigits64(v7 >> -(char)v8, (uint64_t)a2, a3, a4);
        v33 = *a4;
      }
      else
      {
        if ((_DWORD)v31)
        {
          v34 = 0;
          do
          {
            a2[*a4 + v34++] = (v31 % 0xA) | 0x30;
            v9 = v31 > 9;
            LODWORD(v31) = v31 / 0xA;
          }
          while (v9);
          LODWORD(v31) = *a4;
        }
        else
        {
          LODWORD(v34) = 0;
        }
        v33 = v34 + v31;
        v35 = v34 + v31 - 1;
        if ((int)v31 < v35)
        {
          v36 = v35;
          v31 = (int)v31;
          do
          {
            v37 = a2[v31];
            a2[v31] = a2[v36];
            a2[v36] = v37;
            ++v31;
            --v36;
          }
          while ((uint64_t)v31 < v36);
          v33 = *a4 + v34;
        }
        *a4 = v33;
      }
      *a5 = v33;
      v7 = v32;
    }
    WTF::double_conversion::FillFractionals(v7, v8, a1, a2, a3, (unsigned int *)a4, a5);
  }
  else
  {
    v14 = 0xB1A2BC2EC5 << (17 - v8);
    v15 = v7 / v14;
    v16 = (v7 % v14) << v8;
    v17 = v7 << (v8 - 17);
    v18 = (v17 % 0xB1A2BC2EC5) << 17;
    if (v8 >= 0x12)
      v15 = v17 / 0xB1A2BC2EC5;
    else
      v18 = v16;
    if ((_DWORD)v15)
    {
      v19 = 0;
      do
      {
        a2[*a4 + v19++] = (v15 % 0xA) | 0x30;
        v9 = v15 > 9;
        LODWORD(v15) = v15 / 0xA;
      }
      while (v9);
      LODWORD(v20) = *a4;
      v21 = v19 + *a4;
      if (*a4 < v21 - 1)
      {
        v23 = v21 - 1;
        v20 = (int)v20;
        do
        {
          v24 = a2[v20];
          a2[v20] = a2[v23];
          a2[v23] = v24;
          ++v20;
          --v23;
        }
        while (v20 < v23);
        v21 = *a4 + v19;
      }
    }
    else
    {
      v21 = 0;
    }
    *a4 = v21;
    a2[v21 + 2] = (v18 / 0x5AF3107A4000 % 0xA) | 0x30;
    a2[*a4 + 1] = (v18 / 0x5AF3107A4000 / 0xA % 0xA) | 0x30;
    a2[*a4] = (((42949673 * (v18 / 0x5AF3107A4000)) >> 32)
             - 10 * ((6554 * ((42949673 * (v18 / 0x5AF3107A4000)) >> 32)) >> 16)) | 0x30;
    v25 = v18 / 0x989680 - 10000000 * ((v18 / 0x989680 * (unsigned __int128)0x1AD7F29ABCBuLL) >> 64);
    v26 = *a4;
    *a4 = v26 + 3;
    v27 = (429496730 * v25) >> 32;
    a2[v26 + 9] = (v25 - 10 * v27) | 0x30;
    a2[*a4 + 5] = (v27 - 10 * ((429496730 * (unint64_t)v27) >> 32)) | 0x30;
    a2[*a4 + 4] = (((42949673 * v25) >> 32) - 10 * ((429496730 * ((42949673 * v25) >> 32)) >> 32)) | 0x30;
    a2[*a4 + 3] = (((8589935 * v25) >> 33) - 10 * ((26215 * (((8589935 * v25) >> 32) >> 1)) >> 18)) | 0x30;
    a2[*a4 + 2] = (((1717987 * v25) >> 34) - 10 * ((unsigned __int16)((1717987 * v25) >> 32) / 0x28u)) | 0x30;
    a2[*a4 + 1] = (((21990233 * v25) >> 41) - 10 * ((205 * (((21990233 * v25) >> 32) >> 9)) >> 11)) | 0x30;
    a2[*a4] = (((17592187 * v25) >> 32) >> 12) | 0x30;
    v28 = v18 % 0x989680;
    v29 = *a4;
    *a4 = v29 + 7;
    a2[v29 + 13] = (v28 % 0xA) | 0x30;
    a2[*a4 + 5] = (v28 / 0xA - 10 * ((429496730 * (unint64_t)(v28 / 0xA)) >> 32)) | 0x30;
    a2[*a4 + 4] = (v28 / 0x64 - 10 * ((429496730 * (unint64_t)(v28 / 0x64)) >> 32)) | 0x30;
    a2[*a4 + 3] = ((unsigned __int16)(v28 / 0x3E8) % 0xAu) | 0x30;
    a2[*a4 + 2] = ((unsigned __int16)(v28 / 0x2710) % 0xAu) | 0x30;
    a2[*a4 + 1] = ((v28 / 0x186A0) % 0xAu) | 0x30;
    a2[*a4] = (v28 / 0xF4240) | 0x30;
    v30 = *a4 + 7;
    *a4 = v30;
    *a5 = v30;
  }
LABEL_48:
  v38 = *a4;
  if ((int)v38 < 1)
    goto LABEL_66;
  if (a2[v38 - 1] != 48)
  {
    v39 = *a4;
LABEL_55:
    v41 = 0;
    while (a2[v41] == 48)
    {
      if (v39 == ++v41)
      {
        LODWORD(v41) = v38;
        break;
      }
    }
    if ((_DWORD)v41)
    {
      if ((int)v41 < (int)v38)
      {
        v42 = (int)v41;
        v43 = a2;
        do
          *v43++ = a2[v42++];
        while (v42 < *a4);
        LODWORD(v38) = *a4;
      }
      *a4 = v38 - v41;
      *a5 -= v41;
      a2[*a4] = 0;
      if (*a4)
        return v10;
LABEL_67:
      *a5 = -a1;
      return v10;
    }
LABEL_66:
    a2[(int)v38] = 0;
    if (*a4)
      return v10;
    goto LABEL_67;
  }
  do
  {
    *a4 = v38 - 1;
    v39 = v38 - 1;
    if (v38 <= 1)
    {
      v39 = 0;
      goto LABEL_69;
    }
    v40 = a2[(v38-- - 2)];
  }
  while (v40 == 48);
  LODWORD(v38) = v39;
  if (v39 >= 1)
    goto LABEL_55;
LABEL_69:
  a2[v39] = 0;
  if (!*a4)
    goto LABEL_67;
  return v10;
}

unint64_t WTF::double_conversion::FillDigits64(unint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;

  v4 = result % 0x989680;
  v5 = result / 0x989680 - 10000000 * ((result / 0x989680 * (unsigned __int128)0x1AD7F29ABCBuLL) >> 64);
  v6 = result / 0x5AF3107A4000;
  if (result / 0x5AF3107A4000)
  {
    v7 = 0;
    do
    {
      result = a2 + *a4;
      *(_BYTE *)(result + v7++) = (v6 % 0xA) | 0x30;
      v8 = v6 > 9;
      LODWORD(v6) = v6 / 0xA;
    }
    while (v8);
    LODWORD(v9) = *a4;
    LODWORD(v10) = *a4 + v7 - 1;
    if (*a4 < (int)v10)
    {
      v10 = (int)v10;
      v9 = (int)v9;
      do
      {
        v11 = *(_BYTE *)(a2 + v9);
        *(_BYTE *)(a2 + v9) = *(_BYTE *)(a2 + v10);
        *(_BYTE *)(a2 + v10) = v11;
        ++v9;
        --v10;
      }
      while (v9 < v10);
      LODWORD(v9) = *a4;
    }
    v12 = v9 + v7;
    *a4 = v12;
    *(_BYTE *)(a2 + v12 + 6) = (v5 % 0xA) | 0x30;
    *(_BYTE *)(*a4 + a2 + 5) = (v5 / 0xA - 10 * ((429496730 * (unint64_t)(v5 / 0xA)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 4) = (v5 / 0x64 - 10 * ((429496730 * (unint64_t)(v5 / 0x64)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 3) = (v5 / 0x3E8 - 10 * ((429496730 * (unint64_t)(v5 / 0x3E8)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 2) = (v5 / 0x2710 - 10 * ((429496730 * (unint64_t)(v5 / 0x2710)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 1) = ((v5 / 0x186A0) % 0xAu) | 0x30;
    *(_BYTE *)(a2 + *a4) = ((v5 / 0xF4240) % 0xAu) | 0x30;
    v13 = *a4;
    *a4 += 7;
    v14 = v13 + 13;
LABEL_17:
    *(_BYTE *)(a2 + v14) = (v4 % 0xA) | 0x30;
    *(_BYTE *)(*a4 + a2 + 5) = (v4 / 0xA - 10 * ((429496730 * (unint64_t)(v4 / 0xA)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 4) = (v4 / 0x64 - 10 * ((429496730 * (unint64_t)(v4 / 0x64)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 3) = (v4 / 0x3E8 - 10 * ((429496730 * (unint64_t)(v4 / 0x3E8)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 2) = (v4 / 0x2710 - 10 * ((429496730 * (unint64_t)(v4 / 0x2710)) >> 32)) | 0x30;
    *(_BYTE *)(*a4 + a2 + 1) = ((v4 / 0x186A0) % 0xAu) | 0x30;
    *(_BYTE *)(a2 + *a4) = ((v4 / 0xF4240) % 0xAu) | 0x30;
    LODWORD(v20) = 7;
LABEL_18:
    v21 = *a4 + v20;
    goto LABEL_19;
  }
  if (v5)
  {
    v15 = 0;
    do
    {
      *(_BYTE *)(a2 + *a4 + v15++) = (v5 % 0xA) | 0x30;
      v8 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v8);
    LODWORD(v16) = *a4;
    LODWORD(v17) = *a4 + v15 - 1;
    if (*a4 < (int)v17)
    {
      v17 = (int)v17;
      v16 = (int)v16;
      do
      {
        v18 = *(_BYTE *)(a2 + v16);
        *(_BYTE *)(a2 + v16) = *(_BYTE *)(a2 + v17);
        *(_BYTE *)(a2 + v17) = v18;
        ++v16;
        --v17;
      }
      while (v16 < v17);
      LODWORD(v16) = *a4;
    }
    v19 = v16 + v15;
    *a4 = v19;
    v14 = v19 + 6;
    goto LABEL_17;
  }
  if (!v4)
  {
    LODWORD(v20) = 0;
    v22 = *a4;
    v21 = v22;
    v23 = v22 - 1;
    if (!__OFSUB__((_DWORD)v22, v22 - 1))
      goto LABEL_19;
    goto LABEL_27;
  }
  v20 = 0;
  do
  {
    *(_BYTE *)(a2 + *a4 + v20++) = (v4 % 0xA) | 0x30;
    v8 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v8);
  v22 = *a4;
  v21 = v22 + v20;
  v23 = v22 + v20 - 1;
  if ((int)v22 < v23)
  {
LABEL_27:
    v24 = v23;
    do
    {
      v25 = *(_BYTE *)(a2 + v22);
      *(_BYTE *)(a2 + v22) = *(_BYTE *)(a2 + v24);
      *(_BYTE *)(a2 + v24) = v25;
      ++v22;
      --v24;
    }
    while (v22 < v24);
    goto LABEL_18;
  }
LABEL_19:
  *a4 = v21;
  return result;
}

unint64_t WTF::double_conversion::FillFractionals(unint64_t result, int a2, int a3, _BYTE *a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 >= -64)
  {
    v7 = -a2;
    if (a3 >= 1)
    {
      while (result)
      {
        LOBYTE(v7) = v7 - 1;
        v8 = (5 * result) >> v7;
        a4[(*a6)++] = v8 + 48;
        result = 5 * result - ((uint64_t)(int)v8 << v7);
        if (!--a3)
          goto LABEL_5;
      }
      return result;
    }
LABEL_5:
    if (!result || ((result >> (v7 - 1)) & 1) == 0)
      return result;
    v9 = (int)*a6;
    if ((_DWORD)v9)
    {
      ++a4[v9 - 1];
      v10 = *a6;
      if ((int)v10 >= 2)
      {
        do
        {
          v11 = v10 - 1;
          v12 = (v10 - 1);
          if (a4[v12] != 58)
            return result;
          a4[v12] = 48;
          ++a4[(v10-- - 2)];
        }
        while ((unint64_t)(v11 + 1) > 2);
      }
LABEL_40:
      if (*a4 == 58)
      {
        *a4 = 49;
        ++*a7;
      }
      return result;
    }
LABEL_43:
    *a4 = 49;
    *a7 = 1;
    *a6 = 1;
    return result;
  }
  v13 = result << a2;
  v14 = result >> -(char)a2;
  if (a2 == -128)
    v14 = 0;
  if (a3 < 1)
  {
    v21 = 128;
  }
  else
  {
    v15 = 0;
    v16 = 128;
    while (v14 | v13)
    {
      v17 = 5 * v13;
      v18 = 5 * HIDWORD(v13) + HIDWORD(v17);
      v19 = v17 | ((unint64_t)v18 << 32);
      v20 = 5 * v14 + HIDWORD(v18);
      v21 = v16 - 1;
      v22 = v19 >> (v16 - 1);
      v23 = (v20 << (v15 - 63)) + v22;
      v24 = v19 - (v22 << (v16 - 1));
      v25 = v20 >> (v16 - 65);
      v26 = v20 - ((uint64_t)(int)v25 << (v16 - 65));
      if (v16 >= 65)
        v13 = v19;
      else
        v13 = v24;
      if (v16 >= 65)
        v14 = v26;
      else
        v14 = 0;
      if (v16 >= 65)
        v27 = v25;
      else
        v27 = v23;
      a4[(*a6)++] = v27 + 48;
      ++v15;
      v16 = v21;
      if (a3 == v15)
        goto LABEL_30;
    }
    v14 = 0;
    v13 = 0;
    v21 = v16;
  }
LABEL_30:
  if (v21 <= 64)
    v28 = -1;
  else
    v28 = -65;
  v29 = v28 + v21;
  if (v21 > 64)
    v13 = v14;
  if (((v13 >> v29) & 1) != 0)
  {
    v30 = (int)*a6;
    if (!(_DWORD)v30)
      goto LABEL_43;
    ++a4[v30 - 1];
    v31 = *a6;
    if ((int)v31 < 2)
      goto LABEL_40;
    while (1)
    {
      v32 = v31 - 1;
      v33 = (v31 - 1);
      if (a4[v33] != 58)
        break;
      a4[v33] = 48;
      ++a4[(v31-- - 2)];
      if ((unint64_t)(v32 + 1) <= 2)
        goto LABEL_40;
    }
  }
  return result;
}

_QWORD *WTF::FunctionDispatcher::FunctionDispatcher(_QWORD *this)
{
  *this = off_1E3571CB0;
  return this;
}

uint64_t Gigacage::tryAlignedMalloc(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (!(_DWORD)result)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] == 1)
    {
      v4 = (a2 + a3 - 1) & -(uint64_t)a2;
      if (a3 < a2)
        v4 = a2;
      if (a2 == 1)
        v4 = a3;
      v5 = (unint64_t)(v4 + 15) >> 4;
      if (v5 == dword_1ECF2C478)
      {
        v6 = dword_1ECF2C470;
        v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v7)
          return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a3, a2, 0);
LABEL_16:
        if (*(_DWORD *)(v7 + 8052) > v6)
        {
          v9 = v7 + 8 * v6 + 8064;
          if (a2 == 1 || 1 << *(_BYTE *)(v7 + 8 * v6 + 8068) >= a2)
          {
            *(_BYTE *)v9 = 1;
            v10 = *(unsigned int *)(v7 + 8 * v6 + 8080);
            if ((_DWORD)v10)
            {
              *(_DWORD *)(v7 + 8 * v6 + 8080) = v10 - *(_DWORD *)(v7 + 8 * v6 + 8084);
              result = *(_QWORD *)(v7 + 8 * v6 + 8072) - v10;
              *(_BYTE *)v9 = 0;
              return result;
            }
            v11 = *(_QWORD *)(v7 + 8 * v6 + 8104);
            v12 = *(_QWORD *)(v7 + 8 * v6 + 8088);
            if (v11)
            {
LABEL_22:
              v13 = __clz(v11);
              *(_QWORD *)(v9 + 40) = v11 & ~(0x8000000000000000 >> v13);
              result = v12 + 16 * v13;
              *(_BYTE *)v9 = 0;
              return result;
            }
            if (*(_BYTE *)(v7 + 8 * v6 + 8069) == 6)
            {
              v14 = *(unsigned int *)(v7 + 8 * v6 + 8096);
              v15 = *(_DWORD *)(v7 + 8 * v6 + 8100);
              if (v14 < v15)
              {
                *(_QWORD *)(v9 + 8 * v14 + 56) = 0;
                v16 = (unint64_t *)(8 * v14 + 8 * v6 + v7 + 8128);
                v17 = v15 - 1 - v14;
                while (v17)
                {
                  v12 += 1024;
                  v19 = *v16++;
                  v18 = v19;
                  LODWORD(v14) = v14 + 1;
                  --v17;
                  if (v19)
                  {
                    v11 = __rbit64(v18);
                    *(_DWORD *)(v9 + 32) = v14;
                    *(_QWORD *)(v9 + 24) = v12;
                    goto LABEL_22;
                  }
                }
                *(_DWORD *)(v9 + 32) = v15;
              }
            }
            *(_BYTE *)v9 = 0;
          }
        }
        return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a3, a2, 0);
      }
      if (off_1ECF2C468)
      {
        if (v5 >= *((unsigned int *)off_1ECF2C468 + 9))
        {
          v6 = 0;
          v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (!v7)
            return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a3, a2, 0);
          goto LABEL_16;
        }
        v8 = *((_QWORD *)off_1ECF2C468 + 1);
        if (v8)
        {
          v6 = *(_DWORD *)(v8 + 4 * v5);
          v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (!v7)
            return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a3, a2, 0);
          goto LABEL_16;
        }
        v6 = 0;
        v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v7)
          goto LABEL_16;
      }
    }
    return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a3, a2, 0);
  }
  __break(0xC471u);
  return result;
}

void Gigacage::alignedFree(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    if (a1
      || qword_1ECF4C038
      && (!byte_1ECF4C022 ? (v8 = disablePrimitiveGigacageRequested == 0) : (v8 = 1),
          v8 ? (v9 = (a2 & 0x3FFFFFFFFLL) + qword_1ECF4C038 == a2) : (v9 = 1),
          !v9))
    {
      __break(0xC471u);
      JUMPOUT(0x197AD97F8);
    }
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v10)
    {
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(a2 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
    {
      goto LABEL_15;
    }
    if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_15:
        v11 = *(unsigned int *)(v10 + 8000);
        if (v11 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v10, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v10 + 8 * v11) = a2 | 0x5000000000000;
          *(_DWORD *)(v10 + 8000) = v11 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v10, a2, 1, a4, a5, a6, a7, a8);
  }
}

uint64_t Gigacage::tryMalloc(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (!(_DWORD)result)
  {
    v2 = (unint64_t)(a2 + 15) >> 4;
    if (v2 == dword_1ECF2C478)
    {
      v3 = dword_1ECF2C470;
      v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v4)
        return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a2, 1, 0);
LABEL_11:
      if (*(_DWORD *)(v4 + 8052) > v3)
      {
        v6 = v4 + 8 * v3;
        v7 = v6 + 8064;
        *(_BYTE *)(v6 + 8064) = 1;
        v8 = *(unsigned int *)(v6 + 8080);
        if ((_DWORD)v8)
        {
          *(_DWORD *)(v7 + 16) = v8 - *(_DWORD *)(v7 + 20);
          result = *(_QWORD *)(v7 + 8) - v8;
          *(_BYTE *)v7 = 0;
          return result;
        }
        v9 = *(_QWORD *)(v7 + 40);
        v10 = *(_QWORD *)(v7 + 24);
        if (v9)
        {
LABEL_15:
          v11 = __clz(v9);
          *(_QWORD *)(v7 + 40) = v9 & ~(0x8000000000000000 >> v11);
          result = v10 + 16 * v11;
          *(_BYTE *)v7 = 0;
          return result;
        }
        if (*(_BYTE *)(v7 + 5) == 6)
        {
          v12 = *(unsigned int *)(v7 + 32);
          v13 = *(_DWORD *)(v7 + 36);
          if (v12 < v13)
          {
            *(_QWORD *)(v7 + 8 * v12 + 56) = 0;
            v14 = (unint64_t *)(8 * v12 + 8 * v3 + v4 + 8128);
            v15 = v13 - 1 - v12;
            while (v15)
            {
              v10 += 1024;
              v17 = *v14++;
              v16 = v17;
              LODWORD(v12) = v12 + 1;
              --v15;
              if (v17)
              {
                v9 = __rbit64(v16);
                *(_DWORD *)(v7 + 32) = v12;
                *(_QWORD *)(v7 + 24) = v10;
                goto LABEL_15;
              }
            }
            *(_DWORD *)(v7 + 32) = v13;
          }
        }
        *(_BYTE *)v7 = 0;
      }
      return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a2, 1, 0);
    }
    if (off_1ECF2C468)
    {
      if (v2 >= *((unsigned int *)off_1ECF2C468 + 9))
      {
        v3 = 0;
        v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v4)
          return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a2, 1, 0);
        goto LABEL_11;
      }
      v5 = *((_QWORD *)off_1ECF2C468 + 1);
      if (v5)
      {
        v3 = *(_DWORD *)(v5 + 4 * v2);
        v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v4)
          return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a2, 1, 0);
        goto LABEL_11;
      }
      v3 = 0;
      v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v4)
        goto LABEL_11;
    }
    return bmalloc_try_allocate_auxiliary_with_alignment_casual(&bmalloc::api::gigacageHeaps, a2, 1, 0);
  }
  __break(0xC471u);
  return result;
}

uint64_t Gigacage::tryZeroedMalloc(uint64_t result, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t auxiliary_impl_casual_case;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  if ((_DWORD)result)
  {
    __break(0xC471u);
    return result;
  }
  v9 = (a2 + 15) >> 4;
  if (v9 == dword_1ECF2C478)
  {
    v10 = dword_1ECF2C470;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v11)
      goto LABEL_27;
  }
  else
  {
    if (!off_1ECF2C468)
      goto LABEL_27;
    if (v9 >= *((unsigned int *)off_1ECF2C468 + 9))
    {
      v10 = 0;
      v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v11)
        goto LABEL_27;
    }
    else
    {
      v12 = *((_QWORD *)off_1ECF2C468 + 1);
      if (v12)
      {
        v10 = *(_DWORD *)(v12 + 4 * v9);
        v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v11)
          goto LABEL_27;
      }
      else
      {
        v10 = 0;
        v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v11)
          goto LABEL_27;
      }
    }
  }
  if (*(_DWORD *)(v11 + 8052) > v10)
  {
    v13 = v11 + 8 * v10;
    v14 = v13 + 8064;
    *(_BYTE *)(v13 + 8064) = 1;
    v15 = *(unsigned int *)(v13 + 8080);
    if ((_DWORD)v15)
    {
      *(_DWORD *)(v14 + 16) = v15 - *(_DWORD *)(v14 + 20);
      auxiliary_impl_casual_case = *(_QWORD *)(v14 + 8) - v15;
      *(_BYTE *)v14 = 0;
      v17 = 1;
      goto LABEL_28;
    }
    v18 = *(_QWORD *)(v14 + 40);
    v19 = *(_QWORD *)(v14 + 24);
    if (v18)
    {
LABEL_15:
      v20 = __clz(v18);
      *(_QWORD *)(v14 + 40) = v18 & ~(0x8000000000000000 >> v20);
      auxiliary_impl_casual_case = v19 + 16 * v20;
      *(_BYTE *)v14 = 0;
      v17 = 1;
      goto LABEL_28;
    }
    if (*(_BYTE *)(v14 + 5) == 6)
    {
      v21 = *(unsigned int *)(v14 + 32);
      v22 = *(_DWORD *)(v14 + 36);
      if (v21 < v22)
      {
        *(_QWORD *)(v14 + 8 * v21 + 56) = 0;
        v23 = (unint64_t *)(8 * v21 + 8 * v10 + v11 + 8128);
        v24 = v22 - 1 - v21;
        while (v24)
        {
          v19 += 1024;
          v26 = *v23++;
          v25 = v26;
          LODWORD(v21) = v21 + 1;
          --v24;
          if (v26)
          {
            v18 = __rbit64(v25);
            *(_DWORD *)(v14 + 32) = v21;
            *(_QWORD *)(v14 + 24) = v19;
            goto LABEL_15;
          }
        }
        *(_DWORD *)(v14 + 32) = v22;
      }
    }
    *(_BYTE *)v14 = 0;
  }
LABEL_27:
  auxiliary_impl_casual_case = (unint64_t)bmalloc_try_allocate_auxiliary_impl_casual_case(a2, a2, a3, a4, a5, a6, a7, a8);
  if ((v17 & 1) == 0)
    return auxiliary_impl_casual_case;
LABEL_28:
  if ((v17 & 0xFFFFFFFF00000000) == 0x100000000)
    return auxiliary_impl_casual_case;
  if (!(a2 >> 24))
    goto LABEL_36;
  v27 = pas_page_malloc_cached_alignment;
  if (!pas_page_malloc_cached_alignment)
  {
    v27 = pas_page_malloc_alignment_slow();
    pas_page_malloc_cached_alignment = v27;
    if (((v27 - 1) & (a2 | auxiliary_impl_casual_case)) == 0)
      goto LABEL_32;
LABEL_36:
    bzero((void *)auxiliary_impl_casual_case, a2);
    return auxiliary_impl_casual_case;
  }
  if (((pas_page_malloc_cached_alignment - 1) & (a2 | auxiliary_impl_casual_case)) != 0)
    goto LABEL_36;
LABEL_32:
  if (!v27)
    pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
  mmap((void *)auxiliary_impl_casual_case, a2, 3, 4114, 889192448, 0);
  return auxiliary_impl_casual_case;
}

void *Gigacage::tryRealloc(int a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  size_t v11;
  void *auxiliary_impl_for_realloc;
  void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  size_t v45;
  unint64_t v46;
  unint64_t v47;
  os_unfair_lock_s *v48;
  os_unfair_lock_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  size_t v62;
  unint64_t StatusReg;
  os_unfair_lock_s *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t allocation_size_with_page;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  int v98;
  unsigned int v99;
  void *v100;
  size_t v101;
  int v102;
  unsigned int v103;
  size_t v104;
  void *v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  void *v113;
  size_t v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  size_t v123;
  void *v124;
  size_t v125;
  int v126;
  unsigned int v127;
  char *v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  size_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  size_t v152;
  int v153;
  unsigned int v154;
  os_unfair_lock_s *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t v165;
  BOOL v166;
  unint64_t v167;
  _BOOL8 v168;
  unint64_t v169;
  unint64_t v170;
  int8x16_t *v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x8_t v181;
  int8x8_t *v182;
  unint64_t v183;
  int8x8_t v184;
  int8x8_t v185;
  uint64_t v186;
  _BYTE *v187;
  char v188;
  int v189;
  unsigned int v190;
  unint64_t v191[3];

  if (a1)
  {
    __break(0xC471u);
    JUMPOUT(0x197ADA858);
  }
  v10 = off_1ECF2C468;
  if (off_1ECF2C468)
  {
    if (a2 >> 43)
      goto LABEL_14;
  }
  else
  {
    v10 = (void *)pas_ensure_heap_slow((uint64_t *)&bmalloc::api::gigacageHeaps, 1, (uint64_t)&bmalloc_heap_config, (uint64_t)&bmalloc_primitive_runtime_config);
    if (a2 >> 43)
      goto LABEL_14;
  }
  if (((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
    goto LABEL_5;
LABEL_14:
  if (a2 >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > a2 >> 24)
  {
    v23 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
    if (v23)
    {
      if (v23 != 2)
      {
        if (v23 == 1)
        {
LABEL_5:
          v11 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFC000) + 4);
          auxiliary_impl_for_realloc = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
          v13 = auxiliary_impl_for_realloc;
          if (!auxiliary_impl_for_realloc)
            return v13;
          if (a3 >= v11)
            v14 = v11;
          else
            v14 = a3;
          memcpy(auxiliary_impl_for_realloc, (const void *)a2, v14);
          v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (v20)
          {
LABEL_10:
            v21 = *(unsigned int *)(v20 + 8000);
            if (v21 >= 0x3E7)
            {
              v69 = a2;
              v70 = 5;
LABEL_79:
              pas_thread_local_cache_append_deallocation_slow(v20, v69, (os_unfair_lock_s *)v70, v15, v16, v17, v18, v19);
            }
            else
            {
              v22 = a2 | 0x5000000000000;
LABEL_12:
              *(_QWORD *)(v20 + 8 * v21) = v22;
              *(_DWORD *)(v20 + 8000) = v21 + 1;
            }
            return v13;
          }
LABEL_146:
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
          return v13;
        }
        return 0;
      }
      v31 = a2 & 0xFFFFFFFFFFFFC000;
      v54 = *(unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFC000);
      if (v54 != 5)
      {
        if (v54 != 1)
          return 0;
        v55 = (a2 >> 8) & 0x3F;
        v56 = *(unsigned int *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8) + 4 * v55 + 20);
        if ((_DWORD)v56)
          v57 = pas_compact_heap_reservation_base + 8 * v56;
        else
          v57 = 0;
        v58 = *(unsigned __int16 *)(v57 + 7) | ((unint64_t)*(unsigned __int8 *)(v57 + 9) << 16);
        if ((_DWORD)v58)
          v59 = pas_compact_heap_reservation_base + 8 * v58;
        else
          v59 = 0;
        v60 = *(_DWORD *)(v59 + 24);
        v61 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
        v13 = v61;
        if (!v61)
          return v13;
        if (a3 >= (v60 & 0x7FFFFFFu))
          v62 = v60 & 0x7FFFFFF;
        else
          v62 = a3;
        memcpy(v61, (const void *)a2, v62);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        if (!*(_QWORD *)(StatusReg + 752))
          goto LABEL_146;
        v64 = *(os_unfair_lock_s **)((a2 & 0xFFFFFFFFFFFFC000) + 8);
        if (v64)
          v49 = pas_segregated_page_switch_lock_slow(a2 & 0xFFFFFFFFFFFFC000, 0, v64);
        else
          v49 = 0;
        v65 = v31 + 4 * ((a2 >> 9) & 0x1F);
        v66 = *(_DWORD *)(v65 + 44) & ~(1 << (a2 >> 4));
        *(_DWORD *)(v65 + 44) = v66;
        v67 = *(unsigned int *)((*(_QWORD *)(v31 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v55 + 20);
        if ((_DWORD)v67)
          v68 = pas_compact_heap_reservation_base + 8 * v67;
        else
          v68 = 0;
        if ((*(_BYTE *)(v68 + 19) & 4) != 0)
        {
          if (!v66)
          {
LABEL_74:
            if (*(_QWORD *)(v31 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v31, 0);
              if (!v49)
                return v13;
            }
            else
            {
              --*(_QWORD *)(v31 + 24);
              if (!v49)
                return v13;
            }
            goto LABEL_109;
          }
        }
        else
        {
          pas_segregated_partial_view_note_eligibility(v68, v31);
          if (!v66)
            goto LABEL_74;
        }
        if (!v49)
          return v13;
LABEL_109:
        v102 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v103 = __ldxr(&v49->_os_unfair_lock_opaque);
          if (v103 != v102)
            break;
          if (!__stlxr(0, &v49->_os_unfair_lock_opaque))
            return v13;
        }
LABEL_227:
        __clrex();
        os_unfair_lock_unlock(v49);
        return v13;
      }
LABEL_86:
      allocation_size_with_page = bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v31, a2);
      v82 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, v75, v76, v77, v78, v79, v80, v81);
      v13 = v82;
      if (!v82)
        return v13;
      if (a3 >= allocation_size_with_page)
        v83 = allocation_size_with_page;
      else
        v83 = a3;
      memcpy(v82, (const void *)a2, v83);
      bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page(v31, a2, v84, v85, v86, v87, v88, v89);
LABEL_158:
      if (*MEMORY[0x1E0C83EB8])
        pas_msl_free_logging_slow(a2);
      return v13;
    }
  }
  v24 = a2 & 0xFFFFFFFFFFFE0000;
  if (off_1ECF42618)
  {
    v25 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
    v26 = ((v25 ^ 0xDEADBEEF) + 32 * v25) ^ (((v25 ^ 0xDEADBEEF) + 32 * v25) >> 11);
    v27 = (char *)off_1ECF42618 + 32;
    v28 = *((_DWORD *)off_1ECF42618 + 3) & v26;
    v29 = *((_QWORD *)off_1ECF42618 + 2 * v28 + 4);
    if (v29 == v24)
    {
LABEL_25:
      v31 = *(_QWORD *)&v27[16 * v28 + 8];
      if (v31)
      {
LABEL_32:
        switch(*(_BYTE *)v31)
        {
          case 1:
            v38 = (a2 >> 8) & 0x3F;
            v39 = *(unsigned int *)((*(_QWORD *)(v31 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v38 + 20);
            if ((_DWORD)v39)
              v40 = pas_compact_heap_reservation_base + 8 * v39;
            else
              v40 = 0;
            v41 = *(unsigned __int16 *)(v40 + 7) | ((unint64_t)*(unsigned __int8 *)(v40 + 9) << 16);
            if ((_DWORD)v41)
              v42 = pas_compact_heap_reservation_base + 8 * v41;
            else
              v42 = 0;
            v43 = *(_DWORD *)(v42 + 24);
            v44 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
            v13 = v44;
            if (!v44)
              return v13;
            if (a3 >= (v43 & 0x7FFFFFFu))
              v45 = v43 & 0x7FFFFFF;
            else
              v45 = a3;
            memcpy(v44, (const void *)a2, v45);
            v46 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v46 + 752))
              goto LABEL_146;
            v47 = a2 & 0xFFFFFFFFFFFFC000;
            v48 = *(os_unfair_lock_s **)((a2 & 0xFFFFFFFFFFFFC000) + 8);
            if (v48)
              v49 = pas_segregated_page_switch_lock_slow(a2 & 0xFFFFFFFFFFFFC000, 0, v48);
            else
              v49 = 0;
            v50 = v47 + 4 * ((a2 >> 9) & 0x1F);
            v51 = *(_DWORD *)(v50 + 44) & ~(1 << (a2 >> 4));
            *(_DWORD *)(v50 + 44) = v51;
            v52 = *(unsigned int *)((*(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v38 + 20);
            if ((_DWORD)v52)
              v53 = pas_compact_heap_reservation_base + 8 * v52;
            else
              v53 = 0;
            if ((*(_BYTE *)(v53 + 19) & 4) != 0)
            {
              if (!v51)
                goto LABEL_51;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v53, v47);
              if (!v51)
              {
LABEL_51:
                if (*(_QWORD *)(v47 + 24) == 1)
                {
                  pas_segregated_page_note_emptiness(v47, 0);
                  if (!v49)
                    return v13;
                }
                else
                {
                  --*(_QWORD *)(v47 + 24);
                  if (!v49)
                    return v13;
                }
LABEL_162:
                v153 = *(_DWORD *)(v46 + 24);
                do
                {
                  v154 = __ldxr(&v49->_os_unfair_lock_opaque);
                  if (v154 != v153)
                    goto LABEL_227;
                }
                while (__stlxr(0, &v49->_os_unfair_lock_opaque));
                return v13;
              }
            }
            if (!v49)
              return v13;
            goto LABEL_162;
          case 2:
            v104 = *(unsigned int *)(v31 + 4);
            v105 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
            v13 = v105;
            if (!v105)
              return v13;
            if (a3 >= v104)
              v106 = v104;
            else
              v106 = a3;
            memcpy(v105, (const void *)a2, v106);
            v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v20)
              goto LABEL_146;
            goto LABEL_10;
          case 3:
            v107 = (a2 >> 12) & 0x1F;
            v108 = *(unsigned int *)((*(_QWORD *)(v31 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v107 + 20);
            if ((_DWORD)v108)
              v109 = pas_compact_heap_reservation_base + 8 * v108;
            else
              v109 = 0;
            v110 = *(unsigned __int16 *)(v109 + 7) | ((unint64_t)*(unsigned __int8 *)(v109 + 9) << 16);
            if ((_DWORD)v110)
              v111 = pas_compact_heap_reservation_base + 8 * v110;
            else
              v111 = 0;
            v112 = *(_DWORD *)(v111 + 24);
            v113 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
            v13 = v113;
            if (!v113)
              return v13;
            if (a3 >= (v112 & 0x7FFFFFFu))
              v114 = v112 & 0x7FFFFFF;
            else
              v114 = a3;
            memcpy(v113, (const void *)a2, v114);
            v115 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            if (!*(_QWORD *)(v115 + 752))
              goto LABEL_146;
            if (!off_1ECF42618)
              goto LABEL_170;
            v116 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
            v117 = ((v116 ^ 0xDEADBEEF) + 32 * v116) ^ (((v116 ^ 0xDEADBEEF) + 32 * v116) >> 11);
            v118 = (char *)off_1ECF42618 + 32;
            v119 = *((_DWORD *)off_1ECF42618 + 3) & v117;
            v120 = *((_QWORD *)off_1ECF42618 + 2 * v119 + 4);
            if (v120 == v24)
              goto LABEL_135;
            v121 = v117 + 1;
            while (v120 != -1)
            {
              v119 = *((_DWORD *)off_1ECF42618 + 3) & v121;
              v120 = *(_QWORD *)&v118[16 * v119];
              ++v121;
              if (v120 == v24)
              {
LABEL_135:
                v122 = *(_QWORD *)&v118[16 * v119 + 8];
                goto LABEL_171;
              }
            }
LABEL_170:
            v122 = 0;
LABEL_171:
            v155 = *(os_unfair_lock_s **)(v122 + 8);
            if (v155)
              v49 = pas_segregated_page_switch_lock_slow(v122, 0, v155);
            else
              v49 = 0;
            v156 = v122 + 4 * ((a2 >> 14) & 7);
            v157 = *(_DWORD *)(v156 + 44) & ~(1 << (a2 >> 9));
            *(_DWORD *)(v156 + 44) = v157;
            v158 = *(_QWORD *)(v122 + 32);
            v159 = *(unsigned int *)((v158 & 0xFFFFFFFFFFFFFFF8) + 4 * v107 + 20);
            if ((_DWORD)v159)
              v160 = pas_compact_heap_reservation_base + 8 * v159;
            else
              v160 = 0;
            if ((*(_BYTE *)(v160 + 19) & 4) == 0)
            {
              pas_segregated_partial_view_note_eligibility(v160, v122);
              v158 = *(_QWORD *)(v122 + 32);
            }
            if ((v158 & 6) != 0)
            {
              v161 = *(unsigned int *)((v158 & 0xFFFFFFFFFFFFFFF8) + 4 * v107 + 20);
              if ((_DWORD)v161)
                v162 = pas_compact_heap_reservation_base + 8 * v161;
              else
                v162 = 0;
              v163 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v162 + 7)) | ((unint64_t)*(unsigned __int8 *)(v162 + 9) << 19))
                               + pas_compact_heap_reservation_base
                               + 24) & 0x7FFFFFF;
            }
            else
            {
              v163 = *(_DWORD *)(v122 + 4);
            }
            if (!v163 || (v164 = (a2 & 0x1FFFF) >> 14, v165 = ((a2 & 0x1FFFF) + v163 - 1) >> 14, v164 > v165))
            {
              v166 = 1;
              goto LABEL_207;
            }
            v167 = v165 - v164 + 1;
            if (v167 < 8)
            {
              LOBYTE(v168) = 0;
              v169 = (a2 & 0x1FFFF) >> 14;
              goto LABEL_202;
            }
            if (v167 >= 0x20)
            {
              v170 = v167 & 0xFFFFFFFFFFFFFFE0;
              v171 = (int8x16_t *)(v164 + v122 + 92);
              v172 = 0uLL;
              v173.i64[0] = -1;
              v173.i64[1] = -1;
              v174 = v167 & 0xFFFFFFFFFFFFFFE0;
              v175 = 0uLL;
              do
              {
                v176 = vaddq_s8(v171[-1], v173);
                v177 = vaddq_s8(*v171, v173);
                v171[-1] = v176;
                *v171 = v177;
                v178 = vceqzq_s8(v176);
                v179 = vceqzq_s8(v177);
                v172 = vsubq_s8(vbicq_s8(v172, v178), v178);
                v175 = vsubq_s8(vbicq_s8(v175, v179), v179);
                v171 += 2;
                v174 -= 32;
              }
              while (v174);
              v180 = vorrq_s8(v172, v175);
              LODWORD(v168) = vmaxvq_u8((uint8x16_t)vtstq_s8(v180, v180)) & 1;
              if (v167 == v170)
                goto LABEL_206;
              if ((v167 & 0x18) == 0)
              {
                v169 = v164 | v170;
                goto LABEL_202;
              }
            }
            else
            {
              LODWORD(v168) = 0;
              v170 = 0;
            }
            v181 = vdup_n_s8(v168);
            v169 = v164 | v167 & 0xFFFFFFFFFFFFFFF8;
            v182 = (int8x8_t *)(v170 + v164 + v122 + 76);
            v183 = v170 - (v167 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v184 = vadd_s8(*v182, (int8x8_t)-1);
              *v182++ = v184;
              v185 = vceqz_s8(v184);
              v181 = vsub_s8(vbic_s8(v181, v185), v185);
              v183 += 8;
            }
            while (v183);
            v168 = *(_QWORD *)&v181 != 0;
            if (v167 == (v167 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_206;
LABEL_202:
            v186 = v165 - v169 + 1;
            v187 = (_BYTE *)(v169 + v122 + 76);
            do
            {
              v188 = *v187 - 1;
              *v187++ = v188;
              if (!v188)
                LOBYTE(v168) = 1;
              --v186;
            }
            while (v186);
LABEL_206:
            v166 = !v168;
LABEL_207:
            if (pas_segregated_page_deallocate_should_verify_granules)
              pas_segregated_page_verify_granules((unsigned __int8 *)v122);
            if (v166)
            {
              if (v157)
                goto LABEL_211;
            }
            else
            {
              pas_segregated_page_note_emptiness(v122, 1);
              if (v157)
              {
LABEL_211:
                if (!v49)
                  return v13;
                goto LABEL_212;
              }
            }
            if (*(_QWORD *)(v122 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v122, 0);
              if (!v49)
                return v13;
            }
            else
            {
              --*(_QWORD *)(v122 + 24);
              if (!v49)
                return v13;
            }
LABEL_212:
            v189 = *(_DWORD *)(v115 + 24);
            while (1)
            {
              v190 = __ldxr(&v49->_os_unfair_lock_opaque);
              if (v190 != v189)
                break;
              if (!__stlxr(0, &v49->_os_unfair_lock_opaque))
                return v13;
            }
            goto LABEL_227;
          case 4:
            v123 = *(unsigned int *)(v31 + 4);
            v124 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
            v13 = v124;
            if (!v124)
              return v13;
            if (a3 >= v123)
              v125 = v123;
            else
              v125 = a3;
            memcpy(v124, (const void *)a2, v125);
            v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v20)
              goto LABEL_146;
            v126 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
            v127 = ((v126 ^ 0xDEADBEEF) + 32 * v126) ^ (((v126 ^ 0xDEADBEEF) + 32 * v126) >> 11);
            v128 = (char *)off_1ECF42618 + 32;
            v129 = *((_DWORD *)off_1ECF42618 + 3) & v127;
            if (*((_QWORD *)off_1ECF42618 + 2 * v129 + 4) != v24)
            {
              v130 = v127 + 1;
              do
                v129 = *((_DWORD *)off_1ECF42618 + 3) & v130++;
              while (*(_QWORD *)&v128[16 * v129] != v24);
            }
            v131 = *(_QWORD *)(v20 + 8008) + *(unsigned int *)(*(_QWORD *)&v128[16 * v129 + 8] + 4);
            if (v131 > 0xC350
              || (*(_QWORD *)(v20 + 8008) = v131, v21 = *(unsigned int *)(v20 + 8000), v21 >= 0x3E7))
            {
              v69 = a2;
              v70 = 7;
              goto LABEL_79;
            }
            v22 = a2 | 0x7000000000000;
            goto LABEL_12;
          case 5:
            goto LABEL_86;
          case 6:
            v133 = bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(v31, a2);
            v141 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, v134, v135, v136, v137, v138, v139, v140);
            v13 = v141;
            if (!v141)
              return v13;
            if (a3 >= v133)
              v142 = v133;
            else
              v142 = a3;
            memcpy(v141, (const void *)a2, v142);
            bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page(v31, a2);
            goto LABEL_158;
          case 7:
            v143 = bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(v31, a2);
            v151 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, v144, v145, v146, v147, v148, v149, v150);
            v13 = v151;
            if (!v151)
              return v13;
            if (a3 >= v143)
              v152 = v143;
            else
              v152 = a3;
            memcpy(v151, (const void *)a2, v152);
            bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page(v31, a2);
            goto LABEL_158;
          default:
            return 0;
        }
      }
    }
    else
    {
      v30 = v26 + 1;
      while (v29 != -1)
      {
        v28 = *((_DWORD *)off_1ECF42618 + 3) & v30;
        v29 = *(_QWORD *)&v27[16 * v28];
        ++v30;
        if (v29 == v24)
          goto LABEL_25;
      }
    }
  }
  if (!off_1ECF42608)
    goto LABEL_80;
  v32 = (a2 >> 22) ^ ((a2 >> 22) >> 4);
  v33 = ((v32 ^ 0xDEADBEEF) + 32 * v32) ^ (((v32 ^ 0xDEADBEEF) + 32 * v32) >> 11);
  v34 = (char *)off_1ECF42608 + 32;
  v35 = *((_DWORD *)off_1ECF42608 + 3) & v33;
  v36 = *((_QWORD *)off_1ECF42608 + 2 * v35 + 4);
  if (v36 == (a2 & 0xFFFFFFFFFFC00000))
  {
LABEL_31:
    v31 = *(_QWORD *)&v34[16 * v35 + 8];
    if (!v31)
      goto LABEL_80;
    goto LABEL_32;
  }
  v37 = v33 + 1;
  while (v36 != -1)
  {
    v35 = *((_DWORD *)off_1ECF42608 + 3) & v37;
    v36 = *(_QWORD *)&v34[16 * v35];
    ++v37;
    if (v36 == (a2 & 0xFFFFFFFFFFC00000))
      goto LABEL_31;
  }
LABEL_80:
  if (!a2)
    return bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, a2, a3, a4, a5, a6, a7, a8);
  if (pas_debug_heap_is_enabled(2))
    return pas_debug_heap_realloc((void *)a2, a3);
  v71 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v72 = *(_DWORD *)(v71 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v72, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_93;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_93:
  if (pas_probabilistic_guard_malloc_check_exists(a2))
  {
    pas_probabilistic_guard_malloc_return_as_large_map_entry(a2, v191);
  }
  else
  {
    pas_large_map_find(a2, v191);
    if (!v191[0])
      pas_reallocation_did_fail((uint64_t)"Source object not allocated", 0, (uint64_t)v10, a2, 0, a3, v95, v96);
  }
  v97 = v191[1] - a2;
  v98 = *(_DWORD *)(v71 + 24);
  while (1)
  {
    v99 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v99 != v98)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_101;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_101:
  v100 = bmalloc_try_allocate_auxiliary_impl_for_realloc(a3, v90, v91, v92, v93, v94, v95, v96);
  v13 = v100;
  if (v100)
  {
    if (a3 >= v97)
      v101 = v97;
    else
      v101 = a3;
    memcpy(v100, (const void *)a2, v101);
    if (!pas_try_deallocate_pgm_large(a2, (uint64_t)&bmalloc_heap_config))
      pas_deallocate_known_large(a2, (uint64_t)&bmalloc_heap_config);
    goto LABEL_158;
  }
  return v13;
}

void Gigacage::free(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    if (a1
      || qword_1ECF4C038
      && (!byte_1ECF4C022 ? (v8 = disablePrimitiveGigacageRequested == 0) : (v8 = 1),
          v8 ? (v9 = (a2 & 0x3FFFFFFFFLL) + qword_1ECF4C038 == a2) : (v9 = 1),
          !v9))
    {
      __break(0xC471u);
      JUMPOUT(0x197ADA9ACLL);
    }
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v10)
    {
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(a2 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
    {
      goto LABEL_15;
    }
    if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_15:
        v11 = *(unsigned int *)(v10 + 8000);
        if (v11 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v10, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v10 + 8 * v11) = a2 | 0x5000000000000;
          *(_DWORD *)(v10 + 8000) = v11 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v10, a2, 1, a4, a5, a6, a7, a8);
  }
}

void *Gigacage::tryAllocateZeroedVirtualPages(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = WTF::s_pageSize;
  if (!WTF::s_pageSize)
  {
    v10 = sysconf(29);
    WTF::s_pageSize = v10;
    if ((v10 & (v10 - 1)) != 0)
      goto LABEL_10;
    if (v10 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197ADAAA4);
    }
    if (((v10 + 0x3FFF) & -(uint64_t)v10) != 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197ADAAC4);
    }
  }
  if (a1)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x197ADAA84);
  }
  return bmalloc::api::tryLargeZeroedMemalignVirtual(v10, a2, 0, 1, a5, a6, a7, a8);
}

void Gigacage::freeVirtualPages(int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  BOOL v9;

  if (a2)
  {
    if (a1
      || qword_1ECF4C038
      && (!byte_1ECF4C022 ? (v8 = disablePrimitiveGigacageRequested == 0) : (v8 = 1),
          v8 ? (v9 = (a2 & 0x3FFFFFFFFLL) + qword_1ECF4C038 == a2) : (v9 = 1),
          !v9))
    {
      __break(0xC471u);
      JUMPOUT(0x197ADAB4CLL);
    }
    bmalloc::api::freeLargeVirtual(a2, a3, 1, a4, a5, a6, a7, a8);
  }
}

uint64_t Gigacage::tryMallocArray(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a3, a2))
    return Gigacage::tryMalloc(a1, a3 * a2);
  else
    return 0;
}

uint64_t Gigacage::malloc(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = Gigacage::tryMalloc(a1, a2);
  if (!result)
  {
    result = 165;
    __break(0xC471u);
  }
  return result;
}

uint64_t Gigacage::zeroedMalloc(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = Gigacage::tryZeroedMalloc(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    result = 172;
    __break(0xC471u);
  }
  return result;
}

uint64_t Gigacage::mallocArray(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (!is_mul_ok(a3, a2) || (result = Gigacage::tryMalloc(a1, a3 * a2)) == 0)
  {
    result = 179;
    __break(0xC471u);
  }
  return result;
}

void *bmalloc_try_allocate_auxiliary_impl_casual_case(size_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char local_allocator_slow;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (a1 + 15) >> 4;
  if (v9 == dword_1ECF2C478)
  {
    v10 = dword_1ECF2C470;
    goto LABEL_7;
  }
  v11 = off_1ECF2C468;
  if (off_1ECF2C468)
  {
    if (v9 < *((unsigned int *)off_1ECF2C468 + 9))
      goto LABEL_5;
LABEL_22:
    v22 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)v11, v9, 0, 0);
    if (v22)
      v10 = *(unsigned int *)(v22 + 4);
    else
      v10 = 0;
    goto LABEL_7;
  }
  v11 = (_QWORD *)pas_ensure_heap_slow((uint64_t *)&bmalloc::api::gigacageHeaps, 1, (uint64_t)&bmalloc_heap_config, (uint64_t)&bmalloc_primitive_runtime_config);
  if (v9 >= *((unsigned int *)v11 + 9))
    goto LABEL_22;
LABEL_5:
  v10 = v11[1];
  if (v10)
    v10 = *(unsigned int *)(v10 + 4 * v9);
LABEL_7:
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v12)
  {
    if (!(_DWORD)v10)
      goto LABEL_14;
    if (*(_DWORD *)(v12 + 8052) > v10)
    {
      v13 = v12 + 8 * v10 + 8064;
      local_allocator_slow = 1;
      goto LABEL_15;
    }
    if ((_DWORD)v10 == -1)
    {
LABEL_14:
      local_allocator_slow = 0;
      v13 = 0;
    }
    else
    {
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v12, v10, 0, a4, a5, a6, a7, a8);
      v13 = v16;
    }
  }
  else
  {
    local_allocator_slow = pas_thread_local_cache_get_local_allocator_if_can_set_cache_for_possibly_uninitialized_index_slow(v10, (uint64_t)&bmalloc_heap_config);
    v13 = v15;
  }
LABEL_15:
  if ((local_allocator_slow & 1) == 0)
    return bmalloc_try_allocate_auxiliary_impl_impl_slow(a1);
  *(_BYTE *)v13 = 1;
  v17 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v17)
  {
    *(_DWORD *)(v13 + 16) = v17 - *(_DWORD *)(v13 + 20);
    result = (void *)(*(_QWORD *)(v13 + 8) - v17);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v13 + 40);
    v20 = *(_QWORD *)(v13 + 24);
    if (v19)
    {
LABEL_19:
      v21 = __clz(v19);
      *(_QWORD *)(v13 + 40) = v19 & ~(0x8000000000000000 >> v21);
      result = (void *)(v20 + 16 * v21);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v13 + 5) == 6)
      {
        v23 = *(unsigned int *)(v13 + 32);
        v24 = *(_DWORD *)(v13 + 36);
        if (v23 < v24)
        {
          v25 = v13 + 8 * v23;
          *(_QWORD *)(v25 + 56) = 0;
          v26 = (unint64_t *)(v25 + 64);
          v27 = v24 - 1 - v23;
          while (v27)
          {
            v20 += 1024;
            v29 = *v26++;
            v28 = v29;
            LODWORD(v23) = v23 + 1;
            --v27;
            if (v29)
            {
              v19 = __rbit64(v28);
              *(_DWORD *)(v13 + 32) = v23;
              *(_QWORD *)(v13 + 24) = v20;
              goto LABEL_19;
            }
          }
          *(_DWORD *)(v13 + 32) = v24;
        }
      }
      if (pas_debug_heap_is_enabled(2))
      {
        return pas_debug_heap_malloc(a1);
      }
      else if (*(_BYTE *)(v13 + 5) == 6)
      {
        return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v13, 0, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v30, v31, v32, v33);
      }
      else
      {
        return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v13, a1, 1uLL, 0, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
      }
    }
  }
  return result;
}

void *bmalloc_try_allocate_auxiliary_impl_impl_slow(size_t a1)
{
  return bmalloc_heap_config_specialized_try_allocate_common_impl_slow((uint64_t *)&bmalloc::api::gigacageHeaps, 1, a1, 1uLL, 0, (uint64_t)&bmalloc_primitive_runtime_config, (uint64_t)&bmalloc_allocator_counts, 0);
}

void *bmalloc_try_allocate_auxiliary_impl_for_realloc(size_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = (a1 + 15) >> 4;
  if (v8 == dword_1ECF2C478)
  {
    v9 = dword_1ECF2C470;
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v10)
      return bmalloc_try_allocate_auxiliary_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (!off_1ECF2C468)
      return bmalloc_try_allocate_auxiliary_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v8 >= *((unsigned int *)off_1ECF2C468 + 9))
    {
      v9 = 0;
      v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v10)
        return bmalloc_try_allocate_auxiliary_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v11 = *((_QWORD *)off_1ECF2C468 + 1);
      if (v11)
      {
        v9 = *(_DWORD *)(v11 + 4 * v8);
        v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v10)
          return bmalloc_try_allocate_auxiliary_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v9 = 0;
        v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v10)
          return bmalloc_try_allocate_auxiliary_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  if (*(_DWORD *)(v10 + 8052) > v9)
  {
    v12 = v10 + 8 * v9;
    v13 = v12 + 8064;
    *(_BYTE *)(v12 + 8064) = 1;
    v14 = *(unsigned int *)(v12 + 8080);
    if ((_DWORD)v14)
    {
      *(_DWORD *)(v13 + 16) = v14 - *(_DWORD *)(v13 + 20);
      result = (void *)(*(_QWORD *)(v13 + 8) - v14);
      *(_BYTE *)v13 = 0;
      return result;
    }
    v16 = *(_QWORD *)(v13 + 40);
    v17 = *(_QWORD *)(v13 + 24);
    if (v16)
    {
LABEL_14:
      v18 = __clz(v16);
      *(_QWORD *)(v13 + 40) = v16 & ~(0x8000000000000000 >> v18);
      result = (void *)(v17 + 16 * v18);
      *(_BYTE *)v13 = 0;
      return result;
    }
    if (*(_BYTE *)(v13 + 5) == 6)
    {
      v19 = *(unsigned int *)(v13 + 32);
      v20 = *(_DWORD *)(v13 + 36);
      if (v19 < v20)
      {
        *(_QWORD *)(v13 + 8 * v19 + 56) = 0;
        v21 = (unint64_t *)(8 * v19 + 8 * v9 + v10 + 8128);
        v22 = v20 - 1 - v19;
        while (v22)
        {
          v17 += 1024;
          v24 = *v21++;
          v23 = v24;
          LODWORD(v19) = v19 + 1;
          --v22;
          if (v24)
          {
            v16 = __rbit64(v23);
            *(_DWORD *)(v13 + 32) = v19;
            *(_QWORD *)(v13 + 24) = v17;
            goto LABEL_14;
          }
        }
        *(_DWORD *)(v13 + 32) = v20;
      }
    }
    *(_BYTE *)v13 = 0;
  }
  return bmalloc_try_allocate_auxiliary_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::GregorianDateTime::GregorianDateTime(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v5 = (uint64_t)a3 - 86399999;
    if ((uint64_t)a3 >= 0)
      v5 = (uint64_t)a3;
    v6 = (int)v5 / 86400000;
    v7 = (uint64_t)a3 - 86400000 * ((int)v5 / 86400000);
    v8 = WTF::yearMonthDayFromDays((WTF *)((int)v5 / 86400000));
    *(_DWORD *)(a1 + 24) = v7 / 60000 % 60;
    *(_DWORD *)(a1 + 28) = v7 / 1000 % 60;
    *(_DWORD *)(a1 + 16) = (v6 + 4) % 7 + ((v6 + 4) % 7 < 0 ? 7 : 0);
    *(_DWORD *)(a1 + 20) = v7 / 3600000;
    if ((v8 & 3) != 0)
    {
      v10 = 0;
    }
    else
    {
      HIDWORD(v11) = -1030792151 * v8 + 85899344;
      LODWORD(v11) = HIDWORD(v11);
      if ((v11 >> 4) < 0xA3D70B)
      {
        v10 = 1;
      }
      else
      {
        HIDWORD(v12) = -1030792151 * v8 + 85899344;
        LODWORD(v12) = HIDWORD(v12);
        v10 = (v12 >> 2) > 0x28F5C28;
      }
    }
    *(_DWORD *)(a1 + 8) = v9 + WTF::firstDayOfMonth[12 * v10 + (v8 >> 32)] - 1;
    *(_DWORD *)(a1 + 12) = v9;
    *(_QWORD *)a1 = v8;
  }
  *(_DWORD *)(a1 + 32) = SHIDWORD(a2) / 60000;
  *(_DWORD *)(a1 + 36) = a2 & 1;
  return a1;
}

{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v5 = (uint64_t)a3 - 86399999;
    if ((uint64_t)a3 >= 0)
      v5 = (uint64_t)a3;
    v6 = (int)v5 / 86400000;
    v7 = (uint64_t)a3 - 86400000 * ((int)v5 / 86400000);
    v8 = WTF::yearMonthDayFromDays((WTF *)((int)v5 / 86400000));
    *(_DWORD *)(a1 + 24) = v7 / 60000 % 60;
    *(_DWORD *)(a1 + 28) = v7 / 1000 % 60;
    *(_DWORD *)(a1 + 16) = (v6 + 4) % 7 + ((v6 + 4) % 7 < 0 ? 7 : 0);
    *(_DWORD *)(a1 + 20) = v7 / 3600000;
    if ((v8 & 3) != 0)
    {
      v10 = 0;
    }
    else
    {
      HIDWORD(v11) = -1030792151 * v8 + 85899344;
      LODWORD(v11) = HIDWORD(v11);
      if ((v11 >> 4) < 0xA3D70B)
      {
        v10 = 1;
      }
      else
      {
        HIDWORD(v12) = -1030792151 * v8 + 85899344;
        LODWORD(v12) = HIDWORD(v12);
        v10 = (v12 >> 2) > 0x28F5C28;
      }
    }
    *(_DWORD *)(a1 + 8) = v9 + WTF::firstDayOfMonth[12 * v10 + (v8 >> 32)] - 1;
    *(_DWORD *)(a1 + 12) = v9;
    *(_QWORD *)a1 = v8;
  }
  *(_DWORD *)(a1 + 32) = SHIDWORD(a2) / 60000;
  *(_DWORD *)(a1 + 36) = a2 & 1;
  return a1;
}

uint64_t WTF::yearMonthDayFromDays(WTF *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = ((int)this + 146816528) % 146097;
  v2 = (v1 - 1) / 36524;
  v3 = (v1 - 1) % 36524;
  v4 = (v3 + 1) / 1461;
  v5 = (v3 + 1) % 1461;
  v6 = ((22983 * (__int16)(v5 - 1)) >> 23) + ((22983 * (__int16)(v5 - 1)) >> 31);
  v7 = v3 - 1460;
  v9 = (v1 + 36522) < 0x11D57 || v7 < 0xFFFFF497;
  v10 = v9 && (v5 + 363) < 0x2D9;
  v11 = v10 + (__int16)(v5 - 1) % 365;
  if (v10)
    v12 = 60;
  else
    v12 = 59;
  v13 = v11 - v12;
  if (v11 >= v12)
  {
    if ((int)v13 > 30)
    {
      if (v13 >= 0x3D)
      {
        if (v13 >= 0x5C)
        {
          if (v13 >= 0x7A)
          {
            if (v13 >= 0x99)
            {
              if (v13 >= 0xB8)
              {
                if (v13 >= 0xD6)
                {
                  if (v13 >= 0xF5)
                  {
                    if (v13 >= 0x113)
                    {
                      if (v13 >= 0x132)
                        v14 = 0;
                      else
                        v14 = 0xB00000000;
                    }
                    else
                    {
                      v14 = 0xA00000000;
                    }
                  }
                  else
                  {
                    v14 = 0x900000000;
                  }
                }
                else
                {
                  v14 = 0x800000000;
                }
              }
              else
              {
                v14 = 0x700000000;
              }
            }
            else
            {
              v14 = 0x600000000;
            }
          }
          else
          {
            v14 = 0x500000000;
          }
        }
        else
        {
          v14 = 0x400000000;
        }
      }
      else
      {
        v14 = 0x300000000;
      }
    }
    else
    {
      v14 = 0x200000000;
    }
  }
  else
  {
    v14 = 0x100000000;
    if (v11 <= 30)
      v14 = 0;
  }
  return v14 | (100 * v2 + 400 * (((int)this + 146816528) / 146097) + 4 * v4 - 400000 + v6);
}

double WTF::GregorianDateTime::setToCurrentLocalTime(WTF::GregorianDateTime *this)
{
  int tm_wday;
  int tm_mon;
  int tm_mday;
  int tm_isdst;
  double result;
  time_t v7;
  tm v8;

  v7 = time(0);
  localtime_r(&v7, &v8);
  tm_wday = v8.tm_wday;
  tm_mday = v8.tm_mday;
  tm_mon = v8.tm_mon;
  *(_DWORD *)this = v8.tm_year + 1900;
  *((_DWORD *)this + 1) = tm_mon;
  tm_isdst = v8.tm_isdst;
  *((_DWORD *)this + 2) = v8.tm_yday;
  *((_DWORD *)this + 3) = tm_mday;
  *((_DWORD *)this + 4) = tm_wday;
  *(int32x2_t *)((char *)this + 20) = vrev64_s32(*(int32x2_t *)&v8.tm_min);
  result = (double)v8.tm_gmtoff / 60.0;
  *((_DWORD *)this + 7) = v8.tm_sec;
  *((_DWORD *)this + 8) = (int)result;
  *((_DWORD *)this + 9) = tm_isdst;
  return result;
}

uint64_t WTF::Internal::appendHex(uint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, int a5)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  uint64_t result;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a1 + a2;
  v7 = "0123456789ABCDEF";
  if (!a5)
    v7 = "0123456789abcdef";
  if (a4 >= (unint64_t)a2)
    v8 = a2;
  else
    v8 = a4;
  result = a1 + a2;
  v10 = v6;
  do
  {
    *(_BYTE *)--v10 = v7[a3 & 0xF];
    --result;
    --v8;
    v11 = a3 > 0xF;
    a3 >>= 4;
  }
  while (v11);
  if (a2 >= a4)
    v12 = a4;
  else
    v12 = a2;
  v13 = v6 - v12;
  if (v10 > v6 - v12)
  {
    memset((void *)(v6 - v12), 48, v8);
    return v13;
  }
  return result;
}

uint64_t WTF::printInternal(uint64_t a1, uint64_t a2)
{
  size_t v3;
  char *v4;
  WTF::PrintStream *v5;
  float v6;
  int v8;
  int v9;
  char v10;

  v3 = *(unsigned int *)(a2 + 16);
  v4 = (char *)(a2 + 16 - v3);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::StringImpl::utf8ForCharacters(v4, v3, (uint64_t)&v8, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v8);
  if (v9 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v9])(&v10, &v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::ICU::majorVersion(WTF::ICU *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WTF::ICU::version(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WTF::ICU::version(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
  }
  return WTF::ICU::version(void)::versions;
}

uint64_t WTF::ICU::minorVersion(WTF::ICU *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WTF::ICU::version(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WTF::ICU::version(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
  }
  return byte_1ECF44029;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>()
{
  u_getVersion((uint8_t *)&WTF::ICU::version(void)::versions);
}

WTF::UInt128Impl *WTF::UInt128Impl::UInt128Impl(WTF::UInt128Impl *this, float a2)
{
  unint64_t v5;

  if (ldexpf(1.0, 64) <= a2)
  {
    v5 = (unint64_t)ldexpf(a2, -64);
    *(_QWORD *)this = (unint64_t)(float)(a2 - ldexpf((float)v5, 64));
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *(_QWORD *)this = (unint64_t)a2;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

{
  unint64_t v5;

  if (ldexpf(1.0, 64) <= a2)
  {
    v5 = (unint64_t)ldexpf(a2, -64);
    *(_QWORD *)this = (unint64_t)(float)(a2 - ldexpf((float)v5, 64));
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *(_QWORD *)this = (unint64_t)a2;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

WTF::UInt128Impl *WTF::UInt128Impl::UInt128Impl(WTF::UInt128Impl *this, long double a2)
{
  unint64_t v5;

  if (ldexp(1.0, 64) <= a2)
  {
    v5 = (unint64_t)ldexp(a2, -64);
    *(_QWORD *)this = (unint64_t)(a2 - ldexp((double)v5, 64));
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *(_QWORD *)this = (unint64_t)a2;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

{
  unint64_t v5;

  if (ldexp(1.0, 64) <= a2)
  {
    v5 = (unint64_t)ldexp(a2, -64);
    *(_QWORD *)this = (unint64_t)(a2 - ldexp((double)v5, 64));
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *(_QWORD *)this = (unint64_t)a2;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

{
  unint64_t v5;

  if (ldexp(1.0, 64) <= a2)
  {
    v5 = (unint64_t)ldexp(a2, -64);
    *(_QWORD *)this = (unint64_t)(a2 - ldexp((double)v5, 64));
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *(_QWORD *)this = (unint64_t)a2;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

{
  unint64_t v5;

  if (ldexp(1.0, 64) <= a2)
  {
    v5 = (unint64_t)ldexp(a2, -64);
    *(_QWORD *)this = (unint64_t)(a2 - ldexp((double)v5, 64));
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *(_QWORD *)this = (unint64_t)a2;
    *((_QWORD *)this + 1) = 0;
  }
  return this;
}

uint64_t WTF::operator/(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  __int128 v19;

  v4 = a1 < a3;
  if (a2 != a4)
    v4 = a2 < a4;
  if (v4)
    return 0;
  if (a4 != a2 || a3 != a1)
  {
    v8 = __clz(a2) ^ 0x7F;
    v9 = 63 - __clz(a1);
    if (a2)
      v9 = v8;
    v10 = __clz(a4) - 127;
    v11 = __clz(a3) - 63;
    if (a4)
      v12 = v10;
    else
      v12 = v11;
    v13 = v12 + v9;
    if (v12 + v9 < 64)
    {
      if (v13)
      {
        if (v13 < 0)
          return 0;
        a4 = (a3 >> -(char)v13) | (a4 << v13);
        a3 <<= v13;
      }
    }
    else
    {
      a4 = a3 << v13;
      a3 = 0;
    }
    v5 = 0;
    v14 = 0;
    v15 = v9 + v12 + 1;
    do
    {
      v16 = v14 | (v5 >> 63);
      v5 *= 2;
      v14 = 2 * v16;
      v17 = a1 >= a3;
      if (a2 != a4)
        v17 = a2 >= a4;
      v18 = (__PAIR128__(a2 - a4, a1) - a3) >> 64;
      if (v17)
      {
        v5 |= 1uLL;
        a1 -= a3;
        a2 = v18;
      }
      *((_QWORD *)&v19 + 1) = a4;
      *(_QWORD *)&v19 = a3;
      a3 = v19 >> 1;
      a4 >>= 1;
      --v15;
    }
    while (v15);
    return v5;
  }
  return 1;
}

unint64_t WTF::operator%(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  unint64_t v13;
  __int128 v14;

  v4 = result < a3;
  if (a2 != a4)
    v4 = a2 < a4;
  if (!v4)
  {
    if (a4 == a2 && a3 == result)
      return 0;
    v6 = __clz(a2) ^ 0x7F;
    v7 = 63 - __clz(result);
    if (!a2)
      v6 = v7;
    v8 = __clz(a4) - 127;
    v9 = __clz(a3) - 63;
    if (!a4)
      v8 = v9;
    v10 = v8 + v6;
    if (v8 + v6 < 64)
    {
      if (v10)
      {
        if (v10 < 0)
          return result;
        a4 = (a3 >> -(char)v10) | (a4 << v10);
        a3 <<= v10;
      }
    }
    else
    {
      a4 = a3 << v10;
      a3 = 0;
    }
    v11 = v6 + v8 + 1;
    do
    {
      v12 = result >= a3;
      if (a2 != a4)
        v12 = a2 >= a4;
      v13 = (__PAIR128__(a2 - a4, result) - a3) >> 64;
      if (v12)
      {
        result -= a3;
        a2 = v13;
      }
      *((_QWORD *)&v14 + 1) = a4;
      *(_QWORD *)&v14 = a3;
      a3 = v14 >> 1;
      a4 >>= 1;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t *WTF::operator<<(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  std::string::size_type size;
  std::string::size_type v11;
  const std::ios_base *v12;
  std::ios_base::fmtflags v13;
  const std::locale::facet *v14;
  const std::ios_base *v16;
  std::ios_base::fmtflags v17;
  const std::locale::facet *v18;
  std::string::value_type v19;
  std::string::size_type v20;
  const std::ios_base *v21;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v23;
  std::string *p_p;
  std::string::size_type v25;
  std::string __p;
  std::locale v28;

  v6 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v7 = *a1;
  v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v9 = *((_QWORD *)v8 + 3);
  *((_QWORD *)v8 + 3) = 0;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v11 = v9 - size;
  if (v9 > size)
  {
    if ((v6 & 0xB0) == 0x10)
    {
      if ((v6 & 0x24A) == 0x208 && (a2 | a3) != 0)
      {
        v21 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v7 - 24));
        fmtflags = v21[1].__fmtflags_;
        if (fmtflags == -1)
        {
          std::ios_base::getloc(v21);
          v23 = std::locale::use_facet(&v28, MEMORY[0x1E0DE4A90]);
          fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 32);
          std::locale::~locale(&v28);
          v21[1].__fmtflags_ = fmtflags;
        }
        v19 = fmtflags;
        v20 = 2;
        goto LABEL_20;
      }
    }
    else if ((v6 & 0xB0) == 0x20)
    {
      v12 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v7 - 24));
      v13 = v12[1].__fmtflags_;
      if (v13 == -1)
      {
        std::ios_base::getloc(v12);
        v14 = std::locale::use_facet(&v28, MEMORY[0x1E0DE4A90]);
        v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 32);
        std::locale::~locale(&v28);
        v12[1].__fmtflags_ = v13;
      }
      std::string::append(&__p, v11, v13);
      goto LABEL_21;
    }
    v16 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v7 - 24));
    v17 = v16[1].__fmtflags_;
    if (v17 == -1)
    {
      std::ios_base::getloc(v16);
      v18 = std::locale::use_facet(&v28, MEMORY[0x1E0DE4A90]);
      v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
      std::locale::~locale(&v28);
      v16[1].__fmtflags_ = v17;
    }
    v19 = v17;
    v20 = 0;
LABEL_20:
    std::string::insert(&__p, v20, v11, v19);
  }
LABEL_21:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:sn180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t WTF::`anonymous namespace'::UInt128ToFormattedString(char *a1, unint64_t a2, unint64_t a3, __int16 a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  const std::ios_base *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _BOOL4 v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  const std::ios_base *v44;
  const std::locale::facet *v45;
  char *v46;
  size_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  char *v59;
  unint64_t v60;
  void *__p[2];
  __int128 v62;
  int v63;
  uint64_t v64[19];
  std::locale v65;

  if ((a4 & 0x4A) == 8)
  {
    v8 = 0x1000000000000000;
    v9 = 15;
  }
  else if ((a4 & 0x4A) == 0x40)
  {
    v8 = 0x8000000000000000;
    v9 = 21;
  }
  else
  {
    v8 = 0x8AC7230489E80000;
    v9 = 19;
  }
  v54 = v9;
  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v64[0] = MEMORY[0x1E0DE4FE0] + 64;
  v55 = v12;
  *(uint64_t *)((char *)&v55 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v55 + *(_QWORD *)(v55 - 24));
  std::ios_base::init(v14, &v56);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v55 = v10 + 24;
  v64[0] = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  v56 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  v63 = 16;
  *(_DWORD *)((char *)&v55 + *(_QWORD *)(v55 - 24) + 8) = *(_DWORD *)((_BYTE *)&v55 + *(_QWORD *)(v55 - 24) + 8) & 0xFFFFBDB5 | a4 & 0x424A;
  if (!a3 && v8 > a2)
    goto LABEL_8;
  v16 = v8 ^ a2 | a3;
  if (!v16)
  {
    v17 = 1;
    goto LABEL_28;
  }
  v18 = __clz(a3) ^ 0x7F;
  v19 = 63 - __clz(a2);
  if (!a3)
    v18 = v19;
  v20 = __clz(v8);
  v21 = v18 + v20 - 63;
  if (v21 < 64)
  {
    if (v18 + v20 == 63)
    {
      v23 = 0;
      v22 = v8;
    }
    else
    {
      if (v21 < 0)
      {
LABEL_8:
        v16 = 0;
        v17 = 0;
        goto LABEL_28;
      }
      v23 = v8 >> (63 - (v18 + v20));
      v22 = v8 << v21;
    }
  }
  else
  {
    v22 = 0;
    v23 = v8 << v21;
  }
  v17 = 0;
  v24 = 0;
  v25 = v18 + v20 - 62;
  do
  {
    v16 = v24 | (v17 >> 63);
    v24 = 2 * v16;
    v26 = a2 >= v22;
    if (a3 != v23)
      v26 = a3 >= v23;
    v27 = (__PAIR128__(a3 - v23, a2) - v22) >> 64;
    if (v26)
      v17 = (2 * v17) | 1;
    else
      v17 *= 2;
    if (v26)
    {
      a2 -= v22;
      a3 = v27;
    }
    *((_QWORD *)&v28 + 1) = v23;
    *(_QWORD *)&v28 = v22;
    v22 = v28 >> 1;
    v23 >>= 1;
    --v25;
  }
  while (v25);
LABEL_28:
  if (!v16 && v17 < v8)
    goto LABEL_30;
  if (!(v17 ^ v8 | v16))
  {
LABEL_53:
    std::ostream::operator<<();
    v43 = v55;
    *(_DWORD *)((char *)&v55 + *(_QWORD *)(v55 - 24) + 8) &= ~0x200u;
    v44 = (const std::ios_base *)((char *)&v55 + *(_QWORD *)(v43 - 24));
    if (v44[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v44);
      v45 = std::locale::use_facet(&v65, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
      std::locale::~locale(&v65);
      v43 = v55;
    }
    v44[1].__fmtflags_ = 48;
    v32 = v54;
    *(_QWORD *)((char *)v57 + *(_QWORD *)(v43 - 24)) = v54;
    std::ostream::operator<<();
    v29 = v55;
    goto LABEL_56;
  }
  v33 = __clz(v16) ^ 0x7F;
  v34 = 63 - __clz(v17);
  if (v16)
    v34 = v33;
  v35 = __clz(v8);
  v36 = v35 + v34 - 63;
  if (v36 >= 64)
  {
    v37 = v8 << v36;
    v8 = 0;
LABEL_43:
    v38 = 0;
    v39 = v34 + v35 - 62;
    do
    {
      v40 = v17 >= v8;
      if (v16 != v37)
        v40 = v16 >= v37;
      v41 = (__PAIR128__(v16 - v37, v17) - v8) >> 64;
      if (v40)
        v38 = (2 * v38) | 1;
      else
        v38 *= 2;
      if (v40)
      {
        v17 -= v8;
        v16 = v41;
      }
      *((_QWORD *)&v42 + 1) = v37;
      *(_QWORD *)&v42 = v8;
      v8 = v42 >> 1;
      v37 >>= 1;
      --v39;
    }
    while (v39);
    if (!v38)
      goto LABEL_30;
    goto LABEL_53;
  }
  if (v35 + v34 == 63)
  {
    v37 = 0;
    goto LABEL_43;
  }
  if ((v36 & 0x80000000) == 0)
  {
    v37 = v8 >> (63 - (v35 + v34));
    v8 <<= v36;
    goto LABEL_43;
  }
LABEL_30:
  if (!v17)
    goto LABEL_57;
  std::ostream::operator<<();
  v29 = v55;
  *(_DWORD *)((char *)&v55 + *(_QWORD *)(v55 - 24) + 8) &= ~0x200u;
  v30 = (const std::ios_base *)((char *)&v55 + *(_QWORD *)(v29 - 24));
  if (v30[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v30);
    v31 = std::locale::use_facet(&v65, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 32);
    std::locale::~locale(&v65);
    v29 = v55;
  }
  v30[1].__fmtflags_ = 48;
  v32 = v54;
LABEL_56:
  *(_QWORD *)((char *)v57 + *(_QWORD *)(v29 - 24)) = v32;
LABEL_57:
  std::ostream::operator<<();
  if ((v63 & 0x10) != 0)
  {
    v49 = *((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1) < v60)
    {
      *((_QWORD *)&v62 + 1) = v60;
      v49 = v60;
    }
    v46 = v59;
    v47 = v49 - (_QWORD)v59;
    if ((uint64_t)(v49 - (_QWORD)v59) >= 0)
      goto LABEL_66;
LABEL_79:
    __break(1u);
LABEL_80:
    abort();
  }
  if ((v63 & 8) == 0)
  {
    v46 = 0;
    v47 = 0;
    a1[23] = 0;
    v48 = a1;
    if (a1)
      goto LABEL_74;
    goto LABEL_73;
  }
  v46 = (char *)v57[0];
  v47 = v58 - v57[0];
  if (v58 - v57[0] < 0)
    goto LABEL_79;
LABEL_66:
  if (v47 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_80;
  if (v47 <= 0x16)
  {
    a1[23] = v47;
    v48 = &a1[v47];
    if (a1 > v46)
      goto LABEL_74;
LABEL_73:
    if (v48 <= v46)
      goto LABEL_74;
    goto LABEL_79;
  }
  v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v47 | 7) != 0x17)
    v50 = v47 | 7;
  v51 = v50 + 1;
  v52 = (char *)operator new(v50 + 1);
  *((_QWORD *)a1 + 1) = v47;
  *((_QWORD *)a1 + 2) = v51 | 0x8000000000000000;
  *(_QWORD *)a1 = v52;
  a1 = v52;
  v48 = &v52[v47];
  if (v52 <= v46)
    goto LABEL_73;
LABEL_74:
  if (v47)
    memmove(a1, v46, v47);
  *v48 = 0;
  v55 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v55 + *(_QWORD *)(v55 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v56 = v15 + 16;
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19AEBAED8](v64);
}

WTF::Int128Impl *WTF::Int128Impl::Int128Impl(WTF::Int128Impl *this, float a2)
{
  float v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (a2 >= 0.0)
  {
    if (ldexpf(1.0, 64) <= a2)
    {
      v9 = (unint64_t)ldexpf(a2, -64);
      *(_QWORD *)this = (unint64_t)(float)(a2 - ldexpf((float)v9, 64));
      *((_QWORD *)this + 1) = v9;
    }
    else
    {
      *(_QWORD *)this = (unint64_t)a2;
      *((_QWORD *)this + 1) = 0;
    }
    return this;
  }
  else
  {
    v4 = -a2;
    if (ldexpf(1.0, 64) <= (float)-a2)
    {
      v7 = (unint64_t)ldexpf(v4, -64);
      v4 = v4 - ldexpf((float)v7, 64);
      v5 = ~v7;
    }
    else
    {
      v5 = -1;
    }
    if ((unint64_t)v4)
      v8 = v5;
    else
      v8 = v5 + 1;
    *(_QWORD *)this = -(uint64_t)(unint64_t)v4;
    *((_QWORD *)this + 1) = v8;
    return this;
  }
}

{
  float v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (a2 >= 0.0)
  {
    if (ldexpf(1.0, 64) <= a2)
    {
      v9 = (unint64_t)ldexpf(a2, -64);
      *(_QWORD *)this = (unint64_t)(float)(a2 - ldexpf((float)v9, 64));
      *((_QWORD *)this + 1) = v9;
    }
    else
    {
      *(_QWORD *)this = (unint64_t)a2;
      *((_QWORD *)this + 1) = 0;
    }
    return this;
  }
  else
  {
    v4 = -a2;
    if (ldexpf(1.0, 64) <= (float)-a2)
    {
      v7 = (unint64_t)ldexpf(v4, -64);
      v4 = v4 - ldexpf((float)v7, 64);
      v5 = ~v7;
    }
    else
    {
      v5 = -1;
    }
    if ((unint64_t)v4)
      v8 = v5;
    else
      v8 = v5 + 1;
    *(_QWORD *)this = -(uint64_t)(unint64_t)v4;
    *((_QWORD *)this + 1) = v8;
    return this;
  }
}

WTF::Int128Impl *WTF::Int128Impl::Int128Impl(WTF::Int128Impl *this, long double a2)
{
  uint64_t v3;

  *((_QWORD *)this + 1) = v3;
  return this;
}

{
  uint64_t v3;

  *((_QWORD *)this + 1) = v3;
  return this;
}

{
  long double v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (a2 >= 0.0)
  {
    if (ldexp(1.0, 64) <= a2)
    {
      v9 = (unint64_t)ldexp(a2, -64);
      *(_QWORD *)this = (unint64_t)(a2 - ldexp((double)v9, 64));
      *((_QWORD *)this + 1) = v9;
    }
    else
    {
      *(_QWORD *)this = (unint64_t)a2;
      *((_QWORD *)this + 1) = 0;
    }
    return this;
  }
  else
  {
    v4 = -a2;
    if (ldexp(1.0, 64) <= -a2)
    {
      v7 = (unint64_t)ldexp(v4, -64);
      v4 = v4 - ldexp((double)v7, 64);
      v5 = ~v7;
    }
    else
    {
      v5 = -1;
    }
    if ((unint64_t)v4)
      v8 = v5;
    else
      v8 = v5 + 1;
    *(_QWORD *)this = -(uint64_t)(unint64_t)v4;
    *((_QWORD *)this + 1) = v8;
    return this;
  }
}

{
  long double v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (a2 >= 0.0)
  {
    if (ldexp(1.0, 64) <= a2)
    {
      v9 = (unint64_t)ldexp(a2, -64);
      *(_QWORD *)this = (unint64_t)(a2 - ldexp((double)v9, 64));
      *((_QWORD *)this + 1) = v9;
    }
    else
    {
      *(_QWORD *)this = (unint64_t)a2;
      *((_QWORD *)this + 1) = 0;
    }
    return this;
  }
  else
  {
    v4 = -a2;
    if (ldexp(1.0, 64) <= -a2)
    {
      v7 = (unint64_t)ldexp(v4, -64);
      v4 = v4 - ldexp((double)v7, 64);
      v5 = ~v7;
    }
    else
    {
      v5 = -1;
    }
    if ((unint64_t)v4)
      v8 = v5;
    else
      v8 = v5 + 1;
    *(_QWORD *)this = -(uint64_t)(unint64_t)v4;
    *((_QWORD *)this + 1) = v8;
    return this;
  }
}

uint64_t WTF::`anonymous namespace'::MakeInt128FromFloat<double>(long double a1)
{
  long double v2;
  unint64_t v4;
  long double v5;

  if (a1 >= 0.0)
  {
    if (ldexp(1.0, 64) <= a1)
    {
      v5 = ldexp(a1, -64);
      return (unint64_t)(a1 - ldexp((double)(unint64_t)v5, 64));
    }
    else
    {
      return (unint64_t)a1;
    }
  }
  else
  {
    v2 = -a1;
    if (ldexp(1.0, 64) <= -a1)
    {
      v4 = (unint64_t)ldexp(v2, -64);
      v2 = v2 - ldexp((double)v4, 64);
    }
    return -(uint64_t)(unint64_t)v2;
  }
}

unint64_t WTF::operator/(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  __int128 v22;

  v4 = 0;
  if (a1)
    v5 = ~a2;
  else
    v5 = -a2;
  if (a2 >= 0)
    v6 = a1;
  else
    v6 = -(uint64_t)a1;
  if (a2 >= 0)
    v5 = a2;
  if (a3)
    v7 = ~a4;
  else
    v7 = -a4;
  if (a4 >= 0)
    v8 = a3;
  else
    v8 = -(uint64_t)a3;
  if (a4 >= 0)
    v7 = a4;
  v9 = v6 < v8;
  if (v5 != v7)
    v9 = v5 < v7;
  if (!v9)
  {
    if (v7 == v5 && v8 == v6)
    {
      v4 = 1;
      goto LABEL_42;
    }
    v11 = __clz(v5) ^ 0x7F;
    v12 = 63 - __clz(v6);
    if (v5)
      v12 = v11;
    v13 = __clz(v7) - 127;
    v14 = __clz(v8) - 63;
    if (v7)
      v15 = v13;
    else
      v15 = v14;
    v16 = v15 + v12;
    if (v15 + v12 < 64)
    {
      if (v16)
      {
        if (v16 < 0)
        {
          v4 = 0;
          goto LABEL_42;
        }
        v7 = (v8 >> -(char)v16) | (v7 << v16);
        v8 <<= v16;
      }
    }
    else
    {
      v7 = v8 << v16;
      v8 = 0;
    }
    v4 = 0;
    v17 = 0;
    v18 = v12 + v15 + 1;
    do
    {
      v19 = v17 | (v4 >> 63);
      v4 *= 2;
      v17 = 2 * v19;
      v20 = v6 >= v8;
      if (v5 != v7)
        v20 = v5 >= v7;
      v21 = (__PAIR128__(v5, v6) - __PAIR128__(v7, v8)) >> 64;
      if (v20)
      {
        v4 |= 1uLL;
        v6 -= v8;
        v5 = v21;
      }
      *((_QWORD *)&v22 + 1) = v7;
      *(_QWORD *)&v22 = v8;
      v8 = v22 >> 1;
      v7 >>= 1;
      --v18;
    }
    while (v18);
  }
LABEL_42:
  if ((unint64_t)a2 >> 63 == (unint64_t)a4 >> 63)
    return v4;
  else
    return -(uint64_t)v4;
}

unint64_t WTF::operator%(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  __int128 v18;

  if (a1)
    v4 = ~a2;
  else
    v4 = -a2;
  if (a2 >= 0)
    v5 = a1;
  else
    v5 = -(uint64_t)a1;
  if (a2 >= 0)
    v4 = a2;
  if (a3)
    v6 = ~a4;
  else
    v6 = -a4;
  if (a4 >= 0)
    v7 = a3;
  else
    v7 = -(uint64_t)a3;
  if (a4 >= 0)
    v6 = a4;
  v8 = v5 < v7;
  if (v4 != v6)
    v8 = v4 < v6;
  if (!v8)
  {
    if (v6 == v4 && v7 == v5)
    {
      v5 = 0;
      goto LABEL_41;
    }
    v10 = __clz(v4) ^ 0x7F;
    v11 = 63 - __clz(v5);
    if (!v4)
      v10 = v11;
    v12 = __clz(v6) - 127;
    v13 = __clz(v7) - 63;
    if (!v6)
      v12 = v13;
    v14 = v12 + v10;
    if (v12 + v10 < 64)
    {
      if (v14)
      {
        if (v14 < 0)
          goto LABEL_41;
        v6 = (v7 >> -(char)v14) | (v6 << v14);
        v7 <<= v14;
      }
    }
    else
    {
      v6 = v7 << v14;
      v7 = 0;
    }
    v15 = v10 + v12 + 1;
    do
    {
      v16 = v5 >= v7;
      if (v4 != v6)
        v16 = v4 >= v6;
      v17 = (__PAIR128__(v4 - v6, v5) - v7) >> 64;
      if (v16)
      {
        v5 -= v7;
        v4 = v17;
      }
      *((_QWORD *)&v18 + 1) = v6;
      *(_QWORD *)&v18 = v7;
      v7 = v18 >> 1;
      v6 >>= 1;
      --v15;
    }
    while (v15);
  }
LABEL_41:
  if (a2 >= 0)
    return v5;
  else
    return -(uint64_t)v5;
}

uint64_t *WTF::operator<<(uint64_t *result, unint64_t a2, int64_t a3)
{
  int64_t v3;
  unint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned __int8 v7;
  std::string::size_type v8;
  BOOL v9;
  const std::string::value_type *p_p;
  const char *v11;
  unsigned __int8 v12;
  int64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  const std::ios_base *v24;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v26;
  int v27;
  const std::ios_base *v28;
  std::ios_base::fmtflags v29;
  const std::locale::facet *v31;
  std::string::value_type v32;
  const std::ios_base *v33;
  std::ios_base::fmtflags v34;
  const std::locale::facet *v35;
  std::string::size_type v36;
  const std::locale::facet *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  int v41;
  std::string::size_type v42;
  const std::ios_base *v43;
  std::ios_base::fmtflags v44;
  const std::locale::facet *v45;
  void *__p;
  std::string::size_type v47;
  unsigned __int8 v48;
  std::string v49;

  v3 = a3;
  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 8);
  memset(&v49, 0, sizeof(v49));
  if ((v6 & 0x48) == 0)
  {
    if (a3 < 0)
    {
      v11 = "-";
      v12 = 45;
      if (&v49 > (std::string *)"-")
        goto LABEL_10;
    }
    else
    {
      if ((v6 & 0x800) == 0)
        goto LABEL_11;
      v11 = "+";
      v12 = 43;
      if (&v49 > (std::string *)"+")
      {
LABEL_10:
        LOWORD(v49.__r_.__value_.__l.__data_) = v12;
        *((_BYTE *)&v49.__r_.__value_.__s + 23) = 1;
LABEL_11:
        v13 = -a3;
        if (a2)
          v13 = ~a3;
        if (a3 < 0)
        {
          a2 = -(uint64_t)a2;
          a3 = v13;
        }
        v7 = v48;
        if (((char)v48 & 0x80000000) == 0)
          goto LABEL_3;
        goto LABEL_16;
      }
    }
    if ((char *)&v49.__r_.__value_.__l.__data_ + 1 > v11)
      goto LABEL_84;
    goto LABEL_10;
  }
  v7 = v48;
  if (((char)v48 & 0x80000000) == 0)
  {
LABEL_3:
    v8 = v7;
    v9 = v7 == 0;
    p_p = (const std::string::value_type *)&__p;
    goto LABEL_18;
  }
LABEL_16:
  p_p = (const std::string::value_type *)__p;
  v8 = v47;
  v9 = v47 == 0;
  if (!__p && v47)
    goto LABEL_84;
LABEL_18:
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = 22;
  else
    v14 = (v49.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    size = v49.__r_.__value_.__l.__size_;
  if (v14 - size < v8)
  {
    std::string::__grow_by_and_replace(&v49, v14, size + v8 - v14, size, size, 0, v8, p_p);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v9)
  {
LABEL_35:
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v49;
  else
    v16 = (std::string *)v49.__r_.__value_.__r.__words[0];
  result = (uint64_t *)((char *)v16 + size);
  if ((char *)v16 + size <= p_p && (char *)result + v8 > p_p)
  {
LABEL_84:
    __break(1u);
    return result;
  }
  memmove(result, p_p, v8);
  v17 = size + v8;
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&v49.__r_.__value_.__s + 23) = v17 & 0x7F;
    v16->__r_.__value_.__s.__data_[v17] = 0;
    goto LABEL_35;
  }
  v49.__r_.__value_.__l.__size_ = size + v8;
  v16->__r_.__value_.__s.__data_[v17] = 0;
  if ((char)v48 < 0)
LABEL_36:
    operator delete(__p);
LABEL_37:
  v18 = *v5;
  v19 = (char *)v5 + *(_QWORD *)(*v5 - 24);
  v20 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v19 + 3) = 0;
  v21 = v49.__r_.__value_.__l.__size_;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v22 = v49.__r_.__value_.__l.__size_;
  v23 = v20 - v22;
  if (v20 <= v22)
    goto LABEL_70;
  if ((v6 & 0xB0) != 0x10)
  {
    if ((v6 & 0xB0) == 0x20)
    {
      v24 = (const std::ios_base *)((char *)v5 + *(_QWORD *)(v18 - 24));
      fmtflags = v24[1].__fmtflags_;
      if (fmtflags == -1)
      {
        std::ios_base::getloc(v24);
        v26 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
        fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 32);
        std::locale::~locale((std::locale *)&__p);
        v24[1].__fmtflags_ = fmtflags;
      }
      std::string::append(&v49, v23, fmtflags);
      goto LABEL_70;
    }
    v33 = (const std::ios_base *)((char *)v5 + *(_QWORD *)(v18 - 24));
    v34 = v33[1].__fmtflags_;
    if (v34 == -1)
    {
      std::ios_base::getloc(v33);
      v35 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 32);
      std::locale::~locale((std::locale *)&__p);
      v33[1].__fmtflags_ = v34;
    }
    v32 = v34;
    goto LABEL_58;
  }
  if ((v6 & 0x48) == 0)
  {
    if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v41 = *v49.__r_.__value_.__l.__data_;
      if (v41 != 43 && v41 != 45)
        goto LABEL_47;
    }
    else
    {
      v21 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      if (v49.__r_.__value_.__s.__data_[0] != 45 && v49.__r_.__value_.__s.__data_[0] != 43)
        goto LABEL_47;
    }
    v42 = v20 - v21;
    v43 = (const std::ios_base *)((char *)v5 + *(_QWORD *)(v18 - 24));
    v44 = v43[1].__fmtflags_;
    if (v44 == -1)
    {
      std::ios_base::getloc(v43);
      v45 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
      v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
      std::locale::~locale((std::locale *)&__p);
      v43[1].__fmtflags_ = v44;
    }
    v32 = v44;
    v36 = 1;
    v38 = v42;
    goto LABEL_69;
  }
LABEL_47:
  v27 = v6 & 0x24A;
  v28 = (const std::ios_base *)((char *)v5 + *(_QWORD *)(v18 - 24));
  v29 = v28[1].__fmtflags_;
  if (v27 == 520 && (v4 | v3) != 0)
  {
    if (v29 == -1)
    {
      std::ios_base::getloc(v28);
      v37 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
      v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 32);
      std::locale::~locale((std::locale *)&__p);
      v28[1].__fmtflags_ = v29;
    }
    v32 = v29;
    v36 = 2;
    goto LABEL_68;
  }
  if (v29 == -1)
  {
    std::ios_base::getloc(v28);
    v31 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
    v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 32);
    std::locale::~locale((std::locale *)&__p);
    v28[1].__fmtflags_ = v29;
  }
  v32 = v29;
LABEL_58:
  v36 = 0;
LABEL_68:
  v38 = v23;
LABEL_69:
  std::string::insert(&v49, v36, v38, v32);
LABEL_70:
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v49;
  else
    v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v40 = v49.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:sn180100]<char,std::char_traits<char>>(v5, (uint64_t)v39, v40);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  return v5;
}

void WTF::printInternal(WTF *this, unint64_t a2, unsigned __int128 a3)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unsigned __int128 v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *__src;
  int v33;
  unsigned int v34;
  _QWORD v35[15];

  v4 = 0;
  v35[14] = *MEMORY[0x1E0C80C00];
  do
  {
    *((_QWORD *)&v6 + 1) = a3;
    *(_QWORD *)&v6 = a2;
    v5 = v6 >> 1;
    v7 = v5 + ((unint64_t)a3 >> 1);
    if (__CFADD__(v5, (unint64_t)a3 >> 1))
      ++v7;
    v8 = __PAIR128__((unint64_t)a3 >> 1, v5) - v7 % 5;
    v9 = a2 <= 9;
    *(_QWORD *)&a3 = (v8 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
    *((_BYTE *)&v35[13] + v4-- + 7) = (a2 - 2 * v8) | 0x30;
    a2 = 0xCCCCCCCCCCCCCCCDLL * v8;
  }
  while (!v9);
  if (v4 + 50 >= 51)
    __break(1u);
  __src = v35;
  v10 = -v4;
  v33 = 50;
  v34 = -(int)v4;
  if ((unint64_t)(v4 + 50) < 0x33)
  {
    v11 = v35;
    if (!v4)
    {
      v12 = v10;
      if ((_DWORD)v10 == 50)
        goto LABEL_12;
      goto LABEL_29;
    }
  }
  else
  {
    if ((unint64_t)-v4 >> 32)
      goto LABEL_35;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)-v4);
    v33 = -(int)v4;
    __src = v11;
  }
  memcpy(v11, (char *)&v35[14] + v4, -v4);
  v12 = v34;
  if (v34 == v33)
  {
LABEL_12:
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12 + 1)
      v15 = v12 + 1;
    else
      v15 = v14;
    v16 = __src;
    if (v15 < 0x33)
    {
      __src = v35;
      memcpy(v35, v16, v12);
      if (v35 == v16)
      {
LABEL_27:
        v24 = (char *)__src + v34;
        goto LABEL_30;
      }
LABEL_23:
      if (v16)
      {
        if (__src == v16)
          __src = 0;
        WTF::fastFree((unint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
      }
      goto LABEL_27;
    }
    if (!HIDWORD(v15))
    {
      __src = (_QWORD *)WTF::fastMalloc((WTF *)v15);
      memcpy(__src, v16, v12);
      if (v35 == v16)
        goto LABEL_27;
      goto LABEL_23;
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x197ADD4A0);
  }
LABEL_29:
  v24 = (char *)__src + v12;
LABEL_30:
  *v24 = 0;
  WTF::PrintStream::printf(this, "%s", (const char *)__src);
  if (v35 != __src)
  {
    if (__src)
      WTF::fastFree((unint64_t)__src, v25, v26, v27, v28, v29, v30, v31);
  }
}

void WTF::printInternal(WTF *this, uint64_t a2, unsigned __int128 a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unsigned __int128 v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *__src;
  int v36;
  unsigned int v37;
  _QWORD v38[15];

  v38[14] = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x8000000000000000) == 0)
  {
    WTF::printInternal(this, a2, a3);
    return;
  }
  v5 = 0;
  v6 = -a2;
  v7 = (unsigned __int128)-(__int128)__PAIR128__(v3, a2) >> 64;
  do
  {
    *((_QWORD *)&v9 + 1) = v7;
    *(_QWORD *)&v9 = v6;
    v8 = v9 >> 1;
    v10 = v8 + (v7 >> 1);
    if (__CFADD__(v8, v7 >> 1))
      ++v10;
    v11 = __PAIR128__(v7 >> 1, v8) - v10 % 5;
    v12 = v6 <= 9;
    v7 = (v11 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
    *((_BYTE *)&v38[13] + v5-- + 7) = (v6 - 2 * v11) | 0x30;
    v6 = 0xCCCCCCCCCCCCCCCDLL * v11;
  }
  while (!v12);
  if (v5 + 50 >= 51)
    __break(1u);
  __src = v38;
  v13 = -v5;
  v36 = 50;
  v37 = -(int)v5;
  if ((unint64_t)(v5 + 50) < 0x33)
  {
    v14 = v38;
    if (!v5)
    {
      v15 = v13;
      if ((_DWORD)v13 == 50)
        goto LABEL_14;
      goto LABEL_31;
    }
  }
  else
  {
    if ((unint64_t)-v5 >> 32)
      goto LABEL_37;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)-v5);
    v36 = -(int)v5;
    __src = v14;
  }
  memcpy(v14, (char *)&v38[14] + v5, -v5);
  v15 = v37;
  if (v37 == v36)
  {
LABEL_14:
    v16 = v15 + (v15 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v15 + 1)
      v18 = v15 + 1;
    else
      v18 = v17;
    v19 = __src;
    if (v18 < 0x33)
    {
      __src = v38;
      memcpy(v38, v19, v15);
      if (v38 == v19)
      {
LABEL_29:
        v27 = (char *)__src + v37;
        goto LABEL_32;
      }
LABEL_25:
      if (v19)
      {
        if (__src == v19)
          __src = 0;
        WTF::fastFree((unint64_t)v19, v20, v21, v22, v23, v24, v25, v26);
      }
      goto LABEL_29;
    }
    if (!HIDWORD(v18))
    {
      __src = (_QWORD *)WTF::fastMalloc((WTF *)v18);
      memcpy(__src, v19, v15);
      if (v38 == v19)
        goto LABEL_29;
      goto LABEL_25;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197ADD74CLL);
  }
LABEL_31:
  v27 = (char *)__src + v15;
LABEL_32:
  *v27 = 0;
  WTF::PrintStream::printf(this, "-%s", (const char *)__src);
  if (v38 != __src)
  {
    if (__src)
      WTF::fastFree((unint64_t)__src, v28, v29, v30, v31, v32, v33, v34);
  }
}

_QWORD *std::__put_character_sequence[abi:sn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  size_t v15;
  std::locale::__imp *p_b;
  uint64_t v17;
  uint64_t v18;
  void *locale;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x19AEBAC68](v23, a1);
  if (!v23[0])
    goto LABEL_32;
  v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v7 = *((_QWORD *)v6 + 5);
  v8 = a2 + a3;
  if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
    v9 = a2 + a3;
  else
    v9 = a2;
  v10 = *((_DWORD *)v6 + 36);
  if (v10 == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v11 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&__b);
    *((_DWORD *)v6 + 36) = v10;
    if (!v7)
      goto LABEL_31;
  }
  else if (!v7)
  {
    goto LABEL_31;
  }
  v12 = *((_QWORD *)v6 + 3);
  v13 = v12 <= a3;
  v14 = v12 - a3;
  if (v13)
    v15 = 0;
  else
    v15 = v14;
  if (v9 - a2 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
  {
    goto LABEL_31;
  }
  if ((uint64_t)v15 >= 1)
  {
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_b = (std::locale::__imp *)operator new(v17 + 1);
      v25 = v15;
      v26 = v18 | 0x8000000000000000;
      __b.__locale_ = p_b;
    }
    else
    {
      HIBYTE(v26) = v15;
      p_b = (std::locale::__imp *)&__b;
    }
    memset(p_b, v10, v15);
    *((_BYTE *)p_b + v15) = 0;
    if (v26 >= 0)
      locale = &__b;
    else
      locale = __b.__locale_;
    v20 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v15);
    v21 = v20;
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      if (v20 != v15)
        goto LABEL_31;
      goto LABEL_28;
    }
    operator delete(__b.__locale_);
    if (v21 != v15)
    {
LABEL_31:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
      goto LABEL_32;
    }
  }
LABEL_28:
  if (v8 - v9 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
  {
    goto LABEL_31;
  }
  *((_QWORD *)v6 + 3) = 0;
LABEL_32:
  MEMORY[0x19AEBAC74](v23);
  return a1;
}

void WTF::JSONImpl::Value::operator delete(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  switch(*((_DWORD *)this + 1))
  {
    case 0:
    case 1:
    case 2:
    case 3:
      goto LABEL_2;
    case 4:
      goto LABEL_13;
    case 5:
      WTF::JSONImpl::Object::~Object(this, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 6:
      v10 = *((unsigned int *)this + 7);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)*((_QWORD *)this + 2);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
            WTF::RefCounted<WTF::JSONImpl::Value>::deref();
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v14 = *((_QWORD *)this + 2);
      if (v14)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      if (*((_DWORD *)this + 1) != 4)
        goto LABEL_2;
LABEL_13:
      v15 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
        v9 = this;
      }
      else
      {
LABEL_2:
        v9 = this;
      }
LABEL_3:
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x197ADDAA4);
  }
}

double WTF::JSONImpl::Value::null@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)&result = 1;
  *v3 = 1;
  *a1 = v3;
  return result;
}

double WTF::JSONImpl::Value::create@<D0>(WTF::JSONImpl::Value *this@<X0>, uint64_t *a2@<X8>)
{
  char v2;
  uint64_t v4;
  double result;

  v2 = (char)this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)v4 = 0x100000001;
  *(_BYTE *)(v4 + 8) = v2;
  *a2 = v4;
  return result;
}

{
  int v2;
  uint64_t v4;
  double result;

  v2 = (int)this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)&result = 0x300000001;
  *(_QWORD *)v4 = 0x300000001;
  *(double *)(v4 + 8) = (double)v2;
  *a2 = v4;
  return result;
}

double WTF::JSONImpl::Value::create@<D0>(double a1@<D0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)v5 = 0x200000001;
  *(double *)(v5 + 8) = a1;
  *a2 = v5;
  return result;
}

_QWORD *WTF::JSONImpl::Value::create@<X0>(WTF::JSONImpl::Value *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v6;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = 0x400000001;
  v6 = *(_DWORD **)this;
  result[1] = *(_QWORD *)this;
  if (v6)
    *v6 += 2;
  *a2 = result;
  return result;
}

void WTF::JSONImpl::Value::parseJSON(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;

  if ((a2 & 0xFF00000000) == 0)
  {
    v24 = 0uLL;
    v11 = v23;
    v18 = (unsigned __int16 *)v24;
    if ((_QWORD)v24 && *((_QWORD *)&v24 + 1))
    {
      v19 = 2 * *((_QWORD *)&v24 + 1);
      do
      {
        v20 = *v18;
        v15 = v20 > 0x20;
        v21 = (1 << v20) & 0x100002600;
        if (v15 || v21 == 0)
          goto LABEL_20;
        ++v18;
        v19 -= 2;
      }
      while (v19);
    }
LABEL_18:
    *a3 = v11;
    return;
  }
  v24 = 0uLL;
  v11 = v23;
  v12 = (unsigned __int8 *)v24;
  if (!(_QWORD)v24)
    goto LABEL_18;
  v13 = *((_QWORD *)&v24 + 1);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_18;
  while (1)
  {
    v14 = *v12;
    v15 = v14 > 0x20;
    v16 = (1 << v14) & 0x100002600;
    if (v15 || v16 == 0)
      break;
    ++v12;
    if (!--v13)
      goto LABEL_18;
  }
LABEL_20:
  *a3 = 0;
  if (v11)
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v11, v4, v5, v6, v7, v8, v9, v10);
}

void WTF::JSONImpl::`anonymous namespace'::buildValue<unsigned char>(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  int v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD **v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  __int128 v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  int v60;
  __int128 v61;
  WTF::AtomStringImpl *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  WTF::StringImpl *v107[2];
  char v108;

  if (a5 >= 1001)
  {
LABEL_2:
    *a1 = 0;
    return;
  }
  v105 = 0;
  v106 = 0;
  v104 = 0uLL;
  {
    case 0u:
      v13 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v13 = 0x500000001;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      v14 = (uint64_t *)(v13 + 24);
      v23 = (a5 + 1);
      while (2)
      {
        if (v22 == 4)
        {
          v103 = 0;
          v32 = v104;
          if ((uint64_t)v104 - v105 <= 1)
            goto LABEL_17;
          v33 = (WTF::AtomStringImpl *)(~(v105 + 1) + v104);
          if ((uint64_t)v33 >= 0)
          {
            {
              if (v34 == 10)
              {
                if (v102)
                {
                  v101 = v102;
                  v102 = 0;
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), (WTF::AtomStringImpl *)&v103, (const WTF::StringImpl *)&v101, v17, v18, v19, v20, v21, (uint64_t)v107);
                  if (v108)
                  {
                    v42 = *(unsigned int *)(v13 + 36);
                    if ((_DWORD)v42 == *(_DWORD *)(v13 + 32))
                    {
                      v43 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v42 + 1, (unint64_t)&v103);
                      v42 = *(unsigned int *)(v13 + 36);
                      v44 = *(_QWORD *)(v13 + 24);
                      v45 = *v43;
                      if (*v43)
                        *v45 += 2;
                      *(_QWORD *)(v44 + 8 * v42) = v45;
                    }
                    else
                    {
                      v48 = *v14;
                      v49 = v103;
                      if (v103)
                        *(_DWORD *)v103 += 2;
                      *(_QWORD *)(v48 + 8 * v42) = v49;
                    }
                    *(_DWORD *)(v13 + 36) = v42 + 1;
                  }
                  v50 = v101;
                  v101 = 0;
                  if (v50)
                    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v50, v35, v36, v37, v38, v39, v40, v41);
                  v22 = v51;
                  if (v51 == 1
                    || v51 == 9
                  {
                    v46 = 0;
                    v47 = v103;
                    v103 = 0;
                    if (!v47)
                      goto LABEL_35;
                  }
                  else
                  {
                    *a1 = 0;
                    v46 = 1;
                    v47 = v103;
                    v103 = 0;
                    if (!v47)
                      goto LABEL_35;
                  }
                }
                else
                {
                  v22 = 10;
                  *a1 = 0;
                  v46 = 1;
                  v47 = v103;
                  v103 = 0;
                  if (!v47)
                    goto LABEL_35;
                }
              }
              else
              {
                v22 = v34;
                *a1 = 0;
                v46 = 1;
                v47 = v103;
                v103 = 0;
                if (!v47)
                  goto LABEL_35;
              }
LABEL_33:
              if (*(_DWORD *)v47 == 2)
              {
                WTF::StringImpl::~StringImpl(v47, v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
                if (v46)
                  goto LABEL_68;
                continue;
              }
              *(_DWORD *)v47 -= 2;
LABEL_35:
              if (v46)
                goto LABEL_68;
              continue;
            }
LABEL_17:
            *a1 = 0;
            v22 = 4;
            v46 = 1;
            v47 = v103;
            v103 = 0;
            if (!v47)
              goto LABEL_35;
            goto LABEL_33;
          }
LABEL_82:
          __break(1u);
        }
        else if (v22 == 1)
        {
LABEL_80:
          *a4 = v104;
          *a1 = v13;
        }
        else
        {
LABEL_67:
          *a1 = 0;
LABEL_68:
          WTF::RefCounted<WTF::JSONImpl::Value>::deref(v13, v15, v16, v17, v18, v19, v20, v21);
        }
        return;
      }
    case 2u:
      v13 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v13 = 0x600000001;
      *(_QWORD *)(v13 + 16) = 0;
      v52 = (_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 24) = 0;
      v53 = v104;
      v54 = (a5 + 1);
      v55 = v107[0];
      if (!v107[0])
        goto LABEL_67;
      while (1)
      {
        v103 = v55;
        v56 = *(unsigned int *)(v13 + 28);
        if ((_DWORD)v56 == *(_DWORD *)(v13 + 24))
        {
          v57 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v56 + 1, (unint64_t)&v103);
          v56 = *(unsigned int *)(v13 + 28);
          v58 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 16) + 8 * v56);
          v55 = *v57;
        }
        else
        {
          v58 = (WTF::StringImpl **)(*v52 + 8 * v56);
          v57 = &v103;
        }
        *v57 = 0;
        *v58 = v55;
        *(_DWORD *)(v13 + 28) = v56 + 1;
        v59 = v103;
        v103 = 0;
        if (v59)
          WTF::RefCounted<WTF::JSONImpl::Value>::deref((uint64_t)v59, v15, v16, v17, v18, v19, v20, v21);
        if (v60 != 9)
          break;
        v61 = v104;
        {
          v55 = v107[0];
          if (v107[0])
            continue;
        }
        goto LABEL_67;
      }
      if (v60 == 3)
        goto LABEL_80;
      goto LABEL_67;
    case 4u:
      v107[0] = 0;
      if ((uint64_t)v104 - v105 <= 1)
        goto LABEL_2;
      v62 = (WTF::AtomStringImpl *)(~(v105 + 1) + v104);
      if ((uint64_t)v62 < 0)
        goto LABEL_82;
      {
        v13 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v13 = 0x400000001;
        v77 = v107[0];
        *(WTF::StringImpl **)(v13 + 8) = v107[0];
        if (v77)
        {
          v78 = *(_DWORD *)v77;
          *(_DWORD *)v77 += 2;
          if (v78)
          {
            *(_DWORD *)v77 = v78;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
            WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
          }
        }
        goto LABEL_80;
      }
      *a1 = 0;
      if (v107[0])
      {
        if (*(_DWORD *)v107[0] == 2)
        {
          WTF::StringImpl::~StringImpl(v107[0], v63, v64, v65, v66, v67, v68, v69);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
        else
        {
          *(_DWORD *)v107[0] -= 2;
        }
      }
      return;
    case 5u:
      v79 = (unsigned __int8 *)(v104 - v105);
      if (v106 < (uint64_t)v104 - v105)
        goto LABEL_82;
      v80 = 0;
      if (!v79)
        goto LABEL_70;
      while (1)
      {
        v81 = *(unsigned __int8 *)(v105 + v80);
        if ((v81 - 9) >= 5 && v81 != 32)
          break;
        if (v79 == (unsigned __int8 *)++v80)
        {
          v80 = v104 - v105;
          break;
        }
      }
LABEL_70:
      v82 = (unsigned __int8 *)(v105 + v80);
      v107[0] = 0;
      v83 = fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v105 + v80), (unsigned __int8 *)v104, (unint64_t *)v107, 0x2E00000005);
      if (v83 == v82 || &v83[v80 - (_QWORD)v82] != v79)
        goto LABEL_2;
      v84 = v107[0];
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 0x200000001;
      *(_QWORD *)(v13 + 8) = v84;
      goto LABEL_80;
    case 6u:
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 0x100000001;
      *(_BYTE *)(v13 + 8) = 1;
      goto LABEL_80;
    case 7u:
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 0x100000001;
      *(_BYTE *)(v13 + 8) = 0;
      goto LABEL_80;
    case 8u:
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 1;
      goto LABEL_80;
    default:
      goto LABEL_2;
  }
}

void WTF::JSONImpl::`anonymous namespace'::buildValue<char16_t>(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD **v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  __int128 v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  WTF::StringImpl *v107[2];
  char v108;

  if (a5 >= 1001)
  {
LABEL_2:
    *a1 = 0;
    return;
  }
  v105 = 0;
  v106 = 0;
  v104 = 0uLL;
  {
    case 0u:
      v13 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v13 = 0x500000001;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      v14 = (uint64_t *)(v13 + 24);
      v23 = (a5 + 1);
      while (2)
      {
        if (v22 == 4)
        {
          v103 = 0;
          v32 = v104;
          if ((uint64_t)v104 - v105 <= 3)
            goto LABEL_17;
          v33 = v104 - (v105 + 2) - 2;
          if (v33 > -2)
          {
            {
              if (v34 == 10)
              {
                if (v102)
                {
                  v101 = v102;
                  v102 = 0;
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), (WTF::AtomStringImpl *)&v103, (const WTF::StringImpl *)&v101, v17, v18, v19, v20, v21, (uint64_t)v107);
                  if (v108)
                  {
                    v42 = *(unsigned int *)(v13 + 36);
                    if ((_DWORD)v42 == *(_DWORD *)(v13 + 32))
                    {
                      v43 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v42 + 1, (unint64_t)&v103);
                      v42 = *(unsigned int *)(v13 + 36);
                      v44 = *(_QWORD *)(v13 + 24);
                      v45 = *v43;
                      if (*v43)
                        *v45 += 2;
                      *(_QWORD *)(v44 + 8 * v42) = v45;
                    }
                    else
                    {
                      v48 = *v14;
                      v49 = v103;
                      if (v103)
                        *(_DWORD *)v103 += 2;
                      *(_QWORD *)(v48 + 8 * v42) = v49;
                    }
                    *(_DWORD *)(v13 + 36) = v42 + 1;
                  }
                  v50 = v101;
                  v101 = 0;
                  if (v50)
                    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v50, v35, v36, v37, v38, v39, v40, v41);
                  v22 = v51;
                  if (v51 == 1
                    || v51 == 9
                  {
                    v46 = 0;
                    v47 = v103;
                    v103 = 0;
                    if (!v47)
                      goto LABEL_35;
                  }
                  else
                  {
                    *a1 = 0;
                    v46 = 1;
                    v47 = v103;
                    v103 = 0;
                    if (!v47)
                      goto LABEL_35;
                  }
                }
                else
                {
                  v22 = 10;
                  *a1 = 0;
                  v46 = 1;
                  v47 = v103;
                  v103 = 0;
                  if (!v47)
                    goto LABEL_35;
                }
              }
              else
              {
                v22 = v34;
                *a1 = 0;
                v46 = 1;
                v47 = v103;
                v103 = 0;
                if (!v47)
                  goto LABEL_35;
              }
LABEL_33:
              if (*(_DWORD *)v47 == 2)
              {
                WTF::StringImpl::~StringImpl(v47, v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
                if (v46)
                  goto LABEL_68;
                continue;
              }
              *(_DWORD *)v47 -= 2;
LABEL_35:
              if (v46)
                goto LABEL_68;
              continue;
            }
LABEL_17:
            *a1 = 0;
            v22 = 4;
            v46 = 1;
            v47 = v103;
            v103 = 0;
            if (!v47)
              goto LABEL_35;
            goto LABEL_33;
          }
LABEL_83:
          __break(1u);
        }
        else if (v22 == 1)
        {
LABEL_81:
          *a4 = v104;
          *a1 = v13;
        }
        else
        {
LABEL_67:
          *a1 = 0;
LABEL_68:
          WTF::RefCounted<WTF::JSONImpl::Value>::deref(v13, v15, v16, v17, v18, v19, v20, v21);
        }
        return;
      }
    case 2u:
      v13 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v13 = 0x600000001;
      *(_QWORD *)(v13 + 16) = 0;
      v52 = (_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 24) = 0;
      v53 = v104;
      v54 = (a5 + 1);
      v55 = v107[0];
      if (!v107[0])
        goto LABEL_67;
      while (1)
      {
        v103 = v55;
        v56 = *(unsigned int *)(v13 + 28);
        if ((_DWORD)v56 == *(_DWORD *)(v13 + 24))
        {
          v57 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v56 + 1, (unint64_t)&v103);
          v56 = *(unsigned int *)(v13 + 28);
          v58 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 16) + 8 * v56);
          v55 = *v57;
        }
        else
        {
          v58 = (WTF::StringImpl **)(*v52 + 8 * v56);
          v57 = &v103;
        }
        *v57 = 0;
        *v58 = v55;
        *(_DWORD *)(v13 + 28) = v56 + 1;
        v59 = v103;
        v103 = 0;
        if (v59)
          WTF::RefCounted<WTF::JSONImpl::Value>::deref((uint64_t)v59, v15, v16, v17, v18, v19, v20, v21);
        if (v60 != 9)
          break;
        v61 = v104;
        {
          v55 = v107[0];
          if (v107[0])
            continue;
        }
        goto LABEL_67;
      }
      if (v60 == 3)
        goto LABEL_81;
      goto LABEL_67;
    case 4u:
      v107[0] = 0;
      if ((uint64_t)v104 - v105 <= 3)
        goto LABEL_2;
      v62 = v104 - (v105 + 2) - 2;
      if (v62 <= -2)
        goto LABEL_83;
      {
        v13 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v13 = 0x400000001;
        v77 = v107[0];
        *(WTF::StringImpl **)(v13 + 8) = v107[0];
        if (v77)
        {
          v78 = *(_DWORD *)v77;
          *(_DWORD *)v77 += 2;
          if (v78)
          {
            *(_DWORD *)v77 = v78;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
            WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
          }
        }
        goto LABEL_81;
      }
      *a1 = 0;
      if (v107[0])
      {
        if (*(_DWORD *)v107[0] == 2)
        {
          WTF::StringImpl::~StringImpl(v107[0], v63, v64, v65, v66, v67, v68, v69);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
        else
        {
          *(_DWORD *)v107[0] -= 2;
        }
      }
      return;
    case 5u:
      v79 = ((uint64_t)v104 - v105) >> 1;
      if (v106 < v79)
        goto LABEL_83;
      if ((_QWORD)v104 == v105)
      {
        v80 = 0;
      }
      else
      {
        v80 = 0;
        while (1)
        {
          v81 = *(unsigned __int16 *)(v105 + 2 * v80);
          if ((v81 - 9) >= 5 && v81 != 32)
            break;
          if (v79 == ++v80)
          {
            v80 = ((uint64_t)v104 - v105) >> 1;
            break;
          }
        }
      }
      v82 = (unsigned __int16 *)(v105 + 2 * v80);
      v107[0] = 0;
      v83 = fast_float::from_chars_advanced<double,char16_t>(v82, (unsigned __int16 *)(v105 + 2 * v79), (double *)v107, 0x2E00000005);
      if (v83 == v82 || v80 + v83 - v82 != v79)
        goto LABEL_2;
      v84 = v107[0];
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 0x200000001;
      *(_QWORD *)(v13 + 8) = v84;
      goto LABEL_81;
    case 6u:
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 0x100000001;
      *(_BYTE *)(v13 + 8) = 1;
      goto LABEL_81;
    case 7u:
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 0x100000001;
      *(_BYTE *)(v13 + 8) = 0;
      goto LABEL_81;
    case 8u:
      v13 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = 1;
      goto LABEL_81;
    default:
      goto LABEL_2;
  }
}

void WTF::JSONImpl::Value::toJSONString(WTF::JSONImpl::Value *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::StringImpl **a8@<X8>)
{
  const WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  char v63;

  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v60, (WTF::AtomStringImpl *)0x200, a2, a3, a4, a5, a6, a7);
  v17 = *((_DWORD *)this + 1);
  if (v17 >= 5)
  {
    if (v17 == 5)
    {
      WTF::JSONImpl::ObjectBase::writeJSONImpl(this, (WTF::StringBuilder *)&v60, v10, v11, v12, v13, v14, v15);
    }
    else
    {
      if (v17 != 6)
      {
        __break(0xC471u);
        return;
      }
      WTF::JSONImpl::ArrayBase::writeJSONImpl(this, (WTF::StringBuilder *)&v60, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    WTF::JSONImpl::Value::writeJSONImpl(this, (WTF::StringBuilder *)&v60, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
  }
  v25 = v60;
  if (v60)
    goto LABEL_19;
  if ((v62 & 0x80000000) == 0 && v61 && *((_DWORD *)v61 + 1) > v62 + (v62 >> 2))
  {
    if ((*((_BYTE *)v61 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v60, (WTF::AtomStringImpl *)v62, v19, v20, v21, v22, v23, v24);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v60, (WTF::AtomStringImpl *)v62, v19, v20, v21, v22, v23, v24);
    v33 = v60;
    v60 = v61;
    v61 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v60);
  v25 = v60;
  if (v60)
LABEL_19:
    *(_DWORD *)v25 += 2;
  *a8 = v25;
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      v43 = v60;
      v60 = 0;
      if (!v43)
        return;
      goto LABEL_26;
    }
    *(_DWORD *)v42 -= 2;
  }
  v43 = v60;
  v60 = 0;
  if (!v43)
    return;
LABEL_26:
  if (*(_DWORD *)v43 == 2)
  {
    WTF::StringImpl::~StringImpl(v43, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v43 -= 2;
  }
}

void WTF::JSONImpl::Value::writeJSON(WTF::JSONImpl::Value *this, WTF::StringBuilder *a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 1);
  if (v9 >= 5)
  {
    if (v9 == 5)
    {
      WTF::JSONImpl::ObjectBase::writeJSONImpl(this, a2, a3, a4, a5, a6, a7, a8);
    }
    else if (v9 == 6)
    {
      WTF::JSONImpl::ArrayBase::writeJSONImpl(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    WTF::JSONImpl::Value::writeJSONImpl(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t WTF::JSONImpl::Value::asBoolean(WTF::JSONImpl::Value *this)
{
  if (*((_DWORD *)this + 1) == 1)
    return *((unsigned __int8 *)this + 8) | 0x100u;
  else
    return 0;
}

uint64_t WTF::JSONImpl::Value::asDouble(WTF::JSONImpl::Value *this)
{
  if ((*((_DWORD *)this + 1) & 0xFFFFFFFE) == 2)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

uint64_t WTF::JSONImpl::Value::asInteger(WTF::JSONImpl::Value *this)
{
  if ((*((_DWORD *)this + 1) & 0xFFFFFFFE) == 2)
    return (int)*((double *)this + 1) | 0x100000000;
  else
    return 0;
}

uint64_t WTF::JSONImpl::Value::asString@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if (*(_DWORD *)(this + 4) == 4)
  {
    v2 = *(_DWORD **)(this + 8);
    if (v2)
      *v2 += 2;
    *a2 = v2;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void WTF::JSONImpl::Value::dump(WTF::JSONImpl::Value *this, WTF::PrintStream *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  float v15;
  char *v16;
  size_t v17;
  int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  const WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  _QWORD *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::JSONImpl::Value *v55;
  WTF *v56;
  uint64_t v57;
  WTF::PrintStream *v58;
  float v59;
  double v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  WTF::PrintStream *v68;
  float v69;
  WTF::AtomStringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::PrintStream *v107;
  float v108;
  uint64_t v109;
  int v110;
  WTF::JSONImpl::Value **v111;
  uint64_t v112;
  WTF::JSONImpl::Value *v113;
  WTF::PrintStream *v114;
  uint64_t v115;
  WTF::PrintStream *v116;
  float v117;
  _DWORD *v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  _DWORD *v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::AtomStringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  size_t v146;
  char *v147;
  char *v148;
  size_t v149;
  unsigned int v150;
  unsigned int v151;
  WTF::StringImpl *v152;
  _BYTE *v153;
  WTF *v154;
  const WTF::String *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  float v162;
  WTF::AtomStringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF *v180;
  const WTF::String *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  double v187;
  float v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  char v216;
  _OWORD __dst[7];
  __int128 v218;
  char __s[16];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  size_t __n[2];
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)this + 1))
  {
    case 0:
      goto LABEL_6;
    case 1:
      v18 = *((unsigned __int8 *)this + 8);
      v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      if (v18)
        v16 = "true";
      else
        v16 = "false";
      if (v18)
        v17 = 4;
      else
        v17 = 5;
      goto LABEL_81;
    case 2:
    case 3:
      v10 = *((_QWORD *)this + 1);
      if ((v10 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
      {
LABEL_6:
        v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
        v16 = "null";
        v17 = 4;
        goto LABEL_81;
      }
      v11 = (v10 >> 52) & 0x7FF;
      if ((_DWORD)v11 == 2047)
      {
        if ((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v12 = &__s[3];
        }
        else
        {
          v148 = __s;
          if ((v10 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v148 = &__s[1];
          }
          *(_QWORD *)v148 = 0x7974696E69666E49;
          v12 = v148 + 8;
        }
LABEL_107:
        *v12 = 0;
        v149 = (int)strlen(__s);
        memcpy(__dst, __s, v149);
        *((_BYTE *)__dst + v149) = 0;
        v150 = strlen((const char *)__dst);
        v151 = v150;
        HIDWORD(v218) = v150;
        if ((v150 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197ADF668);
        }
        if (v150)
        {
          WTF::tryFastCompactMalloc((WTF *)(v150 + 20), &v215);
          v152 = v215;
          if (!v215)
          {
            __break(0xC471u);
            JUMPOUT(0x197ADF670);
          }
          v153 = (char *)v215 + 20;
          *(_DWORD *)v215 = 2;
          *((_DWORD *)v152 + 1) = v151;
          *((_QWORD *)v152 + 1) = (char *)v152 + 20;
          *((_DWORD *)v152 + 4) = 4;
          v223 = __dst[4];
          v224 = __dst[5];
          v225 = __dst[6];
          *(_OWORD *)__n = v218;
          *(_OWORD *)__s = __dst[0];
          v220 = __dst[1];
          v221 = __dst[2];
          v222 = __dst[3];
          if (HIDWORD(v218))
          {
            if (HIDWORD(v218) == 1)
              *v153 = __s[0];
            else
              memcpy(v153, __s, HIDWORD(v218));
          }
        }
        else
        {
          v152 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        *(_QWORD *)__s = v152;
        v154 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::printInternal(v154, (WTF::PrintStream *)__s, v155, v156, v157, v158, v159, v160, v161, v162);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v170 = *(WTF::StringImpl **)__s;
        *(_QWORD *)__s = 0;
        if (!v170)
          return;
LABEL_133:
        if (*(_DWORD *)v170 == 2)
        {
          WTF::StringImpl::~StringImpl(v170, v163, v164, v165, v166, v167, v168, v169);
          WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
        }
        else
        {
          *(_DWORD *)v170 -= 2;
        }
        return;
      }
      v128 = v10 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v10 & 0x8000000000000000) != 0 && v128)
      {
        __s[0] = 45;
        v129 = &__s[1];
      }
      else
      {
        v129 = __s;
        if (!v128)
        {
          v12 = &__s[1];
          __s[0] = 48;
          goto LABEL_107;
        }
      }
      v145 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v10 & 0x800FFFFFFFFFFFFFLL, v11);
      v12 = WTF::dragonbox::detail::to_shortest(v145, v146, (uint64_t)v129, v147);
      goto LABEL_107;
    case 4:
      memset(__s, 0, sizeof(__s));
      LODWORD(v220) = 0;
      BYTE4(v220) = 1;
      v118 = (_DWORD *)*((_QWORD *)this + 1);
      if (v118)
        *v118 += 2;
      *(_QWORD *)&__dst[0] = v118;
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)__s, (const WTF::String *)__dst, a3, a4, a5, a6, a7, a8);
      v126 = *(WTF::StringImpl **)&__dst[0];
      *(_QWORD *)&__dst[0] = 0;
      if (!v126)
        goto LABEL_90;
      if (*(_DWORD *)v126 == 2)
      {
        WTF::StringImpl::~StringImpl(v126, v119, v120, v121, v122, v123, v124, v125);
        WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        v127 = *(_DWORD **)__s;
        if (*(_QWORD *)__s)
        {
LABEL_123:
          *v127 += 2;
          goto LABEL_124;
        }
      }
      else
      {
        *(_DWORD *)v126 -= 2;
LABEL_90:
        v127 = *(_DWORD **)__s;
        if (*(_QWORD *)__s)
          goto LABEL_123;
      }
      if ((v220 & 0x80000000) == 0
        && *(_QWORD *)&__s[8]
        && *(_DWORD *)(*(_QWORD *)&__s[8] + 4) > v220 + (v220 >> 2))
      {
        if ((*(_BYTE *)(*(_QWORD *)&__s[8] + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)__s, (WTF::AtomStringImpl *)v220, v120, v121, v122, v123, v124, v125);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)__s, (WTF::AtomStringImpl *)v220, v120, v121, v122, v123, v124, v125);
        v171 = *(WTF::StringImpl **)__s;
        *(_QWORD *)__s = *(_QWORD *)&__s[8];
        *(_QWORD *)&__s[8] = 0;
        if (v171)
        {
          if (*(_DWORD *)v171 == 2)
          {
            WTF::StringImpl::~StringImpl(v171, v138, v139, v140, v141, v142, v143, v144);
            WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
          }
          else
          {
            *(_DWORD *)v171 -= 2;
          }
        }
      }
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)__s);
      v127 = *(_DWORD **)__s;
      if (*(_QWORD *)__s)
        goto LABEL_123;
LABEL_124:
      *(_QWORD *)&__dst[0] = v127;
      v180 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::printInternal(v180, (WTF::PrintStream *)__dst, v181, v182, v183, v184, v185, v186, v187, v188);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v189 = *(WTF::StringImpl **)&__dst[0];
      *(_QWORD *)&__dst[0] = 0;
      if (!v189)
        goto LABEL_127;
      if (*(_DWORD *)v189 == 2)
      {
        WTF::StringImpl::~StringImpl(v189, v163, v164, v165, v166, v167, v168, v169);
        WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
        v190 = *(WTF::StringImpl **)&__s[8];
        *(_QWORD *)&__s[8] = 0;
        if (!v190)
          goto LABEL_132;
      }
      else
      {
        *(_DWORD *)v189 -= 2;
LABEL_127:
        v190 = *(WTF::StringImpl **)&__s[8];
        *(_QWORD *)&__s[8] = 0;
        if (!v190)
        {
LABEL_132:
          v170 = *(WTF::StringImpl **)__s;
          *(_QWORD *)__s = 0;
          if (!v170)
            return;
          goto LABEL_133;
        }
      }
      if (*(_DWORD *)v190 == 2)
      {
        WTF::StringImpl::~StringImpl(v190, v163, v164, v165, v166, v167, v168, v169);
        WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
        v170 = *(WTF::StringImpl **)__s;
        *(_QWORD *)__s = 0;
        if (!v170)
          return;
        goto LABEL_133;
      }
      *(_DWORD *)v190 -= 2;
      goto LABEL_132;
    case 5:
      v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      WTF::StringImpl::utf8ForCharacters("{", 1uLL, (uint64_t)__s, v21);
      WTF::printExpectedCStringHelper(v20, "StringView", __s);
      if (*(_DWORD *)&__s[8] != -1)
        ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[*(unsigned int *)&__s[8]])(__dst, __s);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v28 = *((unsigned int *)this + 9);
      if (!(_DWORD)v28)
        goto LABEL_67;
      v29 = 0;
      v30 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      v31 = &v30[v28];
      break;
    case 6:
      v106 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v107 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 32))(v106);
      WTF::StringImpl::utf8ForCharacters("[", 1uLL, (uint64_t)__s, v108);
      WTF::printExpectedCStringHelper(v107, "StringView", __s);
      if (*(_DWORD *)&__s[8] != -1)
        ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[*(unsigned int *)&__s[8]])(__dst, __s);
      (*(void (**)(uint64_t))(*(_QWORD *)v106 + 40))(v106);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v109 = *((unsigned int *)this + 7);
      if ((_DWORD)v109)
      {
        v110 = 0;
        v111 = (WTF::JSONImpl::Value **)*((_QWORD *)this + 2);
        v112 = 8 * v109;
        do
        {
          v113 = *v111;
          v114 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v115 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v114 + 32))(v114);
          v116 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 32))(v115);
          if (v110)
          {
            WTF::StringImpl::utf8ForCharacters(",", 1uLL, (uint64_t)__s, v117);
            WTF::printExpectedCStringHelper(v116, "StringView", __s);
            if (*(_DWORD *)&__s[8] != -1)
              ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[*(unsigned int *)&__s[8]])(__dst, __s);
          }
          else
          {
            WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)__s, v117);
            WTF::printExpectedCStringHelper(v116, "StringView", __s);
            if (*(_DWORD *)&__s[8] != -1)
              ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[*(unsigned int *)&__s[8]])(__dst, __s);
            v110 = 1;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v114 + 40))(v114);
          WTF::JSONImpl::Value::dump(v113, v114);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          ++v111;
          v112 -= 8;
        }
        while (v112);
      }
      v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      v16 = "]";
      goto LABEL_80;
    default:
      return;
  }
  while (2)
  {
    v32 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v32)
      goto LABEL_32;
    v33 = *((_DWORD *)v32 - 2);
    v34 = *((_DWORD *)*v30 + 4);
    if (v34 < 0x100)
      v35 = WTF::StringImpl::hashSlowCase(*v30);
    else
      v35 = v34 >> 8;
    for (i = 0; ; v35 = i + v37)
    {
      v37 = v35 & v33;
      v38 = (WTF *)v32[2 * v37];
      if (v38 == (WTF *)-1)
        goto LABEL_24;
      if (!v38)
        break;
      if (WTF::equal(v38, *v30, v22))
      {
        v32 += 2 * v37;
        goto LABEL_32;
      }
LABEL_24:
      ++i;
    }
    v39 = *((_QWORD *)this + 2);
    if (v39)
      v32 = (_QWORD *)(v39 + 16 * *(unsigned int *)(v39 - 4));
    else
      v32 = 0;
LABEL_32:
    memset(__s, 0, sizeof(__s));
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)__s, (const WTF::String *)v32, (uint64_t)v22, v23, v24, v25, v26, v27);
    v46 = *(WTF::StringImpl **)__s;
    if (*(_QWORD *)__s)
      goto LABEL_43;
    if ((v220 & 0x80000000) != 0
      || !*(_QWORD *)&__s[8]
      || *(_DWORD *)(*(_QWORD *)&__s[8] + 4) <= v220 + (v220 >> 2))
    {
      goto LABEL_42;
    }
    if ((*(_BYTE *)(*(_QWORD *)&__s[8] + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)__s, (WTF::AtomStringImpl *)v220, v40, v41, v42, v43, v44, v45);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)__s, (WTF::AtomStringImpl *)v220, v40, v41, v42, v43, v44, v45);
    v54 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = *(_QWORD *)&__s[8];
    *(_QWORD *)&__s[8] = 0;
    if (!v54)
    {
LABEL_42:
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)__s);
      v46 = *(WTF::StringImpl **)__s;
      if (!*(_QWORD *)__s)
        goto LABEL_44;
LABEL_43:
      *(_DWORD *)v46 += 2;
      goto LABEL_44;
    }
    if (*(_DWORD *)v54 != 2)
    {
      *(_DWORD *)v54 -= 2;
      goto LABEL_42;
    }
    WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)__s);
    v46 = *(WTF::StringImpl **)__s;
    if (*(_QWORD *)__s)
      goto LABEL_43;
LABEL_44:
    v215 = v46;
    v55 = (WTF::JSONImpl::Value *)v32[1];
    v56 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v57 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v56 + 32))(v56);
    v58 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    if (v29)
    {
      WTF::StringImpl::utf8ForCharacters(",", 1uLL, (uint64_t)__dst, v59);
      WTF::printExpectedCStringHelper(v58, "StringView", __dst);
      if (DWORD2(__dst[0]) != -1)
        ((void (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(__dst[0])])(&v216, __dst);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)__dst, v59);
      WTF::printExpectedCStringHelper(v58, "StringView", __dst);
      if (DWORD2(__dst[0]) != -1)
        ((void (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(__dst[0])])(&v216, __dst);
      v29 = 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    v60 = (*(double (**)(WTF *))(*(_QWORD *)v56 + 40))(v56);
    WTF::printInternal(v56, (WTF::PrintStream *)&v215, v61, v62, v63, v64, v65, v66, v60, v67);
    v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v56 + 32))(v56);
    WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)__dst, v69);
    WTF::printExpectedCStringHelper(v68, "StringView", __dst);
    if (DWORD2(__dst[0]) != -1)
      ((void (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(__dst[0])])(&v216, __dst);
    (*(void (**)(WTF *))(*(_QWORD *)v56 + 40))(v56);
    WTF::JSONImpl::Value::dump(v55, v56);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v71 = v215;
    v215 = 0;
    if (!v71)
    {
LABEL_55:
      v72 = *(WTF::StringImpl **)&__s[8];
      *(_QWORD *)&__s[8] = 0;
      if (v72)
        goto LABEL_58;
LABEL_60:
      v81 = *(WTF::StringImpl **)__s;
      *(_QWORD *)__s = 0;
      if (v81)
        goto LABEL_63;
      goto LABEL_18;
    }
    if (*(_DWORD *)v71 != 2)
    {
      *(_DWORD *)v71 -= 2;
      goto LABEL_55;
    }
    WTF::StringImpl::~StringImpl(v71, v70, (uint64_t)v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    v72 = *(WTF::StringImpl **)&__s[8];
    *(_QWORD *)&__s[8] = 0;
    if (!v72)
      goto LABEL_60;
LABEL_58:
    if (*(_DWORD *)v72 != 2)
    {
      *(_DWORD *)v72 -= 2;
      goto LABEL_60;
    }
    WTF::StringImpl::~StringImpl(v72, v70, (uint64_t)v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    v81 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v81)
    {
LABEL_63:
      if (*(_DWORD *)v81 == 2)
      {
        WTF::StringImpl::~StringImpl(v81, v70, (uint64_t)v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        *(_DWORD *)v81 -= 2;
      }
    }
LABEL_18:
    if (++v30 != v31)
      continue;
    break;
  }
LABEL_67:
  v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  v16 = "}";
LABEL_80:
  v17 = 1;
LABEL_81:
  WTF::StringImpl::utf8ForCharacters(v16, v17, (uint64_t)__s, v15);
  WTF::printExpectedCStringHelper(v14, "StringView", __s);
  if (*(_DWORD *)&__s[8] != -1)
    ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[*(unsigned int *)&__s[8]])(__dst, __s);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

double WTF::JSONImpl::Value::writeJSONImpl(WTF::JSONImpl::Value *this, WTF::StringBuilder *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double result)
{
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  double *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char __dst[124];
  int v51;
  char __s[3];
  _BYTE v53[31];

  *(_QWORD *)&v53[23] = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)this + 1))
  {
    case 0:
      goto LABEL_6;
    case 1:
      v15 = *((_DWORD *)a2 + 4);
      if (*((_BYTE *)this + 8))
      {
        if (v15 < 0)
          return result;
        v16 = *((_QWORD *)a2 + 1);
        if ((v16 || (v16 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v16 + 16) & 4) == 0)
        {
          v14 = (double *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)(v15 + 4), a3, a4, a5, a6, a7, a8);
          if (!v14)
            return result;
          result = 9.34610469e-307;
          goto LABEL_19;
        }
        v25 = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)(v15 + 4), a3, a4, a5, a6, a7, a8);
        if (!v25)
          return result;
        v26 = 1702195828;
      }
      else
      {
        if (v15 < 0)
          return result;
        v37 = *((_QWORD *)a2 + 1);
        if ((v37 || (v37 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v37 + 16) & 4) == 0)
        {
          v38 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)(v15 + 5), a3, a4, a5, a6, a7, a8);
          if (v38)
          {
            result = 1.69120281e-306;
            *(_QWORD *)v38 = 0x73006C00610066;
            *(_WORD *)(v38 + 8) = 101;
          }
          return result;
        }
        v25 = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)(v15 + 5), a3, a4, a5, a6, a7, a8);
        if (!v25)
          return result;
        *((_BYTE *)v25 + 4) = 101;
        v26 = 1936482662;
      }
      goto LABEL_45;
    case 2:
    case 3:
      result = *((double *)this + 1);
      if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v10 = (*(_QWORD *)&result >> 52) & 0x7FFLL;
        if ((_DWORD)v10 == 2047)
        {
          if ((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", sizeof(__s));
            v11 = v53;
          }
          else
          {
            v42 = __s;
            if ((*(_QWORD *)&result & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v42 = &__s[1];
            }
            *(_QWORD *)v42 = 0x7974696E69666E49;
            v11 = v42 + 8;
          }
          goto LABEL_48;
        }
        v35 = *(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFLL;
        if ((*(_QWORD *)&result & 0x8000000000000000) != 0 && v35)
        {
          __s[0] = 45;
          v36 = &__s[1];
        }
        else
        {
          v36 = __s;
          if (!v35)
          {
            v11 = &__s[1];
            __s[0] = 48;
            goto LABEL_48;
          }
        }
        v39 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&result & 0x800FFFFFFFFFFFFFLL, v10);
        v11 = WTF::dragonbox::detail::to_shortest(v39, v40, (uint64_t)v36, v41);
LABEL_48:
        *v11 = 0;
        v43 = (int)strlen(__s);
        memcpy(__dst, __s, v43);
        __dst[v43] = 0;
        v51 = strlen(__dst);
        *(_QWORD *)&result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>>((uint64_t)a2, (uint64_t)__dst, v44, v45, v46, v47, v48, v49).u64[0];
        return result;
      }
LABEL_6:
      v12 = *((_DWORD *)a2 + 4);
      if ((v12 & 0x80000000) == 0)
      {
        v13 = *((_QWORD *)a2 + 1);
        if ((v13 || (v13 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
        {
          v14 = (double *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)(v12 + 4), a3, a4, a5, a6, a7, a8);
          if (v14)
          {
            result = 1.2461147e-306;
LABEL_19:
            *v14 = result;
          }
        }
        else
        {
          v25 = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)(v12 + 4), a3, a4, a5, a6, a7, a8);
          if (v25)
          {
            v26 = 1819047278;
LABEL_45:
            *(_DWORD *)v25 = v26;
          }
        }
      }
      return result;
    case 4:
      v17 = (_DWORD *)*((_QWORD *)this + 1);
      if (v17)
        *v17 += 2;
      *(_QWORD *)__dst = v17;
      WTF::StringBuilder::appendQuotedJSONString(a2, (const WTF::String *)__dst, a3, a4, a5, a6, a7, a8);
      v25 = *(WTF::StringImpl **)__dst;
      *(_QWORD *)__dst = 0;
      if (!v25)
        return result;
      v26 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 != 2)
        goto LABEL_45;
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      return result;
    default:
      return result;
  }
}

uint64_t WTF::JSONImpl::Value::memoryCost(WTF::JSONImpl::Value *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_DWORD *)this + 1);
  if (v1 >= 5)
  {
    if (v1 == 5)
    {
      return WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Object const>();
    }
    else if (v1 == 6)
    {
      return WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Array const>((uint64_t)this);
    }
    else
    {
      result = 490;
      __break(0xC471u);
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 1);
    if (v1 != 4 || v2 == 0)
      return 16;
    else
      return ((unint64_t)*(unsigned int *)(v2 + 4) << ((*(_BYTE *)(v2 + 16) & 4) == 0)) + 48;
  }
  return result;
}

unint64_t WTF::JSONImpl::Value::memoryCostImpl(WTF::JSONImpl::Value *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 1) == 4 && (v1 = *((_QWORD *)this + 1)) != 0)
    return ((unint64_t)*(unsigned int *)(v1 + 4) << ((*(_BYTE *)(v1 + 16) & 4) == 0)) + 48;
  else
    return 16;
}

uint64_t WTF::JSONImpl::ObjectBase::memoryCostImpl(WTF::JSONImpl::ObjectBase *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::JSONImpl::Value **v17;
  uint64_t v18;
  WTF::JSONImpl::Value *v19;
  uint64_t result;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (_QWORD *)(v1 + 16 * v2);
    if (!*(_DWORD *)(v1 - 12))
    {
      v4 = (_QWORD *)(v1 + 16 * v2);
      v3 = v4;
LABEL_10:
      v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
      v7 = 40;
      if (v6 != v4)
        goto LABEL_16;
      return v7;
    }
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    if ((_DWORD)v2)
    {
      v5 = 16 * v2;
      v4 = (_QWORD *)*((_QWORD *)this + 2);
      do
      {
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_9;
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      v4 = v3;
      goto LABEL_10;
    }
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
LABEL_9:
  if (v1)
    goto LABEL_10;
  v6 = 0;
  v7 = 40;
  if (!v4)
    return v7;
  while (1)
  {
LABEL_16:
    if (*v4)
    {
      v8 = *(_DWORD *)(*v4 + 4) << ((*(_DWORD *)(*v4 + 16) & 4) == 0);
      v9 = v4[1];
      v10 = *(_DWORD *)(v9 + 4);
      v11 = v10 == 5;
      if (v10 < 5)
        goto LABEL_18;
    }
    else
    {
      v8 = 0;
      v9 = v4[1];
      v10 = *(_DWORD *)(v9 + 4);
      v11 = v10 == 5;
      if (v10 < 5)
      {
LABEL_18:
        v12 = *(_QWORD *)(v9 + 8);
        if (v10 != 4 || v12 == 0)
        {
          v14 = 16;
          v15 = v4 + 2;
          v4 = v3;
          if (v15 != v3)
            goto LABEL_36;
        }
        else
        {
          v14 = ((unint64_t)*(unsigned int *)(v12 + 4) << ((*(_BYTE *)(v12 + 16) & 4) == 0)) + 48;
          v15 = v4 + 2;
          v4 = v3;
          if (v15 != v3)
            goto LABEL_36;
        }
        goto LABEL_15;
      }
    }
    if (v11)
    {
      v14 = WTF::JSONImpl::ObjectBase::memoryCostImpl((WTF::JSONImpl::ObjectBase *)v9);
      goto LABEL_35;
    }
    if (v10 != 6)
      break;
    v16 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v16)
    {
      v17 = *(WTF::JSONImpl::Value ***)(v9 + 16);
      v18 = 8 * v16;
      v14 = 32;
      do
      {
        v19 = *v17++;
        v14 += WTF::JSONImpl::Value::memoryCost(v19);
        v18 -= 8;
      }
      while (v18);
LABEL_35:
      v15 = v4 + 2;
      v4 = v3;
      if (v15 != v3)
        goto LABEL_36;
      goto LABEL_15;
    }
    v14 = 32;
    v15 = v4 + 2;
    v4 = v3;
    if (v15 != v3)
    {
LABEL_36:
      v4 = v15;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
LABEL_15:
    v7 += v8 + v14;
    if (v4 == v6)
      return v7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t WTF::JSONImpl::ObjectBase::getBoolean(WTF::JSONImpl::ObjectBase *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        return 0;
      if (WTF::equal(v11, *a2, a3))
        break;
    }
  }
  v18 = v3 + 16 * v10;
  v19 = *((_QWORD *)this + 2);
  if (v19)
  {
    if (v18 == v19 + 16 * *(unsigned int *)(v19 - 4))
      return 0;
  }
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *(_DWORD *)(v20 + 4);
  ++*(_DWORD *)v20;
  if (v21 == 1)
  {
    v22 = *(unsigned __int8 *)(v20 + 8);
    v23 = 1;
  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
  WTF::RefCounted<WTF::JSONImpl::Value>::deref(v20, v12, (uint64_t)a3, v13, v14, v15, v16, v17);
  return v22 | (v23 << 8);
}

uint64_t WTF::JSONImpl::ObjectBase::getValue@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v5 = *(_QWORD *)(this + 16);
  if (!v5)
    goto LABEL_15;
  v7 = this;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    this = *(_QWORD *)(v5 + 16 * v12);
    if (this != -1)
    {
      if (!this)
        goto LABEL_15;
      this = WTF::equal((WTF *)this, *a2, a3);
      if ((this & 1) != 0)
        break;
    }
  }
  v13 = v5 + 16 * v12;
  v14 = *(_QWORD *)(v7 + 16);
  if (v14 && v13 == v14 + 16 * *(unsigned int *)(v14 - 4))
  {
LABEL_15:
    v15 = 0;
  }
  else
  {
    v15 = *(_DWORD **)(v13 + 8);
    ++*v15;
  }
  *a4 = v15;
  return this;
}

unint64_t WTF::JSONImpl::ObjectBase::getDouble(WTF::JSONImpl::ObjectBase *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_16;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        goto LABEL_16;
      if (WTF::equal(v11, *a2, a3))
        break;
    }
  }
  v18 = v3 + 16 * v10;
  v19 = *((_QWORD *)this + 2);
  if (v19 && v18 == v19 + 16 * *(unsigned int *)(v19 - 4))
  {
LABEL_16:
    v23 = 0;
    v24 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_DWORD *)(v20 + 4);
    ++*(_DWORD *)v20;
    if ((v21 & 0xFFFFFFFE) == 2)
      v22 = *(_QWORD *)(v20 + 8);
    else
      v22 = 0;
    v24 = v22 & 0xFFFFFFFFFFFFFF00;
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v20, v12, (uint64_t)a3, v13, v14, v15, v16, v17);
    v23 = v22;
  }
  return v24 | v23;
}

uint64_t WTF::JSONImpl::ObjectBase::getInteger(WTF::JSONImpl::ObjectBase *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v6 = *(_DWORD *)(v3 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v3 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11)
        {
          v23 = *((_QWORD *)this + 2);
          if (!v23)
            goto LABEL_16;
          goto LABEL_15;
        }
        if (WTF::equal(v11, *a2, a3))
          break;
      }
      ++i;
    }
    v18 = v3 + 16 * v10;
    v19 = *((_QWORD *)this + 2);
    if (v19 && v18 == v19 + 16 * *(unsigned int *)(v19 - 4))
      goto LABEL_15;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_DWORD *)(v20 + 4);
    ++*(_DWORD *)v20;
    if ((v21 & 0xFFFFFFFE) == 2)
      v22 = (int)*(double *)(v20 + 8) | 0x100000000;
    else
      v22 = 0;
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v20, v12, (uint64_t)a3, v13, v14, v15, v16, v17);
    v24 = v22 & 0x100000000;
    v25 = v22 & 0xFFFFFF00;
    v23 = v22;
  }
  else
  {
LABEL_15:
    v23 = 0;
LABEL_16:
    v24 = 0;
    v25 = 0;
  }
  return v24 | v23 | v25;
}

void WTF::JSONImpl::ObjectBase::getString(WTF::JSONImpl::ObjectBase *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;

  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_17;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    v13 = *(WTF **)(v5 + 16 * v12);
    if (v13 != (WTF *)-1)
    {
      if (!v13)
        goto LABEL_17;
      if (WTF::equal(v13, *a2, a3))
        break;
    }
  }
  v20 = v5 + 16 * v12;
  v21 = *((_QWORD *)this + 2);
  if (v21 && v20 == v21 + 16 * *(unsigned int *)(v21 - 4))
  {
LABEL_17:
    *a4 = 0;
  }
  else
  {
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_DWORD *)(v22 + 4);
    ++*(_DWORD *)v22;
    if (v23 == 4)
    {
      v24 = *(_DWORD **)(v22 + 8);
      if (v24)
        *v24 += 2;
    }
    else
    {
      v24 = 0;
    }
    *a4 = v24;
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v22, v14, (uint64_t)a3, v15, v16, v17, v18, v19);
  }
}

void WTF::JSONImpl::ObjectBase::getObject(WTF::JSONImpl::ObjectBase *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  unsigned int v25;

  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_16;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    v13 = *(WTF **)(v5 + 16 * v12);
    if (v13 != (WTF *)-1)
    {
      if (!v13)
        goto LABEL_16;
      if (WTF::equal(v13, *a2, a3))
        break;
    }
  }
  v20 = v5 + 16 * v12;
  v21 = *((_QWORD *)this + 2);
  if (v21 && v20 == v21 + 16 * *(unsigned int *)(v21 - 4))
  {
LABEL_16:
    *a4 = 0;
  }
  else
  {
    v22 = 0;
    v23 = *(_DWORD **)(v20 + 8);
    v24 = *v23;
    v25 = v23[1];
    ++*v23;
    if (v25 >= 5)
    {
      if (v25 == 5)
      {
        *v23 = v24 + 2;
        v22 = v23;
      }
      else if (v25 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x197AE0360);
      }
    }
    *a4 = v22;
    WTF::RefCounted<WTF::JSONImpl::Value>::deref((uint64_t)v23, v14, (uint64_t)a3, v15, v16, v17, v18, v19);
  }
}

void WTF::JSONImpl::ObjectBase::getArray(WTF::JSONImpl::ObjectBase *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;

  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_17;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    v13 = *(WTF **)(v5 + 16 * v12);
    if (v13 != (WTF *)-1)
    {
      if (!v13)
        goto LABEL_17;
      if (WTF::equal(v13, *a2, a3))
        break;
    }
  }
  v20 = v5 + 16 * v12;
  v21 = *((_QWORD *)this + 2);
  if (v21)
  {
    if (v20 == v21 + 16 * *(unsigned int *)(v21 - 4))
    {
LABEL_17:
      *a4 = 0;
      return;
    }
  }
  v22 = *(_DWORD **)(v20 + 8);
  v23 = *v22;
  v24 = v22[1];
  ++*v22;
  if (v24 < 6)
  {
    v25 = 0;
LABEL_16:
    *a4 = v25;
    WTF::RefCounted<WTF::JSONImpl::Value>::deref((uint64_t)v22, v14, (uint64_t)a3, v15, v16, v17, v18, v19);
    return;
  }
  if (v24 == 6)
  {
    *v22 = v23 + 2;
    v25 = v22;
    goto LABEL_16;
  }
  __break(0xC471u);
}

void WTF::JSONImpl::ObjectBase::remove(WTF::JSONImpl::ObjectBase *this, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  uint64_t v16;
  WTF *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  WTF *v39;
  const WTF::StringImpl *v40;
  BOOL v41;
  _QWORD *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v10 = (uint64_t *)((char *)this + 16);
  v11 = *((_QWORD *)this + 2);
  if (!v11)
    goto LABEL_32;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = *((_DWORD *)*a2 + 4);
  v14 = v13 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v13 >> 8;
  for (i = 0; ; v14 = ++i + v16)
  {
    v16 = v14 & v12;
    v17 = *(WTF **)(v11 + 16 * v16);
    if (v17 != (WTF *)-1)
    {
      if (!v17)
        goto LABEL_32;
      if (WTF::equal(v17, *a2, a3))
        break;
    }
  }
  v19 = v11 + 16 * v16;
  v20 = *v10;
  if (*v10)
  {
    v20 += 16 * *(unsigned int *)(v20 - 4);
    if (v20 == v19)
      goto LABEL_32;
  }
  if (v20 == v19)
    goto LABEL_32;
  v21 = *(WTF::StringImpl **)v19;
  *(_QWORD *)v19 = -1;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v18, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      v22 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      if (!v22)
        goto LABEL_20;
      goto LABEL_19;
    }
    *(_DWORD *)v21 -= 2;
  }
  v22 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = 0;
  if (v22)
LABEL_19:
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v22, v18, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_20:
  ++*(_DWORD *)(*v10 - 16);
  if (*v10)
  {
    --*(_DWORD *)(*v10 - 12);
    v23 = *v10;
    if (!*v10)
      goto LABEL_32;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
    v23 = *v10;
    if (!*v10)
      goto LABEL_32;
  }
  v32 = 6 * *(_DWORD *)(v23 - 12);
  v33 = *(_DWORD *)(v23 - 4);
  if (v32 < v33 && v33 >= 9)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v10, v33 >> 1, 0, a4, a5, a6, a7, a8);
LABEL_32:
  v35 = *((unsigned int *)this + 9);
  if ((_DWORD)v35)
  {
    v36 = 0;
    for (j = -8; ; j -= 8)
    {
      v38 = *((_QWORD *)this + 3);
      v39 = *(WTF **)(v38 + 8 * v36);
      v40 = *a2;
      if (v39 == *a2)
        break;
      if (v39)
        v41 = v40 == 0;
      else
        v41 = 1;
      if (!v41)
      {
        if (WTF::equal(v39, v40, a3))
        {
          v38 = *((_QWORD *)this + 3);
          v39 = *(WTF **)(v38 + 8 * v36);
          break;
        }
        v35 = *((unsigned int *)this + 9);
      }
      if (++v36 >= v35)
        return;
    }
    v42 = (_QWORD *)(v38 + 8 * v36);
    *v42 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v40, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    memmove((void *)(v38 + 8 * v36), v42 + 1, *((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 9) - v38 + j);
    --*((_DWORD *)this + 9);
  }
}

void WTF::JSONImpl::ObjectBase::writeJSONImpl(WTF::JSONImpl::ObjectBase *this, WTF::StringBuilder *a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  int i;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  WTF::JSONImpl::Value *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int8x16_t v50;

  v50.i8[0] = 123;
  v10 = *((_QWORD *)a2 + 1);
  if (v10
    && ((v11 = *((unsigned int *)a2 + 4), v11 < *(_DWORD *)(v10 + 4))
      ? (v12 = *(_QWORD *)a2 == 0)
      : (v12 = 0),
        v12))
  {
    v46 = *(_DWORD *)(v10 + 16);
    v47 = *(_QWORD *)(v10 + 8);
    *((_DWORD *)a2 + 4) = v11 + 1;
    if ((v46 & 4) != 0)
      *(_BYTE *)(v47 + v11) = 123;
    else
      *(_WORD *)(v47 + 2 * v11) = 123;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)a2, &v50, 1uLL, a4, a5, a6, a7, a8);
  }
  if (!*((_DWORD *)this + 9))
  {
LABEL_50:
    v50.i8[1] = 125;
    v43 = *((_QWORD *)a2 + 1);
    if (v43
      && ((v44 = *((unsigned int *)a2 + 4), v44 < *(_DWORD *)(v43 + 4))
        ? (v45 = *(_QWORD *)a2 == 0)
        : (v45 = 0),
          v45))
    {
      v48 = *(_DWORD *)(v43 + 16);
      v49 = *(_QWORD *)(v43 + 8);
      *((_DWORD *)a2 + 4) = v44 + 1;
      if ((v48 & 4) != 0)
        *(_BYTE *)(v49 + v44) = 125;
      else
        *(_WORD *)(v49 + 2 * v44) = 125;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v50.i8[1], 1uLL, a4, a5, a6, a7, a8);
    }
    return;
  }
  v13 = 0;
  while (2)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v14)
    {
LABEL_24:
      if (!v13)
        goto LABEL_31;
LABEL_25:
      v50.i8[2] = 44;
      v24 = *((_QWORD *)a2 + 1);
      if (v24
        && ((v25 = *((unsigned int *)a2 + 4), v25 < *(_DWORD *)(v24 + 4))
          ? (v26 = *(_QWORD *)a2 == 0)
          : (v26 = 0),
            v26))
      {
        v41 = *(_DWORD *)(v24 + 16);
        v42 = *(_QWORD *)(v24 + 8);
        *((_DWORD *)a2 + 4) = v25 + 1;
        if ((v41 & 4) != 0)
          *(_BYTE *)(v42 + v25) = 44;
        else
          *(_WORD *)(v42 + 2 * v25) = 44;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v50.i16[1], 1uLL, a4, a5, a6, a7, a8);
      }
      goto LABEL_31;
    }
    v15 = *((_QWORD *)this + 3);
    v16 = *((_DWORD *)v14 - 2);
    v17 = *(WTF::StringImpl **)(v15 + 8 * v13);
    v18 = *((_DWORD *)v17 + 4);
    if (v18 < 0x100)
      v19 = WTF::StringImpl::hashSlowCase(v17);
    else
      v19 = v18 >> 8;
    for (i = 0; ; v19 = i + v21)
    {
      v21 = v19 & v16;
      v22 = (WTF *)v14[2 * v21];
      if (v22 == (WTF *)-1)
        goto LABEL_16;
      if (!v22)
        break;
      if (WTF::equal(v22, *(const WTF::StringImpl **)(v15 + 8 * v13), a3))
      {
        v14 += 2 * v21;
        if (v13)
          goto LABEL_25;
        goto LABEL_31;
      }
LABEL_16:
      ++i;
    }
    v23 = *((_QWORD *)this + 2);
    if (v23)
    {
      v14 = (_QWORD *)(v23 + 16 * *(unsigned int *)(v23 - 4));
      goto LABEL_24;
    }
    v14 = 0;
    if (v13)
      goto LABEL_25;
LABEL_31:
    WTF::StringBuilder::appendQuotedJSONString(a2, (const WTF::String *)v14, (uint64_t)a3, a4, a5, a6, a7, a8);
    v50.i8[3] = 58;
    v34 = *((_QWORD *)a2 + 1);
    if (v34
      && ((v35 = *((unsigned int *)a2 + 4), v35 < *(_DWORD *)(v34 + 4))
        ? (v36 = *(_QWORD *)a2 == 0)
        : (v36 = 0),
          v36))
    {
      v39 = *(_DWORD *)(v34 + 16);
      v40 = *(_QWORD *)(v34 + 8);
      *((_DWORD *)a2 + 4) = v35 + 1;
      if ((v39 & 4) != 0)
        *(_BYTE *)(v40 + v35) = 58;
      else
        *(_WORD *)(v40 + 2 * v35) = 58;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)((char *)v50.i32 + 3), 1uLL, v28, v29, v30, v31, v32);
    }
    v37 = (WTF::JSONImpl::Value *)v14[1];
    v38 = *((_DWORD *)v37 + 1);
    if (v38 < 5)
    {
      WTF::JSONImpl::Value::writeJSONImpl(v37, a2, v27, v28, v29, v30, v31, v32, v33);
      goto LABEL_10;
    }
    if (v38 == 5)
    {
      WTF::JSONImpl::ObjectBase::writeJSONImpl(v37, a2);
LABEL_10:
      if (++v13 >= (unint64_t)*((unsigned int *)this + 9))
        goto LABEL_50;
      continue;
    }
    break;
  }
  if (v38 == 6)
  {
    WTF::JSONImpl::ArrayBase::writeJSONImpl(v37, a2, v27, v28, v29, v30, v31, v32, v33);
    goto LABEL_10;
  }
  __break(0xC471u);
}

void WTF::JSONImpl::ArrayBase::~ArrayBase(WTF::JSONImpl::ArrayBase *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((unsigned int *)this + 7);
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::RefCounted<WTF::JSONImpl::Value>::deref(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v10 = (uint64_t *)*((_QWORD *)this + 2);
  }
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 1) == 4)
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((unsigned int *)this + 7);
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::RefCounted<WTF::JSONImpl::Value>::deref(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v10 = (uint64_t *)*((_QWORD *)this + 2);
  }
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 1) == 4)
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void WTF::JSONImpl::ArrayBase::writeJSONImpl(WTF::JSONImpl::ArrayBase *this, WTF::StringBuilder *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WTF::JSONImpl::Value **v14;
  WTF::JSONImpl::Value **i;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  WTF::JSONImpl::Value *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int8x16_t v30;

  v30.i8[0] = 91;
  v11 = *((_QWORD *)a2 + 1);
  if (v11
    && ((v12 = *((unsigned int *)a2 + 4), v12 < *(_DWORD *)(v11 + 4))
      ? (v13 = *(_QWORD *)a2 == 0)
      : (v13 = 0),
        v13))
  {
    v26 = *(_DWORD *)(v11 + 16);
    v27 = *(_QWORD *)(v11 + 8);
    *((_DWORD *)a2 + 4) = v12 + 1;
    if ((v26 & 4) != 0)
      *(_BYTE *)(v27 + v12) = 91;
    else
      *(_WORD *)(v27 + 2 * v12) = 91;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)a2, &v30, 1uLL, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 7))
  {
    v14 = (WTF::JSONImpl::Value **)*((_QWORD *)this + 2);
    for (i = v14; i != &v14[*((unsigned int *)this + 7)]; ++i)
    {
      if (i != v14)
      {
        v30.i8[2] = 44;
        v16 = *((_QWORD *)a2 + 1);
        if (v16
          && ((v17 = *((unsigned int *)a2 + 4), v17 < *(_DWORD *)(v16 + 4))
            ? (v18 = *(_QWORD *)a2 == 0)
            : (v18 = 0),
              v18))
        {
          v21 = *(_DWORD *)(v16 + 16);
          v22 = *(_QWORD *)(v16 + 8);
          *((_DWORD *)a2 + 4) = v17 + 1;
          if ((v21 & 4) != 0)
            *(_BYTE *)(v22 + v17) = 44;
          else
            *(_WORD *)(v22 + 2 * v17) = 44;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v30.i16[1], 1uLL, a4, a5, a6, a7, a8);
        }
      }
      v19 = *i;
      v20 = *((_DWORD *)*i + 1);
      if (v20 < 5)
      {
        a9 = WTF::JSONImpl::Value::writeJSONImpl(v19, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      else if (v20 == 5)
      {
        WTF::JSONImpl::ObjectBase::writeJSONImpl(v19, a2);
      }
      else
      {
        if (v20 != 6)
        {
          __break(0xC471u);
          return;
        }
        WTF::JSONImpl::ArrayBase::writeJSONImpl(v19, a2);
      }
      v14 = (WTF::JSONImpl::Value **)*((_QWORD *)this + 2);
    }
  }
  v30.i8[1] = 93;
  v23 = *((_QWORD *)a2 + 1);
  if (v23
    && ((v24 = *((unsigned int *)a2 + 4), v24 < *(_DWORD *)(v23 + 4))
      ? (v25 = *(_QWORD *)a2 == 0)
      : (v25 = 0),
        v25))
  {
    v28 = *(_DWORD *)(v23 + 16);
    v29 = *(_QWORD *)(v23 + 8);
    *((_DWORD *)a2 + 4) = v24 + 1;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v24) = 93;
    else
      *(_WORD *)(v29 + 2 * v24) = 93;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v30.i8[1], 1uLL, a4, a5, a6, a7, a8);
  }
}

double WTF::JSONImpl::ArrayBase::ArrayBase(WTF::JSONImpl::ArrayBase *this)
{
  double result;

  *(_QWORD *)&result = 0x600000001;
  *(_QWORD *)this = 0x600000001;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)&result = 0x600000001;
  *(_QWORD *)this = 0x600000001;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t WTF::JSONImpl::ArrayBase::get@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;

  if (*(unsigned int *)(this + 28) <= a2)
  {
    this = 812;
    __break(0xC471u);
  }
  else
  {
    v3 = *(_DWORD **)(*(_QWORD *)(this + 16) + 8 * a2);
    ++*v3;
    *a3 = v3;
  }
  return this;
}

double WTF::JSONImpl::Object::create@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)&result = 0x500000001;
  *v3 = 0x500000001;
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = 0;
  *a1 = v3;
  return result;
}

double WTF::JSONImpl::Array::create@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)&result = 0x600000001;
  *v3 = 0x600000001;
  v3[2] = 0;
  v3[3] = 0;
  *a1 = v3;
  return result;
}

uint64_t WTF::JSONImpl::ArrayBase::memoryCostImpl(WTF::JSONImpl::ArrayBase *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v1 = *((unsigned int *)this + 7);
  if ((_DWORD)v1)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 2);
    v3 = 8 * v1;
    v4 = 32;
    while (1)
    {
      v6 = *v2;
      v7 = *(_DWORD *)(*v2 + 4);
      if (v7 >= 5)
      {
        if (v7 == 5)
        {
          v5 = WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Object const>(v6);
        }
        else
        {
          if (v7 != 6)
          {
            result = 490;
            __break(0xC471u);
            return result;
          }
          v5 = WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Array const>(v6);
        }
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 8);
        if (v7 != 4 || v8 == 0)
          v5 = 16;
        else
          v5 = ((unint64_t)*(unsigned int *)(v8 + 4) << ((*(_BYTE *)(v8 + 16) & 4) == 0)) + 48;
      }
      v4 += v5;
      ++v2;
      v3 -= 8;
      if (!v3)
        return v4;
    }
  }
  return 32;
}

BOOL WTF::JSONImpl::Value::asDouble(WTF::JSONImpl::Value *this, double *a2)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 1) & 0xFFFFFFFE;
  if (v2 == 2)
    *a2 = *((double *)this + 1);
  return v2 == 2;
}

BOOL WTF::JSONImpl::Value::asInteger(WTF::JSONImpl::Value *this, int *a2)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 1) & 0xFFFFFFFE;
  if (v2 == 2)
    *a2 = (int)*((double *)this + 1);
  return v2 == 2;
}

uint64_t WTF::JSONImpl::Value::asString(WTF::JSONImpl::Value *this, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*((_DWORD *)this + 1) != 4)
    return 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (!v8)
    return 0;
  *(_DWORD *)v8 += 4;
  v9 = *a2;
  *a2 = v8;
  if (!v9)
    goto LABEL_6;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_6:
    v10 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 != 2)
    {
LABEL_7:
      *(_DWORD *)v8 = v10;
      return 1;
    }
    goto LABEL_10;
  }
  WTF::StringImpl::~StringImpl(v9, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  v10 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 != 2)
    goto LABEL_7;
LABEL_10:
  WTF::StringImpl::~StringImpl(v8, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
  return 1;
}

BOOL WTF::JSONImpl::ObjectBase::getString(WTF::JSONImpl::ObjectBase *this, WTF::StringImpl **a2, WTF::String *a3)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  WTF::JSONImpl::ObjectBase::getString(this, a2, a3, &v31);
  v11 = v31;
  if (!v31)
    return v11 != 0;
  *(_DWORD *)v31 += 2;
  v12 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      v13 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 != 2)
        goto LABEL_6;
      goto LABEL_9;
    }
    *(_DWORD *)v12 -= 2;
  }
  v13 = *(_DWORD *)v11 - 2;
  if (*(_DWORD *)v11 != 2)
  {
LABEL_6:
    *(_DWORD *)v11 = v13;
    return v11 != 0;
  }
LABEL_9:
  WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
  WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  return v11 != 0;
}

uint64_t WTF::JSONImpl::ObjectBase::getValue(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v7 = *(_DWORD *)(v3 - 8);
  v8 = *((_DWORD *)*a2 + 4);
  v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v8 >> 8;
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    v12 = *(WTF **)(v3 + 16 * v11);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
        return 0;
      if (WTF::equal(v12, *a2, a3))
        break;
    }
  }
  v19 = v3 + 16 * v11;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    if (v19 == v20 + 16 * *(unsigned int *)(v20 - 4))
      return 0;
  }
  v21 = *(_DWORD **)(v19 + 8);
  ++*v21;
  v22 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v21;
  if (v22)
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v22, v13, (uint64_t)a3, v14, v15, v16, v17, v18);
  return 1;
}

void std::__destroy_at[abi:sn180100]<WTF::JSONImpl::Object,0>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1)
  {
    v9 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v9)
    {
      v10 = *(WTF::StringImpl ***)(a1 + 24);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    v21 = *(_QWORD *)(a1 + 24);
    if (v21)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
    v22 = *(_QWORD *)(a1 + 16);
    if (v22)
    {
      v23 = *(unsigned int *)(v22 - 4);
      if ((_DWORD)v23)
      {
        v24 = *(WTF::StringImpl ***)(a1 + 16);
        while (1)
        {
          v25 = *v24;
          if (*v24 == (WTF::StringImpl *)-1)
            goto LABEL_15;
          v26 = v24[1];
          v24[1] = 0;
          if (!v26)
            goto LABEL_20;
          if (*(_DWORD *)v26 != 1)
            break;
          WTF::JSONImpl::Value::operator delete(v26, a2, a3, a4, a5, a6, a7, a8);
          v25 = *v24;
          *v24 = 0;
          if (v25)
          {
LABEL_21:
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
LABEL_15:
          v24 += 2;
          if (!--v23)
            goto LABEL_25;
        }
        --*(_DWORD *)v26;
LABEL_20:
        *v24 = 0;
        if (v25)
          goto LABEL_21;
        goto LABEL_15;
      }
LABEL_25:
      WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    if (*(_DWORD *)(a1 + 4) == 4)
    {
      v35 = *(WTF::StringImpl **)(a1 + 8);
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void WTF::JSONImpl::Object::~Object(WTF::JSONImpl::Object *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = *((unsigned int *)this + 9);
  if ((_DWORD)v9)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v21 = *((_QWORD *)this + 3);
  if (v21)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((_QWORD *)this + 2);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      while (1)
      {
        v25 = *v24;
        if (*v24 == (WTF::StringImpl *)-1)
          goto LABEL_14;
        v26 = v24[1];
        v24[1] = 0;
        if (!v26)
          goto LABEL_19;
        if (*(_DWORD *)v26 != 1)
          break;
        WTF::JSONImpl::Value::operator delete(v26);
        v25 = *v24;
        *v24 = 0;
        if (v25)
        {
LABEL_20:
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
LABEL_14:
        v24 += 2;
        if (!--v23)
          goto LABEL_24;
      }
      --*(_DWORD *)v26;
LABEL_19:
      *v24 = 0;
      if (v25)
        goto LABEL_20;
      goto LABEL_14;
    }
LABEL_24:
    WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 1) == 4)
  {
    v35 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
}

unint64_t _ZN3WTF8JSONImpl5Value12visitDerivedIZNKS1_12visitDerivedIZNKS1_10memoryCostEvE3__0EEDcOT_EUlRS6_E_EES5_S7_(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  WTF::JSONImpl::Value **v7;
  uint64_t v8;
  WTF::JSONImpl::Value *v9;

  v1 = *(_DWORD *)(a1 + 4);
  if (v1 < 5)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v1 == 4 && v2 != 0)
      return ((unint64_t)*(unsigned int *)(v2 + 4) << ((*(_BYTE *)(v2 + 16) & 4) == 0)) + 48;
    return 16;
  }
  if (v1 == 5)
    return WTF::JSONImpl::ObjectBase::memoryCostImpl((WTF::JSONImpl::ObjectBase *)a1);
  if (v1 == 6)
  {
    v6 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v6)
    {
      v7 = *(WTF::JSONImpl::Value ***)(a1 + 16);
      v8 = 8 * v6;
      v4 = 32;
      do
      {
        v9 = *v7++;
        v4 += WTF::JSONImpl::Value::memoryCost(v9);
        v8 -= 8;
      }
      while (v8);
      return v4;
    }
    return 32;
  }
  else
  {
    result = 490;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZNSt3__18__invokeB8sn180100IZNK3WTF8JSONImpl5Value12visitDerivedIZNKS3_10memoryCostEvE3__0EEDcOT_EUlRS7_E_JRNS2_6ObjectEEEEDTclclsr3stdE7declvalIS7_EEspclsr3stdE7declvalIT0_EEEES8_DpOSD_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v4 = 0;
    v3 = 0;
LABEL_9:
    if (v1)
      goto LABEL_10;
    v6 = 0;
    v7 = 40;
    if (!v4)
      return v7;
    while (1)
    {
LABEL_16:
      if (*v4)
      {
        v8 = *(_DWORD *)(*v4 + 4) << (((*(_DWORD *)(*v4 + 16) >> 2) & 1) == 0);
        v9 = _ZN3WTF8JSONImpl5Value12visitDerivedIZNKS1_12visitDerivedIZNKS1_10memoryCostEvE3__0EEDcOT_EUlRS6_E_EES5_S7_(v4[1]);
        v10 = v4 + 2;
        v4 = v3;
        if (v10 != v3)
          goto LABEL_20;
      }
      else
      {
        v8 = 0;
        v9 = _ZN3WTF8JSONImpl5Value12visitDerivedIZNKS1_12visitDerivedIZNKS1_10memoryCostEvE3__0EEDcOT_EUlRS6_E_EES5_S7_(v4[1]);
        v10 = v4 + 2;
        v4 = v3;
        if (v10 != v3)
        {
LABEL_20:
          v4 = v10;
          while ((unint64_t)(*v4 + 1) <= 1)
          {
            v4 += 2;
            if (v4 == v3)
            {
              v4 = v3;
              break;
            }
          }
        }
      }
      v7 += v8 + v9;
      if (v4 == v6)
        return v7;
    }
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (uint64_t *)(v1 + 16 * v2);
  if (*(_DWORD *)(v1 - 12))
  {
    v4 = *(uint64_t **)(a1 + 16);
    if ((_DWORD)v2)
    {
      v5 = 16 * v2;
      v4 = *(uint64_t **)(a1 + 16);
      do
      {
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_9;
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      v4 = v3;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v4 = (uint64_t *)(v1 + 16 * v2);
  v3 = v4;
LABEL_10:
  v6 = (uint64_t *)(v1 + 16 * *(unsigned int *)(v1 - 4));
  v7 = 40;
  if (v6 != v4)
    goto LABEL_16;
  return v7;
}

uint64_t WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Object const>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (_QWORD *)(v1 + 16 * v2);
    if (!*(_DWORD *)(v1 - 12))
    {
      v4 = (_QWORD *)(v1 + 16 * v2);
      v3 = v4;
LABEL_10:
      v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
      v7 = 40;
      if (v6 != v4)
        goto LABEL_16;
      return v7;
    }
    v4 = *(_QWORD **)(a1 + 16);
    if ((_DWORD)v2)
    {
      v5 = 16 * v2;
      v4 = *(_QWORD **)(a1 + 16);
      do
      {
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_9;
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      v4 = v3;
      goto LABEL_10;
    }
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
LABEL_9:
  if (v1)
    goto LABEL_10;
  v6 = 0;
  v7 = 40;
  if (!v4)
    return v7;
  while (1)
  {
LABEL_16:
    if (*v4)
    {
      v8 = *(_DWORD *)(*v4 + 4) << ((*(_DWORD *)(*v4 + 16) & 4) == 0);
      v9 = v4[1];
      v10 = *(_DWORD *)(v9 + 4);
      v11 = v10 == 5;
      if (v10 < 5)
        goto LABEL_18;
    }
    else
    {
      v8 = 0;
      v9 = v4[1];
      v10 = *(_DWORD *)(v9 + 4);
      v11 = v10 == 5;
      if (v10 < 5)
      {
LABEL_18:
        v12 = *(_QWORD *)(v9 + 8);
        if (v10 != 4 || v12 == 0)
        {
          v14 = 16;
          v15 = v4 + 2;
          v4 = v3;
          if (v15 != v3)
            goto LABEL_33;
        }
        else
        {
          v14 = ((unint64_t)*(unsigned int *)(v12 + 4) << ((*(_BYTE *)(v12 + 16) & 4) == 0)) + 48;
          v15 = v4 + 2;
          v4 = v3;
          if (v15 != v3)
            goto LABEL_33;
        }
        goto LABEL_15;
      }
    }
    if (!v11)
      break;
    v14 = _ZNSt3__18__invokeB8sn180100IZNK3WTF8JSONImpl5Value12visitDerivedIZNKS3_10memoryCostEvE3__0EEDcOT_EUlRS7_E_JRNS2_6ObjectEEEEDTclclsr3stdE7declvalIS7_EEspclsr3stdE7declvalIT0_EEEES8_DpOSD_(v9);
    v15 = v4 + 2;
    v4 = v3;
    if (v15 != v3)
    {
LABEL_33:
      v4 = v15;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
LABEL_15:
    v7 += v8 + v14;
    if (v4 == v6)
      return v7;
  }
  if (v10 == 6)
  {
    v14 = std::invoke[abi:sn180100]<WTF::JSONImpl::Value::memoryCost(void)::$_0,WTF::JSONImpl::Array const&>(v9);
    v15 = v4 + 2;
    v4 = v3;
    if (v15 != v3)
      goto LABEL_33;
    goto LABEL_15;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__18__invokeB8sn180100IZNK3WTF8JSONImpl5Value12visitDerivedIZNKS3_10memoryCostEvE3__0EEDcOT_EUlRS7_E_JRNS2_5ArrayEEEEDTclclsr3stdE7declvalIS7_EEspclsr3stdE7declvalIT0_EEEES8_DpOSD_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = 8 * v1;
    v4 = 32;
    while (1)
    {
      v6 = *(_DWORD *)(*(_QWORD *)v2 + 4);
      if (v6 >= 5)
      {
        if (v6 == 5)
        {
          v5 = _ZNSt3__18__invokeB8sn180100IZNK3WTF8JSONImpl5Value12visitDerivedIZNKS3_10memoryCostEvE3__0EEDcOT_EUlRS7_E_JRNS2_6ObjectEEEEDTclclsr3stdE7declvalIS7_EEspclsr3stdE7declvalIT0_EEEES8_DpOSD_();
        }
        else
        {
          if (v6 != 6)
          {
            result = 490;
            __break(0xC471u);
            return result;
          }
          v5 = _ZNSt3__18__invokeB8sn180100IZNK3WTF8JSONImpl5Value12visitDerivedIZNKS3_10memoryCostEvE3__0EEDcOT_EUlRS7_E_JRNS2_5ArrayEEEEDTclclsr3stdE7declvalIS7_EEspclsr3stdE7declvalIT0_EEEES8_DpOSD_();
        }
      }
      else
      {
        v7 = *(_QWORD *)(*(_QWORD *)v2 + 8);
        if (v6 != 4 || v7 == 0)
          v5 = 16;
        else
          v5 = ((unint64_t)*(unsigned int *)(v7 + 4) << ((*(_BYTE *)(v7 + 16) & 4) == 0)) + 48;
      }
      v4 += v5;
      v2 += 8;
      v3 -= 8;
      if (!v3)
        return v4;
    }
  }
  return 32;
}

uint64_t std::invoke[abi:sn180100]<WTF::JSONImpl::Value::memoryCost(void)::$_0,WTF::JSONImpl::Array const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = 8 * v1;
    v4 = 32;
    while (1)
    {
      v6 = *v2;
      v7 = *(_DWORD *)(*v2 + 4);
      if (v7 >= 5)
      {
        if (v7 == 5)
        {
          v5 = WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Object const>();
        }
        else
        {
          if (v7 != 6)
          {
            result = 490;
            __break(0xC471u);
            return result;
          }
          v5 = WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Array const>(v6);
        }
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 8);
        if (v7 != 4 || v8 == 0)
          v5 = 16;
        else
          v5 = ((unint64_t)*(unsigned int *)(v8 + 4) << ((*(_BYTE *)(v8 + 16) & 4) == 0)) + 48;
      }
      v4 += v5;
      ++v2;
      v3 -= 8;
      if (!v3)
        return v4;
    }
  }
  return 32;
}

uint64_t WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Array const>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v1 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = 8 * v1;
    v4 = 32;
    while (1)
    {
      v6 = *v2;
      v7 = *(_DWORD *)(*v2 + 4);
      if (v7 >= 5)
      {
        if (v7 == 5)
        {
          v5 = WTF::JSONImpl::Value::memoryCost(void)const::$_0::operator()<WTF::JSONImpl::Object const>();
        }
        else
        {
          if (v7 != 6)
          {
            result = 490;
            __break(0xC471u);
            return result;
          }
          v5 = _ZNSt3__18__invokeB8sn180100IZNK3WTF8JSONImpl5Value12visitDerivedIZNKS3_10memoryCostEvE3__0EEDcOT_EUlRS7_E_JRNS2_5ArrayEEEEDTclclsr3stdE7declvalIS7_EEspclsr3stdE7declvalIT0_EEEES8_DpOSD_(v6);
        }
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 8);
        if (v7 != 4 || v8 == 0)
          v5 = 16;
        else
          v5 = ((unint64_t)*(unsigned int *)(v8 + 4) << ((*(_BYTE *)(v8 + 16) & 4) == 0)) + 48;
      }
      v4 += v5;
      ++v2;
      v3 -= 8;
      if (!v3)
        return v4;
    }
  }
  return 32;
}

void WTF::RefCounted<WTF::JSONImpl::Value>::deref(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)a1 == 1)
  {
    switch(*(_DWORD *)(a1 + 4))
    {
      case 0:
      case 1:
      case 2:
      case 3:
        goto LABEL_4;
      case 4:
        goto LABEL_16;
      case 5:
        std::__destroy_at[abi:sn180100]<WTF::JSONImpl::Object,0>(a1, a2, a3, a4, a5, a6, a7, a8);
        v9 = a1;
        goto LABEL_5;
      case 6:
        v10 = *(unsigned int *)(a1 + 28);
        v11 = *(uint64_t **)(a1 + 16);
        if ((_DWORD)v10)
        {
          v12 = 8 * v10;
          do
          {
            v13 = *v11;
            *v11 = 0;
            if (v13)
              WTF::RefCounted<WTF::JSONImpl::Value>::deref();
            ++v11;
            v12 -= 8;
          }
          while (v12);
          v11 = *(uint64_t **)(a1 + 16);
        }
        if (v11)
        {
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 24) = 0;
          WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
        }
        if (*(_DWORD *)(a1 + 4) != 4)
          goto LABEL_4;
LABEL_16:
        v14 = *(WTF::StringImpl **)(a1 + 8);
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
          v9 = a1;
        }
        else
        {
LABEL_4:
          v9 = a1;
        }
LABEL_5:
        WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197AE1C18);
    }
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t WTF::JSONImpl::`anonymous namespace'::parseToken<unsigned char>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  BOOL v23;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;

  if (!a2)
    return 11;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(a1 + v5);
    v7 = v6 > 0x20;
    v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0)
      break;
    if (a2 == ++v5)
      return 11;
  }
  v11 = (unsigned __int8 *)(a1 + v5);
  v12 = a2 - v5;
  *a3 = a1 + v5;
  a3[1] = a2 - v5;
  v14 = a1 + v5 + 5;
  v13 = *(unsigned __int8 *)(a1 + v5);
  result = 11;
  v15 = a1 + v5 + 4;
  v16 = a2 - v5 - 4;
  v17 = a2 - 1;
  switch(*(_BYTE *)(a1 + v5))
  {
    case '"':
      if (v17 != v5)
      {
        v29 = ~v5 + a2;
        v30 = (unsigned __int8 *)(a1 + v5 + 1);
        v31 = v30;
        while (1)
        {
          v33 = *v31++;
          v32 = v33;
          v34 = v29 - 1;
          if (v33 == 92)
            break;
          if (v32 == 34)
          {
            *a4 = (uint64_t)v31;
            a4[1] = v34;
            return 4;
          }
LABEL_51:
          result = 11;
          v30 = v31;
          v29 = v34;
          if (!v34)
            return result;
        }
        if (v29 == 1)
          return 11;
        result = 11;
        v34 = v29 - 2;
        v31 = v30 + 2;
        switch(v30[1])
        {
          case '"':
          case '/':
          case '\\':
          case 'b':
          case 'f':
          case 'n':
          case 'r':
          case 't':
          case 'v':
            goto LABEL_51;
          case 'u':
            if (v34 >= 4)
            {
              v35 = v30[2];
              if ((v35 - 48) < 0xA || (v35 | 0x20u) - 97 <= 5)
              {
                v36 = v30[3];
                if ((v36 - 48) < 0xA || (v36 | 0x20u) - 97 <= 5)
                {
                  v37 = v30[4];
                  if ((v37 - 48) < 0xA || (v37 | 0x20u) - 97 <= 5)
                  {
                    v34 = v29 - 6;
                    v31 = v30 + 6;
                    v38 = v30[5];
                    if ((v38 - 48) < 0xA || (v38 | 0x20u) - 97 <= 5)
                      goto LABEL_51;
                  }
                }
              }
            }
            break;
          case 'x':
            if (v34 >= 2)
            {
              v39 = *v31;
              if ((v39 - 48) < 0xA || (v39 | 0x20u) - 97 <= 5)
              {
                v31 = v30 + 4;
                v34 = v29 - 4;
                v40 = v30[3];
                if ((v40 - 48) < 0xA || (v40 | 0x20u) - 97 < 6)
                  goto LABEL_51;
              }
            }
            break;
          default:
            return result;
        }
      }
      return result;
    case ',':
      *a4 = a1 + v5 + 1;
      a4[1] = ~v5 + a2;
      return 9;
    case '-':
      if (v17 != v5)
      {
        v12 = ~v5 + a2;
        v11 = (unsigned __int8 *)(a1 + v5 + 1);
        v13 = *v11;
        goto LABEL_10;
      }
      return result;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
LABEL_10:
      v18 = 0;
      v19 = &v11[v12];
      v20 = v12;
      while (1)
      {
        v21 = *v11;
        if ((v21 - 48) > 9)
          break;
        ++v11;
        ++v18;
        if (!--v20)
        {
          v23 = (_DWORD)v12 == 1 || v13 != 48;
          result = 11;
          if ((_DWORD)v12 && v23)
          {
LABEL_21:
            *a4 = (uint64_t)v19;
            a4[1] = 0;
            return 5;
          }
          return result;
        }
      }
      v25 = v18 == 1 || v13 != 48;
      result = 11;
      if (v18 && v25)
      {
        if (v21 == 46)
        {
          if (v20 == 1)
            return result;
          v19 = &v11[v20];
          v26 = 1;
          while (1)
          {
            v21 = v11[v26];
            if ((v21 - 48) > 9)
              break;
            if (v20 == ++v26)
            {
              if ((_DWORD)v20 == 1)
                return 11;
              goto LABEL_21;
            }
          }
          if ((_DWORD)v26 == 1)
            return 11;
          v11 += v26;
          v20 -= v26;
        }
        if ((v21 & 0xFFFFFFDF) == 0x45)
        {
          v43 = v20 - 1;
          if (v20 == 1)
            return 11;
          v45 = v11 + 1;
          v44 = v11[1];
          if (v44 == 45 || v44 == 43)
          {
            v43 = v20 - 2;
            if (v20 == 2)
              return 11;
            v45 = v11 + 2;
          }
          v46 = 0;
          v47 = &v45[v43];
          v48 = v43;
          while (v45[v46] - 48 <= 9)
          {
            ++v46;
            if (!--v48)
              goto LABEL_117;
          }
          v47 = &v45[v46];
          LODWORD(v43) = v46;
LABEL_117:
          if (!(_DWORD)v43)
            return 11;
          *a4 = (uint64_t)v47;
          a4[1] = v48;
          return 5;
        }
        else
        {
          *a4 = (uint64_t)v11;
          a4[1] = v20;
          return 5;
        }
      }
      return result;
    case ':':
      *a4 = a1 + v5 + 1;
      a4[1] = ~v5 + a2;
      return 10;
    case '[':
      *a4 = a1 + v5 + 1;
      a4[1] = ~v5 + a2;
      return 2;
    case ']':
      *a4 = a1 + v5 + 1;
      a4[1] = ~v5 + a2;
      return 3;
    case 'f':
      v41 = (uint64_t)&v11[v12];
      if (v17 == v5)
        goto LABEL_76;
      if (*(_BYTE *)(a1 + v5 + 1) != 97)
      {
        v16 = v12 - 2;
        v41 = a1 + v5 + 2;
        if (str_2_6[2])
          return result;
        goto LABEL_113;
      }
      if (a2 - 2 == v5)
        goto LABEL_76;
      if (*(_BYTE *)(a1 + v5 + 2) == 108)
      {
        if (a2 - 3 == v5)
          goto LABEL_76;
        if (*(_BYTE *)(a1 + v5 + 3) != 115)
        {
          v41 = a1 + v5 + 4;
          if (!str_2_6[4])
            goto LABEL_113;
          return result;
        }
        if (a2 - 4 == v5)
        {
LABEL_76:
          v16 = 0;
          if (str_2_6[a2 - v5])
            return result;
          goto LABEL_113;
        }
        v16 = v12 - 5;
        if (*(_BYTE *)(a1 + v5 + 4) == 101)
        {
          if (a2 - 5 != v5)
          {
            *a4 = v14;
            a4[1] = v16;
            return 7;
          }
          goto LABEL_76;
        }
        v41 = a1 + v5 + 5;
        if (!str_2_6[5])
        {
LABEL_113:
          *a4 = v41;
          a4[1] = v16;
          return 7;
        }
      }
      else
      {
        v16 = v12 - 3;
        v41 = a1 + v5 + 3;
        if (!str_2_6[3])
          goto LABEL_113;
      }
      return result;
    case 'n':
      v27 = (uint64_t)&v11[v12];
      v28 = &str_10[a2 - v5];
      if (v17 == v5)
        goto LABEL_46;
      if (*(_BYTE *)(a1 + v5 + 1) == 117)
      {
        if (a2 - 2 == v5)
          goto LABEL_46;
        if (*(_BYTE *)(a1 + v5 + 2) != 108)
        {
          v16 = v12 - 3;
          v28 = "l";
          v27 = a1 + v5 + 3;
          goto LABEL_126;
        }
        if (a2 - 3 == v5)
        {
LABEL_46:
          v16 = 0;
          goto LABEL_126;
        }
        if (*(_BYTE *)(a1 + v5 + 3) == 108)
        {
          if (a2 - 4 != v5)
            goto LABEL_128;
          goto LABEL_46;
        }
        v27 = a1 + v5 + 4;
        v28 = "";
      }
      else
      {
        v16 = v12 - 2;
        v28 = "ll";
        v27 = a1 + v5 + 2;
      }
LABEL_126:
      v15 = v27;
      if (*v28)
        return result;
LABEL_128:
      *a4 = v15;
      a4[1] = v16;
      return 8;
    case 't':
      v42 = &v11[v12];
      if (v17 == v5)
        goto LABEL_79;
      if (*(_BYTE *)(a1 + v5 + 1) != 114)
      {
        v16 = v12 - 2;
        v15 = a1 + v5 + 2;
        if (str_1_8[2])
          return result;
        goto LABEL_115;
      }
      if (a2 - 2 == v5)
        goto LABEL_79;
      if (*(_BYTE *)(a1 + v5 + 2) == 117)
      {
        if (a2 - 3 == v5)
          goto LABEL_79;
        if (*(_BYTE *)(a1 + v5 + 3) == 101)
        {
          if (a2 - 4 != v5)
            goto LABEL_115;
LABEL_79:
          v16 = 0;
          v15 = (uint64_t)v42;
          if (str_1_8[a2 - v5])
            return result;
          goto LABEL_115;
        }
        v15 = a1 + v5 + 4;
        if (str_1_8[4])
          return result;
      }
      else
      {
        v16 = v12 - 3;
        v15 = a1 + v5 + 3;
        if (str_1_8[3])
          return result;
      }
LABEL_115:
      *a4 = v15;
      a4[1] = v16;
      return 6;
    case '{':
      result = 0;
      *a4 = a1 + v5 + 1;
      a4[1] = ~v5 + a2;
      return result;
    case '}':
      *a4 = a1 + v5 + 1;
      a4[1] = ~v5 + a2;
      return 1;
    default:
      return result;
  }
}

uint64_t WTF::JSONImpl::`anonymous namespace'::decodeString<unsigned char>(unsigned __int8 *a1, WTF::AtomStringImpl *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  __int16 v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  char v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  char v47;
  char v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  char v106;
  __int16 v107;

  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v57 = *a3;
    *a3 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    if (!v57)
      return 1;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
    return 1;
  }
  v9 = (unint64_t)a2;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v103, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = a1;
  while (2)
  {
    v20 = *v18++;
    v19 = v20;
    v21 = v9 - 1;
    if (v20 != 92)
    {
      v107 = v19;
      if (v104)
      {
        v28 = v105;
        if (v105 < *((_DWORD *)v104 + 1) && v103 == 0)
        {
          v30 = *((_DWORD *)v104 + 4);
          v31 = *((_QWORD *)v104 + 1);
          ++v105;
          if ((v30 & 4) != 0)
            *(_BYTE *)(v31 + v28) = v19;
          else
            *(_WORD *)(v31 + 2 * v28) = v19;
          goto LABEL_4;
        }
      }
      goto LABEL_3;
    }
    v22 = 0;
    if (v9 == 1)
      goto LABEL_86;
    v23 = a1[1];
    v21 = v9 - 2;
    v18 = a1 + 2;
    switch(a1[1])
    {
      case '"':
      case '/':
      case '\\':
        v107 = a1[1];
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'b':
        v23 = 8;
        v107 = 8;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'f':
        v23 = 12;
        v107 = 12;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'n':
        v23 = 10;
        v107 = 10;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'r':
        v23 = 13;
        v107 = 13;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 't':
        v23 = 9;
        v107 = 9;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'u':
        if (v21 < 4)
          goto LABEL_96;
        v33 = a1[2];
        v34 = a1[3];
        if (v33 >= 0x41)
          v35 = 9;
        else
          v35 = 0;
        v36 = v35 + v33;
        if (v34 >= 0x41)
          v37 = ((_BYTE)v34 + 9) & 0xF;
        else
          v37 = v34 - 48;
        v38 = (v36 << 12) | (v37 << 8);
        v39 = a1[4];
        v40 = a1[5];
        if (v39 >= 0x41)
          v41 = 9;
        else
          v41 = 0;
        v42 = v41 + v39;
        if (v40 >= 0x41)
          v43 = (v40 + 9) & 0xF;
        else
          v43 = v40 - 48;
        v23 = v38 & 0xFF00 | (v43 | (16 * v42));
        v21 = v9 - 6;
        v18 = a1 + 6;
        v107 = v23;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'v':
        v23 = 11;
        v107 = 11;
        v24 = v104;
        if (!v104)
          goto LABEL_3;
        goto LABEL_9;
      case 'x':
        if (v21 >= 2)
        {
          v44 = a1[2];
          v45 = a1[3];
          if (v44 >= 0x41)
            v46 = 9;
          else
            v46 = 0;
          v47 = v46 + v44;
          if (v45 >= 0x41)
            v48 = (v45 + 9) & 0xF;
          else
            v48 = v45 - 48;
          v23 = (v48 | (16 * v47));
          v21 = v9 - 4;
          v18 = a1 + 4;
          v107 = v23;
          v24 = v104;
          if (v104)
          {
LABEL_9:
            v25 = v105;
            if (v105 < *((_DWORD *)v24 + 1) && v103 == 0)
            {
              if ((*((_BYTE *)v24 + 16) & 4) == 0)
              {
                v27 = *((_QWORD *)v24 + 1);
                ++v105;
                *(_WORD *)(v27 + 2 * v25) = v23;
                goto LABEL_4;
              }
              if (v23 <= 0xFFu)
              {
                v32 = *((_QWORD *)v24 + 1);
                ++v105;
                *(_BYTE *)(v32 + v25) = v23;
                goto LABEL_4;
              }
            }
          }
LABEL_3:
          WTF::StringBuilder::append((uint64_t)&v103, &v107, 1uLL, v13, v14, v15, v16, v17);
LABEL_4:
          a1 = v18;
          v9 = v21;
          if (!v21)
          {
            v49 = v103;
            if (v103)
              goto LABEL_80;
            if ((v105 & 0x80000000) == 0 && v104 && *((_DWORD *)v104 + 1) > v105 + (v105 >> 2))
            {
              if ((*((_BYTE *)v104 + 16) & 4) != 0)
                WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v103, (WTF::AtomStringImpl *)v105, v12, v13, v14, v15, v16, v17);
              else
                WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v103, (WTF::AtomStringImpl *)v105, v12, v13, v14, v15, v16, v17);
              v66 = v103;
              v103 = v104;
              v104 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                {
                  WTF::StringImpl::~StringImpl(v66, v50, v51, v52, v53, v54, v55, v56);
                  WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
                }
                else
                {
                  *(_DWORD *)v66 -= 2;
                }
              }
            }
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v103);
            v49 = v103;
            if (v103)
LABEL_80:
              *(_DWORD *)v49 += 2;
            v75 = *a3;
            *a3 = v49;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, v11, v12, v13, v14, v15, v16, v17);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
              }
              else
              {
                *(_DWORD *)v75 -= 2;
              }
            }
            v22 = 1;
LABEL_86:
            v84 = v104;
            v104 = 0;
            if (v84)
              goto LABEL_87;
LABEL_89:
            v85 = v103;
            v103 = 0;
            if (v85)
              goto LABEL_92;
            return v22;
          }
          continue;
        }
LABEL_96:
        v22 = 0;
        v84 = v104;
        v104 = 0;
        if (!v84)
          goto LABEL_89;
LABEL_87:
        if (*(_DWORD *)v84 != 2)
        {
          *(_DWORD *)v84 -= 2;
          goto LABEL_89;
        }
        WTF::StringImpl::~StringImpl(v84, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        v85 = v103;
        v103 = 0;
        if (v85)
        {
LABEL_92:
          if (*(_DWORD *)v85 == 2)
          {
            WTF::StringImpl::~StringImpl(v85, v11, v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
          }
          else
          {
            *(_DWORD *)v85 -= 2;
          }
        }
        return v22;
      default:
        goto LABEL_86;
    }
  }
}

void WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  int i;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;

  v13 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8);
    v13 = *a1;
    if (!*a1)
    {
      v14 = 0;
      v15 = *(WTF::StringImpl **)a2;
      v16 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if (v16 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v17 = WTF::StringImpl::hashSlowCase(v15);
      goto LABEL_7;
    }
  }
  v14 = *(_DWORD *)(v13 - 8);
  v15 = *(WTF::StringImpl **)a2;
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v16 < 0x100)
    goto LABEL_6;
LABEL_4:
  v17 = v16 >> 8;
LABEL_7:
  v18 = 0;
  for (i = 1; ; ++i)
  {
    v20 = v17 & v14;
    v21 = (WTF::StringImpl **)(v13 + 16 * v20);
    v22 = *v21;
    if (*v21 == (WTF::StringImpl *)-1)
    {
      v18 = (WTF::StringImpl **)(v13 + 16 * v20);
      goto LABEL_9;
    }
    if (!v22)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v21 = v18;
      }
      v25 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v25 += 2;
      *v21 = v25;
      v26 = *(WTF::StringImpl **)a3;
      *(_QWORD *)a3 = 0;
      v27 = (uint64_t)v21[1];
      v21[1] = v26;
      if (v27)
        WTF::RefCounted<WTF::JSONImpl::Value>::deref(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v28 = *a1;
        if (*a1)
          goto LABEL_23;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v28 = *a1;
        if (*a1)
        {
LABEL_23:
          v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
          v30 = *(unsigned int *)(v28 - 4);
          if (v30 <= 0x400)
            goto LABEL_24;
          goto LABEL_33;
        }
      }
      v29 = *(unsigned int *)(v28 - 16);
      v30 = *(unsigned int *)(v28 - 4);
      if (v30 <= 0x400)
      {
LABEL_24:
        if (3 * v30 > 4 * v29)
        {
LABEL_36:
          *(_QWORD *)a9 = v21;
          *(_QWORD *)(a9 + 8) = v28 + 16 * v30;
          *(_BYTE *)(a9 + 16) = 1;
          return;
        }
        if (!(_DWORD)v30)
        {
          v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, (uint64_t)v21, a4, a5, a6, a7, a8);
          v28 = *a1;
          if (!*a1)
          {
LABEL_27:
            v30 = 0;
            goto LABEL_36;
          }
LABEL_35:
          v30 = *(unsigned int *)(v28 - 4);
          goto LABEL_36;
        }
LABEL_34:
        v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, ((_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30))), (uint64_t)v21, a4, a5, a6, a7, a8);
        v28 = *a1;
        if (!*a1)
          goto LABEL_27;
        goto LABEL_35;
      }
LABEL_33:
      if (v30 > 2 * v29)
        goto LABEL_36;
      goto LABEL_34;
    }
    if (WTF::equal(v22, *(const WTF::StringImpl **)a2, a3))
      break;
LABEL_9:
    v17 = i + v20;
  }
  v23 = *a1;
  if (*a1)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v23 + 16 * v24;
  *(_BYTE *)(a9 + 16) = 0;
  v31 = v13 + 16 * v20;
  v32 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v33 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v31 + 8) = v32;
  if (v33)
    WTF::RefCounted<WTF::JSONImpl::Value>::deref(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != (WTF::StringImpl *)-1)
      {
        if (v25)
        {
          v28 = *a1;
          if (*a1)
          {
            v29 = *(_DWORD *)(v28 - 8);
            v30 = *((_DWORD *)v25 + 4);
            if (v30 >= 0x100)
              goto LABEL_20;
LABEL_23:
            v31 = WTF::StringImpl::hashSlowCase(v25);
          }
          else
          {
            v29 = 0;
            v30 = *((_DWORD *)v25 + 4);
            if (v30 < 0x100)
              goto LABEL_23;
LABEL_20:
            v31 = v30 >> 8;
          }
          v40 = 0;
          do
          {
            v41 = v31 & v29;
            v31 = ++v40 + v41;
          }
          while (*(_QWORD *)(v28 + 16 * v41));
          v42 = (WTF::StringImpl **)(v28 + 16 * v41);
          v43 = v42[1];
          v42[1] = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 != 1)
            {
              --*(_DWORD *)v43;
              goto LABEL_29;
            }
            WTF::JSONImpl::Value::operator delete(v43, v15, v16, v17, v18, v19, v20, v21);
            v58 = *v42;
            *v42 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
              {
                WTF::StringImpl::~StringImpl(v58, v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
              }
              else
              {
                *(_DWORD *)v58 -= 2;
              }
            }
          }
          else
          {
LABEL_29:
            *v42 = 0;
          }
          v44 = *v24;
          *v24 = 0;
          *v42 = v44;
          v45 = v11 + 16 * v22;
          v46 = *(WTF::StringImpl **)(v45 + 8);
          *(_QWORD *)(v45 + 8) = 0;
          v42[1] = v46;
          v47 = *(WTF **)(v45 + 8);
          *(_QWORD *)(v45 + 8) = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 != 1)
            {
              --*(_DWORD *)v47;
              goto LABEL_33;
            }
            WTF::JSONImpl::Value::operator delete(v47, v15, v16, v17, v18, v19, v20, v21);
            v48 = *v24;
            *v24 = 0;
            if (!v48)
            {
LABEL_7:
              if (v24 == (WTF::StringImpl **)a3)
                v23 = v42;
              goto LABEL_9;
            }
          }
          else
          {
LABEL_33:
            v48 = *v24;
            *v24 = 0;
            if (!v48)
              goto LABEL_7;
          }
          if (*(_DWORD *)v48 == 2)
          {
            WTF::StringImpl::~StringImpl(v48, v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
          }
          else
          {
            *(_DWORD *)v48 -= 2;
          }
          goto LABEL_7;
        }
        v26 = v11 + 16 * v22;
        v27 = *(WTF **)(v26 + 8);
        *(_QWORD *)(v26 + 8) = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1)
          {
            WTF::JSONImpl::Value::operator delete(v27, v15, v16, v17, v18, v19, v20, v21);
            v57 = *v24;
            *v24 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
              {
                WTF::StringImpl::~StringImpl(v57, v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
              }
              else
              {
                *(_DWORD *)v57 -= 2;
              }
            }
            goto LABEL_9;
          }
          --*(_DWORD *)v27;
        }
        *v24 = 0;
      }
LABEL_9:
      if (++v22 == v12)
        goto LABEL_45;
    }
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_45:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

uint64_t WTF::JSONImpl::`anonymous namespace'::parseToken<char16_t>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  _WORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned __int16 *v44;
  int v45;
  unsigned __int16 *v46;
  uint64_t v47;

  if (!a2)
    return 11;
  v5 = 0;
  v6 = a2 - 5;
  while (1)
  {
    v7 = *(unsigned __int16 *)(a1 + v5);
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
      break;
    --v6;
    v5 += 2;
    if (v6 == -5)
      return 11;
  }
  v10 = (unsigned __int16 *)(a1 + v5);
  v11 = v6 + 5;
  *a3 = a1 + v5;
  a3[1] = v6 + 5;
  result = 11;
  v12 = a1 + v5 + 8;
  v13 = v6 + 1;
  switch(v7)
  {
    case '"':
      if (v6 != -4)
      {
        v25 = v6 + 4;
        v26 = (unsigned __int16 *)(a1 + v5 + 2);
        v27 = v26;
        while (1)
        {
          v29 = *v27++;
          v28 = v29;
          v30 = v25 - 1;
          if (v29 == 92)
            break;
          if (v28 == 34)
          {
            *a4 = (uint64_t)v27;
            a4[1] = v30;
            return 4;
          }
LABEL_40:
          result = 11;
          v26 = v27;
          v25 = v30;
          if (!v30)
            return result;
        }
        if (v25 == 1)
          return 11;
        result = 11;
        v30 = v25 - 2;
        v27 = v26 + 2;
        switch(v26[1])
        {
          case '"':
          case '/':
          case '\\':
          case 'b':
          case 'f':
          case 'n':
          case 'r':
          case 't':
          case 'v':
            goto LABEL_40;
          case 'u':
            if (v30 >= 4)
            {
              v31 = v26[2];
              if ((v31 - 48) < 0xA || (v31 | 0x20u) - 97 <= 5)
              {
                v32 = v26[3];
                if ((v32 - 48) < 0xA || (v32 | 0x20u) - 97 <= 5)
                {
                  v33 = v26[4];
                  if ((v33 - 48) < 0xA || (v33 | 0x20u) - 97 <= 5)
                  {
                    v30 = v25 - 6;
                    v27 = v26 + 6;
                    v34 = v26[5];
                    if ((v34 - 48) < 0xA || (v34 | 0x20u) - 97 <= 5)
                      goto LABEL_40;
                  }
                }
              }
            }
            break;
          case 'x':
            if (v30 >= 2)
            {
              v35 = *v27;
              if ((v35 - 48) < 0xA || (v35 | 0x20u) - 97 <= 5)
              {
                v27 = v26 + 4;
                v30 = v25 - 4;
                v36 = v26[3];
                if ((v36 - 48) < 0xA || (v36 | 0x20u) - 97 < 6)
                  goto LABEL_40;
              }
            }
            break;
          default:
            return result;
        }
      }
      return result;
    case ',':
      *a4 = a1 + v5 + 2;
      a4[1] = v6 + 4;
      return 9;
    case '-':
      if (v6 != -4)
      {
        v11 = v6 + 4;
        v10 = (unsigned __int16 *)(a1 + v5 + 2);
        v7 = *v10;
        goto LABEL_10;
      }
      return result;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
LABEL_10:
      v14 = 0;
      v15 = (uint64_t)&v10[v11];
      v16 = v11;
      while (1)
      {
        v17 = *v10;
        if ((v17 - 48) > 9)
          break;
        ++v10;
        ++v14;
        if (!--v16)
        {
          v19 = (_DWORD)v11 == 1 || v7 != 48;
          result = 11;
          if ((_DWORD)v11 && v19)
          {
LABEL_21:
            *a4 = v15;
            a4[1] = 0;
            return 5;
          }
          return result;
        }
      }
      v21 = v14 == 1 || v7 != 48;
      result = 11;
      if (v14 && v21)
      {
        if (v17 == 46)
        {
          v22 = v16 - 1;
          if (v16 == 1)
            return result;
          v23 = 0;
          v15 = (uint64_t)&v10[v22 + 1];
          v24 = -2;
          while (1)
          {
            v17 = v10[v23 + 1];
            if ((v17 - 48) > 9)
              break;
            ++v23;
            v24 -= 2;
            if (v22 == v23)
            {
              if ((_DWORD)v16 == 1)
                return 11;
              goto LABEL_21;
            }
          }
          if (!(_DWORD)v23)
            return 11;
          v10 = (unsigned __int16 *)((char *)v10 - v24);
          v16 += ~v23;
        }
        if ((v17 & 0xFFFFFFDF) == 0x45)
        {
          v42 = v16 - 1;
          if (v16 == 1)
            return 11;
          v44 = v10 + 1;
          v43 = v10[1];
          if (v43 == 45 || v43 == 43)
          {
            v42 = v16 - 2;
            if (v16 == 2)
              return 11;
            v44 = v10 + 2;
          }
          v45 = 0;
          v46 = &v44[v42];
          v47 = v42;
          while (*v44 - 48 <= 9)
          {
            ++v44;
            ++v45;
            if (!--v47)
              goto LABEL_122;
          }
          v46 = v44;
          LODWORD(v42) = v45;
LABEL_122:
          if (!(_DWORD)v42)
            return 11;
          *a4 = (uint64_t)v46;
          a4[1] = v47;
          return 5;
        }
        else
        {
          *a4 = (uint64_t)v10;
          a4[1] = v16;
          return 5;
        }
      }
      return result;
    case ':':
      *a4 = a1 + v5 + 2;
      a4[1] = v6 + 4;
      return 10;
    case '[':
      *a4 = a1 + v5 + 2;
      a4[1] = v6 + 4;
      return 2;
    case ']':
      *a4 = a1 + v5 + 2;
      a4[1] = v6 + 4;
      return 3;
    case 'f':
      v37 = a1 + 2 * a2;
      v38 = &str_2_6[v6 + 5];
      if (v6 == -4)
        goto LABEL_67;
      v39 = (_WORD *)(a1 + v5 + 4);
      if (*(_WORD *)(a1 + v5 + 2) != 97)
      {
        v6 += 3;
        v38 = "lse";
LABEL_114:
        v37 = (uint64_t)v39;
        goto LABEL_115;
      }
      if (v6 == -3)
        goto LABEL_67;
      v40 = (unsigned __int16)*v39;
      v39 = (_WORD *)(a1 + v5 + 6);
      if (v40 != 108)
      {
        v6 += 2;
        v38 = "se";
        goto LABEL_114;
      }
      if (v6 == -2)
        goto LABEL_67;
      v41 = (unsigned __int16)*v39;
      v39 = (_WORD *)(a1 + v5 + 8);
      if (v41 != 115)
      {
        ++v6;
        v38 = "e";
        goto LABEL_114;
      }
      if (v6 == -1)
      {
LABEL_67:
        v6 = 0;
        if (*v38)
          return result;
        goto LABEL_116;
      }
      if (*v39 == 101)
      {
        if (v6)
        {
          *a4 = (uint64_t)(v10 + 5);
          a4[1] = v6;
          return 7;
        }
LABEL_115:
        if (*v38)
          return result;
        goto LABEL_116;
      }
      v37 = a1 + v5 + 10;
      if (!str_2_6[5])
      {
LABEL_116:
        *a4 = v37;
        a4[1] = v6;
        return 7;
      }
      return result;
    case 'n':
      if (v6 == -4)
        goto LABEL_70;
      if (*(_WORD *)(a1 + v5 + 2) != 117)
      {
        v13 = v6 + 3;
        v12 = a1 + v5 + 4;
        if (str_10[2])
          return result;
        goto LABEL_118;
      }
      if (v6 == -3)
        goto LABEL_70;
      if (*(_WORD *)(a1 + v5 + 4) == 108)
      {
        if (v6 == -2)
          goto LABEL_70;
        if (*(_WORD *)(a1 + v5 + 6) == 108)
        {
          if (v6 == -1)
          {
LABEL_70:
            v13 = 0;
            v12 = a1 + 2 * a2;
            if (str_10[v6 + 5])
              return result;
          }
        }
        else
        {
          v13 = v6 + 1;
          v12 = a1 + v5 + 8;
          if (str_10[4])
            return result;
        }
      }
      else
      {
        v13 = v6 + 2;
        v12 = a1 + v5 + 6;
        if (str_10[3])
          return result;
      }
LABEL_118:
      *a4 = v12;
      a4[1] = v13;
      return 8;
    case 't':
      if (v6 == -4)
        goto LABEL_73;
      if (*(_WORD *)(a1 + v5 + 2) != 114)
      {
        v13 = v6 + 3;
        v12 = a1 + v5 + 4;
        if (str_1_8[2])
          return result;
        goto LABEL_129;
      }
      if (v6 == -3)
        goto LABEL_73;
      if (*(_WORD *)(a1 + v5 + 4) != 117)
      {
        v13 = v6 + 2;
        v12 = a1 + v5 + 6;
        if (str_1_8[3])
          return result;
        goto LABEL_129;
      }
      if (v6 == -2)
        goto LABEL_73;
      if (*(_WORD *)(a1 + v5 + 6) == 101)
      {
        if (v6 == -1)
        {
LABEL_73:
          v13 = 0;
          v12 = a1 + 2 * a2;
          if (str_1_8[v6 + 5])
            return result;
        }
      }
      else
      {
        v13 = v6 + 1;
        v12 = a1 + v5 + 8;
        if (str_1_8[4])
          return result;
      }
LABEL_129:
      *a4 = v12;
      a4[1] = v13;
      return 6;
    case '{':
      result = 0;
      *a4 = a1 + v5 + 2;
      a4[1] = v6 + 4;
      return result;
    case '}':
      *a4 = a1 + v5 + 2;
      a4[1] = v6 + 4;
      return 1;
    default:
      return result;
  }
}

uint64_t WTF::JSONImpl::`anonymous namespace'::decodeString<char16_t>(unsigned __int16 *a1, WTF::AtomStringImpl *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  char v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  char v44;
  WTF::StringImpl *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unsigned int v101;
  char v102;
  __int16 v103;

  if (!a2)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v53 = *a3;
    *a3 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    if (!v53)
      return 1;
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
    return 1;
  }
  v9 = (unint64_t)a2;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v99, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = a1;
  while (1)
  {
    v20 = *v18++;
    v19 = v20;
    v21 = v9 - 1;
    if (v20 == 92)
      break;
    v103 = v19;
    v23 = v100;
    if (v100)
    {
      v24 = v101;
      if (v101 < *((_DWORD *)v100 + 1) && v99 == 0)
      {
        if ((*((_BYTE *)v100 + 16) & 4) == 0)
        {
LABEL_24:
          v27 = *((_QWORD *)v23 + 1);
          v101 = v24 + 1;
          *(_WORD *)(v27 + 2 * v24) = v19;
          goto LABEL_4;
        }
        if (v19 <= 0xFF)
        {
LABEL_26:
          v28 = *((_QWORD *)v23 + 1);
          v101 = v24 + 1;
          *(_BYTE *)(v28 + v24) = v19;
          goto LABEL_4;
        }
      }
    }
LABEL_3:
    WTF::StringBuilder::append((uint64_t)&v99, &v103, 1uLL, v13, v14, v15, v16, v17);
LABEL_4:
    a1 = v18;
    v9 = v21;
    if (!v21)
    {
      v45 = v99;
      if (v99)
        goto LABEL_80;
      if ((v101 & 0x80000000) == 0 && v100 && *((_DWORD *)v100 + 1) > v101 + (v101 >> 2))
      {
        if ((*((_BYTE *)v100 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v99, (WTF::AtomStringImpl *)v101, v12, v13, v14, v15, v16, v17);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v99, (WTF::AtomStringImpl *)v101, v12, v13, v14, v15, v16, v17);
        v62 = v99;
        v99 = v100;
        v100 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, v46, v47, v48, v49, v50, v51, v52);
            WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v99);
      v45 = v99;
      if (v99)
LABEL_80:
        *(_DWORD *)v45 += 2;
      v71 = *a3;
      *a3 = v45;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
      v22 = 1;
LABEL_86:
      v80 = v100;
      v100 = 0;
      if (v80)
        goto LABEL_87;
LABEL_89:
      v81 = v99;
      v99 = 0;
      if (v81)
        goto LABEL_92;
      return v22;
    }
  }
  v22 = 0;
  if (v9 == 1)
    goto LABEL_86;
  LOWORD(v19) = a1[1];
  v21 = v9 - 2;
  v18 = a1 + 2;
  switch((__int16)v19)
  {
    case '"':
    case '/':
    case '\\':
      v103 = a1[1];
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'b':
      LOWORD(v19) = 8;
      v103 = 8;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'f':
      LOWORD(v19) = 12;
      v103 = 12;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'n':
      LOWORD(v19) = 10;
      v103 = 10;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'r':
      LOWORD(v19) = 13;
      v103 = 13;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 't':
      LOWORD(v19) = 9;
      v103 = 9;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'u':
      if (v21 < 4)
        goto LABEL_96;
      v29 = a1[2];
      v30 = a1[3];
      if (v29 >= 0x41)
        v31 = 9;
      else
        v31 = 0;
      v32 = v31 + v29;
      if (v30 >= 0x41)
        v33 = ((_BYTE)v30 + 9) & 0xF;
      else
        v33 = v30 - 48;
      v34 = (v32 << 12) | (v33 << 8);
      v35 = a1[4];
      v36 = a1[5];
      if (v35 >= 0x41)
        v37 = 9;
      else
        v37 = 0;
      v38 = v37 + v35;
      if (v36 >= 0x41)
        v39 = (v36 + 9) & 0xF;
      else
        v39 = v36 - 48;
      LOWORD(v19) = v34 & 0xFF00 | (v39 | (16 * v38));
      v21 = v9 - 6;
      v18 = a1 + 6;
      v103 = v19;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'v':
      LOWORD(v19) = 11;
      v103 = 11;
      v23 = v100;
      if (!v100)
        goto LABEL_3;
      goto LABEL_9;
    case 'x':
      if (v21 >= 2)
      {
        v40 = a1[2];
        v41 = a1[3];
        if (v40 >= 0x41)
          v42 = 9;
        else
          v42 = 0;
        v43 = v42 + v40;
        if (v41 >= 0x41)
          v44 = (v41 + 9) & 0xF;
        else
          v44 = v41 - 48;
        LOWORD(v19) = (v44 | (16 * v43));
        v21 = v9 - 4;
        v18 = a1 + 4;
        v103 = v19;
        v23 = v100;
        if (v100)
        {
LABEL_9:
          v24 = v101;
          if (v101 < *((_DWORD *)v23 + 1) && v99 == 0)
          {
            if ((*((_BYTE *)v23 + 16) & 4) == 0)
              goto LABEL_24;
            if ((unsigned __int16)v19 <= 0xFFu)
              goto LABEL_26;
          }
        }
        goto LABEL_3;
      }
LABEL_96:
      v22 = 0;
      v80 = v100;
      v100 = 0;
      if (!v80)
        goto LABEL_89;
LABEL_87:
      if (*(_DWORD *)v80 != 2)
      {
        *(_DWORD *)v80 -= 2;
        goto LABEL_89;
      }
      WTF::StringImpl::~StringImpl(v80, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      v81 = v99;
      v99 = 0;
      if (v81)
      {
LABEL_92:
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::~StringImpl(v81, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v81 -= 2;
        }
      }
      return v22;
    default:
      goto LABEL_86;
  }
}

uint16x8_t WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint16x8_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  uint16x8_t v27;
  char *v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  _WORD *v40;
  unsigned __int8 *v41;
  __int16 v42;
  uint8x8_t *v43;
  uint16x8_t *v44;
  unint64_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x8_t *v50;
  uint16x8_t *v51;
  unint64_t v52;
  uint8x8_t v53;
  _OWORD v54[7];
  __int128 v55;
  _OWORD __src[7];
  size_t __n[2];
  uint64_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v58 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a2 + 124);
  v37 = __CFADD__(v9, v10);
  v11 = v9 + v10;
  if (v37)
    v12 = 0xFFFFFFFFLL;
  else
    v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 || (v13 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    v14 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
    if (!v14)
      return result;
    v16 = *(_OWORD *)(a2 + 80);
    v54[4] = *(_OWORD *)(a2 + 64);
    v54[5] = v16;
    v17 = *(_OWORD *)(a2 + 112);
    v54[6] = *(_OWORD *)(a2 + 96);
    v55 = v17;
    v18 = *(_OWORD *)(a2 + 16);
    v54[0] = *(_OWORD *)a2;
    v54[1] = v18;
    result = *(uint16x8_t *)(a2 + 32);
    v19 = *(_OWORD *)(a2 + 48);
    v54[2] = result;
    v54[3] = v19;
    v20 = HIDWORD(v55);
    v21 = (_WORD *)(v14 + 2 * HIDWORD(v55));
    if (HIDWORD(v55) < 0x40)
    {
      v23 = v54;
      v22 = v14;
      if ((_WORD *)v14 == v21)
        return result;
    }
    else
    {
      v22 = v14 + 2 * (HIDWORD(v55) & 0xFFFFFFC0);
      v23 = v54;
      v24 = 0uLL;
      v25 = (char *)v14;
      do
      {
        v59.val[0] = (int8x16_t)*v23;
        v26 = *((int8x16_t *)v23 + 1);
        v60.val[0] = (int8x16_t)v23[2];
        v27 = *((uint16x8_t *)v23 + 3);
        v23 += 4;
        result = v27;
        v60.val[1] = 0uLL;
        v61.val[0] = v26;
        v59.val[1] = 0uLL;
        v28 = v25;
        vst2q_s8(v28, v59);
        v28 += 32;
        v61.val[1] = 0uLL;
        vst2q_s8(v28, v61);
        v29 = v25 + 64;
        vst2q_s8(v29, v60);
        v30 = v25 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)result.i8);
        v25 += 128;
      }
      while (v25 != (char *)v22);
      if ((_WORD *)v22 == v21)
        return result;
    }
    v36 = v14 + 2 * v20 - v22 - 2;
    if (v36 < 0xE
      || (v22 < (unint64_t)v23 + (v36 >> 1) + 1
        ? (v37 = (unint64_t)v23 >= (v36 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
        : (v37 = 1),
          !v37))
    {
      v40 = (_WORD *)v22;
      v41 = (unsigned __int8 *)v23;
      goto LABEL_27;
    }
    v38 = (v36 >> 1) + 1;
    if (v36 >= 0x3E)
    {
      v39 = v38 & 0xFFFFFFFFFFFFFFE0;
      v43 = (uint8x8_t *)(v23 + 1);
      v44 = (uint16x8_t *)(v22 + 32);
      v45 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v46 = *(uint8x16_t *)v43[-2].i8;
        v47 = vmovl_u8(*(uint8x8_t *)v46.i8);
        result = vmovl_high_u8(v46);
        v48 = vmovl_u8(*v43);
        v49 = vmovl_high_u8(*(uint8x16_t *)v43->i8);
        v44[-2] = v47;
        v44[-1] = result;
        *v44 = v48;
        v44[1] = v49;
        v44 += 4;
        v43 += 4;
        v45 -= 32;
      }
      while (v45);
      if (v38 == v39)
        return result;
      if ((v38 & 0x18) == 0)
      {
        v41 = (unsigned __int8 *)v23 + v39;
        v40 = (_WORD *)(v22 + 2 * v39);
        goto LABEL_27;
      }
    }
    else
    {
      v39 = 0;
    }
    v40 = (_WORD *)(v22 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
    v41 = (unsigned __int8 *)v23 + (v38 & 0xFFFFFFFFFFFFFFF8);
    v50 = (uint8x8_t *)((char *)v23 + v39);
    v51 = (uint16x8_t *)(v22 + 2 * v39);
    v52 = v39 - (v38 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v53 = *v50++;
      result = vmovl_u8(v53);
      *v51++ = result;
      v52 += 8;
    }
    while (v52);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_27:
      v42 = *v41++;
      *v40++ = v42;
    }
    while (v40 != v21);
    return result;
  }
  v31 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v12, a3, a4, a5, a6, a7, a8);
  if (v31)
  {
    v32 = *(_OWORD *)(a2 + 80);
    __src[4] = *(_OWORD *)(a2 + 64);
    __src[5] = v32;
    v33 = *(_OWORD *)(a2 + 112);
    __src[6] = *(_OWORD *)(a2 + 96);
    *(_OWORD *)__n = v33;
    v34 = *(_OWORD *)(a2 + 16);
    __src[0] = *(_OWORD *)a2;
    __src[1] = v34;
    result = *(uint16x8_t *)(a2 + 32);
    v35 = *(_OWORD *)(a2 + 48);
    __src[2] = result;
    __src[3] = v35;
    if (HIDWORD(__n[1]))
    {
      if (HIDWORD(__n[1]) == 1)
        *v31 = __src[0];
      else
        memcpy(v31, __src, HIDWORD(__n[1]));
    }
  }
  return result;
}

void WTF::addLanguageChangeObserver(WTF *this, WTF *a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  WTF **v17;
  WTF *v18;
  WTF **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char **v25;
  char *v26;

  v10 = atomic_load(&qword_1ECF580E8);
  if (v10 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&qword_1ECF580E8, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::observerMap(void)::$_0 &&>>);
  }
  v11 = qword_1ECF580E0;
  if (qword_1ECF580E0
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,void (*)(void *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,void (*)(void *)>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,void (*)(void *),WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void (*)(void *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(8u, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = qword_1ECF580E0) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (WTF **)(v11 + 16 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == this)
      {
        v17[1] = a2;
        return;
      }
      if (v18 == (WTF *)-1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (WTF **)(v11 + 16 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(v11 - 16);
      v17 = v19;
    }
  }
  *v17 = this;
  v17[1] = a2;
  if (qword_1ECF580E0)
  {
    ++*(_DWORD *)(qword_1ECF580E0 - 12);
    v21 = qword_1ECF580E0;
    if (qword_1ECF580E0)
    {
      v22 = (*(_DWORD *)(qword_1ECF580E0 - 16) + *(_DWORD *)(qword_1ECF580E0 - 12));
      v23 = *(unsigned int *)(qword_1ECF580E0 - 4);
      if (v23 <= 0x400)
        goto LABEL_17;
      goto LABEL_24;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v21 = 0;
  }
  v22 = *(unsigned int *)(v21 - 16);
  v23 = *(unsigned int *)(v21 - 4);
  if (v23 <= 0x400)
  {
LABEL_17:
    if (3 * v23 <= 4 * v22)
    {
      if (!(_DWORD)v23)
      {
        WTF::HashTable<void *,WTF::KeyValuePair<void *,void (*)(void *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,void (*)(void *)>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,void (*)(void *),WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void (*)(void *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(8u, (unint64_t)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      }
      goto LABEL_25;
    }
    return;
  }
LABEL_24:
  if (v23 <= 2 * v22)
LABEL_25:
    WTF::HashTable<void *,WTF::KeyValuePair<void *,void (*)(void *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,void (*)(void *)>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,void (*)(void *),WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void (*)(void *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), (unint64_t)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void WTF::removeLanguageChangeObserver(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v22;
  char **v23;
  char *v24;

  v9 = atomic_load(&qword_1ECF580E8);
  if (v9 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&qword_1ECF580E8, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::observerMap(void)::$_0 &&>>);
  }
  if (qword_1ECF580E0)
  {
    v10 = *(_DWORD *)(qword_1ECF580E0 - 8);
    v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(WTF **)(qword_1ECF580E0 + 16 * v14);
    if (v15 == this)
    {
LABEL_8:
      if (v14 == *(_DWORD *)(qword_1ECF580E0 - 4))
        return;
      *(_QWORD *)(qword_1ECF580E0 + 16 * v14) = -1;
      v17 = qword_1ECF580E0;
      ++*(_DWORD *)(qword_1ECF580E0 - 16);
      if (v17)
      {
        --*(_DWORD *)(v17 - 12);
        v18 = qword_1ECF580E0;
        if (!qword_1ECF580E0)
          return;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        v18 = qword_1ECF580E0;
        if (!qword_1ECF580E0)
          return;
      }
      v19 = 6 * *(_DWORD *)(v18 - 12);
      v20 = *(_DWORD *)(v18 - 4);
      if (v19 < v20 && v20 >= 9)
        WTF::HashTable<void *,WTF::KeyValuePair<void *,void (*)(void *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,void (*)(void *)>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,void (*)(void *),WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void (*)(void *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v20 >> 1, 0, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(WTF **)(qword_1ECF580E0 + 16 * v14);
        ++v16;
        if (v15 == this)
          goto LABEL_8;
      }
    }
  }
}

void WTF::languageDidChange(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  char v62;
  char **v63;
  char *v64;

  if (__ldaxr((unsigned __int8 *)&WTF::languagesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&WTF::languagesLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&WTF::languagesLock);
LABEL_5:
  if ((_MergedGlobals_4 & 1) != 0)
  {
    if ((_DWORD)qword_1ECF580F8)
    {
      v9 = (WTF::StringImpl **)qword_1ECF580F0;
      if (HIDWORD(qword_1ECF580F8))
      {
        v10 = 8 * HIDWORD(qword_1ECF580F8);
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
        HIDWORD(qword_1ECF580F8) = 0;
        v9 = (WTF::StringImpl **)qword_1ECF580F0;
      }
      if (v9)
      {
        qword_1ECF580F0 = 0;
        LODWORD(qword_1ECF580F8) = 0;
        WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if ((byte_1ECF580D9 & 1) != 0)
    {
LABEL_18:
      if (dword_1ECF58108)
      {
        v20 = (WTF::StringImpl **)qword_1ECF58100;
        if (dword_1ECF5810C)
        {
          v21 = 8 * dword_1ECF5810C;
          do
          {
            v22 = *v20;
            *v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
              {
                WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
              }
              else
              {
                *(_DWORD *)v22 -= 2;
              }
            }
            ++v20;
            v21 -= 8;
          }
          while (v21);
          dword_1ECF5810C = 0;
          v20 = (WTF::StringImpl **)qword_1ECF58100;
        }
        if (v20)
        {
          qword_1ECF58100 = 0;
          dword_1ECF58108 = 0;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if (HIBYTE(word_1ECF580DC))
        goto LABEL_30;
      goto LABEL_31;
    }
  }
  else
  {
    qword_1ECF580F0 = 0;
    qword_1ECF580F8 = 0;
    _MergedGlobals_4 = 1;
    if ((byte_1ECF580D9 & 1) != 0)
      goto LABEL_18;
  }
  *(_QWORD *)&dword_1ECF58108 = 0;
  qword_1ECF58100 = 0;
  byte_1ECF580D9 = 1;
  if (HIBYTE(word_1ECF580DC))
LABEL_30:
    HIBYTE(word_1ECF580DC) = 0;
LABEL_31:
  v31 = __ldxr((unsigned __int8 *)&WTF::languagesLock);
  if (v31 != 1)
  {
    __clrex();
LABEL_46:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&WTF::languagesLock, 0, a3, a4, a5, a6, a7, a8);
    v46 = atomic_load(&qword_1ECF580E8);
    if (v46 == -1)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)&WTF::languagesLock))
    goto LABEL_46;
  v32 = atomic_load(&qword_1ECF580E8);
  if (v32 != -1)
  {
LABEL_34:
    v64 = &v62;
    v63 = &v64;
    std::__call_once(&qword_1ECF580E8, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::observerMap(void)::$_0 &&>>);
  }
LABEL_35:
  if (qword_1ECF580E0)
  {
    v33 = *(unsigned int *)(qword_1ECF580E0 - 12);
    if ((_DWORD)v33)
    {
      if (v33 >> 28)
      {
        __break(0xC471u);
      }
      else
      {
        v34 = WTF::fastMalloc((WTF *)(16 * v33));
        v42 = v34;
        if (qword_1ECF580E0 && *(_DWORD *)(qword_1ECF580E0 - 12))
        {
          v43 = *(unsigned int *)(qword_1ECF580E0 - 4);
          if ((_DWORD)v43)
          {
            v44 = 16 * v43;
            v45 = (uint64_t *)qword_1ECF580E0;
            while ((unint64_t)(*v45 + 1) <= 1)
            {
              v45 += 2;
              v44 -= 16;
              if (!v44)
                goto LABEL_67;
            }
          }
          else
          {
            v45 = (uint64_t *)qword_1ECF580E0;
          }
          v47 = qword_1ECF580E0 + 16 * v43;
          if (v45 != (uint64_t *)v47)
          {
            v48 = 0;
            v49 = *v45;
LABEL_51:
            v50 = v45[1];
            v51 = (_QWORD *)(v34 + 16 * v48);
            *v51 = v49;
            v51[1] = v50;
            ++v48;
            while (1)
            {
              v45 += 2;
              if (v45 == (uint64_t *)v47)
                break;
              v49 = *v45;
              if ((unint64_t)(*v45 + 1) > 1)
              {
                if (v45 != (uint64_t *)v47)
                  goto LABEL_51;
                break;
              }
            }
            if (v48)
            {
              v52 = v34 + 16 * v48;
              v53 = v34;
              do
              {
                v54 = atomic_load(&qword_1ECF580E8);
                if (v54 != -1)
                {
                  v63 = &v64;
                  v64 = &v62;
                  std::__call_once(&qword_1ECF580E8, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::observerMap(void)::$_0 &&>>);
                }
                if (qword_1ECF580E0)
                {
                  v55 = *(_DWORD *)(qword_1ECF580E0 - 8);
                  v56 = ~(*(_QWORD *)v53 << 32) + *(_QWORD *)v53;
                  v57 = (v56 ^ (v56 >> 22)) + ~((v56 ^ (v56 >> 22)) << 13);
                  v58 = (9 * (v57 ^ (v57 >> 8))) ^ ((9 * (v57 ^ (v57 >> 8))) >> 15);
                  v59 = v55 & (((v58 + ~(v58 << 27)) >> 31) ^ (v58 + ~((_DWORD)v58 << 27)));
                  v60 = *(_QWORD *)(qword_1ECF580E0 + 16 * v59);
                  if (v60 == *(_QWORD *)v53)
                  {
LABEL_57:
                    (*(void (**)(void))(v53 + 8))();
                  }
                  else
                  {
                    v61 = 1;
                    while (v60)
                    {
                      v59 = (v59 + v61) & v55;
                      v60 = *(_QWORD *)(qword_1ECF580E0 + 16 * v59);
                      ++v61;
                      if (v60 == *(_QWORD *)v53)
                        goto LABEL_57;
                    }
                  }
                }
                v53 += 16;
              }
              while (v53 != v52);
            }
          }
        }
LABEL_67:
        WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
      }
    }
  }
}

void WTF::defaultLanguage(int a1@<W0>, _QWORD *a2@<X8>)
{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;

  WTF::userPreferredLanguages(a1, (uint64_t)&v24);
  v10 = v25;
  if (v25)
  {
    v11 = v24;
    v12 = *(_DWORD **)v24;
    if (*(_QWORD *)v24)
      *v12 += 2;
    v13 = 0;
    *a2 = v12;
    v14 = 8 * v10;
    do
    {
      v15 = *(WTF::StringImpl **)((char *)v11 + v13);
      *(_QWORD *)((char *)v11 + v13) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, v3, v4, v5, v6, v7, v8, v9);
          WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      v13 += 8;
    }
    while (v14 != v13);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = &WTF::StringImpl::s_emptyAtomString;
    v11 = v24;
  }
  if (v11)
    WTF::fastFree((unint64_t)v11, v3, v4, v5, v6, v7, v8, v9);
}

void WTF::userPreferredLanguages(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  if (__ldaxr((unsigned __int8 *)&WTF::languagesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&WTF::languagesLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&WTF::languagesLock);
LABEL_5:
  v5 = WTF::computeUserPreferredLanguages(a1);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *((unsigned int *)v5 + 3);
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v13 = v5;
    v14 = WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a2 + 8) = v12;
    *(_QWORD *)a2 = v14;
    v15 = *((unsigned int *)v13 + 3);
    if ((_DWORD)v15)
    {
      v16 = v14;
      v17 = 0;
      v18 = (_DWORD *)*v13;
      v19 = 8 * v15;
      do
      {
        WTF::String::isolatedCopy(v18, &v21);
        *(_QWORD *)(v16 + 8 * v17++) = v21;
        *(_DWORD *)(a2 + 12) = v17;
        v18 += 2;
        v19 -= 8;
      }
      while (v19);
    }
  }
  v20 = __ldxr((unsigned __int8 *)&WTF::languagesLock);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)&WTF::languagesLock))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&WTF::languagesLock, 0, v6, v7, v8, v9, v10, v11);
}

uint64_t *WTF::computeUserPreferredLanguages(int a1)
{
  uint64_t *v1;
  char *v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;

  if ((byte_1ECF580DA & 1) != 0)
  {
    v1 = &qword_1ECF58110;
    if (dword_1ECF5811C)
      return v1;
  }
  else
  {
    unk_1ECF58118 = 0;
    qword_1ECF58110 = 0;
    byte_1ECF580DA = 1;
  }
  if (!a1)
  {
    v3 = &_MergedGlobals_4;
    if ((_MergedGlobals_4 & 1) != 0)
    {
      v1 = &qword_1ECF580F0;
      if (HIDWORD(qword_1ECF580F8))
        return v1;
      goto LABEL_11;
    }
    qword_1ECF580F8 = 0;
    qword_1ECF580F0 = 0;
    v1 = &qword_1ECF580F0;
LABEL_23:
    *v3 = 1;
    if (*((_DWORD *)v1 + 3))
      return v1;
    goto LABEL_11;
  }
  v3 = &byte_1ECF580D9;
  if ((byte_1ECF580D9 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECF58108 = 0;
    qword_1ECF58100 = 0;
    v1 = &qword_1ECF58100;
    goto LABEL_23;
  }
  v1 = &qword_1ECF58100;
  if (dword_1ECF5810C)
    return v1;
LABEL_11:
  WTF::platformUserPreferredLanguages(a1, &v25);
  v11 = *((unsigned int *)v1 + 3);
  if ((_DWORD)v11)
  {
    v12 = (WTF::StringImpl **)*v1;
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, v4, v5, v6, v7, v8, v9, v10);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v23 = *v1;
  if (*v1)
  {
    *v1 = 0;
    *((_DWORD *)v1 + 2) = 0;
    WTF::fastFree(v23, v4, v5, v6, v7, v8, v9, v10);
  }
  *v1 = v25;
  v24 = v27;
  *((_DWORD *)v1 + 2) = v26;
  *((_DWORD *)v1 + 3) = v24;
  return v1;
}

BOOL WTF::userPrefersSimplifiedChinese(WTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v20;
  int v21;

  if (__ldaxr((unsigned __int8 *)&WTF::languagesLock))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&WTF::languagesLock);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)&WTF::languagesLock))
    goto LABEL_4;
LABEL_5:
  if (HIBYTE(word_1ECF580DC))
  {
    v9 = word_1ECF580DC;
    v10 = __ldxr((unsigned __int8 *)&WTF::languagesLock);
    if (v10 != 1)
      goto LABEL_40;
    goto LABEL_7;
  }
  v9 = 1;
  v12 = WTF::computeUserPreferredLanguages(1);
  v13 = *((unsigned int *)v12 + 3);
  if (!(_DWORD)v13)
  {
LABEL_39:
    word_1ECF580DC = 257;
    v20 = __ldxr((unsigned __int8 *)&WTF::languagesLock);
    if (v20 != 1)
      goto LABEL_40;
    goto LABEL_7;
  }
  v14 = (uint64_t *)*v12;
  v15 = *v12 + 8 * v13;
  while (1)
  {
    while (1)
    {
      v16 = *v14;
      if (!*v14 || *(_DWORD *)(v16 + 4) != 5)
        goto LABEL_11;
      v17 = *(_QWORD *)(v16 + 8);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        break;
      if ((*(_WORD *)v17 & 0xFFDF) != 0x5A
        || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x48
        || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0xD)
      {
        goto LABEL_11;
      }
      if ((*(_WORD *)(v17 + 6) & 0xFFDF) == 0x54 && (*(_WORD *)(v17 + 8) & 0xFFDF) == 0x57)
        goto LABEL_42;
      if ((*(_WORD *)(v17 + 6) & 0xFFDF) == 0x43)
      {
        ++v14;
        if ((*(_WORD *)(v17 + 8) & 0xFFDF) == 0x4E || v14 == (uint64_t *)v15)
          goto LABEL_38;
      }
      else
      {
LABEL_11:
        if (++v14 == (uint64_t *)v15)
          goto LABEL_38;
      }
    }
    if ((*(_BYTE *)v17 & 0xDF) != 0x5A || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x48 || (*(_BYTE *)(v17 + 2) & 0xDF) != 0xD)
      goto LABEL_11;
    if ((*(_BYTE *)(v17 + 3) & 0xDF) == 0x54 && (*(_BYTE *)(v17 + 4) & 0xDF) == 0x57)
      break;
    if ((*(_BYTE *)(v17 + 3) & 0xDF) != 0x43)
      goto LABEL_11;
    ++v14;
    if ((*(_BYTE *)(v17 + 4) & 0xDF) == 0x4E || v14 == (uint64_t *)v15)
    {
LABEL_38:
      v9 = 1;
      goto LABEL_39;
    }
  }
LABEL_42:
  v9 = 0;
  word_1ECF580DC = 256;
  v21 = __ldxr((unsigned __int8 *)&WTF::languagesLock);
  if (v21 == 1)
  {
LABEL_7:
    if (__stlxr(0, (unsigned __int8 *)&WTF::languagesLock))
      goto LABEL_41;
    return v9 != 0;
  }
LABEL_40:
  __clrex();
LABEL_41:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&WTF::languagesLock, 0, a3, a4, a5, a6, a7, a8);
  return v9 != 0;
}

void WTF::displayNameForLanguageLocale(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  const __CFLocale *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  CFStringRef value;

  v4 = *this;
  if (!*this)
    goto LABEL_11;
  if (!*((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
LABEL_11:
    *a2 = v4;
    return;
  }
  v6 = CFLocaleCopyCurrent();
  v7 = (const __CFString *)*MEMORY[0x1E0C9B080];
  WTF::String::createCFString(this, &value);
  v8 = CFLocaleCopyDisplayNameForPropertyValue(v6, v7, value);
  WTF::String::String(a2, v8);
  if (v8)
    CFRelease(v8);
  v9 = value;
  value = 0;
  if (v9)
    CFRelease(v9);
  if (v6)
    CFRelease(v6);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::observerMap(void)::$_0 &&>>()
{
  qword_1ECF580E0 = 0;
}

void WTF::HashTable<void *,WTF::KeyValuePair<void *,void (*)(void *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,void (*)(void *)>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,void (*)(void *),WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void (*)(void *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _OWORD *v32;

  v9 = qword_1ECF580E0;
  if (qword_1ECF580E0)
  {
    v10 = *(_DWORD *)(qword_1ECF580E0 - 4);
    v11 = *(_DWORD *)(qword_1ECF580E0 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = (_DWORD *)WTF::fastZeroedMalloc(16 * a1 + 16, a2, a3, a4, a5, a6, a7, a8);
  qword_1ECF580E0 = (uint64_t)(v12 + 4);
  v12[2] = a1 - 1;
  v12[3] = a1;
  *v12 = 0;
  *(_DWORD *)(qword_1ECF580E0 - 12) = v11;
  if (v10)
  {
    v20 = v10;
    v21 = qword_1ECF580E0;
    if (qword_1ECF580E0)
    {
      for (i = 0; i != v10; ++i)
      {
        v23 = (_QWORD *)(v9 + 16 * i);
        if ((unint64_t)(*v23 + 1) >= 2)
        {
          v24 = *(_DWORD *)(v21 - 8);
          v25 = (~(*v23 << 32) + *v23) ^ ((~(*v23 << 32) + *v23) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = *(_QWORD *)(v21 + 16 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (v31);
          *(_OWORD *)(v21 + 16 * v30) = *(_OWORD *)v23;
        }
      }
    }
    else
    {
      v32 = (_OWORD *)v9;
      do
      {
        if ((unint64_t)(*(_QWORD *)v32 + 1) >= 2)
          MEMORY[0] = *v32;
        ++v32;
        --v20;
      }
      while (v20);
    }
  }
  else if (!v9)
  {
    return;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
}

void WTF::platformUserPreferredLanguages(int a1@<W0>, uint64_t *a2@<X8>)
{
  CFArrayRef v4;
  CFArrayRef v5;
  const __CFArray *v6;
  CFTypeRef v7;
  unint64_t Count;
  unint64_t v9;
  uint64_t v10;
  CFIndex v11;
  const __CFAllocator *v12;
  WTF *ValueAtIndex;
  const __CFString *v14;
  const __CFString *CanonicalLanguageIdentifierFromString;
  int v16;
  CFMutableStringRef MutableCopy;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeRef cf;
  int v56;
  uint64_t v57;
  CFRange v58;

  v4 = CFLocaleCopyPreferredLanguages();
  v5 = v4;
  if (a1)
  {
    WTF::minimizedLanguagesFromLanguages((uint64_t)v4, &cf);
    v6 = (const __CFArray *)cf;
    cf = 0;
    if (v5)
    {
      CFRelease(v5);
      v7 = cf;
      cf = 0;
      if (v7)
        CFRelease(v7);
    }
    v5 = v6;
  }
  Count = CFArrayGetCount(v5);
  if (!Count)
  {
    v37 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v37 = 0x200000002;
    *(_QWORD *)(v37 + 8) = "en";
    *(_DWORD *)(v37 + 16) = 4;
    a2[1] = 0x100000001;
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *a2 = (uint64_t)v38;
    v46 = *(_DWORD *)v37;
    *(_DWORD *)v37 += 2;
    *v38 = v37;
    if (v46)
    {
      *(_DWORD *)v37 = v46;
LABEL_32:
      if (!v5)
        return;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v37, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v5)
        return;
    }
    CFRelease(v5);
    return;
  }
  v9 = Count;
  a2[1] = 0;
  if (!(Count >> 29))
  {
    v10 = WTF::fastMalloc((WTF *)(8 * Count));
    v11 = 0;
    *((_DWORD *)a2 + 2) = v9;
    *a2 = v10;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      ValueAtIndex = (WTF *)CFArrayGetValueAtIndex(v5, v11);
      v14 = (const __CFString *)ValueAtIndex;
      if (!a1)
        break;
      {
        if (WTF::canMinimizeLanguages(void)::result)
          break;
      }
      else
      {
        v16 = WTF::canMinimizeLanguages(void)::$_0::operator()(ValueAtIndex);
        WTF::canMinimizeLanguages(void)::result = v16;
        if (v16)
          break;
      }
      LODWORD(cf) = 0;
      v57 = 0;
      v56 = 0;
      CFBundleGetLocalizationInfoForLocalization();
      CanonicalLanguageIdentifierFromString = (const __CFString *)CFBundleCopyLocalizationForLocalizationInfo();
      if (!CanonicalLanguageIdentifierFromString)
      {
LABEL_15:
        if (v14)
        {
          CFRetain(v14);
          CanonicalLanguageIdentifierFromString = v14;
        }
        else
        {
          CanonicalLanguageIdentifierFromString = 0;
        }
      }
LABEL_20:
      MutableCopy = CFStringCreateMutableCopy(v12, 0, CanonicalLanguageIdentifierFromString);
      if (CFStringGetLength(MutableCopy) >= 3 && CFStringGetCharacterAtIndex(MutableCopy, 2) == 95)
      {
        v58.location = 2;
        v58.length = 1;
        CFStringReplace(MutableCopy, v58, CFSTR("-"));
      }
      WTF::String::String((WTF::StringImpl **)&cf, MutableCopy);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (CanonicalLanguageIdentifierFromString)
        CFRelease(CanonicalLanguageIdentifierFromString);
      v25 = *((unsigned int *)a2 + 3);
      v26 = *a2;
      v27 = cf;
      cf = 0;
      *(_QWORD *)(v26 + 8 * v25) = v27;
      *((_DWORD *)a2 + 3) = v25 + 1;
      v28 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      if (v9 == ++v11)
        goto LABEL_32;
    }
    CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(v12, v14);
    if (!CanonicalLanguageIdentifierFromString)
      goto LABEL_15;
    goto LABEL_20;
  }
  __break(0xC471u);
}

uint64_t WTF::indexOfBestMatchingLanguageInList(WTF::StringImpl **a1, uint64_t a2, BOOL *a3)
{
  void *v6;
  id v7;
  __CFString *v8;
  void *v9;
  id v10;
  void *v11;
  __CFString *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  WTF *v23;
  BOOL v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0C99DC8];
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v34, a2);
  v7 = v34;
  if (*a1)
  {
    WTF::StringImpl::createCFString(*a1, (CFStringRef *)&v35);
    v8 = (__CFString *)v35;
  }
  else
  {
    v8 = &stru_1E35BF3F0;
  }
  v36[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "matchedLanguagesFromAvailableLanguages:forPreferredLanguages:", v7, v9);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    CFRetain(v10);

  if (v7)
    CFRelease(v7);
  if (!objc_msgSend(v11, "count"))
  {
    *a3 = 0;
    v22 = *(unsigned int *)(a2 + 12);
    if (!v11)
      return v22;
    goto LABEL_34;
  }
  objc_msgSend(v11, "firstObject");
  v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
  WTF::String::String((WTF::StringImpl **)&v35, v12);

  v19 = (WTF::AtomStringImpl *)v35;
  if (*a1 == v35)
  {
    *a3 = 1;
    v21 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v21)
      goto LABEL_28;
  }
  else
  {
    v20 = 0;
    if (*a1 && v35)
      v20 = WTF::equal(*a1, (const WTF::StringImpl *)v35, v13);
    *a3 = v20;
    v21 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v21)
    {
LABEL_28:
      v22 = -1;
LABEL_29:
      v23 = (WTF *)v35;
      goto LABEL_30;
    }
  }
  v22 = 0;
  while (1)
  {
    v23 = *(WTF **)(*(_QWORD *)a2 + 8 * v22);
    v19 = (WTF::AtomStringImpl *)v35;
    if (v23 == v35)
      break;
    if (v23)
      v24 = v35 == 0;
    else
      v24 = 1;
    if (!v24)
    {
      if (WTF::equal(v23, (const WTF::StringImpl *)v35, v13))
        goto LABEL_29;
      v21 = *(unsigned int *)(a2 + 12);
    }
    if (++v22 >= v21)
      goto LABEL_28;
  }
LABEL_30:
  v35 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v19, (uint64_t)v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      if (!v11)
        return v22;
      goto LABEL_34;
    }
    *(_DWORD *)v23 -= 2;
  }
  if (v11)
LABEL_34:
    CFRelease(v11);
  return v22;
}

void sub_197AE4DA4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v5 = v4;
  *a1 = v4;
  if (v4)
    CFRetain(v4);

  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(WTF::StringImpl ***)a2;
    v8 = 8 * v6;
    do
    {
      while (1)
      {
        v9 = v5;
        WTF::makeNSArrayElement(v7, &v14);
        v10 = v14;
        v11 = v9;
        v12 = v10;
        if (v12)
          break;

        ++v7;
        v8 -= 8;
        if (!v8)
          return;
      }
      v13 = v12;
      objc_msgSend(v11, "addObject:", v12);

      CFRelease(v13);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
}

void sub_197AE4F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197AE4F30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  CFRelease(v5);
  *v1 = 0;
  if (!v2)
    _Unwind_Resume(a1);
  CFRelease(v3);
  _Unwind_Resume(a1);
}

uint64_t WTF::canMinimizeLanguages(void)::$_0::operator()(WTF *a1)
{
  if ((*((_BYTE *)WTF::sdkAlignedBehaviors(a1) + 4) & 2) != 0)
    return objc_opt_respondsToSelector() & 1;
  else
    return 0;
}

uint64_t WTF::minimizedLanguagesFromLanguages@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  uint64_t v5;

  v3 = (const void *)this;
  {
    if (WTF::canMinimizeLanguages(void)::result)
      goto LABEL_3;
  }
  else
  {
    v5 = this;
    this = (uint64_t)WTF::sdkAlignedBehaviors((WTF *)this);
    if ((*(_BYTE *)(this + 4) & 2) != 0)
    {
      this = objc_opt_respondsToSelector();
      WTF::canMinimizeLanguages(void)::result = this & 1;
      v3 = (const void *)v5;
      if ((this & 1) != 0)
      {
LABEL_3:
        this = objc_msgSend(MEMORY[0x1E0C99DC8], "minimizedLanguagesFromLanguages:", v3);
        v3 = (const void *)this;
        *a2 = this;
        if (!this)
          return this;
        return (uint64_t)CFRetain(v3);
      }
    }
    else
    {
      WTF::canMinimizeLanguages(void)::result = 0;
      v3 = (const void *)v5;
    }
  }
  *a2 = v3;
  if (v3)
    return (uint64_t)CFRetain(v3);
  return this;
}

void WTF::overrideUserPreferredLanguages(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  const void *v7;
  void *v8;
  WTF *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const void *v18;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *MEMORY[0x1E0CB2878];
  objc_msgSend(v2, "volatileDomainForName:", *MEMORY[0x1E0CB2878]);
  v17 = (id)objc_claimAutoreleasedReturnValue();

  v4 = (id)objc_msgSend(v17, "mutableCopy");
  v5 = v4;
  if (v4)
    CFRetain(v4);

  v6 = v5;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v18, a1);
  v7 = v18;
  objc_msgSend(v6, "setValue:forKey:", v18, CFSTR("AppleLanguages"));
  if (v7)
    CFRelease(v7);

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setVolatileDomain:forName:", v6, v3);

  WTF::languageDidChange(v9, v10, v11, v12, v13, v14, v15, v16);
  if (v5)
    CFRelease(v6);

}

void sub_197AE5194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_197AE51B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  uint64_t v9;
  const void *v10;
  void *v11;

  if (v9)
    CFRelease(v10);

  _Unwind_Resume(a1);
}

void WTF::LibraryPathDiagnosticsLogger::logJSONPayload(id *this, const WTF::JSONImpl::Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  uint8_t buf[4];
  _DWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WTF::JSONImpl::Value::toJSONString(a2, a3, a4, a5, a6, a7, a8, &v41);
  v9 = *this;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8((uint64_t *)&v41, 0, v10, v11, v12, v13, v14, &v40, v15);
    v16 = v40;
    v17 = v40 + 4;
    if (!v40)
      v17 = 0;
    *(_DWORD *)buf = 136446210;
    v43 = v17;
    _os_log_impl(&dword_197AA9000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    if (v16)
    {
      if (*v16 == 1)
        WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
      else
        --*v16;
    }
  }

  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
}

void WTF::JSONImpl::ObjectBase::setString(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  WTF *v28;
  _BYTE v29[24];

  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x400000001;
  v12 = *(_DWORD **)a3;
  *((_QWORD *)v6 + 1) = *(_QWORD *)a3;
  if (v12)
    *v12 += 2;
  v28 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, a2, (const WTF::StringImpl *)&v28, v7, v8, v9, v10, v11, (uint64_t)v29);
  if (v29[16])
  {
    v20 = (uint64_t *)((char *)this + 24);
    v21 = *((unsigned int *)this + 9);
    if ((_DWORD)v21 == *((_DWORD *)this + 8))
    {
      v22 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)a2);
      v21 = *((unsigned int *)this + 9);
      v23 = *((_QWORD *)this + 3);
      v24 = *v22;
      if (*v22)
        *v24 += 2;
      *(_QWORD *)(v23 + 8 * v21) = v24;
    }
    else
    {
      v25 = *v20;
      v26 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v26 += 2;
      *(_QWORD *)(v25 + 8 * v21) = v26;
    }
    *((_DWORD *)this + 9) = v21 + 1;
  }
  v27 = v28;
  v28 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      WTF::JSONImpl::Value::operator delete(v27, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v27;
  }
}

void sub_197AE5470(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 != 1)
    {
      --*(_DWORD *)a9;
      _Unwind_Resume(exception_object);
    }
    WTF::JSONImpl::Value::operator delete(a9, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

void WTF::LibraryPathDiagnosticsLogger::logObject(id *a1, uint64_t a2, WTF **a3)
{
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  WTF::AtomStringImpl *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  int v54;
  int v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  WTF *v64;
  _BYTE v65[16];
  char v66;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v7 = *(WTF::AtomStringImpl **)a2;
  v8 = *(unsigned int *)(a2 + 12);
  v9 = (WTF::AtomStringImpl *)(*(_QWORD *)a2 + 8 * v8 - 8);
  v10 = *a3;
  *a3 = 0;
  v64 = v10;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), v9, (const WTF::StringImpl *)&v64, v11, v12, v13, v14, v15, (uint64_t)v65);
  if (v66)
  {
    v23 = (uint64_t *)(v6 + 24);
    v24 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v24 == *(_DWORD *)(v6 + 32))
    {
      v25 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)v9);
      v24 = *(unsigned int *)(v6 + 36);
      v26 = *(_QWORD *)(v6 + 24);
      v27 = *v25;
      if (*v25)
        *v27 += 2;
      *(_QWORD *)(v26 + 8 * v24) = v27;
    }
    else
    {
      v28 = *v23;
      v29 = *(_DWORD **)v9;
      if (*(_QWORD *)v9)
        *v29 += 2;
      *(_QWORD *)(v28 + 8 * v24) = v29;
    }
    *(_DWORD *)(v6 + 36) = v24 + 1;
  }
  v30 = v64;
  v64 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v30, v16, v17, v18, v19, v20, v21, v22);
      if (v9 != *(WTF::AtomStringImpl **)a2)
        goto LABEL_14;
      goto LABEL_38;
    }
    --*(_DWORD *)v30;
  }
  if (v9 != *(WTF::AtomStringImpl **)a2)
  {
LABEL_14:
    v31 = (WTF::AtomStringImpl *)((char *)v7 + 8 * v8 - 16);
    while (1)
    {
      while (1)
      {
        v33 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v33 = 0x500000001;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 16) = 0;
        ++*(_DWORD *)v6;
        v64 = (WTF *)v6;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v33 + 16), v31, (const WTF::StringImpl *)&v64, v34, v35, v36, v37, v38, (uint64_t)v65);
        if (v66)
        {
          v46 = (uint64_t *)(v33 + 24);
          v47 = *(unsigned int *)(v33 + 36);
          if ((_DWORD)v47 == *(_DWORD *)(v33 + 32))
          {
            v48 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)v31);
            v47 = *(unsigned int *)(v33 + 36);
            v49 = *(_QWORD *)(v33 + 24);
            v50 = *v48;
            if (*v48)
              *v50 += 2;
            *(_QWORD *)(v49 + 8 * v47) = v50;
          }
          else
          {
            v51 = *v46;
            v52 = *(_DWORD **)v31;
            if (*(_QWORD *)v31)
              *v52 += 2;
            *(_QWORD *)(v51 + 8 * v47) = v52;
          }
          *(_DWORD *)(v33 + 36) = v47 + 1;
        }
        v53 = v64;
        v64 = 0;
        if (v53)
          break;
LABEL_28:
        ++*(_DWORD *)v33;
        v54 = *(_DWORD *)v6 - 1;
        if (*(_DWORD *)v6 != 1)
          goto LABEL_29;
LABEL_32:
        WTF::JSONImpl::Value::operator delete((WTF *)v6, v39, v40, v41, v42, v43, v44, v45);
        v55 = *(_DWORD *)v33 - 1;
        if (*(_DWORD *)v33 != 1)
          goto LABEL_15;
LABEL_33:
        WTF::JSONImpl::Value::operator delete((WTF *)v33, v39, v40, v41, v42, v43, v44, v45);
        v6 = v33;
        v32 = v31 == *(WTF::AtomStringImpl **)a2;
        v31 = (WTF::AtomStringImpl *)((char *)v31 - 8);
        if (v32)
        {
LABEL_35:
          WTF::LibraryPathDiagnosticsLogger::logJSONPayload(a1, (const WTF::JSONImpl::Object *)v33, v40, v41, v42, v43, v44, v45);
          v63 = *(_DWORD *)v33 - 1;
          if (*(_DWORD *)v33 != 1)
            goto LABEL_36;
LABEL_39:
          WTF::JSONImpl::Value::operator delete((WTF *)v33, v56, v57, v58, v59, v60, v61, v62);
          return;
        }
      }
      if (*(_DWORD *)v53 != 1)
      {
        --*(_DWORD *)v53;
        goto LABEL_28;
      }
      WTF::JSONImpl::Value::operator delete(v53, v39, v40, v41, v42, v43, v44, v45);
      ++*(_DWORD *)v33;
      v54 = *(_DWORD *)v6 - 1;
      if (*(_DWORD *)v6 == 1)
        goto LABEL_32;
LABEL_29:
      *(_DWORD *)v6 = v54;
      v55 = *(_DWORD *)v33 - 1;
      if (*(_DWORD *)v33 == 1)
        goto LABEL_33;
LABEL_15:
      *(_DWORD *)v33 = v55;
      v6 = v33;
      v32 = v31 == *(WTF::AtomStringImpl **)a2;
      v31 = (WTF::AtomStringImpl *)((char *)v31 - 8);
      if (v32)
        goto LABEL_35;
    }
  }
LABEL_38:
  v33 = v6;
  WTF::LibraryPathDiagnosticsLogger::logJSONPayload(a1, (const WTF::JSONImpl::Object *)v6, v17, v18, v19, v20, v21, v22);
  v63 = *(_DWORD *)v6 - 1;
  if (*(_DWORD *)v6 == 1)
    goto LABEL_39;
LABEL_36:
  *(_DWORD *)v33 = v63;
}

void sub_197AE5788(_Unwind_Exception *exception_object, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9)
{
  WTF *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::JSONImpl::Value::operator delete(a9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)a9;
  }
  if (*(_DWORD *)v9 == 1)
  {
    WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    _Unwind_Resume(exception_object);
  }
  --*(_DWORD *)v9;
  _Unwind_Resume(exception_object);
}

void WTF::LibraryPathDiagnosticsLogger::logError(id *this, const char *__format, ...)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unint64_t v24;
  size_t v25;
  va_list v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list v34[4];
  WTF *v35;
  __int128 v36;
  char v37[128];
  uint64_t v38;
  va_list va;

  va_start(va, __format);
  v38 = *MEMORY[0x1E0C80C00];
  v34[3] = (va_list)off_1E3572250;
  v35 = (WTF *)v37;
  v36 = xmmword_199122F80;
  v37[0] = 0;
  va_copy((va_list)v34, va);
  v4 = vsnprintf(v37, 0x80uLL, __format, va);
  v5 = 0;
  v6 = v4 + 1;
  if (v6 > 0x80)
  {
    *((_QWORD *)&v36 + 1) = 2 * v6;
    v7 = (void *)WTF::fastMalloc((WTF *)(2 * v6));
    memcpy(v7, v35, v36 + 1);
    if (v35 != (WTF *)v37)
      WTF::fastFree((unint64_t)v35, v8, v9, v10, v11, v12, v13, v14);
    v35 = (WTF *)v7;
    v4 = vsnprintf((char *)v7 + v36, *((_QWORD *)&v36 + 1) - v36, __format, v34[0]);
    v5 = v36;
  }
  *(_QWORD *)&v36 = v5 + v4;
  v15 = *this;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v23 = v35;
    if (v35)
    {
      v25 = v36;
      if ((unint64_t)v36 > 0xFFFFFFFFFFFFFFEELL)
      {
        __break(0xC471u);
        JUMPOUT(0x197AE5A18);
      }
      v24 = WTF::fastMalloc((WTF *)(v36 + 17));
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = v25;
      memcpy((void *)(v24 + 16), v23, v25);
      *(_BYTE *)(v24 + 16 + v25) = 0;
    }
    else
    {
      v24 = 0;
    }
    v26 = (va_list)(v24 + 16);
    if (!v24)
      v26 = 0;
    LODWORD(v34[0]) = 136446210;
    *(va_list *)((char *)v34 + 4) = v26;
    _os_log_error_impl(&dword_197AA9000, v15, OS_LOG_TYPE_ERROR, "%{public}s", (uint8_t *)v34, 0xCu);
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v27, v28, v29, v30, v31, v32, v33);
      else
        --*(_DWORD *)v24;
    }
  }

  if (v35 != (WTF *)v37)
    WTF::fastFree((unint64_t)v35, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(WTF::StringImpl ***)a1;
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v21 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::LibraryPathDiagnosticsLogger::logCryptexCanaryInfo(id *a1, uint64_t a2, uint64_t *a3)
{
  const char *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t (**v15)(void);
  WTF *v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  size_t v20;
  WTF::StringImpl *v21;
  const char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  unint64_t v57;
  size_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  WTF::StringImpl **v87;
  WTF::AtomStringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  WTF *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF *v146;
  char __str[8];
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x400uLL);
  if (a2)
  {
    if (a2 != 1)
      abort();
    v6 = "_app";
    v7 = "/System/Cryptexes/App";
  }
  else
  {
    v6 = "_os";
    v7 = "";
  }
  snprintf(__str, 0x400uLL, "%s/usr/lib/libcanary%s.dylib", v7, v6);
  v8 = dlopen(__str, 5);
  if (v8)
  {
    v15 = (uint64_t (**)(void))dlsym(v8, "_canary_chirp_chirp");
    if (v15)
    {
      v16 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v16 = 0x500000001;
      *((_QWORD *)v16 + 3) = 0;
      *((_QWORD *)v16 + 4) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v146 = v16;
      v17 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v17 = 0x700000002;
      *(_QWORD *)(v17 + 8) = "Version";
      *(_DWORD *)(v17 + 16) = 4;
      *(_QWORD *)__str = v17;
      v18 = (const char *)v15[2]();
      v19 = (unint64_t)v18;
      if (v18)
      {
        v20 = strlen(v18);
        WTF::fromUTF8Impl<false>(v19, v20, (uint64_t *)&v145);
      }
      else
      {
        v145 = 0;
      }
      WTF::JSONImpl::ObjectBase::setString(v16, (const WTF::String *)__str, (const WTF::String *)&v145);
      v37 = v145;
      v145 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          v38 = *(WTF::StringImpl **)__str;
          *(_QWORD *)__str = 0;
          if (!v38)
            goto LABEL_25;
          goto LABEL_22;
        }
        *(_DWORD *)v37 -= 2;
      }
      v38 = *(WTF::StringImpl **)__str;
      *(_QWORD *)__str = 0;
      if (!v38)
      {
LABEL_25:
        v55 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v55 = 0x700000002;
        *(_QWORD *)(v55 + 8) = "Variant";
        *(_DWORD *)(v55 + 16) = 4;
        *(_QWORD *)__str = v55;
        v56 = (const char *)v15[3]();
        v57 = (unint64_t)v56;
        if (v56)
        {
          v58 = strlen(v56);
          WTF::fromUTF8Impl<false>(v57, v58, (uint64_t *)&v145);
        }
        else
        {
          v145 = 0;
        }
        WTF::JSONImpl::ObjectBase::setString(v16, (const WTF::String *)__str, (const WTF::String *)&v145);
        v66 = v145;
        v145 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
          {
            WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
            WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
            v67 = *(WTF::StringImpl **)__str;
            *(_QWORD *)__str = 0;
            if (!v67)
              goto LABEL_37;
LABEL_34:
            if (*(_DWORD *)v67 == 2)
            {
              WTF::StringImpl::~StringImpl(v67, v59, v60, v61, v62, v63, v64, v65);
              WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
LABEL_37:
            v84 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v84 = 0x600000002;
            *(_QWORD *)(v84 + 8) = "Canary";
            *(_DWORD *)(v84 + 16) = 4;
            v85 = (WTF::StringImpl *)*a3;
            if (v85)
              *(_DWORD *)v85 += 2;
            *(_QWORD *)__str = 0;
            v148 = 0;
            v86 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
            v87 = v86;
            LODWORD(v148) = 2;
            *(_QWORD *)__str = v86;
            *(_DWORD *)v84 += 2;
            *v86 = (WTF::StringImpl *)v84;
            if (v85)
              *(_DWORD *)v85 += 2;
            v86[1] = v85;
            HIDWORD(v148) = 2;
            WTF::LibraryPathDiagnosticsLogger::logObject(a1, (uint64_t)__str, &v146);
            v95 = *v87;
            *v87 = 0;
            if (v95)
            {
              if (*(_DWORD *)v95 == 2)
              {
                WTF::StringImpl::~StringImpl(v95, v88, v89, v90, v91, v92, v93, v94);
                WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
                v96 = v87[1];
                v87[1] = 0;
                if (!v96)
                  goto LABEL_49;
LABEL_47:
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::~StringImpl(v96, v88, v89, v90, v91, v92, v93, v94);
                  WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
                  WTF::fastFree((unint64_t)v87, v120, v121, v122, v123, v124, v125, v126);
                  if (!v85)
                    goto LABEL_54;
LABEL_52:
                  if (*(_DWORD *)v85 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v85, v105, v106, v107, v108, v109, v110, v111);
                    WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
                    v127 = *(_DWORD *)v84 - 2;
                    if (*(_DWORD *)v84 != 2)
                    {
LABEL_55:
                      *(_DWORD *)v84 = v127;
                      v128 = v146;
                      if (!v146)
                        return;
LABEL_59:
                      if (*(_DWORD *)v128 == 1)
                        WTF::JSONImpl::Value::operator delete(v128, v105, v106, v107, v108, v109, v110, v111);
                      else
                        --*(_DWORD *)v128;
                      return;
                    }
LABEL_58:
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v84, v105, v106, v107, v108, v109, v110, v111);
                    WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
                    v128 = v146;
                    if (!v146)
                      return;
                    goto LABEL_59;
                  }
                  *(_DWORD *)v85 -= 2;
LABEL_54:
                  v127 = *(_DWORD *)v84 - 2;
                  if (*(_DWORD *)v84 != 2)
                    goto LABEL_55;
                  goto LABEL_58;
                }
                *(_DWORD *)v96 -= 2;
LABEL_49:
                WTF::fastFree((unint64_t)v87, v88, v89, v90, v91, v92, v93, v94);
                if (!v85)
                  goto LABEL_54;
                goto LABEL_52;
              }
              *(_DWORD *)v95 -= 2;
            }
            v96 = v87[1];
            v87[1] = 0;
            if (!v96)
              goto LABEL_49;
            goto LABEL_47;
          }
          *(_DWORD *)v66 -= 2;
        }
        v67 = *(WTF::StringImpl **)__str;
        *(_QWORD *)__str = 0;
        if (!v67)
          goto LABEL_37;
        goto LABEL_34;
      }
LABEL_22:
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
      goto LABEL_25;
    }
  }
  WTF::String::utf8(a3, 0, v9, v10, v11, v12, v13, __str, v14);
  v21 = *(WTF::StringImpl **)__str;
  v22 = (const char *)(*(_QWORD *)__str + 16);
  if (!*(_QWORD *)__str)
    v22 = 0;
  WTF::LibraryPathDiagnosticsLogger::logError(a1, "Unable to load canary metadata for '%s' cryptex", v22);
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v21;
  }
}

void sub_197AE5F58(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF *a13, WTF::StringImpl *a14)
{
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2, a3, a4, a5, a6, a7, a8);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::~StringImpl(v15, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  else
  {
    *(_DWORD *)v15 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 1)
    {
      WTF::JSONImpl::Value::operator delete(a13, v17, v18, v19, v20, v21, v22, v23);
      _Unwind_Resume(a1);
    }
    --*(_DWORD *)a13;
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void initializeLibraryPathDiagnostics()
{
  unint64_t v0;
  char v1;
  char **v2;
  char *v3;

  v0 = atomic_load(&initializeLibraryPathDiagnostics::onceFlag);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&initializeLibraryPathDiagnostics::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<initializeLibraryPathDiagnostics::$_0 &&>>);
  }
}

void logLibraryPathDiagnostics()
{
  uint64_t v0;
  const WTF::String *v1;
  const char *v2;
  unint64_t v3;
  size_t v4;
  WTF::JSONImpl::ObjectBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *dli_fname;
  WTF::String *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::String *v69;
  uint64_t v70;
  const char *v71;
  unint64_t v72;
  size_t v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  WTF::AtomStringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  WTF *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl **v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  WTF *v153;
  char *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  size_t v179;
  _QWORD *v180;
  double v181;
  double v182;
  float v183;
  WTF::AtomStringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  float v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  const char *v198;
  void *v199;
  void *v200;
  const void *dlopen_image_header;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  float v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  float v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  uint64_t v221;
  uint64_t v222;
  size_t v223;
  _DWORD *v224;
  const char *v225;
  const char *v226;
  const char *v227;
  WTF::AtomStringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF *v235;
  WTF::StringImpl *v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  size_t v263;
  WTF::AtomStringImpl *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  WTF *v272;
  unint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  BOOL v291;
  WTF *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  WTF::AtomStringImpl *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  _DWORD **v307;
  uint64_t v308;
  _DWORD *v309;
  uint64_t v310;
  WTF::StringImpl *v311;
  WTF *v312;
  WTF::StringImpl *v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  WTF::StringImpl **v324;
  WTF::StringImpl **v325;
  WTF::AtomStringImpl *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  WTF *v359;
  unint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  WTF::StringImpl *v385;
  unint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  unint64_t v395;
  size_t v396;
  _QWORD *v397;
  double v398;
  double v399;
  float v400;
  WTF::AtomStringImpl *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  WTF::StringImpl **v410;
  uint64_t v411;
  unint64_t v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  const __CFString *v420;
  uint64_t v421;
  __CFBundle *BundleWithIdentifier;
  const void *v423;
  uint64_t v424;
  const __CFURL *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  float v432;
  const __CFString *v433;
  const char *v434;
  WTF::AtomStringImpl *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  WTF *v442;
  WTF::StringImpl *v443;
  unint64_t v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  WTF *v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  void *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v470;
  CFTypeID v471;
  uint64_t v472;
  WTF::AtomStringImpl *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  WTF *v480;
  WTF::StringImpl *v481;
  uint64_t v482;
  WTF *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  _DWORD **v491;
  uint64_t v492;
  _DWORD *v493;
  uint64_t v494;
  WTF *v495;
  WTF *v496;
  unint64_t v497;
  void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  WTF::StringImpl *v506;
  uint64_t v507;
  WTF::StringImpl **v508;
  WTF::AtomStringImpl *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  WTF::StringImpl *v516;
  WTF::StringImpl *v517;
  unint64_t v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  WTF::StringImpl *v542;
  unint64_t v543;
  void *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  void *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  void *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  WTF::StringImpl *v576;
  unint64_t v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  WTF::AtomStringImpl *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  void *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  WTF::AtomStringImpl *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  void *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  os_log_t v617;
  os_log_t v618;
  WTF *v619;
  uint64_t v620;
  WTF::StringImpl *v621;
  WTF *v622;
  WTF *v623;
  Dl_info uu;
  WTF::String *v625;
  uint64_t v626;
  uuid_string_t out;
  uint64_t v628;

  v628 = *MEMORY[0x1E0C80C00];
  v617 = os_log_create("com.apple.WebKit.LibraryPathDiagnostics", "LibraryPathDiagnostics");
  v618 = v617;
  v0 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v0 = 0x400000002;
  *(_QWORD *)(v0 + 8) = "Path";
  *(_DWORD *)(v0 + 16) = 4;
  *(_QWORD *)&out[8] = 0;
  v1 = (const WTF::String *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)out = v1;
  *(_DWORD *)v0 += 2;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)&out[8] = 0x100000001;
  v2 = (const char *)_CFProcessPath();
  v3 = (unint64_t)v2;
  if (v2)
  {
    v4 = strlen(v2);
    WTF::fromUTF8Impl<false>(v3, v4, (uint64_t *)&v625);
  }
  else
  {
    v625 = 0;
  }
  WTF::FileSystemImpl::realPath((WTF::FileSystemImpl *)&v625, (WTF::FileSystemImpl *)&uu);
  v5 = (WTF::JSONImpl::ObjectBase *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = 0x500000001;
  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 2) = 0;
  WTF::JSONImpl::ObjectBase::setString(v5, v1, (const WTF::String *)&uu);
  WTF::LibraryPathDiagnosticsLogger::logJSONPayload((id *)&v618, v5, v6, v7, v8, v9, v10, v11);
  if (*(_DWORD *)v5 == 1)
  {
    WTF::JSONImpl::Value::operator delete(v5, v12, v13, v14, v15, v16, v17, v18);
    dli_fname = (WTF::StringImpl *)uu.dli_fname;
    uu.dli_fname = 0;
    if (!dli_fname)
      goto LABEL_10;
  }
  else
  {
    --*(_DWORD *)v5;
    dli_fname = (WTF::StringImpl *)uu.dli_fname;
    uu.dli_fname = 0;
    if (!dli_fname)
      goto LABEL_10;
  }
  if (*(_DWORD *)dli_fname == 2)
  {
    WTF::StringImpl::~StringImpl(dli_fname, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    v20 = v625;
    v625 = 0;
    if (!v20)
      goto LABEL_15;
    goto LABEL_13;
  }
  *(_DWORD *)dli_fname -= 2;
LABEL_10:
  v20 = v625;
  v625 = 0;
  if (!v20)
  {
LABEL_15:
    v29 = *(WTF::StringImpl **)v1;
    *(_QWORD *)v1 = 0;
    if (!v29)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_13:
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
  WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
  v29 = *(WTF::StringImpl **)v1;
  *(_QWORD *)v1 = 0;
  if (!v29)
    goto LABEL_20;
LABEL_18:
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::~StringImpl(v29, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree((unint64_t)v1, v54, v55, v56, v57, v58, v59, v60);
    v45 = *(_DWORD *)v0 - 2;
    if (*(_DWORD *)v0 != 2)
      goto LABEL_21;
    goto LABEL_23;
  }
  *(_DWORD *)v29 -= 2;
LABEL_20:
  WTF::fastFree((unint64_t)v1, v12, v13, v14, v15, v16, v17, v18);
  v45 = *(_DWORD *)v0 - 2;
  if (*(_DWORD *)v0 != 2)
  {
LABEL_21:
    *(_DWORD *)v0 = v45;
    goto LABEL_24;
  }
LABEL_23:
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v0, v38, v39, v40, v41, v42, v43, v44);
  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
LABEL_24:
  uu.dli_fname = 0;
  uu.dli_fbase = 0;
  _dyld_get_shared_cache_uuid();
  v69 = (WTF::String *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v69 = 0x500000001;
  *((_QWORD *)v69 + 3) = 0;
  *((_QWORD *)v69 + 4) = 0;
  *((_QWORD *)v69 + 2) = 0;
  v625 = v69;
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x400000002;
  *(_QWORD *)(v70 + 8) = "Path";
  *(_DWORD *)(v70 + 16) = 4;
  *(_QWORD *)out = v70;
  v71 = (const char *)dyld_shared_cache_file_path();
  v72 = (unint64_t)v71;
  if (v71)
  {
    v73 = strlen(v71);
    WTF::fromUTF8Impl<false>(v72, v73, (uint64_t *)&v623);
  }
  else
  {
    v623 = 0;
  }
  WTF::FileSystemImpl::realPath((WTF::FileSystemImpl *)&v623, (WTF::FileSystemImpl *)&v619);
  WTF::JSONImpl::ObjectBase::setString(v69, (const WTF::String *)out, (const WTF::String *)&v619);
  v81 = v619;
  v619 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v74, v75, v76, v77, v78, v79, v80);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
      v82 = v623;
      v623 = 0;
      if (!v82)
        goto LABEL_35;
      goto LABEL_33;
    }
    *(_DWORD *)v81 -= 2;
  }
  v82 = v623;
  v623 = 0;
  if (!v82)
  {
LABEL_35:
    v91 = *(WTF::StringImpl **)out;
    *(_QWORD *)out = 0;
    if (!v91)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_33:
  if (*(_DWORD *)v82 != 2)
  {
    *(_DWORD *)v82 -= 2;
    goto LABEL_35;
  }
  WTF::StringImpl::~StringImpl(v82, v74, v75, v76, v77, v78, v79, v80);
  WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
  v91 = *(WTF::StringImpl **)out;
  *(_QWORD *)out = 0;
  if (!v91)
    goto LABEL_41;
LABEL_38:
  if (*(_DWORD *)v91 == 2)
  {
    WTF::StringImpl::~StringImpl(v91, v74, v75, v76, v77, v78, v79, v80);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
  }
  else
  {
    *(_DWORD *)v91 -= 2;
  }
LABEL_41:
  v108 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v108 = 0x400000002;
  *(_QWORD *)(v108 + 8) = "UUID";
  *(_DWORD *)(v108 + 16) = 4;
  v619 = (WTF *)v108;
  memset(out, 0, sizeof(out));
  uuid_unparse((const unsigned __int8 *)&uu, out);
  v109 = strlen(out);
  WTF::fromUTF8Impl<false>((unint64_t)out, v109, (uint64_t *)&v623);
  WTF::JSONImpl::ObjectBase::setString(v69, (const WTF::String *)&v619, (const WTF::String *)&v623);
  v117 = v623;
  v623 = 0;
  if (!v117)
    goto LABEL_44;
  if (*(_DWORD *)v117 != 2)
  {
    *(_DWORD *)v117 -= 2;
LABEL_44:
    v118 = v619;
    v619 = 0;
    if (!v118)
      goto LABEL_50;
    goto LABEL_47;
  }
  WTF::StringImpl::~StringImpl(v117, v110, v111, v112, v113, v114, v115, v116);
  WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
  v118 = v619;
  v619 = 0;
  if (!v118)
    goto LABEL_50;
LABEL_47:
  if (*(_DWORD *)v118 == 2)
  {
    WTF::StringImpl::~StringImpl(v118, v110, v111, v112, v113, v114, v115, v116);
    WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
  }
  else
  {
    *(_DWORD *)v118 -= 2;
  }
LABEL_50:
  v135 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v135 = 0xB00000002;
  *(_QWORD *)(v135 + 8) = "SharedCache";
  *(_DWORD *)(v135 + 16) = 4;
  *(_QWORD *)out = 0;
  *(_QWORD *)&out[8] = 0;
  v136 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)out = v136;
  *(_DWORD *)v135 += 2;
  *v136 = (WTF::StringImpl *)v135;
  *(_QWORD *)&out[8] = 0x100000001;
  WTF::LibraryPathDiagnosticsLogger::logObject((id *)&v618, (uint64_t)out, &v625);
  v144 = *v136;
  *v136 = 0;
  if (!v144)
    goto LABEL_53;
  if (*(_DWORD *)v144 != 2)
  {
    *(_DWORD *)v144 -= 2;
LABEL_53:
    WTF::fastFree((unint64_t)v136, v137, v138, v139, v140, v141, v142, v143);
    v152 = *(_DWORD *)v135 - 2;
    if (*(_DWORD *)v135 != 2)
      goto LABEL_54;
    goto LABEL_58;
  }
  WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)v137, v138, v139, v140, v141, v142, v143);
  WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
  WTF::fastFree((unint64_t)v136, v163, v164, v165, v166, v167, v168, v169);
  v152 = *(_DWORD *)v135 - 2;
  if (*(_DWORD *)v135 != 2)
  {
LABEL_54:
    *(_DWORD *)v135 = v152;
    v153 = v625;
    if (!v625)
      goto LABEL_55;
    goto LABEL_59;
  }
LABEL_58:
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v135, v145, v146, v147, v148, v149, v150, v151);
  WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
  v153 = v625;
  if (!v625)
  {
LABEL_55:
    v154 = getenv("LIBRARY_PATH_DIAGNOSTICS_LIBRARIES");
    if (!v154)
      goto LABEL_184;
    goto LABEL_63;
  }
LABEL_59:
  if (*(_DWORD *)v153 == 1)
  {
    WTF::JSONImpl::Value::operator delete(v153, v145, v146, v147, v148, v149, v150, v151);
    v154 = getenv("LIBRARY_PATH_DIAGNOSTICS_LIBRARIES");
    if (!v154)
      goto LABEL_184;
  }
  else
  {
    --*(_DWORD *)v153;
    v154 = getenv("LIBRARY_PATH_DIAGNOSTICS_LIBRARIES");
    if (!v154)
      goto LABEL_184;
  }
LABEL_63:
  v178 = (unint64_t)v154;
  v179 = strlen(v154);
  WTF::fromUTF8Impl<false>(v178, v179, (uint64_t *)&uu);
  v619 = 0;
  v620 = 0;
  v180 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v180 = off_1E3572800;
  v180[1] = &v619;
  *(_QWORD *)out = v180;
  WTF::String::splitInternal<false>((uint64_t *)&uu, 0x2Cu, out, v181, v182, v183);
  v192 = *(_QWORD *)out;
  *(_QWORD *)out = 0;
  if (v192)
    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  v193 = (WTF::StringImpl *)uu.dli_fname;
  uu.dli_fname = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, v184, v185, v186, v187, v188, v189, v190);
      WTF::fastFree(v386, v387, v388, v389, v390, v391, v392, v393);
      v194 = (uint64_t *)v619;
      v195 = HIDWORD(v620);
      if (HIDWORD(v620))
        goto LABEL_69;
LABEL_182:
      if (!v194)
        goto LABEL_184;
      goto LABEL_183;
    }
    *(_DWORD *)v193 -= 2;
  }
  v194 = (uint64_t *)v619;
  v195 = HIDWORD(v620);
  if (!HIDWORD(v620))
    goto LABEL_182;
LABEL_69:
  v196 = 8 * v195;
  do
  {
    WTF::String::utf8(v194, 0, v186, v187, v188, v189, v190, out, v191);
    v197 = *(_DWORD **)out;
    if (*(_QWORD *)out)
      v198 = (const char *)(*(_QWORD *)out + 16);
    else
      v198 = 0;
    v199 = dlopen(v198, 16);
    v200 = v199;
    if (v197)
    {
      if (*v197 == 1)
      {
        WTF::fastFree((unint64_t)v197, v184, v185, v186, v187, v188, v189, v190);
        if (!v200)
          goto LABEL_71;
        goto LABEL_81;
      }
      --*v197;
    }
    if (!v199)
      goto LABEL_71;
LABEL_81:
    dlopen_image_header = (const void *)_dyld_get_dlopen_image_header();
    v208 = (unint64_t)dlopen_image_header;
    if (dlopen_image_header)
    {
      memset(&uu, 0, sizeof(uu));
      if (dladdr(dlopen_image_header, &uu))
      {
        v625 = 0;
        v626 = 0;
        if ((_dyld_get_image_uuid() & 1) != 0)
        {
          v221 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v221 = 0x500000001;
          *(_QWORD *)(v221 + 16) = 0;
          *(_QWORD *)(v221 + 24) = 0;
          *(_QWORD *)(v221 + 32) = 0;
          v622 = (WTF *)v221;
          v222 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v222 = 0x400000002;
          *(_QWORD *)(v222 + 8) = "Path";
          *(_DWORD *)(v222 + 16) = 4;
          *(_QWORD *)out = v222;
          if (uu.dli_fname)
          {
            v223 = strlen(uu.dli_fname);
            WTF::fromUTF8Impl<false>((unint64_t)uu.dli_fname, v223, (uint64_t *)&v621);
          }
          else
          {
            v621 = 0;
          }
          WTF::FileSystemImpl::realPath((WTF::FileSystemImpl *)&v621, (WTF::FileSystemImpl *)&v623);
          WTF::JSONImpl::ObjectBase::setString((WTF::JSONImpl::ObjectBase *)v221, (const WTF::String *)out, (const WTF::String *)&v623);
          v235 = v623;
          v623 = 0;
          if (v235)
          {
            if (*(_DWORD *)v235 == 2)
            {
              WTF::StringImpl::~StringImpl(v235, v228, v229, v230, v231, v232, v233, v234);
              WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
              v236 = v621;
              v621 = 0;
              if (!v236)
                goto LABEL_107;
LABEL_105:
              if (*(_DWORD *)v236 == 2)
              {
                WTF::StringImpl::~StringImpl(v236, v228, v229, v230, v231, v232, v233, v234);
                WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
                v245 = *(WTF::StringImpl **)out;
                *(_QWORD *)out = 0;
                if (!v245)
                  goto LABEL_113;
LABEL_110:
                if (*(_DWORD *)v245 == 2)
                {
                  WTF::StringImpl::~StringImpl(v245, v228, v229, v230, v231, v232, v233, v234);
                  WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
                }
                else
                {
                  *(_DWORD *)v245 -= 2;
                }
LABEL_113:
                v262 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v262 = 0x400000002;
                *(_QWORD *)(v262 + 8) = "UUID";
                *(_DWORD *)(v262 + 16) = 4;
                v623 = (WTF *)v262;
                memset(out, 0, sizeof(out));
                uuid_unparse((const unsigned __int8 *)&v625, out);
                v263 = strlen(out);
                WTF::fromUTF8Impl<false>((unint64_t)out, v263, (uint64_t *)&v621);
                WTF::JSONImpl::ObjectBase::setString((WTF::JSONImpl::ObjectBase *)v221, (const WTF::String *)&v623, (const WTF::String *)&v621);
                v271 = v621;
                v621 = 0;
                if (v271)
                {
                  if (*(_DWORD *)v271 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v271, v264, v265, v266, v267, v268, v269, v270);
                    WTF::fastFree(v273, v274, v275, v276, v277, v278, v279, v280);
                    v272 = v623;
                    v623 = 0;
                    if (!v272)
                      goto LABEL_122;
                    goto LABEL_119;
                  }
                  *(_DWORD *)v271 -= 2;
                }
                v272 = v623;
                v623 = 0;
                if (!v272)
                {
LABEL_122:
                  v289 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v289 = 0xD00000002;
                  *(_QWORD *)(v289 + 8) = "InSharedCache";
                  *(_DWORD *)(v289 + 16) = 4;
                  v621 = (WTF::StringImpl *)v289;
                  v291 = v208 >> 31 > 2 && HIDWORD(v208) < 3;
                  v292 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v292 = 0x100000001;
                  *((_BYTE *)v292 + 8) = v291;
                  v623 = v292;
                  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v221 + 16), (WTF::AtomStringImpl *)&v621, (const WTF::StringImpl *)&v623, v293, v294, v295, v296, v297, (uint64_t)out);
                  if (out[16])
                  {
                    v305 = (uint64_t *)(v221 + 24);
                    v306 = *(unsigned int *)(v221 + 36);
                    if ((_DWORD)v306 == *(_DWORD *)(v221 + 32))
                    {
                      v307 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v305, v306 + 1, (unint64_t)&v621);
                      v306 = *(unsigned int *)(v221 + 36);
                      v308 = *(_QWORD *)(v221 + 24);
                      v309 = *v307;
                      if (*v307)
                        *v309 += 2;
                      *(_QWORD *)(v308 + 8 * v306) = v309;
                    }
                    else
                    {
                      v310 = *v305;
                      v311 = v621;
                      if (v621)
                        *(_DWORD *)v621 += 2;
                      *(_QWORD *)(v310 + 8 * v306) = v311;
                    }
                    *(_DWORD *)(v221 + 36) = v306 + 1;
                  }
                  v312 = v623;
                  v623 = 0;
                  if (v312)
                  {
                    if (*(_DWORD *)v312 == 1)
                    {
                      WTF::JSONImpl::Value::operator delete(v312, v298, v299, v300, v301, v302, v303, v304);
                      v313 = v621;
                      v621 = 0;
                      if (!v313)
                        goto LABEL_144;
                      goto LABEL_141;
                    }
                    --*(_DWORD *)v312;
                  }
                  v313 = v621;
                  v621 = 0;
                  if (!v313)
                    goto LABEL_144;
LABEL_141:
                  if (*(_DWORD *)v313 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v313, v298, v299, v300, v301, v302, v303, v304);
                    WTF::fastFree(v314, v315, v316, v317, v318, v319, v320, v321);
                  }
                  else
                  {
                    *(_DWORD *)v313 -= 2;
                  }
LABEL_144:
                  v322 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v322 = 0x900000002;
                  *(_QWORD *)(v322 + 8) = "Libraries";
                  *(_DWORD *)(v322 + 16) = 4;
                  v323 = (WTF::StringImpl *)*v194;
                  if (*v194)
                    *(_DWORD *)v323 += 2;
                  *(_QWORD *)out = 0;
                  *(_QWORD *)&out[8] = 0;
                  v324 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
                  v325 = v324;
                  *(_DWORD *)&out[8] = 2;
                  *(_QWORD *)out = v324;
                  *(_DWORD *)v322 += 2;
                  *v324 = (WTF::StringImpl *)v322;
                  if (v323)
                    *(_DWORD *)v323 += 2;
                  v324[1] = v323;
                  *(_DWORD *)&out[12] = 2;
                  WTF::LibraryPathDiagnosticsLogger::logObject((id *)&v618, (uint64_t)out, &v622);
                  v333 = *v325;
                  *v325 = 0;
                  if (v333)
                  {
                    if (*(_DWORD *)v333 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v333, v326, v327, v328, v329, v330, v331, v332);
                      WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
                      v334 = v325[1];
                      v325[1] = 0;
                      if (!v334)
                        goto LABEL_156;
LABEL_154:
                      if (*(_DWORD *)v334 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v334, v326, v327, v328, v329, v330, v331, v332);
                        WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
                        WTF::fastFree((unint64_t)v325, v351, v352, v353, v354, v355, v356, v357);
                        if (!v323)
                          goto LABEL_161;
LABEL_159:
                        if (*(_DWORD *)v323 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v323, v184, v185, v186, v187, v188, v189, v190);
                          WTF::fastFree(v360, v361, v362, v363, v364, v365, v366, v367);
                          v358 = *(_DWORD *)v322 - 2;
                          if (*(_DWORD *)v322 != 2)
                          {
LABEL_162:
                            *(_DWORD *)v322 = v358;
                            v359 = v622;
                            if (!v622)
                              goto LABEL_71;
                            goto LABEL_166;
                          }
LABEL_165:
                          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v322, v184, v185, v186, v187, v188, v189, v190);
                          WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
                          v359 = v622;
                          if (!v622)
                            goto LABEL_71;
LABEL_166:
                          if (*(_DWORD *)v359 == 1)
                            WTF::JSONImpl::Value::operator delete(v359, v184, v185, v186, v187, v188, v189, v190);
                          else
                            --*(_DWORD *)v359;
                          goto LABEL_71;
                        }
                        *(_DWORD *)v323 -= 2;
LABEL_161:
                        v358 = *(_DWORD *)v322 - 2;
                        if (*(_DWORD *)v322 != 2)
                          goto LABEL_162;
                        goto LABEL_165;
                      }
                      *(_DWORD *)v334 -= 2;
LABEL_156:
                      WTF::fastFree((unint64_t)v325, v326, v327, v328, v329, v330, v331, v332);
                      if (!v323)
                        goto LABEL_161;
                      goto LABEL_159;
                    }
                    *(_DWORD *)v333 -= 2;
                  }
                  v334 = v325[1];
                  v325[1] = 0;
                  if (!v334)
                    goto LABEL_156;
                  goto LABEL_154;
                }
LABEL_119:
                if (*(_DWORD *)v272 == 2)
                {
                  WTF::StringImpl::~StringImpl(v272, v264, v265, v266, v267, v268, v269, v270);
                  WTF::fastFree(v281, v282, v283, v284, v285, v286, v287, v288);
                }
                else
                {
                  *(_DWORD *)v272 -= 2;
                }
                goto LABEL_122;
              }
              *(_DWORD *)v236 -= 2;
LABEL_107:
              v245 = *(WTF::StringImpl **)out;
              *(_QWORD *)out = 0;
              if (!v245)
                goto LABEL_113;
              goto LABEL_110;
            }
            *(_DWORD *)v235 -= 2;
          }
          v236 = v621;
          v621 = 0;
          if (!v236)
            goto LABEL_107;
          goto LABEL_105;
        }
        WTF::String::utf8(v194, 0, v215, v216, v217, v218, v219, out, v220);
        v224 = *(_DWORD **)out;
        v227 = (const char *)(*(_QWORD *)out + 16);
        if (!*(_QWORD *)out)
          v227 = 0;
        WTF::LibraryPathDiagnosticsLogger::logError((id *)&v618, "No UUID found for %s", v227);
      }
      else
      {
        WTF::String::utf8(v194, 0, v209, v210, v211, v212, v213, out, v214);
        v224 = *(_DWORD **)out;
        v226 = (const char *)(*(_QWORD *)out + 16);
        if (!*(_QWORD *)out)
          v226 = 0;
        WTF::LibraryPathDiagnosticsLogger::logError((id *)&v618, "No info returned from dladdr() for %s", v226);
      }
    }
    else
    {
      WTF::String::utf8(v194, 0, v202, v203, v204, v205, v206, out, v207);
      v224 = *(_DWORD **)out;
      v225 = (const char *)(*(_QWORD *)out + 16);
      if (!*(_QWORD *)out)
        v225 = 0;
      WTF::LibraryPathDiagnosticsLogger::logError((id *)&v618, "Unable to locate mach header for %s", v225);
    }
    if (v224)
    {
      if (*v224 == 1)
        WTF::fastFree((unint64_t)v224, v184, v185, v186, v187, v188, v189, v190);
      else
        --*v224;
    }
LABEL_71:
    ++v194;
    v196 -= 8;
  }
  while (v196);
  v194 = (uint64_t *)v619;
  if (HIDWORD(v620))
  {
    v376 = 8 * HIDWORD(v620);
    do
    {
      v385 = (WTF::StringImpl *)*v194;
      *v194 = 0;
      if (v385)
      {
        if (*(_DWORD *)v385 == 2)
        {
          WTF::StringImpl::~StringImpl(v385, v184, v185, v186, v187, v188, v189, v190);
          WTF::fastFree(v377, v378, v379, v380, v381, v382, v383, v384);
        }
        else
        {
          *(_DWORD *)v385 -= 2;
        }
      }
      ++v194;
      v376 -= 8;
    }
    while (v376);
    v194 = (uint64_t *)v619;
  }
  if (v194)
  {
LABEL_183:
    v619 = 0;
    LODWORD(v620) = 0;
    WTF::fastFree((unint64_t)v194, v184, v185, v186, v187, v188, v189, v190);
  }
LABEL_184:
  v394 = getenv("LIBRARY_PATH_DIAGNOSTICS_BUNDLES");
  if (!v394)
    goto LABEL_287;
  v395 = (unint64_t)v394;
  v396 = strlen(v394);
  WTF::fromUTF8Impl<false>(v395, v396, (uint64_t *)&uu);
  v625 = 0;
  v626 = 0;
  v397 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v397 = off_1E3572800;
  v397[1] = &v625;
  *(_QWORD *)out = v397;
  WTF::String::splitInternal<false>((uint64_t *)&uu, 0x2Cu, out, v398, v399, v400);
  v408 = *(_QWORD *)out;
  *(_QWORD *)out = 0;
  if (v408)
    (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
  v409 = (WTF::StringImpl *)uu.dli_fname;
  uu.dli_fname = 0;
  if (v409)
  {
    if (*(_DWORD *)v409 != 2)
    {
      *(_DWORD *)v409 -= 2;
      goto LABEL_190;
    }
    WTF::StringImpl::~StringImpl(v409, v401, v402, v403, v404, v405, v406, v407);
    WTF::fastFree(v412, v413, v414, v415, v416, v417, v418, v419);
    v410 = (WTF::StringImpl **)v625;
    v411 = HIDWORD(v626);
    if (!HIDWORD(v626))
      goto LABEL_285;
  }
  else
  {
LABEL_190:
    v410 = (WTF::StringImpl **)v625;
    v411 = HIDWORD(v626);
    if (!HIDWORD(v626))
      goto LABEL_285;
  }
  v420 = (const __CFString *)*MEMORY[0x1E0C9AE90];
  v421 = 8 * v411;
  while (2)
  {
    WTF::String::createCFString(v410, (CFStringRef *)out);
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(*(CFStringRef *)out);
    v423 = *(const void **)out;
    *(_QWORD *)out = 0;
    if (v423)
      CFRelease(v423);
    if (BundleWithIdentifier)
    {
      v424 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v424 = 0x500000001;
      *(_QWORD *)(v424 + 16) = 0;
      *(_QWORD *)(v424 + 24) = 0;
      *(_QWORD *)(v424 + 32) = 0;
      v619 = (WTF *)v424;
      v425 = CFBundleCopyBundleURL(BundleWithIdentifier);
      WTF::URL::URL((WTF::URL *)out, v425);
      v426 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v426 = 0x400000002;
      *(_QWORD *)(v426 + 8) = "Path";
      *(_DWORD *)(v426 + 16) = 4;
      v623 = (WTF *)v426;
      WTF::URL::createCFURL((WTF::URL *)out, v427, v428, v429, v430, v431, (CFURLRef *)&uu, v432);
      if (uu.dli_fname)
      {
        v433 = CFURLCopyFileSystemPath((CFURLRef)uu.dli_fname, kCFURLPOSIXPathStyle);
        WTF::String::String(&v621, v433);
        if (v433)
          CFRelease(v433);
        v434 = uu.dli_fname;
        uu.dli_fname = 0;
        if (v434)
          CFRelease(v434);
      }
      else
      {
        v621 = 0;
      }
      WTF::FileSystemImpl::realPath((WTF::FileSystemImpl *)&v621, (WTF::FileSystemImpl *)&v622);
      WTF::JSONImpl::ObjectBase::setString((WTF::JSONImpl::ObjectBase *)v424, (const WTF::String *)&v623, (const WTF::String *)&v622);
      v442 = v622;
      v622 = 0;
      if (v442)
      {
        if (*(_DWORD *)v442 != 2)
        {
          *(_DWORD *)v442 -= 2;
          goto LABEL_208;
        }
        WTF::StringImpl::~StringImpl(v442, v435, v436, v437, v438, v439, v440, v441);
        WTF::fastFree(v444, v445, v446, v447, v448, v449, v450, v451);
        v443 = v621;
        v621 = 0;
        if (v443)
        {
LABEL_211:
          if (*(_DWORD *)v443 != 2)
          {
            *(_DWORD *)v443 -= 2;
            goto LABEL_213;
          }
          WTF::StringImpl::~StringImpl(v443, v435, v436, v437, v438, v439, v440, v441);
          WTF::fastFree(v453, v454, v455, v456, v457, v458, v459, v460);
          v452 = v623;
          v623 = 0;
          if (v452)
          {
LABEL_216:
            if (*(_DWORD *)v452 == 2)
            {
              WTF::StringImpl::~StringImpl(v452, v435, v436, v437, v438, v439, v440, v441);
              WTF::fastFree(v461, v462, v463, v464, v465, v466, v467, v468);
            }
            else
            {
              *(_DWORD *)v452 -= 2;
            }
          }
LABEL_219:
          ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(BundleWithIdentifier, v420);
          v470 = ValueForInfoDictionaryKey;
          if (ValueForInfoDictionaryKey && (v471 = CFGetTypeID(ValueForInfoDictionaryKey), v471 == CFStringGetTypeID()))
          {
            v472 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v472 = 0x700000002;
            *(_QWORD *)(v472 + 8) = "Version";
            *(_DWORD *)(v472 + 16) = 4;
            uu.dli_fname = (const char *)v472;
            WTF::String::String(&v623, v470);
            WTF::JSONImpl::ObjectBase::setString((WTF::JSONImpl::ObjectBase *)v424, (const WTF::String *)&uu, (const WTF::String *)&v623);
            v480 = v623;
            v623 = 0;
            if (!v480)
              goto LABEL_224;
            if (*(_DWORD *)v480 == 2)
            {
              WTF::StringImpl::~StringImpl(v480, v473, v474, v475, v476, v477, v478, v479);
              WTF::fastFree(v567, v568, v569, v570, v571, v572, v573, v574);
              v481 = (WTF::StringImpl *)uu.dli_fname;
              uu.dli_fname = 0;
              if (!v481)
                goto LABEL_242;
            }
            else
            {
              *(_DWORD *)v480 -= 2;
LABEL_224:
              v481 = (WTF::StringImpl *)uu.dli_fname;
              uu.dli_fname = 0;
              if (!v481)
              {
LABEL_242:
                v505 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v505 = 0x700000002;
                *(_QWORD *)(v505 + 8) = "Bundles";
                *(_DWORD *)(v505 + 16) = 4;
                v506 = *v410;
                if (*v410)
                  *(_DWORD *)v506 += 2;
                uu.dli_fname = 0;
                uu.dli_fbase = 0;
                v507 = WTF::fastMalloc((WTF *)0x10);
                v508 = (WTF::StringImpl **)v507;
                LODWORD(uu.dli_fbase) = 2;
                uu.dli_fname = (const char *)v507;
                *(_DWORD *)v505 += 2;
                *(_QWORD *)v507 = v505;
                if (v506)
                  *(_DWORD *)v506 += 2;
                *(_QWORD *)(v507 + 8) = v506;
                HIDWORD(uu.dli_fbase) = 2;
                WTF::LibraryPathDiagnosticsLogger::logObject((id *)&v618, (uint64_t)&uu, &v619);
                v516 = *v508;
                *v508 = 0;
                if (v516)
                {
                  if (*(_DWORD *)v516 != 2)
                  {
                    *(_DWORD *)v516 -= 2;
                    goto LABEL_249;
                  }
                  WTF::StringImpl::~StringImpl(v516, v509, v510, v511, v512, v513, v514, v515);
                  WTF::fastFree(v518, v519, v520, v521, v522, v523, v524, v525);
                  v517 = v508[1];
                  v508[1] = 0;
                  if (v517)
                  {
LABEL_252:
                    if (*(_DWORD *)v517 != 2)
                    {
                      *(_DWORD *)v517 -= 2;
                      goto LABEL_254;
                    }
                    WTF::StringImpl::~StringImpl(v517, v509, v510, v511, v512, v513, v514, v515);
                    WTF::fastFree(v526, v527, v528, v529, v530, v531, v532, v533);
                    WTF::fastFree((unint64_t)v508, v534, v535, v536, v537, v538, v539, v540);
                    if (v506)
                    {
LABEL_257:
                      if (*(_DWORD *)v506 != 2)
                      {
                        *(_DWORD *)v506 -= 2;
                        goto LABEL_259;
                      }
                      WTF::StringImpl::~StringImpl(v506, v401, v402, v403, v404, v405, v406, v407);
                      WTF::fastFree(v543, v544, v545, v546, v547, v548, v549, v550);
                      v541 = *(_DWORD *)v505 - 2;
                      if (*(_DWORD *)v505 == 2)
                      {
LABEL_263:
                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v505, v401, v402, v403, v404, v405, v406, v407);
                        WTF::fastFree(v551, v552, v553, v554, v555, v556, v557, v558);
                        v542 = *(WTF::StringImpl **)out;
                        *(_QWORD *)out = 0;
                        if (!v542)
                          goto LABEL_266;
LABEL_264:
                        if (*(_DWORD *)v542 != 2)
                        {
                          *(_DWORD *)v542 -= 2;
                          goto LABEL_266;
                        }
                        WTF::StringImpl::~StringImpl(v542, v401, v402, v403, v404, v405, v406, v407);
                        WTF::fastFree(v559, v560, v561, v562, v563, v564, v565, v566);
                        if (!v425)
                        {
LABEL_268:
                          if (v619)
                          {
                            if (*(_DWORD *)v619 == 1)
                              WTF::JSONImpl::Value::operator delete(v619, v401, v402, v403, v404, v405, v406, v407);
                            else
                              --*(_DWORD *)v619;
                          }
                          goto LABEL_195;
                        }
LABEL_267:
                        CFRelease(v425);
                        goto LABEL_268;
                      }
LABEL_260:
                      *(_DWORD *)v505 = v541;
                      v542 = *(WTF::StringImpl **)out;
                      *(_QWORD *)out = 0;
                      if (v542)
                        goto LABEL_264;
LABEL_266:
                      if (!v425)
                        goto LABEL_268;
                      goto LABEL_267;
                    }
LABEL_259:
                    v541 = *(_DWORD *)v505 - 2;
                    if (*(_DWORD *)v505 == 2)
                      goto LABEL_263;
                    goto LABEL_260;
                  }
                }
                else
                {
LABEL_249:
                  v517 = v508[1];
                  v508[1] = 0;
                  if (v517)
                    goto LABEL_252;
                }
LABEL_254:
                WTF::fastFree((unint64_t)v508, v509, v510, v511, v512, v513, v514, v515);
                if (v506)
                  goto LABEL_257;
                goto LABEL_259;
              }
            }
          }
          else
          {
            v482 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v482 = 0x700000002;
            *(_QWORD *)(v482 + 8) = "Version";
            *(_DWORD *)(v482 + 16) = 4;
            v623 = (WTF *)v482;
            v483 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v483 = 1;
            v622 = v483;
            WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v424 + 16), (WTF::AtomStringImpl *)&v623, (const WTF::StringImpl *)&v622, v484, v485, v486, v487, v488, (uint64_t)&uu);
            if (LOBYTE(uu.dli_sname))
            {
              v489 = (uint64_t *)(v424 + 24);
              v490 = *(unsigned int *)(v424 + 36);
              if ((_DWORD)v490 == *(_DWORD *)(v424 + 32))
              {
                v491 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v489, v490 + 1, (unint64_t)&v623);
                v490 = *(unsigned int *)(v424 + 36);
                v492 = *(_QWORD *)(v424 + 24);
                v493 = *v491;
                if (*v491)
                  *v493 += 2;
                *(_QWORD *)(v492 + 8 * v490) = v493;
              }
              else
              {
                v494 = *v489;
                v495 = v623;
                if (v623)
                  *(_DWORD *)v623 += 2;
                *(_QWORD *)(v494 + 8 * v490) = v495;
              }
              *(_DWORD *)(v424 + 36) = v490 + 1;
            }
            v496 = v622;
            v622 = 0;
            if (v496)
            {
              if (*(_DWORD *)v496 == 1)
              {
                WTF::JSONImpl::Value::operator delete(v496, v473, v474, v475, v476, v477, v478, v479);
                v481 = v623;
                v623 = 0;
                if (!v481)
                  goto LABEL_242;
                goto LABEL_239;
              }
              --*(_DWORD *)v496;
            }
            v481 = v623;
            v623 = 0;
            if (!v481)
              goto LABEL_242;
          }
LABEL_239:
          if (*(_DWORD *)v481 == 2)
          {
            WTF::StringImpl::~StringImpl(v481, v473, v474, v475, v476, v477, v478, v479);
            WTF::fastFree(v497, v498, v499, v500, v501, v502, v503, v504);
          }
          else
          {
            *(_DWORD *)v481 -= 2;
          }
          goto LABEL_242;
        }
      }
      else
      {
LABEL_208:
        v443 = v621;
        v621 = 0;
        if (v443)
          goto LABEL_211;
      }
LABEL_213:
      v452 = v623;
      v623 = 0;
      if (v452)
        goto LABEL_216;
      goto LABEL_219;
    }
LABEL_195:
    ++v410;
    v421 -= 8;
    if (v421)
      continue;
    break;
  }
  v410 = (WTF::StringImpl **)v625;
  if (HIDWORD(v626))
  {
    v575 = 8 * HIDWORD(v626);
    do
    {
      v576 = *v410;
      *v410 = 0;
      if (v576)
      {
        if (*(_DWORD *)v576 == 2)
        {
          WTF::StringImpl::~StringImpl(v576, v401, v402, v403, v404, v405, v406, v407);
          WTF::fastFree(v577, v578, v579, v580, v581, v582, v583, v584);
        }
        else
        {
          *(_DWORD *)v576 -= 2;
        }
      }
      ++v410;
      v575 -= 8;
    }
    while (v575);
    v410 = (WTF::StringImpl **)v625;
  }
LABEL_285:
  if (v410)
  {
    v625 = 0;
    LODWORD(v626) = 0;
    WTF::fastFree((unint64_t)v410, v401, v402, v403, v404, v405, v406, v407);
  }
LABEL_287:
  v585 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v585 = 0x200000002;
  *(_QWORD *)(v585 + 8) = "OS";
  *(_DWORD *)(v585 + 16) = 4;
  *(_QWORD *)out = v585;
  WTF::LibraryPathDiagnosticsLogger::logCryptexCanaryInfo((id *)&v618, 0, (uint64_t *)out);
  if (*(_DWORD *)v585 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v585, v586, v587, v588, v589, v590, v591, v592);
    WTF::fastFree(v593, v594, v595, v596, v597, v598, v599, v600);
  }
  else
  {
    *(_DWORD *)v585 -= 2;
  }
  v601 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v601 = 0x300000002;
  *(_QWORD *)(v601 + 8) = "App";
  *(_DWORD *)(v601 + 16) = 4;
  *(_QWORD *)out = v601;
  WTF::LibraryPathDiagnosticsLogger::logCryptexCanaryInfo((id *)&v618, 1, (uint64_t *)out);
  if (*(_DWORD *)v601 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v601, v602, v603, v604, v605, v606, v607, v608);
    WTF::fastFree(v609, v610, v611, v612, v613, v614, v615, v616);
  }
  else
  {
    *(_DWORD *)v601 -= 2;
  }

}

void sub_197AE7458(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,uint64_t a22,WTF::StringImpl *a23)
{
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;

    _Unwind_Resume(a1);
  }
  WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);

  _Unwind_Resume(a1);
}

void sub_197AE768C(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF *a15, WTF *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,CFTypeRef cf)
{
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, a2, a3, a4, a5, a6, a7, a8);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)v23 == 2)
  {
    WTF::StringImpl::~StringImpl(v23, v26, v27, v28, v29, v30, v31, v32);
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  else
  {
    *(_DWORD *)v23 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 1)
    {
      WTF::JSONImpl::Value::operator delete(a15, v26, v27, v28, v29, v30, v31, v32);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v49, v50, v51, v52, v53, v54, v55);

      _Unwind_Resume(a1);
    }
    --*(_DWORD *)a15;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v26, v27, v28, v29, v30, v31, v32);

    _Unwind_Resume(a1);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v26, v27, v28, v29, v30, v31, v32);

  _Unwind_Resume(a1);
}

void WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  int i;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v13 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8);
    v13 = *a1;
    if (!*a1)
    {
      v14 = 0;
      v15 = *(WTF::StringImpl **)a2;
      v16 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if (v16 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v17 = WTF::StringImpl::hashSlowCase(v15);
      goto LABEL_7;
    }
  }
  v14 = *(_DWORD *)(v13 - 8);
  v15 = *(WTF::StringImpl **)a2;
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v16 < 0x100)
    goto LABEL_6;
LABEL_4:
  v17 = v16 >> 8;
LABEL_7:
  v18 = 0;
  for (i = 1; ; ++i)
  {
    v20 = v17 & v14;
    v21 = (WTF::StringImpl **)(v13 + 16 * v20);
    v22 = *v21;
    if (*v21 == (WTF::StringImpl *)-1)
    {
      v18 = (WTF::StringImpl **)(v13 + 16 * v20);
      goto LABEL_9;
    }
    if (!v22)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v21 = v18;
      }
      v25 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v25 += 2;
      *v21 = v25;
      v26 = *(WTF::StringImpl **)a3;
      *(_QWORD *)a3 = 0;
      v27 = v21[1];
      v21[1] = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          WTF::JSONImpl::Value::operator delete(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v31 = *a1;
          if (*a1)
          {
LABEL_28:
            ++*(_DWORD *)(v31 - 12);
            v32 = *a1;
            if (*a1)
              goto LABEL_29;
            goto LABEL_37;
          }
LABEL_36:
          *(_DWORD *)(v31 - 12) = 1;
          v32 = *a1;
          if (*a1)
          {
LABEL_29:
            v33 = (*(_DWORD *)(v32 - 16) + *(_DWORD *)(v32 - 12));
            v34 = *(unsigned int *)(v32 - 4);
            if (v34 <= 0x400)
              goto LABEL_30;
            goto LABEL_38;
          }
LABEL_37:
          v33 = *(unsigned int *)(v32 - 16);
          v34 = *(unsigned int *)(v32 - 4);
          if (v34 <= 0x400)
          {
LABEL_30:
            if (3 * v34 > 4 * v33)
            {
LABEL_41:
              *(_QWORD *)a9 = v21;
              *(_QWORD *)(a9 + 8) = v32 + 16 * v34;
              *(_BYTE *)(a9 + 16) = 1;
              return;
            }
            if (!(_DWORD)v34)
            {
              v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, (uint64_t)v21, a4, a5, a6, a7, a8);
              v32 = *a1;
              if (!*a1)
              {
LABEL_33:
                v34 = 0;
                goto LABEL_41;
              }
LABEL_40:
              v34 = *(unsigned int *)(v32 - 4);
              goto LABEL_41;
            }
LABEL_39:
            v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, ((_DWORD)v34 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v34))), (uint64_t)v21, a4, a5, a6, a7, a8);
            v32 = *a1;
            if (!*a1)
              goto LABEL_33;
            goto LABEL_40;
          }
LABEL_38:
          if (v34 > 2 * v33)
            goto LABEL_41;
          goto LABEL_39;
        }
        --*(_DWORD *)v27;
      }
      v31 = *a1;
      if (*a1)
        goto LABEL_28;
      goto LABEL_36;
    }
    if (WTF::equal(v22, *(const WTF::StringImpl **)a2, a3))
      break;
LABEL_9:
    v17 = i + v20;
  }
  v23 = *a1;
  if (*a1)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v23 + 16 * v24;
  *(_BYTE *)(a9 + 16) = 0;
  v28 = v13 + 16 * v20;
  v29 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v30 = *(WTF **)(v28 + 8);
  *(_QWORD *)(v28 + 8) = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v30;
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<initializeLibraryPathDiagnostics::$_0 &&>>()
{
  NSObject *v0;
  int out_token;

  out_token = -1;
  dispatch_get_global_queue(2, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  notify_register_dispatch("com.apple.WebKit.LibraryPathDiagnostics", &out_token, v0, &__block_literal_global);

}

void sub_197AE7D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int8 **WTF::normalizeLineEndingsToLF@<X0>(unsigned __int8 **result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v2 = *result;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3)
  {
    v4 = &v2[v3];
    v5 = *result;
    while (1)
    {
      while (1)
      {
        v7 = v2 + 1;
        v6 = *v2;
        if (v6 == 13)
          break;
        ++v2;
        *v5++ = v6;
        if (v7 == v4)
          goto LABEL_12;
      }
      if (v7 == v4)
        break;
      v8 = v2[1];
      v2 += 2;
      if (v8 != 10)
        v2 = v7;
      *v5++ = 10;
      if (v2 == v4)
        goto LABEL_12;
    }
    *v5 = 10;
    LODWORD(v5) = (_DWORD)v5 + 1;
LABEL_12:
    v10 = (_DWORD)v5 - *result;
    *(_QWORD *)a2 = *result;
    v11 = *((_DWORD *)result + 2);
    *result = 0;
    result[1] = 0;
    *(_DWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a2 + 12) = v10;
  }
  else
  {
    *(_QWORD *)a2 = v2;
    v9 = *((_DWORD *)result + 2);
    *result = 0;
    result[1] = 0;
    *(_QWORD *)(a2 + 8) = v9;
  }
  return result;
}

_BYTE *WTF::normalizeLineEndingsToCRLF@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  unsigned __int8 *v4;
  WTF *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;

  v2 = result;
  v4 = *(unsigned __int8 **)result;
  v5 = (WTF *)*((unsigned int *)result + 3);
  if (!(_DWORD)v5)
  {
LABEL_12:
    *(_QWORD *)a2 = v4;
    v14 = *((_DWORD *)result + 2);
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *(_DWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 12) = (_DWORD)v5;
    return result;
  }
  v6 = 0;
  v7 = (unsigned __int8 *)v5 + (_QWORD)v4;
  v8 = *(unsigned __int8 **)result;
  v9 = *(unsigned __int8 **)result;
  while (1)
  {
    while (1)
    {
      v11 = *v9++;
      v10 = v11;
      if (v11 != 10)
        break;
LABEL_3:
      v6 += 2;
      v8 = v9;
      if (v9 == v7)
        goto LABEL_11;
    }
    if (v10 == 13)
      break;
    ++v6;
    v8 = v9;
    if (v9 == v7)
    {
LABEL_11:
      if ((WTF *)v6 == v5)
        goto LABEL_12;
      goto LABEL_15;
    }
  }
  if (v9 != v7)
  {
    v12 = v8[1];
    v13 = v8 + 2;
    if (v12 == 10)
      v9 = v13;
    goto LABEL_3;
  }
  v6 += 2;
  if ((WTF *)v6 == v5)
    goto LABEL_12;
LABEL_15:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v6;
  if (!v6)
  {
    result = 0;
    goto LABEL_20;
  }
  if (HIDWORD(v6))
  {
    __break(0xC471u);
  }
  else
  {
    result = (_BYTE *)WTF::fastMalloc((WTF *)v6);
    *(_DWORD *)(a2 + 8) = v6;
    *(_QWORD *)a2 = result;
    v15 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v15)
    {
      v4 = *(unsigned __int8 **)v2;
      v7 = (unsigned __int8 *)(*(_QWORD *)v2 + v15);
LABEL_20:
      v16 = v4;
      do
      {
        v18 = *v16++;
        v17 = v18;
        if (v18 == 10)
        {
          *(_WORD *)result = 2573;
          result += 2;
        }
        else if (v17 == 13)
        {
          v19 = v7;
          if (v16 != v7)
          {
            v20 = v4[1];
            v21 = v4 + 2;
            if (v20 == 10)
              v19 = v21;
            else
              v19 = v16;
          }
          *(_WORD *)result = 2573;
          result += 2;
          v16 = v19;
        }
        else
        {
          *result++ = v17;
        }
        v4 = v16;
      }
      while (v16 != v7);
    }
  }
  return result;
}

unsigned __int8 **WTF::normalizeLineEndingsToNative@<X0>(unsigned __int8 **result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v2 = *result;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3)
  {
    v4 = &v2[v3];
    v5 = *result;
    while (1)
    {
      while (1)
      {
        v7 = v2 + 1;
        v6 = *v2;
        if (v6 == 13)
          break;
        ++v2;
        *v5++ = v6;
        if (v7 == v4)
          goto LABEL_12;
      }
      if (v7 == v4)
        break;
      v8 = v2[1];
      v2 += 2;
      if (v8 != 10)
        v2 = v7;
      *v5++ = 10;
      if (v2 == v4)
        goto LABEL_12;
    }
    *v5 = 10;
    LODWORD(v5) = (_DWORD)v5 + 1;
LABEL_12:
    v10 = (_DWORD)v5 - *result;
    *(_QWORD *)a2 = *result;
    v11 = *((_DWORD *)result + 2);
    *result = 0;
    result[1] = 0;
    *(_DWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a2 + 12) = v10;
  }
  else
  {
    *(_QWORD *)a2 = v2;
    v9 = *((_DWORD *)result + 2);
    *result = 0;
    result[1] = 0;
    *(_QWORD *)(a2 + 8) = v9;
  }
  return result;
}

uint64_t WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  char v11;
  unsigned __int8 *v12;
  char v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v1 = (unsigned __int8 *)result;
  v2 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v3 = atomic_load(v1);
          if ((v3 & 1) != 0)
            break;
          v4 = __ldaxr(v1);
          if (v4 != v3)
            goto LABEL_2;
          if (!__stlxr(v3 | 1, v1))
            return result;
        }
        if ((v3 & 2) != 0 || v2 > 0x27)
          break;
        ++v2;
        result = MEMORY[0x19AEBBF94](0, 1, 1);
      }
      v5 = v3;
      if ((v3 & 2) != 0)
        break;
      v6 = __ldaxr(v1);
      if (v6 == v3)
      {
        v5 = v3 | 2;
        if (!__stlxr(v3 | 2, v1))
        {
          LOBYTE(v3) = v3 | 2;
          break;
        }
      }
      else
      {
LABEL_2:
        __clrex();
      }
    }
    if ((v3 & 1) == 0)
    {
      WTF::dataLog<char [16]>("Lock not held!\n");
      __break(0xC471u);
      JUMPOUT(0x197AE81CCLL);
    }
    if ((v3 & 2) == 0)
    {
      WTF::dataLog<char [16]>("Lock not parked!\n");
      __break(0xC471u);
LABEL_24:
      JUMPOUT(0x197AE81B0);
    }
    v12 = v1;
    v13 = v5;
    v9 = 0x7FF0000000000000;
    v10 = 0;
    v15[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>(WTF::Atomic<unsigned char> const*,unsigned char)::{lambda(void)#1}>::implFunction;
    v15[1] = v15;
    v15[2] = &v12;
    v14[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>(WTF::Atomic<unsigned char> const*,unsigned char)::{lambda(void)#2}>::implFunction;
    v14[1] = v14;
    v14[2] = &v11;
    result = WTF::ParkingLot::parkConditionallyImpl((uint64_t)v1, (uint64_t)v15, (uint64_t)v14, (WTF::TimeWithDynamicClockType *)&v9);
  }
  while ((result & 1) == 0 || v7 != 1);
  v8 = atomic_load(v1);
  if ((v8 & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  return result;
}

void WTF::Lock::unlockSlow(WTF::Lock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  int v12;
  _QWORD v13[3];

  v12 = a2;
  while (1)
  {
    v8 = atomic_load(a1);
    v11 = v8;
    if ((v8 & 3) != 1)
      break;
    v9 = __ldaxr(a1);
    if (v9 == v8)
    {
      if (!__stlxr(v8 & 0xFE, a1))
        return;
    }
    else
    {
      __clrex();
    }
  }
  if ((v8 & 3) == 3)
  {
    v10[0] = &v12;
    v10[1] = a1;
    v13[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::Atomic<unsigned char> &,WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v13[1] = v13;
    v13[2] = v10;
    WTF::ParkingLot::unparkOneImpl((uint64_t)a1, (unint64_t)v13, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    WTF::dataLog<char [25],unsigned char,char [2]>("Invalid value for lock: ", &v11, "\n");
    __break(0xC471u);
  }
}

void WTF::Lock::unlockFairlySlow(WTF::Lock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 1, a3, a4, a5, a6, a7, a8);
}

void WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::safepointSlow(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;

  do
  {
    while (1)
    {
      v9 = *a1;
      if ((v9 & 3) != 1)
      {
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(a1, 1, a3, a4, a5, a6, a7, a8);
        goto LABEL_9;
      }
      v10 = __ldxr(a1);
      if (v10 == v9)
        break;
      __clrex();
    }
  }
  while (__stxr(v9 & 0xFE, a1));
LABEL_9:
  while (1)
  {
    v11 = *a1;
    if ((v11 & 1) != 0)
      break;
    v12 = __ldaxr(a1);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 1, a1))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a1);
}

uint64_t WTF::Lock::tryLockWithTimeout(unsigned __int8 *a1, double a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned __int8 v7;

  v3 = 0;
  if (a2 >= INFINITY)
    a2 = 4294967300.0;
  v4 = a2;
  while (1)
  {
    while (1)
    {
      v5 = *a1;
      if ((v5 & 1) != 0)
        break;
      v6 = __ldaxr(a1);
      if (v6 == v5)
      {
        if (!__stxr(v5 | 1, a1))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
    }
    if (v3 > v4)
      break;
    ++v3;
    sleep(1u);
  }
LABEL_11:
  v7 = atomic_load(a1);
  return v7 & 1;
}

BOOL WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>(WTF::Atomic<unsigned char> const*,unsigned char)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = atomic_load(*(unsigned __int8 **)v1);
  return v2 == *(unsigned __int8 *)(v1 + 8);
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::Atomic<unsigned char> &,WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 16);
  if ((_BYTE)a2 && ((*(_QWORD *)&a2 & 0xFF0000) != 0 || **(_DWORD **)v2 == 1))
    return 1;
  v3 = *(unsigned __int8 **)(v2 + 8);
  if ((a2 & 0xFF00) != 0)
  {
    do
    {
      while (1)
      {
        v4 = *v3;
        v5 = __ldaxr(v3);
        if (v5 == v4)
          break;
        __clrex();
      }
    }
    while (__stlxr(v4 & 0xFC | 2, v3));
  }
  else
  {
    do
    {
      while (1)
      {
        v6 = *v3;
        v7 = __ldaxr(v3);
        if (v7 == v6)
          break;
        __clrex();
      }
    }
    while (__stlxr(v6 & 0xFC, v3));
  }
  return 0;
}

void WTF::LockedPrintStream::~LockedPrintStream(WTF::LockedPrintStream *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WTF::LockedPrintStream::~LockedPrintStream(WTF::LockedPrintStream *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::LockedPrintStream::vprintf(WTF::LockedPrintStream *this, const char *a2, char *a3)
{
  uint64_t v6;
  WTF::WordLock *v7;
  int v9;
  int v10;
  WTF::WordLock *v11;
  unint64_t v12;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v6)
  {
    if (v6 != *((_QWORD *)this + 1))
      goto LABEL_3;
LABEL_6:
    v9 = *((_DWORD *)this + 4) + 1;
    goto LABEL_10;
  }
  v6 = WTF::Thread::initializeCurrentTLS(this);
  if (v6 == *((_QWORD *)this + 1))
    goto LABEL_6;
LABEL_3:
  v7 = (WTF::LockedPrintStream *)((char *)this + 24);
  if (__ldaxr((unint64_t *)this + 3))
  {
    __clrex();
LABEL_8:
    WTF::WordLock::lockSlow(v7);
    goto LABEL_9;
  }
  if (__stxr(1uLL, (unint64_t *)v7))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 1) = v6;
  v9 = 1;
LABEL_10:
  *((_DWORD *)this + 4) = v9;
  (*(void (**)(_QWORD, const char *, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), a2, a3);
  v10 = *((_DWORD *)this + 4) - 1;
  *((_DWORD *)this + 4) = v10;
  if (v10)
    return;
  *((_QWORD *)this + 1) = 0;
  v11 = (WTF::LockedPrintStream *)((char *)this + 24);
  v12 = __ldxr((unint64_t *)this + 3);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unint64_t *)v11))
LABEL_14:
    WTF::WordLock::unlockSlow(v11);
}

void WTF::LockedPrintStream::flush(WTF::LockedPrintStream *this)
{
  uint64_t v2;
  WTF::WordLock *v3;
  int v5;
  int v6;
  WTF::WordLock *v7;
  unint64_t v8;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v2)
  {
    if (v2 != *((_QWORD *)this + 1))
      goto LABEL_3;
LABEL_6:
    v5 = *((_DWORD *)this + 4) + 1;
    goto LABEL_10;
  }
  v2 = WTF::Thread::initializeCurrentTLS(this);
  if (v2 == *((_QWORD *)this + 1))
    goto LABEL_6;
LABEL_3:
  v3 = (WTF::LockedPrintStream *)((char *)this + 24);
  if (__ldaxr((unint64_t *)this + 3))
  {
    __clrex();
LABEL_8:
    WTF::WordLock::lockSlow(v3);
    goto LABEL_9;
  }
  if (__stxr(1uLL, (unint64_t *)v3))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 1) = v2;
  v5 = 1;
LABEL_10:
  *((_DWORD *)this + 4) = v5;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  v6 = *((_DWORD *)this + 4) - 1;
  *((_DWORD *)this + 4) = v6;
  if (v6)
    return;
  *((_QWORD *)this + 1) = 0;
  v7 = (WTF::LockedPrintStream *)((char *)this + 24);
  v8 = __ldxr((unint64_t *)this + 3);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unint64_t *)v7))
LABEL_14:
    WTF::WordLock::unlockSlow(v7);
}

uint64_t WTF::LockedPrintStream::begin(WTF::LockedPrintStream *this)
{
  uint64_t v2;
  WTF::WordLock *v3;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v2)
  {
    if (v2 != *((_QWORD *)this + 1))
      goto LABEL_3;
LABEL_6:
    ++*((_DWORD *)this + 4);
    return *((_QWORD *)this + 4);
  }
  v2 = WTF::Thread::initializeCurrentTLS(this);
  if (v2 == *((_QWORD *)this + 1))
    goto LABEL_6;
LABEL_3:
  v3 = (WTF::LockedPrintStream *)((char *)this + 24);
  if (__ldaxr((unint64_t *)this + 3))
  {
    __clrex();
LABEL_8:
    WTF::WordLock::lockSlow(v3);
    goto LABEL_9;
  }
  if (__stxr(1uLL, (unint64_t *)v3))
    goto LABEL_8;
LABEL_9:
  *((_QWORD *)this + 1) = v2;
  *((_DWORD *)this + 4) = 1;
  return *((_QWORD *)this + 4);
}

void WTF::LockedPrintStream::end(WTF::LockedPrintStream *this)
{
  int v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *((_DWORD *)this + 4) - 1;
  *((_DWORD *)this + 4) = v1;
  if (!v1)
  {
    *((_QWORD *)this + 1) = 0;
    v2 = (unint64_t *)((char *)this + 24);
    v3 = __ldxr(v2);
    if (v3 == 1)
    {
      if (!__stlxr(0, v2))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow((WTF::WordLock *)v2);
  }
}

uint64_t WTF::LogChannels::getLogChannel(WTF::LogChannels *this, const WTF::String *a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  char *v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = (uint64_t *)*((_QWORD *)this + 1);
  v11 = *((unsigned int *)this + 5);
  WTF::String::utf8((uint64_t *)a2, 0, a6, a7, a8, a9, a10, &v23, a4);
  v12 = (_DWORD *)v23;
  if (v23)
    v13 = (char *)(v23 + 16);
  else
    v13 = 0;
  result = WTFLogChannelByName(v10, v11, v13);
  v22 = result;
  if (v12)
  {
    if (*v12 == 1)
    {
      WTF::fastFree((unint64_t)v12, v15, v16, v17, v18, v19, v20, v21);
      return v22;
    }
    else
    {
      --*v12;
    }
  }
  return result;
}

void WTF::LogChannels::setLogChannelToAccumulate(WTF::LogChannels *this, const WTF::String *a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v11 = (uint64_t *)*((_QWORD *)this + 1);
  v12 = *((unsigned int *)this + 5);
  WTF::String::utf8((uint64_t *)a2, 0, a6, a7, a8, a9, a10, &v24, a4);
  v13 = (_DWORD *)v24;
  if (v24)
    v14 = (char *)(v24 + 16);
  else
    v14 = 0;
  v15 = WTFLogChannelByName(v11, v12, v14);
  v23 = (_BYTE *)v15;
  if (!v13)
  {
LABEL_7:
    if (!v15)
      return;
    goto LABEL_8;
  }
  if (*v13 != 1)
  {
    --*v13;
    goto LABEL_7;
  }
  WTF::fastFree((unint64_t)v13, v16, v17, v18, v19, v20, v21, v22);
  if (!v23)
    return;
LABEL_8:
  *v23 = 2;
  *((_BYTE *)this + 24) = 1;
}

void WTF::LogChannels::clearAllLogChannelsToAccumulate(WTF::LogChannels *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BYTE **v10;
  uint64_t v11;

  WTF::resetAccumulatedLogs(this, a2, a3, a4, a5, a6, a7, a8);
  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v10 = (_BYTE **)*((_QWORD *)this + 1);
    v11 = 8 * v9;
    do
    {
      if (**v10 == 2)
        **v10 = 0;
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  *((_BYTE *)this + 24) = 1;
}

void WTF::LogChannels::initializeLogChannelsIfNecessary(uint64_t a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  double v16;
  float v17;
  _DWORD *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  v11 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    if (!v11)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v37, a1);
      goto LABEL_9;
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 8))
      return;
    *(_BYTE *)(a1 + 24) = 0;
  }
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v37 = v12;
LABEL_9:
  v13 = *(uint64_t **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  WTF::String::utf8((uint64_t *)&v37, 0, a6, a7, a8, a9, a10, &v36, a4);
  v18 = (_DWORD *)v36;
  if (v36)
    v19 = (char *)(v36 + 16);
  else
    v19 = 0;
  WTFInitializeLogChannelStatesFromString(v13, v14, v19, v15, v16, v17);
  if (v18)
  {
    if (*v18 == 1)
    {
      WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      v27 = v37;
      v37 = 0;
      if (!v27)
        return;
      goto LABEL_18;
    }
    --*v18;
  }
  v27 = v37;
  v37 = 0;
  if (!v27)
    return;
LABEL_18:
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    *(_DWORD *)v27 -= 2;
  }
}

uint64_t WTF::Logger::LogSiteIdentifier::toString@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  size_t v7;
  _BYTE *v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  unsigned int v14;
  size_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  size_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  _QWORD v39[3];
  _DWORD v40[5];
  _DWORD __n[3];

  v2 = this;
  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)this;
  if (!*(_QWORD *)this)
  {
    v8 = *(_BYTE **)(this + 16);
    if (v8)
      v9 = strlen(*(const char **)(this + 16));
    else
      v9 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(v2 + 24);
    do
    {
      *((_BYTE *)&v39[2] + v27-- + 7) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v28 & 0xF];
      v12 = v28 > 0xF;
      v28 >>= 4;
    }
    while (v12);
    if ((uint64_t)(v27 + 17) < 18)
    {
      v29 = (char *)v40 + v27;
    }
    else
    {
      memset(v40, 48, v27);
      v29 = (char *)v40;
    }
    v30 = v40 - (_DWORD)v29;
    v40[0] = v30;
    if (v9 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x197AE8E68);
    }
    if ((v30 & 0x80000000) != 0
      || (v16 = __OFADD__(v30, 2), v31 = v30 + 2, v16)
      || (v16 = __OFADD__(v31, 1), v32 = v31 + 1, v16)
      || (v33 = v9 + v32, __OFADD__((_DWORD)v9, v32))
      || (v33 & 0x80000000) != 0
      || (this = WTF::tryFastCompactMalloc((WTF *)(v33 + 20), v39), (v22 = (int *)v39[0]) == 0))
    {
      *a2 = 0;
      __break(0xC471u);
LABEL_72:
      JUMPOUT(0x197AE8E28);
    }
    v34 = (_BYTE *)(v39[0] + 20);
    *(_DWORD *)v39[0] = 2;
    v22[1] = v33;
    *((_QWORD *)v22 + 1) = v22 + 5;
    v22[4] = 4;
    if ((_DWORD)v9)
    {
      if ((_DWORD)v9 != 1)
      {
        this = (uint64_t)memcpy(v22 + 5, v8, v9);
        v34[v9] = 40;
        v25 = &v34[v9 + 1];
        v35 = v40[0];
        if (!v40[0])
        {
LABEL_64:
          v37 = v40[0];
          goto LABEL_65;
        }
LABEL_61:
        v38 = (char *)v40 - v35;
        if ((_DWORD)v35 == 1)
          *v25 = *v38;
        else
          this = (uint64_t)memcpy(v25, v38, v35);
        goto LABEL_64;
      }
      *v34 = *v8;
    }
    v34[v9] = 40;
    v25 = &v34[v9 + 1];
    v35 = v40[0];
    if (!v40[0])
      goto LABEL_64;
    goto LABEL_61;
  }
  v6 = *(_QWORD *)(this + 8);
  v5 = *(_BYTE **)(this + 16);
  if (v5)
  {
    this = strlen(*(const char **)(this + 16));
    v7 = this;
  }
  else
  {
    v7 = 0;
  }
  v10 = 0;
  v11 = *(_QWORD *)(v2 + 24);
  do
  {
    *((_BYTE *)&v40[4] + v10-- + 3) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v11 & 0xF];
    v12 = v11 > 0xF;
    v11 >>= 4;
  }
  while (v12);
  if ((uint64_t)(v10 + 17) < 18)
  {
    v13 = (char *)__n + v10;
  }
  else
  {
    this = (uint64_t)memset(__n, 48, v10);
    v13 = (char *)__n;
  }
  v14 = __n - (_DWORD)v13;
  __n[0] = v14;
  if (v6)
    v15 = v6 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    goto LABEL_72;
  }
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197AE8E48);
  }
  if ((v14 & 0x80000000) != 0)
    goto LABEL_70;
  v16 = __OFADD__(v14, 2);
  v17 = v14 + 2;
  if (v16)
    goto LABEL_70;
  v16 = __OFADD__(v17, 1);
  v18 = v17 + 1;
  if (v16)
    goto LABEL_70;
  v16 = __OFADD__((_DWORD)v7, v18);
  v19 = v7 + v18;
  if (v16)
    goto LABEL_70;
  v16 = __OFADD__(v19, 2);
  v20 = v19 + 2;
  if (v16)
    goto LABEL_70;
  v21 = (v15 + v20);
  if (__OFADD__((_DWORD)v15, v20))
    goto LABEL_70;
  if ((_DWORD)v21)
  {
    if ((v21 & 0x80000000) == 0)
    {
      this = WTF::tryFastCompactMalloc((WTF *)(v21 + 20), v39);
      v22 = (int *)v39[0];
      if (v39[0])
      {
        v23 = (_BYTE *)(v39[0] + 20);
        *(_DWORD *)v39[0] = 2;
        v22[1] = v21;
        *((_QWORD *)v22 + 1) = v22 + 5;
        v22[4] = 4;
        if ((_DWORD)v15)
        {
          if ((_DWORD)v15 != 1)
          {
            this = (uint64_t)memcpy(v22 + 5, v4, v15);
            *(_WORD *)&v23[v15] = 14906;
            v24 = &v23[v15 + 2];
            if (!(_DWORD)v7)
            {
LABEL_30:
              v24[v7] = 40;
              v25 = &v24[v7 + 1];
              v26 = __n[0];
              if (!__n[0])
                goto LABEL_59;
              goto LABEL_56;
            }
LABEL_52:
            if ((_DWORD)v7 == 1)
            {
              *v24 = *v5;
              v24[v7] = 40;
              v25 = &v24[v7 + 1];
              v26 = __n[0];
              if (!__n[0])
                goto LABEL_59;
            }
            else
            {
              this = (uint64_t)memcpy(v24, v5, v7);
              v24[v7] = 40;
              v25 = &v24[v7 + 1];
              v26 = __n[0];
              if (!__n[0])
              {
LABEL_59:
                v37 = __n[0];
LABEL_65:
                *(_WORD *)&v25[v37] = 8233;
                goto LABEL_66;
              }
            }
LABEL_56:
            v36 = (char *)__n - v26;
            if ((_DWORD)v26 == 1)
              *v25 = *v36;
            else
              this = (uint64_t)memcpy(v25, v36, v26);
            goto LABEL_59;
          }
          *v23 = *v4;
        }
        *(_WORD *)&v23[v15] = 14906;
        v24 = &v23[v15 + 2];
        if (!(_DWORD)v7)
          goto LABEL_30;
        goto LABEL_52;
      }
    }
LABEL_70:
    *a2 = 0;
    __break(0xC471u);
    JUMPOUT(0x197AE8E78);
  }
  v22 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_66:
  *a2 = v22;
  return this;
}

unint64_t WTF::LogArgument<void const*>::toString@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  size_t v3;
  BOOL v4;
  char *v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD v14[3];
  _DWORD __n[3];

  v3 = 0;
  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  do
  {
    *((_BYTE *)&v14[3] + v3-- + 3) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[result & 0xF];
    v4 = result > 0xF;
    result >>= 4;
  }
  while (v4);
  if ((uint64_t)(v3 + 17) < 18)
  {
    v5 = (char *)__n + v3;
  }
  else
  {
    result = (unint64_t)memset(__n, 48, v3);
    v5 = (char *)__n;
  }
  v6 = __n - (_DWORD)v5;
  __n[0] = v6;
  if (v6 < 0
    || (v7 = __OFADD__(v6, 1), v8 = v6 + 1, v7)
    || (v9 = (v8 + 1), __OFADD__(v8, 1))
    || (result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20), v14), (v10 = v14[0]) == 0))
  {
    *a2 = 0;
    __break(0xC471u);
  }
  else
  {
    *(_BYTE *)(v14[0] + 20) = 40;
    *(_DWORD *)v10 = 2;
    *(_DWORD *)(v10 + 4) = v9;
    *(_QWORD *)(v10 + 8) = v10 + 20;
    *(_DWORD *)(v10 + 16) = 4;
    v11 = (_BYTE *)(v10 + 21);
    v12 = __n[0];
    if (__n[0])
    {
      v13 = (char *)__n - __n[0];
      if (__n[0] == 1)
        *v11 = *v13;
      else
        result = (unint64_t)memcpy((void *)(v10 + 21), v13, __n[0]);
    }
    v11[v12] = 41;
    *a2 = v10;
  }
  return result;
}

uint64_t *WTF::Logger::observers(WTF::Logger *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&_MergedGlobals_5);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&_MergedGlobals_5, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Logger::observers(void)::$_0 &&>>);
  }
  return &qword_1ECF58128;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Logger::observers(void)::$_0 &&>>()
{
  qword_1ECF58128 = 0;
  unk_1ECF58130 = 0;
}

void WTF::logLevelString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *WTF::logChannels(WTF *this)
{
  if ((_MergedGlobals_6 & 1) == 0)
  {
    WTF::NeverDestroyed<WTF::WTFLogChannels,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>();
    _MergedGlobals_6 = 1;
  }
  return &qword_1ECF58140;
}

double WTF::NeverDestroyed<WTF::WTFLogChannels,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;

  qword_1ECF58148 = 0;
  qword_1ECF58150 = 0;
  byte_1ECF58158 = 1;
  qword_1ECF58140 = (uint64_t)&off_1E3571D58;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)v7 = xmmword_1E3571D70;
  *(_OWORD *)(v7 + 16) = *(_OWORD *)&off_1E3571D80;
  *(_OWORD *)(v7 + 32) = xmmword_1E3571D90;
  *(_QWORD *)(v7 + 48) = &WTF::WTFLogNativePromise;
  v8 = qword_1ECF58148;
  if (qword_1ECF58148)
  {
    qword_1ECF58148 = 0;
    LODWORD(qword_1ECF58150) = 0;
    WTF::fastFree(v8, v0, v1, v2, v3, v4, v5, v6);
  }
  qword_1ECF58148 = v7;
  *(_QWORD *)&result = 0x700000007;
  qword_1ECF58150 = 0x700000007;
  return result;
}

void WTF::WTFLogChannels::~WTFLogChannels(WTF::WTFLogChannels *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = off_1E3571DB8;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  *(_QWORD *)this = off_1E3571DB8;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void WTF::WTFLogChannels::logLevelString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WTF::deallocateSendRightSafely(mach_port_name_t name)
{
  kern_return_t v2;
  mach_error_t v3;
  NSObject *v4;
  _DWORD v7[2];
  __int16 v8;
  char *v9;
  __int16 v10;
  mach_error_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!name)
    return;
  v2 = mach_port_deallocate(*MEMORY[0x1E0C83DA0], name);
  if (!v2)
    return;
  v3 = v2;
  v4 = qword_1ECF2C368;
  if (!os_log_type_enabled((os_log_t)qword_1ECF2C368, OS_LOG_TYPE_ERROR))
  {
    if (v3 != 17 && v3 != 15)
      return;
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x197AE92D0);
  }
  v7[0] = 67109635;
  v7[1] = name;
  v8 = 2081;
  v9 = mach_error_string(v3);
  v10 = 1024;
  v11 = v3;
  _os_log_error_impl(&dword_197AA9000, v4, OS_LOG_TYPE_ERROR, "mach_port_deallocate error for port %d: %{private}s (%#x)", (uint8_t *)v7, 0x18u);
  if (v3 == 17 || v3 == 15)
    goto LABEL_14;
}

void WTF::MachSendRight::adopt(WTF::MachSendRight *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned int *v4;
  mach_error_t v5;
  int v6;
  mach_error_t v8;
  NSObject *v9;
  char *v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  mach_error_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)this)
    goto LABEL_8;
  v11 = 0;
  v4 = (unsigned int *)MEMORY[0x1E0C83DA0];
  v5 = MEMORY[0x19AEBB5E0](*MEMORY[0x1E0C83DA0], this, 0, &v11);
  v6 = v11;
  if (!(v5 | v11))
  {
    v5 = MEMORY[0x19AEBB5E0](*v4, this, 4, &v11);
    v6 = v11;
  }
  if (v5 || v6 == 0)
  {
    v8 = v5;
    v9 = qword_1ECF2C368;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C368, OS_LOG_TYPE_ERROR))
    {
      v10 = mach_error_string(v8);
      *(_DWORD *)buf = 67109635;
      v13 = (int)this;
      v14 = 2081;
      v15 = v10;
      v16 = 1024;
      v17 = v8;
      _os_log_error_impl(&dword_197AA9000, v9, OS_LOG_TYPE_ERROR, "mach_port_get_refs error for port %d: %{private}s (%#x)", buf, 0x18u);
    }
    __break(0xC471u);
  }
  else
  {
LABEL_8:
    *a2 = (_DWORD)this;
  }
}

void WTF::MachSendRight::create(WTF::MachSendRight *this@<X0>, _DWORD *a2@<X8>)
{
  if (((_DWORD)this == -1
     || (_DWORD)this && mach_port_mod_refs(*MEMORY[0x1E0C83DA0], (mach_port_name_t)this, 0, 1) == 17)
    && mach_port_mod_refs(*MEMORY[0x1E0C83DA0], (mach_port_name_t)this, 4u, 1) == 17)
  {
    __break(0xC471u);
  }
  else
  {
    WTF::MachSendRight::adopt(this, a2);
  }
}

uint64_t WTF::MachSendRight::createFromReceiveRight@<X0>(mach_port_name_t name@<W0>, mach_port_name_t *a2@<X8>)
{
  uint64_t result;
  mach_port_name_t v5;

  result = mach_port_insert_right(*MEMORY[0x1E0C83DA0], name, name, 0x14u);
  if ((_DWORD)result)
    v5 = 0;
  else
    v5 = name;
  *a2 = v5;
  return result;
}

_DWORD *WTF::MachSendRight::MachSendRight(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  int v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t WTF::MachSendRight::leakSendRight(WTF::MachSendRight *this)
{
  uint64_t v1;

  v1 = *(unsigned int *)this;
  *(_DWORD *)this = 0;
  return v1;
}

uint64_t WTF::MachSendRight::MachSendRight(WTF::MachSendRight *this, mach_port_name_t *a2)
{
  mach_port_name_t v3;
  uint64_t result;

  v3 = *a2;
  *(_DWORD *)this = *a2;
  if (v3 != -1 && (!v3 || mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v3, 0, 1) != 17))
    return (uint64_t)this;
  result = mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v3, 4u, 1);
  if ((_DWORD)result != 17)
    return (uint64_t)this;
  __break(0xC471u);
  return result;
}

{
  mach_port_name_t v3;
  uint64_t result;

  v3 = *a2;
  *(_DWORD *)this = *a2;
  if (v3 != -1 && (!v3 || mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v3, 0, 1) != 17))
    return (uint64_t)this;
  result = mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v3, 4u, 1);
  if ((_DWORD)result != 17)
    return (uint64_t)this;
  __break(0xC471u);
  return result;
}

void WTF::MachSendRight::~MachSendRight(mach_port_name_t *this)
{
  WTF::deallocateSendRightSafely(*this);
}

{
  WTF::deallocateSendRightSafely(*this);
}

mach_port_name_t *WTF::MachSendRight::operator=(mach_port_name_t *a1, mach_port_name_t *a2)
{
  mach_port_name_t v4;

  if (a1 != a2)
  {
    WTF::deallocateSendRightSafely(*a1);
    v4 = *a2;
    *a2 = 0;
    *a1 = v4;
  }
  return a1;
}

void WTF::initializeMainThread(WTF *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WTF::initializeMainThread(void)::initializeKey);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WTF::initializeMainThread(void)::initializeKey, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeMainThread(void)::$_0 &&>>);
  }
}

WTF::RunLoop *WTF::isMainRunLoop(WTF *this)
{
  uint64_t v1;
  unint64_t v2;
  WTF::RunLoop *result;
  char v4;
  char **v5;
  char *v6;

  v1 = WTF::s_mainRunLoop;
  v2 = atomic_load(&WTF::RunLoop::runLoopHolder(void)::onceKey);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::RunLoop::runLoopHolder(void)::onceKey, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::RunLoop::runLoopHolder(void)::$_0 &&>>);
  }
  result = (WTF::RunLoop *)pthread_getspecific(WTF::RunLoop::runLoopHolder(void)::runLoopHolder);
  if (result)
    return (WTF::RunLoop *)(WTF::RunLoop::current(result) == v1);
  return result;
}

void WTF::callOnMainRunLoop(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::RunLoop::dispatch(WTF::s_mainRunLoop, a1, a3, a4, a5, a6, a7, a8);
}

void WTF::ensureOnMainRunLoop(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  WTF::RunLoop *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char **v12;
  char *v13;

  v2 = WTF::s_mainRunLoop;
  v3 = atomic_load(&WTF::RunLoop::runLoopHolder(void)::onceKey);
  if (v3 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::RunLoop::runLoopHolder(void)::onceKey, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::RunLoop::runLoopHolder(void)::$_0 &&>>);
  }
  v4 = (WTF::RunLoop *)pthread_getspecific(WTF::RunLoop::runLoopHolder(void)::runLoopHolder);
  if (v4 && WTF::RunLoop::current(v4) == v2)
    (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1);
  else
    WTF::RunLoop::dispatch(WTF::s_mainRunLoop, a1, v5, v6, v7, v8, v9, v10);
}

void WTF::callOnMainThread(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (WTF::s_webRunLoop)
    v9 = WTF::s_webRunLoop;
  else
    v9 = WTF::s_mainRunLoop;
  WTF::RunLoop::dispatch(v9, a1, a3, a4, a5, a6, a7, a8);
}

void WTF::ensureOnMainThread(uint64_t *a1)
{
  _opaque_pthread_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = pthread_self();
  if ((pthread_equal(v2, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
    && (!WebCoreWebThreadIsLockedOrDisabled || WebCoreWebThreadIsLockedOrDisabled()))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1);
  }
  else
  {
    if (WTF::s_webRunLoop)
      v9 = WTF::s_webRunLoop;
    else
      v9 = WTF::s_mainRunLoop;
    WTF::RunLoop::dispatch(v9, a1, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t WTF::isMainThreadOrGCThread(WTF *this)
{
  unint64_t StatusReg;
  uint64_t v2;
  uint64_t v3;
  _opaque_pthread_t *v4;
  uint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 736);
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 5) > 0x3Fu)
      return 1;
  }
  else if (*(unsigned __int8 *)(WTF::Thread::initializeCurrentTLS(0) + 5) > 0x3Fu)
  {
    return 1;
  }
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3)
  {
    if ((*(_BYTE *)(WTF::Thread::initializeCurrentTLS(0) + 5) & 8) == 0)
      goto LABEL_9;
    return 1;
  }
  if ((*(_BYTE *)(v3 + 5) & 8) != 0)
    return 1;
LABEL_9:
  v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)WTF::s_webThreadPthread) || (result = pthread_main_np(), (_DWORD)result))
  {
    if (WebCoreWebThreadIsLockedOrDisabled)
      return WebCoreWebThreadIsLockedOrDisabled();
    return 1;
  }
  return result;
}

void WTF::callOnMainRunLoopAndWait(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  WTF::RunLoop *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t *v24;

  v2 = WTF::s_mainRunLoop;
  v3 = atomic_load(&WTF::RunLoop::runLoopHolder(void)::onceKey);
  if (v3 != -1)
  {
    v21 = (uint64_t)&v23;
    v24 = &v21;
    std::__call_once(&WTF::RunLoop::runLoopHolder(void)::onceKey, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::RunLoop::runLoopHolder(void)::$_0 &&>>);
  }
  v4 = (WTF::RunLoop *)pthread_getspecific(WTF::RunLoop::runLoopHolder(void)::runLoopHolder);
  if (v4 && WTF::RunLoop::current(v4) == v2)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    return;
  }
  LOWORD(v24) = 0;
  BYTE2(v24) = 0;
  v5 = *a1;
  *a1 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3571DE0;
  v6[1] = &v24;
  v6[2] = v5;
  v21 = (uint64_t)v6;
  WTF::RunLoop::dispatch(WTF::s_mainRunLoop, &v21, v7, v8, v9, v10, v11, v12);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v21 = 0x7FF0000000000000;
  v22 = 0;
  if (__ldaxr((unsigned __int8 *)&v24 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v24 + 1))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v24 + 1);
LABEL_11:
  while (!(_BYTE)v24)
  {
    if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v24 + 2, (unsigned __int8 *)&v24 + 1, (WTF::TimeWithDynamicClockType *)&v21) & 1) == 0)
    {
      if (!(_BYTE)v24)
        goto LABEL_15;
      break;
    }
  }
  LOBYTE(v24) = 0;
LABEL_15:
  v20 = __ldxr((unsigned __int8 *)&v24 + 1);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)&v24 + 1))
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v24 + 1, 0, v13, v14, v15, v16, v17, v18);
}

void WTF::callOnMainThreadAndWait(_QWORD *a1)
{
  _opaque_pthread_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  int v23;

  v2 = pthread_self();
  if ((pthread_equal(v2, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
    && (!WebCoreWebThreadIsLockedOrDisabled || WebCoreWebThreadIsLockedOrDisabled()))
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    return;
  }
  v20 = 0;
  v21 = 0;
  v3 = *a1;
  *a1 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E3571E08;
  v4[1] = &v20;
  v4[2] = v3;
  v22 = (uint64_t)v4;
  if (WTF::s_webRunLoop)
    v11 = WTF::s_webRunLoop;
  else
    v11 = WTF::s_mainRunLoop;
  WTF::RunLoop::dispatch(v11, &v22, v5, v6, v7, v8, v9, v10);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v22 = 0x7FF0000000000000;
  v23 = 0;
  if (__ldaxr((unsigned __int8 *)&v20 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v20 + 1))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v20 + 1);
LABEL_15:
  while (!(_BYTE)v20)
  {
    if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v21, (unsigned __int8 *)&v20 + 1, (WTF::TimeWithDynamicClockType *)&v22) & 1) == 0)
    {
      if (!(_BYTE)v20)
        goto LABEL_19;
      break;
    }
  }
  LOBYTE(v20) = 0;
LABEL_19:
  v19 = __ldxr((unsigned __int8 *)&v20 + 1);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)&v20 + 1))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v20 + 1, 0, v12, v13, v14, v15, v16, v17);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeMainThread(void)::$_0 &&>>(WTF *a1)
{
  unint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  char v4;
  char **v5;
  char *v6;

  v1 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initialize(void)::onceKey, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  WTF::initializeMainThreadPlatform(a1);
  if (WTF::s_mainRunLoop)
  {
    result = 63;
    __break(0xC471u);
  }
  else
  {
    result = WTF::RunLoop::current(v2);
    WTF::s_mainRunLoop = result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::callOnMainAndWait<(WTF::MainStyle)1>(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3571DE0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<void WTF::callOnMainAndWait<(WTF::MainStyle)1>(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  *(_QWORD *)this = &off_1E3571DE0;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<void WTF::callOnMainAndWait<(WTF::MainStyle)1>(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  _QWORD v14[2];
  char v15;
  _QWORD v16[3];

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v8 = *(_BYTE **)(a1 + 8);
  v9 = v8 + 1;
  if (__ldaxr(v8 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v8 + 1));
LABEL_5:
  *v8 = 1;
  v11 = v8 + 2;
  v12 = atomic_load(v11);
  if ((v12 & 1) != 0)
  {
    v15 = 0;
    v14[0] = v11;
    v14[1] = &v15;
    v16[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v16[1] = v16;
    v16[2] = v14;
    WTF::ParkingLot::unparkOneImpl((uint64_t)v11, (unint64_t)v16, v2, v3, v4, v5, v6, v7);
  }
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v2, v3, v4, v5, v6, v7);
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::callOnMainAndWait<(WTF::MainStyle)0>(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3571E08;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<void WTF::callOnMainAndWait<(WTF::MainStyle)0>(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  *(_QWORD *)this = &off_1E3571E08;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<void WTF::callOnMainAndWait<(WTF::MainStyle)0>(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  _QWORD v14[2];
  char v15;
  _QWORD v16[3];

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v8 = *(_BYTE **)(a1 + 8);
  v9 = v8 + 1;
  if (__ldaxr(v8 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v8 + 1));
LABEL_5:
  *v8 = 1;
  v11 = v8 + 2;
  v12 = atomic_load(v11);
  if ((v12 & 1) != 0)
  {
    v15 = 0;
    v14[0] = v11;
    v14[1] = &v15;
    v16[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v16[1] = v16;
    v16[2] = v14;
    WTF::ParkingLot::unparkOneImpl((uint64_t)v11, (unint64_t)v16, v2, v3, v4, v5, v6, v7);
  }
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v2, v3, v4, v5, v6, v7);
}

void WTF::initializeMainThreadPlatform(WTF *this)
{
  NSObject *v1;
  uint8_t v2[16];

  if (!pthread_main_np())
  {
    v1 = qword_1ECF2C390;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C390, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_fault_impl(&dword_197AA9000, v1, OS_LOG_TYPE_FAULT, "WebKit Threading Violation - initial use of WebKit from a secondary thread.", v2, 2u);
    }
  }
}

void WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  id v11;
  _QWORD *v12;

  v11 = a1;
  if (WebCoreWebThreadIsEnabled && WebCoreWebThreadIsEnabled())
  {
    v1 = WTF::s_mainRunLoop;
    v2 = MEMORY[0x19AEBB9D0](v11);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v10 = off_1E3571E30;
  }
  else
  {
    v1 = WTF::s_mainRunLoop;
    v2 = MEMORY[0x19AEBB9D0](v11);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v10 = off_1E3571E58;
  }
  *v3 = v10;
  v3[1] = v2;
  v12 = v3;
  WTF::RunLoop::dispatch(v1, (uint64_t *)&v12, v4, v5, v6, v7, v8, v9);
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);

}

void sub_197AEA118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_197AEA130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_197AEA144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void WTF::callOnWebThreadOrDispatchAsyncOnMainThread(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  v10 = a1;
  if (WebCoreWebThreadIsEnabled && WebCoreWebThreadIsEnabled())
  {
    WebCoreWebThreadRun(v10);
  }
  else
  {
    v1 = WTF::s_mainRunLoop;
    v2 = MEMORY[0x19AEBB9D0](v10);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3571E80;
    v3[1] = v2;
    v11 = v3;
    WTF::RunLoop::dispatch(v1, (uint64_t *)&v11, v4, v5, v6, v7, v8, v9);
    if (v11)
    {
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);

      return;
    }
  }

}

void sub_197AEA214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_197AEA22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

uint64_t WTF::isMainThread(WTF *this)
{
  _opaque_pthread_t *v1;
  uint64_t result;

  v1 = pthread_self();
  if (pthread_equal(v1, (pthread_t)WTF::s_webThreadPthread) || (result = pthread_main_np(), (_DWORD)result))
  {
    if (WebCoreWebThreadIsLockedOrDisabled)
      return WebCoreWebThreadIsLockedOrDisabled();
    else
      return 1;
  }
  return result;
}

BOOL WTF::isWebThread(WTF *this)
{
  _opaque_pthread_t *v1;

  v1 = pthread_self();
  return pthread_equal(v1, (pthread_t)WTF::s_webThreadPthread) != 0;
}

BOOL WTF::isUIThread(WTF *this)
{
  return pthread_main_np() != 0;
}

uint64_t WTF::initializeApplicationUIThread(WTF *this)
{
  uint64_t result;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = WTF::Thread::initializeCurrentTLS(0);
  _MergedGlobals_7 = result;
  return result;
}

void WTF::initializeWebThread(WTF *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WTF::initializeWebThread(void)::initializeKey);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WTF::initializeWebThread(void)::initializeKey, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeWebThread(void)::$_0 &&>>);
  }
}

uint64_t WTF::canCurrentThreadAccessThreadLocalData(WTF *this, WTF::Thread *a2)
{
  WTF *v3;

  v3 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v3)
  {
    if (v3 == this)
      return 1;
  }
  else
  {
    v3 = (WTF *)WTF::Thread::initializeCurrentTLS(0);
    if (v3 == this)
      return 1;
  }
  if ((WTF *)qword_1ECF58168 != this && _MergedGlobals_7 != (_QWORD)this)
    return 0;
  if (v3 != (WTF *)qword_1ECF58168 && v3 != (WTF *)_MergedGlobals_7)
    return 0;
  if (WebCoreWebThreadIsLockedOrDisabled)
    return WebCoreWebThreadIsLockedOrDisabled();
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void({block_pointer})(void))::$_0,void>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

void WTF::Detail::CallableWrapper<WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void({block_pointer})(void))::$_0,void>::~CallableWrapper(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::fastFree(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void({block_pointer})(void))::$_0,void>::call(uint64_t a1)
{
  WebCoreWebThreadLock();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t WTF::Detail::CallableWrapper<WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void({block_pointer})(void))::$_1,void>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

void WTF::Detail::CallableWrapper<WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void({block_pointer})(void))::$_1,void>::~CallableWrapper(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::fastFree(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::dispatchAsyncOnMainThreadWithWebThreadLockIfNeeded(void({block_pointer})(void))::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t WTF::Detail::CallableWrapper<WTF::callOnWebThreadOrDispatchAsyncOnMainThread(void({block_pointer})(void))::$_0,void>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

void WTF::Detail::CallableWrapper<WTF::callOnWebThreadOrDispatchAsyncOnMainThread(void({block_pointer})(void))::$_0,void>::~CallableWrapper(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::fastFree(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t WTF::Detail::CallableWrapper<WTF::callOnWebThreadOrDispatchAsyncOnMainThread(void({block_pointer})(void))::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeWebThread(void)::$_0 &&>>()
{
  WTF::RunLoop *v0;
  uint64_t result;

  WTF::s_webThreadPthread = (uint64_t)pthread_self();
  v0 = *(WTF::RunLoop **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v0)
    v0 = (WTF::RunLoop *)WTF::Thread::initializeCurrentTLS(0);
  qword_1ECF58168 = (uint64_t)v0;
  if (WTF::s_webRunLoop)
  {
    result = 91;
    __break(0xC471u);
  }
  else
  {
    result = WTF::RunLoop::current(v0);
    WTF::s_webRunLoop = result;
  }
  return result;
}

uint64_t WTF::MainThreadDispatcher::singleton(WTF::MainThreadDispatcher *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&_MergedGlobals_8);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&_MergedGlobals_8, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MainThreadDispatcher::singleton(void)::$_0 &&>>);
  }
  return qword_1ECF58178;
}

uint64_t WTF::MainThreadDispatcher::isCurrent(WTF::MainThreadDispatcher *this)
{
  _opaque_pthread_t *v1;
  uint64_t result;

  v1 = pthread_self();
  if (pthread_equal(v1, (pthread_t)WTF::s_webThreadPthread) || (result = pthread_main_np(), (_DWORD)result))
  {
    if (WebCoreWebThreadIsLockedOrDisabled)
      return WebCoreWebThreadIsLockedOrDisabled();
    else
      return 1;
  }
  return result;
}

void WTF::MainThreadDispatcher::dispatch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (WTF::s_webRunLoop)
    v8 = WTF::s_webRunLoop;
  else
    v8 = WTF::s_mainRunLoop;
  WTF::RunLoop::dispatch(v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::MainThreadDispatcher::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

void WTF::MainThreadDispatcher::deref(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v8 = (unsigned int *)(this + 8);
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)(this + 8));
    WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

_QWORD *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MainThreadDispatcher::singleton(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3571EA8;
  result[1] = 0;
  *((_DWORD *)result + 2) = 1;
  qword_1ECF58178 = (uint64_t)result;
  return result;
}

uint64_t WTF::MediaTime::createWithFloat(WTF::MediaTime *this, float a2)
{
  double v2;

  v2 = a2;
  if (fabsf(a2) == INFINITY)
    *(_QWORD *)&v2 = (uint64_t)SLODWORD(a2) >> 31;
  return *(_QWORD *)&v2;
}

{
  uint64_t result;
  int v3;
  float v4;

  if (fabsf(a2) == INFINITY)
    return (uint64_t)SLODWORD(a2) >> 31;
  if (a2 >= 9.2234e18)
    return 0;
  if (a2 < -9.2234e18)
    return -1;
  if (!(_DWORD)this)
    return (uint64_t)SLODWORD(a2) >> 31;
  do
  {
    v3 = (int)this;
    v4 = (float)this * a2;
    LODWORD(this) = this >> 1;
  }
  while (v4 >= 9.2234e18);
  result = (uint64_t)v4;
  if (!v3)
    result >>= 63;
  return result;
}

void *WTF::MediaTime::invalidTime(WTF::MediaTime *this)
{
  return &WTF::MediaTime::invalidTime(void)::time;
}

uint64_t *WTF::MediaTime::negativeInfiniteTime(WTF::MediaTime *this)
{
  return &WTF::MediaTime::negativeInfiniteTime(void)::time;
}

void *WTF::MediaTime::positiveInfiniteTime(WTF::MediaTime *this)
{
  return &WTF::MediaTime::positiveInfiniteTime(void)::time;
}

uint64_t WTF::MediaTime::createWithDouble(WTF::MediaTime *this, double a2)
{
  double v2;

  v2 = a2;
  if (fabs(a2) == INFINITY)
    *(_QWORD *)&v2 = *(uint64_t *)&a2 >> 63;
  return *(_QWORD *)&v2;
}

{
  uint64_t result;
  int v3;
  double v4;

  if (fabs(a2) == INFINITY)
    return *(uint64_t *)&a2 >> 63;
  if (a2 >= 9.22337204e18)
    return 0;
  if (a2 < -9.22337204e18)
    return -1;
  if (!(_DWORD)this)
    return *(uint64_t *)&a2 >> 63;
  do
  {
    v3 = (int)this;
    v4 = (double)this * a2;
    LODWORD(this) = this >> 1;
  }
  while (v4 >= 9.22337204e18);
  result = llround(v4);
  if (!v3)
    result >>= 63;
  return result;
}

float WTF::MediaTime::toFloat(WTF::MediaTime *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 12);
  if ((v1 & 0x11111111) != 1)
    return NAN;
  if ((v1 & 4) != 0)
    return INFINITY;
  if ((v1 & 8) != 0)
    return -INFINITY;
  if ((v1 & 0x20) != 0)
    return *(double *)this;
  return (float)*(uint64_t *)this / (float)*((unsigned int *)this + 2);
}

double WTF::MediaTime::toDouble(WTF::MediaTime *this, double a2, double a3)
{
  int v3;

  v3 = *((unsigned __int8 *)this + 12);
  if ((v3 & 0x11111111) != 1)
    return NAN;
  if ((v3 & 4) != 0)
    return INFINITY;
  if ((v3 & 8) != 0)
    return -INFINITY;
  if ((v3 & 0x20) != 0)
    return *(double *)this;
  LODWORD(a3) = *((_DWORD *)this + 2);
  return (double)*(uint64_t *)this / (double)*(unint64_t *)&a3;
}

uint64_t WTF::MediaTime::operator+(WTF::MediaTime *this, unsigned __int8 *a2, double a3, double a4)
{
  unsigned int v4;
  int v6;
  uint64_t result;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  double v14;
  unint64_t v15;
  unsigned int v18;
  __int128 v19;
  __int128 v20;

  v4 = a2[12];
  if ((v4 & 1) == 0)
    goto LABEL_3;
  v6 = *((unsigned __int8 *)this + 12);
  if ((v6 & 1) == 0)
    goto LABEL_3;
  if (((v6 | v4) & 0x10) != 0)
  {
    *(double *)&result = 0.0;
    return result;
  }
  if ((v4 & 8) != 0 && (v6 & 4) != 0)
  {
LABEL_3:
    *(double *)&result = NAN;
    return result;
  }
  result = (uint64_t)((unint64_t)((v4 >> 2) & ((v6 & 8) >> 3)) << 63) >> 63;
  if ((v6 & 4) == 0 && ((a2[12] >> 2) & ((v6 & 8) >> 3) & 1) == 0)
  {
    *(double *)&result = (v4 & 4) != 0 ? 0.0 : NAN;
    if (!(v6 & 8 | v4 & 4))
    {
      if ((v4 & 8) != 0)
      {
        *(double *)&result = NAN;
        return result;
      }
      if ((v6 & 0x20) != 0)
      {
        if ((v4 & 0x20) != 0)
        {
          *(double *)&result = *(double *)this + *(double *)a2;
          if (fabs(*(double *)&result) != INFINITY)
            return result;
LABEL_25:
          result >>= 63;
          return result;
        }
      }
      else if ((v4 & 0x20) == 0)
      {
        v9 = *(_OWORD *)this;
        v19 = *(_OWORD *)a2;
        v20 = v9;
        if (DWORD2(v19))
        {
          v10 = DWORD2(v19);
          v11 = DWORD2(v9);
          do
          {
            v12 = v10;
            v10 = v11 % v10;
            v11 = v12;
          }
          while (v10);
        }
        else
        {
          v12 = DWORD2(v9);
        }
        v15 = DWORD2(v9) * (unint64_t)(DWORD2(v19) / v12);
        if ((v15 & 0xFFFFFFFF00000000) != 0 || v15 > 0x3B9ACA00)
          v18 = 1000000000;
        else
          v18 = v15;
        while (1)
        {
          WTF::MediaTime::setTimeScale((uint64_t)&v20, v18, 0);
          WTF::MediaTime::setTimeScale((uint64_t)&v19, v18, 0);
          result = v20 + v19;
          if (!__OFADD__((_QWORD)v20, (_QWORD)v19))
            break;
          if (v18 == 1)
          {
            if ((uint64_t)v20 >= 1)
              *(double *)&result = 0.0;
            else
              *(double *)&result = NAN;
            return result;
          }
          v18 >>= 1;
        }
        return result;
      }
      v13 = WTF::MediaTime::toDouble(this, a3, a4);
      *(double *)&result = v13 + WTF::MediaTime::toDouble((WTF::MediaTime *)a2, v13, v14);
      if (fabs(*(double *)&result) != INFINITY)
        return result;
      goto LABEL_25;
    }
  }
  return result;
}

void *WTF::MediaTime::indefiniteTime(WTF::MediaTime *this)
{
  return &WTF::MediaTime::indefiniteTime(void)::time;
}

uint64_t WTF::MediaTime::setTimeScale(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  double v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  double v16;
  uint64_t v17;
  unint64_t v18;

  v3 = result;
  v4 = *(_BYTE *)(result + 12);
  if ((v4 & 0x20) != 0)
  {
    v11 = *(double *)result;
    if (fabs(*(double *)result) == INFINITY)
    {
      v12 = *(uint64_t *)&v11 >> 63;
      v13 = v11 < 0.0;
      v14 = 0x500000001;
      goto LABEL_11;
    }
    v14 = 0x500000001;
    if (v11 >= 9.22337204e18)
    {
      v12 = 0;
    }
    else
    {
      if (v11 >= -9.22337204e18)
      {
        if (a2)
        {
          do
          {
            v15 = a2;
            v16 = v11 * (double)a2;
            a2 >>= 1;
          }
          while (v16 >= 9.22337204e18);
          v12 = llround(v16);
          if (v15)
          {
            v14 = v15 | 0x100000000;
            goto LABEL_23;
          }
          v13 = v12 < 0;
          v12 >>= 63;
        }
        else
        {
          v12 = *(uint64_t *)&v11 >> 63;
          v13 = v11 < 0.0;
        }
LABEL_11:
        if (v13)
          v14 = 0x900000001;
        goto LABEL_23;
      }
      v12 = -1;
      v14 = 0x900000001;
    }
LABEL_23:
    *(_QWORD *)result = v12;
    *(_DWORD *)(result + 8) = v14;
    *(_BYTE *)(result + 12) = BYTE4(v14);
    return result;
  }
  if (!a2)
  {
    if (*(uint64_t *)result >= 0)
      v10 = (uint64_t *)&WTF::MediaTime::positiveInfiniteTime(void)::time;
    else
      v10 = &WTF::MediaTime::negativeInfiniteTime(void)::time;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == a2)
    return result;
  if (a2 >= 0x3B9ACA00)
    v7 = 1000000000;
  else
    v7 = a2;
  v8 = *(_QWORD *)result * v7;
  result = __divti3();
  if ((__int128)__PAIR128__(-1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(v9, result))
  {
    v10 = &WTF::MediaTime::negativeInfiniteTime(void)::time;
LABEL_20:
    *(_QWORD *)v3 = *v10;
    *(_QWORD *)(v3 + 5) = *(uint64_t *)((char *)v10 + 5);
    return result;
  }
  if ((__int128)__PAIR128__(v9, result) < 0x8000000000000000)
  {
    v17 = v8 - result * v5;
    *(_QWORD *)v3 = result;
    *(_DWORD *)(v3 + 8) = v7;
    if (v17)
    {
      *(_BYTE *)(v3 + 12) = v4 | 2;
      switch(a3)
      {
        case 0:
          if (v17 >= 0)
            v18 = v8 - result * v5;
          else
            v18 = result * v5 - v8;
          if (v5 <= 2 * v18)
            goto LABEL_36;
          break;
        case 2:
LABEL_36:
          if ((v17 & 0x8000000000000000) == 0)
            goto LABEL_41;
          goto LABEL_43;
        case 3:
          if (v17 >= 1)
LABEL_41:
            *(_QWORD *)v3 = result + 1;
          break;
        case 4:
          if (v17 < 0)
LABEL_43:
            *(_QWORD *)v3 = result - 1;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 5) = 0x500000001000000;
  }
  return result;
}

uint64_t WTF::MediaTime::operator-(WTF::MediaTime *this, __int128 *a2, double a3, double a4)
{
  unsigned __int8 v4;
  unsigned __int8 v6;
  uint64_t result;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double v16;
  unint64_t v17;
  unsigned int v20;
  __int128 v21;
  __int128 v22;

  v4 = *((_BYTE *)a2 + 12);
  if ((v4 & 1) == 0)
    goto LABEL_5;
  v6 = *((_BYTE *)this + 12);
  if ((v6 & 1) == 0)
    goto LABEL_5;
  if (((v6 | v4) & 0x10) != 0)
  {
    *(double *)&result = 0.0;
    return result;
  }
  if ((v6 & *((_BYTE *)a2 + 12) & 4) != 0)
  {
LABEL_5:
    *(double *)&result = NAN;
    return result;
  }
  if ((v6 & *((_BYTE *)a2 + 12) & 8) != 0)
    *(double *)&result = NAN;
  else
    *(double *)&result = 0.0;
  if ((v6 & (*((_BYTE *)a2 + 12) & 8 | 4)) == 0)
  {
    *(double *)&result = (*((_BYTE *)a2 + 12) & 8) != 0 ? 0.0 : NAN;
    if (((v6 | v4) & 8) == 0)
    {
      if ((*((_BYTE *)a2 + 12) & 4) != 0)
      {
        *(double *)&result = NAN;
        return result;
      }
      if ((v6 & 0x20) != 0)
      {
        if ((*((_BYTE *)a2 + 12) & 0x20) != 0)
        {
          *(double *)&result = *(double *)this - *(double *)a2;
          if (fabs(*(double *)&result) != INFINITY)
            return result;
LABEL_26:
          result >>= 63;
          return result;
        }
      }
      else if ((*((_BYTE *)a2 + 12) & 0x20) == 0)
      {
        v9 = *(_OWORD *)this;
        v21 = *a2;
        v22 = v9;
        v10 = *((_DWORD *)this + 2);
        v11 = *((_DWORD *)a2 + 2);
        if (v11)
        {
          v12 = *((_DWORD *)a2 + 2);
          v13 = v10;
          do
          {
            v14 = v12;
            v12 = v13 % v12;
            v13 = v14;
          }
          while (v12);
        }
        else
        {
          v14 = v10;
        }
        v17 = v10 * (unint64_t)(v11 / v14);
        if ((v17 & 0xFFFFFFFF00000000) != 0 || v17 > 0x3B9ACA00)
          v20 = 1000000000;
        else
          v20 = v17;
        while (1)
        {
          WTF::MediaTime::setTimeScale((uint64_t)&v22, v20, 0);
          WTF::MediaTime::setTimeScale((uint64_t)&v21, v20, 0);
          result = v22 - v21;
          if (!__OFSUB__((_QWORD)v22, (_QWORD)v21))
            break;
          if (v20 == 1)
          {
            if ((uint64_t)v22 >= 1)
              *(double *)&result = 0.0;
            else
              *(double *)&result = NAN;
            return result;
          }
          v20 >>= 1;
        }
        return result;
      }
      v15 = WTF::MediaTime::toDouble(this, a3, a4);
      *(double *)&result = v15 - WTF::MediaTime::toDouble((WTF::MediaTime *)a2, v15, v16);
      if (fabs(*(double *)&result) != INFINITY)
        return result;
      goto LABEL_26;
    }
  }
  return result;
}

unint64_t WTF::MediaTime::operator-(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 12) & 1) == 0)
    return -1;
  if ((*(_BYTE *)(a1 + 12) & 0x10) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 12) & 4) != 0)
    return -1;
  if ((*(_BYTE *)(a1 + 12) & 8) != 0)
    return 0;
  if ((*(_QWORD *)(a1 + 8) & 0x2000000000) != 0)
    return *(_QWORD *)a1 ^ 0x8000000000000000;
  return -*(_QWORD *)a1;
}

uint64_t WTF::MediaTime::operator*(__int128 *a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  double v5;
  __int128 v6;

  if ((*((_BYTE *)a1 + 12) & 1) != 0)
  {
    if ((*((_BYTE *)a1 + 12) & 0x10) != 0)
    {
      *(double *)&result = 0.0;
    }
    else if (a2)
    {
      if ((*((_BYTE *)a1 + 12) & 4) != 0)
      {
        if (a2 >= 1)
          *(double *)&result = 0.0;
        else
          *(double *)&result = NAN;
      }
      else if ((*((_BYTE *)a1 + 12) & 8) != 0)
      {
        if (a2 <= 0)
          *(double *)&result = 0.0;
        else
          *(double *)&result = NAN;
      }
      else if ((*((_BYTE *)a1 + 12) & 0x20) != 0)
      {
        v5 = fabs(*(double *)a1 * (double)a2);
        *(double *)&result = *(double *)a1 * (double)a2;
        if (v5 == INFINITY)
          result >>= 63;
      }
      else
      {
        v6 = *a1;
        v3 = a2;
        v4 = v6;
        result = v6 * a2;
        if ((unsigned __int128)((uint64_t)v6 * (__int128)a2) >> 64 != result >> 63)
        {
          while (DWORD2(v6) != 1)
          {
            WTF::MediaTime::setTimeScale((uint64_t)&v6, DWORD2(v6) >> 1, 0);
            v4 = v6;
            result = v6 * v3;
            if ((unsigned __int128)((uint64_t)v6 * (__int128)v3) >> 64 == ((uint64_t)v6 * v3) >> 63)
              return result;
          }
          if (((v4 != 0) | (unint64_t)(v4 >> 63)) == ((v3 >> 63) | 1))
            *(double *)&result = 0.0;
          else
            *(double *)&result = NAN;
        }
      }
    }
    else
    {
      *(double *)&result = 0.0;
    }
  }
  else
  {
    *(double *)&result = NAN;
  }
  return result;
}

void *WTF::MediaTime::zeroTime(WTF::MediaTime *this)
{
  return &WTF::MediaTime::zeroTime(void)::time;
}

BOOL WTF::MediaTime::operator!(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 12);
  if (v1 == 33)
  {
    if (*(double *)a1 == 0.0)
      return 1;
  }
  else if (v1 == 1 && !*(_QWORD *)a1)
  {
    return 1;
  }
  return (v1 & 1) == 0;
}

uint64_t WTF::MediaTime::operator BOOL(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 12);
  if (v1 == 33)
  {
    if (*(double *)a1 == 0.0)
      return 0;
  }
  else if (v1 == 1 && !*(_QWORD *)a1)
  {
    return 0;
  }
  return v1 & 1;
}

uint64_t WTF::MediaTime::compare(WTF::MediaTime *this, const WTF::MediaTime *a2, double a3, double a4)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  char v6;
  char v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;

  v4 = *((_BYTE *)this + 12);
  v5 = *((_BYTE *)a2 + 12);
  v6 = v5 & v4;
  if ((v5 & v4 & 0x1C) != 0)
    return 0;
  v7 = v5 | v4;
  if ((v7 & 1) == 0)
    return 0;
  if ((v6 & 1) == 0)
  {
    if ((*((_BYTE *)this + 12) & 1) != 0)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if ((v7 & 8) != 0)
  {
    if ((*((_BYTE *)this + 12) & 8) != 0)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if ((v7 & 4) != 0)
  {
    if ((*((_BYTE *)this + 12) & 4) != 0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  if ((v7 & 0x10) != 0)
  {
    if ((*((_BYTE *)this + 12) & 0x10) != 0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  if ((v6 & 0x20) != 0)
  {
    if (*(double *)this >= *(double *)a2)
      v16 = 1;
    else
      v16 = -1;
    if (*(double *)this == *(double *)a2)
      return 0;
    else
      return v16;
  }
  if ((v7 & 0x20) != 0)
  {
    v17 = WTF::MediaTime::toDouble(this, a3, a4);
    v19 = WTF::MediaTime::toDouble(a2, v17, v18);
    if (v17 >= v19)
      v20 = 0;
    else
      v20 = -1;
    if (v17 > v19)
      return 1;
    else
      return v20;
  }
  v10 = *(_QWORD *)this;
  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)this >> 63 != *(_QWORD *)a2 >> 63)
  {
    if (v10 < 0)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if (!(v11 | v10))
    return 0;
  v12 = *((unsigned int *)this + 2);
  v13 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v12 == (_DWORD)v13)
  {
    v14 = v10 == v11;
    if (v10 < v11)
      v15 = -1;
    else
      v15 = 1;
    if (v14)
      return 0;
    else
      return v15;
  }
  if (v10 == v11)
  {
    if (v12 < v13)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  if (v10 < 0)
  {
    if (v10 < v11 && v12 < v13)
      return 0xFFFFFFFFLL;
    if (v10 > v11 && v12 > v13)
      return 1;
  }
  else
  {
    if (v10 < v11 && v12 > v13)
      return 0xFFFFFFFFLL;
    if (v10 > v11 && v12 < v13)
      return 1;
  }
  v21 = v10 * v13;
  if ((v10 * (unsigned __int128)*((unsigned int *)a2 + 2)) >> 64 == (v10 * v13) >> 63)
  {
    v22 = v11 * v12;
    if ((v11 * (unsigned __int128)*((unsigned int *)this + 2)) >> 64 == (v11 * v12) >> 63)
    {
      if (v21 != v22)
      {
        if (v21 < v22)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      return 0;
    }
  }
  if (v10 / v12 > v11 / v13)
    return 1;
  if (v10 / v12 < v11 / v13)
    return 0xFFFFFFFFLL;
  v23 = v10 % v12 * v13;
  v24 = v11 % v13 * v12;
  v25 = v23 == v24;
  if (v23 > v24)
    v26 = 1;
  else
    v26 = -1;
  if (v25)
    return 0;
  else
    return v26;
}

BOOL WTF::MediaTime::isBetween(WTF::MediaTime *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3, double a4, double a5)
{
  const WTF::MediaTime *v6;
  double v8;
  double v9;
  double v10;
  double v11;
  int v13;

  v6 = a2;
  if (WTF::MediaTime::compare(a2, a3, a4, a5) == 1)
  {
    if (WTF::MediaTime::compare(this, a3, v8, v9) != 1)
      return 0;
  }
  else
  {
    v13 = WTF::MediaTime::compare(this, v6, v8, v9);
    v6 = a3;
    if (v13 != 1)
      return 0;
  }
  return WTF::MediaTime::compare(this, v6, v10, v11) == -1;
}

uint64_t WTF::MediaTime::toTimeScale(__int128 *a1, unsigned int a2, int a3)
{
  __int128 v4;

  v4 = *a1;
  WTF::MediaTime::setTimeScale((uint64_t)&v4, a2, a3);
  return v4;
}

uint64_t WTF::MediaTime::dump(WTF::MediaTime *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  unint64_t v5;
  int v6;
  WTF::PrintStream *v7;
  double v8;
  WTF::PrintStream *v9;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "{");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = *((unsigned __int8 *)this + 12);
  if ((v6 & 0x20) == 0)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v7, "%lld", *(_QWORD *)this);
    WTF::PrintStream::printf(v7, "%s", "/");
    WTF::PrintStream::printf(v7, "%u", *((_DWORD *)this + 2));
    WTF::PrintStream::printf(v7, "%s", " = ");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v6 = *((unsigned __int8 *)this + 12);
  }
  if ((v6 & 0x11111111) == 1)
  {
    if ((v6 & 4) != 0)
    {
      v8 = INFINITY;
    }
    else if ((v6 & 8) != 0)
    {
      v8 = -INFINITY;
    }
    else if ((v6 & 0x20) != 0)
    {
      v8 = *(double *)this;
    }
    else
    {
      LODWORD(v5) = *((_DWORD *)this + 2);
      v8 = (double)*(uint64_t *)this / (double)v5;
    }
  }
  else
  {
    v8 = NAN;
  }
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v9, "%lf", v8);
  WTF::PrintStream::printf(v9, "%s", "}");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::MediaTime::toString@<X0>(WTF::MediaTime *this@<X0>, int **a2@<X8>)
{
  int v3;
  char *v4;
  uint64_t v5;
  int64_t v6;
  unsigned int v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  double v18;
  char *v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  size_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  int *v42;
  char *v43;
  char *v44;
  size_t v45;
  int v46;
  size_t v47;
  int v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  size_t v54;
  char *v55;
  __int128 __dst;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char __s[16];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  size_t __n[2];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)this + 12);
  if ((v3 & 1) != 0)
    v4 = "";
  else
    v4 = ", invalid";
  if ((v3 & 1) != 0)
    v5 = 1;
  else
    v5 = 10;
  if ((v3 & 0x20) != 0)
  {
    if ((v3 & 0x11111111) == 1)
    {
      if ((v3 & 4) != 0)
      {
        v11 = 0x7FF0000000000000;
      }
      else
      {
        if ((v3 & 8) == 0)
        {
          v11 = *(_QWORD *)this;
          v12 = (*(_QWORD *)this >> 52) & 0x7FFLL;
          v13 = *(_QWORD *)this & 0x800FFFFFFFFFFFFFLL;
          if ((_DWORD)v12 != 2047)
          {
            v14 = v11 & 0x7FFFFFFFFFFFFFFFLL;
            if ((v13 & 0x8000000000000000) != 0 && v14)
            {
              __s[0] = 45;
              v15 = &__s[1];
            }
            else
            {
              v15 = __s;
              if (!v14)
              {
                v43 = &__s[1];
                __s[0] = 48;
                goto LABEL_69;
              }
            }
            v53 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v13, v12);
            v43 = WTF::dragonbox::detail::to_shortest(v53, v54, (uint64_t)v15, v55);
LABEL_69:
            *v43 = 0;
            v45 = (int)strlen(__s);
            memcpy(&__dst, __s, v45);
            *((_BYTE *)&__dst + v45) = 0;
            v46 = strlen((const char *)&__dst);
            HIDWORD(v63) = v46;
            v47 = v5 - 1;
            if (__OFADD__(v5 - 1, 1)
              || v46 < 0
              || (v48 = v46 + v5, __OFADD__(v46, (_DWORD)v5))
              || (v49 = (v48 + 1), __OFADD__(v48, 1))
              || (v49 & 0x80000000) != 0
              || (result = WTF::tryFastCompactMalloc((WTF *)(v49 + 20), __s), (v42 = *(int **)__s) == 0))
            {
              *a2 = 0;
              __break(0xC471u);
              JUMPOUT(0x197AEBF90);
            }
            **(_DWORD **)__s = 2;
            v42[1] = v49;
            *((_QWORD *)v42 + 1) = v42 + 5;
            v42[4] = 4;
            v68 = v60;
            v69 = v61;
            v70 = v62;
            *(_OWORD *)__n = v63;
            *(_OWORD *)__s = __dst;
            v65 = v57;
            v66 = v58;
            v67 = v59;
            *((_BYTE *)v42 + 20) = 123;
            v50 = (char *)v42 + 21;
            v51 = HIDWORD(__n[1]);
            if (HIDWORD(__n[1]))
            {
              if (HIDWORD(__n[1]) != 1)
              {
                result = (uint64_t)memcpy((char *)v42 + 21, __s, HIDWORD(__n[1]));
                v52 = &v50[v51];
                if (!(_DWORD)v47)
                {
LABEL_84:
                  v52[v47] = 125;
                  goto LABEL_85;
                }
LABEL_81:
                if ((_DWORD)v47 == 1)
                  *v52 = *v4;
                else
                  result = (uint64_t)memcpy(v52, v4, v47);
                goto LABEL_84;
              }
              *v50 = __s[0];
            }
            v52 = &v50[v51];
            if (!(_DWORD)v47)
              goto LABEL_84;
            goto LABEL_81;
          }
LABEL_64:
          if ((v11 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v43 = &__s[3];
          }
          else
          {
            v44 = __s;
            if ((v13 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v44 = &__s[1];
            }
            *(_QWORD *)v44 = 0x7974696E69666E49;
            v43 = v44 + 8;
          }
          goto LABEL_69;
        }
        v11 = 0xFFF0000000000000;
      }
    }
    else
    {
      v11 = 0x7FF8000000000000;
    }
    v13 = v11 & 0x8008000000000000;
    goto LABEL_64;
  }
  v6 = *(_QWORD *)this;
  v7 = *((_DWORD *)this + 2);
  if ((v3 & 0x11111111) != 1)
  {
    v8 = NAN;
    v10 = 0x8000000000000;
    goto LABEL_23;
  }
  if ((v3 & 4) != 0)
  {
    v8 = INFINITY;
    v10 = 0;
    goto LABEL_23;
  }
  if ((v3 & 8) != 0)
  {
    v8 = -INFINITY;
    v10 = 0x8000000000000000;
LABEL_23:
    if ((*(_QWORD *)&v8 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      qmemcpy(__s, "NaN", 3);
      v16 = &__s[3];
    }
    else
    {
      v17 = __s;
      if ((v10 & 0x8000000000000000) != 0)
      {
        __s[0] = 45;
        v17 = &__s[1];
      }
      *(_QWORD *)v17 = 0x7974696E69666E49;
      v16 = v17 + 8;
    }
    goto LABEL_35;
  }
  v8 = (double)v6 / (double)v7;
  v9 = (*(_QWORD *)&v8 >> 52) & 0x7FFLL;
  v10 = *(_QWORD *)&v8 & 0x800FFFFFFFFFFFFFLL;
  if ((_DWORD)v9 == 2047)
    goto LABEL_23;
  v18 = fabs((double)v6 / (double)v7);
  if ((v10 & 0x8000000000000000) == 0 || v18 == 0.0)
  {
    v19 = __s;
    if (v18 == 0.0)
    {
      v16 = &__s[1];
      __s[0] = 48;
      goto LABEL_35;
    }
  }
  else
  {
    __s[0] = 45;
    v19 = &__s[1];
  }
  v20 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v10, v9);
  v16 = WTF::dragonbox::detail::to_shortest(v20, v21, (uint64_t)v19, v22);
LABEL_35:
  *v16 = 0;
  v23 = (int)strlen(__s);
  memcpy(&__dst, __s, v23);
  *((_BYTE *)&__dst + v23) = 0;
  result = strlen((const char *)&__dst);
  HIDWORD(v63) = result;
  v25 = v5 - 1;
  if (v6 < 0)
  {
    v29 = -v6;
    v26 = 1;
    do
    {
      ++v26;
      v30 = v29 >= 0xA;
      v29 /= 0xAuLL;
    }
    while (v30);
  }
  else
  {
    v26 = 0;
    v27 = v6;
    do
    {
      ++v26;
      v28 = v27 > 9;
      v27 /= 0xAuLL;
    }
    while (v28);
  }
  v31 = 0;
  v32 = v7;
  do
  {
    ++v31;
    v28 = v32 > 9;
    v32 /= 0xAu;
  }
  while (v28);
  if ((v25 & 0x80000000) != 0)
    goto LABEL_90;
  if (__OFADD__((_DWORD)v25, 1))
    goto LABEL_90;
  if ((result & 0x80000000) != 0)
    goto LABEL_90;
  v33 = result + v5;
  if (__OFADD__((_DWORD)result, (_DWORD)v5))
    goto LABEL_90;
  v34 = __OFADD__(v33, 3);
  v35 = v33 + 3;
  if (v34)
    goto LABEL_90;
  if (v31 < 0)
    goto LABEL_90;
  v34 = __OFADD__(v31, v35);
  v36 = v31 + v35;
  if (v34)
    goto LABEL_90;
  v34 = __OFADD__(v36, 1);
  v37 = v36 + 1;
  v38 = v34;
  if (v26 < 0)
    goto LABEL_90;
  if (v38)
    goto LABEL_90;
  v34 = __OFADD__(v26, v37);
  v39 = v26 + v37;
  if (v34)
    goto LABEL_90;
  v40 = (v39 + 1);
  if (__OFADD__(v39, 1))
    goto LABEL_90;
  if (v39 == -1)
  {
    v42 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_85;
  }
  if ((v40 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v40 + 20), __s), (v42 = *(int **)__s) == 0))
  {
LABEL_90:
    *a2 = 0;
    __break(0xC471u);
    JUMPOUT(0x197AEBFC0);
  }
  **(_DWORD **)__s = 2;
  v42[1] = v40;
  *((_QWORD *)v42 + 1) = v42 + 5;
  v42[4] = 4;
  *((_BYTE *)v42 + 20) = 123;
  v68 = v60;
  v69 = v61;
  v70 = v62;
  *(_OWORD *)__n = v63;
  *(_OWORD *)__s = __dst;
  v65 = v57;
  v66 = v58;
  v67 = v59;
  result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((char *)v42 + 21, v6, 47, v7, " = ", 3u, (__int128 *)__s, v41, v4, v25, 125);
LABEL_85:
  *a2 = v42;
  return result;
}

void WTF::MediaTime::toJSONObject(WTF::MediaTime *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF *v49;
  int v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _DWORD **v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF *v65;
  int v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF *v87;
  int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _DWORD **v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  double *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::AtomStringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF *v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::AtomStringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF *v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  double *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  _DWORD **v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  WTF *v223;
  _BYTE v224[16];
  char v225;

  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = 0x500000001;
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (uint64_t *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *a2 = v5;
  if ((*((_BYTE *)this + 12) & 0x20) == 0)
  {
    if ((*((_BYTE *)this + 12) & 1) == 0)
    {
      v7 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v7 = 0x700000002;
      *(_QWORD *)(v7 + 8) = "invalid";
      *(_DWORD *)(v7 + 16) = 4;
      v222 = (WTF::StringImpl *)v7;
      v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = 0x100000001;
      *((_BYTE *)v8 + 8) = 1;
      v223 = v8;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v9, v10, v11, v12, v13, (uint64_t)v224);
      if (v225)
      {
        v21 = (uint64_t *)(v5 + 24);
        v22 = *(unsigned int *)(v5 + 36);
        if ((_DWORD)v22 == *(_DWORD *)(v5 + 32))
        {
          v23 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v222);
          v22 = *(unsigned int *)(v5 + 36);
          v24 = *(_QWORD *)(v5 + 24);
          v25 = *v23;
          if (*v23)
            *v25 += 2;
          *(_QWORD *)(v24 + 8 * v22) = v25;
        }
        else
        {
          v47 = *v21;
          v48 = v222;
          if (v222)
            *(_DWORD *)v222 += 2;
          *(_QWORD *)(v47 + 8 * v22) = v48;
        }
        *(_DWORD *)(v5 + 36) = v22 + 1;
      }
      v49 = v223;
      v223 = 0;
      if (v49)
      {
        v50 = *(_DWORD *)v49 - 1;
        if (*(_DWORD *)v49 != 1)
        {
LABEL_34:
          *(_DWORD *)v49 = v50;
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if ((*((_BYTE *)this + 12) & 0x10) != 0)
    {
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x500000002;
      *(_QWORD *)(v34 + 8) = "value";
      *(_DWORD *)(v34 + 16) = 4;
      v222 = (WTF::StringImpl *)v34;
      v35 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v35 = 0x300000002;
      *(_QWORD *)(v35 + 8) = "NaN";
      *(_DWORD *)(v35 + 16) = 4;
      v36 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = 0x400000001;
      *((_QWORD *)v36 + 1) = v35;
      *(_DWORD *)v35 += 2;
      v223 = v36;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v37, v38, v39, v40, v41, (uint64_t)v224);
      if (v225)
      {
        v42 = (uint64_t *)(v5 + 24);
        v43 = *(unsigned int *)(v5 + 36);
        if ((_DWORD)v43 == *(_DWORD *)(v5 + 32))
        {
          v44 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v222);
          v43 = *(unsigned int *)(v5 + 36);
          v45 = *(_QWORD *)(v5 + 24);
          v46 = *v44;
          if (*v44)
            *v46 += 2;
          *(_QWORD *)(v45 + 8 * v43) = v46;
        }
        else
        {
          v63 = *v42;
          v64 = v222;
          if (v222)
            *(_DWORD *)v222 += 2;
          *(_QWORD *)(v63 + 8 * v43) = v64;
        }
        *(_DWORD *)(v5 + 36) = v43 + 1;
      }
      v65 = v223;
      v223 = 0;
      if (!v65)
        goto LABEL_82;
      v66 = *(_DWORD *)v65 - 1;
      if (*(_DWORD *)v65 == 1)
        goto LABEL_72;
    }
    else
    {
      if ((*((_BYTE *)this + 12) & 4) == 0)
      {
        if ((*((_BYTE *)this + 12) & 8) == 0)
        {
          v30 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v30 = 0x500000002;
          *(_QWORD *)(v30 + 8) = "value";
          *(_DWORD *)(v30 + 16) = 4;
          v222 = (WTF::StringImpl *)v30;
          v32 = *((unsigned __int8 *)this + 12);
          if ((v32 & 0x11111111) == 1)
          {
            if ((v32 & 4) != 0)
            {
              v33 = INFINITY;
            }
            else if ((v32 & 8) != 0)
            {
              v33 = -INFINITY;
            }
            else if ((v32 & 0x20) != 0)
            {
              v33 = *(double *)this;
            }
            else
            {
              LODWORD(v31) = *((_DWORD *)this + 2);
              v33 = (double)*(uint64_t *)this / (double)v31;
            }
          }
          else
          {
            v33 = NAN;
          }
          v114 = (double *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v114 = 0x200000001;
          v114[1] = v33;
          v223 = (WTF *)v114;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v115, v116, v117, v118, v119, (uint64_t)v224);
          if (v225)
          {
            v120 = (uint64_t *)(v5 + 24);
            v121 = *(unsigned int *)(v5 + 36);
            if ((_DWORD)v121 == *(_DWORD *)(v5 + 32))
            {
              v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v120, v121 + 1, (unint64_t)&v222);
              v121 = *(unsigned int *)(v5 + 36);
              v123 = *(_QWORD *)(v5 + 24);
              v124 = *v122;
              if (*v122)
                *v124 += 2;
              *(_QWORD *)(v123 + 8 * v121) = v124;
            }
            else
            {
              v125 = *v120;
              v126 = v222;
              if (v222)
                *(_DWORD *)v222 += 2;
              *(_QWORD *)(v125 + 8 * v121) = v126;
            }
            *(_DWORD *)(v5 + 36) = v121 + 1;
          }
          v49 = v223;
          v223 = 0;
          if (v49)
          {
            v50 = *(_DWORD *)v49 - 1;
            if (*(_DWORD *)v49 != 1)
              goto LABEL_34;
LABEL_100:
            WTF::JSONImpl::Value::operator delete(v49, v14, v15, v16, v17, v18, v19, v20);
          }
LABEL_101:
          v127 = v222;
          v222 = 0;
          if (v127)
          {
            if (*(_DWORD *)v127 == 2)
            {
              WTF::StringImpl::~StringImpl(v127, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
            }
            else
            {
              *(_DWORD *)v127 -= 2;
            }
          }
          v136 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v136 = 0x900000002;
          *(_QWORD *)(v136 + 8) = "numerator";
          *(_DWORD *)(v136 + 16) = 4;
          v222 = (WTF::StringImpl *)v136;
          v137 = (double)*(uint64_t *)this;
          v138 = (double *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v138 = 0x200000001;
          v138[1] = v137;
          v223 = (WTF *)v138;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v139, v140, v141, v142, v143, (uint64_t)v224);
          if (v225)
          {
            v151 = (uint64_t *)(v5 + 24);
            v152 = *(unsigned int *)(v5 + 36);
            if ((_DWORD)v152 == *(_DWORD *)(v5 + 32))
            {
              v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v151, v152 + 1, (unint64_t)&v222);
              v152 = *(unsigned int *)(v5 + 36);
              v154 = *(_QWORD *)(v5 + 24);
              v155 = *v153;
              if (*v153)
                *v155 += 2;
              *(_QWORD *)(v154 + 8 * v152) = v155;
            }
            else
            {
              v156 = *v151;
              v157 = v222;
              if (v222)
                *(_DWORD *)v222 += 2;
              *(_QWORD *)(v156 + 8 * v152) = v157;
            }
            *(_DWORD *)(v5 + 36) = v152 + 1;
          }
          v158 = v223;
          v223 = 0;
          if (v158)
          {
            if (*(_DWORD *)v158 == 1)
            {
              WTF::JSONImpl::Value::operator delete(v158, v144, v145, v146, v147, v148, v149, v150);
              v159 = v222;
              v222 = 0;
              if (!v159)
                goto LABEL_121;
              goto LABEL_118;
            }
            --*(_DWORD *)v158;
          }
          v159 = v222;
          v222 = 0;
          if (!v159)
            goto LABEL_121;
LABEL_118:
          if (*(_DWORD *)v159 == 2)
          {
            WTF::StringImpl::~StringImpl(v159, v144, v145, v146, v147, v148, v149, v150);
            WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
          }
          else
          {
            *(_DWORD *)v159 -= 2;
          }
LABEL_121:
          v168 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v168 = 0xB00000002;
          *(_QWORD *)(v168 + 8) = "denominator";
          *(_DWORD *)(v168 + 16) = 4;
          v222 = (WTF::StringImpl *)v168;
          LODWORD(v2) = *((_DWORD *)this + 2);
          v169 = (double *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v169 = 0x300000001;
          v169[1] = (double)(int)v2;
          v223 = (WTF *)v169;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v170, v171, v172, v173, v174, (uint64_t)v224);
          if (v225)
          {
            v182 = (uint64_t *)(v5 + 24);
            v183 = *(unsigned int *)(v5 + 36);
            if ((_DWORD)v183 == *(_DWORD *)(v5 + 32))
            {
              v184 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v182, v183 + 1, (unint64_t)&v222);
              v183 = *(unsigned int *)(v5 + 36);
              v185 = *(_QWORD *)(v5 + 24);
              v186 = *v184;
              if (*v184)
                *v186 += 2;
              *(_QWORD *)(v185 + 8 * v183) = v186;
            }
            else
            {
              v187 = *v182;
              v188 = v222;
              if (v222)
                *(_DWORD *)v222 += 2;
              *(_QWORD *)(v187 + 8 * v183) = v188;
            }
            *(_DWORD *)(v5 + 36) = v183 + 1;
          }
          v189 = v223;
          v223 = 0;
          if (v189)
          {
            if (*(_DWORD *)v189 == 1)
            {
              WTF::JSONImpl::Value::operator delete(v189, v175, v176, v177, v178, v179, v180, v181);
              v190 = v222;
              v222 = 0;
              if (!v190)
                goto LABEL_137;
              goto LABEL_134;
            }
            --*(_DWORD *)v189;
          }
          v190 = v222;
          v222 = 0;
          if (!v190)
            goto LABEL_137;
LABEL_134:
          if (*(_DWORD *)v190 == 2)
          {
            WTF::StringImpl::~StringImpl(v190, v175, v176, v177, v178, v179, v180, v181);
            WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
          }
          else
          {
            *(_DWORD *)v190 -= 2;
          }
LABEL_137:
          v199 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v199 = 0x500000002;
          *(_QWORD *)(v199 + 8) = "flags";
          *(_DWORD *)(v199 + 16) = 4;
          v222 = (WTF::StringImpl *)v199;
          LOBYTE(v2) = *((_BYTE *)this + 12);
          v200 = (double *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v200 = 0x300000001;
          v200[1] = (double)v2;
          v223 = (WTF *)v200;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v201, v202, v203, v204, v205, (uint64_t)v224);
          if (v225)
          {
            v206 = (uint64_t *)(v5 + 24);
            v207 = *(unsigned int *)(v5 + 36);
            if ((_DWORD)v207 == *(_DWORD *)(v5 + 32))
            {
              v208 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v206, v207 + 1, (unint64_t)&v222);
              v207 = *(unsigned int *)(v5 + 36);
              v209 = *(_QWORD *)(v5 + 24);
              v210 = *v208;
              if (*v208)
                *v210 += 2;
              *(_QWORD *)(v209 + 8 * v207) = v210;
            }
            else
            {
              v211 = *v206;
              v212 = v222;
              if (v222)
                *(_DWORD *)v222 += 2;
              *(_QWORD *)(v211 + 8 * v207) = v212;
            }
            *(_DWORD *)(v5 + 36) = v207 + 1;
          }
          v87 = v223;
          v223 = 0;
          if (v87)
          {
            v88 = *(_DWORD *)v87 - 1;
            if (*(_DWORD *)v87 != 1)
              goto LABEL_148;
            goto LABEL_60;
          }
          goto LABEL_149;
        }
        v89 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v89 = 0x500000002;
        *(_QWORD *)(v89 + 8) = "value";
        *(_DWORD *)(v89 + 16) = 4;
        v222 = (WTF::StringImpl *)v89;
        v35 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v35 = 0x1100000002;
        *(_QWORD *)(v35 + 8) = "NEGATIVE_INFINITY";
        *(_DWORD *)(v35 + 16) = 4;
        v90 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v90 = 0x400000001;
        *((_QWORD *)v90 + 1) = v35;
        *(_DWORD *)v35 += 2;
        v223 = v90;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v91, v92, v93, v94, v95, (uint64_t)v224);
        if (v225)
        {
          v96 = (uint64_t *)(v5 + 24);
          v97 = *(unsigned int *)(v5 + 36);
          if ((_DWORD)v97 == *(_DWORD *)(v5 + 32))
          {
            v98 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v222);
            v97 = *(unsigned int *)(v5 + 36);
            v99 = *(_QWORD *)(v5 + 24);
            v100 = *v98;
            if (*v98)
              *v100 += 2;
            *(_QWORD *)(v99 + 8 * v97) = v100;
          }
          else
          {
            v112 = *v96;
            v113 = v222;
            if (v222)
              *(_DWORD *)v222 += 2;
            *(_QWORD *)(v112 + 8 * v97) = v113;
          }
          *(_DWORD *)(v5 + 36) = v97 + 1;
        }
        v65 = v223;
        v223 = 0;
        if (v65)
        {
          v66 = *(_DWORD *)v65 - 1;
          if (*(_DWORD *)v65 == 1)
          {
            WTF::JSONImpl::Value::operator delete(v65, v14, v15, v16, v17, v18, v19, v20);
            v103 = *(_DWORD *)v35 - 2;
            if (*(_DWORD *)v35 != 2)
              goto LABEL_83;
            goto LABEL_73;
          }
          goto LABEL_81;
        }
LABEL_82:
        v103 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 != 2)
          goto LABEL_83;
        goto LABEL_73;
      }
      v51 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v51 = 0x500000002;
      *(_QWORD *)(v51 + 8) = "value";
      *(_DWORD *)(v51 + 16) = 4;
      v222 = (WTF::StringImpl *)v51;
      v35 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v35 = 0x1100000002;
      *(_QWORD *)(v35 + 8) = "POSITIVE_INFINITY";
      *(_DWORD *)(v35 + 16) = 4;
      v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v52 = 0x400000001;
      *((_QWORD *)v52 + 1) = v35;
      *(_DWORD *)v35 += 2;
      v223 = v52;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v53, v54, v55, v56, v57, (uint64_t)v224);
      if (v225)
      {
        v58 = (uint64_t *)(v5 + 24);
        v59 = *(unsigned int *)(v5 + 36);
        if ((_DWORD)v59 == *(_DWORD *)(v5 + 32))
        {
          v60 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)&v222);
          v59 = *(unsigned int *)(v5 + 36);
          v61 = *(_QWORD *)(v5 + 24);
          v62 = *v60;
          if (*v60)
            *v62 += 2;
          *(_QWORD *)(v61 + 8 * v59) = v62;
        }
        else
        {
          v101 = *v58;
          v102 = v222;
          if (v222)
            *(_DWORD *)v222 += 2;
          *(_QWORD *)(v101 + 8 * v59) = v102;
        }
        *(_DWORD *)(v5 + 36) = v59 + 1;
      }
      v65 = v223;
      v223 = 0;
      if (!v65)
        goto LABEL_82;
      v66 = *(_DWORD *)v65 - 1;
      if (*(_DWORD *)v65 == 1)
      {
LABEL_72:
        WTF::JSONImpl::Value::operator delete(v65, v14, v15, v16, v17, v18, v19, v20);
        v103 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 != 2)
        {
LABEL_83:
          *(_DWORD *)v35 = v103;
          goto LABEL_101;
        }
LABEL_73:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        goto LABEL_101;
      }
    }
LABEL_81:
    *(_DWORD *)v65 = v66;
    goto LABEL_82;
  }
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0x500000002;
  *(_QWORD *)(v26 + 8) = "value";
  *(_DWORD *)(v26 + 16) = 4;
  v222 = (WTF::StringImpl *)v26;
  v28 = *((unsigned __int8 *)this + 12);
  if ((v28 & 0x11111111) == 1)
  {
    if ((v28 & 4) != 0)
    {
      v29 = INFINITY;
    }
    else if ((v28 & 8) != 0)
    {
      v29 = -INFINITY;
    }
    else if ((v28 & 0x20) != 0)
    {
      v29 = *(double *)this;
    }
    else
    {
      LODWORD(v27) = *((_DWORD *)this + 2);
      v29 = (double)*(uint64_t *)this / (double)v27;
    }
  }
  else
  {
    v29 = NAN;
  }
  v67 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v67 = 0x200000001;
  v67[1] = v29;
  v223 = (WTF *)v67;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v6, (WTF::AtomStringImpl *)&v222, (const WTF::StringImpl *)&v223, v68, v69, v70, v71, v72, (uint64_t)v224);
  if (v225)
  {
    v80 = (uint64_t *)(v5 + 24);
    v81 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v81 == *(_DWORD *)(v5 + 32))
    {
      v82 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)&v222);
      v81 = *(unsigned int *)(v5 + 36);
      v83 = *(_QWORD *)(v5 + 24);
      v84 = *v82;
      if (*v82)
        *v84 += 2;
      *(_QWORD *)(v83 + 8 * v81) = v84;
    }
    else
    {
      v85 = *v80;
      v86 = v222;
      if (v222)
        *(_DWORD *)v222 += 2;
      *(_QWORD *)(v85 + 8 * v81) = v86;
    }
    *(_DWORD *)(v5 + 36) = v81 + 1;
  }
  v87 = v223;
  v223 = 0;
  if (v87)
  {
    v88 = *(_DWORD *)v87 - 1;
    if (*(_DWORD *)v87 != 1)
    {
LABEL_148:
      *(_DWORD *)v87 = v88;
      goto LABEL_149;
    }
LABEL_60:
    WTF::JSONImpl::Value::operator delete(v87, v73, v74, v75, v76, v77, v78, v79);
  }
LABEL_149:
  v213 = v222;
  v222 = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
    {
      WTF::StringImpl::~StringImpl(v213, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
    }
    else
    {
      *(_DWORD *)v213 -= 2;
    }
  }
}

void WTF::MediaTime::toJSONString(WTF::MediaTime *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::JSONImpl::Value *v17;

  WTF::MediaTime::toJSONObject(this, (uint64_t *)&v17);
  v3 = v17;
  WTF::JSONImpl::Value::toJSONString(v17, v4, v5, v6, v7, v8, v9, a2);
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::JSONImpl::Value::operator delete(v3, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v3;
  }
}

uint64_t WTF::abs(WTF *this, const WTF::MediaTime *a2)
{
  uint64_t result;
  double v3;

  if ((*((_BYTE *)this + 12) & 1) == 0)
    return -1;
  if ((*((_BYTE *)this + 12) & 0xC) != 0)
    return 0;
  if ((*((_BYTE *)this + 12) & 0x20) != 0)
  {
    v3 = fabs(*(double *)this);
    result = *(_QWORD *)&v3;
    if (v3 == INFINITY)
      return *(uint64_t *)&v3 >> 63;
  }
  else if (*(uint64_t *)this >= 0)
  {
    return *(_QWORD *)this;
  }
  else
  {
    return -*(_QWORD *)this;
  }
  return result;
}

void WTF::MediaTimeRange::toJSONString(WTF::MediaTimeRange *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  _BYTE v75[16];
  char v76;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x500000002;
  *(_QWORD *)(v5 + 8) = "start";
  *(_DWORD *)(v5 + 16) = 4;
  v74 = (WTF::StringImpl *)v5;
  WTF::MediaTime::toJSONObject(this, (uint64_t *)&v72);
  v73 = v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v74, (const WTF::StringImpl *)&v73, v6, v7, v8, v9, v10, (uint64_t)v75);
  if (v76)
  {
    v18 = (uint64_t *)(v4 + 24);
    v19 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v4 + 32))
    {
      v20 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v74);
      v19 = *(unsigned int *)(v4 + 36);
      v21 = *(_QWORD *)(v4 + 24);
      v22 = *v20;
      if (*v20)
        *v22 += 2;
      *(_QWORD *)(v21 + 8 * v19) = v22;
    }
    else
    {
      v23 = *v18;
      v24 = v74;
      if (v74)
        *(_DWORD *)v74 += 2;
      *(_QWORD *)(v23 + 8 * v19) = v24;
    }
    *(_DWORD *)(v4 + 36) = v19 + 1;
  }
  v25 = v73;
  v73 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v25, v11, v12, v13, v14, v15, v16, v17);
      v26 = v74;
      v74 = 0;
      if (!v26)
        goto LABEL_17;
      goto LABEL_14;
    }
    --*(_DWORD *)v25;
  }
  v26 = v74;
  v74 = 0;
  if (!v26)
    goto LABEL_17;
LABEL_14:
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
LABEL_17:
  v35 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v35 = 0x300000002;
  *(_QWORD *)(v35 + 8) = "end";
  *(_DWORD *)(v35 + 16) = 4;
  v74 = (WTF::StringImpl *)v35;
  WTF::MediaTime::toJSONObject((WTF::MediaTimeRange *)((char *)this + 16), (uint64_t *)&v72);
  v73 = v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v74, (const WTF::StringImpl *)&v73, v36, v37, v38, v39, v40, (uint64_t)v75);
  if (v76)
  {
    v48 = (uint64_t *)(v4 + 24);
    v49 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v4 + 32))
    {
      v50 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v74);
      v49 = *(unsigned int *)(v4 + 36);
      v51 = *(_QWORD *)(v4 + 24);
      v52 = *v50;
      if (*v50)
        *v52 += 2;
      *(_QWORD *)(v51 + 8 * v49) = v52;
    }
    else
    {
      v53 = *v48;
      v54 = v74;
      if (v74)
        *(_DWORD *)v74 += 2;
      *(_QWORD *)(v53 + 8 * v49) = v54;
    }
    *(_DWORD *)(v4 + 36) = v49 + 1;
  }
  v55 = v73;
  v73 = 0;
  if (!v55)
  {
LABEL_29:
    v56 = v74;
    v74 = 0;
    if (v56)
      goto LABEL_30;
    goto LABEL_33;
  }
  if (*(_DWORD *)v55 != 1)
  {
    --*(_DWORD *)v55;
    goto LABEL_29;
  }
  WTF::JSONImpl::Value::operator delete(v55, v41, v42, v43, v44, v45, v46, v47);
  v56 = v74;
  v74 = 0;
  if (v56)
  {
LABEL_30:
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
LABEL_33:
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v42, v43, v44, v45, v46, v47, a2);
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v65, v66, v67, v68, v69, v70, v71);
  else
    --*(_DWORD *)v4;
}

uint64_t WTF::operator<<(uint64_t a1, WTF::MediaTime *this)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::JSONImpl::Value *v41;

  WTF::MediaTime::toJSONObject(this, (uint64_t *)&v41);
  v3 = v41;
  WTF::JSONImpl::Value::toJSONString(v41, v4, v5, v6, v7, v8, v9, &v40);
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v3, v10, v11, v12, v13, v14, v15, v16);
      WTF::TextStream::operator<<(a1, (WTF::AtomStringImpl *)&v40, v34, v35, v36, v37, v38, v39);
      v24 = v40;
      if (!v40)
        return a1;
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  WTF::TextStream::operator<<(a1, (WTF::AtomStringImpl *)&v40, v11, v12, v13, v14, v15, v16);
  v24 = v40;
  if (!v40)
    return a1;
LABEL_5:
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    return a1;
  }
  WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
  WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  return a1;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, unint64_t a2, char a3, unsigned int a4, char *__src, unsigned int a6, __int128 *a7, int a8, char *a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  _BYTE *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD __srca[7];
  size_t __n[2];
  uint64_t v48;

  v16 = a2;
  v17 = __dst;
  v48 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  if ((a2 & 0x8000000000000000) != 0)
  {
    v23 = -(uint64_t)a2;
    do
    {
      *((_BYTE *)&__srca[1] + v18-- + 8) = (v23 % 0xA) | 0x30;
      v20 = v23 > 9;
      v23 /= 0xAuLL;
    }
    while (v20);
    v24 = v18 + 24;
    v21 = (char *)&__srca[1] + v18 + 8;
    *v21 = 45;
    if (v18 + 26 > 26)
      goto LABEL_13;
    if (v24 <= 24)
      v24 = 24;
    v22 = v24 - v18 - 23;
  }
  else
  {
    v19 = a2;
    do
    {
      *((_BYTE *)&__srca[1] + v18-- + 8) = (v19 % 0xA) | 0x30;
      v20 = v19 > 9;
      v19 /= 0xAuLL;
    }
    while (v20);
    if (v18 + 26 > 25)
      goto LABEL_13;
    v21 = (char *)&__srca[1] + v18 + 9;
    v22 = -v18;
  }
  __dst = (char *)memcpy(__dst, v21, v22);
LABEL_13:
  if ((v16 & 0x8000000000000000) != 0)
  {
    v26 = -(uint64_t)v16;
    v25 = 1;
    do
    {
      ++v25;
      v27 = v26 >= 0xA;
      v26 /= 0xAuLL;
    }
    while (v27);
  }
  else
  {
    v25 = 0;
    do
    {
      ++v25;
      v20 = v16 > 9;
      v16 /= 0xAuLL;
    }
    while (v20);
  }
  v28 = 0;
  v29 = &v17[v25];
  v42 = a7[4];
  v43 = a7[5];
  v44 = a7[6];
  v45 = a7[7];
  v38 = *a7;
  v39 = a7[1];
  v30 = a7[2];
  v31 = a7[3];
  *v29 = a3;
  v32 = a4;
  v40 = v30;
  v41 = v31;
  do
  {
    *((_BYTE *)__srca + v28-- + 12) = (v32 % 0xA) | 0x30;
    v20 = v32 > 9;
    v32 /= 0xAu;
  }
  while (v20);
  v33 = v29 + 1;
  if (v28 + 14 <= 13)
    __dst = (char *)memcpy(v33, (char *)__srca + v28 + 13, -v28);
  v34 = 0;
  do
  {
    ++v34;
    v20 = a4 > 9;
    a4 /= 0xAu;
  }
  while (v20);
  v35 = &v33[v34];
  if (a6)
  {
    if (a6 == 1)
      *v35 = *__src;
    else
      __dst = (char *)memcpy(&v33[v34], __src, a6);
  }
  v36 = &v35[a6];
  __srca[4] = v42;
  __srca[5] = v43;
  __srca[6] = v44;
  *(_OWORD *)__n = v45;
  __srca[0] = v38;
  __srca[1] = v39;
  __srca[2] = v40;
  __srca[3] = v41;
  if (HIDWORD(v45))
  {
    if (HIDWORD(v45) != 1)
    {
      __dst = (char *)memcpy(v36, __srca, HIDWORD(v45));
      v37 = &v36[HIDWORD(v45)];
      if (!(_DWORD)a10)
        goto LABEL_38;
      goto LABEL_35;
    }
    *v36 = __srca[0];
  }
  v37 = &v36[HIDWORD(v45)];
  if (!(_DWORD)a10)
    goto LABEL_38;
LABEL_35:
  if ((_DWORD)a10 == 1)
    *v37 = *a9;
  else
    __dst = (char *)memcpy(v37, a9, a10);
LABEL_38:
  v37[a10] = a11;
  return __dst;
}

uint64_t WTF::memoryFootprint(WTF *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  uint64_t v4;

  task_info_outCnt = 93;
  if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
    return 0;
  else
    return v4;
}

uint64_t *WTF::MemoryPressureHandler::singleton(WTF::MemoryPressureHandler *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58188);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58188, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MemoryPressureHandler::singleton(void)::$_0 &&>>);
  }
  return &qword_1ECF58190;
}

WTF::MemoryPressureHandlerConfiguration *WTF::MemoryPressureHandlerConfiguration::MemoryPressureHandlerConfiguration(WTF::MemoryPressureHandlerConfiguration *this)
{
  unint64_t v2;
  uint64_t v3;
  char v5;
  char **v6;
  char *v7;

  v2 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  v3 = WTF::ramSize(void)::ramSize;
  if ((unint64_t)WTF::ramSize(void)::ramSize >= 0xC0000000)
    v3 = 3221225472;
  *(_QWORD *)this = v3;
  *(_OWORD *)((char *)this + 8) = xmmword_199123010;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x403E000000000000;
  return this;
}

{
  unint64_t v2;
  uint64_t v3;
  char v5;
  char **v6;
  char *v7;

  v2 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  v3 = WTF::ramSize(void)::ramSize;
  if ((unint64_t)WTF::ramSize(void)::ramSize >= 0xC0000000)
    v3 = 3221225472;
  *(_QWORD *)this = v3;
  *(_OWORD *)((char *)this + 8) = xmmword_199123010;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x403E000000000000;
  return this;
}

uint64_t WTF::MemoryPressureHandler::setMemoryFootprintPollIntervalForTesting(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

void WTF::MemoryPressureHandler::setShouldUsePeriodicMemoryMonitor(WTF::MemoryPressureHandler *this, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      return;
  }
  else if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
  {
    return;
  }
  if (a2)
  {
    v4 = WTF::s_mainRunLoop;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E3571EE8;
    v6[1] = WTF::MemoryPressureHandler::measurementTimerFired;
    v6[2] = 0;
    v6[3] = this;
    *v5 = off_1E3572150;
    v7 = (unsigned int *)(v4 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    *v5 = off_1E3571F10;
    v5[1] = v4;
    v5[2] = 0;
    v5[3] = v6;
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v5;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v5 = (_QWORD *)*((_QWORD *)this + 2);
    }
    v10 = *((double *)this + 15);
    if (v10 < 0.0)
      v10 = 0.0;
    WTF::RunLoop::TimerBase::start((uint64_t)v5, 1, v10);
  }
  else
  {
    v11 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

void WTF::MemoryPressureHandler::measurementTimerFired(WTF::MemoryPressureHandler *this)
{
  task_name_t *v2;
  unint64_t v3;
  NSObject *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  mach_msg_type_number_t task_info_outCnt[2];
  uint64_t v33;
  unint64_t v34;
  char v35;
  mach_msg_type_number_t v36;
  integer_t task_info_out[12];
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  task_info_outCnt[0] = 93;
  v2 = (task_name_t *)MEMORY[0x1E0C83DA0];
  if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, task_info_outCnt))
    v3 = 0;
  else
    v3 = v39;
  v4 = qword_1ECF2C3B8;
  if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
  {
    task_info_out[0] = 134217984;
    *(_QWORD *)&task_info_out[1] = v3 >> 20;
    _os_log_impl(&dword_197AA9000, v4, OS_LOG_TYPE_DEFAULT, "Current memory footprint: %zu MB", (uint8_t *)task_info_out, 0xCu);
  }
  while (1)
  {
    v5 = *((_DWORD *)this + 17);
    if (!v5 || v3 <= *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v5 - 8))
      break;
    *((_DWORD *)this + 17) = v5 - 1;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
  }
  if (*((_BYTE *)this + 112))
  {
    v6 = (unint64_t)(*((double *)this + 13) * (double)*((unint64_t *)this + 10));
    v7 = v6 & 0xFFFFFFFFFFFFFF00;
  }
  else if (*((_BYTE *)this + 9))
  {
    if (*((_BYTE *)this + 9) != 1)
    {
LABEL_24:
      WTF::MemoryPressureHandler::setMemoryUsagePolicyBasedOnFootprint((uint64_t)this, v3);
      v13 = *((unsigned __int8 *)this + 10);
      if (v13 == 2)
      {
        if (!*((_QWORD *)this + 6))
          return;
        *(_QWORD *)task_info_outCnt = "Total";
        v36 = 93;
        if (task_info(*v2, 0x16u, task_info_out, &v36))
        {
          v15 = 0;
          LOBYTE(v33) = 0;
        }
        else
        {
          v33 = v38;
          v34 = v39;
          v15 = 1;
        }
        v35 = v15;
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), 1, 0);
        v31 = atomic_load((unsigned __int8 *)this + 4);
        if (v31 != 2 || *((_BYTE *)this + 7))
          cache_simulate_memory_warning_event();
      }
      else
      {
        if (v13 != 1 || !*((_QWORD *)this + 6))
          return;
        *(_QWORD *)task_info_outCnt = "Total";
        v36 = 93;
        if (task_info(*v2, 0x16u, task_info_out, &v36))
        {
          v14 = 0;
          LOBYTE(v33) = 0;
        }
        else
        {
          v33 = v38;
          v34 = v39;
          v14 = 1;
        }
        v35 = v14;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), 0, 0);
      }
      WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)task_info_outCnt);
      return;
    }
    v11 = ((unint64_t)*(unsigned int *)this << 30) + 3221225472u;
    v12 = atomic_load(&WTF::ramSize(void)::onceFlag);
    if (v12 != -1)
    {
      *(_QWORD *)task_info_out = &v36;
      *(_QWORD *)task_info_outCnt = task_info_out;
      std::__call_once(&WTF::ramSize(void)::onceFlag, task_info_outCnt, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
    }
    v6 = (unint64_t)((double)(unint64_t)WTF::ramSize(void)::ramSize * 0.9);
    if (v11 < v6)
      v6 = v11;
    v7 = v6 & 0x7FFFFFFFFFFFFF00;
  }
  else
  {
    v16 = *(unsigned int *)this;
    v17 = atomic_load(&WTF::ramSize(void)::onceFlag);
    if (v17 != -1)
    {
      *(_QWORD *)task_info_out = &v36;
      *(_QWORD *)task_info_outCnt = task_info_out;
      std::__call_once(&WTF::ramSize(void)::onceFlag, task_info_outCnt, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
    }
    LOBYTE(v6) = 0;
    v18 = 0x1C0000000;
    if ((unint64_t)WTF::ramSize(void)::ramSize > 0x400000000)
      v18 = 0x3C0000000;
    v7 = v18 + (v16 << 30);
  }
  v8 = v7 | v6;
  if (v3 < v8)
    goto LABEL_24;
  v9 = qword_1ECF2C3B8;
  if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(task_info_out[0]) = 0;
    _os_log_impl(&dword_197AA9000, v9, OS_LOG_TYPE_DEFAULT, "Process is above the memory kill threshold. Trying to shrink down.", (uint8_t *)task_info_out, 2u);
  }
  if (*((_QWORD *)this + 6))
  {
    *(_QWORD *)task_info_outCnt = "Total";
    v36 = 93;
    if (task_info(*v2, 0x16u, task_info_out, &v36))
    {
      v10 = 0;
      LOBYTE(v33) = 0;
    }
    else
    {
      v33 = v38;
      v34 = v39;
      v10 = 1;
    }
    v35 = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), 1, 1);
    v19 = atomic_load((unsigned __int8 *)this + 4);
    if (v19 != 2 || *((_BYTE *)this + 7))
      cache_simulate_memory_warning_event();
    WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)task_info_outCnt);
  }
  task_info_outCnt[0] = 93;
  if (task_info(*v2, 0x16u, task_info_out, task_info_outCnt))
    v20 = 0;
  else
    v20 = v39;
  v21 = qword_1ECF2C3B8;
  if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
  {
    task_info_out[0] = 134217984;
    *(_QWORD *)&task_info_out[1] = v20 >> 20;
    _os_log_impl(&dword_197AA9000, v21, OS_LOG_TYPE_DEFAULT, "New memory footprint: %zu MB", (uint8_t *)task_info_out, 0xCu);
  }
  if (v20 >= v8)
  {
    WTFLogAlways("Unable to shrink memory footprint of process (%zu MB) below the kill thresold (%zu MB). Killed\n", v22, v23, v24, v25, v26, v27, v28, v20 >> 20);
    v30 = *((_QWORD *)this + 3);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x197AED9E8);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
  }
  else
  {
    v29 = qword_1ECF2C3B8;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(task_info_out[0]) = 0;
      _os_log_impl(&dword_197AA9000, v29, OS_LOG_TYPE_DEFAULT, "Shrank below memory kill threshold. Process gets to live.", (uint8_t *)task_info_out, 2u);
    }
    WTF::MemoryPressureHandler::setMemoryUsagePolicyBasedOnFootprint((uint64_t)this, v20);
  }
}

void WTF::MemoryPressureHandler::setPageCount(WTF::MemoryPressureHandler *this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  char **v5;
  char *v6;

  v1 = (int)this;
  v2 = atomic_load(&qword_1ECF58188);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&qword_1ECF58188, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MemoryPressureHandler::singleton(void)::$_0 &&>>);
  }
  if ((_DWORD)qword_1ECF58190 != v1)
  {
    v3 = atomic_load(&qword_1ECF58188);
    if (v3 != -1)
    {
      v6 = &v4;
      v5 = &v6;
      std::__call_once(&qword_1ECF58188, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MemoryPressureHandler::singleton(void)::$_0 &&>>);
    }
    LODWORD(qword_1ECF58190) = v1;
  }
}

uint64_t WTF::MemoryPressureHandler::currentMemoryUsagePolicy(WTF::MemoryPressureHandler *this)
{
  kern_return_t v3;
  unint64_t v4;
  double v5;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v8;

  if (*((_BYTE *)this + 6))
    return 1;
  if (*((_BYTE *)this + 7))
    return 2;
  task_info_outCnt = 93;
  v3 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
  v4 = v8;
  if (v3)
    v4 = 0;
  v5 = (double)*((unint64_t *)this + 10);
  if (v4 >= (unint64_t)(*((double *)this + 12) * v5))
    return 2;
  return v4 >= (unint64_t)(*((double *)this + 11) * v5);
}

void WTF::MemoryPressureHandler::releaseMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 48))
  {
    v8 = "Total";
    task_info_outCnt = 93;
    if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
    {
      v6 = 0;
      LOBYTE(v9) = 0;
    }
    else
    {
      v9 = v14;
      v10 = v15;
      v6 = 1;
    }
    v11 = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2, a3);
    if ((_DWORD)a2)
    {
      v7 = atomic_load((unsigned __int8 *)(a1 + 4));
      if (v7 != 2 || *(_BYTE *)(a1 + 7))
        cache_simulate_memory_warning_event();
    }
    WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)&v8);
  }
}

uint64_t WTF::MemoryPressureHandler::setMemoryUsagePolicyBasedOnFootprint(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  double v3;
  int v4;
  int v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v2 = this;
  v13 = *MEMORY[0x1E0C80C00];
  v3 = (double)*(unint64_t *)(this + 80);
  if ((unint64_t)(*(double *)(this + 96) * v3) <= a2)
  {
    v4 = 2;
    v5 = *(unsigned __int8 *)(this + 10);
    if (v5 == 2)
      return this;
  }
  else
  {
    v4 = (unint64_t)(*(double *)(this + 88) * v3) <= a2;
    v5 = *(unsigned __int8 *)(this + 10);
    if (v4 == v5)
      return this;
  }
  v6 = qword_1ECF2C3B8;
  if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
  {
    if (v5)
    {
      if (v5 == 2)
      {
        v7 = "Strict";
        if (v4)
          goto LABEL_16;
      }
      else
      {
        if (v5 == 1)
        {
          v7 = "Conservative";
          if (!v4)
            goto LABEL_14;
LABEL_16:
          if (v4 == 2)
            v8 = "Strict";
          else
            v8 = "Conservative";
          goto LABEL_19;
        }
        v7 = "";
        if (v4)
          goto LABEL_16;
      }
LABEL_14:
      v8 = "Unrestricted";
LABEL_19:
      v9 = 136315394;
      v10 = v7;
      v11 = 2080;
      v12 = v8;
      _os_log_impl(&dword_197AA9000, v6, OS_LOG_TYPE_DEFAULT, "Memory usage policy changed: %s -> %s", (uint8_t *)&v9, 0x16u);
      goto LABEL_20;
    }
    v7 = "Unrestricted";
    if (!v4)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_20:
  *(_BYTE *)(v2 + 10) = v4;
  this = *(_QWORD *)(v2 + 32);
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
  return this;
}

uint64_t WTF::MemoryPressureHandler::setMemoryFootprintNotificationThresholds(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
    v4 = *a3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = result;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(*(_QWORD *)a2, (unint64_t *)(*(_QWORD *)a2 + 8 * v3), 126 - 2 * __clz(v3), 1);
    v15 = *(_QWORD *)(v7 + 56);
    if (v15)
    {
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
    }
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v7 + 56) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 64) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(v7 + 68) = v16;
    v17 = *a3;
    *a3 = 0;
    result = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v7 + 72) = v17;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::MemoryPressureHandler::setProcessState(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 9) != a2)
    *(_BYTE *)(result + 9) = a2;
  return result;
}

const char *WTF::MemoryPressureHandler::processStateDescription(WTF::MemoryPressureHandler *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  v1 = atomic_load(_MergedGlobals_9);
  if ((v1 & 1) == 0)
    return "unknown";
  v2 = atomic_load(&qword_1ECF58188);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&qword_1ECF58188, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MemoryPressureHandler::singleton(void)::$_0 &&>>);
  }
  if (byte_1ECF58199)
  {
    if (byte_1ECF58199 == 1)
      return "inactive";
    return "unknown";
  }
  return "active";
}

void WTF::MemoryPressureHandler::beginSimulatedMemoryWarning(WTF::MemoryPressureHandler *this)
{
  uint64_t v2;
  char v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];
  uint64_t v10;
  uint64_t v11;

  if (!*((_BYTE *)this + 6))
  {
    *((_BYTE *)this + 6) = 1;
    v2 = *((_QWORD *)this + 4);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    if (*((_QWORD *)this + 6))
    {
      v4 = "Total";
      task_info_outCnt = 93;
      if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
      {
        v3 = 0;
        LOBYTE(v5) = 0;
      }
      else
      {
        v5 = v10;
        v6 = v11;
        v3 = 1;
      }
      v7 = v3;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), 0, 1);
      WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)&v4);
    }
  }
}

uint64_t WTF::MemoryPressureHandler::endSimulatedMemoryWarning(uint64_t this)
{
  if (*(_BYTE *)(this + 6))
  {
    *(_BYTE *)(this + 6) = 0;
    this = *(_QWORD *)(this + 32);
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
  }
  return this;
}

void WTF::MemoryPressureHandler::beginSimulatedMemoryPressure(WTF::MemoryPressureHandler *this)
{
  uint64_t v2;
  char v3;
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];
  uint64_t v11;
  uint64_t v12;

  if (!*((_BYTE *)this + 7))
  {
    *((_BYTE *)this + 7) = 1;
    v2 = *((_QWORD *)this + 4);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    if (*((_QWORD *)this + 6))
    {
      v5 = "Total";
      task_info_outCnt = 93;
      if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
      {
        v3 = 0;
        LOBYTE(v6) = 0;
      }
      else
      {
        v6 = v11;
        v7 = v12;
        v3 = 1;
      }
      v8 = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), 1, 1);
      v4 = atomic_load((unsigned __int8 *)this + 4);
      if (v4 != 2 || *((_BYTE *)this + 7))
        cache_simulate_memory_warning_event();
      WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)&v5);
    }
  }
}

uint64_t WTF::MemoryPressureHandler::endSimulatedMemoryPressure(uint64_t this)
{
  if (*(_BYTE *)(this + 7))
  {
    *(_BYTE *)(this + 7) = 0;
    this = *(_QWORD *)(this + 32);
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
  }
  return this;
}

void WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange(WTF::MemoryPressureHandler::ReliefLogger *this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  _BYTE v23[18];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  task_info_outCnt = 93;
  if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, &task_info_out, &task_info_outCnt) || !*((_BYTE *)this + 24))
  {
    v2 = qword_1ECF2C3B8;
    if (!os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
      return;
    v3 = *(_QWORD *)this;
    task_info_out = 136446210;
    v15 = v3;
    v4 = "Memory pressure relief: %{public}s: (Unable to get dirty memory information for process)";
    v5 = v2;
    v6 = 12;
  }
  else
  {
    v7 = *(_QWORD *)&v23[4];
    v8 = v26;
    v9 = qword_1ECF2C3B8;
    if (!os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
      return;
    v11 = *((_QWORD *)this + 1);
    v10 = *((_QWORD *)this + 2);
    v12 = *(_QWORD *)this;
    task_info_out = 136447746;
    v15 = v12;
    v16 = 2048;
    v17 = v11;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v7 - v11;
    v22 = 2048;
    *(_QWORD *)v23 = v10;
    *(_WORD *)&v23[8] = 2048;
    *(_QWORD *)&v23[10] = v8;
    v24 = 2048;
    v25 = v8 - v10;
    v4 = "Memory pressure relief: %{public}s: res = %zu/%zu/%ld, res+swap = %zu/%zu/%ld";
    v5 = v9;
    v6 = 72;
  }
  _os_log_impl(&dword_197AA9000, v5, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&task_info_out, v6);
}

uint64_t WTF::MemoryPressureHandlerConfiguration::MemoryPressureHandlerConfiguration(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  *(_QWORD *)result = a2;
  *(double *)(result + 8) = a5;
  *(double *)(result + 16) = a6;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(double *)(result + 40) = a7;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(double *)(result + 8) = a5;
  *(double *)(result + 16) = a6;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(double *)(result + 40) = a7;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WTF::MemoryPressureHandler::*&)(void),WTF::MemoryPressureHandler*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::RunLoop::Timer::~Timer(WTF::RunLoop::Timer *this)
{
  uint64_t v2;
  __CFRunLoopTimer *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3571F10;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E3572150;
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (v3 && (CFRunLoopTimerInvalidate(v3), v4 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v4))
  {
    CFRelease(v4);
    v5 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)(v6 + 8));
      WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v6);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
}

void WTF::RunLoop::Timer::~Timer(WTF::RunLoop::Timer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __CFRunLoopTimer *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::RunLoop::Timer *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = off_1E3571F10;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_QWORD *)this = off_1E3572150;
  v10 = (__CFRunLoopTimer *)*((_QWORD *)this + 2);
  if (v10
    && (CFRunLoopTimerInvalidate(v10), v11 = (const void *)*((_QWORD *)this + 2), *((_QWORD *)this + 2) = 0, v11))
  {
    CFRelease(v11);
    v12 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v12)
      CFRelease(v12);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v13)
    goto LABEL_12;
  v14 = (unsigned int *)(v13 + 8);
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)(v13 + 8));
    WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v13);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    v17 = this;
  }
  else
  {
LABEL_12:
    v17 = this;
  }
  WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::RunLoop::Timer::fired(WTF::RunLoop::Timer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  BOOL v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  BOOL v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  int64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  BOOL v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v69 = *(a2 - 1);
        v70 = *v8;
        if (v69 > *v8)
        {
          *v8 = v69;
          *(a2 - 1) = v70;
        }
        return result;
      case 3:
        v71 = v8[1];
        v72 = *(a2 - 1);
        if (v71 <= v72)
          v73 = *(a2 - 1);
        else
          v73 = v8[1];
        if (v71 >= v72)
          v71 = *(a2 - 1);
        *(a2 - 1) = v71;
        v8[1] = v73;
        v74 = *(a2 - 1);
        if (v74 <= *v8)
          v75 = *v8;
        else
          v75 = *(a2 - 1);
        if (v74 >= *v8)
          v74 = *v8;
        *(a2 - 1) = v74;
        v77 = *v8;
        v76 = v8[1];
        if (v75 <= v76)
          v77 = v8[1];
        if (v75 < v76)
          v76 = v75;
        *v8 = v77;
        v8[1] = v76;
        return result;
      case 4:
        v79 = v8[1];
        v78 = v8[2];
        if (*v8 <= v78)
          v80 = v8[2];
        else
          v80 = *v8;
        if (*v8 < v78)
          v78 = *v8;
        v8[2] = v78;
        *v8 = v80;
        v81 = *(a2 - 1);
        if (v79 <= v81)
          v82 = *(a2 - 1);
        else
          v82 = v79;
        if (v79 < v81)
          v81 = v79;
        *(a2 - 1) = v81;
        v83 = *v8;
        if (*v8 <= v82)
          v84 = v82;
        else
          v84 = *v8;
        if (*v8 >= v82)
          v83 = v82;
        *v8 = v84;
        v8[1] = v83;
        v85 = v8[2];
        v86 = *(a2 - 1);
        if (v85 <= v86)
          v87 = *(a2 - 1);
        else
          v87 = v8[2];
        if (v85 >= v86)
          v85 = *(a2 - 1);
        *(a2 - 1) = v85;
        v88 = v8[1];
        if (v88 <= v87)
          v89 = v87;
        else
          v89 = v8[1];
        if (v88 >= v87)
          v88 = v87;
        v8[1] = v89;
        v8[2] = v88;
        return result;
      case 5:
        v90 = *v8;
        v91 = v8[1];
        if (*v8 <= v91)
          v92 = v8[1];
        else
          v92 = *v8;
        if (*v8 >= v91)
          v90 = v8[1];
        *v8 = v92;
        v8[1] = v90;
        v93 = v8[3];
        v94 = *(a2 - 1);
        if (v93 <= v94)
          v95 = *(a2 - 1);
        else
          v95 = v8[3];
        if (v93 >= v94)
          v93 = *(a2 - 1);
        *(a2 - 1) = v93;
        v8[3] = v95;
        v96 = *(a2 - 1);
        v97 = v8[2];
        if (v96 <= v97)
          v98 = v8[2];
        else
          v98 = *(a2 - 1);
        if (v96 >= v97)
          v96 = v8[2];
        *(a2 - 1) = v96;
        v100 = v8[2];
        v99 = v8[3];
        v101 = v8[1];
        if (v98 <= v99)
          v100 = v8[3];
        if (v98 < v99)
          v99 = v98;
        v8[2] = v100;
        v8[3] = v99;
        v102 = *(a2 - 1);
        if (v101 <= v102)
          v103 = *(a2 - 1);
        else
          v103 = v101;
        if (v101 < v102)
          v102 = v101;
        *(a2 - 1) = v102;
        v104 = *v8;
        v106 = v8[2];
        v105 = v8[3];
        if (v105 <= *v8)
          v107 = *v8;
        else
          v107 = v8[3];
        if (v105 >= *v8)
          v105 = *v8;
        if (v107 <= v106)
          v104 = v8[2];
        if (v107 < v106)
          v106 = v107;
        if (v105 <= v103)
          v108 = v103;
        else
          v108 = v105;
        if (v105 >= v103)
          v105 = v103;
        if (v108 <= v106)
          v103 = v106;
        *v8 = v104;
        v8[1] = v103;
        if (v108 >= v106)
          v109 = v106;
        else
          v109 = v108;
        v8[2] = v109;
        v8[3] = v105;
        return result;
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v120 = (unint64_t)(v10 - 2) >> 1;
              v121 = v120;
              do
              {
                if (v120 >= v121)
                {
                  v122 = (2 * v121) | 1;
                  v123 = &v8[v122];
                  if (2 * v121 + 2 >= v10)
                  {
                    v124 = *v123;
                    v126 = &v8[v121];
                    v127 = *v126;
                    if (*v123 <= *v126)
                      goto LABEL_235;
                  }
                  else
                  {
                    v124 = v123[1];
                    v125 = *v123 > v124;
                    if (*v123 < v124)
                      v124 = *v123;
                    if (v125)
                    {
                      ++v123;
                      v122 = 2 * v121 + 2;
                    }
                    v126 = &v8[v121];
                    v127 = *v126;
                    if (v124 <= *v126)
                    {
LABEL_235:
                      while (1)
                      {
                        *v126 = v124;
                        v126 = v123;
                        if (v120 < v122)
                          break;
                        v129 = (2 * v122) | 1;
                        v123 = &v8[v129];
                        v122 = 2 * v122 + 2;
                        if (v122 < v10)
                        {
                          v124 = *v123;
                          result = (uint64_t)(v123 + 1);
                          v128 = v123[1];
                          if (*v123 >= v128)
                            v124 = v123[1];
                          if (*v123 <= v128)
                            v122 = v129;
                          else
                            ++v123;
                          if (v124 > v127)
                            break;
                        }
                        else
                        {
                          v124 = *v123;
                          v122 = v129;
                          if (*v123 > v127)
                            break;
                        }
                      }
                      *v126 = v127;
                    }
                  }
                }
                v125 = v121-- <= 0;
              }
              while (!v125);
              v130 = (unint64_t)v9 >> 3;
              do
              {
                v131 = 0;
                v132 = *v8;
                v133 = (unint64_t)(v130 - 2) >> 1;
                v134 = v8;
                do
                {
                  while (1)
                  {
                    v137 = &v134[v131 + 1];
                    v138 = (2 * v131) | 1;
                    v131 = 2 * v131 + 2;
                    if (v131 < v130)
                      break;
                    v131 = v138;
                    *v134 = *v137;
                    v134 = v137;
                    if (v138 > v133)
                      goto LABEL_251;
                  }
                  v135 = *v137;
                  v136 = v137[1];
                  if (*v137 >= v136)
                    v135 = v137[1];
                  if (*v137 <= v136)
                    v131 = v138;
                  else
                    ++v137;
                  *v134 = v135;
                  v134 = v137;
                }
                while (v131 <= v133);
LABEL_251:
                if (v137 == --a2)
                {
                  *v137 = v132;
                }
                else
                {
                  *v137 = *a2;
                  *a2 = v132;
                  v139 = (char *)v137 - (char *)v8 + 8;
                  if (v139 >= 9)
                  {
                    v140 = (((unint64_t)v139 >> 3) - 2) >> 1;
                    v141 = &v8[v140];
                    v142 = *v141;
                    v143 = *v137;
                    if (*v141 > *v137)
                    {
                      do
                      {
                        *v137 = v142;
                        v137 = v141;
                        if (!v140)
                          break;
                        v140 = (v140 - 1) >> 1;
                        v141 = &v8[v140];
                        v142 = *v141;
                      }
                      while (*v141 > v143);
                      *v137 = v143;
                    }
                  }
                }
                v125 = v130-- <= 2;
              }
              while (!v125);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 <= *v12)
            {
              if (v13 > v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 > *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 <= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 <= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 <= *v8)
          {
            if (v13 > v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 > *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 <= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 <= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 <= v26)
          {
            if (v27 > v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 > v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 <= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 <= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 <= v35)
          {
            if (v36 > v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 > v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 <= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 <= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 > *v23)
          {
            if (v41 <= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 <= v40)
              {
                v39 = v40;
                goto LABEL_54;
              }
            }
LABEL_52:
            *v23 = v41;
            *v32 = v40;
            goto LABEL_54;
          }
          if (v41 <= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 > v40)
            goto LABEL_52;
          v39 = v41;
LABEL_54:
          v42 = *v8;
          *v8 = v39;
          *v12 = v42;
          --a3;
          v20 = *v8;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (*(v8 - 1) <= v20)
          {
            if (v20 <= *(a2 - 1))
            {
              v60 = v8 + 1;
              do
              {
                v8 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
              }
              while (v20 <= *v8);
            }
            else
            {
              v58 = v8 + 1;
              do
              {
                if (v58 == a2)
                  goto LABEL_265;
                v59 = *v58++;
              }
              while (v20 <= v59);
              v8 = v58 - 1;
            }
            v61 = a2;
            if (v8 < a2)
            {
              v61 = a2;
              while (v61 != v7)
              {
                v62 = *--v61;
                if (v20 <= v62)
                  goto LABEL_95;
              }
              goto LABEL_265;
            }
LABEL_95:
            if (v8 < v61)
            {
              v63 = *v8;
              v64 = *v61;
              do
              {
                *v8 = v64;
                v65 = v8 + 1;
                *v61 = v63;
                do
                {
                  if (v65 == a2)
                    goto LABEL_265;
                  v66 = *v65++;
                  v63 = v66;
                }
                while (v20 <= v66);
                v8 = v65 - 1;
                do
                {
                  if (v61 == v7)
                    goto LABEL_265;
                  v67 = *--v61;
                  v64 = v67;
                }
                while (v20 > v67);
              }
              while (v8 < v61);
            }
            v68 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v68;
            a4 = 0;
            *v68 = v20;
            continue;
          }
LABEL_56:
          v43 = 0;
          do
          {
            v44 = &v8[v43 + 1];
            if (v44 == a2)
              goto LABEL_265;
            v45 = *v44;
            ++v43;
          }
          while (*v44 > v20);
          v46 = &v8[v43];
          v47 = a2;
          if (v43 != 1)
          {
            while (v47 != v8)
            {
              v48 = *--v47;
              if (v48 > v20)
                goto LABEL_66;
            }
            goto LABEL_265;
          }
          v47 = a2;
          do
          {
            if (v46 >= v47)
              break;
            v49 = *--v47;
          }
          while (v49 <= v20);
LABEL_66:
          if (v46 < v47)
          {
            v50 = *v47;
            v51 = &v8[v43];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              v53 = v51 + 1;
              do
              {
                if (v53 == a2)
                  goto LABEL_265;
                v54 = *v53++;
                v45 = v54;
              }
              while (v54 > v20);
              v51 = v53 - 1;
              do
              {
                if (v52 == v8)
                  goto LABEL_265;
                v55 = *--v52;
                v50 = v55;
              }
              while (v55 <= v20);
            }
            while (v51 < v52);
            v56 = v53 - 2;
            if (v53 - 2 == v8)
              goto LABEL_79;
LABEL_78:
            *v8 = *v56;
            goto LABEL_79;
          }
          v56 = v46 - 1;
          if (v46 - 1 != v8)
            goto LABEL_78;
LABEL_79:
          *v56 = v20;
          if (v46 < v47)
            goto LABEL_82;
          v57 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v8, v56);
          v8 = v56 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_82:
            result = std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(v7, v56, a3, a4 & 1);
            a4 = 0;
            v8 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v110 = v8 + 1;
        v112 = v8 == a2 || v110 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v112)
          {
            v113 = 8;
            v114 = v8;
            do
            {
              v116 = *v114;
              v114 = v110;
              v117 = *v110;
              if (v117 > v116)
              {
                v118 = v113;
                do
                {
                  *(unint64_t *)((char *)v8 + v118) = v116;
                  v119 = v118 - 8;
                  if (v118 == 8)
                  {
                    v115 = v8;
                    goto LABEL_208;
                  }
                  v116 = *(unint64_t *)((char *)v8 + v118 - 16);
                  v118 -= 8;
                }
                while (v117 > v116);
                v115 = (unint64_t *)((char *)v8 + v119);
LABEL_208:
                *v115 = v117;
              }
              v110 = v114 + 1;
              v113 += 8;
            }
            while (v114 + 1 != a2);
          }
        }
        else if (!v112)
        {
          v144 = 0;
          v145 = 1;
          while (1)
          {
            v146 = v8[v144];
            v144 = v145;
            v147 = *v110;
            if (*v110 > v146)
              break;
LABEL_259:
            v145 = v144 + 1;
            if (++v110 == a2)
              return result;
          }
          v148 = 0;
          while (1)
          {
            v149 = &v110[v148];
            *v149 = v146;
            if (!(v144 + v148))
              break;
            v146 = *(v149 - 2);
            --v148;
            if (v147 <= v146)
            {
              v110[v148] = v147;
              goto LABEL_259;
            }
          }
LABEL_265:
          __break(1u);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  _BOOL8 result;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      result = 1;
      break;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      if (v17 <= *a1)
        goto LABEL_28;
      *a1 = v17;
      *(a2 - 1) = v18;
      result = 1;
      break;
    case 3:
      v19 = a1[1];
      v20 = *(a2 - 1);
      if (v19 <= v20)
        v21 = *(a2 - 1);
      else
        v21 = a1[1];
      if (v19 >= v20)
        v19 = *(a2 - 1);
      *(a2 - 1) = v19;
      a1[1] = v21;
      v22 = *(a2 - 1);
      if (v22 <= *a1)
        v23 = *a1;
      else
        v23 = *(a2 - 1);
      if (v22 >= *a1)
        v22 = *a1;
      *(a2 - 1) = v22;
      v25 = *a1;
      v24 = a1[1];
      if (v23 <= v24)
        v25 = a1[1];
      if (v23 < v24)
        v24 = v23;
      *a1 = v25;
      a1[1] = v24;
      result = 1;
      break;
    case 4:
      v47 = a1[1];
      v46 = a1[2];
      if (*a1 <= v46)
        v48 = a1[2];
      else
        v48 = *a1;
      if (*a1 < v46)
        v46 = *a1;
      a1[2] = v46;
      *a1 = v48;
      v49 = *(a2 - 1);
      if (v47 <= v49)
        v50 = *(a2 - 1);
      else
        v50 = v47;
      if (v47 < v49)
        v49 = v47;
      *(a2 - 1) = v49;
      v51 = *a1;
      if (*a1 <= v50)
        v52 = v50;
      else
        v52 = *a1;
      if (*a1 >= v50)
        v51 = v50;
      *a1 = v52;
      a1[1] = v51;
      v53 = a1[2];
      v54 = *(a2 - 1);
      if (v53 <= v54)
        v55 = *(a2 - 1);
      else
        v55 = a1[2];
      if (v53 >= v54)
        v53 = *(a2 - 1);
      *(a2 - 1) = v53;
      v56 = a1[1];
      if (v56 <= v55)
        v57 = v55;
      else
        v57 = a1[1];
      if (v56 >= v55)
        v56 = v55;
      a1[1] = v57;
      a1[2] = v56;
      result = 1;
      break;
    case 5:
      v26 = *a1;
      v27 = a1[1];
      if (*a1 <= v27)
        v28 = a1[1];
      else
        v28 = *a1;
      if (*a1 >= v27)
        v26 = a1[1];
      *a1 = v28;
      a1[1] = v26;
      v29 = a1[3];
      v30 = *(a2 - 1);
      if (v29 <= v30)
        v31 = *(a2 - 1);
      else
        v31 = a1[3];
      if (v29 >= v30)
        v29 = *(a2 - 1);
      *(a2 - 1) = v29;
      a1[3] = v31;
      v32 = *(a2 - 1);
      v33 = a1[2];
      if (v32 <= v33)
        v34 = a1[2];
      else
        v34 = *(a2 - 1);
      if (v32 >= v33)
        v32 = a1[2];
      *(a2 - 1) = v32;
      v36 = a1[2];
      v35 = a1[3];
      v37 = a1[1];
      if (v34 <= v35)
        v36 = a1[3];
      if (v34 < v35)
        v35 = v34;
      a1[2] = v36;
      a1[3] = v35;
      v38 = *(a2 - 1);
      if (v37 <= v38)
        v39 = *(a2 - 1);
      else
        v39 = v37;
      if (v37 < v38)
        v38 = v37;
      *(a2 - 1) = v38;
      v40 = *a1;
      v42 = a1[2];
      v41 = a1[3];
      if (v41 <= *a1)
        v43 = *a1;
      else
        v43 = a1[3];
      if (v41 >= *a1)
        v41 = *a1;
      if (v43 <= v42)
        v40 = a1[2];
      if (v43 < v42)
        v42 = v43;
      if (v41 <= v39)
        v44 = v39;
      else
        v44 = v41;
      if (v41 >= v39)
        v41 = v39;
      if (v44 <= v42)
        v39 = v42;
      *a1 = v40;
      a1[1] = v39;
      if (v44 >= v42)
        v45 = v42;
      else
        v45 = v44;
      a1[2] = v45;
      a1[3] = v41;
      result = 1;
      break;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v6 = *a1;
      v5 = a1[1];
      if (v5 <= v3)
        v7 = a1[2];
      else
        v7 = a1[1];
      if (v5 < v3)
        v3 = a1[1];
      if (v3 <= v6)
        v8 = *a1;
      else
        v8 = v3;
      if (v3 >= v6)
        v3 = *a1;
      *v4 = v3;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v6;
      if (v8 >= v7)
        v8 = v7;
      *a1 = v9;
      a1[1] = v8;
      v10 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_28:
        result = 1;
      }
      else
      {
        v11 = 0;
        v12 = 24;
        while (1)
        {
          v13 = *v10;
          v14 = *v4;
          if (*v10 > v14)
            break;
LABEL_27:
          v4 = v10;
          v12 += 8;
          if (++v10 == a2)
            goto LABEL_28;
        }
        v15 = v12;
        do
        {
          *(unint64_t *)((char *)a1 + v15) = v14;
          v16 = v15 - 8;
          if (v15 == 8)
          {
            *a1 = v13;
            if (++v11 != 8)
              goto LABEL_27;
            goto LABEL_116;
          }
          v14 = *(unint64_t *)((char *)a1 + v15 - 16);
          v15 -= 8;
        }
        while (v13 > v14);
        *(unint64_t *)((char *)a1 + v16) = v13;
        if (++v11 != 8)
          goto LABEL_27;
LABEL_116:
        result = v10 + 1 == a2;
      }
      break;
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::MemoryPressureHandler::singleton(void)::$_0 &&>>()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  char **v5;
  char *v6;

  qword_1ECF58190 = 0;
  unk_1ECF58198 = 257;
  byte_1ECF5819A = 0;
  xmmword_1ECF581A0 = 0u;
  unk_1ECF581B0 = 0u;
  xmmword_1ECF581C0 = 0u;
  unk_1ECF581D0 = 0u;
  v0 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  v1 = WTF::ramSize(void)::ramSize;
  if ((unint64_t)WTF::ramSize(void)::ramSize >= 0xC0000000)
    v1 = 3221225472;
  unk_1ECF581E0 = v1;
  unk_1ECF581E8 = xmmword_199123010;
  unk_1ECF58200 = 0;
  unk_1ECF581F8 = 0;
  unk_1ECF58208 = 0x403E000000000000;
  qword_1ECF58210 = 0;
  v2 = MEMORY[0x1E0C80D38];
  os_retain(MEMORY[0x1E0C80D38]);
  if (BYTE5(qword_1ECF58190))
  {
    __break(0xC471u);
  }
  else
  {
    v3 = (void *)qword_1ECF58210;
    qword_1ECF58210 = v2;
    if (v3)
      os_release(v3);
    atomic_store(1u, _MergedGlobals_9);
  }
}

uint64_t WTF::MemoryPressureHandler::install(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD handler[5];
  _QWORD block[5];

  if (!*(_BYTE *)(this + 5))
  {
    v1 = this;
    if ((_MergedGlobals_10 & 1) == 0)
      _MergedGlobals_10 = 1;
    v2 = MEMORY[0x1E0C809B0];
    v3 = *(NSObject **)(this + 128);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v1;
    dispatch_async(v3, block);
    v4 = *(NSObject **)(v1 + 128);
    handler[0] = v2;
    handler[1] = 3221225472;
    handler[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_2;
    handler[3] = &__block_descriptor_40_e8_v12__0i8l;
    handler[4] = v1;
    notify_register_dispatch("org.WebKit.memoryWarning", dword_1ECF58228, v4, handler);
    v5 = *(NSObject **)(v1 + 128);
    v14[0] = v2;
    v14[1] = 3221225472;
    v14[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_3;
    v14[3] = &__block_descriptor_40_e8_v12__0i8l;
    v14[4] = v1;
    notify_register_dispatch("org.WebKit.memoryWarning.begin", &dword_1ECF58228[1], v5, v14);
    v6 = *(NSObject **)(v1 + 128);
    v13[0] = v2;
    v13[1] = 3221225472;
    v13[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_4;
    v13[3] = &__block_descriptor_40_e8_v12__0i8l;
    v13[4] = v1;
    notify_register_dispatch("org.WebKit.memoryWarning.end", &dword_1ECF58228[2], v6, v13);
    v7 = *(NSObject **)(v1 + 128);
    v12[0] = v2;
    v12[1] = 3221225472;
    v12[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_5;
    v12[3] = &__block_descriptor_40_e8_v12__0i8l;
    v12[4] = v1;
    notify_register_dispatch("org.WebKit.lowMemory", &dword_1ECF58228[3], v7, v12);
    v8 = *(NSObject **)(v1 + 128);
    v11[0] = v2;
    v11[1] = 3221225472;
    v11[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_7;
    v11[3] = &__block_descriptor_40_e8_v12__0i8l;
    v11[4] = v1;
    notify_register_dispatch("org.WebKit.lowMemory.begin", &dword_1ECF58228[4], v8, v11);
    v9 = *(NSObject **)(v1 + 128);
    v10[0] = v2;
    v10[1] = 3221225472;
    v10[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_8;
    v10[3] = &__block_descriptor_40_e8_v12__0i8l;
    v10[4] = v1;
    this = notify_register_dispatch("org.WebKit.lowMemory.end", &dword_1ECF58228[5], v9, v10);
    *(_BYTE *)(v1 + 5) = 1;
  }
  return this;
}

void ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  dispatch_source_t v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD handler[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(id *)(v1 + 128);
  v3 = dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 0x37uLL, v2);
  if (byte_1ECF58219 == 1)
  {
    v4 = (void *)qword_1ECF58220;
  }
  else
  {
    v4 = 0;
    byte_1ECF58219 = 1;
  }
  qword_1ECF58220 = (uint64_t)v3;

  if (byte_1ECF58219 == 1)
  {
    v5 = qword_1ECF58220;
  }
  else
  {
    v5 = 0;
    qword_1ECF58220 = 0;
    byte_1ECF58219 = 1;
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_2;
  handler[3] = &__block_descriptor_40_e5_v8__0l;
  handler[4] = v1;
  dispatch_source_set_event_handler(v5, handler);
  if (byte_1ECF58219 == 1)
  {
    v6 = qword_1ECF58220;
  }
  else
  {
    v6 = 0;
    qword_1ECF58220 = 0;
    byte_1ECF58219 = 1;
  }
  dispatch_resume(v6);
}

void ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uintptr_t data;
  uintptr_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  uintptr_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (byte_1ECF58219 == 1)
  {
    data = dispatch_source_get_data((dispatch_source_t)qword_1ECF58220);
    v3 = data - 1;
  }
  else
  {
    qword_1ECF58220 = 0;
    byte_1ECF58219 = 1;
    data = dispatch_source_get_data(0);
    v3 = data - 1;
    if (data - 1 > 0x1F)
      goto LABEL_30;
  }
  switch(v3)
  {
    case 0uLL:
      if (atomic_load((unsigned __int8 *)(v1 + 4)))
      {
        atomic_store(0, (unsigned __int8 *)(v1 + 4));
        v5 = *(_QWORD *)(v1 + 32);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      }
      break;
    case 1uLL:
      v6 = atomic_load((unsigned __int8 *)(v1 + 4));
      if (v6 != 1)
      {
        atomic_store(1u, (unsigned __int8 *)(v1 + 4));
        v7 = *(_QWORD *)(v1 + 32);
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      }
      goto LABEL_15;
    case 3uLL:
      v8 = atomic_load((unsigned __int8 *)(v1 + 4));
      if (v8 != 2)
      {
        atomic_store(2u, (unsigned __int8 *)(v1 + 4));
        v9 = *(_QWORD *)(v1 + 32);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      }
      goto LABEL_20;
    case 0xFuLL:
      v10 = *(_QWORD *)(v1 + 40);
      if (v10)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
LABEL_15:
      if (!*(_QWORD *)(v1 + 48))
        break;
      v18 = "Total";
      task_info_outCnt = 93;
      if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, &task_info_out, &task_info_outCnt))
      {
        v11 = 0;
        LOBYTE(v19) = 0;
      }
      else
      {
        v19 = v27;
        v20 = v28;
        v11 = 1;
      }
      v21 = v11;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48), 0, 0);
      goto LABEL_29;
    case 0x1FuLL:
      v12 = *(_QWORD *)(v1 + 40);
      if (v12)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
LABEL_20:
      if (!*(_QWORD *)(v1 + 48))
        break;
      v18 = "Total";
      task_info_outCnt = 93;
      if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, &task_info_out, &task_info_outCnt))
      {
        v13 = 0;
        LOBYTE(v19) = 0;
      }
      else
      {
        v19 = v27;
        v20 = v28;
        v13 = 1;
      }
      v21 = v13;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48), 1, 0);
      v14 = atomic_load((unsigned __int8 *)(v1 + 4));
      if (v14 != 2 || *(_BYTE *)(v1 + 7))
        cache_simulate_memory_warning_event();
LABEL_29:
      WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)&v18);
      break;
    default:
      break;
  }
LABEL_30:
  if (*(_BYTE *)(v1 + 8))
  {
    v15 = qword_1ECF2C3B8;
    if (os_log_type_enabled((os_log_t)qword_1ECF2C3B8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = atomic_load((unsigned __int8 *)(v1 + 4));
      if (v16 == 2)
        v17 = 1;
      else
        v17 = *(unsigned __int8 *)(v1 + 7);
      task_info_out = 134218240;
      v24 = data;
      v25 = 1024;
      v26 = v17;
      _os_log_impl(&dword_197AA9000, v15, OS_LOG_TYPE_DEFAULT, "Received memory pressure event: %lu, system vm pressure critical: %d", (uint8_t *)&task_info_out, 0x12u);
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  dispatch_time_t v4;
  NSObject *v5;
  _QWORD v6[5];
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 6))
  {
    *(_BYTE *)(v1 + 6) = 1;
    v2 = *(_QWORD *)(v1 + 32);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    if (*(_QWORD *)(v1 + 48))
    {
      v7 = "Total";
      task_info_outCnt = 93;
      if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
      {
        v3 = 0;
        LOBYTE(v8) = 0;
      }
      else
      {
        v8 = v13;
        v9 = v14;
        v3 = 1;
      }
      v10 = v3;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48), 0, 1);
      WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)&v7);
    }
  }
  v4 = dispatch_time(0, 2000000000);
  v5 = *(NSObject **)(v1 + 128);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_2_3;
  v6[3] = &__block_descriptor_40_e5_v8__0l;
  v6[4] = v1;
  dispatch_after(v4, v5, v6);
}

void ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 6))
  {
    *(_BYTE *)(v1 + 6) = 1;
    v2 = *(_QWORD *)(v1 + 32);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    if (*(_QWORD *)(v1 + 48))
    {
      v4 = "Total";
      task_info_outCnt = 93;
      if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
      {
        v3 = 0;
        LOBYTE(v5) = 0;
      }
      else
      {
        v5 = v10;
        v6 = v11;
        v3 = 1;
      }
      v7 = v3;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48), 0, 1);
      WTF::MemoryPressureHandler::ReliefLogger::logMemoryUsageChange((WTF::MemoryPressureHandler::ReliefLogger *)&v4);
    }
  }
}

void ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_5(uint64_t a1)
{
  WTF::MemoryPressureHandler *v1;
  bmalloc::api *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_time_t v10;
  NSObject *v11;
  _QWORD block[5];

  v1 = *(WTF::MemoryPressureHandler **)(a1 + 32);
  WTF::MemoryPressureHandler::beginSimulatedMemoryPressure(v1);
  bmalloc::api::scavenge(v2, v3, v4, v5, v6, v7, v8, v9);
  malloc_zone_pressure_relief(0, 0);
  v10 = dispatch_time(0, 2000000000);
  v11 = *((_QWORD *)v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_6;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v1;
  dispatch_after(v10, v11, block);
}

void ___ZN3WTF21MemoryPressureHandler7installEv_block_invoke_7(uint64_t a1)
{
  WTF::MemoryPressureHandler::beginSimulatedMemoryPressure(*(WTF::MemoryPressureHandler **)(a1 + 32));
}

void WTF::MetaAllocator::~MetaAllocator(WTF::MetaAllocator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = off_1E3571F98;
  v9 = (unint64_t *)((char *)this + 32);
  v10 = (unint64_t *)*((_QWORD *)this + 4);
  if (v10)
  {
    v11 = 129;
    while (*v10)
    {
      v10 = (unint64_t *)*v10;
      if (!--v11)
      {
LABEL_5:
        __break(0xC471u);
        JUMPOUT(0x197AEFCA4);
      }
    }
    do
    {
      v19 = (unint64_t *)v10[1];
      if (v19)
      {
        v20 = 129;
        while (*v19)
        {
          v19 = (unint64_t *)*v19;
          if (!--v20)
            goto LABEL_5;
        }
      }
      else
      {
        v21 = 129;
        v22 = (unint64_t)v10;
        while (1)
        {
          v19 = (unint64_t *)(*(_QWORD *)(v22 + 16) & 0xFFFFFFFFFFFFFFFELL);
          if (!v19 || v22 != v19[1])
            break;
          v22 = *(_QWORD *)(v22 + 16) & 0xFFFFFFFFFFFFFFFELL;
          if (!--v21)
          {
            __break(0xC471u);
            JUMPOUT(0x197AEFD30);
          }
        }
      }
      WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::remove(v9, v10);
      WTF::fastFree((unint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
      v10 = v19;
    }
    while (v19);
  }
  v23 = *((_QWORD *)this + 7);
  if (v23)
    WTF::fastFree(v23 - 16, a2, a3, a4, a5, a6, a7, a8);
  v24 = *((_QWORD *)this + 6);
  if (v24)
    WTF::fastFree(v24 - 16, a2, a3, a4, a5, a6, a7, a8);
  v25 = *((_QWORD *)this + 5);
  if (v25)
    WTF::fastFree(v25 - 16, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::remove(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t **v15;

  v4 = *a2;
  v5 = (unint64_t)a2;
  if (v4)
  {
    v5 = a2[1];
    if (!v5)
    {
      v5 = (unint64_t)a2;
      goto LABEL_11;
    }
    v6 = 129;
    while (*(_QWORD *)v5)
    {
      v5 = *(_QWORD *)v5;
      if (!--v6)
      {
        __break(0xC471u);
        JUMPOUT(0x197AEFDF8);
      }
    }
  }
  v4 = *(_QWORD *)(v5 + 8);
  if (!v4)
  {
    v7 = *(_QWORD *)(v5 + 16);
    v8 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v10 = a1;
    if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_11:
  v9 = *(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v4 + 16) = v9 | *(_QWORD *)(v4 + 16) & 1;
  v7 = *(_QWORD *)(v5 + 16);
  v8 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  v10 = a1;
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_14;
LABEL_12:
  v10 = v8 + 1;
  if (v5 == *v8)
    v10 = v8;
LABEL_14:
  *v10 = v4;
  if ((unint64_t *)v5 == a2)
  {
    if ((v7 & 1) == 0)
      WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::removeFixup((uint64_t)a1, v4, v9);
    return a2;
  }
  else
  {
    if ((v7 & 1) != 0)
    {
      v11 = 1;
    }
    else
    {
      WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::removeFixup((uint64_t)a1, v4, v9);
      v11 = *(_QWORD *)(v5 + 16) & 1;
    }
    v13 = a2[2] & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v5 + 16) = v13 | v11;
    *(_QWORD *)(v5 + 16) = v13 | a2[2] & 1;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    if (*a2)
      *(_QWORD *)(*a2 + 16) = *(_QWORD *)(*a2 + 16) & 1 | v5;
    v14 = a2[1];
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v14 + 16) & 1 | v5;
    v15 = (unint64_t **)(a2[2] & 0xFFFFFFFFFFFFFFFELL);
    if (v15)
    {
      if (*v15 == a2)
        *v15 = (unint64_t *)v5;
      else
        v15[1] = (unint64_t *)v5;
      return a2;
    }
    else
    {
      *a1 = v5;
      return a2;
    }
  }
}

void WTF::MetaAllocator::freeFreeSpaceNode(int a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::insert(unint64_t *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;

  v2 = 1;
  *(_QWORD *)(a2 + 24) = 1;
  v3 = (uint64_t *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *result;
  v5 = result;
  if (*result)
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(v4 + 40);
    v8 = 16;
    if (v6 < v7)
      v8 = 8;
    v9 = *(_QWORD *)(v4 + v8);
    if (v9)
    {
      v10 = 128;
      do
      {
        if (!--v10)
        {
LABEL_62:
          __break(0xC471u);
          JUMPOUT(0x197AF031CLL);
        }
        v4 = v9;
        v7 = *(_QWORD *)(v9 + 40);
        if (v6 >= v7)
          v11 = 16;
        else
          v11 = 8;
        v9 = *(_QWORD *)(v4 + v11);
      }
      while (v9);
    }
    v2 = v4 | 1;
    v12 = v6 >= v7;
    v5 = (unint64_t *)(v4 + 16);
    v13 = (unint64_t *)(v4 + 8);
    if (!v12)
      v5 = v13;
  }
  *v5 = a2;
  *(_QWORD *)(a2 + 24) = v2;
  v14 = *result;
  if (*result == a2)
    goto LABEL_61;
  v15 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v16 = (unint64_t *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24);
  v17 = *v16;
  if ((*v16 & 1) == 0)
    goto LABEL_60;
  v18 = 129;
  while (1)
  {
    if (!--v18)
      goto LABEL_62;
    v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v20 = *(_QWORD *)(v19 + 8);
    if (v20 == v15)
    {
      v20 = *(_QWORD *)(v19 + 16);
      if (v20 && (*(_BYTE *)(v20 + 24) & 1) != 0)
      {
LABEL_26:
        *v16 = v19;
        *(_QWORD *)(v20 + 24) &= ~1uLL;
        v23 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFFFELL) + 24) & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v23 + 24) |= 1uLL;
        a2 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFFFELL) + 24) & 0xFFFFFFFFFFFFFFFELL;
        v14 = *result;
        if (a2 == *result)
          break;
        goto LABEL_57;
      }
      if (a2 == *(_QWORD *)(v15 + 16))
      {
        v39 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(v15 + 16) = v39;
        if (v39)
        {
          *(_QWORD *)(v39 + 24) = *(_QWORD *)(v39 + 24) & 1 | v15;
          v2 = *v3;
          v19 = *v16 & 0xFFFFFFFFFFFFFFFELL;
        }
        *v3 = v2 & 1 | v19;
        v40 = *v16;
        v41 = result;
        v42 = *v16 & 0xFFFFFFFFFFFFFFFELL;
        if (v42)
        {
          v44 = *(_QWORD *)(v42 + 8);
          v43 = (unint64_t *)(v42 + 8);
          if (v44 == v15)
            v41 = v43;
          else
            v41 = v43 + 1;
        }
        *v41 = a2;
        *(_QWORD *)(a2 + 8) = v15;
        *v16 = v40 & 1 | a2;
        v22 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v22 = v15;
        v15 = a2;
      }
      *(_QWORD *)(v22 + 24) &= ~1uLL;
      v45 = *(_QWORD *)((*(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL) + 24) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v45 + 24) |= 1uLL;
      v31 = *(_QWORD *)((*(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL) + 24) & 0xFFFFFFFFFFFFFFFELL;
      v32 = *(_QWORD *)(v31 + 8);
      v46 = *(_QWORD *)(v32 + 16);
      *(_QWORD *)(v31 + 8) = v46;
      if (v46)
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v46 + 24) & 1 | v31;
      *(_QWORD *)(v32 + 24) = *(_QWORD *)(v31 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v32 + 24) & 1;
      v34 = *(_QWORD *)(v31 + 24);
      v47 = result;
      v48 = v34 & 0xFFFFFFFFFFFFFFFELL;
      if ((v34 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v50 = *(_QWORD *)(v48 + 8);
        v49 = (unint64_t *)(v48 + 8);
        if (v50 == v31)
          v47 = v49;
        else
          v47 = v49 + 1;
      }
      *v47 = v32;
      *(_QWORD *)(v32 + 16) = v31;
    }
    else
    {
      if (v20 && (*(_BYTE *)(v20 + 24) & 1) != 0)
        goto LABEL_26;
      if (a2 == *(_QWORD *)(v15 + 8))
      {
        v24 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(v15 + 8) = v24;
        if (v24)
        {
          *(_QWORD *)(v24 + 24) = *(_QWORD *)(v24 + 24) & 1 | v15;
          v2 = *v3;
          v19 = *v16 & 0xFFFFFFFFFFFFFFFELL;
        }
        *v3 = v2 & 1 | v19;
        v25 = *v16;
        v26 = result;
        v27 = *v16 & 0xFFFFFFFFFFFFFFFELL;
        if (v27)
        {
          v29 = *(_QWORD *)(v27 + 8);
          v28 = (unint64_t *)(v27 + 8);
          if (v29 == v15)
            v26 = v28;
          else
            v26 = v28 + 1;
        }
        *v26 = a2;
        *(_QWORD *)(a2 + 16) = v15;
        *v16 = v25 & 1 | a2;
        v21 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v21 = v15;
        v15 = a2;
      }
      *(_QWORD *)(v21 + 24) &= ~1uLL;
      v30 = *(_QWORD *)((*(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL) + 24) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v30 + 24) |= 1uLL;
      v31 = *(_QWORD *)((*(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL) + 24) & 0xFFFFFFFFFFFFFFFELL;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = *(_QWORD *)(v32 + 8);
      *(_QWORD *)(v31 + 16) = v33;
      if (v33)
        *(_QWORD *)(v33 + 24) = *(_QWORD *)(v33 + 24) & 1 | v31;
      *(_QWORD *)(v32 + 24) = *(_QWORD *)(v31 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v32 + 24) & 1;
      v34 = *(_QWORD *)(v31 + 24);
      v35 = result;
      v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
      if ((v34 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v38 = *(_QWORD *)(v36 + 8);
        v37 = (unint64_t *)(v36 + 8);
        if (v38 == v31)
          v35 = v37;
        else
          v35 = v37 + 1;
      }
      *v35 = v32;
      *(_QWORD *)(v32 + 8) = v31;
    }
    *(_QWORD *)(v31 + 24) = v34 & 1 | v32;
    a2 = v15;
    v14 = *result;
    if (v15 == *result)
      break;
LABEL_57:
    v3 = (uint64_t *)(a2 + 24);
    v2 = *(_QWORD *)(a2 + 24);
    v15 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v16 = (unint64_t *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24);
    v17 = *v16;
    if ((*v16 & 1) == 0)
      goto LABEL_60;
  }
  v14 = a2;
LABEL_60:
  v2 = *(_QWORD *)(v14 + 24);
  a2 = v14;
LABEL_61:
  *(_QWORD *)(a2 + 24) = v2 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

_QWORD *WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::remove(unint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v5 = a2 + 1;
  v4 = (_QWORD *)a2[1];
  v6 = (unint64_t)a2;
  if (v4)
  {
    v6 = a2[2];
    if (!v6)
    {
      v6 = (unint64_t)a2;
      goto LABEL_11;
    }
    v7 = 129;
    while (*(_QWORD *)(v6 + 8))
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!--v7)
      {
        __break(0xC471u);
        JUMPOUT(0x197AF03A4);
      }
    }
  }
  v5 = (_QWORD *)(v6 + 8);
  v4 = *(_QWORD **)(v6 + 16);
  if (!v4)
  {
    v8 = *(_QWORD *)(v6 + 24);
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    v11 = a1;
    if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 0)
      goto LABEL_15;
    goto LABEL_12;
  }
LABEL_11:
  v10 = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFFELL;
  v4[3] = v10 | v4[3] & 1;
  v8 = *(_QWORD *)(v6 + 24);
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v11 = a1;
  if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_15;
LABEL_12:
  v13 = *(_QWORD **)(v9 + 8);
  v12 = (unint64_t *)(v9 + 8);
  if ((_QWORD *)v6 == v13)
    v11 = v12;
  else
    v11 = v12 + 1;
LABEL_15:
  *v11 = (unint64_t)v4;
  if ((_QWORD *)v6 == a2)
  {
    if ((v8 & 1) == 0)
      WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::removeFixup((uint64_t)a1, v4, v10);
    return a2;
  }
  else
  {
    if ((v8 & 1) != 0)
    {
      v14 = 1;
    }
    else
    {
      WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::removeFixup((uint64_t)a1, v4, v10);
      v14 = *(_QWORD *)(v6 + 24) & 1;
    }
    v17 = a2[2];
    v16 = a2[3];
    v18 = a2[1];
    *(_QWORD *)(v6 + 24) = v14 | v16 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v6 + 24) = v16 & 0xFFFFFFFFFFFFFFFELL | a2[3] & 1;
    *v5 = v18;
    *(_QWORD *)(v6 + 16) = v17;
    v19 = a2[1];
    if (v19)
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v19 + 24) & 1 | v6;
    v20 = a2[2];
    if (v20)
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v20 + 24) & 1 | v6;
    v21 = a2[3] & 0xFFFFFFFFFFFFFFFELL;
    if (v21)
    {
      if (*(_QWORD **)(v21 + 8) == a2)
        *(_QWORD *)(v21 + 8) = v6;
      else
        *(_QWORD *)(v21 + 16) = v6;
      return a2;
    }
    else
    {
      *a1 = v6;
      return a2;
    }
  }
}

unint64_t *WTF::MetaAllocator::release(WTF::MetaAllocator *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *result;

  v11 = a3[5];
  v10 = a3[6];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    WTF::MetaAllocator::decrementPageOccupancy(a1, a3[5], v10 - v11, a4, a5, a6, a7, a8);
    *((_QWORD *)a1 + 8) -= v12;
    WTF::MetaAllocator::addFreeSpace((unint64_t *)a1, v11, v12);
  }
  result = (unint64_t *)*((_QWORD *)a1 + 12);
  if (result)
    return WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::remove(result, a3);
  return result;
}

void WTF::MetaAllocator::decrementPageOccupancy(WTF::MetaAllocator *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v8 = *((_DWORD *)this + 7);
  v9 = a2 >> v8;
  v10 = a3 + a2 - 1;
  v11 = v10 >> v8;
  if (a2 >> v8 <= v10 >> v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = (uint64_t *)((char *)this + 56);
    while (1)
    {
      v16 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_13;
      v17 = *((_DWORD *)v16 - 2);
      v18 = (v9 + ~(v9 << 32)) ^ ((v9 + ~(v9 << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = v16[2 * v21];
      if (v22 == v9)
        break;
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = v16[2 * v21];
        ++v23;
        if (v22 == v9)
          goto LABEL_12;
      }
      v16 += 2 * *((unsigned int *)v16 - 1);
      v25 = v16[1] - 1;
      v16[1] = v25;
      if (!v25)
      {
LABEL_17:
        if (*v15)
        {
          if ((_QWORD *)(*v15 + 16 * *(unsigned int *)(*v15 - 4)) != v16)
          {
LABEL_21:
            *v16 = -1;
            ++*(_DWORD *)(*v15 - 16);
            if (*v15)
            {
              --*(_DWORD *)(*v15 - 12);
              v26 = *v15;
              if (!*v15)
                goto LABEL_3;
LABEL_25:
              v27 = 6 * *(_DWORD *)(v26 - 12);
              v28 = *(_DWORD *)(v26 - 4);
              if (v27 < v28 && v28 >= 9)
                WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,unsigned long>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,unsigned long,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(v15, v28 >> 1, 0, a4, a5, a6, a7, a8);
              goto LABEL_3;
            }
            MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
            v26 = *v15;
            if (*v15)
              goto LABEL_25;
          }
        }
        else if (v16)
        {
          goto LABEL_21;
        }
LABEL_3:
        *((_QWORD *)this + 10) -= *((_QWORD *)this + 2);
        if (!v14)
          v14 = v9;
        ++v13;
        goto LABEL_6;
      }
LABEL_14:
      if (v14)
      {
        (*(void (**)(WTF::MetaAllocator *, unint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v14 << *((_DWORD *)this + 7), v13);
        v14 = 0;
        v13 = 0;
      }
LABEL_6:
      if (++v9 > v11)
      {
        if (v14)
          (*(void (**)(WTF::MetaAllocator *, unint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v14 << *((_DWORD *)this + 7), v13);
        return;
      }
    }
LABEL_12:
    v16 += 2 * v21;
LABEL_13:
    v24 = v16[1] - 1;
    v16[1] = v24;
    if (!v24)
      goto LABEL_17;
    goto LABEL_14;
  }
}

void WTF::MetaAllocatorHandle::~MetaAllocatorHandle(WTF::MetaAllocatorHandle *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  char v13;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 4) + 88);
  v12 = v2;
  v13 = 1;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  (*(void (**)(_QWORD, unsigned __int8 **, WTF::MetaAllocatorHandle *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), &v12, this);
  if (!v13)
    return;
  v10 = v12;
  v11 = __ldxr(v12);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v12))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v4, v5, v6, v7, v8, v9);
}

{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  char v13;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 4) + 88);
  v12 = v2;
  v13 = 1;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  (*(void (**)(_QWORD, unsigned __int8 **, WTF::MetaAllocatorHandle *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), &v12, this);
  if (!v13)
    return;
  v10 = v12;
  v11 = __ldxr(v12);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v12))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v4, v5, v6, v7, v8, v9);
}

void WTF::MetaAllocatorHandle::shrink(WTF::MetaAllocatorHandle *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  WTF::MetaAllocator *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;

  v11 = *((_QWORD *)this + 5);
  v10 = *((_QWORD *)this + 6);
  v12 = (WTF::MetaAllocator *)*((_QWORD *)this + 4);
  v13 = (unsigned __int8 *)*((_QWORD *)v12 + 11);
  if (__ldaxr(v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
LABEL_5:
  v15 = *((_QWORD *)v12 + 1);
  if (~v15 <= a2)
  {
    __break(0xC471u);
    return;
  }
  v16 = (a2 + v15 - 1) & -v15;
  v17 = v10 - v11 - v16;
  if (v10 - v11 != v16)
  {
    v18 = *((_QWORD *)this + 5) + v16;
    v19 = (*((_QWORD *)v12 + 2) + v18 - 1) & -*((_QWORD *)v12 + 2);
    if (v17 + v18 > v19)
      WTF::MetaAllocator::decrementPageOccupancy(v12, v19, v17 + v18 - v19, a4, a5, a6, a7, a8);
    *((_QWORD *)v12 + 8) -= v17;
    WTF::MetaAllocator::addFreeSpace((unint64_t *)v12, v18, v17);
    *((_QWORD *)this + 6) = v18;
  }
  v20 = __ldxr(v13);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v13))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::MetaAllocatorHandle::dump(WTF::MetaAllocatorHandle *this, WTF::PrintStream *a2)
{
  const void *v3;
  const void *v4;
  WTF::PrintStream *v5;

  v3 = (const void *)*((_QWORD *)this + 5);
  v4 = (const void *)*((_QWORD *)this + 6);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%p", v3);
  WTF::PrintStream::printf(v5, "%s", "...");
  WTF::PrintStream::printf(v5, "%p", v4);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::MetaAllocator::MetaAllocator(uint64_t this, Lock *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;

  v4 = 0;
  *(_QWORD *)this = off_1E3571F98;
  *(_QWORD *)(this + 8) = a3;
  *(_QWORD *)(this + 16) = a4;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = a2;
  *(_QWORD *)(this + 96) = 0;
  do
  {
    v5 = v4 + 1;
    if (v4 > 0x1F)
      break;
    v6 = 1 << v4++;
  }
  while (v6 != a4);
  v7 = 0;
  *(_DWORD *)(this + 28) = v5 - 1;
  do
  {
    v8 = v7 + 1;
    if (v7 > 0x1F)
      break;
    v9 = 1 << v7++;
  }
  while (v9 != a3);
  *(_DWORD *)(this + 24) = v8 - 1;
  return this;
}

unint64_t *WTF::MetaAllocator::allocate@<X0>(unint64_t *result@<X0>, unint64_t a2@<X2>, unint64_t *a3@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  _QWORD **v11;
  unint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v113;
  __int128 v114;
  _QWORD *v115;
  unint64_t v116;

  if (!a2)
    goto LABEL_118;
  v4 = result;
  v5 = result[1];
  if (~v5 <= a2)
  {
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x197AF13B8);
  }
  v6 = (a2 + v5 - 1) & -(uint64_t)v5;
  v7 = (_QWORD *)result[4];
  if (!v7)
    goto LABEL_83;
  v8 = 0;
  v9 = 129;
  while (1)
  {
    if (!--v9)
      goto LABEL_139;
    v10 = v7[4] - v7[3];
    if (v10 == v6)
      break;
    v11 = (_QWORD **)(v7 + 1);
    if (v10 >= v6)
    {
      v8 = v7;
      v11 = (_QWORD **)v7;
    }
    v7 = *v11;
    if (!*v11)
    {
      v115 = v8;
      if (v8)
      {
        v10 = v8[4] - v8[3];
        v7 = v8;
        goto LABEL_13;
      }
LABEL_83:
      v76 = v6 - 1;
      *(_QWORD *)&v114 = (v6 - 1 + v4[2]) >> *((_DWORD *)v4 + 7);
      result = (unint64_t *)(*(uint64_t (**)(unint64_t *, __int128 *))(*v4 + 16))(v4, &v114);
      if (result)
      {
        v20 = (unint64_t)result;
        v85 = (_QWORD)v114 << *((_DWORD *)v4 + 7);
        v4[9] += v85;
        if (v85 > v6)
          WTF::MetaAllocator::addFreeSpace(v4, (uint64_t)result + v6, v85 - v6);
        goto LABEL_86;
      }
LABEL_118:
      *a3 = 0;
      return result;
    }
  }
  v115 = v7;
LABEL_13:
  if (v10 < v6)
  {
    __break(0xC471u);
    JUMPOUT(0x197AF13E4);
  }
  v12 = v7 + 3;
  WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::remove(result + 4, v7);
  if (v10 == v6)
  {
    v20 = *v12;
    v21 = (uint64_t *)(v4 + 5);
    v22 = v4[5];
    if (v22)
    {
      v23 = *(_DWORD *)(v22 - 8);
      v24 = (v20 + ~(v20 << 32)) ^ ((v20 + ~(v20 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(_QWORD *)(v22 + 16 * v27);
      if (v28 != v20)
      {
        v29 = 1;
        while (v28 != 1)
        {
          v27 = ((_DWORD)v27 + v29) & v23;
          v28 = *(_QWORD *)(v22 + 16 * v27);
          ++v29;
          if (v28 == v20)
            goto LABEL_35;
        }
        v27 = *(unsigned int *)(v22 - 4);
      }
LABEL_35:
      if (v27 != *(_DWORD *)(v22 - 4))
      {
        *(_QWORD *)(v22 + 16 * v27) = 2;
        ++*(_DWORD *)(*v21 - 16);
        v49 = *v21;
        v50 = *v21 ? *(_DWORD *)(v49 - 12) - 1 : -1;
        *(_DWORD *)(v49 - 12) = v50;
        v51 = *v21;
        if (*v21)
        {
          v52 = 6 * *(_DWORD *)(v51 - 12);
          v53 = *(_DWORD *)(v51 - 4);
          if (v52 < v53 && v53 >= 9)
            WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(v21, v53 >> 1, 0);
        }
      }
    }
    v55 = (uint64_t *)(v4 + 6);
    v56 = v4[6];
    if (v56)
    {
      v57 = v7[4];
      v58 = *(_DWORD *)(v56 - 8);
      v59 = (~(v57 << 32) + v57) ^ ((unint64_t)(~(v57 << 32) + v57) >> 22);
      v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
      v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
      v62 = v58 & ((v61 >> 31) ^ v61);
      v63 = *(_QWORD *)(v56 + 16 * v62);
      if (v63 != v57)
      {
        v64 = 1;
        while (v63 != 1)
        {
          v62 = ((_DWORD)v62 + v64) & v58;
          v63 = *(_QWORD *)(v56 + 16 * v62);
          ++v64;
          if (v63 == v57)
            goto LABEL_53;
        }
        v62 = *(unsigned int *)(v56 - 4);
      }
LABEL_53:
      if (v62 != *(_DWORD *)(v56 - 4))
      {
        *(_QWORD *)(v56 + 16 * v62) = 2;
        ++*(_DWORD *)(*v55 - 16);
        v65 = *v55;
        v66 = *v55 ? *(_DWORD *)(v65 - 12) - 1 : -1;
        *(_DWORD *)(v65 - 12) = v66;
        v67 = *v55;
        if (*v55)
        {
          v68 = 6 * *(_DWORD *)(v67 - 12);
          v69 = *(_DWORD *)(v67 - 4);
          if (v68 < v69 && v69 >= 9)
            WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(v55, v69 >> 1, 0);
        }
      }
    }
    WTF::fastFree((unint64_t)v7, v13, v14, v15, v16, v17, v18, v19);
    if (!v20)
      goto LABEL_83;
  }
  else
  {
    v20 = *v12;
    if (((v6 + *v12 - 1) >> *((_DWORD *)v4 + 7)) - (*v12 >> *((_DWORD *)v4 + 7)) + 1 <= ((v10 + *v12 - 1) >> *((_DWORD *)v4 + 7))
                                                                                       - ((v10 + *v12 - v6) >> *((_DWORD *)v4 + 7))
                                                                                       + 1)
    {
      v116 = *v12;
      v41 = (uint64_t *)(v4 + 5);
      v40 = v4[5];
      if (v40)
      {
        v42 = *(_DWORD *)(v40 - 8);
        v43 = (~(v20 << 32) + v20) ^ ((~(v20 << 32) + v20) >> 22);
        v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
        v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
        v46 = v42 & ((v45 >> 31) ^ v45);
        v47 = *(_QWORD *)(v40 + 16 * v46);
        if (v47 != v20)
        {
          v48 = 1;
          while (v47 != 1)
          {
            v46 = ((_DWORD)v46 + v48) & v42;
            v47 = *(_QWORD *)(v40 + 16 * v46);
            ++v48;
            if (v47 == v20)
              goto LABEL_71;
          }
          v46 = *(unsigned int *)(v40 - 4);
        }
LABEL_71:
        if (v46 != *(_DWORD *)(v40 - 4))
        {
          *(_QWORD *)(v40 + 16 * v46) = 2;
          ++*(_DWORD *)(*v41 - 16);
          v79 = *v41;
          v80 = *v41 ? *(_DWORD *)(v79 - 12) - 1 : -1;
          *(_DWORD *)(v79 - 12) = v80;
          v109 = *v41;
          if (*v41)
          {
            v110 = 6 * *(_DWORD *)(v109 - 12);
            v111 = *(_DWORD *)(v109 - 4);
            if (v110 < v111 && v111 >= 9)
              WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash((uint64_t *)v4 + 5, v111 >> 1, 0);
          }
        }
      }
      v113 = *v12 + v6;
      *v12 = v113;
      if (v20 >= v113 || v113 >= v7[4])
      {
        __break(0xC471u);
        JUMPOUT(0x197AF1404);
      }
      WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(v4 + 4, (unint64_t)v7);
      WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::add<WTF::MetaAllocator::FreeSpaceNode *&>(&v114, (uint64_t *)v4 + 5, v7 + 3, &v115);
      if (!v20)
        goto LABEL_83;
    }
    else
    {
      v30 = v7[4];
      v20 = v30 - v6;
      v116 = v30 - v6;
      v32 = (uint64_t *)(v4 + 6);
      v31 = v4[6];
      if (v31)
      {
        v33 = *(_DWORD *)(v31 - 8);
        v34 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
        v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
        v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
        v37 = v33 & ((v36 >> 31) ^ v36);
        v38 = *(_QWORD *)(v31 + 16 * v37);
        if (v38 != v30)
        {
          v39 = 1;
          while (v38 != 1)
          {
            v37 = ((_DWORD)v37 + v39) & v33;
            v38 = *(_QWORD *)(v31 + 16 * v37);
            ++v39;
            if (v38 == v30)
              goto LABEL_67;
          }
          v37 = *(unsigned int *)(v31 - 4);
        }
LABEL_67:
        if (v37 != *(_DWORD *)(v31 - 4))
        {
          *(_QWORD *)(v31 + 16 * v37) = 2;
          ++*(_DWORD *)(*v32 - 16);
          v77 = *v32;
          v78 = *v32 ? *(_DWORD *)(v77 - 12) - 1 : -1;
          *(_DWORD *)(v77 - 12) = v78;
          v81 = *v32;
          if (*v32)
          {
            v82 = 6 * *(_DWORD *)(v81 - 12);
            v83 = *(_DWORD *)(v81 - 4);
            if (v82 < v83 && v83 >= 9)
              WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash((uint64_t *)v4 + 6, v83 >> 1, 0);
          }
        }
      }
      v7[4] = v20;
      WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(v4 + 4, (unint64_t)v7);
      WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::add<WTF::MetaAllocator::FreeSpaceNode *&>(&v114, (uint64_t *)v4 + 6, (uint64_t *)&v116, &v115);
      if (!v20)
        goto LABEL_83;
    }
  }
  v76 = v6 - 1;
LABEL_86:
  v86 = *((_DWORD *)v4 + 7);
  v87 = v20 >> v86;
  v88 = (v76 + v20) >> v86;
  if (v20 >> v86 > v88)
    goto LABEL_121;
  v89 = 0;
  v90 = 0;
  v91 = (uint64_t *)(v4 + 7);
  do
  {
    v93 = *v91;
    if (*v91
      || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,unsigned long>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,unsigned long,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash((uint64_t *)v4 + 7, 8uLL, 0, v71, v72, v73, v74, v75), (v93 = *v91) != 0))
    {
      v94 = *(_DWORD *)(v93 - 8);
    }
    else
    {
      v94 = 0;
    }
    v95 = (v87 + ~(v87 << 32)) ^ ((v87 + ~(v87 << 32)) >> 22);
    v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
    v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
    v98 = v94 & ((v97 >> 31) ^ v97);
    v99 = (unint64_t *)(v93 + 16 * v98);
    v100 = *v99;
    if (!*v99)
    {
LABEL_105:
      v103 = 1;
      *v99 = v87;
      v99[1] = 1;
      v104 = *v91;
      if (*v91)
        v103 = *(_DWORD *)(v104 - 12) + 1;
      *(_DWORD *)(v104 - 12) = v103;
      v105 = *v91;
      if (*v91)
      {
        v106 = (*(_DWORD *)(v105 - 16) + *(_DWORD *)(v105 - 12));
        v107 = *(unsigned int *)(v105 - 4);
        if (v107 <= 0x400)
          goto LABEL_109;
      }
      else
      {
        v106 = MEMORY[0xFFFFFFFFFFFFFFF0];
        v107 = MEMORY[0xFFFFFFFFFFFFFFFC];
        if (MEMORY[0xFFFFFFFFFFFFFFFC] <= 0x400u)
        {
LABEL_109:
          if (3 * v107 > 4 * v106)
            goto LABEL_90;
          if (!(_DWORD)v107)
          {
            v92 = 8;
            goto LABEL_89;
          }
LABEL_88:
          v92 = ((_DWORD)v107 << (6 * *(_DWORD *)(v105 - 12) >= (2 * v107)));
LABEL_89:
          WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,unsigned long>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,unsigned long,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash((uint64_t *)v4 + 7, v92, (uint64_t)v99, v71, v72, v73, v74, v75);
LABEL_90:
          v4[10] += v4[2];
          if (!v90)
            v90 = v87;
          ++v89;
          goto LABEL_93;
        }
      }
      if (v107 > 2 * v106)
        goto LABEL_90;
      goto LABEL_88;
    }
    v101 = 0;
    v102 = 1;
    while (v100 != v87)
    {
      if (v100 == -1)
        v101 = v99;
      v98 = (v98 + v102) & v94;
      v99 = (unint64_t *)(v93 + 16 * v98);
      v100 = *v99;
      ++v102;
      if (!*v99)
      {
        if (v101)
        {
          *v101 = 0;
          v101[1] = 0;
          --*(_DWORD *)(*v91 - 16);
          v99 = v101;
        }
        goto LABEL_105;
      }
    }
    ++v99[1];
    if (v90)
    {
      (*(void (**)(unint64_t *, unint64_t, uint64_t))(*v4 + 24))(v4, v90 << *((_DWORD *)v4 + 7), v89);
      v90 = 0;
      v89 = 0;
    }
LABEL_93:
    ++v87;
  }
  while (v87 <= v88);
  if (v90)
    (*(void (**)(unint64_t *, unint64_t, uint64_t))(*v4 + 24))(v4, v90 << *((_DWORD *)v4 + 7), v89);
LABEL_121:
  v4[8] += v6;
  v108 = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)v108 = 1;
  *(_QWORD *)(v108 + 32) = v4;
  *(_QWORD *)(v108 + 40) = v20;
  *(_QWORD *)(v108 + 48) = v20 + v6;
  result = (unint64_t *)v4[12];
  if (result)
    result = WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::insert(result, v108);
  *a3 = v108;
  return result;
}

_OWORD *WTF::MetaAllocator::addFreeSpace(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v91;
  unsigned int v92;
  unsigned int v93;
  __int128 v96;
  unint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;

  v6 = a2 + a3;
  v99 = a2 + a3;
  v100 = a2;
  v8 = (uint64_t *)(a1 + 6);
  v7 = a1[6];
  if (v7)
  {
    v9 = *(_DWORD *)(v7 - 8);
    v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v7 + 16 * v13);
    if (v14 == a2)
    {
LABEL_6:
      v16 = v7 + 16 * v13;
      v18 = (uint64_t *)(a1 + 5);
      v17 = a1[5];
      if (!v17)
        goto LABEL_16;
    }
    else
    {
      v15 = 1;
      while (v14 != 1)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v7 + 16 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_6;
      }
      v16 = v7 + 16 * *(unsigned int *)(v7 - 4);
      v18 = (uint64_t *)(a1 + 5);
      v17 = a1[5];
      if (!v17)
      {
LABEL_16:
        v26 = 0;
        if (!v7)
          goto LABEL_18;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v16 = 0;
    v18 = (uint64_t *)(a1 + 5);
    v17 = a1[5];
    if (!v17)
      goto LABEL_16;
  }
  v19 = *(_DWORD *)(v17 - 8);
  v20 = (~(v6 << 32) + v6) ^ ((~(v6 << 32) + v6) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(_QWORD *)(v17 + 16 * v23);
  if (v24 == v6)
  {
LABEL_13:
    v26 = (uint64_t *)(v17 + 16 * v23);
    if (!v7)
      goto LABEL_18;
LABEL_17:
    v7 += 16 * *(unsigned int *)(v7 - 4);
    goto LABEL_18;
  }
  v25 = 1;
  while (v24 != 1)
  {
    v23 = ((_DWORD)v23 + v25) & v19;
    v24 = *(_QWORD *)(v17 + 16 * v23);
    ++v25;
    if (v24 == v6)
      goto LABEL_13;
  }
  v26 = (uint64_t *)(v17 + 16 * *(unsigned int *)(v17 - 4));
  if (v7)
    goto LABEL_17;
LABEL_18:
  if (v16 == v7)
  {
    if (v17)
    {
      if (v26 != (uint64_t *)(v17 + 16 * *(unsigned int *)(v17 - 4)))
      {
LABEL_28:
        v39 = *v26;
        v38 = (unint64_t *)v26[1];
        v98 = v38;
        WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::remove(a1 + 4, v38);
        v40 = a1[5];
        if (!v40)
          goto LABEL_104;
        v41 = *(_DWORD *)(v40 - 8);
        v42 = (v39 + ~(v39 << 32)) ^ ((unint64_t)(v39 + ~(v39 << 32)) >> 22);
        v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
        v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
        v45 = v41 & ((v44 >> 31) ^ v44);
        v46 = *(_QWORD *)(v40 + 16 * v45);
        if (v46 != v39)
        {
          v47 = 1;
          while (v46 != 1)
          {
            v45 = ((_DWORD)v45 + v47) & v41;
            v46 = *(_QWORD *)(v40 + 16 * v45);
            ++v47;
            if (v46 == v39)
              goto LABEL_33;
          }
          goto LABEL_104;
        }
LABEL_33:
        if (v45 == *(_DWORD *)(v40 - 4))
        {
LABEL_104:
          v38[3] = a2;
          WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(a1 + 4, (unint64_t)v38);
          v73 = &v100;
          v91 = v18;
          return WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::add<WTF::MetaAllocator::FreeSpaceNode *&>(&v96, v91, v73, &v98);
        }
        *(_QWORD *)(v40 + 16 * v45) = 2;
        ++*(_DWORD *)(*v18 - 16);
        if (*v18)
        {
          --*(_DWORD *)(*v18 - 12);
          v75 = *v18;
          if (!*v18)
            goto LABEL_104;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          v75 = *v18;
          if (!*v18)
            goto LABEL_104;
        }
        v92 = 6 * *(_DWORD *)(v75 - 12);
        v93 = *(_DWORD *)(v75 - 4);
        if (v92 < v93 && v93 >= 9)
          WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(v18, v93 >> 1, 0);
        goto LABEL_104;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    v48 = (unint64_t *)WTF::fastMalloc((WTF *)0x28);
    *v48 = 0;
    v48[1] = 0;
    v98 = v48;
    v48[2] = 0;
    v48[3] = a2;
    v48[4] = v6;
    WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(a1 + 4, (unint64_t)v48);
    WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::add<WTF::MetaAllocator::FreeSpaceNode *&>(&v96, v18, &v100, &v98);
    goto LABEL_61;
  }
  v27 = *(unint64_t **)(v16 + 8);
  v98 = v27;
  v28 = v27[4];
  v29 = a1 + 4;
  WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::remove(a1 + 4, v27);
  v30 = a1[6];
  if (v30)
  {
    v31 = *(_DWORD *)(v30 - 8);
    v32 = (v28 + ~(v28 << 32)) ^ ((v28 + ~(v28 << 32)) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = *(_QWORD *)(v30 + 16 * v35);
    if (v36 != v28)
    {
      v37 = 1;
      while (v36 != 1)
      {
        v35 = ((_DWORD)v35 + v37) & v31;
        v36 = *(_QWORD *)(v30 + 16 * v35);
        ++v37;
        if (v36 == v28)
          goto LABEL_24;
      }
      goto LABEL_50;
    }
LABEL_24:
    if (v35 != *(_DWORD *)(v30 - 4))
    {
      *(_QWORD *)(v30 + 16 * v35) = 2;
      ++*(_DWORD *)(*v8 - 16);
      if (*v8)
      {
        --*(_DWORD *)(*v8 - 12);
        v49 = *v8;
        if (!*v8)
          goto LABEL_50;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        v49 = *v8;
        if (!*v8)
          goto LABEL_50;
      }
      v50 = 6 * *(_DWORD *)(v49 - 12);
      v51 = *(_DWORD *)(v49 - 4);
      if (v50 < v51 && v51 >= 9)
        WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(v8, v51 >> 1, 0);
    }
  }
LABEL_50:
  v53 = *v18;
  if (*v18)
    v53 += 16 * *(unsigned int *)(v53 - 4);
  if (v26 != (uint64_t *)v53)
  {
    v55 = *v26;
    v54 = (unint64_t *)v26[1];
    v57 = v54[3];
    v56 = v54[4];
    v97 = v56;
    WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::remove(v29, v54);
    v65 = *v18;
    if (!*v18)
      goto LABEL_77;
    v66 = *(_DWORD *)(v65 - 8);
    v67 = (v55 + ~(v55 << 32)) ^ ((unint64_t)(v55 + ~(v55 << 32)) >> 22);
    v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
    v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
    v70 = v66 & ((v69 >> 31) ^ v69);
    v71 = *(_QWORD *)(v65 + 16 * v70);
    if (v71 != v55)
    {
      v72 = 1;
      while (v71 != 1)
      {
        v70 = ((_DWORD)v70 + v72) & v66;
        v71 = *(_QWORD *)(v65 + 16 * v70);
        ++v72;
        if (v71 == v55)
          goto LABEL_58;
      }
      goto LABEL_77;
    }
LABEL_58:
    if (v70 == *(_DWORD *)(v65 - 4))
    {
LABEL_77:
      v79 = *v8;
      if (!*v8)
        goto LABEL_95;
      v80 = *(_DWORD *)(v79 - 8);
      v81 = (~(v56 << 32) + v56) ^ ((~(v56 << 32) + v56) >> 22);
      v82 = 9 * ((v81 + ~(v81 << 13)) ^ ((v81 + ~(v81 << 13)) >> 8));
      v83 = (v82 ^ (v82 >> 15)) + ~((v82 ^ (v82 >> 15)) << 27);
      v84 = v80 & ((v83 >> 31) ^ v83);
      v85 = *(_QWORD *)(v79 + 16 * v84);
      if (v85 != v56)
      {
        v86 = 1;
        while (v85 != 1)
        {
          v84 = ((_DWORD)v84 + v86) & v80;
          v85 = *(_QWORD *)(v79 + 16 * v84);
          ++v86;
          if (v85 == v56)
            goto LABEL_82;
        }
        goto LABEL_95;
      }
LABEL_82:
      if (v84 == *(_DWORD *)(v79 - 4))
      {
LABEL_95:
        WTF::fastFree((unint64_t)v54, v58, v59, v60, v61, v62, v63, v64);
        v27[4] += v56 + a3 - v57;
        WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(v29, (unint64_t)v27);
        v73 = (uint64_t *)&v97;
        goto LABEL_96;
      }
      *(_QWORD *)(v79 + 16 * v84) = 2;
      ++*(_DWORD *)(*v8 - 16);
      if (*v8)
      {
        --*(_DWORD *)(*v8 - 12);
        v87 = *v8;
        if (!*v8)
          goto LABEL_95;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        v87 = *v8;
        if (!*v8)
          goto LABEL_95;
      }
      v88 = 6 * *(_DWORD *)(v87 - 12);
      v89 = *(_DWORD *)(v87 - 4);
      if (v88 < v89 && v89 >= 9)
        WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(v8, v89 >> 1, 0);
      goto LABEL_95;
    }
    *(_QWORD *)(v65 + 16 * v70) = 2;
    ++*(_DWORD *)(*v18 - 16);
    if (*v18)
    {
      --*(_DWORD *)(*v18 - 12);
      v74 = *v18;
      if (!*v18)
        goto LABEL_77;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      v74 = *v18;
      if (!*v18)
        goto LABEL_77;
    }
    v76 = 6 * *(_DWORD *)(v74 - 12);
    v77 = *(_DWORD *)(v74 - 4);
    if (v76 < v77 && v77 >= 9)
      WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(v18, v77 >> 1, 0);
    goto LABEL_77;
  }
  v27[4] += a3;
  WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(a1 + 4, (unint64_t)v27);
LABEL_61:
  v73 = &v99;
LABEL_96:
  v91 = v8;
  return WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::add<WTF::MetaAllocator::FreeSpaceNode *&>(&v96, v91, v73, &v98);
}

__n128 WTF::MetaAllocator::currentStatistics@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  a2[1].n128_u64[0] = a1[5].n128_u64[0];
  return result;
}

unint64_t *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::insert(unint64_t *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  v2 = 1;
  *(_QWORD *)(a2 + 16) = 1;
  v3 = (uint64_t *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *result;
  v5 = result;
  if (*result)
  {
    v6 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
    v5 = (unint64_t *)(v4 + 8);
    if (v6 < *(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24))
      v5 = (unint64_t *)*result;
    v7 = *(_QWORD **)(v4 + 8 * (v6 >= *(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)));
    if (v7)
    {
      v8 = 128;
      do
      {
        if (!--v8)
        {
LABEL_57:
          __break(0xC471u);
          JUMPOUT(0x197AF1F20);
        }
        v4 = (unint64_t)v7;
        v9 = v7[4] - v7[3];
        v10 = v7 + 1;
        if (v6 >= v9)
          v5 = v10;
        else
          v5 = (unint64_t *)v4;
        v7 = (_QWORD *)*v5;
      }
      while (*v5);
    }
    v2 = v4 | 1;
  }
  *v5 = a2;
  *(_QWORD *)(a2 + 16) = v2;
  v11 = *result;
  if (*result == a2)
    goto LABEL_56;
  v12 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v13 = (unint64_t *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16);
  v14 = *v13;
  if ((*v13 & 1) == 0)
    goto LABEL_55;
  v15 = 129;
  while (1)
  {
    if (!--v15)
      goto LABEL_57;
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    v17 = *(_QWORD *)v16;
    if (*(_QWORD *)v16 == v12)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17 && (*(_BYTE *)(v17 + 16) & 1) != 0)
      {
LABEL_25:
        *v13 = v16;
        *(_QWORD *)(v17 + 16) &= ~1uLL;
        v20 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v20 + 16) |= 1uLL;
        a2 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
        v11 = *result;
        if (a2 == *result)
          break;
        goto LABEL_52;
      }
      if (a2 == *(_QWORD *)(v12 + 8))
      {
        v32 = *(_QWORD *)a2;
        *(_QWORD *)(v12 + 8) = *(_QWORD *)a2;
        if (v32)
        {
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v32 + 16) & 1 | v12;
          v2 = *v3;
          v16 = *v13 & 0xFFFFFFFFFFFFFFFELL;
        }
        *v3 = v2 & 1 | v16;
        v33 = *v13;
        v34 = result;
        v35 = (_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFFELL);
        if (v35)
        {
          v34 = v35 + 1;
          if (*v35 == v12)
            v34 = (_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFFELL);
        }
        *v34 = a2;
        *(_QWORD *)a2 = v12;
        *v13 = v33 & 1 | a2;
        v19 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v19 = v12;
        v12 = a2;
      }
      *(_QWORD *)(v19 + 16) &= ~1uLL;
      v36 = *(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v36 + 16) |= 1uLL;
      v26 = *(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(unint64_t **)v26;
      v37 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      *(_QWORD *)v26 = v37;
      if (v37)
        *(_QWORD *)(v37 + 16) = *(_QWORD *)(v37 + 16) & 1 | v26;
      v27[2] = *(_QWORD *)(v26 + 16) & 0xFFFFFFFFFFFFFFFELL | v27[2] & 1;
      v29 = *(_QWORD *)(v26 + 16);
      v38 = result;
      v39 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
      if ((v29 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v38 = v39 + 1;
        if (*v39 == v26)
          v38 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
      }
      *v38 = v27;
      v27[1] = v26;
    }
    else
    {
      if (v17 && (*(_BYTE *)(v17 + 16) & 1) != 0)
        goto LABEL_25;
      if (a2 == *(_QWORD *)v12)
      {
        v21 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)v12 = v21;
        if (v21)
        {
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v21 + 16) & 1 | v12;
          v2 = *v3;
          v16 = *v13 & 0xFFFFFFFFFFFFFFFELL;
        }
        *v3 = v2 & 1 | v16;
        v22 = *v13;
        v23 = result;
        v24 = (_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFFELL);
        if (v24)
        {
          v23 = v24 + 1;
          if (*v24 == v12)
            v23 = (_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFFELL);
        }
        *v23 = a2;
        *(_QWORD *)(a2 + 8) = v12;
        *v13 = v22 & 1 | a2;
        v18 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v18 = v12;
        v12 = a2;
      }
      *(_QWORD *)(v18 + 16) &= ~1uLL;
      v25 = *(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v25 + 16) |= 1uLL;
      v26 = *(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(unint64_t **)(v26 + 8);
      v28 = *v27;
      *(_QWORD *)(v26 + 8) = *v27;
      if (v28)
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v28 + 16) & 1 | v26;
      v27[2] = *(_QWORD *)(v26 + 16) & 0xFFFFFFFFFFFFFFFELL | v27[2] & 1;
      v29 = *(_QWORD *)(v26 + 16);
      v30 = result;
      v31 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
      if ((v29 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v30 = v31 + 1;
        if (*v31 == v26)
          v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
      }
      *v30 = v27;
      *v27 = v26;
    }
    *(_QWORD *)(v26 + 16) = v29 & 1 | (unint64_t)v27;
    a2 = v12;
    v11 = *result;
    if (v12 == *result)
      break;
LABEL_52:
    v3 = (uint64_t *)(a2 + 16);
    v2 = *(_QWORD *)(a2 + 16);
    v12 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v13 = (unint64_t *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16);
    v14 = *v13;
    if ((*v13 & 1) == 0)
      goto LABEL_55;
  }
  v11 = a2;
LABEL_55:
  v2 = *(_QWORD *)(v11 + 16);
  a2 = v11;
LABEL_56:
  *(_QWORD *)(a2 + 16) = v2 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

_OWORD *WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::add<WTF::MetaAllocator::FreeSpaceNode *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16 == 1)
  {
LABEL_12:
    *v16 = v11;
    v16[1] = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v20 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *a2;
      if (*a2)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v20 + 16 * v22;
        *((_BYTE *)v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(a2, 8u, v16);
        v16 = result;
        v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(a2, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      v16 = result;
      v20 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == 2)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (_QWORD *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (*v16 == 1)
    {
      if (v18)
      {
        *v18 = 1;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v8 + 16 * v23;
  *((_BYTE *)v7 + 16) = 0;
  return result;
}

void WTF::MetaAllocator::addFreshFreeSpace(WTF::MetaAllocator *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (byte_1ECF4C090)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x197AF222CLL);
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  if (__ldaxr(v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v6);
LABEL_6:
  *((_QWORD *)this + 9) += a3;
  WTF::MetaAllocator::addFreeSpace((unint64_t *)this, a2, a3);
  v14 = __ldxr(v6);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v6))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v6, 0, v8, v9, v10, v11, v12, v13);
  if (byte_1ECF4C090)
    goto LABEL_12;
}

BOOL WTF::MetaAllocator::isInAllocatedMemory(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL8 result;
  int v12;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = a3 >> *(_DWORD *)(a1 + 28);
  v5 = *(_DWORD *)(v3 - 8);
  v6 = (v4 + ~(v4 << 32)) ^ ((v4 + ~(v4 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v3 + 16 * v9);
  if (v10 == v4)
    return 1;
  v12 = 1;
  do
  {
    result = v10 != 0;
    if (!v10)
      break;
    v9 = (v9 + v12) & v5;
    v10 = *(_QWORD *)(v3 + 16 * v9);
    ++v12;
  }
  while (v10 != v4);
  return result;
}

uint64_t WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode,unsigned long>::removeFixup(uint64_t result, unint64_t a2, unint64_t a3)
{
  int v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  if (*(_QWORD *)result == a2)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(a2 + 16);
LABEL_69:
      *(_QWORD *)(a2 + 16) = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  else
  {
    v3 = 129;
    while (1)
    {
      if (a2)
      {
        v4 = *(_QWORD *)(a2 + 16);
        if ((v4 & 1) != 0)
          goto LABEL_69;
      }
      if (!--v3)
        break;
      v5 = *(unint64_t **)a3;
      if (a2 == *(_QWORD *)a3)
      {
        v5 = *(unint64_t **)(a3 + 8);
        v15 = v5[2];
        if ((v15 & 1) != 0)
        {
          v5[2] = v15 & 0xFFFFFFFFFFFFFFFELL;
          v16 = *(_QWORD *)(a3 + 16) | 1;
          v17 = *v5;
          *(_QWORD *)(a3 + 8) = *v5;
          *(_QWORD *)(a3 + 16) = v16;
          if (v17)
          {
            *(_QWORD *)(v17 + 16) = *(_QWORD *)(v17 + 16) & 1 | a3;
            v16 = *(_QWORD *)(a3 + 16);
          }
          v5[2] = v16 & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
          v18 = *(_QWORD *)(a3 + 16);
          v19 = (_QWORD *)result;
          v20 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
          if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v19 = v20 + 1;
            if (*v20 == a3)
              v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
          }
          *v19 = v5;
          *v5 = a3;
          *(_QWORD *)(a3 + 16) = v18 & 1 | (unint64_t)v5;
          v5 = *(unint64_t **)(a3 + 8);
        }
        v21 = *v5;
        if (*v5)
        {
          v22 = *(_QWORD *)(v21 + 16);
          if ((v22 & 1) != 0)
          {
            v23 = v5[1];
            if (!v23)
              goto LABEL_52;
            if ((*(_QWORD *)(v23 + 16) & 1) == 0)
            {
              v22 = *(_QWORD *)(v21 + 16);
LABEL_52:
              *(_QWORD *)(v21 + 16) = v22 & 0xFFFFFFFFFFFFFFFELL;
              v33 = v5[2] | 1;
              v5[2] = v33;
              v34 = *(_QWORD *)(v21 + 8);
              *v5 = v34;
              if (v34)
              {
                *(_QWORD *)(v34 + 16) = *(_QWORD *)(v34 + 16) & 1 | (unint64_t)v5;
                v33 = v5[2];
              }
              *(_QWORD *)(v21 + 16) = v33 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v21 + 16) & 1;
              v35 = v5[2];
              v36 = (_QWORD *)result;
              v37 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
              if ((v35 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v36 = v37 + 1;
                if ((unint64_t *)*v37 == v5)
                  v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
              }
              *v36 = v21;
              *(_QWORD *)(v21 + 8) = v5;
              v5[2] = v35 & 1 | v21;
              v5 = *(unint64_t **)(a3 + 8);
              v23 = v5[1];
            }
LABEL_58:
            v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a3 + 16) & 1;
            *(_QWORD *)(a3 + 16) &= ~1uLL;
            if (v23)
              *(_QWORD *)(v23 + 16) &= ~1uLL;
            v38 = *v5;
            *(_QWORD *)(a3 + 8) = *v5;
            if (v38)
              *(_QWORD *)(v38 + 16) = *(_QWORD *)(v38 + 16) & 1 | a3;
            v5[2] = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
            v30 = *(_QWORD *)(a3 + 16);
            v39 = (_QWORD *)result;
            v40 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
            if ((v30 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v39 = v40 + 1;
              if (*v40 == a3)
                v39 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
            }
            *v39 = v5;
            *v5 = a3;
LABEL_66:
            *(_QWORD *)(a3 + 16) = v30 & 1 | (unint64_t)v5;
            a2 = *(_QWORD *)result;
            v4 = *(_QWORD *)(*(_QWORD *)result + 16);
            goto LABEL_69;
          }
        }
        v23 = v5[1];
        if (v23 && (*(_QWORD *)(v23 + 16) & 1) != 0)
          goto LABEL_58;
      }
      else
      {
        v6 = v5[2];
        if ((v6 & 1) != 0)
        {
          v5[2] = v6 & 0xFFFFFFFFFFFFFFFELL;
          v7 = *(_QWORD *)(a3 + 16) | 1;
          *(_QWORD *)(a3 + 16) = v7;
          v8 = v5[1];
          *(_QWORD *)a3 = v8;
          if (v8)
          {
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 16) & 1 | a3;
            v7 = *(_QWORD *)(a3 + 16);
          }
          v5[2] = v7 & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
          v9 = *(_QWORD *)(a3 + 16);
          v10 = (_QWORD *)result;
          v11 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
          if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v10 = v11 + 1;
            if (*v11 == a3)
              v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
          }
          *v10 = v5;
          v5[1] = a3;
          *(_QWORD *)(a3 + 16) = v9 & 1 | (unint64_t)v5;
          v5 = *(unint64_t **)a3;
        }
        v12 = v5[1];
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 16);
          if ((v13 & 1) != 0)
          {
            v14 = *v5;
            if (!*v5)
              goto LABEL_35;
            if ((*(_QWORD *)(v14 + 16) & 1) == 0)
            {
              v13 = *(_QWORD *)(v12 + 16);
LABEL_35:
              *(_QWORD *)(v12 + 16) = v13 & 0xFFFFFFFFFFFFFFFELL;
              v24 = v5[2] | 1;
              v25 = *(_QWORD *)v12;
              v5[1] = *(_QWORD *)v12;
              v5[2] = v24;
              if (v25)
              {
                *(_QWORD *)(v25 + 16) = *(_QWORD *)(v25 + 16) & 1 | (unint64_t)v5;
                v24 = v5[2];
              }
              *(_QWORD *)(v12 + 16) = v24 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v12 + 16) & 1;
              v26 = v5[2];
              v27 = (_QWORD *)result;
              v28 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL);
              if ((v26 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v27 = v28 + 1;
                if ((unint64_t *)*v28 == v5)
                  v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL);
              }
              *v27 = v12;
              *(_QWORD *)v12 = v5;
              v5[2] = v26 & 1 | v12;
              v5 = *(unint64_t **)a3;
              v14 = **(_QWORD **)a3;
            }
LABEL_41:
            v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a3 + 16) & 1;
            *(_QWORD *)(a3 + 16) &= ~1uLL;
            if (v14)
              *(_QWORD *)(v14 + 16) &= ~1uLL;
            v29 = v5[1];
            *(_QWORD *)a3 = v29;
            if (v29)
              *(_QWORD *)(v29 + 16) = *(_QWORD *)(v29 + 16) & 1 | a3;
            v5[2] = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
            v30 = *(_QWORD *)(a3 + 16);
            v31 = (_QWORD *)result;
            v32 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
            if ((v30 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v31 = v32 + 1;
              if (*v32 == a3)
                v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
            }
            *v31 = v5;
            v5[1] = a3;
            goto LABEL_66;
          }
        }
        v14 = *v5;
        if (*v5 && (*(_QWORD *)(v14 + 16) & 1) != 0)
          goto LABEL_41;
      }
      v5[2] |= 1uLL;
      a2 = a3;
      v4 = *(_QWORD *)(a3 + 16);
      a3 = v4 & 0xFFFFFFFFFFFFFFFELL;
      if (a2 == *(_QWORD *)result)
        goto LABEL_69;
    }
    result = 537;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::RedBlackTree<WTF::MetaAllocatorHandle,void *>::removeFixup(uint64_t result, _QWORD *a2, unint64_t a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  if (*(_QWORD **)result == a2)
  {
    if (a2)
    {
      v4 = a2[3];
LABEL_75:
      a2[3] = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  else
  {
    v3 = 129;
    while (1)
    {
      if (a2)
      {
        v4 = a2[3];
        if ((v4 & 1) != 0)
          goto LABEL_75;
      }
      if (!--v3)
        break;
      v5 = *(_QWORD *)(a3 + 8);
      if (a2 == (_QWORD *)v5)
      {
        v5 = *(_QWORD *)(a3 + 16);
        v17 = *(_QWORD *)(v5 + 24);
        if ((v17 & 1) != 0)
        {
          *(_QWORD *)(v5 + 24) = v17 & 0xFFFFFFFFFFFFFFFELL;
          v18 = *(_QWORD *)(a3 + 24) | 1;
          v19 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)(a3 + 16) = v19;
          *(_QWORD *)(a3 + 24) = v18;
          if (v19)
          {
            *(_QWORD *)(v19 + 24) = *(_QWORD *)(v19 + 24) & 1 | a3;
            v18 = *(_QWORD *)(a3 + 24);
          }
          *(_QWORD *)(v5 + 24) = v18 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v5 + 24) & 1;
          v20 = *(_QWORD *)(a3 + 24);
          v21 = (_QWORD *)result;
          v22 = v20 & 0xFFFFFFFFFFFFFFFELL;
          if ((v20 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v24 = *(_QWORD *)(v22 + 8);
            v23 = (_QWORD *)(v22 + 8);
            if (v24 == a3)
              v21 = v23;
            else
              v21 = v23 + 1;
          }
          *v21 = v5;
          *(_QWORD *)(v5 + 8) = a3;
          *(_QWORD *)(a3 + 24) = v20 & 1 | v5;
          v5 = *(_QWORD *)(a3 + 16);
        }
        v25 = *(_QWORD *)(v5 + 8);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 24);
          if ((v26 & 1) != 0)
          {
            v27 = *(_QWORD *)(v5 + 16);
            if (!v27)
              goto LABEL_56;
            if ((*(_QWORD *)(v27 + 24) & 1) == 0)
            {
              v26 = *(_QWORD *)(v25 + 24);
LABEL_56:
              *(_QWORD *)(v25 + 24) = v26 & 0xFFFFFFFFFFFFFFFELL;
              v41 = *(_QWORD *)(v5 + 24) | 1;
              *(_QWORD *)(v5 + 24) = v41;
              v42 = *(_QWORD *)(v25 + 16);
              *(_QWORD *)(v5 + 8) = v42;
              if (v42)
              {
                *(_QWORD *)(v42 + 24) = *(_QWORD *)(v42 + 24) & 1 | v5;
                v41 = *(_QWORD *)(v5 + 24);
              }
              *(_QWORD *)(v25 + 24) = v41 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v25 + 24) & 1;
              v43 = *(_QWORD *)(v5 + 24);
              v44 = (_QWORD *)result;
              v45 = v43 & 0xFFFFFFFFFFFFFFFELL;
              if ((v43 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v47 = *(_QWORD **)(v45 + 8);
                v46 = (_QWORD *)(v45 + 8);
                if (v47 == (_QWORD *)v5)
                  v44 = v46;
                else
                  v44 = v46 + 1;
              }
              *v44 = v25;
              *(_QWORD *)(v25 + 16) = v5;
              *(_QWORD *)(v5 + 24) = v43 & 1 | v25;
              v5 = *(_QWORD *)(a3 + 16);
              v27 = *(_QWORD *)(v5 + 16);
            }
LABEL_63:
            *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a3 + 24) & 1;
            *(_QWORD *)(a3 + 24) &= ~1uLL;
            if (v27)
              *(_QWORD *)(v27 + 24) &= ~1uLL;
            v48 = *(_QWORD *)(v5 + 8);
            *(_QWORD *)(a3 + 16) = v48;
            if (v48)
              *(_QWORD *)(v48 + 24) = *(_QWORD *)(v48 + 24) & 1 | a3;
            *(_QWORD *)(v5 + 24) = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v5 + 24) & 1;
            v36 = *(_QWORD *)(a3 + 24);
            v49 = (_QWORD *)result;
            v50 = v36 & 0xFFFFFFFFFFFFFFFELL;
            if ((v36 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v52 = *(_QWORD *)(v50 + 8);
              v51 = (_QWORD *)(v50 + 8);
              if (v52 == a3)
                v49 = v51;
              else
                v49 = v51 + 1;
            }
            *v49 = v5;
            *(_QWORD *)(v5 + 8) = a3;
LABEL_72:
            *(_QWORD *)(a3 + 24) = v36 & 1 | v5;
            a2 = *(_QWORD **)result;
            v4 = *(_QWORD *)(*(_QWORD *)result + 24);
            goto LABEL_75;
          }
        }
        v27 = *(_QWORD *)(v5 + 16);
        if (v27 && (*(_QWORD *)(v27 + 24) & 1) != 0)
          goto LABEL_63;
      }
      else
      {
        v6 = *(_QWORD *)(v5 + 24);
        if ((v6 & 1) != 0)
        {
          *(_QWORD *)(v5 + 24) = v6 & 0xFFFFFFFFFFFFFFFELL;
          v7 = *(_QWORD *)(a3 + 24) | 1;
          *(_QWORD *)(a3 + 24) = v7;
          v8 = *(_QWORD *)(v5 + 16);
          *(_QWORD *)(a3 + 8) = v8;
          if (v8)
          {
            *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 24) & 1 | a3;
            v7 = *(_QWORD *)(a3 + 24);
          }
          *(_QWORD *)(v5 + 24) = v7 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v5 + 24) & 1;
          v9 = *(_QWORD *)(a3 + 24);
          v10 = (_QWORD *)result;
          v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v13 = *(_QWORD *)(v11 + 8);
            v12 = (_QWORD *)(v11 + 8);
            if (v13 == a3)
              v10 = v12;
            else
              v10 = v12 + 1;
          }
          *v10 = v5;
          *(_QWORD *)(v5 + 16) = a3;
          *(_QWORD *)(a3 + 24) = v9 & 1 | v5;
          v5 = *(_QWORD *)(a3 + 8);
        }
        v14 = *(_QWORD *)(v5 + 16);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 24);
          if ((v15 & 1) != 0)
          {
            v16 = *(_QWORD *)(v5 + 8);
            if (!v16)
              goto LABEL_37;
            if ((*(_QWORD *)(v16 + 24) & 1) == 0)
            {
              v15 = *(_QWORD *)(v14 + 24);
LABEL_37:
              *(_QWORD *)(v14 + 24) = v15 & 0xFFFFFFFFFFFFFFFELL;
              v28 = *(_QWORD *)(v5 + 24) | 1;
              v29 = *(_QWORD *)(v14 + 8);
              *(_QWORD *)(v5 + 16) = v29;
              *(_QWORD *)(v5 + 24) = v28;
              if (v29)
              {
                *(_QWORD *)(v29 + 24) = *(_QWORD *)(v29 + 24) & 1 | v5;
                v28 = *(_QWORD *)(v5 + 24);
              }
              *(_QWORD *)(v14 + 24) = v28 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v14 + 24) & 1;
              v30 = *(_QWORD *)(v5 + 24);
              v31 = (_QWORD *)result;
              v32 = v30 & 0xFFFFFFFFFFFFFFFELL;
              if ((v30 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v34 = *(_QWORD **)(v32 + 8);
                v33 = (_QWORD *)(v32 + 8);
                if (v34 == (_QWORD *)v5)
                  v31 = v33;
                else
                  v31 = v33 + 1;
              }
              *v31 = v14;
              *(_QWORD *)(v14 + 8) = v5;
              *(_QWORD *)(v5 + 24) = v30 & 1 | v14;
              v5 = *(_QWORD *)(a3 + 8);
              v16 = *(_QWORD *)(v5 + 8);
            }
LABEL_44:
            *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a3 + 24) & 1;
            *(_QWORD *)(a3 + 24) &= ~1uLL;
            if (v16)
              *(_QWORD *)(v16 + 24) &= ~1uLL;
            v35 = *(_QWORD *)(v5 + 16);
            *(_QWORD *)(a3 + 8) = v35;
            if (v35)
              *(_QWORD *)(v35 + 24) = *(_QWORD *)(v35 + 24) & 1 | a3;
            *(_QWORD *)(v5 + 24) = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v5 + 24) & 1;
            v36 = *(_QWORD *)(a3 + 24);
            v37 = (_QWORD *)result;
            v38 = v36 & 0xFFFFFFFFFFFFFFFELL;
            if ((v36 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v40 = *(_QWORD *)(v38 + 8);
              v39 = (_QWORD *)(v38 + 8);
              if (v40 == a3)
                v37 = v39;
              else
                v37 = v39 + 1;
            }
            *v37 = v5;
            *(_QWORD *)(v5 + 16) = a3;
            goto LABEL_72;
          }
        }
        v16 = *(_QWORD *)(v5 + 8);
        if (v16 && (*(_QWORD *)(v16 + 24) & 1) != 0)
          goto LABEL_44;
      }
      *(_QWORD *)(v5 + 24) |= 1uLL;
      a2 = (_QWORD *)a3;
      v4 = *(_QWORD *)(a3 + 24);
      a3 = v4 & 0xFFFFFFFFFFFFFFFELL;
      if (a2 == *(_QWORD **)result)
        goto LABEL_75;
    }
    result = 537;
    __break(0xC471u);
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>,WTF::MetaAllocator::FreeSpaceNode *,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::MetaAllocator::FreeSpaceNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)41782,(WTF::FunctionAttributes)0>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v17 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    v17 = v9 + 16;
    if (!a2)
      goto LABEL_12;
  }
  if (a2 < 4)
  {
    v18 = 0;
LABEL_10:
    v21 = a2 - v18;
    v22 = (_QWORD *)(v9 + 16 * v18 + 24);
    do
    {
      *(v22 - 1) = 1;
      *v22 = 0;
      v22 += 2;
      --v21;
    }
    while (v21);
    goto LABEL_12;
  }
  v18 = a2 & 0xFFFFFFFC;
  v19 = (_OWORD *)(v9 + 48);
  v20 = v18;
  do
  {
    *(v19 - 2) = xmmword_199123080;
    *(v19 - 1) = xmmword_199123080;
    *v19 = xmmword_199123080;
    v19[1] = xmmword_199123080;
    v19 += 4;
    v20 -= 4;
  }
  while (v20);
  if (v18 != a2)
    goto LABEL_10;
LABEL_12:
  *a1 = v17;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = (_QWORD *)(v6 + 16 * v23);
      if ((unint64_t)(*v25 - 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(*v25 << 32) + *v25) ^ ((~(*v25 << 32) + *v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34 != 1);
        v35 = (_OWORD *)(v26 + 16 * v33);
        *v35 = *(_OWORD *)v25;
        if (v25 == a3)
          v24 = v35;
      }
      ++v23;
    }
    while (v23 != v7);
  }
  else
  {
    v24 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v24;
}

void WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,unsigned long>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,unsigned long,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (_QWORD *)(v10 + 16 * i);
      if ((unint64_t)(*v22 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (*v22 + ~(*v22 << 32)) ^ ((*v22 + ~(*v22 << 32)) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = v28;
          v31 = *(_QWORD *)(v23 + 16 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (v31);
        *(_OWORD *)(v23 + 16 * v30) = *(_OWORD *)v22;
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

double *WTF::MonotonicTime::approximateWallTime(double *this)
{
  unint64_t v1;
  char v2;
  timespec *p_tp;
  timespec __tp;

  if (fabs(*this) != INFINITY)
  {
    mach_absolute_time();
    v1 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v1 != -1)
    {
      __tp.tv_sec = (__darwin_time_t)&v2;
      p_tp = &__tp;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &p_tp, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    return (double *)clock_gettime(_CLOCK_REALTIME, &__tp);
  }
  return this;
}

uint64_t WTF::MonotonicTime::dump(WTF::MonotonicTime *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Monotonic(");
  WTF::PrintStream::printf(v4, "%lf", *(double *)this);
  WTF::PrintStream::printf(v4, "%s", " sec)");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void *WTF::NativePromiseBase::logChannel(WTF::NativePromiseBase *this)
{
  return &WTF::WTFLogNativePromise;
}

void WTF::URLHelpers::loadIDNAllowedScriptList(WTF::URLHelpers *this)
{
  if (WTF::URLHelpers::loadIDNAllowedScriptList(void)::flag != -1)
    dispatch_once(&WTF::URLHelpers::loadIDNAllowedScriptList(void)::flag, &__block_literal_global_0);
}

void ___ZN3WTF10URLHelpers24loadIDNAllowedScriptListEv_block_invoke()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  id v6;
  FILE *v7;
  FILE *v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[135];
  _BYTE v16[33];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0xFFFFuLL, 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v1)
  {
    v2 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v1; ++i)
      {
        if (*(_QWORD *)v12 != v2)
          objc_enumerationMutation(v0);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "stringByAppendingPathComponent:", CFSTR("IDNScriptWhiteList.txt"));
        v4 = (id)objc_claimAutoreleasedReturnValue();
        v5 = v4;
        if (v4)
        {
          v6 = objc_retainAutorelease(v4);
          v7 = fopen((const char *)objc_msgSend(v6, "fileSystemRepresentation"), "r");
          v8 = v7;
          if (v7)
          {
            if (fscanf(v7, " #%*[^\n\r]%*[\n\r]") != -1)
            {
              do
              {
                v9 = fscanf(v8, " %32[^# \t\n\r]%*[^# \t\n\r] ", v16);
                if (v9 == 1)
                {
                  v10 = MEMORY[0x19AEBBFE8](4106, v16);
                  if (v10 <= 0xFE)
                    *((_DWORD *)&WTF::URLHelpers::allowedIDNScriptBits + (v10 >> 5)) |= 1 << v10;
                }
                else if (v9 == -1)
                {
                  break;
                }
              }
              while (fscanf(v8, " #%*[^\n\r]%*[\n\r]") != -1);
            }
            fclose(v8);

            return;
          }
        }

      }
      v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v1)
        continue;
      break;
    }
  }

  WTF::URLHelpers::allowedIDNScriptBits = (uint64_t)vorr_s8((int8x8_t)WTF::URLHelpers::allowedIDNScriptBits, (int8x8_t)0x400348025F862FLL);
}

void sub_197AF3248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WTF *WTF::decodeHostName(WTF *this, NSString *a2)
{
  WTF *v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  id v39;

  v2 = this;
  WTF::String::String((WTF::StringImpl **)&v39, (CFStringRef)v2);
  WTF::URLHelpers::mapHostName();
  v10 = (WTF::StringImpl *)v39;
  v39 = 0;
  if (!v10)
  {
LABEL_4:
    if (v38)
      goto LABEL_5;
LABEL_10:

    return (WTF *)0;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  if (!v38)
    goto LABEL_10;
LABEL_5:
  if (v37)
  {
    WTF::StringImpl::createCFString(v37, (CFStringRef *)&v39);
    v18 = v39;
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }

    return (WTF *)v18;
  }
  else
  {
    v28 = v2;

    return v28;
  }
}

void sub_197AF3398(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  void *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::~StringImpl(a12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);

      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::String>::~optional(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_BYTE *)(a1 + 8))
    return a1;
  v9 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (!v9)
    return a1;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    return a1;
  }
  WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

WTF *WTF::encodeHostName(WTF *this, NSString *a2)
{
  WTF *v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  id v39;

  v2 = this;
  WTF::String::String((WTF::StringImpl **)&v39, (CFStringRef)v2);
  WTF::URLHelpers::mapHostName();
  v10 = (WTF::StringImpl *)v39;
  v39 = 0;
  if (!v10)
  {
LABEL_4:
    if (v38)
      goto LABEL_5;
LABEL_10:

    return (WTF *)0;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
  WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  if (!v38)
    goto LABEL_10;
LABEL_5:
  if (v37)
  {
    WTF::StringImpl::createCFString(v37, (CFStringRef *)&v39);
    v18 = v39;
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }

    return (WTF *)v18;
  }
  else
  {
    v28 = v2;

    return v28;
  }
}

void sub_197AF3558(_Unwind_Exception *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  void *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::~StringImpl(a12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);

      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void WTF::decodePercentEscapes(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  const __CFString *v5;
  CFStringRef v6;
  WTF::StringImpl *v7;
  CFStringRef originalString;

  WTF::String::createCFString(this, &originalString);
  v5 = CFURLCreateStringByReplacingPercentEscapes(0, originalString, &stru_1E35BF3F0);
  v6 = originalString;
  originalString = 0;
  if (v6)
    CFRelease(v6);
  if (v5)
  {
    WTF::String::String(a2, v5);
    CFRelease(v5);
  }
  else
  {
    v7 = *this;
    if (*this)
      *(_DWORD *)v7 += 2;
    *a2 = v7;
  }
}

void sub_197AF363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFURLRef WTF::URLByTruncatingOneCharacterBeforeComponent(WTF *this, NSURL *a2, CFURLComponentType a3)
{
  WTF *v4;
  WTF *v5;
  CFIndex location;
  CFIndex v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFURLRef v15;
  UInt8 *v16;
  UInt8 *URLBytes;
  int v19;
  uint64_t v20;

  v4 = this;
  if (!v4)
    return (CFURLRef)0;
  v5 = v4;
  location = CFURLGetByteRangeForComponent(v4, (CFURLComponentType)a2, 0).location;
  if (location == -1)
    return v5;
  WTF::bytesAsVector(v5, (uint64_t)&URLBytes);
  v7 = location - 1;
  v15 = CFURLCreateWithBytes(0, URLBytes, location - 1, 0x8000100u, 0);
  if (!v15)
  {
    v15 = CFURLCreateWithBytes(0, URLBytes, v7, 0x201u, 0);
    if (!v15)
      v15 = v5;
  }
  v16 = URLBytes;
  if (&v20 != (uint64_t *)URLBytes)
  {
    if (URLBytes)
    {
      URLBytes = 0;
      v19 = 0;
      WTF::fastFree((unint64_t)v16, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  return v15;
}

void sub_197AF3768(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, int a10, uint64_t a11)
{
  void *v11;

  if (&a11 != (uint64_t *)a9)
  {
    if (a9)
    {
      WTF::fastFree((unint64_t)a9, a2, a3, a4, a5, a6, a7, a8);

      _Unwind_Resume(a1);
    }
  }

  _Unwind_Resume(a1);
}

id WTF::URLWithData(WTF *this, NSData *a2, NSURL *a3)
{
  WTF *v4;
  NSData *v5;
  CFURLComponentType v6;
  CFIndex v7;
  const __CFURL *v8;
  const UInt8 *v9;
  void *v10;

  v4 = this;
  v5 = a2;
  if (v4)
  {
    v7 = -[WTF length](v4, "length");
    if (v7)
    {
      WTF::URLByTruncatingOneCharacterBeforeComponent((WTF *)v5, (NSURL *)4, v6);
      v8 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

      v9 = (const UInt8 *)-[WTF bytes](objc_retainAutorelease(v4), "bytes");
      if (*v9 != 47 || v8)
      {
        v10 = CFURLCreateAbsoluteURLWithBytes(0, v9, v7, 0x8000100u, v8, 1u);
        if (!v10)
          v10 = CFURLCreateAbsoluteURLWithBytes(0, v9, v7, 0x201u, v8, 1u);
        v5 = (NSData *)v8;
      }
      else
      {
        v10 = 0;
        v5 = 0;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", &stru_1E35BF3F0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_197AF38C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AF38DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AF38F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AF390C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WTF::URLWithUserTypedString(WTF *this, NSString *a2, NSURL *a3)
{
  WTF *v3;
  WTF *v4;
  id v5;
  void *v6;
  __CFString *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  WTF::StringImpl *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  NSString *v33;
  __CFString *v34;
  void *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  WTF *v58;
  NSURL *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CFTypeRef cf[2];
  __int128 v80;
  uint64_t v81;
  WTF::StringImpl *v82[5];
  WTF::StringImpl *v83;

  v3 = this;
  v4 = v3;
  if (!v3)
    goto LABEL_16;
  v5 = (id)-[WTF mutableCopy](v3, "mutableCopy");
  v6 = v5;
  if (v5)
    CFRetain(v5);

  v7 = objc_retainAutorelease(v6);
  CFStringTrimWhitespace(v7);
  WTF::String::String(v82, v7);
  WTF::URLHelpers::mapHostNames((int **)v82, (uint64_t)WTF::decodePercentEscapes, (int **)&v83);
  v15 = v82[0];
  v82[0] = 0;
  if (!v15)
  {
LABEL_7:
    if (!v6)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
  WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
  if (v6)
LABEL_8:
    CFRelease(v7);
LABEL_9:
  if (!v83)
  {
LABEL_16:
    v35 = 0;
    goto LABEL_35;
  }
  v81 = 0;
  *(_OWORD *)cf = 0u;
  v80 = 0u;
  WTF::URL::URL((uint64_t)v82, (uint64_t)cf, &v83, 0, v11, v12, v13, v14);
  v24 = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      WTF::URL::createCFURL((WTF::URL *)v82, v52, v53, v54, v55, v56, (CFURLRef *)cf, v57);
      v32 = cf[0];
      cf[0] = 0;
      if (v32)
        goto LABEL_14;
LABEL_20:
      v35 = 0;
      goto LABEL_26;
    }
    *(_DWORD *)v24 -= 2;
  }
  WTF::URL::createCFURL((WTF::URL *)v82, v18, v19, v20, v21, v22, (CFURLRef *)cf, v23);
  v32 = cf[0];
  cf[0] = 0;
  if (!v32)
    goto LABEL_20;
LABEL_14:
  CFRelease(v32);
  if (v83)
  {
    WTF::StringImpl::createCFString(v83, (CFStringRef *)cf);
    v34 = (id)(id)cf[0];
  }
  else
  {
    v34 = &stru_1E35BF3F0;
  }
  WTF::dataWithUserTypedString((WTF *)v34, v33);
  v58 = (WTF *)objc_claimAutoreleasedReturnValue();

  if (v58)
    WTF::URLWithData(v58, 0, v59);
  else
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", &stru_1E35BF3F0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_26:
  v60 = v82[0];
  v82[0] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      v61 = v83;
      v83 = 0;
      if (!v61)
        goto LABEL_35;
      goto LABEL_32;
    }
    *(_DWORD *)v60 -= 2;
  }
  v61 = v83;
  v83 = 0;
  if (!v61)
    goto LABEL_35;
LABEL_32:
  if (*(_DWORD *)v61 == 2)
  {
    WTF::StringImpl::~StringImpl(v61, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
  }
  else
  {
    *(_DWORD *)v61 -= 2;
  }
LABEL_35:

  return v35;
}

void sub_197AF3B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  void *v15;
  void *v16;
  uint64_t v17;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
    {
      WTF::StringImpl::~StringImpl(a15, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)a15 -= 2;
    }
  }
  v34 = *(WTF::StringImpl **)(v17 - 40);
  *(_QWORD *)(v17 - 40) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);

      _Unwind_Resume(a1);
    }
    *(_DWORD *)v34 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

id WTF::dataWithUserTypedString(WTF *this, NSString *a2)
{
  WTF *v2;
  id v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;

  v2 = this;
  -[WTF dataUsingEncoding:](v2, "dataUsingEncoding:", 4);
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (unsigned __int8 *)objc_msgSend(v3, "bytes");
  v5 = objc_msgSend(v3, "length");
  v6 = v5;
  if (v5 && (v7 = 3 * v5, v7 == (int)v7))
  {
    v9 = malloc_type_malloc((int)v7, 0x8FCE928uLL);
    if (v6 < 1)
    {
      v10 = 0;
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = v6;
      v12 = v9;
      do
      {
        while (1)
        {
          v17 = *v4++;
          v16 = v17;
          if (v17 - 127 <= 0xFFFFFFA1)
            break;
          v10 = (v10 + 1);
          *v12++ = v16;
          if (!--v11)
            goto LABEL_17;
        }
        if (v16 >= 0xA0)
          v13 = 55;
        else
          v13 = 48;
        v12[1] = v13 + (v16 >> 4);
        v14 = v16 & 0xF;
        if (v14 >= 0xA)
          v15 = 55;
        else
          v15 = 48;
        v12[2] = v15 + v14;
        v10 = (v10 + 3);
        *v12 = 37;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
LABEL_17:
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v9, v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_197AF3D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AF3DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::URLWithUserTypedStringDeprecated(WTF *this, NSString *a2)
{
  WTF *v2;
  NSString *v3;
  NSURL *v4;
  WTF *v5;
  NSString *v6;
  void *v7;
  WTF *v9;
  NSURL *v10;
  WTF *v11;

  v2 = this;
  v5 = v2;
  if (v2)
  {
    WTF::URLWithUserTypedString(v2, v3, v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      WTF::dataWithUserTypedString(v5, v6);
      v9 = (WTF *)objc_claimAutoreleasedReturnValue();
      v11 = v9;
      if (v9)
      {
        WTF::URLWithData(v9, 0, v10);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", &stru_1E35BF3F0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }

    return v7;
  }
  else
  {

    return 0;
  }
}

void sub_197AF3E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AF3EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_197AF3EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::dataForURLComponentType(WTF *this, NSURL *a2, CFURLComponentType a3)
{
  WTF *v4;
  CFRange v5;
  CFIndex length;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned __int8 *v16;
  char v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  WTF *v21;
  WTF *v24;
  int v25;
  uint64_t v26;
  CFRange rangeIncludingSeparators;

  v4 = this;
  v5 = CFURLGetByteRangeForComponent(v4, (CFURLComponentType)a2, 0);
  if (v5.location == -1)
  {
    v15 = 0;
    goto LABEL_25;
  }
  length = v5.length;
  WTF::bytesAsVector(v4, (uint64_t)&v24);
  v7 = v24;
  objc_msgSend(MEMORY[0x1E0C99DF0], "data");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 != (NSURL *)11)
    goto LABEL_7;
  if (v5.length
    || (v8 = (void *)CFURLGetByteRangeForComponent(v4, kCFURLComponentQuery, &rangeIncludingSeparators).length,
        rangeIncludingSeparators.location != -1)
    && rangeIncludingSeparators.length == 1)
  {
    objc_msgSend(v15, "appendBytes:length:", "?", 1);
LABEL_7:
    if (v5.length >= 1)
    {
      v16 = (unsigned __int8 *)v7 + v5.location;
      do
      {
        v20 = *v16;
        if (v20 - 33 > 0x5D)
        {
          LOBYTE(rangeIncludingSeparators.location) = 37;
          if (v20 >= 0xA0)
            v17 = 55;
          else
            v17 = 48;
          BYTE1(rangeIncludingSeparators.location) = v17 + (v20 >> 4);
          v18 = v20 & 0xF;
          if (v18 >= 0xA)
            v19 = 55;
          else
            v19 = 48;
          BYTE2(rangeIncludingSeparators.location) = v19 + v18;
          objc_msgSend(v15, "appendBytes:length:", &rangeIncludingSeparators, 3);
        }
        else
        {
          objc_msgSend(v15, "appendBytes:length:", v16, 1);
        }
        ++v16;
        --length;
      }
      while (length);
    }
  }
  v21 = v24;
  if (&v26 != (uint64_t *)v24 && v24 != 0)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree((unint64_t)v21, v8, v9, v10, v11, v12, v13, v14);
  }
LABEL_25:

  return v15;
}

void sub_197AF4048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (&a11 != (uint64_t *)a9 && a9 != 0)
    WTF::fastFree((unint64_t)a9, v14, v15, v16, v17, v18, v19, v20);

  _Unwind_Resume(a1);
}

WTF *WTF::URLByRemovingUserInfo(WTF *this, NSURL *a2)
{
  WTF *v2;
  CFRange v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  CFIndex v14;
  CFIndex v15;
  CFURLRef v16;
  WTF *v17;
  WTF *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v2 = this;
  v3 = CFURLGetByteRangeForComponent(v2, kCFURLComponentUserInfo, 0);
  v4 = v2;
  if (v3.location != -1)
  {
    WTF::bytesAsVector(v2, (uint64_t)&v19);
    v12 = v21;
    v4 = v2;
    if (v21 >= v3.location)
    {
      v13 = v19;
      v14 = v3.length + 1 + v3.location <= v21 ? v3.length + 1 : v21 - v3.location;
      memmove((char *)v19 + v3.location, (char *)v19 + v3.location + v14, v14 + v21 - v3.location);
      v15 = v12 - v14;
      v16 = CFURLCreateWithBytes(0, (const UInt8 *)v13, v12 - v14, 0x8000100u, 0);
      if (v16 || (v16 = CFURLCreateWithBytes(0, (const UInt8 *)v13, v15, 0x201u, 0), v4 = v2, v16))
      {

        v4 = v16;
      }
    }
    v17 = v19;
    if (&v22 != (uint64_t *)v19 && v19)
    {
      v19 = 0;
      v20 = 0;
      WTF::fastFree((unint64_t)v17, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  return v4;
}

void sub_197AF41C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, int a10, uint64_t a11)
{
  void *v11;

  if (&a11 != (uint64_t *)a9)
  {
    if (a9)
    {
      WTF::fastFree((unint64_t)a9, a2, a3, a4, a5, a6, a7, a8);

      _Unwind_Resume(a1);
    }
  }

  _Unwind_Resume(a1);
}

id WTF::originalURLData(WTF *this, NSURL *a2)
{
  WTF *v2;
  const __CFURL *v3;
  CFIndex v4;
  CFIndex v5;
  UInt8 *v6;
  const UInt8 *v7;
  const __CFData *v8;
  const __CFData *v9;
  char v10;
  const __CFURL *v11;
  NSURL *v12;
  const __CFURL *v13;
  WTF *v14;
  NSURL *v15;
  void *v16;

  v2 = this;
  v3 = v2;
  if (v2)
  {
    v4 = CFURLGetBytes(v2, 0, 0);
    if (v4 == -1 || (v5 = v4, (v6 = (UInt8 *)malloc_type_malloc(v4, 0xE34A54AAuLL)) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x197AF434CLL);
    }
    v7 = v6;
    CFURLGetBytes(v3, v6, v5);
    v8 = CFDataCreateWithBytesNoCopy(0, v7, v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    v9 = v8;
    if (v8)
    {
      CFRetain(v8);
      v10 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 1;
LABEL_8:

  v11 = CFURLGetBaseURL(v3);
  if (v11)
  {
    v13 = v11;
    WTF::URLWithData(v9, (NSData *)v11, v12);
    v14 = (WTF *)objc_claimAutoreleasedReturnValue();
    WTF::originalURLData(v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if ((v10 & 1) == 0)
      CFRelease(v9);
  }
  else
  {
    v16 = v9;
  }

  return v16;
}

void sub_197AF4370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_197AF438C(_Unwind_Exception *a1)
{
  void *v1;
  const void *v2;
  void *v3;
  void *v4;
  char v5;

  if ((v5 & 1) == 0)
    CFRelease(v2);

  _Unwind_Resume(a1);
}

__CFString *WTF::userVisibleString(WTF *this, NSURL *a2)
{
  WTF *v2;
  NSURL *v3;
  id v4;
  void *v5;
  id v6;
  const void *v7;
  size_t v8;
  const WTF::CString *v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  WTF *v22;
  __CFString *v23;
  __CFString *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF::StringImpl *v35;
  id v36;

  v2 = this;
  WTF::originalURLData(v2, v3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = objc_retainAutorelease(v4);
    v7 = (const void *)objc_msgSend(v6, "bytes");
    v8 = objc_msgSend(v6, "length");

    v34 = 0;
    if (v7)
    {
      if (v8 > 0xFFFFFFFFFFFFFFEELL)
      {
        __break(0xC471u);
        JUMPOUT(0x197AF4544);
      }
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)(v8 + 17));
      *(_DWORD *)v10 = 1;
      v10[1] = v8;
      v34 = (WTF *)v10;
      v11 = v10 + 2;
      memcpy(v10 + 2, v7, v8);
      *((_BYTE *)v11 + v8) = 0;
    }
  }
  else
  {

    v34 = 0;
  }
  WTF::URLHelpers::userVisibleURL((WTF::URLHelpers *)&v34, v9);
  if (!v35)
  {
    v21 = &stru_1E35BF3F0;
    v23 = &stru_1E35BF3F0;
    v24 = &stru_1E35BF3F0;
    v35 = 0;
LABEL_12:
    v22 = v34;
    v34 = 0;
    if (!v22)
      goto LABEL_16;
    goto LABEL_13;
  }
  WTF::StringImpl::createCFString(v35, (CFStringRef *)&v36);
  v12 = v36;
  v13 = v35;
  v21 = (__CFString *)v12;
  v35 = 0;
  if (!v13)
    goto LABEL_12;
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl(v13, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    v22 = v34;
    v34 = 0;
    if (!v22)
      goto LABEL_16;
  }
  else
  {
    *(_DWORD *)v13 -= 2;
    v22 = v34;
    v34 = 0;
    if (!v22)
      goto LABEL_16;
  }
LABEL_13:
  if (*(_DWORD *)v22 == 1)
    WTF::fastFree((unint64_t)v22, v14, v15, v16, v17, v18, v19, v20);
  else
    --*(_DWORD *)v22;
LABEL_16:

  return v21;
}

void sub_197AF4550(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WTF *a10)
{
  void *v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
    {
      WTF::fastFree((unint64_t)a10, a2, a3, a4, a5, a6, a7, a8);

      _Unwind_Resume(a1);
    }
    --*(_DWORD *)a10;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

BOOL WTF::isUserVisibleURL(WTF *this, NSString *a2)
{
  WTF *v2;
  char *v3;
  int v4;
  BOOL v5;
  _BYTE *v7;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  char buffer[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = this;
  if (CFStringGetCString((CFStringRef)v2, buffer, 1023, 0x8000100u))
    v3 = buffer;
  else
    v3 = (char *)-[WTF UTF8String](objc_retainAutorelease(v2), "UTF8String");
  LOBYTE(v4) = *v3;
  v5 = *v3 == 0;
  if ((*v3 - 127) >= 0xA2u)
  {
    v7 = v3 + 3;
    do
    {
      if (v4 == 37)
      {
        v4 = (char)*(v7 - 2);
        if ((v4 - 48) < 0xA || ((*(v7 - 2) | 0x20) - 97) <= 5u)
        {
          v9 = (char)*(v7 - 1);
          if ((v9 - 48) < 0xA || ((*(v7 - 1) | 0x20) - 97) <= 5u)
          {
            v11 = v4 >= 65 ? 9 : 0;
            v12 = v11 + v4;
            v13 = v9 >= 65 ? 65 : v9 - 48;
            if (((v13 | (16 * v12)) & 0x80) != 0)
              break;
          }
        }
      }
      else
      {
        v14 = v4 & 0xDF;
        LOBYTE(v4) = *(v7 - 2);
        if (v14 == 88 && (v4 & 0xDF) == 0x4E && *(v7 - 1) == 45 && *v7 == 45)
          break;
      }
      v5 = v4 == 0;
      ++v7;
    }
    while ((v4 - 127) > 0xA1u);
  }

  return v5;
}

void sub_197AF4740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::numberOfProcessorCores(WTF *this)
{
  uint64_t result;
  char *v2;
  const char *v3;
  size_t v4;
  unsigned int v5;
  int v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  result = WTF::numberOfProcessorCores(void)::s_numberOfCores;
  if (WTF::numberOfProcessorCores(void)::s_numberOfCores <= 0)
  {
    v2 = getenv("WTF_numberOfProcessorCores");
    if (v2)
    {
      v3 = v2;
      LODWORD(v4) = 0;
      if (sscanf(v2, "%u", &v4) == 1)
      {
        result = v4;
LABEL_9:
        WTF::numberOfProcessorCores(void)::s_numberOfCores = result;
        return result;
      }
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "WARNING: failed to parse WTF_numberOfProcessorCores=%s\n", v3);
    }
    v5 = 0;
    v4 = 4;
    *(_QWORD *)v6 = 0x1900000006;
    if (sysctl(v6, 2u, &v5, &v4, 0, 0) < 0)
      result = 1;
    else
      result = v5;
    goto LABEL_9;
  }
  return result;
}

uint64_t WTF::numberOfPhysicalProcessorCores(WTF *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58248);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58248, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::numberOfPhysicalProcessorCores(void)::$_0 &&>>);
  }
  return _MergedGlobals_11;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::numberOfPhysicalProcessorCores(void)::$_0 &&>>()
{
  uint64_t result;
  size_t v1;

  v1 = 4;
  result = sysctlbyname("hw.physicalcpu_max", &_MergedGlobals_11, &v1, 0, 0);
  if ((result & 0x80000000) != 0)
    _MergedGlobals_11 = 1;
  return result;
}

uint64_t WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return ++WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current;
}

unint64_t WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  unint64_t v0;
  unint64_t result;

  do
  {
    v0 = __ldaxr(&WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current);
    result = v0 + 1;
  }
  while (__stlxr(v0 + 1, &WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current));
  return result;
}

uint64_t WTF::operator<<(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *a2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned long,void>>(a1, &v10, a3, a4, a5, a6, a7, a8);
  return a1;
}

unint64_t WTF::ObjectIdentifierMainThreadAccessTraits<WTF::UUID>::generateIdentifierInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  WTF::cryptographicallyRandomValues((uint64_t)v9, 16, a3, a4, a5, a6, a7, a8);
  return v9[0] & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
}

unint64_t WTF::ObjectIdentifierThreadSafeAccessTraits<WTF::UUID>::generateIdentifierInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  WTF::cryptographicallyRandomValues((uint64_t)v9, 16, a3, a4, a5, a6, a7, a8);
  return v9[0] & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
}

uint64_t WTF::operator<<(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  const char *v11;
  int v12;

  if (*a2 == 0)
    v9 = "0";
  else
    v9 = "1";
  v11 = v9;
  v12 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(a1, (uint64_t)&v11, a3, a4, a5, a6, a7, a8);
  return a1;
}

char *WTF::OSAllocator::tryReserveAndCommit(size_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  int v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  BOOL v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;

  if (a3)
    v9 = 3;
  else
    v9 = 1;
  if (a4)
    v10 = v9 | 4;
  else
    v10 = v9;
  if (a4)
    v11 = 6146;
  else
    v11 = 4098;
  v12 = (char *)mmap(0, a1, v10, v11, a2, 0);
  if (v12 == (char *)-1)
    v13 = 0;
  else
    v13 = v12;
  if (v13)
    v14 = a6 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v15 = WTF::s_pageSize;
    if (!WTF::s_pageSize)
    {
      v16 = sysconf(29);
      WTF::s_pageSize = v16;
      if ((v16 & (v16 - 1)) != 0)
        goto LABEL_40;
      v15 = v16;
      if (v16 > 0x4000)
      {
        __break(0xC471u);
        JUMPOUT(0x197AF4C08);
      }
      if (((v16 + 0x3FFF) & -(uint64_t)v16) != 0x4000)
      {
        __break(0xC471u);
        JUMPOUT(0x197AF4C28);
      }
    }
    mmap(v13, v15, 0, 4114, a2, 0);
    v17 = WTF::s_pageSize;
    v18 = WTF::s_pageSize;
    if (WTF::s_pageSize)
      goto LABEL_30;
    v17 = sysconf(29);
    WTF::s_pageSize = v17;
    if ((v17 & (v17 - 1)) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF4C48);
    }
    if (v17 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF4C68);
    }
    if (((v17 + 0x3FFF) & -(uint64_t)v17) != 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF4C88);
    }
    v18 = v17;
    if (v17)
      goto LABEL_30;
    v19 = sysconf(29);
    WTF::s_pageSize = v19;
    if ((v19 & (v19 - 1)) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF4CA8);
    }
    v18 = v19;
    if (v19 > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF4CC8);
    }
    if (((v19 + 0x3FFF) & -(uint64_t)v19) == 0x4000)
    {
      v17 = 0;
LABEL_30:
      mmap(&v13[a1 - v17], v18, 0, 4114, a2, 0);
      return v13;
    }
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x197AF4BE8);
  }
  return v13;
}

char *WTF::OSAllocator::tryReserveUncommitted(size_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  char *v7;

  v7 = WTF::OSAllocator::tryReserveAndCommit(a1, a2, a3, a4, 0, a6);
  if (v7)
  {
    while (madvise(v7, a1, 7) == -1 && *__error() == 35)
      ;
  }
  return v7;
}

uint64_t WTF::OSAllocator::reserveUncommitted(size_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  char *v7;
  char *v8;
  uint64_t result;

  v7 = WTF::OSAllocator::tryReserveAndCommit(a1, a2, a3, a4, 0, a6);
  if (v7)
  {
    v8 = v7;
    while (madvise(v8, a1, 7) == -1 && *__error() == 35)
      ;
    return (uint64_t)v8;
  }
  else
  {
    result = 150;
    __break(0xC471u);
  }
  return result;
}

mach_vm_address_t WTF::OSAllocator::tryReserveUncommittedAligned(mach_vm_size_t size, uint64_t a2, uint64_t a3, int a4, int a5)
{
  vm_prot_t cur_protection;
  mach_vm_address_t address;

  if (a4)
    cur_protection = 3;
  else
    cur_protection = 1;
  if (a5)
    cur_protection |= 4u;
  address = 0;
  mach_vm_map(*MEMORY[0x1E0C83DA0], &address, size, a2 - 1, 1, 0, 0, 0, cur_protection, cur_protection, 1u);
  if (!address)
    return 0;
  while (madvise((void *)address, size, 7) == -1 && *__error() == 35)
    ;
  return address;
}

uint64_t WTF::OSAllocator::reserveAndCommit(size_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t result;

  result = (uint64_t)WTF::OSAllocator::tryReserveAndCommit(a1, a2, a3, a4, 0, a6);
  if (!result)
  {
    result = 231;
    __break(0xC471u);
  }
  return result;
}

int *WTF::OSAllocator::commit(WTF::OSAllocator *this, size_t a2)
{
  int *result;

  do
  {
    result = (int *)madvise(this, a2, 8);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

int *WTF::OSAllocator::decommit(WTF::OSAllocator *this, size_t a2)
{
  int *result;

  do
  {
    result = (int *)madvise(this, a2, 7);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

int *WTF::OSAllocator::hintMemoryNotNeededSoon(WTF::OSAllocator *this, size_t a2)
{
  int *result;

  do
  {
    result = (int *)madvise(this, a2, 4);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

uint64_t WTF::OSAllocator::releaseDecommitted(WTF::OSAllocator *this, size_t a2)
{
  uint64_t result;

  result = munmap(this, a2);
  if ((_DWORD)result == -1)
    __break(0xC471u);
  return result;
}

BOOL WTF::OSAllocator::protect(WTF::OSAllocator *this, size_t a2, int a3, int a4)
{
  int v4;
  int v5;

  if (a4)
    v4 = 3;
  else
    v4 = 1;
  if (a3)
    v5 = v4;
  else
    v5 = 0;
  return mprotect(this, a2, v5) == 0;
}

uint64_t WTF::OSLogPrintStream::OSLogPrintStream(uint64_t a1, void *a2, char a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v5 = a2;
  *(_QWORD *)a1 = off_1E3571FF8;
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 21;
  v15 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (v15)
  {
    if (*v15 == 1)
    {
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
      v7 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      --*v15;
    }
  }
  qmemcpy((void *)(v7 + 16), "initial string... lol", 21);
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 37) = 0;
  *(_QWORD *)(a1 + 32) = 0;

  return a1;
}

{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v5 = a2;
  *(_QWORD *)a1 = off_1E3571FF8;
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = 21;
  v15 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (v15)
  {
    if (*v15 == 1)
    {
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
      v7 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      --*v15;
    }
  }
  qmemcpy((void *)(v7 + 16), "initial string... lol", 21);
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 37) = 0;
  *(_QWORD *)(a1 + 32) = 0;

  return a1;
}

void WTF::OSLogPrintStream::~OSLogPrintStream(WTF::OSLogPrintStream *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v9)
    goto LABEL_4;
  if (*v9 != 1)
  {
    --*v9;
LABEL_4:

    return;
  }
  WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);

}

{
  _DWORD *v9;

  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v9)
    goto LABEL_4;
  if (*v9 != 1)
  {
    --*v9;
LABEL_4:

    return;
  }
  WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);

}

{
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::OSLogPrintStream *v17;

  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*v9 == 1)
    {
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);

      v17 = this;
      goto LABEL_5;
    }
    --*v9;
  }

  v17 = this;
LABEL_5:
  WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
}

void WTF::OSLogPrintStream::open(WTF::OSLogPrintStream *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, uint64_t *a4@<X8>)
{
  char v5;
  os_log_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  NSObject *v19;

  v5 = (char)a3;
  v7 = os_log_create((const char *)this, a2);
  v8 = WTF::fastMalloc((WTF *)0x28);
  v9 = v7;
  *(_QWORD *)v8 = off_1E3571FF8;
  v19 = v9;
  *(_QWORD *)(v8 + 8) = v19;
  *(_BYTE *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 17) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = 21;
  v18 = *(_DWORD **)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v10;
  if (v18)
  {
    if (*v18 == 1)
    {
      WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
      v10 = *(_QWORD *)(v8 + 24);
    }
    else
    {
      --*v18;
    }
  }
  qmemcpy((void *)(v10 + 16), "initial string... lol", 21);
  *(_BYTE *)(*(_QWORD *)(v8 + 24) + 37) = 0;
  *(_QWORD *)(v8 + 32) = 0;

  *a4 = v8;
}

void sub_197AF5368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WTF::OSLogPrintStream::vprintf(WTF::OSLogPrintStream *this, const char *a2, va_list a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  size_t v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t buf[4];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)this + 17;
  if (__ldaxr((unsigned __int8 *)this + 17))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 17);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  v8 = (unint64_t *)((char *)this + 24);
  if (v7)
    v10 = *(_QWORD *)(v7 + 8);
  else
    v10 = 0;
  v11 = WTF::CString::mutableData((WTF::OSLogPrintStream *)((char *)this + 24));
  v12 = v10 - v9;
  v13 = vsnprintf((char *)(v11 + v9), v12, a2, a3);
  v14 = v13;
  if (v12 <= v13)
  {
    v28 = *v8;
    if (*v8)
    {
      v29 = *(_QWORD *)(v28 + 8);
      v14 = v29 + v13;
      v28 = 2 * v29;
    }
    if (v14 <= v28)
      v30 = v28;
    else
      v30 = v14;
    WTF::CString::grow((WTF::OSLogPrintStream *)((char *)this + 24), v30);
    v31 = WTF::CString::mutableData((WTF::OSLogPrintStream *)((char *)this + 24));
    v14 = vsnprintf((char *)(v31 + v9), v30 - v9, a2, a3);
  }
  v21 = (_BYTE *)WTF::CString::mutableData((WTF::OSLogPrintStream *)((char *)this + 24));
  v22 = 0;
  v23 = v14 + v9;
  do
  {
    while (v21[v9] == 10)
    {
      v21[v9] = 0;
      v24 = *((_QWORD *)this + 1);
      v25 = *((_BYTE *)this + 16);
      if (os_log_type_enabled(v24, v25))
      {
        *(_DWORD *)buf = 136446210;
        v34 = v21;
        _os_log_impl(&dword_197AA9000, v24, v25, "%{public}s", buf, 0xCu);
      }
      v21 += v9 + 1;
      v22 = 1;
      v23 = v23 - 1 - v9;
      v9 = 0;
      if (!v23)
        goto LABEL_18;
    }
    ++v9;
  }
  while (v9 < v23);
  if ((v22 & 1) == 0)
    goto LABEL_19;
LABEL_18:
  v26 = (void *)WTF::CString::mutableData((WTF::OSLogPrintStream *)((char *)this + 24));
  memmove(v26, v21, v23);
LABEL_19:
  *((_QWORD *)this + 4) = v23;
  v27 = __ldxr(v5);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v5))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v5, 0, v15, v16, v17, v18, v19, v20);
}

unint64_t WTF::pageSize(WTF *this)
{
  unint64_t result;

  result = WTF::s_pageSize;
  if (!WTF::s_pageSize)
  {
    result = sysconf(29);
    WTF::s_pageSize = result;
    if ((result & (result - 1)) != 0)
      goto LABEL_8;
    if (result > 0x4000)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF5640);
    }
    if (((result + 0x3FFF) & -(uint64_t)result) != 0x4000)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x197AF5620);
    }
  }
  return result;
}

uint64_t WTF::ParallelHelperClient::ParallelHelperClient(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t *v18;

  v9 = *a2;
  *a2 = 0;
  *a1 = v9;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  v10 = (unsigned __int8 *)(*(_QWORD *)(v9 + 8) + 4);
  LODWORD(v9) = __ldaxr(v10);
  if ((_DWORD)v9)
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  v11 = *a1;
  if (!*(_BYTE *)(*a1 + 108))
  {
    v12 = (_QWORD *)(v11 + 56);
    v18 = a1;
    v13 = *(unsigned int *)(v11 + 68);
    if ((_DWORD)v13 == *(_DWORD *)(v11 + 64))
    {
      v14 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v18);
      v15 = *(unsigned int *)(v11 + 68);
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v15) = *v14;
      *(_DWORD *)(v11 + 68) = v15 + 1;
      LODWORD(v15) = __ldxr(v10);
      if ((_DWORD)v15 != 1)
      {
LABEL_8:
        __clrex();
        goto LABEL_11;
      }
    }
    else
    {
      *(_QWORD *)(*v12 + 8 * v13) = a1;
      *(_DWORD *)(v11 + 68) = v13 + 1;
      v16 = __ldxr(v10);
      if (v16 != 1)
        goto LABEL_8;
    }
    if (!__stlxr(0, v10))
      return (uint64_t)a1;
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
    return (uint64_t)a1;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

void WTF::ParallelHelperClient::~ParallelHelperClient(unsigned int **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::ParallelHelperClient **v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v9 = (unsigned __int8 *)(*((_QWORD *)*this + 1) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  v11 = this[1];
  this[1] = 0;
  if (!v11)
    goto LABEL_9;
  v12 = v11 + 2;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    if (!*((_DWORD *)this + 4))
      goto LABEL_11;
  }
  else
  {
LABEL_9:
    if (!*((_DWORD *)this + 4))
      goto LABEL_11;
  }
  do
  {
    v15 = (uint64_t)(*this + 6);
    v16 = (unsigned __int8 *)(*((_QWORD *)*this + 1) + 4);
    v38 = 0x7FF0000000000000;
    v39 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v15, v16, (WTF::TimeWithDynamicClockType *)&v38);
  }
  while (*((_DWORD *)this + 4));
LABEL_11:
  v17 = (*this)[17];
  if ((_DWORD)v17)
  {
    v18 = (*this)[17];
    v19 = (WTF::ParallelHelperClient **)*((_QWORD *)*this + 7);
    while (*v19 != (WTF::ParallelHelperClient *)this)
    {
      ++v19;
      if (!--v18)
        goto LABEL_15;
    }
    *v19 = *(WTF::ParallelHelperClient **)(*((_QWORD *)*this + 7) + 8 * v17 - 8);
    v21 = (*this)[17];
    if (!v21)
    {
      __break(0xC471u);
      return;
    }
    (*this)[17] = v21 - 1;
    v22 = __ldxr(v9);
    if (v22 != 1)
      goto LABEL_20;
LABEL_16:
    if (!__stlxr(0, v9))
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_15:
  v20 = __ldxr(v9);
  if (v20 == 1)
    goto LABEL_16;
LABEL_20:
  __clrex();
LABEL_21:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
LABEL_22:
  v23 = this[1];
  this[1] = 0;
  if (!v23)
    goto LABEL_26;
  v24 = v23 + 2;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v23 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    v27 = *this;
    *this = 0;
    if (!v27)
      return;
  }
  else
  {
LABEL_26:
    v27 = *this;
    *this = 0;
    if (!v27)
      return;
  }
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v27);
    WTF::ParallelHelperPool::~ParallelHelperPool((WTF::ParallelHelperPool *)v27, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
  }
}

void WTF::ParallelHelperClient::setTask(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  char v32;

  v10 = (unsigned __int8 *)(*(_QWORD *)(*a1 + 8) + 4);
  v31 = v10;
  v32 = 1;
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  if (a1[1])
  {
    __break(0xC471u);
    JUMPOUT(0x197AF5A74);
  }
  v12 = *a2;
  *a2 = 0;
  v13 = (unsigned int *)a1[1];
  a1[1] = v12;
  if (!v13)
    goto LABEL_10;
  v14 = v13 + 2;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (v16)
  {
LABEL_10:
    WTF::ParallelHelperPool::didMakeWorkAvailable(*a1, &v31, a3, a4, a5, a6, a7, a8);
    if (!v32)
      return;
LABEL_11:
    v23 = v31;
    v24 = __ldxr(v31);
    if (v24 == 1)
    {
      if (!__stlxr(0, v31))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, v17, v18, v19, v20, v21, v22);
    return;
  }
  atomic_store(1u, v13 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  WTF::ParallelHelperPool::didMakeWorkAvailable(*a1, &v31, v25, v26, v27, v28, v29, v30);
  if (v32)
    goto LABEL_11;
}

void WTF::ParallelHelperPool::didMakeWorkAvailable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  _QWORD v32[2];
  char v33;
  _QWORD v34[3];

  if (*(_DWORD *)(a1 + 84) >= *(_DWORD *)(a1 + 104))
  {
LABEL_17:
    v23 = *(_QWORD *)(a1 + 16);
    v24 = (unsigned __int8 *)(v23 + 4);
    v25 = atomic_load((unsigned __int8 *)(v23 + 4));
    if ((v25 & 1) != 0)
    {
      atomic_store(0, v24);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v24, a2, a3, a4, a5, a6, a7, a8);
    }
    v26 = *(unsigned int *)(v23 + 20);
    if ((_DWORD)v26)
    {
      v27 = *(uint64_t **)(v23 + 8);
      v28 = 8 * v26;
      do
      {
        v29 = *v27;
        if (*(_BYTE *)(*v27 + 43))
        {
          if (*(_BYTE *)(v29 + 42))
          {
            *(_BYTE *)(v29 + 42) = 0;
            v30 = (unsigned __int8 *)(v29 + 44);
            v31 = atomic_load(v30);
            if ((v31 & 1) != 0)
            {
              v33 = 0;
              v32[0] = v30;
              v32[1] = &v33;
              v34[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
              v34[1] = v34;
              v34[2] = v32;
              WTF::ParkingLot::unparkOneImpl((uint64_t)v30, (unint64_t)v34, a3, a4, a5, a6, a7, a8);
            }
          }
        }
        else
        {
          WTF::AutomaticThread::start(v29);
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  else
  {
    while (1)
    {
      while (1)
      {
        v10 = WTF::fastMalloc((WTF *)0x48);
        WTF::ParallelHelperPool::Thread::Thread(v10, a2, a1, v11, v12, v13, v14, v15);
        v16 = *(unsigned int *)(a1 + 84);
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 80))
          break;
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16) = v10;
        *(_DWORD *)(a1 + 84) = v16 + 1;
        if ((v16 + 1) >= *(_DWORD *)(a1 + 104))
          goto LABEL_17;
      }
      v17 = v16 + (v16 >> 2);
      v18 = v17 >= 0x10 ? v17 + 1 : 16;
      v19 = v18 <= v16 + 1 ? v16 + 1 : v18;
      if (v19 >> 29)
        break;
      v20 = *(const void **)(a1 + 72);
      v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a1 + 80) = v19;
      *(_QWORD *)(a1 + 72) = v21;
      memcpy(v21, v20, 8 * v16);
      if (v20)
      {
        if (*(const void **)(a1 + 72) == v20)
        {
          *(_QWORD *)(a1 + 72) = 0;
          *(_DWORD *)(a1 + 80) = 0;
        }
        WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
      }
      v22 = *(unsigned int *)(a1 + 84);
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v22) = v10;
      *(_DWORD *)(a1 + 84) = v22 + 1;
      if ((v22 + 1) >= *(_DWORD *)(a1 + 104))
        goto LABEL_17;
    }
    __break(0xC471u);
  }
}

void WTF::ParallelHelperClient::finish(unsigned int **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;

  v9 = (unsigned __int8 *)(*((_QWORD *)*this + 1) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  v11 = this[1];
  this[1] = 0;
  if (!v11)
    goto LABEL_9;
  v12 = v11 + 2;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    if (!*((_DWORD *)this + 4))
      goto LABEL_11;
  }
  else
  {
LABEL_9:
    if (!*((_DWORD *)this + 4))
      goto LABEL_11;
  }
  do
  {
    v15 = (uint64_t)(*this + 6);
    v16 = (unsigned __int8 *)(*((_QWORD *)*this + 1) + 4);
    v18 = 0x7FF0000000000000;
    v19 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v15, v16, (WTF::TimeWithDynamicClockType *)&v18);
  }
  while (*((_DWORD *)this + 4));
LABEL_11:
  v17 = __ldxr(v9);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v9))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

unsigned int *WTF::ParallelHelperClient::doSomeHelping(unsigned int **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int *result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;

  v23 = 0;
  v9 = (unsigned __int8 *)(*((_QWORD *)*this + 1) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = this[1];
  if (v11)
  {
    ++*((_DWORD *)this + 4);
    v12 = v11 + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v23;
  v23 = v11;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
    v11 = v23;
  }
  v18 = __ldxr(v9);
  if (v18 == 1)
  {
    if (!__stlxr(0, v9))
    {
      if (!v11)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  if (v11)
LABEL_17:
    WTF::ParallelHelperClient::runTask((uint64_t)this, &v23);
LABEL_18:
  result = v23;
  v23 = 0;
  if (result)
  {
    v20 = result + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::ParallelHelperClient::runTask(uint64_t a1, _QWORD *a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 *v21;

  if (!*(_DWORD *)(a1 + 16))
    goto LABEL_27;
  if (!*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197AF603CLL);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v11 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 4);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_7:
  if (!*(_DWORD *)(a1 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x197AF605CLL);
  }
  v13 = *(unsigned int **)(a1 + 8);
  if (!v13)
  {
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_15;
  }
  if (v13 != (unsigned int *)*a2)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x197AF601CLL);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = v13 + 2;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v13 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_15:
  v17 = *(_DWORD *)(a1 + 16) - 1;
  *(_DWORD *)(a1 + 16) = v17;
  if (!v17)
  {
    v18 = (unsigned __int8 *)(*(_QWORD *)a1 + 24);
    v19 = atomic_load(v18);
    if ((v19 & 1) != 0)
    {
      atomic_store(0, v18);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v18, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  v20 = __ldxr(v11);
  if (v20 != 1)
  {
    __clrex();
    v21 = v11;
    goto LABEL_21;
  }
  if (__stlxr(0, v11))
  {
    v21 = v11;
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v5, v6, v7, v8, v9, v10);
  }
}

void WTF::ParallelHelperClient::runTaskInParallel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;

  WTF::ParallelHelperClient::setTask((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  WTF::ParallelHelperClient::doSomeHelping((unsigned int **)a1, v9, v10, v11, v12, v13, v14, v15);
  v22 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 4);
  if (__ldaxr(v22))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v22);
    goto LABEL_5;
  }
  if (__stxr(1u, v22))
    goto LABEL_4;
LABEL_5:
  v24 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v24)
    goto LABEL_9;
  v25 = v24 + 2;
  do
  {
    v26 = __ldaxr(v25);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v25));
  if (!v27)
  {
    atomic_store(1u, v24 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    if (!*(_DWORD *)(a1 + 16))
      goto LABEL_11;
  }
  else
  {
LABEL_9:
    if (!*(_DWORD *)(a1 + 16))
      goto LABEL_11;
  }
  do
  {
    v28 = *(_QWORD *)a1 + 24;
    v29 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 4);
    v31 = 0x7FF0000000000000;
    v32 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v28, v29, (WTF::TimeWithDynamicClockType *)&v31);
  }
  while (*(_DWORD *)(a1 + 16));
LABEL_11:
  v30 = __ldxr(v22);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v22))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, v16, v17, v18, v19, v20, v21);
}

uint64_t WTF::ParallelHelperPool::ParallelHelperPool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;

  *(_DWORD *)a1 = 1;
  v6 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  *(_BYTE *)(v7 + 4) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = WTF::cryptographicallyRandomNumber<unsigned int>(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_DWORD *)(a1 + 32) = v15;
  if (v15 <= 1)
    v16 = 1;
  else
    v16 = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = ((v16 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v16 << 23)) ^ ((((unint64_t)v16 << 23) ^ v16) >> 17);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;

  *(_DWORD *)a1 = 1;
  v6 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  *(_BYTE *)(v7 + 4) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = WTF::cryptographicallyRandomNumber<unsigned int>(v7, v8, v9, v10, v11, v12, v13, v14);
  *(_DWORD *)(a1 + 32) = v15;
  if (v15 <= 1)
    v16 = 1;
  else
    v16 = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = ((v16 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v16 << 23)) ^ ((((unint64_t)v16 << 23) ^ v16) >> 17);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void WTF::ParallelHelperPool::~ParallelHelperPool(WTF::ParallelHelperPool *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v52)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 **v53;
  timespec __tp;
  void (**v55)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*((_DWORD *)this + 17))
  {
    __break(0xC471u);
    JUMPOUT(0x197AF66D8);
  }
  v9 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_6:
  *((_BYTE *)this + 108) = 1;
  v11 = *((_QWORD *)this + 2);
  v12 = (unsigned __int8 *)(v11 + 4);
  v13 = atomic_load((unsigned __int8 *)(v11 + 4));
  if ((v13 & 1) != 0)
  {
    atomic_store(0, v12);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(v11 + 8);
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      if (*(_BYTE *)(*v15 + 43))
      {
        if (*(_BYTE *)(v17 + 42))
        {
          *(_BYTE *)(v17 + 42) = 0;
          v18 = (unsigned __int8 *)(v17 + 44);
          v19 = atomic_load(v18);
          if ((v19 & 1) != 0)
          {
            LOBYTE(v47) = 0;
            v51 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v18;
            v52 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v47;
            __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
            __tp.tv_nsec = (uint64_t)&__tp;
            v55 = &v51;
            WTF::ParkingLot::unparkOneImpl((uint64_t)v18, (unint64_t)&__tp, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        WTF::AutomaticThread::start(v17);
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v20 = __ldxr(v9);
  if (v20 == 1)
  {
    if (!__stlxr(0, v9))
    {
      v21 = *((_QWORD *)this + 9);
      v22 = *((unsigned int *)this + 21);
      if (!(_DWORD)v22)
        goto LABEL_60;
      goto LABEL_22;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  v21 = *((_QWORD *)this + 9);
  v22 = *((unsigned int *)this + 21);
  if (!(_DWORD)v22)
    goto LABEL_60;
LABEL_22:
  v46 = v21 + 8 * v22;
  do
  {
    v23 = *(_QWORD *)v21;
    v24 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v21 + 16) + 4);
    if (__ldaxr(v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, v24))
    {
      goto LABEL_30;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
LABEL_30:
    if (*(_BYTE *)(v23 + 41))
    {
      while (1)
      {
        v26 = *(_QWORD *)(v23 + 16);
        v47 = INFINITY;
        v48 = 0;
        __tp.tv_sec = 0;
        __tp.tv_nsec = 0;
        clock_gettime(_CLOCK_REALTIME, &__tp);
        if (v48)
        {
          __break(0xC471u);
          JUMPOUT(0x197AF66B8);
        }
        v27 = (unsigned __int8 *)(v26 + 4);
        if (v47 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
          break;
        v28 = __ldxr(v27);
        if (v28 == 1)
        {
          if (!__stlxr(0, v27))
            goto LABEL_41;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, a3, a4, a5, a6, a7, a8);
        if (!__ldaxr(v27))
        {
LABEL_45:
          if (!__stxr(1u, v27))
            goto LABEL_34;
          goto LABEL_33;
        }
LABEL_32:
        __clrex();
LABEL_33:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v27);
LABEL_34:
        if (!*(_BYTE *)(v23 + 41))
          goto LABEL_47;
      }
      v49 = v27;
      v50 = v23 + 45;
      __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      __tp.tv_nsec = (uint64_t)&__tp;
      v55 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v50;
      v51 = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v52 = &v51;
      v53 = &v49;
      WTF::ParkingLot::parkConditionallyImpl(v23 + 45, (uint64_t)&__tp, (uint64_t)&v51, (WTF::TimeWithDynamicClockType *)&v47);
LABEL_41:
      if (!__ldaxr(v27))
        goto LABEL_45;
      goto LABEL_32;
    }
LABEL_47:
    v31 = __ldxr(v24);
    if (v31 != 1)
    {
      __clrex();
LABEL_24:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_25;
    }
    if (__stlxr(0, v24))
      goto LABEL_24;
LABEL_25:
    v21 += 8;
  }
  while (v21 != v46);
  v32 = *((unsigned int *)this + 21);
  v21 = *((_QWORD *)this + 9);
  if ((_DWORD)v32)
  {
    v33 = v21 + 8 * v32;
    do
    {
      while (1)
      {
        v34 = *(unsigned int **)v21;
        *(_QWORD *)v21 = 0;
        if (v34)
        {
          v35 = v34 + 2;
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            break;
        }
        v21 += 8;
        if (v21 == v33)
          goto LABEL_59;
      }
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
      v21 += 8;
    }
    while (v21 != v33);
LABEL_59:
    v21 = *((_QWORD *)this + 9);
  }
LABEL_60:
  if (v21)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *((_QWORD *)this + 7);
  if (v38)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
  }
  v39 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v39)
    goto LABEL_67;
  do
  {
    v40 = __ldaxr((unsigned int *)v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, (unsigned int *)v39));
  if (v41)
  {
LABEL_67:
    v42 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v42)
      return;
    goto LABEL_68;
  }
  atomic_store(1u, (unsigned int *)v39);
  v45 = *(_QWORD *)(v39 + 8);
  if (v45)
  {
    *(_QWORD *)(v39 + 8) = 0;
    *(_DWORD *)(v39 + 16) = 0;
    WTF::fastFree(v45, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
  v42 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v42)
  {
    do
    {
LABEL_68:
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((unint64_t)v42, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::ParallelHelperPool::ensureThreads(WTF::ParallelHelperPool *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  char v24;

  v10 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 4);
  v23 = v10;
  v24 = 1;
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  if (*((_DWORD *)this + 26) > a2)
    goto LABEL_21;
  *((_DWORD *)this + 26) = a2;
  v12 = *((unsigned int *)this + 17);
  if (v12 < 2)
  {
    if ((_DWORD)v12 == 1)
    {
      v13 = 0;
      v12 = 1;
      goto LABEL_12;
    }
LABEL_21:
    if (!v24)
      return;
    v21 = v23;
    v22 = __ldxr(v23);
    if (v22 == 1)
    {
      if (!__stlxr(0, v23))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  v14 = *((_QWORD *)this + 5);
  v15 = *((_QWORD *)this + 6);
  do
  {
    v16 = v14 ^ (v14 << 23);
    v14 = v15;
    v15 ^= (v15 >> 26) ^ (v16 >> 17) ^ v16;
  }
  while (0x100000000 / v12 * v12 <= (v15 + v14));
  *((_QWORD *)this + 5) = v14;
  *((_QWORD *)this + 6) = v15;
  v13 = ((int)v15 + (int)v14) % v12;
LABEL_12:
  v17 = *((_QWORD *)this + 7);
  v18 = v13;
  v19 = v17 + 8 * v13;
  v20 = v12 - v18;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v19 + 8))
    {
LABEL_20:
      WTF::ParallelHelperPool::didMakeWorkAvailable((uint64_t)this, &v23, a3, a4, a5, a6, a7, a8);
      goto LABEL_21;
    }
    v19 += 8;
    --v20;
  }
  while (v20);
  if (!(_DWORD)v18)
    goto LABEL_21;
  while (v12)
  {
    if (*(_QWORD *)(*(_QWORD *)v17 + 8))
      goto LABEL_20;
    v17 += 8;
    --v12;
    if (!--v18)
      goto LABEL_21;
  }
  __break(0xC471u);
}

unsigned int *WTF::ParallelHelperPool::doSomeHelping(unsigned int *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned __int8 *v9;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;

  v8 = this;
  v34 = 0;
  v9 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 4);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  this = (unsigned int *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = v8[17];
  if (v11 >= 2)
  {
    v13 = *((_QWORD *)v8 + 5);
    v14 = *((_QWORD *)v8 + 6);
    do
    {
      v15 = v13 ^ (v13 << 23);
      v13 = v14;
      v14 ^= (v14 >> 26) ^ (v15 >> 17) ^ v15;
    }
    while (0x100000000 / v11 * v11 <= (v14 + v13));
    *((_QWORD *)v8 + 5) = v13;
    *((_QWORD *)v8 + 6) = v14;
    v12 = ((int)v14 + (int)v13) % v11;
    goto LABEL_11;
  }
  if ((_DWORD)v11 != 1)
  {
LABEL_18:
    v22 = __ldxr(v9);
    if (v22 == 1)
    {
      if (!__stlxr(0, v9))
      {
LABEL_36:
        this = v34;
        v34 = 0;
        if (this)
        {
          v31 = this + 2;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, this + 2);
            return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
          }
        }
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_36;
  }
  v12 = 0;
  v11 = 1;
LABEL_11:
  v16 = (uint64_t *)*((_QWORD *)v8 + 7);
  v17 = v12;
  v18 = &v16[v12];
  v19 = v11 - v12;
  do
  {
    v20 = *v18;
    v21 = *(unsigned int **)(*v18 + 8);
    if (v21)
    {
LABEL_21:
      ++*(_DWORD *)(v20 + 16);
      v23 = v21 + 2;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v25 = v34;
      v34 = v21;
      if (!v25)
        goto LABEL_27;
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v25 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        v30 = __ldxr(v9);
        if (v30 == 1)
        {
LABEL_28:
          if (!__stlxr(0, v9))
            goto LABEL_35;
          goto LABEL_34;
        }
      }
      else
      {
LABEL_27:
        v29 = __ldxr(v9);
        if (v29 == 1)
          goto LABEL_28;
      }
      __clrex();
LABEL_34:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
LABEL_35:
      WTF::ParallelHelperClient::runTask(v20, &v34);
      goto LABEL_36;
    }
    ++v18;
    --v19;
  }
  while (v19);
  if (!(_DWORD)v17)
    goto LABEL_18;
  while (v11)
  {
    v20 = *v16;
    v21 = *(unsigned int **)(*v16 + 8);
    if (v21)
      goto LABEL_21;
    ++v16;
    --v11;
    if (!--v17)
      goto LABEL_18;
  }
  __break(0xC471u);
  return this;
}

uint64_t WTF::ParallelHelperPool::Thread::Thread(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v24;
  uint64_t v25;

  v10 = *(unsigned int **)(a3 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(a3 + 16);
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    do
      v14 = __ldaxr(v10);
    while (__stlxr(v14 + 1, v10));
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = off_1E3571898;
    do
      v15 = __ldaxr(v10);
    while (__stlxr(v15 + 1, v10));
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 16);
    do
      v24 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v24 + 1, (unsigned int *)v12));
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = off_1E3571898;
  }
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = 0x4024000000000000;
  *(_WORD *)(a1 + 40) = 256;
  *(_DWORD *)(a1 + 42) = 0;
  v25 = a1;
  v16 = (_QWORD *)(v12 + 8);
  v17 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v12 + 16))
  {
    v18 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v25);
    v17 = *(unsigned int *)(v12 + 20);
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v17) = *v18;
  }
  else
  {
    *(_QWORD *)(*v16 + 8 * v17) = a1;
  }
  *(_DWORD *)(v12 + 20) = v17 + 1;
  if (v10)
  {
    do
    {
      v19 = __ldaxr(v10);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v10));
    if (!v20)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v21 = __ldaxr(v10);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v10));
    if (!v22)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)a1 = off_1E3572038;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  return a1;
}

void WTF::ParallelHelperPool::Thread::~Thread(WTF::ParallelHelperPool::Thread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::AutomaticThread *v13;

  v9 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v9)
    goto LABEL_5;
  v10 = v9 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    v13 = this;
  }
  else
  {
LABEL_5:
    v13 = this;
  }
  WTF::AutomaticThread::~AutomaticThread(v13, a2, a3, a4, a5, a6, a7, a8);
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v9)
    goto LABEL_5;
  v10 = v9 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    WTF::AutomaticThread::~AutomaticThread(this, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
LABEL_5:
    WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::ParallelHelperPool::Thread::name(WTF::ParallelHelperPool::Thread *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 88);
}

uint64_t WTF::ParallelHelperPool::Thread::poll(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;

  v1 = *(_QWORD *)(result + 48);
  if (*(_BYTE *)(v1 + 108))
    return 1;
  v2 = *(unsigned int *)(v1 + 68);
  if (v2 >= 2)
  {
    v4 = *(_QWORD *)(v1 + 40);
    v5 = *(_QWORD *)(v1 + 48);
    do
    {
      v6 = v4 ^ (v4 << 23);
      v4 = v5;
      v5 ^= (v5 >> 26) ^ (v6 >> 17) ^ v6;
    }
    while (0x100000000 / v2 * v2 <= (v5 + v4));
    *(_QWORD *)(v1 + 40) = v4;
    *(_QWORD *)(v1 + 48) = v5;
    v3 = ((int)v5 + (int)v4) % v2;
  }
  else
  {
    if ((_DWORD)v2 != 1)
    {
LABEL_16:
      *(_QWORD *)(result + 56) = 0;
      return 2;
    }
    v3 = 0;
    v2 = 1;
  }
  v7 = *(uint64_t **)(v1 + 56);
  v8 = v3;
  v9 = &v7[v3];
  v10 = v2 - v3;
  do
  {
    v11 = *v9;
    if (*(_QWORD *)(*v9 + 8))
    {
LABEL_17:
      *(_QWORD *)(result + 56) = v11;
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        ++*(_DWORD *)(v11 + 16);
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      v15 = *(unsigned int **)(result + 64);
      *(_QWORD *)(result + 64) = v12;
      if (!v15)
        return 0;
      v16 = v15 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (v17 != 1)
        return 0;
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
      return 0;
    }
    ++v9;
    --v10;
  }
  while (v10);
  if (!(_DWORD)v8)
    goto LABEL_16;
  while (v2)
  {
    v11 = *v7;
    if (*(_QWORD *)(*v7 + 8))
      goto LABEL_17;
    ++v7;
    --v2;
    if (!--v8)
      goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::ParallelHelperPool::Thread::work(WTF::ParallelHelperPool::Thread *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WTF::ParallelHelperClient::runTask(*((_QWORD *)this + 7), (_QWORD *)this + 8);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (!v2)
    return 0;
  v3 = v2 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return 0;
  atomic_store(1u, v2 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  return 0;
}

uint64_t WTF::ParkingLot::parkConditionallyImpl(uint64_t a1, uint64_t a2, uint64_t a3, WTF::TimeWithDynamicClockType *a4)
{
  unint64_t v6;
  pthread_key_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  unsigned int v29;
  double *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t j;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  WTF::_anonymous_namespace_::Hashtable *v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  _QWORD *tv_sec;
  uint64_t i;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t StatusReg;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  pthread_mutex_t *v89;
  double v90;
  int v91;
  double v92;
  double v93;
  uint64_t v96;
  WTF::_anonymous_namespace_ *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::_anonymous_namespace_ *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  WTF::_anonymous_namespace_ *v114;
  unint64_t *v115;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v122;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  double v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unsigned int v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  _QWORD *v159;
  unsigned int tv_nsec_high;
  uint64_t v161;
  uint64_t *v162;
  WTF::TimeWithDynamicClockType *v164;
  uint64_t v165;
  _QWORD *v167;
  uint64_t v168;
  double v169;
  WTF *p_tp;
  uint64_t v171;
  char v172;
  char **v173;
  char *v174;
  timespec __tp;

  v6 = atomic_load(&qword_1ECF58268);
  if (v6 != -1)
  {
    __tp.tv_sec = (__darwin_time_t)&v174;
    p_tp = (WTF *)&__tp;
  }
  v7 = (pthread_key_t *)qword_1ECF58260;
  v8 = (uint64_t)pthread_getspecific(*(_QWORD *)qword_1ECF58260);
  v164 = a4;
  v165 = a1;
  if (v8)
  {
    v16 = (uint64_t *)v8;
    if (*(_QWORD *)v8)
      goto LABEL_87;
  }
  else
  {
    v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    v16[1] = (uint64_t)v7;
    pthread_setspecific(*v7, v16);
    *v16 = 0;
  }
  v17 = WTF::fastMalloc((WTF *)0x98);
  *(_DWORD *)v17 = 1;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8)
    v8 = WTF::Thread::initializeCurrentTLS(0);
  do
    v18 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v18 + 1, (unsigned int *)v8));
  *(_QWORD *)(v17 + 8) = v8;
  *(_QWORD *)(v17 + 16) = 850045863;
  HIDWORD(v19) = 0;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 80) = 1018212795;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  do
  {
    while (1)
    {
      v20 = atomic_load((unsigned int *)&_MergedGlobals_12);
      v21 = __ldaxr((unsigned int *)&_MergedGlobals_12);
      if (v21 == v20)
        break;
      __clrex();
    }
    v22 = v20 + 1;
  }
  while (__stlxr(v20 + 1, (unsigned int *)&_MergedGlobals_12));
  v23 = (_DWORD *)atomic_load(&qword_1ECF58280);
  if (v23)
  {
    LODWORD(v19) = *v23;
    if ((double)v19 / (double)v22 >= 3.0)
      goto LABEL_84;
  }
  v24 = (unsigned int *)atomic_load(&qword_1ECF58280);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197AF7BF8);
  }
  v25 = *v24;
  if ((double)*v24 / (double)v22 < 3.0)
  {
    v161 = v17;
    v162 = v16;
    tv_nsec_high = HIDWORD(__tp.tv_nsec);
    if (HIDWORD(__tp.tv_nsec))
    {
      v158 = v24;
      if (HIDWORD(__tp.tv_nsec) >> 29)
      {
        __break(0xC471u);
LABEL_205:
        JUMPOUT(0x197AF73E0);
      }
      v26 = (WTF *)(8 * HIDWORD(__tp.tv_nsec));
      v27 = (_QWORD *)WTF::fastMalloc(v26);
      memcpy(v27, (const void *)__tp.tv_sec, (size_t)v26);
      v28 = 0;
      v29 = 0;
      v167 = (_QWORD *)((char *)v26 + (_QWORD)v27);
      p_tp = 0;
      v171 = 0;
      v159 = v27;
      do
      {
        v30 = (double *)*v27;
        while (1)
        {
          v169 = 0.0;
          if (!*(_QWORD *)v30)
            break;
          v32 = mach_absolute_time();
          v34 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
          if (v34 != -1)
          {
            v174 = &v172;
            v173 = &v174;
            std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v173, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
          }
          v35 = *v30;
          if (!*(_QWORD *)v30)
            break;
          if (*(_QWORD *)&v35 == *((_QWORD *)v30 + 1))
            v30[1] = 0.0;
          LODWORD(v33) = dword_1ECF4400C;
          v36 = (double)(v32 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v33 * 1000000000.0);
          v37 = v30[3];
          *v30 = *(double *)(*(_QWORD *)&v35 + 136);
          *(_QWORD *)(*(_QWORD *)&v35 + 136) = 0;
          if (v36 > v37)
          {
            v38 = *((_QWORD *)v30 + 6);
            v39 = *((_QWORD *)v30 + 5) ^ (*((_QWORD *)v30 + 5) << 23);
            v40 = (v38 >> 26) ^ (v39 >> 17) ^ v38 ^ v39;
            *((_QWORD *)v30 + 5) = v38;
            *((_QWORD *)v30 + 6) = v40;
            v30[3] = v36 + (double)((v40 + v38) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 / 1000.0;
          }
          v169 = v35;
          if (v29 == (_DWORD)v171)
          {
            v31 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&p_tp, v29 + 1, (unint64_t)&v169);
            v29 = HIDWORD(v171);
            v28 = p_tp;
            *((_QWORD *)p_tp + HIDWORD(v171)) = *v31;
          }
          else
          {
            *((double *)v28 + v29) = v35;
          }
          HIDWORD(v171) = ++v29;
        }
        ++v27;
      }
      while (v27 != v167);
      v24 = v158;
      v45 = (unint64_t)v159;
      v46 = (WTF::_anonymous_namespace_::Hashtable *)(6 * v22);
      if (v46 > *v158)
        goto LABEL_44;
    }
    else
    {
      v45 = 0;
      v29 = 0;
      v28 = 0;
      p_tp = 0;
      v171 = 0;
      v46 = (WTF::_anonymous_namespace_::Hashtable *)(6 * v22);
      if (v46 > v25)
      {
LABEL_44:
        if (v29)
        {
          v48 = 8 * v29;
          v49 = tv_nsec_high;
          v17 = v161;
          do
          {
            v53 = *(_QWORD *)v28;
            v54 = ~(*(_QWORD *)(*(_QWORD *)v28 + 128) << 32) + *(_QWORD *)(*(_QWORD *)v28 + 128);
            v55 = (v54 ^ (v54 >> 22)) + ~((v54 ^ (v54 >> 22)) << 13);
            v56 = (9 * (v55 ^ (v55 >> 8))) ^ ((9 * (v55 ^ (v55 >> 8))) >> 15);
            v57 = (unint64_t *)&v47[2
                                         * ((((v56 + ~(v56 << 27)) >> 31) ^ ((_DWORD)v56
                                                                                         + ~((_DWORD)v56 << 27)))
                                          % *v47)
                                         + 2];
            v50 = atomic_load(v57);
            if (!v50)
            {
              if (v49)
              {
                v50 = *(_QWORD *)(v45 + 8 * v49-- - 8);
              }
              else
              {
                v50 = WTF::fastMalloc((WTF *)0x78);
                v49 = 0;
                *(_OWORD *)v50 = 0u;
                *(_OWORD *)(v50 + 16) = 0u;
                *(_DWORD *)(v50 + 32) = v50;
                if (v50 <= 1)
                  v58 = 1;
                else
                  v58 = v50;
                *(_QWORD *)(v50 + 40) = v58;
                *(_QWORD *)(v50 + 48) = ((v58 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v58 << 23)) ^ ((((unint64_t)v58 << 23) ^ v58) >> 17);
              }
              atomic_store(v50, v57);
            }
            v51 = *(_QWORD *)(v50 + 8);
            if (v51)
              v52 = (_QWORD *)(v51 + 136);
            else
              v52 = (_QWORD *)v50;
            *v52 = v53;
            *(_QWORD *)(v50 + 8) = v53;
            v28 = (WTF *)((char *)v28 + 8);
            v48 -= 8;
          }
          while (v48);
        }
        else
        {
          v49 = tv_nsec_high;
          v17 = v161;
        }
        if (*v47)
          v59 = v49 == 0;
        else
          v59 = 1;
        a1 = v165;
        v16 = v162;
        if (!v59)
        {
          v119 = 1;
          do
          {
            v122 = (unint64_t *)&v47[2 * v119];
            if (!atomic_load(v122))
            {
              v124 = *(_QWORD *)(v45 + 8 * v49-- - 8);
              atomic_store(v124, v122);
            }
          }
          while (v119++ < *v47 && v49 != 0);
        }
        do
        {
          v60 = __ldaxr(&qword_1ECF58280);
          if ((unsigned int *)v60 != v24)
          {
            __clrex();
            __break(0xC471u);
            JUMPOUT(0x197AF7C18);
          }
        }
        while (__stlxr((unint64_t)v47, &qword_1ECF58280));
        if (HIDWORD(__tp.tv_nsec))
        {
          tv_sec = (_QWORD *)__tp.tv_sec;
          for (i = 8 * HIDWORD(__tp.tv_nsec); i; i -= 8)
          {
            v63 = (unint64_t *)(*tv_sec + 16);
            v64 = __ldxr(v63);
            if (v64 == 1)
            {
              if (!__stlxr(0, v63))
                goto LABEL_74;
            }
            else
            {
              __clrex();
            }
            WTF::WordLock::unlockSlow((WTF::WordLock *)v63);
LABEL_74:
            ++tv_sec;
          }
        }
        if (p_tp)
          WTF::fastFree((unint64_t)p_tp, v9, v10, v11, v12, v13, v14, v15);
        if (v45)
          WTF::fastFree(v45, v9, v10, v11, v12, v13, v14, v15);
        goto LABEL_82;
      }
    }
    __break(0xC471u);
    goto LABEL_205;
  }
  if (HIDWORD(__tp.tv_nsec))
  {
    v41 = (_QWORD *)__tp.tv_sec;
    for (j = 8 * HIDWORD(__tp.tv_nsec); j; j -= 8)
    {
      v43 = (unint64_t *)(*v41 + 16);
      v44 = __ldxr(v43);
      if (v44 == 1)
      {
        if (!__stlxr(0, v43))
          goto LABEL_39;
      }
      else
      {
        __clrex();
      }
      WTF::WordLock::unlockSlow((WTF::WordLock *)v43);
LABEL_39:
      ++v41;
    }
  }
LABEL_82:
  v8 = __tp.tv_sec;
  if (__tp.tv_sec)
    WTF::fastFree(__tp.tv_sec, v9, v10, v11, v12, v13, v14, v15);
LABEL_84:
  v65 = *v16;
  *v16 = v17;
  if (!v65)
    goto LABEL_87;
  do
  {
    v66 = __ldaxr((unsigned int *)v65);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, (unsigned int *)v65));
  if (v67)
  {
LABEL_87:
    v68 = *v16;
    *(_QWORD *)(v68 + 144) = 0;
    if (!*(_QWORD *)(v68 + 128))
      goto LABEL_88;
LABEL_201:
    __break(0xC471u);
    JUMPOUT(0x197AF7BD8);
  }
  atomic_store(1u, (unsigned int *)v65);
  do
  {
    while (1)
    {
      v138 = atomic_load((unsigned int *)&_MergedGlobals_12);
      v139 = __ldaxr((unsigned int *)&_MergedGlobals_12);
      if (v139 == v138)
        break;
      __clrex();
    }
  }
  while (__stlxr(v138 - 1, (unsigned int *)&_MergedGlobals_12));
  pthread_cond_destroy((pthread_cond_t *)(v65 + 80));
  pthread_mutex_destroy((pthread_mutex_t *)(v65 + 16));
  v147 = *(unsigned int **)(v65 + 8);
  *(_QWORD *)(v65 + 8) = 0;
  if (v147)
  {
    do
    {
      v148 = __ldaxr(v147);
      v149 = v148 - 1;
    }
    while (__stlxr(v149, v147));
    if (!v149)
    {
      atomic_store(1u, v147);
      WTF::Thread::~Thread((WTF::Thread *)v147, v140, v141, v142, v143, v144, v145, v146);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
  }
  WTF::fastFree(v65, v140, v141, v142, v143, v144, v145, v146);
  v68 = *v16;
  *(_QWORD *)(v68 + 144) = 0;
  if (*(_QWORD *)(v68 + 128))
    goto LABEL_201;
LABEL_88:
  v168 = v68;
  v69 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
  v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
  v72 = (v71 >> 31) ^ v71;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    v74 = v8;
    v75 = (unint64_t *)(v8 + 8 * (v72 % *(_DWORD *)v8) + 8);
    while (1)
    {
      v76 = atomic_load(v75);
      if (v76)
        break;
      v8 = WTF::fastMalloc((WTF *)0x78);
      v76 = v8;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_DWORD *)(v8 + 32) = v8;
      if (v8 <= 1)
        v77 = 1;
      else
        v77 = v8;
      *(_QWORD *)(v8 + 40) = v77;
      *(_QWORD *)(v8 + 48) = ((v77 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v77 << 23)) ^ ((((unint64_t)v77 << 23) ^ v77) >> 17);
      if (__ldaxr(v75))
      {
        __clrex();
      }
      else if (!__stlxr(v8, v75))
      {
        break;
      }
      v8 = *(_QWORD *)(StatusReg + 752);
      if (v8)
      {
        if (v76 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v76 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v76)) & 1) == 0)
        {
          if (v76 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v76 >> 24)
          {
            v11 = 0;
          }
          else
          {
            v11 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v76 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v76) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v11 == 1)
              goto LABEL_102;
          }
          v8 = bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v8, v76, 1, v11, v12, v13, v14, v15);
        }
        else
        {
LABEL_102:
          v79 = *(unsigned int *)(v8 + 8000);
          if (v79 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v8, v76, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
          }
          else
          {
            *(_QWORD *)(v8 + 8 * v79) = v76 | 0x5000000000000;
            *(_DWORD *)(v8 + 8000) = v79 + 1;
          }
        }
      }
      else
      {
        v8 = pas_try_deallocate_slow_no_cache(v76, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
    v80 = (unint64_t *)(v76 + 16);
    if (__ldaxr((unint64_t *)(v76 + 16)))
    {
      __clrex();
      goto LABEL_114;
    }
    if (__stxr(1uLL, v80))
LABEL_114:
      WTF::WordLock::lockSlow((WTF::WordLock *)(v76 + 16));
    v82 = atomic_load(&qword_1ECF58280);
    if (v74 != v82)
    {
      v83 = __ldxr(v80);
      if (v83 != 1)
      {
        __clrex();
LABEL_90:
        WTF::WordLock::unlockSlow((WTF::WordLock *)(v76 + 16));
        continue;
      }
      if (__stlxr(0, v80))
        goto LABEL_90;
      continue;
    }
    break;
  }
  v84 = (*(uint64_t (**)(_QWORD))a2)(*(_QWORD *)(a2 + 8));
  v85 = v84;
  if (v84)
  {
    *(_QWORD *)(v168 + 128) = v165;
    v86 = *(_QWORD *)(v76 + 8);
    if (v86)
      v87 = (_QWORD *)(v86 + 136);
    else
      v87 = (_QWORD *)v76;
    *v87 = v168;
    *(_QWORD *)(v76 + 8) = v168;
  }
  v88 = __ldxr(v80);
  if (v88 != 1)
  {
    __clrex();
LABEL_140:
    WTF::WordLock::unlockSlow((WTF::WordLock *)(v76 + 16));
    if (v85)
      goto LABEL_127;
    return 0;
  }
  if (__stlxr(0, v80))
    goto LABEL_140;
  if (!v84)
    return 0;
LABEL_127:
  (*(void (**)(_QWORD))a3)(*(_QWORD *)(a3 + 8));
  v89 = (pthread_mutex_t *)(v168 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v168 + 16));
  if (!*(_QWORD *)(v168 + 128))
  {
LABEL_142:
    pthread_mutex_unlock(v89);
    return 1;
  }
  while (2)
  {
    v90 = COERCE_DOUBLE(WTF::TimeWithDynamicClockType::nowWithSameClock(v164));
    if (*((_DWORD *)v164 + 2) != v91)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF7B44);
    }
    if (*(double *)v164 > v90)
    {
      WTF::TimeWithDynamicClockType::approximateWallTime((uint64_t)v164);
      v93 = v92;
      if (fabs(v92) == INFINITY)
      {
        if (v92 != -INFINITY)
LABEL_138:
          pthread_cond_wait((pthread_cond_t *)(v168 + 80), v89);
      }
      else
      {
        __tp.tv_sec = 0;
        __tp.tv_nsec = 0;
        clock_gettime(_CLOCK_REALTIME, &__tp);
        if (v93 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
        {
          if (v93 > 9.22337204e18)
            goto LABEL_138;
          __tp.tv_sec = (uint64_t)v93;
          __tp.tv_nsec = (uint64_t)((v93 - (double)(uint64_t)v93) * 1000000000.0);
          pthread_cond_timedwait((pthread_cond_t *)(v168 + 80), v89, &__tp);
        }
      }
      pthread_mutex_unlock(v89);
      pthread_mutex_lock(v89);
      if (!*(_QWORD *)(v168 + 128))
        goto LABEL_142;
      continue;
    }
    break;
  }
  v96 = *(_QWORD *)(v168 + 128);
  v97 = (WTF::_anonymous_namespace_ *)pthread_mutex_unlock(v89);
  if (!v96)
    return 1;
  v113 = atomic_load((unint64_t *)v105 + v72 % *(_DWORD *)v105 + 1);
  if (!v113)
    goto LABEL_184;
  v114 = v105;
  while (2)
  {
    v115 = (unint64_t *)(v113 + 16);
    if (__ldaxr((unint64_t *)(v113 + 16)))
    {
      __clrex();
      goto LABEL_154;
    }
    if (__stxr(1uLL, v115))
LABEL_154:
      WTF::WordLock::lockSlow((WTF::WordLock *)(v113 + 16));
    v117 = atomic_load(&qword_1ECF58280);
    if (v114 != (WTF::_anonymous_namespace_ *)v117)
    {
      v118 = __ldxr(v115);
      if (v118 == 1)
      {
        if (!__stlxr(0, v115))
        {
LABEL_150:
          v114 = v105;
          v113 = atomic_load((unint64_t *)v105 + v72 % *(_DWORD *)v105 + 1);
          if (!v113)
            goto LABEL_184;
          continue;
        }
      }
      else
      {
        __clrex();
      }
      WTF::WordLock::unlockSlow((WTF::WordLock *)(v113 + 16));
      goto LABEL_150;
    }
    break;
  }
  if (!*(_QWORD *)v113)
    goto LABEL_173;
  v125 = mach_absolute_time();
  v127 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v127 != -1)
  {
    __tp.tv_sec = (__darwin_time_t)&v174;
    p_tp = (WTF *)&__tp;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &p_tp, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v128 = *(_QWORD *)v113;
  if (!*(_QWORD *)v113)
    goto LABEL_173;
  LODWORD(v126) = dword_1ECF4400C;
  v129 = *(double *)(v113 + 24);
  if (v168 == v128)
  {
    v130 = 0;
    v131 = (_QWORD *)v113;
LABEL_177:
    v133 = (double)(v125 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v126 * 1000000000.0);
    if (v168 == *(_QWORD *)(v113 + 8))
      *(_QWORD *)(v113 + 8) = v130;
    *v131 = *(_QWORD *)(v168 + 136);
    *(_QWORD *)(v168 + 136) = 0;
    if (v133 > v129)
    {
      v134 = *(_QWORD *)(v113 + 48);
      v135 = *(_QWORD *)(v113 + 40) ^ (*(_QWORD *)(v113 + 40) << 23);
      v136 = (v134 >> 26) ^ (v135 >> 17) ^ v134 ^ v135;
      *(_QWORD *)(v113 + 40) = v134;
      *(_QWORD *)(v113 + 48) = v136;
      *(double *)(v113 + 24) = v133 + (double)((v136 + v134) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 / 1000.0;
    }
    LODWORD(v113) = 1;
    v137 = __ldxr(v115);
    if (v137 == 1)
      goto LABEL_174;
    goto LABEL_182;
  }
  while (1)
  {
    v130 = v128;
    v128 = *(_QWORD *)(v128 + 136);
    if (!v128)
      break;
    if (v168 == v128)
    {
      v131 = (_QWORD *)(v130 + 136);
      goto LABEL_177;
    }
  }
LABEL_173:
  LODWORD(v113) = 0;
  v132 = __ldxr(v115);
  if (v132 != 1)
  {
LABEL_182:
    __clrex();
    goto LABEL_183;
  }
LABEL_174:
  if (__stlxr(0, v115))
LABEL_183:
    WTF::WordLock::unlockSlow((WTF::WordLock *)v115);
LABEL_184:
  if (*(_QWORD *)(v168 + 136))
  {
    __break(0xC471u);
    JUMPOUT(0x197AF7C38);
  }
  pthread_mutex_lock(v89);
  if (!(_DWORD)v113)
  {
    while (*(_QWORD *)(v168 + 128))
      pthread_cond_wait((pthread_cond_t *)(v168 + 80), v89);
  }
  *(_QWORD *)(v168 + 128) = 0;
  pthread_mutex_unlock(v89);
  if ((_DWORD)v113)
    return (v113 ^ 1);
  return 1;
}

uint64_t WTF::ParkingLot::unparkOne(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t StatusReg;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  double v29;
  double v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char **v107;
  char *v108;

  v9 = this;
  v10 = 0;
  v11 = 0;
  v12 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v104 = v15;
  v105 = StatusReg;
  while (2)
  {
    v17 = this;
    v18 = (unint64_t *)(this + 8 * (v15 % *(_DWORD *)this) + 8);
    v19 = atomic_load(v18);
    if (!v19)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v19 = atomic_load(v18);
            if (v19)
              goto LABEL_6;
            this = WTF::fastMalloc((WTF *)0x78);
            v19 = this;
            *(_OWORD *)this = 0u;
            *(_OWORD *)(this + 16) = 0u;
            *(_DWORD *)(this + 32) = this;
            v70 = this <= 1 ? 1 : this;
            *(_QWORD *)(this + 40) = v70;
            *(_QWORD *)(this + 48) = ((v70 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v70 << 23)) ^ ((((unint64_t)v70 << 23) ^ v70) >> 17);
            if (__ldaxr(v18))
            {
              __clrex();
            }
            else if (!__stlxr(this, v18))
            {
              goto LABEL_6;
            }
            this = *(_QWORD *)(StatusReg + 752);
            if (this)
              break;
            this = pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
          }
          if (v19 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v19)) & 1) == 0)
          {
            break;
          }
LABEL_58:
          v72 = *(unsigned int *)(this + 8000);
          if (v72 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(this, v19, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(this + 8 * v72) = v19 | 0x5000000000000;
            *(_DWORD *)(this + 8000) = v72 + 1;
          }
        }
        if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_58;
        }
        this = bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(this, v19, 1, a4, a5, a6, a7, a8);
      }
    }
LABEL_6:
    v20 = (unint64_t *)(v19 + 16);
    if (__ldaxr((unint64_t *)(v19 + 16)))
    {
      __clrex();
LABEL_9:
      WTF::WordLock::lockSlow((WTF::WordLock *)(v19 + 16));
      goto LABEL_10;
    }
    if (__stxr(1uLL, v20))
      goto LABEL_9;
LABEL_10:
    v22 = atomic_load(&qword_1ECF58280);
    if (v17 != v22)
    {
      v23 = __ldxr(v20);
      if (v23 == 1)
        goto LABEL_43;
      goto LABEL_2;
    }
    if (!*(_QWORD *)v19)
      goto LABEL_42;
    v24 = mach_absolute_time();
    this = (uint64_t)&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag;
    v26 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v26 != -1)
    {
      v108 = &v106;
      v107 = &v108;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    v27 = 0;
    v28 = 0;
    LODWORD(v25) = dword_1ECF4400C;
    v29 = (double)(v24 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v25 * 1000000000.0);
    v30 = *(double *)(v19 + 24);
    v31 = (unint64_t *)v19;
    v32 = v11;
    while (1)
    {
      v33 = *v31;
      if (!*v31)
        break;
      v34 = *(_QWORD *)(v33 + 128);
      if (v34 == v9)
      {
        do
          v35 = __ldaxr((unsigned int *)v33);
        while (__stlxr(v35 + 1, (unsigned int *)v33));
        if (v10)
        {
          do
          {
            v36 = __ldaxr((unsigned int *)v10);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, (unsigned int *)v10));
          if (!v37)
          {
            atomic_store(1u, (unsigned int *)v10);
            do
            {
              while (1)
              {
                v38 = atomic_load((unsigned int *)&_MergedGlobals_12);
                v39 = __ldaxr((unsigned int *)&_MergedGlobals_12);
                if (v39 == v38)
                  break;
                __clrex();
              }
            }
            while (__stlxr(v38 - 1, (unsigned int *)&_MergedGlobals_12));
            pthread_cond_destroy((pthread_cond_t *)(v10 + 80));
            pthread_mutex_destroy((pthread_mutex_t *)(v10 + 16));
            v47 = *(unsigned int **)(v10 + 8);
            *(_QWORD *)(v10 + 8) = 0;
            if (!v47)
              goto LABEL_35;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v47);
              WTF::Thread::~Thread((WTF::Thread *)v47, v40, v41, v42, v43, v44, v45, v46);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
              WTF::fastFree(v10, v58, v59, v60, v61, v62, v63, v64);
              if (v33 != *(_QWORD *)(v19 + 8))
                goto LABEL_26;
            }
            else
            {
LABEL_35:
              WTF::fastFree(v10, v40, v41, v42, v43, v44, v45, v46);
              if (v33 != *(_QWORD *)(v19 + 8))
                goto LABEL_26;
            }
LABEL_25:
            *(_QWORD *)(v19 + 8) = v27;
            goto LABEL_26;
          }
        }
        if (v33 == *(_QWORD *)(v19 + 8))
          goto LABEL_25;
LABEL_26:
        *v31 = *(_QWORD *)(v33 + 136);
        *(_QWORD *)(v33 + 136) = 0;
        v32 = 1;
        v10 = v33;
        v28 = 1;
        if (v34 == v9)
          break;
      }
      else
      {
        v31 = (unint64_t *)(v33 + 136);
        v27 = v33;
      }
    }
    v11 = v32;
    if (v29 <= v30)
    {
      v15 = v104;
      v8 = *(_QWORD *)v19 != 0;
      v69 = __ldxr(v20);
      if (v69 == 1)
        goto LABEL_43;
      goto LABEL_2;
    }
    v15 = v104;
    if ((v28 & 1) != 0)
    {
      v65 = *(_QWORD *)(v19 + 48);
      v66 = *(_QWORD *)(v19 + 40) ^ (*(_QWORD *)(v19 + 40) << 23);
      v67 = (v65 >> 26) ^ (v66 >> 17) ^ v65 ^ v66;
      *(_QWORD *)(v19 + 40) = v65;
      *(_QWORD *)(v19 + 48) = v67;
      *(double *)(v19 + 24) = v29 + (double)((v67 + v65) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 / 1000.0;
    }
LABEL_42:
    v8 = *(_QWORD *)v19 != 0;
    v68 = __ldxr(v20);
    if (v68 != 1)
    {
LABEL_2:
      __clrex();
LABEL_3:
      WTF::WordLock::unlockSlow((WTF::WordLock *)(v19 + 16));
      goto LABEL_4;
    }
LABEL_43:
    if (__stlxr(0, v20))
      goto LABEL_3;
LABEL_4:
    StatusReg = v105;
    if (v17 != v22)
      continue;
    break;
  }
  if (!v10)
    goto LABEL_80;
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 16));
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 144) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 16));
  pthread_cond_signal((pthread_cond_t *)(v10 + 80));
  do
  {
    v73 = __ldaxr((unsigned int *)v10);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, (unsigned int *)v10));
  if (v74)
  {
    if (v8)
      goto LABEL_71;
LABEL_80:
    v75 = 0;
  }
  else
  {
    atomic_store(1u, (unsigned int *)v10);
    do
    {
      while (1)
      {
        v76 = atomic_load((unsigned int *)&_MergedGlobals_12);
        v77 = __ldaxr((unsigned int *)&_MergedGlobals_12);
        if (v77 == v76)
          break;
        __clrex();
      }
    }
    while (__stlxr(v76 - 1, (unsigned int *)&_MergedGlobals_12));
    pthread_cond_destroy((pthread_cond_t *)(v10 + 80));
    pthread_mutex_destroy((pthread_mutex_t *)(v10 + 16));
    v85 = *(unsigned int **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    if (!v85)
      goto LABEL_79;
    do
    {
      v86 = __ldaxr(v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v85));
    if (!v87)
    {
      atomic_store(1u, v85);
      WTF::Thread::~Thread((WTF::Thread *)v85, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v10, v97, v98, v99, v100, v101, v102, v103);
      if (!v8)
        goto LABEL_80;
    }
    else
    {
LABEL_79:
      WTF::fastFree(v10, v78, v79, v80, v81, v82, v83, v84);
      if (!v8)
        goto LABEL_80;
    }
LABEL_71:
    v75 = 256;
  }
  return v75 | v11;
}

void WTF::ParkingLot::unparkOneImpl(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t StatusReg;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  double v26;
  double v27;
  unint64_t *v28;
  _BOOL8 v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v96;
  _BOOL8 v97;
  char v98;
  char **v99;
  char *v100;

  v8 = a1;
  v97 = 0;
  v9 = 0;
  v10 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v94 = v13;
  v93 = StatusReg;
  while (2)
  {
    v15 = a1;
    v16 = (unint64_t *)(a1 + 8 * (v13 % *(_DWORD *)a1) + 8);
    v17 = atomic_load(v16);
    if (!v17)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v17 = atomic_load(v16);
            if (v17)
              goto LABEL_6;
            a1 = WTF::fastMalloc((WTF *)0x78);
            v17 = a1;
            *(_OWORD *)a1 = 0u;
            *(_OWORD *)(a1 + 16) = 0u;
            *(_DWORD *)(a1 + 32) = a1;
            v68 = a1 <= 1 ? 1 : a1;
            *(_QWORD *)(a1 + 40) = v68;
            *(_QWORD *)(a1 + 48) = ((v68 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v68 << 23)) ^ ((((unint64_t)v68 << 23) ^ v68) >> 17);
            if (__ldaxr(v16))
            {
              __clrex();
            }
            else if (!__stlxr(a1, v16))
            {
              goto LABEL_6;
            }
            a1 = *(_QWORD *)(StatusReg + 752);
            if (a1)
              break;
            a1 = pas_try_deallocate_slow_no_cache(v17, (uint64_t)&bmalloc_heap_config, 1);
          }
          if (v17 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v17 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v17)) & 1) == 0)
          {
            break;
          }
LABEL_64:
          v70 = *(unsigned int *)(a1 + 8000);
          if (v70 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(a1, v17, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(a1 + 8 * v70) = v17 | 0x5000000000000;
            *(_DWORD *)(a1 + 8000) = v70 + 1;
          }
        }
        if (v17 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v17 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v17 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v17) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_64;
        }
        a1 = bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(a1, v17, 1, a4, a5, a6, a7, a8);
      }
    }
LABEL_6:
    v18 = (unint64_t *)(v17 + 16);
    if (__ldaxr((unint64_t *)(v17 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, v18))
    {
      goto LABEL_10;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)(v17 + 16));
LABEL_10:
    v20 = atomic_load(&qword_1ECF58280);
    if (v15 != v20)
      goto LABEL_48;
    if (!*(_QWORD *)v17)
    {
      v29 = v97;
      goto LABEL_42;
    }
    v96 = v20;
    v21 = mach_absolute_time();
    v23 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v23 != -1)
    {
      v100 = &v98;
      v99 = &v100;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    v24 = 0;
    v25 = 0;
    LODWORD(v22) = dword_1ECF4400C;
    v26 = (double)(v21 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v22 * 1000000000.0);
    v27 = *(double *)(v17 + 24);
    v28 = (unint64_t *)v17;
    v29 = v97;
    while (1)
    {
      v30 = *v28;
      if (!*v28)
        break;
      v31 = *(_QWORD *)(v30 + 128);
      if (v31 == v8)
      {
        do
          v32 = __ldaxr((unsigned int *)v30);
        while (__stlxr(v32 + 1, (unsigned int *)v30));
        if (v9)
        {
          do
          {
            v33 = __ldaxr((unsigned int *)v9);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unsigned int *)v9));
          if (!v34)
          {
            atomic_store(1u, (unsigned int *)v9);
            do
            {
              while (1)
              {
                v35 = atomic_load((unsigned int *)&_MergedGlobals_12);
                v36 = __ldaxr((unsigned int *)&_MergedGlobals_12);
                if (v36 == v35)
                  break;
                __clrex();
              }
            }
            while (__stlxr(v35 - 1, (unsigned int *)&_MergedGlobals_12));
            pthread_cond_destroy((pthread_cond_t *)(v9 + 80));
            pthread_mutex_destroy((pthread_mutex_t *)(v9 + 16));
            v44 = *(unsigned int **)(v9 + 8);
            *(_QWORD *)(v9 + 8) = 0;
            if (!v44)
              goto LABEL_33;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v44);
              WTF::Thread::~Thread((WTF::Thread *)v44, v37, v38, v39, v40, v41, v42, v43);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
              WTF::fastFree(v9, v55, v56, v57, v58, v59, v60, v61);
              if (v30 != *(_QWORD *)(v17 + 8))
                goto LABEL_24;
            }
            else
            {
LABEL_33:
              WTF::fastFree(v9, v37, v38, v39, v40, v41, v42, v43);
              if (v30 != *(_QWORD *)(v17 + 8))
                goto LABEL_24;
            }
LABEL_23:
            *(_QWORD *)(v17 + 8) = v24;
            goto LABEL_24;
          }
        }
        if (v30 == *(_QWORD *)(v17 + 8))
          goto LABEL_23;
LABEL_24:
        *v28 = *(_QWORD *)(v30 + 136);
        *(_QWORD *)(v30 + 136) = 0;
        v25 = 1;
        v29 = v26 > v27;
        v9 = v30;
        if (v31 == v8)
          break;
      }
      else
      {
        v28 = (unint64_t *)(v30 + 136);
        v24 = v30;
      }
    }
    if (v26 <= v27)
    {
      v13 = v94;
      StatusReg = v93;
      v20 = v96;
      if (v29)
        goto LABEL_43;
      goto LABEL_44;
    }
    v13 = v94;
    StatusReg = v93;
    v20 = v96;
    if ((v25 & 1) == 0)
    {
LABEL_42:
      if (!v29)
        goto LABEL_44;
      goto LABEL_43;
    }
    v62 = *(_QWORD *)(v17 + 48);
    v63 = *(_QWORD *)(v17 + 40) ^ (*(_QWORD *)(v17 + 40) << 23);
    v64 = (v62 >> 26) ^ (v63 >> 17) ^ v62 ^ v63;
    *(_QWORD *)(v17 + 40) = v62;
    *(_QWORD *)(v17 + 48) = v64;
    *(double *)(v17 + 24) = v26 + (double)((v64 + v62) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 / 1000.0;
    if (!v29)
      goto LABEL_44;
LABEL_43:
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x197AF8740);
    }
LABEL_44:
    v65 = v9 != 0;
    v66 = 256;
    if (!v65 || *(_QWORD *)v17 == 0)
      v66 = 0;
    v97 = v29;
    a1 = (*(uint64_t (**)(_QWORD, unint64_t))a2)(*(_QWORD *)(a2 + 8), v66 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v29 << 16) | v65);
    if (v9)
      *(_QWORD *)(v9 + 144) = a1;
LABEL_48:
    v67 = __ldxr(v18);
    if (v67 != 1)
    {
      __clrex();
LABEL_3:
      WTF::WordLock::unlockSlow((WTF::WordLock *)(v17 + 16));
      goto LABEL_4;
    }
    if (__stlxr(0, v18))
      goto LABEL_3;
LABEL_4:
    if (v15 != v20)
      continue;
    break;
  }
  if (v9)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v9 + 16));
    *(_QWORD *)(v9 + 128) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 16));
    pthread_cond_signal((pthread_cond_t *)(v9 + 80));
    do
    {
      v71 = __ldaxr((unsigned int *)v9);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v9));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v9);
      do
      {
        while (1)
        {
          v73 = atomic_load((unsigned int *)&_MergedGlobals_12);
          v74 = __ldaxr((unsigned int *)&_MergedGlobals_12);
          if (v74 == v73)
            break;
          __clrex();
        }
      }
      while (__stlxr(v73 - 1, (unsigned int *)&_MergedGlobals_12));
      pthread_cond_destroy((pthread_cond_t *)(v9 + 80));
      pthread_mutex_destroy((pthread_mutex_t *)(v9 + 16));
      v82 = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v82)
      {
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, v82);
          WTF::Thread::~Thread((WTF::Thread *)v82, v75, v76, v77, v78, v79, v80, v81);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
      }
      WTF::fastFree(v9, v75, v76, v77, v78, v79, v80, v81);
    }
  }
}

void WTF::ParkingLot::unparkCount(WTF::ParkingLot *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WTF::_anonymous_namespace_ *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::_anonymous_namespace_ *v23;
  unint64_t *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  double v33;
  double v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  unsigned int v43;
  unint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  pthread_mutex_t *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v97;
  unint64_t *__src;
  uint64_t v99;
  _BYTE v100[71];
  char v101;
  char **v102;
  char *v103;

  if (!(_DWORD)a2)
    return;
  v8 = a2;
  __src = (unint64_t *)v100;
  v99 = 8;
  v10 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  v22 = atomic_load((unint64_t *)v14 + v13 % *(_DWORD *)v14 + 1);
  if (!v22)
  {
LABEL_84:
    v59 = (unint64_t)__src;
    if (HIDWORD(v99))
    {
      v60 = 8 * HIDWORD(v99);
      do
      {
        v61 = (pthread_mutex_t *)(*(_QWORD *)v59 + 16);
        pthread_mutex_lock(v61);
        *(_QWORD *)(*(_QWORD *)v59 + 128) = 0;
        pthread_mutex_unlock(v61);
        v62 = *(_QWORD *)v59;
        v59 += 8;
        pthread_cond_signal((pthread_cond_t *)(v62 + 80));
        v60 -= 8;
      }
      while (v60);
      v63 = __src;
      v64 = &__src[HIDWORD(v99)];
      do
      {
        while (1)
        {
          while (1)
          {
            v65 = *v63;
            *v63 = 0;
            if (v65)
            {
              do
              {
                v66 = __ldaxr((unsigned int *)v65);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, (unsigned int *)v65));
              if (!v67)
                break;
            }
            if (++v63 == v64)
              goto LABEL_103;
          }
          atomic_store(1u, (unsigned int *)v65);
          do
          {
            while (1)
            {
              v68 = atomic_load((unsigned int *)&_MergedGlobals_12);
              v69 = __ldaxr((unsigned int *)&_MergedGlobals_12);
              if (v69 == v68)
                break;
              __clrex();
            }
          }
          while (__stlxr(v68 - 1, (unsigned int *)&_MergedGlobals_12));
          pthread_cond_destroy((pthread_cond_t *)(v65 + 80));
          pthread_mutex_destroy((pthread_mutex_t *)(v65 + 16));
          v77 = *(unsigned int **)(v65 + 8);
          *(_QWORD *)(v65 + 8) = 0;
          if (v77)
          {
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              break;
          }
          WTF::fastFree(v65, v70, v71, v72, v73, v74, v75, v76);
          if (++v63 == v64)
            goto LABEL_103;
        }
        atomic_store(1u, v77);
        WTF::Thread::~Thread((WTF::Thread *)v77, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        WTF::fastFree(v65, v88, v89, v90, v91, v92, v93, v94);
        ++v63;
      }
      while (v63 != v64);
LABEL_103:
      v59 = (unint64_t)__src;
      if (v100 == (_BYTE *)__src || __src == 0)
        return;
    }
    else if (v100 == (_BYTE *)__src || __src == 0)
    {
      return;
    }
    WTF::fastFree(v59, v15, v16, v17, v18, v19, v20, v21);
    return;
  }
  v23 = v14;
  while (1)
  {
    v24 = (unint64_t *)(v22 + 16);
    if (__ldaxr((unint64_t *)(v22 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, v24))
    {
      goto LABEL_11;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)(v22 + 16));
LABEL_11:
    v26 = atomic_load(&qword_1ECF58280);
    if (v23 == (WTF::_anonymous_namespace_ *)v26)
      break;
    v27 = __ldxr(v24);
    if (v27 == 1)
    {
      if (!__stlxr(0, v24))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow((WTF::WordLock *)(v22 + 16));
LABEL_6:
    v23 = v14;
    v22 = atomic_load((unint64_t *)v14 + v13 % *(_DWORD *)v14 + 1);
    if (!v22)
      goto LABEL_84;
  }
  if (!*(_QWORD *)v22)
    goto LABEL_79;
  v28 = mach_absolute_time();
  v30 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v30 != -1)
  {
    v103 = &v101;
    v102 = &v103;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v102, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v31 = *(_QWORD *)v22;
  if (!*(_QWORD *)v22)
  {
LABEL_79:
    v58 = __ldxr(v24);
    if (v58 == 1)
    {
      if (!__stlxr(0, v24))
        goto LABEL_84;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow((WTF::WordLock *)(v22 + 16));
    goto LABEL_84;
  }
  v32 = 0;
  v97 = 0;
  LODWORD(v29) = dword_1ECF4400C;
  v33 = (double)(v28 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v29 * 1000000000.0);
  v34 = *(double *)(v22 + 24);
  v35 = (unint64_t *)v22;
  while (*(WTF::ParkingLot **)(v31 + 128) != this)
  {
LABEL_22:
    v97 = v31;
    v35 = (unint64_t *)(v31 + 136);
    v31 = *(_QWORD *)(v31 + 136);
    if (!v31)
    {
LABEL_76:
      if (v33 > v34 && (v32 & 1) != 0)
      {
        v55 = *(_QWORD *)(v22 + 48);
        v56 = *(_QWORD *)(v22 + 40) ^ (*(_QWORD *)(v22 + 40) << 23);
        v57 = (v55 >> 26) ^ (v56 >> 17) ^ v55 ^ v56;
        *(_QWORD *)(v22 + 40) = v55;
        *(_QWORD *)(v22 + 48) = v57;
        *(double *)(v22 + 24) = v33 + (double)((v57 + v55) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 / 1000.0;
      }
      goto LABEL_79;
    }
  }
  v36 = HIDWORD(v99);
  if (HIDWORD(v99) == (_DWORD)v99)
  {
    v37 = HIDWORD(v99) + ((unint64_t)HIDWORD(v99) >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= (unint64_t)HIDWORD(v99) + 1)
      v39 = HIDWORD(v99) + 1;
    else
      v39 = v38;
    v40 = __src;
    if (v39 <= 8)
    {
      __src = (unint64_t *)v100;
      LODWORD(v99) = 8;
      v41 = (unint64_t *)v100;
    }
    else
    {
      if (v39 >> 29)
        goto LABEL_115;
      v41 = (unint64_t *)WTF::fastMalloc((WTF *)(8 * v39));
      LODWORD(v99) = v39;
      __src = v41;
    }
    memcpy(v41, v40, 8 * HIDWORD(v99));
    if (v100 != (_BYTE *)v40 && v40)
    {
      if (__src == v40)
      {
        __src = 0;
        LODWORD(v99) = 0;
      }
      WTF::fastFree((unint64_t)v40, v15, v16, v17, v18, v19, v20, v21);
    }
    v44 = __src;
    v45 = HIDWORD(v99);
    do
      v46 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v46 + 1, (unsigned int *)v31));
    goto LABEL_48;
  }
  v42 = __src;
  do
    v43 = __ldaxr((unsigned int *)v31);
  while (__stlxr(v43 + 1, (unsigned int *)v31));
  while (1)
  {
    v42[v36] = v31;
    v47 = ++HIDWORD(v99);
    if (v31 == *(_QWORD *)(v22 + 8))
      goto LABEL_49;
LABEL_50:
    *v35 = *(_QWORD *)(v31 + 136);
    *(_QWORD *)(v31 + 136) = 0;
    if (v47 == v8 || (v31 = *v35) == 0)
    {
      v32 = 1;
      goto LABEL_76;
    }
    if (*(WTF::ParkingLot **)(v31 + 128) != this)
    {
      v32 = 1;
      goto LABEL_22;
    }
    v36 = v47;
    if (v47 == (_DWORD)v99)
      break;
    v42 = __src;
    do
      v53 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v53 + 1, (unsigned int *)v31));
  }
  v48 = v47 + 1;
  v49 = v36 + (v36 >> 2);
  if (v49 >= 0x10)
    v50 = v49 + 1;
  else
    v50 = 16;
  if (v50 <= v48)
    v51 = v36 + 1;
  else
    v51 = v50;
  v52 = __src;
  if (v51 < 9)
  {
    __src = (unint64_t *)v100;
    LODWORD(v99) = 8;
    memcpy(v100, v52, 8 * v36);
    if (v100 != (_BYTE *)v52)
      goto LABEL_68;
    goto LABEL_72;
  }
  if (!(v51 >> 29))
  {
    LODWORD(v99) = v51;
    __src = (unint64_t *)WTF::fastMalloc((WTF *)(8 * v51));
    memcpy(__src, v52, 8 * v36);
    if (v100 == (_BYTE *)v52)
      goto LABEL_72;
LABEL_68:
    if (v52)
    {
      if (__src == v52)
      {
        __src = 0;
        LODWORD(v99) = 0;
      }
      WTF::fastFree((unint64_t)v52, v15, v16, v17, v18, v19, v20, v21);
    }
LABEL_72:
    v44 = __src;
    v45 = HIDWORD(v99);
    do
      v54 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v54 + 1, (unsigned int *)v31));
LABEL_48:
    v44[v45] = v31;
    v47 = ++HIDWORD(v99);
    if (v31 != *(_QWORD *)(v22 + 8))
      goto LABEL_50;
LABEL_49:
    *(_QWORD *)(v22 + 8) = v97;
    goto LABEL_50;
  }
LABEL_115:
  __break(0xC471u);
}

void WTF::ParkingLot::unparkAll(WTF::ParkingLot *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::ParkingLot::unparkCount(this, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8);
}

void WTF::ParkingLot::forEachImpl(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  WTF *v24;
  unsigned int v25;

  v16 = (int *)atomic_load(&qword_1ECF58280);
  v17 = *v16;
  while (v17)
  {
    v20 = (_QWORD *)atomic_load((unint64_t *)&v16[2 * --v17 + 2]);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (*v20)
      {
        do
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 8), v21[1], v21[16]);
          v21 = (_QWORD *)v21[17];
        }
        while (v21);
      }
    }
  }
  v18 = v24;
  if (v25)
  {
    v19 = 8 * v25;
    while (1)
    {
      v22 = (unint64_t *)(*(_QWORD *)v18 + 16);
      v23 = __ldxr(v22);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
      WTF::WordLock::unlockSlow((WTF::WordLock *)v22);
LABEL_11:
      v18 = (WTF *)((char *)v18 + 8);
      v19 -= 8;
      if (!v19)
      {
        v18 = v24;
        break;
      }
    }
  }
  if (v18)
    WTF::fastFree((unint64_t)v18, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::`anonymous namespace'::lockHashtable(WTF::_anonymous_namespace_ *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::_anonymous_namespace_ *v8;
  unint64_t StatusReg;
  int *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  void *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *ptr;

  v8 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    v11 = *v10;
    if (!*v10)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_28;
    }
    do
    {
LABEL_5:
      v16 = (unint64_t *)&v10[2 * --v11 + 2];
      while (1)
      {
        ptr = 0;
        v17 = (void *)atomic_load(v16);
        ptr = v17;
        if (v17)
          break;
        v18 = (_OWORD *)WTF::fastMalloc((WTF *)0x78);
        *v18 = 0u;
        v18[1] = 0u;
        *((_DWORD *)v18 + 8) = (_DWORD)v18;
        if (v18 <= 1)
          v24 = 1;
        else
          v24 = v18;
        *((_QWORD *)v18 + 5) = v24;
        *((_QWORD *)v18 + 6) = ((v24 >> 26) & 0xFF800000007FFFFFLL | ((unint64_t)v24 << 23)) ^ ((((unint64_t)v24 << 23) ^ v24) >> 17);
        ptr = v18;
        if (__ldaxr(v16))
        {
          __clrex();
        }
        else if (!__stlxr((unint64_t)v18, v16))
        {
          break;
        }
        if (ptr)
        {
          v26 = *(_QWORD *)(StatusReg + 752);
          if (v26)
          {
            if ((unint64_t)ptr >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)ptr >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(ptr)) & 1) == 0)
            {
              if ((unint64_t)ptr >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)ptr >> 24)
              {
                v19 = 0;
              }
              else
              {
                v19 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + (((((unint64_t)ptr >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(ptr) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v19 == 1)
                  goto LABEL_17;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, (unint64_t)ptr, 1, v19, v20, v21, v22, v23);
            }
            else
            {
LABEL_17:
              v27 = *(unsigned int *)(v26 + 8000);
              if (v27 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v26, (uint64_t)ptr, (os_unfair_lock_s *)5, v19, v20, v21, v22, v23);
              }
              else
              {
                *(_QWORD *)(v26 + 8 * v27) = (unint64_t)ptr | 0x5000000000000;
                *(_DWORD *)(v26 + 8000) = v27 + 1;
              }
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache((unint64_t)ptr, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
      }
      v28 = *((unsigned int *)v8 + 3);
      if ((_DWORD)v28 == *((_DWORD *)v8 + 2))
      {
        v14 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v28 + 1, (unint64_t)&ptr);
        v15 = *((unsigned int *)v8 + 3);
        v13 = *(_QWORD *)v8;
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v15) = *v14;
        v12 = v15 + 1;
        *((_DWORD *)v8 + 3) = v15 + 1;
        if (!v11)
          break;
        goto LABEL_5;
      }
      v13 = *(_QWORD *)v8;
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v28) = ptr;
      v12 = v28 + 1;
      *((_DWORD *)v8 + 3) = v28 + 1;
    }
    while (v11);
LABEL_28:
    v29 = 126 - 2 * __clz(v12);
    if (v12)
      v30 = v29;
    else
      v30 = 0;
    if (v12)
    {
      for (i = 8 * v12; i; i -= 8)
      {
        this = (WTF::_anonymous_namespace_ *)(*(_QWORD *)v13 + 16);
        if (__ldaxr((unint64_t *)this))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, (unint64_t *)this))
        {
          goto LABEL_35;
        }
        WTF::WordLock::lockSlow(this);
LABEL_35:
        v13 += 8;
      }
    }
    v33 = atomic_load(&qword_1ECF58280);
    if (v10 != (int *)v33)
    {
      v34 = *(_QWORD *)v8;
      v35 = *((unsigned int *)v8 + 3);
      if (!(_DWORD)v35)
      {
LABEL_49:
        if (v34)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
        }
        continue;
      }
      v36 = 8 * v35;
      while (1)
      {
        this = (WTF::_anonymous_namespace_ *)(*(_QWORD *)v34 + 16);
        v37 = __ldxr((unint64_t *)this);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unint64_t *)this))
            goto LABEL_44;
        }
        else
        {
          __clrex();
        }
        WTF::WordLock::unlockSlow(this);
LABEL_44:
        v34 += 8;
        v36 -= 8;
        if (!v36)
        {
          v34 = *(_QWORD *)v8;
          goto LABEL_49;
        }
      }
    }
    break;
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::`anonymous namespace'::myThreadData(void)::$_0 &&>>()
{
  pthread_key_t *v0;
  uint64_t result;

  v0 = (pthread_key_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  if ((_DWORD)result)
    __break(0xC471u);
  else
    qword_1ECF58260 = (uint64_t)v0;
  return result;
}

void WTF::ThreadSpecific<WTF::RefPtr<WTF::`anonymous namespace'::ThreadData,WTF::RawPtrTraits<WTF::`anonymous namespace'::ThreadData>,WTF::DefaultRefDerefTraits<WTF::`anonymous namespace'::ThreadData>>,(WTF::CanBeGCThread)1>::destroy(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  pthread_setspecific(*a1[1], a1);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      do
      {
        while (1)
        {
          v12 = atomic_load((unsigned int *)&_MergedGlobals_12);
          v13 = __ldaxr((unsigned int *)&_MergedGlobals_12);
          if (v13 == v12)
            break;
          __clrex();
        }
      }
      while (__stlxr(v12 - 1, (unsigned int *)&_MergedGlobals_12));
      pthread_cond_destroy((pthread_cond_t *)(v2 + 10));
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 2));
      v21 = (unsigned int *)v2[1];
      v2[1] = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::Thread::~Thread((WTF::Thread *)v21, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
      }
      WTF::fastFree((unint64_t)v2, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  pthread_setspecific(*a1[1], 0);
  WTF::fastFree((unint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
}

_DWORD *WTF::`anonymous namespace'::Hashtable::create(WTF::_anonymous_namespace_::Hashtable *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v17;

  v8 = (int)this;
  v17 = (_DWORD *)WTF::fastZeroedMalloc(8 * ((_DWORD)this - 1) + 16, a2, a3, a4, a5, a6, a7, a8);
  *v17 = v8;
  if (__ldaxr(&qword_1ECF58278))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, &qword_1ECF58278))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)&qword_1ECF58278);
LABEL_5:
  v10 = qword_1ECF58270;
  if (qword_1ECF58270)
  {
    v11 = *(unsigned int *)(qword_1ECF58270 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(qword_1ECF58270 + 8))
      goto LABEL_7;
LABEL_10:
    *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v17;
    *(_DWORD *)(v10 + 12) = v11 + 1;
    v15 = __ldxr(&qword_1ECF58278);
    if (v15 != 1)
      goto LABEL_8;
    goto LABEL_11;
  }
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  qword_1ECF58270 = v10;
  v11 = *(unsigned int *)(v10 + 12);
  if ((_DWORD)v11 != *(_DWORD *)(v10 + 8))
    goto LABEL_10;
LABEL_7:
  v12 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v17);
  v13 = *(unsigned int *)(v10 + 12);
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v13) = *v12;
  *(_DWORD *)(v10 + 12) = v13 + 1;
  v14 = __ldxr(&qword_1ECF58278);
  if (v14 != 1)
  {
LABEL_8:
    __clrex();
LABEL_12:
    WTF::WordLock::unlockSlow((WTF::WordLock *)&qword_1ECF58278);
    return v17;
  }
LABEL_11:
  if (__stlxr(0, &qword_1ECF58278))
    goto LABEL_12;
  return v17;
}

unint64_t WTF::`anonymous namespace'::ensureHashtable(WTF::_anonymous_namespace_ *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  for (i = atomic_load(&qword_1ECF58280); !i; i = atomic_load(&qword_1ECF58280))
  {
    i = (unint64_t)v17;
    if (__ldaxr(&qword_1ECF58280))
    {
      __clrex();
    }
    else if (!__stlxr((unint64_t)v17, &qword_1ECF58280))
    {
      return i;
    }
    if (__ldaxr(&qword_1ECF58278))
    {
      __clrex();
    }
    else if (!__stxr(1uLL, &qword_1ECF58278))
    {
      goto LABEL_14;
    }
    WTF::WordLock::lockSlow((WTF::WordLock *)&qword_1ECF58278);
LABEL_14:
    v20 = qword_1ECF58270;
    v21 = *(unsigned int *)(qword_1ECF58270 + 12);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)qword_1ECF58270;
      if (**(_QWORD **)qword_1ECF58270 == i)
      {
        v23 = 0;
LABEL_21:
        memmove((void *)(v22 + 8 * v23), (const void *)(v22 + 8 * v23 + 8), 8 * v21 - (8 * v23 + 8));
        --*(_DWORD *)(v20 + 12);
      }
      else
      {
        v23 = 0;
        while (v21 - 1 != v23)
        {
          v24 = *(_QWORD *)(v22 + 8 + 8 * v23++);
          if (v24 == i)
            goto LABEL_21;
        }
      }
    }
    v25 = __ldxr(&qword_1ECF58278);
    if (v25 == 1)
    {
      if (!__stlxr(0, &qword_1ECF58278))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
    WTF::WordLock::unlockSlow((WTF::WordLock *)&qword_1ECF58278);
LABEL_6:
    WTF::fastFree(i, v10, v11, v12, v13, v14, v15, v16);
  }
  return i;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::`anonymous namespace'::Bucket **,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  BOOL v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  int64_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = *(a2 - 1);
        v66 = *v8;
        if (v65 < *v8)
        {
          *v8 = v65;
          *(a2 - 1) = v66;
        }
        return result;
      case 3:
        v67 = *v8;
        v68 = v8[1];
        v69 = *(a2 - 1);
        if (v68 >= *v8)
        {
          if (v69 < v68)
          {
            v8[1] = v69;
            *(a2 - 1) = v68;
            v115 = v8[1];
            goto LABEL_219;
          }
        }
        else
        {
          if (v69 >= v68)
          {
            *v8 = v68;
            v8[1] = v67;
            v124 = *(a2 - 1);
            if (v124 >= v67)
              return result;
            v8[1] = v124;
          }
          else
          {
            *v8 = v69;
          }
          *(a2 - 1) = v67;
        }
        return result;
      case 4:
        v20 = v8 + 1;
        v79 = v8[1];
        v44 = (unint64_t)(v8 + 2);
        v13 = v8[2];
        v80 = *v8;
        if (v79 < *v8)
        {
          v81 = v8;
          v82 = v8 + 2;
          result = *v8;
          if (v13 >= v79)
          {
            *v8 = v79;
            v8[1] = v80;
            v81 = v8 + 1;
            v82 = v8 + 2;
            result = v80;
            if (v13 >= v80)
              goto LABEL_199;
          }
          goto LABEL_187;
        }
        if (v13 >= v79)
          goto LABEL_199;
        *v20 = v13;
        *(_QWORD *)v44 = v79;
        v81 = v8;
        v82 = v8 + 1;
        result = v79;
        if (v13 < v80)
        {
LABEL_187:
          *v81 = v13;
          *v82 = v80;
          v79 = result;
        }
        v116 = *(a2 - 1);
        if (v116 < v79)
          goto LABEL_200;
        return result;
      case 5:
        v70 = v8 + 1;
        v71 = v8[1];
        v73 = v8 + 2;
        v72 = v8[2];
        v74 = *v8;
        if (v71 >= *v8)
        {
          if (v72 < v71)
          {
            v75 = v8;
            v76 = v8 + 1;
            *v70 = v72;
            *v73 = v71;
            v77 = v72;
            result = v74;
            v78 = v71;
            if (v72 >= v74)
            {
              v77 = v74;
              v74 = v72;
              v72 = v71;
              goto LABEL_210;
            }
            goto LABEL_207;
          }
          v77 = *v8;
          v74 = v8[1];
        }
        else
        {
          if (v72 < v71)
          {
            v75 = v8;
            v76 = v8 + 2;
            v77 = v8[2];
            result = v8[1];
            v78 = *v8;
LABEL_207:
            *v75 = v72;
            *v76 = v74;
            v74 = result;
            v72 = v78;
            goto LABEL_210;
          }
          v75 = v8 + 1;
          v76 = v8 + 2;
          *v8 = v71;
          v8[1] = v74;
          v77 = v71;
          result = v72;
          v78 = v74;
          if (v72 < v74)
            goto LABEL_207;
          v77 = v71;
        }
LABEL_210:
        v125 = v8[3];
        if (v125 >= v72)
        {
          v72 = v8[3];
        }
        else
        {
          v8[2] = v125;
          v8[3] = v72;
          if (v125 < v74)
          {
            *v70 = v125;
            *v73 = v74;
            if (v125 < v77)
            {
              *v8 = v125;
              v8[1] = v77;
            }
          }
        }
        v126 = *(a2 - 1);
        if (v126 < v72)
        {
          v8[3] = v126;
          *(a2 - 1) = v72;
          v127 = v8[2];
          v115 = v8[3];
          if (v115 < v127)
          {
            v8[2] = v115;
            v8[3] = v127;
            v128 = v8[1];
            if (v115 < v128)
            {
              v8[1] = v115;
              v8[2] = v128;
LABEL_219:
              v129 = *v8;
              if (v115 < *v8)
              {
                *v8 = v115;
                v8[1] = v129;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v92 = (unint64_t)(v10 - 2) >> 1;
              v93 = v92;
              do
              {
                if (v92 >= v93)
                {
                  v95 = (2 * v93) | 1;
                  v96 = &v8[v95];
                  if (2 * v93 + 2 >= v10)
                  {
                    v97 = *v96;
                    v99 = &v8[v93];
                    v100 = *v99;
                    if (*v96 >= *v99)
                      goto LABEL_160;
                  }
                  else
                  {
                    v97 = v96[1];
                    v98 = *v96 >= v97;
                    if (*v96 < v97)
                      ++v96;
                    else
                      v97 = *v96;
                    if (!v98)
                      v95 = 2 * v93 + 2;
                    v99 = &v8[v93];
                    v100 = *v99;
                    if (v97 >= *v99)
                    {
LABEL_160:
                      while (1)
                      {
                        *v99 = v97;
                        v99 = v96;
                        if (v92 < v95)
                          break;
                        v101 = (2 * v95) | 1;
                        v96 = &v8[v101];
                        v95 = 2 * v95 + 2;
                        if (v95 < v10)
                        {
                          v97 = *v96;
                          result = (uint64_t)(v96 + 1);
                          if (*v96 >= v96[1])
                          {
                            v95 = v101;
                          }
                          else
                          {
                            v97 = v96[1];
                            ++v96;
                          }
                          if (v97 < v100)
                            break;
                        }
                        else
                        {
                          v97 = *v96;
                          v95 = v101;
                          if (*v96 < v100)
                            break;
                        }
                      }
                      *v99 = v100;
                    }
                  }
                }
                v94 = v93-- <= 0;
              }
              while (!v94);
              v102 = (unint64_t)v9 >> 3;
              do
              {
                v103 = 0;
                v104 = *v8;
                v105 = (unint64_t)(v102 - 2) >> 1;
                v106 = v8;
                do
                {
                  while (1)
                  {
                    v108 = &v106[v103 + 1];
                    v109 = (2 * v103) | 1;
                    v103 = 2 * v103 + 2;
                    if (v103 < v102)
                      break;
                    v103 = v109;
                    *v106 = *v108;
                    v106 = v108;
                    if (v109 > v105)
                      goto LABEL_174;
                  }
                  v107 = *v108;
                  if (*v108 >= v108[1])
                  {
                    v103 = v109;
                  }
                  else
                  {
                    v107 = v108[1];
                    ++v108;
                  }
                  *v106 = v107;
                  v106 = v108;
                }
                while (v103 <= v105);
LABEL_174:
                if (v108 == --a2)
                {
                  *v108 = v104;
                }
                else
                {
                  *v108 = *a2;
                  *a2 = v104;
                  v110 = (char *)v108 - (char *)v8 + 8;
                  if (v110 >= 9)
                  {
                    v111 = (((unint64_t)v110 >> 3) - 2) >> 1;
                    v112 = &v8[v111];
                    v113 = *v112;
                    v114 = *v108;
                    if (*v112 < *v108)
                    {
                      do
                      {
                        *v108 = v113;
                        v108 = v112;
                        if (!v111)
                          break;
                        v111 = (v111 - 1) >> 1;
                        v112 = &v8[v111];
                        v113 = *v112;
                      }
                      while (*v112 < v114);
                      *v108 = v114;
                    }
                  }
                }
                v94 = v102-- <= 2;
              }
              while (!v94);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = (unint64_t *)*v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = (unint64_t)v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = (unint64_t *)*v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v13 = *v12;
          v39 = *v23;
          v40 = *v32;
          if (*v12 < *v23)
          {
            if (v40 >= v13)
            {
              *v23 = v13;
              *v12 = v39;
              v23 = v12;
              v13 = v40;
              if (v40 >= v39)
              {
                v13 = v39;
                v41 = *v8;
                *v8 = v39;
                *v12 = v41;
                --a3;
                v20 = (unint64_t *)*v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v40 >= v13)
            goto LABEL_54;
          *v12 = v40;
          *v32 = v13;
          v32 = v12;
          v13 = v39;
          if (v40 < v39)
          {
LABEL_53:
            *v23 = v40;
            *v32 = v39;
LABEL_54:
            v42 = *v8;
            *v8 = v13;
            *v12 = v42;
            --a3;
            v20 = (unint64_t *)*v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < (unint64_t)v20)
              goto LABEL_56;
            if ((unint64_t)v20 >= *(a2 - 1))
            {
              v58 = v8 + 1;
              do
              {
                v8 = v58;
                if (v58 >= a2)
                  break;
                ++v58;
              }
              while ((unint64_t)v20 >= *v8);
            }
            else
            {
              v44 = (unint64_t)(v8 + 1);
              do
              {
                if ((unint64_t *)v44 == a2)
                  goto LABEL_198;
                v57 = *(_QWORD *)v44;
                v44 += 8;
              }
              while ((unint64_t)v20 >= v57);
              v8 = (unint64_t *)(v44 - 8);
            }
            v44 = (unint64_t)a2;
            if (v8 < a2)
            {
              v44 = (unint64_t)a2;
              while ((unint64_t *)v44 != v7)
              {
                v59 = *(_QWORD *)(v44 - 8);
                v44 -= 8;
                if ((unint64_t)v20 >= v59)
                  goto LABEL_97;
              }
              goto LABEL_198;
            }
LABEL_97:
            if ((unint64_t)v8 < v44)
            {
              v60 = *v8;
              v13 = *(_QWORD *)v44;
              do
              {
                *v8 = v13;
                v61 = v8 + 1;
                *(_QWORD *)v44 = v60;
                do
                {
                  if (v61 == a2)
                    goto LABEL_198;
                  v62 = *v61++;
                  v60 = v62;
                }
                while ((unint64_t)v20 >= v62);
                v8 = v61 - 1;
                do
                {
                  if ((unint64_t *)v44 == v7)
                    goto LABEL_198;
                  v63 = *(_QWORD *)(v44 - 8);
                  v44 -= 8;
                  v13 = v63;
                }
                while ((unint64_t)v20 < v63);
              }
              while ((unint64_t)v8 < v44);
            }
            v64 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v64;
            a4 = 0;
            *v64 = (unint64_t)v20;
            continue;
          }
          v13 = v40;
          v56 = *v8;
          *v8 = v40;
          *v12 = v56;
          --a3;
          v20 = (unint64_t *)*v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v43 = 0;
          do
          {
            v44 = (unint64_t)&v8[v43 + 1];
            if ((unint64_t *)v44 == a2)
              goto LABEL_198;
            v13 = *(_QWORD *)v44;
            ++v43;
          }
          while (*(_QWORD *)v44 < (unint64_t)v20);
          v44 = (unint64_t)&v8[v43];
          v45 = a2;
          if (v43 != 1)
          {
            while (v45 != v8)
            {
              v46 = *--v45;
              if (v46 < (unint64_t)v20)
                goto LABEL_66;
            }
            goto LABEL_198;
          }
          v45 = a2;
          do
          {
            if (v44 >= (unint64_t)v45)
              break;
            v47 = *--v45;
          }
          while (v47 >= (unint64_t)v20);
LABEL_66:
          if (v44 >= (unint64_t)v45)
          {
            v54 = (unint64_t *)(v44 - 8);
            if ((unint64_t *)(v44 - 8) != v8)
              goto LABEL_78;
          }
          else
          {
            v48 = *v45;
            v49 = &v8[v43];
            v50 = v45;
            do
            {
              *v49 = v48;
              *v50 = v13;
              v51 = v49 + 1;
              do
              {
                if (v51 == a2)
                  goto LABEL_198;
                v52 = *v51++;
                v13 = v52;
              }
              while (v52 < (unint64_t)v20);
              v49 = v51 - 1;
              do
              {
                if (v50 == v8)
                  goto LABEL_198;
                v53 = *--v50;
                v48 = v53;
              }
              while (v53 >= (unint64_t)v20);
            }
            while (v49 < v50);
            v54 = v51 - 2;
            if (v51 - 2 == v8)
              goto LABEL_79;
LABEL_78:
            *v8 = *v54;
          }
LABEL_79:
          *v54 = (unint64_t)v20;
          if (v44 < (unint64_t)v45)
            goto LABEL_82;
          v8 = v54 + 1;
          if (!(_DWORD)result)
          {
            if (v55)
              continue;
LABEL_82:
            a4 = 0;
            v8 = v54 + 1;
            continue;
          }
          a2 = v54;
          if (v55)
            return result;
          goto LABEL_2;
        }
        v20 = v8 + 1;
        v84 = v8 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v84)
          {
            v85 = 8;
            v86 = v8;
            do
            {
              v88 = *v86;
              v86 = v20;
              v89 = *v20;
              if (v89 < v88)
              {
                v90 = v85;
                do
                {
                  *(unint64_t *)((char *)v8 + v90) = v88;
                  v91 = v90 - 8;
                  if (v90 == 8)
                  {
                    v87 = v8;
                    goto LABEL_134;
                  }
                  v88 = *(unint64_t *)((char *)v8 + v90 - 16);
                  v90 -= 8;
                }
                while (v89 < v88);
                v87 = (unint64_t *)((char *)v8 + v91);
LABEL_134:
                *v87 = v89;
              }
              v20 = v86 + 1;
              v85 += 8;
            }
            while (v86 + 1 != a2);
          }
        }
        else if (!v84)
        {
          v44 = 0;
          v117 = 1;
          while (1)
          {
            v13 = v8[v44];
            v44 = v117;
            v118 = *v20;
            if (*v20 < v13)
              break;
LABEL_192:
            v117 = v44 + 1;
            if (++v20 == a2)
              return result;
          }
          v119 = 0;
          while (1)
          {
            v120 = &v20[v119];
            *v120 = v13;
            if (!(v44 + v119))
              break;
            v13 = *(v120 - 2);
            --v119;
            if (v118 >= v13)
            {
              v20[v119] = v118;
              goto LABEL_192;
            }
          }
LABEL_198:
          __break(1u);
LABEL_199:
          v79 = v13;
          v116 = *(a2 - 1);
          if (v116 < v79)
          {
LABEL_200:
            *(_QWORD *)v44 = v116;
            *(a2 - 1) = v79;
            v121 = *(_QWORD *)v44;
            v122 = *v20;
            if (v121 < v122)
            {
              v7[1] = v121;
              v7[2] = v122;
              v123 = *v7;
              if (v121 < *v7)
              {
                *v7 = v121;
                v7[1] = v123;
              }
            }
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::`anonymous namespace'::Bucket **>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  int v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v40 = *a1;
        v39 = a1[1];
        if (v39 >= *a1)
          return 1;
        goto LABEL_61;
      }
      if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v46 = *(a2 - 1);
        if (v46 >= v11)
          return 1;
        a1[1] = v46;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
        {
LABEL_44:
          v25 = v27;
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
LABEL_45:
          *v26 = v42;
          *(a2 - 1) = v25;
          v43 = *v26;
          v44 = *v24;
          if (v43 >= v44)
            return 1;
          a1[1] = v43;
          a1[2] = v44;
          v45 = *a1;
          if (v43 >= *a1)
            return 1;
          *a1 = v43;
          a1[1] = v45;
          return 1;
        }
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
        {
LABEL_42:
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
          goto LABEL_45;
        }
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
            goto LABEL_44;
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_42;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v17 = a1 + 2;
      v16 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v16 < v15)
        {
          v19 = a1;
          v20 = a1 + 1;
          *v14 = v16;
          *v17 = v15;
          v21 = v16;
          v22 = v18;
          v23 = v15;
          if (v16 >= v18)
          {
            v21 = v18;
            v18 = v16;
            v16 = v15;
            v41 = a1[3];
            if (v41 < v16)
              goto LABEL_52;
            goto LABEL_56;
          }
          goto LABEL_51;
        }
        v21 = *a1;
        v18 = a1[1];
        v41 = a1[3];
        if (v41 >= v16)
          goto LABEL_56;
      }
      else
      {
        if (v16 < v15)
        {
          v19 = a1;
          v20 = a1 + 2;
          v21 = a1[2];
          v22 = a1[1];
          v23 = *a1;
          goto LABEL_51;
        }
        v19 = a1 + 1;
        v20 = a1 + 2;
        *a1 = v15;
        a1[1] = v18;
        v21 = v15;
        v22 = v16;
        v23 = v18;
        if (v16 < v18)
        {
LABEL_51:
          *v19 = v16;
          *v20 = v18;
          v18 = v22;
          v16 = v23;
          v41 = a1[3];
          if (v41 < v23)
            goto LABEL_52;
LABEL_56:
          v16 = v41;
          goto LABEL_57;
        }
        v21 = v15;
        v41 = a1[3];
        if (v41 >= v16)
          goto LABEL_56;
      }
LABEL_52:
      a1[2] = v41;
      a1[3] = v16;
      if (v41 < v18)
      {
        *v14 = v41;
        *v17 = v18;
        if (v41 < v21)
        {
          *a1 = v41;
          a1[1] = v21;
        }
      }
LABEL_57:
      v47 = *(a2 - 1);
      if (v47 >= v16)
        return 1;
      a1[3] = v47;
      *(a2 - 1) = v16;
      v48 = a1[2];
      v39 = a1[3];
      if (v39 >= v48)
        return 1;
      a1[2] = v39;
      a1[3] = v48;
      v49 = a1[1];
      if (v39 >= v49)
        return 1;
      a1[1] = v39;
      a1[2] = v49;
      v40 = *a1;
      if (v39 >= *a1)
        return 1;
LABEL_61:
      *a1 = v39;
      a1[1] = v40;
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_22;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_21;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_22;
LABEL_21:
      *v7 = v3;
      *v8 = v6;
LABEL_22:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v32;
        v36 = *v4;
        if (*v32 < v36)
          break;
LABEL_25:
        v4 = v32++;
        if (v32 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v37) = v36;
        v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v35;
          if (++v33 != 8)
            goto LABEL_25;
          return v32 + 1 == a2;
        }
        v36 = *(unint64_t *)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v35 < v36);
      *(unint64_t *)((char *)a1 + v38) = v35;
      if (++v33 != 8)
        goto LABEL_25;
      return v32 + 1 == a2;
  }
}

void WTF::Persistence::Coder<WTF::AtomString>::decodeForPersistence(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  LOBYTE(v25) = 0;
  v26 = 0;
  WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v25);
  if (v26)
  {
    v9 = v25;
    if (v25)
    {
      v27 = v25;
      if ((*((_BYTE *)v25 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase(&v27, v3, v4, v5, v6, v7, v8, (WTF *)&v28);
        v9 = v28;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v10, v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
    }
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

uint64_t *WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(uint64_t *a1, uint64_t a2)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned __int8 v42;

  WTF::Persistence::Coder<WTF::String>::decodeForPersistence(a1, (uint64_t)&v41);
  v11 = v42;
  if (*(unsigned __int8 *)(a2 + 8) == v42)
  {
    if (*(_BYTE *)(a2 + 8))
    {
      v12 = v41;
      v41 = 0;
      v13 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 != 2)
        {
          *(_DWORD *)v13 -= 2;
          if (!v11)
            return a1;
          goto LABEL_17;
        }
        WTF::StringImpl::~StringImpl(v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    if (!v11)
      return a1;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v14 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        *(_BYTE *)(a2 + 8) = 0;
        if (!v11)
          return a1;
        goto LABEL_17;
      }
      *(_DWORD *)v14 -= 2;
    }
    *(_BYTE *)(a2 + 8) = 0;
    if (!v11)
      return a1;
  }
  else
  {
    v15 = v41;
    v41 = 0;
    *(_QWORD *)a2 = v15;
    *(_BYTE *)(a2 + 8) = 1;
    if (!v11)
      return a1;
  }
LABEL_17:
  if (!v41)
    return a1;
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
    return a1;
  }
  WTF::StringImpl::~StringImpl(v41, v4, v5, v6, v7, v8, v9, v10);
  WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  return a1;
}

void *WTF::Persistence::Coder<WTF::CString>::encodeForPersistence(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;

  if (!*a2)
    return (void *)WTF::Persistence::Encoder::encodeNumber<unsigned int>(a1, -1);
  WTF::Persistence::Encoder::encodeNumber<unsigned int>(a1, *(_DWORD *)(*a2 + 8));
  v4 = *a2;
  if (*a2)
  {
    v5 = (const void *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 8);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  return WTF::Persistence::Encoder::encodeFixedLengthData(a1, v5, v6);
}

void WTF::Persistence::Coder<WTF::CString>::decodeForPersistence(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  size_t v5;
  int v6;
  CC_SHA1_CTX *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  int data;
  int v21;
  int v22;

  v3 = (unsigned int *)a1[2];
  if ((unint64_t)(*a1 + a1[1] - (_QWORD)v3) <= 3)
    goto LABEL_4;
  v6 = *v3;
  v5 = *v3;
  a1[2] = (uint64_t)(v3 + 1);
  v7 = (CC_SHA1_CTX *)(a1 + 3);
  data = 11;
  v21 = v6;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 3), &data, 4u);
  CC_SHA1_Update(v7, &v21, 4u);
  if ((_DWORD)v5 == -1)
  {
    *(_QWORD *)a2 = 0;
LABEL_11:
    *(_BYTE *)(a2 + 8) = 1;
    return;
  }
  if (*a1 + a1[1] - a1[2] < v5)
  {
LABEL_4:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)(v5 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v5;
  *(_BYTE *)(v15 + 16 + v5) = 0;
  v16 = (char *)a1[2];
  v17 = *a1;
  if (*a1 + a1[1] - (uint64_t)v16 < v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
LABEL_8:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
    return;
  }
  a1[2] = (uint64_t)&v16[v5];
  v22 = 101;
  CC_SHA1_Update(v7, &v22, 4u);
  CC_SHA1_Update(v7, v16, v5);
  if (v17)
  {
    memcpy((void *)(v15 + 16), v16, v5);
    *(_QWORD *)a2 = v15;
    goto LABEL_11;
  }
  v18 = *(_DWORD *)v15;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v19 = v18 - 1;
  if (!v19)
    goto LABEL_8;
  *(_DWORD *)v15 = v19;
}

void *WTF::Persistence::Coder<WTF::String>::encodeForPersistence(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  if (!*a2)
    return (void *)WTF::Persistence::Encoder::encodeNumber<unsigned int>(a1, -1);
  v5 = *(_DWORD *)(v3 + 16);
  v6 = WTF::Persistence::Encoder::encodeNumber<unsigned int>(a1, *(_DWORD *)(v3 + 4));
  WTF::Persistence::Encoder::encodeNumber<BOOL>(v6, (v5 & 4) != 0);
  v7 = *a2;
  if ((v5 & 4) == 0)
  {
    if (v7)
      return WTF::Persistence::Encoder::encodeFixedLengthData(a1, *(const void **)(v7 + 8), 2 * *(unsigned int *)(v7 + 4));
    return WTF::Persistence::Encoder::encodeFixedLengthData(a1, 0, 0);
  }
  if (!v7)
    return WTF::Persistence::Encoder::encodeFixedLengthData(a1, 0, 0);
  return WTF::Persistence::Encoder::encodeFixedLengthData(a1, *(const void **)(v7 + 8), *(unsigned int *)(v7 + 4));
}

void WTF::Persistence::Coder<WTF::String>::decodeForPersistence(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  size_t v5;
  int v6;
  CC_SHA1_CTX *v7;
  unsigned __int8 *v8;
  int v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  void *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  void *v27;
  int v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int data;
  int v42;

  v3 = (int *)a1[2];
  if ((unint64_t)(*a1 + a1[1] - (_QWORD)v3) <= 3)
    goto LABEL_13;
  v6 = *v3;
  v5 = *v3;
  a1[2] = (uint64_t)(v3 + 1);
  v7 = (CC_SHA1_CTX *)(a1 + 3);
  data = 11;
  v42 = v6;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 3), &data, 4u);
  CC_SHA1_Update(v7, &v42, 4u);
  if ((_DWORD)v5 == -1)
  {
    *(_QWORD *)a2 = 0;
LABEL_11:
    *(_BYTE *)(a2 + 8) = 1;
    return;
  }
  v8 = (unsigned __int8 *)a1[2];
  if ((unsigned __int8 *)(*a1 + a1[1]) == v8)
    goto LABEL_13;
  v9 = *v8;
  a1[2] = (uint64_t)(v8 + 1);
  LOBYTE(data) = v9 != 0;
  v42 = 3;
  CC_SHA1_Update(v7, &v42, 4u);
  CC_SHA1_Update(v7, &data, 1u);
  if (v9)
  {
    v17 = a1[1];
    v18 = (char *)a1[2];
    if (*a1 + v17 - (uint64_t)v18 >= v5)
    {
      if (!(_DWORD)v5)
      {
        v20 = 0;
        v19 = &WTF::StringImpl::s_emptyAtomString;
        v21 = WTF::StringImpl::s_emptyAtomString + 2;
        WTF::StringImpl::s_emptyAtomString += 2;
        v22 = *a1;
        if (*a1 + v17 - (uint64_t)v18 < v5)
          goto LABEL_25;
        goto LABEL_19;
      }
      if ((v5 & 0x80000000) == 0)
      {
        v19 = (int *)WTF::fastCompactMalloc((WTF *)(v5 + 20));
        v20 = v19 + 5;
        v21 = 2;
        *v19 = 2;
        v19[1] = v5;
        *((_QWORD *)v19 + 1) = v19 + 5;
        v19[4] = 4;
        v18 = (char *)a1[2];
        v22 = *a1;
        if (*a1 + a1[1] - (uint64_t)v18 < v5)
          goto LABEL_25;
LABEL_19:
        a1[2] = (uint64_t)&v18[v5];
        v42 = 101;
        CC_SHA1_Update(v7, &v42, 4u);
        CC_SHA1_Update(v7, v18, v5);
        if (v22)
        {
          memcpy(v20, v18, v5);
          *(_QWORD *)a2 = v19;
          goto LABEL_11;
        }
        v21 = *v19;
LABEL_25:
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 8) = 0;
        v30 = v21 - 2;
        if (v30)
        {
          *v19 = v30;
          return;
        }
        v31 = (WTF::StringImpl *)v19;
        goto LABEL_32;
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x197AFAB9CLL);
    }
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    return;
  }
  v23 = 2 * v5;
  v24 = a1[1];
  v25 = (char *)a1[2];
  if (*a1 + v24 - (uint64_t)v25 < 2 * v5)
    goto LABEL_13;
  if (!(_DWORD)v5)
  {
    v27 = 0;
    v26 = &WTF::StringImpl::s_emptyAtomString;
    v28 = WTF::StringImpl::s_emptyAtomString + 2;
    WTF::StringImpl::s_emptyAtomString += 2;
    v29 = *a1;
    if (*a1 + v24 - (uint64_t)v25 < v23)
      goto LABEL_29;
    goto LABEL_22;
  }
  if (v5 >= 0x7FFFFFF0)
    goto LABEL_33;
  v26 = (int *)WTF::fastCompactMalloc((WTF *)(v23 + 20));
  v27 = v26 + 5;
  v28 = 2;
  *v26 = 2;
  v26[1] = v5;
  *((_QWORD *)v26 + 1) = v26 + 5;
  v26[4] = 0;
  v25 = (char *)a1[2];
  v29 = *a1;
  if (*a1 + a1[1] - (uint64_t)v25 >= v23)
  {
LABEL_22:
    a1[2] = (uint64_t)&v25[v23];
    v42 = 101;
    CC_SHA1_Update(v7, &v42, 4u);
    CC_SHA1_Update(v7, v25, v23);
    if (v29)
    {
      memcpy(v27, v25, v23);
      *(_QWORD *)a2 = v26;
      goto LABEL_11;
    }
    v28 = *v26;
  }
LABEL_29:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v32 = v28 - 2;
  if (v32)
  {
    *v26 = v32;
    return;
  }
  v31 = (WTF::StringImpl *)v26;
LABEL_32:
  WTF::StringImpl::~StringImpl(v31, v10, v11, v12, v13, v14, v15, v16);
  WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
}

void WTF::Persistence::Coder<WTF::URL>::decodeForPersistence(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  unsigned __int8 v29;

  LOBYTE(v28) = 0;
  v29 = 0;
  WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v28);
  if (v29)
  {
    WTF::URL::URL((uint64_t)&v25, (WTF::AtomStringImpl *)&v28, 0, v3, v4, v5, v6, v7);
    *(_QWORD *)a2 = v25;
    *(_OWORD *)(a2 + 8) = v26;
    *(_OWORD *)(a2 + 24) = v27;
    v15 = v29;
    *(_BYTE *)(a2 + 40) = 1;
    if (v15)
    {
      v16 = v28;
      v28 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v8, v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void *WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence(uint64_t a1, const void *a2)
{
  return WTF::Persistence::Encoder::encodeFixedLengthData(a1, a2, 0x14uLL);
}

uint64_t WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  CC_SHA1_CTX *v5;
  int data;

  v3 = *(_DWORD **)(result + 16);
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result + *(_QWORD *)(result + 8) - (_QWORD)v3 >= 0x14uLL
    && (*(_QWORD *)(result + 16) = v3 + 5,
        v5 = (CC_SHA1_CTX *)(result + 24),
        data = 101,
        CC_SHA1_Update((CC_SHA1_CTX *)(result + 24), &data, 4u),
        result = CC_SHA1_Update(v5, v3, 0x14u),
        v4))
  {
    *(_OWORD *)a2 = *(_OWORD *)v3;
    *(_DWORD *)(a2 + 16) = v3[4];
    *(_BYTE *)(a2 + 20) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 20) = 0;
  }
  return result;
}

uint64_t WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence(uint64_t a1, double *a2)
{
  return WTF::Persistence::Encoder::encodeNumber<double>(a1, *a2);
}

uint64_t WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  CC_SHA1_CTX *v3;
  int data;
  uint64_t v6;

  v1 = *(uint64_t **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v1 < 8uLL)
    return 0;
  v2 = *v1;
  *(_QWORD *)(a1 + 16) = v1 + 1;
  v3 = (CC_SHA1_CTX *)(a1 + 24);
  v6 = v2;
  data = 29;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
  CC_SHA1_Update(v3, &v6, 8u);
  return v2;
}

uint64_t WTF::Persistence::Coder<WTF::Seconds>::encodeForPersistence(uint64_t a1, double *a2)
{
  return WTF::Persistence::Encoder::encodeNumber<double>(a1, *a2);
}

uint64_t WTF::Persistence::Coder<WTF::Seconds>::decodeForPersistence(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  CC_SHA1_CTX *v3;
  int data;
  uint64_t v6;

  v1 = *(uint64_t **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v1 < 8uLL)
    return 0;
  v2 = *v1;
  *(_QWORD *)(a1 + 16) = v1 + 1;
  v3 = (CC_SHA1_CTX *)(a1 + 24);
  v6 = v2;
  data = 29;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
  CC_SHA1_Update(v3, &v6, 8u);
  return v2;
}

uint64_t WTF::Persistence::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 24));
  return a1;
}

{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 24));
  return a1;
}

BOOL WTF::Persistence::Decoder::bufferIsLargeEnoughToContain(WTF::Persistence::Decoder *this, unint64_t a2)
{
  return *(_QWORD *)this + *((_QWORD *)this + 1) - *((_QWORD *)this + 2) >= a2;
}

char *WTF::Persistence::Decoder::bufferPointerForDirectRead(WTF::Persistence::Decoder *this, unint64_t a2)
{
  char *v2;
  CC_LONG v4;
  CC_SHA1_CTX *v5;
  int data;

  v2 = (char *)*((_QWORD *)this + 2);
  if (*(_QWORD *)this + *((_QWORD *)this + 1) - (_QWORD)v2 < a2)
    return 0;
  v4 = a2;
  *((_QWORD *)this + 2) = &v2[a2];
  v5 = (CC_SHA1_CTX *)((char *)this + 24);
  data = 101;
  CC_SHA1_Update((CC_SHA1_CTX *)((char *)this + 24), &data, 4u);
  CC_SHA1_Update(v5, v2, v4);
  return v2;
}

uint64_t WTF::Persistence::Decoder::decodeFixedLengthData(uint64_t *a1, void *a2, size_t a3)
{
  char *v3;
  uint64_t v4;
  CC_SHA1_CTX *v7;
  int data;

  v3 = (char *)a1[2];
  v4 = *a1;
  if (*a1 + a1[1] - (uint64_t)v3 < a3)
    return 0;
  a1[2] = (uint64_t)&v3[a3];
  v7 = (CC_SHA1_CTX *)(a1 + 3);
  data = 101;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 3), &data, 4u);
  CC_SHA1_Update(v7, v3, a3);
  if (!v4)
    return 0;
  memcpy(a2, v3, a3);
  return 1;
}

BOOL WTF::Persistence::Decoder::rewind(WTF::Persistence::Decoder *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 2);
  v3 = v2 - *(_QWORD *)this;
  if (v3 >= a2)
    *((_QWORD *)this + 2) = v2 - a2;
  return v3 >= a2;
}

uint64_t WTF::Persistence::Decoder::operator>>(uint64_t a1, _WORD *a2)
{
  unsigned __int8 *v3;
  int v5;
  int data;
  BOOL v8;

  v3 = *(unsigned __int8 **)(a1 + 16);
  if ((unsigned __int8 *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) != v3)
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v8 = v5 != 0;
    data = 3;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v8, 1u);
    *a2 = v5 | 0x100;
  }
  return a1;
}

{
  unsigned __int8 *v3;
  __int16 v5;
  unsigned __int8 v6;
  int data;
  unsigned __int8 v9;

  v3 = *(unsigned __int8 **)(a1 + 16);
  if ((unsigned __int8 *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) != v3)
  {
    v6 = *v3;
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v9 = v6;
    data = 5;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v9, 1u);
    *a2 = v5 | 0x100;
  }
  return a1;
}

uint64_t WTF::Persistence::Decoder::operator>>(uint64_t a1, uint64_t a2)
{
  __int16 *v3;
  __int16 v5;
  __int16 v6;
  int data;
  __int16 v9;

  v3 = *(__int16 **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 2uLL)
  {
    v6 = *v3;
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v9 = v6;
    data = 7;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v9, 2u);
    *(_WORD *)a2 = v5;
    *(_BYTE *)(a2 + 2) = 1;
  }
  return a1;
}

{
  __int16 *v3;
  __int16 v5;
  __int16 v6;
  int data;
  __int16 v9;

  v3 = *(__int16 **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 2uLL)
  {
    v6 = *v3;
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v9 = v6;
    data = 103;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v9, 2u);
    *(_WORD *)a2 = v5;
    *(_BYTE *)(a2 + 2) = 1;
  }
  return a1;
}

{
  int *v3;
  int v5;
  int v6;
  int data;
  int v9;

  v3 = *(int **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 4uLL)
  {
    v6 = *v3;
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    data = 11;
    v9 = v6;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v9, 4u);
    *(_DWORD *)a2 = v5;
    *(_BYTE *)(a2 + 4) = 1;
  }
  return a1;
}

{
  uint64_t *v3;
  uint64_t v5;
  int data;
  uint64_t v8;

  v3 = *(uint64_t **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 8uLL)
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v8 = v5;
    data = 13;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v8, 8u);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = 1;
  }
  return a1;
}

{
  int *v3;
  int v5;
  int v6;
  int data;
  int v9;

  v3 = *(int **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 4uLL)
  {
    v6 = *v3;
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    data = 17;
    v9 = v6;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v9, 4u);
    *(_DWORD *)a2 = v5;
    *(_BYTE *)(a2 + 4) = 1;
  }
  return a1;
}

{
  uint64_t *v3;
  uint64_t v5;
  int data;
  uint64_t v8;

  v3 = *(uint64_t **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 8uLL)
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v8 = v5;
    data = 19;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v8, 8u);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = 1;
  }
  return a1;
}

{
  int *v3;
  int v5;
  int data;
  int v8;

  v3 = *(int **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 4uLL)
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v8 = v5;
    data = 23;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v8, 4u);
    *(_DWORD *)a2 = v5;
    *(_BYTE *)(a2 + 4) = 1;
  }
  return a1;
}

{
  uint64_t *v3;
  uint64_t v5;
  int data;
  uint64_t v8;

  v3 = *(uint64_t **)(a1 + 16);
  if (*(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - (_QWORD)v3 >= 8uLL)
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = v3 + 1;
    v8 = v5;
    data = 29;
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &data, 4u);
    CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 24), &v8, 8u);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = 1;
  }
  return a1;
}

BOOL WTF::Persistence::Decoder::verifyChecksum(WTF::Persistence::Decoder *this)
{
  CC_SHA1_CTX *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v9;
  unsigned int v10;
  unsigned __int8 md[8];
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (CC_SHA1_CTX *)((char *)this + 24);
  CC_SHA1_Final(md, (CC_SHA1_CTX *)((char *)this + 24));
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this + *((_QWORD *)this + 1) - (_QWORD)v3 < 0x14uLL)
    return 0;
  *((_QWORD *)this + 2) = v3 + 5;
  LODWORD(v9) = 101;
  CC_SHA1_Update(v2, &v9, 4u);
  CC_SHA1_Update(v2, v3, 0x14u);
  if (!v4)
    return 0;
  v9 = *(_OWORD *)v3;
  v5 = v3[4];
  v10 = v3[4];
  return *(_QWORD *)md == (_QWORD)v9 && v12 == *((_QWORD *)&v9 + 1) && v13 == v5;
}

WTF::Persistence::Encoder *WTF::Persistence::Encoder::Encoder(WTF::Persistence::Encoder *this)
{
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 4096;
  CC_SHA1_Init((CC_SHA1_CTX *)((char *)this + 4112));
  return this;
}

{
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 4096;
  CC_SHA1_Init((CC_SHA1_CTX *)((char *)this + 4112));
  return this;
}

void WTF::Persistence::Encoder::~Encoder(WTF::Persistence::Encoder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v10;

  v10 = (char *)this + 16;
  v9 = *(_QWORD *)this;
  if (v10 != (char *)v9 && v9 != 0)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;
  char *v10;

  v10 = (char *)this + 16;
  v9 = *(_QWORD *)this;
  if (v10 != (char *)v9 && v9 != 0)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Persistence::Encoder::updateChecksumForData(CC_SHA1_CTX *a1, const void *a2, CC_LONG a3)
{
  int data;

  data = 101;
  CC_SHA1_Update(a1, &data, 4u);
  return CC_SHA1_Update(a1, a2, a3);
}

void *WTF::Persistence::Encoder::encodeFixedLengthData(uint64_t a1, const void *a2, size_t a3)
{
  CC_SHA1_CTX *v6;
  void *result;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int data;

  v6 = (CC_SHA1_CTX *)(a1 + 4112);
  data = 101;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = (void *)CC_SHA1_Update(v6, a2, a3);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = a3 + v9;
  if (a3 + v9 <= v8)
    goto LABEL_17;
  v11 = v8 + (v8 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10)
    v13 = a3 + v9;
  else
    v13 = v12;
  v14 = *(const void **)a1;
  if (v13 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v14, v9);
    if ((const void *)(a1 + 16) == v14)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v10;
      return memcpy((void *)(*(_QWORD *)a1 + v9), a2, a3);
    }
LABEL_13:
    if (v14)
    {
      if (*(const void **)a1 == v14)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v13))
  {
    v15 = (void *)WTF::fastMalloc((WTF *)v13);
    *(_DWORD *)(a1 + 8) = v13;
    *(_QWORD *)a1 = v15;
    memcpy(v15, v14, v9);
    if ((const void *)(a1 + 16) == v14)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::encodeNumber<BOOL>(uint64_t a1, char a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  char v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 3;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 1u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 1;
  if (v7 < v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 1;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_BYTE *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::operator<<(uint64_t a1, char a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  char v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 5;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 1u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 1;
  if (v7 < v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 1;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_BYTE *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::operator<<(uint64_t a1, __int16 a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  __int16 v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 7;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 2u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 2;
  if (v7 + 2 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 2;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_WORD *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  __int16 v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 103;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 2u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 2;
  if (v7 + 2 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 2;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_WORD *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::encodeNumber<unsigned int>(uint64_t a1, int a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  int v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  data = 11;
  v22 = a2;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 4u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 4;
  if (v7 + 4 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 4;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_DWORD *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::operator<<(uint64_t a1, uint64_t a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  uint64_t v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 13;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 8u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 8;
  if (v7 + 8 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 8;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_QWORD *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  uint64_t v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 19;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 8u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 8;
  if (v7 + 8 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 8;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_QWORD *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::operator<<(uint64_t a1, int a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  int v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  data = 17;
  v22 = a2;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 4u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 4;
  if (v7 + 4 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 4;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(_DWORD *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::operator<<(uint64_t a1, float a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  float v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 23;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 4u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 4;
  if (v7 + 4 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 4;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(float *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Persistence::Encoder::encodeNumber<double>(uint64_t a1, double a2)
{
  CC_SHA1_CTX *v4;
  uint64_t result;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int data;
  double v22;

  v4 = (CC_SHA1_CTX *)(a1 + 4112);
  v22 = a2;
  data = 29;
  CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 4112), &data, 4u);
  result = CC_SHA1_Update(v4, &v22, 8u);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 8;
  if (v7 + 8 <= v6)
    goto LABEL_17;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v8)
    v11 = v7 + 8;
  else
    v11 = v10;
  v12 = *(const void **)a1;
  if (v11 <= 0x1000)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4096;
    memcpy((void *)(a1 + 16), v12, v7);
    if ((const void *)(a1 + 16) == v12)
    {
LABEL_17:
      *(_DWORD *)(a1 + 12) = v8;
      *(double *)(*(_QWORD *)a1 + v7) = a2;
      return a1;
    }
LABEL_13:
    if (v12)
    {
      if (*(const void **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(v11))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, v7);
    if ((const void *)(a1 + 16) == v12)
      goto LABEL_17;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Persistence::Encoder::encodeChecksum(WTF::Persistence::Encoder *this)
{
  unsigned __int8 md[20];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  CC_SHA1_Final(md, (CC_SHA1_CTX *)((char *)this + 4112));
  return WTF::Persistence::Encoder::encodeFixedLengthData((uint64_t)this, md, 0x14uLL);
}

uint64_t WTF::PrintStream::printf(WTF::PrintStream *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return (*(uint64_t (**)(WTF::PrintStream *, const char *, uint64_t *))(*(_QWORD *)this + 16))(this, a2, (uint64_t *)va);
}

uint64_t WTF::PrintStream::printfVariableFormat(WTF::PrintStream *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return (*(uint64_t (**)(WTF::PrintStream *, const char *, uint64_t *))(*(_QWORD *)this + 16))(this, a2, (uint64_t *)va);
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, const char *a3)
{
  return WTF::PrintStream::printf(this, "%s", (const char *)a2);
}

uint64_t WTF::printInternal(WTF::PrintStream *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  char v15;

  if (a2)
  {
    if ((a3 & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(a2, a3, (uint64_t)&v13, a10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)a2, a3, 0, a4, a5, a6, a7, a8, (uint64_t)&v13);
  }
  else
  {
    v11 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = 0;
    v13 = v11;
    v14 = 0;
  }
  result = WTF::printExpectedCStringHelper(a1, "StringView", &v13);
  if (v14 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v14])(&v15, &v13);
  return result;
}

uint64_t WTF::printExpectedCStringHelper(WTF::PrintStream *a1, const char *a2, _DWORD *a3)
{
  const char *v3;
  int v4;
  const char *v5;
  const char *v7;
  WTF::PrintStream *v8;

  v4 = a3[2];
  if (v4)
  {
    if (v4 == 1)
    {
      v3 = a2;
      if (*(_BYTE *)a3)
      {
        v7 = "(failed to convert ";
LABEL_11:
        v8 = a1;
        WTF::PrintStream::printf(a1, "%s", v7);
        WTF::PrintStream::printf(v8, "%s", v3);
        return WTF::PrintStream::printf(v8, "%s", " to utf8)");
      }
    }
    else
    {
      a1 = (WTF::PrintStream *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    v7 = "(Out of memory while converting ";
    goto LABEL_11;
  }
  if (*(_QWORD *)a3)
    v5 = (const char *)(*(_QWORD *)a3 + 16);
  else
    v5 = 0;
  return WTF::PrintStream::printf(a1, "%s", v5);
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, const WTF::CString *a3)
{
  const char *v3;

  if (*(_QWORD *)a2)
    v3 = (const char *)(*(_QWORD *)a2 + 16);
  else
    v3 = 0;
  return WTF::PrintStream::printf(this, "%s", v3);
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  char v18;

  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(char **)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v16, a10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, a4, a5, a6, a7, a8, (uint64_t)&v16);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    v16 = v14;
    *(_BYTE *)(v14 + 16) = 0;
    v17 = 0;
  }
  result = WTF::printExpectedCStringHelper(this, "String", &v16);
  if (v17 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v17])(&v18, &v16);
  return result;
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, const WTF::AtomString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  char v18;

  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(char **)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v16, a10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, a4, a5, a6, a7, a8, (uint64_t)&v16);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    v16 = v14;
    *(_BYTE *)(v14 + 16) = 0;
    v17 = 0;
  }
  result = WTF::printExpectedCStringHelper(this, "String", &v16);
  if (v17 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v17])(&v18, &v16);
  return result;
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  char *v12;
  size_t v13;
  uint64_t result;
  int v15;
  int v16;
  char v17;

  if (!a2)
    return WTF::PrintStream::printf(this, "%s", "(null StringImpl*)");
  v12 = (char *)*((_QWORD *)a2 + 1);
  v13 = *((unsigned int *)a2 + 1);
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
    WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v15, a10);
  else
    WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, a4, a5, a6, a7, a8, (uint64_t)&v15);
  result = WTF::printExpectedCStringHelper(this, "StringImpl*", &v15);
  if (v16 != -1)
    return ((uint64_t (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  return result;
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2)
{
  const char *v3;
  WTF::PrintStream *v4;

  if ((_DWORD)a2)
    v3 = "true";
  else
    v3 = "false";
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 32))(this);
  WTF::PrintStream::printf(v4, "%s", v3);
  return (*(uint64_t (**)(WTF *))(*(_QWORD *)this + 40))(this);
}

{
  return WTF::PrintStream::printf(this, "%d", (_DWORD)a2);
}

{
  return WTF::PrintStream::printf(this, "%u", (_DWORD)a2);
}

{
  return WTF::PrintStream::printf(this, "%d", (_DWORD)a2);
}

{
  return WTF::PrintStream::printf(this, "%u", (_DWORD)a2);
}

{
  return WTF::PrintStream::printf(this, "%d", (_DWORD)a2);
}

{
  return WTF::PrintStream::printf(this, "%u", (_DWORD)a2);
}

{
  return WTF::PrintStream::printf(this, "%ld", a2);
}

{
  return WTF::PrintStream::printf(this, "%lu", a2);
}

{
  return WTF::PrintStream::printf(this, "%lld", a2);
}

{
  return WTF::PrintStream::printf(this, "%llu", a2);
}

uint64_t WTF::printInternal(WTF::PrintStream *a1, unsigned int a2)
{
  return WTF::PrintStream::printf(a1, "%lc", a2);
}

uint64_t WTF::printInternal(WTF::PrintStream *a1, int a2)
{
  return WTF::PrintStream::printf(a1, "%u", a2);
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, float a3)
{
  return WTF::PrintStream::printf(this, "%lf", a3);
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, double a3)
{
  return WTF::PrintStream::printf(this, "%lf", a3);
}

uint64_t WTF::printInternal(WTF::PrintStream *a1, const void *a2)
{
  return WTF::PrintStream::printf(a1, "%p", a2);
}

{
  return WTF::PrintStream::printf(a1, "%p", a2);
}

uint64_t WTF::printInternal(WTF::PrintStream *a1, uint64_t a2, uint64_t a3)
{
  return WTF::PrintStream::printf(a1, "%*.*lf", a3, SHIDWORD(a3), *(double *)&a2);
}

uint64_t WTF::dumpCharacter(WTF *this, WTF::PrintStream *a2)
{
  return WTF::PrintStream::printf(this, "%c", (int)a2);
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS8_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS8_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;

  v8 = *a2;
  *a2 = 0;
  if (v8)
  {
    if (*v8 == 1)
      WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v8;
  }
}

uint64_t WTF::allPrivileges(WTF *this)
{
  return 7;
}

uint64_t WTF::setProcessPrivileges(uint64_t result)
{
  WTF::processPrivileges(void)::privileges = result;
  return result;
}

BOOL WTF::hasProcessPrivilege(int a1)
{
  return (WTF::processPrivileges(void)::privileges & a1) != 0;
}

uint64_t WTF::addProcessPrivilege(uint64_t result)
{
  WTF::processPrivileges(void)::privileges |= result;
  return result;
}

uint64_t WTF::removeProcessPrivilege(uint64_t result)
{
  WTF::processPrivileges(void)::privileges &= ~(_DWORD)result;
  return result;
}

uint64_t WTF::ramSize(WTF *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WTF::ramSize(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WTF::ramSize(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
  }
  return WTF::ramSize(void)::ramSize;
}

uint64_t WTF::ramSizeDisregardingJetsamLimit(WTF *this)
{
  host_t v1;
  kern_return_t v2;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[10];
  uint64_t v6;

  v1 = MEMORY[0x19AEBB5B0](this);
  host_info_outCnt = 12;
  v2 = host_info(v1, 1, host_info_out, &host_info_outCnt);
  if (mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1) | v2)
    return 0;
  else
    return v6;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>()
{
  unint64_t v0;
  char v1;
  char **v2;
  char *v3;

  v0 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
  }
  WTF::ramSize(void)::ramSize = bmalloc::availableMemory(void)::availableMemory;
}

void WTF::ReadWriteLock::readLock(WTF::ReadWriteLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v13;
  double v14;
  int v15;
  WTF::ReadWriteLock *v16;
  char *v17;
  _QWORD v18[3];
  timespec __tp;
  char **v20;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_8:
  while (*((_BYTE *)this + 2) || *((_DWORD *)this + 2))
  {
    v14 = INFINITY;
    v15 = 0;
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    if (v15)
    {
      __break(0xC471u);
      return;
    }
    if (v14 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
    {
      v16 = this;
      v17 = (char *)this + 1;
      __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      __tp.tv_nsec = (uint64_t)&__tp;
      v20 = &v17;
      v18[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v18[1] = v18;
      v18[2] = &v16;
      WTF::ParkingLot::parkConditionallyImpl((uint64_t)this + 1, (uint64_t)&__tp, (uint64_t)v18, (WTF::TimeWithDynamicClockType *)&v14);
LABEL_16:
      if (__ldaxr((unsigned __int8 *)this))
        goto LABEL_6;
      goto LABEL_20;
    }
    v10 = __ldxr((unsigned __int8 *)this);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)this))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
    if (__ldaxr((unsigned __int8 *)this))
    {
LABEL_6:
      __clrex();
      goto LABEL_7;
    }
LABEL_20:
    if (__stxr(1u, (unsigned __int8 *)this))
LABEL_7:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
  }
  ++*((_DWORD *)this + 1);
  v13 = __ldxr((unsigned __int8 *)this);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::ReadWriteLock::readUnlock(WTF::ReadWriteLock *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 *v14;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_5:
  v10 = *((_DWORD *)this + 1) - 1;
  *((_DWORD *)this + 1) = v10;
  if (!v10)
  {
    v11 = (unsigned __int8 *)this + 1;
    v12 = atomic_load((unsigned __int8 *)this + 1);
    if ((v12 & 1) != 0)
    {
      atomic_store(0, v11);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = __ldxr((unsigned __int8 *)this);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return;
    v14 = (unsigned __int8 *)this;
  }
  else
  {
    __clrex();
    v14 = (unsigned __int8 *)this;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::ReadWriteLock::writeLock(WTF::ReadWriteLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v13;
  double v14;
  int v15;
  WTF::ReadWriteLock *v16;
  char *v17;
  _QWORD v18[3];
  timespec __tp;
  char **v20;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_9:
  while (*((_BYTE *)this + 2) || *((_DWORD *)this + 1))
  {
    ++*((_DWORD *)this + 2);
    v14 = INFINITY;
    v15 = 0;
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    if (v15)
    {
      __break(0xC471u);
      return;
    }
    if (v14 >= (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec)
    {
      v16 = this;
      v17 = (char *)this + 1;
      __tp.tv_sec = (__darwin_time_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      __tp.tv_nsec = (uint64_t)&__tp;
      v20 = &v17;
      v18[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v18[1] = v18;
      v18[2] = &v16;
      WTF::ParkingLot::parkConditionallyImpl((uint64_t)this + 1, (uint64_t)&__tp, (uint64_t)v18, (WTF::TimeWithDynamicClockType *)&v14);
LABEL_17:
      if (__ldaxr((unsigned __int8 *)this))
        goto LABEL_6;
      goto LABEL_21;
    }
    v10 = __ldxr((unsigned __int8 *)this);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)this))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
    if (__ldaxr((unsigned __int8 *)this))
    {
LABEL_6:
      __clrex();
LABEL_7:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
      goto LABEL_8;
    }
LABEL_21:
    if (__stxr(1u, (unsigned __int8 *)this))
      goto LABEL_7;
LABEL_8:
    --*((_DWORD *)this + 2);
  }
  *((_BYTE *)this + 2) = 1;
  v13 = __ldxr((unsigned __int8 *)this);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::ReadWriteLock::writeUnlock(WTF::ReadWriteLock *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned __int8 v11;
  int v12;
  unsigned __int8 *v13;
  int v14;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_5:
  *((_BYTE *)this + 2) = 0;
  v10 = (unsigned __int8 *)this + 1;
  v11 = atomic_load((unsigned __int8 *)this + 1);
  if ((v11 & 1) != 0)
  {
    atomic_store(0, v10);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, a2, a3, a4, a5, a6, a7, a8);
    v14 = __ldxr((unsigned __int8 *)this);
    if (v14 == 1)
      goto LABEL_7;
LABEL_11:
    __clrex();
    v13 = (unsigned __int8 *)this;
    goto LABEL_9;
  }
  v12 = __ldxr((unsigned __int8 *)this);
  if (v12 != 1)
    goto LABEL_11;
LABEL_7:
  if (!__stlxr(0, (unsigned __int8 *)this))
    return;
  v13 = (unsigned __int8 *)this;
LABEL_9:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::vmPageSize(WTF *this)
{
  return *MEMORY[0x1E0C85AA8];
}

void WTF::logFootprintComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  const char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  int v52;
  char v53;
  WTF *v54;
  unsigned int v55;
  _QWORD v56[2];

  v10 = *MEMORY[0x1E0C85AA8];
  WTFLogAlways("Per-tag breakdown of memory reclaimed by pressure handler:", a2, a3, a4, a5, a6, a7, a8, v53);
  WTFLogAlways("  ## %16s %10s %10s %10s", v11, v12, v13, v14, v15, v16, v17, (char)"VM Tag");
  v18 = 0;
  v19 = (uint64_t *)(a2 + 8);
  v20 = (uint64_t *)(a1 + 8);
  while (1)
  {
    v29 = *v20;
    v20 += 4;
    v30 = v29 * v10;
    v31 = *v19;
    v19 += 4;
    if (!(v30 | (v31 * v10)))
      goto LABEL_3;
    v32 = WTF::displayNameForVMTag(v18);
    if (!v33)
      break;
    v34 = v33 - 1;
    if (v33 != 1)
    {
      v35 = v32;
      v36 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v36 = 2;
      v36[1] = v34;
      *((_QWORD *)v36 + 1) = v35;
      v36[4] = 4;
      v56[0] = v36;
      goto LABEL_12;
    }
    v36 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
LABEL_11:
    v56[0] = v36;
LABEL_12:
    WTF::String::ascii((WTF::String *)v56, (int8x16_t **)&v54);
    WTFLogAlways("  %02X %16s %10ld %10ld %10ld", v37, v38, v39, v40, v41, v42, v43, (char)v18);
    v51 = v54;
    v54 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
      {
        WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
        v52 = *v36 - 2;
        if (*v36 != 2)
        {
LABEL_18:
          *v36 = v52;
          goto LABEL_3;
        }
        goto LABEL_2;
      }
      --*(_DWORD *)v51;
    }
    v52 = *v36 - 2;
    if (*v36 != 2)
      goto LABEL_18;
LABEL_2:
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v36, (WTF::AtomStringImpl *)v44, v45, v46, v47, v48, v49, v50);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
LABEL_3:
    v18 = (WTF *)((char *)v18 + 1);
    if (v18 == (WTF *)256)
      return;
  }
  v56[0] = "Tag ";
  v56[1] = 5;
  v55 = v18;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)v56, &v55, (int **)&v54);
  v36 = (int *)v54;
  if (v54)
    goto LABEL_11;
  __break(0xC471u);
}

const char *WTF::displayNameForVMTag(WTF *this)
{
  int v1;
  const char *result;

  v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 1:
      result = "malloc";
      break;
    case 2:
      result = "malloc (small)";
      break;
    case 3:
      result = "malloc (large)";
      break;
    case 4:
      result = "malloc (huge)";
      break;
    case 7:
      result = "malloc (tiny)";
      break;
    case 11:
      result = "malloc (nano)";
      break;
    case 12:
      result = "malloc (medium)";
      break;
    case 21:
      result = "IOKit";
      break;
    case 30:
      result = "Stack";
      break;
    case 33:
      result = "dylib";
      break;
    case 35:
      result = "pmap (unshared)";
      break;
    case 41:
      result = "Foundation";
      break;
    case 43:
      result = "CoreServices";
      break;
    case 51:
      result = "CoreAnimation";
      break;
    case 52:
      result = "CG image";
      break;
    case 53:
      result = "bmalloc";
      break;
    case 54:
      result = "CG raster data";
      break;
    case 62:
      result = "SQLite";
      break;
    case 63:
      result = "Gigacage";
      break;
    case 64:
      result = "JSC JIT";
      break;
    case 65:
      result = "IsoHeap";
      break;
    case 70:
      result = "ImageIO";
      break;
    case 73:
      result = "os_alloc_once";
      break;
    case 74:
      result = "libdispatch";
      break;
    case 88:
      result = "IOSurface";
      break;
    case 100:
      result = "IOAccelerator";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WTF::pagesPerVMTag@<X0>(char *a1@<X8>)
{
  mach_vm_address_t v3;
  vm_map_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  mach_vm_size_t v10;
  mach_vm_size_t v11;
  char *v12;
  int state;
  mach_vm_address_t address;
  mach_msg_type_number_t infoCnt;
  int info[4];
  __int128 v17;
  __int128 v18;
  _DWORD v19[7];
  natural_t nesting_depth;
  mach_vm_size_t size;

  bzero(a1, 0x2000uLL);
  v3 = 0;
  v4 = *MEMORY[0x1E0C83DA0];
  size = 0;
  nesting_depth = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)info = 0u;
  v17 = 0u;
  infoCnt = 19;
  v5 = (_QWORD *)MEMORY[0x1E0C85AA8];
  while (1)
  {
    address = v3;
    state = 0;
    if (mach_vm_purgable_control(v4, v3, 1, &state))
      state = 3;
    result = mach_vm_region_recurse(v4, &address, &size, &nesting_depth, info, &infoCnt);
    if ((_DWORD)result)
      break;
    v8 = DWORD1(v17);
    if (DWORD1(v17) >= 0x100)
    {
      __break(1u);
      return result;
    }
    v9 = &a1[32 * DWORD1(v17)];
    ++*(_QWORD *)v9;
    v10 = size;
    v11 = size / *v5;
    *((_QWORD *)v9 + 3) += v11;
    if (state == 2)
    {
      v6 = v9 + 16;
    }
    else if (state == 1)
    {
      v11 = DWORD2(v17);
      v6 = &a1[32 * v8 + 16];
    }
    else if (BYTE14(v18))
    {
      v11 = (v18 + DWORD1(v18));
      v6 = &a1[32 * v8 + 8];
    }
    else
    {
      v11 = v19[4];
      v12 = &a1[32 * v8];
      *((_QWORD *)v12 + 1) += (DWORD2(v17) - v19[4] + v18);
      v6 = v12 + 16;
    }
    *(_QWORD *)v6 += v11;
    v3 = address + v10;
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  int *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result + 8);
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (v5)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7 >> 31;
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197AFDB94);
  }
  v9 = *(_BYTE **)result;
  v10 = *a2;
  v11 = *a2;
  do
  {
    LODWORD(v8) = v8 + 1;
    v12 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v12);
  if (((v8 | v7) & 0x80000000) != 0)
    goto LABEL_10;
  v13 = (v7 + v8);
  if (__OFADD__((_DWORD)v7, (_DWORD)v8))
    goto LABEL_10;
  if (!(_DWORD)v13)
  {
    v14 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_23;
  }
  if ((v13 & 0x80000000) != 0)
  {
LABEL_10:
    v14 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20), v17);
    v14 = (int *)v17[0];
    if (v17[0])
    {
      v15 = (_BYTE *)(v17[0] + 20);
      *(_DWORD *)v17[0] = 2;
      v14[1] = v13;
      *((_QWORD *)v14 + 1) = v14 + 5;
      v14[4] = 4;
      if ((_DWORD)v7)
      {
        if ((_DWORD)v7 == 1)
          *v15 = *v9;
        else
          result = (uint64_t)memcpy(v14 + 5, v9, v7);
      }
      v16 = 0;
      do
      {
        *((_BYTE *)&v17[1] + v16-- + 4) = (v10 % 0xA) | 0x30;
        v12 = v10 > 9;
        v10 /= 0xAu;
      }
      while (v12);
      if (v16 + 14 <= 13)
        result = (uint64_t)memcpy(&v15[v7], (char *)&v17[1] + v16 + 5, -v16);
    }
  }
LABEL_23:
  *a3 = v14;
  return result;
}

uint64_t WTF::RunLoop::initializeMain(WTF::RunLoop *this)
{
  uint64_t result;

  if (WTF::s_mainRunLoop)
  {
    result = 63;
    __break(0xC471u);
  }
  else
  {
    result = WTF::RunLoop::current(this);
    WTF::s_mainRunLoop = result;
  }
  return result;
}

uint64_t WTF::RunLoop::current(WTF::RunLoop *this)
{
  unint64_t v1;
  void *v2;
  uint64_t result;
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::RunLoop *v8;
  char v9;
  char **v10;
  char *v11;

  v1 = atomic_load(&WTF::RunLoop::runLoopHolder(void)::onceKey);
  if (v1 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::RunLoop::runLoopHolder(void)::onceKey, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::RunLoop::runLoopHolder(void)::$_0 &&>>);
  }
  v2 = pthread_getspecific(WTF::RunLoop::runLoopHolder(void)::runLoopHolder);
  if (v2)
    return *(_QWORD *)v2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5)
    v5 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v5 + 5) > 0x3Fu)
    goto LABEL_12;
  v6 = *(_QWORD *)(StatusReg + 736);
  if (!v6)
    v6 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v6 + 5) & 8) != 0)
  {
LABEL_12:
    result = 195;
    __break(0xC471u);
  }
  else
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v7[1] = &WTF::RunLoop::runLoopHolder(void)::runLoopHolder;
    pthread_setspecific(WTF::RunLoop::runLoopHolder(void)::runLoopHolder, v7);
    v8 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x70);
    result = (uint64_t)WTF::RunLoop::RunLoop(v8);
    *v7 = result;
  }
  return result;
}

uint64_t WTF::RunLoop::main(WTF::RunLoop *this)
{
  return WTF::s_mainRunLoop;
}

uint64_t WTF::RunLoop::initializeWeb(WTF::RunLoop *this)
{
  uint64_t result;

  if (WTF::s_webRunLoop)
  {
    result = 91;
    __break(0xC471u);
  }
  else
  {
    result = WTF::RunLoop::current(this);
    WTF::s_webRunLoop = result;
  }
  return result;
}

uint64_t WTF::RunLoop::web(WTF::RunLoop *this)
{
  return WTF::s_webRunLoop;
}

uint64_t WTF::RunLoop::webIfExists(WTF::RunLoop *this)
{
  return WTF::s_webRunLoop;
}

void WTF::RunLoop::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  WTF::Thread *v9;
  unint64_t *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  WTF::Thread *v41;
  int v42;

  v40 = 0;
  v38 = 0;
  v39 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E35720C0;
  v8[1] = &v40;
  v8[2] = &v38;
  v37 = v8;
  WTF::Thread::create(a1, a2, (uint64_t *)&v37, a3, 0, (uint64_t *)&v41);
  v9 = v41;
  v10 = (unint64_t *)((char *)v41 + 8);
  if (__ldaxr((unint64_t *)v41 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v10))
  {
    goto LABEL_5;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)v10);
LABEL_5:
  pthread_detach(*((pthread_t *)v9 + 5));
  if ((*((_BYTE *)v9 + 5) & 2) == 0)
    *((_BYTE *)v9 + 4) = 2;
  v19 = __ldxr(v10);
  if (v19 == 1)
  {
    if (!__stlxr(0, v10))
    {
      v20 = (unsigned int *)v41;
      v41 = 0;
      if (!v20)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)v10);
  v20 = (unsigned int *)v41;
  v41 = 0;
  if (!v20)
    goto LABEL_15;
  do
  {
LABEL_13:
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::Thread::~Thread((WTF::Thread *)v20, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    v23 = (uint64_t)v37;
    v37 = 0;
    if (!v23)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_15:
  v23 = (uint64_t)v37;
  v37 = 0;
  if (v23)
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_17:
  v41 = (WTF::Thread *)0x7FF0000000000000;
  v42 = 0;
  if (__ldaxr((unsigned __int8 *)&v38 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v38 + 1))
  {
    goto LABEL_21;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v38 + 1);
LABEL_21:
  while (!(_BYTE)v38)
  {
    if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v39, (unsigned __int8 *)&v38 + 1, (WTF::TimeWithDynamicClockType *)&v41) & 1) == 0)
    {
      if (!(_BYTE)v38)
        goto LABEL_25;
      break;
    }
  }
  LOBYTE(v38) = 0;
LABEL_25:
  v25 = __ldxr((unsigned __int8 *)&v38 + 1);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&v38 + 1))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v38 + 1, 0, v13, v14, v15, v16, v17, v18);
LABEL_30:
  v26 = v40;
  v27 = (unsigned int *)(v40 + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *a4 = v26;
}

WTF::RunLoop *WTF::RunLoop::isCurrent(WTF::RunLoop *this)
{
  unint64_t v2;
  WTF::RunLoop *result;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&WTF::RunLoop::runLoopHolder(void)::onceKey);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::RunLoop::runLoopHolder(void)::onceKey, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::RunLoop::runLoopHolder(void)::$_0 &&>>);
  }
  result = (WTF::RunLoop *)pthread_getspecific(WTF::RunLoop::runLoopHolder(void)::runLoopHolder);
  if (result)
    return (WTF::RunLoop *)(WTF::RunLoop::current(result) == (_QWORD)this);
  return result;
}

void WTF::RunLoop::performWork(WTF::RunLoop *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 48);
LABEL_5:
  v11 = *((_QWORD *)this + 3);
  v12 = (uint64_t *)((char *)this + 56);
  if (*((_QWORD *)this + 2) != v11)
  {
    while (1)
    {
      if (!v11)
        v11 = *((unsigned int *)this + 10);
      v19 = v11 - 1;
      v20 = *((_QWORD *)this + 4);
      v21 = 8 * v19;
      v22 = *(_QWORD *)(v20 + 8 * v19);
      *(_QWORD *)(v20 + v21) = 0;
      *((_QWORD *)this + 3) = v19;
      v23 = *((_QWORD *)this + 4);
      v24 = *(_QWORD *)(v23 + v21);
      *(_QWORD *)(v23 + v21) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = *((_QWORD *)this + 7);
      v26 = *((_QWORD *)this + 8);
      if (v25)
      {
        if (v26 + 1 == v25)
          goto LABEL_23;
      }
      else
      {
        v25 = *((unsigned int *)this + 20);
        if (v26)
        {
          if (v26 == v25 - 1)
          {
LABEL_23:
            WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity((uint64_t *)this + 7);
            v25 = *v12;
            if (!*v12)
              v25 = *((unsigned int *)this + 20);
          }
        }
        else if (!*((_DWORD *)this + 20))
        {
          goto LABEL_23;
        }
      }
      v13 = v25 - 1;
      *((_QWORD *)this + 7) = v13;
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v13) = v22;
      v11 = *((_QWORD *)this + 3);
      if (*((_QWORD *)this + 2) == v11)
        goto LABEL_7;
    }
  }
  v13 = *v12;
LABEL_7:
  v14 = *((_QWORD *)this + 8);
  v15 = *((_QWORD *)this + 9);
  v16 = *((_DWORD *)this + 20);
  *v12 = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = v13;
  *((_QWORD *)this + 3) = v14;
  v17 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v15;
  *((_DWORD *)this + 10) = v16;
  if (v17)
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  v18 = __ldxr(v9);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v9))
  {
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_31;
  }
  while (1)
  {
LABEL_31:
    v28 = *((_QWORD *)this + 2);
    if (v28 == *((_QWORD *)this + 3))
    {
      *((_WORD *)this + 44) = 0;
      return;
    }
    if (*((_BYTE *)this + 88))
      break;
    v29 = *((_QWORD *)this + 4);
    v30 = 8 * v28;
    v31 = *(_QWORD *)(v29 + 8 * v28);
    *(_QWORD *)(v29 + v30) = 0;
    v32 = *((_QWORD *)this + 4);
    v33 = *(_QWORD *)(v32 + 8 * v28);
    *(_QWORD *)(v32 + v30) = 0;
    if (v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v28 = *((_QWORD *)this + 2);
    }
    if (v28 == *((unsigned int *)this + 10) - 1)
      v27 = 0;
    else
      v27 = v28 + 1;
    *((_QWORD *)this + 2) = v27;
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  *((_WORD *)this + 44) = 256;
  CFRunLoopSourceSignal(*((CFRunLoopSourceRef *)this + 13));
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 12));
}

void WTF::RunLoop::dispatch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (!*a2)
  {
    __break(0xC471u);
    return;
  }
  v10 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 48);
LABEL_6:
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v14 = *(_QWORD *)(a1 + 64);
    if (v13 + 1 != v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  v15 = *(unsigned int *)(a1 + 80);
  if (!v13)
  {
    if ((_DWORD)v15)
    {
      v14 = 0;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v16 = v15 - 1;
  v14 = *(_QWORD *)(a1 + 64);
  if (v13 == v16)
  {
LABEL_14:
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity((uint64_t *)(a1 + 56));
    v14 = *(_QWORD *)(a1 + 64);
  }
LABEL_15:
  v17 = *(_QWORD *)(a1 + 72);
  v18 = *a2;
  *a2 = 0;
  *(_QWORD *)(v17 + 8 * v14) = v18;
  if (v14 == *(unsigned int *)(a1 + 80) - 1)
    v19 = 0;
  else
    v19 = v14 + 1;
  *(_QWORD *)(a1 + 64) = v19;
  v20 = __ldxr(v10);
  if (v20 != 1)
  {
    __clrex();
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
    if (v12 == v13)
      goto LABEL_21;
    return;
  }
  if (__stlxr(0, v10))
    goto LABEL_23;
  if (v12 == v13)
  {
LABEL_21:
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 104));
    CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 96));
  }
}

void WTF::RunLoop::dispatchAfter(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;

  if (*a2)
  {
    v8 = WTF::fastMalloc((WTF *)0x28);
    v9 = v8;
    *(_QWORD *)v8 = off_1E3572150;
    v10 = (unsigned int *)(a1 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_QWORD *)(v8 + 8) = a1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 24) = 1;
    v12 = (unsigned int *)(v8 + 24);
    *(_QWORD *)v8 = off_1E3572098;
    *(_QWORD *)(v8 + 32) = 0;
    *a3 = v8;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = *a2;
    *a2 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = &off_1E35720E8;
    v15[1] = v9;
    v15[2] = v14;
    v16 = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v9 + 32) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = 0.0;
    if (a4 >= 0.0)
      v17 = a4;
    WTF::RunLoop::TimerBase::start(*a3, 0, v17);
  }
  else
  {
    __break(0xC471u);
  }
}

void WTF::RunLoop::suspendFunctionDispatchForCurrentCycle(WTF::RunLoop *this)
{
  if (!*((_BYTE *)this + 88) && !*((_BYTE *)this + 89))
  {
    *((_BYTE *)this + 88) = 1;
    CFRunLoopSourceSignal(*((CFRunLoopSourceRef *)this + 13));
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 12));
  }
}

void WTF::RunLoop::threadWillExit(WTF::RunLoop *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (_QWORD *)((char *)this + 16);
  v12 = (uint64_t *)*((_QWORD *)this + 4);
  if (v9 <= v10)
  {
    if (v9 == v10)
      goto LABEL_15;
    v15 = v9;
    v16 = &v12[v15];
    v17 = 8 * v10 - v15 * 8;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  else
  {
    if (v10)
    {
      v13 = 8 * v10;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      v9 = *((_QWORD *)this + 2);
    }
    v19 = *((unsigned int *)this + 10);
    if (v9 != v19)
    {
      v33 = v9;
      v34 = &v12[v33];
      v35 = 8 * v19 - v33 * 8;
      do
      {
        v36 = *v34;
        *v34 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 4);
LABEL_15:
  *v11 = 0;
  v11[1] = 0;
  if (v12)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v20))
  {
    goto LABEL_21;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 48);
LABEL_21:
  v22 = *((_QWORD *)this + 7);
  v23 = *((_QWORD *)this + 8);
  v24 = (uint64_t *)*((_QWORD *)this + 9);
  if (v22 <= v23)
  {
    if (v22 == v23)
      goto LABEL_35;
    v27 = v22;
    v28 = &v24[v27];
    v29 = 8 * v23 - v27 * 8;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  else
  {
    if (v23)
    {
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        ++v24;
        v25 -= 8;
      }
      while (v25);
      v24 = (uint64_t *)*((_QWORD *)this + 9);
      v22 = *((_QWORD *)this + 7);
    }
    v31 = *((unsigned int *)this + 20);
    if (v22 != v31)
    {
      v37 = v22;
      v38 = &v24[v37];
      v39 = 8 * v31 - v37 * 8;
      do
      {
        v40 = *v38;
        *v38 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        ++v38;
        v39 -= 8;
      }
      while (v39);
    }
  }
  v24 = (uint64_t *)*((_QWORD *)this + 9);
LABEL_35:
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (v24)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = __ldxr(v20);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v20))
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 48, 0, a3, a4, a5, a6, a7, a8);
}

