void JSC::FTL::OSRExitDescriptor::emitOSRExitLater(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>)
{
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  void *v35;
  unsigned int *v36;

  JSC::FTL::OSRExitDescriptor::prepareOSRExitHandle(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t *)&v36);
  v12 = v36;
  if (v36)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = *(_QWORD *)(a5 + 56);
    do
      v15 = __ldaxr(v12);
    while (__stlxr(v15 + 1, v12));
    v23 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v23 + 8) = 1;
    *(_QWORD *)v23 = &off_1E35900E8;
    do
      v24 = __ldaxr(v12);
    while (__stlxr(v24 + 1, v12));
  }
  else
  {
    v14 = *(_QWORD *)(a5 + 56);
    v23 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v23 + 8) = 1;
    *(_QWORD *)v23 = &off_1E35900E8;
  }
  *(_QWORD *)(v23 + 16) = v12;
  *(_QWORD *)(v23 + 24) = a2;
  v25 = *(unsigned int *)(v14 + 12);
  if ((_DWORD)v25 == *(_DWORD *)(v14 + 8))
  {
    v31 = v25 + (v25 >> 2);
    if (v31 >= 0x10)
      v32 = v31 + 1;
    else
      v32 = 16;
    if (v32 <= v25 + 1)
      v33 = v25 + 1;
    else
      v33 = v32;
    if (v33 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v34 = *(const void **)v14;
    v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
    *(_DWORD *)(v14 + 8) = v33;
    *(_QWORD *)v14 = v35;
    memcpy(v35, v34, 8 * v25);
    if (v34)
    {
      if (*(const void **)v14 == v34)
      {
        *(_QWORD *)v14 = 0;
        *(_DWORD *)(v14 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v34, v16, v17, v18, v19, v20, v21, v22);
    }
    v25 = *(unsigned int *)(v14 + 12);
    v26 = (uint64_t *)(*(_QWORD *)v14 + 8 * v25);
  }
  else
  {
    v26 = (uint64_t *)(*(_QWORD *)v14 + 8 * v25);
  }
  *v26 = v23;
  *(_DWORD *)(v14 + 12) = v25 + 1;
  if (v12)
  {
    do
    {
      v27 = __ldaxr(v12);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v12));
    if (!v28)
    {
      atomic_store(1u, v12);
      WTF::fastFree((unint64_t)v12, v16, v17, v18, v19, v20, v21, v22);
    }
    do
    {
      v29 = __ldaxr(v12);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v12));
    if (!v30)
    {
      atomic_store(1u, v12);
      WTF::fastFree((unint64_t)v12, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  *a9 = v12;
}

uint64_t operationCompileFTLOSRExit(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  JSC::B3::ValueRep **v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  JSC::ExecutableAllocator *v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  JSC::B3::ValueRep **v38[5];
  char v39;
  unsigned int v40;

  v40 = a2;
  if (HIBYTE(word_1ECF4C286)
    || (!BYTE1(dword_1ECF4C28A) ? (v32 = BYTE2(dword_1ECF4C28A) == 0) : (v32 = 0),
        v32 ? (v33 = BYTE1(qword_1ECF4C332) == 0) : (v33 = 0),
        v33 ? (v34 = BYTE3(qword_1ECF4C332) == 0) : (v34 = 0),
        !v34))
  {
    WTF::dataLog<char [2],unsigned int,char [3]>("Compiling OSR exit with exitID = ", &v40, "\n");
  }
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 8) != 0)
    v4 = v3 - 16;
  else
    v4 = v3 & 0xFFFFFFFFFFFFC000 | 8;
  v5 = *(JSC::VM **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 90480);
  if (v6)
    v7 = v6 == a1;
  else
    v7 = 1;
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1985860ECLL);
  }
  v8 = *(_QWORD *)(a1 + 16);
  ++*((_DWORD *)v5 + 229);
  v9 = *(unsigned int **)(v8 + 120);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v9 + 2;
  v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 96))(v9);
  do
  {
    v14 = __ldaxr(v12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v12));
  if (!v15)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
  }
  v16 = v40;
  if (*(_DWORD *)(v13 + 252) <= v40)
  {
    __break(0xC471u);
    JUMPOUT(0x19858612CLL);
  }
  v17 = *(_QWORD *)(v13 + 240);
  v18 = (_BYTE *)(v17 + 72 * v40);
  if (HIBYTE(word_1ECF4C286)
    || (!BYTE1(dword_1ECF4C28A) ? (v35 = BYTE2(dword_1ECF4C28A) == 0) : (v35 = 0),
        v35 ? (v36 = BYTE1(qword_1ECF4C332) == 0) : (v36 = 0),
        v36 ? (v37 = BYTE3(qword_1ECF4C332) == 0) : (v37 = 0),
        !v37))
  {
    v38[0] = (JSC::B3::ValueRep **)v8;
    WTF::dataLog<char [19],WTF::PointerDump<JSC::CodeBlock>,char [2]>((uint64_t *)v38);
    WTF::dataLog<char [13],JSC::CodeOrigin,char [2]>((JSC::CodeOrigin *)(v18 + 8));
    v19 = *((_QWORD *)v18 + 2);
    v20 = *((_QWORD *)v18 + 1);
    if (v19 != v20)
    {
      if ((v19 & 2) != 0)
      {
        LODWORD(v28) = -1;
      }
      else if ((v19 & 1) != 0)
      {
        LODWORD(v28) = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v28 = v19 >> 36;
      }
      if ((v20 & 2) != 0)
      {
        LODWORD(v29) = -1;
      }
      else if ((v20 & 1) != 0)
      {
        LODWORD(v29) = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v29 = v20 >> 36;
      }
      if ((_DWORD)v28 != (_DWORD)v29)
        goto LABEL_32;
      v30 = (_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 1) != 0)
        v30 = (_QWORD *)*v30;
      v31 = (_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 1) != 0)
        v31 = (_QWORD *)*v31;
      if (v30 != v31)
LABEL_32:
        WTF::dataLog<char [30],JSC::CodeOrigin,char [2]>((JSC::CodeOrigin *)(v18 + 16));
    }
    LODWORD(v38[0]) = *(_DWORD *)(a1 + 36);
    WTF::dataLog<char [30],unsigned int,char [2]>(v38);
    LOBYTE(v38[0]) = (v18[4] & 0xFE) == 26;
    WTF::dataLog<char [32],BOOL,char [2]>("    Exit is exception handler: ", v38, "\n");
    LOBYTE(v38[0]) = v18[4] == 27;
    WTF::dataLog<char [32],BOOL,char [2]>("    Is unwind handler: ", v38, "\n");
    v21 = v17 + 72 * v16;
    v23 = *(_QWORD *)(v21 + 32);
    v22 = (JSC::B3::ValueRep **)(v21 + 32);
    WTF::dataLog<char [18],JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>,char [2]>(v23 + 24);
    v38[0] = v22 + 4;
    v38[1] = (JSC::B3::ValueRep **)", ";
    v38[2] = (JSC::B3::ValueRep **)3;
    v38[3] = (JSC::B3::ValueRep **)"";
    v38[4] = (JSC::B3::ValueRep **)1;
    v39 = 0;
    WTF::dataLog<char [17],WTF::ListDump<WTF::FixedVector<JSC::B3::ValueRep>>,char [2]>(v38);
    if (*((_QWORD *)*v22 + 5))
    {
      WTF::dataLog<char [23]>();
      for (i = *((_QWORD *)*v22 + 5); i; i = *(_QWORD *)(i + 32))
      {
        v38[0] = (JSC::B3::ValueRep **)i;
        WTF::dataLog<char [9],WTF::PointerDump<JSC::FTL::ExitTimeObjectMaterialization>,char [2]>((const void **)v38);
      }
    }
  }
  JSC::FTL::compileStub(v5, (void *)v40, v13, v17 + 72 * v16, (_QWORD *)v8);
  v25 = v17 + 72 * v16;
  v26 = *(JSC::ExecutableAllocator **)(v25 + 56);
  JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(v26, (unint64_t)v26, *(_QWORD *)(v25 + 40));
  sys_icache_invalidate(v26, 4uLL);
  result = *(_QWORD *)(v25 + 40);
  --*((_DWORD *)v5 + 229);
  return result;
}

uint64_t WTF::dataLog<char [19],WTF::PointerDump<JSC::CodeBlock>,char [2]>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Owning block: ");
  if (*a1)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a1);
  }
  else
  {
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v5, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  }
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],JSC::CodeOrigin,char [2]>(JSC::CodeOrigin *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Origin: ");
  JSC::CodeOrigin::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [30],JSC::CodeOrigin,char [2]>(JSC::CodeOrigin *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Origin for exit profile: ");
  JSC::CodeOrigin::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [30],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Current call site index: ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [32],BOOL,char [2]>(const char *a1, _BYTE *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  if (*a2)
    v9 = "true";
  else
    v9 = "false";
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v10, "%s", v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [18],JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Exit values: ");
  JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>::dump(a1, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [17],WTF::ListDump<WTF::FixedVector<JSC::B3::ValueRep>>,char [2]>(JSC::B3::ValueRep ***a1)
{
  unint64_t v2;
  WTF::PrintStream *v3;
  JSC::B3::ValueRep *v4;
  JSC::B3::ValueRep *v5;
  WTF::PrintStream *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  JSC::B3::ValueRep **v11;
  char *v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  JSC::B3::ValueRep **v16;
  char *v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  char **v26;
  char *v27;
  int v28;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v27 = &v25;
    v26 = &v27;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v24 = WTF::s_file;
  v3 = (WTF::PrintStream *)(*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  WTF::PrintStream::printf(v3, "%s", "    Value reps: ");
  v4 = **a1;
  if (v4)
    v5 = (JSC::B3::ValueRep *)((char *)v4 + 8);
  else
    v5 = 0;
  if (v4)
LABEL_7:
    v4 = (JSC::B3::ValueRep *)((char *)v4 + 16 * *(unsigned int *)v4 + 8);
  while (v5 != v4)
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 32))(v3);
    v7 = *((unsigned __int8 *)a1 + 40);
    v8 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v9 = v8;
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32);
    if (v7)
    {
      v12 = (char *)a1[1];
      v11 = a1[2];
      v13 = (WTF::PrintStream *)v10(v8);
      if (v12)
      {
        v15 = (_DWORD)v11 - 1;
        if (!v11)
          v15 = 0;
        WTF::StringImpl::utf8ForCharacters(v12, v15, (uint64_t)&v27, v14);
      }
      else
      {
        v21 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = 0;
        v27 = (char *)v21;
        v28 = 0;
      }
      WTF::printExpectedCStringHelper(v13, "StringView", &v27);
      if (v28 != -1)
        ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v26, &v27);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    }
    else
    {
      v17 = (char *)a1[3];
      v16 = a1[4];
      v18 = (WTF::PrintStream *)v10(v8);
      if (v17)
      {
        v20 = (_DWORD)v16 - 1;
        if (!v16)
          v20 = 0;
        WTF::StringImpl::utf8ForCharacters(v17, v20, (uint64_t)&v27, v19);
      }
      else
      {
        v22 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = 0;
        *(_BYTE *)(v22 + 16) = 0;
        v27 = (char *)v22;
        v28 = 0;
      }
      WTF::printExpectedCStringHelper(v18, "StringView", &v27);
      if (v28 != -1)
        ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v26, &v27);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      *((_BYTE *)a1 + 40) = 1;
    }
    JSC::B3::ValueRep::dump(v5, v6);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 40))(v3);
    v5 = (JSC::B3::ValueRep *)((char *)v5 + 16);
    v4 = **a1;
    if (v4)
      goto LABEL_7;
  }
  WTF::PrintStream::printf(v3, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
}

uint64_t WTF::dataLog<char [23]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "    Materializations:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [9],WTF::PointerDump<JSC::FTL::ExitTimeObjectMaterialization>,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  unsigned __int16 *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  int **v9[5];
  char v10;
  __int128 v11;
  const void *v12;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9[0] = (int **)&v12;
    *(_QWORD *)&v11 = v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "        ");
  v5 = (unsigned __int16 *)*a1;
  if (*a1)
  {
    v12 = *a1;
    v11 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * *v5];
    v9[0] = (int **)(v5 + 8);
    v9[1] = (int **)", ";
    v9[2] = (int **)3;
    v9[3] = (int **)"";
    v9[4] = (int **)1;
    v10 = 0;
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printImpl<WTF::RawPointer,char [2],WTF::ASCIILiteral,char [2],WTF::ListDump<WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(v6, &v12, ":", (uint64_t)&v11, "(", v9, ")");
  }
  else
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", "(null)");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::FTL::compileStub(JSC::VM *a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v9;
  pthread_key_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::ARM64LogicalImmediate *v52;
  void (**v53)(WTF::PrintStream *__hidden);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unint64_t v88;
  void *v89;
  unint64_t ArrayProfile;
  WTF::Lock *v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  void (**v96)(WTF::PrintStream *__hidden);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  uint64_t v108;
  int v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  _BYTE *v115;
  unsigned int v116;
  WTF **v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  WTF **v126;
  WTF *v127;
  unsigned int v128;
  WTF **v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  int v140;
  unint64_t v141;
  uint64_t *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  int v151;
  unint64_t v152;
  uint64_t *v153;
  unsigned int *v154;
  unint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  WTF **v160;
  unint64_t v161;
  std::once_flag::_State_type *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  int v170;
  unint64_t v171;
  uint64_t *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  int v185;
  unint64_t v186;
  uint64_t *v187;
  unsigned int v188;
  unsigned int v189;
  void (***v190)(WTF::PrintStream *__hidden);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned __int8 v197;
  unint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  int v203;
  unint64_t v204;
  uint64_t *v205;
  unsigned int *v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int *v215;
  unsigned int *v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  WTF *v236;
  char v237;
  char v238;
  uint64_t v239;
  unsigned __int8 v240;
  unsigned int *v241;
  unsigned int v242;
  int v243;
  unint64_t v244;
  uint64_t *v245;
  unsigned int *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int *v255;
  unsigned int *v256;
  unsigned int v257;
  unint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unsigned __int8 v271;
  unsigned int *v272;
  unsigned int v273;
  int v274;
  unint64_t v275;
  uint64_t *v276;
  unsigned int *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unsigned int *v286;
  unsigned int *v287;
  unsigned int v288;
  unint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int *v293;
  unsigned int v294;
  uint64_t v295;
  unsigned int *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unsigned int *v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  WTF **v306;
  unint64_t v307;
  unsigned __int8 v308;
  unsigned int *v309;
  unsigned int v310;
  int v311;
  unint64_t v312;
  uint64_t *v313;
  unsigned int *v314;
  unsigned int v315;
  uint64_t v316;
  unsigned int *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unsigned int *v323;
  unsigned int *v324;
  unsigned int v325;
  unint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int *v330;
  unsigned int v331;
  uint64_t v332;
  unsigned int *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unsigned int *v339;
  unsigned int *v340;
  unsigned int v341;
  unint64_t v342;
  unsigned int v343;
  WTF **v344;
  unsigned __int8 v345;
  unsigned int *v346;
  unsigned int v347;
  int v348;
  unint64_t v349;
  uint64_t *v350;
  unsigned int *v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unsigned int *v360;
  unsigned int *v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int *v367;
  unsigned int v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  WTF *v381;
  char v382;
  char v383;
  uint64_t v384;
  unsigned __int8 v385;
  unint64_t v386;
  unsigned int *v387;
  unsigned int v388;
  int v389;
  unint64_t v390;
  uint64_t *v391;
  unsigned int *v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int *v395;
  unsigned int v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unsigned __int8 v404;
  unsigned int *v405;
  unsigned int v406;
  int v407;
  unint64_t v408;
  uint64_t *v409;
  unsigned int *v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int *v413;
  unsigned int v414;
  uint64_t v415;
  unsigned int *v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unsigned int *v422;
  unsigned int *v423;
  unsigned int v424;
  unsigned int v425;
  WTF **v426;
  unint64_t v427;
  unsigned __int8 v428;
  unsigned int *v429;
  unsigned int v430;
  int v431;
  unint64_t v432;
  uint64_t *v433;
  unsigned int *v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int *v437;
  unsigned int v438;
  uint64_t v439;
  unsigned int *v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unsigned int *v446;
  unsigned int *v447;
  unsigned int v448;
  unsigned int v449;
  WTF **v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  unsigned int v454;
  int v455;
  unint64_t v456;
  uint64_t *v457;
  unint64_t v458;
  unsigned int *v459;
  unsigned int v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int v474;
  int *v475;
  int v476;
  unint64_t v477;
  int v478;
  unint64_t v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  unsigned int v484;
  WTF **v485;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  pthread_key_t *v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  WTF *v508;
  unint64_t v509;
  unsigned int v510;
  char v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  JSC::ExecutableMemoryHandle *v519;
  size_t v520;
  JSC::ExecutableMemoryHandle *v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  char v525;
  char v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char v533;
  _QWORD *v534;
  JSC::ARM64Assembler *v535;
  unsigned int v536;
  _QWORD *v537;
  _QWORD *v538;
  void *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int v548;
  BOOL v549;
  int v550;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  void *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD *v601;
  WTF *v602;
  unint64_t v603;
  uint64_t v604;
  int v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  void *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  char v649;
  char v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unsigned int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  char v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  JSC::CodeBlock *v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  void *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  JSC::ExecutableMemoryHandle *v751;
  size_t v752;
  JSC::ExecutableMemoryHandle *v753;
  uint64_t v754;
  uint64_t v755;
  _DWORD *v756;
  char *v757;
  JSC::FTL::ExitValue *v758;
  int v759;
  WTF::PrintStream *v760;
  unint64_t v761;
  unint64_t i;
  _DWORD *v763;
  char *v764;
  JSC::FTL::ExitValue *v765;
  int v766;
  WTF::PrintStream *v767;
  unint64_t j;
  _DWORD *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  JSC::FTL::ExitValue *v774;
  int v775;
  WTF::PrintStream *v776;
  void *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  JSC::ExecutableMemoryHandle *v784;
  size_t v785;
  uint64_t v786;
  JSC::ExecutableMemoryHandle *v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  WTF *v795;
  unsigned int *v796;
  unsigned int v797;
  unsigned int *v798;
  unsigned int v799;
  unsigned int v800;
  int v801;
  unsigned int *v802;
  unsigned int v803;
  unsigned int v804;
  void *v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unsigned int v813;
  int v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  JSC::Profiler::Database *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  void *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unsigned int v854;
  int v855;
  BOOL v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  unint64_t v863;
  unint64_t v864;
  void *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  void *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  char v883;
  char v884;
  uint64_t v885;
  unint64_t v886;
  _DWORD *v887;
  _DWORD *v888;
  _BYTE *v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  unsigned int v898;
  unsigned int *v899;
  unsigned int v900;
  unsigned int v901;
  unint64_t v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  WTF *v911;
  uint64_t *v912;
  JSC::ARM64Assembler *v913;
  void *v914;
  JSC::ARM64LogicalImmediate *v915;
  JSC::ARM64LogicalImmediate *v916;
  uint64_t v917;
  uint64_t v919;
  uint64_t v920;
  _QWORD *v921;
  _QWORD v922[4];
  uint64_t v923;
  JSC::ARM64LogicalImmediate *v924;
  _QWORD v925[3];
  JSC::FTL::ExitValue *v926;
  _QWORD *v927;
  const char *v928;
  uint64_t v929;
  const char *v930;
  uint64_t v931;
  unint64_t v932;
  _QWORD v933[4];
  char v934;
  WTF *v935;
  __int128 v936;
  WTF *v937;
  char v938;
  JSC::ARM64LogicalImmediate *v939;
  char v940;
  uint64_t v941;
  int v942;
  int v943;
  unsigned int v944;
  char v945;
  int v946;
  int v947;
  __int128 v948;
  __int128 v949;
  uint64_t v950;
  unsigned int v951[6];
  char v952;
  _QWORD v953[3];
  WTF *v954;
  _BYTE v955[42];
  unsigned int v956;
  unsigned int v957;
  int v958;
  char v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  unsigned int *v963;
  char v964;
  uint64_t v965;
  int v966;
  unsigned int *v967;
  char v968;
  uint64_t v969;
  int v970;
  char v971;
  _QWORD *v972;
  uint64_t v973;
  void (**v974)(WTF::PrintStream *__hidden);
  JSC::ExecutableMemoryHandle *v975;
  __int128 v976;
  _BYTE v977[128];
  uint64_t v978;

  v978 = *MEMORY[0x1E0C80C00];
  LOBYTE(v951[0]) = 0;
  v952 = 0;
  v953[1] = 0;
  v953[0] = 0;
  v953[2] = 0x8000000080000000;
  v954 = (WTF *)v955;
  v956 = 128;
  v9 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v9 != -1)
  {
    v935 = (WTF *)v933;
    v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v10 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v18 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v18)
  {
    v18 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v18, v10);
  }
  v19 = *(WTF **)v18;
  if (*(_QWORD *)v18 != v18 + 8)
  {
    v20 = *(_DWORD *)(v18 + 136);
    if (v956 < v20)
    {
      if (v954 && v954 != (WTF *)v955)
      {
        WTF::fastFree((unint64_t)v954, v11, v12, v13, v14, v15, v16, v17);
        v19 = *(WTF **)v18;
        v20 = *(_DWORD *)(v18 + 136);
      }
      v954 = v19;
      v956 = v20;
      *(_QWORD *)v18 = v18 + 8;
      *(_DWORD *)(v18 + 136) = 128;
    }
  }
  v21 = 0;
  v959 = 1;
  v957 = 0;
  v958 = 0;
  v960 = 0u;
  v961 = 0u;
  v962 = 0u;
  v964 = 16;
  v966 = 0x10000;
  v963 = v951;
  v965 = 0;
  v967 = v951;
  v968 = 17;
  v969 = 0;
  v970 = 0x20000;
  v971 = 0;
  v972 = a5;
  if (a5)
    v21 = JSC::CodeBlock::baselineAlternative((uint64_t)a5);
  v973 = v21;
  if (BYTE3(qword_1ECF4C32A))
  {
    v857 = WTF::fastMalloc((WTF *)0x10);
    LODWORD(v862) = -1;
    *(_DWORD *)(v857 + 12) = -1;
    *(_QWORD *)v857 = v972;
    *(_BYTE *)(v857 + 8) = *(_BYTE *)(a4 + 4);
    v863 = *(_QWORD *)(a4 + 8);
    if ((v863 & 2) == 0)
    {
      if ((v863 & 1) != 0)
        LODWORD(v862) = *(_DWORD *)((v863 & 0xFFFFFFFF8) + 8);
      else
        v862 = v863 >> 36;
    }
    *(_DWORD *)(v857 + 12) = v862;
    JSC::MacroAssembler::probe(v951, (uint64_t)operationDebugPrintSpeculationFailure, v857, 1, v858, v859, v860, v861);
  }
  if (*(_BYTE *)(a4 + 4) == 27)
  {
    if (!*((_QWORD *)a1 + 11310))
    {
      __break(0xC471u);
      JUMPOUT(0x19858AAF4);
    }
    JSC::AssemblyHelpers::restoreCalleeSavesFromEntryFrameCalleeSavesBuffer((char *)v951, (uint64_t)a1 + 48, v12, v13, v14, v15, v16, v17);
    JSC::MacroAssemblerARM64::load64((uint64_t)v951, (uint64_t)a1 + 90480, 29, v727, v728, v729, v730, v731);
    v733 = JSC::CodeBlock::stackPointerOffset((JSC::CodeBlock *)a5, v732);
    JSC::MacroAssemblerARM64::add64((uint64_t)v951, (8 * v733), 29, 31, v734, v735, v736, v737);
    JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters(v951, 195935983, v738, v739, v740, v741, v742, v743);
  }
  v22 = *(_QWORD *)(a4 + 32);
  v23 = *(_QWORD *)(v22 + 40);
  if (v23)
  {
    v25 = 0;
    v24 = 0;
    do
    {
      ++v25;
      if (v24 <= *(unsigned int *)(v23 + 28))
        v24 = *(unsigned int *)(v23 + 28);
      v23 = *(_QWORD *)(v23 + 32);
    }
    while (v23);
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v26 = *(unsigned int **)(v22 + 24);
  if (v26)
    v26 = (unsigned int *)*v26;
  v27 = 8 * ((_QWORD)v26 + v24 + v25);
  v28 = a5[15];
  if (v28)
  {
    v29 = (unsigned int *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = v25;
  v32 = v27 + 512;
  v33 = *(unsigned __int8 *)(v28 + 12);
  if (v33 == 5)
  {
    v35 = (uint64_t *)(v28 + 256);
  }
  else if (v33 == 4)
  {
    v93 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v93 != -1)
    {
      v935 = (WTF *)v933;
      v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v35 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
  }
  else
  {
    v34 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
    if (v34 != -1)
    {
      v935 = (WTF *)v933;
      v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
      std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v35 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  }
  v42 = JSC::VM::scratchBufferForSize(a1, v32 + v35[1], v12, v13, v14, v15, v16, v17);
  v43 = (unsigned int *)(v28 + 8);
  do
  {
    v44 = __ldaxr(v43);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v43));
  if (!v45)
  {
    atomic_store(1u, (unsigned int *)(v28 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  }
  v46 = v42 + 8;
  if (!v42)
    v46 = 0;
  v917 = v46;
  v47 = *(_QWORD *)(a4 + 32);
  v48 = *(unsigned int **)(v47 + 24);
  v914 = a2;
  v915 = a1;
  if (v48)
    v49 = *v48;
  else
    v49 = 0;
  v50 = v917 + 8 * v49;
  v51 = v50 + 8 * v31;
  v52 = (JSC::ARM64LogicalImmediate *)(v51 + 8 * v24);
  v923 = 0;
  v924 = v52;
  v53 = *(void (***)(WTF::PrintStream *__hidden))(v47 + 40);
  v916 = v52;
  if (v53)
  {
    v94 = 0;
    do
    {
      v974 = v53;
      v95 = v94 + 1;
      v933[0] = v50 + 8 * v94;
      WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::add<long long *>((uint64_t)&v935, &v923, (uint64_t *)&v974, v933, v38, v39, v40, v41);
      v53 = (void (**)(WTF::PrintStream *__hidden))v53[4];
      v94 = v95;
    }
    while (v53);
    v52 = v924;
  }
  v54 = a4;
  v922[0] = v951;
  v922[1] = a4;
  v922[2] = &v924;
  v922[3] = &v923;
  JSC::FTL::saveAllRegisters((JSC::FTL *)v951, v52, v36, v37, v38, v39, v40, v41);
  v62 = v957;
  if (v957 + 4 > v956)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v954, v55, v56, v57, v58, v59, v60, v61);
    v62 = v957;
  }
  *(_DWORD *)((char *)v954 + v62) = -129955872;
  v957 += 4;
  if (*((_QWORD *)a1 + 11627) && *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3) + 192))
  {
    v836 = (JSC::Profiler::Database *)*((_QWORD *)a1 + 11627);
    v837 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3) + 192);
    JSC::Profiler::OriginStack::OriginStack((JSC::Profiler::OriginStack *)&v935, v836, (JSC::CodeBlock *)a5, (const JSC::CodeOrigin *)(a4 + 8));
    v841 = JSC::Profiler::Compilation::addOSRExit(v837, v914, (uint64_t)&v935, *(unsigned __int8 *)(a4 + 4), *(unsigned __int8 *)(a4 + 4) == 23, v838, v839, v840);
    JSC::Profiler::OriginStack::~OriginStack((JSC::Profiler::OriginStack *)&v935, v842, v843, v844, v845, v846, v847, v848);
    JSC::MacroAssemblerARM64::add64((uint64_t)v951, 1, v841 + 40, v849, v850, v851, v852, v853);
  }
  v63 = v957;
  if (v957 + 4 > v956)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v954, v55, v56, v57, v58, v59, v60, v61);
    v63 = v957;
  }
  *(_DWORD *)((char *)v954 + v63) = -1303430149;
  v957 += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)v951, 2, 27, 28);
  v70 = *(_QWORD *)(a4 + 32);
  if (!*(_BYTE *)v70)
    goto LABEL_82;
  v71 = *(_QWORD *)(a4 + 64);
  if (!*(_DWORD *)v71)
  {
    __break(0xC471u);
    JUMPOUT(0x19858A86CLL);
  }
  v72 = *(unsigned __int8 *)(v71 + 16);
  switch(v72)
  {
    case 7:
      v73 = *(_BYTE *)(v71 + 8) & 0x7F;
      v74 = 1;
      break;
    case 9:
      v73 = (*(_QWORD *)(v71 + 8) << 32) | 0x1DLL;
      v74 = 2;
      break;
    case 11:
      v73 = *(_QWORD *)(v71 + 8);
      v74 = 3;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19858A9DCLL);
  }
  v935 = (WTF *)v74;
  *(_QWORD *)&v936 = v73;
  JSC::FTL::Location::restoreInto((uint64_t)&v935, (uint64_t)v951, (uint64_t)v924, v65, v66, v67, v68, v69);
  JSC::FTL::reboxAccordingToFormat(**(unsigned __int8 **)(a4 + 32), v951, v75, v76, v77, v78, v79, v80);
  if ((*(unsigned __int8 *)(a4 + 4) | 2) == 7)
  {
    v82 = *(_QWORD *)(a4 + 16);
    if ((v82 & 1) != 0)
    {
      v880 = *(_QWORD *)(v82 & 0xFFFFFFFF8);
      if ((v82 & 2) != 0
        || (v881 = *(unsigned int *)((v82 & 0xFFFFFFFF8) + 8), (_DWORD)v881 == 0x3FFFFFFF)
        || (_DWORD)v881 == -1)
      {
        v882 = 2;
      }
      else if (v881 >> 28)
      {
        v885 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v885 = v880;
        *(_DWORD *)(v885 + 8) = v881;
        v882 = 1;
        v880 = v885;
      }
      else
      {
        v882 = *(_QWORD *)(v82 & 0xFFFFFFFF8);
        v880 = v881 << 36;
      }
      v82 = v880 | v882;
      v54 = a4;
    }
    v83 = v973;
    v84 = (uint64_t *)(v82 & 0xFFFFFFFF8);
    v85 = v82 & 0xFFFFFFFF8;
    if ((v82 & 1) != 0)
      v85 = *v84;
    if (v85)
      v83 = *(_QWORD *)(v85 + 8);
    v86 = (unsigned __int8 *)(v83 + 16);
    LOBYTE(v937) = 0;
    *(_QWORD *)&v936 = v83 + 16;
    BYTE8(v936) = 1;
    if (__ldaxr((unsigned __int8 *)(v83 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v86))
    {
LABEL_54:
      LOBYTE(v937) = 1;
      if ((v82 & 2) != 0)
      {
        LODWORD(v88) = -1;
      }
      else if ((v82 & 1) != 0)
      {
        LODWORD(v88) = *(_DWORD *)((v82 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v88 = v82 >> 36;
      }
      ArrayProfile = JSC::CodeBlock::getArrayProfile(v83, v81, (uint64_t)&v935, v88);
      if (!(_BYTE)v937 || !BYTE8(v936))
        goto LABEL_78;
      v91 = (WTF::Lock *)v936;
      v92 = __ldxr((unsigned __int8 *)v936);
      if (v92 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v936))
          goto LABEL_78;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v91, (uint64_t)v89, v64, v65, v66, v67, v68, v69);
LABEL_78:
      if (ArrayProfile)
      {
        JSC::MacroAssemblerARM64::load32((uint64_t)v951, 0, 1, v65, v66, v67, v68, v69);
        JSC::MacroAssemblerARM64::store32((uint64_t)v951, 1, (JSC::ARM64LogicalImmediate *)ArrayProfile, v651, v652, v653, v654, v655);
        JSC::MacroAssemblerARM64::load8((uint64_t)v951, 0x500000000, 2, v656, v657, v658, v659, v660);
        v668 = v957;
        if (v957 + 4 > v956)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v954, v661, v662, v663, v664, v665, v666, v667);
          v668 = v957;
        }
        *(_DWORD *)((char *)v954 + v668) = 1358994498;
        v957 += 4;
        JSC::MacroAssemblerARM64::branch32((uint64_t)v951, 2, 2, 11, v664, v665, v666, v667, (uint64_t)&v935);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)JSC::typedArrayModes, 1, v669, v670, v671, v672, v673);
        JSC::MacroAssemblerARM64::load32((uint64_t)v951, 0x200000201uLL, 0x200000000uLL, 2, v674, v675, v676, v677);
        JSC::ARM64Assembler::label(v953, v678, v679, v680, v681, v682, v683, v684, (int *)v933);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v954, 335544320, v685, v686, v687, v688, v689, v690);
        if (v971)
          v697 = 69;
        else
          v697 = 65;
        v974 = (void (**)(WTF::PrintStream *__hidden))LODWORD(v933[0]);
        LOBYTE(v975) = v697;
        *(_WORD *)((char *)&v975 + 1) = 15;
        BYTE3(v975) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v935, (uint64_t)v951, v691, v692, v693, v694, v695, v696);
        JSC::MacroAssemblerARM64::load8((uint64_t)v951, 0x400000000, 1, v698, v699, v700, v701, v702);
        JSC::MacroAssemblerARM64::and32((uint64_t)v951, (JSC::ARM64LogicalImmediate *)0x1F, 1, 1);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v951, (JSC::ARM64LogicalImmediate *)1, 2, v703, v704, v705, v706, v707);
        JSC::MacroAssemblerARM64::lshift32(v951, v708, v709, v710, v711, v712, v713, v714);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v974, (uint64_t)v951, v715, v716, v717, v718, v719, v720);
        JSC::MacroAssemblerARM64::or32((uint64_t)v951, (JSC::ARM64LogicalImmediate *)(ArrayProfile + 8), v721, v722, v723, v724, v725, v726);
      }
      if ((v82 & 1) != 0 && v84)
        WTF::fastFree(v82 & 0xFFFFFFFF8, v89, v64, v65, v66, v67, v68, v69);
      goto LABEL_80;
    }
    WTF::Lock::lockSlow((WTF::Lock *)v86);
    goto LABEL_54;
  }
LABEL_80:
  v70 = *(_QWORD *)(v54 + 32);
  if ((((unint64_t)*(unsigned __int8 *)(v70 + 20) << 32) & 0x1C00000000) != 0)
  {
    JSC::MethodOfGettingAValueProfile::emitReportValue((unint64_t *)(v70 + 8), (uint64_t)v951, v972, 0, 1, 1, v68, v69);
    v70 = *(_QWORD *)(v54 + 32);
  }
LABEL_82:
  v921 = 0;
  v96 = *(void (***)(WTF::PrintStream *__hidden))(v70 + 40);
  if (v96)
  {
    do
    {
      v974 = v96;
      WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::add((uint64_t)&v935, (uint64_t *)&v921, (uint64_t *)&v974, v65, v66, v67, v68, v69);
      v96 = (void (**)(WTF::PrintStream *__hidden))v96[4];
    }
    while (v96);
    v534 = v921;
    if (v921)
    {
      v535 = (JSC::ARM64Assembler *)(v917 + 8 * v49 + 8 * v31);
      while (1)
      {
        v536 = *((_DWORD *)v534 - 3);
        if (!v536)
          goto LABEL_83;
        v935 = 0;
        *(_QWORD *)&v936 = 0;
        v537 = WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v534);
        WTF::Vector<JSC::FTL::ExitTimeObjectMaterialization *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>,JSC::FTL::ExitTimeObjectMaterialization *>>(&v935, v537, v538, &v534[*((unsigned int *)v534 - 1)]);
        if (!DWORD1(v936))
          goto LABEL_865;
        v602 = v935;
        v911 = (WTF *)((char *)v935 + 8 * DWORD1(v936));
        v913 = v535;
        do
        {
          v540 = *(_QWORD *)v602;
          v541 = *(unsigned int *)(*(_QWORD *)v602 + 28);
          if ((_DWORD)v541)
          {
            v542 = 20 * v541;
            v543 = (uint64_t *)(*(_QWORD *)(v540 + 16) + 9);
            while (1)
            {
              if (*((_BYTE *)v543 - 1) == 8)
              {
                v854 = *(_DWORD *)((char *)v543 - 9);
                v549 = v854 > 0x13;
                v855 = (1 << v854) & 0x808C0;
                v856 = v549 || v855 == 0;
                if (v856
                  && v921
                  && WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>>,JSC::FTL::ExitTimeObjectMaterialization *>((uint64_t)v921, *v543))
                {
                  break;
                }
              }
              v543 = (uint64_t *)((char *)v543 + 20);
              v542 -= 20;
              if (!v542)
              {
                v544 = (v541 - 1);
                v545 = (uint64_t)v913 + 8 * v544;
                v546 = 4 * (v544 + 4 * v544);
                do
                {
                  if (*(_DWORD *)(v540 + 28) <= v544)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19858ACE4);
                  }
                  v547 = *(_QWORD *)(v540 + 16);
                  v548 = *(_DWORD *)(v547 + v546);
                  v549 = v548 > 0x13;
                  v550 = (1 << v548) & 0x808C0;
                  if (v549 || v550 == 0)
                  {
                    JSC::FTL::compileStub(JSC::VM &,unsigned int,JSC::FTL::JITCode *,JSC::FTL::OSRExit &,JSC::CodeBlock *)::$_11::operator()((uint64_t)v922, v547 + v546 + 8, v64, v65, v66, v67, v68, v69);
                    JSC::MacroAssemblerARM64::store64((uint64_t)v951, 0, v545, v552, v553, v554, v555, v556);
                  }
                  v545 -= 8;
                  v546 -= 20;
                  LODWORD(v544) = v544 - 1;
                }
                while ((_DWORD)v544 != -1);
                goto LABEL_699;
              }
            }
          }
          else
          {
LABEL_699:
            JSC::FTL::ExitTimeObjectMaterialization::origin(&v920, *(_QWORD *)(v540 + 8));
            v557 = JSC::CodeBlock::globalObjectFor((uint64_t)a5, &v920);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v51, 2, v558, v559, v560, v561, v562);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v540, 1, v563, v564, v565, v566, v567);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v557, 0, v568, v569, v570, v571, v572);
            if ((v920 & 1) != 0 && (v920 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v920 & 0xFFFFFFFF8, v573, v574, v575, v576, v577, v578, v579);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)operationMaterializeObjectInOSR, 8, v575, v576, v577, v578, v579);
            v958 = 0;
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v954, 3594453248, v580, v581, v582, v583, v584, v585);
            JSC::MacroAssemblerARM64::store64((uint64_t)v951, 0, v586, v587, v588, v589, v590, v591);
            v597 = (uint64_t)v921;
            if (v921)
            {
              v598 = WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>>,JSC::FTL::ExitTimeObjectMaterialization *>((uint64_t)v921, v540);
              v599 = *(unsigned int *)(v597 - 4);
              v600 = v597 + 8 * v599;
              if (v598)
                v601 = (_QWORD *)v598;
              else
                v601 = (_QWORD *)(v597 + 8 * v599);
            }
            else
            {
              v601 = 0;
              v600 = 0;
            }
            WTF::HashSet<JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::remove((uint64_t *)&v921, v601, v600, v592, v593, v594, v595, v596);
          }
          v602 = (WTF *)((char *)v602 + 8);
        }
        while (v602 != v911);
        v534 = v921;
        if (v921)
          break;
        v813 = 0;
        v814 = 1;
        v535 = v913;
LABEL_706:
        if (v813 >= v536)
        {
          __break(0xC471u);
          JUMPOUT(0x19858AB14);
        }
        if (v935)
          WTF::fastFree((unint64_t)v935, v539, v64, v65, v66, v67, v68, v69);
        if (v814)
          goto LABEL_83;
      }
      v535 = v913;
LABEL_865:
      v814 = 0;
      v813 = *((_DWORD *)v534 - 3);
      goto LABEL_706;
    }
  }
LABEL_83:
  v97 = a4;
  v98 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 40);
  if (v98)
  {
    v604 = v917 + 8 * v49 + 8 * v31;
    do
    {
      v605 = *(_DWORD *)(v98 + 28);
      if (v605)
      {
        v606 = v605 - 1;
        v607 = v604 + 8 * (v605 - 1);
        v608 = 20 * (v605 - 1) + 8;
        do
        {
          if (*(_DWORD *)(v98 + 28) <= v606)
          {
            __break(0xC471u);
            JUMPOUT(0x19858ACECLL);
          }
          JSC::FTL::compileStub(JSC::VM &,unsigned int,JSC::FTL::JITCode *,JSC::FTL::OSRExit &,JSC::CodeBlock *)::$_11::operator()((uint64_t)v922, *(_QWORD *)(v98 + 16) + v608, v64, v65, v66, v67, v68, v69);
          JSC::MacroAssemblerARM64::store64((uint64_t)v951, 0, v607, v609, v610, v611, v612, v613);
          v607 -= 8;
          v608 -= 20;
          --v606;
        }
        while (v606 != -1);
      }
      JSC::FTL::ExitTimeObjectMaterialization::origin(&v919, *(_QWORD *)(v98 + 8));
      v614 = JSC::CodeBlock::globalObjectFor((uint64_t)a5, &v919);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v51, 3, v616, v617, v618, v619, v620);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v615, 2, v621, v622, v623, v624, v625);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v98, 1, v626, v627, v628, v629, v630);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v614, 0, v631, v632, v633, v634, v635);
      if ((v919 & 1) != 0 && (v919 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v919 & 0xFFFFFFFF8, v636, v637, v638, v639, v640, v641, v642);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)operationPopulateObjectInOSR, 8, v638, v639, v640, v641, v642);
      v958 = 0;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v954, 3594453248, v643, v644, v645, v646, v647, v648);
      v98 = *(_QWORD *)(v98 + 32);
      v97 = a4;
    }
    while (v98);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v917, 3, v65, v66, v67, v68, v69);
  v935 = (WTF *)v951;
  LODWORD(v936) = 16778013;
  *(_QWORD *)((char *)&v936 + 4) = 0xFFFFFFFFLL;
  v938 |= 0x7Fu;
  v940 |= 0x7Fu;
  v941 = 0;
  v942 = 0;
  v106 = *(int **)(*(_QWORD *)(v97 + 32) + 24);
  if (v106)
  {
    v107 = *v106;
    if (v107)
    {
      v108 = v97;
      v109 = 0;
      v110 = 0;
      v111 = v107 - 1;
      v112 = 9 * (v107 - 1);
      v113 = (8 * v107 - 8);
      do
      {
        v114 = *(unsigned int **)(*(_QWORD *)(v108 + 32) + 24);
        if (*v114 <= v111)
        {
          __break(0xC471u);
          JUMPOUT(0x198589EA0);
        }
        v115 = (char *)v114 + v112 + 4;
        if (*v115 == 1)
        {
LABEL_89:
          if (!v109)
          {
            v110 = 4;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, 10, 4, v101, v102, v103, v104, v105);
          }
          v116 = v941;
          LODWORD(v941) = v941 + 1;
          v117 = &v935 + 3 * v116;
          v109 = 1;
          *((_DWORD *)v117 + 6) = 1;
          *((_BYTE *)v117 + 32) = v110 & 0x7F;
LABEL_92:
          JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)&v935, v113, v100, v101, v102, v103, v104, v105);
        }
        else
        {
          switch(*((_BYTE *)v114 + v112 + 4))
          {
            case 0:
              __break(0xC471u);
              JUMPOUT(0x19858A674);
            case 2:
              v118 = *(_QWORD *)((char *)v114 + v112 + 5);
              if (v118 != 16)
                goto LABEL_97;
              v886 = HIDWORD(v118);
              v887 = *(_DWORD **)(v108 + 64);
              if (*v887 <= v886)
              {
                __break(0xC471u);
                JUMPOUT(0x19858AC1CLL);
              }
              v888 = &v887[4 * v886];
              v889 = v888 + 2;
              v890 = *((unsigned __int8 *)v888 + 16);
              switch(v890)
              {
                case 7:
                  v891 = *v889 & 0x7F;
                  v892 = 1;
                  break;
                case 9:
                  v891 = (*(_QWORD *)v889 << 32) | 0x1DLL;
                  v892 = 2;
                  break;
                case 11:
                  v891 = *(_QWORD *)v889;
                  v892 = 3;
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x19858AD7CLL);
              }
              v974 = (void (**)(WTF::PrintStream *__hidden))v892;
              v975 = (JSC::ExecutableMemoryHandle *)v891;
              JSC::FTL::Location::restoreInto((uint64_t)&v974, (uint64_t)v951, (uint64_t)v924, v101, v102, v103, v104, v105);
              JSC::MacroAssemblerARM64::store64((uint64_t)v951, 0, (v113 << 32) | 3, v893, v894, v895, v896, v897);
              v108 = a4;
              break;
            case 3:
              v127 = *(WTF **)((char *)v114 + v112 + 5);
              if (v127 == (WTF *)10)
                goto LABEL_89;
              v128 = v941;
              LODWORD(v941) = v941 + 1;
              v129 = &v935 + 3 * v128;
              *((_DWORD *)v129 + 6) = 2;
              v129[5] = v127;
              goto LABEL_92;
            case 4:
              v124 = 8 * *(unsigned int *)((char *)v114 + v112 + 5);
              v125 = v941;
              LODWORD(v941) = v941 + 1;
              v126 = &v935 + 3 * v125;
              *((_DWORD *)v126 + 6) = 0;
              *((_DWORD *)v126 + 7) = v124;
              goto LABEL_92;
            case 5:
            case 6:
            case 7:
LABEL_97:
              JSC::FTL::compileStub(JSC::VM &,unsigned int,JSC::FTL::JITCode *,JSC::FTL::OSRExit &,JSC::CodeBlock *)::$_11::operator()((uint64_t)v922, (uint64_t)v115, v100, v101, v102, v103, v104, v105);
              goto LABEL_98;
            case 8:
              JSC::MacroAssemblerARM64::load64((uint64_t)v951, v527, 0, v528, v529, v530, v531, v532);
LABEL_98:
              JSC::MacroAssemblerARM64::store64((uint64_t)v951, 0, (v113 << 32) | 3, v119, v120, v121, v122, v123);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19858A694);
          }
        }
        v112 -= 9;
        v113 = (v113 - 8);
        --v111;
      }
      while (v111 != -1);
      if ((_DWORD)v941)
      {
        if ((_DWORD)v937 == 1)
        {
          v525 = v938 & 0x7F;
        }
        else
        {
          v525 = BYTE2(v936);
          if ((_DWORD)v937)
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v935, (uint64_t)v939, SBYTE2(v936), v101, v102, v103, v104, v105);
          else
            JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE2(v936), v101, v102, v103, v104, v105);
        }
        JSC::MacroAssemblerARM64::store64((uint64_t)v935, v525, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v101, v102, v103, v104, v105);
      }
    }
  }
  v130 = v957;
  if (v957 + 4 > v956)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v954, v99, v100, v101, v102, v103, v104, v105);
    v130 = v957;
  }
  *(_DWORD *)((char *)v954 + v130) = -1440939038;
  v957 += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)v916 + 512, 3, v101, v102, v103, v104, v105);
  v935 = (WTF *)v951;
  LODWORD(v936) = 16777986;
  *(_QWORD *)((char *)&v936 + 4) = 0x1FFFFFFFFLL;
  v938 |= 0x7Fu;
  v940 |= 0x7Fu;
  v941 = 0;
  v942 = 0;
  v137 = a5[15];
  if (v137)
  {
    v138 = (unsigned int *)(v137 + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 + 1, v138));
  }
  v140 = *(unsigned __int8 *)(v137 + 12);
  if (v140 == 5)
  {
    v142 = (uint64_t *)(v137 + 256);
  }
  else if (v140 == 4)
  {
    v522 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v522 != -1)
    {
      v974 = (void (**)(WTF::PrintStream *__hidden))v925;
      v933[0] = &v974;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v142 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
  }
  else
  {
    v141 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
    if (v141 != -1)
    {
      v974 = (void (**)(WTF::PrintStream *__hidden))v925;
      v933[0] = &v974;
      std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v142 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  }
  v143 = (unsigned int *)*v142;
  if (v143)
    v144 = *v143;
  else
    v144 = 0;
  v145 = (unsigned int *)(v137 + 8);
  do
  {
    v146 = __ldaxr(v145);
    v147 = v146 - 1;
  }
  while (__stlxr(v147, v145));
  if (!v147)
  {
    atomic_store(1u, (unsigned int *)(v137 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 32))(v137);
  }
  while (v144)
  {
    v148 = a5[15];
    if (v148)
    {
      v149 = (unsigned int *)(v148 + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 + 1, v149));
    }
    v151 = *(unsigned __int8 *)(v148 + 12);
    if (v151 == 5)
    {
      v153 = (uint64_t *)(v148 + 256);
    }
    else if (v151 == 4)
    {
      v161 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      if (v161 != -1)
      {
        v974 = (void (**)(WTF::PrintStream *__hidden))v925;
        v933[0] = &v974;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v153 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
    }
    else
    {
      v152 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
      if (v152 != -1)
      {
        v974 = (void (**)(WTF::PrintStream *__hidden))v925;
        v933[0] = &v974;
        std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v153 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    }
    --v144;
    v154 = (unsigned int *)*v153;
    if (*v154 <= v144)
    {
      __break(0xC471u);
      JUMPOUT(0x19858A580);
    }
    v155 = *(_QWORD *)&v154[2 * v144 + 2];
    v156 = (unsigned int *)(v148 + 8);
    do
    {
      v157 = __ldaxr(v156);
      v158 = v157 - 1;
    }
    while (__stlxr(v158, v156));
    if (!v158)
    {
      atomic_store(1u, (unsigned int *)(v148 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 32))(v148);
    }
    v159 = v941;
    LODWORD(v941) = v941 + 1;
    v160 = &v935 + 3 * v159;
    *((_DWORD *)v160 + 6) = 0;
    *((_DWORD *)v160 + 7) = (v155 >> 6) & 0xFFFFFFFC;
    JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)&v935, 8 * v144, v131, v132, v133, v134, v135, v136);
  }
  v162 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey;
  if ((_DWORD)v941)
  {
    if ((_DWORD)v937 == 1)
    {
      v526 = v938 & 0x7F;
    }
    else
    {
      v526 = BYTE2(v936);
      if ((_DWORD)v937)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v935, (uint64_t)v939, SBYTE2(v936), v132, v133, v134, v135, v136);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE2(v936), v132, v133, v134, v135, v136);
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)v935, v526, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v132, v133, v134, v135, v136);
  }
  v163 = *(_QWORD *)(a4 + 8);
  v164 = v973;
  v165 = (_QWORD *)(v163 & 0xFFFFFFFF8);
  if ((v163 & 1) != 0)
    v165 = (_QWORD *)*v165;
  if (v165)
    v164 = v165[1];
  v166 = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 36);
  v167 = *(_QWORD *)(v164 + 120);
  if (v167)
  {
    v168 = (unsigned int *)(v167 + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 + 1, v168));
  }
  v170 = *(unsigned __int8 *)(v167 + 12);
  if (v170 == 5)
  {
    v172 = (uint64_t *)(v167 + 256);
  }
  else if (v170 == 4)
  {
    v523 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v523 != -1)
    {
      v935 = (WTF *)v933;
      v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v172 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
  }
  else
  {
    v171 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
    if (v171 != -1)
    {
      v935 = (WTF *)v933;
      v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
      std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v172 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  }
  v173 = (*((_DWORD *)v172 + 2) + 8 * v166 + 7) & 0xFFFFFFF8;
  v174 = (unsigned int *)(v167 + 8);
  do
  {
    v175 = __ldaxr(v174);
    v176 = v175 - 1;
  }
  while (__stlxr(v176, v174));
  if (!v176)
  {
    atomic_store(1u, (unsigned int *)(v167 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 32))(v167);
  }
  JSC::MacroAssemblerARM64::add64((uint64_t)v951, -((v173 + 15) & 0xFFFFFFF0), 29, 31, v133, v134, v135, v136);
  v182 = *(_QWORD *)(v164 + 120);
  v910 = v164;
  v912 = (uint64_t *)(a4 + 8);
  if (v182)
  {
    v183 = (unsigned int *)(v182 + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 + 1, v183));
    v185 = *(unsigned __int8 *)(v182 + 12);
    if (v185 == 5)
    {
      v187 = (uint64_t *)(v182 + 256);
    }
    else if (v185 == 4)
    {
      v524 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      if (v524 != -1)
      {
        v935 = (WTF *)v933;
        v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v187 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
    }
    else
    {
      v186 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
      if (v186 != -1)
      {
        v935 = (WTF *)v933;
        v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
        std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v187 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    }
    do
    {
      v188 = __ldaxr(v183);
      v189 = v188 - 1;
    }
    while (__stlxr(v189, v183));
    if (!v189)
    {
      atomic_store(1u, (unsigned int *)(v182 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 32))(v182);
    }
  }
  else
  {
    v187 = JSC::JITCode::calleeSaveRegisters(0);
  }
  LODWORD(v190) = 3;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)v924, 3, v177, v178, v179, v180, v181);
  LOBYTE(v196) = 0;
  v935 = (WTF *)v951;
  v197 = 0x80;
  v198 = 1;
  LOBYTE(v936) = 3;
  *((_QWORD *)&v936 + 1) = 127;
  v199 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  do
  {
    v200 = v197 & 0x7F;
    if (v200 >= 0x40)
    {
LABEL_728:
      __break(1u);
    }
    else
    {
      LODWORD(v190) = v197;
      if ((v197 & 0x60) != 0 || ((v198 << v200) & 0xFF001FF80000) == 0)
        goto LABEL_213;
      v162 = (std::once_flag::_State_type *)a5[15];
      if (v162)
      {
        v201 = (unsigned int *)(v162 + 1);
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 + 1, v201));
      }
      v203 = *((unsigned __int8 *)v162 + 12);
      if (v203 == 5)
      {
        v205 = (uint64_t *)(v162 + 32);
      }
      else if (v203 == 4)
      {
        v232 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v232 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v205 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v204 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v204 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v205 = v199;
      }
      v206 = (unsigned int *)*v205;
      if (v206)
      {
        v207 = *v206;
        if (*v206 < 2)
        {
          LODWORD(v208) = 0;
          v210 = *v206;
LABEL_188:
          if (!v210)
            goto LABEL_219;
          if (v207 <= v208)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A400);
          }
          v215 = &v206[2 * v208];
          v217 = v215[2];
          v216 = v215 + 2;
          if (((v217 ^ v190) & 0x7F) != 0)
          {
LABEL_219:
            LODWORD(v218) = -1;
LABEL_192:
            if (!v162)
              goto LABEL_197;
            goto LABEL_193;
          }
        }
        else
        {
          v208 = 0;
          v209 = v206 + 2;
          v210 = *v206;
          while (1)
          {
            v211 = v208 + ((v210 - 1) >> 1);
            if (v207 <= v211)
            {
              __break(0xC471u);
              JUMPOUT(0x198589F18);
            }
            v212 = *(_QWORD *)&v209[2 * v211];
            if (((v190 ^ v212) & 0x7F) == 0)
              break;
            v213 = (v210 - 1) >> 1;
            v210 -= v213 + 1;
            if ((v190 & 0x7Fu) >= (v212 & 0x7Fu))
            {
              v214 = v213 + 1;
            }
            else
            {
              v210 = v213;
              v214 = 0;
            }
            v208 += v214;
            if (v210 <= 1)
              goto LABEL_188;
          }
          v216 = &v209[2 * v208 + 2 * ((v210 - 1) >> 1)];
        }
        v218 = (unint64_t)((char *)v216 - (char *)v206 - 8) >> 3;
        goto LABEL_192;
      }
    }
    LODWORD(v218) = -1;
LABEL_193:
    v219 = (unsigned int *)(v162 + 1);
    do
    {
      v220 = __ldaxr(v219);
      v221 = v220 - 1;
    }
    while (__stlxr(v221, v219));
    if (!v221)
    {
      atomic_store(1u, (unsigned int *)v162 + 2);
      (*(void (**)(std::once_flag::_State_type *))(*v162 + 32))(v162);
    }
LABEL_197:
    v222 = (unsigned int *)*v187;
    if (!*v187)
      goto LABEL_209;
    v223 = *v222;
    if (*v222 < 2)
    {
      LODWORD(v224) = 0;
      v225 = *v222;
LABEL_206:
      if (v225)
      {
        if (v223 <= v224)
        {
          __break(0xC471u);
          JUMPOUT(0x19858A420);
        }
        LOBYTE(v222) = ((v222[2 * v224 + 2] ^ v190) & 0x7FLL) == 0;
      }
      else
      {
        LOBYTE(v222) = 0;
      }
LABEL_209:
      if ((_DWORD)v218 != -1 || (v222 & 1) != 0)
        goto LABEL_213;
      v230 = v200 & 0xFFFFFFFFFFFF01FFLL | ((unint64_t)(v190 & 0x7F) << 9);
      v231 = BYTE8(v936) & 0x7F;
      if ((_DWORD)v231 != 127)
      {
        v233 = (v230 >> 6) & 0x3F8;
        v234 = *((uint64_t *)&v936 + 1) >> 6;
        v235 = (*((uint64_t *)&v936 + 1) >> 6) & 0xFFFFFFFFFFFFFFFCLL;
        if (v233 == v235 + 8)
        {
          v236 = v935;
          v237 = v936;
          v238 = v196;
        }
        else
        {
          v236 = v935;
          v237 = v936;
          if (v235 != v233 + 8)
          {
            JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(*((_QWORD *)&v936 + 1) >> 8) << 34), v231, v191, v192, v193, v194, v195);
            goto LABEL_212;
          }
          v234 = v230 >> 6;
          v238 = BYTE8(v936) & 0x7F;
          LOBYTE(v231) = v196;
        }
        JSC::MacroAssemblerARM64::loadPair64(v236, v237, v234 & 0xFFFFFFFC, (char)v231, v238, v193, v194, v195);
        v230 = 127;
      }
LABEL_212:
      *((_QWORD *)&v936 + 1) = v230;
      goto LABEL_213;
    }
    v224 = 0;
    v225 = *v222;
    while (1)
    {
      v226 = v224 + ((v225 - 1) >> 1);
      if (v223 <= v226)
      {
        __break(0xC471u);
        JUMPOUT(0x198589F38);
      }
      v227 = *(_QWORD *)&v222[2 * v226 + 2];
      if (((v190 ^ v227) & 0x7F) == 0)
        break;
      v228 = (v225 - 1) >> 1;
      v225 -= v228 + 1;
      if ((v190 & 0x7Fu) >= (v227 & 0x7Fu))
      {
        v229 = v228 + 1;
      }
      else
      {
        v225 = v228;
        v229 = 0;
      }
      v224 += v229;
      if (v225 <= 1)
        goto LABEL_206;
    }
LABEL_213:
    if (v196 == 63)
      v197 = -1;
    else
      v197 = ((_BYTE)v190 + 1) | 0x80;
    LOBYTE(v196) = v197 & 0x7F;
  }
  while ((v197 & 0x7Fu) < 0x40);
  v239 = BYTE8(v936) & 0x7F;
  if ((_DWORD)v239 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(*((_QWORD *)&v936 + 1) >> 8) << 34), v239, v191, v192, v193, v194, v195);
    *((_QWORD *)&v936 + 1) = 127;
  }
  v200 = 0;
  v240 = 0x80;
  LOBYTE(v196) = 1;
  v199 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  while (2)
  {
    v198 = v240 & 0x7F;
    if (v198 >= 0x40)
      goto LABEL_728;
    LODWORD(v190) = v240;
    if ((v240 & 0x60) == 0x20 && ((1 << v198) & 0xFF001FF80000) != 0)
    {
      v162 = (std::once_flag::_State_type *)a5[15];
      if (v162)
      {
        v241 = (unsigned int *)(v162 + 1);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 + 1, v241));
      }
      v243 = *((unsigned __int8 *)v162 + 12);
      if (v243 == 5)
      {
        v245 = (uint64_t *)(v162 + 32);
      }
      else if (v243 == 4)
      {
        v270 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v270 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v245 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v244 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v244 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v245 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v246 = (unsigned int *)*v245;
      if (!v246)
      {
        LODWORD(v258) = -1;
        goto LABEL_257;
      }
      v247 = *v246;
      if (*v246 >= 2)
      {
        v248 = 0;
        v249 = v246 + 2;
        v250 = *v246;
        while (1)
        {
          v251 = v248 + ((v250 - 1) >> 1);
          if (v247 <= v251)
          {
            __break(0xC471u);
            JUMPOUT(0x198589F58);
          }
          v252 = *(_QWORD *)&v249[2 * v251];
          if (((v190 ^ v252) & 0x7F) == 0)
            break;
          v253 = (v250 - 1) >> 1;
          v250 -= v253 + 1;
          if ((v190 & 0x7Fu) >= (v252 & 0x7Fu))
          {
            v254 = v253 + 1;
          }
          else
          {
            v250 = v253;
            v254 = 0;
          }
          v248 += v254;
          if (v250 <= 1)
            goto LABEL_252;
        }
        v256 = &v249[2 * v248 + 2 * ((v250 - 1) >> 1)];
        goto LABEL_255;
      }
      LODWORD(v248) = 0;
      v250 = *v246;
LABEL_252:
      if (!v250)
        goto LABEL_282;
      if (v247 <= v248)
      {
        __break(0xC471u);
        JUMPOUT(0x19858A440);
      }
      v255 = &v246[2 * v248];
      v257 = v255[2];
      v256 = v255 + 2;
      if (((v257 ^ v190) & 0x7F) != 0)
LABEL_282:
        LODWORD(v258) = -1;
      else
LABEL_255:
        v258 = (unint64_t)((char *)v256 - (char *)v246 - 8) >> 3;
      if (v162)
      {
LABEL_257:
        v259 = (unsigned int *)(v162 + 1);
        do
        {
          v260 = __ldaxr(v259);
          v261 = v260 - 1;
        }
        while (__stlxr(v261, v259));
        if (!v261)
        {
          atomic_store(1u, (unsigned int *)v162 + 2);
          (*(void (**)(std::once_flag::_State_type *))(*v162 + 32))(v162);
        }
      }
      v262 = (unsigned int *)*v187;
      if (*v187)
      {
        v263 = *v262;
        if (*v262 >= 2)
        {
          v264 = 0;
          v265 = *v262;
          while (1)
          {
            v266 = v264 + ((v265 - 1) >> 1);
            if (v263 <= v266)
            {
              __break(0xC471u);
              JUMPOUT(0x198589F78);
            }
            v267 = *(_QWORD *)&v262[2 * v266 + 2];
            if (((v190 ^ v267) & 0x7F) == 0)
              goto LABEL_276;
            v268 = (v265 - 1) >> 1;
            v265 -= v268 + 1;
            if ((v190 & 0x7Fu) >= (v267 & 0x7Fu))
            {
              v269 = v268 + 1;
            }
            else
            {
              v265 = v268;
              v269 = 0;
            }
            v264 += v269;
            if (v265 <= 1)
              goto LABEL_270;
          }
        }
        LODWORD(v264) = 0;
        v265 = *v262;
LABEL_270:
        if (v265)
        {
          if (v263 <= v264)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A460);
          }
          LOBYTE(v262) = ((v262[2 * v264 + 2] ^ v190) & 0x7FLL) == 0;
        }
        else
        {
          LOBYTE(v262) = 0;
        }
      }
      if ((_DWORD)v258 == -1 && (v262 & 1) == 0)
      {
        v974 = (void (**)(WTF::PrintStream *__hidden))((((uint64_t)(((unint64_t)(v190 & 0x7F) << 56)
                                                                            - 0x2000000000000000) >> 47) & 0x1FFFFFFFE00 | v198)
                                                                + 0x4000);
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v935, (uint64_t *)&v974, v239, v191, v192, v193, v194, v195);
      }
    }
LABEL_276:
    if (v200 == 63)
      v240 = -1;
    else
      v240 = ((_BYTE)v190 + 1) | 0x80;
    v200 = v240 & 0x7F;
    if (v200 < 0x40)
      continue;
    break;
  }
  if ((BYTE8(v936) & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v935, v936 | ((unint64_t)(*((_QWORD *)&v936 + 1) >> 8) << 34), (char)((BYTE8(v936) & 0x7F) - 32), v191, v192, v193, v194, v195);
  LOBYTE(v196) = 0;
  v935 = (WTF *)v951;
  *(_QWORD *)&v936 = 0xFFFF010001001D03;
  v271 = 0x80;
  v198 = 1;
  DWORD2(v936) = 0;
  v938 |= 0x7Fu;
  v940 |= 0x7Fu;
  v941 = 0;
  v942 = 0;
  v190 = &v974;
  v199 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  while (2)
  {
    if ((v271 & 0x7Fu) >= 0x40uLL)
      goto LABEL_728;
    v200 = v271;
    if ((v271 & 0x60) == 0 && ((1 << (v271 & 0x7F)) & 0xFF001FF80000) != 0)
    {
      v162 = (std::once_flag::_State_type *)a5[15];
      if (v162)
      {
        v272 = (unsigned int *)(v162 + 1);
        do
          v273 = __ldaxr(v272);
        while (__stlxr(v273 + 1, v272));
      }
      v274 = *((unsigned __int8 *)v162 + 12);
      if (v274 == 5)
      {
        v276 = (uint64_t *)(v162 + 32);
      }
      else if (v274 == 4)
      {
        v307 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v307 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v276 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v275 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v275 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v276 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v277 = (unsigned int *)*v276;
      if (!v277)
      {
        LODWORD(v289) = -1;
        goto LABEL_317;
      }
      v278 = *v277;
      if (*v277 >= 2)
      {
        v279 = 0;
        v280 = v277 + 2;
        v281 = *v277;
        while (1)
        {
          v282 = v279 + ((v281 - 1) >> 1);
          if (v278 <= v282)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A000);
          }
          v283 = *(_QWORD *)&v280[2 * v282];
          if (((v200 ^ v283) & 0x7F) == 0)
            break;
          v284 = (v281 - 1) >> 1;
          v281 -= v284 + 1;
          if ((v200 & 0x7F) >= (v283 & 0x7Fu))
          {
            v285 = v284 + 1;
          }
          else
          {
            v281 = v284;
            v285 = 0;
          }
          v279 += v285;
          if (v281 <= 1)
            goto LABEL_312;
        }
        v287 = &v280[2 * v279 + 2 * ((v281 - 1) >> 1)];
        goto LABEL_315;
      }
      LODWORD(v279) = 0;
      v281 = *v277;
LABEL_312:
      if (!v281)
        goto LABEL_344;
      if (v278 <= v279)
      {
        __break(0xC471u);
        JUMPOUT(0x19858A480);
      }
      v286 = &v277[2 * v279];
      v288 = v286[2];
      v287 = v286 + 2;
      if (((v288 ^ v200) & 0x7F) != 0)
LABEL_344:
        LODWORD(v289) = -1;
      else
LABEL_315:
        v289 = (unint64_t)((char *)v287 - (char *)v277 - 8) >> 3;
      if (v162)
      {
LABEL_317:
        v290 = (unsigned int *)(v162 + 1);
        do
        {
          v291 = __ldaxr(v290);
          v292 = v291 - 1;
        }
        while (__stlxr(v292, v290));
        if (!v292)
        {
          atomic_store(1u, (unsigned int *)v162 + 2);
          (*(void (**)(std::once_flag::_State_type *))(*v162 + 32))(v162);
        }
      }
      v293 = (unsigned int *)*v187;
      if (*v187)
      {
        v294 = *v293;
        if (*v293 < 2)
        {
          LODWORD(v295) = 0;
          v297 = *v293;
LABEL_330:
          if (v297)
          {
            if (v294 <= v295)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A4A0);
            }
            v302 = &v293[2 * v295];
            v304 = v302[2];
            v303 = v302 + 2;
            if (((v304 ^ v200) & 0x7F) != 0)
              v303 = 0;
            goto LABEL_334;
          }
        }
        else
        {
          v295 = 0;
          v296 = v293 + 2;
          v297 = *v293;
          while (1)
          {
            v298 = v295 + ((v297 - 1) >> 1);
            if (v294 <= v298)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A020);
            }
            v299 = *(_QWORD *)&v296[2 * v298];
            if (((v200 ^ v299) & 0x7F) == 0)
              break;
            v300 = (v297 - 1) >> 1;
            v297 -= v300 + 1;
            if ((v200 & 0x7F) >= (v299 & 0x7Fu))
            {
              v301 = v300 + 1;
            }
            else
            {
              v297 = v300;
              v301 = 0;
            }
            v295 += v301;
            if (v297 <= 1)
              goto LABEL_330;
          }
          v303 = &v296[2 * v295 + 2 * ((v297 - 1) >> 1)];
LABEL_334:
          if ((_DWORD)v289 == -1 && v303)
          {
            v305 = v941;
            LODWORD(v941) = v941 + 1;
            v306 = &v935 + 3 * v305;
            *((_DWORD *)v306 + 6) = 0;
            *((_DWORD *)v306 + 7) = 8 * (v200 & 0x7F);
            JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)&v935, (*(_QWORD *)v303 >> 6) & 0xFFFFFFFCLL, v239, v191, v192, v193, v194, v195);
          }
        }
      }
    }
    if (v196 == 63)
      v271 = -1;
    else
      v271 = (v200 + 1) | 0x80;
    LOBYTE(v196) = v271 & 0x7F;
    if ((v271 & 0x7Fu) < 0x40)
      continue;
    break;
  }
  if ((_DWORD)v941)
  {
    if ((_DWORD)v937 == 1)
    {
      v533 = v938 & 0x7F;
    }
    else
    {
      v533 = BYTE2(v936);
      if ((_DWORD)v937)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v935, (uint64_t)v939, SBYTE2(v936), v191, v192, v193, v194, v195);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE2(v936), v191, v192, v193, v194, v195);
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)v935, v533, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v191, v192, v193, v194, v195);
    LODWORD(v941) = 0;
  }
  v198 = 0;
  v308 = 0x80;
  LOBYTE(v196) = 1;
  v199 = (uint64_t *)&v974;
  v190 = (void (***)(WTF::PrintStream *__hidden))&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  while (2)
  {
    if ((v308 & 0x7Fu) >= 0x40uLL)
      goto LABEL_728;
    v200 = v308;
    if ((v308 & 0x60) == 0x20 && ((1 << (v308 & 0x7F)) & 0xFF001FF80000) != 0)
    {
      v162 = (std::once_flag::_State_type *)a5[15];
      if (v162)
      {
        v309 = (unsigned int *)(v162 + 1);
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 + 1, v309));
      }
      v311 = *((unsigned __int8 *)v162 + 12);
      if (v311 == 5)
      {
        v313 = (uint64_t *)(v162 + 32);
      }
      else if (v311 == 4)
      {
        v342 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v342 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v313 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v312 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v312 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v313 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v314 = (unsigned int *)*v313;
      if (!v314)
      {
        LODWORD(v326) = -1;
        goto LABEL_378;
      }
      v315 = *v314;
      if (*v314 >= 2)
      {
        v316 = 0;
        v317 = v314 + 2;
        v318 = *v314;
        while (1)
        {
          v319 = v316 + ((v318 - 1) >> 1);
          if (v315 <= v319)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A040);
          }
          v320 = *(_QWORD *)&v317[2 * v319];
          if (((v200 ^ v320) & 0x7F) == 0)
            break;
          v321 = (v318 - 1) >> 1;
          v318 -= v321 + 1;
          if ((v200 & 0x7F) >= (v320 & 0x7Fu))
          {
            v322 = v321 + 1;
          }
          else
          {
            v318 = v321;
            v322 = 0;
          }
          v316 += v322;
          if (v318 <= 1)
            goto LABEL_373;
        }
        v324 = &v317[2 * v316 + 2 * ((v318 - 1) >> 1)];
        goto LABEL_376;
      }
      LODWORD(v316) = 0;
      v318 = *v314;
LABEL_373:
      if (!v318)
        goto LABEL_405;
      if (v315 <= v316)
      {
        __break(0xC471u);
        JUMPOUT(0x19858A4C0);
      }
      v323 = &v314[2 * v316];
      v325 = v323[2];
      v324 = v323 + 2;
      if (((v325 ^ v200) & 0x7F) != 0)
LABEL_405:
        LODWORD(v326) = -1;
      else
LABEL_376:
        v326 = (unint64_t)((char *)v324 - (char *)v314 - 8) >> 3;
      if (v162)
      {
LABEL_378:
        v327 = (unsigned int *)(v162 + 1);
        do
        {
          v328 = __ldaxr(v327);
          v329 = v328 - 1;
        }
        while (__stlxr(v329, v327));
        if (!v329)
        {
          atomic_store(1u, (unsigned int *)v162 + 2);
          (*(void (**)(std::once_flag::_State_type *))(*v162 + 32))(v162);
        }
      }
      v330 = (unsigned int *)*v187;
      if (*v187)
      {
        v331 = *v330;
        if (*v330 < 2)
        {
          LODWORD(v332) = 0;
          v334 = *v330;
LABEL_391:
          if (v334)
          {
            if (v331 <= v332)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A4E0);
            }
            v339 = &v330[2 * v332];
            v341 = v339[2];
            v340 = v339 + 2;
            if (((v341 ^ v200) & 0x7F) != 0)
              v340 = 0;
            goto LABEL_395;
          }
        }
        else
        {
          v332 = 0;
          v333 = v330 + 2;
          v334 = *v330;
          while (1)
          {
            v335 = v332 + ((v334 - 1) >> 1);
            if (v331 <= v335)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A060);
            }
            v336 = *(_QWORD *)&v333[2 * v335];
            if (((v200 ^ v336) & 0x7F) == 0)
              break;
            v337 = (v334 - 1) >> 1;
            v334 -= v337 + 1;
            if ((v200 & 0x7F) >= (v336 & 0x7Fu))
            {
              v338 = v337 + 1;
            }
            else
            {
              v334 = v337;
              v338 = 0;
            }
            v332 += v338;
            if (v334 <= 1)
              goto LABEL_391;
          }
          v340 = &v333[2 * v332 + 2 * ((v334 - 1) >> 1)];
LABEL_395:
          if ((_DWORD)v326 == -1 && v340)
          {
            v343 = v941;
            LODWORD(v941) = v941 + 1;
            v344 = &v935 + 3 * v343;
            *((_DWORD *)v344 + 6) = 0;
            *((_DWORD *)v344 + 7) = ((uint64_t)(((v200 & 0x7F) << 56) - 0x2000000000000000) >> 53) + 256;
            JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v935, (*(_QWORD *)v340 >> 6) & 0xFFFFFFFC, v239, v191, v192, v193, v194, v195);
          }
        }
      }
    }
    if (v198 == 63)
      v308 = -1;
    else
      v308 = (v200 + 1) | 0x80;
    v198 = v308 & 0x7F;
    if (v198 < 0x40)
      continue;
    break;
  }
  if ((_DWORD)v941)
  {
    if ((_DWORD)v937 == 1)
    {
      v883 = (v938 & 0x7F) - 32;
    }
    else
    {
      if ((_DWORD)v937)
      {
        __break(0xC471u);
        JUMPOUT(0x19858AD28);
      }
      v883 = BYTE4(v936);
      JSC::MacroAssemblerARM64::loadDouble((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE4(v936), v191, v192, v193, v194, v195);
    }
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v935, v883, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v191, v192, v193, v194, v195);
  }
  JSC::MacroAssemblerARM64::add64((uint64_t)v951, 512, 3, 3, v192, v193, v194, v195);
  LOBYTE(v196) = 0;
  v935 = (WTF *)v951;
  v345 = 0x80;
  LOBYTE(v936) = 3;
  v198 = 1;
  LODWORD(v190) = -1;
  *((_QWORD *)&v936 + 1) = 127;
  while (2)
  {
    v200 = v345 & 0x7F;
    if (v200 >= 0x40)
      goto LABEL_728;
    v199 = (uint64_t *)v345;
    if ((v345 & 0x60) == 0 && ((1 << v200) & 0xFF001FF80000) != 0)
    {
      v162 = (std::once_flag::_State_type *)a5[15];
      if (v162)
      {
        v346 = (unsigned int *)(v162 + 1);
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 + 1, v346));
      }
      v348 = *((unsigned __int8 *)v162 + 12);
      if (v348 == 5)
      {
        v350 = (uint64_t *)(v162 + 32);
      }
      else if (v348 == 4)
      {
        v377 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v377 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v350 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v349 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v349 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v350 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v351 = (unsigned int *)*v350;
      if (!v351)
      {
        v363 = 0xFFFFFFFFLL;
        goto LABEL_439;
      }
      v352 = *v351;
      if (*v351 >= 2)
      {
        v353 = 0;
        v354 = v351 + 2;
        v355 = *v351;
        while (1)
        {
          v356 = v353 + ((v355 - 1) >> 1);
          if (v352 <= v356)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A080);
          }
          v357 = *(_QWORD *)&v354[2 * v356];
          if (((v199 ^ v357) & 0x7F) == 0)
            break;
          v358 = (v355 - 1) >> 1;
          v355 -= v358 + 1;
          if ((v199 & 0x7Fu) >= (v357 & 0x7Fu))
          {
            v359 = v358 + 1;
          }
          else
          {
            v355 = v358;
            v359 = 0;
          }
          v353 += v359;
          if (v355 <= 1)
            goto LABEL_434;
        }
        v361 = &v354[2 * v353 + 2 * ((v355 - 1) >> 1)];
        goto LABEL_437;
      }
      LODWORD(v353) = 0;
      v355 = *v351;
LABEL_434:
      if (!v355)
        goto LABEL_465;
      if (v352 <= v353)
      {
        __break(0xC471u);
        JUMPOUT(0x19858A500);
      }
      v360 = &v351[2 * v353];
      v362 = v360[2];
      v361 = v360 + 2;
      if (((v362 ^ v199) & 0x7F) != 0)
LABEL_465:
        v363 = 0xFFFFFFFFLL;
      else
LABEL_437:
        v363 = ((unint64_t)((char *)v361 - (char *)v351 - 8) >> 3);
      if (v162)
      {
LABEL_439:
        v364 = (unsigned int *)(v162 + 1);
        do
        {
          v365 = __ldaxr(v364);
          v366 = v365 - 1;
        }
        while (__stlxr(v366, v364));
        if (!v366)
        {
          atomic_store(1u, (unsigned int *)v162 + 2);
          (*(void (**)(std::once_flag::_State_type *))(*v162 + 32))(v162);
        }
      }
      v367 = (unsigned int *)*v187;
      if (*v187)
      {
        v368 = *v367;
        if (*v367 >= 2)
        {
          v369 = 0;
          v370 = *v367;
          while (1)
          {
            v371 = v369 + ((v370 - 1) >> 1);
            if (v368 <= v371)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A0A0);
            }
            v372 = *(_QWORD *)&v367[2 * v371 + 2];
            if (((v199 ^ v372) & 0x7F) == 0)
              goto LABEL_459;
            v373 = (v370 - 1) >> 1;
            v370 -= v373 + 1;
            if ((v199 & 0x7Fu) >= (v372 & 0x7Fu))
            {
              v374 = v373 + 1;
            }
            else
            {
              v370 = v373;
              v374 = 0;
            }
            v369 += v374;
            if (v370 <= 1)
              goto LABEL_452;
          }
        }
        LODWORD(v369) = 0;
        v370 = *v367;
LABEL_452:
        if (v370)
        {
          if (v368 <= v369)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A520);
          }
          LOBYTE(v367) = ((v367[2 * v369 + 2] ^ v199) & 0x7FLL) == 0;
        }
        else
        {
          LOBYTE(v367) = 0;
        }
      }
      if (v363 == 0xFFFFFFFFLL || (v367 & 1) != 0)
        goto LABEL_459;
      v375 = v200 | (v363 << 9);
      v376 = BYTE8(v936) & 0x7F;
      if ((_DWORD)v376 != 127)
      {
        v378 = (v375 >> 6) & 0x7FFFFFFF8;
        v379 = *((uint64_t *)&v936 + 1) >> 6;
        v380 = (*((uint64_t *)&v936 + 1) >> 6) & 0xFFFFFFFFFFFFFFFCLL;
        if (v378 == v380 + 8)
        {
          v381 = v935;
          v382 = v936;
          v383 = v196;
        }
        else
        {
          v381 = v935;
          v382 = v936;
          if (v380 != v378 + 8)
          {
            JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(*((_QWORD *)&v936 + 1) >> 8) << 34), v376, v191, v192, v193, v194, v195);
            goto LABEL_458;
          }
          v379 = v375 >> 6;
          v383 = BYTE8(v936) & 0x7F;
          LOBYTE(v376) = v196;
        }
        JSC::MacroAssemblerARM64::loadPair64(v381, v382, v379 & 0xFFFFFFFC, (char)v376, v383, v193, v194, v195);
        v375 = 127;
      }
LABEL_458:
      *((_QWORD *)&v936 + 1) = v375;
    }
LABEL_459:
    if (v196 == 63)
      v345 = -1;
    else
      v345 = ((_BYTE)v199 + 1) | 0x80;
    LOBYTE(v196) = v345 & 0x7F;
    if ((v345 & 0x7Fu) < 0x40)
      continue;
    break;
  }
  v384 = BYTE8(v936) & 0x7F;
  if ((_DWORD)v384 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(*((_QWORD *)&v936 + 1) >> 8) << 34), v384, v191, v192, v193, v194, v195);
    *((_QWORD *)&v936 + 1) = 127;
  }
  LODWORD(v190) = 0;
  v385 = 0x80;
  v200 = 1;
  v199 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  while (2)
  {
    v386 = v385 & 0x7F;
    if (v386 >= 0x40)
      goto LABEL_728;
    v162 = (std::once_flag::_State_type *)v385;
    if ((v385 & 0x60) == 0x20 && ((1 << v386) & 0xFF001FF80000) != 0)
    {
      v198 = a5[15];
      if (v198)
      {
        v387 = (unsigned int *)(v198 + 8);
        do
          v388 = __ldaxr(v387);
        while (__stlxr(v388 + 1, v387));
      }
      v389 = *(unsigned __int8 *)(v198 + 12);
      if (v389 == 5)
      {
        v391 = (uint64_t *)(v198 + 256);
      }
      else if (v389 == 4)
      {
        v403 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v403 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v391 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v390 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v390 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v391 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v196 = JSC::RegisterAtOffsetList::indexOf((unsigned int **)v391, v162);
      v392 = (unsigned int *)(v198 + 8);
      do
      {
        v393 = __ldaxr(v392);
        v394 = v393 - 1;
      }
      while (__stlxr(v394, v392));
      if (!v394)
      {
        atomic_store(1u, (unsigned int *)(v198 + 8));
        (*(void (**)(unint64_t))(*(_QWORD *)v198 + 32))(v198);
      }
      v395 = (unsigned int *)*v187;
      if (*v187)
      {
        v396 = *v395;
        if (*v395 >= 2)
        {
          v397 = 0;
          v398 = *v395;
          while (1)
          {
            v399 = v397 + ((v398 - 1) >> 1);
            if (v396 <= v399)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A0ECLL);
            }
            v400 = *(_QWORD *)&v395[2 * v399 + 2];
            if (((v162 ^ v400) & 0x7F) == 0)
              goto LABEL_508;
            v401 = (v398 - 1) >> 1;
            v398 -= v401 + 1;
            if ((v162 & 0x7Fu) >= (v400 & 0x7Fu))
            {
              v402 = v401 + 1;
            }
            else
            {
              v398 = v401;
              v402 = 0;
            }
            v397 += v402;
            if (v398 <= 1)
              goto LABEL_502;
          }
        }
        LODWORD(v397) = 0;
        v398 = *v395;
LABEL_502:
        if (v398)
        {
          if (v396 <= v397)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A540);
          }
          LOBYTE(v395) = ((v395[2 * v397 + 2] ^ v162) & 0x7FLL) == 0;
        }
        else
        {
          LOBYTE(v395) = 0;
        }
      }
      if (v196 != -1 && (v395 & 1) == 0)
      {
        v974 = (void (**)(WTF::PrintStream *__hidden))(v386 | ((unint64_t)v196 << 9));
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v935, (uint64_t *)&v974, v384, v191, v192, v193, v194, v195);
      }
    }
LABEL_508:
    if (v190 == 63)
      v385 = -1;
    else
      v385 = ((_BYTE)v162 + 1) | 0x80;
    LODWORD(v190) = v385 & 0x7F;
    if (v190 < 0x40)
      continue;
    break;
  }
  if ((BYTE8(v936) & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v935, v936 | ((unint64_t)(*((_QWORD *)&v936 + 1) >> 8) << 34), (char)((BYTE8(v936) & 0x7F) - 32), v191, v192, v193, v194, v195);
  v200 = 0;
  v935 = (WTF *)v951;
  *(_QWORD *)&v936 = 0xFFFF010001001D03;
  v404 = 0x80;
  LODWORD(v190) = 1;
  DWORD2(v936) = 0;
  v938 |= 0x7Fu;
  v940 |= 0x7Fu;
  v941 = 0;
  v942 = 0;
  v199 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  while (2)
  {
    if ((v404 & 0x7Fu) >= 0x40uLL)
      goto LABEL_728;
    v162 = (std::once_flag::_State_type *)v404;
    if ((v404 & 0x60) == 0 && ((1 << (v404 & 0x7F)) & 0xFF001FF80000) != 0)
    {
      v198 = a5[15];
      if (v198)
      {
        v405 = (unsigned int *)(v198 + 8);
        do
          v406 = __ldaxr(v405);
        while (__stlxr(v406 + 1, v405));
      }
      v407 = *(unsigned __int8 *)(v198 + 12);
      if (v407 == 5)
      {
        v409 = (uint64_t *)(v198 + 256);
      }
      else if (v407 == 4)
      {
        v427 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v427 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v409 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v408 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v408 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v409 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v196 = JSC::RegisterAtOffsetList::indexOf((unsigned int **)v409, v162);
      v410 = (unsigned int *)(v198 + 8);
      do
      {
        v411 = __ldaxr(v410);
        v412 = v411 - 1;
      }
      while (__stlxr(v412, v410));
      if (!v412)
      {
        atomic_store(1u, (unsigned int *)(v198 + 8));
        (*(void (**)(unint64_t))(*(_QWORD *)v198 + 32))(v198);
      }
      v413 = (unsigned int *)*v187;
      if (*v187)
      {
        v414 = *v413;
        if (*v413 < 2)
        {
          LODWORD(v415) = 0;
          v417 = *v413;
LABEL_545:
          if (v417)
          {
            if (v414 <= v415)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A560);
            }
            v422 = &v413[2 * v415];
            v424 = v422[2];
            v423 = v422 + 2;
            if (((v424 ^ v162) & 0x7F) != 0)
              v423 = 0;
            goto LABEL_549;
          }
        }
        else
        {
          v415 = 0;
          v416 = v413 + 2;
          v417 = *v413;
          while (1)
          {
            v418 = v415 + ((v417 - 1) >> 1);
            if (v414 <= v418)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A18CLL);
            }
            v419 = *(_QWORD *)&v416[2 * v418];
            if (((v162 ^ v419) & 0x7F) == 0)
              break;
            v420 = (v417 - 1) >> 1;
            v417 -= v420 + 1;
            if ((v162 & 0x7Fu) >= (v419 & 0x7Fu))
            {
              v421 = v420 + 1;
            }
            else
            {
              v417 = v420;
              v421 = 0;
            }
            v415 += v421;
            if (v417 <= 1)
              goto LABEL_545;
          }
          v423 = &v416[2 * v415 + 2 * ((v417 - 1) >> 1)];
LABEL_549:
          if (v196 != -1 && v423)
          {
            v425 = v941;
            LODWORD(v941) = v941 + 1;
            v426 = &v935 + 3 * v425;
            *((_DWORD *)v426 + 6) = 0;
            *((_DWORD *)v426 + 7) = 8 * v196;
            JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)&v935, (*(_QWORD *)v423 >> 6) & 0xFFFFFFFCLL, v384, v191, v192, v193, v194, v195);
          }
        }
      }
    }
    if (v200 == 63)
      v404 = -1;
    else
      v404 = ((_BYTE)v162 + 1) | 0x80;
    v200 = v404 & 0x7F;
    if (v200 < 0x40)
      continue;
    break;
  }
  if ((_DWORD)v941)
  {
    if ((_DWORD)v937 == 1)
    {
      v649 = v938 & 0x7F;
    }
    else
    {
      v649 = BYTE2(v936);
      if ((_DWORD)v937)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v935, (uint64_t)v939, SBYTE2(v936), v191, v192, v193, v194, v195);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE2(v936), v191, v192, v193, v194, v195);
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)v935, v649, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v191, v192, v193, v194, v195);
    LODWORD(v941) = 0;
  }
  LODWORD(v190) = 0;
  v428 = 0x80;
  v200 = 1;
  v199 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  while (2)
  {
    if ((v428 & 0x7Fu) >= 0x40uLL)
      goto LABEL_728;
    v162 = (std::once_flag::_State_type *)v428;
    if ((v428 & 0x60) == 0x20 && ((1 << (v428 & 0x7F)) & 0xFF001FF80000) != 0)
    {
      v198 = a5[15];
      if (v198)
      {
        v429 = (unsigned int *)(v198 + 8);
        do
          v430 = __ldaxr(v429);
        while (__stlxr(v430 + 1, v429));
      }
      v431 = *(unsigned __int8 *)(v198 + 12);
      if (v431 == 5)
      {
        v433 = (uint64_t *)(v198 + 256);
      }
      else if (v431 == 4)
      {
        v451 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v451 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v433 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v432 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v432 != -1)
        {
          v974 = (void (**)(WTF::PrintStream *__hidden))v925;
          v933[0] = &v974;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v433 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v196 = JSC::RegisterAtOffsetList::indexOf((unsigned int **)v433, v162);
      v434 = (unsigned int *)(v198 + 8);
      do
      {
        v435 = __ldaxr(v434);
        v436 = v435 - 1;
      }
      while (__stlxr(v436, v434));
      if (!v436)
      {
        atomic_store(1u, (unsigned int *)(v198 + 8));
        (*(void (**)(unint64_t))(*(_QWORD *)v198 + 32))(v198);
      }
      v437 = (unsigned int *)*v187;
      if (*v187)
      {
        v438 = *v437;
        if (*v437 < 2)
        {
          LODWORD(v439) = 0;
          v441 = *v437;
LABEL_589:
          if (v441)
          {
            if (v438 <= v439)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A5C0);
            }
            v446 = &v437[2 * v439];
            v448 = v446[2];
            v447 = v446 + 2;
            if (((v448 ^ v162) & 0x7F) != 0)
              v447 = 0;
            goto LABEL_593;
          }
        }
        else
        {
          v439 = 0;
          v440 = v437 + 2;
          v441 = *v437;
          while (1)
          {
            v442 = v439 + ((v441 - 1) >> 1);
            if (v438 <= v442)
            {
              __break(0xC471u);
              JUMPOUT(0x19858A1ACLL);
            }
            v443 = *(_QWORD *)&v440[2 * v442];
            if (((v162 ^ v443) & 0x7F) == 0)
              break;
            v444 = (v441 - 1) >> 1;
            v441 -= v444 + 1;
            if ((v162 & 0x7Fu) >= (v443 & 0x7Fu))
            {
              v445 = v444 + 1;
            }
            else
            {
              v441 = v444;
              v445 = 0;
            }
            v439 += v445;
            if (v441 <= 1)
              goto LABEL_589;
          }
          v447 = &v440[2 * v439 + 2 * ((v441 - 1) >> 1)];
LABEL_593:
          if (v196 != -1 && v447)
          {
            v449 = v941;
            LODWORD(v941) = v941 + 1;
            v450 = &v935 + 3 * v449;
            *((_DWORD *)v450 + 6) = 0;
            *((_DWORD *)v450 + 7) = 8 * v196;
            JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v935, (*(_QWORD *)v447 >> 6) & 0xFFFFFFFC, v384, v191, v192, v193, v194, v195);
          }
        }
      }
    }
    if (v190 == 63)
      v428 = -1;
    else
      v428 = ((_BYTE)v162 + 1) | 0x80;
    LODWORD(v190) = v428 & 0x7F;
    if (v190 < 0x40)
      continue;
    break;
  }
  if ((_DWORD)v941)
  {
    if ((_DWORD)v937 == 1)
    {
      v884 = (v938 & 0x7F) - 32;
    }
    else
    {
      if ((_DWORD)v937)
      {
        __break(0xC471u);
        JUMPOUT(0x19858AD48);
      }
      v884 = BYTE4(v936);
      JSC::MacroAssemblerARM64::loadDouble((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE4(v936), v191, v192, v193, v194, v195);
    }
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v935, v884, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v191, v192, v193, v194, v195);
  }
  v452 = *(_QWORD *)(v910 + 120);
  if (v452)
  {
    v453 = (unsigned int *)(v452 + 8);
    do
      v454 = __ldaxr(v453);
    while (__stlxr(v454 + 1, v453));
  }
  v455 = *(unsigned __int8 *)(v452 + 12);
  if (v455 == 5)
  {
    v457 = (uint64_t *)(v452 + 256);
  }
  else if (v455 == 4)
  {
    v603 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v603 != -1)
    {
      v935 = (WTF *)v933;
      v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v457 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
  }
  else
  {
    v456 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
    if (v456 != -1)
    {
      v935 = (WTF *)v933;
      v974 = (void (**)(WTF::PrintStream *__hidden))&v935;
      std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v974, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v457 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  }
  v458 = v457[1] + 7;
  v459 = (unsigned int *)(v452 + 8);
  do
  {
    v460 = __ldaxr(v459);
    v461 = v460 - 1;
  }
  while (__stlxr(v461, v459));
  if (!v461)
  {
    atomic_store(1u, (unsigned int *)(v452 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v452 + 32))(v452);
  }
  LOBYTE(v974) = 0;
  v935 = (WTF *)&v974;
  JSC::CodeOrigin::walkUpInlineStack<JSC::CodeOrigin::inlineStackContainsActiveCheckpoint(void)::{lambda(JSC::CodeOrigin)#1}>(v912, (_BYTE **)&v935, v384, v191, v192, v193, v194, v195);
  if ((_BYTE)v974)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v917+ 8* (*(unsigned int *)(*(_QWORD *)(a4 + 32) + 36) + (unint64_t)*(unsigned int *)(*(_QWORD *)(a4 + 32) + 32)), 2, v462, v463, v464, v465, v466);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, a4, 1, v815, v816, v817, v818, v819);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)v915, 0, v820, v821, v822, v823, v824);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, (uint64_t)operationMaterializeOSRExitSideState, 8, v825, v826, v827, v828, v829);
    v958 = 0;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v954, 3594453248, v830, v831, v832, v833, v834, v835);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v951, v917, 2, v462, v463, v464, v465, v466);
  v474 = v957;
  if (v957 + 4 > v956)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v954, v467, v468, v469, v470, v471, v472, v473);
    v474 = v957;
  }
  *(_DWORD *)((char *)v954 + v474) = -1440939037;
  v957 += 4;
  v935 = (WTF *)v951;
  LODWORD(v936) = 16777986;
  *(_QWORD *)((char *)&v936 + 4) = 0x1FFFFFFFFLL;
  v938 |= 0x7Fu;
  v940 |= 0x7Fu;
  v941 = 0;
  v942 = 0;
  v475 = *(int **)(*(_QWORD *)(a4 + 32) + 24);
  if (v475)
  {
    v476 = *v475;
    if (*v475)
    {
      v477 = v458 >> 3;
      v478 = -v476;
      v479 = (v476 - 1);
      v480 = 8 * v476 - 8;
      while (1)
      {
        v481 = *(_QWORD *)(a4 + 32);
        v482 = *(unsigned int *)(v481 + 32);
        if (v482 > v479)
          break;
        if ((unint64_t)*(unsigned int *)(v481 + 36) + v482 > v479)
        {
          v483 = v478 + v482;
LABEL_630:
          if ((v483 & 0x80000000) == 0 || ~v483 >= (int)v477)
          {
            v484 = v941;
            LODWORD(v941) = v941 + 1;
            v485 = &v935 + 3 * v484;
            *((_DWORD *)v485 + 6) = 0;
            *((_DWORD *)v485 + 7) = v480;
            JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)&v935, (8 * v483), v468, v469, v470, v471, v472, v473);
          }
        }
        --v479;
        v480 -= 8;
        --v476;
        if (__CFADD__(v478++, 1))
        {
          if ((_DWORD)v941)
          {
            if ((_DWORD)v937 == 1)
            {
              v650 = v938 & 0x7F;
            }
            else
            {
              v650 = BYTE2(v936);
              if ((_DWORD)v937)
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v935, (uint64_t)v939, SBYTE2(v936), v469, v470, v471, v472, v473);
              else
                JSC::MacroAssemblerARM64::load64((uint64_t)v935, v936 | ((unint64_t)(HIDWORD(v937) - HIDWORD(v941)) << 32), SBYTE2(v936), v469, v470, v471, v472, v473);
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)v935, v650, BYTE1(v936) | ((unint64_t)(v943 - v942) << 32), v469, v470, v471, v472, v473);
          }
          goto LABEL_638;
        }
      }
      v483 = v476 + 4;
      goto LABEL_630;
    }
  }
LABEL_638:
  JSC::DFG::handleExitCounts((uint64_t)v915, (uint64_t)v951, a4, v469, v470, v471, v472, v473);
  JSC::DFG::reifyInlinedCallFrames((uint64_t)v951, a4, v487, v488, v489, v490, v491, v492);
  JSC::DFG::adjustAndJumpToTarget((uint64_t)v915, (uint64_t)v951, a4, v493, v494, v495, v496, v497);
  v935 = 0;
  *(_QWORD *)&v936 = 0;
  *((_QWORD *)&v936 + 1) = a5;
  v937 = (WTF *)&v938;
  v944 = 128;
  v498 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v498 != -1)
  {
    v974 = (void (**)(WTF::PrintStream *__hidden))v925;
    v933[0] = &v974;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v933, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v499 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v507 = (unint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v507)
  {
    v507 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v507, v499);
  }
  v509 = v507 + 8;
  v508 = *(WTF **)v507;
  if (*(_QWORD *)v507 != v507 + 8)
  {
    v510 = *(_DWORD *)(v507 + 136);
    if (v944 < v510)
    {
      if (v937 && v937 != (WTF *)&v938)
      {
        WTF::fastFree((unint64_t)v937, v500, v501, v502, v503, v504, v505, v506);
        v508 = *(WTF **)v507;
        v510 = *(_DWORD *)(v507 + 136);
      }
      v937 = v508;
      v944 = v510;
      *(_QWORD *)v507 = v509;
      *(_DWORD *)(v507 + 136) = 128;
    }
  }
  v511 = 1;
  v945 = 1;
  v946 = 0;
  v947 = 5;
  v948 = 0u;
  v949 = 0u;
  v950 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v935, (uint64_t)v951, 1, v502, v503, v504, v505, v506);
  if (!HIBYTE(word_1ECF4C286) && !BYTE1(dword_1ECF4C28A) && !(BYTE2(dword_1ECF4C28A) | BYTE1(qword_1ECF4C332)))
  {
    if (!BYTE3(qword_1ECF4C332) && !byte_1ECF4C289)
    {
      JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl((uint64_t)&v935, 0, 0, &v974);
      v795 = (WTF *)v974;
      v796 = (unsigned int *)v975;
      if (v975)
      {
        do
          v898 = __ldaxr(v796);
        while (__stlxr(v898 + 1, v796));
        v899 = (unsigned int *)v975;
        v975 = 0;
        if (v899)
        {
          do
          {
            v900 = __ldaxr(v899);
            v901 = v900 - 1;
          }
          while (__stlxr(v901, v899));
          if (!v901)
          {
            atomic_store(1u, v899);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v899, (uint64_t)v788, v789, v790, v791, v792, v793, v794);
            WTF::fastFree(v902, v903, v904, v905, v906, v907, v908, v909);
          }
        }
      }
      v801 = 0;
      goto LABEL_783;
    }
    v511 = BYTE3(qword_1ECF4C332) != 0;
  }
  v974 = off_1E3572250;
  v975 = (JSC::ExecutableMemoryHandle *)v977;
  v976 = xmmword_199122F80;
  v977[0] = 0;
  JSC::CodeOrigin::dump((JSC::CodeOrigin *)v912, (WTF::PrintStream *)&v974);
  v974[5]((WTF::PrintStream *)&v974);
  v519 = v975;
  if (!v975)
  {
    v509 = 0;
    v521 = 0;
LABEL_655:
    WTF::fastFree((unint64_t)v521, v512, v513, v514, v515, v516, v517, v518);
    goto LABEL_656;
  }
  v520 = v976;
  if ((unint64_t)v976 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x19858ACB4);
  }
  if ((_QWORD)v976 == -17)
  {
    __break(0xC471u);
    JUMPOUT(0x19858ACBCLL);
  }
  v509 = WTF::fastMalloc((WTF *)(v976 + 17));
  *(_DWORD *)v509 = 1;
  *(_QWORD *)(v509 + 8) = v520;
  memcpy((void *)(v509 + 16), v519, v520);
  *(_BYTE *)(v509 + 16 + v520) = 0;
  v521 = v975;
  if (v975 != (JSC::ExecutableMemoryHandle *)v977)
    goto LABEL_655;
LABEL_656:
  switch(*(_BYTE *)(a4 + 4))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      v974 = off_1E3572250;
      v975 = (JSC::ExecutableMemoryHandle *)v977;
      v976 = xmmword_199122F80;
      v977[0] = 0;
      JSC::CodeBlock::dumpAssumingJITType((uint64_t)a5);
      v974[5]((WTF::PrintStream *)&v974);
      v751 = v975;
      if (!v975)
      {
        a5 = 0;
        v753 = 0;
LABEL_749:
        WTF::fastFree((unint64_t)v753, v744, v745, v746, v747, v748, v749, v750);
        goto LABEL_750;
      }
      v752 = v976;
      if ((unint64_t)v976 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19858ACC4);
      }
      if ((_QWORD)v976 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19858ACCCLL);
      }
      a5 = (_QWORD *)WTF::fastMalloc((WTF *)(v976 + 17));
      *(_DWORD *)a5 = 1;
      a5[1] = v752;
      memcpy(a5 + 2, v751, v752);
      *((_BYTE *)a5 + v752 + 16) = 0;
      v753 = v975;
      if (v975 != (JSC::ExecutableMemoryHandle *)v977)
        goto LABEL_749;
LABEL_750:
      v754 = *(_QWORD *)(a4 + 32);
      v974 = off_1E3572250;
      v975 = (JSC::ExecutableMemoryHandle *)v977;
      v976 = xmmword_199122F80;
      v977[0] = 0;
      memset(v925, 0, sizeof(v925));
      v933[0] = " ";
      v933[1] = 2;
      v933[2] = "";
      v933[3] = 1;
      v934 = 0;
      v755 = *(unsigned int *)(v754 + 32);
      v932 = v755 - 1;
      if ((_DWORD)v755)
      {
        do
        {
          --v755;
          v756 = *(_DWORD **)(v754 + 24);
          if (*v756 <= v755)
          {
            __break(0xC471u);
            JUMPOUT(0x19858A320);
          }
          v757 = (char *)v756 + 9 * v755;
          v759 = v757[4];
          v758 = (JSC::FTL::ExitValue *)(v757 + 4);
          if (v759)
          {
            v930 = "arg";
            v931 = 4;
            v928 = ":";
            v929 = 2;
            v926 = v758;
            v927 = v925;
            v760 = (WTF::PrintStream *)((uint64_t (*)(WTF::PrintStream *__hidden))v974[4])((WTF::PrintStream *)&v974);
            WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::FTL::ExitValue,JSC::DumpContext>>(v760, (uint64_t)v933, (uint64_t)&v930, &v932, (uint64_t)&v928, &v926);
            v974[5]((WTF::PrintStream *)&v974);
          }
          v932 = v755 - 1;
        }
        while (v755);
      }
      v932 = 0;
      v761 = *(unsigned int *)(v754 + 36);
      if ((_DWORD)v761)
      {
        for (i = 0; i < v761; v932 = i)
        {
          v763 = *(_DWORD **)(v754 + 24);
          if (*v763 <= (i + *(_DWORD *)(v754 + 32)))
          {
            __break(0xC471u);
            JUMPOUT(0x19858A340);
          }
          v764 = (char *)v763 + 9 * (i + *(_DWORD *)(v754 + 32));
          v766 = v764[4];
          v765 = (JSC::FTL::ExitValue *)(v764 + 4);
          if (v766)
          {
            v930 = "loc";
            v931 = 4;
            v928 = ":";
            v929 = 2;
            v926 = v765;
            v927 = v925;
            v767 = (WTF::PrintStream *)((uint64_t (*)(WTF::PrintStream *__hidden))v974[4])((WTF::PrintStream *)&v974);
            WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::FTL::ExitValue,JSC::DumpContext>>(v767, (uint64_t)v933, (uint64_t)&v930, &v932, (uint64_t)&v928, &v926);
            v974[5]((WTF::PrintStream *)&v974);
            v761 = *(unsigned int *)(v754 + 36);
          }
          ++i;
        }
      }
      for (j = 0; ; ++j)
      {
        v932 = j;
        v769 = *(_DWORD **)(v754 + 24);
        v770 = v769 ? *v769 : 0;
        v771 = *(unsigned int *)(v754 + 32);
        v772 = *(unsigned int *)(v754 + 36);
        if (j >= v770 - (v772 + v771))
          break;
        if (*v769 <= (j + v771 + v772))
        {
          __break(0xC471u);
          JUMPOUT(0x19858A1CCLL);
        }
        v773 = (char *)v769 + 9 * (j + v772 + v771);
        v775 = v773[4];
        v774 = (JSC::FTL::ExitValue *)(v773 + 4);
        if (v775)
        {
          v930 = "tmp";
          v931 = 4;
          v928 = ":";
          v929 = 2;
          v926 = v774;
          v927 = v925;
          v776 = (WTF::PrintStream *)((uint64_t (*)(WTF::PrintStream *__hidden))v974[4])((WTF::PrintStream *)&v974);
          WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::FTL::ExitValue,JSC::DumpContext>>(v776, (uint64_t)v933, (uint64_t)&v930, &v932, (uint64_t)&v928, &v926);
          v974[5]((WTF::PrintStream *)&v974);
        }
      }
      JSC::DumpContext::~DumpContext((JSC::DumpContext *)v925, v744, v745, v746, v747, v748, v749, v750);
      v974[5]((WTF::PrintStream *)&v974);
      v784 = v975;
      if (v975)
      {
        v785 = v976;
        v786 = (uint64_t)v914;
        if ((unint64_t)v976 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x19858ACD4);
        }
        if ((_QWORD)v976 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x19858ACDCLL);
        }
        v507 = WTF::fastMalloc((WTF *)(v976 + 17));
        *(_DWORD *)v507 = 1;
        *(_QWORD *)(v507 + 8) = v785;
        memcpy((void *)(v507 + 16), v784, v785);
        *(_BYTE *)(v507 + 16 + v785) = 0;
        v787 = v975;
        if (v975 == (JSC::ExecutableMemoryHandle *)v977)
          goto LABEL_776;
      }
      else
      {
        v507 = 0;
        v787 = 0;
        v786 = (uint64_t)v914;
      }
      WTF::fastFree((unint64_t)v787, v777, v778, v779, v780, v781, v782, v783);
LABEL_776:
      JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v935, v511, 0, 0, "FTL OSR exit #%u (D@%u, %s, %s) from %s, with operands = %s", (WTF **)&v974, v786);
      v795 = (WTF *)v974;
      v796 = (unsigned int *)v975;
      if (v975)
      {
        do
          v797 = __ldaxr(v796);
        while (__stlxr(v797 + 1, v796));
        v798 = (unsigned int *)v975;
        v975 = 0;
        if (v798)
        {
          do
          {
            v799 = __ldaxr(v798);
            v800 = v799 - 1;
          }
          while (__stlxr(v800, v798));
          if (!v800)
          {
            atomic_store(1u, v798);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v798, (uint64_t)v788, v789, v790, v791, v792, v793, v794);
            WTF::fastFree(v872, v873, v874, v875, v876, v877, v878, v879);
          }
        }
      }
      v801 = 1;
LABEL_783:
      v802 = *(unsigned int **)(a4 + 48);
      *(_QWORD *)(a4 + 40) = v795;
      *(_QWORD *)(a4 + 48) = v796;
      if (v802)
      {
        do
        {
          v803 = __ldaxr(v802);
          v804 = v803 - 1;
        }
        while (__stlxr(v804, v802));
        if (!v804)
        {
          atomic_store(1u, v802);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v802, (uint64_t)v788, v789, v790, v791, v792, v793, v794);
          WTF::fastFree(v864, v865, v866, v867, v868, v869, v870, v871);
        }
      }
      if (v801)
      {
        if (v507)
        {
          if (*(_DWORD *)v507 == 1)
            WTF::fastFree(v507, v788, v789, v790, v791, v792, v793, v794);
          else
            --*(_DWORD *)v507;
        }
        if (a5)
        {
          if (*(_DWORD *)a5 == 1)
            WTF::fastFree((unint64_t)a5, v788, v789, v790, v791, v792, v793, v794);
          else
            --*(_DWORD *)a5;
        }
        if (v509)
        {
          if (*(_DWORD *)v509 == 1)
            WTF::fastFree(v509, v788, v789, v790, v791, v792, v793, v794);
          else
            --*(_DWORD *)v509;
        }
      }
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v935, v788, v789, v790, v791, v792, v793, v794);
      if (v921)
        WTF::fastFree((unint64_t)(v921 - 2), v805, v806, v807, v808, v809, v810, v811);
      if (v923)
        WTF::fastFree(v923 - 16, v805, v806, v807, v808, v809, v810, v811);
      return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v951, v805, v806, v807, v808, v809, v810, v811);
    default:
      __break(0xC471u);
      JUMPOUT(0x19858AB74);
  }
}

void operationPopulateObjectInOSR(unint64_t a1, unsigned __int16 *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int *v50;
  int v51;
  int *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  JSC::Heap *v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned __int16 *v69;
  uint64_t vars0;

  v68 = a4;
  v69 = a2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = vars0;
  *(_QWORD *)(v9 + 40) = vars0;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v9 + 192;
  ++*(_DWORD *)(v9 + 916);
  v13 = *a2;
  if (v13 == 286)
  {
    v65 = (WTF *)&v69;
    v66 = v9;
    v67 = &v68;
    v14 = *a3;
    v15 = *(unsigned __int8 *)(*a3 + 5);
    switch(v15)
    {
      case '@':
        v16 = *((_DWORD *)a2 + 7);
        if (v16)
        {
          v17 = v16 - 1;
          v18 = 8 * (v16 - 1);
          v19 = 20 * (v16 - 1);
          do
          {
            if (*((_DWORD *)v69 + 7) <= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x19858B310);
            }
            v20 = *(_QWORD *)(*((_QWORD *)v69 + 2) + v19);
            if ((_DWORD)v20 == 7)
            {
              v21 = *(_QWORD *)(v68 + v18);
              *(_QWORD *)(v14 + 8 * BYTE4(v20) + 16) = v21;
              if (v21)
                v22 = (v21 & 0xFFFE000000000002) == 0;
              else
                v22 = 0;
              if (v22 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v14 + 7))
              {
                v34 = v12;
                JSC::Heap::writeBarrierSlowPath(v12, v14);
                v12 = v34;
              }
            }
            v18 -= 8;
            v19 -= 20;
            --v17;
          }
          while (v17 != -1);
        }
        break;
      case 'A':
      case 'B':
        operationPopulateObjectInOSR::$_0::operator()<JSC::JSMapIterator>((uint64_t **)&v65, *a3);
        break;
      case 'D':
        operationPopulateObjectInOSR::$_0::operator()<JSC::JSInternalPromise>((uint64_t **)&v65, *a3);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19858B254);
    }
    goto LABEL_12;
  }
  if ((v13 - 348) <= 7 && ((1 << (v13 - 92)) & 0x9F) != 0)
    goto LABEL_12;
  switch(*a2)
  {
    case 0x116u:
      v62 = (JSC::Heap *)(v9 + 192);
      v63 = v9;
      v35 = *a3;
      JSC::Structure::getPropertiesConcurrently((JSC::Structure *)(16 * (*(_DWORD *)*a3 & 0xFFFFFFFE)), (uint64_t)a3, a4, a5, a6, a7, a8, &v65);
      v43 = v65;
      if (!HIDWORD(v66))
        goto LABEL_68;
      v44 = *((_DWORD *)a2 + 7);
      if (!v44)
        goto LABEL_68;
      v64 = (WTF *)((char *)v65 + 16 * HIDWORD(v66));
LABEL_38:
      if (!v44)
        goto LABEL_57;
      v45 = v44 - 1;
      v46 = (uint64_t *)(a4 + 8 * (v44 - 1));
      v47 = 20 * (v44 - 1);
      break;
    case 0x11Au:
    case 0x11Bu:
    case 0x11Cu:
    case 0x11Du:
      goto LABEL_12;
    case 0x120u:
      v25 = *((_DWORD *)a2 + 7);
      if (v25)
      {
        v26 = *a3;
        v27 = *a3 + 32;
        v28 = v25 - 1;
        v29 = (uint64_t *)(a4 + 8 * (v25 - 1));
        v30 = 20 * (v25 - 1);
        do
        {
          if (*((_DWORD *)a2 + 7) <= v28)
          {
            __break(0xC471u);
            JUMPOUT(0x19858B318);
          }
          v31 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v30);
          if ((_DWORD)v31 == 6)
          {
            v32 = *v29;
            *(_QWORD *)(v27 + ((v31 >> 29) & 0x7FFFFFFF8)) = *v29;
            v33 = v32 && (v32 & 0xFFFE000000000002) == 0;
            if (v33 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v26 + 7))
            {
              v61 = v12;
              JSC::Heap::writeBarrierSlowPath(v12, v26);
              v12 = v61;
            }
          }
          --v29;
          v30 -= 20;
          --v28;
        }
        while (v28 != -1);
      }
      goto LABEL_12;
    case 0x122u:
      v57 = *((unsigned int *)a2 + 7);
      v58 = (uint64_t *)(a4 + 8 * v57);
      v59 = 20 * v57 - 20;
      while (v59 != -20)
      {
        v60 = *(_DWORD *)(*((_QWORD *)a2 + 2) + v59);
        --v58;
        v59 -= 20;
        if (v60 == 19)
        {
          JSC::RegExpObject::setLastIndex(*a3, a1, *v58, 0);
          goto LABEL_12;
        }
      }
      goto LABEL_12;
    default:
      __break(0xC471u);
      JUMPOUT(0x19858B274);
  }
  do
  {
    if (*((_DWORD *)a2 + 7) <= v45)
    {
      __break(0xC471u);
      JUMPOUT(0x19858B320);
    }
    v48 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v47);
    if ((_DWORD)v48 == 11)
    {
      v49 = HIDWORD(v48);
      v50 = *(int **)(*(_QWORD *)(v11 + 56) + 104);
      if (v50)
      {
        v51 = *v50;
        if (*v50 > v49)
        {
          v52 = &v50[2 * v49];
LABEL_45:
          if (*((_QWORD *)v52 + 1) == *(_QWORD *)v43)
          {
            v54 = *((_DWORD *)v43 + 2);
            if (v54 < 64)
            {
              v55 = v35 + 16;
            }
            else
            {
              v55 = *(_QWORD *)(v35 + 8) - 8;
              v54 = 63 - v54;
            }
            v56 = *v46;
            *(_QWORD *)(v55 + 8 * v54) = *v46;
            if (v56)
            {
              if ((v56 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v63 + 760) >= *(unsigned __int8 *)(v35 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((uint64_t)v62, v35);
              }
            }
          }
          goto LABEL_46;
        }
      }
      else
      {
        v51 = 0;
      }
      v53 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 120) + 72))(*(_QWORD *)(v11 + 120))
                       + 48);
      if (*v53 <= (v49 - v51))
      {
        __break(0xC471u);
        JUMPOUT(0x19858B2E4);
      }
      v52 = &v53[2 * (v49 - v51)];
      goto LABEL_45;
    }
LABEL_46:
    --v46;
    v47 -= 20;
    --v45;
  }
  while (v45 != -1);
LABEL_57:
  v43 = (WTF *)((char *)v43 + 16);
  if (v43 != v64)
  {
    v44 = *((_DWORD *)a2 + 7);
    goto LABEL_38;
  }
  v43 = v65;
LABEL_68:
  if (v43)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  v9 = v63;
LABEL_12:
  --*(_DWORD *)(v9 + 916);
}

uint64_t **operationPopulateObjectInOSR::$_0::operator()<JSC::JSMapIterator>(uint64_t **result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v2 = *(_DWORD *)(**result + 28);
  if (v2)
  {
    v3 = (v2 - 1);
    v4 = 8 * v3;
    for (i = 4 * (v3 + 4 * v3); ; i -= 20)
    {
      v6 = **result;
      if (*(_DWORD *)(v6 + 28) <= v3)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + i);
      if ((_DWORD)v7 == 7)
      {
        v8 = a2 + 8 * BYTE4(v7);
        v9 = result[1];
        v10 = *(_QWORD *)(*result[2] + v4);
        *(_QWORD *)(v8 + 16) = v10;
        if (v10)
          v11 = (v10 & 0xFFFE000000000002) == 0;
        else
          v11 = 0;
        if (v11 && *((_DWORD *)v9 + 190) >= *(unsigned __int8 *)(a2 + 7))
        {
          v15 = v3;
          v13 = result;
          v14 = v4;
          v16 = a2;
          v12 = i;
          JSC::Heap::writeBarrierSlowPath((uint64_t)(v9 + 24), a2);
          i = v12;
          result = v13;
          v4 = v14;
          LODWORD(v3) = v15;
          a2 = v16;
        }
      }
      v4 -= 8;
      LODWORD(v3) = v3 - 1;
      if ((_DWORD)v3 == -1)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t **operationPopulateObjectInOSR::$_0::operator()<JSC::JSInternalPromise>(uint64_t **result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v2 = *(_DWORD *)(**result + 28);
  if (v2)
  {
    v3 = (v2 - 1);
    v4 = 8 * v3;
    for (i = 4 * (v3 + 4 * v3); ; i -= 20)
    {
      v6 = **result;
      if (*(_DWORD *)(v6 + 28) <= v3)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + i);
      if ((_DWORD)v7 == 7)
      {
        v8 = a2 + 8 * HIDWORD(v7);
        v9 = result[1];
        v10 = *(_QWORD *)(*result[2] + v4);
        *(_QWORD *)(v8 + 16) = v10;
        if (v10)
          v11 = (v10 & 0xFFFE000000000002) == 0;
        else
          v11 = 0;
        if (v11 && *((_DWORD *)v9 + 190) >= *(unsigned __int8 *)(a2 + 7))
        {
          v15 = v3;
          v13 = result;
          v14 = v4;
          v16 = a2;
          v12 = i;
          JSC::Heap::writeBarrierSlowPath((uint64_t)(v9 + 24), a2);
          i = v12;
          result = v13;
          v4 = v14;
          LODWORD(v3) = v15;
          a2 = v16;
        }
      }
      v4 -= 8;
      LODWORD(v3) = v3 - 1;
      if ((_DWORD)v3 == -1)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

BOOL JSC::RegExpObject::setLastIndex(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  JSC::VM *v8;

  v4 = *(JSC::VM **)(a2 + 56);
  v8 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    if (a4)
    {
      v7 = *(_QWORD *)(a1 + 16);
      JSC::throwTypeError(a2, &v8, (uint64_t)"Attempted to assign to readonly property.", 42);
LABEL_7:
      LOBYTE(v5) = v7;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = a3;
    if (a3 && (a3 & 0xFFFE000000000002) == 0 && *((_DWORD *)v4 + 190) >= *(unsigned __int8 *)(a1 + 7))
    {
      LOBYTE(v7) = v5;
      JSC::Heap::writeBarrierSlowPath((uint64_t)v4 + 192, a1);
      goto LABEL_7;
    }
  }
  return (v5 & 1) == 0;
}

unint64_t operationMaterializeObjectInOSR(JSC::DirectArguments *a1, _WORD *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t NewArrayBuffer;
  unint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  JSC::VM *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  JSC::VM *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  BOOL v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  JSC *v82;
  int v83;
  JSC::JSGlobalObject *v84;
  unint64_t v85;
  const JSC::JSValue *v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t j;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  void *v133;
  uint64_t v134;
  JSC::JSImmutableButterfly *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  unsigned __int8 *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  unsigned __int16 *v148;
  unint64_t v149;
  JSC::JSImmutableButterfly *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  unsigned int v156;
  int v157;
  JSC::VM *v158;
  unint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  char v178;
  uint64_t *v179;
  int *v180;
  int v181;
  uint64_t v182;
  int v183;
  BOOL v184;
  unsigned int v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int32x4_t v200;
  int v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  WTF *v214;
  uint64_t v215;
  JSC::Structure *v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  int v229;
  JSC::VM *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  JSC::VM *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  int v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  JSC::VM *v251;
  uint64_t v252;
  unsigned int v253;
  BOOL v254;
  uint64_t v255;
  uint64_t i;
  unint64_t v257;
  unsigned int v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  int v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  JSC::InlineCallFrame **v276;
  JSC::Structure *v277;
  char v278;
  uint64_t v279;
  JSC::Structure **v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  JSC::Butterfly *v288;
  uint64_t v289;
  uint64_t v290;
  __n128 v291;
  unint64_t *v292;
  unint64_t v293;
  int v294;
  JSC::Structure *v295;
  unsigned int v296;
  uint64_t v297;
  int v298;
  unint64_t v299;
  int v300;
  unsigned int v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unsigned int v307;
  unint64_t v308;
  int v309;
  unint64_t v310;
  JSC::Structure *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int32x4_t v317;
  int v318;
  unsigned int v319;
  unint64_t *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  JSC::VM *v325;
  unsigned int v326;
  unint64_t v327;
  int v328;
  JSC::JSGlobalObject *v329;
  unint64_t Empty;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int32x4_t v335;
  int v336;
  unsigned int v337;
  unint64_t *v338;
  uint64_t v339;
  unint64_t v340;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t DirectIndex;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  uint64_t v366;
  WTF *v367;
  WTF::Lock *v368;
  char v369;
  char v370;
  uint64_t v371;
  JSC::JSGlobalObject *vars0;

  v371 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a1 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  v14 = *(_DWORD *)(v12 + 88);
  *(_DWORD *)(v12 + 88) = v14 + 1;
  if (!v14 && *(_QWORD *)(v12 + 16))
    JSC::VMTraps::deferTerminationSlow(v12 + 64);
  ++*(_DWORD *)(v12 + 916);
  v15 = (unsigned __int16)*a2;
  if (v15 == 286)
  {
    v16 = *((unsigned int *)a2 + 7);
    if (!(_DWORD)v16)
      goto LABEL_20;
    v17 = 0;
    v18 = v16 - 1;
    do
    {
      v19 = v18;
      if (*(_QWORD *)(*((_QWORD *)a2 + 2) + 20 * v18) == 13)
      {
        v17 = *((_QWORD *)a3 + v18);
        if (*(_BYTE *)(v17 + 5) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19858B6ACLL);
        }
      }
      --v18;
    }
    while (v19);
    if (!v17)
    {
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x19858B75CLL);
    }
    v20 = *(unsigned __int8 *)(v17 + 9);
    switch(v20)
    {
      case '@':
        NewArrayBuffer = JSC::JSArrayIterator::createWithInitialValues((JSC::JSArrayIterator *)v12, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)a2 + 7) != 4)
        {
          __break(0xC471u);
          JUMPOUT(0x19858BAF4);
        }
        break;
      case 'A':
        NewArrayBuffer = JSC::JSMapIterator::createWithInitialValues((JSC::JSMapIterator *)v12, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)a2 + 7) != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x19858C2F4);
        }
        break;
      case 'B':
        NewArrayBuffer = JSC::JSSetIterator::createWithInitialValues((JSC::JSSetIterator *)v12, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)a2 + 7) != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x19858C328);
        }
        break;
      case 'D':
        if (&JSC::JSInternalPromise::s_info == (char **)(16 * *(unsigned int *)(v17 + 76)))
        {
          NewArrayBuffer = JSC::JSInternalPromise::createWithInitialValues((JSC::JSInternalPromise *)v12, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 7) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19858C43CLL);
          }
        }
        else
        {
          NewArrayBuffer = JSC::JSInternalPromise::createWithInitialValues((JSC::JSInternalPromise *)v12, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a2 + 7) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19858BB74);
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19858C348);
    }
LABEL_15:
    v22 = NewArrayBuffer;
    goto LABEL_16;
  }
  switch(*a2)
  {
    case 0x15C:
    case 0x15D:
    case 0x163:
      v25 = *((_QWORD *)a2 + 1);
      if ((v25 & 1) != 0)
      {
        v87 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
        if ((v25 & 2) != 0
          || ((v88 = *(_DWORD *)((v25 & 0xFFFFFFFF8) + 8), v88 != 0x3FFFFFFF) ? (v89 = v88 == -1) : (v89 = 1), v89))
        {
          v90 = 2;
        }
        else if (v88 >> 28)
        {
          v352 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v352 = v87;
          *(_DWORD *)(v352 + 8) = v88;
          v90 = 1;
          v87 = v352;
        }
        else
        {
          v90 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
          v87 = 0;
        }
        v25 = v87 | v90;
      }
      v26 = (uint64_t *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 1) != 0)
      {
        v91 = *v26;
        if (v26)
          WTF::fastFree((unint64_t)v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!v91)
          goto LABEL_25;
      }
      else if (!v26)
      {
LABEL_25:
        v27 = (unsigned __int16)*a2;
        switch(v27)
        {
          case 355:
            v22 = JSC::ClonedArguments::createWithMachineFrame((unint64_t)a1, (uint64_t)v13, 0, a4, a5, a6, a7, a8, a9);
            if (!v22)
            {
              __break(0xC471u);
              JUMPOUT(0x19858B7DCLL);
            }
            goto LABEL_16;
          case 348:
            NewArrayBuffer = JSC::DirectArguments::createByCopying(a1, v13, a3, a4, a5, a6, a7, a8);
            break;
          case 349:
            JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
            v78 = JSC::CodeBlock::baselineAlternative(*((_QWORD *)v13 + 2));
            v79 = (unint64_t *)((unint64_t)v367 & 0xFFFFFFFF8);
            v80 = (unint64_t)v367 & 0xFFFFFFFF8;
            if ((v367 & 1) != 0)
              v80 = *v79;
            if (v80)
              v78 = *(_QWORD *)(v80 + 8);
            if ((v367 & 1) != 0 && v79)
              WTF::fastFree((unint64_t)v79, v71, v72, v73, v74, v75, v76, v77);
            v81 = *(_DWORD *)(v78 + 32) & 0x7FFFFFFF;
            v82 = *(JSC **)(v78 + 8);
            v83 = *((_DWORD *)v82 + 227);
            if (v83)
              v84 = (JSC::JSGlobalObject *)(16 * (v83 & 0xFFFFFFFE));
            else
              v84 = 0;
            v85 = *((int *)v13 + 8) - 1;
            if (v85 <= v81)
              v86 = 0;
            else
              v86 = (const JSC::JSValue *)(v85 - v81);
            NewArrayBuffer = JSC::constructArray(v82, v84, (JSC::JSGlobalObject *)((char *)v13 + 8 * v81 + 48), v86, v74, v75, v76, v77);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19858C2C0);
        }
        goto LABEL_15;
      }
      JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
      v99 = (unint64_t)v367 & 0xFFFFFFFF8;
      if ((v367 & 1) == 0)
      {
        if ((*(_QWORD *)(((unint64_t)v367 & 0xFFFFFFFF8) + 0x18) >> 60) - 3 < 3)
          goto LABEL_134;
LABEL_323:
        JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
        v266 = (unint64_t)v367 & 0xFFFFFFFF8;
        if ((v367 & 1) != 0)
        {
          v267 = *(_DWORD *)(*(_QWORD *)v266 + 24);
          if (v266)
            WTF::fastFree(v266, v259, v260, v261, v262, v263, v264, v265);
        }
        else
        {
          v267 = *(_DWORD *)(((unint64_t)v367 & 0xFFFFFFFF8) + 0x18);
        }
        v104 = v267 & 0x3FFFFF;
        goto LABEL_326;
      }
      v258 = (*(_QWORD *)(*(_QWORD *)v99 + 24) >> 60) - 3;
      if (v99)
      {
        WTF::fastFree(v99, v92, v93, v94, v95, v96, v97, v98);
        if (v258 >= 3)
          goto LABEL_323;
      }
      else if (v258 > 2)
      {
        goto LABEL_323;
      }
LABEL_134:
      v100 = *((unsigned int *)a2 + 7);
      v101 = (int *)((char *)a3 + 8 * v100);
      v102 = 20 * v100 - 20;
      do
      {
        if (v102 == -20)
          goto LABEL_442;
        v103 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v102);
        v101 -= 2;
        v102 -= 20;
      }
      while (v103 != 3);
      v104 = *v101;
LABEL_326:
      if (!v104)
      {
LABEL_442:
        __break(0xC471u);
        JUMPOUT(0x19858CCE8);
      }
      JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
      v275 = (unint64_t)v367 & 0xFFFFFFFF8;
      if ((v367 & 1) != 0)
      {
        v278 = *(_BYTE *)(*(_QWORD *)v275 + 32);
        if (v275)
          WTF::fastFree(v275, v268, v269, v270, v271, v272, v273, v274);
        if ((v278 & 1) == 0)
          goto LABEL_329;
      }
      else if ((*(_BYTE *)(((unint64_t)v367 & 0xFFFFFFFF8) + 0x20) & 1) == 0)
      {
LABEL_329:
        JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
        v276 = (JSC::InlineCallFrame **)((unint64_t)v367 & 0xFFFFFFFF8);
        if ((v367 & 1) != 0)
        {
          v277 = (JSC::Structure *)JSC::InlineCallFrame::calleeConstant(*v276);
          if (v276)
            WTF::fastFree((unint64_t)v276, v342, v343, v344, v345, v346, v347, v348);
        }
        else
        {
          v277 = (JSC::Structure *)JSC::InlineCallFrame::calleeConstant((JSC::InlineCallFrame *)((unint64_t)v367 & 0xFFFFFFFF8));
        }
LABEL_338:
        if (!v277)
        {
LABEL_443:
          __break(0xC471u);
          JUMPOUT(0x19858CD08);
        }
        JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
        v290 = JSC::CodeBlock::baselineAlternative(*((_QWORD *)v13 + 2));
        v292 = (unint64_t *)((unint64_t)v367 & 0xFFFFFFFF8);
        v293 = (unint64_t)v367 & 0xFFFFFFFF8;
        if ((v367 & 1) != 0)
          v293 = *v292;
        if (v293)
          v290 = *(_QWORD *)(v293 + 8);
        if ((v367 & 1) != 0 && v292)
          WTF::fastFree((unint64_t)v292, v283, v284, v285, v286, v287, (uint64_t)v288, v289);
        v294 = (unsigned __int16)*a2;
        switch(v294)
        {
          case 355:
            v326 = v104 - 1;
            v327 = *(_QWORD *)(v290 + 8);
            v328 = *(_DWORD *)(v327 + 844);
            if (v328)
              v329 = (JSC::JSGlobalObject *)(16 * (v328 & 0xFFFFFFFE));
            else
              v329 = 0;
            Empty = JSC::ClonedArguments::createEmpty((JSC::ClonedArguments *)v12, 0, v329, v277, (JSC::JSFunction *)(v104 - 1), 0, v288, v289, v291);
            if (!Empty)
              JSC::handleResourceExhaustion("./ftl/FTLOperations.cpp", 475, "JSCell *JSC::FTL::operationMaterializeObjectInOSR(JSGlobalObject *, ExitTimeObjectMaterialization *, EncodedJSValue *)", "result", (WTF *)0x1F, "MemoryExhaustion", "Crash intentionally because memory is exhausted.");
            v22 = Empty;
            v336 = *((_DWORD *)a2 + 7);
            if (v336)
            {
              v337 = v336 - 1;
              v338 = (unint64_t *)((char *)a3 + 8 * (v336 - 1));
              v339 = 20 * (v336 - 1);
              do
              {
                if (*((_DWORD *)a2 + 7) <= v337)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19858CDD4);
                }
                v340 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v339);
                if ((_DWORD)v340 == 4 && v326 > HIDWORD(v340))
                  JSC::JSObject::putDirectIndex(v22, v327, (JSC::VM *)HIDWORD(v340), *v338, v331, v332, v333, v334, v335);
                --v338;
                v339 -= 20;
                --v337;
              }
              while (v337 != -1);
            }
            break;
          case 349:
            v307 = *(_DWORD *)(v290 + 32) & 0x7FFFFFFF;
            v308 = *(_QWORD *)(v290 + 8);
            v309 = *(_DWORD *)(v308 + 908);
            if (v309)
              v310 = 16 * (v309 & 0xFFFFFFFE);
            else
              v310 = 0;
            if (v104 - 1 >= v307)
              v311 = (JSC::Structure *)(v104 - 1 - v307);
            else
              v311 = 0;
            v312 = JSC::JSArray::tryCreate((JSC::JSArray *)v12, v310, v311, v285, v286, v287, (uint64_t)v288, v289, v291);
            if (!v312)
            {
              __break(0xC471u);
              JUMPOUT(0x19858CBCCLL);
            }
            v22 = v312;
            v318 = *((_DWORD *)a2 + 7);
            if (v318)
            {
              v319 = v318 - 1;
              v320 = (unint64_t *)((char *)a3 + 8 * (v318 - 1));
              v321 = 20 * (v318 - 1);
              do
              {
                if (*((_DWORD *)a2 + 7) <= v319)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19858CDCCLL);
                }
                v322 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v321);
                v34 = (_DWORD)v322 == 4;
                v323 = HIDWORD(v322);
                if (v34 && v323 >= v307)
                {
                  v325 = (JSC::VM *)(v323 - v307);
                  if (v325 < v311)
                    JSC::JSObject::putDirectIndex(v22, v308, v325, *v320, v313, v314, v315, v316, v317);
                }
                --v320;
                v321 -= 20;
                --v319;
              }
              while (v319 != -1);
            }
            break;
          case 348:
            v295 = (JSC::Structure *)(v104 - 1);
            v296 = *(_DWORD *)(v290 + 28) - 1;
            if (v295 <= v296)
              v297 = v296;
            else
              v297 = v295;
            v298 = *(_DWORD *)(*(_QWORD *)(v290 + 8) + 836);
            if (v298)
              v299 = 16 * (v298 & 0xFFFFFFFE);
            else
              v299 = 0;
            v22 = JSC::DirectArguments::create((JSC::DirectArguments *)v12, v299, v295, v297, v286, v287, (uint64_t)v288, v289);
            *(_QWORD *)(v22 + 24) = v277;
            if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v22 + 7))
              JSC::Heap::writeBarrierSlowPath(v12 + 192, v22);
            v300 = *((_DWORD *)a2 + 7);
            if (v300)
            {
              v301 = v300 - 1;
              v302 = (uint64_t *)((char *)a3 + 8 * (v300 - 1));
              v303 = 20 * (v300 - 1);
              do
              {
                if (*((_DWORD *)a2 + 7) <= v301)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19858CDC4);
                }
                v304 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v303);
                v34 = (_DWORD)v304 == 4;
                v305 = HIDWORD(v304);
                if (v34 && v297 > v305)
                  JSC::WriteBarrierBase<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>::set((_QWORD *)(v22 + 48 + 8 * v305), v12, v22, *v302);
                --v302;
                v303 -= 20;
                --v301;
              }
              while (v301 != -1);
            }
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19858CD58);
        }
        goto LABEL_16;
      }
      v279 = *((unsigned int *)a2 + 7);
      v280 = (JSC::Structure **)((char *)a3 + 8 * v279);
      v281 = 20 * v279 - 20;
      do
      {
        if (v281 == -20)
          goto LABEL_443;
        v282 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v281);
        --v280;
        v281 -= 20;
      }
      while (v282 != 5);
      v277 = *v280;
      goto LABEL_338;
    case 0x15E:
      v105 = *((unsigned int *)a2 + 7);
      v106 = (uint64_t *)((char *)a3 + 8 * v105);
      v107 = 20 * v105 - 20;
      do
      {
        if (v107 == -20)
          goto LABEL_439;
        v108 = *(_DWORD *)(*((_QWORD *)a2 + 2) + v107);
        --v106;
        v107 -= 20;
      }
      while (v108 != 15);
      v109 = *v106;
      if (!*v106)
      {
LABEL_439:
        __break(0xC471u);
        JUMPOUT(0x19858CC88);
      }
      v367 = (WTF *)v12;
      v110 = *(_BYTE *)(v109 + 4) & 0xE;
      if ((*(_BYTE *)(v109 + 4) & 0xE) != 0)
      {
        v111 = *(_DWORD *)(*(_QWORD *)(v109 + 8) - 8);
        if (v111 > 0x10000000)
        {
LABEL_319:
          JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v367);
          goto LABEL_320;
        }
      }
      else
      {
        v111 = 0;
      }
      v112 = *(_QWORD *)(v12 + 41656);
      v113 = JSC::tryAllocateCell<JSC::JSImmutableButterfly>((JSC *)v12, (JSC::VM *)(8 * v111 + 16), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v113)
        goto LABEL_319;
      v22 = v113;
      JSC::JSImmutableButterfly::JSImmutableButterfly(v113, v12, v112, v111);
      if (*(_BYTE *)(v12 + 755))
        __dmb(0xAu);
      if (v111)
      {
        if (v110 != 4 && v110 != 8)
        {
          if (v110 == 6)
          {
            for (i = 0; i != v111; ++i)
              JSC::JSImmutableButterfly::setIndex(v22, v12, i, *(_QWORD *)(*(_QWORD *)(v109 + 8) + 8 * i) + 0x2000000000000);
            goto LABEL_16;
          }
          v353 = 0;
          while (1)
          {
            DirectIndex = JSC::JSObject::getDirectIndex((JSC::JSObject *)v109, (uint64_t ***)a1, v353);
            v362 = DirectIndex ? DirectIndex : 10;
            if (*(_DWORD *)(v12 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v355, v356, v357, v358, v359, v360, v361))
            {
              break;
            }
            JSC::JSImmutableButterfly::setIndex(v22, v12, v353, v362);
            v353 = (v353 + 1);
            if (v111 == (_DWORD)v353)
              goto LABEL_16;
          }
LABEL_320:
          __break(0xC471u);
          JUMPOUT(0x19858C680);
        }
        for (j = 0; j != v111; JSC::JSImmutableButterfly::setIndex(v22, v12, j++, v116))
        {
          if (*(_QWORD *)(*(_QWORD *)(v109 + 8) + 8 * j))
            v116 = *(_QWORD *)(*(_QWORD *)(v109 + 8) + 8 * j);
          else
            v116 = 10;
        }
      }
LABEL_16:
      --*(_DWORD *)(v12 + 916);
      v23 = *(_DWORD *)(v12 + 88) - 1;
      *(_DWORD *)(v12 + 88) = v23;
      if (!v23 && *(_BYTE *)(v12 + 93441))
        JSC::VMTraps::undoDeferTerminationSlow((_BYTE *)(v12 + 64), 0);
      return v22;
    case 0x15F:
      JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
      v168 = JSC::CodeBlock::baselineAlternative(*((_QWORD *)v13 + 2));
      v170 = (unint64_t *)((unint64_t)v367 & 0xFFFFFFFF8);
      v171 = (unint64_t)v367 & 0xFFFFFFFF8;
      if ((v367 & 1) != 0)
        v171 = *v170;
      if (v171)
        v168 = *(_QWORD *)(v171 + 8);
      if ((v367 & 1) != 0 && v170)
        WTF::fastFree((unint64_t)v170, v161, v162, v163, v164, v165, v166, v167);
      v172 = *(_QWORD *)(v168 + 8);
      v173 = *(_DWORD *)(v172 + 908);
      if (v173)
        v174 = 16 * (v173 & 0xFFFFFFFE);
      else
        v174 = 0;
      v175 = *((_DWORD *)a2 + 7);
      if (v175)
      {
        v176 = 0;
        v177 = 0;
        v178 = 0;
        v179 = (uint64_t *)((char *)a3 + 8 * (v175 - 1));
        v180 = (int *)(*((_QWORD *)a2 + 2) + 20 * (v175 - 1));
        do
        {
          v181 = *v180;
          v180 -= 5;
          if (v181 == 16)
          {
            ++v176;
            v182 = *v179;
            if ((*v179 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v182 + 5) != 19)
            {
              if ((_DWORD)v177 == -1)
              {
                v178 = 1;
                v177 = 0xFFFFFFFFLL;
              }
              else
              {
                v177 = (v177 + 1);
              }
            }
            else
            {
              v183 = *(_DWORD *)(v182 + 8);
              v184 = __CFADD__((_DWORD)v177, v183);
              v185 = v177 + v183;
              if (v184)
                v178 = 1;
              if (v184)
                v177 = v177;
              else
                v177 = v185;
            }
          }
          --v179;
          --v175;
        }
        while (v175);
        if (v178)
        {
          __break(0xC471u);
          JUMPOUT(0x19858CDDCLL);
        }
      }
      else
      {
        v176 = 0;
        v177 = 0;
      }
      v186 = JSC::JSArray::tryCreate((JSC::JSArray *)v12, v174, (JSC::Structure *)v177, v163, v164, v165, v166, v167, v169);
      if (!v186)
      {
        __break(0xC471u);
        JUMPOUT(0x19858CA20);
      }
      v22 = v186;
      v367 = (WTF *)&v369;
      v368 = (WTF::Lock *)8;
      WTF::Vector<JSC::JSValue,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v367, v176, v187, v188, v189, v190, v191, v192);
      v201 = *((_DWORD *)a2 + 7);
      if (v201)
      {
        v202 = (v201 - 1);
        v203 = (_QWORD *)((char *)a3 + 8 * v202);
        v204 = 4 * (v202 + 4 * v202);
        do
        {
          if (*((_DWORD *)a2 + 7) <= v202)
          {
            __break(0xC471u);
            JUMPOUT(0x19858CDB4);
          }
          v205 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v204);
          if ((_DWORD)v205 == 16)
          {
            v206 = HIDWORD(v205);
            if (v176 <= v206)
            {
              __break(0xC471u);
              JUMPOUT(0x19858C654);
            }
            if (v206 >= HIDWORD(v368))
            {
              __break(0xC471u);
              JUMPOUT(0x19858CDBCLL);
            }
            *((_QWORD *)v367 + v206) = *v203;
          }
          --v203;
          v204 -= 20;
          LODWORD(v202) = v202 - 1;
        }
        while ((_DWORD)v202 != -1);
      }
      v207 = (unint64_t *)v367;
      if (HIDWORD(v368))
      {
        v208 = 0;
        v365 = (unint64_t *)((char *)v367 + 8 * HIDWORD(v368));
        do
        {
          v209 = *v207;
          if ((*v207 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v209 + 5) != 19)
          {
            JSC::JSObject::putDirectIndex(v22, v172, (JSC::VM *)v208, *v207, v196, v197, v198, v199, v200);
            v208 = (v208 + 1);
          }
          else if (*(_DWORD *)(v209 + 8))
          {
            v210 = 0;
            v211 = v209 + 16;
            do
            {
              if ((*(_BYTE *)(v209 + 4) & 0xE) == 6)
                v212 = *(_QWORD *)(v211 + 8 * v210) + 0x2000000000000;
              else
                v212 = *(_QWORD *)(v211 + 8 * v210);
              JSC::JSObject::putDirectIndex(v22, v172, (JSC::VM *)(v208 + v210++), v212, v196, v197, v198, v199, v200);
            }
            while (v210 < *(unsigned int *)(v209 + 8));
            v208 = (v208 + v210);
          }
          ++v207;
        }
        while (v207 != v365);
        v207 = (unint64_t *)v367;
      }
      if (&v369 != (char *)v207 && v207 != 0)
      {
        v367 = 0;
        LODWORD(v368) = 0;
        v214 = (WTF *)v207;
LABEL_262:
        WTF::fastFree((unint64_t)v214, v193, v194, v195, v196, v197, v198, v199);
      }
      goto LABEL_16;
    case 0x160:
      v117 = *((unsigned int *)a2 + 7);
      v118 = (unint64_t *)((char *)a3 + 8 * v117);
      v119 = 20 * v117 - 20;
      do
      {
        if (v119 == -20)
          goto LABEL_440;
        v120 = *(_DWORD *)(*((_QWORD *)a2 + 2) + v119);
        --v118;
        v119 -= 20;
      }
      while (v120 != 17);
      v121 = *v118;
      if (!*v118)
      {
LABEL_440:
        __break(0xC471u);
        JUMPOUT(0x19858CCA8);
      }
      JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
      v129 = JSC::CodeBlock::baselineAlternative(*((_QWORD *)v13 + 2));
      v130 = (unint64_t *)((unint64_t)v367 & 0xFFFFFFFF8);
      v131 = (unint64_t)v367 & 0xFFFFFFFF8;
      if ((v367 & 1) != 0)
        v131 = *v130;
      if (v131)
        v129 = *(_QWORD *)(v131 + 8);
      if ((v367 & 1) != 0 && v130)
        WTF::fastFree((unint64_t)v130, v122, v123, v124, v125, v126, v127, v128);
      v132 = (_QWORD *)JSC::UnlinkedCodeBlock::instructions(*(JSC::UnlinkedCodeBlock **)(v129 + 56));
      JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
      if ((v367 & 2) != 0)
      {
        v141 = (unsigned __int8 *)(*v132 + 0x3FFFFFFFLL);
        if ((v367 & 1) == 0)
          goto LABEL_171;
        v257 = (unint64_t)v367 & 0xFFFFFFFF8;
      }
      else
      {
        if ((v367 & 1) == 0)
        {
          v141 = (unsigned __int8 *)(*v132 + ((unint64_t)v367 >> 38));
          goto LABEL_171;
        }
        v257 = (unint64_t)v367 & 0xFFFFFFFF8;
        v141 = (unsigned __int8 *)(*v132
                                 + ((unint64_t)*(unsigned int *)(((unint64_t)v367 & 0xFFFFFFFF8) + 8) >> 2));
      }
      if (v257)
        WTF::fastFree(v257, v133, v134, (uint64_t)v135, v136, v137, v138, v139);
LABEL_171:
      v142 = *v141;
      if ((v142 | 2) == 0x82)
        v142 = v141[1];
      if (v142 != 17)
      {
        v248 = *(unsigned __int8 *)(v121 + 4);
        if ((v248 & 0x10) != 0)
          v249 = ((v248 & 0xE) + 10) >> 1;
        else
          v249 = (v248 >> 1) & 7;
        v250 = *((_DWORD *)a1 + v249 + 223);
        if (v250)
          v251 = (JSC::VM *)(16 * (v250 & 0xFFFFFFFE));
        else
          v251 = 0;
        NewArrayBuffer = JSC::CommonSlowPaths::allocateNewArrayBuffer((JSC::CommonSlowPaths *)v12, v251, (JSC::Structure *)v121, v135, v136, v137, v138, v139, v140);
        goto LABEL_15;
      }
      v144 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewArrayBuffer>(v141);
      v145 = *(_QWORD *)(v129 + 136);
      v146 = *(unsigned __int16 *)(v145 + 34);
      if (!*(_WORD *)(v145 + 34))
        v146 = *(_DWORD *)(v145 + 164);
      v147 = (v145 + v146 + 7) & 0xFFFFFFFFFFFFFFF8;
      v148 = (unsigned __int16 *)(v147 + 8 * HIDWORD(v143));
      v149 = JSC::ArrayAllocationProfile::selectIndexingType((JSC::ArrayAllocationProfile *)v148);
      v156 = (v149 >> 1) & 7;
      if ((v149 & 0x10) != 0)
        v156 = ((v149 & 0xE) + 10) >> 1;
      v157 = *((_DWORD *)a1 + v156 + 223);
      if (v157)
        v158 = (JSC::VM *)(16 * (v157 & 0xFFFFFFFE));
      else
        v158 = 0;
      v159 = v121;
      if ((*(_BYTE *)(v121 + 4) & 0x1F) != (_DWORD)v149)
      {
        v159 = JSC::JSImmutableButterfly::create((JSC::JSImmutableButterfly *)v12, (JSC::VM *)v149, *(_DWORD *)(v121 + 8), (uint64_t)v150, v151, v152, v153, v154);
        if (*(_DWORD *)(v121 + 8))
        {
          v349 = 0;
          v364 = v121 + 16;
          do
          {
            if ((*(_BYTE *)(v121 + 4) & 0xE) == 6)
              v350 = *(_QWORD *)(v364 + 8 * v349) + 0x2000000000000;
            else
              v350 = *(_QWORD *)(v364 + 8 * v349);
            v366 = v349;
            JSC::JSImmutableButterfly::setIndex(v159, v12, v349, v350);
            v349 = v366 + 1;
          }
          while (v366 + 1 < (unint64_t)*(unsigned int *)(v121 + 8));
        }
        __dmb(0xAu);
        v351 = (uint64_t)((v144 & 0xFFFFFFFF00000000) - 0x4000000000000000) >> 32;
        if (v351 >= *(unsigned int *)(v129 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x19858CDE4);
        }
        *(_QWORD *)(*(_QWORD *)(v129 + 160) + 8 * v351) = v159;
        if (v159
          && (v159 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v129 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v12 + 192, v129);
        }
        __dmb(0xAu);
      }
      v160 = JSC::CommonSlowPaths::allocateNewArrayBuffer((JSC::CommonSlowPaths *)v12, v158, (JSC::Structure *)v159, v150, v151, v152, v153, v154, v155);
      v22 = v160;
      if (v147)
        *(_QWORD *)v148 = v160 | ((unint64_t)v148[3] << 48);
      goto LABEL_16;
    case 0x161:
    case 0x162:
LABEL_259:
      __break(0xC471u);
      JUMPOUT(0x19858C28CLL);
    default:
      switch(*a2)
      {
        case 0x116:
          v231 = *((unsigned int *)a2 + 7);
          if (!(_DWORD)v231)
            goto LABEL_441;
          v232 = v231 - 1;
          v233 = *((_QWORD *)a2 + 2);
          if (*(_QWORD *)(v233 + 20 * (v231 - 1)) != 13)
          {
            v234 = (uint64_t *)(v233 + 20 * v231 - 40);
            do
            {
              if (!v232)
              {
LABEL_441:
                __break(0xC471u);
                JUMPOUT(0x19858CCC8);
              }
              --v232;
              v235 = *v234;
              v234 = (uint64_t *)((char *)v234 - 20);
            }
            while (v235 != 13);
          }
          v236 = (JSC::VM *)*((_QWORD *)a3 + v232);
          if (*((_BYTE *)v236 + 5) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19858CA54);
          }
          v22 = JSC::constructEmptyObject((JSC *)v12, v236, a3, a4, a5, a6, a7, a8);
          JSC::Structure::getPropertiesConcurrently(v236, v237, v238, v239, v240, v241, v242, &v367);
          v214 = v367;
          if (HIDWORD(v368))
          {
            v243 = 16 * HIDWORD(v368);
            v244 = (int *)((char *)v367 + 8);
            do
            {
              v246 = *v244;
              v244 += 4;
              v245 = v246;
              if (v246 < 64)
              {
                v247 = v22 + 16;
              }
              else
              {
                v247 = *(_QWORD *)(v22 + 8) - 8;
                v245 = 63 - v245;
              }
              *(_QWORD *)(v247 + 8 * v245) = 0xFFFE000000004D0BLL;
              v243 -= 16;
            }
            while (v243);
          }
          if (!v214)
            goto LABEL_16;
          v367 = 0;
          LODWORD(v368) = 0;
          goto LABEL_262;
        case 0x11A:
        case 0x11B:
        case 0x11C:
        case 0x11D:
          v63 = *((_DWORD *)a2 + 7);
          if (!v63)
            goto LABEL_101;
          v64 = 0;
          v65 = 0;
          v66 = v63 - 1;
          do
          {
            v67 = v66;
            v68 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 20 * v66);
            if (HIDWORD(v68))
              v69 = 0;
            else
              v69 = (_DWORD)v68 == 9;
            if (v69)
            {
              v64 = (JSC::VM *)*((_QWORD *)a3 + v66);
              if (*((_BYTE *)v64 + 5) != 12)
              {
                __break(0xC471u);
                JUMPOUT(0x19858C614);
              }
            }
            else
            {
              if (HIDWORD(v68))
                v70 = 0;
              else
                v70 = (_DWORD)v68 == 8;
              if (v70)
              {
                v65 = *((_QWORD *)a3 + v66);
                if (*(unsigned __int8 *)(v65 + 5) - 51 >= 6)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19858C634);
                }
              }
            }
            --v66;
          }
          while (v67);
          if (!v64 || !v65)
          {
LABEL_101:
            __break(0xC471u);
            JUMPOUT(0x19858BB14);
          }
          switch(v15)
          {
            case 282:
              NewArrayBuffer = (unint64_t)JSC::JSFunction::createWithInvalidatedReallocationWatchpoint((unint64_t *)v12, (uint64_t)v64, (_DWORD *)v65, a4, a5, a6, a7, a8);
              break;
            case 283:
              NewArrayBuffer = (unint64_t)JSC::JSGeneratorFunction::createWithInvalidatedReallocationWatchpoint(v12, v64, (_DWORD *)v65, a4, a5, a6, a7, a8);
              break;
            case 285:
              NewArrayBuffer = (unint64_t)JSC::JSAsyncGeneratorFunction::createWithInvalidatedReallocationWatchpoint(v12, (uint64_t)v64, (_DWORD *)v65, a4, a5, a6, a7, a8);
              break;
            default:
              NewArrayBuffer = (unint64_t)JSC::JSAsyncFunction::createWithInvalidatedReallocationWatchpoint(v12, v64, (_DWORD *)v65, a4, a5, a6, a7, a8);
              break;
          }
          goto LABEL_15;
        case 0x120:
          v28 = *((unsigned int *)a2 + 7);
          if (!(_DWORD)v28)
            goto LABEL_78;
          v29 = 0;
          v30 = 0;
          v31 = v28 - 1;
          do
          {
            v32 = v31;
            v33 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 20 * v31);
            if (HIDWORD(v33))
              v34 = 0;
            else
              v34 = (_DWORD)v33 == 1;
            if (v34)
            {
              v29 = *((_QWORD *)a3 + v31);
              if (*(unsigned __int8 *)(v29 + 5) - 51 >= 6)
              {
                __break(0xC471u);
                JUMPOUT(0x19858C3ECLL);
              }
            }
            else
            {
              if (HIDWORD(v33))
                v35 = 0;
              else
                v35 = (_DWORD)v33 == 2;
              if (v35)
              {
                v30 = (unsigned __int8 *)*((_QWORD *)a3 + v31);
                if (&JSC::SymbolTable::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19858C40CLL);
                }
              }
            }
            --v31;
          }
          while (v32);
          if (!v29)
          {
LABEL_78:
            __break(0xC471u);
            JUMPOUT(0x19858BA04);
          }
          if (!v30)
          {
            __break(0xC471u);
            JUMPOUT(0x19858C46CLL);
          }
          v36 = *((_QWORD *)a2 + 1);
          if ((v36 & 1) != 0)
          {
            v252 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
            if ((v36 & 2) != 0
              || ((v253 = *(_DWORD *)((v36 & 0xFFFFFFFF8) + 8), v253 != 0x3FFFFFFF) ? (v254 = v253 == -1) : (v254 = 1),
                  v254))
            {
              v255 = 2;
            }
            else if (v253 >> 28)
            {
              v363 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v363 = v252;
              *(_DWORD *)(v363 + 8) = v253;
              v255 = 1;
              v252 = v363;
            }
            else
            {
              v255 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
              v252 = 0;
            }
            v36 = v252 | v255;
            v37 = ((v252 | v255) & 1) == 0;
          }
          else
          {
            v37 = 1;
          }
          v38 = *((_QWORD *)v13 + 2);
          if (*(_QWORD *)(v38 + 192))
            v39 = *(_QWORD *)(v38 + 192);
          else
            v39 = *((_QWORD *)v13 + 2);
          v40 = *(_QWORD *)(v39 + 120);
          if (v40)
          {
            v41 = *(unsigned __int8 *)(v40 + 12);
            if ((v41 & 0xFE) != 2 && v41 != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19858CD8CLL);
            }
          }
          v43 = (uint64_t *)(v36 & 0xFFFFFFFF8);
          v44 = v36 & 0xFFFFFFFF8;
          if (!v37)
            v44 = *v43;
          if (v44)
            v39 = *(_QWORD *)(v44 + 8);
          if (!v37 && v43)
            WTF::fastFree((unint64_t)v43, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v45 = *(_DWORD *)(*(_QWORD *)(v39 + 8) + 832);
          if (v45)
            v46 = (JSC::VM *)(16 * (v45 & 0xFFFFFFFE));
          else
            v46 = 0;
          v47 = JSC::JSLexicalEnvironment::create((JSC *)v12, v46, v29, (uint64_t)v30, 10, a6, a7, a8, a9.n128_f64[0]);
          v48 = *((unsigned int *)a2 + 7);
          if (v48 - 2 != *((_DWORD *)v30 + 4) + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19858C4D4);
          }
          v22 = v47;
          if ((_DWORD)v48)
          {
            v49 = *((_QWORD *)a2 + 2);
            v50 = v48 - 1;
            do
            {
              v51 = v50;
              v52 = *(_QWORD *)(v49 + 20 * v50);
              if ((_DWORD)v52 == 6)
                *(_QWORD *)(v47 + 32 + ((v52 >> 29) & 0x7FFFFFFF8)) = 0xFFFE00000000748ALL;
              --v50;
            }
            while (v51);
          }
          if (!(BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A)))
            goto LABEL_16;
          v53 = v30 + 20;
          v370 = 0;
          v368 = (WTF::Lock *)(v30 + 20);
          v369 = 1;
          if (__ldaxr(v30 + 20))
          {
            __clrex();
          }
          else if (!__stxr(1u, v53))
          {
LABEL_75:
            v370 = 1;
            JSC::SymbolTable::begin((uint64_t)v30);
            v62 = __ldxr((unsigned __int8 *)v368);
            if (v62 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v368))
                goto LABEL_16;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v368, v55, v56, v57, v58, v59, v60, v61);
            goto LABEL_16;
          }
          WTF::Lock::lockSlow((WTF::Lock *)v53);
          goto LABEL_75;
        case 0x122:
          v215 = *((unsigned int *)a2 + 7);
          if (!(_DWORD)v215)
            goto LABEL_446;
          v216 = 0;
          v217 = v215 - 1;
          do
          {
            v218 = v217;
            if (*(_QWORD *)(*((_QWORD *)a2 + 2) + 20 * v217) == 18)
            {
              v216 = (JSC::Structure *)*((_QWORD *)a3 + v217);
              if (&JSC::RegExp::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v216 & 0xFFFFFFFE) + 0x4C)))
              {
                __break(0xC471u);
                JUMPOUT(0x19858C5F4);
              }
            }
            --v217;
          }
          while (v218);
          if (!v216)
          {
LABEL_446:
            __break(0xC471u);
            JUMPOUT(0x19858CD38);
          }
          JSC::FTL::ExitTimeObjectMaterialization::origin((uint64_t *)&v367, *((_QWORD *)a2 + 1));
          v226 = JSC::CodeBlock::baselineAlternative(*((_QWORD *)v13 + 2));
          v227 = (unint64_t *)((unint64_t)v367 & 0xFFFFFFFF8);
          v228 = (unint64_t)v367 & 0xFFFFFFFF8;
          if ((v367 & 1) != 0)
            v228 = *v227;
          if (v228)
            v226 = *(_QWORD *)(v228 + 8);
          if ((v367 & 1) != 0 && v227)
            WTF::fastFree((unint64_t)v227, v219, v220, v221, v222, v223, v224, v225);
          v229 = *(_DWORD *)(*(_QWORD *)(v226 + 8) + 976);
          if (v229)
            v230 = (JSC::VM *)(16 * (v229 & 0xFFFFFFFE));
          else
            v230 = 0;
          NewArrayBuffer = JSC::RegExpObject::create((JSC::RegExpObject *)v12, v230, v216, (JSC::RegExp *)1, v222, v223, v224, v225);
          goto LABEL_15;
        default:
          goto LABEL_259;
      }
  }
}

JSC::JSCell *JSC::JSFunction::createWithInvalidatedReallocationWatchpoint(unint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int v18;
  uint64_t v19;
  unint64_t SlowCase;
  JSC::JSCell *result;
  int *v22;
  int *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = a1 + 4786;
  v11 = *(int **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(v12 + 16);
  if (*(_BYTE *)(v12 + 50) == 6)
  {
    v22 = v11 + 239;
    v23 = v11 + 236;
    if ((int)v13 < 0)
      v17 = v23;
    else
      v17 = v22;
  }
  else
  {
    v14 = v11 + 240;
    if ((int)v13 < 0)
      v14 = v11 + 237;
    v15 = v11 + 241;
    v16 = v11 + 238;
    if ((int)v13 < 0)
      v17 = v16;
    else
      v17 = v15;
    if ((*(_BYTE *)(a2 + 68) & 1) == 0)
      v17 = v14;
  }
  v18 = *v17;
  if (v18)
    v19 = 16 * (v18 & 0xFFFFFFFE);
  else
    v19 = 0;
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_13;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v24 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v24);
    v10[2] = SlowCase + (int)v24;
LABEL_13:
    *v10 = SlowCase + 32;
    goto LABEL_14;
  }
  v25 = a3;
  v26 = v19;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, (uint64_t)a3, v19, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 4783), (uint64_t)(a1 + 24), 32, 0, 0, v27, v28, v29);
  v19 = v26;
  a3 = v25;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::JSCallee::JSCallee((JSC::JSCell *)SlowCase, (uint64_t)a1, (uint64_t)a3, v19);
  *((_QWORD *)result + 3) = a2;
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *JSC::FTL::ExitTimeObjectMaterialization::origin(uint64_t *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  if ((a2 & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v3 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v3 != 0x3FFFFFFF)
        ? (v4 = (_DWORD)v3 == -1)
        : (v4 = 1),
          v4))
    {
      v5 = 2;
    }
    else if (v3 >> 28)
    {
      v8 = this;
      v6 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v7 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
      v2 = WTF::fastMalloc((WTF *)0x10);
      this = v8;
      *(_QWORD *)v2 = v6;
      *(_DWORD *)(v2 + 8) = v7;
      v5 = 1;
    }
    else
    {
      v5 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v2 = v3 << 36;
    }
    a2 = v2 | v5;
  }
  *this = a2;
  return this;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewArrayBuffer>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v6;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v6 = *((__int16 *)a1 + 2);
    LODWORD(v4) = v6 + 1073741760;
    if (v6 <= 63)
      v4 = v6;
    else
      v4 = v4;
  }
  else if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v4 = *(unsigned int *)(a1 + 6);
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v3 = (char)a1[2];
    LODWORD(v4) = v3 + 1073741808;
    if (v3 <= 15)
      v4 = v3;
    else
      v4 = v4;
  }
  return v2 | (unint64_t)(v4 << 32);
}

unint64_t JSC::ArrayAllocationProfile::selectIndexingType(JSC::ArrayAllocationProfile *this)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)this & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return HIBYTE(v1);
  v3 = *(_BYTE *)((*(_QWORD *)this & 0xFFFFFFFFFFFFLL) + 4);
  v4 = HIBYTE(v1);
  if ((v3 & 0xF) == HIBYTE(v1))
    return HIBYTE(v1);
  *(_QWORD *)this = v1 & 0xFFFF000000000000;
  if (!byte_1ECF4C722)
    return (v1 & 0xFFFF000000000000) >> 56;
  v6 = HIWORD(v1);
  v7 = HIBYTE(v1) & 0xF;
  if (v7 <= (v3 & 0xFu))
    LODWORD(v7) = v3 & 0xF;
  if (v7 >= 0xA)
    v8 = 9;
  else
    v8 = v7;
  v9 = v8 | 0x10;
  if ((v4 & 0x10) != 0)
    LODWORD(v7) = v9;
  if ((v3 & 0xE) != 0)
    v10 = *(_DWORD *)(*(_QWORD *)(v2 + 8) - 4);
  else
    v10 = 0;
  if (v6 > v10)
    v10 = v6;
  if (v10 >= 0x19)
    v10 = 25;
  v11 = v10 | ((_DWORD)v7 << 8);
  *(_QWORD *)this = v11 << 48;
  return (unint64_t)(unsigned __int16)v11 >> 8;
}

uint64_t JSC::RegExpObject::create(JSC::RegExpObject *this, JSC::VM *a2, JSC::Structure *a3, JSC::RegExp *a4, BOOL a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  _QWORD *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  int v16;
  JSC::Structure *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a2;
  v12 = (_QWORD *)((char *)this + 39344);
  SlowCase = *((_QWORD *)this + 4918);
  if (SlowCase < v12[1])
    goto LABEL_2;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_2:
    *v12 = SlowCase + 32;
    goto LABEL_3;
  }
  v16 = (int)a4;
  v17 = a3;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 39320, (uint64_t)this + 192, 32, 0, 0, v19, v20, v21);
  v10 = a2;
  a3 = v17;
  LODWORD(a4) = v16;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  result = JSC::RegExpObject::RegExpObject(SlowCase, (uint64_t)this, (unint64_t)v10, (uint64_t)a3, (int)a4);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t operationSwitchStringAndGetIndex(JSC::JSGlobalObject *a1, uint64_t *a2, int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  int **v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v26;
  int v27;
  uint64_t vars0;

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = vars0;
  v11 = a3 + 1;
  if (((_BYTE)a3[1] & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope((unint64_t)a3, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v27 = *(_DWORD *)(v10 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = *a2;
  v13 = *((unsigned int *)a2 + 2);
  if (!*a2)
  {
    v20 = 16 * v13;
    goto LABEL_19;
  }
  v14 = *v11;
  v15 = v13 - 1;
  v16 = *((_DWORD *)a2 + 4);
  v17 = v14[4];
  if (v17 < 0x100)
  {
    v18 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
    v12 = *a2;
  }
  else
  {
    v18 = v17 >> 8;
  }
  v19 = (v18 ^ v16) & v15;
  v20 = v12 + 16 * v19;
  v21 = *(WTF **)v20;
  if (*(_QWORD *)v20)
  {
    v22 = -1;
    do
    {
      v23 = *((_DWORD *)v21 + 4);
      if (v23 < 0x100)
        v24 = WTF::StringImpl::hashSlowCase(v21);
      else
        v24 = v23 >> 8;
      if (++v22 > ((v19 + (_DWORD)v13 - ((v24 ^ v16) & v15)) & v15))
      {
        v12 = *a2;
        break;
      }
      if (v24 == v18)
      {
        v26 = WTF::equal(*(WTF **)v20, (const WTF::StringImpl *)v14, (const WTF::StringImpl *)a3);
        v12 = *a2;
        if (v26)
        {
          v13 = *((unsigned int *)a2 + 2);
          goto LABEL_19;
        }
      }
      else
      {
        v12 = *a2;
      }
      v19 = (v19 + 1) & v15;
      v20 = v12 + 16 * v19;
      v21 = *(WTF **)v20;
    }
    while (*(_QWORD *)v20);
  }
  v13 = *((unsigned int *)a2 + 2);
  v20 = v12 + 16 * v13;
LABEL_19:
  if (v20 == v12 + 16 * v13)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v20 + 12);
}

uint64_t operationTypeOfObjectAsTypeofType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD var18[4];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var18[3];
  if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xA) & 1) != 0
    && *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) == a1)
  {
    return 0;
  }
  v2 = *(unsigned __int8 *)(a2 + 5);
  if (v2 >= 0x17
    && ((v2 & 0xFE) == 0x1A
     || (*(_BYTE *)(a2 + 6) & 4) != 0
     && ((*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x38))(var18, a2), LOBYTE(var18[0]))))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t operationCompileFTLLazySlowPath(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  pthread_key_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  WTF **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unint64_t v39;
  pthread_key_t *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v52;
  __int128 *p_start;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  char *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  JSC::ExecutableMemoryHandle *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  JSC::ExecutableAllocator *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  BOOL v118;
  char v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  char **v162;
  JSC::ExecutableMemoryHandle *v163;
  WTF *v164;
  uint64_t v165;
  _BYTE v166[24];
  WTF *v167;
  uint64_t v168;
  _QWORD v169[5];
  char *v170;
  JSC::ExecutableMemoryHandle *v171;
  char v172;
  WTF **v173;
  size_t len;
  uint64_t v175;
  WTF *v176;
  _BYTE v177[128];
  unsigned int v178;
  char v179;
  int v180;
  unsigned int v181;
  __int128 start;
  __int128 v183;
  uint64_t v184;
  _BYTE v185[32];
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  WTF *v189;
  _BYTE v190[128];
  unsigned int v191;
  int v192;
  int v193;
  char v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _BYTE *v198;
  char v199;
  uint64_t v200;
  int v201;
  _BYTE *v202;
  char v203;
  uint64_t v204;
  int v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 8) != 0)
    v4 = v3 - 16;
  else
    v4 = v3 & 0xFFFFFFFFFFFFC000 | 8;
  v5 = *(_QWORD *)v4;
  ++*(_DWORD *)(*(_QWORD *)v4 + 916);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned int **)(v6 + 120);
  if (v7)
  {
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v7 + 2;
  v11 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 96))(v7);
  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 32))(v7);
  }
  if (*(_DWORD *)(v11 + 308) <= a2 || (v14 = *(_QWORD *)(*(_QWORD *)(v11 + 296) + 8 * a2), *(_QWORD *)(v14 + 40)))
  {
    __break(0xC471u);
    JUMPOUT(0x19858DB64);
  }
  v185[0] = 0;
  v185[24] = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0x8000000080000000;
  v189 = (WTF *)v190;
  v191 = 128;
  v15 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v15 != -1)
  {
    v173 = &v164;
    v167 = (WTF *)&v173;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v167, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v16 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v24 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v24)
  {
    v24 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v24, v16);
  }
  v25 = *(WTF **)v24;
  if (*(_QWORD *)v24 != v24 + 8)
  {
    v26 = *(_DWORD *)(v24 + 136);
    if (v191 < v26)
    {
      if (v189 && v189 != (WTF *)v190)
      {
        WTF::fastFree((unint64_t)v189, v17, v18, v19, v20, v21, v22, v23);
        v25 = *(WTF **)v24;
        v26 = *(_DWORD *)(v24 + 136);
      }
      v189 = v25;
      v191 = v26;
      *(_QWORD *)v24 = v24 + 8;
      *(_DWORD *)(v24 + 136) = 128;
    }
  }
  v194 = 1;
  v192 = 0;
  v193 = 0;
  v195 = 0u;
  v196 = 0u;
  v197 = 0u;
  v198 = v185;
  v199 = 16;
  v200 = 0;
  v201 = 0x10000;
  v202 = v185;
  v203 = 17;
  v204 = 0;
  v205 = 0x20000;
  v206 = 0;
  v207 = v6;
  v208 = JSC::CodeBlock::baselineAlternative(v6);
  v167 = (WTF *)v169;
  v168 = 2;
  v27 = &v164;
  v164 = (WTF *)v166;
  v165 = 2;
  if (!*(_QWORD *)(v14 + 16))
    v27 = 0;
  v169[3] = v27;
  v169[4] = v14;
  (*(void (**)(_QWORD, _BYTE *, WTF **))(**(_QWORD **)(v14 + 56) + 16))(*(_QWORD *)(v14 + 56), v185, &v167);
  if (HIDWORD(v168))
  {
    v33 = *(_QWORD *)(v14 + 8);
    v34 = (unsigned int *)v167;
    v35 = 12 * HIDWORD(v168);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(v34, v33, (uint64_t)v185, v28, v29, v30, v31, v32);
      v34 += 3;
      v35 -= 12;
    }
    while (v35);
  }
  v36 = *(_QWORD *)(v14 + 16);
  if (v36 && HIDWORD(v165))
  {
    v37 = (unsigned int *)v164;
    v38 = 12 * HIDWORD(v165);
    do
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)10924>(v37, v36, (uint64_t)v185, v28, v29, v30, v31, v32);
      v37 += 3;
      v38 -= 12;
    }
    while (v38);
  }
  v173 = 0;
  len = 0;
  v175 = v6;
  v176 = (WTF *)v177;
  v178 = 128;
  v39 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v39 != -1)
  {
    v170 = &v172;
    v162 = &v170;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v162, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v40 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v48 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v48)
  {
    v48 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v48, v40);
  }
  v49 = *(WTF **)v48;
  if (*(_QWORD *)v48 != v48 + 8)
  {
    v50 = *(_DWORD *)(v48 + 136);
    if (v178 < v50)
    {
      if (v176 && v176 != (WTF *)v177)
      {
        WTF::fastFree((unint64_t)v176, v41, v42, v43, v44, v45, v46, v47);
        v49 = *(WTF **)v48;
        v50 = *(_DWORD *)(v48 + 136);
      }
      v176 = v49;
      v178 = v50;
      *(_QWORD *)v48 = v48 + 8;
      *(_DWORD *)(v48 + 136) = 128;
    }
  }
  v179 = 1;
  v180 = 0;
  v181 = 11;
  start = 0u;
  v183 = 0u;
  v184 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v173, (uint64_t)v185, 1, v43, v44, v45, v46, v47);
  v51 = *(_QWORD *)(v6 + 120);
  if (!(!(v51 && ((*(_BYTE *)(v51 + 12) & 0xFE) == 4 ? (v52 = BYTE1(dword_1ECF4C28A) == 0) : (v52 = 1), !v52)
        || HIBYTE(word_1ECF4C286) != 0)
      && byte_1ECF4C288 == 0
      && byte_1ECF4C289 == 0))
  {
    if (v51)
    {
      v117 = *(_BYTE *)(v51 + 12) & 0xFE;
      if (BYTE1(dword_1ECF4C28A))
        v118 = v117 == 4;
      else
        v118 = 0;
      v119 = 1;
      if (v118 || HIBYTE(word_1ECF4C286))
        goto LABEL_104;
    }
    else if (HIBYTE(word_1ECF4C286))
    {
      v119 = 1;
LABEL_104:
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&v173, v119, 0, 0, "Lazy slow path call stub", &v162);
      goto LABEL_72;
    }
    v119 = byte_1ECF4C288 != 0;
    goto LABEL_104;
  }
  if (DWORD1(v183))
  {
    v111 = (uint64_t *)*((_QWORD *)&start + 1);
    v112 = 8 * DWORD1(v183);
    do
    {
      v113 = *v111++;
      (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v113 + 16))(v113, &v173);
      v112 -= 8;
    }
    while (v112);
  }
  p_start = &start;
  if (HIDWORD(v184))
  {
    v114 = (uint64_t *)*((_QWORD *)&v183 + 1);
    v115 = 8 * HIDWORD(v184);
    do
    {
      v116 = *v114++;
      (*(void (**)(uint64_t, WTF ***))(*(_QWORD *)v116 + 16))(v116, &v173);
      v115 -= 8;
    }
    while (v115);
  }
  v56 = v181;
  v57 = len;
  *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v181) += len;
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v56);
  sys_icache_invalidate((void *)start, v57);
  v65 = (unsigned int *)v173;
  if (v173)
  {
    do
      v160 = __ldaxr(v65);
    while (__stlxr(v160 + 1, v65));
    p_start = (__int128 *)(v65 + 2);
  }
  v66 = *(char **)p_start;
  v170 = v66;
  v171 = (JSC::ExecutableMemoryHandle *)v65;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v173, (uint64_t)&v170, 0, 0);
  v162 = (char **)v66;
  v163 = 0;
  if (v65)
  {
    do
      v67 = __ldaxr(v65);
    while (__stlxr(v67 + 1, v65));
    v68 = (unsigned int *)v163;
    v163 = (JSC::ExecutableMemoryHandle *)v65;
    if (v68)
    {
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v68);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
      }
    }
    v71 = (unsigned int *)v171;
    v171 = 0;
    if (v71)
    {
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        atomic_store(1u, v71);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v71, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
      }
    }
  }
LABEL_72:
  v74 = v163;
  v163 = 0;
  v75 = *(unsigned int **)(v14 + 48);
  *(_QWORD *)(v14 + 40) = v162;
  *(_QWORD *)(v14 + 48) = v74;
  if (v75)
  {
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      atomic_store(1u, v75);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    v78 = (unsigned int *)v163;
    v163 = 0;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v78, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
      }
    }
  }
  v81 = *(JSC::ExecutableAllocator **)v14;
  JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)v14, *(_QWORD *)v14, *(_QWORD *)(v14 + 40));
  sys_icache_invalidate(v81, 4uLL);
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v173, v82, v83, v84, v85, v86, v87, v88);
  v96 = v164;
  if (v166 != (_BYTE *)v164 && v164)
  {
    v164 = 0;
    LODWORD(v165) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  v97 = v167;
  if (v169 != (_QWORD *)v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v97, v89, v90, v91, v92, v93, v94, v95);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v185, v89, v90, v91, v92, v93, v94, v95);
  v106 = *(_QWORD *)(v14 + 40);
  v105 = *(unsigned int **)(v14 + 48);
  if (v105)
  {
    do
      v107 = __ldaxr(v105);
    while (__stlxr(v107 + 1, v105));
    do
    {
      v108 = __ldaxr(v105);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v105));
    if (!v109)
    {
      atomic_store(1u, v105);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v98, v99, v100, v101, v102, v103, v104);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
  }
  --*(_DWORD *)(v5 + 916);
  return v106;
}

void operationReportBoundsCheckEliminationErrorAndCrash(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  v9 = a4;
  v7 = a6;
  v8 = a5;
  v6 = a1;
  WTF::dataLogLn<char [41],int,char [26],int,char [3],int,char [12],int,char [2],int,char [6],JSC::CodeBlock *>(&v11, &v10, &v8, &v9, &v7, &v6);
  __break(0xC471u);
}

uint64_t WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::add<long long *>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  int v34;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *a3;
  result = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3);
  v22 = result & v13;
  v23 = (_QWORD *)(v12 + 16 * (result & v13));
  v24 = *v23;
  if (*v23)
  {
    v33 = 0;
    v34 = 1;
    do
    {
      if (v24 == v14)
      {
        v32 = 0;
        v31 = v12 + 16 * *(unsigned int *)(v12 - 4);
        goto LABEL_12;
      }
      if (v24 == -1)
        v33 = v23;
      v22 = (v22 + v34) & v13;
      v23 = (_QWORD *)(v12 + 16 * v22);
      v24 = *v23;
      ++v34;
    }
    while (*v23);
    if (v33)
    {
      *v33 = 0;
      v33[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v23 = v33;
    }
  }
  *v23 = v14;
  v23[1] = *a4;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::expand(a2, (uint64_t)v23, v16, v17, v18, v19, v20, v21);
    v23 = (_QWORD *)result;
    v27 = *a2;
    if (*a2)
      v30 = *(unsigned int *)(v27 - 4);
    else
      v30 = 0;
    goto LABEL_11;
  }
  if (3 * v30 <= 4 * v29)
    goto LABEL_16;
LABEL_11:
  v31 = v27 + 16 * v30;
  v32 = 1;
LABEL_12:
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = v31;
  *(_BYTE *)(a1 + 16) = v32;
  return result;
}

void JSC::FTL::reboxAccordingToFormat(int a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a1 != 16)
  {
    switch(a1)
    {
      case 1:
        JSC::MacroAssemblerARM64::and64((uint64_t)a2, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
        v16 = a2[50];
        if (v16 + 4 > a2[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v9, v10, v11, v12, v13, v14, v15);
          v16 = a2[50];
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v16) = -1441071104;
        a2[50] += 4;
        return;
      case 2:
        v39 = a2[50];
        if (v39 + 4 > a2[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v39 = a2[50];
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v39) = -1823671296;
        a2[50] += 4;
        goto LABEL_13;
      case 3:
LABEL_13:
        JSC::MacroAssemblerARM64::moveDoubleTo64(a2, 0, 2, a4, a5, a6, a7, a8);
        JSC::AssemblyHelpers::boxInt52((uint64_t)a2, 0, 0, 1, 0, v40, v41, v42);
        v37 = a2;
        v38 = 2;
        goto LABEL_8;
      case 4:
        JSC::MacroAssemblerARM64::moveDoubleTo64(a2, 0, 1, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::move64ToDouble(a2, 0, 0, v17, v18, v19, v20, v21);
        JSC::AssemblyHelpers::purifyNaN((uint64_t)a2, 0, v22, v23, v24, v25, v26, v27);
        JSC::AssemblyHelpers::boxDouble(a2, 0, 0, 1, v28, v29, v30, v31);
        v37 = a2;
        v38 = 1;
LABEL_8:
        JSC::MacroAssemblerARM64::move64ToDouble(v37, v38, 0, v32, v33, v34, v35, v36);
        break;
      case 5:
        JSC::MacroAssemblerARM64::and64((uint64_t)a2, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
        JSC::MacroAssemblerARM64::or32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)6, 0, 0);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19858DF1CLL);
    }
  }
}

void JSC::MacroAssemblerARM64::or32(uint64_t a1, JSC::ARM64LogicalImmediate *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19858E0B0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, (uint64_t)a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a1 + 200);
  if (v17 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = 704774672;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, a2, v12, v13, v14, v15, v16);
}

_QWORD *WTF::Vector<JSC::FTL::ExitTimeObjectMaterialization *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>,JSC::FTL::ExitTimeObjectMaterialization *>>(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a4)
  {
    v6 = a2;
    v7 = (uint64_t)result;
    do
    {
      v8 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
      {
        result = WTF::Vector<JSC::FTL::ExitTimeObjectMaterialization *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ExitTimeObjectMaterialization * const&>(v7, (unint64_t)v6);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = *v6;
        *(_DWORD *)(v7 + 12) = v8 + 1;
      }
      while (++v6 != a3)
      {
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_9;
      }
      v6 = a3;
LABEL_9:
      ;
    }
    while (v6 != a4);
  }
  return result;
}

void JSC::FTL::compileStub(JSC::VM &,unsigned int,JSC::FTL::JITCode *,JSC::FTL::OSRExit &,JSC::CodeBlock *)::$_11::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[2];

  v9 = *(_DWORD **)a1;
  switch(*(_BYTE *)a2)
  {
    case 1:
      v25 = *(_DWORD **)a1;
      v24 = 10;
      goto LABEL_7;
    case 2:
      v10 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 64);
      v11 = HIDWORD(*(_QWORD *)(a2 + 1));
      if (*v10 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19858E360);
      }
      v12 = **(_QWORD **)(a1 + 16);
      v13 = &v10[4 * v11];
      v14 = v13 + 2;
      v15 = *((unsigned __int8 *)v13 + 16);
      switch(v15)
      {
        case 7:
          v16 = *v14 & 0x7F;
          v17 = 1;
          break;
        case 9:
          v16 = (*(_QWORD *)v14 << 32) | 0x1DLL;
          v17 = 2;
          break;
        case 11:
          v16 = *(_QWORD *)v14;
          v17 = 3;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19858E3D0);
      }
      v37[0] = v17;
      v37[1] = v16;
      JSC::FTL::Location::restoreInto((uint64_t)v37, (uint64_t)v9, v12, a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 3:
      v24 = *(_QWORD *)(a2 + 1);
      v25 = *(_DWORD **)a1;
LABEL_7:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v25, v24, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 4:
    case 5:
    case 6:
    case 7:
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)a1, (*(_QWORD *)(a2 + 1) << 35) | 0x1DLL, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
      v27 = **(_QWORD **)(a1 + 24);
      if (!v27)
        goto LABEL_34;
      v28 = *(_QWORD *)(a2 + 1);
      v29 = *(_DWORD *)(v27 - 8);
      v30 = (v28 + ~(v28 << 32)) ^ ((unint64_t)(v28 + ~(v28 << 32)) >> 22);
      v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v33 = v29 & ((v32 >> 31) ^ v32);
      v34 = *(_QWORD *)(v27 + 16 * v33);
      if (v34 == v28)
        goto LABEL_20;
      v36 = 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19858E2ACLL);
  }
  while (v34)
  {
    v33 = ((_DWORD)v33 + v36) & v29;
    v34 = *(_QWORD *)(v27 + 16 * v33);
    ++v36;
    if (v34 == v28)
    {
LABEL_20:
      v35 = *(_QWORD *)(v27 + 16 * v33 + 8);
      goto LABEL_21;
    }
  }
LABEL_34:
  v35 = 0;
LABEL_21:
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)a1, v35, 0, a4, a5, a6, a7, a8);
LABEL_9:
  v26 = 16;
  if (*(_BYTE *)a2 != 1)
  {
    switch(*(_BYTE *)a2)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x19858E388);
      case 2:
        v26 = *(_BYTE *)(a2 + 1);
        break;
      case 3:
      case 4:
      case 8:
        break;
      case 5:
        v26 = 1;
        break;
      case 6:
        v26 = 2;
        break;
      case 7:
        v26 = 4;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19858E3A8);
    }
  }
  JSC::FTL::reboxAccordingToFormat(v26, v9, v18, v19, v20, v21, v22, v23);
}

uint64_t WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::ExitTimeObjectMaterialization *,long long *>>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashMap<JSC::FTL::ExitTimeObjectMaterialization *,long long *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<long long *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  __n128 *v24;
  uint64_t v25;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    LODWORD(v12) = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    LODWORD(v12) = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if ((_DWORD)v12)
  {
    v12 = v12;
    v24 = (__n128 *)v11;
    do
    {
      if (v24->n128_u64[0] + 1 >= 2)
      {
        WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v24);
        if (v24 == (__n128 *)a3)
          v22 = v25;
      }
      ++v24;
      --v12;
    }
    while (v12);
    goto LABEL_14;
  }
  result = 0;
  if (v11)
  {
LABEL_14:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  int v33;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::expand(a2, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *a3;
  result = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3);
  v21 = result & v12;
  v22 = (_QWORD *)(v11 + 8 * (result & v12));
  v23 = *v22;
  if (*v22)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      if (v23 == v13)
      {
        v31 = 0;
        v30 = v11 + 8 * *(unsigned int *)(v11 - 4);
        goto LABEL_12;
      }
      if (v23 == -1)
        v32 = v22;
      v21 = (v21 + v33) & v12;
      v22 = (_QWORD *)(v11 + 8 * v21);
      v23 = *v22;
      ++v33;
    }
    while (*v22);
    if (v32)
    {
      *v32 = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = *a3;
      v22 = v32;
    }
  }
  *v22 = v13;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_11;
LABEL_16:
    result = (uint64_t)WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::expand(a2, (uint64_t)v22, v15, v16, v17, v18, v19, v20);
    v22 = (_QWORD *)result;
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_11;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_16;
LABEL_11:
  v30 = v26 + 8 * v29;
  v31 = 1;
LABEL_12:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  void **v24;
  _QWORD *v25;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    LODWORD(v12) = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    LODWORD(v12) = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if ((_DWORD)v12)
  {
    v12 = v12;
    v24 = (void **)v11;
    do
    {
      v15 = *v24;
      if ((unint64_t)*v24 + 1 >= 2)
      {
        v25 = WTF::HashTable<JSC::JSModuleEnvironment *,JSC::JSModuleEnvironment *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>>::reinsert(*a1, (uint64_t)v15);
        if (v24 == (void **)a3)
          v22 = v25;
      }
      ++v24;
      --v12;
    }
    while (v12);
    goto LABEL_14;
  }
  result = 0;
  if (v11)
  {
LABEL_14:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_QWORD *WTF::Vector<JSC::FTL::ExitTimeObjectMaterialization *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ExitTimeObjectMaterialization * const&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>>,JSC::FTL::ExitTimeObjectMaterialization *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2) & v4;
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if (v6 == a2)
    {
      return v3 + 8 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 8 * v5);
        ++v7;
        if (v6 == a2)
          return v3 + 8 * v5;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashSet<JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if (*result)
  {
    v8 = (_QWORD *)(*result + 8 * *(unsigned int *)(*result - 4));
    if (v8 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v8 = 0;
  }
  if (v8 != a2)
    return WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::remove(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t *WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::remove(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v8 = *result;
  if (*result)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *result;
  if (*result)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<JSC::FTL::ExitTimeObjectMaterialization *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>>::rehash(result, v12 >> 1, 0, a4, a5, a6, a7, a8);
  }
  return result;
}

void JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::FPRegisterID>(_DWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  if (*((_DWORD *)a1 + 18) <= 1u)
  {
    *((_DWORD *)a1 + 21) = a2;
    return;
  }
  v9 = *((_DWORD *)a1 + 19);
  v10 = *((_DWORD *)a1 + 12);
  v11 = (*((_DWORD *)a1 + 13) - v9);
  v12 = *((_DWORD *)a1 + 6);
  if (v12)
  {
    if (v10)
    {
      if (v12 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19858EABCLL);
      }
      if (v10 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19858EADCLL);
      }
      v13 = ((_BYTE)a1[4] & 0x7F) - 32;
      v14 = ((_BYTE)a1[7] & 0x7F) - 32;
    }
    else
    {
      if (v12 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19858EC1CLL);
      }
      v27 = a2;
      v28 = ((_BYTE)a1[4] & 0x7F) - 32;
      v14 = *((_BYTE *)a1 + 13);
      JSC::MacroAssemblerARM64::loadDouble((uint64_t)*a1, *((unsigned __int8 *)a1 + 8) | ((unint64_t)(*((_DWORD *)a1 + 13) - v9) << 32), v14, a4, a5, a6, a7, a8);
      v13 = v28;
      a2 = v27;
    }
    goto LABEL_8;
  }
  v47 = a2;
  v25 = (*((_DWORD *)a1 + 7) - v9);
  v26 = *((_BYTE *)a1 + 12);
  if (!v10)
  {
    v14 = *((_BYTE *)a1 + 13);
    v29 = v25 - v11;
    if ((int)v25 - (int)v11 < 0)
      v29 = v11 - v25;
    if ((int)v11 >= (int)v25)
      v30 = v25;
    else
      v30 = v11;
    if (v29 == 8)
    {
      if ((v30 & 7) == 0 && (((int)v30 >> 3) + 64) < 0x80)
      {
LABEL_31:
        v31 = *((_BYTE *)a1 + 8);
        if ((int)v25 >= (int)v11)
        {
          v32 = v11;
          v33 = v31;
          v34 = v14;
          v35 = v26;
        }
        else
        {
          v32 = v25;
          v33 = v31;
          v34 = v26;
          v35 = v14;
        }
        JSC::MacroAssemblerARM64::loadPair64(*a1, v33, v32, v34, v35, a6, a7, a8);
        goto LABEL_36;
      }
      if (*((_DWORD *)a1 + 4) == 1)
      {
        *((_DWORD *)a1 + 19) = v30 + v9;
        JSC::MacroAssemblerARM64::add64((uint64_t)*a1, v30, *((char *)a1 + 8), *((char *)a1 + 8), a5, a6, a7, a8);
        LODWORD(v25) = v25 - v30;
        LODWORD(v11) = v11 - v30;
        goto LABEL_31;
      }
    }
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)*a1, *((unsigned __int8 *)a1 + 8) | (unint64_t)(v25 << 32), v26, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)*a1, *((unsigned __int8 *)a1 + 8) | (unint64_t)(v11 << 32), v14, v36, v37, v38, v39, v40);
LABEL_36:
    v13 = v26;
    a2 = v47;
    goto LABEL_8;
  }
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)*a1, *((unsigned __int8 *)a1 + 8) | (unint64_t)(v25 << 32), v26, a4, a5, a6, a7, a8);
  if (*((_DWORD *)a1 + 12) == 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19858EC3CLL);
  }
  v14 = ((_BYTE)a1[7] & 0x7F) - 32;
  a2 = v47;
  v13 = v26;
LABEL_8:
  v15 = *((_DWORD *)a1 + 20);
  v16 = (*((_DWORD *)a1 + 21) - v15);
  v17 = (a2 - v15);
  v18 = v16 - v17;
  if ((int)v16 - (int)v17 < 0)
    v18 = v17 - v16;
  if ((int)v17 >= (int)v16)
    v19 = v16;
  else
    v19 = v17;
  if (v18 != 8)
    goto LABEL_14;
  v41 = v13;
  if ((v19 & 7) == 0 && (((int)v19 >> 3) + 64) < 0x80)
  {
LABEL_41:
    v42 = *((_BYTE *)a1 + 9);
    if ((int)v16 >= (int)v17)
    {
      v44 = v14;
      v45 = v41;
      v46 = v42;
      v43 = v17;
    }
    else
    {
      v43 = v16;
      v44 = v41;
      v45 = v14;
      v46 = v42;
    }
    JSC::MacroAssemblerARM64::storePair64(*a1, v44, v45, v46, v43, a6, a7, a8);
    goto LABEL_15;
  }
  if (*((_DWORD *)a1 + 4) == 1)
  {
    *((_DWORD *)a1 + 20) = v19 + v15;
    JSC::MacroAssemblerARM64::add64((uint64_t)*a1, v19, *((char *)a1 + 9), *((char *)a1 + 9), a5, a6, a7, a8);
    LODWORD(v16) = v16 - v19;
    LODWORD(v17) = v17 - v19;
    goto LABEL_41;
  }
LABEL_14:
  JSC::MacroAssemblerARM64::storeDouble((uint64_t)*a1, v13, *((unsigned __int8 *)a1 + 9) | (unint64_t)(v16 << 32), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::storeDouble((uint64_t)*a1, v14, *((unsigned __int8 *)a1 + 9) | (unint64_t)(v17 << 32), v20, v21, v22, v23, v24);
LABEL_15:
  *((_DWORD *)a1 + 18) = 0;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::FTL::ExitValue,JSC::DumpContext>>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, JSC::FTL::ExitValue **a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  char v41;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v39, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v39 = v24;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v39, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v39 = v25;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v39, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v39 = v31;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v39, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v39 = v37;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::FTL::ExitValue::dumpInContext(*a6, a1, a6[1]);
}

unint64_t JSC::tryAllocateCell<JSC::JSImmutableButterfly>(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  unint64_t v13;
  char *v14;

  v9 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v9 > 0x1F60 || (v10 = *((_QWORD *)a1 + (((unint64_t)a2 + 15) >> 4) + 1360)) == 0)
  {
    result = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 10792, a1, v9, 0, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v11 = *(unsigned int *)(v10 + 60);
  result = *(_QWORD *)(v10 + 24);
  if (result < *(_QWORD *)(v10 + 32))
  {
    *(_QWORD *)(v10 + 24) = result + v11;
    goto LABEL_5;
  }
  result = *(_QWORD *)(v10 + 40);
  if ((result & 1) != 0)
  {
    v14 = (char *)a1 + 192;
    JSC::sanitizeStackForVM(a1, a2, v9, a4, a5, a6, a7, a8);
    result = JSC::LocalAllocator::allocateSlowCase(v10, v14, v11, 0, 1);
LABEL_5:
    if (!result)
      return result;
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 32) = result + HIDWORD(v13);
  *(_QWORD *)(v10 + 40) = result + (int)v13;
  *(_QWORD *)(v10 + 24) = result + v11;
LABEL_6:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t JSC::JSImmutableButterfly::JSImmutableButterfly(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  if (a4 >= 0x10000001)
  {
    result = 60;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = a4;
    *(_DWORD *)(a1 + 12) = a4;
    if (a4)
    {
      if ((*(_BYTE *)(a1 + 4) & 0xE) == 8)
        bzero((void *)(a1 + 16), 8 * a4);
    }
    return a1;
  }
  return result;
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26432>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v10 = *((unsigned __int8 *)a1 + 8);
  switch(*((_BYTE *)a1 + 8))
  {
    case 0x83:
    case 0x87:
      result = a3 + 32;
      v12 = *a1;
      v13 = *((_BYTE *)a1 + 9);
      v14 = *((unsigned __int8 *)a1 + 10);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v12;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v13 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      if (v14)
        v16 = 192;
      else
        v16 = 128;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      result = a3 + 32;
      v17 = *a1;
      v18 = *((_BYTE *)a1 + 9);
      v19 = *((_WORD *)a1 + 2);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v17;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v18 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      v16 = v19 & 0x3F | 0x80;
LABEL_6:
      WORD2(v28) = v16;
      LOBYTE(v28) = v15;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 != *(_DWORD *)(a3 + 40))
        goto LABEL_7;
      goto LABEL_10;
    default:
      result = a3 + 32;
      v24 = *a1;
      v25 = *((_BYTE *)a1 + 9);
      LOBYTE(v28) = -1;
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v25 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      WORD2(v28) = 128;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 == *(_DWORD *)(a3 + 40))
      {
LABEL_10:
        result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = -1;
        v26 = (*(unsigned __int8 *)(v21 + 19) << 16) | 0xF0000;
        *(_WORD *)(v21 + 17) = 65;
        *(_BYTE *)(v21 + 19) = BYTE2(v26);
        *(_WORD *)(v21 + 20) &= 0xFC00u;
        v22 = *(_OWORD *)result;
        v23 = *(_QWORD *)(result + 16);
      }
      else
      {
LABEL_7:
        v21 = *(_QWORD *)result + 24 * v20;
        v22 = v27;
        v23 = v28;
      }
      *(_QWORD *)(v21 + 16) = v23;
      *(_OWORD *)v21 = v22;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

uint64_t WTF::dataLog<char [14],JSC::CodeBlock,char [5],JSC::CodeBlock,char [5],JSC::BytecodeIndex,char [2]>(uint64_t a1, uint64_t a2, JSC::BytecodeIndex *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "FTL OSR from ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", " to ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v8, "%s", " at ");
  JSC::BytecodeIndex::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [56],JSC::BytecodeIndex,char [15],JSC::BytecodeIndex,char [2]>(JSC::BytecodeIndex *a1, JSC::BytecodeIndex *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    OSR failed because we don't have an entrypoint for ");
  JSC::BytecodeIndex::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", "; ours is for ");
  JSC::BytecodeIndex::dump(a2, v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [22],JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Values at entry: ");
  JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a1, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [57],JSC::DFG::FlushFormat,char [2]>(char *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  unint64_t v5;
  const char *v6;
  WTF::PrintStream *v7;
  uint64_t result;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unknown flush format for argument during FTL osr entry: ");
  v5 = *a1;
  if (v5 >= 8)
  {
    result = 63;
    __break(0xC471u);
  }
  else
  {
    v6 = off_1E3590148[v5];
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", v6);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    WTF::PrintStream::printf(v4, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return result;
}

uint64_t WTF::dataLog<char [42],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Entry will succeed, going to address ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::OSRExitDescriptor::emitOSRExitLater(JSC::FTL::State &,JSC::ExitKind,JSC::DFG::NodeOrigin const&,JSC::B3::StackmapGenerationParams const&,unsigned int,unsigned int)::$_0>(JSC::FTL::OSRExitDescriptor::emitOSRExitLater(JSC::FTL::State &,JSC::ExitKind,JSC::DFG::NodeOrigin const&,JSC::B3::StackmapGenerationParams const&,unsigned int,unsigned int)::$_0 const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::OSRExitDescriptor::emitOSRExitLater(JSC::FTL::State &,JSC::ExitKind,JSC::DFG::NodeOrigin const&,JSC::B3::StackmapGenerationParams const&,unsigned int,unsigned int)::$_0>(JSC::FTL::OSRExitDescriptor::emitOSRExitLater(JSC::FTL::State &,JSC::ExitKind,JSC::DFG::NodeOrigin const&,JSC::B3::StackmapGenerationParams const&,unsigned int,unsigned int)::$_0 const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::OSRExitDescriptor::emitOSRExitLater(JSC::FTL::State &,JSC::ExitKind,JSC::DFG::NodeOrigin const&,JSC::B3::StackmapGenerationParams const&,unsigned int,unsigned int)::$_0>(JSC::FTL::OSRExitDescriptor::emitOSRExitLater(JSC::FTL::State &,JSC::ExitKind,JSC::DFG::NodeOrigin const&,JSC::B3::StackmapGenerationParams const&,unsigned int,unsigned int)::$_0 const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FTL::OSRExitHandle::emitExitThunk(*(unsigned int **)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<JSC::FTL::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(char **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)&v5[72 * *(unsigned int *)(result + 12)] > a3)
  {
    WTF::Vector<JSC::FTL::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x38E38E4)
  {
    v9 = &v5[72 * *(unsigned int *)(result + 12)];
    v10 = 72 * v8;
    v11 = WTF::fastMalloc((WTF *)(72 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,JSC::FTL::OSRExit>::move(v5, v9, v11, v12, v13, v14, v15, v16);
    if (v5)
    {
      if (*(char **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(char **)a1;
      v7 = (char *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12));
      v8 = 72 * v4;
      v9 = WTF::fastMalloc((WTF *)(72 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v9;
      WTF::VectorMover<false,JSC::FTL::OSRExit>::move(v6, v7, v9, v10, v11, v12, v13, v14);
      if (v6)
      {
        if (*(char **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v6, v15, v16, v17, v18, v19, v20, v21);
      }
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::OSRExitHandle::emitExitThunk(JSC::FTL::State &,JSC::CCallHelpers &)::$_0>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::OSRExitHandle::emitExitThunk(JSC::FTL::State &,JSC::CCallHelpers &)::$_0>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::OSRExitHandle::emitExitThunk(JSC::FTL::State &,JSC::CCallHelpers &)::$_0>::run(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v6
    || v5 + a2[1] < v6
    || (v7 = *(_QWORD *)(a1 + 16), v8 = *(_QWORD *)(v7 + 8), v9 = *(_DWORD *)(v7 + 4), *(_DWORD *)(v8 + 252) <= v9))
  {
    __break(0xC471u);
    JUMPOUT(0x19858FC9CLL);
  }
  *(_QWORD *)(*(_QWORD *)(v8 + 240) + 72 * v9 + 56) = v6;
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    v11 = *(_DWORD *)(a1 + 36);
    if (v11 < 4)
      v12 = 0;
    else
      v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
    v13 = (v11 - v12);
    v14 = a2[23];
    v15 = v13 + v14;
    if (v14 > v13 + v14 || v14 + a2[1] < v15)
    {
      __break(0xC471u);
      JUMPOUT(0x19858FCBCLL);
    }
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v25[0] = (uint64_t)v17;
    *v17 = v15;
    v25[1] = 0x100000001;
    JSC::Profiler::Compilation::addOSRExitSite(v10, v25);
    WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

void WTF::Vector<JSC::JSValue,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(_QWORD *)a1;
  if (v10 >= a2)
    goto LABEL_19;
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v14 = a2;
  else
    v14 = v13;
  v15 = *(unsigned int *)(a1 + 12);
  if (v14 < 9)
  {
    v16 = (_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 8;
    if (!(_DWORD)v15)
      goto LABEL_16;
    goto LABEL_13;
  }
  if (!(v14 >> 29))
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    if (!(_DWORD)v15)
    {
LABEL_16:
      if (a1 + 16 != v11 && v11)
      {
        if (v16 == (_QWORD *)v11)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
        v11 = *(_QWORD *)a1;
        if (!*(_QWORD *)a1)
          goto LABEL_22;
        goto LABEL_20;
      }
      v11 = (unint64_t)v16;
LABEL_19:
      if (!v11)
      {
LABEL_22:
        *(_DWORD *)(a1 + 12) = a2;
        return;
      }
LABEL_20:
      v20 = *(unsigned int *)(a1 + 12);
      if (v20 != a2)
        bzero((void *)(v11 + 8 * v20), (8 * a2 - 8 * v20) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_22;
    }
LABEL_13:
    v17 = 8 * v15;
    v18 = (uint64_t *)v11;
    do
    {
      v19 = *v18++;
      *v16++ = v19;
      v17 -= 8;
    }
    while (v17);
    v16 = *(_QWORD **)a1;
    goto LABEL_16;
  }
  __break(0xC471u);
}

uint64_t WTF::dataLog<char [41],int,char [26],int,char [3],int,char [12],int,char [2],int,char [6],JSC::CodeBlock *,char [2]>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t *a6)
{
  unint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v12 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v12 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v13 = WTF::s_file;
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v14, "%s", "Bounds Check Eimination error found @ D@");
  WTF::PrintStream::printf(v14, "%d", *a1);
  WTF::PrintStream::printf(v14, "%s", ": AssertInBounds(index D@");
  WTF::PrintStream::printf(v14, "%d", *a2);
  WTF::PrintStream::printf(v14, "%s", ": ");
  WTF::PrintStream::printf(v14, "%d", *a3);
  WTF::PrintStream::printf(v14, "%s", ", bounds D@");
  WTF::PrintStream::printf(v14, "%d", *a4);
  WTF::PrintStream::printf(v14, "%s", " ");
  WTF::PrintStream::printf(v14, "%d", *a5);
  WTF::PrintStream::printf(v14, "%s", ") in ");
  v15 = *a6;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
  if (v15)
    JSC::CodeBlock::dumpAssumingJITType(v15);
  else
    WTF::PrintStream::printf(v16, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
  WTF::PrintStream::printf(v14, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
}

uint64_t JSC::FTL::Output::newBlock(JSC::FTL::Output *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _BYTE v14[24];
  _QWORD *v15;
  uint64_t v16;

  v2 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 15), *((double *)this + 20));
  v3 = v2;
  v4 = *((_QWORD *)this + 18);
  if (v4)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 21, v4, v2);
  }
  else
  {
    v16 = v2;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    v5[3] = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v5;
    v15 = v5;
    v5[2] = v3;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 21, &v16, (uint64_t *)&v15, v6, v7, v8, v9, v10, (uint64_t)v14);
    v11 = v15;
    v12 = (_QWORD *)*((_QWORD *)this + 24);
    *v15 = (char *)this + 184;
    v11[1] = v12;
    *v12 = v11;
    *((_QWORD *)this + 24) = v11;
  }
  return v3;
}

uint64_t *WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  _BYTE v23[24];
  _QWORD *v24;
  uint64_t v25;

  v5 = *a1;
  if (!*a1)
  {
LABEL_9:
    v12 = 0;
    goto LABEL_4;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v5 + 16 * v10);
  if (v11 != a2)
  {
    v22 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v22) & v6;
      v11 = *(_QWORD *)(v5 + 16 * v10);
      ++v22;
      if (v11 == a2)
        goto LABEL_3;
    }
    goto LABEL_9;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
LABEL_4:
  v25 = a3;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v13[3] = a1[1];
  a1[1] = (uint64_t)v13;
  v24 = v13;
  v13[2] = a3;
  result = WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(a1, &v25, (uint64_t *)&v24, v14, v15, v16, v17, v18, (uint64_t)v23);
  v20 = v24;
  v21 = *(_QWORD **)(v12 + 8);
  *v24 = v12;
  v20[1] = v21;
  *v21 = v20;
  *(_QWORD *)(v12 + 8) = v20;
  return result;
}

_QWORD *JSC::FTL::Output::patchpoint(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1[16];
  v3 = a1[17];
  v5 = a1[15];
  v6 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 83;
  *(_DWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 20) = 4;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  result = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v6);
  *result = result + 2;
  result[1] = 3;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E357E700;
  *(_OWORD *)(v6 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v6 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v6 + 136) = v6 + 152;
  *(_QWORD *)(v6 + 144) = 1;
  *(_WORD *)(v6 + 168) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (a2)
      v8 = 3;
    else
      v8 = 0;
    *(_QWORD *)(v6 + 152) = 0;
    *(_BYTE *)(v6 + 160) = v8;
    *(_DWORD *)(v6 + 148) = 1;
  }
  v9 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v9 - 8);
    *(_DWORD *)(v5 + 92) = v9 - 1;
    v11 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v10 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v10 == *(_DWORD *)(v5 + 72))
    {
      v16 = v10 + (v10 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v10 + 1)
        v18 = v10 + 1;
      else
        v18 = v17;
      if (v18 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v19 = *(const void **)(v5 + 64);
      v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
      *(_DWORD *)(v5 + 72) = v18;
      *(_QWORD *)(v5 + 64) = v20;
      memcpy(v20, v19, 8 * v10);
      if (v19)
      {
        if (*(const void **)(v5 + 64) == v19)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v19, v21, v22, v23, v24, v25, v26, v27);
      }
      v28 = *(unsigned int *)(v5 + 76);
      v11 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v11 + 8 * v28) = 0;
      *(_DWORD *)(v5 + 76) = v28 + 1;
    }
    else
    {
      v11 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v11 + 8 * v10) = 0;
      *(_DWORD *)(v5 + 76) = v10 + 1;
    }
  }
  *(_QWORD *)(v11 + 8 * v10) = v6;
  *(_DWORD *)(v6 + 8) = v10;
  v29 = v6;
  v12 = (char **)(v3 + 8);
  v13 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(v3 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v29);
    v13 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v13) = *(_QWORD *)v15;
    v14 = v29;
  }
  else
  {
    *(_QWORD *)&(*v12)[8 * v13] = v6;
    v14 = v6;
  }
  *(_DWORD *)(v3 + 20) = v13 + 1;
  *(_QWORD *)(v14 + 32) = v3;
  return (_QWORD *)v6;
}

uint64_t JSC::FTL::Output::framePointer(JSC::FTL::Output *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *((_QWORD *)this + 16);
  v2 = *((_QWORD *)this + 17);
  v3 = *((_QWORD *)this + 15);
  result = WTF::fastMalloc((WTF *)0x30);
  v5 = result;
  *(_QWORD *)result = off_1E357F5F0;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 13;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(result + 32) = 0;
  v6 = *(unsigned int *)(v3 + 92);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v6 - 8);
    *(_DWORD *)(v3 + 92) = v6 - 1;
    v8 = *(_QWORD *)(v3 + 64);
  }
  else
  {
    v7 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v7 == *(_DWORD *)(v3 + 72))
    {
      v13 = v7 + (v7 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v7 + 1)
        v15 = v7 + 1;
      else
        v15 = v14;
      if (v15 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v16 = *(const void **)(v3 + 64);
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(v3 + 72) = v15;
      *(_QWORD *)(v3 + 64) = v17;
      memcpy(v17, v16, 8 * v7);
      if (v16)
      {
        if (*(const void **)(v3 + 64) == v16)
        {
          *(_QWORD *)(v3 + 64) = 0;
          *(_DWORD *)(v3 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
      }
      v25 = *(unsigned int *)(v3 + 76);
      v8 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v8 + 8 * v25) = 0;
      *(_DWORD *)(v3 + 76) = v25 + 1;
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v8 + 8 * v7) = 0;
      *(_DWORD *)(v3 + 76) = v7 + 1;
    }
  }
  *(_QWORD *)(v8 + 8 * v7) = v5;
  *(_DWORD *)(v5 + 8) = v7;
  v26 = v5;
  v9 = (char **)(v2 + 8);
  v10 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(v2 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v26);
    v10 = *(unsigned int *)(v2 + 20);
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v10) = *(_QWORD *)v12;
    v11 = v26;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v5;
    v11 = v5;
  }
  *(_DWORD *)(v2 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = v2;
  return v5;
}

uint64_t JSC::FTL::Output::lockedStackSlot(JSC::FTL::Output *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *((_QWORD *)this + 16);
  v2 = *((_QWORD *)this + 17);
  v4 = *((_QWORD *)this + 15);
  v5 = JSC::B3::Air::Code::addStackSlot(*(_QWORD *)(v4 + 160), a2, 0);
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 11;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = &unk_1E357E8A8;
  *(_QWORD *)(result + 40) = v5;
  v8 = *(unsigned int *)(v4 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v8 - 8);
    *(_DWORD *)(v4 + 92) = v8 - 1;
    v10 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v9 = *(unsigned int *)(v4 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v4 + 72))
    {
      v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v9 + 1)
        v17 = v9 + 1;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(const void **)(v4 + 64);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(v4 + 72) = v17;
      *(_QWORD *)(v4 + 64) = v19;
      memcpy(v19, v18, 8 * v9);
      if (v18)
      {
        if (*(const void **)(v4 + 64) == v18)
        {
          *(_QWORD *)(v4 + 64) = 0;
          *(_DWORD *)(v4 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      }
      v27 = *(unsigned int *)(v4 + 76);
      v10 = *(_QWORD *)(v4 + 64);
      *(_QWORD *)(v10 + 8 * v27) = 0;
      *(_DWORD *)(v4 + 76) = v27 + 1;
    }
    else
    {
      v10 = *(_QWORD *)(v4 + 64);
      *(_QWORD *)(v10 + 8 * v9) = 0;
      *(_DWORD *)(v4 + 76) = v9 + 1;
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = v7;
  *(_DWORD *)(v7 + 8) = v9;
  v28 = v7;
  v11 = (char **)(v2 + 8);
  v12 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v2 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v28);
    v12 = *(unsigned int *)(v2 + 20);
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v12) = *(_QWORD *)v14;
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v7;
    v13 = v7;
  }
  *(_DWORD *)(v2 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v2;
  return v7;
}

uint64_t JSC::FTL::Output::constInt32(JSC::FTL::Output *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 15);
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = a2;
  v8 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8 - 8);
    *(_DWORD *)(v5 + 92) = v8 - 1;
    v10 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v9 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 72))
    {
      v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v9 + 1)
        v17 = v9 + 1;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(const void **)(v5 + 64);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(v5 + 72) = v17;
      *(_QWORD *)(v5 + 64) = v19;
      memcpy(v19, v18, 8 * v9);
      if (v18)
      {
        if (*(const void **)(v5 + 64) == v18)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      }
      v27 = *(unsigned int *)(v5 + 76);
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v27) = 0;
      *(_DWORD *)(v5 + 76) = v27 + 1;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v9) = 0;
      *(_DWORD *)(v5 + 76) = v9 + 1;
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = v7;
  *(_DWORD *)(v7 + 8) = v9;
  v28 = v7;
  v11 = (char **)(v3 + 8);
  v12 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v3 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v28);
    v12 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v12) = *(_QWORD *)v14;
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v7;
    v13 = v7;
  }
  *(_DWORD *)(v3 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v3;
  return v7;
}

uint64_t JSC::FTL::Output::constInt64(JSC::FTL::Output *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 15);
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 4;
  *(_DWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DA88;
  *(_QWORD *)(result + 40) = a2;
  v8 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8 - 8);
    *(_DWORD *)(v5 + 92) = v8 - 1;
    v10 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v9 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 72))
    {
      v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v9 + 1)
        v17 = v9 + 1;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(const void **)(v5 + 64);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(v5 + 72) = v17;
      *(_QWORD *)(v5 + 64) = v19;
      memcpy(v19, v18, 8 * v9);
      if (v18)
      {
        if (*(const void **)(v5 + 64) == v18)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      }
      v27 = *(unsigned int *)(v5 + 76);
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v27) = 0;
      *(_DWORD *)(v5 + 76) = v27 + 1;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v9) = 0;
      *(_DWORD *)(v5 + 76) = v9 + 1;
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = v7;
  *(_DWORD *)(v7 + 8) = v9;
  v28 = v7;
  v11 = (char **)(v3 + 8);
  v12 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v3 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v28);
    v12 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v12) = *(_QWORD *)v14;
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v7;
    v13 = v7;
  }
  *(_DWORD *)(v3 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v3;
  return v7;
}

uint64_t JSC::FTL::Output::constDouble(JSC::FTL::Output *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 15);
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 5;
  *(_DWORD *)(result + 16) = 4;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DC30;
  *(double *)(result + 40) = a2;
  v8 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8 - 8);
    *(_DWORD *)(v5 + 92) = v8 - 1;
    v10 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v9 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 72))
    {
      v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v9 + 1)
        v17 = v9 + 1;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(const void **)(v5 + 64);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(v5 + 72) = v17;
      *(_QWORD *)(v5 + 64) = v19;
      memcpy(v19, v18, 8 * v9);
      if (v18)
      {
        if (*(const void **)(v5 + 64) == v18)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      }
      v27 = *(unsigned int *)(v5 + 76);
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v27) = 0;
      *(_DWORD *)(v5 + 76) = v27 + 1;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v9) = 0;
      *(_DWORD *)(v5 + 76) = v9 + 1;
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = v7;
  *(_DWORD *)(v7 + 8) = v9;
  v28 = v7;
  v11 = (char **)(v4 + 8);
  v12 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v4 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v28);
    v12 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v12) = *(_QWORD *)v14;
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v7;
    v13 = v7;
  }
  *(_DWORD *)(v4 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v4;
  return v7;
}

uint64_t JSC::FTL::Output::phi(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[16];
  v3 = a1[17];
  v5 = a1[15];
  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_QWORD *)result = off_1E357F5F0;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 153;
  *(_DWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  v8 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8 - 8);
    *(_DWORD *)(v5 + 92) = v8 - 1;
    v10 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v9 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 72))
    {
      v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v9 + 1)
        v17 = v9 + 1;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(const void **)(v5 + 64);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(v5 + 72) = v17;
      *(_QWORD *)(v5 + 64) = v19;
      memcpy(v19, v18, 8 * v9);
      if (v18)
      {
        if (*(const void **)(v5 + 64) == v18)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      }
      v27 = *(unsigned int *)(v5 + 76);
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v27) = 0;
      *(_DWORD *)(v5 + 76) = v27 + 1;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v9) = 0;
      *(_DWORD *)(v5 + 76) = v9 + 1;
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = v7;
  *(_DWORD *)(v7 + 8) = v9;
  v28 = v7;
  v11 = (char **)(v3 + 8);
  v12 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v3 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v28);
    v12 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v12) = *(_QWORD *)v14;
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v7;
    v13 = v7;
  }
  *(_DWORD *)(v3 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v3;
  return v7;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, uint64_t a4)
{
  uint64_t Space;

  Space = JSC::B3::Value::allocateSpace(153, 40);
  *(_QWORD *)Space = off_1E357F5F0;
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 153;
  *(_DWORD *)(Space + 16) = a3;
  *(_BYTE *)(Space + 20) = 0;
  *(_QWORD *)(Space + 24) = a4;
  *(_QWORD *)(Space + 32) = 0;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)Space);
  JSC::B3::BasicBlock::append(a1, (JSC::B3::Value *)Space);
  return Space;
}

uint64_t *JSC::FTL::Output::opaque(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 2;
  *(_DWORD *)(v6 + 16) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  v8 = *(unsigned int *)(v5 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8 - 8);
    *(_DWORD *)(v5 + 92) = v8 - 1;
    v10 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v9 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 72))
    {
      v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10)
        v16 = v15 + 1;
      else
        v16 = 16;
      if (v16 <= v9 + 1)
        v17 = v9 + 1;
      else
        v17 = v16;
      if (v17 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(const void **)(v5 + 64);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(v5 + 72) = v17;
      *(_QWORD *)(v5 + 64) = v19;
      memcpy(v19, v18, 8 * v9);
      if (v18)
      {
        if (*(const void **)(v5 + 64) == v18)
        {
          *(_QWORD *)(v5 + 64) = 0;
          *(_DWORD *)(v5 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
      }
      v27 = *(unsigned int *)(v5 + 76);
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v27) = 0;
      *(_DWORD *)(v5 + 76) = v27 + 1;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v10 + 8 * v9) = 0;
      *(_DWORD *)(v5 + 76) = v9 + 1;
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = v6;
  *(_DWORD *)(v6 + 8) = v9;
  v28 = v6;
  v11 = (char **)(v3 + 8);
  v12 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v3 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v28);
    v12 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v12) = *(_QWORD *)v14;
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v6;
    v13 = v6;
  }
  *(_DWORD *)(v3 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v3;
  return (uint64_t *)v6;
}

uint64_t JSC::FTL::Output::extract(JSC::FTL::Output *this, JSC::B3::Value *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *((_QWORD *)this + 16);
  v5 = *((_QWORD *)this + 17);
  v7 = *((_QWORD *)this + 15);
  v8 = *((_DWORD *)a2 + 4);
  if (v8 < 0)
  {
    if ((v8 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 44))
    {
      __break(0xC471u);
      JUMPOUT(0x1985911F0);
    }
    v31 = *(_QWORD *)(v7 + 32) + 16 * (v8 & 0x7FFFFFFF);
    if (*(_DWORD *)(v31 + 12) <= a3)
      goto LABEL_27;
    v8 = *(_DWORD *)(*(_QWORD *)v31 + 4 * a3);
  }
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 84;
  *(_DWORD *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 20) = 1;
  *(_QWORD *)(v9 + 24) = v6;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 48) = a2;
  *(_QWORD *)v9 = &unk_1E357E128;
  *(_DWORD *)(v9 + 40) = a3;
  v10 = *(unsigned int *)(v7 + 92);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * v10 - 8);
    *(_DWORD *)(v7 + 92) = v10 - 1;
    v12 = *(_QWORD *)(v7 + 64);
    goto LABEL_5;
  }
  v11 = *(unsigned int *)(v7 + 76);
  if ((_DWORD)v11 != *(_DWORD *)(v7 + 72))
  {
    v12 = *(_QWORD *)(v7 + 64);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *(_DWORD *)(v7 + 76) = v11 + 1;
    goto LABEL_5;
  }
  v18 = v11 + (v11 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v11 + 1)
    v20 = v11 + 1;
  else
    v20 = v19;
  if (v20 >> 29)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1985911E8);
  }
  v21 = *(const void **)(v7 + 64);
  v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
  *(_DWORD *)(v7 + 72) = v20;
  *(_QWORD *)(v7 + 64) = v22;
  memcpy(v22, v21, 8 * v11);
  if (v21)
  {
    if (*(const void **)(v7 + 64) == v21)
    {
      *(_QWORD *)(v7 + 64) = 0;
      *(_DWORD *)(v7 + 72) = 0;
    }
    WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
  }
  v30 = *(unsigned int *)(v7 + 76);
  v12 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v12 + 8 * v30) = 0;
  *(_DWORD *)(v7 + 76) = v30 + 1;
LABEL_5:
  *(_QWORD *)(v12 + 8 * v11) = v9;
  *(_DWORD *)(v9 + 8) = v11;
  v32 = v9;
  v13 = (char **)(v5 + 8);
  v14 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v5 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v32);
    v14 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v14) = *(_QWORD *)v17;
    v15 = v32;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v9;
    v15 = v9;
  }
  *(_DWORD *)(v5 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = v5;
  return v9;
}

uint64_t JSC::FTL::Output::add(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *((_QWORD *)this + 15));
  v7 = *((_QWORD *)this + 17);
  if (v6)
  {
    v10 = v6;
  }
  else
  {
    v8 = *((_QWORD *)this + 15);
    result = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
    v10 = result;
    v11 = *(unsigned int *)(v8 + 92);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v11 - 8);
      *(_DWORD *)(v8 + 92) = v11 - 1;
      v13 = *(_QWORD *)(v8 + 64);
    }
    else
    {
      v12 = *(unsigned int *)(v8 + 76);
      if ((_DWORD)v12 == *(_DWORD *)(v8 + 72))
      {
        v18 = v12 + (v12 >> 2);
        if (v18 >= 0x10)
          v19 = v18 + 1;
        else
          v19 = 16;
        if (v19 <= v12 + 1)
          v20 = v12 + 1;
        else
          v20 = v19;
        if (v20 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v21 = *(const void **)(v8 + 64);
        v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
        *(_DWORD *)(v8 + 72) = v20;
        *(_QWORD *)(v8 + 64) = v22;
        memcpy(v22, v21, 8 * v12);
        if (v21)
        {
          if (*(const void **)(v8 + 64) == v21)
          {
            *(_QWORD *)(v8 + 64) = 0;
            *(_DWORD *)(v8 + 72) = 0;
          }
          WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
        }
        v30 = *(unsigned int *)(v8 + 76);
        v13 = *(_QWORD *)(v8 + 64);
        *(_QWORD *)(v13 + 8 * v30) = 0;
        *(_DWORD *)(v8 + 76) = v30 + 1;
      }
      else
      {
        v13 = *(_QWORD *)(v8 + 64);
        *(_QWORD *)(v13 + 8 * v12) = 0;
        *(_DWORD *)(v8 + 76) = v12 + 1;
      }
    }
    *(_DWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v13 + 8 * v12) = v10;
  }
  v31 = v10;
  v14 = (char **)(v7 + 8);
  v15 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(v7 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v31);
    v15 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v15) = *(_QWORD *)v17;
    v16 = v31;
  }
  else
  {
    *(_QWORD *)&(*v14)[8 * v15] = v10;
    v16 = v10;
  }
  *(_DWORD *)(v7 + 20) = v15 + 1;
  *(_QWORD *)(v16 + 32) = v7;
  return v10;
}

JSC::B3::Value *JSC::FTL::Output::sub(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::mul(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(16, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

uint64_t JSC::FTL::Output::div(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 17), *((_QWORD *)this + 15), 17, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
}

JSC::B3::Value *JSC::FTL::Output::chillDiv(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((JSC::B3::BasicBlock **)this + 17), *((JSC::B3::Value **)this + 15), 273, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
}

uint64_t JSC::FTL::Output::mod(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 17), *((_QWORD *)this + 15), 19, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
}

JSC::B3::Value *JSC::FTL::Output::chillMod(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((JSC::B3::BasicBlock **)this + 17), *((JSC::B3::Value **)this + 15), 275, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
}

uint64_t JSC::FTL::Output::neg(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 21;
  *(_DWORD *)(v6 + 16) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

JSC::B3::Value *JSC::FTL::Output::doubleAdd(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::doubleDiv(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(17, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::bitAnd(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::bitOr(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(23, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::bitXor(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(24, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::shl(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v5 = JSC::FTL::Output::castToInt32(this, a3);
  v6 = (*(uint64_t (**)(JSC::B3::Value *, _QWORD, JSC::B3::Value *))(*(_QWORD *)a2 + 168))(a2, *((_QWORD *)this + 15), v5);
  v7 = *((_QWORD *)this + 17);
  if (v6)
  {
    v9 = (JSC::B3::Value *)v6;
  }
  else
  {
    v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(25, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)v5);
    JSC::B3::Procedure::addValueImpl(v8, v9);
  }
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::castToInt32(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  if (*((_DWORD *)a2 + 4) == 1)
    return a2;
  if ((*((_WORD *)a2 + 6) & 0xFFF) == 4)
  {
    v13 = *((_QWORD *)a2 + 5);
    v15 = *((_QWORD *)this + 16);
    v14 = *((_QWORD *)this + 17);
    v16 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v7 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v7 + 8) = -1;
    *(_WORD *)(v7 + 12) = 3;
    *(_DWORD *)(v7 + 16) = 1;
    *(_BYTE *)(v7 + 20) = 0;
    *(_QWORD *)(v7 + 24) = v15;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)v7 = off_1E357D8E0;
    *(_DWORD *)(v7 + 40) = v13;
    JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v7);
    v22 = v7;
    v17 = (char **)(v14 + 8);
    v18 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 16))
    {
      v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v22);
      v18 = *(unsigned int *)(v14 + 20);
      *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v18) = *(_QWORD *)v21;
      v19 = v22;
    }
    else
    {
      *(_QWORD *)&(*v17)[8 * v18] = v7;
      v19 = v7;
    }
    *(_DWORD *)(v14 + 20) = v18 + 1;
    *(_QWORD *)(v19 + 32) = v14;
  }
  else
  {
    v4 = *((_QWORD *)this + 16);
    v3 = *((_QWORD *)this + 17);
    v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v6 = WTF::fastMalloc((WTF *)0x30);
    v7 = v6;
    *(_QWORD *)v6 = off_1E357F5F0;
    *(_DWORD *)(v6 + 8) = -1;
    *(_WORD *)(v6 + 12) = 44;
    if (*((_DWORD *)a2 + 4) == 2)
      v8 = 1;
    else
      v8 = 3;
    *(_DWORD *)(v6 + 16) = v8;
    *(_BYTE *)(v6 + 20) = 1;
    *(_QWORD *)(v6 + 24) = v4;
    *(_QWORD *)(v6 + 32) = 0;
    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
    JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v7);
    v22 = v7;
    v9 = (char **)(v3 + 8);
    v10 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v10 == *(_DWORD *)(v3 + 16))
    {
      v20 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v22);
      v10 = *(unsigned int *)(v3 + 20);
      *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v10) = *(_QWORD *)v20;
      v11 = v22;
    }
    else
    {
      *(_QWORD *)&(*v9)[8 * v10] = v7;
      v11 = v7;
    }
    *(_DWORD *)(v3 + 20) = v10 + 1;
    *(_QWORD *)(v11 + 32) = v3;
  }
  return (JSC::B3::Value *)v7;
}

JSC::B3::Value *JSC::FTL::Output::aShr(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v5 = JSC::FTL::Output::castToInt32(this, a3);
  v6 = (JSC::B3::Value *)(*(uint64_t (**)(JSC::B3::Value *, _QWORD, JSC::B3::Value *))(*(_QWORD *)a2 + 176))(a2, *((_QWORD *)this + 15), v5);
  v7 = *((_QWORD *)this + 17);
  if (v6)
  {
    v9 = v6;
    JSC::B3::BasicBlock::append(*((JSC::B3::BasicBlock **)this + 17), v6);
  }
  else
  {
    v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(26, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)v5);
    JSC::B3::Procedure::addValueImpl(v8, v9);
    v15 = v9;
    v10 = (char **)(v7 + 8);
    v11 = *(unsigned int *)(v7 + 20);
    if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
    {
      v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
      v11 = *(unsigned int *)(v7 + 20);
      *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
      v12 = v15;
    }
    else
    {
      *(_QWORD *)&(*v10)[8 * v11] = v9;
      v12 = v9;
    }
    *(_DWORD *)(v7 + 20) = v11 + 1;
    *((_QWORD *)v12 + 4) = v7;
  }
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::lShr(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v5 = JSC::FTL::Output::castToInt32(this, a3);
  v6 = (*(uint64_t (**)(JSC::B3::Value *, _QWORD, JSC::B3::Value *))(*(_QWORD *)a2 + 184))(a2, *((_QWORD *)this + 15), v5);
  v7 = *((_QWORD *)this + 17);
  if (v6)
  {
    v9 = (JSC::B3::Value *)v6;
  }
  else
  {
    v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(27, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)v5);
    JSC::B3::Procedure::addValueImpl(v8, v9);
  }
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::bitNot(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = JSC::B3::Procedure::addIntConstant(v5, v3, *((_DWORD *)a2 + 4), -1);
  v7 = v6;
  v17 = v6;
  v8 = (_QWORD *)(v4 + 8);
  v9 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v4 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 8), v9 + 1, (unint64_t)&v17);
    v9 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v9) = *(_QWORD *)v15;
    v10 = v17;
  }
  else
  {
    *(_QWORD *)(*v8 + 8 * v9) = v6;
    v10 = v6;
  }
  *(_DWORD *)(v4 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v4;
  v11 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(24, v3, (uint64_t)a2, v7);
  JSC::B3::Procedure::addValueImpl(v5, v11);
  v17 = (uint64_t)v11;
  v12 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v4 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 8), v12 + 1, (unint64_t)&v17);
    v12 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v12) = *(_QWORD *)v16;
    v13 = (JSC::B3::Value *)v17;
  }
  else
  {
    *(_QWORD *)(*v8 + 8 * v12) = v11;
    v13 = v11;
  }
  *(_DWORD *)(v4 + 20) = v12 + 1;
  *((_QWORD *)v13 + 4) = v4;
  return v11;
}

JSC::B3::Value *JSC::FTL::Output::logicalNot(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;
  char **v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  char *v9;
  JSC::B3::Value *v10;

  v2 = *((_QWORD *)this + 17);
  v3 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v4 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 16), (uint64_t)a2, *((_QWORD *)this + 2));
  JSC::B3::Procedure::addValueImpl(v3, v4);
  v10 = v4;
  v5 = (char **)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6 == *(_DWORD *)(v2 + 16))
  {
    v9 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v10);
    v6 = *(unsigned int *)(v2 + 20);
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6) = *(_QWORD *)v9;
    v7 = v10;
  }
  else
  {
    *(_QWORD *)&(*v5)[8 * v6] = v4;
    v7 = v4;
  }
  *(_DWORD *)(v2 + 20) = v6 + 1;
  *((_QWORD *)v7 + 4) = v2;
  return v4;
}

uint64_t JSC::FTL::Output::ctlz32(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 30;
  *(_DWORD *)(v6 + 16) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

JSC::B3::Value *JSC::FTL::Output::doubleAbs(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 17), *((JSC::B3::Value **)this + 15), 31, *((_QWORD *)this + 16), (uint64_t)a2);
}

JSC::B3::Value *JSC::FTL::Output::doubleCeil(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 17), *((JSC::B3::Value **)this + 15), 32, *((_QWORD *)this + 16), (uint64_t)a2);
}

JSC::B3::Value *JSC::FTL::Output::doubleFloor(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  return JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(*((_QWORD *)this + 17), *((JSC::B3::Value **)this + 15), 33, *((_QWORD *)this + 16), (uint64_t)a2);
}

__int128 *JSC::FTL::Output::doubleTrunc(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  __int128 *v3;
  uint64_t v5;
  char v6;

  v3 = (__int128 *)JSC::FTL::Output::patchpoint(this, 4);
  v5 = 0;
  v6 = 3;
  JSC::B3::StackmapValue::append(v3, (uint64_t)a2, (unint64_t)&v5);
  JSC::B3::StackmapValue::setGenerator<JSC::FTL::Output::doubleTrunc(JSC::B3::Value *)::$_0>((uint64_t)v3);
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 16) = 0;
  return v3;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::Output::doubleTrunc(JSC::B3::Value *)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35901C0;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

JSC::B3::Value *JSC::FTL::Output::callWithoutSideEffects<double (*)(double)>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  v5 = a1[16];
  v4 = (JSC::B3::BasicBlock *)a1[17];
  v6 = (JSC::B3::Value *)a1[15];
  v10 = 0;
  v9 = 0uLL;
  v7 = JSC::FTL::Output::constIntPtr<void>(a1, a2);
  return JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *>(v4, v6, 4, v5, &v9, v7, a3);
}

JSC::B3::Value *JSC::FTL::Output::doubleUnary(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  double (*v5)();

  v5 = JSC::DFG::arithUnaryFunction(a2);
  return JSC::FTL::Output::callWithoutSideEffects<double (*)(double)>(a1, (uint64_t)v5, a3);
}

JSC::B3::Value *JSC::FTL::Output::callWithoutSideEffects<double (*)(double,double),JSC::B3::Value *>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  JSC::B3::BasicBlock *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  v6 = a1[16];
  v5 = (JSC::B3::BasicBlock *)a1[17];
  v7 = (JSC::B3::Value *)a1[15];
  v11 = 0;
  v10 = 0uLL;
  v8 = JSC::FTL::Output::constIntPtr<void>(a1, (uint64_t)stdPowDouble);
  return JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(v5, v7, 4, v6, &v10, v8, a2, a3);
}

uint64_t JSC::FTL::Output::doublePowi(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;

  *((_QWORD *)this + 17) = JSC::B3::powDoubleInt32(*((JSC::B3::Procedure **)this + 15), *((JSC::B3::BasicBlock **)this + 17), *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  return v3;
}

uint64_t JSC::FTL::Output::doubleSqrt(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 34;
  *(_DWORD *)(v6 + 16) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

uint64_t JSC::FTL::Output::doubleToInt(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  _QWORD *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char *v17;
  uint64_t v18;
  char v19;

  v3 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 83;
  *(_DWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 20) = 4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v6);
  *v7 = v7 + 2;
  v7[1] = 3;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 112) = xmmword_1991243D0;
  *(_QWORD *)v6 = off_1E357E700;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v6 + 136) = v6 + 152;
  *(_WORD *)(v6 + 168) = 0;
  *(_BYTE *)(v6 + 160) = 3;
  *(_QWORD *)(v6 + 144) = 0x100000001;
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v18 = v6;
  v8 = (char **)(v4 + 8);
  v9 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v4 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v18);
    v9 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v9) = *(_QWORD *)v17;
    v10 = v18;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v6;
    v10 = v6;
  }
  *(_DWORD *)(v4 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v4;
  v18 = 0;
  v19 = 3;
  JSC::B3::StackmapValue::append((__int128 *)v6, (uint64_t)a2, (unint64_t)&v18);
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E35901E8;
  v12 = *(unsigned int **)(v6 + 56);
  *(_QWORD *)(v6 + 56) = v11;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  return v6;
}

__int128 *JSC::FTL::Output::doubleToInt64(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  __int128 *v3;
  uint64_t v5;
  char v6;

  v3 = (__int128 *)JSC::FTL::Output::patchpoint(this, 2);
  v5 = 0;
  v6 = 3;
  JSC::B3::StackmapValue::append(v3, (uint64_t)a2, (unint64_t)&v5);
  JSC::B3::StackmapValue::setGenerator<JSC::FTL::Output::doubleToInt64(JSC::B3::Value *)::$_0>((uint64_t)v3);
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 16) = 0;
  return v3;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::Output::doubleToInt64(JSC::B3::Value *)::$_0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3590210;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::Output::signExt32To64(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 42;
  *(_DWORD *)(v6 + 16) = 2;
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

uint64_t JSC::FTL::Output::zeroExt(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a2 + 16) == a3)
    return a2;
  v5 = a1[16];
  v4 = a1[17];
  v6 = (JSC::B3::Value *)a1[15];
  if ((*(_WORD *)(a2 + 12) & 0xFFF) == 3)
  {
    v13 = *(unsigned int *)(a2 + 40);
    v7 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v7 + 8) = -1;
    *(_WORD *)(v7 + 12) = 4;
    *(_DWORD *)(v7 + 16) = 2;
    *(_BYTE *)(v7 + 20) = 0;
    *(_QWORD *)(v7 + 24) = v5;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)v7 = off_1E357DA88;
    *(_QWORD *)(v7 + 40) = v13;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v7 = off_1E357F5F0;
    *(_DWORD *)(v7 + 8) = -1;
    *(_WORD *)(v7 + 12) = 43;
    *(_DWORD *)(v7 + 16) = 2;
    *(_BYTE *)(v7 + 20) = 1;
    *(_QWORD *)(v7 + 24) = v5;
    *(_QWORD *)(v7 + 32) = 0;
    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v7, 1, a2);
  }
  JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v7);
  v14 = v7;
  v8 = (char **)(v4 + 8);
  v9 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v4 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v14);
    v9 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v14;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v7;
    v10 = v7;
  }
  *(_DWORD *)(v4 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v4;
  return v7;
}

uint64_t JSC::FTL::Output::intToDouble(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 47;
  *(_DWORD *)(v6 + 16) = 4;
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

uint64_t JSC::FTL::Output::unsignedToDouble(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  v3 = JSC::FTL::Output::zeroExt(this, (uint64_t)a2, 2);
  v5 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = off_1E357F5F0;
  *(_DWORD *)(v7 + 8) = -1;
  *(_WORD *)(v7 + 12) = 47;
  *(_DWORD *)(v7 + 16) = 4;
  *(_BYTE *)(v7 + 20) = 1;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v7, 1, v3);
  JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v7);
  v13 = v7;
  v8 = (char **)(v4 + 8);
  v9 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v4 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v13);
    v9 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v13;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v7;
    v10 = v7;
  }
  *(_DWORD *)(v4 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v4;
  return v7;
}

uint64_t JSC::FTL::Output::doubleToFloat(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 50;
  *(_DWORD *)(v6 + 16) = 3;
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

uint64_t JSC::FTL::Output::floatToDouble(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 49;
  *(_DWORD *)(v6 + 16) = 4;
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

uint64_t JSC::FTL::Output::load(uint64_t a1, const JSC::FTL::AbstractHeap *a2, uint64_t a3, int a4)
{
  JSC::B3::BasicBlock *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(JSC::B3::BasicBlock **)(a1 + 136);
  v10 = *(JSC::B3::Value **)(a1 + 120);
  v11 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 67;
  *(_DWORD *)(v11 + 16) = a4;
  *(_BYTE *)(v11 + 20) = 1;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 64) = a3;
  *(_QWORD *)v11 = off_1E357E4C8;
  *(_DWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v11);
  JSC::B3::BasicBlock::append(v8, (JSC::B3::Value *)v11);
  JSC::FTL::AbstractHeapRepository::decorateMemory(*(__int128 **)(a1 + 152), a2, (JSC::B3::Value *)v11);
  return v11;
}

JSC::B3::Value *JSC::FTL::Output::load8SignExt32(uint64_t a1, const JSC::FTL::AbstractHeap *a2, uint64_t a3)
{
  JSC::B3::Value *v5;

  v5 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *>(*(_QWORD *)(a1 + 136), *(JSC::B3::Value **)(a1 + 120), 64, 1, *(_QWORD *)(a1 + 128), a3);
  JSC::FTL::AbstractHeapRepository::decorateMemory(*(__int128 **)(a1 + 152), a2, v5);
  return v5;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *>(uint64_t a1, JSC::B3::Value *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  __int16 v11;
  JSC::B3::Value *Space;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  char *v18;
  JSC::B3::Value *v19;

  v11 = a3;
  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a3, 64);
  v13 = JSC::B3::Value::Value<>((uint64_t)Space, 0, v11, a4, 1, a5, a6);
  *(_QWORD *)v13 = off_1E357E4C8;
  *(_DWORD *)(v13 + 40) = 0;
  *(_OWORD *)(v13 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(a2, Space);
  v19 = Space;
  v14 = (char **)(a1 + 8);
  v15 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 16))
  {
    v18 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v19);
    v15 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)v18;
    v16 = v19;
  }
  else
  {
    *(_QWORD *)&(*v14)[8 * v15] = Space;
    v16 = Space;
  }
  *(_DWORD *)(a1 + 20) = v15 + 1;
  *((_QWORD *)v16 + 4) = a1;
  return Space;
}

uint64_t JSC::FTL::Output::load8ZeroExt32(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  char *v21;
  __int128 *v22;
  __int128 v23;

  v7 = a1[16];
  v6 = a1[17];
  v8 = (JSC::B3::Value *)a1[15];
  v9 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 63;
  *(_DWORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 20) = 1;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 64) = a3;
  *(_QWORD *)v9 = off_1E357E4C8;
  *(_DWORD *)(v9 + 40) = 0;
  *(_OWORD *)(v9 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v9);
  *(_QWORD *)&v23 = v9;
  v10 = (char **)(v6 + 8);
  v11 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v6 + 16))
  {
    v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v23);
    v11 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v11) = *(_QWORD *)v21;
    v12 = v23;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v6 + 20) = v11 + 1;
  *(_QWORD *)(v12 + 32) = v6;
  v13 = a1[19];
  v14 = v13 + 27504;
  v15 = (uint64_t *)(v13 + 27496);
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = v9;
  v17 = *(_DWORD *)(v13 + 27504);
  v16 = *(unsigned int *)(v13 + 27508);
  if ((_DWORD)v16 == v17)
  {
    v16 = *(unsigned int *)(v14 + 4);
    v18 = *v15;
    v19 = *v22;
  }
  else
  {
    v18 = *v15;
    v19 = v23;
  }
  *(_OWORD *)(v18 + 16 * v16) = v19;
  ++*(_DWORD *)(v14 + 4);
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::load16SignExt32(uint64_t a1, const JSC::FTL::AbstractHeap *a2, uint64_t a3)
{
  JSC::B3::Value *v5;

  v5 = JSC::B3::BasicBlock::appendNew<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Value *>(*(_QWORD *)(a1 + 136), *(JSC::B3::Value **)(a1 + 120), 66, 1, *(_QWORD *)(a1 + 128), a3);
  JSC::FTL::AbstractHeapRepository::decorateMemory(*(__int128 **)(a1 + 152), a2, v5);
  return v5;
}

uint64_t JSC::FTL::Output::load16ZeroExt32(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  char *v21;
  __int128 *v22;
  __int128 v23;

  v7 = a1[16];
  v6 = a1[17];
  v8 = (JSC::B3::Value *)a1[15];
  v9 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 65;
  *(_DWORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 20) = 1;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 64) = a3;
  *(_QWORD *)v9 = off_1E357E4C8;
  *(_DWORD *)(v9 + 40) = 0;
  *(_OWORD *)(v9 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v9);
  *(_QWORD *)&v23 = v9;
  v10 = (char **)(v6 + 8);
  v11 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v6 + 16))
  {
    v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v23);
    v11 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v11) = *(_QWORD *)v21;
    v12 = v23;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v6 + 20) = v11 + 1;
  *(_QWORD *)(v12 + 32) = v6;
  v13 = a1[19];
  v14 = v13 + 27504;
  v15 = (uint64_t *)(v13 + 27496);
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = v9;
  v17 = *(_DWORD *)(v13 + 27504);
  v16 = *(unsigned int *)(v13 + 27508);
  if ((_DWORD)v16 == v17)
  {
    v16 = *(unsigned int *)(v14 + 4);
    v18 = *v15;
    v19 = *v22;
  }
  else
  {
    v18 = *v15;
    v19 = v23;
  }
  *(_OWORD *)(v18 + 16 * v16) = v19;
  ++*(_DWORD *)(v14 + 4);
  return v9;
}

uint64_t JSC::FTL::Output::store(uint64_t a1, uint64_t a2, const JSC::FTL::AbstractHeap *a3, uint64_t a4)
{
  JSC::B3::BasicBlock *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(JSC::B3::BasicBlock **)(a1 + 136);
  v10 = *(JSC::B3::Value **)(a1 + 120);
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v11 = off_1E357F5F0;
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 70;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = 2;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11, 2, a2, a4);
  *(_QWORD *)v11 = off_1E357E4C8;
  *(_DWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v11);
  JSC::B3::BasicBlock::append(v8, (JSC::B3::Value *)v11);
  JSC::FTL::AbstractHeapRepository::decorateMemory(*(__int128 **)(a1 + 152), a3, (JSC::B3::Value *)v11);
  return v11;
}

uint64_t JSC::FTL::Output::fence(JSC::FTL::Output *this, const JSC::FTL::AbstractHeap *a2, const JSC::FTL::AbstractHeap *a3)
{
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  __int128 v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  char *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;

  v7 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = -1;
  *(_WORD *)(v9 + 12) = 81;
  *(_DWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 20) = 0;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)v9 = off_1E357DF80;
  *(_QWORD *)&v10 = 0xFFFFFFFF00000000;
  *((_QWORD *)&v10 + 1) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v9 + 40) = v10;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)v9);
  *(_QWORD *)&v32 = v9;
  v11 = (char **)(v6 + 8);
  v12 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v6 + 16))
  {
    v29 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v32);
    v12 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v12) = *(_QWORD *)v29;
    v13 = v32;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v9;
    v13 = v9;
  }
  *(_DWORD *)(v6 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v6;
  v14 = *((_QWORD *)this + 19);
  v15 = v14 + 27584;
  v16 = (uint64_t *)(v14 + 27576);
  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = v9;
  v18 = *(_DWORD *)(v14 + 27584);
  v17 = *(unsigned int *)(v14 + 27588);
  if ((_DWORD)v17 == v18)
  {
    v17 = *(unsigned int *)(v15 + 4);
    v19 = *v16;
    v20 = *v30;
  }
  else
  {
    v19 = *v16;
    v20 = v32;
  }
  *(_OWORD *)(v19 + 16 * v17) = v20;
  ++*(_DWORD *)(v15 + 4);
  v21 = *((_QWORD *)this + 19);
  v22 = v21 + 27600;
  v23 = (uint64_t *)(v21 + 27592);
  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = v9;
  v25 = *(_DWORD *)(v21 + 27600);
  v24 = *(unsigned int *)(v21 + 27604);
  if ((_DWORD)v24 == v25)
  {
    v24 = *(unsigned int *)(v22 + 4);
    v26 = *v23;
    v27 = *v31;
  }
  else
  {
    v26 = *v23;
    v27 = v32;
  }
  *(_OWORD *)(v26 + 16 * v24) = v27;
  ++*(_DWORD *)(v22 + 4);
  return v9;
}

uint64_t JSC::FTL::Output::store32As8(uint64_t a1, uint64_t a2, const JSC::FTL::AbstractHeap *a3, uint64_t a4)
{
  JSC::B3::BasicBlock *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(JSC::B3::BasicBlock **)(a1 + 136);
  v10 = *(JSC::B3::Value **)(a1 + 120);
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v11 = off_1E357F5F0;
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 68;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = 2;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11, 2, a2, a4);
  *(_QWORD *)v11 = off_1E357E4C8;
  *(_DWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v11);
  JSC::B3::BasicBlock::append(v8, (JSC::B3::Value *)v11);
  JSC::FTL::AbstractHeapRepository::decorateMemory(*(__int128 **)(a1 + 152), a3, (JSC::B3::Value *)v11);
  return v11;
}

uint64_t JSC::FTL::Output::store32As16(uint64_t a1, uint64_t a2, const JSC::FTL::AbstractHeap *a3, uint64_t a4)
{
  JSC::B3::BasicBlock *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(JSC::B3::BasicBlock **)(a1 + 136);
  v10 = *(JSC::B3::Value **)(a1 + 120);
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v11 = off_1E357F5F0;
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 69;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = 2;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11, 2, a2, a4);
  *(_QWORD *)v11 = off_1E357E4C8;
  *(_DWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v11);
  JSC::B3::BasicBlock::append(v8, (JSC::B3::Value *)v11);
  JSC::FTL::AbstractHeapRepository::decorateMemory(*(__int128 **)(a1 + 152), a3, (JSC::B3::Value *)v11);
  return v11;
}

JSC::B3::Value *JSC::FTL::Output::baseIndex(JSC::FTL::Output *this, uint64_t a2, JSC::B3::Value *a3, int a4, uint64_t a5)
{
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  char **v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  char **v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;

  if ((a4 - 3) >= 2)
  {
    if (a4 == 2)
    {
      v43 = (JSC::B3::Value *)*((_QWORD *)this + 7);
    }
    else
    {
      if (a4 != 1)
      {
        if (a4)
          v13 = 0;
        else
          v13 = a3;
        goto LABEL_6;
      }
      v43 = (JSC::B3::Value *)*((_QWORD *)this + 6);
    }
    v13 = JSC::FTL::Output::shl(this, a3, v43);
    goto LABEL_6;
  }
  v9 = JSC::FTL::Output::castToInt32(this, *((JSC::B3::Value **)this + 8));
  v10 = (JSC::B3::Value *)(*(uint64_t (**)(JSC::B3::Value *, _QWORD, JSC::B3::Value *))(*(_QWORD *)a3 + 168))(a3, *((_QWORD *)this + 15), v9);
  v11 = *((_QWORD *)this + 17);
  if (v10)
  {
    v13 = v10;
    JSC::B3::BasicBlock::append(*((JSC::B3::BasicBlock **)this + 17), v10);
  }
  else
  {
    v12 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v13 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(25, *((_QWORD *)this + 16), (uint64_t)a3, (uint64_t)v9);
    JSC::B3::Procedure::addValueImpl(v12, v13);
    v44 = (uint64_t)v13;
    v14 = (char **)(v11 + 8);
    v15 = *(unsigned int *)(v11 + 20);
    if ((_DWORD)v15 == *(_DWORD *)(v11 + 16))
    {
      v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v44);
      v15 = *(unsigned int *)(v11 + 20);
      *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v15) = *(_QWORD *)v39;
      v16 = (JSC::B3::Value *)v44;
    }
    else
    {
      *(_QWORD *)&(*v14)[8 * v15] = v13;
      v16 = v13;
    }
    *(_DWORD *)(v11 + 20) = v15 + 1;
    *((_QWORD *)v16 + 4) = v11;
  }
LABEL_6:
  if (a5)
  {
    v26 = *((_QWORD *)this + 16);
    v25 = *((_QWORD *)this + 17);
    v27 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v28 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v28 + 8) = -1;
    *(_WORD *)(v28 + 12) = 4;
    *(_DWORD *)(v28 + 16) = 2;
    *(_BYTE *)(v28 + 20) = 0;
    *(_QWORD *)(v28 + 24) = v26;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)v28 = off_1E357DA88;
    *(_QWORD *)(v28 + 40) = a5;
    JSC::B3::Procedure::addValueImpl(v27, (JSC::B3::Value *)v28);
    v44 = v28;
    v29 = (char **)(v25 + 8);
    v30 = *(unsigned int *)(v25 + 20);
    if ((_DWORD)v30 == *(_DWORD *)(v25 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v44);
      v30 = *(unsigned int *)(v25 + 20);
      *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v30) = *(_QWORD *)v40;
      v31 = v44;
    }
    else
    {
      *(_QWORD *)&(*v29)[8 * v30] = v28;
      v31 = v28;
    }
    *(_DWORD *)(v25 + 20) = v30 + 1;
    *(_QWORD *)(v31 + 32) = v25;
    v32 = (JSC::B3::Value *)(*(uint64_t (**)(JSC::B3::Value *, _QWORD, uint64_t))(*(_QWORD *)v13 + 40))(v13, *((_QWORD *)this + 15), v28);
    v33 = *((_QWORD *)this + 17);
    if (v32)
    {
      v42 = v32;
      JSC::B3::BasicBlock::append(*((JSC::B3::BasicBlock **)this + 17), v32);
      v13 = v42;
    }
    else
    {
      v34 = (JSC::B3::Value *)*((_QWORD *)this + 15);
      v13 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *((_QWORD *)this + 16), (uint64_t)v13, v28);
      JSC::B3::Procedure::addValueImpl(v34, v13);
      v44 = (uint64_t)v13;
      v35 = (char **)(v33 + 8);
      v36 = *(unsigned int *)(v33 + 20);
      if ((_DWORD)v36 == *(_DWORD *)(v33 + 16))
      {
        v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v35, v36 + 1, (unint64_t)&v44);
        v36 = *(unsigned int *)(v33 + 20);
        *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v36) = *(_QWORD *)v41;
        v37 = (JSC::B3::Value *)v44;
      }
      else
      {
        *(_QWORD *)&(*v35)[8 * v36] = v13;
        v37 = v13;
      }
      *(_DWORD *)(v33 + 20) = v36 + 1;
      *((_QWORD *)v37 + 4) = v33;
    }
  }
  v17 = (JSC::B3::Value *)(*(uint64_t (**)(uint64_t, _QWORD, JSC::B3::Value *))(*(_QWORD *)a2 + 40))(a2, *((_QWORD *)this + 15), v13);
  v18 = *((_QWORD *)this + 17);
  if (v17)
  {
    v20 = v17;
    JSC::B3::BasicBlock::append(*((JSC::B3::BasicBlock **)this + 17), v17);
  }
  else
  {
    v19 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v20 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *((_QWORD *)this + 16), a2, (uint64_t)v13);
    JSC::B3::Procedure::addValueImpl(v19, v20);
    v44 = (uint64_t)v20;
    v21 = (char **)(v18 + 8);
    v22 = *(unsigned int *)(v18 + 20);
    if ((_DWORD)v22 == *(_DWORD *)(v18 + 16))
    {
      v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v44);
      v22 = *(unsigned int *)(v18 + 20);
      *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v22) = *(_QWORD *)v38;
      v23 = (JSC::B3::Value *)v44;
    }
    else
    {
      *(_QWORD *)&(*v21)[8 * v22] = v20;
      v23 = v20;
    }
    *(_DWORD *)(v18 + 20) = v22 + 1;
    *((_QWORD *)v23 + 4) = v18;
  }
  return v20;
}

JSC::B3::Value *JSC::FTL::Output::equal(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 304))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::notEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 312))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::above(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 352))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::aboveOrEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 368))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(59, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::below(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 360))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(58, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::belowOrEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 376))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(60, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::greaterThan(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 328))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::greaterThanOrEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 344))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::lessThan(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 320))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::lessThanOrEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  int v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v6 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 336))(a2, a3);
  if (v6 != 2)
    return (JSC::B3::Value *)*((_QWORD *)this + (v6 != 1));
  v7 = *((_QWORD *)this + 17);
  v8 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(55, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

JSC::B3::Value *JSC::FTL::Output::doubleEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::doubleNotEqualOrUnordered(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::doubleLessThan(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::doubleLessThanOrEqual(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(55, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::doubleGreaterThan(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  char **v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  char *v10;
  JSC::B3::Value *v11;

  v3 = *((_QWORD *)this + 17);
  v4 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v5 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(54, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v4, v5);
  v11 = v5;
  v6 = (char **)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 16))
  {
    v10 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1, (unint64_t)&v11);
    v7 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7) = *(_QWORD *)v10;
    v8 = v11;
  }
  else
  {
    *(_QWORD *)&(*v6)[8 * v7] = v5;
    v8 = v5;
  }
  *(_DWORD *)(v3 + 20) = v7 + 1;
  *((_QWORD *)v8 + 4) = v3;
  return v5;
}

JSC::B3::Value *JSC::FTL::Output::doubleNotEqualAndOrdered(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  char **v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  char **v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  char *v17;
  char *v18;
  JSC::B3::Value *v19;

  v4 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(61, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  JSC::B3::Procedure::addValueImpl(v5, v6);
  v19 = v6;
  v7 = (char **)(v4 + 8);
  v8 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v4 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v19);
    v8 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v8) = *(_QWORD *)v17;
    v9 = v19;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v4 + 20) = v8 + 1;
  *((_QWORD *)v9 + 4) = v4;
  v10 = *((_QWORD *)this + 17);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v12 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 16), (uint64_t)v6, *((_QWORD *)this + 2));
  JSC::B3::Procedure::addValueImpl(v11, v12);
  v19 = v12;
  v13 = (char **)(v10 + 8);
  v14 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v10 + 16))
  {
    v18 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v19);
    v14 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v14) = *(_QWORD *)v18;
    v15 = v19;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v12;
    v15 = v12;
  }
  *(_DWORD *)(v10 + 20) = v14 + 1;
  *((_QWORD *)v15 + 4) = v10;
  return v12;
}

JSC::B3::Value *JSC::FTL::Output::doubleLessThanOrUnordered(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::B3::Value *v4;

  v4 = (JSC::B3::Value *)JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 17), *((_QWORD *)this + 15), 56, *((_QWORD *)this + 16), (uint64_t)a2, (uint64_t)a3);
  return JSC::FTL::Output::logicalNot(this, v4);
}

JSC::B3::Value *JSC::FTL::Output::doubleGreaterThanOrUnordered(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::B3::Value *v4;

  v4 = JSC::FTL::Output::doubleLessThanOrEqual(this, a2, a3);
  return JSC::FTL::Output::logicalNot(this, v4);
}

JSC::B3::Value *JSC::FTL::Output::notZero32(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;
  char **v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  char *v9;
  JSC::B3::Value *v10;

  v2 = *((_QWORD *)this + 17);
  v3 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v4 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 16), (uint64_t)a2, *((_QWORD *)this + 2));
  JSC::B3::Procedure::addValueImpl(v3, v4);
  v10 = v4;
  v5 = (char **)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6 == *(_DWORD *)(v2 + 16))
  {
    v9 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v10);
    v6 = *(unsigned int *)(v2 + 20);
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6) = *(_QWORD *)v9;
    v7 = v10;
  }
  else
  {
    *(_QWORD *)&(*v5)[8 * v6] = v4;
    v7 = v4;
  }
  *(_DWORD *)(v2 + 20) = v6 + 1;
  *((_QWORD *)v7 + 4) = v2;
  return v4;
}

JSC::B3::Value *JSC::FTL::Output::isZero64(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;
  char **v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  char *v9;
  JSC::B3::Value *v10;

  v2 = *((_QWORD *)this + 17);
  v3 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v4 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 16), (uint64_t)a2, *((_QWORD *)this + 4));
  JSC::B3::Procedure::addValueImpl(v3, v4);
  v10 = v4;
  v5 = (char **)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6 == *(_DWORD *)(v2 + 16))
  {
    v9 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v10);
    v6 = *(unsigned int *)(v2 + 20);
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6) = *(_QWORD *)v9;
    v7 = v10;
  }
  else
  {
    *(_QWORD *)&(*v5)[8 * v6] = v4;
    v7 = v4;
  }
  *(_DWORD *)(v2 + 20) = v6 + 1;
  *((_QWORD *)v7 + 4) = v2;
  return v4;
}

JSC::B3::Value *JSC::FTL::Output::notZero64(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;
  char **v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  char *v9;
  JSC::B3::Value *v10;

  v2 = *((_QWORD *)this + 17);
  v3 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v4 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 16), (uint64_t)a2, *((_QWORD *)this + 4));
  JSC::B3::Procedure::addValueImpl(v3, v4);
  v10 = v4;
  v5 = (char **)(v2 + 8);
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6 == *(_DWORD *)(v2 + 16))
  {
    v9 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v10);
    v6 = *(unsigned int *)(v2 + 20);
    *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6) = *(_QWORD *)v9;
    v7 = v10;
  }
  else
  {
    *(_QWORD *)&(*v5)[8 * v6] = v4;
    v7 = v4;
  }
  *(_DWORD *)(v2 + 20) = v6 + 1;
  *((_QWORD *)v7 + 4) = v2;
  return v4;
}

uint64_t JSC::FTL::Output::select(JSC::FTL::Output *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  JSC::B3::BasicBlock *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;

  if (a2 && (*(_WORD *)(a2 + 12) & 0xFFF) == 3)
  {
    if (*(_DWORD *)(a2 + 40))
      return a3;
    else
      return a4;
  }
  else if (a5)
  {
    v20 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(this);
    v21 = JSC::FTL::Output::newBlock(this);
    v22 = JSC::FTL::Output::newBlock(this);
    v24 = *((_QWORD *)this + 16);
    v23 = *((_QWORD *)this + 17);
    v25 = *((_QWORD *)this + 15);
    v39 = v21;
    v40 = a5 == 3;
    v37 = v22;
    v38 = a5 == 2;
    JSC::B3::BasicBlock::appendNewControlValue(v23, v25, 155, v24, a2, &v39, &v37, v26);
    v13 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin>(v20, *((JSC::B3::Value **)this + 15), *(_DWORD *)(a3 + 16), *((_QWORD *)this + 16));
    JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(v21, *((JSC::B3::Value **)this + 15), *((_QWORD *)this + 16), a3, v13);
    v27 = *((_QWORD *)this + 15);
    v28 = *((_QWORD *)this + 16);
    v39 = (uint64_t)v20;
    v40 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v21, v27, 154, v28, &v39, v29, v30, v31);
    JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(v22, *((JSC::B3::Value **)this + 15), *((_QWORD *)this + 16), a4, v13);
    v32 = *((_QWORD *)this + 15);
    v33 = *((_QWORD *)this + 16);
    v39 = (uint64_t)v20;
    v40 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v22, v32, 154, v33, &v39, v34, v35, v36);
    *((_QWORD *)this + 17) = v20;
  }
  else
  {
    v10 = (JSC::B3::Value *)*((_QWORD *)this + 15);
    v11 = *((_QWORD *)this + 16);
    v12 = *((_QWORD *)this + 17);
    v13 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v13 = off_1E357F5F0;
    *(_DWORD *)(v13 + 8) = -1;
    *(_WORD *)(v13 + 12) = 62;
    *(_DWORD *)(v13 + 16) = *(_DWORD *)(a3 + 16);
    *(_BYTE *)(v13 + 20) = 3;
    *(_QWORD *)(v13 + 24) = v11;
    *(_QWORD *)(v13 + 32) = 0;
    v14 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v13);
    *v14 = a2;
    v14[1] = a3;
    v14[2] = a4;
    JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v13);
    v39 = v13;
    v15 = (char **)(v12 + 8);
    v16 = *(unsigned int *)(v12 + 20);
    if ((_DWORD)v16 == *(_DWORD *)(v12 + 16))
    {
      v19 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v39);
      v16 = *(unsigned int *)(v12 + 20);
      *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v16) = *(_QWORD *)v19;
      v17 = v39;
    }
    else
    {
      *(_QWORD *)&(*v15)[8 * v16] = v13;
      v17 = v13;
    }
    *(_DWORD *)(v12 + 20) = v16 + 1;
    *(_QWORD *)(v17 + 32) = v12;
  }
  return v13;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 152;
  *(_DWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 20) = 1;
  *(_QWORD *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = &unk_1E357EDA0;
  *(_QWORD *)(v10 + 40) = a5;
  *(_QWORD *)(v10 + 48) = a4;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v10);
  v16 = v10;
  v11 = (char **)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v10;
    v13 = v10;
  }
  *(_DWORD *)(a1 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = a1;
  return v10;
}

uint64_t JSC::FTL::Output::atomicXchgAdd(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  char *v26;
  __int128 *v27;
  __int128 v28;

  v11 = a1[16];
  v10 = a1[17];
  v12 = (JSC::B3::Value *)a1[15];
  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 73;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v13, 2, a2, a4);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E357CDD0;
  *(_BYTE *)(v13 + 60) = a5;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v13);
  *(_QWORD *)&v28 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v26;
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = a1[19];
  v19 = v18 + 27504;
  v20 = (uint64_t *)(v18 + 27496);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v13;
  v22 = *(_DWORD *)(v18 + 27504);
  v21 = *(unsigned int *)(v18 + 27508);
  if ((_DWORD)v21 == v22)
  {
    v21 = *(unsigned int *)(v19 + 4);
    v23 = *v20;
    v24 = *v27;
  }
  else
  {
    v23 = *v20;
    v24 = v28;
  }
  *(_OWORD *)(v23 + 16 * v21) = v24;
  ++*(_DWORD *)(v19 + 4);
  return v13;
}

uint64_t JSC::FTL::Output::atomicXchgAnd(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  char *v26;
  __int128 *v27;
  __int128 v28;

  v11 = a1[16];
  v10 = a1[17];
  v12 = (JSC::B3::Value *)a1[15];
  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 74;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v13, 2, a2, a4);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E357CDD0;
  *(_BYTE *)(v13 + 60) = a5;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v13);
  *(_QWORD *)&v28 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v26;
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = a1[19];
  v19 = v18 + 27504;
  v20 = (uint64_t *)(v18 + 27496);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v13;
  v22 = *(_DWORD *)(v18 + 27504);
  v21 = *(unsigned int *)(v18 + 27508);
  if ((_DWORD)v21 == v22)
  {
    v21 = *(unsigned int *)(v19 + 4);
    v23 = *v20;
    v24 = *v27;
  }
  else
  {
    v23 = *v20;
    v24 = v28;
  }
  *(_OWORD *)(v23 + 16 * v21) = v24;
  ++*(_DWORD *)(v19 + 4);
  return v13;
}

uint64_t JSC::FTL::Output::atomicXchgOr(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  char *v26;
  __int128 *v27;
  __int128 v28;

  v11 = a1[16];
  v10 = a1[17];
  v12 = (JSC::B3::Value *)a1[15];
  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 75;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v13, 2, a2, a4);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E357CDD0;
  *(_BYTE *)(v13 + 60) = a5;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v13);
  *(_QWORD *)&v28 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v26;
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = a1[19];
  v19 = v18 + 27504;
  v20 = (uint64_t *)(v18 + 27496);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v13;
  v22 = *(_DWORD *)(v18 + 27504);
  v21 = *(unsigned int *)(v18 + 27508);
  if ((_DWORD)v21 == v22)
  {
    v21 = *(unsigned int *)(v19 + 4);
    v23 = *v20;
    v24 = *v27;
  }
  else
  {
    v23 = *v20;
    v24 = v28;
  }
  *(_OWORD *)(v23 + 16 * v21) = v24;
  ++*(_DWORD *)(v19 + 4);
  return v13;
}

uint64_t JSC::FTL::Output::atomicXchgSub(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  char *v26;
  __int128 *v27;
  __int128 v28;

  v11 = a1[16];
  v10 = a1[17];
  v12 = (JSC::B3::Value *)a1[15];
  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 76;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v13, 2, a2, a4);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E357CDD0;
  *(_BYTE *)(v13 + 60) = a5;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v13);
  *(_QWORD *)&v28 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v26;
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = a1[19];
  v19 = v18 + 27504;
  v20 = (uint64_t *)(v18 + 27496);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v13;
  v22 = *(_DWORD *)(v18 + 27504);
  v21 = *(unsigned int *)(v18 + 27508);
  if ((_DWORD)v21 == v22)
  {
    v21 = *(unsigned int *)(v19 + 4);
    v23 = *v20;
    v24 = *v27;
  }
  else
  {
    v23 = *v20;
    v24 = v28;
  }
  *(_OWORD *)(v23 + 16 * v21) = v24;
  ++*(_DWORD *)(v19 + 4);
  return v13;
}

uint64_t JSC::FTL::Output::atomicXchgXor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  char *v26;
  __int128 *v27;
  __int128 v28;

  v11 = a1[16];
  v10 = a1[17];
  v12 = (JSC::B3::Value *)a1[15];
  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 77;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v13, 2, a2, a4);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E357CDD0;
  *(_BYTE *)(v13 + 60) = a5;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v13);
  *(_QWORD *)&v28 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v26;
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = a1[19];
  v19 = v18 + 27504;
  v20 = (uint64_t *)(v18 + 27496);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v13;
  v22 = *(_DWORD *)(v18 + 27504);
  v21 = *(unsigned int *)(v18 + 27508);
  if ((_DWORD)v21 == v22)
  {
    v21 = *(unsigned int *)(v19 + 4);
    v23 = *v20;
    v24 = *v27;
  }
  else
  {
    v23 = *v20;
    v24 = v28;
  }
  *(_OWORD *)(v23 + 16 * v21) = v24;
  ++*(_DWORD *)(v19 + 4);
  return v13;
}

uint64_t JSC::FTL::Output::atomicXchg(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  int v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  char *v26;
  __int128 *v27;
  __int128 v28;

  v11 = a1[16];
  v10 = a1[17];
  v12 = (JSC::B3::Value *)a1[15];
  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 78;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v13, 2, a2, a4);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)v13 = off_1E357CDD0;
  *(_BYTE *)(v13 + 60) = a5;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)v13);
  *(_QWORD *)&v28 = v13;
  v15 = (char **)(v10 + 8);
  v16 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v10 + 16))
  {
    v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
    v16 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v16) = *(_QWORD *)v26;
    v17 = v28;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v13;
    v17 = v13;
  }
  *(_DWORD *)(v10 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v10;
  v18 = a1[19];
  v19 = v18 + 27504;
  v20 = (uint64_t *)(v18 + 27496);
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v13;
  v22 = *(_DWORD *)(v18 + 27504);
  v21 = *(unsigned int *)(v18 + 27508);
  if ((_DWORD)v21 == v22)
  {
    v21 = *(unsigned int *)(v19 + 4);
    v23 = *v20;
    v24 = *v27;
  }
  else
  {
    v23 = *v20;
    v24 = v28;
  }
  *(_OWORD *)(v23 + 16 * v21) = v24;
  ++*(_DWORD *)(v19 + 4);
  return v13;
}

uint64_t JSC::FTL::Output::atomicStrongCAS(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  char *v29;
  __int128 *v30;
  __int128 v31;

  v13 = a1[16];
  v12 = a1[17];
  v14 = (JSC::B3::Value *)a1[15];
  v15 = WTF::fastMalloc((WTF *)0x58);
  v16 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)v15 = off_1E357F5F0;
  *(_DWORD *)(v15 + 8) = -1;
  *(_WORD *)(v15 + 12) = 72;
  *(_DWORD *)(v15 + 16) = v16;
  *(_BYTE *)(v15 + 20) = 3;
  *(_QWORD *)(v15 + 24) = v13;
  *(_QWORD *)(v15 + 32) = 0;
  v17 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v15);
  *v17 = a2;
  v17[1] = a3;
  v17[2] = a5;
  *(_DWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)v15 = off_1E357CDD0;
  *(_BYTE *)(v15 + 60) = a6;
  JSC::B3::Procedure::addValueImpl(v14, (JSC::B3::Value *)v15);
  *(_QWORD *)&v31 = v15;
  v18 = (char **)(v12 + 8);
  v19 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(v12 + 16))
  {
    v29 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v31);
    v19 = *(unsigned int *)(v12 + 20);
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v19) = *(_QWORD *)v29;
    v20 = v31;
  }
  else
  {
    *(_QWORD *)&(*v18)[8 * v19] = v15;
    v20 = v15;
  }
  *(_DWORD *)(v12 + 20) = v19 + 1;
  *(_QWORD *)(v20 + 32) = v12;
  v21 = a1[19];
  v22 = v21 + 27504;
  v23 = (uint64_t *)(v21 + 27496);
  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v31 + 1) = v15;
  v25 = *(_DWORD *)(v21 + 27504);
  v24 = *(unsigned int *)(v21 + 27508);
  if ((_DWORD)v24 == v25)
  {
    v24 = *(unsigned int *)(v22 + 4);
    v26 = *v23;
    v27 = *v30;
  }
  else
  {
    v26 = *v23;
    v27 = v31;
  }
  *(_OWORD *)(v26 + 16 * v24) = v27;
  ++*(_DWORD *)(v22 + 4);
  return v15;
}

uint64_t JSC::FTL::Output::jump(JSC::FTL::Output *this, JSC::B3::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::BasicBlock *v12;
  char v13;

  v8 = *((_QWORD *)this + 16);
  v9 = *((_QWORD *)this + 17);
  v10 = *((_QWORD *)this + 15);
  v12 = a2;
  v13 = 0;
  return JSC::B3::BasicBlock::appendNewControlValue(v9, v10, 154, v8, (uint64_t *)&v12, a6, a7, a8);
}

uint64_t JSC::FTL::Output::branch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;

  v12 = a1[16];
  v11 = a1[17];
  v13 = a1[15];
  v17 = a3;
  v18 = a5 == 0.0;
  v15 = a4;
  v16 = a6 == 0.0;
  return JSC::B3::BasicBlock::appendNewControlValue(v11, v13, 155, v12, a2, &v17, &v15, a10);
}

uint64_t JSC::FTL::Output::check@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;

  v11 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 120), *(double *)(a1 + 160));
  v12 = (uint64_t)v11;
  v13 = *(_QWORD *)(a1 + 144);
  if (v13)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 168), v13, (uint64_t)v11);
  }
  else
  {
    v30 = (uint64_t)v11;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v15 = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    v15[3] = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v15;
    v29 = v15;
    v15[2] = v12;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 168), &v30, (uint64_t *)&v29, v16, v17, v18, v19, v20, (uint64_t)&v27);
    v21 = v29;
    v22 = *(_QWORD **)(a1 + 192);
    *v29 = a1 + 184;
    v21[1] = v22;
    *v22 = v21;
    *(_QWORD *)(a1 + 192) = v21;
  }
  v24 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a1 + 120);
  v27 = a3;
  v28 = (a4 & 0x7FFFFFFF) == 0;
  v30 = v12;
  v31 = (LODWORD(a6) & 0x7FFFFFFF) == 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v23, v25, 155, v24, a2, &v27, &v30, v14);
  *(_QWORD *)(a1 + 136) = v12;
  return result;
}

uint64_t JSC::FTL::Output::speculate(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  _QWORD *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 88;
  *(_DWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 20) = 4;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v6);
  *v7 = v7 + 2;
  v7[1] = 3;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E357D550;
  v14 = 0;
  v15 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v6, (uint64_t)a2, (unint64_t)&v14);
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v13 = v6;
  v8 = (char **)(v3 + 8);
  v9 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v3 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v13);
    v9 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v13;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v6;
    v10 = v6;
  }
  *(_DWORD *)(v3 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v3;
  return v6;
}

uint64_t JSC::FTL::Output::speculateAdd(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  v7 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v8 = WTF::fastMalloc((WTF *)0x98);
  v9 = *((_DWORD *)a2 + 4);
  *(_QWORD *)v8 = off_1E357F5F0;
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 85;
  *(_DWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 20) = 4;
  *(_QWORD *)(v8 + 24) = v5;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v8);
  *v10 = v10 + 2;
  v10[1] = 3;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E357D550;
  v17 = 0;
  v18 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v8, (uint64_t)a2, (unint64_t)&v17);
  v17 = 0;
  v18 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v8, (uint64_t)a3, (unint64_t)&v17);
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v8);
  v16 = v8;
  v11 = (char **)(v6 + 8);
  v12 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v6 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v8;
    v13 = v8;
  }
  *(_DWORD *)(v6 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v6;
  return v8;
}

uint64_t JSC::FTL::Output::speculateSub(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  v7 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v8 = WTF::fastMalloc((WTF *)0x98);
  v9 = *((_DWORD *)a2 + 4);
  *(_QWORD *)v8 = off_1E357F5F0;
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 86;
  *(_DWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 20) = 4;
  *(_QWORD *)(v8 + 24) = v5;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v8);
  *v10 = v10 + 2;
  v10[1] = 3;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E357D550;
  v17 = 0;
  v18 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v8, (uint64_t)a2, (unint64_t)&v17);
  v17 = 0;
  v18 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v8, (uint64_t)a3, (unint64_t)&v17);
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v8);
  v16 = v8;
  v11 = (char **)(v6 + 8);
  v12 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v6 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v8;
    v13 = v8;
  }
  *(_DWORD *)(v6 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v6;
  return v8;
}

uint64_t JSC::FTL::Output::speculateMul(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  v7 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v8 = WTF::fastMalloc((WTF *)0x98);
  v9 = *((_DWORD *)a2 + 4);
  *(_QWORD *)v8 = off_1E357F5F0;
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 87;
  *(_DWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 20) = 4;
  *(_QWORD *)(v8 + 24) = v5;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v8);
  *v10 = v10 + 2;
  v10[1] = 3;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E357D550;
  v17 = 0;
  v18 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v8, (uint64_t)a2, (unint64_t)&v17);
  v17 = 0;
  v18 = 0;
  JSC::B3::StackmapValue::append((__int128 *)v8, (uint64_t)a3, (unint64_t)&v17);
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v8);
  v16 = v8;
  v11 = (char **)(v6 + 8);
  v12 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v6 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v8;
    v13 = v8;
  }
  *(_DWORD *)(v6 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = v6;
  return v8;
}

uint64_t JSC::FTL::Output::trap(JSC::FTL::Output *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 17), *((_QWORD *)this + 15), 159, *((_QWORD *)this + 16), a5, a6, a7, a8);
}

uint64_t JSC::FTL::Output::anchor(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 152;
  *(_DWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)v6 = &unk_1E357EDA0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

JSC::B3::Value *JSC::FTL::Output::bitCast(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char **v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  char *v15;
  JSC::B3::Value *v16;

  v4 = a1[16];
  v3 = a1[17];
  v5 = (JSC::B3::Value *)a1[15];
  v6 = WTF::fastMalloc((WTF *)0x30);
  v7 = (JSC::B3::Value *)v6;
  *(_QWORD *)v6 = off_1E357F5F0;
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 37;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8 >= 0x80000000)
    v8 = 0x80000000;
  v9 = v8 - 1;
  if (v9 > 3)
    v10 = 0;
  else
    v10 = dword_19914FDF0[v9];
  *(_DWORD *)(v6 + 16) = v10;
  *(_BYTE *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v6, 1, a2);
  JSC::B3::Procedure::addValueImpl(v5, v7);
  v16 = v7;
  v11 = (char **)(v3 + 8);
  v12 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(v3 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v7;
    v13 = v7;
  }
  *(_DWORD *)(v3 + 20) = v12 + 1;
  *((_QWORD *)v13 + 4) = v3;
  return v7;
}

uint64_t JSC::FTL::Output::fround(JSC::FTL::Output *this, JSC::B3::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;

  v5 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = off_1E357F5F0;
  *(_DWORD *)(v7 + 8) = -1;
  *(_WORD *)(v7 + 12) = 50;
  *(_DWORD *)(v7 + 16) = 3;
  *(_BYTE *)(v7 + 20) = 1;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v7, 1, (uint64_t)a2);
  JSC::B3::Procedure::addValueImpl(v6, (JSC::B3::Value *)v7);
  v21 = v7;
  v8 = (char **)(v4 + 8);
  v9 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v4 + 16))
  {
    v19 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v21);
    v9 = *(unsigned int *)(v4 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v9) = *(_QWORD *)v19;
    v10 = v21;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v7;
    v10 = v7;
  }
  *(_DWORD *)(v4 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v4;
  v12 = *((_QWORD *)this + 16);
  v11 = *((_QWORD *)this + 17);
  v13 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 49;
  *(_DWORD *)(v14 + 16) = 4;
  *(_BYTE *)(v14 + 20) = 1;
  *(_QWORD *)(v14 + 24) = v12;
  *(_QWORD *)(v14 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v14, 1, v7);
  JSC::B3::Procedure::addValueImpl(v13, (JSC::B3::Value *)v14);
  v21 = v14;
  v15 = (char **)(v11 + 8);
  v16 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v11 + 16))
  {
    v20 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v21);
    v16 = *(unsigned int *)(v11 + 20);
    *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v16) = *(_QWORD *)v20;
    v17 = v21;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v14;
    v17 = v14;
  }
  *(_DWORD *)(v11 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v11;
  return v14;
}

uint64_t JSC::FTL::Output::store(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t result;
  char *v26;
  __int128 *v27;
  __int128 v28;

  switch(a5)
  {
    case 0:
      v10 = a1[16];
      v9 = a1[17];
      v11 = (JSC::B3::Value *)a1[15];
      v12 = WTF::fastMalloc((WTF *)0x50);
      v13 = v12;
      *(_QWORD *)v12 = off_1E357F5F0;
      *(_DWORD *)(v12 + 8) = -1;
      v14 = 68;
      goto LABEL_3;
    case 1:
      v10 = a1[16];
      v9 = a1[17];
      v11 = (JSC::B3::Value *)a1[15];
      v12 = WTF::fastMalloc((WTF *)0x50);
      v13 = v12;
      *(_QWORD *)v12 = off_1E357F5F0;
      *(_DWORD *)(v12 + 8) = -1;
      v14 = 69;
      goto LABEL_3;
    case 2:
    case 3:
    case 5:
      v10 = a1[16];
      v9 = a1[17];
      v11 = (JSC::B3::Value *)a1[15];
      v12 = WTF::fastMalloc((WTF *)0x50);
      v13 = v12;
      *(_QWORD *)v12 = off_1E357F5F0;
      *(_DWORD *)(v12 + 8) = -1;
      v14 = 70;
LABEL_3:
      *(_WORD *)(v12 + 12) = v14;
      *(_DWORD *)(v12 + 16) = 0;
      *(_BYTE *)(v12 + 20) = 2;
      *(_QWORD *)(v12 + 24) = v10;
      *(_QWORD *)(v12 + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v12, 2, a2, a4);
      *(_QWORD *)v13 = off_1E357E4C8;
      *(_DWORD *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 44) = xmmword_19914F690;
      JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v13);
      *(_QWORD *)&v28 = v13;
      v15 = (char **)(v9 + 8);
      v16 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v16 == *(_DWORD *)(v9 + 16))
      {
        v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v28);
        v16 = *(unsigned int *)(v9 + 20);
        *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v16) = *(_QWORD *)v26;
        v17 = v28;
      }
      else
      {
        *(_QWORD *)&(*v15)[8 * v16] = v13;
        v17 = v13;
      }
      *(_DWORD *)(v9 + 20) = v16 + 1;
      *(_QWORD *)(v17 + 32) = v9;
      v18 = a1[19];
      v19 = v18 + 27504;
      v20 = (uint64_t *)(v18 + 27496);
      *(_QWORD *)&v28 = a3;
      *((_QWORD *)&v28 + 1) = v13;
      v22 = *(_DWORD *)(v18 + 27504);
      v21 = *(unsigned int *)(v18 + 27508);
      if ((_DWORD)v21 == v22)
      {
        v21 = *(unsigned int *)(v19 + 4);
        v23 = *v20;
        v24 = *v27;
      }
      else
      {
        v23 = *v20;
        v24 = v28;
      }
      *(_OWORD *)(v23 + 16 * v21) = v24;
      ++*(_DWORD *)(v19 + 4);
      result = v13;
      break;
    case 4:
    case 6:
      result = JSC::FTL::Output::storePtr(a1, a2, a3, a4);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198596314);
  }
  return result;
}

uint64_t JSC::FTL::Output::storePtr(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  char *v23;
  __int128 *v24;
  __int128 v25;

  v9 = a1[16];
  v8 = a1[17];
  v10 = (JSC::B3::Value *)a1[15];
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v11 = off_1E357F5F0;
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 70;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = 2;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v11, 2, a2, a4);
  *(_QWORD *)v11 = off_1E357E4C8;
  *(_DWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 44) = xmmword_19914F690;
  JSC::B3::Procedure::addValueImpl(v10, (JSC::B3::Value *)v11);
  *(_QWORD *)&v25 = v11;
  v12 = (char **)(v8 + 8);
  v13 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(v8 + 16))
  {
    v23 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v25);
    v13 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v13) = *(_QWORD *)v23;
    v14 = v25;
  }
  else
  {
    *(_QWORD *)&(*v12)[8 * v13] = v11;
    v14 = v11;
  }
  *(_DWORD *)(v8 + 20) = v13 + 1;
  *(_QWORD *)(v14 + 32) = v8;
  v15 = a1[19];
  v16 = v15 + 27504;
  v17 = (uint64_t *)(v15 + 27496);
  *(_QWORD *)&v25 = a3;
  *((_QWORD *)&v25 + 1) = v11;
  v19 = *(_DWORD *)(v15 + 27504);
  v18 = *(unsigned int *)(v15 + 27508);
  if ((_DWORD)v18 == v19)
  {
    v18 = *(unsigned int *)(v16 + 4);
    v20 = *v17;
    v21 = *v24;
  }
  else
  {
    v20 = *v17;
    v21 = v25;
  }
  *(_OWORD *)(v20 + 16 * v18) = v21;
  ++*(_DWORD *)(v16 + 4);
  return v11;
}

JSC::FTL::AbstractHeap *JSC::FTL::Output::absolute(JSC::FTL::Output *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::FTL::IndexedAbstractHeap *v11;
  uint64_t v12;
  JSC::FTL::AbstractHeap *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;

  v10 = *((_QWORD *)this + 19);
  v11 = (JSC::FTL::IndexedAbstractHeap *)(v10 + 26504);
  if ((unint64_t)a2 > 0xF)
  {
    v13 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = v10 + 48 * a2;
    v13 = (JSC::FTL::AbstractHeap *)(v12 + 26576);
    if (!*(_QWORD *)(v12 + 26616))
      JSC::FTL::IndexedAbstractHeap::initialize(v11, v13, a2);
  }
  v15 = *((_QWORD *)this + 16);
  v14 = *((_QWORD *)this + 17);
  v16 = (JSC::B3::Value *)*((_QWORD *)this + 15);
  v17 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v17 + 8) = -1;
  *(_WORD *)(v17 + 12) = 4;
  *(_DWORD *)(v17 + 16) = 2;
  *(_BYTE *)(v17 + 20) = 0;
  *(_QWORD *)(v17 + 24) = v15;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)v17 = off_1E357DA88;
  *(_QWORD *)(v17 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v17);
  v23 = v17;
  v18 = (char **)(v14 + 8);
  v19 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(v14 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v23);
    v19 = *(unsigned int *)(v14 + 20);
    *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v19) = *(_QWORD *)v22;
    v20 = v23;
  }
  else
  {
    *(_QWORD *)&(*v18)[8 * v19] = v17;
    v20 = v17;
  }
  *(_DWORD *)(v14 + 20) = v19 + 1;
  *(_QWORD *)(v20 + 32) = v14;
  return v13;
}

uint64_t JSC::FTL::Output::entrySwitch(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = a1[15];
  if (v3 == *(_DWORD *)(v4 + 200))
  {
    result = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>(a1[17], v4, 157, a1[16]);
    v12 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)a2;
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        result = (uint64_t)JSC::B3::BasicBlock::appendSuccessor(a1[17], v15, 0, v7, v8, v9, v10, v11);
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    result = 919;
    __break(0xC471u);
  }
  return result;
}

void JSC::FTL::PatchpointExceptionHandle::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, __n128 *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  __int16 v36;

  v13 = WTF::fastMalloc((WTF *)0x50);
  v14 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v24 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v25 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v32 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v24 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v24 = v32;
      *(_DWORD *)(v24 + 8) = v25;
      v27 = 1;
    }
    else
    {
      v27 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v24 = v25 << 36;
    }
    v14 = v24 | v27;
  }
  v35[0] = v14;
  v15 = *(_QWORD *)(a3 + 8);
  if ((v15 & 1) != 0)
  {
    v28 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v29 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v33 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v28 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v28 = v33;
      *(_DWORD *)(v28 + 8) = v29;
      v31 = 1;
    }
    else
    {
      v31 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v28 = v29 << 36;
    }
    v15 = v28 | v31;
    v16 = ((v28 | v31) & 1) == 0;
  }
  else
  {
    v16 = 1;
  }
  v35[1] = v15;
  v36 = *(_WORD *)(a3 + 16);
  JSC::FTL::PatchpointExceptionHandle::PatchpointExceptionHandle(v13, a1, a2, (uint64_t)v35, a4, a5, a6);
  *a7 = v13;
  if (!v16 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::FTL::PatchpointExceptionHandle::defaultHandle(uint64_t a1@<X0>, int a2@<W1>, unsigned int **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  int64x2_t v27;
  __int16 v28;

  v4 = *(unsigned int **)(a1 + 48);
  if (v4)
    goto LABEL_24;
  v8 = WTF::fastMalloc((WTF *)0x50);
  v27 = vdupq_n_s64(2uLL);
  v28 = 0;
  v25 = 0uLL;
  v26 = 0;
  JSC::FTL::PatchpointExceptionHandle::PatchpointExceptionHandle(v8, a1, 0, (uint64_t)&v27, a2, 0, &v25);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v19 = *(_QWORD *)(v16 + 32);
      if ((v19 & 1) != 0)
      {
        v21 = v19 & 0xFFFFFFFF8;
        if (v21)
        {
          v22 = v16;
          WTF::fastFree(v21, v9, v10, v11, v12, v13, v14, v15);
          v16 = v22;
        }
      }
      v20 = *(_QWORD *)(v16 + 24);
      if ((v20 & 1) != 0)
      {
        v23 = v20 & 0xFFFFFFFF8;
        if (v23)
        {
          v24 = v16;
          WTF::fastFree(v23, v9, v10, v11, v12, v13, v14, v15);
          v16 = v24;
        }
      }
      WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  if ((v27.i8[8] & 1) != 0 && (v27.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27.i64[1] & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v27.i8[0] & 1) != 0 && (v27.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27.i64[0] & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v4 = *(unsigned int **)(a1 + 48);
  if (v4)
  {
LABEL_24:
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *a3 = v4;
}

void JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle(JSC::FTL::PatchpointExceptionHandle *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *((_QWORD *)this + 4);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 3);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(JSC::FTL::PatchpointExceptionHandle *this@<X0>, const JSC::B3::StackmapGenerationParams *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;

  v6 = *((_QWORD *)this + 2);
  v14 = WTF::fastMalloc((WTF *)0x18);
  if (v6)
  {
    JSC::FTL::OSRExitDescriptor::emitOSRExitLater(*((_QWORD *)this + 2), *((_QWORD **)this + 1), 26, (uint64_t)this + 24, (uint64_t)a2, *((unsigned int *)this + 12), *((unsigned int *)this + 13), v13, (unsigned int **)&v34);
    v27 = (unsigned int *)v34;
    v34 = 0;
    *(_DWORD *)v14 = 1;
    *(_BYTE *)(v14 + 4) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    if (v27)
    {
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      *(_QWORD *)(v14 + 16) = v27;
      *a3 = v14;
      do
      {
        v29 = __ldaxr(v27);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v27));
      if (!v30)
      {
        atomic_store(1u, v27);
        WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    else
    {
      *(_QWORD *)(v14 + 16) = 0;
      *a3 = v14;
    }
    v31 = (unsigned int *)v34;
    v34 = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((unint64_t)v31, v20, v21, v22, v23, v24, v25, v26);
      }
    }
  }
  else
  {
    v15 = *(unsigned int **)(*((_QWORD *)this + 1) + 56);
    if (v15)
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      *(_DWORD *)v14 = 1;
      *(_BYTE *)(v14 + 4) = 1;
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 + 1, v15));
      *(_QWORD *)(v14 + 8) = v15;
      *(_QWORD *)(v14 + 16) = 0;
      *a3 = v14;
      do
      {
        v18 = __ldaxr(v15);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v15));
      if (!v19)
      {
        atomic_store(1u, v15);
        WTF::fastFree((unint64_t)v15, v7, v8, v9, v10, v11, v12, v13);
      }
    }
    else
    {
      *(_DWORD *)v14 = 1;
      *(_BYTE *)(v14 + 4) = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *a3 = v14;
    }
  }
}

void JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  const void *v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return;
  JSC::FTL::OSRExitDescriptor::emitOSRExitLater(v9, *(_QWORD **)(a1 + 8), 27, a1 + 24, a2, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), a8, (unsigned int **)&v44);
  v12 = (unsigned int *)v44;
  v13 = *(_QWORD *)(v44 + 8);
  v14 = *(_DWORD *)(v44 + 4);
  if (*(_DWORD *)(v13 + 252) <= v14)
    goto LABEL_34;
  *(_DWORD *)(*(_QWORD *)(v13 + 240) + 72 * v14 + 24) = a3;
  v42 = *(_OWORD *)(a1 + 56);
  v43 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
  do
    v16 = __ldaxr(v12);
  while (__stlxr(v16 + 1, v12));
  v17 = *(_QWORD *)(a2 + 56);
  do
    v18 = __ldaxr(v12);
  while (__stlxr(v18 + 1, v12));
  v44 = v42;
  v45 = v43;
  v19 = WTF::fastMalloc((WTF *)0x40);
  v27 = v19;
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)v19 = &off_1E3590238;
  do
    v28 = __ldaxr(v12);
  while (__stlxr(v28 + 1, v12));
  *(_QWORD *)(v19 + 16) = v12;
  *(_OWORD *)(v19 + 24) = v44;
  *(_QWORD *)(v19 + 40) = v45;
  *(_DWORD *)(v19 + 48) = a3;
  *(_QWORD *)(v19 + 56) = v15;
  v29 = *(unsigned int *)(v17 + 12);
  if ((_DWORD)v29 == *(_DWORD *)(v17 + 8))
  {
    v37 = v29 + (v29 >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= v29 + 1)
      v39 = v29 + 1;
    else
      v39 = v38;
    if (!(v39 >> 29))
    {
      v40 = *(const void **)v17;
      v41 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
      *(_DWORD *)(v17 + 8) = v39;
      *(_QWORD *)v17 = v41;
      memcpy(v41, v40, 8 * v29);
      if (v40)
      {
        if (*(const void **)v17 == v40)
        {
          *(_QWORD *)v17 = 0;
          *(_DWORD *)(v17 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v40, v20, v21, v22, v23, v24, v25, v26);
      }
      v29 = *(unsigned int *)(v17 + 12);
      v30 = (uint64_t *)(*(_QWORD *)v17 + 8 * v29);
      goto LABEL_12;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x198596DC0);
  }
  v30 = (uint64_t *)(*(_QWORD *)v17 + 8 * v29);
LABEL_12:
  *v30 = v27;
  *(_DWORD *)(v17 + 12) = v29 + 1;
  do
  {
    v31 = __ldaxr(v12);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v12));
  if (!v32)
  {
    atomic_store(1u, v12);
    WTF::fastFree((unint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
  }
  do
  {
    v33 = __ldaxr(v12);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v12));
  if (!v34)
  {
    atomic_store(1u, v12);
    WTF::fastFree((unint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
  }
  do
  {
    v35 = __ldaxr(v12);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v12));
  if (!v36)
  {
    atomic_store(1u, v12);
    WTF::fastFree((unint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
  }
}

__n128 JSC::FTL::PatchpointExceptionHandle::PatchpointExceptionHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, __n128 *a7)
{
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __n128 *v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v7 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v10 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v11 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v11 != 0x3FFFFFFF)
        ? (v12 = (_DWORD)v11 == -1)
        : (v12 = 1),
          v12))
    {
      v13 = 2;
    }
    else if (v11 >> 28)
    {
      v30 = a7;
      v32 = a1;
      v26 = a6;
      v28 = a5;
      v24 = a4;
      v18 = v10;
      v19 = v11;
      v20 = WTF::fastMalloc((WTF *)0x10);
      a4 = v24;
      a6 = v26;
      a5 = v28;
      v10 = v20;
      a7 = v30;
      a1 = v32;
      *(_QWORD *)v10 = v18;
      *(_DWORD *)(v10 + 8) = v19;
      v13 = 1;
    }
    else
    {
      v13 = v10;
      v10 = v11 << 36;
    }
    v7 = v10 | v13;
  }
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a4 + 8);
  if ((v8 & 1) != 0)
  {
    v14 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v15 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v31 = a7;
      v33 = a1;
      v27 = a6;
      v29 = a5;
      v25 = a4;
      v21 = v14;
      v22 = v15;
      v23 = WTF::fastMalloc((WTF *)0x10);
      a4 = v25;
      a6 = v27;
      a5 = v29;
      v14 = v23;
      a7 = v31;
      a1 = v33;
      *(_QWORD *)v14 = v21;
      *(_DWORD *)(v14 + 8) = v22;
      v17 = 1;
    }
    else
    {
      v17 = v14;
      v14 = v15 << 36;
    }
    v8 = v14 | v17;
  }
  *(_QWORD *)(a1 + 32) = v8;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a4 + 16);
  *(_DWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 52) = a6;
  result = *a7;
  *(_QWORD *)(a1 + 72) = a7[1].n128_u64[0];
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t JSC::FTL::offsetOfFPR(unsigned int a1)
{
  return 8 * a1 + 256;
}

void JSC::FTL::saveAllRegisters(JSC::FTL *this, JSC::AssemblyHelpers *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _DWORD *v216;
  unsigned __int8 v217;
  unint64_t v218;

  v10 = (JSC::FTL *)((char *)this + 56);
  v11 = *((_DWORD *)this + 50);
  if (v11 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::FTL *)((char *)this + 56), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v11) = -134216736;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  v216 = this;
  v217 = 0;
  v218 = 127;
  v18 = 2;
  for (i = 1024; i != 0x4000; i += 512)
  {
    if (((1 << v18) & 0xE0040000) == 0)
    {
      v215 = i | v18;
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>(&v216, &v215, v12, v13, v14, v15, v16, v17);
    }
    ++v18;
  }
  v20 = v218 & 0x7F;
  if ((_DWORD)v20 != 127)
  {
    JSC::MacroAssemblerARM64::store64((uint64_t)v216, v20, v217 | ((unint64_t)(v218 >> 8) << 34), v13, v14, v15, v16, v17);
    v218 = 127;
  }
  v21 = *((_DWORD *)this + 50);
  if (v21 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v20, v12, v13, v14, v15, v16, v17);
    v21 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v21) = -130022430;
  v22 = *((_DWORD *)this + 50);
  v23 = v22 + 4;
  *((_DWORD *)this + 50) = v22 + 4;
  if ((v22 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v20, v12, v13, v14, v15, v16, v17);
    v23 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v23) = -1459616766;
  *((_DWORD *)this + 50) += 4;
  v215 = 16416;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v12, v13, v14, v15, v16, v17);
  v215 = 16929;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v24, v25, v26, v27, v28, v29);
  v215 = 17442;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v30, v31, v32, v33, v34, v35);
  v215 = 17955;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v36, v37, v38, v39, v40, v41);
  v215 = 18468;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v42, v43, v44, v45, v46, v47);
  v215 = 18981;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v48, v49, v50, v51, v52, v53);
  v215 = 19494;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v54, v55, v56, v57, v58, v59);
  v215 = 20007;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v60, v61, v62, v63, v64, v65);
  v215 = 20520;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v66, v67, v68, v69, v70, v71);
  v215 = 21033;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v72, v73, v74, v75, v76, v77);
  v215 = 21546;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v78, v79, v80, v81, v82, v83);
  v215 = 22059;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v84, v85, v86, v87, v88, v89);
  v215 = 22572;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v90, v91, v92, v93, v94, v95);
  v215 = 23085;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v96, v97, v98, v99, v100, v101);
  v215 = 23598;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v102, v103, v104, v105, v106, v107);
  v215 = 24111;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v108, v109, v110, v111, v112, v113);
  v215 = 24624;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v114, v115, v116, v117, v118, v119);
  v215 = 25137;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v120, v121, v122, v123, v124, v125);
  v215 = 25650;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v126, v127, v128, v129, v130, v131);
  v215 = 26163;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v132, v133, v134, v135, v136, v137);
  v215 = 26676;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v138, v139, v140, v141, v142, v143);
  v215 = 27189;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v144, v145, v146, v147, v148, v149);
  v215 = 27702;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v150, v151, v152, v153, v154, v155);
  v215 = 28215;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v156, v157, v158, v159, v160, v161);
  v215 = 28728;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v162, v163, v164, v165, v166, v167);
  v215 = 29241;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v168, v169, v170, v171, v172, v173);
  v215 = 29754;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v174, v175, v176, v177, v178, v179);
  v215 = 30267;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v180, v181, v182, v183, v184, v185);
  v215 = 30780;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v186, v187, v188, v189, v190, v191);
  v215 = 31293;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v192, v193, v194, v195, v196, v197);
  v215 = 31806;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v198, v199, v200, v201, v202, v203);
  v215 = 32319;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v216, &v215, v204, v205, v206, v207, v208, v209);
  if ((v218 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v216, (char)((v218 & 0x7F) - 32), v217 | ((unint64_t)(v218 >> 8) << 34), v210, v211, v212, v213, v214);
}

void JSC::FTL::restoreAllRegisters(JSC::FTL *this, JSC::AssemblyHelpers *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t i;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  _DWORD *v214;
  unsigned __int8 v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  unsigned __int8 v220;
  unint64_t v221;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  v220 = 0;
  v221 = 127;
  v218 = 16416;
  v219 = this;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v9, v10, v11, v12, v13, v14);
  v218 = 16929;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v15, v16, v17, v18, v19, v20);
  v218 = 17442;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v21, v22, v23, v24, v25, v26);
  v218 = 17955;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v27, v28, v29, v30, v31, v32);
  v218 = 18468;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v33, v34, v35, v36, v37, v38);
  v218 = 18981;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v39, v40, v41, v42, v43, v44);
  v218 = 19494;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v45, v46, v47, v48, v49, v50);
  v218 = 20007;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v51, v52, v53, v54, v55, v56);
  v218 = 20520;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v57, v58, v59, v60, v61, v62);
  v218 = 21033;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v63, v64, v65, v66, v67, v68);
  v218 = 21546;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v69, v70, v71, v72, v73, v74);
  v218 = 22059;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v75, v76, v77, v78, v79, v80);
  v218 = 22572;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v81, v82, v83, v84, v85, v86);
  v218 = 23085;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v87, v88, v89, v90, v91, v92);
  v218 = 23598;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v93, v94, v95, v96, v97, v98);
  v218 = 24111;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v99, v100, v101, v102, v103, v104);
  v218 = 24624;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v105, v106, v107, v108, v109, v110);
  v218 = 25137;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v111, v112, v113, v114, v115, v116);
  v218 = 25650;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v117, v118, v119, v120, v121, v122);
  v218 = 26163;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v123, v124, v125, v126, v127, v128);
  v218 = 26676;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v129, v130, v131, v132, v133, v134);
  v218 = 27189;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v135, v136, v137, v138, v139, v140);
  v218 = 27702;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v141, v142, v143, v144, v145, v146);
  v218 = 28215;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v147, v148, v149, v150, v151, v152);
  v218 = 28728;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v153, v154, v155, v156, v157, v158);
  v218 = 29241;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v159, v160, v161, v162, v163, v164);
  v218 = 29754;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v165, v166, v167, v168, v169, v170);
  v218 = 30267;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v171, v172, v173, v174, v175, v176);
  v218 = 30780;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v177, v178, v179, v180, v181, v182);
  v218 = 31293;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v183, v184, v185, v186, v187, v188);
  v218 = 31806;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v189, v190, v191, v192, v193, v194);
  v218 = 32319;
  JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v219, &v218, v195, v196, v197, v198, v199, v200);
  v206 = v221;
  if ((v221 & 0x7F) != 0x7F)
  {
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v219, v220 | ((unint64_t)(v221 >> 8) << 34), (char)((v221 & 0x7F) - 32), v201, v202, v203, v204, v205);
    v206 = 127;
    v221 = 127;
  }
  v207 = 2;
  for (i = 1024; i != 0x4000; i += 512)
  {
    if (((1 << v207) & 0xE0040000) != 0)
      goto LABEL_7;
    v209 = i | v207;
    v210 = v206 & 0x7F;
    if ((_DWORD)v210 != 127)
    {
      v211 = (v209 >> 6) & 0x7FFFFFFF8;
      v212 = v206 >> 6;
      v213 = (v206 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      if (v211 == v213 + 8)
      {
        v214 = v219;
        v215 = v220;
        v216 = v207;
      }
      else
      {
        v214 = v219;
        v215 = v220;
        if (v213 != v211 + 8)
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)v219, v220 | ((unint64_t)((unint64_t)v206 >> 8) << 34), v210, v201, v202, v203, v204, v205);
          goto LABEL_6;
        }
        v212 = v209 >> 6;
        v216 = v206 & 0x7F;
        LOBYTE(v210) = v207;
      }
      JSC::MacroAssemblerARM64::loadPair64(v214, (char)v215, v212 & 0xFFFFFFFC, (char)v210, v216, v203, v204, v205);
      v209 = 127;
    }
LABEL_6:
    v221 = v209;
    v206 = v209;
LABEL_7:
    ++v207;
  }
  v217 = v206 & 0x7F;
  if ((_DWORD)v217 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v219, v220 | ((unint64_t)((unint64_t)v206 >> 8) << 34), v217, v201, v202, v203, v204, v205);
    v221 = 127;
  }
  JSC::MacroAssemblerARM64::loadPair64(this, 0, 0, 0, 1, v203, v204, v205);
}

_QWORD *JSC::FTL::SlowPathCallContext::SlowPathCallContext(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  uint64x2_t v18;
  int8x16_t v19;
  int8x8_t v20;
  uint64x2_t v21;
  uint32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;

  v8 = result;
  *result = 0;
  result[1] = 0;
  result[2] = a3;
  *((_DWORD *)result + 6) = a4;
  *((_BYTE *)result + 28) = a5;
  result[6] = 0;
  if (a2)
  {
    v9 = 0;
    do
    {
      v9 |= a2 & -a2;
      a2 &= a2 - 1;
    }
    while (a2);
    v10 = v9 & 0xFFFF00FF0003FFFFLL;
  }
  else
  {
    v10 = 0;
  }
  if (a5 != 255)
  {
    if ((a5 & 0x7Fu) >= 0x40)
      goto LABEL_28;
    v10 &= ~(1 << (a5 & 0x7F));
  }
  if (a4 <= 8)
    v11 = 8;
  else
    v11 = a4;
  if (a4 >= 8)
    v12 = 8;
  else
    v12 = a4;
  v13 = (v11 - 8);
  result[4] = 8 * v13;
  if (v12)
  {
    v14 = 0;
    v15 = (uint32x2_t)vdup_n_s32(v12 - 1);
    v16 = vadd_s32(vdup_n_s32(v12), (int32x2_t)0xFFFFFFFF00000000);
    v17 = 0uLL;
    v18 = (uint64x2_t)vdupq_n_s64(1uLL);
    do
    {
      v19 = v17;
      v20 = vand_s8((int8x8_t)vadd_s32(v16, (int32x2_t)-1), (int8x8_t)0x3F0000003FLL);
      v21.i64[0] = v20.u32[0];
      v21.i64[1] = v20.u32[1];
      v17 = vorrq_s8((int8x16_t)vshlq_u64(v18, v21), v19);
      v14 += 2;
      v16 = vadd_s32(v16, (int32x2_t)0x100000001);
    }
    while ((((_BYTE)v12 + 1) & 0x1E) != v14);
    v22 = vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v14 - 2), (int8x8_t)0x100000000), v15);
    v23.i64[0] = v22.i32[0];
    v23.i64[1] = v22.i32[1];
    v24 = vbslq_s8(v23, v19, v17);
    v25 = vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)&v25 | (a5 != 255);
  if (a6 != 255)
  {
    if ((a6 & 0x40) == 0)
    {
      v26 |= 1 << a6;
      goto LABEL_19;
    }
LABEL_28:
    __break(1u);
    return result;
  }
LABEL_19:
  v27 = v26 & v10;
  result[1] = v27;
  v28.i64[0] = v10;
  v28.i64[1] = v27;
  *(uint32x2_t *)v28.i8 = vpadal_u16(vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vshrn_n_s64(v28, 0x20uLL)))), vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)__PAIR64__(v27, v10))));
  v29 = 8 * (v28.u32[1] + v13);
  result[5] = ((_DWORD)v29 + 8 * (v28.i32[0] - v28.i32[1]) + 23) & 0xFFFFFFF0;
  JSC::MacroAssemblerARM64::sub64(a3, 31, ((_DWORD)v29 + 8 * (v28.i32[0] - v28.i32[1]) + 23) & 0xFFFFFFF0, 31, a5, a6, a7, a8);
  v35 = 0;
  for (i = 15; i != -1; --i)
  {
    if ((v8[1] & (1 << i)) != 0)
    {
      JSC::MacroAssemblerARM64::store64(v8[2], (char)i, ((v8[4] << 32) + (v35 << 35)) | 0x1F, v30, v31, v32, v33, v34);
      v35 = (v35 + 1);
      v10 &= ~(1 << i);
    }
  }
  v8[6] = v10;
  v8[7] = v29;
  return v8;
}

void JSC::FTL::SlowPathCallContext::~SlowPathCallContext(JSC::FTL::SlowPathCallContext *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int i;
  uint64_t v17;

  v9 = *((unsigned __int8 *)this + 28);
  if (v9 != 255 && *((_BYTE *)this + 28))
  {
    v10 = *((_QWORD *)this + 2);
    if (v9 == 31)
      v11 = -1862270945;
    else
      v11 = v9 | 0xAA0003E0;
    v14 = *(_DWORD *)(v10 + 200);
    v13 = (unsigned int *)(v10 + 200);
    v12 = v14;
    if (v14 + 4 > *(v13 - 2))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*((_QWORD *)v13 - 18) + v12) = v11;
    *v13 += 4;
  }
  v15 = 0;
  for (i = 15; i != -1; --i)
  {
    if (((*((_QWORD *)this + 1) >> i) & 1) != 0)
    {
      v17 = (v15 + 1);
      JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 2), ((*((_QWORD *)this + 4) << 32) + (v15 << 35)) | 0x1F, (char)i, a4, a5, a6, a7, a8);
      v15 = v17;
    }
  }
  JSC::MacroAssemblerARM64::add64(*((_QWORD *)this + 2), *((unsigned int *)this + 10), 31, 31, a5, a6, a7, a8);
}

void JSC::FTL::SlowPathCallContext::makeCall(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::AssemblerBuffer *v18;
  unsigned int i;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  JSC::AssemblerBuffer *v48;
  JSC::AssemblerBuffer *v49;
  JSC::AssemblerBuffer *v50;
  uint64_t v51;
  JSC::AssemblerBuffer *v52;
  JSC::AssemblerBuffer *v53;
  uint64_t v54;
  JSC::AssemblerBuffer *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if ((_BYTE)word_1ECF4C428)
  {
    v47 = *(_DWORD *)(a1 + 24);
    if (v47 >= 8)
      v13 = 8;
    else
      v13 = v47;
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  if (a3)
    v16 = 512;
  else
    v16 = 768;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (JSC::AssemblerBuffer *)(v17 + 56);
  for (i = *(_DWORD *)(v17 + 200); (signed int)i < *(_DWORD *)(v17 + 52); *(_DWORD *)(v17 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(v17 + 192))
    {
      v52 = v18;
      v59 = v14;
      JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
      v18 = v52;
      v14 = v59;
      i = *(_DWORD *)(v17 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v17 + 56) + i) = -721215457;
    i = *(_DWORD *)(v17 + 200) + 4;
  }
  if (!*(_BYTE *)(v17 + 212))
    goto LABEL_44;
  v60 = a2;
  *(_DWORD *)(*(_QWORD *)(v17 + 264) + 208) &= ~*(_DWORD *)(v17 + 288);
  v20 = *(_BYTE *)(v17 + 272) & 0x1F;
  if (i + 4 > *(_DWORD *)(v17 + 192))
  {
    v48 = v18;
    v56 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
    v18 = v48;
    v14 = v56;
    i = *(_DWORD *)(v17 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v17 + 56) + i) = v20 | 0xD2800000;
  v21 = *(_DWORD *)(v17 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(v17 + 200) = v21 + 4;
  if ((v21 + 8) > *(_DWORD *)(v17 + 192))
  {
    v55 = v18;
    v57 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
    v18 = v55;
    v14 = v57;
    v22 = *(_DWORD *)(v17 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v17 + 56) + v22) = v20 | 0xF2A00000;
  v23 = *(_DWORD *)(v17 + 200);
  v24 = v23 + 4;
  *(_DWORD *)(v17 + 200) = v23 + 4;
  if ((v23 + 8) > *(_DWORD *)(v17 + 192))
  {
    v49 = v18;
    v58 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
    v18 = v49;
    v14 = v58;
    v24 = *(_DWORD *)(v17 + 200);
  }
  v25 = v13 | v16;
  *(_DWORD *)(*(_QWORD *)(v17 + 56) + v24) = v20 | 0xF2C00000;
  v26 = *(_DWORD *)(v17 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(v17 + 200) = v26 + 4;
  *(_DWORD *)(v17 + 208) = 0;
  if ((v26 + 8) > *(_DWORD *)(v17 + 192))
  {
    v50 = v18;
    v51 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
    v18 = v50;
    v14 = v51;
    v27 = *(_DWORD *)(v17 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v17 + 56) + v27) = -700513792;
  v28 = v25 | (v15 << 10);
  v29 = *(_DWORD *)(v17 + 200) + 4;
  for (*(_DWORD *)(v17 + 200) = v29; v29 < *(_DWORD *)(v17 + 52); *(_DWORD *)(v17 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(v17 + 192))
    {
      v53 = v18;
      v54 = v14;
      JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
      v18 = v53;
      v14 = v54;
      v29 = *(_DWORD *)(v17 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v17 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(v17 + 200) + 4;
  }
  *(_DWORD *)a9 = v29;
  *(_DWORD *)(a9 + 4) = 1;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = v28;
  *(_QWORD *)(a9 + 24) = v14;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v31 + 8) = 1;
  *(_QWORD *)v31 = off_1E35902B0;
  *(_DWORD *)(v31 + 16) = v29;
  *(_DWORD *)(v31 + 20) = 1;
  v32 = *(_QWORD *)(a9 + 24);
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(a9 + 8);
  *(_QWORD *)(v31 + 40) = v32;
  *(_QWORD *)(v31 + 48) = v60;
  v33 = *(unsigned int *)(v30 + 244);
  if ((_DWORD)v33 != *(_DWORD *)(v30 + 240))
  {
    v34 = (uint64_t *)(*(_QWORD *)(v30 + 232) + 8 * v33);
    goto LABEL_19;
  }
  v35 = v33 + (v33 >> 2);
  v36 = v35 >= 0x10 ? v35 + 1 : 16;
  v37 = v36 <= v33 + 1 ? v33 + 1 : v36;
  if (v37 >> 29)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x198597D7CLL);
  }
  v38 = *(const void **)(v30 + 232);
  v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
  *(_DWORD *)(v30 + 240) = v37;
  *(_QWORD *)(v30 + 232) = v39;
  memcpy(v39, v38, 8 * v33);
  if (v38)
  {
    if (*(const void **)(v30 + 232) == v38)
    {
      *(_QWORD *)(v30 + 232) = 0;
      *(_DWORD *)(v30 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v38, v40, v41, v42, v43, v44, v45, v46);
  }
  v33 = *(unsigned int *)(v30 + 244);
  v34 = (uint64_t *)(*(_QWORD *)(v30 + 232) + 8 * v33);
LABEL_19:
  *v34 = v31;
  *(_DWORD *)(v30 + 244) = v33 + 1;
}

void JSC::FTL::SlowPathCallContext::makeCall(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::AssemblerBuffer *v17;
  unsigned int i;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  JSC::AssemblerBuffer *v48;
  uint64_t v49;
  JSC::AssemblerBuffer *v50;
  JSC::AssemblerBuffer *v51;
  JSC::AssemblerBuffer *v52;
  uint64_t v53;
  JSC::AssemblerBuffer *v54;
  uint64_t v55;
  JSC::AssemblerBuffer *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if ((_BYTE)word_1ECF4C428)
  {
    v47 = *(_DWORD *)(a1 + 24);
    if (v47 >= 8)
      v47 = 8;
    v13 = v47 | 0x300;
  }
  else
  {
    v13 = 768;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = (JSC::AssemblerBuffer *)(v16 + 56);
  for (i = *(_DWORD *)(v16 + 200); (signed int)i < *(_DWORD *)(v16 + 52); *(_DWORD *)(v16 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(v16 + 192))
    {
      v48 = v17;
      v49 = v14;
      JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
      v17 = v48;
      v14 = v49;
      i = *(_DWORD *)(v16 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v16 + 56) + i) = -721215457;
    i = *(_DWORD *)(v16 + 200) + 4;
  }
  if (!*(_BYTE *)(v16 + 212))
    goto LABEL_41;
  v19 = a2;
  *(_DWORD *)(*(_QWORD *)(v16 + 264) + 208) &= ~*(_DWORD *)(v16 + 288);
  v20 = *(_BYTE *)(v16 + 272) & 0x1F;
  if (i + 4 > *(_DWORD *)(v16 + 192))
  {
    v50 = v17;
    v57 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
    v17 = v50;
    v14 = v57;
    i = *(_DWORD *)(v16 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v16 + 56) + i) = v20 | 0xD2800000;
  v21 = *(_DWORD *)(v16 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(v16 + 200) = v21 + 4;
  if ((v21 + 8) > *(_DWORD *)(v16 + 192))
  {
    v56 = v17;
    v58 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
    v17 = v56;
    v14 = v58;
    v22 = *(_DWORD *)(v16 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v16 + 56) + v22) = v20 | 0xF2A00000;
  v23 = *(_DWORD *)(v16 + 200);
  v24 = v23 + 4;
  *(_DWORD *)(v16 + 200) = v23 + 4;
  if ((v23 + 8) > *(_DWORD *)(v16 + 192))
  {
    v51 = v17;
    v59 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
    v17 = v51;
    v14 = v59;
    v24 = *(_DWORD *)(v16 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v16 + 56) + v24) = v20 | 0xF2C00000;
  v25 = *(_DWORD *)(v16 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(v16 + 200) = v25 + 4;
  *(_DWORD *)(v16 + 208) = 0;
  if ((v25 + 8) > *(_DWORD *)(v16 + 192))
  {
    v52 = v17;
    v53 = v14;
    JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
    v17 = v52;
    v14 = v53;
    v26 = *(_DWORD *)(v16 + 200);
  }
  v27 = HIDWORD(a3);
  *(_DWORD *)(*(_QWORD *)(v16 + 56) + v26) = -700513792;
  v28 = v13 | (v15 << 10);
  v29 = *(_DWORD *)(v16 + 200) + 4;
  for (*(_DWORD *)(v16 + 200) = v29; v29 < *(_DWORD *)(v16 + 52); *(_DWORD *)(v16 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(v16 + 192))
    {
      v54 = v17;
      v55 = v14;
      JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
      v17 = v54;
      v14 = v55;
      v29 = *(_DWORD *)(v16 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v16 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(v16 + 200) + 4;
  }
  *(_DWORD *)a9 = v29;
  *(_DWORD *)(a9 + 4) = 1;
  *(_QWORD *)(a9 + 8) = v27;
  *(_QWORD *)(a9 + 16) = v28;
  *(_QWORD *)(a9 + 24) = v14;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v31 + 8) = 1;
  *(_QWORD *)v31 = off_1E35902D8;
  *(_DWORD *)(v31 + 16) = v29;
  *(_DWORD *)(v31 + 20) = 1;
  v32 = *(_QWORD *)(a9 + 24);
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(a9 + 8);
  *(_QWORD *)(v31 + 40) = v32;
  *(_QWORD *)(v31 + 48) = v19;
  v33 = *(unsigned int *)(v30 + 244);
  if ((_DWORD)v33 != *(_DWORD *)(v30 + 240))
  {
    v34 = (uint64_t *)(*(_QWORD *)(v30 + 232) + 8 * v33);
    goto LABEL_25;
  }
  v35 = v33 + (v33 >> 2);
  v36 = v35 >= 0x10 ? v35 + 1 : 16;
  v37 = v36 <= v33 + 1 ? v33 + 1 : v36;
  if (v37 >> 29)
  {
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x198598158);
  }
  v38 = *(const void **)(v30 + 232);
  v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
  *(_DWORD *)(v30 + 240) = v37;
  *(_QWORD *)(v30 + 232) = v39;
  memcpy(v39, v38, 8 * v33);
  if (v38)
  {
    if (*(const void **)(v30 + 232) == v38)
    {
      *(_QWORD *)(v30 + 232) = 0;
      *(_DWORD *)(v30 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v38, v40, v41, v42, v43, v44, v45, v46);
  }
  v33 = *(unsigned int *)(v30 + 244);
  v34 = (uint64_t *)(*(_QWORD *)(v30 + 232) + 8 * v33);
LABEL_25:
  *v34 = v31;
  *(_DWORD *)(v30 + 244) = v33 + 1;
}

uint64_t JSC::FTL::SlowPathCallKey::dump(JSC::FTL::SlowPathCallKey *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  int8x8_t v5;
  const void *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int32x2_t v12;
  uint32x2_t v13;
  int8x16_t v14;
  uint64x2_t v15;
  int8x16_t v16;
  int8x8_t v17;
  uint64x2_t v18;
  uint32x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x8_t v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  int8x8_t v25;
  uint64_t v26;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = 0;
    do
    {
      *(_QWORD *)&v5 |= v4 & -v4;
      v4 &= v4 - 1;
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  v25 = v5;
  v26 = 0;
  v6 = *(const void **)this;
  v7 = *((_QWORD *)this + 1) >> 10;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "<usedRegisters = ");
  JSC::RegisterSet::dump((JSC::RegisterSet *)&v25, v8);
  WTF::PrintStream::printf(v8, "%s", ", offset = ");
  WTF::PrintStream::printf(v8, "%lu", v7);
  WTF::PrintStream::printf(v8, "%s", ", indirectOffset = ");
  WTF::PrintStream::printf(v8, "%d", *(_DWORD *)this);
  WTF::PrintStream::printf(v8, "%s", ", callTarget = ");
  WTF::PrintStream::printf(v8, "%p", v6);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (!(_BYTE)word_1ECF4C428)
    goto LABEL_14;
  v10 = *((_QWORD *)this + 1);
  if (!(_BYTE)v10)
  {
    v22 = 0;
LABEL_13:
    v25 = v22;
    v26 = 0;
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v23, "%s", ", argumentRegisters = ");
    JSC::RegisterSet::dump((JSC::RegisterSet *)&v25, v23);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_14:
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v24, "%s", ">");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  if (*((_QWORD *)this + 1) - 65 >= 0xFFFFFFC0)
  {
    v11 = 0;
    v12 = (int32x2_t)0x100000000;
    v13 = (uint32x2_t)vdup_n_s32(v10 - 1);
    v14 = 0uLL;
    v15 = (uint64x2_t)vdupq_n_s64(1uLL);
    do
    {
      v16 = v14;
      v17 = vand_s8((int8x8_t)v12, (int8x8_t)0x3F0000003FLL);
      v18.i64[0] = v17.u32[0];
      v18.i64[1] = v17.u32[1];
      v14 = vorrq_s8((int8x16_t)vshlq_u64(v15, v18), v16);
      v11 += 2;
      v12 = vadd_s32(v12, (int32x2_t)0x200000002);
    }
    while (((v10 + 1) & 0x1FE) != v11);
    v19 = vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v11 - 2), (int8x8_t)0x100000000), v13);
    v20.i64[0] = v19.i32[0];
    v20.i64[1] = v19.i32[1];
    v21 = vbslq_s8(v20, v16, v14);
    v22 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void JSC::FTL::SnippetParams::addSlowPathCallImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  const void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  JSC::AssemblerBuffer *v75;
  JSC::AssemblerBuffer *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v82;
  uint64_t v83;
  char v84;
  WTF *v85;
  unsigned int v86;
  _BYTE v87[24];
  _QWORD *v88;
  unsigned int v89;
  unsigned int v90;
  _QWORD v91[5];
  _OWORD *v92;
  int v93;
  int v94;
  void *v95;
  int v96;
  int v97;
  void *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  __int16 v106;
  int v107;
  uint64_t v108[19];

  v8 = a6;
  v84 = a5;
  v13 = a1[8];
  v14 = a1[9];
  v15 = a1[10];
  if ((v15 & 1) != 0)
  {
    v71 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v72 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
        ? (v73 = (_DWORD)v72 == -1)
        : (v73 = 1),
          v73))
    {
      v74 = 2;
    }
    else if (v72 >> 28)
    {
      v82 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v82 = v71;
      *(_DWORD *)(v82 + 8) = v72;
      v74 = 1;
      v71 = v82;
    }
    else
    {
      v74 = v71;
      v71 = v72 << 36;
    }
    v15 = v71 | v74;
  }
  v16 = a1[11];
  if (v16)
  {
    do
      v17 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v17 + 1, (unsigned int *)v16));
  }
  v18 = *(unsigned int *)(a2 + 12);
  v85 = (WTF *)v87;
  v86 = v18;
  if (v18 < 3)
  {
    v19 = v87;
    if (!(_DWORD)v18)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v18 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x1985989DCLL);
  }
  v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
  v85 = (WTF *)v19;
  LODWORD(v18) = *(_DWORD *)(a2 + 12);
  if ((_DWORD)v18)
  {
LABEL_9:
    v20 = *(_QWORD *)a2;
    v21 = *(_QWORD *)a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
LABEL_11:
  v22 = *(_DWORD *)(a3 + 200);
  if (v22 < *(_DWORD *)(a3 + 52))
  {
    v75 = (JSC::AssemblerBuffer *)(a3 + 56);
    do
    {
      if ((v22 + 4) > *(_DWORD *)(a3 + 192))
      {
        v76 = v75;
        JSC::AssemblerBuffer::outOfLineGrow(v75, a2, a3, a4, a5, a6, a7, a8);
        v75 = v76;
        v22 = *(_DWORD *)(a3 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v22) = -721215457;
      v22 = *(_DWORD *)(a3 + 200) + 4;
      *(_DWORD *)(a3 + 200) = v22;
    }
    while (v22 < *(_DWORD *)(a3 + 52));
  }
  *(_DWORD *)(a3 + 208) = 0;
  v23 = v86;
  v24 = v91;
  v88 = v91;
  v89 = 2;
  v90 = v86;
  if (v86 >= 3)
  {
    if (v86 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1985989E4);
    }
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v86));
    v89 = 12 * v86 / 0xC;
    v88 = v24;
    v23 = v86;
  }
  if (v23)
  {
    v25 = v85;
    v26 = (WTF *)((char *)v85 + 12 * v23);
    do
    {
      *(_DWORD *)v24 = *(_DWORD *)v25;
      *(_QWORD *)((char *)v24 + 4) = *(_QWORD *)((char *)v25 + 4);
      v25 = (WTF *)((char *)v25 + 12);
      v24 = (_QWORD *)((char *)v24 + 12);
    }
    while (v25 != v26);
  }
  v91[3] = v13;
  v91[4] = *(_QWORD *)v14;
  v27 = *(unsigned int *)(v14 + 20);
  v92 = 0;
  v93 = 0;
  v94 = v27;
  if ((_DWORD)v27)
  {
    if (v27 >> 28)
      goto LABEL_87;
    v28 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v27));
    v93 = v27;
    v92 = v28;
    v29 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v29)
    {
      v30 = *(__int128 **)(v14 + 8);
      v31 = 16 * v29;
      do
      {
        v32 = *v30++;
        *v28++ = v32;
        v31 -= 16;
      }
      while (v31);
    }
  }
  v33 = (WTF *)*(unsigned int *)(v14 + 36);
  v95 = 0;
  v96 = 0;
  v97 = (int)v33;
  if ((_DWORD)v33)
  {
    v34 = (void *)WTF::fastMalloc(v33);
    v96 = (int)v33;
    v95 = v34;
    memcpy(v34, *(const void **)(v14 + 24), *(unsigned int *)(v14 + 36));
  }
  v35 = (WTF *)*(unsigned int *)(v14 + 52);
  v98 = 0;
  v99 = 0;
  v100 = (int)v35;
  if ((_DWORD)v35)
  {
    v70 = (void *)WTF::fastMalloc(v35);
    v99 = (int)v35;
    v98 = v70;
    memcpy(v70, *(const void **)(v14 + 40), *(unsigned int *)(v14 + 52));
  }
  v101 = *(_QWORD *)(v14 + 56);
  v36 = v15;
  if ((v15 & 1) != 0)
  {
    v77 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || (v78 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v78 == 0x3FFFFFFF)
      || (_DWORD)v78 == -1)
    {
      v79 = 2;
    }
    else if (v78 >> 28)
    {
      v83 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v83 = v77;
      *(_DWORD *)(v83 + 8) = v78;
      v79 = 1;
      v77 = v83;
    }
    else
    {
      v79 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v77 = v78 << 36;
    }
    v36 = v77 | v79;
  }
  v102 = v36;
  if (v16)
  {
    do
      v37 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v37 + 1, (unsigned int *)v16));
  }
  v103 = v16;
  v104 = a4;
  v105 = v84;
  v106 = v8;
  v107 = v22;
  v38 = *(_QWORD *)(v14 + 56);
  _ZZN3JSC3FTLL8dispatchIPFNS_24ExceptionOperationResultIxEEPNS_14JSGlobalObjectEPvENS_11JSValueRegsENSt3__15tupleIJNS_14ARM64Registers10RegisterIDESD_EEEJLm0ELm1EEEEvRNS_12CCallHelpersEPNS0_5StateERKNS_2B324StackmapGenerationParamsENS_10CodeOriginEN3WTF3BoxINS_22AbstractMacroAssemblerINS_14ARM64AssemblerEE8JumpListEEEST_T_T0_T1_NSA_16integer_sequenceImJXspT2_EEEEENUlSG_E_C1ERKS10_((uint64_t)v108, (uint64_t *)&v88);
  v39 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)(v39 + 8) = 1;
  *(_QWORD *)v39 = off_1E3590300;
  _ZZN3JSC3FTLL8dispatchIPFNS_24ExceptionOperationResultIxEEPNS_14JSGlobalObjectEPvENS_11JSValueRegsENSt3__15tupleIJNS_14ARM64Registers10RegisterIDESD_EEEJLm0ELm1EEEEvRNS_12CCallHelpersEPNS0_5StateERKNS_2B324StackmapGenerationParamsENS_10CodeOriginEN3WTF3BoxINS_22AbstractMacroAssemblerINS_14ARM64AssemblerEE8JumpListEEEST_T_T0_T1_NSA_16integer_sequenceImJXspT2_EEEEENUlSG_E_C1ERKS10_(v39 + 16, v108);
  v47 = *(unsigned int *)(v38 + 12);
  if ((_DWORD)v47 != *(_DWORD *)(v38 + 8))
  {
    v48 = (uint64_t *)(*(_QWORD *)v38 + 8 * v47);
    goto LABEL_32;
  }
  v65 = v47 + (v47 >> 2);
  if (v65 >= 0x10)
    v66 = v65 + 1;
  else
    v66 = 16;
  if (v66 <= v47 + 1)
    v67 = v47 + 1;
  else
    v67 = v66;
  if (v67 >> 29)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x1985989D4);
  }
  v68 = *(const void **)v38;
  v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
  *(_DWORD *)(v38 + 8) = v67;
  *(_QWORD *)v38 = v69;
  memcpy(v69, v68, 8 * v47);
  if (v68)
  {
    if (*(const void **)v38 == v68)
    {
      *(_QWORD *)v38 = 0;
      *(_DWORD *)(v38 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v68, v40, v41, v42, v43, v44, v45, v46);
  }
  v47 = *(unsigned int *)(v38 + 12);
  v48 = (uint64_t *)(*(_QWORD *)v38 + 8 * v47);
LABEL_32:
  *v48 = v39;
  *(_DWORD *)(v38 + 12) = v47 + 1;
  if (v87 != (_BYTE *)v85 && v85)
    WTF::fastFree((unint64_t)v85, v56, v57, v58, v59, v60, v61, v62);
  if (!v16)
    goto LABEL_38;
  do
  {
    v63 = __ldaxr((unsigned int *)v16);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v16));
  if (v64)
  {
LABEL_38:
    if ((v15 & 1) == 0)
      return;
    goto LABEL_74;
  }
  atomic_store(1u, (unsigned int *)v16);
  v80 = *(_QWORD *)(v16 + 8);
  if (v16 + 24 != v80 && v80 != 0)
  {
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 16) = 0;
    WTF::fastFree(v80, v56, v57, v58, v59, v60, v61, v62);
  }
  WTF::fastFree(v16, v56, v57, v58, v59, v60, v61, v62);
  if ((v15 & 1) != 0)
  {
LABEL_74:
    if ((v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  }
}

JSC::FTL::State *JSC::FTL::State::State(JSC::FTL::State *this, JSC::DFG::Graph *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  JSC::B3::Procedure *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::B3::Procedure *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  JSC::FTL::ForOSREntryJITCode *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v4 = 0xFFFFFFFF00000001;
  *((_QWORD *)this + 7) = v4;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v5 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 16);
  if (v5 == 4)
  {
    v6 = WTF::fastMalloc((WTF *)0x158);
    *(_DWORD *)(v6 + 8) = 1;
    *(_WORD *)(v6 + 12) = 5;
    *(_BYTE *)(v6 + 14) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = off_1E358FFF0;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_QWORD *)(v6 + 56) = 0;
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v7 = 1;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v6 + 64) = v7;
    *(_QWORD *)(v6 + 216) = 0;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_QWORD *)(v6 + 200) = 0;
    *(_QWORD *)(v6 + 224) = -1;
    *(_WORD *)(v6 + 232) = 256;
    *(_BYTE *)(v6 + 234) = 0;
    *(_OWORD *)(v6 + 240) = 0u;
    *(_OWORD *)(v6 + 256) = 0u;
    *(_OWORD *)(v6 + 272) = 0u;
    *(_OWORD *)(v6 + 288) = 0u;
    *(_OWORD *)(v6 + 304) = 0u;
    *(_OWORD *)(v6 + 320) = 0u;
    *(_QWORD *)(v6 + 336) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (!v8)
      goto LABEL_7;
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = --v10 == 0;
    }
    while (__stlxr(v10, v9));
  }
  else
  {
    if (v5 != 5)
    {
      __break(0xC471u);
      JUMPOUT(0x198598CDCLL);
    }
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x170);
    v38 = JSC::FTL::ForOSREntryJITCode::ForOSREntryJITCode((JSC::FTL::ForOSREntryJITCode *)v8);
    JSC::FTL::ForOSREntryJITCode::initializeEntryBuffer(v38, *((JSC::VM **)a2 + 2), *(unsigned int *)(*((_QWORD *)a2 + 5) + 20), v39, v40, v41, v42, v43);
    v8[90] = *(_DWORD *)(*((_QWORD *)a2 + 3) + 108);
    v44 = v8 + 2;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    v46 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v8;
    if (v46)
    {
      v47 = v46 + 2;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v46 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 32))(v46);
      }
    }
    do
    {
      v50 = __ldaxr(v44);
      v11 = --v50 == 0;
    }
    while (__stlxr(v50, v44));
  }
  if (v11)
  {
    atomic_store(1u, v8 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 32))(v8);
  }
LABEL_7:
  v12 = *((_QWORD *)a2 + 3);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E35900A8;
  v13[1] = v12;
  v13[2] = 0;
  v13[3] = 0;
  v14 = *(_QWORD *)(v12 + 120);
  *(_QWORD *)(v12 + 120) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 4) = *(_QWORD *)(*((_QWORD *)a2 + 3) + 120);
  v15 = (JSC::B3::Procedure *)WTF::fastMalloc((WTF *)0xD8);
  JSC::B3::Procedure::Procedure(v15, 0);
  v23 = (JSC::B3::Procedure *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v15;
  if (v23)
  {
    JSC::B3::Procedure::~Procedure(v23, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    v15 = (JSC::B3::Procedure *)*((_QWORD *)this + 1);
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 93123))
  {
    JSC::B3::Procedure::setNeedsPCToOriginMap((uint64_t)v15);
    v15 = (JSC::B3::Procedure *)*((_QWORD *)this + 1);
  }
  v32 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)v32 = off_1E3590328;
  v33 = (unsigned int *)*((_QWORD *)v15 + 21);
  *((_QWORD *)v15 + 21) = v32;
  if (v33)
  {
    v34 = v33 + 2;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 1) + 176) = a2;
  return this;
}

void JSC::FTL::State::dumpDisassembly(_QWORD *a1, WTF::PrintStream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::PrintStream *v12;
  const char *v13;
  WTF::PrintStream *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  _QWORD v24[6];
  _QWORD v25[6];
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(uint64_t **)(*(_QWORD *)(a1[1] + 160) + 312);
  v9 = *(_QWORD *)(*a1 + 32);
  v10 = *(int *)(*(_QWORD *)(*a1 + 24) + 16);
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 80) + 12);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v12, "%s", "Generated ");
  if (v10 >= 6)
  {
    __break(0xC471u);
  }
  else
  {
    v13 = off_1E3590368[v10];
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v14, "%s", v13);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    WTF::PrintStream::printf(v12, "%s", " code for ");
    JSC::CodeBlock::dumpAssumingJITType(v9);
    WTF::PrintStream::printf(v12, "%s", ", instructions size = ");
    WTF::PrintStream::printf(v12, "%u", v11);
    WTF::PrintStream::printf(v12, "%s", ":\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v30 = 0;
    v31 = 0;
    v28 = 0;
    v29 = 0;
    v26 = "b3            ";
    v27 = "DFG     ";
    v25[0] = &v30;
    v25[1] = a4;
    v25[2] = &v28;
    v25[3] = a1;
    v25[4] = a2;
    v25[5] = &v27;
    v24[0] = &v31;
    v24[1] = v25;
    v24[2] = &v29;
    v24[3] = a2;
    v24[4] = &v26;
    v24[5] = a1;
    v22[0] = WTF::ScopedLambdaFunctor<void ()(JSC::B3::Air::Inst &),JSC::FTL::State::dumpDisassembly(WTF::PrintStream &,JSC::LinkBuffer &,WTF::ScopedLambda<void ()(JSC::DFG::Node *)> const&)::$_2>::implFunction;
    v22[1] = v22;
    v22[2] = &v23;
    v22[3] = v24;
    v23 = 0;
    JSC::B3::Air::Disassembler::dump(v8, *(_QWORD *)(a1[1] + 160), a2, (_QWORD *)a3, "Air               ", "asm                 ", (uint64_t)v22);
    *(_BYTE *)(a3 + 170) = 1;
    if (v28)
      WTF::fastFree(v28 - 16, v15, v16, v17, v18, v19, v20, v21);
    if (v29)
      WTF::fastFree(v29 - 16, v15, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::FTL::State::~State(JSC::FTL::State *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  JSC::LinkBuffer *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  JSC::B3::Procedure *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v38 = *(_QWORD *)(v13 + 32);
      if ((v38 & 1) != 0)
      {
        v40 = v38 & 0xFFFFFFFF8;
        if (v40)
        {
          v42 = v13;
          WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
          v13 = v42;
        }
      }
      v39 = *(_QWORD *)(v13 + 24);
      if ((v39 & 1) != 0)
      {
        v41 = v39 & 0xFFFFFFFF8;
        if (v41)
        {
          v43 = v13;
          WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
          v13 = v43;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = (JSC::LinkBuffer *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    JSC::LinkBuffer::~LinkBuffer(v16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  v25 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 32))(v25);
    }
  }
  v29 = (JSC::B3::Procedure *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v29)
  {
    JSC::B3::Procedure::~Procedure(v29, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
  }
}

double JSC::FTL::State::addStructureStubInfo(JSC::FTL::State *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *((_QWORD *)this + 3);
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v2 = 2;
  *(_DWORD *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 12) = 0u;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_DWORD *)(v2 + 44) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = -1;
  *(_WORD *)(v2 + 120) = -1;
  *(_QWORD *)&result = 0x1000000010000;
  *(_DWORD *)(v2 + 122) = 0x10000;
  *(_BYTE *)(v2 + 126) = 0;
  *(_BYTE *)(v2 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 129) &= 0xFC00u;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 136) = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = v2;
  *(_WORD *)(v2 + 129) = *(_WORD *)(v2 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  return result;
}

void JSC::FTL::SnippetParams::~SnippetParams(JSC::FTL::SnippetParams *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FTL::SnippetParams::~SnippetParams(this, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v16 && v16 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 10);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = off_1E35747E0;
  v13 = *((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t *WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v13 - 4);
        *(_QWORD *)a9 = v21;
        *(_QWORD *)(a9 + 8) = v13 + 16 * v32;
        *(_BYTE *)(a9 + 16) = 0;
        v21[1] = *a3;
        return result;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v11;
  if (*v11)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_17;
    goto LABEL_19;
  }
  if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v31 = 8;
LABEL_22:
      result = (uint64_t *)WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(v11, v31, (uint64_t)v21, a4, a5, a6, a7, a8);
      v21 = result;
      v27 = *v11;
      if (*v11)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
      goto LABEL_17;
    }
LABEL_19:
    v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
    goto LABEL_22;
  }
LABEL_17:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v27 + 16 * v30;
  *(_BYTE *)(a9 + 16) = 1;
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::Output::doubleTrunc(JSC::B3::Value *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = (32 * (v10 & 0x7F) - 1024) | ((v11 & 0x7F) - 32) | 0x1E65C000;
    a2[50] += 4;
  }
}

uint64_t JSC::FTL::Output::constIntPtr<void>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v4 = a1[16];
  v3 = a1[17];
  v5 = (JSC::B3::Value *)a1[15];
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 4;
  *(_DWORD *)(v6 + 16) = 2;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357DA88;
  *(_QWORD *)(v6 + 40) = a2;
  JSC::B3::Procedure::addValueImpl(v5, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(v3 + 8);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(v3 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(v3 + 20);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(v3 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = v3;
  return v6;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::Output::doubleToInt(JSC::B3::Value *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x1E780000;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::Output::doubleToInt64(JSC::B3::Value *)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x9E780000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0>(JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0 const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0>(JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0 const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0>(JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0 const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a2 + 336);
  v27 = *(_OWORD *)(a1 + 24);
  v28 = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(unsigned int **)(a1 + 16);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 56);
  v8 = WTF::fastMalloc((WTF *)0x48);
  v16 = v8;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = &off_1E3590260;
  *(_OWORD *)(v8 + 16) = v27;
  *(_QWORD *)(v8 + 32) = v28;
  *(_DWORD *)(v8 + 40) = v4;
  if (v5)
  {
    do
      v17 = __ldaxr(v5);
    while (__stlxr(v17 + 1, v5));
  }
  *(_QWORD *)(v8 + 48) = v5;
  *(_QWORD *)(v8 + 56) = v7;
  *(_QWORD *)(v8 + 64) = v3;
  v18 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v18 == *(_DWORD *)(a2 + 240))
  {
    v20 = v18 + (v18 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v18 + 1)
      v22 = v18 + 1;
    else
      v22 = v21;
    if (v22 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v23 = *(const void **)(a2 + 232);
    v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
    *(_DWORD *)(a2 + 240) = v22;
    *(_QWORD *)(a2 + 232) = v24;
    memcpy(v24, v23, 8 * v18);
    if (v23)
    {
      if (*(const void **)(a2 + 232) == v23)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v23, v9, v10, v11, v12, v13, v14, v15);
    }
    v18 = *(unsigned int *)(a2 + 244);
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v18);
  }
  else
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v18);
  }
  *v19 = v16;
  *(_DWORD *)(a2 + 244) = v18 + 1;
  if (v5)
  {
    do
    {
      v25 = __ldaxr(v5);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v5));
    if (!v26)
    {
      atomic_store(1u, v5);
      WTF::fastFree((unint64_t)v5, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v4 + v5 || v5 + a2[1] < v6)
    goto LABEL_24;
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)v12 = off_1E3590288;
  *(_QWORD *)(v12 + 16) = v11;
  *(_DWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 28) = v8 + 1;
  *(_QWORD *)(v12 + 32) = v9;
  *(_QWORD *)(v12 + 40) = v6;
  v13 = *(unsigned int *)(v10 + 68);
  if ((_DWORD)v13 == *(_DWORD *)(v10 + 64))
  {
    v15 = v13 + (v13 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v13 + 1)
      v17 = v13 + 1;
    else
      v17 = v16;
    if (v17 >> 29)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x198599AE8);
    }
    v18 = *(const void **)(v10 + 56);
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
    *(_DWORD *)(v10 + 64) = v17;
    *(_QWORD *)(v10 + 56) = v19;
    memcpy(v19, v18, 8 * v13);
    if (v18)
    {
      if (*(const void **)(v10 + 56) == v18)
      {
        *(_QWORD *)(v10 + 56) = 0;
        *(_DWORD *)(v10 + 64) = 0;
      }
      WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
    }
    v13 = *(unsigned int *)(v10 + 68);
    v14 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 8 * v13);
  }
  else
  {
    v14 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 8 * v13);
  }
  *v14 = v12;
  *(_DWORD *)(v10 + 68) = v13 + 1;
}

void WTF::SharedTaskFunctor<void ()(void),JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(JSC::B3::StackmapGenerationParams const&,JSC::CallSiteIndex)::$_0::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}::operator() const(JSC::LinkBuffer &)::{lambda(void)#1}>::run(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v2 + 224);
  v4 = (unint64_t *)(v2 + 224);
  v3 = v5;
  if (!v5)
  {
    v12 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    __dmb(0xAu);
    std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100](v4, v12, v13, v14, v15, v16, v17, v18);
    v3 = *v4;
  }
  v6 = (__int128 *)(a1 + 24);
  v7 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 8))
  {
    v11 = WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v7 + 1, (unint64_t)v6);
    v8 = *(_QWORD *)v3 + 24 * *(unsigned int *)(v3 + 12);
    v9 = *(_OWORD *)v11;
    v10 = *(_QWORD *)(v11 + 16);
  }
  else
  {
    v8 = *(_QWORD *)v3 + 24 * v7;
    v9 = *v6;
    v10 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(v8 + 16) = v10;
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(v3 + 12);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::SlowPathCallContext::makeCall(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>)::$_0>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  JSC::FTL::Thunks *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  JSC::ExecutableAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  JSC::ExecutableMemoryHandle *v32;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(JSC::FTL::Thunks **)(*(_QWORD *)(a1 + 48) + 90456);
  v29 = *(_OWORD *)(a1 + 24);
  v30 = v4;
  JSC::FTL::Thunks::getSlowPathCallThunk(v5, (const JSC::FTL::SlowPathCallKey *)&v29, (uint64_t *)&v31);
  v7 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  if (v7 < 4)
    v8 = 0;
  else
    v8 = *(_DWORD *)((v7 & 0xFFFFFFFC) + *(_QWORD *)(a2 + 24) - 4);
  v9 = v7 - v8;
  v10 = *(JSC::ExecutableAllocator **)(a2 + 184);
  if ((v6 & 2) != 0)
  {
    if ((v6 & 4) != 0)
    {
      LODWORD(v29) = v9;
      JSC::ARM64Assembler::linkJump(v10, (unsigned int *)&v29, v31);
    }
    else
    {
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v10 + v9 - 4), (unint64_t)v10 + v9 - 4, v31);
    }
  }
  else
  {
    LODWORD(v29) = v9 - 16;
    JSC::ARM64Assembler::linkPointer((uint64_t)v10, (unsigned int *)&v29, v31);
  }
  v18 = (unsigned int *)v32;
  v32 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::SlowPathCallContext::makeCall(JSC::VM &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address)::$_0>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  JSC::FTL::Thunks *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  JSC::ExecutableAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  JSC::ExecutableMemoryHandle *v32;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(JSC::FTL::Thunks **)(*(_QWORD *)(a1 + 48) + 90456);
  v29 = *(_OWORD *)(a1 + 24);
  v30 = v4;
  JSC::FTL::Thunks::getSlowPathCallThunk(v5, (const JSC::FTL::SlowPathCallKey *)&v29, (uint64_t *)&v31);
  v7 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  if (v7 < 4)
    v8 = 0;
  else
    v8 = *(_DWORD *)((v7 & 0xFFFFFFFC) + *(_QWORD *)(a2 + 24) - 4);
  v9 = v7 - v8;
  v10 = *(JSC::ExecutableAllocator **)(a2 + 184);
  if ((v6 & 2) != 0)
  {
    if ((v6 & 4) != 0)
    {
      LODWORD(v29) = v9;
      JSC::ARM64Assembler::linkJump(v10, (unsigned int *)&v29, v31);
    }
    else
    {
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v10 + v9 - 4), (unint64_t)v10 + v9 - 4, v31);
    }
  }
  else
  {
    LODWORD(v29) = v9 - 16;
    JSC::ARM64Assembler::linkPointer((uint64_t)v10, (unsigned int *)&v29, v31);
  }
  v18 = (unsigned int *)v32;
  v32 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
}

uint64_t _ZZN3JSC3FTLL8dispatchIPFNS_24ExceptionOperationResultIxEEPNS_14JSGlobalObjectEPvENS_11JSValueRegsENSt3__15tupleIJNS_14ARM64Registers10RegisterIDESD_EEEJLm0ELm1EEEEvRNS_12CCallHelpersEPNS0_5StateERKNS_2B324StackmapGenerationParamsENS_10CodeOriginEN3WTF3BoxINS_22AbstractMacroAssemblerINS_14ARM64AssemblerEE8JumpListEEEST_T_T0_T1_NSA_16integer_sequenceImJXspT2_EEEEENUlSG_E_C1ERKS10_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
      goto LABEL_31;
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v10;
  if ((_DWORD)v10)
  {
    if (!(v10 >> 28))
    {
      v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 56) = v11;
      v12 = *((unsigned int *)a2 + 17);
      if ((_DWORD)v12)
      {
        v13 = (__int128 *)a2[7];
        v14 = 16 * v12;
        do
        {
          v15 = *v13++;
          *v11++ = v15;
          v14 -= 16;
        }
        while (v14);
      }
      goto LABEL_12;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198599FD0);
  }
LABEL_12:
  v16 = (WTF *)*((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(a1 + 80) = (_DWORD)v16;
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v17, (const void *)a2[9], *((unsigned int *)a2 + 21));
  }
  v18 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v24 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(a1 + 96) = (_DWORD)v18;
    *(_QWORD *)(a1 + 88) = v24;
    memcpy(v24, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v19 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  if ((v19 & 1) != 0)
  {
    v25 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v26 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v29 = v26;
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = v25;
      *(_DWORD *)(v30 + 8) = v29;
      v28 = 1;
      v25 = v30;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v19 = v25 | v28;
  }
  *(_QWORD *)(a1 + 112) = v19;
  v20 = (unsigned int *)a2[15];
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 120) = v20;
  v22 = a2[16];
  *(_DWORD *)(a1 + 135) = *(_DWORD *)((char *)a2 + 135);
  *(_QWORD *)(a1 + 128) = v22;
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
  return a1;
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZNS1_3FTLL8dispatchIPFNS1_24ExceptionOperationResultIxEEPNS1_14JSGlobalObjectEPvENS1_11JSValueRegsENSt3__15tupleIJNS1_14ARM64Registers10RegisterIDESO_EEEJLm0ELm1EEEEvS3_PNSB_5StateERKS9_NS1_10CodeOriginENS_3BoxINS1_22AbstractMacroAssemblerINS1_14ARM64AssemblerEE8JumpListEEESZ_T_T0_T1_NSL_16integer_sequenceImJXspT2_EEEEEUlS3_E_EEvRKS11_EUlS3_S7_E_ED1Ev(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZNS1_3FTLL8dispatchIPFNS1_24ExceptionOperationResultIxEEPNS1_14JSGlobalObjectEPvENS1_11JSValueRegsENSt3__15tupleIJNS1_14ARM64Registers10RegisterIDESO_EEEJLm0ELm1EEEEvS3_PNSB_5StateERKS9_NS1_10CodeOriginENS_3BoxINS1_22AbstractMacroAssemblerINS1_14ARM64AssemblerEE8JumpListEEESZ_T_T0_T1_NSL_16integer_sequenceImJXspT2_EEEEEUlS3_E_EEvRKS11_EUlS3_S7_E_ED0Ev(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZNS1_3FTLL8dispatchIPFNS1_24ExceptionOperationResultIxEEPNS1_14JSGlobalObjectEPvENS1_11JSValueRegsENSt3__15tupleIJNS1_14ARM64Registers10RegisterIDESO_EEEJLm0ELm1EEEEvS3_PNSB_5StateERKS9_NS1_10CodeOriginENS_3BoxINS1_22AbstractMacroAssemblerINS1_14ARM64AssemblerEE8JumpListEEESZ_T_T0_T1_NSL_16integer_sequenceImJXspT2_EEEEEUlS3_E_EEvRKS11_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  JSC::AssemblerBuffer *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint8x8_t v51;
  __int32 v52;
  uint8x8_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  char v64;
  char v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  unsigned __int8 *v72;
  char *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned __int8 *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x8_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int i;
  unsigned int v104;
  char v105;
  unsigned int *result;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  char *v124;
  char *v125;
  JSC::AssemblerBuffer *v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  void *__dst;
  int v138;
  unsigned int v139;
  _WORD v140[8];
  uint64_t v141;
  char v142;
  __int16 v143;
  char v144;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    do
    {
      if (v13 >= *(unsigned int *)(a1 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19859A8E4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
    }
    while (v14 != v12);
  }
  v16 = *(uint64_t **)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(v15 + 104);
  v18 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(v15 + 96);
  v19 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(a1 + 88);
    do
    {
      v21 = *(_BYTE *)v20 & 0x7F;
      if (v21 >= 0x40)
        goto LABEL_104;
      v22 = 1 << v21;
      v18 &= ~v22;
      v17 &= ~v22;
      ++v20;
    }
    while (--v19);
  }
  v23 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v23)
  {
    v20 = *(_QWORD *)(a1 + 104);
    while (1)
    {
      v107 = (*(_BYTE *)v20 + 32) & 0x7F;
      if (v107 >= 0x40)
        break;
      v108 = 1 << v107;
      v18 &= ~v108;
      v17 &= ~v108;
      ++v20;
      if (!--v23)
        goto LABEL_12;
    }
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
LABEL_12:
  v20 = *(_QWORD *)(a1 + 128);
  v132 = v10;
  if ((v20 & 1) == 0)
  {
    v24 = 0;
    goto LABEL_14;
  }
LABEL_105:
  v109 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
  if ((v20 & 2) != 0
    || ((v110 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v110 != 0x3FFFFFFF)
      ? (v111 = (_DWORD)v110 == -1)
      : (v111 = 1),
        v111))
  {
    v112 = 2;
  }
  else if (v110 >> 28)
  {
    v122 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v122 = v109;
    *(_DWORD *)(v122 + 8) = v110;
    v112 = 1;
    v109 = v122;
  }
  else
  {
    v112 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    v109 = v110 << 36;
  }
  v20 = v109 | v112;
  v24 = (v109 | v112) & 1;
LABEL_14:
  v25 = *(_QWORD *)(a1 + 136);
  v26 = *(_BYTE *)(a1 + 152);
  v27 = *(unsigned __int8 *)(a1 + 153);
  v28 = *(unsigned __int8 *)(a1 + 154);
  v133 = *(_QWORD *)(a1 + 144);
  v134 = *(_QWORD *)(*v16 + 16);
  v29 = v20;
  v128 = v20;
  v131 = v24;
  if (!v24)
  {
    if ((v20 & 2) == 0)
      goto LABEL_16;
LABEL_145:
    v35 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }
  v113 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
  if ((v20 & 2) != 0
    || ((v114 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v114 != 0x3FFFFFFF)
      ? (v115 = (_DWORD)v114 == -1)
      : (v115 = 1),
        v115))
  {
    v116 = 2;
  }
  else if (v114 >> 28)
  {
    v130 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    v113 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v113 = v130;
    *(_DWORD *)(v113 + 8) = v114;
    v116 = 1;
  }
  else
  {
    v116 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    v113 = v114 << 36;
  }
  v29 = v113 | v116;
  if (((v113 | v116) & 2) != 0)
    goto LABEL_145;
LABEL_16:
  v30 = *(_QWORD *)(v16[3] + 64);
  v31 = v29;
  if ((v29 & 1) != 0)
  {
    v117 = *(_QWORD *)(v29 & 0xFFFFFFFF8);
    v118 = *(unsigned int *)((v29 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v118 == 0x3FFFFFFF || (_DWORD)v118 == -1)
    {
      v120 = 2;
    }
    else if (v118 >> 28)
    {
      v127 = *(_QWORD *)(v29 & 0xFFFFFFFF8);
      v129 = *(_DWORD *)((v29 & 0xFFFFFFFF8) + 8);
      v121 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v121 = v127;
      *(_DWORD *)(v121 + 8) = v129;
      v120 = 1;
      v117 = v121;
    }
    else
    {
      v120 = *(_QWORD *)(v29 & 0xFFFFFFFF8);
      v117 = v118 << 36;
    }
    v31 = v117 | v120;
  }
  v141 = v31;
  v34 = JSC::DFG::CodeOriginPool::addCodeOrigin(v30, &v141);
  if ((v141 & 1) != 0 && (v141 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v141 & 0xFFFFFFFF8, v32, v33, a4, a5, a6, a7, a8);
  if (v34)
  {
    v35 = v34;
LABEL_20:
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19859A7FCLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v35, a2 + 264, a4, a5, a6, a7, a8);
    v41 = *(_DWORD *)(a2 + 200);
    if (v41 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, a7, a8);
      v41 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(&v141, v17 | v18, a2, 3u, v26, 0xFFFFFFFFLL, a7, a8);
  v17 = (unint64_t)v140;
  __dst = v140;
  v138 = 2;
  if (v27)
  {
    v140[0] = v27;
    v44 = 1;
    v139 = 1;
    if (v28 == 1)
      goto LABEL_30;
  }
  else
  {
    if (v28 == 1)
    {
      v16 = &v136;
      goto LABEL_85;
    }
    v44 = 0;
  }
  v140[v44++] = v28 | 0x100;
  v139 = v44;
LABEL_30:
  v16 = &v136;
  v45 = (JSC::AssemblerBuffer *)(a2 + 56);
  v18 = 1;
  do
  {
    v46 = 0;
    v47 = 0;
    v20 = (unint64_t)__dst;
    v48 = v44;
    do
    {
      if ((*((_BYTE *)__dst + v46 + 1) & 0x40) != 0)
        goto LABEL_104;
      v47 |= 1 << *((_BYTE *)__dst + v46 + 1);
      v46 += 2;
    }
    while (2 * v44 != v46);
    v49 = 0;
    do
    {
      v50 = *((_BYTE *)__dst + v49) & 0x7F;
      if (v50 >= 0x40)
        goto LABEL_104;
      v47 &= ~(1 << v50);
      v49 += 2;
    }
    while (2 * v44 != v49);
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
    v51.i16[0] = vaddlv_u8(v51);
    v52 = v51.i32[0];
    v53 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v47));
    v53.i16[0] = vaddlv_u8(v53);
    if (v53.i32[0] + v52)
    {
      v54 = 0;
      if (v44 <= 1)
        v55 = 1;
      else
        v55 = v44;
      v56 = 2 * v55;
      while (1)
      {
        v57 = *((unsigned __int8 *)__dst + v54 + 1);
        if ((v57 & 0x7Fu) >= 0x40)
          goto LABEL_104;
        if (((v47 >> (v57 & 0x7F)) & 1) != 0)
          break;
        v54 += 2;
        if (v56 == v54)
          goto LABEL_81;
      }
      v58 = *((unsigned __int8 *)__dst + v54);
      if (v58 == v57)
      {
LABEL_79:
        memmove((void *)(v20 + v54), (const void *)(v20 + v54 + 2), 2 * v48 - v54 - 2);
        v44 = v139 - 1;
        goto LABEL_80;
      }
      v59 = (char)v58;
      if ((char)v58 == 63)
      {
        v60 = *(_DWORD *)(a2 + 200);
        v61 = *(_DWORD *)(a2 + 192);
        if ((char)v57 != 31)
        {
          v63 = v57 & 0x1F | 0xD2800000;
          goto LABEL_76;
        }
      }
      else
      {
        v60 = *(_DWORD *)(a2 + 200);
        v61 = *(_DWORD *)(a2 + 192);
        v62 = v57 == 31 || v59 == 31;
        if (!v62)
        {
          v63 = v57 & 0xFFE0FFFF | ((v59 & 0x1F) << 16) | 0xAA0003E0;
LABEL_76:
          if (v60 + 4 > v61)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v45, (uint64_t)v42, v43, a4, a5, a6, a7, a8);
            v60 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v60) = v63;
          *(_DWORD *)(a2 + 200) += 4;
          v20 = (unint64_t)__dst;
          v48 = v139;
          goto LABEL_79;
        }
      }
      v63 = (char)v57 | (32 * v59) | 0x91000000;
      goto LABEL_76;
    }
    v126 = v45;
    v64 = *(_BYTE *)__dst;
    v65 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v65, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v139 - 2);
    v66 = v139 - 1;
    v62 = v139 == 1;
    v139 = v66;
    v67 = (unsigned __int8 *)__dst;
    v68 = (unsigned __int8 *)__dst + 2 * v66;
    if (v62)
    {
      v75 = 0;
      v76 = 0;
      v71 = 0;
      v42 = v68;
    }
    else
    {
      v69 = 2 * v66;
      v70 = __dst;
      while (*v70 != v65)
      {
        v70 += 2;
        v69 -= 2;
        if (!v69)
          goto LABEL_59;
      }
      *v70 = v64;
LABEL_59:
      v71 = 0;
      v72 = v67;
      v42 = v68;
      v73 = (char *)v68;
      do
      {
        if (*v67 == v67[1])
        {
          v74 = v67;
          if (v73 != (char *)__dst + 2 * v139)
          {
            v125 = (char *)v68;
            if (v67 == v42)
            {
              v74 = (unsigned __int8 *)v73;
            }
            else
            {
              v123 = v72 - v42;
              v124 = v73;
              memmove(v73, v42, v72 - v42);
              v74 = (unsigned __int8 *)&v124[v123];
            }
            v68 = (unsigned __int8 *)v125;
          }
          v42 = v67 + 2;
          ++v71;
          v73 = (char *)v74;
        }
        v67 += 2;
        v72 += 2;
      }
      while (v67 < v68);
      v67 = (unsigned __int8 *)__dst;
      v75 = v139;
      v76 = v139;
      v68 = (unsigned __int8 *)v73;
    }
    v77 = &v67[2 * v75];
    v45 = v126;
    if (v42 != v77)
    {
      memmove(v68, v42, v77 - v42);
      v76 = v139;
    }
    v44 = v76 - v71;
LABEL_80:
    v139 = v44;
LABEL_81:
    ;
  }
  while (v44);
  v78 = __dst;
  if (v140 != __dst && __dst)
  {
    __dst = 0;
    v138 = 0;
    WTF::fastFree((unint64_t)v78, v42, v43, a4, a5, a6, a7, a8);
  }
LABEL_85:
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)&v141, v134, v133, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)&v141, v79, v80, v81, v82, v83, v84, v85);
  JSC::AssemblyHelpers::emitExceptionCheck(a2, v134, 0, 0, 0xFFFFFFFFLL, v86, v87, v88, (uint64_t)&v135, v89);
  v97 = v135;
  if (v135 != -1)
  {
    v98 = (uint64_t *)(v25 + 8);
    v99 = *(unsigned int *)(v25 + 20);
    if ((_DWORD)v99 == *(_DWORD *)(v25 + 16))
    {
      v100 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v98, (void *)(v99 + 1), (unint64_t)&v135, v92, v93, v94, v95, v96);
      v16 = (uint64_t *)(v100 + 1);
      v97 = *v100;
      LODWORD(v99) = *(_DWORD *)(v25 + 20);
      v101 = *(_QWORD *)(v25 + 8);
    }
    else
    {
      v101 = *v98;
    }
    v102 = v101 + 12 * v99;
    *(_DWORD *)v102 = v97;
    *(_QWORD *)(v102 + 4) = *v16;
    ++*(_DWORD *)(v25 + 20);
  }
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
  if (v131 && (v128 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v128 & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
  for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v90, v91, v92, v93, v94, v95, v96);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v104 = i;
  if (i + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v90, v91, v92, v93, v94, v95, v96);
    v104 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v104) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v105 = 69;
  else
    v105 = 65;
  v141 = i;
  v142 = v105;
  v143 = 15;
  v144 = -1;
  LODWORD(__dst) = *(_DWORD *)(a1 + 156);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v141, (unsigned int *)&__dst, a2, v92, v93, v94, v95, v96);
  *(_BYTE *)(a2 + 212) = v132;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(WTF::PrintStream &,JSC::B3::Origin),JSC::FTL::State::State(JSC::DFG::Graph &)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = v5;
  if (!a3)
  {
    v9 = "-";
    goto LABEL_7;
  }
  v7 = *(_DWORD *)(a3 + 20);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::PrintStream::printf(v8, "%s", "D@");
  WTF::PrintStream::printf(v8, "%u", v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  if ((*(_DWORD *)(a3 + 56) & 7) == 3)
  {
    v9 = "<Double>";
    goto LABEL_7;
  }
  if ((*(_DWORD *)(a3 + 56) & 7) == 5)
  {
    v9 = "<Int52>";
LABEL_7:
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

void WTF::ScopedLambdaFunctor<void ()(JSC::B3::Air::Inst &),JSC::FTL::State::dumpDisassembly(WTF::PrintStream &,JSC::LinkBuffer &,WTF::ScopedLambda<void ()(JSC::DFG::Node *)> const&)::$_2>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::DFG::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46[3];
  uint64_t v47[2];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 112);
  if (v8 != **(_QWORD **)(a1 + 16))
  {
    v11 = *(_QWORD *)(a1 + 24);
    v50 = *(_QWORD *)(a2 + 112);
    if (**(_QWORD **)v11 != v8)
    {
      v12 = *(_QWORD *)(v11 + 40);
      **(_QWORD **)v11 = v8;
      if (**(_QWORD **)v11)
      {
        v13 = *(_QWORD *)(v11 + 8);
        v14 = *(JSC::DFG::Node **)(v8 + 24);
        v46[0] = (uint64_t)v14;
        if (**(JSC::DFG::Node ***)v13 != v14)
        {
          v15 = *(_QWORD *)(v13 + 24);
          **(_QWORD **)v13 = v14;
          if (**(_QWORD **)v13)
          {
            (**(void (***)(_QWORD, JSC::DFG::Node *))(v13 + 8))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8), v14);
            v52 = 0;
            v16 = *(_QWORD *)(v13 + 16);
            v45 = *(_OWORD *)(v13 + 32);
            v17 = WTF::fastMalloc((WTF *)0x38);
            *(_QWORD *)v17 = off_1E3590350;
            *(_QWORD *)(v17 + 8) = v16;
            *(_QWORD *)(v17 + 16) = &v52;
            *(_QWORD *)(v17 + 24) = v15;
            *(_QWORD *)(v17 + 32) = &v51;
            *(_OWORD *)(v17 + 40) = v45;
            v51 = v17;
            WTF::Detail::CallableWrapper<JSC::FTL::State::dumpDisassembly(WTF::PrintStream &,JSC::LinkBuffer &,WTF::ScopedLambda<void ()(JSC::DFG::Node *)> const&)::$_1::operator() const(JSC::DFG::Node *)::{lambda(JSC::DFG::Node *)#1},void,JSC::DFG::Node *>::call(v17, v14, v18, v19, v20, v21, v22, v23);
            WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(*(uint64_t **)(v13 + 16), v46, v24, v25, v26, v27, v28, v29, (uint64_t)v47);
            v31 = v51;
            v51 = 0;
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            if (v52)
              WTF::fastFree(v52 - 16, v30, a3, a4, a5, a6, a7, a8);
          }
        }
        v52 = 0;
        v47[0] = *(_QWORD *)(v11 + 16);
        v47[1] = (uint64_t)&v52;
        v48 = *(_OWORD *)(v11 + 24);
        v49 = v12;
        _ZNK3WTF16RecursableLambdaIZZN3JSC3FTL5State15dumpDisassemblyERNS_11PrintStreamERNS1_10LinkBufferERKNS_12ScopedLambdaIFvPNS1_3DFG4NodeEEEEENK3__0clEPNS1_2B35ValueEEUlT_SJ_E_EclIJRSJ_EEEDcDpOT_(v47, *(JSC::B3::Value ***)v11, a3, a4, a5, a6, a7, a8);
        WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add(*(uint64_t **)(v11 + 16), &v50, v32, v33, v34, v35, v36, v37, (uint64_t)v46);
        if (v52)
          WTF::fastFree(v52 - 16, v38, v39, v40, v41, v42, v43, v44);
      }
    }
    **(_QWORD **)(a1 + 16) = *(_QWORD *)(a2 + 112);
  }
}

uint64_t *_ZNK3WTF16RecursableLambdaIZZN3JSC3FTL5State15dumpDisassemblyERNS_11PrintStreamERNS1_10LinkBufferERKNS_12ScopedLambdaIFvPNS1_3DFG4NodeEEEEENK3__0clEPNS1_2B35ValueEEUlT_SJ_E_EclIJRSJ_EEEDcDpOT_(uint64_t *result, JSC::B3::Value **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  JSC::B3::Value *v17;
  int v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  JSC::B3::Value *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const char **v30;
  WTF::PrintStream *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  char v34[24];
  JSC::B3::Value *v35;

  v8 = result;
  v9 = *a2;
  v35 = *a2;
  v10 = result[4];
  v11 = *(_QWORD *)*result;
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(JSC::B3::Value **)(v11 + 8 * v16);
    if (v17 == v9)
      return result;
    v18 = 1;
    while (v17)
    {
      v16 = (v16 + v18) & v12;
      v17 = *(JSC::B3::Value **)(v11 + 8 * v16);
      ++v18;
      if (v17 == v9)
        return result;
    }
  }
  result = (uint64_t *)result[1];
  v19 = (_QWORD *)*result;
  if (*result)
  {
    v20 = *((_DWORD *)v19 - 2);
    v21 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = (JSC::B3::Value *)v19[v24];
    if (v25 == v9)
      return result;
    v26 = 1;
    while (v25)
    {
      v24 = (v24 + v26) & v20;
      v25 = (JSC::B3::Value *)v19[v24];
      ++v26;
      if (v25 == v9)
        return result;
    }
  }
  WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add(result, (uint64_t *)&v35, a3, a4, a5, a6, a7, a8, (uint64_t)v34);
  if (JSC::B3::Value::numChildren(v35))
  {
    v27 = 0;
    do
    {
      v28 = JSC::B3::Value::child(v35, v27);
      _ZNK3WTF16RecursableLambdaIZZN3JSC3FTL5State15dumpDisassemblyERNS_11PrintStreamERNS1_10LinkBufferERKNS_12ScopedLambdaIFvPNS1_3DFG4NodeEEEEENK3__0clEPNS1_2B35ValueEEUlT_SJ_E_EclIJRSJ_EEEDcDpOT_(v8, v28);
      ++v27;
    }
    while (v27 < JSC::B3::Value::numChildren(v35));
  }
  v29 = v8[2];
  v30 = (const char **)v8[3];
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  WTF::PrintStream::printf(v31, "%s", *v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  JSC::B3::Value::deepDump(v35, *(const JSC::B3::Procedure **)(v10 + 8), (WTF::PrintStream *)v8[2]);
  v32 = v8[2];
  v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
  WTF::PrintStream::printf(v33, "%s", "\n");
  return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
}

void WTF::Detail::CallableWrapper<JSC::FTL::State::dumpDisassembly(WTF::PrintStream &,JSC::LinkBuffer &,WTF::ScopedLambda<void ()(JSC::DFG::Node *)> const&)::$_1::operator() const(JSC::DFG::Node *)::{lambda(JSC::DFG::Node *)#1},void,JSC::DFG::Node *>::call(uint64_t a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Graph **v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  JSC::DFG::Node *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  JSC::DFG::Node *v25;
  int v26;
  JSC::DFG::Node *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  JSC::DFG::Graph *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  JSC::DFG::Node *v37;

  v37 = a2;
  v9 = *(JSC::DFG::Graph ***)(a1 + 24);
  v10 = **(_QWORD **)(a1 + 8);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(JSC::DFG::Node **)(v10 + 8 * v15);
    if (v16 == a2)
      return;
    v17 = 1;
    while (v16)
    {
      v15 = (v15 + v17) & v11;
      v16 = *(JSC::DFG::Node **)(v10 + 8 * v15);
      ++v17;
      if (v16 == a2)
        return;
    }
  }
  v18 = *(uint64_t **)(a1 + 16);
  v19 = *v18;
  if (*v18)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(JSC::DFG::Node **)(v19 + 8 * v24);
    if (v25 == a2)
      return;
    v26 = 1;
    while (v25)
    {
      v24 = (v24 + v26) & v20;
      v25 = *(JSC::DFG::Node **)(v19 + 8 * v24);
      ++v26;
      if (v25 == a2)
        return;
    }
  }
  WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(v18, (uint64_t *)&v37, a3, a4, a5, a6, a7, a8, (uint64_t)&v36);
  v27 = v37;
  v28 = *(_QWORD **)(a1 + 32);
  v29 = *((_QWORD *)v37 + 3);
  if ((*((_BYTE *)v37 + 56) & 0x10) == 0)
  {
    if ((v29 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v28 + 16))(*v28, v29 & 0xFF00FFFFFFFFFFFFLL);
      v30 = *((_QWORD *)v27 + 4) & 0xFF00FFFFFFFFFFFFLL;
      if (v30)
      {
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v28 + 16))(*v28, v30);
        v31 = *((_QWORD *)v27 + 5) & 0xFF00FFFFFFFFFFFFLL;
        if (v31)
          (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v28 + 16))(*v28, v31);
      }
    }
    goto LABEL_24;
  }
  v32 = *((_QWORD *)v37 + 4);
  if ((int)v32 + (int)v29 <= v29)
  {
LABEL_24:
    JSC::DFG::Graph::dump(*v9, *(WTF::PrintStream **)(a1 + 40), **(const char ***)(a1 + 48), v37, 0);
    return;
  }
  v33 = *v9;
  v34 = *((_QWORD *)v37 + 3);
  while (v34 < *((unsigned int *)v33 + 41))
  {
    v35 = *(_QWORD *)(*((_QWORD *)v33 + 19) + 8 * v34) & 0xFF00FFFFFFFFFFFFLL;
    if (v35)
    {
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v28 + 16))(*v28, v35);
      v29 = *((_QWORD *)v27 + 3);
      v32 = *((_QWORD *)v27 + 4);
    }
    if (++v34 >= (v29 + v32))
      goto LABEL_24;
  }
  __break(0xC471u);
}

uint64_t JSC::FTL::osrExitGenerationThunkGenerator@<X0>(JSC::FTL *this@<X0>, _QWORD *a2@<X8>)
{
  return JSC::FTL::genericGenerationThunkGenerator(a2, this, (uint64_t)operationCompileFTLOSRExit, (uint64_t)"FTL OSR exit generation thunk", 0, 0);
}

uint64_t JSC::FTL::genericGenerationThunkGenerator(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unint64_t v10;
  pthread_key_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  JSC::AssemblyHelpers *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  pthread_key_t *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  unsigned int v161;
  char v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v180;
  char **v181;
  char *v182;
  _QWORD v183[3];
  WTF *v184;
  _BYTE v185[128];
  unsigned int v186;
  char v187;
  int v188;
  int v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _DWORD v193[6];
  char v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  _BYTE v199[128];
  unsigned int v200;
  int v201;
  int v202;
  char v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  _DWORD *v207;
  char v208;
  uint64_t v209;
  int v210;
  _DWORD *v211;
  char v212;
  uint64_t v213;
  int v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  LOBYTE(v193[0]) = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0x8000000080000000;
  v198 = v199;
  v200 = 128;
  v10 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v10 != -1)
  {
    v182 = (char *)v183;
    v183[0] = &v181;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v182, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v11 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v19 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v19)
  {
    v19 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v19, v11);
  }
  v20 = *(_QWORD *)v19;
  if (*(_QWORD *)v19 != v19 + 8)
  {
    v21 = *(_DWORD *)(v19 + 136);
    if (v200 < v21)
    {
      if (v198 && v198 != v199)
      {
        WTF::fastFree((unint64_t)v198, v12, v13, v14, v15, v16, v17, v18);
        v20 = *(_QWORD *)v19;
        v21 = *(_DWORD *)(v19 + 136);
      }
      v198 = (_BYTE *)v20;
      v200 = v21;
      *(_QWORD *)v19 = v19 + 8;
      *(_DWORD *)(v19 + 136) = 128;
    }
  }
  v201 = 0;
  v203 = 1;
  v202 = 0;
  v204 = 0u;
  v205 = 0u;
  v206 = 0u;
  v207 = v193;
  v208 = 16;
  v209 = 0;
  v210 = 0x10000;
  v211 = v193;
  v212 = 17;
  v213 = 0;
  v214 = 0x20000;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  if (a6)
  {
    v101 = 0;
  }
  else
  {
    v29 = JSC::VM::scratchBufferForSize(a2, 0x20uLL, v13, v14, v15, v16, v17, v18) + 8;
    v30 = v201;
    if (v201 + 4 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v22, v23, v24, v25, v26, v27, v28);
      v30 = v201;
    }
    *(_DWORD *)&v198[v30] = -132182047;
    v201 += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v193, v29, 1, v24, v25, v26, v27, v28);
    v38 = v201;
    if (v201 + 4 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v31, v32, v33, v34, v35, v36, v37);
      v38 = v201;
    }
    *(_DWORD *)&v198[v38] = -134217696;
    v39 = v201;
    v40 = v201 + 4;
    v201 += 4;
    if (v39 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v31, v32, v33, v34, v35, v36, v37);
      v40 = v201;
    }
    *(_DWORD *)&v198[v40] = -134184912;
    v41 = v201;
    v42 = v201 + 4;
    v201 += 4;
    if (v41 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v31, v32, v33, v34, v35, v36, v37);
      v42 = v201;
    }
    *(_DWORD *)&v198[v42] = -134152143;
    v43 = v201;
    v44 = v201 + 4;
    v201 += 4;
    if (v43 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v31, v32, v33, v34, v35, v36, v37);
      v44 = v201;
    }
    *(_DWORD *)&v198[v44] = -129956896;
    v45 = v201;
    v46 = v201 + 4;
    v201 += 4;
    if (v45 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v31, v32, v33, v34, v35, v36, v37);
      v46 = v201;
    }
    *(_DWORD *)&v198[v46] = -134119392;
    v47 = v201;
    v48 = v201 + 4;
    v201 += 4;
    if (v47 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v31, v32, v33, v34, v35, v36, v37);
      v48 = v201;
    }
    *(_DWORD *)&v198[v48] = -129955871;
    v201 += 4;
    JSC::MacroAssemblerARM64::load64((uint64_t)v193, (uint64_t)a2 + 90480, 0, v33, v34, v35, v36, v37);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)v193, 0, 0, 0xFFFFFFFFLL, v49, v50, v51, v52, (uint64_t)v183, v53);
    v61 = v201;
    if (v201 + 4 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v54, v55, v56, v57, v58, v59, v60);
      v61 = v201;
    }
    *(_DWORD *)&v198[v61] = -1442839555;
    v201 += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v183, (uint64_t)v193, v55, v56, v57, v58, v59, v60);
    v69 = v201;
    if (v201 + 4 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v69 = v201;
    }
    *(_DWORD *)&v198[v69] = -129956960;
    v70 = v201;
    v71 = v201 + 4;
    v201 += 4;
    if (v70 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v71 = v201;
    }
    *(_DWORD *)&v198[v71] = -129531904;
    v72 = v201;
    v73 = v201 + 4;
    v201 += 4;
    if (v72 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v73 = v201;
    }
    *(_DWORD *)&v198[v73] = -1862246400;
    v74 = v201;
    v75 = v201 + 4;
    v201 += 4;
    if (v74 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v75 = v201;
    }
    *(_DWORD *)&v198[v75] = -1202946048;
    v76 = v201;
    v77 = v201 + 4;
    v201 += 4;
    if (v76 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v77 = v201;
    }
    *(_DWORD *)&v198[v77] = 1258292192;
    v78 = v201;
    v79 = v201 + 4;
    v201 += 4;
    if (v78 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v79 = v201;
    }
    *(_DWORD *)&v198[v79] = 1394438144;
    v80 = v201;
    v81 = v201 + 4;
    v201 += 4;
    if (v80 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v81 = v201;
    }
    *(_DWORD *)&v198[v81] = -1824490496;
    v82 = v201;
    v83 = v201 + 4;
    v201 += 4;
    if (v82 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v83 = v201;
    }
    *(_DWORD *)&v198[v83] = -1961033728;
    v84 = v201;
    v85 = v201 + 4;
    v201 += 4;
    if (v84 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v85 = v201;
    }
    *(_DWORD *)&v198[v85] = -1862270945;
    v86 = v201;
    v87 = v201 + 4;
    v201 += 4;
    if (v86 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v87 = v201;
    }
    *(_DWORD *)&v198[v87] = -788511745;
    v88 = v201;
    v89 = v201 + 4;
    v201 += 4;
    if (v88 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v62, v63, v64, v65, v66, v67, v68);
      v89 = v201;
    }
    *(_DWORD *)&v198[v89] = -132182047;
    v201 += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v193, v29, 1, v64, v65, v66, v67, v68);
    v90 = v201;
    if (v201 + 4 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v90 = v201;
    }
    *(_DWORD *)&v198[v90] = -129925088;
    v91 = v201;
    v92 = v201 + 4;
    v201 += 4;
    if (v91 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v92 = v201;
    }
    *(_DWORD *)&v198[v92] = -134151200;
    v93 = v201;
    v94 = v201 + 4;
    v201 += 4;
    if (v93 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v94 = v201;
    }
    *(_DWORD *)&v198[v94] = -130023392;
    v95 = v201;
    v96 = v201 + 4;
    v201 += 4;
    if (v95 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v96 = v201;
    }
    *(_DWORD *)&v198[v96] = -129990608;
    v97 = v201;
    v98 = v201 + 4;
    v201 += 4;
    if (v97 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v98 = v201;
    }
    *(_DWORD *)&v198[v98] = -129957839;
    v99 = v201;
    v100 = v201 + 4;
    v201 += 4;
    if (v99 + 8 > v200)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v100 = v201;
    }
    *(_DWORD *)&v198[v100] = -129955871;
    v101 = v201 + 4;
    v201 += 4;
  }
  if (v101 + 4 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v101 = v201;
  }
  *(_DWORD *)&v198[v101] = -132182019;
  v102 = v201;
  v103 = v201 + 4;
  v201 += 4;
  if (v102 + 8 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v103 = v201;
  }
  *(_DWORD *)&v198[v103] = -1862269955;
  v104 = v201;
  v105 = v201 + 4;
  v201 += 4;
  if (v104 + 8 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v105 = v201;
  }
  *(_DWORD *)&v198[v105] = -788511745;
  v201 += 4;
  v106 = (JSC::AssemblyHelpers *)(JSC::VM::scratchBufferForSize(a2, 0x200uLL, v13, v14, v15, v16, v17, v18) + 8);
  JSC::FTL::saveAllRegisters((JSC::FTL *)v193, v106, v107, v108, v109, v110, v111, v112);
  v120 = v201;
  if (v201 + 4 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v113, v114, v115, v116, v117, v118, v119);
    v120 = v201;
  }
  *(_DWORD *)&v198[v120] = -130022496;
  v121 = v201;
  v122 = v201 + 4;
  v201 += 4;
  if (v121 + 8 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v113, v114, v115, v116, v117, v118, v119);
    v122 = v201;
  }
  *(_DWORD *)&v198[v122] = -129891359;
  v201 += 4;
  if (!v203)
  {
    __break(0xC471u);
    JUMPOUT(0x19859BA48);
  }
  v207[52] &= ~v210;
  v123 = v208;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v193, a3, v208, v115, v116, v117, v118, v119);
  v202 = 0;
  v131 = v201;
  if (v201 + 4 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v124, v125, v126, v127, v128, v129, v130);
    v131 = v201;
  }
  *(_DWORD *)&v198[v131] = (32 * (v123 & 0x1F)) | 0xD63F0000;
  v132 = v201;
  v133 = v201 + 4;
  v201 += 4;
  if (v132 + 8 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v124, v125, v126, v127, v128, v129, v130);
    v133 = v201;
  }
  *(_DWORD *)&v198[v133] = -129956867;
  v201 += 4;
  JSC::MacroAssemblerARM64::add64((uint64_t)v193, (16 * a5 + 32), 31, 31, v127, v128, v129, v130);
  v141 = v201;
  if (v201 + 4 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v134, (uint64_t)v135, v136, v137, v138, v139, v140);
    v141 = v201;
  }
  *(_DWORD *)&v198[v141] = -1442839554;
  v201 += 4;
  JSC::FTL::restoreAllRegisters((JSC::FTL *)v193, v106, v135, v136, v137, v138, v139, v140);
  v149 = v201;
  if (v201 + 4 > v200)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v198, v142, v143, v144, v145, v146, v147, v148);
    v149 = v201;
  }
  *(_DWORD *)&v198[v149] = -698416192;
  v201 += 4;
  v183[0] = 0;
  v183[1] = 0;
  v183[2] = -1;
  v184 = (WTF *)v185;
  v186 = 128;
  v150 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v150 != -1)
  {
    v182 = &v180;
    v181 = &v182;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v181, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v151 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v159 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v159)
  {
    v159 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v159, v151);
  }
  v160 = *(WTF **)v159;
  if (*(_QWORD *)v159 != v159 + 8)
  {
    v161 = *(_DWORD *)(v159 + 136);
    if (v186 < v161)
    {
      if (v184 && v184 != (WTF *)v185)
      {
        WTF::fastFree((unint64_t)v184, v152, v153, v154, v155, v156, v157, v158);
        v160 = *(WTF **)v159;
        v161 = *(_DWORD *)(v159 + 136);
      }
      v184 = v160;
      v186 = v161;
      *(_QWORD *)v159 = v159 + 8;
      *(_DWORD *)(v159 + 136) = 128;
    }
  }
  v162 = 1;
  v187 = 1;
  v188 = 0;
  v189 = 11;
  v190 = 0u;
  v191 = 0u;
  v192 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v183, (uint64_t)v193, 1, v154, v155, v156, v157, v158);
  BYTE2(v188) = 1;
  if (byte_1ECF4C288)
    goto LABEL_98;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v162 = HIBYTE(word_1ECF4C286) != 0;
LABEL_98:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)v183, v162, 0, 0, "%s", a4, a1);
    goto LABEL_95;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v183, 0, 0, a1);
LABEL_95:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v183, v163, v164, v165, v166, v167, v168, v169);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v193, v170, v171, v172, v173, v174, v175, v176);
}

uint64_t JSC::FTL::lazySlowPathGenerationThunkGenerator@<X0>(JSC::FTL *this@<X0>, _QWORD *a2@<X8>)
{
  return JSC::FTL::genericGenerationThunkGenerator(a2, this, (uint64_t)operationCompileFTLLazySlowPath, (uint64_t)"FTL lazy slow path generation thunk", 1, 1);
}

uint64_t JSC::FTL::slowPathCallThunkGenerator@<X0>(JSC::VM *a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t j;
  uint64_t v48;
  uint64_t k;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  signed __int8 v56;
  char v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  pthread_key_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v71;
  char v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned __int8 v108;
  unint64_t v109;
  uint64_t *v110;
  unsigned __int8 v111;
  unint64_t v112;
  char v113;
  char **v114;
  char *v115;
  uint64_t v116[3];
  WTF *v117;
  _BYTE v118[128];
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unsigned int v126[6];
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  WTF *v131;
  _BYTE v132[128];
  unsigned int v133;
  unsigned int v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  unsigned int *v140;
  char v141;
  uint64_t v142;
  int v143;
  unsigned int *v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  LOBYTE(v126[0]) = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x8000000080000000;
  v131 = (WTF *)v132;
  v133 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    v116[0] = (uint64_t)&v107;
    v110 = v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v110, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(WTF **)v15;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v17 = *(_DWORD *)(v15 + 136);
    if (v133 < v17)
    {
      if (v131 && v131 != (WTF *)v132)
      {
        WTF::fastFree((unint64_t)v131, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(WTF **)v15;
        v17 = *(_DWORD *)(v15 + 136);
      }
      v131 = v16;
      v133 = v17;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
    }
  }
  v18 = 0;
  v136 = 1;
  v134 = 0;
  v135 = 0;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v141 = 16;
  v143 = 0x10000;
  v145 = 17;
  v147 = 0x20000;
  v140 = v126;
  v142 = 0;
  v144 = v126;
  v146 = 0;
  v148 = 0;
  v110 = (uint64_t *)v126;
  v111 = 31;
  v112 = 127;
  v19 = (*((_QWORD *)a1 + 1) >> 10) + 8;
  v150 = 0;
  v149 = 0;
  do
  {
    if (((*((_QWORD *)a1 + 2) >> v18) & 1) != 0)
    {
      v116[0] = v18 | (v19 >> 2 << 8);
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>((_DWORD **)&v110, v116, v9, v10, v11, v12, v13, v14);
      v19 += 8;
    }
    ++v18;
  }
  while (v18 != 32);
  v20 = v112 & 0x7F;
  if ((_DWORD)v20 != 127)
  {
    JSC::MacroAssemblerARM64::store64((uint64_t)v110, v20, v111 | ((unint64_t)(v112 >> 8) << 34), v10, v11, v12, v13, v14);
    v112 = 127;
  }
  for (i = 0; i != 32; ++i)
  {
    if (((*((_QWORD *)a1 + 2) >> i) & 0x100000000) != 0)
    {
      v116[0] = (i + 32) | (v19 >> 2 << 8);
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v110, v116, v9, v10, v11, v12, v13, v14);
      v19 += 8;
    }
  }
  if ((v112 & 0x7F) != 0x7F)
  {
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v110, (char)((v112 & 0x7F) - 32), v111 | ((unint64_t)(v112 >> 8) << 34), v10, v11, v12, v13, v14);
    v112 = 127;
  }
  v22 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v20, v9, v10, v11, v12, v13, v14);
    v22 = v134;
  }
  *(_DWORD *)((char *)v131 + v22) = -1440873495;
  v134 += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)v126, 9, ((unint64_t)(*((_QWORD *)a1 + 1) >> 10) << 32) | 0x1F, v10, v11, v12, v13, v14);
  if ((_BYTE)word_1ECF4C428)
  {
    v88 = JSC::FTL::SlowPathCallKey::argumentRegistersIfClobberingCheckIsEnabled(*((_QWORD *)a1 + 1));
    v95 = v94;
    if (*(_QWORD *)a1)
      v96 = (*((_QWORD *)a1 + 1) & 0x300) == 512;
    else
      v96 = 0;
    if (v96)
      v97 = v88;
    else
      v97 = v88 | 0x100;
    JSC::FTL::registerClobberCheck(v126, v97, v95, v89, v90, v91, v92, v93);
  }
  v28 = *((_QWORD *)a1 + 1) & 0x300;
  if (v28 != 512)
  {
    if (v28 == 768)
    {
      v100 = *(unsigned int *)a1;
      goto LABEL_89;
    }
LABEL_88:
    v100 = 0;
LABEL_89:
    if (!v136)
    {
      __break(0xC471u);
      JUMPOUT(0x19859C478);
    }
    v140[52] &= ~v143;
    JSC::MacroAssemblerARM64::load64((uint64_t)v126, (v100 << 32) | 8, v141, v23, v24, v25, v26, v27);
    v135 = 0;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v131, 3594453504, v101, v102, v103, v104, v105, v106);
    goto LABEL_32;
  }
  v29 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_88;
  if (!v136)
  {
    __break(0xC471u);
    JUMPOUT(0x19859C388);
  }
  v140[52] &= ~v143;
  v30 = v141;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v126, v29, v141, v23, v24, v25, v26, v27);
  v135 = 0;
  v38 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v31, v32, v33, v34, v35, v36, v37);
    v38 = v134;
  }
  *(_DWORD *)((char *)v131 + v38) = (32 * (v30 & 0x1F)) | 0xD63F0000;
  v134 += 4;
LABEL_32:
  JSC::MacroAssemblerARM64::load64((uint64_t)v126, ((unint64_t)(*((_QWORD *)a1 + 1) >> 10) << 32) | 0x1F, 2, v33, v34, v35, v36, v37);
  v46 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v39, v40, v41, v42, v43, v44, v45);
    v46 = v134;
  }
  *(_DWORD *)((char *)v131 + v46) = -1442708482;
  v134 += 4;
  v107 = v126;
  v108 = 31;
  v109 = 127;
  for (j = 63; ; --j)
  {
    if (((*((_QWORD *)a1 + 2) >> j) & 1) != 0)
    {
      v19 -= 8;
      v116[0] = j | (v19 >> 2 << 8);
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v107, v116, v40, v41, v42, v43, v44, v45);
    }
    if (j == 32)
      break;
  }
  v48 = v109;
  if ((v109 & 0x7F) != 0x7F)
  {
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v107, v108 | ((unint64_t)(v109 >> 8) << 34), (char)((v109 & 0x7F) - 32), v41, v42, v43, v44, v45);
    v48 = 127;
    v109 = 127;
  }
  for (k = 31; k != -1; --k)
  {
    if (((*((_QWORD *)a1 + 2) >> k) & 1) == 0)
      continue;
    v19 -= 8;
    v50 = k | (v19 >> 2 << 8);
    v51 = v48 & 0x7F;
    if ((_DWORD)v51 != 127)
    {
      v52 = (v50 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      v53 = v48 >> 6;
      v54 = (v48 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      if (v52 == v54 + 8)
      {
        v55 = v107;
        v56 = v108;
        v57 = k;
      }
      else
      {
        v55 = v107;
        v56 = v108;
        if (v54 != v52 + 8)
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)v107, v108 | ((unint64_t)((unint64_t)v48 >> 8) << 34), v51, v41, v42, v43, v44, v45);
          goto LABEL_46;
        }
        v53 = v50 >> 6;
        v57 = v48 & 0x7F;
        LOBYTE(v51) = k;
      }
      JSC::MacroAssemblerARM64::loadPair64(v55, v56, v53 & 0xFFFFFFFC, (char)v51, v57, v43, v44, v45);
      v50 = 127;
    }
LABEL_46:
    v109 = v50;
    v48 = v50;
  }
  v58 = v48 & 0x7F;
  if ((_DWORD)v58 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v107, v108 | ((unint64_t)((unint64_t)v48 >> 8) << 34), v58, v41, v42, v43, v44, v45);
    v109 = 127;
  }
  v59 = v134;
  if (v134 + 4 > v133)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v131, v39, v58, v41, v42, v43, v44, v45);
    v59 = v134;
  }
  *(_DWORD *)((char *)v131 + v59) = -698416192;
  v134 += 4;
  v116[0] = 0;
  v116[1] = 0;
  v116[2] = -1;
  v117 = (WTF *)v118;
  v119 = 128;
  v60 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v60 != -1)
  {
    v115 = &v113;
    v114 = &v115;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v114, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v61 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v69 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v69)
  {
    v69 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v69, v61);
  }
  v70 = *(WTF **)v69;
  if (*(_QWORD *)v69 != v69 + 8)
  {
    v71 = *(_DWORD *)(v69 + 136);
    if (v119 < v71)
    {
      if (v117 && v117 != (WTF *)v118)
      {
        WTF::fastFree((unint64_t)v117, v62, v63, v64, v65, v66, v67, v68);
        v70 = *(WTF **)v69;
        v71 = *(_DWORD *)(v69 + 136);
      }
      v117 = v70;
      v119 = v71;
      *(_QWORD *)v69 = v69 + 8;
      *(_DWORD *)(v69 + 136) = 128;
    }
  }
  v72 = 1;
  v120 = 1;
  v121 = 0;
  v122 = 11;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v116, (uint64_t)v126, 1, v64, v65, v66, v67, v68);
  BYTE2(v121) = 1;
  if (!byte_1ECF4C288)
  {
    if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
    {
      JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v116, 0, 0, a2);
      goto LABEL_67;
    }
    v72 = HIBYTE(word_1ECF4C286) != 0;
  }
  WTF::toCString<JSC::FTL::SlowPathCallKey>((uint64_t *)&v115, a1);
  v98 = v115;
  if (v115)
    v99 = (uint64_t)(v115 + 16);
  else
    v99 = 0;
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)v116, v72, 0, 0, "FTL slow path call thunk for %s", v99, a2);
  if (v98)
  {
    if (*(_DWORD *)v98 == 1)
      WTF::fastFree((unint64_t)v98, v73, v74, v75, v76, v77, v78, v79);
    else
      --*(_DWORD *)v98;
  }
LABEL_67:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v116, v73, v74, v75, v76, v77, v78, v79);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v126, v80, v81, v82, v83, v84, v85, v86);
}

uint64_t JSC::FTL::SlowPathCallKey::argumentRegistersIfClobberingCheckIsEnabled(uint64_t this)
{
  int v1;
  int32x2_t v2;
  uint32x2_t v3;
  int8x16_t v4;
  uint64x2_t v5;
  int8x16_t v6;
  int8x8_t v7;
  uint64x2_t v8;
  uint32x2_t v9;
  int8x16_t v10;
  int8x16_t v11;

  if (!(_BYTE)word_1ECF4C428)
  {
    this = 87;
    __break(0xC471u);
    goto LABEL_10;
  }
  if (!(_BYTE)this)
    return 0;
  if (this - 65 < 0xFFFFFFC0)
  {
LABEL_10:
    __break(1u);
    return this;
  }
  v1 = 0;
  v2 = (int32x2_t)0x100000000;
  v3 = (uint32x2_t)vdup_n_s32(this - 1);
  v4 = 0uLL;
  v5 = (uint64x2_t)vdupq_n_s64(1uLL);
  do
  {
    v6 = v4;
    v7 = vand_s8((int8x8_t)v2, (int8x8_t)0x3F0000003FLL);
    v8.i64[0] = v7.u32[0];
    v8.i64[1] = v7.u32[1];
    v4 = vorrq_s8((int8x16_t)vshlq_u64(v5, v8), v6);
    v1 += 2;
    v2 = vadd_s32(v2, (int32x2_t)0x200000002);
  }
  while (((this + 1) & 0x1FE) != v1);
  v9 = vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v1 - 2), (int8x8_t)0x100000000), v3);
  v10.i64[0] = v9.i32[0];
  v10.i64[1] = v9.i32[1];
  v11 = vbslq_s8(v10, v6, v4);
  return (uint64_t)vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
}

void JSC::FTL::registerClobberCheck(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;

  v9 = 0;
  v10 = ~a2 & 0xFFFF00FF0003FFFFLL;
  v11 = 0x80;
  v12 = -1;
  while ((v11 & 0x7Fu) < 0x40)
  {
    if ((v11 & 0x60) == 0 && ((1 << (v11 & 0x7F)) & v10) != 0)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)0x1337BEEF, v9, a4, a5, a6, a7, a8);
      v12 = v9;
    }
    if (v9 == 63)
      v11 = -1;
    else
      v11 = (v11 + 1) | 0x80;
    v9 = v11 & 0x7F;
    if ((v11 & 0x7Fu) >= 0x40)
    {
      v13 = 0;
      v14 = 0x80;
      v15 = (32 * (v12 & 0x1F)) | 0x9E670000;
      while ((v14 & 0x7Fu) < 0x40)
      {
        if ((v14 & 0x60) == 0x20 && ((1 << (v14 & 0x7F)) & v10) != 0)
        {
          v16 = a1[50];
          if (v16 + 4 > a1[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
            v16 = a1[50];
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v15 | (char)(v13 - 32);
          a1[50] += 4;
        }
        if (v13 == 63)
          v14 = -1;
        else
          v14 = (v14 + 1) | 0x80;
        v13 = v14 & 0x7F;
        if ((v14 & 0x7Fu) >= 0x40)
          return;
      }
      break;
    }
  }
  __break(1u);
}

void WTF::toCString<JSC::FTL::SlowPathCallKey>(uint64_t *a1, JSC::FTL::SlowPathCallKey *this)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(WTF::StringPrintStream *__hidden);
  _BYTE *v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = off_1E3572250;
  v16 = v18;
  v17 = xmmword_199122F80;
  v18[0] = 0;
  JSC::FTL::SlowPathCallKey::dump(this, (WTF::PrintStream *)&v15);
  v15[5]((WTF::StringPrintStream *)&v15);
  v11 = v16;
  v10 = v17;
  *a1 = 0;
  if (!v11)
  {
    v14 = 0;
LABEL_6:
    WTF::fastFree(v14, v3, v4, v5, v6, v7, v8, v9);
    return;
  }
  if (v10 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19859C7B0);
  }
  v12 = WTF::fastMalloc((WTF *)(v10 + 17));
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v10;
  *a1 = v12;
  v13 = v12 + 16;
  memcpy((void *)(v12 + 16), v11, v10);
  *(_BYTE *)(v13 + v10) = 0;
  v14 = (unint64_t)v16;
  if (v16 != v18)
    goto LABEL_6;
}

void JSC::BlockDirectory::~BlockDirectory(JSC::BlockDirectory *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t **v11;
  uint64_t *i;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v9 = (unsigned __int8 *)this + 57;
  if (__ldaxr((unsigned __int8 *)this + 57))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 57);
LABEL_4:
  v11 = (uint64_t **)((char *)this + 104);
  for (i = (uint64_t *)*((_QWORD *)this + 13); i != (uint64_t *)v11; i = *v11)
  {
    v18 = *i;
    v17 = (uint64_t *)i[1];
    *v17 = *i;
    *(_QWORD *)(v18 + 8) = v17;
    *i = 0;
    i[1] = 0;
  }
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v9))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::BlockDirectory::findEmptyBlockToSteal(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v8 = this;
  v9 = (unsigned __int8 *)(this + 56);
  if (__ldaxr((unsigned __int8 *)(this + 56)))
  {
    __clrex();
LABEL_3:
    this = WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 56);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v11 = *(_QWORD *)(v8 + 32);
  v12 = *(unsigned int *)(v8 + 48);
  v13 = *(unsigned int *)(v8 + 64);
  v14 = v13 >> 5;
  if (v13 >> 5 >= (unint64_t)(v12 + 31) >> 5)
    goto LABEL_15;
  v15 = *(_DWORD *)(v11 + 40 * v14 + 4) & ~*(_DWORD *)(v11 + 40 * v14 + 28);
  if (!v15 || (v19 = (v13 & 0x1F) + __clz(__rbit32(v15 >> (v13 & 0x1F))), v19 >= 0x20))
  {
    v16 = (unint64_t)(v12 + 31) >> 5;
    if (v14 + 1 == v16)
      goto LABEL_15;
    v17 = (_DWORD *)(v11 + 40 * v14++ + 68);
    while (1)
    {
      v18 = *(v17 - 6) & ~*v17;
      if (v18)
        break;
      v17 += 10;
      if (v16 == ++v14)
        goto LABEL_15;
    }
    LODWORD(v19) = __clz(__rbit32(v18));
  }
  LODWORD(v12) = v19 + 32 * v14;
LABEL_15:
  *(_DWORD *)(v8 + 64) = v12;
  if (*(unsigned int *)(v8 + 12) <= (unint64_t)v12)
  {
    v21 = 0;
LABEL_19:
    v22 = __ldxr(v9);
    if (v22 == 1)
    {
      if (!__stlxr(0, v9))
        return v21;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    return v21;
  }
  *(_DWORD *)(v11 + 40 * (v12 >> 5) + 28) |= 1 << v12;
  v20 = *(unsigned int *)(v8 + 64);
  if (*(_DWORD *)(v8 + 12) > v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v20);
    goto LABEL_19;
  }
  __break(0xC471u);
  return this;
}

uint64_t JSC::BlockDirectory::tryAllocateBlock(JSC::BlockDirectory *this, JSC::Heap *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 0x4000, 0x4000);
  if (!v5)
    return 0;
  v6 = (uint64_t)v5;
  if (byte_1ECF4C400)
    memset_pattern16(v5, &memset_pattern, 0x4000uLL);
  v7 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v7 = -1;
  *(_WORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 10) = 0;
  *(_DWORD *)(v7 + 12) = -1;
  *(_QWORD *)(v7 + 16) = v4;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = (char *)a2 - 192;
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 8) = (char *)a2 - 192;
  *(_DWORD *)(v6 + 24) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_QWORD *)(v7 + 88) = v6;
  *((_QWORD *)a2 + 110) += 0x4000;
  v8 = *(_QWORD **)(*((_QWORD *)this + 9) + 8);
  v8[9] += 0x4000;
  v17 = v6;
  v8[12] |= v6;
  WTF::HashTable<JSC::MarkedBlock *,JSC::MarkedBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>>::add(v8 + 13, &v17, v9, v10, v11, v12, v13, v14, (uint64_t)&v16);
  return v7;
}

void JSC::BlockDirectory::addBlock(JSC::BlockDirectory *this, JSC::MarkedBlock::Handle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  JSC::MarkedBlock::Handle *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  double v18;
  int8x8_t *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  JSC::MarkedBlock::Handle *v23;

  v23 = a2;
  v9 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 56);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v11 = *((unsigned int *)this + 7);
  if ((_DWORD)v11)
  {
    v12 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * v11 - 4);
    *((_DWORD *)this + 7) = v11 - 1;
    if (*((_DWORD *)this + 3) <= v12)
    {
      __break(0xC471u);
LABEL_29:
      JUMPOUT(0x19859CD5CLL);
    }
    *(_QWORD *)(*(_QWORD *)this + 8 * v12) = v23;
  }
  else
  {
    v12 = *((unsigned int *)this + 3);
    if ((_DWORD)v12 == *((_DWORD *)this + 2))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v12 + 1, (unint64_t)&v23);
      v21 = *((_DWORD *)this + 2);
      v22 = *((unsigned int *)this + 3);
      *(_QWORD *)(*(_QWORD *)this + 8 * v22) = *v20;
      *((_DWORD *)this + 3) = v22 + 1;
      if (v21 != (_DWORD)v12)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
        JSC::BlockDirectoryBits::resize((JSC::BlockDirectory *)((char *)this + 32), *((_DWORD *)this + 2));
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v12) = v23;
      *((_DWORD *)this + 3) = v12 + 1;
    }
  }
  v13 = v23;
  v14 = *((_QWORD *)this + 9);
  if (*(_QWORD *)(v14 + 24) != *((_QWORD *)v23 + 2))
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  *((_DWORD *)v23 + 3) = v12;
  *((_QWORD *)v13 + 3) = this;
  v15 = *((_QWORD *)v13 + 11);
  *(_QWORD *)(v15 + 16) = v14;
  v16 = *((unsigned int *)this + 15) + 15;
  *(_DWORD *)v13 = v16 >> 4;
  *((_DWORD *)v13 + 1) = 1024 - 0x3ED / (v16 >> 4) * (v16 >> 4);
  v17 = *((unsigned __int16 *)this + 29);
  *((_WORD *)v13 + 4) = v17;
  if (v17 >= 0x200 && (_BYTE)v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19859CDBCLL);
  }
  v18 = -(*((double *)&xmmword_1ECF4C588 + 1) * (double)(0x3ED0 / (v16 & 0x1FFFFFFF0)));
  if (v18 <= -32768.0)
  {
    __break(0xC471u);
    JUMPOUT(0x19859CD7CLL);
  }
  if (v18 >= 0.0)
  {
    __break(0xC471u);
    JUMPOUT(0x19859CD9CLL);
  }
  *(_WORD *)(v15 + 30) = (int)v18;
  *(_WORD *)(v15 + 28) = (int)v18;
  v19 = (int8x8_t *)(*((_QWORD *)this + 4) + 40 * (v12 >> 5));
  *v19 = vorr_s8(*v19, (int8x8_t)vdup_n_s32(1 << v12));
  v19[3].i32[1] |= 1 << v12;
  LODWORD(v19) = __ldxr(v9);
  if ((_DWORD)v19 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

double JSC::BlockDirectoryBits::resize(JSC::BlockDirectoryBits *this, unsigned int a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  int8x16_t v28;

  v5 = *((unsigned int *)this + 3);
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = a2;
  v6 = ((unint64_t)a2 + 31) >> 5;
  if (v6 > v5)
  {
    v7 = *((unsigned int *)this + 2);
    v8 = *(_QWORD *)this;
    if (v6 > v7)
    {
      v9 = v7 + (v7 >> 2);
      if (v9 >= 2)
        v10 = v9 + 1;
      else
        v10 = 2;
      if (v10 <= v6)
        v10 = ((unint64_t)a2 + 31) >> 5;
      if (v10 >= 0x6666667)
        goto LABEL_29;
      v11 = 40 * v10;
      v12 = WTF::fastMalloc((WTF *)(40 * v10));
      *((_DWORD *)this + 2) = (v11 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)this = v12;
      if ((_DWORD)v5)
      {
        v24 = 40 * v5;
        v25 = v8;
        do
        {
          v20 = *(_OWORD *)v25;
          v26 = *(_OWORD *)(v25 + 16);
          *(_QWORD *)(v12 + 32) = *(_QWORD *)(v25 + 32);
          *(_OWORD *)v12 = v20;
          *(_OWORD *)(v12 + 16) = v26;
          v12 += 40;
          v25 += 40;
          v24 -= 40;
        }
        while (v24);
        v12 = *(_QWORD *)this;
      }
      if (v8)
      {
        if (v12 == v8)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
        }
        WTF::fastFree(v8, v13, v14, v15, v16, v17, v18, v19);
        v8 = *(_QWORD *)this;
      }
      else
      {
        v8 = v12;
      }
    }
    if (v8)
    {
      v21 = *((unsigned int *)this + 3);
      if (v6 != v21)
        bzero((void *)(v8 + 40 * v21), 40 * ((40 * v6 - 40 * (unint64_t)v21 - 40) / 0x28) + 40);
    }
  }
  *((_DWORD *)this + 3) = v6;
  v22 = a2 & 0x1F;
  if (v4 > a2 && v22 != 0)
  {
    if ((_DWORD)v6)
    {
      v27 = *(_QWORD *)this + 40 * v6;
      v28 = (int8x16_t)vdupq_n_s32(~(-1 << v22));
      *(int8x16_t *)(v27 - 40) = vandq_s8(*(int8x16_t *)(v27 - 40), v28);
      *(int8x16_t *)(v27 - 24) = vandq_s8(*(int8x16_t *)(v27 - 24), v28);
      *(int8x8_t *)&v20 = vand_s8(*(int8x8_t *)(v27 - 8), *(int8x8_t *)v28.i8);
      *(_QWORD *)(v27 - 8) = v20;
      return *(double *)&v20;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19859CF80);
  }
  return *(double *)&v20;
}

void JSC::BlockDirectory::removeBlock(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(unsigned int *)(a2 + 12));
  v12 = *(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(a1 + 12) <= v12)
  {
    __break(0xC471u);
    return;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = 0;
  v13 = (_QWORD *)(a1 + 16);
  v29 = v12;
  v14 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 24))
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(unsigned int *)(a1 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v29);
  else
    *(_DWORD *)(*v13 + 4 * v14) = v12;
  ++*(_DWORD *)(a1 + 28);
  v15 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 56);
    goto LABEL_7;
  }
  if (__stxr(1u, v15))
    goto LABEL_6;
LABEL_7:
  v17 = *(_QWORD *)(a1 + 32);
  v18 = 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v17 + v18) &= ~(1 << *(_DWORD *)(a2 + 12));
  v19 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v19 + 4) &= ~(1 << *(_DWORD *)(a2 + 12));
  v20 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v20 + 8) &= ~(1 << *(_DWORD *)(a2 + 12));
  v21 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v21 + 12) &= ~(1 << *(_DWORD *)(a2 + 12));
  v22 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v22 + 16) &= ~(1 << *(_DWORD *)(a2 + 12));
  v23 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v23 + 20) &= ~(1 << *(_DWORD *)(a2 + 12));
  v24 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v24 + 24) &= ~(1 << *(_DWORD *)(a2 + 12));
  v25 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v25 + 28) &= ~(1 << *(_DWORD *)(a2 + 12));
  v26 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v26 + 32) &= ~(1 << *(_DWORD *)(a2 + 12));
  v27 = v17 + 40 * (*(_DWORD *)(a2 + 12) >> 5);
  *(_DWORD *)(v27 + 36) &= ~(1 << *(_DWORD *)(a2 + 12));
  if ((a3 & 1) == 0)
  {
    *(_DWORD *)(a2 + 12) = -1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(*(_QWORD *)(a2 + 88) + 16) = 0;
  }
  v28 = __ldxr(v15);
  if (v28 == 1)
  {
    if (!__stlxr(0, v15))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 56), 0, v6, v7, v8, v9, v10, v11);
}

void JSC::BlockDirectory::stopAllocating(JSC::BlockDirectory *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  char *v10;
  JSC::MarkedBlock::Handle *v11;
  uint64_t v12;

  v8 = (char *)this + 104;
  v9 = (char *)*((_QWORD *)this + 13);
  if (v9 != (char *)this + 104)
  {
    do
    {
      v10 = *(char **)v9;
      v11 = (JSC::MarkedBlock::Handle *)*((_QWORD *)v9 + 8);
      if (v11)
      {
        JSC::MarkedBlock::Handle::stopAllocating(v11, (const JSC::FreeList *)(v9 + 24), a3, a4, a5, a6, a7, a8);
        v12 = *((_QWORD *)v9 + 8);
        *((_QWORD *)v9 + 8) = 0;
        *((_QWORD *)v9 + 9) = v12;
        *((_QWORD *)v9 + 3) = 0;
        *((_QWORD *)v9 + 4) = 0;
        *((_QWORD *)v9 + 5) = 1;
        *((_QWORD *)v9 + 6) = 0;
        *((_DWORD *)v9 + 14) = 0;
      }
      v9 = v10;
    }
    while (v10 != v8);
  }
}

void JSC::BlockDirectory::stopAllocatingForGood(JSC::BlockDirectory *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  JSC::MarkedBlock::Handle *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;

  v9 = (uint64_t **)((char *)this + 104);
  v10 = (uint64_t **)*((_QWORD *)this + 13);
  if (v10 != (uint64_t **)((char *)this + 104))
  {
    do
    {
      v11 = (uint64_t **)*v10;
      v13 = v10 + 8;
      v12 = (JSC::MarkedBlock::Handle *)v10[8];
      if (v12)
        JSC::MarkedBlock::Handle::stopAllocating(v12, (const JSC::FreeList *)(v10 + 3), a3, a4, a5, a6, a7, a8);
      v10[3] = 0;
      v10[4] = 0;
      v10[5] = (uint64_t *)1;
      v10[6] = 0;
      *((_DWORD *)v10 + 14) = 0;
      *v13 = 0;
      v10[9] = 0;
      v10 = v11;
      *((_DWORD *)v13 + 4) = 0;
    }
    while (v11 != v9);
  }
  v14 = (unsigned __int8 *)this + 57;
  if (__ldaxr(v14))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
    goto LABEL_11;
  }
  if (__stxr(1u, v14))
    goto LABEL_7;
LABEL_11:
  while (1)
  {
    v18 = *v9;
    if (*v9 == (uint64_t *)v9)
      break;
    v17 = *v18;
    v16 = (uint64_t *)v18[1];
    *v16 = *v18;
    *(_QWORD *)(v17 + 8) = v16;
    *v18 = 0;
    v18[1] = 0;
  }
  v19 = __ldxr(v14);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v14))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::BlockDirectory::resumeAllocating(JSC::BlockDirectory *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;

  v8 = (char *)this + 104;
  v9 = (char *)*((_QWORD *)this + 13);
  if (v9 != (char *)this + 104)
  {
    do
    {
      v11 = *(char **)v9;
      v12 = *((_QWORD *)v9 + 9);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        v14 = (unsigned int *)(*(_QWORD *)(v12 + 88) + 24);
        v20 = v14;
        while (1)
        {
          v15 = *v14;
          if ((*v14 & 1) != 0)
            break;
          v16 = __ldaxr(v14);
          if (v16 == v15)
          {
            if (!__stxr((v15 | 1) + 4, v14))
              goto LABEL_12;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)v14);
LABEL_12:
        if (*(_DWORD *)(*(_QWORD *)(v12 + 88) + 36) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 8) + 436))
        {
          v17 = v20;
          if (v20)
          {
            while (1)
            {
              v18 = *v17;
              if ((*v17 & 3) != 1)
                break;
              v19 = __ldxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 & 0xFFFFFFFE, v17))
                  goto LABEL_3;
              }
              else
              {
                __clrex();
              }
            }
            WTF::CountingLock::unlockSlow((WTF::CountingLock *)v17, a2, a3, a4, a5, a6, a7, a8);
          }
LABEL_3:
          v10 = *(_QWORD *)(v13 + 32) + 40 * (*(_DWORD *)(v12 + 12) >> 5);
          *(_DWORD *)(v10 + 28) |= 1 << *(_DWORD *)(v12 + 12);
          JSC::MarkedBlock::Handle::sweep((JSC::MarkedBlock::Handle *)v12, (JSC::FreeList *)(v9 + 24), a3, a4, a5, a6, a7, a8);
        }
        else
        {
          *((_QWORD *)v9 + 3) = 0;
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v9 + 5) = 1;
          *((_QWORD *)v9 + 6) = 0;
          *((_DWORD *)v9 + 14) = 0;
          WTF::Locker<WTF::CountingLock,void>::~Locker(&v20, a2, a3, a4, a5, a6, a7, a8);
        }
        *((_QWORD *)v9 + 8) = *((_QWORD *)v9 + 9);
        *((_QWORD *)v9 + 9) = 0;
      }
      v9 = v11;
    }
    while (v11 != v8);
  }
}

uint64_t JSC::BlockDirectory::endMarking(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(unsigned int *)(this + 48);
  if ((_DWORD)v2)
  {
    v3 = (unint64_t)(v2 + 31) >> 5;
    v4 = (_DWORD *)(v1 + 8);
    do
    {
      *v4 = 0;
      v4 += 10;
      --v3;
    }
    while (v3);
    v5 = *(unsigned int *)(this + 48);
    if ((_DWORD)v5)
    {
      v6 = ((unint64_t)(v5 + 31) >> 5) - 1;
      do
      {
        v7 = v6;
        *(_DWORD *)(v1 + 40 * v6 + 4) = *(_DWORD *)(v1 + 40 * v6) & ~*(_DWORD *)(v1 + 40 * v6 + 32);
        --v6;
      }
      while (v7);
      v8 = *(unsigned int *)(this + 48);
      if ((_DWORD)v8)
      {
        v9 = ((unint64_t)(v8 + 31) >> 5) - 1;
        do
        {
          v10 = v9;
          *(_DWORD *)(v1 + 40 * v9 + 12) = *(_DWORD *)(v1 + 40 * v9 + 32) & *(_DWORD *)(v1 + 40 * v9) & ~*(_DWORD *)(v1 + 40 * v9 + 36);
          --v9;
        }
        while (v10);
      }
    }
  }
  if (*(_BYTE *)(this + 58) == 1)
  {
    v11 = *(unsigned int *)(this + 48);
    if ((_DWORD)v11)
    {
      v12 = ((unint64_t)(v11 + 31) >> 5) - 1;
      do
      {
        v13 = v12;
        *(_DWORD *)(v1 + 40 * v12 + 16) = *(_DWORD *)(v1 + 40 * v12);
        --v12;
      }
      while (v13);
    }
  }
  return this;
}

void JSC::BlockDirectory::sweep(JSC::BlockDirectory *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  JSC::MarkedBlock::Handle *v23;
  int v24;

  v9 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 56);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v11 = *((unsigned int *)this + 3);
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 4);
    do
    {
      v15 = *((unsigned int *)this + 12);
      v16 = v15 + 31;
      v17 = v13 >> 5;
      if (v13 >> 5 >= (v15 + 31) >> 5)
        goto LABEL_22;
      v18 = *(_DWORD *)(v14 + 40 * v17 + 24) & ~*(_DWORD *)(v14 + 40 * v17 + 28);
      if (!v18 || (v22 = (v13 & 0x1F) + __clz(__rbit32(v18 >> (v13 & 0x1F))), v22 >= 0x20))
      {
        v19 = v16 >> 5;
        if (v17 + 1 == v16 >> 5)
          goto LABEL_22;
        v20 = (_DWORD *)(v14 + 40 * v17++ + 68);
        while (1)
        {
          v21 = *(v20 - 1) & ~*v20;
          if (v21)
            break;
          v20 += 10;
          if (v19 == ++v17)
            goto LABEL_22;
        }
        v22 = __clz(__rbit32(v21));
      }
      v15 = v22 + 32 * v17;
LABEL_22:
      if (v15 >= v11)
        break;
      v23 = *(JSC::MarkedBlock::Handle **)(*(_QWORD *)this + 8 * v15);
      *(_DWORD *)(v14 + 40 * (v15 >> 5) + 28) |= 1 << v15;
      v24 = __ldxr(v9);
      if (v24 != 1)
      {
        __clrex();
LABEL_27:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_28;
      }
      if (__stlxr(0, v9))
        goto LABEL_27;
LABEL_28:
      JSC::MarkedBlock::Handle::sweep(v23, 0, a3, a4, a5, a6, a7, a8);
      if (__ldaxr(v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v9))
      {
        goto LABEL_31;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_31:
      v14 = *((_QWORD *)this + 4);
      *(_DWORD *)(v14 + 40 * (v15 >> 5) + 28) &= ~(1 << v15);
      v13 = v15 + 1;
      v11 = *((unsigned int *)this + 3);
    }
    while (v15 + 1 < v11);
  }
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v9))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::BlockDirectory::shrink(JSC::BlockDirectory *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  int v22;
  int v24;

  v9 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 56);
LABEL_5:
  v11 = *((unsigned int *)this + 3);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *((_QWORD *)this + 4);
    do
    {
      v14 = *((unsigned int *)this + 12);
      v15 = v14 + 31;
      v16 = v12 >> 5;
      if (v12 >> 5 >= (v14 + 31) >> 5)
        goto LABEL_17;
      v17 = *(_DWORD *)(v13 + 40 * v16 + 4) & ~(*(_DWORD *)(v13 + 40 * v16 + 28) | *(_DWORD *)(v13 + 40 * v16 + 16));
      if (!v17 || (v18 = (v12 & 0x1F) + __clz(__rbit32(v17 >> (v12 & 0x1F))), v18 >= 0x20))
      {
        v19 = v15 >> 5;
        if (v16 + 1 == v15 >> 5)
          goto LABEL_17;
        v20 = (_DWORD *)(v13 + 40 * v16++ + 44);
        while (1)
        {
          v21 = *v20 & ~(v20[6] | v20[3]);
          if (v21)
            break;
          v20 += 10;
          if (v19 == ++v16)
            goto LABEL_17;
        }
        v18 = __clz(__rbit32(v21));
      }
      v14 = v18 + 32 * v16;
LABEL_17:
      if (v14 >= v11)
        break;
      *(_DWORD *)(v13 + 40 * (v14 >> 5) + 28) |= 1 << v14;
      v22 = __ldxr(v9);
      if (v22 != 1)
      {
        __clrex();
LABEL_22:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_23;
      }
      if (__stlxr(0, v9))
        goto LABEL_22;
LABEL_23:
      if (v14 >= *((unsigned int *)this + 3))
      {
        __break(0xC471u);
        return;
      }
      JSC::MarkedSpace::freeBlock(*(JSC::MarkedSpace **)(*((_QWORD *)this + 9) + 8), *(JSC::MarkedBlock::Handle **)(*(_QWORD *)this + 8 * v14), a3, a4, a5, a6, a7, a8);
      if (__ldaxr(v9))
      {
        __clrex();
LABEL_27:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
        goto LABEL_28;
      }
      if (__stxr(1u, v9))
        goto LABEL_27;
LABEL_28:
      v13 = *((_QWORD *)this + 4);
      *(_DWORD *)(v13 + 40 * (v14 >> 5) + 28) &= ~(1 << v14);
      v12 = v14 + 1;
      v11 = *((unsigned int *)this + 3);
    }
    while (v14 + 1 < v11);
  }
  v24 = __ldxr(v9);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v9))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::BlockDirectory::didFinishUsingBlock(JSC::BlockDirectory *this, JSC::MarkedBlock::Handle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  WTF *v18;
  WTF::PrintStream *v19;
  int v20;

  v10 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 56);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *((_QWORD *)this + 4) + 40 * (*((_DWORD *)a2 + 3) >> 5);
  v15 = *(_DWORD *)(v12 + 28);
  v13 = (int *)(v12 + 28);
  v14 = v15;
  v16 = 1 << *((_DWORD *)a2 + 3);
  if ((v15 & v16) == 0)
  {
    v20 = *((_DWORD *)a2 + 3);
    v18 = (WTF *)WTF::dataLogLn<char [44],unsigned int>("Finish using on a block that's not in use: ", &v20);
    v19 = (WTF::PrintStream *)WTF::dataFile(v18);
    JSC::BlockDirectory::dumpBits(this, v19);
    __break(0xC471u);
    return;
  }
  *v13 = v14 & ~v16;
  v17 = __ldxr(v10);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLogLn<char [44],unsigned int>(const char *a1, _DWORD *a2)
{
  return WTF::dataLog<char [2],unsigned int,char [3]>(a1, a2, "\n");
}

uint64_t JSC::BlockDirectory::dumpBits(JSC::BlockDirectory *this, WTF::PrintStream *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  unint64_t i;
  const char *v26;
  WTF::PrintStream *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  WTF::PrintStream *v31;
  WTF::PrintStream *v32;
  WTF::PrintStream *v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v35;
  WTF::PrintStream *v36;
  WTF::PrintStream *v37;
  WTF::PrintStream *v38;
  WTF::PrintStream *v39;
  WTF::PrintStream *v40;
  WTF::PrintStream *v41;
  WTF::PrintStream *v42;
  WTF::PrintStream *v43;
  WTF::PrintStream *v44;
  WTF::PrintStream *v45;
  WTF::PrintStream *v46;
  WTF::PrintStream *v47;
  WTF::PrintStream *v48;
  unint64_t j;
  const char *v50;
  WTF::PrintStream *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::PrintStream *v54;
  WTF::PrintStream *v55;
  WTF::PrintStream *v56;
  WTF::PrintStream *v57;
  WTF::PrintStream *v58;
  WTF::PrintStream *v59;
  WTF::PrintStream *v60;
  WTF::PrintStream *v61;
  WTF::PrintStream *v62;
  WTF::PrintStream *v63;
  WTF::PrintStream *v64;
  WTF::PrintStream *v65;
  WTF::PrintStream *v66;
  WTF::PrintStream *v67;
  WTF::PrintStream *v68;
  unint64_t k;
  const char *v70;
  WTF::PrintStream *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::PrintStream *v74;
  WTF::PrintStream *v75;
  unint64_t m;
  const char *v77;
  WTF::PrintStream *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::PrintStream *v81;
  WTF::PrintStream *v82;
  WTF::PrintStream *v83;
  WTF::PrintStream *v84;
  WTF::PrintStream *v85;
  WTF::PrintStream *v86;
  WTF::PrintStream *v87;
  WTF::PrintStream *v88;
  WTF::PrintStream *v89;
  WTF::PrintStream *v90;
  WTF::PrintStream *v91;
  WTF::PrintStream *v92;
  unint64_t n;
  const char *v94;
  WTF::PrintStream *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::PrintStream *v98;
  WTF::PrintStream *v99;
  WTF::PrintStream *v100;
  WTF::PrintStream *v101;
  WTF::PrintStream *v102;
  WTF::PrintStream *v103;
  WTF::PrintStream *v104;
  WTF::PrintStream *v105;
  WTF::PrintStream *v106;
  WTF::PrintStream *v107;
  WTF::PrintStream *v108;
  WTF::PrintStream *v109;
  WTF::PrintStream *v110;
  WTF::PrintStream *v111;
  WTF::PrintStream *v112;
  WTF::PrintStream *v113;
  WTF::PrintStream *v114;
  WTF::PrintStream *v115;
  WTF::PrintStream *v116;
  WTF::PrintStream *v117;
  unint64_t ii;
  const char *v119;
  WTF::PrintStream *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::PrintStream *v123;
  WTF::PrintStream *v124;
  WTF::PrintStream *v125;
  WTF::PrintStream *v126;
  WTF::PrintStream *v127;
  WTF::PrintStream *v128;
  WTF::PrintStream *v129;
  WTF::PrintStream *v130;
  WTF::PrintStream *v131;
  WTF::PrintStream *v132;
  WTF::PrintStream *v133;
  WTF::PrintStream *v134;
  WTF::PrintStream *v135;
  WTF::PrintStream *v136;
  WTF::PrintStream *v137;
  WTF::PrintStream *v138;
  WTF::PrintStream *v139;
  unint64_t jj;
  const char *v141;
  WTF::PrintStream *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::PrintStream *v145;
  WTF::PrintStream *v146;
  WTF::PrintStream *v147;
  WTF::PrintStream *v148;
  WTF::PrintStream *v149;
  WTF::PrintStream *v150;
  WTF::PrintStream *v151;
  WTF::PrintStream *v152;
  WTF::PrintStream *v153;
  WTF::PrintStream *v154;
  WTF::PrintStream *v155;
  WTF::PrintStream *v156;
  WTF::PrintStream *v157;
  WTF::PrintStream *v158;
  WTF::PrintStream *v159;
  WTF::PrintStream *v160;
  WTF::PrintStream *v161;
  WTF::PrintStream *v162;
  WTF::PrintStream *v163;
  unint64_t kk;
  const char *v165;
  WTF::PrintStream *v166;
  uint64_t v167;
  uint64_t v168;
  WTF::PrintStream *v169;
  WTF::PrintStream *v170;
  WTF::PrintStream *v171;
  WTF::PrintStream *v172;
  WTF::PrintStream *v173;
  WTF::PrintStream *v174;
  WTF::PrintStream *v175;
  WTF::PrintStream *v176;
  WTF::PrintStream *v177;
  unint64_t mm;
  const char *v179;
  WTF::PrintStream *v180;
  uint64_t v181;
  uint64_t v182;
  WTF::PrintStream *v183;
  WTF::PrintStream *v184;
  WTF::PrintStream *v185;
  WTF::PrintStream *v186;
  WTF::PrintStream *v187;
  WTF::PrintStream *v188;
  WTF::PrintStream *v189;
  WTF::PrintStream *v190;
  WTF::PrintStream *v191;
  WTF::PrintStream *v192;
  unint64_t nn;
  const char *v194;
  WTF::PrintStream *v195;

  v3 = *((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 12);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "    ");
  WTF::PrintStream::printf(v5, "%s", "Live");
  WTF::PrintStream::printf(v5, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v9, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v10, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v11, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v12, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v13, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v14, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v15, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v16, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v17, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v18, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v19, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v21, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v22, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v23, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (((*(_DWORD *)(v3 + 40 * (i >> 5)) >> i) & 1) != 0)
        v26 = "1";
      else
        v26 = "-";
      v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 32))(v24);
      WTF::PrintStream::printf(v27, "%s", v26);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 40))(v24);
    }
  }
  WTF::PrintStream::printf(v24, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v28 = *((_QWORD *)this + 4);
  v29 = *((unsigned int *)this + 12);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v30, "%s", "    ");
  WTF::PrintStream::printf(v30, "%s", "Empty");
  WTF::PrintStream::printf(v30, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v31, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v32, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v33, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v34, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v35, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v36, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v37, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v38, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v39, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v40, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v41 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v41, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v42, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v43, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v44, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v45 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v45, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v46, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v47, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v29)
  {
    for (j = 0; j != v29; ++j)
    {
      if (((*(_DWORD *)(v28 + 40 * (j >> 5) + 4) >> j) & 1) != 0)
        v50 = "1";
      else
        v50 = "-";
      v51 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v48 + 32))(v48);
      WTF::PrintStream::printf(v51, "%s", v50);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v48 + 40))(v48);
    }
  }
  WTF::PrintStream::printf(v48, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v52 = *((_QWORD *)this + 4);
  v53 = *((unsigned int *)this + 12);
  v54 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v54, "%s", "    ");
  WTF::PrintStream::printf(v54, "%s", "Allocated");
  WTF::PrintStream::printf(v54, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v55, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v56, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v57 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v57, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v58, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v59 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v59, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v60 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v60, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v61 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v61, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v62 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v62, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v63 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v63, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v64 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v64, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v65, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v66 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v66, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v67 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v67, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v53)
  {
    for (k = 0; k != v53; ++k)
    {
      if (((*(_DWORD *)(v52 + 40 * (k >> 5) + 8) >> k) & 1) != 0)
        v70 = "1";
      else
        v70 = "-";
      v71 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v68 + 32))(v68);
      WTF::PrintStream::printf(v71, "%s", v70);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v68 + 40))(v68);
    }
  }
  WTF::PrintStream::printf(v68, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v72 = *((_QWORD *)this + 4);
  v73 = *((unsigned int *)this + 12);
  v74 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v74, "%s", "    ");
  WTF::PrintStream::printf(v74, "%s", "CanAllocateButNotEmpty");
  WTF::PrintStream::printf(v74, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v75 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v73)
  {
    for (m = 0; m != v73; ++m)
    {
      if (((*(_DWORD *)(v72 + 40 * (m >> 5) + 12) >> m) & 1) != 0)
        v77 = "1";
      else
        v77 = "-";
      v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 32))(v75);
      WTF::PrintStream::printf(v78, "%s", v77);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 40))(v75);
    }
  }
  WTF::PrintStream::printf(v75, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v79 = *((_QWORD *)this + 4);
  v80 = *((unsigned int *)this + 12);
  v81 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v81, "%s", "    ");
  WTF::PrintStream::printf(v81, "%s", "Destructible");
  WTF::PrintStream::printf(v81, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v82 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v82, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v83 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v83, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v84 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v84, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v85 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v85, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v86 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v86, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v87 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v87, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v88 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v88, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v89 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v89, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v90 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v90, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v91 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v91, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v92 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v80)
  {
    for (n = 0; n != v80; ++n)
    {
      if (((*(_DWORD *)(v79 + 40 * (n >> 5) + 16) >> n) & 1) != 0)
        v94 = "1";
      else
        v94 = "-";
      v95 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v92 + 32))(v92);
      WTF::PrintStream::printf(v95, "%s", v94);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v92 + 40))(v92);
    }
  }
  WTF::PrintStream::printf(v92, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v96 = *((_QWORD *)this + 4);
  v97 = *((unsigned int *)this + 12);
  v98 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v98, "%s", "    ");
  WTF::PrintStream::printf(v98, "%s", "Eden");
  WTF::PrintStream::printf(v98, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v99 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v99, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v100 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v100, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v101 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v101, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v102 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v102, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v103 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v103, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v104 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v104, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v105 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v105, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v106 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v106, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v107 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v107, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v108 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v108, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v109 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v109, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v110 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v110, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v111 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v111, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v112 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v112, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v113 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v113, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v114 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v114, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v115 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v115, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v116 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v116, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v117 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v97)
  {
    for (ii = 0; ii != v97; ++ii)
    {
      if (((*(_DWORD *)(v96 + 40 * (ii >> 5) + 20) >> ii) & 1) != 0)
        v119 = "1";
      else
        v119 = "-";
      v120 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v117 + 32))(v117);
      WTF::PrintStream::printf(v120, "%s", v119);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v117 + 40))(v117);
    }
  }
  WTF::PrintStream::printf(v117, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v121 = *((_QWORD *)this + 4);
  v122 = *((unsigned int *)this + 12);
  v123 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v123, "%s", "    ");
  WTF::PrintStream::printf(v123, "%s", "Unswept");
  WTF::PrintStream::printf(v123, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v124 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v124, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v125 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v125, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v126 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v126, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v127 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v127, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v128 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v128, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v129 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v129, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v130 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v130, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v131 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v131, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v132 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v132, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v133 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v133, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v134 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v134, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v135 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v135, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v136 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v136, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v137 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v137, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v138 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v138, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v139 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v122)
  {
    for (jj = 0; jj != v122; ++jj)
    {
      if (((*(_DWORD *)(v121 + 40 * (jj >> 5) + 24) >> jj) & 1) != 0)
        v141 = "1";
      else
        v141 = "-";
      v142 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v139 + 32))(v139);
      WTF::PrintStream::printf(v142, "%s", v141);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v139 + 40))(v139);
    }
  }
  WTF::PrintStream::printf(v139, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v143 = *((_QWORD *)this + 4);
  v144 = *((unsigned int *)this + 12);
  v145 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v145, "%s", "    ");
  WTF::PrintStream::printf(v145, "%s", "InUse");
  WTF::PrintStream::printf(v145, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v146 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v146, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v147 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v147, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v148 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v148, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v149 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v149, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v150 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v150, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v151 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v151, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v152 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v152, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v153 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v153, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v154 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v154, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v155 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v155, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v156 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v156, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v157 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v157, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v158 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v158, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v159 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v159, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v160 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v160, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v161 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v161, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v162 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v162, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v163 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v144)
  {
    for (kk = 0; kk != v144; ++kk)
    {
      if (((*(_DWORD *)(v143 + 40 * (kk >> 5) + 28) >> kk) & 1) != 0)
        v165 = "1";
      else
        v165 = "-";
      v166 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v163 + 32))(v163);
      WTF::PrintStream::printf(v166, "%s", v165);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v163 + 40))(v163);
    }
  }
  WTF::PrintStream::printf(v163, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v167 = *((_QWORD *)this + 4);
  v168 = *((unsigned int *)this + 12);
  v169 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v169, "%s", "    ");
  WTF::PrintStream::printf(v169, "%s", "MarkingNotEmpty");
  WTF::PrintStream::printf(v169, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v170 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v170, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v171 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v171, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v172 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v172, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v173 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v173, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v174 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v174, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v175 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v175, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v176 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v176, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v177 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v168)
  {
    for (mm = 0; mm != v168; ++mm)
    {
      if (((*(_DWORD *)(v167 + 40 * (mm >> 5) + 32) >> mm) & 1) != 0)
        v179 = "1";
      else
        v179 = "-";
      v180 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v177 + 32))(v177);
      WTF::PrintStream::printf(v180, "%s", v179);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v177 + 40))(v177);
    }
  }
  WTF::PrintStream::printf(v177, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v181 = *((_QWORD *)this + 4);
  v182 = *((unsigned int *)this + 12);
  v183 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v183, "%s", "    ");
  WTF::PrintStream::printf(v183, "%s", "MarkingRetired");
  WTF::PrintStream::printf(v183, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v184 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v184, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v185 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v185, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v186 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v186, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v187 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v187, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v188 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v188, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v189 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v189, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v190 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v190, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v191 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v191, "%s", " ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v192 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v182)
  {
    for (nn = 0; nn != v182; ++nn)
    {
      if (((*(_DWORD *)(v181 + 40 * (nn >> 5) + 36) >> nn) & 1) != 0)
        v194 = "1";
      else
        v194 = "-";
      v195 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v192 + 32))(v192);
      WTF::PrintStream::printf(v195, "%s", v194);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v192 + 40))(v192);
    }
  }
  WTF::PrintStream::printf(v192, "%s", "\n");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::CellAttributes::dump(JSC::CellAttributes *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  unint64_t v7;
  const char *v8;
  WTF::PrintStream *v9;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "{");
  if (*(_BYTE *)this == 1)
  {
    v5 = "NeedsDestruction";
  }
  else
  {
    if (*(_BYTE *)this)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x19859FC44);
    }
    v5 = "DoesNotNeedDestruction";
  }
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", ", ");
  v7 = *((char *)this + 1);
  if (v7 >= 3)
    goto LABEL_7;
  v8 = off_1E35903C0[v7];
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v9, "%s", v8);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "}");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::CodeBlockSet::contains(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  v3 = atomic_load(a1 + 16);
  if ((v3 & 1) != 0)
  {
    if ((unint64_t)(a3 + 1) >= 2 && (v5 = *(_QWORD *)a1) != 0)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(_QWORD *)(v5 + 8 * v10);
      if (v11 == a3)
      {
        return 1;
      }
      else
      {
        v12 = 1;
        do
        {
          result = v11 != 0;
          if (!v11)
            break;
          v10 = (v10 + v12) & v6;
          v11 = *(_QWORD *)(v5 + 8 * v10);
          ++v12;
        }
        while (v11 != a3);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

void JSC::CodeBlockSet::clearCurrentlyExecutingAndRemoveDeadCodeBlocks(JSC::CodeBlockSet *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;

  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 1) = 0;
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return;
  v12 = *(_DWORD *)(v11 - 4);
  if (!v12)
    return;
  v13 = 0;
  v14 = v12 - 1;
  do
  {
    v15 = v14;
    v16 = *(_QWORD *)(v11 + 8 * v14);
    if (v16 + 1 < 2)
      goto LABEL_7;
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_12;
    }
    else if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
           || ((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
    {
LABEL_12:
      *(_QWORD *)(v11 + 8 * v14) = -1;
      ++v13;
    }
LABEL_7:
    --v14;
  }
  while (v15);
  v17 = *(_QWORD *)this;
  if (v13)
  {
    *(_DWORD *)(v17 - 16) += v13;
    v18 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    *(_DWORD *)(v18 - 12) = v19 - v13;
    v17 = *(_QWORD *)this;
  }
  if (v17)
  {
    v20 = *(_DWORD *)(v17 - 4);
    v21 = *(unsigned int *)(v17 - 12);
    if (v20 >= 9 && 6 * (int)v21 < v20)
    {
      v23 = (v21 - 1) | ((v21 - 1) >> 1) | ((((_DWORD)v21 - 1) | ((v21 - 1) >> 1)) >> 2);
      v24 = v23 | (v23 >> 4) | ((v23 | (v23 >> 4)) >> 8);
      v25 = (v24 | HIWORD(v24)) + 1;
      if (v25 > 0x400)
      {
        if (v25 <= 2 * v21)
        {
LABEL_28:
          LODWORD(v25) = 2 * v25;
          if (v25 <= 0x400)
            goto LABEL_36;
        }
        v26 = (double)v21;
        v27 = (double)v25;
        v28 = 0.416666667;
      }
      else
      {
        if (3 * v25 <= 4 * v21)
          goto LABEL_28;
LABEL_36:
        v26 = (double)v21;
        v27 = (double)v25;
        v28 = 0.604166667;
      }
      if (v27 * v28 <= v26)
        LODWORD(v25) = 2 * v25;
      if (v25 <= 8)
        v29 = 8;
      else
        v29 = v25;
      WTF::HashTable<JSC::CodeBlock *,JSC::CodeBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::rehash((uint64_t *)this, v29, 0, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::CodeBlockSet::add(JSC::CodeBlockSet *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  JSC::CodeBlock **v18;
  JSC::CodeBlock *v19;
  JSC::CodeBlock **v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;

  v10 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
LABEL_4:
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<JSC::CodeBlock *,JSC::CodeBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::rehash((uint64_t *)this, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *(_QWORD *)this) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = (JSC::CodeBlock **)(v12 + 8 * v17);
  v19 = *v18;
  if (*v18)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1985A0060);
      }
      if (v19 == (JSC::CodeBlock *)-1)
        v20 = v18;
      v17 = (v17 + v21) & v13;
      v18 = (JSC::CodeBlock **)(v12 + 8 * v17);
      v19 = *v18;
      ++v21;
    }
    while (*v18);
    if (v20)
    {
      *v20 = 0;
      --*(_DWORD *)(*(_QWORD *)this - 16);
      v18 = v20;
    }
  }
  *v18 = a2;
  v22 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_20;
  }
  else
  {
    if (3 * v27 > 4 * v26)
      goto LABEL_20;
    if (!(_DWORD)v27)
    {
      v29 = 8;
      goto LABEL_34;
    }
  }
  v29 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
LABEL_34:
  WTF::HashTable<JSC::CodeBlock *,JSC::CodeBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::rehash((uint64_t *)this, v29, (uint64_t)v18, a4, a5, a6, a7, a8);
LABEL_20:
  v28 = __ldxr(v10);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v10))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, (uint64_t)v18, a4, a5, a6, a7, a8);
}

uint64_t JSC::BlockDirectory::parallelNotEmptyBlockSource(void)::Task::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (*(_BYTE *)(a1 + 33))
    return 0;
  v9 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(v11 + 48);
  v13 = *(_QWORD *)(a1 + 24) >> 5;
  if (v13 < (v12 + 31) >> 5)
  {
    v14 = *(_QWORD *)(v11 + 32);
    v15 = *(_DWORD *)(v14 + 40 * v13 + 32);
    if (!v15
      || (v16 = (*(_QWORD *)(a1 + 24) & 0x1FLL) + __clz(__rbit32(v15 >> (*(_QWORD *)(a1 + 24) & 0x1F))), v16 >= 0x20))
    {
      v20 = (v12 + 31) >> 5;
      if (v13 + 1 == v20)
        goto LABEL_9;
      v21 = (unsigned int *)(v14 + 40 * v13++ + 72);
      while (1)
      {
        v23 = *v21;
        v21 += 10;
        v22 = v23;
        if (v23)
          break;
        if (v20 == ++v13)
          goto LABEL_9;
      }
      v16 = __clz(__rbit32(v22));
    }
    v12 = v16 + 32 * v13;
  }
LABEL_9:
  *(_QWORD *)(a1 + 24) = v12;
  if (v12 < *(unsigned int *)(v11 + 12))
  {
    *(_QWORD *)(a1 + 24) = v12 + 1;
    v17 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v12);
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(a1 + 33) = 1;
  }
  v18 = __ldxr(v9);
  if (v18 == 1)
  {
    if (!__stlxr(0, v9))
      return v17;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v17;
}

_QWORD *WTF::HashTable<JSC::CodeBlock *,JSC::CodeBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t JSC::CompleteSubspace::CompleteSubspace(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v11 = *a2;
  if (*a2)
    ++*v11;
  v12 = a3 + 160;
  *(_QWORD *)a1 = off_1E3591150;
  *(_QWORD *)(a1 + 8) = a3 + 160;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (v11)
  {
    v13 = (*v11)++;
    *(_QWORD *)(a1 + 80) = v11;
    if (v13)
    {
      *v11 = v13;
    }
    else
    {
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = off_1E35903E8;
  bzero((void *)(a1 + 88), 0xFD8uLL);
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a5 + 8);
  v20 = a1;
  v14 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v12 + 8))
  {
    v19 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v14 + 1, (unint64_t)&v20);
    v14 = *(unsigned int *)(v12 + 12);
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = *v19;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = a1;
  }
  *(_DWORD *)(v12 + 12) = v14 + 1;
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_16;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(v15 + 24);
  v17 = *(_QWORD *)(v15 + 32);
  if (*(_QWORD *)(v15 + 24))
  {
    v16 = (_QWORD *)(v17 + 72);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1985A04C4);
  }
LABEL_11:
  *v16 = a1;
  *(_QWORD *)(v15 + 32) = a1;
  return a1;
}

{
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v11 = *a2;
  if (*a2)
    ++*v11;
  v12 = a3 + 160;
  *(_QWORD *)a1 = off_1E3591150;
  *(_QWORD *)(a1 + 8) = a3 + 160;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (v11)
  {
    v13 = (*v11)++;
    *(_QWORD *)(a1 + 80) = v11;
    if (v13)
    {
      *v11 = v13;
    }
    else
    {
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = off_1E35903E8;
  bzero((void *)(a1 + 88), 0xFD8uLL);
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a5 + 8);
  v20 = a1;
  v14 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v12 + 8))
  {
    v19 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v14 + 1, (unint64_t)&v20);
    v14 = *(unsigned int *)(v12 + 12);
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = *v19;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = a1;
  }
  *(_DWORD *)(v12 + 12) = v14 + 1;
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_16;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(v15 + 24);
  v17 = *(_QWORD *)(v15 + 32);
  if (*(_QWORD *)(v15 + 24))
  {
    v16 = (_QWORD *)(v17 + 72);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1985A0644);
  }
LABEL_11:
  *v16 = a1;
  *(_QWORD *)(v15 + 32) = a1;
  return a1;
}

void JSC::CompleteSubspace::~CompleteSubspace(JSC::CompleteSubspace *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::LocalAllocator **v10;
  uint64_t v11;
  JSC::LocalAllocator *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  JSC::BlockDirectory **v23;
  uint64_t v24;
  JSC::BlockDirectory *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;

  v9 = *((unsigned int *)this + 1035);
  if ((_DWORD)v9)
  {
    v10 = (JSC::LocalAllocator **)*((_QWORD *)this + 516);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        JSC::LocalAllocator::~LocalAllocator(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v21 = *((_QWORD *)this + 516);
  if (v21)
  {
    *((_QWORD *)this + 516) = 0;
    *((_DWORD *)this + 1034) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((unsigned int *)this + 1031);
  if ((_DWORD)v22)
  {
    v23 = (JSC::BlockDirectory **)*((_QWORD *)this + 514);
    v24 = 8 * v22;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        JSC::BlockDirectory::~BlockDirectory(v25, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v34 = *((_QWORD *)this + 514);
  if (v34)
  {
    *((_QWORD *)this + 514) = 0;
    *((_DWORD *)this + 1030) = 0;
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3591150;
  v35 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v35)
  {
    if (*v35 == 1)
      WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v35;
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::CompleteSubspace::~CompleteSubspace(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::CompleteSubspace::allocatorForSlow(JSC::CompleteSubspace *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int i;
  char *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t j;
  uint64_t *v35;
  uint64_t v36;
  JSC::LocalAllocator *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::BlockDirectory *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::LocalAllocator *v64;
  JSC::BlockDirectory *v65;

  v8 = (unint64_t)(a2 + 15) >> 4;
  if (v8 >= 0x1F7)
    goto LABEL_50;
  v9 = JSC::MarkedSpace::s_sizeClassForSizeStep[v8];
  if (!(_DWORD)v9)
    return 0;
  v11 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 94);
  if (__ldaxr(v11))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
    goto LABEL_6;
  }
  if (__stxr(1u, v11))
    goto LABEL_5;
LABEL_6:
  v13 = *((_QWORD *)this + v8 + 11);
  if (!v13)
  {
    v14 = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(v14 + 48) = 0;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)v14 = 0u;
    *(_DWORD *)(v14 + 56) = 0;
    *(_DWORD *)(v14 + 60) = v9;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_QWORD *)(v14 + 104) = v14 + 104;
    *(_QWORD *)(v14 + 112) = v14 + 104;
    *(_QWORD *)(v14 + 96) = 0;
    v65 = (JSC::BlockDirectory *)v14;
    v15 = (uint64_t *)((char *)this + 4112);
    v16 = *((unsigned int *)this + 1031);
    if ((_DWORD)v16 == *((_DWORD *)this + 1030))
    {
      v57 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v65);
      v16 = *((unsigned int *)this + 1031);
      v58 = *((_QWORD *)this + 514);
      v59 = *v57;
      *v57 = 0;
      *(_QWORD *)(v58 + 8 * v16) = v59;
    }
    else
    {
      v17 = *v15;
      v65 = 0;
      *(_QWORD *)(v17 + 8 * v16) = v14;
    }
    *((_DWORD *)this + 1031) = v16 + 1;
    *(_WORD *)(v14 + 58) = *(_WORD *)(*((_QWORD *)this + 2) + 8);
    *(_QWORD *)(v14 + 72) = this;
    v18 = *((_QWORD *)this + 1);
    *(_QWORD *)(v14 + 80) = 0;
    __dmb(0xAu);
    v19 = (uint64_t *)(v18 + 144);
    v20 = *(_QWORD *)(v18 + 152);
    if (*(_QWORD *)(v18 + 144))
    {
      v19 = (uint64_t *)(v20 + 80);
    }
    else if (v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1985A0A2CLL);
    }
    *v19 = v14;
    *(_QWORD *)(v18 + 152) = v14;
    v13 = WTF::fastCompactMalloc((WTF *)0x58);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v14;
    v22 = *(_DWORD *)(v14 + 60);
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 1;
    *(_QWORD *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    *(_DWORD *)(v13 + 60) = v22;
    v23 = (unsigned __int8 *)(v14 + 57);
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 72) = 0;
    *(_DWORD *)(v13 + 80) = 0;
    if (__ldaxr((unsigned __int8 *)(v14 + 57)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
LABEL_14:
      v25 = *(uint64_t **)(v14 + 112);
      *(_QWORD *)v13 = v14 + 104;
      *(_QWORD *)(v13 + 8) = v25;
      *v25 = v13;
      *(_QWORD *)(v14 + 112) = v13;
      LODWORD(v25) = __ldxr(v23);
      if ((_DWORD)v25 == 1)
      {
        if (!__stlxr(0, v23))
        {
LABEL_19:
          v64 = (JSC::LocalAllocator *)v13;
          v26 = (uint64_t *)((char *)this + 4128);
          v27 = *((unsigned int *)this + 1035);
          if ((_DWORD)v27 == *((_DWORD *)this + 1034))
          {
            v60 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::LocalAllocator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v64);
            v27 = *((unsigned int *)this + 1035);
            v61 = *((_QWORD *)this + 516);
            v62 = *v60;
            *v60 = 0;
            *(_QWORD *)(v61 + 8 * v27) = v62;
          }
          else
          {
            v28 = *v26;
            v64 = 0;
            *(_QWORD *)(v28 + 8 * v27) = v13;
          }
          *((_DWORD *)this + 1035) = v27 + 1;
          if (v9 < 0x1F61)
          {
            v29 = (unint64_t)(v9 + 15) >> 4;
            for (i = JSC::MarkedSpace::s_sizeClassForSizeStep[v29]; (_DWORD)v9 == i; i = *((_DWORD *)v31 - 1))
            {
              *((_QWORD *)this + v29 + 11) = v13;
              if (!v29)
                break;
              v31 = (char *)&JSC::MarkedSpace::s_sizeClassForSizeStep[v29--];
            }
            *(_QWORD *)(v14 + 88) = *((_QWORD *)this + 4);
            if (!*(_QWORD *)(v14 + 96))
            {
              v32 = (_QWORD *)*((_QWORD *)this + 3);
              v33 = v32 + 1;
              if (v32[1])
              {
                v63 = v32[2];
                v35 = v32 + 2;
                v33 = (uint64_t *)(v63 + 96);
              }
              else
              {
                for (j = v32[3]; j; j = *(_QWORD *)(j + 72))
                  *(_QWORD *)(j + 40) = v14;
                v36 = v32[2];
                v35 = v32 + 2;
                if (v36)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1985A0AE4);
                }
              }
              *v33 = v14;
              *v35 = v14;
              __dmb(0xAu);
              *((_QWORD *)this + 4) = v14;
              v37 = v64;
              v64 = 0;
              if (v37)
              {
                JSC::LocalAllocator::~LocalAllocator(v37, (uint64_t)v21, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
              }
              v46 = v65;
              v65 = 0;
              if (v46)
              {
                JSC::BlockDirectory::~BlockDirectory(v46, v21, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
              }
              goto LABEL_35;
            }
LABEL_51:
            __break(0xC471u);
            JUMPOUT(0x1985A0AC4);
          }
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v14 + 57), 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_19;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v14 + 57);
    goto LABEL_14;
  }
LABEL_35:
  v55 = __ldxr(v11);
  if (v55 == 1)
  {
    if (!__stlxr(0, v11))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return v13;
}

uint64_t JSC::CompleteSubspace::allocateSlow(uint64_t a1, JSC *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;

  v8 = a5;
  result = JSC::CompleteSubspace::tryAllocateSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v8 && !result)
  {
    result = 110;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::CompleteSubspace::tryAllocateSlow(uint64_t a1, JSC *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  JSC::Heap *v23;
  size_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned __int8 *v42;
  unsigned __int8 **v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  unint64_t v53;

  v53 = a3;
  JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
  if (a3 > 0x1F60)
  {
LABEL_8:
    v23 = (JSC *)((char *)a2 + 192);
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v23, a4);
    if (HIDWORD(qword_1ECF4C580))
    {
      v46 = JSC::Heap::capacity(v23);
      v47 = HIDWORD(qword_1ECF4C580);
      if (v46 > WTF::ramSize((WTF *)v46) * v47)
        return 0;
    }
    v24 = (a3 + 15) & 0xFFFFFFFFFFFFFFF0;
    v25 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 36);
    v26 = (*(uint64_t (**)(_QWORD, size_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v24 + 136);
    if (!v26)
      return 0;
    v33 = (unsigned __int8 *)(v26 + 8);
    if (((v26 + 8) & 0xF) == 0)
      v33 = (unsigned __int8 *)v26;
    v34 = ((_BYTE)v33 + 48) & 0x3F;
    if (v34 >= 0x31)
      v35 = v33 + 16;
    else
      v35 = v33;
    if (v34 >= 0x31)
      v36 = (8 * (((v26 + 8) & 0xF) != 0)) | 0x10;
    else
      v36 = 8 * (((v26 + 8) & 0xF) != 0);
    if (byte_1ECF4C400)
      v37 = v24 == 0;
    else
      v37 = 1;
    if (!v37)
    {
      v48 = v36;
      memset_pattern16(v35, &memset_pattern_0, v24);
      v36 = v48;
    }
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_DWORD *)v35 + 4) = v25;
    *((_QWORD *)v35 + 3) = v24;
    v35[32] = v35[32] & 0x80 | (4 * v36) | 3;
    v35[33] = 0;
    *((_WORD *)v35 + 17) = *(_WORD *)(*(_QWORD *)(a1 + 16) + 8);
    v35[36] = -1;
    *((_QWORD *)v35 + 5) = a1;
    *((_OWORD *)v35 + 3) = 0u;
    *((_OWORD *)v35 + 4) = 0u;
    *((_OWORD *)v35 + 5) = 0u;
    *((_QWORD *)v35 + 12) = (char *)v23 - 192;
    atomic_store(0, v35 + 33);
    v52 = v35;
    v38 = *(_QWORD *)(a1 + 8);
    v39 = (_QWORD *)(v38 + 24);
    v40 = *(unsigned int *)(v38 + 36);
    if ((_DWORD)v40 == *(_DWORD *)(v38 + 32))
    {
      v44 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v52);
      v40 = *(unsigned int *)(v38 + 36);
      *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8 * v40) = *v44;
    }
    else
    {
      *(_QWORD *)(*v39 + 8 * v40) = v35;
    }
    *(_DWORD *)(v38 + 36) = v40 + 1;
    v41 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
    if (v41)
    {
      v51 = v52 + 112;
      WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v41, (uint64_t *)&v51, v28, v29, v30, v31, v32, (uint64_t)&v50);
    }
    JSC::Heap::didAllocate(v23, v24, v27, v28, v29, v30, v31, v32);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) += v24;
    v42 = v52;
    v43 = *(unsigned __int8 ***)(a1 + 56);
    *(_QWORD *)v52 = a1 + 48;
    *((_QWORD *)v42 + 1) = v43;
    *v43 = v42;
    *(_QWORD *)(a1 + 56) = v42;
    return (uint64_t)(v52 + 112);
  }
  v19 = *(_QWORD *)(a1 + 8 * ((a3 + 15) >> 4) + 88);
  if (!v19)
  {
    v19 = JSC::CompleteSubspace::allocatorForSlow((JSC::CompleteSubspace *)a1, a3, v13, v14, v15, v16, v17, v18);
    if (!v19)
    {
      if (dword_1ECF4C410 >= a3)
      {
        WTF::dataLog<char [68]>();
        WTF::dataLog<char [28],unsigned long,char [2]>(&v53);
        __break(0xC471u);
        JUMPOUT(0x1985A0E2CLL);
      }
      goto LABEL_8;
    }
  }
  v20 = *(unsigned int *)(v19 + 60);
  v21 = *(_QWORD *)(v19 + 24);
  if (v21 < *(_QWORD *)(v19 + 32))
  {
LABEL_4:
    *(_QWORD *)(v19 + 24) = v21 + v20;
    return v21;
  }
  v21 = *(_QWORD *)(v19 + 40);
  if ((v21 & 1) == 0)
  {
    v45 = *(_QWORD *)(v21 + 8) ^ *(_QWORD *)(v19 + 48);
    *(_QWORD *)(v19 + 32) = v21 + HIDWORD(v45);
    *(_QWORD *)(v19 + 40) = v21 + (int)v45;
    goto LABEL_4;
  }
  v49 = v19;
  JSC::sanitizeStackForVM(a2, v12, v13, v14, v15, v16, v17, v18);
  return JSC::LocalAllocator::allocateSlowCase(v49, (char *)a2 + 192, v20, a4, 1);
}

uint64_t WTF::dataLog<char [68]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "FATAL: attampting to allocate small object using large allocation.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [28],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Requested allocation size: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

char *JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(uint64_t a1, JSC *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v14;
  JSC::Heap *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  char **v35;
  char *result;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  unint64_t v45;

  v8 = a6;
  v45 = a4;
  JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
  if (a4 <= 0x1F60 && dword_1ECF4C410 >= a4)
  {
    WTF::dataLog<char [68]>();
    WTF::dataLog<char [28],unsigned long,char [2]>(&v45);
    __break(0xC471u);
    goto LABEL_26;
  }
  v14 = (char *)(a3 - 112);
  v15 = (JSC *)((char *)a2 + 192);
  JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v15, a5);
  v16 = (a4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)(a3 - 88);
  v18 = *(unsigned int *)(a3 - 96);
  v19 = *(_QWORD **)(a3 - 104);
  if (v19)
  {
    v20 = *(_QWORD *)v14;
    *v19 = *(_QWORD *)v14;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(a3 - 104) = 0;
  }
  v21 = ((unint64_t)*(unsigned __int8 *)(a3 - 80) >> 2) & 0x1F;
  v22 = (*(uint64_t (**)(_QWORD, char *, unint64_t))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), &v14[-v21], v16 + 136);
  if (v22)
  {
    v29 = (char *)(v22 + 8);
    if (((v22 + 8) & 0xF) == 0)
      v29 = (char *)v22;
    v30 = ((_BYTE)v29 + 48) & 0x3F;
    if (v30 >= 0x31)
      v31 = v29 + 16;
    else
      v31 = v29;
    if (v30 >= 0x31)
      v32 = (8 * (((v22 + 8) & 0xF) != 0)) | 0x10;
    else
      v32 = 8 * (((v22 + 8) & 0xF) != 0);
    if (v32 != (_DWORD)v21)
      memmove(v31, (const void *)(v22 + v21), (v17 + 112));
    *((_QWORD *)v31 + 3) = v16;
    v31[32] = v31[32] & 0x83 | (4 * v32);
    if (v14 != v31)
    {
      v33 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
      if (v33)
      {
        v43[0] = a3;
        WTF::HashSet<JSC::HeapCell *,WTF::DefaultHash<JSC::HeapCell *>,WTF::HashTraits<JSC::HeapCell *>,WTF::HashTableTraits>::remove(v33, v43, v23, v24, v25, v26, v27, v28);
        v44 = v31 + 112;
        WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v33, (uint64_t *)&v44, v38, v39, v40, v41, v42, (uint64_t)v43);
      }
    }
    v34 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v34 + 36) > v18)
    {
      *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v18) = v31;
      JSC::Heap::didAllocate(v15, v16 - v17, v23, v24, v25, v26, v27, v28);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) += v16 - v17;
      v35 = *(char ***)(a1 + 56);
      *(_QWORD *)v31 = a1 + 48;
      *((_QWORD *)v31 + 1) = v35;
      *v35 = v31;
      *(_QWORD *)(a1 + 56) = v31;
      return v31 + 112;
    }
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x1985A1194);
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1985A1200);
  }
  result = 0;
  v37 = *(char ***)(a1 + 56);
  *(_QWORD *)(a3 - 112) = a1 + 48;
  *(_QWORD *)(a3 - 104) = v37;
  *v37 = v14;
  *(_QWORD *)(a1 + 56) = v14;
  return result;
}

uint64_t WTF::HashSet<JSC::HeapCell *,WTF::DefaultHash<JSC::HeapCell *>,WTF::HashTraits<JSC::HeapCell *>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v8 = *a1;
  if (!*a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ~(*a2 << 32) + *a2;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v9 & (((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27)));
  v14 = *(_QWORD *)(v8 + 8 * v13);
  if (v14 != *a2)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v8 + 8 * v13);
      ++v15;
      if (v14 == *a2)
        goto LABEL_8;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_8:
  if (v13 == *(_DWORD *)(v8 - 4))
    return 0;
  *(_QWORD *)(v8 + 8 * v13) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) - 1;
  else
    v18 = -1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
  {
    v20 = 6 * *(_DWORD *)(v19 - 12);
    v21 = *(_DWORD *)(v19 - 4);
    if (v20 < v21 && v21 >= 9)
      WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(a1, v21 >> 1, 0, a4, a5, a6, a7, a8);
  }
  return 1;
}

uint64_t JSC::ConservativeRoots::grow(JSC::ConservativeRoots *this)
{
  uint64_t v2;
  void *v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  v3 = (void *)WTF::OSAllocator::reserveAndCommit(16 * v2, -1, 1, 0, 0, 0);
  memcpy(v3, *(const void **)this, 8 * *((_QWORD *)this + 1));
  result = *(_QWORD *)this;
  if (*(JSC::ConservativeRoots **)this == (JSC::ConservativeRoots *)((char *)this + 32)
    || (result = munmap((void *)result, 8 * *((_QWORD *)this + 2)), (_DWORD)result != -1))
  {
    *((_QWORD *)this + 2) = 2 * v2;
    *(_QWORD *)this = v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

JSC::ConservativeRoots *JSC::ConservativeRoots::add(JSC::ConservativeRoots *this, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  unint64_t *v9;
  JSC::ConservativeRoots *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;

  if (a2 <= a3)
    v8 = a3;
  else
    v8 = a2;
  if (a2 <= a3)
    v9 = a2;
  else
    v9 = a3;
  if ((v9 & 7) != 0 || (v8 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985A1844);
  }
  if (v9 != v8)
  {
    v10 = this;
    v11 = *((_QWORD *)this + 3);
    v12 = *(_QWORD *)(v11 + 256);
    v13 = *(unsigned int *)(v11 + 240);
    v14 = *(unsigned int *)(v11 + 244);
    do
    {
      v15 = *v9;
      v16 = *((_QWORD *)v10 + 3);
      v17 = *(unsigned int *)(v16 + 212);
      if ((_DWORD)v17)
      {
        v18 = *(uint64_t **)(v16 + 216);
        if (*v18 + 112 <= v15
          && *(_QWORD *)(*(_QWORD *)(v16 + 224) - 8)
           + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 224) - 8) + 24)
           + 120 >= v15)
        {
          if (v17 >= 2)
          {
            v19 = 0;
            v20 = v15 - 112;
            while (1)
            {
              v21 = v17 - 1;
              v22 = v18[v19 + ((v17 - 1) >> 1)];
              if (v22 == v20)
                break;
              v17 -= (v21 >> 1) + 1;
              if (v22 <= v20)
              {
                v23 = (v21 >> 1) + 1;
              }
              else
              {
                v17 = v21 >> 1;
                v23 = 0;
              }
              v19 += v23;
              if (v17 <= 1)
                goto LABEL_23;
            }
            v19 += (v17 - 1) >> 1;
LABEL_23:
            v18 += v19;
            if (v19 >= 1)
            {
              v24 = *(v18 - 1);
              v25 = v24 + 112;
              if (v24 + 112 <= v15 && v25 + *(_QWORD *)(v24 + 24) + 8 >= v15 && (*(_BYTE *)(v24 + 32) & 2) != 0)
              {
                v26 = *((_QWORD *)v10 + 1);
                if (v26 == *((_QWORD *)v10 + 2))
                {
                  this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
                  v26 = *((_QWORD *)v10 + 1);
                }
                v27 = *(_QWORD *)v10;
                *((_QWORD *)v10 + 1) = v26 + 1;
                *(_QWORD *)(v27 + 8 * v26) = v25;
              }
            }
          }
          v28 = *v18;
          v29 = *v18 + 112;
          if (v29 <= v15 && v29 + *(_QWORD *)(v28 + 24) + 8 >= v15 && (*(_BYTE *)(v28 + 32) & 2) != 0)
          {
            v30 = *((_QWORD *)v10 + 1);
            if (v30 == *((_QWORD *)v10 + 2))
            {
              this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
              v30 = *((_QWORD *)v10 + 1);
            }
            v31 = *(_QWORD *)v10;
            *((_QWORD *)v10 + 1) = v30 + 1;
            *(_QWORD *)(v31 + 8 * v30) = v29;
          }
          if ((unint64_t)(v18 + 1) < *(_QWORD *)(v16 + 224))
          {
            v32 = v18[1];
            v33 = v32 + 112;
            if (v32 + 112 <= v15 && v33 + *(_QWORD *)(v32 + 24) + 8 >= v15 && (*(_BYTE *)(v32 + 32) & 2) != 0)
            {
              v34 = *((_QWORD *)v10 + 1);
              if (v34 == *((_QWORD *)v10 + 2))
              {
                this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
                v34 = *((_QWORD *)v10 + 1);
              }
              v35 = *(_QWORD *)v10;
              *((_QWORD *)v10 + 1) = v34 + 1;
              *(_QWORD *)(v35 + 8 * v34) = v33;
            }
          }
        }
      }
      v36 = v15 & 0xFFFFFFFFFFFFC000;
      if ((v15 & 0xFFFFFFFFFFFFC000 | 8) >= v15)
      {
        v37 = v15 - 9;
        v38 = (v15 - 9) & 0xFFFFFFFFFFFFC000;
        if (v38 && (v38 & v12) == v38)
        {
          v55 = *(_QWORD *)(v16 + 264);
          if (v55)
          {
            v56 = *(_DWORD *)(v55 - 8);
            v57 = v56 & (v37 >> 14);
            v58 = *(_QWORD *)(v55 + 8 * v57);
            if (v58 == v38)
            {
LABEL_81:
              this = *(JSC::ConservativeRoots **)v38;
              if (*(unsigned __int8 *)(*(_QWORD *)v38 + 9) - 1 <= 1)
              {
                v60 = (char *)(*((_QWORD *)this + 11)
                             + 16 * *((unsigned int *)this + 1)
                             + (v37 - (*((_QWORD *)this + 11) + 16 * *((unsigned int *)this + 1)))
                             / (16
                              * (unint64_t)*(unsigned int *)this)
                             * 16
                             * *(unsigned int *)this);
                this = (JSC::ConservativeRoots *)JSC::MarkedBlock::Handle::isLiveCell(this, v13, v14, 1, v60, a6, a7, a8);
                if ((_DWORD)this)
                {
                  v61 = *((_QWORD *)v10 + 1);
                  if (v61 == *((_QWORD *)v10 + 2))
                  {
                    this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
                    v61 = *((_QWORD *)v10 + 1);
                  }
                  v62 = *(_QWORD *)v10;
                  *((_QWORD *)v10 + 1) = v61 + 1;
                  *(_QWORD *)(v62 + 8 * v61) = v60;
                }
              }
            }
            else
            {
              v59 = 1;
              while (v58)
              {
                v57 = (v57 + v59) & v56;
                v58 = *(_QWORD *)(v55 + 8 * v57);
                ++v59;
                if (v58 == v38)
                  goto LABEL_81;
              }
            }
          }
        }
      }
      if (v36)
      {
        if ((v36 & v12) == v36)
        {
          v40 = *(_QWORD *)(v16 + 264);
          if (v40)
          {
            v41 = *(_DWORD *)(v40 - 8);
            v42 = v41 & (v15 >> 14);
            v43 = *(_QWORD *)(v40 + 8 * v42);
            if (v43 == v36)
            {
LABEL_55:
              v45 = *(unsigned __int8 *)(*(_QWORD *)v36 + 9);
              if ((v15 & 0xF) != 0)
                goto LABEL_61;
              if (v45 > 1)
                goto LABEL_61;
              this = (JSC::ConservativeRoots *)JSC::MarkedBlock::Handle::isLiveCell(*(JSC::MarkedBlock::Handle **)v36, v13, v14, 1, (char *)v15, a6, a7, a8);
              if (!(_DWORD)this)
                goto LABEL_61;
              v46 = *((_QWORD *)v10 + 1);
              if (v46 == *((_QWORD *)v10 + 2))
              {
                this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
                v46 = *((_QWORD *)v10 + 1);
              }
              v47 = *(_QWORD *)v10;
              *((_QWORD *)v10 + 1) = v46 + 1;
              *(_QWORD *)(v47 + 8 * v46) = v15;
              if (v45)
              {
LABEL_61:
                v48 = (char *)(*(_QWORD *)(*(_QWORD *)v36 + 88)
                             + 16 * *(unsigned int *)(*(_QWORD *)v36 + 4)
                             + (v15
                              - (*(_QWORD *)(*(_QWORD *)v36 + 88)
                               + 16 * *(unsigned int *)(*(_QWORD *)v36 + 4)))
                             / (16
                              * (unint64_t)**(unsigned int **)v36)
                             * 16
                             * **(unsigned int **)v36);
                this = (JSC::ConservativeRoots *)JSC::MarkedBlock::Handle::isLiveCell(*(JSC::MarkedBlock::Handle **)v36, v13, v14, 1, v48, a6, a7, a8);
                if (!(_DWORD)this)
                  goto LABEL_65;
                v49 = *((_QWORD *)v10 + 1);
                if (v49 == *((_QWORD *)v10 + 2))
                {
                  this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
                  v49 = *((_QWORD *)v10 + 1);
                }
                v50 = *(_QWORD *)v10;
                *((_QWORD *)v10 + 1) = v49 + 1;
                *(_QWORD *)(v50 + 8 * v49) = v48;
                if (v45 - 3 >= 0xFFFFFFFE)
                {
LABEL_65:
                  if ((unint64_t)&v48[-v36] >= 0x10 && (unint64_t)(v48 + 8) >= v15)
                  {
                    v52 = &v48[-16 * **(unsigned int **)v36];
                    this = (JSC::ConservativeRoots *)JSC::MarkedBlock::Handle::isLiveCell(*(JSC::MarkedBlock::Handle **)v36, v13, v14, 1, v52, a6, a7, a8);
                    if ((_DWORD)this)
                    {
                      v53 = *((_QWORD *)v10 + 1);
                      if (v53 == *((_QWORD *)v10 + 2))
                      {
                        this = (JSC::ConservativeRoots *)JSC::ConservativeRoots::grow(v10);
                        v53 = *((_QWORD *)v10 + 1);
                      }
                      v54 = *(_QWORD *)v10;
                      *((_QWORD *)v10 + 1) = v53 + 1;
                      *(_QWORD *)(v54 + 8 * v53) = v52;
                    }
                  }
                }
              }
            }
            else
            {
              v44 = 1;
              while (v43)
              {
                v42 = (v42 + v44) & v41;
                v43 = *(_QWORD *)(v40 + 8 * v42);
                ++v44;
                if (v43 == v36)
                  goto LABEL_55;
              }
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v8);
  }
  return this;
}

void JSC::ConservativeRoots::add(JSC::ConservativeRoots *this, const char *a2, const char *a3, JSC::JITStubRoutineSet *a4, JSC::CodeBlockSet *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  _QWORD v23[3];
  unsigned __int8 *v24;
  char v25;

  v13 = (unsigned __int8 *)a5 + 16;
  v24 = (unsigned __int8 *)a5 + 16;
  v25 = 1;
  if (__ldaxr((unsigned __int8 *)a5 + 16))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
    goto LABEL_4;
  }
  if (__stxr(1u, v13))
    goto LABEL_3;
LABEL_4:
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = &v24;
  JSC::ConservativeRoots::genericAddSpan<JSC::CompositeMarkHook>(this, a2, a3, (uint64_t)v23, (uint64_t)a5, a6, a7, a8);
  if (!v25)
    return;
  v21 = v24;
  v22 = __ldxr(v24);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v24))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v15, v16, v17, v18, v19, v20);
}

void JSC::ConservativeRoots::genericAddSpan<JSC::CompositeMarkHook>(JSC::ConservativeRoots *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  JSC::ConservativeRoots *v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  const char *v16;
  unint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int **v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned int *v65;
  char *v66;
  int isLiveCell;
  unsigned int v68;
  JSC::ConservativeRoots *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int **v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  JSC::ConservativeRoots *v83;
  uint64_t v84;
  uint64_t v85;
  JSC::ConservativeRoots *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t *v102;
  uint64_t *v103;
  JSC::ConservativeRoots *v104;
  uint64_t **v105[3];
  uint64_t **v106;
  unsigned __int8 *v107;
  char v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112[3];
  unint64_t v113;

  if (a2 > a3)
    v16 = a2;
  else
    v16 = a3;
  if (a2 > a3)
    v17 = (unint64_t *)a3;
  else
    v17 = (unint64_t *)a2;
  if ((v17 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985A19ACLL);
  }
  if ((v16 & 7) != 0)
  {
    a2 = "./heap/ConservativeRoots.cpp";
    a3 = "void JSC::ConservativeRoots::genericAddSpan(void *, void *, MarkHook &) [MarkHook = JSC::CompositeMarkHook]";
    a4 = 334;
    __break(0xC471u);
    goto LABEL_13;
  }
  if (v17 != (unint64_t *)v16)
  {
    v10 = (uint64_t *)a4;
    v11 = this;
    v18 = *((_QWORD *)this + 3);
    v15 = *(_QWORD *)(v18 + 256);
    v8 = *(_DWORD *)(v18 + 240);
    v9 = *(_DWORD *)(v18 + 244);
    v102 = (unint64_t *)v16;
    v100 = v9;
    v101 = v8;
    do
    {
      v12 = *v17;
      v21 = *v10;
      if (*(_QWORD *)(*v10 + 32) <= *v17 && *(_QWORD *)(v21 + 40) > v12)
      {
        JSC::JITStubRoutineSet::markSlow(v21, *v17);
        v9 = v100;
        v8 = v101;
        v16 = (const char *)v102;
      }
      v22 = *((_QWORD *)v11 + 3);
      v103 = v10;
      v104 = v11;
      v110 = v9;
      v111 = v8;
      v23 = *(unsigned int *)(v22 + 212);
      if ((_DWORD)v23)
      {
        v24 = *(uint64_t **)(v22 + 216);
        if (*v24 + 112 <= v12
          && *(_QWORD *)(*(_QWORD *)(v22 + 224) - 8)
           + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 224) - 8) + 24)
           + 120 >= v12)
        {
          if (v23 >= 2)
          {
            v25 = 0;
            v26 = v12 - 112;
            while (1)
            {
              v27 = (v23 - 1) >> 1;
              v28 = v24[v27 + v25];
              if (v28 == v26)
                break;
              v23 -= v27 + 1;
              if (v28 <= v26)
              {
                v29 = v27 + 1;
              }
              else
              {
                v23 = v27;
                v29 = 0;
              }
              v25 += v29;
              if (v23 <= 1)
                goto LABEL_31;
            }
            v25 += v27;
LABEL_31:
            v24 += v25;
            if (v25 >= 1)
            {
              v30 = *(v24 - 1);
              v31 = v30 + 112;
              if (v30 + 112 <= v12 && v31 + *(_QWORD *)(v30 + 24) + 8 >= v12 && (*(_BYTE *)(v30 + 32) & 2) != 0)
              {
                if (*(unsigned __int16 *)(v30 + 34) <= 0x1FFu && *(_BYTE *)(v30 + 117) == 18)
                {
                  v95 = v10[1];
                  v112[0] = v31;
                  WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(v105, (uint64_t *)(v95 + 8), v112, a4, a5, a6, a7, a8);
                  v9 = v100;
                  v8 = v101;
                  v16 = (const char *)v102;
                }
                v89 = *((_QWORD *)v11 + 1);
                if (v89 == *((_QWORD *)v11 + 2))
                {
                  JSC::ConservativeRoots::grow(v11);
                  v9 = v100;
                  v8 = v101;
                  v16 = (const char *)v102;
                  v89 = *((_QWORD *)v11 + 1);
                }
                v90 = *(_QWORD *)v11;
                *((_QWORD *)v11 + 1) = v89 + 1;
                *(_QWORD *)(v90 + 8 * v89) = v31;
              }
            }
          }
          v32 = *v24;
          v33 = *v24 + 112;
          if (v33 <= v12 && v33 + *(_QWORD *)(v32 + 24) + 8 >= v12 && (*(_BYTE *)(v32 + 32) & 2) != 0)
          {
            v83 = v104;
            if (*(unsigned __int16 *)(v32 + 34) <= 0x1FFu && *(_BYTE *)(v32 + 117) == 18)
            {
              v93 = v103[1];
              v112[0] = *v24 + 112;
              WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(v105, (uint64_t *)(v93 + 8), v112, a4, a5, a6, a7, a8);
              v9 = v100;
              v8 = v101;
              v16 = (const char *)v102;
            }
            v84 = *((_QWORD *)v83 + 1);
            if (v84 == *((_QWORD *)v83 + 2))
            {
              JSC::ConservativeRoots::grow(v83);
              v9 = v100;
              v8 = v101;
              v16 = (const char *)v102;
              v84 = *((_QWORD *)v83 + 1);
            }
            v85 = *(_QWORD *)v83;
            *((_QWORD *)v83 + 1) = v84 + 1;
            *(_QWORD *)(v85 + 8 * v84) = v33;
          }
          if ((unint64_t)(v24 + 1) < *(_QWORD *)(v22 + 224))
          {
            v34 = v24[1];
            v35 = v34 + 112;
            if (v34 + 112 <= v12 && v35 + *(_QWORD *)(v34 + 24) + 8 >= v12 && (*(_BYTE *)(v34 + 32) & 2) != 0)
            {
              v86 = v104;
              if (*(unsigned __int16 *)(v34 + 34) <= 0x1FFu && *(_BYTE *)(v34 + 117) == 18)
              {
                v94 = v103[1];
                v112[0] = v35;
                WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(v105, (uint64_t *)(v94 + 8), v112, a4, a5, a6, a7, a8);
                v9 = v100;
                v8 = v101;
                v16 = (const char *)v102;
              }
              v87 = *((_QWORD *)v86 + 1);
              if (v87 == *((_QWORD *)v86 + 2))
              {
                JSC::ConservativeRoots::grow(v86);
                v9 = v100;
                v8 = v101;
                v16 = (const char *)v102;
                v87 = *((_QWORD *)v86 + 1);
              }
              v88 = *(_QWORD *)v86;
              *((_QWORD *)v86 + 1) = v87 + 1;
              *(_QWORD *)(v88 + 8 * v87) = v35;
            }
          }
        }
      }
      v109 = v12 & 0xFFFFFFFFFFFFC000;
      if ((v12 & 0xFFFFFFFFFFFFC000 | 8) >= v12)
      {
        v57 = v12 - 9;
        v58 = (v12 - 9) & 0xFFFFFFFFFFFFC000;
        if (v58 && (v58 & v15) == v58)
        {
          v60 = *(_QWORD *)(v22 + 264);
          if (v60)
          {
            v61 = *(_DWORD *)(v60 - 8);
            v62 = v61 & (v57 >> 14);
            v63 = *(_QWORD *)(v60 + 8 * v62);
            if (v63 == v58)
            {
LABEL_83:
              v65 = *(unsigned int **)v58;
              if (*(unsigned __int8 *)(*(_QWORD *)v58 + 9) - 1 <= 1)
              {
                v66 = (char *)(*((_QWORD *)v65 + 11)
                             + 16 * v65[1]
                             + (v57 - (*((_QWORD *)v65 + 11) + 16 * v65[1]))
                             / (16
                              * (unint64_t)*v65)
                             * 16
                             * *v65);
                isLiveCell = JSC::MarkedBlock::Handle::isLiveCell((JSC::MarkedBlock::Handle *)v65, v111, v110, 1, v66, a6, a7, a8);
                v9 = v100;
                v8 = v101;
                v16 = (const char *)v102;
                if (isLiveCell)
                {
                  v68 = *(unsigned __int8 *)(*(_QWORD *)v58 + 9);
                  v69 = v104;
                  if (v68 <= 1 && v66[5] == 18)
                  {
                    v98 = v103[1];
                    v112[0] = (uint64_t)v66;
                    WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(v105, (uint64_t *)(v98 + 8), v112, a4, a5, a6, a7, a8);
                    v9 = v100;
                    v8 = v101;
                    v16 = (const char *)v102;
                  }
                  v70 = *((_QWORD *)v69 + 1);
                  if (v70 == *((_QWORD *)v69 + 2))
                  {
                    JSC::ConservativeRoots::grow(v69);
                    v9 = v100;
                    v8 = v101;
                    v16 = (const char *)v102;
                    v70 = *((_QWORD *)v69 + 1);
                  }
                  v71 = *(_QWORD *)v69;
                  *((_QWORD *)v69 + 1) = v70 + 1;
                  *(_QWORD *)(v71 + 8 * v70) = v66;
                }
              }
            }
            else
            {
              v64 = 1;
              while (v63)
              {
                v62 = (v62 + v64) & v61;
                v63 = *(_QWORD *)(v60 + 8 * v62);
                ++v64;
                if (v63 == v58)
                  goto LABEL_83;
              }
            }
          }
        }
      }
      if (v109)
        v36 = (v15 & v109) == v109;
      else
        v36 = 0;
      if (!v36)
        goto LABEL_17;
      v37 = *(_QWORD *)(v22 + 264);
      if (!v37)
        goto LABEL_17;
      v38 = *(_DWORD *)(v37 - 8);
      v39 = v38 & (v109 >> 14);
      v40 = *(_QWORD *)(v37 + 8 * v39);
      if (v40 != v109)
      {
        v41 = 1;
        while (v40)
        {
          v39 = (v39 + v41) & v38;
          v40 = *(_QWORD *)(v37 + 8 * v39);
          ++v41;
          if (v40 == v109)
            goto LABEL_50;
        }
        goto LABEL_17;
      }
LABEL_50:
      v42 = *(_QWORD *)v109;
      v43 = *(unsigned __int8 *)(*(_QWORD *)v109 + 9);
      v108 = *(_BYTE *)(*(_QWORD *)v109 + 9);
      v105[0] = (uint64_t **)&v109;
      v105[1] = (uint64_t **)&v111;
      v105[2] = (uint64_t **)&v110;
      v106 = &v103;
      v107 = (unsigned __int8 *)&v108;
      if ((v12 & 0xF) != 0 || v43 > 1)
        goto LABEL_66;
      v44 = *(unsigned int ***)(v42 + 88);
      v45 = v12 - (_QWORD)v44;
      v14 = (unsigned __int8 *)((v12 - (unint64_t)v44) >> 4);
      v46 = (*v44)[1];
      v47 = !((v12 - (unint64_t)v44) >> 14) && (unint64_t)v14 >= v46;
      if (!v47 || (unint64_t)&v14[-v46] % **v44)
        goto LABEL_66;
      if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 32) + 40 * (*(_DWORD *)(v42 + 12) >> 5) + 8) >> *(_DWORD *)(v42 + 12)) & 1) != 0)
        goto LABEL_112;
      v49 = v110;
      v48 = v111;
      v13 = v44 + 3;
      v50 = *((unsigned int *)v44 + 6);
      v51 = v50 | ((unint64_t)(v50 | 3) << 32);
      if ((v50 & 1) != 0)
        v51 = *((unsigned int *)v44 + 6);
      v52 = HIDWORD(v51);
      if (HIDWORD(v51))
      {
        if (*((_DWORD *)v44 + 9) == v110)
        {
          v91 = ((v12 - (unint64_t)v44) >> 4);
          if (v91 >= 0x400)
            goto LABEL_13;
          v74 = *(unint64_t *)((char *)v44 + ((v91 >> 3) & 0x1FFFFFF8) + 168) >> ((v12 - (unint64_t)v44) >> 4);
          v75 = *(_DWORD *)v13 | 3;
        }
        else
        {
          v53 = *((_DWORD *)v44 + 8);
          if (v53 != v111)
          {
            if (*((_BYTE *)v44[1] + 347) != 1)
              goto LABEL_65;
            if (v53)
            {
              v72 = v53 + 1;
              if (v53 == -1)
                v72 = 2;
              if (v72 != v111)
              {
LABEL_65:
                if ((*(_DWORD *)v13 | 3) != HIDWORD(v51))
                  goto LABEL_100;
                goto LABEL_66;
              }
            }
          }
          v73 = (v45 >> 4);
          if (v73 >= 0x400)
            goto LABEL_13;
          v74 = *(unint64_t *)((char *)v44 + ((v73 >> 3) & 0x1FFFFFF8) + 40) >> (char)v14;
          v75 = *(_DWORD *)v13 | 3;
        }
        if (v75 != (_DWORD)v52)
          goto LABEL_100;
      }
      else
      {
LABEL_100:
        while (1)
        {
          v76 = *(_DWORD *)v13;
          if ((*(_DWORD *)v13 & 1) != 0)
            break;
          v77 = __ldaxr((unsigned int *)v13);
          if (v77 == v76)
          {
            if (!__stxr((v76 | 1) + 4, (unsigned int *)v13))
              goto LABEL_103;
          }
          else
          {
            __clrex();
          }
        }
        v96 = v48;
        v99 = v49;
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)(v44 + 3));
        v49 = v99;
        v9 = v100;
        v48 = v96;
        v8 = v101;
        v16 = (const char *)v102;
LABEL_103:
        if (*((_DWORD *)v44 + 9) == v49)
        {
          v78 = (v45 >> 4);
          if (v78 < 0x400)
          {
            v79 = v44 + 21;
LABEL_106:
            v74 = (*(unint64_t *)((char *)v79 + ((v78 >> 3) & 0x1FFFFFF8)) >> (char)v14) & 1;
            goto LABEL_108;
          }
          goto LABEL_13;
        }
        v92 = *((_DWORD *)v44 + 8);
        if (v92 == v48)
          goto LABEL_140;
        if (*((_BYTE *)v44[1] + 347) == 1)
        {
          if (!v92)
            goto LABEL_140;
          v47 = __CFADD__(v92, 1);
          v97 = v92 + 1;
          if (v47)
            v97 = 2;
          if (v97 == v48)
          {
LABEL_140:
            v78 = (v45 >> 4);
            if (v78 < 0x400)
            {
              v79 = v44 + 5;
              goto LABEL_106;
            }
LABEL_13:
            __break(1u);
LABEL_14:
            v19 = v13[1];
            if (v19 == v13[2])
            {
              JSC::ConservativeRoots::grow((JSC::ConservativeRoots *)v13);
              v9 = v100;
              v8 = v101;
              v16 = (const char *)v102;
              v19 = v13[1];
            }
            v20 = *v13;
            v13[1] = (unsigned int *)((char *)v19 + 1);
            *(_QWORD *)&v20[2 * (_QWORD)v19] = v12;
            if (*v14 - 3 < 0xFFFFFFFE)
              goto LABEL_17;
            goto LABEL_66;
          }
        }
        LOBYTE(v74) = 0;
LABEL_108:
        while (1)
        {
          v80 = *(_DWORD *)v13;
          if ((*(_DWORD *)v13 & 3) != 1)
            break;
          v81 = __ldxr((unsigned int *)v13);
          if (v81 == v80)
          {
            if (!__stxr(v80 & 0xFFFFFFFE, (unsigned int *)v13))
              goto LABEL_111;
          }
          else
          {
            __clrex();
          }
        }
        WTF::CountingLock::unlockSlow((WTF::CountingLock *)(v44 + 3), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v9 = v100;
        v8 = v101;
        v16 = (const char *)v102;
      }
LABEL_111:
      if ((v74 & 1) != 0)
      {
LABEL_112:
        v14 = v107;
        v13 = (unsigned int **)v106[1];
        if (*v107 <= 1u && *(_BYTE *)(v12 + 5) == 18)
        {
          v82 = (*v106)[1];
          v113 = v12;
          WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(v112, (uint64_t *)(v82 + 8), (uint64_t *)&v113, a4, a5, a6, a7, a8);
          v9 = v100;
          v8 = v101;
          v16 = (const char *)v102;
        }
        goto LABEL_14;
      }
LABEL_66:
      v54 = *(_QWORD *)(*(_QWORD *)v109 + 88)
          + 16 * *(unsigned int *)(*(_QWORD *)v109 + 4)
          + (v12 - (*(_QWORD *)(*(_QWORD *)v109 + 88) + 16 * *(unsigned int *)(*(_QWORD *)v109 + 4)))
          / (16
           * (unint64_t)**(unsigned int **)v109)
          * 16
          * **(unsigned int **)v109;
      v55 = JSC::HeapUtil::findGCObjectPointersForMarking<void JSC::ConservativeRoots::genericAddPointer<JSC::CompositeMarkHook>(void *,unsigned int,unsigned int,JSC::TinyBloomFilter<unsigned long>,JSC::CompositeMarkHook &)::{lambda(void *,JSC::HeapCell::Kind)#1}>(JSC::Heap &,unsigned int,unsigned int,JSC::TinyBloomFilter<unsigned long>,void *,JSC::CompositeMarkHook const&)::{lambda(void *)#1}::operator()(v105, v54, (uint64_t)a3, a4, a5, a6, a7, a8);
      v9 = v100;
      v8 = v101;
      v16 = (const char *)v102;
      if (!v55 && v54 - v109 >= 0x10 && v54 + 8 >= v12)
      {
        JSC::HeapUtil::findGCObjectPointersForMarking<void JSC::ConservativeRoots::genericAddPointer<JSC::CompositeMarkHook>(void *,unsigned int,unsigned int,JSC::TinyBloomFilter<unsigned long>,JSC::CompositeMarkHook &)::{lambda(void *,JSC::HeapCell::Kind)#1}>(JSC::Heap &,unsigned int,unsigned int,JSC::TinyBloomFilter<unsigned long>,void *,JSC::CompositeMarkHook const&)::{lambda(void *)#1}::operator()(v105, v54 - 16 * **(unsigned int **)v109, (uint64_t)a3, a4, a5, a6, a7, a8);
        v9 = v100;
        v8 = v101;
        v16 = (const char *)v102;
      }
LABEL_17:
      ++v17;
    }
    while (v17 != (unint64_t *)v16);
  }
}

uint64_t JSC::EdenGCActivityCallback::EdenGCActivityCallback(uint64_t result, uint64_t a2, char a3)
{
  unsigned int *v3;
  unsigned int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35A2D40;
  v3 = *(unsigned int **)(a2 - 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_BYTE *)(result + 35) = a3;
  *(_WORD *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = 0x41B2CC0300000000;
  *(_QWORD *)result = off_1E3590420;
  return result;
}

{
  unsigned int *v3;
  unsigned int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35A2D40;
  v3 = *(unsigned int **)(a2 - 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_BYTE *)(result + 35) = a3;
  *(_WORD *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = 0x41B2CC0300000000;
  *(_QWORD *)result = off_1E3590420;
  return result;
}

void JSC::EdenGCActivityCallback::~EdenGCActivityCallback(JSC::EdenGCActivityCallback *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::EdenGCActivityCallback::doCollection(JSC::EdenGCActivityCallback *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  *((_BYTE *)this + 37) = 0;
  v8 = (JSC::VM *)((char *)a2 + 192);
  v9 = *((unsigned __int8 *)this + 35);
  v10 = 256;
  v11 = 0;
  JSC::Heap::collect(v8, v9, (uint64_t)&v10, a4, a5, a6, a7, a8);
}

double JSC::EdenGCActivityCallback::lastGCLength(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 584);
}

double JSC::EdenGCActivityCallback::deathRate(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a2 + 72);
  if (!v2)
    return 1.0;
  v3 = *(_QWORD *)(a2 + 64);
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (v4)
    return (double)v5 / (double)v2;
  else
    return 0.0;
}

double JSC::EdenGCActivityCallback::gcTimeSlice(JSC::EdenGCActivityCallback *this, unint64_t a2)
{
  double result;

  result = (double)a2 * 0.000000953674316 * *((double *)&xmmword_1ECF4C5A0 + 1);
  if (*(double *)&qword_1ECF4C5B0 < result)
    return *(double *)&qword_1ECF4C5B0;
  return result;
}

void *JSC::FastMallocAlignedMemoryAllocator::tryAllocateAlignedMemory(JSC::FastMallocAlignedMemoryAllocator *this, WTF *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WTF::tryFastCompactAlignedMalloc((unint64_t)a2, a3, a3, a4, a5, a6, a7, a8);
}

void JSC::FastMallocAlignedMemoryAllocator::freeAlignedMemory(JSC::FastMallocAlignedMemoryAllocator *this, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastAlignedFree((unint64_t)a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::FastMallocAlignedMemoryAllocator::dump(JSC::FastMallocAlignedMemoryAllocator *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;

  v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v3, "%s", "FastMalloc");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::FastMallocAlignedMemoryAllocator::tryAllocateMemory(JSC::FastMallocAlignedMemoryAllocator *this, WTF *a2)
{
  uint64_t v3;

  WTF::tryFastCompactMalloc(a2, &v3);
  return v3;
}

void JSC::FastMallocAlignedMemoryAllocator::freeMemory(JSC::FastMallocAlignedMemoryAllocator *this, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree((unint64_t)a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::FastMallocAlignedMemoryAllocator::tryReallocateMemory(JSC::FastMallocAlignedMemoryAllocator *this, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  WTF::tryFastCompactRealloc((unint64_t)a2, a3, a3, a4, a5, a6, a7, a8, &v9);
  return v9;
}

uint64_t JSC::FreeList::initialize(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 8) ^ a3;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = a2 + HIDWORD(v4);
    v5 = a2 + (int)v4;
  }
  else
  {
    a3 = 0;
    a4 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v5 = 1;
  }
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = a4;
  return result;
}

uint64_t JSC::FreeList::contains(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  if (*a1 > a2 || a1[1] <= a2)
  {
    v2 = a1[2];
    if ((v2 & 1) != 0)
      return 0;
    v4 = a1[3];
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 8) ^ v4;
      if (v2 <= a2 && v2 + HIDWORD(v5) > a2)
        break;
      result = 0;
      v2 += (int)v5;
      if ((v2 & 1) != 0)
        return result;
    }
  }
  return 1;
}

uint64_t JSC::FreeList::dump(JSC::FreeList *this, WTF::PrintStream *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  WTF::PrintStream *v7;

  v5 = (const void *)*((_QWORD *)this + 1);
  v4 = (const void *)*((_QWORD *)this + 2);
  v6 = *(const void **)this;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "{nextInterval = ");
  WTF::PrintStream::printf(v7, "%p", v4);
  WTF::PrintStream::printf(v7, "%s", ", secret = ");
  WTF::PrintStream::printf(v7, "%llu", *((_QWORD *)this + 3));
  WTF::PrintStream::printf(v7, "%s", ", intervalStart = ");
  WTF::PrintStream::printf(v7, "%p", v6);
  WTF::PrintStream::printf(v7, "%s", ", intervalEnd = ");
  WTF::PrintStream::printf(v7, "%p", v5);
  WTF::PrintStream::printf(v7, "%s", ", originalSize = ");
  WTF::PrintStream::printf(v7, "%u", *((_DWORD *)this + 8));
  WTF::PrintStream::printf(v7, "%s", "}");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::FullGCActivityCallback::FullGCActivityCallback(uint64_t result, uint64_t a2, char a3)
{
  unsigned int *v3;
  unsigned int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35A2D40;
  v3 = *(unsigned int **)(a2 - 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_BYTE *)(result + 35) = a3;
  *(_WORD *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = 0x41B2CC0300000000;
  *(_QWORD *)result = off_1E35904B8;
  return result;
}

{
  unsigned int *v3;
  unsigned int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35A2D40;
  v3 = *(unsigned int **)(a2 - 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_BYTE *)(result + 35) = a3;
  *(_WORD *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = 0x41B2CC0300000000;
  *(_QWORD *)result = off_1E35904B8;
  return result;
}

void JSC::FullGCActivityCallback::~FullGCActivityCallback(JSC::FullGCActivityCallback *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::FullGCActivityCallback::doCollection(JSC::FullGCActivityCallback *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v8 = (JSC::VM *)((char *)a2 + 192);
  *((_BYTE *)this + 37) = 0;
  v9 = *((unsigned __int8 *)this + 35);
  v10 = 257;
  v11 = 0;
  JSC::Heap::collect(v8, v9, (uint64_t)&v10, a4, a5, a6, a7, a8);
}

double JSC::FullGCActivityCallback::lastGCLength(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 576);
}

double JSC::FullGCActivityCallback::deathRate(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a2 + 56);
  if (!v2)
    return 1.0;
  v3 = *(_QWORD *)(a2 + 48);
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (v4)
    return (double)v5 / (double)v2;
  else
    return 0.0;
}

double JSC::FullGCActivityCallback::gcTimeSlice(JSC::FullGCActivityCallback *this, unint64_t a2)
{
  double result;

  result = (double)a2 * 0.000000953674316 * *(double *)&xmmword_1ECF4C5A0;
  if (*(double *)&qword_1ECF4C5B0 < result)
    return *(double *)&qword_1ECF4C5B0;
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::LocalAllocator>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::MarkedBlock::Handle::isLiveCell(JSC::MarkedBlock::Handle *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int **v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  char v35;

  v8 = (unsigned int **)*((_QWORD *)this + 11);
  v9 = a5 - (char *)v8;
  v10 = (unint64_t)(a5 - (char *)v8) >> 4;
  v11 = (*v8)[1];
  if ((unint64_t)(a5 - (char *)v8) >> 14)
    v12 = 0;
  else
    v12 = v10 >= v11;
  if (!v12 || (v10 - v11) % **v8)
  {
LABEL_15:
    LOBYTE(v20) = 0;
    return v20 & 1;
  }
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 8) >> *((_DWORD *)this + 3)) & 1) != 0)
  {
    LOBYTE(v20) = 1;
    return v20 & 1;
  }
  v13 = a4;
  v14 = a3;
  v15 = a2;
  v16 = (unsigned int *)(v8 + 3);
  v17 = *((unsigned int *)v8 + 6);
  v18 = v17 | ((unint64_t)(v17 | 3) << 32);
  if ((v17 & 1) != 0)
    v18 = *((unsigned int *)v8 + 6);
  v19 = HIDWORD(v18);
  if (!HIDWORD(v18))
  {
LABEL_28:
    while (1)
    {
      v27 = *v16;
      if ((*v16 & 1) != 0)
        break;
      v28 = __ldaxr(v16);
      if (v28 == v27)
      {
        LODWORD(v20) = __stxr((v27 | 1) + 4, v16);
        if (!(_DWORD)v20)
          goto LABEL_34;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)(v8 + 3));
LABEL_34:
    if (*((_DWORD *)v8 + 9) == v14)
    {
      v29 = (v9 >> 4);
      if (v29 >= 0x400)
        goto LABEL_55;
      v30 = v8 + 21;
    }
    else
    {
      v33 = *((_DWORD *)v8 + 8);
      if (v33 != v15)
      {
        if (!v13)
          goto LABEL_48;
        LODWORD(v20) = *((unsigned __int8 *)v8[1] + 347);
        if ((_DWORD)v20 != 1)
          goto LABEL_48;
        if (v33)
        {
          v12 = __CFADD__(v33, 1);
          v34 = v33 + 1;
          LOBYTE(v20) = 2;
          if (v12)
            v34 = 2;
          if (v34 != v15)
          {
LABEL_48:
            LOBYTE(v20) = 0;
LABEL_38:
            while (1)
            {
              v31 = *v16;
              if ((*v16 & 3) != 1)
                break;
              v32 = __ldxr(v16);
              if (v32 == v31)
              {
                if (!__stxr(v31 & 0xFFFFFFFE, v16))
                  return v20 & 1;
              }
              else
              {
                __clrex();
              }
            }
            goto LABEL_56;
          }
        }
      }
      v29 = (v9 >> 4);
      if (v29 >= 0x400)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        v35 = v20;
        WTF::CountingLock::unlockSlow((WTF::CountingLock *)(v8 + 3), a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        LOBYTE(v20) = v35;
        return v20 & 1;
      }
      v30 = v8 + 5;
    }
    v20 = (*(unint64_t *)((char *)v30 + ((v29 >> 3) & 0x1FFFFFF8)) >> v10) & 1;
    goto LABEL_38;
  }
  v20 = *((_QWORD *)this + 11);
  if (*((_DWORD *)v8 + 9) == (_DWORD)a3)
  {
    v23 = ((unint64_t)(a5 - (char *)v8) >> 4);
    if (v23 < 0x400)
    {
      v20 = *(unint64_t *)((char *)v8 + ((v23 >> 3) & 0x1FFFFFF8) + 168) >> ((unint64_t)(a5 - (char *)v8) >> 4);
      v24 = *v16 | 3;
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  v21 = *((_DWORD *)v8 + 8);
  if (v21 != (_DWORD)a2)
  {
    if (!(_DWORD)a4 || *((_BYTE *)v8[1] + 347) != 1)
      goto LABEL_14;
    if (v21)
    {
      v25 = v21 + 1;
      if (v21 == -1)
        v25 = 2;
      if (v25 != (_DWORD)a2)
      {
LABEL_14:
        if ((*v16 | 3) != (_DWORD)v19)
          goto LABEL_28;
        goto LABEL_15;
      }
    }
  }
  v26 = (v9 >> 4);
  if (v26 >= 0x400)
    goto LABEL_55;
  v20 = *(unint64_t *)((char *)v8 + ((v26 >> 3) & 0x1FFFFFF8) + 40) >> v10;
  v24 = *v16 | 3;
LABEL_27:
  if (v24 != (_DWORD)v19)
    goto LABEL_28;
  return v20 & 1;
}

BOOL JSC::HeapUtil::findGCObjectPointersForMarking<void JSC::ConservativeRoots::genericAddPointer<JSC::CompositeMarkHook>(void *,unsigned int,unsigned int,JSC::TinyBloomFilter<unsigned long>,JSC::CompositeMarkHook &)::{lambda(void *,JSC::HeapCell::Kind)#1}>(JSC::Heap &,unsigned int,unsigned int,JSC::TinyBloomFilter<unsigned long>,void *,JSC::CompositeMarkHook const&)::{lambda(void *)#1}::operator()(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t **v28;
  JSC::ConservativeRoots *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int **v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43[3];
  uint64_t v44;

  v8 = ***a1;
  v9 = *(unsigned int ***)(v8 + 88);
  v10 = a2 - (_QWORD)v9;
  v11 = (unint64_t)(a2 - (_QWORD)v9) >> 4;
  v12 = (*v9)[1];
  if ((unint64_t)(a2 - (_QWORD)v9) >> 14)
    v13 = 0;
  else
    v13 = v11 >= v12;
  if (!v13 || (v11 - v12) % **v9)
    return 0;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 32) + 40 * (*(_DWORD *)(v8 + 12) >> 5) + 8) >> *(_DWORD *)(v8 + 12)) & 1) != 0)
    goto LABEL_24;
  v16 = *(_DWORD *)a1[1];
  v17 = *(_DWORD *)a1[2];
  v18 = (unsigned int *)(v9 + 3);
  v19 = *((unsigned int *)v9 + 6);
  v20 = v19 | ((unint64_t)(v19 | 3) << 32);
  if ((v19 & 1) != 0)
    v20 = *((unsigned int *)v9 + 6);
  v21 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    LOBYTE(v22) = (_BYTE)v9;
    if (*((_DWORD *)v9 + 9) == v17)
    {
      v35 = ((unint64_t)(a2 - (_QWORD)v9) >> 4);
      if (v35 < 0x400)
      {
        v22 = *(unint64_t *)((char *)v9 + ((v35 >> 3) & 0x1FFFFFF8) + 168) >> ((unint64_t)(a2 - (_QWORD)v9) >> 4);
        v27 = *v18 | 3;
LABEL_22:
        if (v27 != (_DWORD)v21)
          goto LABEL_30;
LABEL_23:
        if ((v22 & 1) != 0)
          goto LABEL_24;
        return 0;
      }
    }
    else
    {
      v23 = *((_DWORD *)v9 + 8);
      if (v23 != v16)
      {
        if (*((_BYTE *)v9[1] + 347) != 1)
          goto LABEL_14;
        if (v23)
        {
          v25 = v23 + 1;
          if (v23 == -1)
            v25 = 2;
          if (v25 != v16)
          {
LABEL_14:
            if ((*v18 | 3) != (_DWORD)v21)
              goto LABEL_30;
            return 0;
          }
        }
      }
      v26 = (v10 >> 4);
      if (v26 < 0x400)
      {
        v22 = *(unint64_t *)((char *)v9 + ((v26 >> 3) & 0x1FFFFFF8) + 40) >> v11;
        v27 = *v18 | 3;
        goto LABEL_22;
      }
    }
    goto LABEL_58;
  }
LABEL_30:
  while (1)
  {
    v32 = *v18;
    if ((*v18 & 1) != 0)
      break;
    v33 = __ldaxr(v18);
    if (v33 == v32)
    {
      LODWORD(v22) = __stxr((v32 | 1) + 4, v18);
      if (!(_DWORD)v22)
        goto LABEL_38;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)(v9 + 3));
LABEL_38:
  if (*((_DWORD *)v9 + 9) == v17)
  {
    v36 = (v10 >> 4);
    if (v36 < 0x400)
    {
      v37 = v9 + 21;
LABEL_41:
      v22 = (*(unint64_t *)((char *)v37 + ((v36 >> 3) & 0x1FFFFFF8)) >> v11) & 1;
      goto LABEL_42;
    }
    goto LABEL_58;
  }
  v40 = *((_DWORD *)v9 + 8);
  if (v40 == v16)
    goto LABEL_48;
  LODWORD(v22) = *((unsigned __int8 *)v9[1] + 347);
  if ((_DWORD)v22 == 1)
  {
    if (!v40)
      goto LABEL_48;
    v13 = __CFADD__(v40, 1);
    v41 = v40 + 1;
    LOBYTE(v22) = 2;
    if (v13)
      v41 = 2;
    if (v41 == v16)
    {
LABEL_48:
      v36 = (v10 >> 4);
      if (v36 < 0x400)
      {
        v37 = v9 + 5;
        goto LABEL_41;
      }
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
  }
  LOBYTE(v22) = 0;
LABEL_42:
  while (1)
  {
    v38 = *v18;
    if ((*v18 & 3) != 1)
      break;
    v39 = __ldxr(v18);
    if (v39 == v38)
    {
      if (!__stxr(v38 & 0xFFFFFFFE, v18))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
  }
LABEL_59:
  v42 = v22;
  WTF::CountingLock::unlockSlow((WTF::CountingLock *)(v9 + 3), a2, a3, a4, a5, a6, a7, a8);
  if ((v42 & 1) == 0)
    return 0;
LABEL_24:
  v28 = a1[3];
  v29 = (JSC::ConservativeRoots *)v28[1];
  if (*(unsigned __int8 *)a1[4] <= 1u && *(_BYTE *)(a2 + 5) == 18)
  {
    v34 = (*v28)[1];
    v44 = a2;
    WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(v43, (uint64_t *)(v34 + 8), &v44, a4, a5, a6, a7, a8);
  }
  v30 = *((_QWORD *)v29 + 1);
  if (v30 == *((_QWORD *)v29 + 2))
  {
    JSC::ConservativeRoots::grow(v29);
    v30 = *((_QWORD *)v29 + 1);
  }
  v31 = *(_QWORD *)v29;
  *((_QWORD *)v29 + 1) = v30 + 1;
  *(_QWORD *)(v31 + 8 * v30) = a2;
  return *(unsigned __int8 *)a1[4] - 3 < 0xFFFFFFFE;
}

_QWORD *WTF::HashSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::CodeBlock *,JSC::CodeBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = ~(*a3 << 32) + *a3;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (_QWORD *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v31;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (_QWORD *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_23;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v32 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::CodeBlock *,JSC::CodeBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::rehash(a2, v32, (uint64_t)v19, a4, a5, a6, a7, a8);
      v19 = result;
      v25 = *a2;
      if (*a2)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_17;
    }
LABEL_23:
    v32 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_28;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *v10 = v19;
  v10[1] = v29;
  *((_BYTE *)v10 + 16) = v30;
  return result;
}

uint64_t JSC::GCActivityCallback::GCActivityCallback(uint64_t result, uint64_t a2, char a3)
{
  unsigned int *v3;
  unsigned int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35A2D40;
  v3 = *(unsigned int **)(a2 - 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 31) = 0;
  *(_QWORD *)result = off_1E3590500;
  *(_BYTE *)(result + 35) = a3;
  *(_WORD *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = 0x41B2CC0300000000;
  return result;
}

void JSC::GCActivityCallback::~GCActivityCallback(JSC::GCActivityCallback *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

void JSC::GCActivityCallback::doWork(JSC::GCActivityCallback *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_BYTE *)this + 36))
  {
    if (*((_DWORD *)a2 + 229))
      JSC::GCActivityCallback::scheduleTimer((double *)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0.0);
    else
      (*(void (**)(JSC::GCActivityCallback *))(*(_QWORD *)this + 24))(this);
  }
}

void JSC::GCActivityCallback::scheduleTimer(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  double v10;
  double v12;
  char v13;

  v10 = a1[5];
  if (a9 + a9 <= v10)
  {
    a1[5] = a9;
    v12 = COERCE_DOUBLE(JSC::JSRunLoopTimer::timeUntilFire((JSC::JSRunLoopTimer *)a1, a2, a3, a4, a5, a6, a7, a8))
        - (v10
         - a9);
    if (!v13)
      v12 = a9;
    JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)a1, v12);
  }
}

void JSC::GCActivityCallback::cancel(JSC::JSRunLoopTimer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_QWORD *)this + 5) = 0x41B2CC0300000000;
  JSC::JSRunLoopTimer::cancelTimer(this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::GigacageAlignedMemoryAllocator::tryAllocateAlignedMemory(JSC::GigacageAlignedMemoryAllocator *this, unint64_t a2, unint64_t a3)
{
  return Gigacage::tryAlignedMalloc(*((unsigned int *)this + 10), a2, a3);
}

void JSC::GigacageAlignedMemoryAllocator::freeAlignedMemory(JSC::GigacageAlignedMemoryAllocator *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Gigacage::alignedFree(*((_DWORD *)this + 10), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::GigacageAlignedMemoryAllocator::dump(uint64_t this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;

  if (*(_DWORD *)(this + 40))
  {
    __break(0xC471u);
  }
  else
  {
    v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v3, "%s", "Primitive");
    WTF::PrintStream::printf(v3, "%s", "Gigacage");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return this;
}

uint64_t JSC::GigacageAlignedMemoryAllocator::tryAllocateMemory(JSC::GigacageAlignedMemoryAllocator *this, uint64_t a2)
{
  return Gigacage::tryMalloc(*((unsigned int *)this + 10), a2);
}

void JSC::GigacageAlignedMemoryAllocator::freeMemory(JSC::GigacageAlignedMemoryAllocator *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Gigacage::free(*((_DWORD *)this + 10), a2, a3, a4, a5, a6, a7, a8);
}

void *JSC::GigacageAlignedMemoryAllocator::tryReallocateMemory(JSC::GigacageAlignedMemoryAllocator *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Gigacage::tryRealloc(*((_DWORD *)this + 10), a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *JSC::HandleSet::grow(JSC::HandleSet *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  uint64_t v10;
  JSC::HandleSet *v11;
  uint64_t v12;
  _QWORD *v13;

  result = WTF::fastAlignedMalloc(0x1000uLL, 0x1000uLL, a3, a4, a5, a6, a7, a8);
  *result = 0;
  result[1] = 0;
  result[2] = this;
  v10 = *((_QWORD *)this + 2);
  if (v10)
    v11 = (JSC::HandleSet *)*((_QWORD *)this + 2);
  else
    v11 = this;
  *((_QWORD *)v11 + 1) = result;
  *((_QWORD *)this + 2) = result;
  *result = v10;
  result[1] = 0;
  v12 = 507;
  do
  {
    v13 = &result[v12];
    v13[1] = 0;
    v13[2] = 0;
    *v13 = 0;
    *v13 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = &result[v12];
    v12 -= 3;
  }
  while (v12 * 8);
  return result;
}

uint64_t JSC::Heap::Heap(uint64_t a1, uint64_t a2, int a3, double a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  void *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int *v427;
  int v428;
  int v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int *v447;
  int v448;
  int v449;
  void *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  void *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  void *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  int v495;
  char *v496;
  void *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  char *v506;
  size_t v507;
  unint64_t v508;
  unint64_t v509;
  BOOL v510;
  uint64_t v511;
  JSC::SlotVisitor *v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  JSC::SlotVisitor **v523;
  uint64_t v524;
  JSC::SlotVisitor *v525;
  JSC::SlotVisitor *v526;
  unint64_t v527;
  void *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  unsigned __int8 *v545;
  uint64_t v547;
  void *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  unsigned int *v556;
  unsigned int v557;
  uint64_t v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  _QWORD *v562;
  uint64_t v563;
  _QWORD *v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int *v569;
  unsigned int *v570;
  unsigned int v571;
  unsigned int v572;
  int v573;
  double v575;
  unsigned int v576;
  unint64_t v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  JSC::HeapVerifier *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  _QWORD *v604;
  uint64_t *v605;
  _DWORD *v606;
  _DWORD *v607;
  _DWORD *v608;
  _DWORD *v609;
  _DWORD *v610;
  _DWORD *v611;
  _DWORD *v612;
  _DWORD *v613;
  _DWORD *v614;
  _DWORD *v615;
  _DWORD *v616;
  _DWORD *v617;
  _DWORD *v618;
  _DWORD *v619;
  _DWORD *v620;
  _DWORD *v621;
  _DWORD *v622;
  _DWORD *v623;
  _DWORD *v624;
  _DWORD *v625;
  _DWORD *v626;
  _DWORD *v627;
  _DWORD *v628;
  _DWORD *v629;
  _DWORD *v630;
  _DWORD *v631;
  _DWORD *v632;
  _DWORD *v633;
  _DWORD *v634;
  _DWORD *v635;
  _DWORD *v636;
  _DWORD *v637;
  _DWORD *v638;
  _DWORD *v639;
  _DWORD *v640;
  _DWORD *v641;
  _DWORD *v642;
  char v643;
  JSC::SlotVisitor *v644;
  void (**v645)(WTF::StringPrintStream *__hidden);
  char *v646;
  __int128 v647;
  char v648;
  uint64_t v649;

  v649 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = 0;
  v6 = HIDWORD(qword_1ECF4C5D4);
  if (!HIDWORD(qword_1ECF4C5D4))
  {
    v7 = atomic_load(&WTF::ramSize(void)::onceFlag);
    if (v7 != -1)
    {
      v645 = (void (**)(WTF::StringPrintStream *__hidden))&v643;
      v644 = (JSC::SlotVisitor *)&v645;
      std::__call_once(&WTF::ramSize(void)::onceFlag, &v644, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ramSize(void)::$_0 &&>>);
    }
    v6 = WTF::ramSize(void)::ramSize;
    a3 = *(unsigned __int8 *)(a1 + 9);
  }
  *(_QWORD *)(a1 + 16) = v6;
  if (a3 == 1)
  {
    LODWORD(a4) = qword_1ECF4C35C;
    v575 = (double)*(unint64_t *)&a4;
    if (*(double *)&xmmword_1ECF4C368 * (double)v6 < v575)
      v575 = *(double *)&xmmword_1ECF4C368 * (double)v6;
    v8 = (unint64_t)v575;
  }
  else
  {
    v8 = HIDWORD(qword_1ECF4C35C);
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 151) = 0;
  *(_WORD *)(a1 + 155) = -1;
  *(_BYTE *)(a1 + 157) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0x200000002;
  *(_DWORD *)(a1 + 248) = 2;
  *(_WORD *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 254) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 272;
  *(_QWORD *)(a1 + 280) = a1 + 272;
  *(_QWORD *)(a1 + 288) = a1 + 288;
  *(_QWORD *)(a1 + 296) = a1 + 288;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v9 = atomic_load(&JSC::MarkedSpace::initializeSizeClassForStepSize(void)::flag);
  if (v9 != -1)
  {
    v645 = (void (**)(WTF::StringPrintStream *__hidden))&v643;
    v644 = (JSC::SlotVisitor *)&v645;
    std::__call_once(&JSC::MarkedSpace::initializeSizeClassForStepSize(void)::flag, &v644, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::MarkedSpace::initializeSizeClassForStepSize(void)::$_0 &&>>);
  }
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 376) = a1 + 376;
  *(_QWORD *)(a1 + 384) = a1 + 376;
  *(_QWORD *)(a1 + 368) = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v11 = WTF::fastMalloc((WTF *)0x48);
  v12 = (std::__shared_weak_count *)v11;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = (unint64_t *)(v11 + 8);
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = &off_1E3572178;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *v10 = v11 + 24;
  v10[1] = v11;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = (unint64_t *)(v11 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  *(_QWORD *)(v11 + 24) = v11 + 24;
  *(_QWORD *)(v11 + 32) = v11;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 - 1, v13));
  if (!v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_QWORD *)(a1 + 392) = v10;
  v18 = WTF::fastMalloc((WTF *)0x100);
  v19 = WTF::fastMalloc((WTF *)0x12);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = 1;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v19;
  *(_WORD *)(v19 + 16) = 67;
  JSC::SlotVisitor::SlotVisitor(v18, a1, (_DWORD **)&v645);
  *(_QWORD *)(a1 + 400) = v18;
  if (*(_DWORD *)v19 == 1)
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  else
    --*(_DWORD *)v19;
  v27 = WTF::fastMalloc((WTF *)0x100);
  v28 = WTF::fastMalloc((WTF *)0x12);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = 1;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v28;
  *(_WORD *)(v28 + 16) = 77;
  JSC::SlotVisitor::SlotVisitor(v27, a1, (_DWORD **)&v645);
  *(_QWORD *)(a1 + 408) = v27;
  if (*(_DWORD *)v28 == 1)
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  else
    --*(_DWORD *)v28;
  v36 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v37 = 0;
  v37[1] = 0;
  v38 = *(_QWORD **)v36;
  v39 = (_QWORD *)(v36 + 8);
  if (*(_QWORD *)v36)
    v39 = *(_QWORD **)v36;
  *v39 = v37;
  *(_QWORD *)v36 = v37;
  *v37 = 0;
  v37[1] = v38;
  ++*(_QWORD *)(v36 + 24);
  *(_QWORD *)(a1 + 416) = v36;
  v40 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v41 = 0;
  v41[1] = 0;
  v42 = *(_QWORD **)v40;
  v43 = (_QWORD *)(v40 + 8);
  if (*(_QWORD *)v40)
    v43 = *(_QWORD **)v40;
  *v43 = v41;
  *(_QWORD *)v40 = v41;
  *v41 = 0;
  v41[1] = v42;
  ++*(_QWORD *)(v40 + 24);
  *(_QWORD *)(a1 + 424) = v40;
  v44 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v44 = a1;
  *(int64x2_t *)(v44 + 8) = vdupq_n_s64(0x8000000000000000);
  *(_OWORD *)(v44 + 24) = 0u;
  *(_OWORD *)(v44 + 40) = 0u;
  *(_OWORD *)(v44 + 56) = 0u;
  *(_DWORD *)(v44 + 72) = 1;
  *(_QWORD *)(a1 + 432) = v44;
  v605 = (uint64_t *)(a1 + 448);
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = a2;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = a1 + 504;
  *(_QWORD *)(a1 + 512) = a1 + 504;
  *(_QWORD *)(a1 + 520) = 0;
  v51 = WTF::fastAlignedMalloc(0x1000uLL, 0x1000uLL, v45, v46, v47, v48, v49, v50);
  *v51 = 0;
  v51[1] = 0;
  v51[2] = a1 + 480;
  v52 = *(_QWORD *)(a1 + 496);
  v53 = (_QWORD *)(v52 + 8);
  if (!v52)
    v53 = (_QWORD *)(a1 + 488);
  *v53 = v51;
  *(_QWORD *)(a1 + 496) = v51;
  *v51 = v52;
  v51[1] = 0;
  v54 = 507;
  do
  {
    v55 = &v51[v54];
    v55[1] = 0;
    v55[2] = 0;
    *v55 = 0;
    *v55 = *(_QWORD *)(a1 + 520);
    *(_QWORD *)(a1 + 520) = &v51[v54];
    v54 -= 3;
  }
  while (v54 * 8);
  v56 = WTF::fastMalloc((WTF *)0x18);
  *(_OWORD *)v56 = 0u;
  *(_BYTE *)(v56 + 16) = 0;
  *(_QWORD *)(a1 + 528) = v56;
  v57 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
  v57[1] = 0u;
  v57[2] = 0u;
  *v57 = 0u;
  *(_QWORD *)(a1 + 536) = v57;
  *(_QWORD *)(a1 + 544) = &off_1E3590598;
  *(_QWORD *)(a1 + 552) = &off_1E35905C8;
  *(_WORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 562) = 0;
  *(_BYTE *)(a1 + 563) = dword_1ECF4C358;
  *(_BYTE *)(a1 + 564) = 0;
  if ((_BYTE)dword_1ECF4C358)
    v58 = 100;
  else
    v58 = 0;
  *(_DWORD *)(a1 + 568) = v58;
  *(int64x2_t *)(a1 + 576) = vdupq_n_s64(0x3F847AE147AE147BuLL);
  *(_OWORD *)(a1 + 592) = 0uLL;
  *(_QWORD *)(a1 + 608) = -1;
  *(_OWORD *)(a1 + 616) = 0uLL;
  if (JSC::GCActivityCallback::s_shouldCreateGCTimer)
  {
    v585 = WTF::fastMalloc((WTF *)0x30);
    v586 = JSC::FullGCActivityCallback::FullGCActivityCallback(v585, a1, 0);
    v587 = JSC::GCActivityCallback::s_shouldCreateGCTimer;
    *(_QWORD *)(a1 + 632) = v586;
    if (v587)
    {
      v588 = WTF::fastMalloc((WTF *)0x30);
      v59 = JSC::EdenGCActivityCallback::EdenGCActivityCallback(v588, a1, 0);
    }
    else
    {
      v59 = 0;
    }
  }
  else
  {
    v59 = 0;
    *(_QWORD *)(a1 + 632) = 0;
  }
  v604 = (_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 640) = v59;
  v60 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)v60 = off_1E35A2D40;
  v61 = *(unsigned int **)(a1 - 80);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 + 1, v61));
  *(_QWORD *)(v60 + 16) = v61;
  *(_QWORD *)(v60 + 24) = 0;
  *(_DWORD *)(v60 + 31) = 0;
  *(_QWORD *)v60 = off_1E3590BC0;
  *(_QWORD *)(v60 + 40) = 0;
  *(_WORD *)(v60 + 48) = 0;
  *(_QWORD *)(a1 + 648) = v60;
  v63 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v63 + 8) = 1;
  *(_QWORD *)v63 = off_1E35A2D40;
  v64 = *(unsigned int **)(a2 + 112);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 + 1, v64));
  *(_DWORD *)(v63 + 31) = 0;
  *(_QWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 24) = 0;
  *(_QWORD *)v63 = off_1E35910B8;
  *(_BYTE *)(v63 + 35) = 0;
  *(_QWORD *)(a1 + 656) = v63;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 728) = 0;
  v66 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v66 = 0u;
  *(_OWORD *)(v66 + 16) = 0u;
  v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v67 = 0;
  v67[1] = 0;
  v68 = *(_QWORD **)v66;
  v69 = (_QWORD *)(v66 + 8);
  if (*(_QWORD *)v66)
    v69 = *(_QWORD **)v66;
  *v69 = v67;
  *(_QWORD *)v66 = v67;
  *v67 = 0;
  v67[1] = v68;
  ++*(_QWORD *)(v66 + 24);
  *(_QWORD *)(a1 + 736) = v66;
  v70 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v70 = 0u;
  *(_OWORD *)(v70 + 16) = 0u;
  v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v71 = 0;
  v71[1] = 0;
  v72 = *(_QWORD **)v70;
  v73 = (_QWORD *)(v70 + 8);
  if (*(_QWORD *)v70)
    v73 = *(_QWORD **)v70;
  *v73 = v71;
  *(_QWORD *)v70 = v71;
  *v71 = 0;
  v71[1] = v72;
  ++*(_QWORD *)(v70 + 24);
  *(_QWORD *)(a1 + 744) = v70;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 760) = a1 + 776;
  *(_QWORD *)(a1 + 768) = 4;
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  WTF::ConcurrentPtrHashSet::initialize((WTF::ConcurrentPtrHashSet *)(a1 + 760));
  v80 = atomic_load(&JSC::heapHelperPool(void)::initializeHelperPoolOnceFlag);
  if (v80 != -1)
  {
    v645 = (void (**)(WTF::StringPrintStream *__hidden))&v643;
    v644 = (JSC::SlotVisitor *)&v645;
    std::__call_once(&JSC::heapHelperPool(void)::initializeHelperPoolOnceFlag, &v644, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::heapHelperPool(void)::$_0 &&>>);
  }
  v81 = (unsigned int *)JSC::heapHelperPool(void)::helperPool;
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 + 1, v81));
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v81;
  WTF::ParallelHelperClient::ParallelHelperClient((uint64_t *)(a1 + 848), (uint64_t *)&v645, v74, v75, v76, v77, v78, v79);
  v83 = (unsigned int *)v645;
  v645 = 0;
  if (v83)
  {
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      WTF::ParallelHelperPool::~ParallelHelperPool((WTF::ParallelHelperPool *)v83);
      WTF::fastFree(v577, v578, v579, v580, v581, v582, v583, v584);
    }
  }
  *(_QWORD *)(a1 + 903) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 954) = 0u;
  *(_QWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 997) = 0;
  *(_BYTE *)(a1 + 1005) = 1;
  *(_WORD *)(a1 + 1022) = 0;
  *(_OWORD *)(a1 + 1006) = 0u;
  v86 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v86 = 1;
  *(_BYTE *)(v86 + 4) = 0;
  *(_QWORD *)(a1 + 1024) = v86;
  v87 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v87 = 1;
  *(_BYTE *)(v87 + 4) = 0;
  *(_QWORD *)(v87 + 8) = 0;
  *(_QWORD *)(v87 + 16) = 0;
  *(_QWORD *)(a1 + 1032) = v87;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1128) = &off_1E3590B30;
  *(_WORD *)(a1 + 1136) = 512;
  *(_QWORD *)(a1 + 1144) = &off_1E3590B30;
  *(_WORD *)(a1 + 1152) = 256;
  *(_QWORD *)(a1 + 1160) = &off_1E3590B30;
  *(_WORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1176) = &off_1E3590B30;
  *(_WORD *)(a1 + 1184) = 1;
  *(_WORD *)(a1 + 1200) = 1;
  *(_QWORD *)(a1 + 1192) = off_1E3590C80;
  *(_QWORD *)(a1 + 1208) = JSC::JSGlobalObject::destroy;
  *(_WORD *)(a1 + 1224) = 1;
  *(_QWORD *)(a1 + 1216) = off_1E3590C80;
  *(_QWORD *)(a1 + 1232) = JSC::JSCallbackConstructor::destroy;
  *(_WORD *)(a1 + 1248) = 1;
  *(_QWORD *)(a1 + 1240) = off_1E3590C80;
  *(_QWORD *)(a1 + 1256) = JSC::JSCallbackObject<JSC::JSGlobalObject>::destroy;
  *(_WORD *)(a1 + 1272) = 1;
  *(_QWORD *)(a1 + 1264) = off_1E3590C80;
  *(_QWORD *)(a1 + 1280) = JSC::JSCallbackObject<JSC::JSNonFinalObject>::destroy;
  *(_WORD *)(a1 + 1296) = 1;
  *(_QWORD *)(a1 + 1288) = off_1E3590C80;
  *(_QWORD *)(a1 + 1304) = JSC::JSCustomGetterFunction::destroy;
  *(_WORD *)(a1 + 1320) = 1;
  *(_QWORD *)(a1 + 1312) = off_1E3590C80;
  *(_QWORD *)(a1 + 1328) = JSC::JSCustomSetterFunction::destroy;
  *(_WORD *)(a1 + 1344) = 1;
  *(_QWORD *)(a1 + 1336) = off_1E3590C80;
  *(_QWORD *)(a1 + 1352) = JSC::DateInstance::destroy;
  *(_WORD *)(a1 + 1368) = 1;
  *(_QWORD *)(a1 + 1360) = off_1E3590C80;
  *(_QWORD *)(a1 + 1376) = JSC::ErrorInstance::destroy;
  *(_WORD *)(a1 + 1392) = 1;
  *(_QWORD *)(a1 + 1384) = off_1E3590C80;
  *(_QWORD *)(a1 + 1400) = JSC::JSFinalizationRegistry::destroy;
  *(_WORD *)(a1 + 1416) = 1;
  *(_QWORD *)(a1 + 1408) = off_1E3590C80;
  *(_QWORD *)(a1 + 1424) = JSC::JSGlobalLexicalEnvironment::destroy;
  *(_WORD *)(a1 + 1440) = 1;
  *(_QWORD *)(a1 + 1432) = off_1E3590C80;
  *(_QWORD *)(a1 + 1448) = JSC::JSGlobalObject::destroy;
  *(_WORD *)(a1 + 1464) = 1;
  *(_QWORD *)(a1 + 1456) = off_1E3590C80;
  *(_QWORD *)(a1 + 1472) = Inspector::JSInjectedScriptHost::destroy;
  *(_WORD *)(a1 + 1488) = 1;
  *(_QWORD *)(a1 + 1480) = off_1E3590C80;
  *(_QWORD *)(a1 + 1496) = Inspector::JSJavaScriptCallFrame::destroy;
  *(_WORD *)(a1 + 1512) = 1;
  *(_QWORD *)(a1 + 1504) = off_1E3590C80;
  *(_QWORD *)(a1 + 1520) = JSC::JSModuleRecord::destroy;
  *(_WORD *)(a1 + 1536) = 1;
  *(_QWORD *)(a1 + 1528) = off_1E3590C80;
  *(_QWORD *)(a1 + 1544) = JSC::SyntheticModuleRecord::destroy;
  *(_WORD *)(a1 + 1560) = 1;
  *(_QWORD *)(a1 + 1552) = off_1E3590C80;
  *(_QWORD *)(a1 + 1568) = JSC::JSModuleNamespaceObject::destroy;
  *(_WORD *)(a1 + 1584) = 1;
  *(_QWORD *)(a1 + 1576) = off_1E3590C80;
  *(_QWORD *)(a1 + 1592) = JSC::JSNativeStdFunction::destroy;
  *(_WORD *)(a1 + 1608) = 1;
  *(_QWORD *)(a1 + 1600) = &off_1E3590648;
  *(_WORD *)(a1 + 1624) = 1;
  *(_QWORD *)(a1 + 1616) = &off_1E3590678;
  *(_WORD *)(a1 + 1640) = 1;
  *(_QWORD *)(a1 + 1632) = off_1E3590C80;
  *(_QWORD *)(a1 + 1648) = JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::destroy;
  *(_WORD *)(a1 + 1664) = 1;
  *(_QWORD *)(a1 + 1656) = off_1E3590C80;
  *(_QWORD *)(a1 + 1672) = JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::destroy;
  *(_WORD *)(a1 + 1688) = 1;
  *(_QWORD *)(a1 + 1680) = off_1E359F8C0;
  *(_WORD *)(a1 + 1704) = 1;
  *(_QWORD *)(a1 + 1696) = off_1E3590C80;
  *(_QWORD *)(a1 + 1712) = JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::destroy;
  *(_WORD *)(a1 + 1728) = 1;
  *(_QWORD *)(a1 + 1720) = off_1E3590C80;
  *(_QWORD *)(a1 + 1736) = JSC::ObjCCallbackFunction::destroy;
  *(_WORD *)(a1 + 1752) = 1;
  *(_QWORD *)(a1 + 1744) = off_1E3590C80;
  *(_QWORD *)(a1 + 1760) = JSC::IntlCollator::destroy;
  *(_WORD *)(a1 + 1776) = 1;
  *(_QWORD *)(a1 + 1768) = off_1E3590C80;
  *(_QWORD *)(a1 + 1784) = JSC::IntlDateTimeFormat::destroy;
  *(_WORD *)(a1 + 1800) = 1;
  *(_QWORD *)(a1 + 1792) = off_1E3590C80;
  *(_QWORD *)(a1 + 1808) = JSC::IntlDisplayNames::destroy;
  *(_WORD *)(a1 + 1824) = 1;
  *(_QWORD *)(a1 + 1816) = off_1E3590C80;
  *(_QWORD *)(a1 + 1832) = JSC::IntlDurationFormat::destroy;
  *(_WORD *)(a1 + 1848) = 1;
  *(_QWORD *)(a1 + 1840) = off_1E3590C80;
  *(_QWORD *)(a1 + 1856) = JSC::IntlListFormat::destroy;
  *(_WORD *)(a1 + 1872) = 1;
  *(_QWORD *)(a1 + 1864) = off_1E3590C80;
  *(_QWORD *)(a1 + 1880) = JSC::IntlLocale::destroy;
  *(_WORD *)(a1 + 1896) = 1;
  *(_QWORD *)(a1 + 1888) = off_1E3590C80;
  *(_QWORD *)(a1 + 1904) = JSC::IntlNumberFormat::destroy;
  *(_WORD *)(a1 + 1920) = 1;
  *(_QWORD *)(a1 + 1912) = off_1E3590C80;
  *(_QWORD *)(a1 + 1928) = JSC::IntlPluralRules::destroy;
  *(_WORD *)(a1 + 1944) = 1;
  *(_QWORD *)(a1 + 1936) = off_1E3590C80;
  *(_QWORD *)(a1 + 1952) = JSC::IntlRelativeTimeFormat::destroy;
  *(_WORD *)(a1 + 1968) = 1;
  *(_QWORD *)(a1 + 1960) = off_1E3590C80;
  *(_QWORD *)(a1 + 1976) = JSC::IntlSegmentIterator::destroy;
  *(_WORD *)(a1 + 1992) = 1;
  *(_QWORD *)(a1 + 1984) = off_1E3590C80;
  *(_QWORD *)(a1 + 2000) = JSC::IntlSegmenter::destroy;
  *(_WORD *)(a1 + 2016) = 1;
  *(_QWORD *)(a1 + 2008) = off_1E3590C80;
  *(_QWORD *)(a1 + 2024) = JSC::IntlSegments::destroy;
  *(_WORD *)(a1 + 2040) = 1;
  *(_QWORD *)(a1 + 2032) = off_1E3590C80;
  *(_QWORD *)(a1 + 2048) = JSC::JSWebAssemblyArray::destroy;
  *(_WORD *)(a1 + 2064) = 1;
  *(_QWORD *)(a1 + 2056) = off_1E3590C80;
  *(_QWORD *)(a1 + 2072) = JSC::JSWebAssemblyException::destroy;
  *(_WORD *)(a1 + 2088) = 1;
  *(_QWORD *)(a1 + 2080) = off_1E3590C80;
  *(_QWORD *)(a1 + 2096) = JSC::WebAssemblyFunction::destroy;
  *(_WORD *)(a1 + 2112) = 1;
  *(_QWORD *)(a1 + 2104) = off_1E3590C80;
  *(_QWORD *)(a1 + 2120) = JSC::JSWebAssemblyGlobal::destroy;
  *(_WORD *)(a1 + 2136) = 1;
  *(_QWORD *)(a1 + 2128) = off_1E3590C80;
  *(_QWORD *)(a1 + 2144) = JSC::JSWebAssemblyInstance::destroy;
  *(_WORD *)(a1 + 2160) = 1;
  *(_QWORD *)(a1 + 2152) = off_1E3590C80;
  *(_QWORD *)(a1 + 2168) = JSC::JSWebAssemblyMemory::destroy;
  *(_WORD *)(a1 + 2184) = 1;
  *(_QWORD *)(a1 + 2176) = off_1E3590C80;
  *(_QWORD *)(a1 + 2192) = JSC::JSWebAssemblyStruct::destroy;
  *(_WORD *)(a1 + 2208) = 1;
  *(_QWORD *)(a1 + 2200) = off_1E3590C80;
  *(_QWORD *)(a1 + 2216) = JSC::JSWebAssemblyModule::destroy;
  *(_WORD *)(a1 + 2232) = 1;
  *(_QWORD *)(a1 + 2224) = off_1E3590C80;
  *(_QWORD *)(a1 + 2240) = JSC::WebAssemblyModuleRecord::destroy;
  *(_WORD *)(a1 + 2256) = 1;
  *(_QWORD *)(a1 + 2248) = off_1E3590C80;
  *(_QWORD *)(a1 + 2264) = JSC::JSWebAssemblyTable::destroy;
  *(_WORD *)(a1 + 2280) = 1;
  *(_QWORD *)(a1 + 2272) = off_1E3590C80;
  *(_QWORD *)(a1 + 2288) = JSC::JSWebAssemblyTag::destroy;
  v88 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v88 + 8) = 0u;
  *(_OWORD *)(v88 + 24) = 0u;
  *(_QWORD *)v88 = off_1E3590468;
  *(_QWORD *)(a1 + 2296) = v88;
  v89 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)(v89 + 8) = 0u;
  *(_OWORD *)(v89 + 24) = 0u;
  *(_QWORD *)v89 = off_1E3590548;
  *(_DWORD *)(v89 + 40) = 0;
  *(_QWORD *)(a1 + 2304) = v89;
  v90 = WTF::fastMalloc((WTF *)0x2D);
  *(_DWORD *)v90 = 1;
  *(_QWORD *)(v90 + 8) = 28;
  v642 = (_DWORD *)v90;
  strcpy((char *)(v90 + 16), "Primitive Gigacage Auxiliary");
  JSC::CompleteSubspace::CompleteSubspace(a1 + 2312, &v642, a1, a1 + 1128, *(_QWORD *)(a1 + 2304), v91, v92, v93);
  v642 = 0;
  if (*(_DWORD *)v90 == 1)
    WTF::fastFree(v90, v94, v95, v96, v97, v98, v99, v100);
  else
    --*(_DWORD *)v90;
  v101 = WTF::fastMalloc((WTF *)0x1A);
  *(_DWORD *)v101 = 1;
  v641 = (_DWORD *)v101;
  *(_QWORD *)(v101 + 8) = 9;
  strcpy((char *)(v101 + 16), "Auxiliary");
  JSC::CompleteSubspace::CompleteSubspace(a1 + 6456, &v641, a1, a1 + 1128, *(_QWORD *)(a1 + 2296), v102, v103, v104);
  v641 = 0;
  if (*(_DWORD *)v101 == 1)
    WTF::fastFree(v101, v105, v106, v107, v108, v109, v110, v111);
  else
    --*(_DWORD *)v101;
  v112 = WTF::fastMalloc((WTF *)0x3C);
  *(_DWORD *)v112 = 1;
  *(_QWORD *)(v112 + 8) = 43;
  v640 = (_DWORD *)v112;
  strcpy((char *)(v112 + 16), "ImmutableButterfly JSCellWithIndexingHeader");
  JSC::CompleteSubspace::CompleteSubspace(a1 + 10600, &v640, a1, a1 + 1144, *(_QWORD *)(a1 + 2296), v113, v114, v115);
  v640 = 0;
  if (*(_DWORD *)v112 == 1)
    WTF::fastFree(v112, v116, v117, v118, v119, v120, v121, v122);
  else
    --*(_DWORD *)v112;
  v123 = WTF::fastMalloc((WTF *)0x17);
  *(_DWORD *)v123 = 1;
  *(_QWORD *)(v123 + 8) = 6;
  v639 = (_DWORD *)v123;
  strcpy((char *)(v123 + 16), "JSCell");
  JSC::CompleteSubspace::CompleteSubspace(a1 + 14744, &v639, a1, a1 + 1160, *(_QWORD *)(a1 + 2296), v124, v125, v126);
  v639 = 0;
  if (*(_DWORD *)v123 == 1)
    WTF::fastFree(v123, v127, v128, v129, v130, v131, v132, v133);
  else
    --*(_DWORD *)v123;
  v134 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v134 = 1;
  *(_QWORD *)(v134 + 8) = 21;
  v638 = (_DWORD *)v134;
  strcpy((char *)(v134 + 16), "Variable Sized JSCell");
  JSC::CompleteSubspace::CompleteSubspace(a1 + 18888, &v638, a1, a1 + 1160, *(_QWORD *)(a1 + 2296), v135, v136, v137);
  v638 = 0;
  if (*(_DWORD *)v134 == 1)
    WTF::fastFree(v134, v138, v139, v140, v141, v142, v143, v144);
  else
    --*(_DWORD *)v134;
  v145 = WTF::fastMalloc((WTF *)0x25);
  *(_DWORD *)v145 = 1;
  *(_QWORD *)(v145 + 8) = 20;
  v637 = (_DWORD *)v145;
  strcpy((char *)(v145 + 16), "JSDestructibleObject");
  JSC::CompleteSubspace::CompleteSubspace(a1 + 23032, &v637, a1, a1 + 1680, *(_QWORD *)(a1 + 2296), v146, v147, v148);
  v637 = 0;
  if (*(_DWORD *)v145 == 1)
    WTF::fastFree(v145, v149, v150, v151, v152, v153, v154, v155);
  else
    --*(_DWORD *)v145;
  v156 = WTF::fastMalloc((WTF *)0x21);
  *(_DWORD *)v156 = 1;
  *(_QWORD *)(v156 + 8) = 16;
  v636 = (_DWORD *)v156;
  strcpy((char *)(v156 + 16), "IsoSpace JSArray");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 27176, &v636, a1, a1 + 1160, 16, 8, &v645, v157);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v636 = 0;
  if (*(_DWORD *)v156 == 1)
    WTF::fastFree(v156, v158, v159, v160, v161, v162, v163, v164);
  else
    --*(_DWORD *)v156;
  v165 = WTF::fastMalloc((WTF *)0x22);
  *(_DWORD *)v165 = 1;
  *(_QWORD *)(v165 + 8) = 17;
  v635 = (_DWORD *)v165;
  strcpy((char *)(v165 + 16), "IsoSpace JSBigInt");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 27424, &v635, a1, a1 + 1160, 32, 8, &v645, v166);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v635 = 0;
  if (*(_DWORD *)v165 == 1)
    WTF::fastFree(v165, v167, v168, v169, v170, v171, v172, v173);
  else
    --*(_DWORD *)v165;
  v174 = WTF::fastMalloc((WTF *)0x22);
  *(_DWORD *)v174 = 1;
  *(_QWORD *)(v174 + 8) = 17;
  v634 = (_DWORD *)v174;
  strcpy((char *)(v174 + 16), "IsoSpace JSCallee");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 27672, &v634, a1, a1 + 1160, 24, 8, &v645, v175);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v634 = 0;
  if (*(_DWORD *)v174 == 1)
    WTF::fastFree(v174, v176, v177, v178, v179, v180, v181, v182);
  else
    --*(_DWORD *)v174;
  v183 = WTF::fastMalloc((WTF *)0x29);
  *(_DWORD *)v183 = 1;
  *(_QWORD *)(v183 + 8) = 24;
  v633 = (_DWORD *)v183;
  strcpy((char *)(v183 + 16), "IsoSpace ClonedArguments");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 27920, &v633, a1, a1 + 1160, 24, 8, &v645, v184);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v633 = 0;
  if (*(_DWORD *)v183 == 1)
    WTF::fastFree(v183, v185, v186, v187, v188, v189, v190, v191);
  else
    --*(_DWORD *)v183;
  v192 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v192 = 1;
  *(_QWORD *)(v192 + 8) = 27;
  v632 = (_DWORD *)v192;
  strcpy((char *)(v192 + 16), "IsoSpace CustomGetterSetter");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 28168, &v632, a1, a1 + 1160, 24, 8, &v645, v193);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v632 = 0;
  if (*(_DWORD *)v192 == 1)
    WTF::fastFree(v192, v194, v195, v196, v197, v198, v199, v200);
  else
    --*(_DWORD *)v192;
  v201 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v201 = 1;
  *(_QWORD *)(v201 + 8) = 21;
  v631 = (_DWORD *)v201;
  strcpy((char *)(v201 + 16), "IsoSpace DateInstance");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 28416, &v631, a1, a1 + 1336, 32, 8, &v645, v202);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v631 = 0;
  if (*(_DWORD *)v201 == 1)
    WTF::fastFree(v201, v203, v204, v205, v206, v207, v208, v209);
  else
    --*(_DWORD *)v201;
  v210 = WTF::fastMalloc((WTF *)0x32);
  *(_DWORD *)v210 = 1;
  *(_QWORD *)(v210 + 8) = 33;
  v630 = (_DWORD *)v210;
  strcpy((char *)(v210 + 16), "IsoSpace DOMAttributeGetterSetter");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 28664, &v630, a1, a1 + 1160, 40, 8, &v645, v211);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v630 = 0;
  if (*(_DWORD *)v210 == 1)
    WTF::fastFree(v210, v212, v213, v214, v215, v216, v217, v218);
  else
    --*(_DWORD *)v210;
  v219 = WTF::fastMalloc((WTF *)0x23);
  *(_DWORD *)v219 = 1;
  *(_QWORD *)(v219 + 8) = 18;
  v629 = (_DWORD *)v219;
  strcpy((char *)(v219 + 16), "IsoSpace Exception");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 28912, &v629, a1, a1 + 1176, 40, 8, &v645, v220);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v629 = 0;
  if (*(_DWORD *)v219 == 1)
    WTF::fastFree(v219, v221, v222, v223, v224, v225, v226, v227);
  else
    --*(_DWORD *)v219;
  v228 = WTF::fastMalloc((WTF *)0x24);
  *(_DWORD *)v228 = 1;
  *(_QWORD *)(v228 + 8) = 19;
  v628 = (_DWORD *)v228;
  strcpy((char *)(v228 + 16), "IsoSpace JSFunction");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 29160, &v628, a1, a1 + 1160, 32, 8, &v645, v229);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v628 = 0;
  if (*(_DWORD *)v228 == 1)
    WTF::fastFree(v228, v230, v231, v232, v233, v234, v235, v236);
  else
    --*(_DWORD *)v228;
  v237 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v237 = 1;
  *(_QWORD *)(v237 + 8) = 21;
  v627 = (_DWORD *)v237;
  strcpy((char *)(v237 + 16), "IsoSpace GetterSetter");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 29408, &v627, a1, a1 + 1160, 24, 8, &v645, v238);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v627 = 0;
  if (*(_DWORD *)v237 == 1)
    WTF::fastFree(v237, v239, v240, v241, v242, v243, v244, v245);
  else
    --*(_DWORD *)v237;
  v246 = WTF::fastMalloc((WTF *)0x34);
  *(_DWORD *)v246 = 1;
  *(_QWORD *)(v246 + 8) = 35;
  v626 = (_DWORD *)v246;
  strcpy((char *)(v246 + 16), "IsoSpace JSGlobalLexicalEnvironment");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 29656, &v626, a1, a1 + 1408, 56, 8, &v645, v247);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v626 = 0;
  if (*(_DWORD *)v246 == 1)
    WTF::fastFree(v246, v248, v249, v250, v251, v252, v253, v254);
  else
    --*(_DWORD *)v246;
  v255 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v255 = 1;
  *(_QWORD *)(v255 + 8) = 25;
  v625 = (_DWORD *)v255;
  strcpy((char *)(v255 + 16), "IsoSpace InternalFunction");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 29904, &v625, a1, a1 + 1160, 48, 8, &v645, v256);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v625 = 0;
  if (*(_DWORD *)v255 == 1)
    WTF::fastFree(v255, v257, v258, v259, v260, v261, v262, v263);
  else
    --*(_DWORD *)v255;
  v264 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v264 = 1;
  *(_QWORD *)(v264 + 8) = 22;
  v624 = (_DWORD *)v264;
  strcpy((char *)(v264 + 16), "IsoSpace JSGlobalProxy");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 30152, &v624, a1, a1 + 1160, 24, 8, &v645, v265);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v624 = 0;
  if (*(_DWORD *)v264 == 1)
    WTF::fastFree(v264, v266, v267, v268, v269, v270, v271, v272);
  else
    --*(_DWORD *)v264;
  v273 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v273 = 1;
  *(_QWORD *)(v273 + 8) = 25;
  v623 = (_DWORD *)v273;
  strcpy((char *)(v273 + 16), "IsoSpace NativeExecutable");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 30400, &v623, a1, a1 + 1176, 80, 8, &v645, v274);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v623 = 0;
  if (*(_DWORD *)v273 == 1)
    WTF::fastFree(v273, v275, v276, v277, v278, v279, v280, v281);
  else
    --*(_DWORD *)v273;
  v282 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v282 = 1;
  *(_QWORD *)(v282 + 8) = 21;
  v622 = (_DWORD *)v282;
  strcpy((char *)(v282 + 16), "IsoSpace NumberObject");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 30648, &v622, a1, a1 + 1160, 24, 8, &v645, v283);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v622 = 0;
  if (*(_DWORD *)v282 == 1)
    WTF::fastFree(v282, v284, v285, v286, v287, v288, v289, v290);
  else
    --*(_DWORD *)v282;
  v291 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v291 = 1;
  *(_QWORD *)(v291 + 8) = 25;
  v621 = (_DWORD *)v291;
  strcpy((char *)(v291 + 16), "IsoSpace JSNonFinalObject");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 30896, &v621, a1, a1 + 1160, 16, 8, &v645, v292);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v621 = 0;
  if (*(_DWORD *)v291 == 1)
    WTF::fastFree(v291, v293, v294, v295, v296, v297, v298, v299);
  else
    --*(_DWORD *)v291;
  v300 = WTF::fastMalloc((WTF *)0x23);
  *(_DWORD *)v300 = 1;
  *(_QWORD *)(v300 + 8) = 18;
  v620 = (_DWORD *)v300;
  strcpy((char *)(v300 + 16), "IsoSpace JSPromise");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 31144, &v620, a1, a1 + 1160, 32, 8, &v645, v301);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v620 = 0;
  if (*(_DWORD *)v300 == 1)
    WTF::fastFree(v300, v302, v303, v304, v305, v306, v307, v308);
  else
    --*(_DWORD *)v300;
  v309 = WTF::fastMalloc((WTF *)0x32);
  *(_DWORD *)v309 = 1;
  *(_QWORD *)(v309 + 8) = 33;
  v619 = (_DWORD *)v309;
  strcpy((char *)(v309 + 16), "IsoSpace JSPropertyNameEnumerator");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 31392, &v619, a1, a1 + 1160, 40, 8, &v645, v310);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v619 = 0;
  if (*(_DWORD *)v309 == 1)
    WTF::fastFree(v309, v311, v312, v313, v314, v315, v316, v317);
  else
    --*(_DWORD *)v309;
  v318 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v318 = 1;
  *(_QWORD *)(v318 + 8) = 22;
  v618 = (_DWORD *)v318;
  strcpy((char *)(v318 + 16), "IsoSpace PropertyTable");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 31640, &v618, a1, a1 + 1176, 40, 8, &v645, v319);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v618 = 0;
  if (*(_DWORD *)v318 == 1)
    WTF::fastFree(v318, v320, v321, v322, v323, v324, v325, v326);
  else
    --*(_DWORD *)v318;
  v327 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v327 = 1;
  v617 = (_DWORD *)v327;
  *(_QWORD *)(v327 + 8) = 15;
  strcpy((char *)(v327 + 16), "IsoSpace RegExp");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 31888, &v617, a1, a1 + 1176, 56, 8, &v645, v328);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v617 = 0;
  if (*(_DWORD *)v327 == 1)
    WTF::fastFree(v327, v329, v330, v331, v332, v333, v334, v335);
  else
    --*(_DWORD *)v327;
  v336 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v336 = 1;
  *(_QWORD *)(v336 + 8) = 21;
  v616 = (_DWORD *)v336;
  strcpy((char *)(v336 + 16), "IsoSpace RegExpObject");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 32136, &v616, a1, a1 + 1160, 32, 8, &v645, v337);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v616 = 0;
  if (*(_DWORD *)v336 == 1)
    WTF::fastFree(v336, v338, v339, v340, v341, v342, v343, v344);
  else
    --*(_DWORD *)v336;
  v345 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v345 = 1;
  *(_QWORD *)(v345 + 8) = 21;
  v615 = (_DWORD *)v345;
  strcpy((char *)(v345 + 16), "IsoSpace JSRopeString");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 32384, &v615, a1, a1 + 1616, 32, 8, &v645, v346);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v615 = 0;
  if (*(_DWORD *)v345 == 1)
    WTF::fastFree(v345, v347, v348, v349, v350, v351, v352, v353);
  else
    --*(_DWORD *)v345;
  v354 = WTF::fastMalloc((WTF *)0x29);
  *(_DWORD *)v354 = 1;
  *(_QWORD *)(v354 + 8) = 24;
  v614 = (_DWORD *)v354;
  strcpy((char *)(v354 + 16), "IsoSpace ScopedArguments");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 32632, &v614, a1, a1 + 1160, 64, 8, &v645, v355);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v614 = 0;
  if (*(_DWORD *)v354 == 1)
    WTF::fastFree(v354, v356, v357, v358, v359, v360, v361, v362);
  else
    --*(_DWORD *)v354;
  v363 = WTF::fastMalloc((WTF *)0x2D);
  *(_DWORD *)v363 = 1;
  *(_QWORD *)(v363 + 8) = 28;
  v613 = (_DWORD *)v363;
  strcpy((char *)(v363 + 16), "IsoSpace SparseArrayValueMap");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 32880, &v613, a1, a1 + 1176, 32, 8, &v645, v364);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v613 = 0;
  if (*(_DWORD *)v363 == 1)
    WTF::fastFree(v363, v365, v366, v367, v368, v369, v370, v371);
  else
    --*(_DWORD *)v363;
  v372 = WTF::fastMalloc((WTF *)0x22);
  *(_DWORD *)v372 = 1;
  *(_QWORD *)(v372 + 8) = 17;
  v612 = (_DWORD *)v372;
  strcpy((char *)(v372 + 16), "IsoSpace JSString");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 33128, &v612, a1, a1 + 1600, 16, 8, &v645, v373);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v612 = 0;
  if (*(_DWORD *)v372 == 1)
    WTF::fastFree(v372, v374, v375, v376, v377, v378, v379, v380);
  else
    --*(_DWORD *)v372;
  v381 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v381 = 1;
  *(_QWORD *)(v381 + 8) = 21;
  v611 = (_DWORD *)v381;
  strcpy((char *)(v381 + 16), "IsoSpace StringObject");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 33376, &v611, a1, a1 + 1160, 24, 8, &v645, v382);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v611 = 0;
  if (*(_DWORD *)v381 == 1)
    WTF::fastFree(v381, v383, v384, v385, v386, v387, v388, v389);
  else
    --*(_DWORD *)v381;
  v390 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v390 = 1;
  *(_QWORD *)(v390 + 8) = 23;
  v610 = (_DWORD *)v390;
  strcpy((char *)(v390 + 16), "IsoSpace StructureChain");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 33624, &v610, a1, a1 + 1160, 16, 8, &v645, v391);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v610 = 0;
  if (*(_DWORD *)v390 == 1)
    WTF::fastFree(v390, v392, v393, v394, v395, v396, v397, v398);
  else
    --*(_DWORD *)v390;
  v399 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v399 = 1;
  *(_QWORD *)(v399 + 8) = 26;
  v609 = (_DWORD *)v399;
  strcpy((char *)(v399 + 16), "IsoSpace StructureRareData");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 33872, &v609, a1, a1 + 1176, 96, 8, &v645, v400);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v609 = 0;
  if (*(_DWORD *)v399 == 1)
    WTF::fastFree(v399, v401, v402, v403, v404, v405, v406, v407);
  else
    --*(_DWORD *)v399;
  v408 = WTF::fastMalloc((WTF *)0x25);
  *(_DWORD *)v408 = 1;
  *(_QWORD *)(v408 + 8) = 20;
  v608 = (_DWORD *)v408;
  strcpy((char *)(v408 + 16), "IsoSpace SymbolTable");
  v645 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 34120, &v608, a1, a1 + 1176, 56, 8, &v645, v409);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v608 = 0;
  if (*(_DWORD *)v408 == 1)
    WTF::fastFree(v408, v410, v411, v412, v413, v414, v415, v416);
  else
    --*(_DWORD *)v408;
  v417 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v417 = 1;
  *(_QWORD *)(v417 + 8) = 25;
  v607 = (_DWORD *)v417;
  strcpy((char *)(v417 + 16), "IsoSubspacestructureSpace");
  v418 = WTF::fastMalloc((WTF *)0x50);
  v419 = WTF::fastMalloc((WTF *)0x1A);
  v427 = (int *)v419;
  *(_QWORD *)(v419 + 8) = 9;
  strcpy((char *)(v419 + 16), "Structure");
  *(_DWORD *)v419 = 2;
  *(_OWORD *)(v418 + 24) = 0u;
  *(_OWORD *)(v418 + 8) = 0u;
  *(_QWORD *)v418 = off_1E3590CB0;
  *(_QWORD *)(v418 + 40) = 0;
  *(_QWORD *)(v418 + 48) = 0;
  *(_QWORD *)(v418 + 56) = 0;
  *(_QWORD *)(v418 + 64) = 0x8000000000000000;
  *(_DWORD *)(v418 + 72) = 0;
  *(_BYTE *)(v418 + 76) = 0;
  v428 = *(_DWORD *)v419 - 1;
  if (*(_DWORD *)v419 == 1)
  {
    WTF::fastFree(v419, v420, v421, v422, v423, v424, v425, v426);
    v428 = *v427;
  }
  else
  {
    *(_DWORD *)v419 = v428;
  }
  *(_QWORD *)v418 = off_1E35910E0;
  v429 = v428 - 1;
  if (v429)
    *v427 = v429;
  else
    WTF::fastFree((unint64_t)v427, v420, v421, v422, v423, v424, v425, v426);
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v418;
  JSC::IsoSubspace::IsoSubspace(a1 + 34368, &v607, a1, a1 + 1176, 128, 0, &v645, v426);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v607 = 0;
  if (*(_DWORD *)v417 == 1)
    WTF::fastFree(v417, v430, v431, v432, v433, v434, v435, v436);
  else
    --*(_DWORD *)v417;
  v437 = WTF::fastMalloc((WTF *)0x31);
  *(_DWORD *)v437 = 1;
  *(_QWORD *)(v437 + 8) = 32;
  v606 = (_DWORD *)v437;
  strcpy((char *)(v437 + 16), "IsoSubspacebrandedStructureSpace");
  v438 = WTF::fastMalloc((WTF *)0x50);
  v439 = WTF::fastMalloc((WTF *)0x1A);
  v447 = (int *)v439;
  *(_QWORD *)(v439 + 8) = 9;
  strcpy((char *)(v439 + 16), "Structure");
  *(_DWORD *)v439 = 2;
  *(_OWORD *)(v438 + 24) = 0u;
  *(_OWORD *)(v438 + 8) = 0u;
  *(_QWORD *)v438 = off_1E3590CB0;
  *(_QWORD *)(v438 + 40) = 0;
  *(_QWORD *)(v438 + 48) = 0;
  *(_QWORD *)(v438 + 56) = 0;
  *(_QWORD *)(v438 + 64) = 0x8000000000000000;
  *(_DWORD *)(v438 + 72) = 0;
  *(_BYTE *)(v438 + 76) = 0;
  v448 = *(_DWORD *)v439 - 1;
  if (*(_DWORD *)v439 == 1)
  {
    WTF::fastFree(v439, v440, v441, v442, v443, v444, v445, v446);
    v448 = *v447;
  }
  else
  {
    *(_DWORD *)v439 = v448;
  }
  *(_QWORD *)v438 = off_1E35910E0;
  v449 = v448 - 1;
  if (v449)
    *v447 = v449;
  else
    WTF::fastFree((unint64_t)v447, v440, v441, v442, v443, v444, v445, v446);
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v438;
  JSC::IsoSubspace::IsoSubspace(a1 + 34616, &v606, a1, a1 + 1176, 128, 0, &v645, v446);
  if (v645)
    (*((void (**)(_QWORD))*v645 + 1))(v645);
  v606 = 0;
  if (*(_DWORD *)v437 == 1)
    WTF::fastFree(v437, v450, v451, v452, v453, v454, v455, v456);
  else
    --*(_DWORD *)v437;
  bzero((void *)(a1 + 34864), 0x300uLL);
  v457 = WTF::fastMalloc((WTF *)0x23);
  *(_DWORD *)v457 = 1;
  *(_QWORD *)(v457 + 8) = 18;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v457;
  strcpy((char *)(v457 + 16), "IsoSpace CodeBlock");
  v644 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 35632, (_DWORD **)&v645, a1, a1 + 1176, 232, 0, &v644, v458);
  if (v644)
    (*(void (**)(JSC::SlotVisitor *))(*(_QWORD *)v644 + 8))(v644);
  if (*(_DWORD *)v457 == 1)
    WTF::fastFree(v457, v459, v460, v461, v462, v463, v464, v465);
  else
    --*(_DWORD *)v457;
  JSC::IsoCellSet::IsoCellSet(a1 + 35880, a1 + 35632);
  *(_OWORD *)(a1 + 35968) = 0u;
  v466 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v466 = 1;
  *(_QWORD *)(v466 + 8) = 27;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v466;
  strcpy((char *)(v466 + 16), "IsoSpace FunctionExecutable");
  v644 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 35984, (_DWORD **)&v645, a1, a1 + 1176, 128, 8, &v644, v467);
  if (v644)
    (*(void (**)(JSC::SlotVisitor *))(*(_QWORD *)v644 + 8))(v644);
  if (*(_DWORD *)v466 == 1)
    WTF::fastFree(v466, v468, v469, v470, v471, v472, v473, v474);
  else
    --*(_DWORD *)v466;
  JSC::IsoCellSet::IsoCellSet(a1 + 36232, a1 + 35984);
  JSC::IsoCellSet::IsoCellSet(a1 + 36320, a1 + 35984);
  JSC::IsoCellSet::IsoCellSet(a1 + 36408, a1 + 35984);
  v475 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v475 = 1;
  *(_QWORD *)(v475 + 8) = 26;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v475;
  strcpy((char *)(v475 + 16), "IsoSpace ProgramExecutable");
  v644 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 36496, (_DWORD **)&v645, a1, a1 + 1176, 104, 8, &v644, v476);
  if (v644)
    (*(void (**)(JSC::SlotVisitor *))(*(_QWORD *)v644 + 8))(v644);
  if (*(_DWORD *)v475 == 1)
    WTF::fastFree(v475, v477, v478, v479, v480, v481, v482, v483);
  else
    --*(_DWORD *)v475;
  JSC::IsoCellSet::IsoCellSet(a1 + 36744, a1 + 36496);
  JSC::IsoCellSet::IsoCellSet(a1 + 36832, a1 + 36496);
  JSC::IsoCellSet::IsoCellSet(a1 + 36920, a1 + 36496);
  v484 = WTF::fastMalloc((WTF *)0x34);
  *(_DWORD *)v484 = 1;
  *(_QWORD *)(v484 + 8) = 35;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v484;
  strcpy((char *)(v484 + 16), "IsoSpace UnlinkedFunctionExecutable");
  v644 = 0;
  JSC::IsoSubspace::IsoSubspace(a1 + 37008, (_DWORD **)&v645, a1, a1 + 1176, 96, 8, &v644, v485);
  if (v644)
    (*(void (**)(JSC::SlotVisitor *))(*(_QWORD *)v644 + 8))(v644);
  if (*(_DWORD *)v484 == 1)
    WTF::fastFree(v484, v486, v487, v488, v489, v490, v491, v492);
  else
    --*(_DWORD *)v484;
  JSC::IsoCellSet::IsoCellSet(a1 + 37256, a1 + 37008);
  *(_OWORD *)(a1 + 37344) = 0u;
  atomic_store(0, (unsigned int *)(a1 + 904));
  v493 = atomic_load(&JSC::heapHelperPool(void)::initializeHelperPoolOnceFlag);
  if (v493 != -1)
  {
    v645 = (void (**)(WTF::StringPrintStream *__hidden))&v643;
    v644 = (JSC::SlotVisitor *)&v645;
    std::__call_once(&JSC::heapHelperPool(void)::initializeHelperPoolOnceFlag, &v644, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::heapHelperPool(void)::$_0 &&>>);
  }
  v494 = *(unsigned int *)(JSC::heapHelperPool(void)::helperPool + 104);
  if ((_DWORD)v494)
  {
    v495 = 0;
    v496 = &v648;
    do
    {
      ++v495;
      v645 = off_1E3572250;
      v646 = v496;
      v647 = xmmword_199122F80;
      v648 = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v645, "%s", "P");
      WTF::PrintStream::printf((WTF::PrintStream *)&v645, "%u", v495);
      v645[5]((WTF::StringPrintStream *)&v645);
      v504 = v646;
      if (v646)
      {
        v603 = v495;
        v505 = v494;
        v506 = v496;
        v507 = v647;
        if ((unint64_t)v647 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985A6458);
        }
        if ((_QWORD)v647 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1985A6460);
        }
        v508 = WTF::fastMalloc((WTF *)(v647 + 17));
        *(_DWORD *)v508 = 1;
        *(_QWORD *)(v508 + 8) = v507;
        memcpy((void *)(v508 + 16), v504, v507);
        *(_BYTE *)(v508 + 16 + v507) = 0;
        v509 = (unint64_t)v646;
        v496 = v506;
        v510 = v646 == v506;
        v494 = v505;
        v495 = v603;
        if (v510)
          goto LABEL_222;
      }
      else
      {
        v508 = 0;
        v509 = 0;
      }
      WTF::fastFree(v509, v497, v498, v499, v500, v501, v502, v503);
LABEL_222:
      v511 = WTF::fastMalloc((WTF *)0x100);
      v645 = (void (**)(WTF::StringPrintStream *__hidden))v508;
      v512 = (JSC::SlotVisitor *)JSC::SlotVisitor::SlotVisitor(v511, a1, (_DWORD **)&v645);
      v644 = v512;
      v645 = 0;
      if (v508)
      {
        if (*(_DWORD *)v508 == 1)
        {
          WTF::fastFree(v508, v513, v514, v515, v516, v517, v518, v519);
          v512 = v644;
        }
        else
        {
          --*(_DWORD *)v508;
        }
      }
      if (BYTE2(dword_1ECF4C358))
        *((_BYTE *)v512 + 186) = 1;
      v645 = (void (**)(WTF::StringPrintStream *__hidden))v512;
      v520 = *(unsigned int *)(a1 + 476);
      if ((_DWORD)v520 == *(_DWORD *)(a1 + 472))
      {
        v521 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v604, v520 + 1, (unint64_t)&v645);
        v520 = *(unsigned int *)(a1 + 476);
        *(_QWORD *)(*(_QWORD *)(a1 + 464) + 8 * v520) = *v521;
      }
      else
      {
        *(_QWORD *)(*v604 + 8 * v520) = v512;
      }
      *(_DWORD *)(a1 + 476) = v520 + 1;
      v522 = *(unsigned int *)(a1 + 460);
      if ((_DWORD)v522 == *(_DWORD *)(a1 + 456))
      {
        v523 = (JSC::SlotVisitor **)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v605, v522 + 1, (unint64_t)&v644);
        v522 = *(unsigned int *)(a1 + 460);
        v524 = *(_QWORD *)(a1 + 448);
        v525 = *v523;
        *v523 = 0;
      }
      else
      {
        v524 = *v605;
        v525 = v644;
        v644 = 0;
      }
      *(_QWORD *)(v524 + 8 * v522) = v525;
      *(_DWORD *)(a1 + 460) = v522 + 1;
      v526 = v644;
      v644 = 0;
      if (v526)
      {
        JSC::SlotVisitor::~SlotVisitor(v526, v513, v514, v515, v516, v517, v518, v519);
        WTF::fastFree(v527, v528, v529, v530, v531, v532, v533, v534);
      }
    }
    while ((_DWORD)v494 != v495);
  }
  if (HIBYTE(word_1ECF4C349))
  {
    if (byte_1ECF4C3D0)
    {
      v535 = WTF::fastMalloc((WTF *)0x68);
      *(_QWORD *)v535 = off_1E3590F90;
      *(_QWORD *)(v535 + 8) = a1;
      *(_DWORD *)(v535 + 16) = 0;
      v543 = WTF::cryptographicallyRandomNumber<unsigned int>(v535, v536, v537, v538, v539, v540, v541, v542);
      *(_DWORD *)(v535 + 24) = v543;
      if (!v543)
        v543 = 1;
      *(_QWORD *)(v535 + 32) = v543;
      *(_QWORD *)(v535 + 40) = (((unint64_t)v543 >> 26) | ((unint64_t)v543 << 23)) ^ ((v543 ^ ((unint64_t)v543 << 23)) >> 17);
      *(double *)(v535 + 48) = *(double *)&xmmword_1ECF4C3D8 / 1000.0;
      *(_QWORD *)(v535 + 56) = *((_QWORD *)&xmmword_1ECF4C3D8 + 1);
      *(_QWORD *)(v535 + 96) = 0;
      *(_OWORD *)(v535 + 64) = 0u;
      *(_OWORD *)(v535 + 80) = 0u;
    }
    else
    {
      v535 = WTF::fastMalloc((WTF *)0x38);
      JSC::SpaceTimeMutatorScheduler::SpaceTimeMutatorScheduler((JSC::SpaceTimeMutatorScheduler *)v535, (JSC::Heap *)a1);
    }
  }
  else
  {
    v535 = WTF::fastMalloc((WTF *)0x10);
    JSC::SynchronousStopTheWorldMutatorScheduler::SynchronousStopTheWorldMutatorScheduler(v535);
  }
  v544 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = v535;
  if (v544)
    (*(void (**)(uint64_t))(*(_QWORD *)v544 + 8))(v544);
  if (byte_1ECF4C612)
  {
    v589 = (JSC::HeapVerifier *)WTF::fastMalloc((WTF *)0x20);
    v645 = (void (**)(WTF::StringPrintStream *__hidden))JSC::HeapVerifier::HeapVerifier(v589, (JSC::Heap *)a1, qword_1ECF4C614);
    std::unique_ptr<JSC::HeapVerifier>::operator=[abi:sn180100]((unint64_t *)(a1 + 696), (unint64_t *)&v645, v590, v591, v592, v593, v594, v595);
    std::unique_ptr<JSC::HeapVerifier>::~unique_ptr[abi:sn180100]((unint64_t *)&v645, v596, v597, v598, v599, v600, v601, v602);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 400) + 186) = 1;
  *(_QWORD *)(a1 + 104) = (unint64_t)((1.0 - *(double *)&xmmword_1ECF4C398)
                                           * (double)*(unint64_t *)(a1 + 16)) >> 2;
  v545 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1024) + 4);
  if (__ldaxr(v545))
  {
    __clrex();
LABEL_249:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v545);
    goto LABEL_250;
  }
  if (__stxr(1u, v545))
    goto LABEL_249;
LABEL_250:
  v547 = WTF::fastMalloc((WTF *)0x38);
  v555 = (_QWORD *)v547;
  v556 = *(unsigned int **)(a1 + 1024);
  if (v556)
  {
    do
      v557 = __ldaxr(v556);
    while (__stlxr(v557 + 1, v556));
    v558 = *(_QWORD *)(a1 + 1032);
    do
      v559 = __ldaxr((unsigned int *)v558);
    while (__stlxr(v559 + 1, (unsigned int *)v558));
    do
      v560 = __ldaxr(v556);
    while (__stlxr(v560 + 1, v556));
    *(_DWORD *)(v547 + 8) = 1;
    *(_QWORD *)v547 = off_1E3571898;
    do
      v561 = __ldaxr(v556);
    while (__stlxr(v561 + 1, v556));
  }
  else
  {
    v558 = *(_QWORD *)(a1 + 1032);
    do
      v576 = __ldaxr((unsigned int *)v558);
    while (__stlxr(v576 + 1, (unsigned int *)v558));
    *(_DWORD *)(v547 + 8) = 1;
    *(_QWORD *)v547 = off_1E3571898;
  }
  *(_QWORD *)(v547 + 16) = v556;
  *(_QWORD *)(v547 + 24) = v558;
  *(_QWORD *)(v547 + 32) = 0x4024000000000000;
  *(_WORD *)(v547 + 40) = 256;
  *(_DWORD *)(v547 + 42) = 0;
  v645 = (void (**)(WTF::StringPrintStream *__hidden))v547;
  v562 = (_QWORD *)(v558 + 8);
  v563 = *(unsigned int *)(v558 + 20);
  if ((_DWORD)v563 == *(_DWORD *)(v558 + 16))
  {
    v564 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v562, v563 + 1, (unint64_t)&v645);
    v563 = *(unsigned int *)(v558 + 20);
    *(_QWORD *)(*(_QWORD *)(v558 + 8) + 8 * v563) = *v564;
  }
  else
  {
    *(_QWORD *)(*v562 + 8 * v563) = v555;
  }
  *(_DWORD *)(v558 + 20) = v563 + 1;
  if (v556)
  {
    do
    {
      v565 = __ldaxr(v556);
      v566 = v565 - 1;
    }
    while (__stlxr(v566, v556));
    if (!v566)
    {
      atomic_store(1u, v556);
      WTF::fastFree((unint64_t)v556, v548, v549, v550, v551, v552, v553, v554);
    }
    do
    {
      v567 = __ldaxr(v556);
      v568 = v567 - 1;
    }
    while (__stlxr(v568, v556));
    if (!v568)
    {
      atomic_store(1u, v556);
      WTF::fastFree((unint64_t)v556, v548, v549, v550, v551, v552, v553, v554);
    }
  }
  *v555 = off_1E35905F8;
  v555[6] = a1;
  v569 = *(unsigned int **)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = v555;
  if (v569)
  {
    v570 = v569 + 2;
    do
    {
      v571 = __ldaxr(v570);
      v572 = v571 - 1;
    }
    while (__stlxr(v572, v570));
    if (!v572)
    {
      atomic_store(1u, v569 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v569 + 8))(v569);
    }
  }
  v573 = __ldxr(v545);
  if (v573 == 1)
  {
    if (!__stlxr(0, v545))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v545, 0, v549, v550, v551, v552, v553, v554);
  return a1;
}

unint64_t *std::unique_ptr<JSC::HeapVerifier>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (v11)
    {
      v12 = v11 - 16;
      v13 = *(_QWORD *)(v11 - 8);
      if (v13)
      {
        v14 = 112 * v13;
        v15 = v11 - 112;
        do
        {
          JSC::HeapVerifier::GCCycle::~GCCycle((JSC::HeapVerifier::GCCycle *)(v15 + v14), a2, a3, a4, a5, a6, a7, a8);
          v14 -= 112;
        }
        while (v14);
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::HeapVerifier>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    if (v10)
    {
      v11 = v10 - 16;
      v12 = *(_QWORD *)(v10 - 8);
      if (v12)
      {
        v13 = 112 * v12;
        v14 = v10 - 112;
        do
        {
          JSC::HeapVerifier::GCCycle::~GCCycle((JSC::HeapVerifier::GCCycle *)(v14 + v13), a2, a3, a4, a5, a6, a7, a8);
          v13 -= 112;
        }
        while (v13);
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::Heap::~Heap(JSC::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD **v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD **v14;
  uint64_t j;
  uint64_t v16;
  _QWORD *v17;
  _QWORD **v18;
  uint64_t k;
  _QWORD *v20;
  _QWORD **v21;
  uint64_t m;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD **v36;
  uint64_t n;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD **v41;
  uint64_t ii;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  JSC::IsoSubspacePerVM **v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  _QWORD *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  _QWORD *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  _QWORD *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _DWORD *v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _DWORD *v320;
  _QWORD *v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _DWORD *v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _DWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _DWORD *v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _DWORD *v358;
  uint64_t *v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _DWORD *v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _DWORD *v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _DWORD *v386;
  uint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _DWORD *v395;
  uint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _DWORD *v404;
  uint64_t v405;
  void *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _DWORD *v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _DWORD *v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _DWORD *v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _DWORD *v440;
  uint64_t v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _DWORD *v449;
  uint64_t v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _DWORD *v458;
  uint64_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _DWORD *v467;
  uint64_t v468;
  void *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _DWORD *v476;
  uint64_t v477;
  void *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _DWORD *v485;
  uint64_t v486;
  void *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _DWORD *v494;
  uint64_t v495;
  void *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  _DWORD *v503;
  uint64_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _DWORD *v512;
  uint64_t v513;
  void *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _DWORD *v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  _DWORD *v530;
  uint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _DWORD *v539;
  uint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  _DWORD *v548;
  uint64_t v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  _DWORD *v557;
  uint64_t v558;
  void *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  _DWORD *v566;
  uint64_t v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  _DWORD *v575;
  uint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  _DWORD *v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  void *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  void *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  void *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  void *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  unint64_t v628;
  unsigned int *v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int *v632;
  unsigned int *v633;
  unsigned int v634;
  unsigned int v635;
  unint64_t v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int *v639;
  unsigned int v640;
  unsigned int v641;
  unsigned int *v642;
  unsigned int *v643;
  unsigned int v644;
  unsigned int v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unsigned int *v651;
  unsigned int *v652;
  unsigned int v653;
  unsigned int v654;
  void *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t *v663;
  uint64_t v664;
  unint64_t v665;
  JSC::Heap *v666;
  unint64_t v668;
  uint64_t *v669;
  uint64_t v670;
  _QWORD *v671;
  void *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  _QWORD *v682;
  void *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unsigned int *v701;
  unsigned int *v702;
  unsigned int v703;
  unsigned int v704;
  unsigned int *v705;
  unsigned int *v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int *v709;
  unsigned int *v710;
  unsigned int v711;
  unsigned int v712;
  unsigned int *v713;
  unsigned int *v714;
  unsigned int v715;
  unsigned int v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  JSC::JITStubRoutineSet *v720;
  unint64_t v721;
  void *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  _QWORD *v729;
  uint64_t v730;
  uint64_t *jj;
  uint64_t v732;
  _QWORD *v733;
  unint64_t v734;
  uint64_t v735;
  JSC::SlotVisitor **v736;
  uint64_t v737;
  JSC::SlotVisitor *v738;
  unint64_t v739;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t v748;
  JSC::MarkingConstraintSet *v749;
  unint64_t v750;
  void *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  _QWORD *v761;
  void *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t *v770;
  uint64_t v771;
  _QWORD *v772;
  void *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  JSC::SlotVisitor *v780;
  unint64_t v781;
  void *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  JSC::SlotVisitor *v789;
  unint64_t v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  std::__shared_weak_count *v799;
  unint64_t *p_shared_owners;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  _QWORD *v807;
  unint64_t v808;
  unint64_t v809;
  unsigned int *v810;
  unsigned int *v811;
  unsigned int v812;
  unsigned int v813;
  WTF::StringImpl **v814;
  uint64_t v815;
  WTF::StringImpl *v816;
  unint64_t v817;
  void *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  _QWORD *v827;
  uint64_t v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  uint64_t v832;
  _QWORD *v833;
  uint64_t v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t v837;
  uint64_t v838;
  _QWORD *v839;
  uint64_t v840;
  uint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  uint64_t v844;
  _QWORD *v845;
  uint64_t v846;
  uint64_t v847;
  _QWORD *v848;
  unint64_t v849;
  void *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  unint64_t v859;
  unsigned int *v860;
  unsigned int *v861;
  unsigned int v862;
  unsigned int v863;
  uint64_t v864;
  JSC::IsoSubspacePerVM *v865;
  const void **v866;
  uint64_t v867;
  const void *v868;
  unint64_t v869;
  unsigned int *v870;
  unsigned int *v871;
  unsigned int v872;
  unsigned int v873;
  unint64_t v874;
  __int128 v875;
  __int128 v876;

  atomic_store(0xBADBEEFF, (unsigned int *)this + 226);
  v9 = *((_QWORD *)this + 50);
  v10 = *(_QWORD **)(v9 + 8);
  if (v10)
  {
    v11 = (_QWORD **)(v10 + 1);
    for (i = v10[1]; i; v10 = (_QWORD *)v831)
    {
      v831 = i;
      v832 = *v10;
      if (*v10)
      {
        *(_QWORD *)(v832 + 8) = v831;
        v833 = *v11;
      }
      else
      {
        *(_QWORD *)(v9 + 8) = v831;
        v833 = (_QWORD *)v831;
      }
      if (!v833)
        v833 = (_QWORD *)(v9 + 16);
      *v833 = v832;
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
      v11 = (_QWORD **)(v831 + 8);
      i = *(_QWORD *)(v831 + 8);
    }
    *(_OWORD *)(v9 + 24) = xmmword_19914FB90;
  }
  v13 = *(_QWORD **)(v9 + 40);
  if (v13)
  {
    v14 = (_QWORD **)(v13 + 1);
    for (j = v13[1]; j; v13 = (_QWORD *)v834)
    {
      v834 = j;
      v835 = *v13;
      if (*v13)
      {
        *(_QWORD *)(v835 + 8) = v834;
        v836 = *v14;
      }
      else
      {
        *(_QWORD *)(v9 + 40) = v834;
        v836 = (_QWORD *)v834;
      }
      if (!v836)
        v836 = (_QWORD *)(v9 + 48);
      *v836 = v835;
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      v14 = (_QWORD **)(v834 + 8);
      j = *(_QWORD *)(v834 + 8);
    }
    *(_OWORD *)(v9 + 56) = xmmword_19914FB90;
  }
  v16 = *((_QWORD *)this + 51);
  v17 = *(_QWORD **)(v16 + 8);
  if (v17)
  {
    v18 = (_QWORD **)(v17 + 1);
    for (k = v17[1]; k; v17 = (_QWORD *)v837)
    {
      v837 = k;
      v838 = *v17;
      if (*v17)
      {
        *(_QWORD *)(v838 + 8) = v837;
        v839 = *v18;
      }
      else
      {
        *(_QWORD *)(v16 + 8) = v837;
        v839 = (_QWORD *)v837;
      }
      if (!v839)
        v839 = (_QWORD *)(v16 + 16);
      *v839 = v838;
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
      v18 = (_QWORD **)(v837 + 8);
      k = *(_QWORD *)(v837 + 8);
    }
    *(_OWORD *)(v16 + 24) = xmmword_19914FB90;
  }
  v20 = *(_QWORD **)(v16 + 40);
  if (v20)
  {
    v21 = (_QWORD **)(v20 + 1);
    for (m = v20[1]; m; v20 = (_QWORD *)v840)
    {
      v840 = m;
      v841 = *v20;
      if (*v20)
      {
        *(_QWORD *)(v841 + 8) = v840;
        v842 = *v21;
      }
      else
      {
        *(_QWORD *)(v16 + 40) = v840;
        v842 = (_QWORD *)v840;
      }
      if (!v842)
        v842 = (_QWORD *)(v16 + 48);
      *v842 = v841;
      WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
      v21 = (_QWORD **)(v840 + 8);
      m = *(_QWORD *)(v840 + 8);
    }
    *(_OWORD *)(v16 + 56) = xmmword_19914FB90;
  }
  v23 = *((unsigned int *)this + 115);
  if ((_DWORD)v23)
  {
    v24 = (uint64_t *)*((_QWORD *)this + 56);
    v25 = &v24[v23];
    v26 = xmmword_19914FB90;
    do
    {
      v27 = *v24;
      v28 = *(_QWORD **)(*v24 + 8);
      if (v28)
      {
        v29 = (_QWORD **)(v28 + 1);
        v30 = v28[1];
        if (v30)
        {
          v875 = v26;
          do
          {
            v825 = v30;
            v826 = *v28;
            if (*v28)
            {
              *(_QWORD *)(v826 + 8) = v825;
              v827 = *v29;
            }
            else
            {
              *(_QWORD *)(v27 + 8) = v825;
              v827 = (_QWORD *)v825;
            }
            if (!v827)
              v827 = (_QWORD *)(v27 + 16);
            *v827 = v826;
            WTF::fastFree((unint64_t)v28, a2, a3, a4, a5, a6, a7, a8);
            v29 = (_QWORD **)(v825 + 8);
            v30 = *(_QWORD *)(v825 + 8);
            v28 = (_QWORD *)v825;
            v26 = v875;
          }
          while (v30);
        }
        *(_OWORD *)(v27 + 24) = v26;
      }
      v31 = *(_QWORD **)(v27 + 40);
      if (v31)
      {
        v32 = (_QWORD **)(v31 + 1);
        v33 = v31[1];
        if (v33)
        {
          v876 = v26;
          do
          {
            v828 = v33;
            v829 = *v31;
            if (*v31)
            {
              *(_QWORD *)(v829 + 8) = v828;
              v830 = *v32;
            }
            else
            {
              *(_QWORD *)(v27 + 40) = v828;
              v830 = (_QWORD *)v828;
            }
            if (!v830)
              v830 = (_QWORD *)(v27 + 48);
            *v830 = v829;
            WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
            v32 = (_QWORD **)(v828 + 8);
            v33 = *(_QWORD *)(v828 + 8);
            v31 = (_QWORD *)v828;
            v26 = v876;
          }
          while (v33);
        }
        *(_OWORD *)(v27 + 56) = v26;
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v34 = *((_QWORD *)this + 52);
  v35 = *(_QWORD **)v34;
  if (*(_QWORD *)v34)
  {
    v36 = (_QWORD **)(v35 + 1);
    for (n = v35[1]; n; v35 = (_QWORD *)v843)
    {
      v843 = n;
      v844 = *v35;
      if (*v35)
      {
        *(_QWORD *)(v844 + 8) = v843;
        v845 = *v36;
      }
      else
      {
        *(_QWORD *)v34 = v843;
        v845 = (_QWORD *)v843;
      }
      if (!v845)
        v845 = (_QWORD *)(v34 + 8);
      *v845 = v844;
      WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, a6, a7, a8);
      v36 = (_QWORD **)(v843 + 8);
      n = *(_QWORD *)(v843 + 8);
    }
    *(_OWORD *)(v34 + 16) = xmmword_19914FB90;
  }
  v38 = (_QWORD *)((char *)this + 37008);
  v39 = *((_QWORD *)this + 53);
  v40 = *(_QWORD **)v39;
  if (*(_QWORD *)v39)
  {
    v41 = (_QWORD **)(v40 + 1);
    for (ii = v40[1]; ii; v40 = (_QWORD *)v846)
    {
      v846 = ii;
      v847 = *v40;
      if (*v40)
      {
        *(_QWORD *)(v847 + 8) = v846;
        v848 = *v41;
      }
      else
      {
        *(_QWORD *)v39 = v846;
        v848 = (_QWORD *)v846;
      }
      if (!v848)
        v848 = (_QWORD *)(v39 + 8);
      *v848 = v847;
      WTF::fastFree((unint64_t)v40, a2, a3, a4, a5, a6, a7, a8);
      v41 = (_QWORD **)(v846 + 8);
      ii = *(_QWORD *)(v846 + 8);
    }
    *(_OWORD *)(v39 + 16) = xmmword_19914FB90;
  }
  v43 = *((unsigned int *)this + 151);
  if ((_DWORD)v43)
  {
    v44 = (unint64_t *)*((_QWORD *)this + 74);
    v45 = 8 * v43;
    do
    {
      v46 = *v44++;
      WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)this + 110) -= 1024;
      v45 -= 8;
    }
    while (v45);
  }
  v47 = (JSC::IsoSubspacePerVM **)*((_QWORD *)this + 4668);
  v48 = *((unsigned int *)this + 9339);
  if ((_DWORD)v48)
  {
    v864 = 8 * v48;
    do
    {
      v865 = *v47++;
      JSC::IsoSubspacePerVM::releaseIsoSubspace(v865, this, a3, a4, a5, a6, a7, a8);
      v864 -= 8;
    }
    while (v864);
    v47 = (JSC::IsoSubspacePerVM **)*((_QWORD *)this + 4668);
  }
  if (v47)
  {
    *((_QWORD *)this + 4668) = 0;
    *((_DWORD *)this + 9338) = 0;
    WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
  }
  v49 = (_QWORD *)((char *)this + 35984);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 37256), a2, a3, a4, a5, a6, a7, a8);
  *v38 = off_1E3590D20;
  v57 = *((_QWORD *)this + 4652);
  *((_QWORD *)this + 4652) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 37096), v50, v51, v52, v53, v54, v55, v56);
  *v38 = off_1E3591150;
  v65 = (_DWORD *)*((_QWORD *)this + 4636);
  *((_QWORD *)this + 4636) = 0;
  if (v65)
  {
    if (*v65 == 1)
      WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
    else
      --*v65;
  }
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 36920), v58, v59, v60, v61, v62, v63, v64);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 36832), v66, v67, v68, v69, v70, v71, v72);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 36744), v73, v74, v75, v76, v77, v78, v79);
  *((_QWORD *)this + 4562) = off_1E3590D20;
  v87 = *((_QWORD *)this + 4588);
  *((_QWORD *)this + 4588) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 36584), v80, v81, v82, v83, v84, v85, v86);
  *((_QWORD *)this + 4562) = off_1E3591150;
  v95 = (_DWORD *)*((_QWORD *)this + 4572);
  *((_QWORD *)this + 4572) = 0;
  if (v95)
  {
    if (*v95 == 1)
      WTF::fastFree((unint64_t)v95, v88, v89, v90, v91, v92, v93, v94);
    else
      --*v95;
  }
  v96 = (_QWORD *)((char *)this + 35632);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 36408), v88, v89, v90, v91, v92, v93, v94);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 36320), v97, v98, v99, v100, v101, v102, v103);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 36232), v104, v105, v106, v107, v108, v109, v110);
  *v49 = off_1E3590D20;
  v118 = *((_QWORD *)this + 4524);
  *((_QWORD *)this + 4524) = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 36072), v111, v112, v113, v114, v115, v116, v117);
  *v49 = off_1E3591150;
  v126 = (_DWORD *)*((_QWORD *)this + 4508);
  *((_QWORD *)this + 4508) = 0;
  if (v126)
  {
    if (*v126 == 1)
      WTF::fastFree((unint64_t)v126, v119, v120, v121, v122, v123, v124, v125);
    else
      --*v126;
  }
  v127 = (_QWORD *)*((_QWORD *)this + 4497);
  *((_QWORD *)this + 4497) = 0;
  if (v127)
  {
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v127 + 53), v119, v120, v121, v122, v123, v124, v125);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v127 + 42), v128, v129, v130, v131, v132, v133, v134);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v127 + 31), v135, v136, v137, v138, v139, v140, v141);
    *v127 = off_1E3590D20;
    v149 = v127[26];
    v127[26] = 0;
    if (v149)
      (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
    JSC::BlockDirectory::~BlockDirectory((JSC::BlockDirectory *)(v127 + 11), v142, v143, v144, v145, v146, v147, v148);
    *v127 = off_1E3591150;
    v157 = (_DWORD *)v127[10];
    v127[10] = 0;
    if (v157)
    {
      if (*v157 == 1)
        WTF::fastFree((unint64_t)v157, v150, v151, v152, v153, v154, v155, v156);
      else
        --*v157;
    }
    WTF::fastFree((unint64_t)v127, v150, v151, v152, v153, v154, v155, v156);
  }
  v158 = (_QWORD *)*((_QWORD *)this + 4496);
  *((_QWORD *)this + 4496) = 0;
  if (v158)
  {
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v158 + 53), v119, v120, v121, v122, v123, v124, v125);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v158 + 42), v159, v160, v161, v162, v163, v164, v165);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v158 + 31), v166, v167, v168, v169, v170, v171, v172);
    *v158 = off_1E3590D20;
    v180 = v158[26];
    v158[26] = 0;
    if (v180)
      (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
    JSC::BlockDirectory::~BlockDirectory((JSC::BlockDirectory *)(v158 + 11), v173, v174, v175, v176, v177, v178, v179);
    *v158 = off_1E3591150;
    v188 = (_DWORD *)v158[10];
    v158[10] = 0;
    if (v188)
    {
      if (*v188 == 1)
        WTF::fastFree((unint64_t)v188, v181, v182, v183, v184, v185, v186, v187);
      else
        --*v188;
    }
    WTF::fastFree((unint64_t)v158, v181, v182, v183, v184, v185, v186, v187);
  }
  v189 = (_QWORD *)((char *)this + 34616);
  JSC::IsoCellSet::~IsoCellSet((JSC::Heap *)((char *)this + 35880), v119, v120, v121, v122, v123, v124, v125);
  *v96 = off_1E3590D20;
  v197 = *((_QWORD *)this + 4480);
  *((_QWORD *)this + 4480) = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 35720), v190, v191, v192, v193, v194, v195, v196);
  *v96 = off_1E3591150;
  v205 = (_DWORD *)*((_QWORD *)this + 4464);
  *((_QWORD *)this + 4464) = 0;
  if (v205)
  {
    if (*v205 == 1)
      WTF::fastFree((unint64_t)v205, v198, v199, v200, v201, v202, v203, v204);
    else
      --*v205;
  }
  v206 = *((_QWORD *)this + 4453);
  *((_QWORD *)this + 4453) = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  v207 = *((_QWORD *)this + 4452);
  *((_QWORD *)this + 4452) = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *((_QWORD *)this + 4451);
  *((_QWORD *)this + 4451) = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = *((_QWORD *)this + 4450);
  *((_QWORD *)this + 4450) = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *((_QWORD *)this + 4449);
  *((_QWORD *)this + 4449) = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  v211 = *((_QWORD *)this + 4448);
  *((_QWORD *)this + 4448) = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *((_QWORD *)this + 4447);
  *((_QWORD *)this + 4447) = 0;
  if (v212)
    (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  v213 = *((_QWORD *)this + 4446);
  *((_QWORD *)this + 4446) = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *((_QWORD *)this + 4445);
  *((_QWORD *)this + 4445) = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = *((_QWORD *)this + 4444);
  *((_QWORD *)this + 4444) = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *((_QWORD *)this + 4443);
  *((_QWORD *)this + 4443) = 0;
  if (v216)
    (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
  v217 = *((_QWORD *)this + 4442);
  *((_QWORD *)this + 4442) = 0;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *((_QWORD *)this + 4441);
  *((_QWORD *)this + 4441) = 0;
  if (v218)
    (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  v219 = *((_QWORD *)this + 4440);
  *((_QWORD *)this + 4440) = 0;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *((_QWORD *)this + 4439);
  *((_QWORD *)this + 4439) = 0;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = *((_QWORD *)this + 4438);
  *((_QWORD *)this + 4438) = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *((_QWORD *)this + 4437);
  *((_QWORD *)this + 4437) = 0;
  if (v222)
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
  v223 = *((_QWORD *)this + 4436);
  *((_QWORD *)this + 4436) = 0;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *((_QWORD *)this + 4435);
  *((_QWORD *)this + 4435) = 0;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = *((_QWORD *)this + 4434);
  *((_QWORD *)this + 4434) = 0;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *((_QWORD *)this + 4433);
  *((_QWORD *)this + 4433) = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  v227 = *((_QWORD *)this + 4432);
  *((_QWORD *)this + 4432) = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *((_QWORD *)this + 4431);
  *((_QWORD *)this + 4431) = 0;
  if (v228)
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  v229 = *((_QWORD *)this + 4430);
  *((_QWORD *)this + 4430) = 0;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *((_QWORD *)this + 4429);
  *((_QWORD *)this + 4429) = 0;
  if (v230)
    (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
  v231 = *((_QWORD *)this + 4428);
  *((_QWORD *)this + 4428) = 0;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *((_QWORD *)this + 4427);
  *((_QWORD *)this + 4427) = 0;
  if (v232)
    (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
  v233 = *((_QWORD *)this + 4426);
  *((_QWORD *)this + 4426) = 0;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *((_QWORD *)this + 4425);
  *((_QWORD *)this + 4425) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  v235 = *((_QWORD *)this + 4424);
  *((_QWORD *)this + 4424) = 0;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *((_QWORD *)this + 4423);
  *((_QWORD *)this + 4423) = 0;
  if (v236)
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
  v237 = *((_QWORD *)this + 4422);
  *((_QWORD *)this + 4422) = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *((_QWORD *)this + 4421);
  *((_QWORD *)this + 4421) = 0;
  if (v238)
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
  v239 = *((_QWORD *)this + 4420);
  *((_QWORD *)this + 4420) = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *((_QWORD *)this + 4419);
  *((_QWORD *)this + 4419) = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = *((_QWORD *)this + 4418);
  *((_QWORD *)this + 4418) = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *((_QWORD *)this + 4417);
  *((_QWORD *)this + 4417) = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  v243 = *((_QWORD *)this + 4416);
  *((_QWORD *)this + 4416) = 0;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *((_QWORD *)this + 4415);
  *((_QWORD *)this + 4415) = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = *((_QWORD *)this + 4414);
  *((_QWORD *)this + 4414) = 0;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *((_QWORD *)this + 4413);
  *((_QWORD *)this + 4413) = 0;
  if (v246)
    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
  v247 = *((_QWORD *)this + 4412);
  *((_QWORD *)this + 4412) = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *((_QWORD *)this + 4411);
  *((_QWORD *)this + 4411) = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  v249 = *((_QWORD *)this + 4410);
  *((_QWORD *)this + 4410) = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *((_QWORD *)this + 4409);
  *((_QWORD *)this + 4409) = 0;
  if (v250)
    (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
  v251 = *((_QWORD *)this + 4408);
  *((_QWORD *)this + 4408) = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *((_QWORD *)this + 4407);
  *((_QWORD *)this + 4407) = 0;
  if (v252)
    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
  v253 = *((_QWORD *)this + 4406);
  *((_QWORD *)this + 4406) = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *((_QWORD *)this + 4405);
  *((_QWORD *)this + 4405) = 0;
  if (v254)
    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
  v255 = *((_QWORD *)this + 4404);
  *((_QWORD *)this + 4404) = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *((_QWORD *)this + 4403);
  *((_QWORD *)this + 4403) = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  v257 = *((_QWORD *)this + 4402);
  *((_QWORD *)this + 4402) = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *((_QWORD *)this + 4401);
  *((_QWORD *)this + 4401) = 0;
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  v259 = *((_QWORD *)this + 4400);
  *((_QWORD *)this + 4400) = 0;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *((_QWORD *)this + 4399);
  *((_QWORD *)this + 4399) = 0;
  if (v260)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  v261 = *((_QWORD *)this + 4398);
  *((_QWORD *)this + 4398) = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *((_QWORD *)this + 4397);
  *((_QWORD *)this + 4397) = 0;
  if (v262)
    (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  v263 = *((_QWORD *)this + 4396);
  *((_QWORD *)this + 4396) = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *((_QWORD *)this + 4395);
  *((_QWORD *)this + 4395) = 0;
  if (v264)
    (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  v265 = *((_QWORD *)this + 4394);
  *((_QWORD *)this + 4394) = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *((_QWORD *)this + 4393);
  *((_QWORD *)this + 4393) = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  v267 = *((_QWORD *)this + 4392);
  *((_QWORD *)this + 4392) = 0;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *((_QWORD *)this + 4391);
  *((_QWORD *)this + 4391) = 0;
  if (v268)
    (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  v269 = *((_QWORD *)this + 4390);
  *((_QWORD *)this + 4390) = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *((_QWORD *)this + 4389);
  *((_QWORD *)this + 4389) = 0;
  if (v270)
    (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  v271 = *((_QWORD *)this + 4388);
  *((_QWORD *)this + 4388) = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *((_QWORD *)this + 4387);
  *((_QWORD *)this + 4387) = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = *((_QWORD *)this + 4386);
  *((_QWORD *)this + 4386) = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *((_QWORD *)this + 4385);
  *((_QWORD *)this + 4385) = 0;
  if (v274)
    (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  v275 = *((_QWORD *)this + 4384);
  *((_QWORD *)this + 4384) = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *((_QWORD *)this + 4383);
  *((_QWORD *)this + 4383) = 0;
  if (v276)
    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  v277 = *((_QWORD *)this + 4382);
  *((_QWORD *)this + 4382) = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *((_QWORD *)this + 4381);
  *((_QWORD *)this + 4381) = 0;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  v279 = *((_QWORD *)this + 4380);
  *((_QWORD *)this + 4380) = 0;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *((_QWORD *)this + 4379);
  *((_QWORD *)this + 4379) = 0;
  if (v280)
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  v281 = *((_QWORD *)this + 4378);
  *((_QWORD *)this + 4378) = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *((_QWORD *)this + 4377);
  *((_QWORD *)this + 4377) = 0;
  if (v282)
    (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
  v283 = *((_QWORD *)this + 4376);
  *((_QWORD *)this + 4376) = 0;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *((_QWORD *)this + 4375);
  *((_QWORD *)this + 4375) = 0;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  v285 = *((_QWORD *)this + 4374);
  *((_QWORD *)this + 4374) = 0;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *((_QWORD *)this + 4373);
  *((_QWORD *)this + 4373) = 0;
  if (v286)
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
  v287 = *((_QWORD *)this + 4372);
  *((_QWORD *)this + 4372) = 0;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *((_QWORD *)this + 4371);
  *((_QWORD *)this + 4371) = 0;
  if (v288)
    (*(void (**)(uint64_t))(*(_QWORD *)v288 + 8))(v288);
  v289 = *((_QWORD *)this + 4370);
  *((_QWORD *)this + 4370) = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *((_QWORD *)this + 4369);
  *((_QWORD *)this + 4369) = 0;
  if (v290)
    (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  v291 = *((_QWORD *)this + 4368);
  *((_QWORD *)this + 4368) = 0;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *((_QWORD *)this + 4367);
  *((_QWORD *)this + 4367) = 0;
  if (v292)
    (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
  v293 = *((_QWORD *)this + 4366);
  *((_QWORD *)this + 4366) = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *((_QWORD *)this + 4365);
  *((_QWORD *)this + 4365) = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  v295 = *((_QWORD *)this + 4364);
  *((_QWORD *)this + 4364) = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *((_QWORD *)this + 4363);
  *((_QWORD *)this + 4363) = 0;
  if (v296)
    (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
  v297 = *((_QWORD *)this + 4362);
  *((_QWORD *)this + 4362) = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *((_QWORD *)this + 4361);
  *((_QWORD *)this + 4361) = 0;
  if (v298)
    (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  v299 = *((_QWORD *)this + 4360);
  *((_QWORD *)this + 4360) = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *((_QWORD *)this + 4359);
  *((_QWORD *)this + 4359) = 0;
  if (v300)
    (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
  v301 = *((_QWORD *)this + 4358);
  *((_QWORD *)this + 4358) = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = (_QWORD *)((char *)this + 34120);
  *v189 = off_1E3590D20;
  v303 = *((_QWORD *)this + 4353);
  *((_QWORD *)this + 4353) = 0;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 34704), v198, v199, v200, v201, v202, v203, v204);
  *v189 = off_1E3591150;
  v311 = (_DWORD *)*((_QWORD *)this + 4337);
  *((_QWORD *)this + 4337) = 0;
  if (v311)
  {
    if (*v311 == 1)
      WTF::fastFree((unint64_t)v311, v304, v305, v306, v307, v308, v309, v310);
    else
      --*v311;
  }
  *((_QWORD *)this + 4296) = off_1E3590D20;
  v312 = *((_QWORD *)this + 4322);
  *((_QWORD *)this + 4322) = 0;
  if (v312)
    (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 34456), v304, v305, v306, v307, v308, v309, v310);
  *((_QWORD *)this + 4296) = off_1E3591150;
  v320 = (_DWORD *)*((_QWORD *)this + 4306);
  *((_QWORD *)this + 4306) = 0;
  if (v320)
  {
    if (*v320 == 1)
      WTF::fastFree((unint64_t)v320, v313, v314, v315, v316, v317, v318, v319);
    else
      --*v320;
  }
  v321 = (_QWORD *)((char *)this + 33624);
  *v302 = off_1E3590D20;
  v322 = *((_QWORD *)this + 4291);
  *((_QWORD *)this + 4291) = 0;
  if (v322)
    (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 34208), v313, v314, v315, v316, v317, v318, v319);
  *v302 = off_1E3591150;
  v330 = (_DWORD *)*((_QWORD *)this + 4275);
  *((_QWORD *)this + 4275) = 0;
  if (v330)
  {
    if (*v330 == 1)
      WTF::fastFree((unint64_t)v330, v323, v324, v325, v326, v327, v328, v329);
    else
      --*v330;
  }
  *((_QWORD *)this + 4234) = off_1E3590D20;
  v331 = *((_QWORD *)this + 4260);
  *((_QWORD *)this + 4260) = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 33960), v323, v324, v325, v326, v327, v328, v329);
  *((_QWORD *)this + 4234) = off_1E3591150;
  v339 = (_DWORD *)*((_QWORD *)this + 4244);
  *((_QWORD *)this + 4244) = 0;
  if (v339)
  {
    if (*v339 == 1)
      WTF::fastFree((unint64_t)v339, v332, v333, v334, v335, v336, v337, v338);
    else
      --*v339;
  }
  v340 = (_QWORD *)((char *)this + 33128);
  *v321 = off_1E3590D20;
  v341 = *((_QWORD *)this + 4229);
  *((_QWORD *)this + 4229) = 0;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 33712), v332, v333, v334, v335, v336, v337, v338);
  *v321 = off_1E3591150;
  v349 = (_DWORD *)*((_QWORD *)this + 4213);
  *((_QWORD *)this + 4213) = 0;
  if (v349)
  {
    if (*v349 == 1)
      WTF::fastFree((unint64_t)v349, v342, v343, v344, v345, v346, v347, v348);
    else
      --*v349;
  }
  *((_QWORD *)this + 4172) = off_1E3590D20;
  v350 = *((_QWORD *)this + 4198);
  *((_QWORD *)this + 4198) = 0;
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 33464), v342, v343, v344, v345, v346, v347, v348);
  *((_QWORD *)this + 4172) = off_1E3591150;
  v358 = (_DWORD *)*((_QWORD *)this + 4182);
  *((_QWORD *)this + 4182) = 0;
  if (v358)
  {
    if (*v358 == 1)
      WTF::fastFree((unint64_t)v358, v351, v352, v353, v354, v355, v356, v357);
    else
      --*v358;
  }
  v359 = (uint64_t *)((char *)this + 32840);
  *v340 = off_1E3590D20;
  v360 = *((_QWORD *)this + 4167);
  *((_QWORD *)this + 4167) = 0;
  if (v360)
    (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 33216), v351, v352, v353, v354, v355, v356, v357);
  *v340 = off_1E3591150;
  v368 = (_DWORD *)*((_QWORD *)this + 4151);
  *((_QWORD *)this + 4151) = 0;
  if (v368)
  {
    if (*v368 == 1)
      WTF::fastFree((unint64_t)v368, v361, v362, v363, v364, v365, v366, v367);
    else
      --*v368;
  }
  *((_QWORD *)this + 4110) = off_1E3590D20;
  v369 = *((_QWORD *)this + 4136);
  *((_QWORD *)this + 4136) = 0;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 32968), v361, v362, v363, v364, v365, v366, v367);
  *((_QWORD *)this + 4110) = off_1E3591150;
  v377 = (_DWORD *)*((_QWORD *)this + 4120);
  *((_QWORD *)this + 4120) = 0;
  if (v377)
  {
    if (*v377 == 1)
      WTF::fastFree((unint64_t)v377, v370, v371, v372, v373, v374, v375, v376);
    else
      --*v377;
  }
  *((_QWORD *)this + 4079) = off_1E3590D20;
  v378 = *v359;
  *v359 = 0;
  if (v378)
    (*(void (**)(uint64_t))(*(_QWORD *)v378 + 8))(v378);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 32720), v370, v371, v372, v373, v374, v375, v376);
  *((_QWORD *)this + 4079) = off_1E3591150;
  v386 = (_DWORD *)*((_QWORD *)this + 4089);
  *((_QWORD *)this + 4089) = 0;
  if (v386)
  {
    if (*v386 == 1)
      WTF::fastFree((unint64_t)v386, v379, v380, v381, v382, v383, v384, v385);
    else
      --*v386;
  }
  *((_QWORD *)this + 4048) = off_1E3590D20;
  v387 = *((_QWORD *)this + 4074);
  *((_QWORD *)this + 4074) = 0;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 32472), v379, v380, v381, v382, v383, v384, v385);
  *((_QWORD *)this + 4048) = off_1E3591150;
  v395 = (_DWORD *)*((_QWORD *)this + 4058);
  *((_QWORD *)this + 4058) = 0;
  if (v395)
  {
    if (*v395 == 1)
      WTF::fastFree((unint64_t)v395, v388, v389, v390, v391, v392, v393, v394);
    else
      --*v395;
  }
  *((_QWORD *)this + 4017) = off_1E3590D20;
  v396 = *((_QWORD *)this + 4043);
  *((_QWORD *)this + 4043) = 0;
  if (v396)
    (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 32224), v388, v389, v390, v391, v392, v393, v394);
  *((_QWORD *)this + 4017) = off_1E3591150;
  v404 = (_DWORD *)*((_QWORD *)this + 4027);
  *((_QWORD *)this + 4027) = 0;
  if (v404)
  {
    if (*v404 == 1)
      WTF::fastFree((unint64_t)v404, v397, v398, v399, v400, v401, v402, v403);
    else
      --*v404;
  }
  *((_QWORD *)this + 3986) = off_1E3590D20;
  v405 = *((_QWORD *)this + 4012);
  *((_QWORD *)this + 4012) = 0;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 31976), v397, v398, v399, v400, v401, v402, v403);
  *((_QWORD *)this + 3986) = off_1E3591150;
  v413 = (_DWORD *)*((_QWORD *)this + 3996);
  *((_QWORD *)this + 3996) = 0;
  if (v413)
  {
    if (*v413 == 1)
      WTF::fastFree((unint64_t)v413, v406, v407, v408, v409, v410, v411, v412);
    else
      --*v413;
  }
  *((_QWORD *)this + 3955) = off_1E3590D20;
  v414 = *((_QWORD *)this + 3981);
  *((_QWORD *)this + 3981) = 0;
  if (v414)
    (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 31728), v406, v407, v408, v409, v410, v411, v412);
  *((_QWORD *)this + 3955) = off_1E3591150;
  v422 = (_DWORD *)*((_QWORD *)this + 3965);
  *((_QWORD *)this + 3965) = 0;
  if (v422)
  {
    if (*v422 == 1)
      WTF::fastFree((unint64_t)v422, v415, v416, v417, v418, v419, v420, v421);
    else
      --*v422;
  }
  *((_QWORD *)this + 3924) = off_1E3590D20;
  v423 = *((_QWORD *)this + 3950);
  *((_QWORD *)this + 3950) = 0;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 31480), v415, v416, v417, v418, v419, v420, v421);
  *((_QWORD *)this + 3924) = off_1E3591150;
  v431 = (_DWORD *)*((_QWORD *)this + 3934);
  *((_QWORD *)this + 3934) = 0;
  if (v431)
  {
    if (*v431 == 1)
      WTF::fastFree((unint64_t)v431, v424, v425, v426, v427, v428, v429, v430);
    else
      --*v431;
  }
  *((_QWORD *)this + 3893) = off_1E3590D20;
  v432 = *((_QWORD *)this + 3919);
  *((_QWORD *)this + 3919) = 0;
  if (v432)
    (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 31232), v424, v425, v426, v427, v428, v429, v430);
  *((_QWORD *)this + 3893) = off_1E3591150;
  v440 = (_DWORD *)*((_QWORD *)this + 3903);
  *((_QWORD *)this + 3903) = 0;
  if (v440)
  {
    if (*v440 == 1)
      WTF::fastFree((unint64_t)v440, v433, v434, v435, v436, v437, v438, v439);
    else
      --*v440;
  }
  *((_QWORD *)this + 3862) = off_1E3590D20;
  v441 = *((_QWORD *)this + 3888);
  *((_QWORD *)this + 3888) = 0;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 30984), v433, v434, v435, v436, v437, v438, v439);
  *((_QWORD *)this + 3862) = off_1E3591150;
  v449 = (_DWORD *)*((_QWORD *)this + 3872);
  *((_QWORD *)this + 3872) = 0;
  if (v449)
  {
    if (*v449 == 1)
      WTF::fastFree((unint64_t)v449, v442, v443, v444, v445, v446, v447, v448);
    else
      --*v449;
  }
  *((_QWORD *)this + 3831) = off_1E3590D20;
  v450 = *((_QWORD *)this + 3857);
  *((_QWORD *)this + 3857) = 0;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 30736), v442, v443, v444, v445, v446, v447, v448);
  *((_QWORD *)this + 3831) = off_1E3591150;
  v458 = (_DWORD *)*((_QWORD *)this + 3841);
  *((_QWORD *)this + 3841) = 0;
  if (v458)
  {
    if (*v458 == 1)
      WTF::fastFree((unint64_t)v458, v451, v452, v453, v454, v455, v456, v457);
    else
      --*v458;
  }
  *((_QWORD *)this + 3800) = off_1E3590D20;
  v459 = *((_QWORD *)this + 3826);
  *((_QWORD *)this + 3826) = 0;
  if (v459)
    (*(void (**)(uint64_t))(*(_QWORD *)v459 + 8))(v459);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 30488), v451, v452, v453, v454, v455, v456, v457);
  *((_QWORD *)this + 3800) = off_1E3591150;
  v467 = (_DWORD *)*((_QWORD *)this + 3810);
  *((_QWORD *)this + 3810) = 0;
  if (v467)
  {
    if (*v467 == 1)
      WTF::fastFree((unint64_t)v467, v460, v461, v462, v463, v464, v465, v466);
    else
      --*v467;
  }
  *((_QWORD *)this + 3769) = off_1E3590D20;
  v468 = *((_QWORD *)this + 3795);
  *((_QWORD *)this + 3795) = 0;
  if (v468)
    (*(void (**)(uint64_t))(*(_QWORD *)v468 + 8))(v468);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 30240), v460, v461, v462, v463, v464, v465, v466);
  *((_QWORD *)this + 3769) = off_1E3591150;
  v476 = (_DWORD *)*((_QWORD *)this + 3779);
  *((_QWORD *)this + 3779) = 0;
  if (v476)
  {
    if (*v476 == 1)
      WTF::fastFree((unint64_t)v476, v469, v470, v471, v472, v473, v474, v475);
    else
      --*v476;
  }
  *((_QWORD *)this + 3738) = off_1E3590D20;
  v477 = *((_QWORD *)this + 3764);
  *((_QWORD *)this + 3764) = 0;
  if (v477)
    (*(void (**)(uint64_t))(*(_QWORD *)v477 + 8))(v477);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 29992), v469, v470, v471, v472, v473, v474, v475);
  *((_QWORD *)this + 3738) = off_1E3591150;
  v485 = (_DWORD *)*((_QWORD *)this + 3748);
  *((_QWORD *)this + 3748) = 0;
  if (v485)
  {
    if (*v485 == 1)
      WTF::fastFree((unint64_t)v485, v478, v479, v480, v481, v482, v483, v484);
    else
      --*v485;
  }
  *((_QWORD *)this + 3707) = off_1E3590D20;
  v486 = *((_QWORD *)this + 3733);
  *((_QWORD *)this + 3733) = 0;
  if (v486)
    (*(void (**)(uint64_t))(*(_QWORD *)v486 + 8))(v486);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 29744), v478, v479, v480, v481, v482, v483, v484);
  *((_QWORD *)this + 3707) = off_1E3591150;
  v494 = (_DWORD *)*((_QWORD *)this + 3717);
  *((_QWORD *)this + 3717) = 0;
  if (v494)
  {
    if (*v494 == 1)
      WTF::fastFree((unint64_t)v494, v487, v488, v489, v490, v491, v492, v493);
    else
      --*v494;
  }
  *((_QWORD *)this + 3676) = off_1E3590D20;
  v495 = *((_QWORD *)this + 3702);
  *((_QWORD *)this + 3702) = 0;
  if (v495)
    (*(void (**)(uint64_t))(*(_QWORD *)v495 + 8))(v495);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 29496), v487, v488, v489, v490, v491, v492, v493);
  *((_QWORD *)this + 3676) = off_1E3591150;
  v503 = (_DWORD *)*((_QWORD *)this + 3686);
  *((_QWORD *)this + 3686) = 0;
  if (v503)
  {
    if (*v503 == 1)
      WTF::fastFree((unint64_t)v503, v496, v497, v498, v499, v500, v501, v502);
    else
      --*v503;
  }
  *((_QWORD *)this + 3645) = off_1E3590D20;
  v504 = *((_QWORD *)this + 3671);
  *((_QWORD *)this + 3671) = 0;
  if (v504)
    (*(void (**)(uint64_t))(*(_QWORD *)v504 + 8))(v504);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 29248), v496, v497, v498, v499, v500, v501, v502);
  *((_QWORD *)this + 3645) = off_1E3591150;
  v512 = (_DWORD *)*((_QWORD *)this + 3655);
  *((_QWORD *)this + 3655) = 0;
  if (v512)
  {
    if (*v512 == 1)
      WTF::fastFree((unint64_t)v512, v505, v506, v507, v508, v509, v510, v511);
    else
      --*v512;
  }
  *((_QWORD *)this + 3614) = off_1E3590D20;
  v513 = *((_QWORD *)this + 3640);
  *((_QWORD *)this + 3640) = 0;
  if (v513)
    (*(void (**)(uint64_t))(*(_QWORD *)v513 + 8))(v513);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 29000), v505, v506, v507, v508, v509, v510, v511);
  *((_QWORD *)this + 3614) = off_1E3591150;
  v521 = (_DWORD *)*((_QWORD *)this + 3624);
  *((_QWORD *)this + 3624) = 0;
  if (v521)
  {
    if (*v521 == 1)
      WTF::fastFree((unint64_t)v521, v514, v515, v516, v517, v518, v519, v520);
    else
      --*v521;
  }
  *((_QWORD *)this + 3583) = off_1E3590D20;
  v522 = *((_QWORD *)this + 3609);
  *((_QWORD *)this + 3609) = 0;
  if (v522)
    (*(void (**)(uint64_t))(*(_QWORD *)v522 + 8))(v522);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 28752), v514, v515, v516, v517, v518, v519, v520);
  *((_QWORD *)this + 3583) = off_1E3591150;
  v530 = (_DWORD *)*((_QWORD *)this + 3593);
  *((_QWORD *)this + 3593) = 0;
  if (v530)
  {
    if (*v530 == 1)
      WTF::fastFree((unint64_t)v530, v523, v524, v525, v526, v527, v528, v529);
    else
      --*v530;
  }
  *((_QWORD *)this + 3552) = off_1E3590D20;
  v531 = *((_QWORD *)this + 3578);
  *((_QWORD *)this + 3578) = 0;
  if (v531)
    (*(void (**)(uint64_t))(*(_QWORD *)v531 + 8))(v531);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 28504), v523, v524, v525, v526, v527, v528, v529);
  *((_QWORD *)this + 3552) = off_1E3591150;
  v539 = (_DWORD *)*((_QWORD *)this + 3562);
  *((_QWORD *)this + 3562) = 0;
  if (v539)
  {
    if (*v539 == 1)
      WTF::fastFree((unint64_t)v539, v532, v533, v534, v535, v536, v537, v538);
    else
      --*v539;
  }
  *((_QWORD *)this + 3521) = off_1E3590D20;
  v540 = *((_QWORD *)this + 3547);
  *((_QWORD *)this + 3547) = 0;
  if (v540)
    (*(void (**)(uint64_t))(*(_QWORD *)v540 + 8))(v540);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 28256), v532, v533, v534, v535, v536, v537, v538);
  *((_QWORD *)this + 3521) = off_1E3591150;
  v548 = (_DWORD *)*((_QWORD *)this + 3531);
  *((_QWORD *)this + 3531) = 0;
  if (v548)
  {
    if (*v548 == 1)
      WTF::fastFree((unint64_t)v548, v541, v542, v543, v544, v545, v546, v547);
    else
      --*v548;
  }
  *((_QWORD *)this + 3490) = off_1E3590D20;
  v549 = *((_QWORD *)this + 3516);
  *((_QWORD *)this + 3516) = 0;
  if (v549)
    (*(void (**)(uint64_t))(*(_QWORD *)v549 + 8))(v549);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 28008), v541, v542, v543, v544, v545, v546, v547);
  *((_QWORD *)this + 3490) = off_1E3591150;
  v557 = (_DWORD *)*((_QWORD *)this + 3500);
  *((_QWORD *)this + 3500) = 0;
  if (v557)
  {
    if (*v557 == 1)
      WTF::fastFree((unint64_t)v557, v550, v551, v552, v553, v554, v555, v556);
    else
      --*v557;
  }
  *((_QWORD *)this + 3459) = off_1E3590D20;
  v558 = *((_QWORD *)this + 3485);
  *((_QWORD *)this + 3485) = 0;
  if (v558)
    (*(void (**)(uint64_t))(*(_QWORD *)v558 + 8))(v558);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 27760), v550, v551, v552, v553, v554, v555, v556);
  *((_QWORD *)this + 3459) = off_1E3591150;
  v566 = (_DWORD *)*((_QWORD *)this + 3469);
  *((_QWORD *)this + 3469) = 0;
  if (v566)
  {
    if (*v566 == 1)
      WTF::fastFree((unint64_t)v566, v559, v560, v561, v562, v563, v564, v565);
    else
      --*v566;
  }
  *((_QWORD *)this + 3428) = off_1E3590D20;
  v567 = *((_QWORD *)this + 3454);
  *((_QWORD *)this + 3454) = 0;
  if (v567)
    (*(void (**)(uint64_t))(*(_QWORD *)v567 + 8))(v567);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 27512), v559, v560, v561, v562, v563, v564, v565);
  *((_QWORD *)this + 3428) = off_1E3591150;
  v575 = (_DWORD *)*((_QWORD *)this + 3438);
  *((_QWORD *)this + 3438) = 0;
  if (v575)
  {
    if (*v575 == 1)
      WTF::fastFree((unint64_t)v575, v568, v569, v570, v571, v572, v573, v574);
    else
      --*v575;
  }
  *((_QWORD *)this + 3397) = off_1E3590D20;
  v576 = *((_QWORD *)this + 3423);
  *((_QWORD *)this + 3423) = 0;
  if (v576)
    (*(void (**)(uint64_t))(*(_QWORD *)v576 + 8))(v576);
  JSC::BlockDirectory::~BlockDirectory((JSC::Heap *)((char *)this + 27264), v568, v569, v570, v571, v572, v573, v574);
  *((_QWORD *)this + 3397) = off_1E3591150;
  v584 = (_DWORD *)*((_QWORD *)this + 3407);
  *((_QWORD *)this + 3407) = 0;
  if (v584)
  {
    if (*v584 == 1)
      WTF::fastFree((unint64_t)v584, v577, v578, v579, v580, v581, v582, v583);
    else
      --*v584;
  }
  JSC::CompleteSubspace::~CompleteSubspace((JSC::Heap *)((char *)this + 23032), v577, v578, v579, v580, v581, v582, v583);
  JSC::CompleteSubspace::~CompleteSubspace((JSC::Heap *)((char *)this + 18888), v585, v586, v587, v588, v589, v590, v591);
  JSC::CompleteSubspace::~CompleteSubspace((JSC::Heap *)((char *)this + 14744), v592, v593, v594, v595, v596, v597, v598);
  JSC::CompleteSubspace::~CompleteSubspace((JSC::Heap *)((char *)this + 10600), v599, v600, v601, v602, v603, v604, v605);
  JSC::CompleteSubspace::~CompleteSubspace((JSC::Heap *)((char *)this + 6456), v606, v607, v608, v609, v610, v611, v612);
  JSC::CompleteSubspace::~CompleteSubspace((JSC::Heap *)((char *)this + 2312), v613, v614, v615, v616, v617, v618, v619);
  v627 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v627)
    WTF::fastFree(v627, v620, v621, v622, v623, v624, v625, v626);
  v628 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v628)
    WTF::fastFree(v628, v620, v621, v622, v623, v624, v625, v626);
  v629 = (unsigned int *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v629)
  {
    do
    {
      v630 = __ldaxr(v629);
      v631 = v630 - 1;
    }
    while (__stlxr(v631, v629));
    if (!v631)
    {
      atomic_store(1u, v629);
      WTF::Thread::~Thread((WTF::Thread *)v629, v620, v621, v622, v623, v624, v625, v626);
      WTF::fastFree(v849, v850, v851, v852, v853, v854, v855, v856);
    }
  }
  v632 = (unsigned int *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v632)
  {
    v633 = v632 + 2;
    do
    {
      v634 = __ldaxr(v633);
      v635 = v634 - 1;
    }
    while (__stlxr(v635, v633));
    if (!v635)
    {
      atomic_store(1u, v632 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v632 + 8))(v632);
    }
  }
  v636 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v636)
  {
    do
    {
      v637 = __ldaxr((unsigned int *)v636);
      v638 = v637 - 1;
    }
    while (__stlxr(v638, (unsigned int *)v636));
    if (!v638)
    {
      atomic_store(1u, (unsigned int *)v636);
      v869 = *(_QWORD *)(v636 + 8);
      if (v869)
      {
        *(_QWORD *)(v636 + 8) = 0;
        *(_DWORD *)(v636 + 16) = 0;
        WTF::fastFree(v869, v620, v621, v622, v623, v624, v625, v626);
      }
      WTF::fastFree(v636, v620, v621, v622, v623, v624, v625, v626);
    }
  }
  v639 = (unsigned int *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v639)
  {
    do
    {
      v640 = __ldaxr(v639);
      v641 = v640 - 1;
    }
    while (__stlxr(v641, v639));
    if (!v641)
    {
      atomic_store(1u, v639);
      WTF::fastFree((unint64_t)v639, v620, v621, v622, v623, v624, v625, v626);
    }
  }
  v642 = (unsigned int *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v642)
  {
    v643 = v642 + 2;
    do
    {
      v644 = __ldaxr(v643);
      v645 = v644 - 1;
    }
    while (__stlxr(v645, v643));
    if (!v645)
    {
      atomic_store(1u, v642 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v642 + 8))(v642);
    }
  }
  v646 = *((_QWORD *)this + 117);
  v647 = *((_QWORD *)this + 118);
  v648 = *((_QWORD *)this + 119);
  v649 = v648 + 16 * v647;
  if (v646 > v647)
  {
    if (v647)
    {
      do
      {
        v870 = *(unsigned int **)(v648 + 8);
        *(_QWORD *)(v648 + 8) = 0;
        if (v870)
        {
          v871 = v870 + 2;
          do
          {
            v872 = __ldaxr(v871);
            v873 = v872 - 1;
          }
          while (__stlxr(v873, v871));
          if (!v873)
          {
            atomic_store(1u, v870 + 2);
            v874 = v648;
            (*(void (**)(unsigned int *))(*(_QWORD *)v870 + 8))(v870);
            v648 = v874;
          }
        }
        v648 += 16;
      }
      while (v648 != v649);
      v648 = *((_QWORD *)this + 119);
      v646 = *((_QWORD *)this + 117);
    }
    v857 = *((unsigned int *)this + 240);
    if (v646 != v857)
    {
      v858 = v648 + 16 * v857;
      v859 = v648 + 16 * v646;
      do
      {
        v860 = *(unsigned int **)(v859 + 8);
        *(_QWORD *)(v859 + 8) = 0;
        if (v860)
        {
          v861 = v860 + 2;
          do
          {
            v862 = __ldaxr(v861);
            v863 = v862 - 1;
          }
          while (__stlxr(v863, v861));
          if (!v863)
          {
            atomic_store(1u, v860 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v860 + 8))(v860);
          }
        }
        v859 += 16;
      }
      while (v859 != v858);
    }
  }
  else
  {
    if (v646 == v647)
      goto LABEL_443;
    v809 = v648 + 16 * v646;
    do
    {
      v810 = *(unsigned int **)(v809 + 8);
      *(_QWORD *)(v809 + 8) = 0;
      if (v810)
      {
        v811 = v810 + 2;
        do
        {
          v812 = __ldaxr(v811);
          v813 = v812 - 1;
        }
        while (__stlxr(v813, v811));
        if (!v813)
        {
          atomic_store(1u, v810 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v810 + 8))(v810);
        }
      }
      v809 += 16;
    }
    while (v809 != v649);
  }
  v648 = *((_QWORD *)this + 119);
LABEL_443:
  if (v648)
  {
    *((_QWORD *)this + 119) = 0;
    *((_DWORD *)this + 240) = 0;
    WTF::fastFree(v648, v620, v621, v622, v623, v624, v625, v626);
  }
  v650 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v650)
    (*(void (**)(uint64_t))(*(_QWORD *)v650 + 8))(v650);
  v651 = (unsigned int *)*((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v651)
  {
    v652 = v651 + 2;
    do
    {
      v653 = __ldaxr(v652);
      v654 = v653 - 1;
    }
    while (__stlxr(v654, v652));
    if (!v654)
    {
      atomic_store(1u, v651 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v651 + 8))(v651);
    }
  }
  WTF::ParallelHelperClient::~ParallelHelperClient((unsigned int **)this + 106, v620, v621, v622, v623, v624, v625, v626);
  v662 = *((unsigned int *)this + 193);
  if ((_DWORD)v662)
  {
    v663 = (unint64_t *)*((_QWORD *)this + 95);
    v664 = 8 * v662;
    do
    {
      v665 = *v663;
      *v663 = 0;
      if (v665)
        WTF::fastFree(v665, v655, v656, v657, v658, v659, v660, v661);
      ++v663;
      v664 -= 8;
    }
    while (v664);
  }
  v666 = (JSC::Heap *)*((_QWORD *)this + 95);
  if ((JSC::Heap *)((char *)this + 776) != v666 && v666 != 0)
  {
    *((_QWORD *)this + 95) = 0;
    *((_DWORD *)this + 192) = 0;
    WTF::fastFree((unint64_t)v666, v655, v656, v657, v658, v659, v660, v661);
  }
  v668 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v668)
  {
    v669 = *(uint64_t **)v668;
    if (*(_QWORD *)v668)
    {
      v670 = *v669;
      v671 = (_QWORD *)v669[1];
      if (*v669)
      {
        *(_QWORD *)(v670 + 8) = v671;
        v671 = (_QWORD *)v669[1];
      }
      else
      {
        *(_QWORD *)v668 = v671;
      }
      if (!v671)
        v671 = (_QWORD *)(v668 + 8);
      *v671 = v670;
    }
    WTF::fastFree((unint64_t)v669, v655, v656, v657, v658, v659, v660, v661);
    --*(_QWORD *)(v668 + 24);
    WTF::fastFree(v668, v672, v673, v674, v675, v676, v677, v678);
  }
  v679 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v679)
  {
    v680 = *(uint64_t **)v679;
    if (*(_QWORD *)v679)
    {
      v681 = *v680;
      v682 = (_QWORD *)v680[1];
      if (*v680)
      {
        *(_QWORD *)(v681 + 8) = v682;
        v682 = (_QWORD *)v680[1];
      }
      else
      {
        *(_QWORD *)v679 = v682;
      }
      if (!v682)
        v682 = (_QWORD *)(v679 + 8);
      *v682 = v681;
    }
    WTF::fastFree((unint64_t)v680, v655, v656, v657, v658, v659, v660, v661);
    --*(_QWORD *)(v679 + 24);
    WTF::fastFree(v679, v683, v684, v685, v686, v687, v688, v689);
  }
  v690 = *((_QWORD *)this + 91);
  if (v690)
    WTF::fastFree(v690 - 16, v655, v656, v657, v658, v659, v660, v661);
  v691 = *((unsigned int *)this + 179);
  if ((_DWORD)v691)
  {
    v866 = (const void **)*((_QWORD *)this + 88);
    v867 = 8 * v691;
    do
    {
      v868 = *v866;
      *v866 = 0;
      if (v868)
        CFRelease(v868);
      ++v866;
      v867 -= 8;
    }
    while (v867);
  }
  v692 = *((_QWORD *)this + 88);
  if (v692)
  {
    *((_QWORD *)this + 88) = 0;
    *((_DWORD *)this + 178) = 0;
    WTF::fastFree(v692, v655, v656, v657, v658, v659, v660, v661);
  }
  v693 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v693)
  {
    v694 = *(_QWORD *)(v693 + 24);
    *(_QWORD *)(v693 + 24) = 0;
    if (v694)
    {
      v695 = v694 - 16;
      v696 = *(_QWORD *)(v694 - 8);
      if (v696)
      {
        v697 = 112 * v696;
        v698 = v694 - 112;
        do
        {
          JSC::HeapVerifier::GCCycle::~GCCycle((JSC::HeapVerifier::GCCycle *)(v698 + v697), v655, v656, v657, v658, v659, v660, v661);
          v697 -= 112;
        }
        while (v697);
      }
      WTF::fastFree(v695, v655, v656, v657, v658, v659, v660, v661);
    }
    WTF::fastFree(v693, v655, v656, v657, v658, v659, v660, v661);
  }
  v699 = *((_QWORD *)this + 85);
  if (v699)
  {
    *((_QWORD *)this + 85) = 0;
    *((_DWORD *)this + 172) = 0;
    WTF::fastFree(v699, v655, v656, v657, v658, v659, v660, v661);
  }
  v700 = *((_QWORD *)this + 83);
  if (v700)
  {
    *((_QWORD *)this + 83) = 0;
    *((_DWORD *)this + 168) = 0;
    WTF::fastFree(v700, v655, v656, v657, v658, v659, v660, v661);
  }
  v701 = (unsigned int *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v701)
  {
    v702 = v701 + 2;
    do
    {
      v703 = __ldaxr(v702);
      v704 = v703 - 1;
    }
    while (__stlxr(v704, v702));
    if (!v704)
    {
      atomic_store(1u, v701 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v701 + 8))(v701);
    }
  }
  v705 = (unsigned int *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v705)
  {
    v706 = v705 + 2;
    do
    {
      v707 = __ldaxr(v706);
      v708 = v707 - 1;
    }
    while (__stlxr(v708, v706));
    if (!v708)
    {
      atomic_store(1u, v705 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v705 + 8))(v705);
    }
  }
  v709 = (unsigned int *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v709)
  {
    v710 = v709 + 2;
    do
    {
      v711 = __ldaxr(v710);
      v712 = v711 - 1;
    }
    while (__stlxr(v712, v710));
    if (!v712)
    {
      atomic_store(1u, v709 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v709 + 8))(v709);
    }
  }
  v713 = (unsigned int *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v713)
  {
    v714 = v713 + 2;
    do
    {
      v715 = __ldaxr(v714);
      v716 = v715 - 1;
    }
    while (__stlxr(v716, v714));
    if (!v716)
    {
      atomic_store(1u, v713 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v713 + 8))(v713);
    }
  }
  v717 = *((unsigned int *)this + 157);
  if ((_DWORD)v717)
  {
    v814 = (WTF::StringImpl **)*((_QWORD *)this + 77);
    v815 = 8 * v717;
    do
    {
      v816 = *v814;
      *v814 = 0;
      if (v816)
      {
        if (*(_DWORD *)v816 == 2)
        {
          WTF::StringImpl::~StringImpl(v816, (WTF::AtomStringImpl *)v655, v656, v657, v658, v659, v660, v661);
          WTF::fastFree(v817, v818, v819, v820, v821, v822, v823, v824);
        }
        else
        {
          *(_DWORD *)v816 -= 2;
        }
      }
      ++v814;
      v815 -= 8;
    }
    while (v815);
  }
  v718 = *((_QWORD *)this + 77);
  if (v718)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v718, v655, v656, v657, v658, v659, v660, v661);
  }
  v719 = *((_QWORD *)this + 74);
  if (v719)
  {
    *((_QWORD *)this + 74) = 0;
    *((_DWORD *)this + 150) = 0;
    WTF::fastFree(v719, v655, v656, v657, v658, v659, v660, v661);
  }
  v720 = (JSC::JITStubRoutineSet *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v720)
  {
    JSC::JITStubRoutineSet::~JITStubRoutineSet(v720, v655, v656, v657, v658, v659, v660, v661);
    WTF::fastFree(v721, v722, v723, v724, v725, v726, v727, v728);
  }
  v729 = (_QWORD *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v729)
  {
    v730 = v729[1];
    if (v730)
      WTF::fastFree(v730 - 16, v655, v656, v657, v658, v659, v660, v661);
    if (*v729)
      WTF::fastFree(*v729 - 16, v655, v656, v657, v658, v659, v660, v661);
    WTF::fastFree((unint64_t)v729, v655, v656, v657, v658, v659, v660, v661);
  }
  for (jj = (uint64_t *)*((_QWORD *)this + 61); jj; jj = (uint64_t *)*((_QWORD *)this + 61))
  {
    v732 = *jj;
    v733 = (_QWORD *)jj[1];
    if (*jj)
    {
      *(_QWORD *)(v732 + 8) = v733;
      v733 = (_QWORD *)jj[1];
    }
    else
    {
      *((_QWORD *)this + 61) = v733;
    }
    if (!v733)
      v733 = (_QWORD *)((char *)this + 496);
    *v733 = v732;
    WTF::fastAlignedFree((unint64_t)jj, v655, v656, v657, v658, v659, v660, v661);
  }
  v734 = *((_QWORD *)this + 58);
  if (v734)
  {
    *((_QWORD *)this + 58) = 0;
    *((_DWORD *)this + 118) = 0;
    WTF::fastFree(v734, v655, v656, v657, v658, v659, v660, v661);
  }
  v735 = *((unsigned int *)this + 115);
  if ((_DWORD)v735)
  {
    v736 = (JSC::SlotVisitor **)*((_QWORD *)this + 56);
    v737 = 8 * v735;
    do
    {
      v738 = *v736;
      *v736 = 0;
      if (v738)
      {
        JSC::SlotVisitor::~SlotVisitor(v738, v655, v656, v657, v658, v659, v660, v661);
        WTF::fastFree(v739, v740, v741, v742, v743, v744, v745, v746);
      }
      ++v736;
      v737 -= 8;
    }
    while (v737);
  }
  v747 = *((_QWORD *)this + 56);
  if (v747)
  {
    *((_QWORD *)this + 56) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v747, v655, v656, v657, v658, v659, v660, v661);
  }
  v748 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v748)
    (*(void (**)(uint64_t))(*(_QWORD *)v748 + 8))(v748);
  v749 = (JSC::MarkingConstraintSet *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v749)
  {
    JSC::MarkingConstraintSet::~MarkingConstraintSet(v749, v655, v656, v657, v658, v659, v660, v661);
    WTF::fastFree(v750, v751, v752, v753, v754, v755, v756, v757);
  }
  v758 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v758)
  {
    v759 = *(uint64_t **)v758;
    if (*(_QWORD *)v758)
    {
      v760 = *v759;
      v761 = (_QWORD *)v759[1];
      if (*v759)
      {
        *(_QWORD *)(v760 + 8) = v761;
        v761 = (_QWORD *)v759[1];
      }
      else
      {
        *(_QWORD *)v758 = v761;
      }
      if (!v761)
        v761 = (_QWORD *)(v758 + 8);
      *v761 = v760;
    }
    WTF::fastFree((unint64_t)v759, v655, v656, v657, v658, v659, v660, v661);
    --*(_QWORD *)(v758 + 24);
    WTF::fastFree(v758, v762, v763, v764, v765, v766, v767, v768);
  }
  v769 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v769)
  {
    v770 = *(uint64_t **)v769;
    if (*(_QWORD *)v769)
    {
      v771 = *v770;
      v772 = (_QWORD *)v770[1];
      if (*v770)
      {
        *(_QWORD *)(v771 + 8) = v772;
        v772 = (_QWORD *)v770[1];
      }
      else
      {
        *(_QWORD *)v769 = v772;
      }
      if (!v772)
        v772 = (_QWORD *)(v769 + 8);
      *v772 = v771;
    }
    WTF::fastFree((unint64_t)v770, v655, v656, v657, v658, v659, v660, v661);
    --*(_QWORD *)(v769 + 24);
    WTF::fastFree(v769, v773, v774, v775, v776, v777, v778, v779);
  }
  v780 = (JSC::SlotVisitor *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v780)
  {
    JSC::SlotVisitor::~SlotVisitor(v780, v655, v656, v657, v658, v659, v660, v661);
    WTF::fastFree(v781, v782, v783, v784, v785, v786, v787, v788);
  }
  v789 = (JSC::SlotVisitor *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v789)
  {
    JSC::SlotVisitor::~SlotVisitor(v789, v655, v656, v657, v658, v659, v660, v661);
    WTF::fastFree(v790, v791, v792, v793, v794, v795, v796, v797);
  }
  v798 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v798)
  {
    v799 = *(std::__shared_weak_count **)(v798 + 8);
    if (v799)
    {
      p_shared_owners = (unint64_t *)&v799->__shared_owners_;
      do
        v801 = __ldaxr(p_shared_owners);
      while (__stlxr(v801 - 1, p_shared_owners));
      if (!v801)
      {
        ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
        std::__shared_weak_count::__release_weak(v799);
      }
    }
    WTF::fastFree(v798, v655, v656, v657, v658, v659, v660, v661);
  }
  v802 = *((_QWORD *)this + 46);
  if (v802)
    WTF::fastFree(v802 - 16, v655, v656, v657, v658, v659, v660, v661);
  v803 = *((_QWORD *)this + 45);
  if (v803)
    WTF::fastFree(v803 - 16, v655, v656, v657, v658, v659, v660, v661);
  v804 = *((_QWORD *)this + 40);
  if (v804)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v804, v655, v656, v657, v658, v659, v660, v661);
  }
  v805 = *((_QWORD *)this + 33);
  if (v805)
    WTF::fastFree(v805 - 16, v655, v656, v657, v658, v659, v660, v661);
  v806 = *((_QWORD *)this + 23);
  if (v806)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v806, v655, v656, v657, v658, v659, v660, v661);
  }
  v807 = (_QWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v807)
  {
    if (*v807)
      WTF::fastFree(*v807 - 16, v655, v656, v657, v658, v659, v660, v661);
    WTF::fastFree((unint64_t)v807, v655, v656, v657, v658, v659, v660, v661);
  }
  v808 = *((_QWORD *)this + 20);
  if (v808)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v808, v655, v656, v657, v658, v659, v660, v661);
  }
  if (*(_QWORD *)this)
    WTF::fastFree(*(_QWORD *)this - 16, v655, v656, v657, v658, v659, v660, v661);
}

_QWORD **std::unique_ptr<JSC::Heap::ScriptExecutableSpaceAndSets>::~unique_ptr[abi:sn180100](_QWORD **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v9 + 53), a2, a3, a4, a5, a6, a7, a8);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v9 + 42), v10, v11, v12, v13, v14, v15, v16);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v9 + 31), v17, v18, v19, v20, v21, v22, v23);
    *v9 = off_1E3590D20;
    v31 = v9[26];
    v9[26] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    JSC::BlockDirectory::~BlockDirectory((JSC::BlockDirectory *)(v9 + 11), v24, v25, v26, v27, v28, v29, v30);
    *v9 = off_1E3591150;
    v39 = (_DWORD *)v9[10];
    v9[10] = 0;
    if (v39)
    {
      if (*v39 == 1)
        WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
      else
        --*v39;
    }
    WTF::fastFree((unint64_t)v9, v32, v33, v34, v35, v36, v37, v38);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  const void **v12;
  uint64_t v13;
  const void *v14;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(const void ***)a1;
    v13 = 8 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        CFRelease(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::Heap::dumpHeapStatisticsAtVMDestruction(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int isLive;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  _QWORD *v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  __int16 v51;
  double v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;

  if (this)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(unsigned int *)(this + 48);
      if ((_DWORD)v9)
        break;
LABEL_54:
      this = *(_QWORD *)(this + 80);
      if (!this)
        return this;
    }
    v10 = 0;
    v46 = (unint64_t)(v9 + 31) >> 5;
    v47 = *(_QWORD *)(this + 32);
    v49 = this;
    while (1)
    {
      v11 = *(_DWORD *)(v47 + 40 * v10);
      v48 = v10;
      if (v11)
        break;
LABEL_53:
      v10 = v48 + 1;
      if (v48 + 1 == v46)
        goto LABEL_54;
    }
    v12 = 32 * v10;
    while ((v11 & 1) == 0)
    {
LABEL_52:
      ++v12;
      v45 = v11 > 1;
      v11 >>= 1;
      if (!v45)
        goto LABEL_53;
    }
    if (v12 >= *(unsigned int *)(this + 12))
    {
      __break(0xC471u);
      return this;
    }
    v13 = *(unsigned int **)(*(_QWORD *)this + 8 * v12);
    v55 = 0;
    v14 = v13[1];
    if (v14 < 0x400)
    {
      v15 = 0;
      while (1)
      {
        v16 = *((_QWORD *)v13 + 11) + 16 * v14;
        if ((v16 & 8) != 0)
        {
          if ((*(_BYTE *)(v16 - 79) & 1) != 0)
            goto LABEL_20;
          isLive = *(_BYTE *)(v16 - 80) & 1;
        }
        else
        {
          v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFC000);
          if (*(_BYTE *)(v17 + 10))
          {
            v19 = *(_QWORD *)(v17 + 24);
            v22 = *(_QWORD **)(v19 + 104);
            v21 = (_QWORD *)(v19 + 104);
            v20 = v22;
            if (v22 != v21)
            {
              v23 = 0;
              do
              {
                v24 = (_QWORD *)*v20;
                v23 |= JSC::FreeList::contains(v20 + 3, v16);
                v20 = v24;
              }
              while (v24 != v21);
              isLive = v23 == 0;
              goto LABEL_21;
            }
LABEL_20:
            isLive = 1;
            goto LABEL_21;
          }
          isLive = JSC::MarkedBlock::Handle::isLive(v17, v16, a3, a4, a5, a6, a7, a8);
        }
LABEL_21:
        v15 += isLive;
        v25 = *v13;
        v14 += v25;
        if (v14 >= 0x400)
        {
          v55 = v15;
          v26 = (double)v15;
          goto LABEL_24;
        }
      }
    }
    v25 = *v13;
    v26 = 0.0;
LABEL_24:
    v56 = 16 * v25;
    v53 = 0x3ED0uLL / (16 * v25);
    v54 = v8;
    v52 = v26 / (double)v53 * 100.0;
    v51 = *((_WORD *)v13 + 4);
    v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 3) + 72) + 80);
    if (v27)
      v28 = (const char *)(v27 + 16);
    else
      v28 = 0;
    v50 = v28;
    WTF::dataLog<char [2],unsigned int,char [3],unsigned long,char [3],unsigned int,char [4],unsigned int,char [2],double,char [3],JSC::CellAttributes,char [2],char const*,char [2]>(&v54, &v56, &v55, &v53, &v52, (JSC::CellAttributes *)&v51, &v50);
    v29 = v13[1];
    if (v29 > 0x3FF)
    {
LABEL_51:
      ++v8;
      this = v49;
      goto LABEL_52;
    }
    if (*((_BYTE *)v13 + 9))
    {
      do
      {
        v30 = *((_QWORD *)v13 + 11) + 16 * v29;
        if ((v30 & 8) == 0)
        {
          v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFC000);
          if (*(_BYTE *)(v31 + 10))
          {
            v32 = *(_QWORD *)(v31 + 24);
            v35 = *(_QWORD **)(v32 + 104);
            v34 = (_QWORD *)(v32 + 104);
            v33 = v35;
            if (v35 != v34)
            {
              do
              {
                v36 = (_QWORD *)*v33;
                JSC::FreeList::contains(v33 + 3, v30);
                v33 = v36;
              }
              while (v36 != v34);
            }
          }
          else
          {
            JSC::MarkedBlock::Handle::isLive(v31, v30, a3, a4, a5, a6, a7, a8);
          }
        }
        v29 += *v13;
      }
      while (v29 < 0x400);
      goto LABEL_51;
    }
    while (1)
    {
      v37 = *((_QWORD *)v13 + 11) + 16 * v29;
      if ((v37 & 8) != 0)
        break;
      v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFC000);
      if (*(_BYTE *)(v38 + 10))
      {
        v39 = *(_QWORD *)(v38 + 24);
        v42 = *(_QWORD **)(v39 + 104);
        v41 = (_QWORD *)(v39 + 104);
        v40 = v42;
        if (v42 != v41)
        {
          v43 = 0;
          do
          {
            v44 = (_QWORD *)*v40;
            v43 |= JSC::FreeList::contains(v40 + 3, v37);
            v40 = v44;
          }
          while (v44 != v41);
          if ((_BYTE)v43)
            goto LABEL_50;
        }
        goto LABEL_47;
      }
      if ((JSC::MarkedBlock::Handle::isLive(v38, v37, a3, a4, a5, a6, a7, a8) & 1) != 0)
        goto LABEL_47;
LABEL_50:
      v29 += *v13;
      if (v29 >= 0x400)
        goto LABEL_51;
    }
    if ((*(_BYTE *)(v37 - 79) & 1) == 0 && (*(_BYTE *)(v37 - 80) & 1) == 0)
      goto LABEL_50;
LABEL_47:
    if (*(unsigned __int8 *)(v37 + 5) < 0x17u)
    {
      WTF::dataLog<char [5],JSC::JSCell,char [2]>((_DWORD *)v37);
    }
    else
    {
      v56 = v37;
      WTF::dataLog<char [5],JSC::JSValue,char [2]>((JSC::JSValue *)&v56);
    }
    goto LABEL_50;
  }
  return this;
}

void JSC::Heap::lastChanceToFinalize(JSC::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  unsigned __int8 *v10;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  JSC::PreciseAllocation **v38;
  uint64_t v39;
  JSC::PreciseAllocation *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  char v55;
  _QWORD *v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::MonotonicTime *v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v70;
  int v71;
  unsigned int *v72;
  unsigned __int8 *v73;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  WTF::AtomStringImpl *v79;
  char v80;
  char v81;
  JSC::VM *v82;
  unsigned int v83;
  int v84;
  unsigned __int8 *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  char *v98;
  unsigned int v99;
  _QWORD v100[3];
  double v101;
  double *v102;
  char **v103;

  v9 = 0.0;
  if ((_BYTE)word_1ECF4C5CC)
  {
    v9 = WTF::MonotonicTime::now(this);
    v101 = *(double *)&this;
    WTF::dataLog<char [25],WTF::RawPointer,char [2]>("[GC<", (const void **)&v101, ">: shutdown ");
  }
  *((_BYTE *)this + 562) = 1;
  if (*((_QWORD *)this + 11297))
  {
    __break(0xC471u);
    JUMPOUT(0x1985A9370);
  }
  if (*((_BYTE *)this + 10))
  {
    __break(0xC471u);
    JUMPOUT(0x1985A9390);
  }
  if (*((_QWORD *)this + 131))
  {
    v85 = (unsigned __int8 *)this + 1126;
    if (__ldaxr((unsigned __int8 *)this + 1126))
    {
      __clrex();
    }
    else if (!__stxr(1u, v85))
    {
LABEL_147:
      *((_BYTE *)this + 1007) = 1;
      WTF::Condition::notifyOne((JSC::Heap *)((char *)this + 1127), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v93 = __ldxr(v85);
      if (v93 == 1)
      {
        if (!__stlxr(0, v85))
          goto LABEL_156;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 1126, 0, v87, v88, v89, v90, v91, v92);
LABEL_156:
      WTF::Thread::waitForCompletion(*((WTF::Thread **)this + 131));
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 1126);
    goto LABEL_147;
  }
LABEL_6:
  if ((_BYTE)word_1ECF4C5CC)
  {
    WTF::dataLog<char [16]>("1");
    v84 = word_1ECF4C5CC;
    *((_BYTE *)this + 561) = 0;
    if (v84)
      WTF::dataLog<char [16]>("2");
  }
  else
  {
    *((_BYTE *)this + 561) = 0;
  }
  v10 = (unsigned __int8 *)(*((_QWORD *)this + 128) + 4);
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_11;
  }
  if (__stxr(1u, v10))
    goto LABEL_10;
LABEL_11:
  v12 = *((_QWORD *)this + 123);
  v13 = *((_QWORD *)this + 124);
  if (v12 > v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1985A93D8);
  }
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_17:
  if (v12 >= v13)
  {
LABEL_18:
    if ((_BYTE)word_1ECF4C5CC)
      WTF::dataLog<char [16]>("3");
    goto LABEL_20;
  }
  if ((_BYTE)word_1ECF4C5CC)
    WTF::dataLog<char [16]>("...]\n");
  v72 = (unsigned int *)((char *)this + 904);
  while (1)
  {
    do
    {
      v73 = (unsigned __int8 *)(*((_QWORD *)this + 128) + 4);
      if (__ldaxr(v73))
      {
        __clrex();
LABEL_105:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v73);
        goto LABEL_106;
      }
      if (__stxr(1u, v73))
        goto LABEL_105;
LABEL_106:
      v75 = *((_QWORD *)this + 123);
      v76 = *((_QWORD *)this + 124);
      if (v75 > v76)
        goto LABEL_163;
      if (v75 != v76)
      {
        do
          v77 = __ldaxr(v72);
        while (__stlxr(v77 | 0x10, v72));
      }
      v78 = __ldxr(v73);
      if (v78 != 1)
      {
        __clrex();
LABEL_113:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v73, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_114;
      }
      if (__stlxr(0, v73))
        goto LABEL_113;
LABEL_114:
      v79 = (WTF::AtomStringImpl *)atomic_load(v72);
      if ((v79 & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985A9308);
      }
      if ((v79 & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985A9328);
      }
      v80 = JSC::Heap::handleNeedFinalize(this, v79, a3, a4, a5, a6, a7, a8);
      v81 = v80;
      if ((v79 & 1) != 0 && (v80 & 1) == 0)
        JSC::Heap::collectInMutatorThread(this);
    }
    while ((v81 & 1) != 0);
    *((_BYTE *)this + 1005) = 1;
    do
      v82 = (JSC::VM *)atomic_load((unsigned int *)this + 226);
    while ((JSC::Heap::relinquishConn(this, v82, a3, a4, a5, a6, a7, a8) & 1) != 0);
    if (v75 == v76)
      break;
    v98 = (char *)this + 904;
    v99 = v79 | 0x10;
    v95 = 0x7FF0000000000000;
    v96 = 0;
    v101 = COERCE_DOUBLE(WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction);
    v102 = &v101;
    v103 = &v98;
    v100[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#2}>::implFunction;
    v100[1] = v100;
    v100[2] = &v97;
    WTF::ParkingLot::parkConditionallyImpl((uint64_t)this + 904, (uint64_t)&v101, (uint64_t)v100, (WTF::TimeWithDynamicClockType *)&v95);
  }
  do
    v83 = __ldaxr(v72);
  while (__stlxr(v83 & 0xFFFFFFEF, v72));
  if ((_BYTE)word_1ECF4C5CC)
  {
    v101 = *(double *)&this;
    WTF::dataLog<char [25],WTF::RawPointer,char [2]>("[GC<", (const void **)&v101, ">: shutdown ");
    goto LABEL_18;
  }
LABEL_20:
  if (*((_QWORD *)this + 117) != *((_QWORD *)this + 118))
  {
    __break(0xC471u);
    JUMPOUT(0x1985A93F8);
  }
  if (*((_QWORD *)this + 123) != *((_QWORD *)this + 124))
  {
    __break(0xC471u);
    JUMPOUT(0x1985A9428);
  }
  v15 = (unsigned __int8 *)(*((_QWORD *)this + 128) + 4);
  v101 = *(double *)&v15;
  LOBYTE(v102) = 1;
  if (__ldaxr(v15))
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stxr(1u, v15))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
  v17 = *((_QWORD *)this + 130);
  if (*(_BYTE *)(v17 + 41))
  {
    if (!*(_BYTE *)(v17 + 43))
    {
      *(_BYTE *)(v17 + 41) = 0;
      goto LABEL_28;
    }
    *((_BYTE *)this + 1004) = 1;
    WTF::AutomaticThreadCondition::notifyOne(*((_QWORD *)this + 129), (uint64_t)&v101, a3, a4, a5, a6, a7, a8);
    v18 = 0;
  }
  else
  {
LABEL_28:
    v18 = 1;
    *((_BYTE *)this + 1004) = 1;
  }
  if ((_BYTE)v102)
  {
    v19 = *(unsigned __int8 **)&v101;
    v20 = __ldxr(*(unsigned __int8 **)&v101);
    if (v20 == 1)
    {
      if (!__stlxr(0, *(unsigned __int8 **)&v101))
        goto LABEL_35;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_35:
  if ((_BYTE)word_1ECF4C5CC)
    WTF::dataLog<char [16]>("4");
  if ((v18 & 1) == 0)
  {
    v67 = *((_QWORD *)this + 130);
    v68 = (unsigned __int8 *)(*(_QWORD *)(v67 + 16) + 4);
    if (__ldaxr(v68))
    {
      __clrex();
    }
    else if (!__stxr(1u, v68))
    {
LABEL_95:
      while (*(_BYTE *)(v67 + 41))
      {
        v70 = (unsigned __int8 *)(*(_QWORD *)(v67 + 16) + 4);
        v101 = INFINITY;
        LODWORD(v102) = 0;
        WTF::Condition::waitUntilUnchecked<WTF::Lock>(v67 + 45, v70, (WTF::TimeWithDynamicClockType *)&v101);
      }
      v71 = __ldxr(v68);
      if (v71 == 1)
      {
        if (!__stlxr(0, v68))
          goto LABEL_38;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v68, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_38;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v68);
    goto LABEL_95;
  }
LABEL_38:
  if ((_BYTE)word_1ECF4C5CC)
    WTF::dataLog<char [16]>("5 ");
  if (byte_1ECF4C5DD)
    JSC::Heap::dumpHeapStatisticsAtVMDestruction(*((_QWORD *)this + 38), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v21 = *((unsigned int *)this + 83);
  if ((_DWORD)v21)
  {
    v94 = v21 - 1;
    while (v94 < *((unsigned int *)this + 83))
    {
      JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::filterIncomingReferences<JSC::GCIncomingRefCountedSet<JSC::ArrayBuffer>::lastChanceToFinalize(void)::{lambda(JSC::JSCell *)#1}>(*(JSC::ArrayBuffer **)(*((_QWORD *)this + 40) + 8 * v94--), a2, a3, a4, a5, a6, a7, a8);
      if (v94 == -1)
        goto LABEL_43;
    }
LABEL_163:
    __break(0xC471u);
    JUMPOUT(0x1985A92E8);
  }
LABEL_43:
  JSC::MarkedSpace::stopAllocatingForGood((JSC::Heap *)((char *)this + 160), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  for (i = *((_QWORD *)this + 38); i; i = *(_QWORD *)(i + 80))
  {
    v30 = *(unsigned int *)(i + 48);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = *(_QWORD *)(i + 32);
      v33 = (unint64_t)(v30 + 31) >> 5;
      do
      {
        v34 = *(_DWORD *)(v32 + 40 * v31);
        if (v34)
        {
          v35 = 32 * v31;
          do
          {
            if ((v34 & 1) != 0)
            {
              if (v35 >= *(unsigned int *)(i + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x1985A9538);
              }
              JSC::MarkedBlock::Handle::lastChanceToFinalize(*(JSC::MarkedBlock::Handle **)(*(_QWORD *)i + 8 * v35), (uint64_t)v22, v23, v24, v25, v26, v27, v28);
            }
            ++v35;
            v36 = v34 > 1;
            v34 >>= 1;
          }
          while (v36);
        }
        ++v31;
      }
      while (v31 != v33);
    }
  }
  v37 = *((unsigned int *)this + 49);
  if ((_DWORD)v37)
  {
    v38 = (JSC::PreciseAllocation **)*((_QWORD *)this + 23);
    v39 = 8 * v37;
    do
    {
      v40 = *v38++;
      JSC::PreciseAllocation::lastChanceToFinalize(v40, v22, v23, v24, v25, v26, v27, v28);
      v39 -= 8;
    }
    while (v39);
  }
  JSC::Heap::releaseDelayedReleasedObjects(this);
  v48 = *((unsigned int *)this + 151);
  if ((_DWORD)v48)
  {
    v49 = 0;
    *((_QWORD *)this + 76) = 0;
    while (1)
    {
      if (v49 >= v48)
      {
        __break(0xC471u);
        JUMPOUT(0x1985A9530);
      }
      v50 = *(_QWORD *)(*((_QWORD *)this + 74) + 8 * v49);
      if (*(_BYTE *)(v50 + 24))
      {
        if (*(_QWORD *)(v50 + 32))
          break;
      }
      v51 = 0;
      v52 = 0;
      v53 = v50 + 48;
      v54 = 1;
      v55 = 1;
      do
      {
        v56 = (_QWORD *)(v53 + v51);
        v57 = *(_QWORD *)(v53 + v51 + 8);
        if ((v57 & 3) == 1)
        {
          v60 = v57 & 0xFFFFFFFFFFFFFFFCLL;
          v59 = (v57 & 0xFFFFFFFFFFFFFFFCLL) == 0;
          v57 = v57 & 0xFFFFFFFFFFFFFFFCLL | 2;
          v56[1] = v57;
          if (!v59)
          {
            (*(void (**)(unint64_t, unint64_t, _QWORD))(*(_QWORD *)v60 + 24))(v60, v53 + v51, *(_QWORD *)(v53 + v51 + 16));
            v57 = v56[1];
          }
        }
        v58 = v57 & 3;
        if (v58 == 3)
        {
          *v56 = v52;
          v52 = v53 + v51;
        }
        else
        {
          if (!v58)
            v55 = 0;
          v54 = 0;
        }
        v51 += 24;
      }
      while (v51 != 960);
      *(_BYTE *)(v50 + 24) = v54;
      *(_BYTE *)(v50 + 25) = v55;
      *(_QWORD *)(v50 + 32) = v52;
      if (v54)
      {
        v61 = *((_QWORD *)this + 76);
        if (v52)
          goto LABEL_82;
      }
      else
      {
        v61 = *((_QWORD *)this + 76);
      }
      v49 = v61 + 1;
      *((_QWORD *)this + 76) = v49;
LABEL_78:
      v48 = *((unsigned int *)this + 151);
      if (v49 >= v48)
      {
        *((_QWORD *)this + 76) = -1;
        goto LABEL_85;
      }
    }
    v61 = *((_QWORD *)this + 76);
LABEL_82:
    v62 = *((unsigned int *)this + 151);
    if (v61 >= v62)
    {
      __break(0xC471u);
      JUMPOUT(0x1985A9540);
    }
    if (!(_DWORD)v62)
    {
      __break(0xC471u);
      JUMPOUT(0x1985A9548);
    }
    v63 = *((_QWORD *)this + 74);
    v64 = v63 + 8 * v62;
    v65 = *(_QWORD *)(v63 + 8 * v61);
    *(_QWORD *)(v63 + 8 * v61) = *(_QWORD *)(v64 - 8);
    *(_QWORD *)(v64 - 8) = v65;
    *((_DWORD *)this + 151) = v62 - 1;
    WTF::fastFree(v50, v41, v42, v43, v44, v45, v46, v47);
    *((_QWORD *)this + 110) -= 1024;
    v49 = *((_QWORD *)this + 76);
    goto LABEL_78;
  }
LABEL_85:
  JSC::MarkedSpace::freeMemory((JSC::Heap *)((char *)this + 160), (unint64_t)v41, v42, v43, v44, v45, v46, v47);
  if ((_BYTE)word_1ECF4C5CC)
  {
    v101 = (WTF::MonotonicTime::now(v66) - v9) * 1000.0;
    WTF::dataLog<double,char [5]>(&v101, "ms]\n");
  }
}

void WTF::Condition::notifyOne(WTF::Condition *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  _QWORD v9[2];
  char v10;
  _QWORD v11[3];

  v8 = atomic_load((unsigned __int8 *)this);
  if ((v8 & 1) != 0)
  {
    v10 = 0;
    v9[0] = this;
    v9[1] = &v10;
    v11[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v11[1] = v11;
    v11[2] = v9;
    WTF::ParkingLot::unparkOneImpl((uint64_t)this, (unint64_t)v11, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::Heap::releaseDelayedReleasedObjects(uint64_t this)
{
  int v1;
  uint64_t v2;
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  uint64_t v29;
  int v30;
  int v31;

  v1 = *(_DWORD *)(this + 720);
  *(_DWORD *)(this + 720) = v1 + 1;
  if (!v1)
  {
    v1 = *(_DWORD *)(this + 716);
    if (v1)
    {
      v2 = this;
      v3 = (JSC::VM *)(this - 192);
      do
      {
        v4 = *(_QWORD *)(v2 + 704);
        *(_QWORD *)(v2 + 704) = 0;
        v29 = v4;
        LODWORD(v4) = *(_DWORD *)(v2 + 712);
        *(_QWORD *)(v2 + 712) = 0;
        v30 = v4;
        v31 = v1;
        v5 = JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)v28, v3);
        v6 = (void *)MEMORY[0x19AEBB88C](v5);
        WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)&v29, v7, v8, v9, v10, v11, v12, v13);
        objc_autoreleasePoolPop(v6);
        JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)v28, v14, v15, v16, v17, v18, v19, v20);
        WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v21, v22, v23, v24, v25, v26, v27);
        v1 = *(_DWORD *)(v2 + 716);
      }
      while (v1);
      this = v2;
      v1 = *(_DWORD *)(v2 + 720) - 1;
    }
  }
  *(_DWORD *)(this + 720) = v1;
  return this;
}

void JSC::Heap::sweepAllLogicallyEmptyWeakBlocks(JSC::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *((unsigned int *)this + 151);
  if ((_DWORD)v8)
  {
    v10 = 0;
    *((_QWORD *)this + 76) = 0;
    while (1)
    {
      if (v10 >= v8)
      {
LABEL_30:
        __break(0xC471u);
        JUMPOUT(0x1985A97D8);
      }
      v11 = *(_QWORD *)(*((_QWORD *)this + 74) + 8 * v10);
      if (*(_BYTE *)(v11 + 24))
      {
        if (*(_QWORD *)(v11 + 32))
          break;
      }
      v12 = 0;
      v13 = 0;
      v14 = v11 + 48;
      v15 = 1;
      v16 = 1;
      do
      {
        v17 = (_QWORD *)(v14 + v12);
        v18 = *(_QWORD *)(v14 + v12 + 8);
        if ((v18 & 3) == 1)
        {
          v21 = v18 & 0xFFFFFFFFFFFFFFFCLL;
          v20 = (v18 & 0xFFFFFFFFFFFFFFFCLL) == 0;
          v18 = v18 & 0xFFFFFFFFFFFFFFFCLL | 2;
          v17[1] = v18;
          if (!v20)
          {
            (*(void (**)(unint64_t, unint64_t, _QWORD))(*(_QWORD *)v21 + 24))(v21, v14 + v12, *(_QWORD *)(v14 + v12 + 16));
            v18 = v17[1];
          }
        }
        v19 = v18 & 3;
        if (v19 == 3)
        {
          *v17 = v13;
          v13 = v14 + v12;
        }
        else
        {
          if (!v19)
            v16 = 0;
          v15 = 0;
        }
        v12 += 24;
      }
      while (v12 != 960);
      *(_BYTE *)(v11 + 24) = v15;
      *(_BYTE *)(v11 + 25) = v16;
      *(_QWORD *)(v11 + 32) = v13;
      if (v15)
      {
        v22 = *((_QWORD *)this + 76);
        if (v13)
          goto LABEL_24;
      }
      else
      {
        v22 = *((_QWORD *)this + 76);
      }
      v10 = v22 + 1;
      *((_QWORD *)this + 76) = v10;
LABEL_20:
      v8 = *((unsigned int *)this + 151);
      if (v10 >= v8)
      {
        *((_QWORD *)this + 76) = -1;
        return;
      }
    }
    v22 = *((_QWORD *)this + 76);
LABEL_24:
    v23 = *((unsigned int *)this + 151);
    if (v22 >= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1985A97E0);
    }
    if (!(_DWORD)v23)
      goto LABEL_30;
    v24 = *((_QWORD *)this + 74);
    v25 = v24 + 8 * v23;
    v26 = *(_QWORD *)(v24 + 8 * v22);
    *(_QWORD *)(v24 + 8 * v22) = *(_QWORD *)(v25 - 8);
    *(_QWORD *)(v25 - 8) = v26;
    *((_DWORD *)this + 151) = v23 - 1;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    *((_QWORD *)this + 110) -= 1024;
    v10 = *((_QWORD *)this + 76);
    goto LABEL_20;
  }
}

uint64_t WTF::dataLog<double,char [5]>(double *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%lf", *a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void WTF::Vector<WTF::RetainPtr<void const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;

  if (*(_DWORD *)(a1 + 8))
  {
    v9 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(const void ***)a1;
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          CFRelease(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *(_DWORD *)(a1 + 12) = 0;
    }
    v13 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::Heap::reportExtraMemoryVisited(uint64_t this, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (unint64_t *)(this + 344);
  do
  {
    while (1)
    {
      v3 = *v2 + a2;
      if (__CFADD__(*v2, a2))
        v3 = -1;
      v4 = __ldxr(v2);
      if (v4 == *v2)
        break;
      __clrex();
    }
  }
  while (__stxr(v3, v2));
  return this;
}

void JSC::Heap::reportExtraMemoryAllocatedSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v19;
  unsigned int v20;
  kern_return_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  double v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  JSC::SlotVisitor *v34;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  uint64_t v37;
  unint64_t v38;
  char v39;
  integer_t **v40;
  integer_t *v41;

  v12 = *(double **)(a1 + 640);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(a1 + 80);
    if (!v13)
      v13 = 1;
    v14 = (*(double (**)(_QWORD, uint64_t))(*(_QWORD *)v12 + 48))(*(_QWORD *)(a1 + 640), a1) * (double)v13;
    v15 = (*(double (**)(double *, uint64_t))(*(_QWORD *)v12 + 32))(v12, a1);
    v16 = v15
        / (*(double (**)(double *, unint64_t))(*(_QWORD *)v12 + 40))(v12, (unint64_t)v14);
    v17 = v12[5];
    if (v16 + v16 <= v17)
    {
      v12[5] = v16;
      v28 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
      if (v28 != -1)
      {
        *(_QWORD *)task_info_out = &v40;
        v41 = task_info_out;
        std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
      }
      v29 = COERCE_DOUBLE(JSC::JSRunLoopTimer::Manager::timeUntilFire((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v12, a3, a4, a5, a6, a7, a8))- (v17- v16);
      if (!v30)
        v29 = v16;
      JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)v12, v29);
    }
  }
  *(_QWORD *)(a1 + 80) += a4;
  if (*(_BYTE *)(a1 + 253) && !*(_DWORD *)(a1 + 724))
  {
    v27 = *(double *)(a1 + 144) + (double)(unint64_t)a4 * *(double *)&qword_1ECF4C3F8;
    *(double *)(a1 + 144) = v27;
    if (fabs(v27) == INFINITY)
    {
      *(_QWORD *)(a1 + 144) = 0;
    }
    else if (v27 >= *(double *)&xmmword_1ECF4C3E8 && v27 > 0.0)
    {
      if (*((double *)&xmmword_1ECF4C3E8 + 1) < v27)
        v27 = *((double *)&xmmword_1ECF4C3E8 + 1);
      v34 = *(JSC::SlotVisitor **)(a1 + 408);
      *((_BYTE *)v34 + 187) = 1;
      *(double *)(a1 + 144) = *(double *)(a1 + 144)
                            - (double)(unint64_t)JSC::SlotVisitor::performIncrementOfDraining(v34, (unint64_t)v27, a3, a4, a5, a6, a7, a8);
      *((_BYTE *)v34 + 187) = 0;
    }
  }
  if (a3 && *(_DWORD *)(a1 + 568) >= *(unsigned __int8 *)(a3 + 7))
  {
    if (*(_BYTE *)(a1 + 563))
    {
      __dmb(0xBu);
      if (*(_BYTE *)(a3 + 7))
        goto LABEL_8;
      __dmb(0xBu);
      if ((a3 & 8) != 0)
      {
        if ((*(_BYTE *)(a3 - 79) & 1) == 0)
          goto LABEL_8;
      }
      else if (!JSC::MarkedBlock::isMarked(a3 & 0xFFFFFFFFFFFFC000, *(_DWORD *)(a1 + 240), a3))
      {
        goto LABEL_8;
      }
    }
    v31 = (unint64_t *)(a1 + 344);
    do
    {
      while (1)
      {
        v32 = *v31 + a4;
        if (__CFADD__(*v31, a4))
          v32 = -1;
        v33 = __ldxr(v31);
        if (v33 == *v31)
          break;
        __clrex();
      }
    }
    while (__stxr(v32, v31));
  }
LABEL_8:
  if (*(_BYTE *)(a1 + 561))
  {
    if ((*(_BYTE *)(a1 + 10) & 0xFE) != 2 && HIBYTE(word_1ECF4C5CC) != 0)
    {
      if (*(_DWORD *)(a1 + 904) != 4)
      {
        if (a2)
        {
          *(_BYTE *)(a2 + 8) = 1;
        }
        else if (*(_DWORD *)(a1 + 724))
        {
          *(_BYTE *)(a1 + 1006) = 1;
        }
        else
        {
          JSC::Heap::stopIfNecessary((JSC::Heap *)a1);
        }
      }
      if ((_DWORD)qword_1ECF4C5D4)
      {
        if (*(_QWORD *)(a1 + 80) <= (unint64_t)qword_1ECF4C5D4)
          return;
        goto LABEL_32;
      }
      v19 = *(_QWORD *)(a1 + 96);
      v20 = *(_DWORD *)(a1 + 1120) + 1;
      *(_DWORD *)(a1 + 1120) = v20;
      if (v20 <= 0x63)
      {
        if (!*(_BYTE *)(a1 + 1124))
          goto LABEL_31;
      }
      else
      {
        task_info_outCnt = 93;
        v21 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
        v22 = v38;
        v23 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
        if (v23 != -1)
        {
          v40 = &v41;
          v41 = (integer_t *)&v39;
          std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
        }
        v24 = (double)v22;
        if (v21)
          v24 = 0.0;
        v25 = v24 / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
        if (v25 > 1.0)
          v25 = 1.0;
        v26 = *(double *)&xmmword_1ECF4C398;
        *(_BYTE *)(a1 + 1124) = *(double *)&xmmword_1ECF4C398 < v25;
        *(_DWORD *)(a1 + 1120) = 0;
        if (v26 >= v25)
        {
LABEL_31:
          if (*(_QWORD *)(a1 + 80) <= v19)
            return;
LABEL_32:
          if (a2)
          {
            *(_BYTE *)(a2 + 8) = 1;
          }
          else if (*(_DWORD *)(a1 + 724))
          {
            *(_BYTE *)(a1 + 1006) = 1;
          }
          else
          {
            LOWORD(task_info_out[0]) = 0;
            v37 = 0;
            JSC::Heap::collectAsync(a1, task_info_out);
            JSC::Heap::stopIfNecessary((JSC::Heap *)a1);
          }
          return;
        }
      }
      if (v19 >= *(_QWORD *)(a1 + 104))
        v19 = *(_QWORD *)(a1 + 104);
      goto LABEL_31;
    }
  }
}

void JSC::Heap::didAllocate(JSC::Heap *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  char v19;
  JSC::SlotVisitor *v20;
  char v21;
  char **v22;
  char *v23;

  v10 = (double *)*((_QWORD *)this + 80);
  if (v10)
  {
    v11 = *((_QWORD *)this + 11) + *((_QWORD *)this + 10);
    if (!v11)
      v11 = 1;
    v12 = (*(double (**)(_QWORD, JSC::Heap *))(*(_QWORD *)v10 + 48))(*((_QWORD *)this + 80), this)
        * (double)v11;
    v13 = (*(double (**)(double *, JSC::Heap *))(*(_QWORD *)v10 + 32))(v10, this);
    v14 = v13
        / (*(double (**)(double *, unint64_t))(*(_QWORD *)v10 + 40))(v10, (unint64_t)v12);
    v15 = v10[5];
    if (v14 + v14 <= v15)
    {
      v10[5] = v14;
      v17 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
      if (v17 != -1)
      {
        v23 = &v21;
        v22 = &v23;
        std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
      }
      v18 = COERCE_DOUBLE(JSC::JSRunLoopTimer::Manager::timeUntilFire((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v10, a3, a4, a5, a6, a7, a8))- (v15- v14);
      if (!v19)
        v18 = v14;
      JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)v10, v18);
    }
  }
  *((_QWORD *)this + 10) += a2;
  if (*((_BYTE *)this + 253) && !*((_DWORD *)this + 181))
  {
    v16 = *((double *)this + 18) + (double)a2 * *(double *)&qword_1ECF4C3F8;
    *((double *)this + 18) = v16;
    if (fabs(v16) == INFINITY)
    {
      *((_QWORD *)this + 18) = 0;
    }
    else if (v16 >= *(double *)&xmmword_1ECF4C3E8 && v16 > 0.0)
    {
      if (*((double *)&xmmword_1ECF4C3E8 + 1) < v16)
        v16 = *((double *)&xmmword_1ECF4C3E8 + 1);
      v20 = (JSC::SlotVisitor *)*((_QWORD *)this + 51);
      *((_BYTE *)v20 + 187) = 1;
      *((double *)this + 18) = *((double *)this + 18)
                             - (double)(unint64_t)JSC::SlotVisitor::performIncrementOfDraining(v20, (unint64_t)v16, a3, a4, a5, a6, a7, a8);
      *((_BYTE *)v20 + 187) = 0;
    }
  }
}

void JSC::Heap::collectIfNecessaryOrDefer(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  unsigned int v6;
  kern_return_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v17;
  char v18;
  char **v19;
  char *v20;

  if (*(_BYTE *)(a1 + 561))
  {
    if ((*(_BYTE *)(a1 + 10) & 0xFE) != 2 && HIBYTE(word_1ECF4C5CC) != 0)
    {
      if (*(_DWORD *)(a1 + 904) != 4)
      {
        if (a2)
        {
          *(_BYTE *)(a2 + 8) = 1;
        }
        else if (*(_DWORD *)(a1 + 724))
        {
          *(_BYTE *)(a1 + 1006) = 1;
        }
        else
        {
          JSC::Heap::stopIfNecessary((JSC::Heap *)a1);
        }
      }
      if ((_DWORD)qword_1ECF4C5D4)
      {
        if (*(_QWORD *)(a1 + 80) <= (unint64_t)qword_1ECF4C5D4)
          return;
LABEL_26:
        if (a2)
        {
          *(_BYTE *)(a2 + 8) = 1;
        }
        else if (*(_DWORD *)(a1 + 724))
        {
          *(_BYTE *)(a1 + 1006) = 1;
        }
        else
        {
          v13 = 0;
          v14 = 0;
          JSC::Heap::collectAsync(a1, &v13);
          JSC::Heap::stopIfNecessary((JSC::Heap *)a1);
        }
        return;
      }
      v5 = *(_QWORD *)(a1 + 96);
      v6 = *(_DWORD *)(a1 + 1120) + 1;
      *(_DWORD *)(a1 + 1120) = v6;
      if (v6 <= 0x63)
      {
        if (!*(_BYTE *)(a1 + 1124))
          goto LABEL_25;
      }
      else
      {
        task_info_outCnt = 93;
        v7 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
        v8 = v17;
        v9 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
        if (v9 != -1)
        {
          v20 = &v18;
          v19 = &v20;
          std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
        }
        v10 = (double)v8;
        if (v7)
          v10 = 0.0;
        v11 = v10 / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
        if (v11 > 1.0)
          v11 = 1.0;
        v12 = *(double *)&xmmword_1ECF4C398;
        *(_BYTE *)(a1 + 1124) = *(double *)&xmmword_1ECF4C398 < v11;
        *(_DWORD *)(a1 + 1120) = 0;
        if (v12 >= v11)
        {
LABEL_25:
          if (*(_QWORD *)(a1 + 80) <= v5)
            return;
          goto LABEL_26;
        }
      }
      if (v5 >= *(_QWORD *)(a1 + 104))
        v5 = *(_QWORD *)(a1 + 104);
      goto LABEL_25;
    }
  }
}

void JSC::Heap::deprecatedReportExtraMemorySlowCase(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = *((_QWORD *)this + 44);
  v9 = __CFADD__(v8, a2);
  v10 = v8 + a2;
  if (v9)
    v10 = -1;
  *((_QWORD *)this + 44) = v10;
  JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)this, 0, 0, a2, a5, a6, a7, a8);
}

double JSC::Heap::reportAbandonedObjectGraph(JSC::Heap *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  double result;
  double v25;
  char v26;

  v2 = *((_QWORD *)this + 43);
  v3 = *((_QWORD *)this + 44);
  v4 = __CFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
  {
    v8 = -1;
  }
  else
  {
    v6 = *((_QWORD *)this + 42);
    v4 = __CFADD__(v5, v6);
    v7 = v5 + v6;
    if (v4)
      v8 = -1;
    else
      v8 = v7;
  }
  v9 = *((_QWORD *)this + 29);
  v10 = (double *)*((_QWORD *)this + 79);
  if (v10)
  {
    v11 = *((_QWORD *)this + 5) - *((_QWORD *)this + 6) + *((_QWORD *)this + 10) + *((_QWORD *)this + 11);
    if (!v11)
      v11 = 1;
    v12 = (*(double (**)(_QWORD, JSC::Heap *))(*(_QWORD *)v10 + 48))(*((_QWORD *)this + 79), this)
        * (double)v11;
    v13 = (*(double (**)(double *, JSC::Heap *))(*(_QWORD *)v10 + 32))(v10, this);
    v21 = v13
        / (*(double (**)(double *, unint64_t))(*(_QWORD *)v10 + 40))(v10, (unint64_t)v12);
    v22 = v10[5];
    if (v21 + v21 <= v22)
    {
      v10[5] = v21;
      v25 = COERCE_DOUBLE(JSC::JSRunLoopTimer::timeUntilFire((JSC::JSRunLoopTimer *)v10, v14, v15, v16, v17, v18, v19, v20))
          - (v22
           - v21);
      if (!v26)
        v25 = v21;
      JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)v10, v25);
    }
  }
  v23 = v8 + v9;
  if (__CFADD__(v8, v9))
    v23 = -1;
  result = (double)v23 * 0.1;
  *((_QWORD *)this + 11) += (unint64_t)result;
  return result;
}

uint64_t JSC::Heap::capacity(JSC::Heap *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 29);
  v2 = *((_QWORD *)this + 43);
  v3 = *((_QWORD *)this + 44);
  v4 = __CFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
  {
    v7 = -1;
  }
  else
  {
    v6 = *((_QWORD *)this + 42);
    v4 = __CFADD__(v5, v6);
    v7 = v5 + v6;
    if (v4)
      v7 = -1;
  }
  v4 = __CFADD__(v7, v1);
  v8 = v7 + v1;
  if (v4)
    return -1;
  else
    return v8;
}

uint64_t *JSC::Heap::protect(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v13 = v8;
    v14 = v9;
    v11 = a2;
    v12 = 0;
    result = WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(result + 45, &v11, &v12, a4, a5, a6, a7, a8, (uint64_t)v10);
    ++*(_DWORD *)(v10[0] + 8);
  }
  return result;
}

uint64_t JSC::Heap::unprotect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v11[1] = v8;
  v11[2] = v9;
  v11[0] = a2;
  return WTF::HashCountedSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::remove((uint64_t *)(a1 + 360), v11, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashCountedSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::remove(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  int v23;

  v8 = *a1;
  if (!*a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ~(*a2 << 32) + *a2;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v9 & (((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27)));
  v14 = *(_QWORD *)(v8 + 16 * v13);
  if (v14 != *a2)
  {
    v23 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v23) & v9;
      v14 = *(_QWORD *)(v8 + 16 * v13);
      ++v23;
      if (v14 == *a2)
        goto LABEL_3;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_3:
  if (v13 == *(_DWORD *)(v8 - 4))
    return 0;
  v15 = v8 + 16 * v13;
  if (*(_DWORD *)(v15 + 8) == 1)
  {
    *(_QWORD *)v15 = -1;
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) - 1;
    else
      v17 = -1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a1;
    if (*a1)
    {
      v19 = 6 * *(_DWORD *)(v18 - 12);
      v20 = *(_DWORD *)(v18 - 4);
      if (v19 < v20 && v20 >= 9)
        WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,unsigned int>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(a1, v20 >> 1, 0, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  else
  {
    result = 0;
    --*(_DWORD *)(v15 + 8);
  }
  return result;
}

void JSC::Heap::addReference(JSC::Heap *this, JSC::JSCell *a2, JSC::ArrayBuffer *a3)
{
  uint64_t v5;
  JSC::ArrayBuffer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::ArrayBuffer *v17;

  v17 = a3;
  if (JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::addIncomingReference((uint64_t)a3, (uint64_t)a2))
  {
    v5 = *((unsigned int *)this + 83);
    if ((_DWORD)v5 == *((_DWORD *)this + 82))
    {
      WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBuffer *&>((uint64_t)this + 320, (unint64_t)&v17);
      v6 = v17;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 40) + 8 * v5) = a3;
      *((_DWORD *)this + 83) = v5 + 1;
      v6 = a3;
    }
    if (*((_BYTE *)v6 + 64) && (v15 = *((_QWORD *)v6 + 4)) != 0)
      v7 = *(_QWORD *)(v15 + 32);
    else
      v7 = *((_QWORD *)v6 + 6);
    *((_QWORD *)this + 42) += v7 + 96;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)this, 0);
    if (*((_BYTE *)a3 + 64) && (v16 = *((_QWORD *)a3 + 4)) != 0)
      v14 = *(_QWORD *)(v16 + 32);
    else
      v14 = *((_QWORD *)a3 + 6);
    JSC::Heap::didAllocate(this, v14 + 96, v8, v9, v10, v11, v12, v13);
  }
}

void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSFinalizationRegistry,JSC::IsoSubspace>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *j;
  uint64_t v25;

  for (i = *(_QWORD *)(a2 + 32); i; i = *(_QWORD *)(i + 88))
  {
    v10 = *(unsigned int *)(i + 48);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v25 = *(_QWORD *)(i + 32);
      v12 = (unint64_t)(v10 + 31) >> 5;
      do
      {
        v13 = *(_DWORD *)(v25 + 40 * v11 + 32);
        if (v13)
        {
          v14 = 32 * v11;
          do
          {
            if ((v13 & 1) != 0)
            {
              if (v14 >= *(unsigned int *)(i + 12))
              {
                __break(0xC471u);
                return;
              }
              v15 = *(unsigned int **)(*(_QWORD *)i + 8 * v14);
              v16 = *((_QWORD *)v15 + 11);
              v17 = *(_DWORD *)(*(_QWORD *)(v16 + 8) + 432);
              v18 = *(_DWORD *)(v16 + 32);
              __dmb(0xBu);
              if (v18 == v17)
              {
                v19 = v15[1];
                if (v19 <= 0x3FF)
                {
                  v20 = v16 + 40;
                  do
                  {
                    if (((*(_QWORD *)(v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
                      JSC::JSFinalizationRegistry::finalizeUnconditionally(*((_QWORD *)v15 + 11) + 16 * v19, a1 - 192, a3, a4, a5, a6, a7, a8);
                    v19 += *v15;
                  }
                  while (v19 < 0x400);
                }
              }
            }
            ++v14;
            v21 = v13 > 1;
            v13 >>= 1;
          }
          while (v21);
        }
        ++v11;
      }
      while (v11 != v12);
    }
  }
  for (j = *(uint64_t **)(a2 + 48); j != (uint64_t *)(a2 + 48); j = (uint64_t *)*j)
  {
    if ((*((_BYTE *)j + 33) & 1) != 0)
      JSC::JSFinalizationRegistry::finalizeUnconditionally((uint64_t)(j + 14), a1 - 192, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Heap::completeAllJITPlans(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::JITWorklist *v10;
  int v11;
  BOOL v12;
  char v13;
  char **v14;
  char *v15;

  if (BYTE1(dword_1ECF4C240))
  {
    v9 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
    if (v9 != -1)
    {
      v15 = &v13;
      v14 = &v15;
      std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
    }
    v10 = (JSC::JITWorklist *)JSC::theGlobalJITWorklist;
    ++*((_DWORD *)this + 181);
    JSC::JITWorklist::waitUntilAllPlansForVMAreReady(v10, (JSC::Heap *)((char *)this - 192), a3, a4, a5, a6, a7, a8);
    JSC::JITWorklist::completeAllReadyPlansForVM((uint64_t)v10, (uint64_t)this - 192, 0, 0);
    v11 = *((_DWORD *)this + 181) - 1;
    *((_DWORD *)this + 181) = v11;
    if (*((unsigned __int8 *)this + 1006) | HIBYTE(dword_1ECF4C5CE))
      v12 = v11 == 0;
    else
      v12 = 0;
    if (v12)
    {
      *((_BYTE *)this + 1006) = 0;
      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)this, 0);
    }
  }
}

uint64_t JSC::Heap::assertMarkStacksEmpty(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;

  v1 = this;
  v2 = *(_QWORD **)(this + 736);
  v3 = v2[2];
  if (v3 || *(_QWORD *)(*v2 + 8))
  {
    v16 = v3 + 510 * v2[3] - 510;
    this = WTF::dataLog<char [54],unsigned long,char [12]>(&v16);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v5 = *(_QWORD **)(v1 + 744);
  v6 = v5[2];
  if (v6 || *(_QWORD *)(*v5 + 8))
  {
    v16 = v6 + 510 * v5[3] - 510;
    this = WTF::dataLog<char [52],unsigned long,char [12]>(&v16);
    v4 = 0;
  }
  v7 = *(_QWORD **)(v1 + 400);
  if (v7[3] || (!*(_QWORD *)(v7[1] + 8) ? (v8 = v7[7] == 0) : (v8 = 0), !v8 || *(_QWORD *)(v7[5] + 8)))
  {
    v16 = *(_QWORD *)(v1 + 400);
    this = WTF::dataLog<char [16],WTF::RawPointer,char [16]>((const void **)&v16);
    v4 = 0;
  }
  v9 = *(_QWORD **)(v1 + 408);
  if (v9[3] || (!*(_QWORD *)(v9[1] + 8) ? (v10 = v9[7] == 0) : (v10 = 0), !v10 || *(_QWORD *)(v9[5] + 8)))
  {
    v16 = *(_QWORD *)(v1 + 408);
    this = WTF::dataLog<char [16],WTF::RawPointer,char [16]>((const void **)&v16);
    v4 = 0;
  }
  v11 = *(unsigned int *)(v1 + 460);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(v1 + 448);
    v13 = 8 * v11;
    do
    {
      v14 = (_QWORD *)*v12;
      if (*(_QWORD *)(*v12 + 24)
        || (!*(_QWORD *)(v14[1] + 8) ? (v15 = v14[7] == 0) : (v15 = 0), !v15 || *(_QWORD *)(v14[5] + 8)))
      {
        v16 = *v12;
        this = WTF::dataLog<char [16],WTF::RawPointer,char [16]>((const void **)&v16);
        v4 = 0;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (!v4)
  {
    this = 830;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::dataLog<char [54],unsigned long,char [12]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: Shared collector mark stack not empty! It has ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", " elements.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [52],unsigned long,char [12]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: Shared mutator mark stack not empty! It has ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", " elements.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::Heap::gatherExtraHeapData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MarkedSpace *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int ***v18;
  uint64_t v19;
  unsigned int ***v20;
  uint64_t v21;
  unsigned int ***v22;
  unsigned int *v23;
  unint64_t v24;
  _DWORD *v25;
  unsigned int ***v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int ***v31;

  if (!a2)
    return;
  v10 = (JSC::MarkedSpace *)(a1 + 160);
  JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(a1 + 160), a2, a3, a4, a5, a6, a7, a8);
  v18 = *(unsigned int ****)(a1 + 264);
  if (v18)
  {
    v19 = *((unsigned int *)v18 - 1);
    v20 = &v18[v19];
    if (*((_DWORD *)v18 - 3))
    {
      if ((_DWORD)v19)
      {
        v21 = 8 * v19;
        while ((unint64_t)*v18 + 1 <= 1)
        {
          ++v18;
          v21 -= 8;
          if (!v21)
          {
            v18 = v20;
            break;
          }
        }
      }
      v22 = v20;
      goto LABEL_10;
    }
    v31 = &v18[v19];
  }
  else
  {
    v20 = 0;
    v31 = 0;
    v19 = 0;
  }
  v22 = &v18[v19];
  v18 = v31;
LABEL_10:
  while (v18 != v20)
  {
    v23 = **v18;
    v24 = v23[1];
    if (v24 <= 0x3FF)
    {
      if (*((unsigned __int8 *)v23 + 9) >= 2u)
      {
        do
        {
          JSC::MarkedBlock::Handle::isLive((uint64_t)v23, *((_QWORD *)v23 + 11) + 16 * v24, v12, v13, v14, v15, v16, v17);
          v24 += *v23;
        }
        while (v24 <= 0x3FF);
      }
      else
      {
        do
        {
          v25 = (_DWORD *)(*((_QWORD *)v23 + 11) + 16 * v24);
          if (JSC::MarkedBlock::Handle::isLive((uint64_t)v23, (uint64_t)v25, v12, v13, v14, v15, v16, v17))
            (*(void (**)(_DWORD *, uint64_t))(16 * *(unsigned int *)(16 * (*v25 & 0xFFFFFFFE) + 0x4C)
                                                      + 0xC0))(v25, a2);
          v24 += *v23;
        }
        while (v24 < 0x400);
      }
    }
    v26 = v18 + 1;
    v18 = v22;
    if (v26 != v22)
    {
      v18 = v26;
      while ((unint64_t)*v18 + 1 <= 1)
      {
        if (++v18 == v22)
        {
          v18 = v22;
          break;
        }
      }
    }
  }
  v27 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v27)
  {
    v28 = *(uint64_t **)(a1 + 184);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      if (((*(_BYTE *)(*v28 + 33) & 1) != 0 || (*(_BYTE *)(v30 + 32) & 1) != 0)
        && *(unsigned __int16 *)(v30 + 34) <= 0x1FFu)
      {
        (*(void (**)(uint64_t, uint64_t))(16
                                                 * *(unsigned int *)(16 * (*(_DWORD *)(v30 + 112) & 0xFFFFFFFE) + 0x4C)
                                                 + 0xC0))(v30 + 112, a2);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  JSC::MarkedSpace::didFinishIterating(v10, v11, v12, v13, v14, v15, v16, v17);
}

void JSC::Heap::removeDeadHeapSnapshotNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::HeapSnapshot *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int ***v17;
  uint64_t v18;
  unsigned int ***v19;
  uint64_t v20;
  unsigned int ***v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  JSC::HeapSnapshot *v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int ***v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  JSC::HeapSnapshot *v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int ***v51;
  JSC::MarkedSpace *v52;

  if (!(_DWORD)a3)
    return;
  v8 = *(JSC::HeapSnapshot **)(a2 + 8 * a3 - 8);
  if (!v8)
    return;
  v52 = (JSC::MarkedSpace *)(a1 + 160);
  JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(a1 + 160), a2, a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned int ****)(a1 + 264);
  if (v17)
  {
    v18 = *((unsigned int *)v17 - 1);
    v19 = &v17[v18];
    if (*((_DWORD *)v17 - 3))
    {
      if ((_DWORD)v18)
      {
        v20 = 8 * v18;
        while ((unint64_t)*v17 + 1 <= 1)
        {
          ++v17;
          v20 -= 8;
          if (!v20)
          {
            v17 = v19;
            break;
          }
        }
      }
      v21 = v19;
      goto LABEL_11;
    }
    v51 = &v17[v18];
  }
  else
  {
    v19 = 0;
    v51 = 0;
    v18 = 0;
  }
  v21 = &v17[v18];
  v17 = v51;
LABEL_11:
  while (v17 != v19)
  {
    v22 = **v17;
    v23 = v22[1];
    if (v23 <= 0x3FF)
    {
      if (*((unsigned __int8 *)v22 + 9) <= 1u)
      {
        do
        {
          v24 = *((_QWORD *)v22 + 11);
          v25 = v24 + 16 * v23;
          if ((JSC::MarkedBlock::Handle::isLive((uint64_t)v22, v25, v11, v12, v13, v14, v15, v16) & 1) == 0 && v24)
          {
            v26 = v8;
            while (1)
            {
              if (*((_BYTE *)v26 + 40))
              {
                if ((v25 & ~*((_QWORD *)v26 + 2)) == 0)
                {
                  v27 = *((_DWORD *)v26 + 3);
                  if (v27)
                    break;
                }
              }
LABEL_29:
              v26 = (JSC::HeapSnapshot *)*((_QWORD *)v26 + 3);
              if (!v26)
                goto LABEL_32;
            }
            v28 = 0;
            v29 = *((_DWORD *)v26 + 3);
            while (1)
            {
              v30 = v28 + ((v29 - v28) >> 1);
              if (v27 <= v30)
              {
                __break(0xC471u);
                JUMPOUT(0x1985AAFB8);
              }
              v31 = *(_QWORD *)(*(_QWORD *)v26 + 16 * (v28 + ((v29 - v28) >> 1)));
              if (v31 == v25)
                break;
              if (v31 <= v25)
                v28 = v30 + 1;
              else
                v29 = v28 + ((v29 - v28) >> 1);
              if (v28 == v29)
                goto LABEL_29;
            }
            *(_QWORD *)(*(_QWORD *)v26 + 16 * v30) = v25 | 1;
            *((_BYTE *)v26 + 41) = 1;
          }
LABEL_32:
          v23 += *v22;
        }
        while (v23 < 0x400);
      }
      else
      {
        do
        {
          JSC::MarkedBlock::Handle::isLive((uint64_t)v22, *((_QWORD *)v22 + 11) + 16 * v23, v11, v12, v13, v14, v15, v16);
          v23 += *v22;
        }
        while (v23 <= 0x3FF);
      }
    }
    v32 = v17 + 1;
    v17 = v21;
    if (v32 != v21)
    {
      v17 = v32;
      while ((unint64_t)*v17 + 1 <= 1)
      {
        if (++v17 == v21)
        {
          v17 = v21;
          break;
        }
      }
    }
  }
  v33 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v33)
  {
    v34 = *(uint64_t **)(a1 + 184);
    v35 = &v34[v33];
    do
    {
      v36 = *v34;
      if ((*(_BYTE *)(*v34 + 33) & 1) == 0
        && (*(_BYTE *)(v36 + 32) & 1) == 0
        && *(unsigned __int16 *)(v36 + 34) <= 0x1FFu)
      {
        v37 = v36 + 112;
        v38 = v8;
        while (1)
        {
          if (*((_BYTE *)v38 + 40))
          {
            if ((v37 & ~*((_QWORD *)v38 + 2)) == 0)
            {
              v39 = *((_DWORD *)v38 + 3);
              if (v39)
                break;
            }
          }
LABEL_55:
          v38 = (JSC::HeapSnapshot *)*((_QWORD *)v38 + 3);
          if (!v38)
            goto LABEL_58;
        }
        v40 = 0;
        v41 = *((_DWORD *)v38 + 3);
        while (1)
        {
          v42 = v40 + ((v41 - v40) >> 1);
          if (v39 <= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x1985AAFC0);
          }
          v43 = *(_QWORD *)(*(_QWORD *)v38 + 16 * (v40 + ((v41 - v40) >> 1)));
          if (v43 == v37)
            break;
          if (v43 <= v37)
            v40 = v42 + 1;
          else
            v41 = v40 + ((v41 - v40) >> 1);
          if (v40 == v41)
            goto LABEL_55;
        }
        *(_QWORD *)(*(_QWORD *)v38 + 16 * v42) = v37 | 1;
        *((_BYTE *)v38 + 41) = 1;
      }
LABEL_58:
      ++v34;
    }
    while (v34 != v35);
  }
  JSC::HeapSnapshot::shrinkToFit(v8, v10, v11, v12, v13, v14, v15, v16);
  JSC::MarkedSpace::didFinishIterating(v52, v44, v45, v46, v47, v48, v49, v50);
}

uint64_t JSC::Heap::objectCount(uint64_t **this, double a2, double a3, uint32x4_t a4)
{
  return JSC::MarkedSpace::objectCount(this + 20, a2, a3, a4);
}

unint64_t JSC::Heap::extraMemorySize(JSC::Heap *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 43);
  v2 = *((_QWORD *)this + 44);
  v3 = __CFADD__(v1, v2);
  v4 = v1 + v2;
  if (v3)
  {
    v6 = -1;
  }
  else
  {
    v5 = *((_QWORD *)this + 42);
    v3 = __CFADD__(v4, v5);
    v6 = v4 + v5;
    if (v3)
      v6 = -1;
  }
  v7 = *((_QWORD *)this + 29);
  if (v6 >= ~v7)
    return ~v7;
  else
    return v6;
}

unint64_t JSC::Heap::size(uint64_t **this, double a2, double a3, uint32x4_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v5 = JSC::MarkedSpace::size(this + 20, a2, a3, a4);
  v6 = this[43];
  v7 = this[44];
  v8 = __CFADD__(v6, v7);
  v9 = (char *)v7 + (_QWORD)v6;
  if (v8)
  {
    v11 = -1;
  }
  else
  {
    v10 = this[42];
    v8 = __CFADD__(v9, v10);
    v11 = (unint64_t)v10 + (_QWORD)v9;
    if (v8)
      v11 = -1;
  }
  v12 = (unint64_t)this[29];
  if (v11 >= ~v12)
    v11 = ~v12;
  return v11 + v5;
}

uint64_t JSC::Heap::protectedGlobalObjectCount(JSC::Heap *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = &v3;
  v3 = 0;
  JSC::Heap::forEachProtectedCell<JSC::Heap::protectedGlobalObjectCount(void)::$_0>((uint64_t)this, &v2);
  return v3;
}

uint64_t JSC::Heap::forEachProtectedCell<JSC::Heap::protectedGlobalObjectCount(void)::$_0>(uint64_t result, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v2 = *(_QWORD *)(result + 360);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *(_QWORD *)(result + 360);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = *(_QWORD *)(result + 360);
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 16;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = v2 + 16 * v3;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = v2 + 16 * v3;
  if (v2)
LABEL_8:
    v2 += 16 * *(unsigned int *)(v2 - 4);
  while (v5 != v2)
  {
    if (*(_BYTE *)(*(_QWORD *)v5 + 5) == 51)
      ++**a2;
    v7 = v5 + 16;
    v5 = v4;
    if (v7 != v4)
    {
      v5 = v7;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 16;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  v8 = *(_QWORD **)(result + 504);
  if (v8 != (_QWORD *)(result + 504))
  {
    while (1)
    {
      v9 = v8[2];
      if (v9)
        v10 = (v9 & 0xFFFE000000000002) == 0;
      else
        v10 = 0;
      if (!v10)
        goto LABEL_29;
      v11 = *(_QWORD *)(result + 360);
      if (!v11)
        goto LABEL_31;
      v12 = *(_DWORD *)(v11 - 8);
      v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(_QWORD *)(v11 + 16 * v16);
      if (v17 != v9)
        break;
LABEL_29:
      v8 = (_QWORD *)*v8;
      if (v8 == (_QWORD *)(result + 504))
        return result;
    }
    v18 = 1;
    while (v17)
    {
      v16 = (v16 + v18) & v12;
      v17 = *(_QWORD *)(v11 + 16 * v16);
      ++v18;
      if (v17 == v9)
        goto LABEL_29;
    }
LABEL_31:
    if (*(_BYTE *)(v9 + 5) == 51)
      ++**a2;
    goto LABEL_29;
  }
  return result;
}

uint64_t JSC::Heap::globalObjectCount(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MarkedSpace *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int ***v17;
  uint64_t v18;
  unsigned int ***v19;
  uint64_t v20;
  unsigned int ***v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int ***v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int ***v32;

  v9 = (JSC::Heap *)((char *)this + 160);
  JSC::MarkedSpace::willStartIterating((JSC::Heap *)((char *)this + 160), a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int ***)*((_QWORD *)this + 33);
  if (!v17)
  {
    v19 = 0;
    v32 = 0;
    v18 = 0;
LABEL_37:
    v21 = &v17[v18];
    v17 = v32;
    goto LABEL_9;
  }
  v18 = *((unsigned int *)v17 - 1);
  v19 = &v17[v18];
  if (!*((_DWORD *)v17 - 3))
  {
    v32 = &v17[v18];
    goto LABEL_37;
  }
  if ((_DWORD)v18)
  {
    v20 = 8 * v18;
    while ((unint64_t)*v17 + 1 <= 1)
    {
      ++v17;
      v20 -= 8;
      if (!v20)
      {
        v17 = v19;
        break;
      }
    }
  }
  v21 = v19;
LABEL_9:
  if (v19 == v17)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = **v17;
      v24 = v23[1];
      if (v24 <= 0x3FF)
      {
        if (*((unsigned __int8 *)v23 + 9) >= 2u)
        {
          do
          {
            JSC::MarkedBlock::Handle::isLive((uint64_t)v23, *((_QWORD *)v23 + 11) + 16 * v24, v11, v12, v13, v14, v15, v16);
            v24 += *v23;
          }
          while (v24 < 0x400);
        }
        else
        {
          do
          {
            v25 = *((_QWORD *)v23 + 11) + 16 * v24;
            if (JSC::MarkedBlock::Handle::isLive((uint64_t)v23, v25, v11, v12, v13, v14, v15, v16)
              && *(_BYTE *)(v25 + 5) == 51)
            {
              ++v22;
            }
            v24 += *v23;
          }
          while (v24 <= 0x3FF);
        }
      }
      v26 = v17 + 1;
      v17 = v21;
      if (v26 != v21)
      {
        v17 = v26;
        while ((unint64_t)*v17 + 1 <= 1)
        {
          if (++v17 == v21)
          {
            v17 = v21;
            break;
          }
        }
      }
    }
    while (v17 != v19);
  }
  v27 = *((unsigned int *)this + 49);
  if ((_DWORD)v27)
  {
    v28 = (uint64_t *)*((_QWORD *)this + 23);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      if (((*(_BYTE *)(*v28 + 33) & 1) != 0 || (*(_BYTE *)(v30 + 32) & 1) != 0)
        && *(unsigned __int16 *)(v30 + 34) <= 0x1FFu
        && *(_BYTE *)(v30 + 117) == 51)
      {
        ++v22;
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  JSC::MarkedSpace::didFinishIterating(v9, v10, v11, v12, v13, v14, v15, v16);
  return v22;
}

uint64_t JSC::Heap::protectedObjectCount(JSC::Heap *this)
{
  uint64_t v2;

  v2 = 0;
  JSC::Heap::forEachProtectedCell<JSC::Heap::protectedObjectCount(void)::$_0>((uint64_t)this, &v2);
  return v2;
}

uint64_t JSC::Heap::forEachProtectedCell<JSC::Heap::protectedObjectCount(void)::$_0>(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  v2 = *(_QWORD **)(result + 360);
  if (v2)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[2 * v3];
    if (*((_DWORD *)v2 - 3))
    {
      v5 = *(_QWORD **)(result + 360);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = *(_QWORD **)(result + 360);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = &v2[2 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &v2[2 * v3];
  if (v2)
LABEL_8:
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 != v5)
  {
    v7 = *a2;
    do
    {
      v8 = v5 + 2;
      v5 = v4;
      if (v8 != v4)
      {
        v5 = v8;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
      ++v7;
    }
    while (v5 != v2);
    *a2 = v7;
  }
  v9 = *(_QWORD **)(result + 504);
  if (v9 != (_QWORD *)(result + 504))
  {
    while (1)
    {
      v10 = v9[2];
      if (v10)
        v11 = (v10 & 0xFFFE000000000002) == 0;
      else
        v11 = 0;
      if (!v11)
        goto LABEL_31;
      v12 = *(_QWORD *)(result + 360);
      if (!v12)
        goto LABEL_30;
      v13 = *(_DWORD *)(v12 - 8);
      v14 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(v12 + 16 * v17);
      if (v18 != v10)
        break;
LABEL_31:
      v9 = (_QWORD *)*v9;
      if (v9 == (_QWORD *)(result + 504))
        return result;
    }
    v19 = 1;
    while (v18)
    {
      v17 = (v17 + v19) & v13;
      v18 = *(_QWORD *)(v12 + 16 * v17);
      ++v19;
      if (v18 == v10)
        goto LABEL_31;
    }
LABEL_30:
    ++*a2;
    goto LABEL_31;
  }
  return result;
}

uint64_t *JSC::Heap::protectedObjectTypeCounts@<X0>(JSC::Heap *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  int **v15;
  uint64_t v16;
  int **v17;
  int **v18;
  _QWORD *v19;
  int *v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int *v28;
  int v29;

  result = (uint64_t *)WTF::fastMalloc((WTF *)8);
  v11 = result;
  *result = 0;
  *a2 = result;
  v12 = *((_QWORD *)this + 45);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    v14 = (int **)(v12 + 16 * v13);
    if (*(_DWORD *)(v12 - 12))
    {
      v15 = (int **)*((_QWORD *)this + 45);
      if ((_DWORD)v13)
      {
        v16 = 16 * v13;
        v15 = (int **)*((_QWORD *)this + 45);
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          v16 -= 16;
          if (!v16)
          {
            v15 = v14;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v15 = (int **)(v12 + 16 * v13);
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = (int **)(v12 + 16 * v13);
  if (v12)
  {
LABEL_8:
    v17 = (int **)(v12 + 16 * *(unsigned int *)(v12 - 4));
    goto LABEL_12;
  }
  v17 = 0;
LABEL_12:
  while (v15 != v17)
  {
    v18 = v15 + 2;
    v15 = v14;
    if (v18 != v14)
    {
      v15 = v18;
      while ((unint64_t)*v15 + 1 <= 1)
      {
        v15 += 2;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
  v19 = (_QWORD *)*((_QWORD *)this + 63);
  if (v19 != (_QWORD *)((char *)this + 504))
  {
    while (1)
    {
      v20 = (int *)v19[2];
      if (v20)
        v21 = ((unint64_t)v20 & 0xFFFE000000000002) == 0;
      else
        v21 = 0;
      if (!v21)
        goto LABEL_32;
      v22 = *((_QWORD *)this + 45);
      if (!v22)
        goto LABEL_31;
      v23 = *(_DWORD *)(v22 - 8);
      v24 = ((unint64_t)v20 + ~((_QWORD)v20 << 32)) ^ (((unint64_t)v20 + ~((_QWORD)v20 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(int **)(v22 + 16 * v27);
      if (v28 != v20)
        break;
LABEL_32:
      v19 = (_QWORD *)*v19;
      if (v19 == (_QWORD *)((char *)this + 504))
        return result;
    }
    v29 = 1;
    while (v28)
    {
      v27 = (v27 + v29) & v23;
      v28 = *(int **)(v22 + 16 * v27);
      ++v29;
      if (v28 == v20)
        goto LABEL_32;
    }
LABEL_31:
    goto LABEL_32;
  }
  return result;
}

void JSC::Heap::objectTypeCounts(JSC::Heap *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;

  v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v4 = 0;
  *a2 = v4;
  this = (JSC::Heap *)((char *)this + 160);
  JSC::MarkedSpace::willStartIterating(this, v5, v6, v7, v8, v9, v10, v11);
  v25 = a2;
  JSC::MarkedSpace::forEachLiveCell<JSC::Heap::objectTypeCounts(void)::$_0>((unint64_t)this, &v25, v12, v13, v14, v15, v16, v17);
  JSC::MarkedSpace::didFinishIterating(this, v18, v19, v20, v21, v22, v23, v24);
}

unint64_t JSC::MarkedSpace::forEachLiveCell<JSC::Heap::objectTypeCounts(void)::$_0>(unint64_t result, uint64_t ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int ***v9;
  uint64_t v10;
  unsigned int ***v11;
  uint64_t v12;
  unsigned int ***v13;
  unsigned int *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int ***v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v9 = *(unsigned int ****)(result + 104);
  v42 = result;
  if (!v9)
  {
    v11 = 0;
    result = 0;
    v10 = 0;
LABEL_59:
    v13 = &v9[v10];
    v9 = (unsigned int ***)result;
    goto LABEL_9;
  }
  v10 = *((unsigned int *)v9 - 1);
  v11 = &v9[v10];
  if (!*((_DWORD *)v9 - 3))
  {
    result = (unint64_t)&v9[v10];
    goto LABEL_59;
  }
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    while ((unint64_t)*v9 + 1 <= 1)
    {
      ++v9;
      v12 -= 8;
      if (!v12)
      {
        v9 = v11;
        break;
      }
    }
  }
  v13 = v11;
LABEL_9:
  while (v9 != v11)
  {
    v14 = **v9;
    v15 = v14[1];
    if (v15 <= 0x3FF)
    {
      if (*((unsigned __int8 *)v14 + 9) < 2u)
      {
        while (1)
        {
          v16 = (_DWORD *)(*((_QWORD *)v14 + 11) + 16 * v15);
          result = JSC::MarkedBlock::Handle::isLive((uint64_t)v14, (uint64_t)v16, a3, a4, a5, a6, a7, a8);
          if ((_DWORD)result)
            break;
LABEL_34:
          v15 += *v14;
          if (v15 >= 0x400)
            goto LABEL_44;
        }
        v17 = *(unsigned int *)(16 * (*v16 & 0xFFFFFFFE) + 0x4C);
        if ((_DWORD)v17)
        {
          v18 = *(const char **)(16 * v17);
          if (v18)
            v19 = v18;
          else
            v19 = "[unknown]";
        }
        else
        {
          v19 = "[unknown]";
        }
        v20 = **a2;
        v21 = *v20;
        if (*v20
          || (result = (unint64_t)WTF::HashTable<char const*,WTF::KeyValuePair<char const*,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<char const*,unsigned int>>,WTF::DefaultHash<char const*>,WTF::HashMap<char const*,unsigned int,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<char const*>>::expand(**a2, 0, a3, a4, a5, a6, a7, a8), (v21 = *v20) != 0))
        {
          v22 = *(_DWORD *)(v21 - 8);
        }
        else
        {
          v22 = 0;
        }
        v23 = (unint64_t)&v19[~((_QWORD)v19 << 32)] ^ ((unint64_t)&v19[~((_QWORD)v19 << 32)] >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = v21 + 16 * v26;
        v28 = *(const char **)v27;
        if (*(_QWORD *)v27)
        {
          v29 = 0;
          v30 = 1;
          while (v28 != v19)
          {
            if (v28 == (const char *)-1)
              v29 = (_QWORD *)v27;
            v26 = (v26 + v30) & v22;
            v27 = v21 + 16 * v26;
            v28 = *(const char **)v27;
            ++v30;
            if (!*(_QWORD *)v27)
            {
              if (v29)
              {
                *v29 = 0;
                v29[1] = 0;
                --*(_DWORD *)(*v20 - 16);
                v27 = (uint64_t)v29;
              }
              goto LABEL_27;
            }
          }
          goto LABEL_33;
        }
LABEL_27:
        *(_QWORD *)v27 = v19;
        *(_DWORD *)(v27 + 8) = 0;
        v31 = *v20;
        if (*v20)
          v32 = *(_DWORD *)(v31 - 12) + 1;
        else
          v32 = 1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v20;
        if (*v20)
          v34 = *(_DWORD *)(v33 - 12);
        else
          v34 = 0;
        v35 = (*(_DWORD *)(v33 - 16) + v34);
        v36 = *(unsigned int *)(v33 - 4);
        if (v36 > 0x400)
        {
          if (v36 > 2 * v35)
            goto LABEL_33;
        }
        else if (3 * v36 > 4 * v35)
        {
LABEL_33:
          ++*(_DWORD *)(v27 + 8);
          goto LABEL_34;
        }
        result = (unint64_t)WTF::HashTable<char const*,WTF::KeyValuePair<char const*,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<char const*,unsigned int>>,WTF::DefaultHash<char const*>,WTF::HashMap<char const*,unsigned int,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<char const*>>::expand(v20, v27, a3, a4, a5, a6, a7, a8);
        v27 = result;
        goto LABEL_33;
      }
      do
      {
        result = JSC::MarkedBlock::Handle::isLive((uint64_t)v14, *((_QWORD *)v14 + 11) + 16 * v15, a3, a4, a5, a6, a7, a8);
        v15 += *v14;
      }
      while (v15 <= 0x3FF);
    }
LABEL_44:
    v37 = v9 + 1;
    v9 = v13;
    if (v37 != v13)
    {
      v9 = v37;
      while ((unint64_t)*v9 + 1 <= 1)
      {
        if (++v9 == v13)
        {
          v9 = v13;
          break;
        }
      }
    }
  }
  v38 = *(unsigned int *)(v42 + 36);
  if ((_DWORD)v38)
  {
    v39 = *(uint64_t **)(v42 + 24);
    v40 = 8 * v38;
    do
    {
      v41 = *v39;
      if (((*(_BYTE *)(*v39 + 33) & 1) != 0 || (*(_BYTE *)(v41 + 32) & 1) != 0)
        && *(unsigned __int16 *)(v41 + 34) <= 0x1FFu)
      {
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  return result;
}

void JSC::Heap::deleteAllCodeBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t j;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::JITWorklist *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::MarkedSpace *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8x8_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  JSC::MarkedSpace *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  char **v72;
  char *v73;

  j = a1;
  if ((_DWORD)a2 != 1 || *(unsigned __int8 *)(a1 + 155) == 255)
  {
    JSC::Heap::preventCollection(a1, a2, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(j + 90376))
    {
      __break(0xC471u);
      goto LABEL_49;
    }
    if (*(unsigned __int8 *)(j + 155) != 255)
    {
      __break(0xC471u);
      JUMPOUT(0x1985ABE34);
    }
    v15 = j + 35568;
    v16 = (JSC::VM *)(j - 192);
    if (BYTE1(dword_1ECF4C240))
    {
      v17 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
      if (v17 != -1)
      {
        v73 = &v71;
        v72 = &v73;
        std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
      }
      v18 = (JSC::JITWorklist *)JSC::theGlobalJITWorklist;
      ++*(_DWORD *)(j + 724);
      JSC::JITWorklist::waitUntilAllPlansForVMAreReady(v18, (JSC::VM *)(j - 192), v9, v10, v11, v12, v13, v14);
      JSC::JITWorklist::completeAllReadyPlansForVM((uint64_t)v18, j - 192, 0, 0);
      v19 = *(_DWORD *)(j + 724) - 1;
      *(_DWORD *)(j + 724) = v19;
      if (*(unsigned __int8 *)(j + 1006) | HIBYTE(dword_1ECF4C5CE))
        v20 = v19 == 0;
      else
        v20 = 0;
      if (v20)
      {
        *(_BYTE *)(j + 1006) = 0;
        JSC::Heap::collectIfNecessaryOrDefer(j, 0);
      }
    }
    v21 = *(_QWORD *)(j + 35968);
    if (v21)
      JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)::$_0::operator()<JSC::Heap::ScriptExecutableSpaceAndSets>(j, v21, v9, v10, v11, v12, v13, v14);
    JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)::$_0::operator()<JSC::Heap::ScriptExecutableSpaceAndSets>(j, j + 35984, v9, v10, v11, v12, v13, v14);
    v28 = *(_QWORD *)(j + 35976);
    if (v28)
      JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)::$_0::operator()<JSC::Heap::ScriptExecutableSpaceAndSets>(j, v28, v22, v23, v24, v25, v26, v27);
    JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)::$_0::operator()<JSC::Heap::ScriptExecutableSpaceAndSets>(j, j + 36496, v22, v23, v24, v25, v26, v27);
    v29 = (JSC::MarkedSpace *)(j + 160);
    JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(j + 160), v30, v31, v32, v33, v34, v35, v36);
    if (*(_QWORD *)v15)
    {
      v67 = (JSC::MarkedSpace *)(j + 160);
      v68 = j;
      v66 = *(_QWORD *)v15;
      for (i = *(_QWORD *)(*(_QWORD *)v15 + 32); i; i = *(_QWORD *)(i + 88))
      {
        v46 = *(unsigned int *)(i + 48);
        if ((_DWORD)v46)
        {
          v47 = 0;
          v69 = (unint64_t)(v46 + 31) >> 5;
          v70 = *(_QWORD *)(i + 32);
          do
          {
            v48 = *(_DWORD *)(v70 + 40 * v47);
            if (v48)
            {
              v49 = 32 * v47;
              do
              {
                if ((v48 & 1) != 0)
                {
                  if (v49 >= *(unsigned int *)(i + 12))
                  {
                    __break(0xC471u);
LABEL_49:
                    JUMPOUT(0x1985ABE14);
                  }
                  v50 = *(unsigned int **)(*(_QWORD *)i + 8 * v49);
                  v51 = v50[1];
                  if (v51 <= 0x3FF)
                  {
                    do
                    {
                      v52 = *((_QWORD *)v50 + 11) + 16 * v51;
                      if (JSC::MarkedBlock::Handle::isLive((uint64_t)v50, v52, v38, v39, v40, v41, v42, v43))
                      {
                        v53 = *(_QWORD *)(v52 + 16);
                        if (*(_DWORD *)(v53 + 112))
                        {
                          v54 = 0;
                          v55 = 192;
                          do
                          {
                            JSC::CallLinkInfoBase::unlinkOrUpgrade((JSC::CallLinkInfoBase *)(v53 + v55), v16, 0, 0, v40, v41, v42, v43, v44);
                            ++v54;
                            v53 = *(_QWORD *)(v52 + 16);
                            v55 += 120;
                          }
                          while (v54 < *(unsigned int *)(v53 + 112));
                        }
                      }
                      v51 += *v50;
                    }
                    while (v51 < 0x400);
                  }
                }
                ++v49;
                v56 = v48 > 1;
                v48 >>= 1;
              }
              while (v56);
            }
            ++v47;
          }
          while (v47 != v69);
        }
      }
      v29 = v67;
      v57 = *(uint64_t **)(v66 + 48);
      for (j = v68; v57 != (uint64_t *)(v66 + 48); v57 = (uint64_t *)*v57)
      {
        if ((*((_BYTE *)v57 + 33) & 1) != 0 || (v57[4] & 1) != 0)
          JSC::JSWebAssemblyInstance::clearJSCallICs((JSC::JSWebAssemblyInstance *)(v57 + 14), v16, v44, v38, v39, v40, v41, v42, v43);
      }
    }
    JSC::MarkedSpace::didFinishIterating(v29, v37, v38, v39, v40, v41, v42, v43);
    if (*(_BYTE *)(j + 561))
    {
      v64 = (unsigned __int8 *)(j + 1126);
      v65 = __ldxr((unsigned __int8 *)(j + 1126));
      if (v65 == 1)
      {
        if (!__stlxr(0, v64))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v64, 0, v58, v59, v60, v61, v62, v63);
    }
  }
}

void JSC::Heap::deleteAllUnlinkedCodeBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::MarkedSpace *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  JSC::MarkedSpace *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;

  v8 = a1;
  if ((_DWORD)a2 != 1 || *(unsigned __int8 *)(a1 + 155) == 255)
  {
    JSC::Heap::preventCollection(a1, a2, a3, a4, a5, a6, a7, a8);
    if (*(unsigned __int8 *)(v8 + 155) == 255)
    {
      v16 = v8 - 192;
      v17 = (JSC::MarkedSpace *)(v8 + 160);
      JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(v8 + 160), v9, v10, v11, v12, v13, v14, v15);
      v25 = *(_QWORD *)(v8 + 37280);
      v73 = v8 + 37272;
      v26 = *(_QWORD *)(v8 + 37296) + 31;
      if (v26 >= 0x20)
      {
        v69 = (JSC::MarkedSpace *)(v8 + 160);
        v70 = v8;
        v27 = 0;
        v71 = v8 + 37272;
        v72 = v26 >> 5;
        v68 = v8 - 192;
        v28 = (_QWORD *)(v8 + 37312);
        do
        {
          v29 = *(_DWORD *)(*(_QWORD *)(v73 + 16) + 4 * v27);
          if (v29)
          {
            v30 = 32 * v27;
            do
            {
              if ((v29 & 1) != 0)
              {
                if (*(_DWORD *)(v25 + 100) <= v30)
                  goto LABEL_60;
                v31 = *(unsigned int **)(*(_QWORD *)(v25 + 88) + 8 * v30);
                v32 = v31[1];
                if (v32 <= 0x3FF)
                {
                  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 40) + (v30 & 0xFFFFFFF8) + 8) + 8 * (v30 & 7));
                  do
                  {
                    if (((*(_QWORD *)(v33 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
                    {
                      v34 = *((_QWORD *)v31 + 11) + 16 * v32;
                      if (JSC::MarkedBlock::Handle::isLive((uint64_t)v31, v34, v19, v20, v21, v22, v23, v24))
                      {
                        *(_QWORD *)(v34 + 56) = 0;
                        *(_QWORD *)(v34 + 64) = 0;
                        if ((v34 & 8) != 0)
                        {
                          v40 = *(unsigned __int8 *)(v34 - 76);
                          v41 = 1 << v40;
                          v42 = (unsigned int *)(v71 + ((v40 >> 3) & 0x1C));
                          while (1)
                          {
                            v43 = *v42;
                            if ((*v42 & v41) == 0)
                              break;
                            v44 = __ldxr(v42);
                            if (v44 == v43)
                            {
                              if (!__stxr(v43 & ~v41, v42))
                                break;
                            }
                            else
                            {
                              __clrex();
                            }
                          }
                        }
                        else
                        {
                          v35 = *(_QWORD *)(*(_QWORD *)(*v28
                                                      + (*(_DWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                                      + 8)
                                          + 8 * (*(_DWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFC000) + 12) & 7));
                          if (v35)
                          {
                            v36 = 1 << (v34 >> 4);
                            v37 = (unint64_t *)(v35 + 8 * ((v34 >> 10) & 0xF));
                            while (1)
                            {
                              v38 = *v37;
                              if ((*v37 & v36) == 0)
                                break;
                              v39 = __ldxr(v37);
                              if (v39 == v38)
                              {
                                if (!__stxr(v38 & ~v36, v37))
                                  break;
                              }
                              else
                              {
                                __clrex();
                              }
                            }
                          }
                        }
                      }
                    }
                    v32 += *v31;
                  }
                  while (v32 < 0x400);
                }
              }
              ++v30;
              v45 = v29 > 1;
              v29 >>= 1;
            }
            while (v45);
          }
          ++v27;
        }
        while (v27 != v72);
        v25 = *(_QWORD *)(v73 + 8);
        v17 = v69;
        v8 = v70;
        v16 = v68;
      }
      v48 = *(uint64_t **)(v25 + 48);
      v47 = (uint64_t *)(v25 + 48);
      v46 = v48;
      if (v48 == v47)
      {
LABEL_53:
        JSC::MarkedSpace::didFinishIterating(v17, v18, v19, v20, v21, v22, v23, v24);
        if (!*(_BYTE *)(v8 + 561))
          return;
        v66 = (unsigned __int8 *)(v8 + 1126);
        v67 = __ldxr((unsigned __int8 *)(v8 + 1126));
        if (v67 == 1)
        {
          if (!__stlxr(0, v66))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v66, 0, v60, v61, v62, v63, v64, v65);
        return;
      }
      v49 = (unsigned int *)(v16 + 37464);
      while (1)
      {
        v50 = *((unsigned __int8 *)v46 + 36);
        if (v50 >= 0x20)
          break;
        v51 = 1 << v50;
        if ((*(_DWORD *)v73 & v51) != 0 && ((*((_BYTE *)v46 + 33) & 1) != 0 || (v46[4] & 1) != 0))
        {
          v52 = (unint64_t)(v46 + 14);
          v46[21] = 0;
          v46[22] = 0;
          if ((((_DWORD)v46 + 112) & 8) != 0)
          {
            while (1)
            {
              v58 = *v49;
              if ((*v49 & v51) == 0)
                break;
              v59 = __ldxr(v49);
              if (v59 == v58)
              {
                if (!__stxr(v58 & ~v51, v49))
                  break;
              }
              else
              {
                __clrex();
              }
            }
          }
          else
          {
            v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 37504)
                                        + (*(_DWORD *)(*(_QWORD *)(v52 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                        + 8)
                            + 8 * (*(_DWORD *)(*(_QWORD *)(v52 & 0xFFFFFFFFFFFFC000) + 12) & 7));
            if (v53)
            {
              v54 = 1 << (v52 >> 4);
              v55 = (unint64_t *)(v53 + 8 * ((v52 >> 10) & 0xF));
              while (1)
              {
                v56 = *v55;
                if ((*v55 & v54) == 0)
                  break;
                v57 = __ldxr(v55);
                if (v57 == v56)
                {
                  if (!__stxr(v56 & ~v54, v55))
                    break;
                }
                else
                {
                  __clrex();
                }
              }
            }
          }
        }
        v46 = (uint64_t *)*v46;
        if (v46 == v47)
          goto LABEL_53;
      }
      __break(1u);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1985AC218);
  }
}

uint64_t JSC::Heap::addToRememberedSet(uint64_t this, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v8;
  _QWORD *v9;

  ++*(_QWORD *)(this + 1096);
  if (!*(_BYTE *)(this + 563))
    goto LABEL_2;
  __dmb(0xBu);
  if ((a2 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 - 79) & 1) == 0)
      goto LABEL_8;
LABEL_2:
    *(_BYTE *)(a2 + 7) = 2;
    v3 = *(_QWORD **)(this + 416);
    v4 = v3[2];
    if (v4 == 510)
    {
      this = WTF::fastMalloc((WTF *)0x1000);
      v4 = 0;
      *(_QWORD *)this = 0;
      *(_QWORD *)(this + 8) = 0;
      ++v3[3];
      v8 = (_QWORD *)*v3;
      v9 = v3 + 1;
      if (*v3)
        v9 = (_QWORD *)*v3;
      *v9 = this;
      *v3 = this;
      *(_QWORD *)this = 0;
      *(_QWORD *)(this + 8) = v8;
    }
    v5 = *v3 + 8 * v4;
    v3[2] = v4 + 1;
    *(_QWORD *)(v5 + 16) = a2;
    return this;
  }
  if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(this + 240)
    && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
  {
    goto LABEL_2;
  }
LABEL_8:
  if (*(_BYTE *)(this + 155) == 1)
  {
    v6 = (unsigned __int8 *)(a2 + 7);
    do
    {
      if (__ldaxr(v6))
      {
        __clrex();
        return this;
      }
    }
    while (__stlxr(1u, v6));
    if ((a2 & 8) != 0)
    {
      if ((*(_BYTE *)(a2 - 79) & 1) != 0)
LABEL_15:
        *v6 = 0;
    }
    else if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(this + 240)
           && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
    {
      goto LABEL_15;
    }
  }
  else
  {
    this = 1131;
    __break(0xC471u);
  }
  return this;
}

void JSC::Heap::sweepSynchronously(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::BlockDirectory *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  double v40;
  char *v41;

  if (HIBYTE(word_1ECF4C5CC))
  {
    v9 = 0.0;
    if ((_BYTE)word_1ECF4C5CC)
    {
      v18 = *((_QWORD *)this + 29);
      v19 = *((_QWORD *)this + 43);
      v20 = *((_QWORD *)this + 44);
      v21 = __CFADD__(v19, v20);
      v22 = v19 + v20;
      if (v21)
      {
        v24 = -1;
      }
      else
      {
        v23 = *((_QWORD *)this + 42);
        v21 = __CFADD__(v22, v23);
        v24 = v22 + v23;
        if (v21)
          v24 = -1;
      }
      v21 = __CFADD__(v24, v18);
      v25 = v24 + v18;
      if (v21)
        v25 = -1;
      v41 = (char *)(v25 >> 10);
      WTF::dataLog<char [13],unsigned long,char [4]>(&v41);
      v26 = mach_absolute_time();
      v28 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v28 != -1)
      {
        v40 = COERCE_DOUBLE(&v41);
        v41 = &v39;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v27) = dword_1ECF4400C;
      v9 = (double)(v26 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v27 * 1000000000.0);
    }
    JSC::MarkedSpace::sweepBlocks((JSC::Heap *)((char *)this + 160), a2, a3, a4, a5, a6, a7, a8);
    for (i = (JSC::BlockDirectory *)*((_QWORD *)this + 38); i; i = (JSC::BlockDirectory *)*((_QWORD *)i + 10))
      JSC::BlockDirectory::shrink(i, v10, v11, v12, v13, v14, v15, v16);
    if ((_BYTE)word_1ECF4C5CC)
    {
      v29 = mach_absolute_time();
      v31 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v31 != -1)
      {
        v41 = &v39;
        v40 = COERCE_DOUBLE(&v41);
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v30) = dword_1ECF4400C;
      v32 = *((_QWORD *)this + 29);
      v33 = *((_QWORD *)this + 43);
      v34 = *((_QWORD *)this + 44);
      v21 = __CFADD__(v33, v34);
      v35 = v33 + v34;
      if (v21)
      {
        v37 = -1;
      }
      else
      {
        v36 = *((_QWORD *)this + 42);
        v21 = __CFADD__(v35, v36);
        v37 = v35 + v36;
        if (v21)
          v37 = -1;
      }
      v21 = __CFADD__(v37, v32);
      v38 = v37 + v32;
      if (v21)
        v38 = -1;
      v41 = (char *)(v38 >> 10);
      v40 = ((double)(v29 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v30 * 1000000000.0) - v9)
          * 1000.0;
      WTF::dataLog<char [4],unsigned long,char [5],double,char [3]>(&v41, &v40);
    }
  }
}

uint64_t WTF::dataLog<char [13],unsigned long,char [4]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Full sweep: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "kb ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [4],unsigned long,char [5],double,char [3]>(_QWORD *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "=> ");
  WTF::PrintStream::printf(v6, "%lu", *a1);
  WTF::PrintStream::printf(v6, "%s", "kb, ");
  WTF::PrintStream::printf(v6, "%lf", *a2);
  WTF::PrintStream::printf(v6, "%s", "ms");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::Heap::collect(JSC::Heap *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35[8];
  unsigned int *v36;
  __int16 v37;
  unsigned int *v38;

  if (HIBYTE(word_1ECF4C5CC))
  {
    if (a2 != 1)
    {
      if (a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1985AC8C8);
      }
      *(_WORD *)v35 = *(_WORD *)a3;
      v10 = *(unsigned int **)(a3 + 8);
      if (!v10)
      {
        v36 = 0;
        JSC::Heap::collectAsync((uint64_t)a1, v35, a3, a4, a5, a6, a7, a8);
        return;
      }
      v25 = v10 + 2;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      v36 = v10;
      JSC::Heap::collectAsync((uint64_t)a1, v35, a3, a4, a5, a6, a7, a8);
      v36 = 0;
      do
      {
        v27 = __ldaxr(v25);
        v24 = --v27 == 0;
      }
      while (__stlxr(v27, v25));
      goto LABEL_15;
    }
    v9 = *(_WORD *)a3;
    v10 = *(unsigned int **)(a3 + 8);
    if (v10)
    {
      v11 = v10 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      if (HIBYTE(word_1ECF4C5CC))
      {
        if (*((_BYTE *)a1 + 561))
        {
          v37 = v9;
          do
            v13 = __ldaxr(v11);
          while (__stlxr(v13 + 1, v11));
          v38 = v10;
          v14 = JSC::Heap::requestCollection((uint64_t)a1, (uint64_t)&v37, a3, a4, a5, a6, a7, a8);
          JSC::Heap::waitForCollection(a1, v14, v15, v16, v17, v18, v19, v20);
          v38 = 0;
          do
          {
            v21 = __ldaxr(v11);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v11));
          if (!v22)
          {
            atomic_store(1u, v10 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
          }
        }
      }
      do
      {
        v23 = __ldaxr(v11);
        v24 = --v23 == 0;
      }
      while (__stlxr(v23, v11));
LABEL_15:
      if (v24)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
      return;
    }
    if (*((_BYTE *)a1 + 561))
    {
      v37 = *(_WORD *)a3;
      v38 = 0;
      v28 = JSC::Heap::requestCollection((uint64_t)a1, (uint64_t)&v37, a3, a4, a5, a6, a7, a8);
      JSC::Heap::waitForCollection(a1, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::Heap::collectAsync(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  __int16 v27;
  unsigned int *v28;

  if (!HIBYTE(word_1ECF4C5CC) || !*(_BYTE *)(a1 + 561))
    return;
  v10 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1024) + 4);
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_6;
  }
  if (__stxr(1u, v10))
    goto LABEL_5;
LABEL_6:
  v12 = *(_QWORD *)(a1 + 936);
  v13 = *(_QWORD *)(a1 + 944);
  if (v12 == v13)
  {
LABEL_18:
    v19 = 1;
  }
  else if (*((_QWORD *)a2 + 1))
  {
    v26 = *(unsigned int *)(a1 + 960);
    v19 = 1;
    do
    {
      v12 += v26 + 1;
      do
        v12 -= v26;
      while (v12 >= v26);
    }
    while (v13 != v12);
  }
  else
  {
    while (1)
    {
      v14 = (unsigned __int8 *)(*(_QWORD *)(a1 + 952) + 16 * v12);
      v15 = v14[1];
      v16 = *v14;
      if (v15 && v16 == 1)
        break;
      if (a2[1])
        v15 = *a2;
      if (!v15)
        break;
      v18 = *(unsigned int *)(a1 + 960);
      v12 += v18 + 1;
      do
        v12 -= v18;
      while (v12 >= v18);
      if (v13 == v12)
        goto LABEL_18;
    }
    v19 = 0;
  }
  v20 = __ldxr(v10);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v10))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  if (v19)
  {
    v27 = *(_WORD *)a2;
    v21 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v21)
    {
      v22 = v21 + 2;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v28 = v21;
      JSC::Heap::requestCollection(a1, (uint64_t)&v27, a3, a4, a5, a6, a7, a8);
      v28 = 0;
      do
      {
        v24 = __ldaxr(v22);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v22));
      if (!v25)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
      }
    }
    else
    {
      v28 = 0;
      JSC::Heap::requestCollection(a1, (uint64_t)&v27, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::Heap::collectSync(uint64_t result, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unsigned int *v29;

  if (HIBYTE(word_1ECF4C5CC))
  {
    v8 = (JSC::Heap *)result;
    if (*(_BYTE *)(result + 561))
    {
      v28 = *a2;
      v9 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v9)
      {
        v10 = v9 + 2;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v29 = v9;
        v12 = JSC::Heap::requestCollection(result, (uint64_t)&v28, a3, a4, a5, a6, a7, a8);
        result = JSC::Heap::waitForCollection(v8, v12, v13, v14, v15, v16, v17, v18);
        v29 = 0;
        do
        {
          v19 = __ldaxr(v10);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v10));
        if (!v20)
        {
          atomic_store(1u, v9 + 2);
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      else
      {
        v29 = 0;
        v21 = JSC::Heap::requestCollection(result, (uint64_t)&v28, a3, a4, a5, a6, a7, a8);
        return JSC::Heap::waitForCollection(v8, v21, v22, v23, v24, v25, v26, v27);
      }
    }
  }
  return result;
}

void JSC::Heap::collectNow(JSC::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  __int16 v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v49;
  int v50;
  unsigned __int8 v51[8];
  unsigned int *v52;
  char *v53;
  unsigned int *v54;
  char v55;
  const void **v56;

  if (!HIBYTE(word_1ECF4C5CC))
    return;
  if ((_DWORD)a2 != 1)
  {
    if ((_DWORD)a2)
    {
      __break(0xC471u);
    }
    else
    {
      *(_WORD *)v51 = *(_WORD *)a3;
      v9 = *(unsigned int **)(a3 + 8);
      if (v9)
      {
        v10 = v9 + 2;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v52 = v9;
        JSC::Heap::collectAsync((uint64_t)this, v51, a3, a4, a5, a6, a7, a8);
        v52 = 0;
        do
        {
          v19 = __ldaxr(v10);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v10));
        if (!v20)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      else
      {
        v52 = 0;
        JSC::Heap::collectAsync((uint64_t)this, v51, a3, a4, a5, a6, a7, a8);
      }
      JSC::Heap::stopIfNecessary((uint64_t)this, v12, v13, v14, v15, v16, v17, v18);
    }
    return;
  }
  v21 = *(_WORD *)a3;
  v22 = *(unsigned int **)(a3 + 8);
  if (v22)
  {
    v23 = v22 + 2;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    if (HIBYTE(word_1ECF4C5CC))
    {
      if (*((_BYTE *)this + 561))
      {
        LOWORD(v53) = v21;
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 + 1, v23));
        v54 = v22;
        v26 = JSC::Heap::requestCollection((uint64_t)this, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
        JSC::Heap::waitForCollection(this, v26, v27, v28, v29, v30, v31, v32);
        v54 = 0;
        do
        {
          v33 = __ldaxr(v23);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v23));
        if (!v34)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
    }
    do
    {
      v35 = __ldaxr(v23);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v23));
    if (!v36)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  else if (*((_BYTE *)this + 561))
  {
    LOWORD(v53) = *(_WORD *)a3;
    v54 = 0;
    v39 = JSC::Heap::requestCollection((uint64_t)this, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    JSC::Heap::waitForCollection(this, v39, v40, v41, v42, v43, v44, v45);
  }
  ++*((_DWORD *)this + 181);
  if (!HIBYTE(dword_1ECF4C5C0))
    goto LABEL_27;
  v46 = *((_QWORD *)this + 81);
  *(_QWORD *)(v46 + 40) = 0;
  v47 = (unsigned __int8 *)(v46 + 33);
  if (__ldaxr((unsigned __int8 *)(v46 + 33)))
  {
    __clrex();
LABEL_47:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v46 + 33);
    goto LABEL_48;
  }
  if (__stxr(1u, v47))
    goto LABEL_47;
LABEL_48:
  *(_BYTE *)(v46 + 34) = 0;
  v49 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v49 != -1)
  {
    v53 = &v55;
    v56 = (const void **)&v53;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v46, a3, a4, a5, a6, a7, a8);
  v50 = __ldxr(v47);
  if (v50 == 1)
  {
    if (!__stlxr(0, v47))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v46 + 33), 0, a3, a4, a5, a6, a7, a8);
LABEL_27:
  if (byte_1ECF4C5C4)
    v37 = 1;
  else
    v37 = BYTE1(dword_1ECF4C240) == 0;
  if (!v37 && BYTE1(dword_1ECF4C723) == 0)
  {
    if ((_BYTE)word_1ECF4C5CC)
    {
      v53 = (char *)this;
      WTF::dataLog<char [5],WTF::RawPointer,char [4]>((const void **)&v53);
    }
    JSC::Heap::sweepSynchronously(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if ((_BYTE)word_1ECF4C5CC)
      WTF::dataLog<char [16]>("]\n");
  }
  JSC::Heap::sweepAllLogicallyEmptyWeakBlocks(this, a2, a3, a4, a5, a6, a7, a8);
  --*((_DWORD *)this + 181);
}

uint64_t JSC::Heap::stopIfNecessary(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  WTF::AtomStringImpl *v15;

  if (*(_DWORD *)(this + 904) != 4)
  {
    v8 = this;
    do
    {
      v9 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)(v8 + 904));
      if ((v9 & 4) == 0)
        goto LABEL_17;
      if ((v9 & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985AD004);
      }
      v10 = JSC::Heap::handleNeedFinalize((JSC::Heap *)v8, v9, a3, a4, a5, a6, a7, a8);
      v12 = v10;
      if ((v9 & 1) != 0 && (v10 & 1) == 0)
        JSC::Heap::collectInMutatorThread((JSC::Heap *)v8, v11, a3, a4, a5, a6, a7, a8);
    }
    while ((v12 & 1) != 0);
    v13 = atomic_load((unsigned int *)(v8 + 904));
    if ((v13 & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1985AD024);
    }
    v14 = atomic_load((unsigned int *)(v8 + 904));
    if ((v14 & 2) != 0)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1985ACFE4);
    }
    do
    {
      v15 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)(v8 + 904));
      this = JSC::Heap::handleNeedFinalize((JSC::Heap *)v8, v15, a3, a4, a5, a6, a7, a8);
    }
    while ((this & 1) != 0);
    *(_BYTE *)(v8 + 1005) = 1;
  }
  return this;
}

uint64_t JSC::Heap::sweeper(JSC::Heap *this)
{
  return *((_QWORD *)this + 81);
}

uint64_t WTF::dataLog<char [5],WTF::RawPointer,char [4]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "[GC<");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", ">: ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::Heap::requestCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v35;
  unsigned __int8 *v36;
  char v37;

  JSC::Heap::stopIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 41720);
  v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v17)
    v17 = WTF::Thread::initializeCurrentTLS(0);
  if (v16 != *(_QWORD *)(v17 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD2D8);
  }
  v18 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1024) + 4);
  v36 = v18;
  v37 = 1;
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
LABEL_7:
  if (*(_QWORD *)(a1 + 984) == *(_QWORD *)(a1 + 992) && !*(_BYTE *)(a1 + 1003))
  {
    v20 = (unsigned int *)(a1 + 904);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 | 1, v20));
  }
  v22 = *(_QWORD *)(a1 + 936);
  v23 = *(_QWORD *)(a1 + 944);
  if (v22)
  {
    if (v23 + 1 != v22)
      goto LABEL_13;
    goto LABEL_32;
  }
  v35 = *(unsigned int *)(a1 + 960);
  if (v23)
  {
    if (v23 == v35 - 1)
      goto LABEL_32;
  }
  else
  {
    if (!(_DWORD)v35)
    {
LABEL_32:
      WTF::Deque<JSC::GCRequest,0ul>::expandCapacity((uint64_t *)(a1 + 936));
      v23 = *(_QWORD *)(a1 + 944);
      goto LABEL_13;
    }
    v23 = 0;
  }
LABEL_13:
  v24 = *(_QWORD *)(a1 + 952);
  *(_WORD *)(v24 + 16 * v23) = *(_WORD *)a2;
  v25 = *(_QWORD *)(a2 + 8);
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
  }
  *(_QWORD *)(v24 + 16 * v23 + 8) = v25;
  v28 = *(_QWORD *)(a1 + 944);
  if (v28 == *(unsigned int *)(a1 + 960) - 1)
    v29 = 0;
  else
    v29 = v28 + 1;
  *(_QWORD *)(a1 + 944) = v29;
  ++*(_QWORD *)(a1 + 992);
  v30 = atomic_load((unsigned int *)(a1 + 904));
  if ((v30 & 1) == 0)
    WTF::AutomaticThreadCondition::notifyOne(*(_QWORD *)(a1 + 1032), (uint64_t)&v36, v10, v11, v12, v13, v14, v15);
  v31 = *(_QWORD *)(a1 + 992);
  if (v37)
  {
    v32 = v36;
    v33 = __ldxr(v36);
    if (v33 == 1)
    {
      if (!__stlxr(0, v36))
        return v31;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, v10, v11, v12, v13, v14, v15);
  }
  return v31;
}

uint64_t JSC::Heap::waitForCollection(JSC::Heap *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *i;
  unsigned __int8 *v11;
  unint64_t v13;
  unsigned int v14;
  int v15;
  WTF::AtomStringImpl *v16;
  char v17;
  uint64_t v18;
  char v19;
  JSC::VM *v20;
  uint64_t result;
  unsigned int v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD v28[3];
  _QWORD v29[3];

  for (i = (unsigned int *)((char *)this + 904);
        ;
        WTF::ParkingLot::parkConditionallyImpl((uint64_t)i, (uint64_t)v29, (uint64_t)v28, (WTF::TimeWithDynamicClockType *)&v23))
  {
    do
    {
      v11 = (unsigned __int8 *)(*((_QWORD *)this + 128) + 4);
      if (__ldaxr(v11))
      {
        __clrex();
LABEL_4:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
        goto LABEL_5;
      }
      if (__stxr(1u, v11))
        goto LABEL_4;
LABEL_5:
      v13 = *((_QWORD *)this + 123);
      if (v13 < a2)
      {
        do
          v14 = __ldaxr(i);
        while (__stlxr(v14 | 0x10, i));
      }
      v15 = __ldxr(v11);
      if (v15 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
LABEL_12:
      v16 = (WTF::AtomStringImpl *)atomic_load(i);
      if ((v16 & 4) == 0 || (v16 & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985AD494);
      }
      v17 = JSC::Heap::handleNeedFinalize(this, v16, a3, a4, a5, a6, a7, a8);
      v19 = v17;
      if ((v16 & 1) != 0 && (v17 & 1) == 0)
        JSC::Heap::collectInMutatorThread(this, v18, a3, a4, a5, a6, a7, a8);
    }
    while ((v19 & 1) != 0);
    *((_BYTE *)this + 1005) = 1;
    do
    {
      v20 = (JSC::VM *)atomic_load((unsigned int *)this + 226);
      result = JSC::Heap::relinquishConn(this, v20, a3, a4, a5, a6, a7, a8);
    }
    while ((result & 1) != 0);
    if (v13 >= a2)
      break;
    v26 = i;
    v27 = v16 | 0x10;
    v23 = 0x7FF0000000000000;
    v24 = 0;
    v29[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction;
    v29[1] = v29;
    v29[2] = &v26;
    v28[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#2}>::implFunction;
    v28[1] = v28;
    v28[2] = &v25;
  }
  do
    v22 = __ldaxr(i);
  while (__stlxr(v22 & 0xFFFFFFEF, i));
  return result;
}

uint64_t JSC::Heap::runCurrentPhase(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v11 = atomic_load((unsigned int *)(a1 + 904));
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985AD62CLL);
    }
    if ((v11 & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1985AD5F4);
    }
  }
  else if ((v11 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD658);
  }
  *(_QWORD *)(a1 + 1104) = a3;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(0);
  *(_QWORD *)(a1 + 1112) = v12;
  if ((_DWORD)a2)
  {
    if ((JSC::Heap::finishChangingPhase(a1, (void *)1, a3, a4, a5, a6, a7, a8) & 1) == 0)
      return 0;
  }
  else
  {
    JSC::sanitizeStackForVM((JSC *)(a1 - 192), a2, a3, a4, a5, a6, a7, a8);
    result = JSC::Heap::finishChangingPhase(a1, 0, v13, v14, v15, v16, v17, v18);
    if (!(_DWORD)result)
      return result;
  }
  if (!*(_BYTE *)(a1 + 1001))
    return JSC::Heap::runNotRunningPhase(a1, a2, v20, v21, v22, v23, v24, v25);
  switch(*(_BYTE *)(a1 + 1001))
  {
    case 1:
      result = JSC::Heap::runBeginPhase(a1, a2);
      break;
    case 2:
      if ((_DWORD)a2 || a3)
        result = JSC::Heap::runFixpointPhase(a1, a2, v20, v21, v22, v23, v24, v25);
      else
        result = 2;
      break;
    case 3:
      result = JSC::Heap::runConcurrentPhase(a1, (int)a2, v20, v21, v22, v23, v24, v25);
      break;
    case 4:
      result = JSC::Heap::runReloopPhase((_QWORD **)a1, a2);
      break;
    case 5:
      result = JSC::Heap::runEndPhase(a1, a2);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t JSC::Heap::finishChangingPhase(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int *v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  WTF::AtomStringImpl *v16;
  void *i;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;

  v8 = (int)a2;
  v10 = (unsigned int *)(a1 + 904);
  v11 = atomic_load(v10);
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985AD8C0);
    }
    if ((v11 & 1) == 0)
      goto LABEL_3;
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x1985AD78CLL);
  }
  if ((v11 & 1) == 0)
    goto LABEL_55;
LABEL_3:
  v12 = *(unsigned __int8 *)(a1 + 1002);
  v13 = *(unsigned __int8 *)(a1 + 1001);
  if (v12 == v13)
    return 1;
  ++*(_QWORD *)(a1 + 1016);
  if (v13 >= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD960);
  }
  if (v12 > 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD8E0);
  }
  v15 = 0x36u >> v13;
  if (((1 << v12) & 0x36) == 0)
  {
    if ((v15 & 1) != 0)
    {
      JSC::Heap::resumeThePeriphery((JSC::Heap *)a1, a2, a3, a4, a5, a6, a7, a8);
      if (v8 == 1)
      {
        JSC::Heap::resumeTheMutator((JSC::Heap *)a1, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        do
          v25 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)(a1 + 904));
        while ((JSC::Heap::handleNeedFinalize((JSC::Heap *)a1, v25, v19, v20, v21, v22, v23, v24) & 1) != 0);
      }
    }
    goto LABEL_13;
  }
  if ((v15 & 1) != 0)
    goto LABEL_13;
  if ((_DWORD)a2 != 1)
  {
    JSC::sanitizeStackForVM((JSC *)(a1 - 192), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
    do
      v16 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)(a1 + 904));
    while ((JSC::Heap::handleNeedFinalize((JSC::Heap *)a1, v16, a3, a4, a5, a6, a7, a8) & 1) != 0);
    goto LABEL_12;
  }
  for (i = (void *)atomic_load(v10); (i & 8) != 0; i = (void *)atomic_load(v31))
  {
    v31 = v10;
    WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>((uint64_t)v10, (int)i);
    v10 = v31;
  }
  while (1)
  {
    v26 = atomic_load(v10);
    if ((v26 & 2) != 0)
      break;
    if ((v26 & 1) != 0)
    {
      if ((v26 & 4) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985AD86CLL);
      }
      return 0;
    }
    if ((v26 & 4) != 0)
    {
      v27 = __ldaxr(v10);
      if (v27 != v26)
        goto LABEL_32;
      if (!__stlxr(v26 & 0xFFFFFFEE | 1, v10))
      {
        v29 = *(_QWORD *)(a1 + 656);
        if (!*(_BYTE *)(v29 + 35))
        {
          v30 = v10;
          if (*(_BYTE *)(v29 + 34))
            __dmb(0xBu);
          else
            JSC::JSRunLoopTimer::setTimeUntilFire(*(_QWORD *)(a1 + 656), 0.0);
          v10 = v30;
        }
        WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, i, a3, a4, a5, a6, a7, a8);
        return 0;
      }
    }
    else
    {
      if ((v26 & 0x10) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985AD900);
      }
      v28 = __ldaxr(v10);
      if (v28 == v26)
      {
        if (!__stlxr(v26 | 2, v10))
          goto LABEL_12;
      }
      else
      {
LABEL_32:
        __clrex();
      }
    }
  }
  if ((v26 & 4) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD920);
  }
  if ((v26 & 0x10) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD940);
  }
  if ((v26 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985AD818);
  }
LABEL_12:
  JSC::Heap::stopThePeriphery(a1, i, a3, a4, a5, a6, a7, a8);
LABEL_13:
  *(_BYTE *)(a1 + 1001) = *(_BYTE *)(a1 + 1002);
  return 1;
}

uint64_t JSC::Heap::runNotRunningPhase(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v16;

  v10 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1024) + 4);
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *(_QWORD *)(a1 + 936);
  v13 = *(_QWORD *)(a1 + 944);
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_6;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_6:
  if (v12 == v13)
    return 0;
  v16 = atomic_load((unsigned int *)(a1 + 904));
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985ADAB8);
    }
    if ((v16 & 1) == 0)
      goto LABEL_12;
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1985ADA98);
  }
  if ((v16 & 1) == 0)
    goto LABEL_19;
LABEL_12:
  *(_BYTE *)(a1 + 1000) = *(_BYTE *)(a1 + 1001);
  *(_BYTE *)(a1 + 1002) = 1;
  return JSC::Heap::finishChangingPhase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Heap::runBeginPhase(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  kern_return_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  JSC::SlotVisitor *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unint64_t v98;
  int v99;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD **v110;
  uint64_t i;
  _QWORD *v112;
  _QWORD **v113;
  uint64_t j;
  uint64_t v115;
  _QWORD *v116;
  _QWORD **v117;
  uint64_t k;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  const char *v130;
  JSC::VerifierSlotVisitor *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  _QWORD *v161;
  BOOL v162;
  _QWORD *v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  unint64_t v174;
  char v175;
  const char **v176;
  const char *v177[2];

  v10 = mach_absolute_time();
  v12 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v12 != -1)
  {
    *(_QWORD *)task_info_out = &v176;
    v177[0] = (const char *)task_info_out;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v11) = dword_1ECF4400C;
  *(double *)(a1 + 1072) = (double)(v10 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v11
                          * 1000000000.0);
  v13 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1024) + 4);
  if (__ldaxr(v13))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
    goto LABEL_6;
  }
  if (__stxr(1u, v13))
    goto LABEL_5;
LABEL_6:
  v15 = *(_QWORD *)(a1 + 936);
  if (v15 == *(_QWORD *)(a1 + 944))
  {
    __break(0xC471u);
    JUMPOUT(0x1985AE448);
  }
  v16 = *(_QWORD *)(a1 + 952) + 16 * v15;
  *(_WORD *)(a1 + 968) = *(_WORD *)v16;
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  v20 = *(unsigned int **)(a1 + 976);
  *(_QWORD *)(a1 + 976) = v17;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  v24 = __ldxr(v13);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v13))
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v4, v5, v6, v7, v8, v9);
  if ((_BYTE)word_1ECF4C5CC)
  {
    *(_QWORD *)task_info_out = a1;
    if ((_DWORD)a2)
    {
      if ((_DWORD)a2 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1985AE7E0);
      }
      v130 = "C";
    }
    else
    {
      v130 = "M";
    }
    v177[0] = v130;
    v150 = *(_QWORD *)(a1 + 232);
    v151 = *(_QWORD *)(a1 + 344);
    v152 = *(_QWORD *)(a1 + 352);
    v153 = __CFADD__(v151, v152);
    v154 = v151 + v152;
    if (v153)
    {
      v156 = -1;
    }
    else
    {
      v155 = *(_QWORD *)(a1 + 336);
      v153 = __CFADD__(v154, v155);
      v156 = v154 + v155;
      if (v153)
        v156 = -1;
    }
    v153 = __CFADD__(v156, v150);
    v157 = v156 + v150;
    if (v153)
      v157 = -1;
    v176 = (const char **)(v157 >> 10);
    WTF::dataLog<char [5],WTF::RawPointer,char [10],char const*,char [2],unsigned long,char [4]>((const void **)task_info_out, v177, &v176);
  }
  v25 = mach_absolute_time();
  v34 = v25;
  v35 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v35 != -1)
  {
    *(_QWORD *)task_info_out = &v176;
    v177[0] = (const char *)task_info_out;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v33) = dword_1ECF4400C;
  *(double *)(a1 + 912) = (double)(v34 * WTF::machTimebaseInfo(void)::timebaseInfo)
                        / ((double)v33
                         * 1000000000.0);
  if (!dword_1ECF4C65C)
  {
    v36 = WTF::cryptographicallyRandomNumber<unsigned int>(v25, (uint64_t)v26, v27, v28, v29, v30, v31, v32);
    *(_DWORD *)(a1 - 64) = v36;
    if (v36)
      v37 = v36;
    else
      v37 = 1;
    *(_QWORD *)(a1 - 56) = v37;
    *(_QWORD *)(a1 - 48) = ((v37 >> 26) | (v37 << 23)) ^ ((v37 ^ (v37 << 23)) >> 17);
  }
  if (*(unsigned __int8 *)(a1 + 155) != 255)
  {
    WTF::dataLogLn<char [41],JSC::CollectionScope>(a1 + 155);
    __break(0xC471u);
    JUMPOUT(0x1985AE5A0);
  }
  if ((_BYTE)word_1ECF4C610)
  {
    v131 = (JSC::VerifierSlotVisitor *)WTF::fastMalloc((WTF *)0x218);
    JSC::VerifierSlotVisitor::VerifierSlotVisitor(v131, (JSC::Heap *)a1);
    v132 = *(_QWORD *)(a1 + 440);
    *(_QWORD *)(a1 + 440) = v131;
    if (v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  }
  if ((_BYTE)word_1ECF4C5CC)
    WTF::dataLog<char [16]>("=> ");
  if (!(_BYTE)word_1ECF4C349 || !BYTE1(dword_1ECF4C240) || BYTE1(dword_1ECF4C723))
    goto LABEL_106;
  if (*(_BYTE *)(a1 + 969))
  {
    if (*(_BYTE *)(a1 + 968) == 1)
      goto LABEL_106;
    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 154))
    goto LABEL_106;
  v38 = *(_DWORD *)(a1 + 1120) + 1;
  *(_DWORD *)(a1 + 1120) = v38;
  if (v38 <= 0x63)
  {
    if (*(_BYTE *)(a1 + 1124))
      goto LABEL_106;
LABEL_45:
    *(_BYTE *)(a1 + 155) = 0;
    if (!(_BYTE)word_1ECF4C5CC)
    {
      v45 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 40);
LABEL_47:
      *(_QWORD *)(a1 + 72) = v45;
      goto LABEL_48;
    }
    v146 = "EdenCollection, ";
    goto LABEL_180;
  }
  task_info_outCnt = 93;
  v39 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
  v40 = v174;
  v41 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
  if (v41 != -1)
  {
    v176 = v177;
    v177[0] = &v175;
    std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
  }
  v42 = (double)v40;
  if (v39)
    v42 = 0.0;
  v43 = v42 / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
  if (v43 > 1.0)
    v43 = 1.0;
  v44 = *(double *)&xmmword_1ECF4C398;
  *(_BYTE *)(a1 + 1124) = *(double *)&xmmword_1ECF4C398 < v43;
  *(_DWORD *)(a1 + 1120) = 0;
  if (v44 >= v43)
    goto LABEL_45;
LABEL_106:
  *(_WORD *)(a1 + 154) = 256;
  if (!(_BYTE)word_1ECF4C5CC)
  {
    v45 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 40);
    goto LABEL_108;
  }
  v146 = "FullCollection, ";
LABEL_180:
  WTF::dataLog<char [16]>(v146);
  v45 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 155) != 1)
    goto LABEL_47;
LABEL_108:
  *(_QWORD *)(a1 + 56) = v45;
  *(_QWORD *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v95 = *(_QWORD *)(a1 + 632);
  if (!v95)
    goto LABEL_48;
  *(_QWORD *)(v95 + 40) = 0x41B2CC0300000000;
  v96 = (unsigned __int8 *)(v95 + 33);
  if (__ldaxr((unsigned __int8 *)(v95 + 33)))
  {
    __clrex();
LABEL_111:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v95 + 33);
    goto LABEL_112;
  }
  if (__stxr(1u, v96))
    goto LABEL_111;
LABEL_112:
  *(_BYTE *)(v95 + 34) = 0;
  v98 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v98 != -1)
  {
    *(_QWORD *)task_info_out = &v176;
    v177[0] = (const char *)task_info_out;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v95, v27, v28, v29, v30, v31, v32);
  v99 = __ldxr(v96);
  if (v99 != 1)
  {
    __clrex();
    goto LABEL_141;
  }
  if (__stlxr(0, v96))
LABEL_141:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v95 + 33), 0, v27, v28, v29, v30, v31, v32);
LABEL_48:
  v46 = *(_QWORD *)(a1 + 640);
  if (!v46)
    goto LABEL_59;
  *(_QWORD *)(v46 + 40) = 0x41B2CC0300000000;
  v47 = (unsigned __int8 *)(v46 + 33);
  if (__ldaxr((unsigned __int8 *)(v46 + 33)))
  {
    __clrex();
LABEL_51:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v46 + 33);
    goto LABEL_52;
  }
  if (__stxr(1u, v47))
    goto LABEL_51;
LABEL_52:
  *(_BYTE *)(v46 + 34) = 0;
  v49 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v49 != -1)
  {
    *(_QWORD *)task_info_out = &v176;
    v177[0] = (const char *)task_info_out;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v46, v27, v28, v29, v30, v31, v32);
  v50 = __ldxr(v47);
  if (v50 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, v47))
LABEL_58:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v46 + 33), 0, v27, v28, v29, v30, v31, v32);
LABEL_59:
  v51 = *(unsigned int *)(a1 + 676);
  if ((_DWORD)v51)
  {
    v147 = *(uint64_t **)(a1 + 664);
    v148 = 8 * v51;
    do
    {
      v149 = *v147++;
      (*(void (**)(uint64_t))(*(_QWORD *)v149 + 16))(v149);
      v148 -= 8;
    }
    while (v148);
  }
  v52 = *(_QWORD *)(a1 + 696);
  if (v52)
  {
    JSC::HeapVerifier::verify(v52, 0, v27, v28, v29, v30, v31, v32);
    JSC::HeapVerifier::startGC(*(JSC::HeapVerifier **)(a1 + 696), v133, v134, v135, v136, v137, v138, v139);
    JSC::HeapVerifier::gatherLiveCells(*(uint64_t **)(a1 + 696), (void *)1, v140, v141, v142, v143, v144, v145);
  }
  if (*(_BYTE *)(a1 + 155))
    v53 = 0;
  else
    v53 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 204) = v53;
  if (*(_BYTE *)(a1 + 155) == 1)
  {
    WTF::ConcurrentPtrHashSet::clear((WTF::ConcurrentPtrHashSet *)(a1 + 760), v26, v27, v28, v29, v30, v31, v32);
    v108 = *(_QWORD *)(a1 + 400);
    v109 = *(_QWORD **)(v108 + 8);
    if (v109)
    {
      v110 = (_QWORD **)(v109 + 1);
      for (i = v109[1]; i; v109 = (_QWORD *)v121)
      {
        v121 = i;
        v122 = *v109;
        if (*v109)
        {
          *(_QWORD *)(v122 + 8) = v121;
          v123 = *v110;
        }
        else
        {
          *(_QWORD *)(v108 + 8) = v121;
          v123 = (_QWORD *)v121;
        }
        if (!v123)
          v123 = (_QWORD *)(v108 + 16);
        *v123 = v122;
        WTF::fastFree((unint64_t)v109, v101, v102, v103, v104, v105, v106, v107);
        v110 = (_QWORD **)(v121 + 8);
        i = *(_QWORD *)(v121 + 8);
      }
      *(_OWORD *)(v108 + 24) = xmmword_19914FB90;
    }
    v112 = *(_QWORD **)(v108 + 40);
    if (v112)
    {
      v113 = (_QWORD **)(v112 + 1);
      for (j = v112[1]; j; v112 = (_QWORD *)v124)
      {
        v124 = j;
        v125 = *v112;
        if (*v112)
        {
          *(_QWORD *)(v125 + 8) = v124;
          v126 = *v113;
        }
        else
        {
          *(_QWORD *)(v108 + 40) = v124;
          v126 = (_QWORD *)v124;
        }
        if (!v126)
          v126 = (_QWORD *)(v108 + 48);
        *v126 = v125;
        WTF::fastFree((unint64_t)v112, v101, v102, v103, v104, v105, v106, v107);
        v113 = (_QWORD **)(v124 + 8);
        j = *(_QWORD *)(v124 + 8);
      }
      *(_OWORD *)(v108 + 56) = xmmword_19914FB90;
    }
    v115 = *(_QWORD *)(a1 + 416);
    v116 = *(_QWORD **)v115;
    if (*(_QWORD *)v115)
    {
      v117 = (_QWORD **)(v116 + 1);
      for (k = v116[1]; k; v116 = (_QWORD *)v127)
      {
        v127 = k;
        v128 = *v116;
        if (*v116)
        {
          *(_QWORD *)(v128 + 8) = v127;
          v129 = *v117;
        }
        else
        {
          *(_QWORD *)v115 = v127;
          v129 = (_QWORD *)v127;
        }
        if (!v129)
          v129 = (_QWORD *)(v115 + 8);
        *v129 = v128;
        WTF::fastFree((unint64_t)v116, v101, v102, v103, v104, v105, v106, v107);
        v117 = (_QWORD **)(v127 + 8);
        k = *(_QWORD *)(v127 + 8);
      }
      *(_OWORD *)(v115 + 16) = xmmword_19914FB90;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 80);
  }
  v54 = *(_QWORD **)(a1 + 424);
  if (v54[2] || *(_QWORD *)(*v54 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1985AE204);
  }
  v55 = *(unsigned int **)(a1 + 536);
  v56 = v55[3];
  if ((_DWORD)v56)
  {
    v57 = 16 * v56;
    v58 = (uint64_t *)(*(_QWORD *)v55 + 8);
    do
    {
      v59 = *v58;
      v58 += 2;
      *(_BYTE *)(v59 + 40) &= ~1u;
      v57 -= 16;
    }
    while (v57);
  }
  JSC::MarkedSpace::beginMarking(a1 + 160);
  *(_DWORD *)(a1 + 93136) = 0;
  *(_BYTE *)(a1 + 563) = 1;
  *(_DWORD *)(a1 + 568) = 100;
  v60 = *(_QWORD *)(a1 + 400);
  v61 = *(_QWORD *)(v60 + 80);
  if (*(_BYTE *)(v61 + 155))
  {
    if (*(_BYTE *)(v61 + 155) == 1)
    {
      *(_BYTE *)(v60 + 152) = 0;
      *(_QWORD *)(v60 + 160) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v60 + 72) = 0;
    *(_QWORD *)(v60 + 136) = 0;
    *(_QWORD *)(v60 + 168) = 0;
    if (*(_QWORD *)(v60 + 176))
    {
      __break(0xC471u);
      JUMPOUT(0x1985AE558);
    }
  }
  v62 = *(_QWORD *)(v61 + 93160);
  if ((v62 & 1) == 0 && v62)
    *(_QWORD *)(v60 + 168) = *(_QWORD *)(v62 + 24);
  *(_DWORD *)(v60 + 132) = *(_DWORD *)(v61 + 240);
  v63 = *(_QWORD *)(a1 + 408);
  v64 = *(_QWORD *)(v63 + 80);
  if (*(_BYTE *)(v64 + 155))
  {
    if (*(_BYTE *)(v64 + 155) == 1)
    {
      *(_BYTE *)(v63 + 152) = 0;
      *(_QWORD *)(v63 + 160) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v63 + 72) = 0;
    *(_QWORD *)(v63 + 136) = 0;
    *(_QWORD *)(v63 + 168) = 0;
    if (*(_QWORD *)(v63 + 176))
    {
      __break(0xC471u);
      JUMPOUT(0x1985AE578);
    }
  }
  v65 = *(_QWORD *)(v64 + 93160);
  if ((v65 & 1) == 0 && v65)
    *(_QWORD *)(v63 + 168) = *(_QWORD *)(v65 + 24);
  *(_DWORD *)(v63 + 132) = *(_DWORD *)(v64 + 240);
  v66 = *(unsigned int *)(a1 + 460);
  if ((_DWORD)v66)
  {
    v67 = *(uint64_t **)(a1 + 448);
    v68 = 8 * v66;
    do
    {
      v69 = *v67;
      v70 = *(_QWORD *)(*v67 + 80);
      if (*(_BYTE *)(v70 + 155))
      {
        if (*(_BYTE *)(v70 + 155) == 1)
        {
          *(_BYTE *)(v69 + 152) = 0;
          *(_QWORD *)(v69 + 160) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v69 + 72) = 0;
        *(_QWORD *)(v69 + 136) = 0;
        *(_QWORD *)(v69 + 168) = 0;
        if (*(_QWORD *)(v69 + 176))
        {
          __break(0xC471u);
          JUMPOUT(0x1985AE364);
        }
      }
      v71 = *(_QWORD *)(v70 + 93160);
      if ((v71 & 1) == 0 && v71)
        *(_QWORD *)(v69 + 168) = *(_QWORD *)(v71 + 24);
      *(_DWORD *)(v69 + 132) = *(_DWORD *)(v70 + 240);
      ++v67;
      v68 -= 8;
    }
    while (v68);
  }
  *(_BYTE *)(a1 + 1125) = 0;
  v72 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v72 + 8) = 1;
  *(_QWORD *)v72 = off_1E35906A8;
  *(_QWORD *)(v72 + 16) = a1;
  *(_QWORD *)task_info_out = v72;
  WTF::ParallelHelperClient::setTask((uint64_t *)(a1 + 848), (uint64_t *)task_info_out, v73, v74, v75, v76, v77, v78);
  v79 = *(unsigned int **)task_info_out;
  *(_QWORD *)task_info_out = 0;
  if (v79)
  {
    v80 = v79 + 2;
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v79 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
    }
  }
  v83 = *(JSC::SlotVisitor **)(a1 + 400);
  JSC::MarkingConstraintSet::didStartMarking(*(JSC::MarkingConstraintSet **)(a1 + 432));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 24))(*(_QWORD *)(a1 + 896));
  if ((_BYTE)word_1ECF4C5CC)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 88))(*(_QWORD *)(a1 + 896));
  v90 = (unsigned __int8 *)(*((_QWORD *)v83 + 10) + 909);
  if (__ldaxr(v90))
  {
    __clrex();
  }
  else if (!__stxr(1u, v90))
  {
    goto LABEL_96;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v90);
LABEL_96:
  v92 = *((_QWORD *)v83 + 10);
  v93 = !*(_DWORD *)(v92 + 752)
     && !*((_QWORD *)v83 + 3)
     && !*(_QWORD *)(*((_QWORD *)v83 + 1) + 8)
     && !*((_QWORD *)v83 + 7)
     && !*(_QWORD *)(*((_QWORD *)v83 + 5) + 8)
     && (v119 = *(_QWORD **)(v92 + 736), !v119[2])
     && !*(_QWORD *)(*v119 + 8)
     && (v120 = *(_QWORD **)(v92 + 744), !v120[2])
     && *(_QWORD *)(*v120 + 8) == 0;
  v94 = __ldxr(v90);
  if (v94 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v90))
LABEL_118:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v90, 0, v84, v85, v86, v87, v88, v89);
  if (!v93)
  {
    WTF::dataLog<char [16]>("Fatal: SlotVisitor should think that GC should terminate before constraint solving, but it does not think this.\n");
    v158 = !*((_QWORD *)v83 + 3)
        && !*(_QWORD *)(*((_QWORD *)v83 + 1) + 8)
        && !*((_QWORD *)v83 + 7)
        && *(_QWORD *)(*((_QWORD *)v83 + 5) + 8) == 0;
    LOBYTE(task_info_out[0]) = v158;
    WTF::dataLog<char [20],BOOL,char [2]>(task_info_out);
    if (*((_QWORD *)v83 + 3))
      v159 = 0;
    else
      v159 = *(_QWORD *)(*((_QWORD *)v83 + 1) + 8) == 0;
    LOBYTE(task_info_out[0]) = v159;
    WTF::dataLog<char [41],BOOL,char [2]>(task_info_out);
    if (*((_QWORD *)v83 + 7))
      v160 = 0;
    else
      v160 = *(_QWORD *)(*((_QWORD *)v83 + 5) + 8) == 0;
    LOBYTE(task_info_out[0]) = v160;
    WTF::dataLog<char [39],BOOL,char [2]>(task_info_out);
    WTF::dataLog<char [2],unsigned int,char [3]>("m_numberOfActiveParallelMarkers: ", (_DWORD *)(a1 + 752), "\n");
    v161 = *(_QWORD **)(a1 + 736);
    if (v161[2])
      v162 = 0;
    else
      v162 = *(_QWORD *)(*v161 + 8) == 0;
    LOBYTE(task_info_out[0]) = v162;
    WTF::dataLog<char [40],BOOL,char [2]>(task_info_out);
    v163 = *(_QWORD **)(a1 + 744);
    if (v163[2])
      v164 = 0;
    else
      v164 = *(_QWORD *)(*v163 + 8) == 0;
    LOBYTE(task_info_out[0]) = v164;
    WTF::dataLog<char [38],BOOL,char [2]>(task_info_out);
    LOBYTE(task_info_out[0]) = JSC::SlotVisitor::didReachTermination(v83, v165, v166, v167, v168, v169, v170, v171);
    WTF::dataLog<char [32],BOOL,char [2]>("visitor.didReachTermination(): ", task_info_out, "\n");
    __break(0xC471u);
    JUMPOUT(0x1985AE750);
  }
  return JSC::Heap::changePhase(a1, a2, 2, v85, v86, v87, v88, v89);
}

uint64_t JSC::Heap::runFixpointPhase(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  JSC::SlotVisitor *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  JSC::SlotVisitor *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  const WTF::TimeWithDynamicClockType *v50;
  WTF::MonotonicTime *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  unint64_t v79;
  WTF *v80;
  uint64_t v81;
  int v82;

  if ((_DWORD)a2 != 1 && !*(_QWORD *)(a1 + 1104))
  {
    __break(0xC471u);
    goto LABEL_81;
  }
  v10 = *(_QWORD *)(a1 + 400);
  if ((_BYTE)word_1ECF4C5CC)
  {
    v80 = (WTF *)&v81;
    v81 = 0;
    JSC::Heap::forEachSlotVisitor<JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_0>(a1, (uint64_t **)&v80, a3, a4, a5, a6, a7, a8);
    WTF::sortedMapDump<WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1>((uint64_t *)&v80, (char **)&v81);
    v70 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 136) + *(_QWORD *)(*(_QWORD *)(a1 + 400) + 136);
    v71 = *(unsigned int *)(a1 + 460);
    if ((_DWORD)v71)
    {
      v72 = *(uint64_t **)(a1 + 448);
      v73 = 8 * v71;
      do
      {
        v74 = *v72++;
        v70 += *(_QWORD *)(v74 + 136);
        v73 -= 8;
      }
      while (v73);
    }
    v79 = v70 >> 10;
    v75 = *(_QWORD *)(a1 + 808);
    if (a1 + 816 == v75)
      v76 = WTF::ConcurrentPtrHashSet::sizeSlow((WTF::ConcurrentPtrHashSet *)(a1 + 760), v63, v64, v65, v66, v67, v68, v69);
    else
      v76 = *(unsigned int *)(v75 + 8);
    v78 = v76;
    WTF::dataLog<char [3],unsigned long,char [5],WTF::CString,char [5],unsigned long,char [4],unsigned long,char [2]>(&v79, &v80, &v78, (_QWORD *)(a1 + 1096));
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
        WTF::fastFree((unint64_t)v80, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v80;
    }
    if (v81)
      WTF::fastFree(v81 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 909);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_7:
  v13 = *(_QWORD *)(v10 + 80);
  v14 = !*(_DWORD *)(v13 + 752)
     && !*(_QWORD *)(v10 + 24)
     && !*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8)
     && !*(_QWORD *)(v10 + 56)
     && !*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8)
     && (v59 = *(_QWORD **)(v13 + 736), !v59[2])
     && !*(_QWORD *)(*v59 + 8)
     && (v60 = *(_QWORD **)(v13 + 744), !v60[2])
     && *(_QWORD *)(*v60 + 8) == 0;
  v15 = __ldxr(v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
LABEL_11:
  if (v14)
  {
    WTF::ConcurrentPtrHashSet::deleteOldTables((WTF::ConcurrentPtrHashSet *)(a1 + 760), a2, a3, a4, a5, a6, a7, a8);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 48))(*(_QWORD *)(a1 + 896));
    JSC::Heap::assertMarkStacksEmpty(a1);
    v22 = JSC::MarkingConstraintSet::executeConvergenceImpl(*(unint64_t ****)(a1 + 432), (JSC::SlotVisitor *)v10, v16, v17, v18, v19, v20, v21);
    if ((_BYTE)word_1ECF4C5CC)
      WTF::dataLog<char [16]>(" ");
    if (v22
      && !*(_QWORD *)(v10 + 24)
      && !*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8)
      && !*(_QWORD *)(v10 + 56)
      && !*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8))
    {
      JSC::Heap::assertMarkStacksEmpty(a1);
      v57 = 5;
      return JSC::Heap::changePhase(a1, a2, v57, v52, v53, v54, v55, v56);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 56))(*(_QWORD *)(a1 + 896));
  }
  if ((_BYTE)word_1ECF4C5CC)
  {
    v81 = *(_QWORD *)(v10 + 24) + 510 * *(_QWORD *)(v10 + 32) - 510;
    v80 = (WTF *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 16)
                + *(_QWORD *)(v10 + 56)
                + 510 * (*(_QWORD *)(v10 + 64) + *(_QWORD *)(*(_QWORD *)(a1 + 416) + 24))
                - 1020);
    WTF::dataLog<unsigned long,char [2],unsigned long,char [2]>(&v81, &v80);
  }
  *(_BYTE *)(v10 + 187) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 80))(*(_QWORD *)(a1 + 896));
  if (!*(_BYTE *)(v10 + 187))
  {
    WTF::dataLog<char [16]>("FATAL: Attempting to donate when not in parallel mode.\n");
    __break(0xC471u);
LABEL_81:
    JUMPOUT(0x1985AEB4CLL);
  }
  v31 = v30;
  if (dword_1ECF4C578 != 1)
    JSC::SlotVisitor::donateKnownParallel((JSC::SlotVisitor *)v10);
  JSC::SlotVisitor::drain(v10, v23, v24, v25, v26, v27, v28, v29, v31);
  JSC::SlotVisitor::drainFromShared((_QWORD *)v10, (const void *)1, v32, v33, v34, v35, v36, v37, v31);
  *(_BYTE *)(v10 + 187) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 64))(*(_QWORD *)(a1 + 896));
  v44 = (unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 909);
  if (__ldaxr(v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, v44))
  {
    goto LABEL_24;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v44);
LABEL_24:
  v46 = *(_QWORD *)(v10 + 80);
  v47 = !*(_DWORD *)(v46 + 752)
     && !*(_QWORD *)(v10 + 24)
     && !*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8)
     && !*(_QWORD *)(v10 + 56)
     && !*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8)
     && (v61 = *(_QWORD **)(v46 + 736), !v61[2])
     && !*(_QWORD *)(*v61 + 8)
     && (v62 = *(_QWORD **)(v46 + 744), !v62[2])
     && *(_QWORD *)(*v62 + 8) == 0;
  v48 = __ldxr(v44);
  if (v48 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, v38, v39, v40, v41, v42, v43);
LABEL_33:
  v49 = 1;
  if (!v47)
  {
    v81 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 80))(*(_QWORD *)(a1 + 896));
    v82 = 1;
    if (WTF::hasElapsed((WTF *)&v81, v50))
    {
      v51 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 40))(*(_QWORD *)(a1 + 896));
      if ((_BYTE)word_1ECF4C5CC)
      {
        v77 = (WTF::MonotonicTime::now(v51) - *(double *)(a1 + 928)) * 1000.0;
        v81 = *(_QWORD *)&v77;
        v80 = *(WTF **)&v77;
        WTF::dataLog<char [3],double,char [9],double,char [7]>((double *)&v81, (double *)&v80);
      }
      *(_QWORD *)(a1 + 144) = 0;
      v57 = 3;
      return JSC::Heap::changePhase(a1, a2, v57, v52, v53, v54, v55, v56);
    }
  }
  return v49;
}

uint64_t JSC::Heap::runConcurrentPhase(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  unsigned __int8 *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  JSC::SlotVisitor *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char **v53;
  char *v54;

  v9 = *(_QWORD *)(a1 + 400);
  if (!a2)
  {
    v10 = (unsigned __int8 *)(*(_QWORD *)(v9 + 80) + 909);
    if (__ldaxr(v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_5;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
    v12 = *(_QWORD *)(v9 + 80);
    v13 = !*(_DWORD *)(v12 + 752)
       && !*(_QWORD *)(v9 + 24)
       && !*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8)
       && !*(_QWORD *)(v9 + 56)
       && !*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8)
       && (v40 = *(_QWORD **)(v12 + 736), !v40[2])
       && !*(_QWORD *)(*v40 + 8)
       && (v41 = *(_QWORD **)(v12 + 744), !v41[2])
       && *(_QWORD *)(*v41 + 8) == 0;
    v14 = __ldxr(v10);
    if (v14 == 1)
    {
      if (!__stlxr(0, v10))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_12:
    if (!v13)
    {
      v16 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 72))(*(_QWORD *)(a1 + 896));
      if (v16 > 0.0)
      {
        v17 = v16;
        if (fabs(v16) == INFINITY)
          goto LABEL_52;
        v18 = mach_absolute_time();
        v20 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v20 != -1)
        {
          v54 = &v52;
          v53 = &v54;
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v53, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        LODWORD(v19) = dword_1ECF4400C;
        if (v17 > (double)(v18 * WTF::machTimebaseInfo(void)::timebaseInfo)
                 / ((double)v19
                  * 1000000000.0))
        {
LABEL_52:
          if (!*(_QWORD *)(v9 + 24)
            && !*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8)
            && !*(_QWORD *)(v9 + 56)
            && !*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8))
          {
            return 0;
          }
          v22 = (unsigned __int8 *)(*(_QWORD *)(v9 + 80) + 909);
          if (__ldaxr(v22))
          {
            __clrex();
          }
          else if (!__stxr(1u, v22))
          {
LABEL_26:
            JSC::MarkStackArray::transferTo((uint64_t **)(v9 + 8), *(uint64_t ***)(*(_QWORD *)(v9 + 80) + 736), v15, a4, a5, a6, a7, a8);
            JSC::MarkStackArray::transferTo((uint64_t **)(v9 + 40), *(uint64_t ***)(*(_QWORD *)(v9 + 80) + 744), v24, v25, v26, v27, v28, v29);
            v37 = (unsigned __int8 *)(*(_QWORD *)(v9 + 80) + 910);
            v38 = atomic_load(v37);
            if ((v38 & 1) != 0)
            {
              atomic_store(0, v37);
              WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v37, v30, v31, v32, v33, v34, v35, v36);
            }
            v39 = __ldxr(v22);
            if (v39 == 1)
            {
              if (!__stlxr(0, v22))
                return 0;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, v31, v32, v33, v34, v35, v36);
            return 0;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v22);
          goto LABEL_26;
        }
      }
    }
    v42 = a1;
    v43 = 0;
    return JSC::Heap::changePhase(v42, (void *)v43, 4, a4, a5, a6, a7, a8);
  }
  if (a2 == 1)
  {
    *(_BYTE *)(v9 + 187) = 1;
    v44 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 72))(*(_QWORD *)(a1 + 896));
    JSC::SlotVisitor::drainInParallelPassively(v9, v45, v46, v47, v48, v49, v50, v51, v44);
    *(_BYTE *)(v9 + 187) = 0;
    v42 = a1;
    v43 = 1;
    return JSC::Heap::changePhase(v42, (void *)v43, 4, a4, a5, a6, a7, a8);
  }
  result = 1608;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Heap::runReloopPhase(_QWORD **a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  const char *v11;
  const void *v12;

  if ((_BYTE)word_1ECF4C5CC)
  {
    v12 = a1;
    if ((_DWORD)a2)
    {
      if ((_DWORD)a2 != 1)
      {
        result = 42;
        __break(0xC471u);
        return result;
      }
      v10 = "C";
    }
    else
    {
      v10 = "M";
    }
    v11 = v10;
    WTF::dataLog<char [5],WTF::RawPointer,char [4],char const*,char [2]>(&v12, &v11);
  }
  (*(void (**)(_QWORD *))(*a1[112] + 32))(a1[112]);
  if ((_BYTE)word_1ECF4C5CC)
    (*(void (**)(_QWORD *))(*a1[112] + 88))(a1[112]);
  return JSC::Heap::changePhase((uint64_t)a1, a2, 2, v4, v5, v6, v7, v8);
}

uint64_t JSC::Heap::runEndPhase(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 *v16;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int8x8_t v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t i;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  JSC::TypeProfiler *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t *j;
  int v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  char *v73;
  char *v74;
  JSC::ArrayBuffer *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *m;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::ErrorInstance *v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  int v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t kk;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  JSC::ErrorInstance *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  _BYTE *ii;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int *v166;
  uint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t i1;
  uint64_t v190;
  uint64_t v191;
  JSC::ErrorInstance *v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  unint64_t v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v208;
  uint64_t *v209;
  unint64_t *i2;
  unint64_t *v211;
  unsigned int v212;
  BOOL v213;
  BOOL v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t i5;
  uint64_t *v219;
  uint64_t *i6;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 *v236;
  _QWORD *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t *v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  int v246;
  uint64_t **v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  int v253;
  int v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  unsigned int *v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t *v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  task_name_t *v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  double *v291;
  unint64_t v292;
  double v293;
  double v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  double v302;
  double v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  kern_return_t v311;
  unint64_t v312;
  unint64_t v313;
  double v314;
  double v315;
  JSC::HeapVerifier *v316;
  int v317;
  const void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  double v328;
  uint64_t v329;
  double v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned __int8 *v337;
  uint64_t v339;
  uint64_t v340;
  unsigned int *v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int *v347;
  unsigned int v348;
  int v349;
  const void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  double v367;
  uint64_t i8;
  uint64_t *v370;
  uint64_t *i9;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unint64_t v380;
  unsigned int *v381;
  uint64_t v382;
  int v383;
  int v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  JSC::ErrorInstance *v392;
  uint64_t v393;
  unint64_t v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int *v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unsigned int v408;
  unint64_t v409;
  unsigned int *v410;
  uint64_t v411;
  int v412;
  int v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t *v421;
  uint64_t *v422;
  unsigned int v423;
  uint64_t i10;
  uint64_t v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  JSC::ErrorInstance *v432;
  uint64_t v433;
  unint64_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int *v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  int v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t *i7;
  uint64_t *v447;
  uint64_t i3;
  _QWORD *v449;
  _QWORD *i4;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t *k;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t jj;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned int v470;
  unint64_t v471;
  unsigned int *v472;
  uint64_t v473;
  int v474;
  int v475;
  unint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  uint64_t mm;
  _QWORD *nn;
  int v481;
  unint64_t v482;
  unint64_t v483;
  kern_return_t v484;
  unint64_t v485;
  unint64_t v486;
  double v487;
  double v488;
  double v489;
  unint64_t v490;
  unsigned int v491;
  uint64_t v492;
  unint64_t v493;
  unsigned int v494;
  uint64_t *v495;
  uint64_t *n;
  uint64_t *v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unsigned int v503;
  unint64_t v504;
  unsigned int *v505;
  uint64_t v506;
  int v507;
  int v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  unsigned int v522;
  unint64_t v523;
  unsigned int *v524;
  uint64_t v525;
  int v526;
  int v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  double v534;
  unsigned int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  double v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  int v547;
  unsigned int *v548;
  unsigned int v549;
  unsigned int v550;
  uint64_t v551;
  double v552;
  unint64_t v553;
  void *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  double v561;
  char v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  double v575;
  double v576;
  unsigned int v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  unsigned int v584;
  unint64_t v585;
  unint64_t v586;
  double v587;
  double v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  uint64_t v596;
  unint64_t StatusReg;
  uint64_t **v598;
  unint64_t v599;
  uint64_t **v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  unint64_t v607;
  unint64_t v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t *v618;
  unsigned int v619;
  unsigned int v620;
  uint64_t v621;
  uint64_t v622;
  unsigned int v623;
  uint64_t v624;
  _QWORD *v625;
  JSC::ErrorInstance *v626;
  JSC::ErrorInstance *v627;
  JSC::ErrorInstance *v628;
  JSC::ErrorInstance *v629;
  JSC::ErrorInstance *v630;
  JSC::ErrorInstance *v631;
  JSC::ErrorInstance *v632;
  JSC::ErrorInstance *v633;
  JSC::ErrorInstance *v634;
  JSC::ErrorInstance *v635;
  JSC::ErrorInstance *v636;
  unsigned int v637;
  JSC::ErrorInstance *v638;
  int v639;
  unsigned int v640;
  uint64_t v641;
  _QWORD *v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  integer_t *v651;
  mach_msg_type_number_t *p_task_info_outCnt;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  double *v655;
  double *v656;
  unint64_t v657;
  char v658;
  double v659[2];

  v3 = a1;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 896) + 96))(*(_QWORD *)(a1 + 896));
  v11 = (unsigned __int8 *)(v3 + 909);
  if (__ldaxr((unsigned __int8 *)(v3 + 909)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v3 + 909);
    goto LABEL_4;
  }
  if (__stxr(1u, v11))
    goto LABEL_3;
LABEL_4:
  *(_BYTE *)(v3 + 1125) = 1;
  v13 = (unsigned __int8 *)(v3 + 910);
  v14 = atomic_load((unsigned __int8 *)(v3 + 910));
  if ((v14 & 1) != 0)
  {
    atomic_store(0, v13);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v13, v4, v5, v6, v7, v8, v9, v10);
  }
  v15 = __ldxr(v11);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v11))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v3 + 909), 0, v5, v6, v7, v8, v9, v10);
  v16 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 848) + 8) + 4);
  if (__ldaxr(v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
LABEL_14:
  v18 = *(unsigned int **)(v3 + 856);
  *(_QWORD *)(v3 + 856) = 0;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  while (*(_DWORD *)(v3 + 864))
  {
    v22 = *(_QWORD *)(v3 + 848);
    v23 = (unsigned __int8 *)(*(_QWORD *)(v22 + 8) + 4);
    *(_QWORD *)task_info_out = 0x7FF0000000000000;
    LODWORD(v655) = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v22 + 24, v23, (WTF::TimeWithDynamicClockType *)task_info_out);
  }
  v24 = __ldxr(v16);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v16))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v5, v6, v7, v8, v9, v10);
  v25 = *(_QWORD *)(v3 + 400);
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E35906D0;
  v26[1] = v3;
  *(_QWORD *)task_info_out = v26;
  JSC::Heap::iterateExecutingAndCompilingCodeBlocks<JSC::SlotVisitor>(v3, v25, task_info_out, v27, v28, v29, v30, v31);
  v32 = *(_QWORD *)task_info_out;
  *(_QWORD *)task_info_out = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (*(_BYTE *)(v3 + 155) == 1)
  {
    *(_QWORD *)(v3 + 120) = *(_QWORD *)(v3 + 128);
    *(_QWORD *)(v3 + 128) = 0;
  }
  v33 = *(_QWORD **)(v3 + 400);
  v34 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 136) + v33[17];
  v35 = *(_QWORD **)(v3 + 448);
  v36 = *(unsigned int *)(v3 + 460);
  v37 = 8 * v36;
  if ((_DWORD)v36)
  {
    v38 = 8 * v36;
    v39 = *(uint64_t **)(v3 + 448);
    do
    {
      v40 = *v39++;
      v34 += *(_QWORD *)(v40 + 136);
      v38 -= 8;
    }
    while (v38);
  }
  *(_QWORD *)(v3 + 128) += v34;
  *(_QWORD *)(v3 + 136) = v34;
  v33[9] = 0;
  v33[17] = 0;
  v33[21] = 0;
  if (v33[22])
  {
    __break(0xC471u);
    JUMPOUT(0x1985B1D30);
  }
  v41 = *(_QWORD **)(v3 + 408);
  v41[9] = 0;
  v41[17] = 0;
  v41[21] = 0;
  if (v41[22])
  {
    __break(0xC471u);
    JUMPOUT(0x1985B1D6CLL);
  }
  if ((_DWORD)v36)
  {
    do
    {
      v42 = (_QWORD *)*v35;
      v42[9] = 0;
      v42[17] = 0;
      v42[21] = 0;
      if (v42[22])
      {
        __break(0xC471u);
        JUMPOUT(0x1985B1B34);
      }
      ++v35;
      v37 -= 8;
    }
    while (v37);
  }
  JSC::Heap::assertMarkStacksEmpty(v3);
  v51 = *(_QWORD **)(v3 + 424);
  if (v51[2] || *(_QWORD *)(*v51 + 8))
  {
    __break(0xC471u);
    goto LABEL_895;
  }
  v52 = *(_DWORD *)(v3 + 244);
  if (v52 == 1 || v52 == -1)
  {
    JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::endMarking(void)::$_0>(*(_QWORD *)(v3 + 304));
    v52 = *(_DWORD *)(v3 + 244);
  }
  v53 = __CFADD__(v52, 1);
  v54 = v52 + 1;
  if (v53)
    v54 = 2;
  *(_DWORD *)(v3 + 244) = v54;
  v55 = *(unsigned int *)(v3 + 204);
  if (*(_DWORD *)(v3 + 196) > v55)
  {
    do
    {
      v56 = *(_QWORD *)(*(_QWORD *)(v3 + 184) + 8 * v55);
      *(_BYTE *)(v56 + 32) &= ~1u;
      ++v55;
    }
    while (v55 < *(unsigned int *)(v3 + 196));
  }
  for (i = *(_QWORD *)(v3 + 304); i; i = *(_QWORD *)(i + 80))
    JSC::BlockDirectory::endMarking(i);
  *(_BYTE *)(v3 + 253) = 0;
  v58 = dword_1ECF4C358;
  *(_BYTE *)(v3 + 563) = dword_1ECF4C358;
  if (v58)
    v59 = 100;
  else
    v59 = 0;
  *(_DWORD *)(v3 + 568) = v59;
  if ((_BYTE)word_1ECF4C610)
    JSC::Heap::verifyGC((JSC::Heap *)v3, (uint64_t)v43, v44, v45, v46, v47, v48, (uint64_t)v49);
  v60 = *(uint64_t **)(v3 + 696);
  if (v60)
  {
    JSC::HeapVerifier::gatherLiveCells(v60, (void *)2, v44, v45, v46, v47, v48, (uint64_t)v49);
    JSC::HeapVerifier::verify(*(_QWORD *)(v3 + 696), 2, v563, v564, v565, v566, v567, v568);
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v61 = *(_QWORD *)(StatusReg + 736);
  if (!v61)
    v61 = WTF::Thread::initializeCurrentTLS(0);
  v595 = a2;
  v596 = *(_QWORD *)(v61 + 56);
  *(_QWORD *)(v61 + 56) = 0;
  v62 = v3 - 192;
  v63 = *(JSC::TypeProfiler **)(v3 + 92976);
  if (v63)
    JSC::TypeProfiler::invalidateTypeSetCache(v63, (JSC::VM *)(v3 - 192), v44, v45, v46, v47, v48, (uint64_t)v49);
  v64 = v3 + 160;
  v65 = *(_QWORD **)(v3 + 288);
  if (v65 != (_QWORD *)(v3 + 288))
  {
    do
    {
      v66 = (_QWORD *)*v65;
      for (j = (uint64_t *)v65[4]; j; j = (uint64_t *)j[2])
        JSC::WeakBlock::reap(j);
      v65 = v66;
    }
    while (v66 != (_QWORD *)(v3 + 288));
  }
  if (*(_BYTE *)(v3 + 155) == 1)
  {
    v452 = *(_QWORD **)(v3 + 272);
    if (v452 != (_QWORD *)(v3 + 272))
    {
      do
      {
        v453 = (_QWORD *)*v452;
        for (k = (uint64_t *)v452[4]; k; k = (uint64_t *)k[2])
          JSC::WeakBlock::reap(k);
        v452 = v453;
      }
      while (v453 != (_QWORD *)(v3 + 272));
    }
  }
  v68 = *(unsigned __int8 *)(v3 + 155);
  if (v68 != 1)
    goto LABEL_65;
  v459 = *(_QWORD *)(v3 + 728);
  if (v459)
  {
    v460 = *(unsigned int *)(v459 - 4);
    v461 = (_QWORD *)(v459 + 8 * v460);
    if (*(_DWORD *)(v459 - 12))
    {
      v462 = *(_QWORD **)(v3 + 728);
      if ((_DWORD)v460)
      {
        v463 = 8 * v460;
        v462 = *(_QWORD **)(v3 + 728);
        while ((unint64_t)(*v462 + 1) <= 1)
        {
          ++v462;
          v463 -= 8;
          if (!v463)
          {
            v462 = v461;
            goto LABEL_643;
          }
        }
      }
      goto LABEL_643;
    }
    v462 = (_QWORD *)(v459 + 8 * v460);
  }
  else
  {
    v462 = 0;
    v460 = 0;
  }
  v461 = (_QWORD *)(v459 + 8 * v460);
LABEL_643:
  if (v459)
    v464 = (_QWORD *)(v459 + 8 * *(unsigned int *)(v459 - 4));
  else
    v464 = 0;
  if (v464 == v462)
  {
    v68 = 1;
  }
  else
  {
    do
    {
      v465 = v462 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)*v462 + 16))(*v462);
      v462 = v461;
      if (v465 != v461)
      {
        v462 = v465;
        while ((unint64_t)(*v462 + 1) <= 1)
        {
          if (++v462 == v461)
          {
            v462 = v461;
            break;
          }
        }
      }
    }
    while (v462 != v464);
    v68 = *(unsigned __int8 *)(v3 + 155);
    v64 = v3 + 160;
  }
LABEL_65:
  v598 = (uint64_t **)v64;
  v69 = *(_QWORD *)(v3 + 320);
  v70 = *(unsigned int *)(v3 + 332);
  v71 = (char *)(v69 + 8 * v70);
  v650 = v3;
  if ((_DWORD)v70)
  {
    v639 = v68;
    v641 = 0;
    v72 = 0;
    v73 = (char *)(v69 + 8 * v70);
    v74 = v73;
    while (1)
    {
      v75 = *(JSC::ArrayBuffer **)v69;
      if (*(_BYTE *)(*(_QWORD *)v69 + 64) && (v594 = *((_QWORD *)v75 + 4)) != 0)
        v76 = *(_QWORD *)(v594 + 32);
      else
        v76 = *((_QWORD *)v75 + 6);
      v77 = *((_QWORD *)v75 + 1);
      if (!v77)
        goto LABEL_100;
      if ((v77 & 1) != 0)
      {
        if ((v77 & 8) != 0)
        {
          if ((*(_BYTE *)((v77 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) == 0)
            goto LABEL_74;
        }
        else if (*(_DWORD *)(v77 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v62 + 432)
               || ((*(_QWORD *)((v77 & 0xFFFFFFFFFFFFC000) + 8 * ((v77 >> 10) & 0xF) + 0x28) >> (v77 >> 4)) & 1) == 0)
        {
          goto LABEL_74;
        }
        goto LABEL_100;
      }
      if (!*(_DWORD *)(v77 + 12))
        goto LABEL_96;
      v79 = 0;
      do
      {
        v80 = *(_QWORD *)(*(_QWORD *)v77 + 8 * v79);
        if ((v80 & 8) != 0)
        {
          if ((*(_BYTE *)(v80 - 79) & 1) != 0)
            goto LABEL_90;
        }
        else if (*(_DWORD *)(v80 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432))
        {
          v77 = *((_QWORD *)v75 + 1);
          if (((*(_QWORD *)((v80 & 0xFFFFFFFFFFFFC000) + 8 * ((v80 >> 10) & 0xF) + 0x28) >> (v80 >> 4)) & 1) != 0)
            goto LABEL_90;
        }
        else
        {
          v77 = *((_QWORD *)v75 + 1);
        }
        v81 = *(unsigned int *)(v77 + 12);
        if (!(_DWORD)v81)
        {
          __break(0xC471u);
          JUMPOUT(0x1985B21A8);
        }
        if (v79 >= v81)
        {
          __break(0xC471u);
          JUMPOUT(0x1985B21B0);
        }
        *(_QWORD *)(*(_QWORD *)v77 + 8 * v79--) = *(_QWORD *)(*(_QWORD *)v77 + 8 * v81 - 8);
        *(_DWORD *)(v77 + 12) = v81 - 1;
LABEL_90:
        ++v79;
        v82 = *(unsigned int *)(v77 + 12);
      }
      while (v79 < v82);
      if (v82 > 1)
        goto LABEL_100;
      if ((_DWORD)v82)
      {
        v553 = *(_QWORD *)v77;
        v635 = **(JSC::ErrorInstance ***)v77;
        *(_QWORD *)v77 = 0;
        *(_DWORD *)(v77 + 8) = 0;
        WTF::fastFree(v553, v43, v44, v45, v46, v47, v48, (uint64_t)v49);
        WTF::fastFree(v77, v554, v555, v556, v557, v558, v559, v560);
        *((_QWORD *)v75 + 1) = (unint64_t)v635 | 1;
LABEL_100:
        v641 += v76 + 96;
        goto LABEL_80;
      }
LABEL_96:
      v83 = *(_QWORD **)v77;
      if (*(_QWORD *)v77)
      {
        *(_QWORD *)v77 = 0;
        *(_DWORD *)(v77 + 8) = 0;
        WTF::fastFree((unint64_t)v83, v43, v44, v45, v46, v47, v48, (uint64_t)v49);
      }
      WTF::fastFree(v77, v43, v44, v45, v46, v47, v48, (uint64_t)v49);
LABEL_74:
      *((_QWORD *)v75 + 1) = 0;
      v206 = (*(_DWORD *)v75 & 0xFFFFFFFE) == 0;
      *(_DWORD *)v75 &= ~1u;
      if (v206)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v75, v43, v44, v45, v46, v47, v48, (uint64_t)v49);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      v78 = (char *)v69;
      if (v74 != (char *)(*(_QWORD *)(v650 + 320) + 8 * *(unsigned int *)(v650 + 332)))
      {
        if (v73 == (char *)v69)
        {
          v78 = v74;
        }
        else
        {
          memmove(v74, v73, v69 - (_QWORD)v73);
          v78 = &v74[v69 - (_QWORD)v73];
        }
      }
      v73 = (char *)(v69 + 8);
      ++v72;
      v74 = v78;
LABEL_80:
      v69 += 8;
      if (v69 >= (unint64_t)v71)
      {
        v69 = *(_QWORD *)(v650 + 320);
        v92 = *(unsigned int *)(v650 + 332);
        LODWORD(v70) = *(_DWORD *)(v650 + 332);
        v71 = v74;
        v3 = v650;
        v68 = v639;
        goto LABEL_102;
      }
    }
  }
  v641 = 0;
  v92 = 0;
  v72 = 0;
  v73 = (char *)(v69 + 8 * v70);
LABEL_102:
  v93 = (char *)(v69 + 8 * v92);
  if (v73 != v93)
  {
    memmove(v71, v73, v93 - v73);
    LODWORD(v70) = *(_DWORD *)(v3 + 332);
  }
  *(_DWORD *)(v3 + 332) = v70 - v72;
  if (v68 == 1)
    *(_QWORD *)(v3 + 336) = v641;
  v94 = *(_QWORD *)(v3 + 304);
  if (*(_BYTE *)(v3 + 155))
  {
    for (; v94; v94 = *(_QWORD *)(v94 + 80))
    {
      v455 = *(unsigned int *)(v94 + 48);
      if ((_DWORD)v455)
      {
        v456 = *(_QWORD *)(v94 + 32);
        v457 = ((unint64_t)(v455 + 31) >> 5) - 1;
        do
        {
          v458 = v457;
          *(_DWORD *)(v456 + 40 * v457 + 24) = *(_DWORD *)(v456 + 40 * v457);
          --v457;
        }
        while (v458);
      }
    }
  }
  else
  {
    for (; v94; v94 = *(_QWORD *)(v94 + 80))
    {
      v95 = *(unsigned int *)(v94 + 48);
      if ((_DWORD)v95)
      {
        v96 = *(_QWORD *)(v94 + 32);
        v97 = ((unint64_t)(v95 + 31) >> 5) - 1;
        do
        {
          v98 = v97;
          *(_DWORD *)(v96 + 40 * v97 + 24) |= *(_DWORD *)(v96 + 40 * v97 + 20);
          --v97;
        }
        while (v98);
      }
    }
  }
  v99 = *(unsigned __int8 *)(v3 + 155);
  if (v99 == 255)
    v99 = 1;
  v640 = v99;
  v642 = (_QWORD *)(v3 + 35936);
  v100 = *(_QWORD *)(v3 + 36016);
  if (v100)
  {
    v248 = v62 + 36528;
    do
    {
      v249 = *(unsigned int *)(v100 + 48);
      if (!(_DWORD)v249)
        goto LABEL_428;
      v44 = 0;
      v45 = *(_QWORD *)(v100 + 32);
      v46 = (unint64_t)(v249 + 31) >> 5;
      v612 = v45;
      v614 = v100;
      v607 = v46;
      do
      {
        v47 = *(unsigned int *)(v45 + 40 * v44 + 32);
        if (!(_DWORD)v47)
          goto LABEL_414;
        v250 = 32 * v44;
        do
        {
          if ((v47 & 1) == 0)
            goto LABEL_400;
          if (v250 >= *(unsigned int *)(v100 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1985B21B8);
          }
          v251 = *(unsigned int **)(*(_QWORD *)v100 + 8 * v250);
          v252 = *((_QWORD *)v251 + 11);
          v253 = *(_DWORD *)(*(_QWORD *)(v252 + 8) + 432);
          v254 = *(_DWORD *)(v252 + 32);
          __dmb(0xBu);
          if (v254 != v253)
            goto LABEL_400;
          v255 = v251[1];
          if (v255 > 0x3FF)
            goto LABEL_400;
          v256 = v252 + 40;
          while (2)
          {
            if (((*(_QWORD *)(v256 + ((v255 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v255) & 1) == 0)
              goto LABEL_361;
            v257 = *((_QWORD *)v251 + 11) + 16 * v255;
            v258 = *(_QWORD *)(v257 + 112);
            if ((v258 & 1) != 0)
              v259 = v258 & 0xFFFFFFFFFFFFFFF8;
            else
              v259 = *(_QWORD *)(v258 + 24);
            if (!v259)
              goto LABEL_369;
            if ((v259 & 8) != 0)
            {
              if ((*(_BYTE *)(v259 - 79) & 1) == 0)
                goto LABEL_390;
            }
            else if (*(_DWORD *)(v259 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v62 + 432)
                   || ((*(_QWORD *)((v259 & 0xFFFFFFFFFFFFC000) + 8 * ((v259 >> 10) & 0xF) + 0x28) >> (v259 >> 4)) & 1) == 0)
            {
LABEL_390:
              *(_QWORD *)task_info_out = &off_1E3583C90;
              v655 = (double *)"InferredValue clean-up during GC";
              v267 = *(_QWORD *)(v257 + 112);
              if ((v267 & 1) != 0)
              {
                *(_QWORD *)(v257 + 112) = 5;
              }
              else
              {
                *(_QWORD *)(v267 + 24) = 0;
                if (*(_BYTE *)(v267 + 4) == 1)
                {
                  __dmb(0xAu);
                  v277 = *(uint64_t **)(v267 + 8);
                  *(_BYTE *)(v267 + 4) = 2;
                  v278 = *(_DWORD *)(v62 + 916);
                  *(_DWORD *)(v62 + 916) = v278 + 1;
                  if (v277 != (uint64_t *)(v267 + 8))
                  {
                    v623 = v47;
                    v633 = (JSC::ErrorInstance *)v44;
                    v600 = (uint64_t **)(v267 + 8);
                    do
                    {
                      v544 = *v277;
                      v543 = (uint64_t *)v277[1];
                      *v543 = *v277;
                      *(_QWORD *)(v544 + 8) = v543;
                      *v277 = 0;
                      v277[1] = 0;
                      JSC::Watchpoint::fire((unint64_t)v277, (JSC::VM *)v62, task_info_out, v45, v46, v47, v48, (uint64_t)v49, *(double *)&v50);
                      v277 = *v600;
                    }
                    while (*v600 != (uint64_t *)v600);
                    v278 = *(_DWORD *)(v62 + 916) - 1;
                    v45 = v612;
                    v100 = v614;
                    v248 = v62 + 36528;
                    v46 = v607;
                    v44 = (unint64_t)v633;
                    v47 = v623;
                  }
                  *(_DWORD *)(v62 + 916) = v278;
                  __dmb(0xAu);
                }
                *(_BYTE *)(v267 + 4) = 2;
              }
            }
LABEL_369:
            v260 = *(_QWORD *)(v257 + 96);
            do
            {
              if (!v260)
                goto LABEL_371;
              if ((v260 & 8) != 0)
              {
                if ((*(_BYTE *)(v260 - 79) & 1) != 0)
                  goto LABEL_371;
              }
              else if (*(_DWORD *)(v260 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
                     && ((*(_QWORD *)((v260 & 0xFFFFFFFFFFFFC000) + 8 * ((v260 >> 10) & 0xF) + 0x28) >> (v260 >> 4)) & 1) != 0)
              {
                goto LABEL_371;
              }
              v272 = *(_QWORD *)(v260 + 120);
              v628 = (JSC::ErrorInstance *)v44;
              v619 = v47;
              if (!v272 || (*(_BYTE *)(v272 + 12) & 0xFE) != 4)
              {
LABEL_404:
                v273 = 9;
                goto LABEL_405;
              }
              if ((v260 & 8) != 0)
              {
                if ((*(_BYTE *)(v260 - 79) & 1) != 0)
                  goto LABEL_404;
              }
              else if (*(_DWORD *)(v260 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
                     && ((*(_QWORD *)((v260 & 0xFFFFFFFFFFFFC000) + 8 * ((v260 >> 10) & 0xF) + 0x28) >> (v260 >> 4)) & 1) != 0)
              {
                goto LABEL_404;
              }
              v273 = 1;
LABEL_405:
              JSC::CodeBlock::jettison(v260, v273, 0, 0, *(double *)&v50, v46, v47, v48, (uint64_t)v49);
              v206 = v260 == *(_QWORD *)(v257 + 96);
              v260 = *(_QWORD *)(v257 + 96);
              v45 = v612;
              v100 = v614;
              v248 = v62 + 36528;
              v46 = v607;
              v44 = (unint64_t)v628;
              v47 = v619;
            }
            while (!v206);
            *(_QWORD *)(v257 + 96) = 0;
LABEL_371:
            v261 = *(_QWORD *)(v257 + 104);
            while (2)
            {
              if (v261)
              {
                if ((v261 & 8) != 0)
                {
                  if ((*(_BYTE *)(v261 - 79) & 1) != 0)
                    break;
                }
                else if (*(_DWORD *)(v261 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
                       && ((*(_QWORD *)((v261 & 0xFFFFFFFFFFFFC000) + 8 * ((v261 >> 10) & 0xF) + 0x28) >> (v261 >> 4)) & 1) != 0)
                {
                  break;
                }
                v274 = *(_QWORD *)(v261 + 120);
                v629 = (JSC::ErrorInstance *)v44;
                v620 = v47;
                if (v274 && (*(_BYTE *)(v274 + 12) & 0xFE) == 4)
                {
                  if ((v261 & 8) != 0)
                  {
                    if ((*(_BYTE *)(v261 - 79) & 1) != 0)
                      goto LABEL_410;
                  }
                  else if (*(_DWORD *)(v261 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
                         && ((*(_QWORD *)((v261 & 0xFFFFFFFFFFFFC000) + 8 * ((v261 >> 10) & 0xF) + 0x28) >> (v261 >> 4)) & 1) != 0)
                  {
                    goto LABEL_410;
                  }
                  v275 = 1;
                }
                else
                {
LABEL_410:
                  v275 = 9;
                }
                JSC::CodeBlock::jettison(v261, v275, 0, 0, *(double *)&v50, v46, v47, v48, (uint64_t)v49);
                v206 = v261 == *(_QWORD *)(v257 + 104);
                v261 = *(_QWORD *)(v257 + 104);
                v45 = v612;
                v100 = v614;
                v248 = v62 + 36528;
                v46 = v607;
                v44 = (unint64_t)v629;
                v47 = v620;
                if (v206)
                {
                  *(_QWORD *)(v257 + 104) = 0;
                  break;
                }
                continue;
              }
              break;
            }
            if ((v257 & 8) != 0)
            {
              v268 = *(unsigned __int8 *)(v257 - 76);
              v269 = 1 << v268;
              v270 = (unsigned int *)(v248 + ((v268 >> 3) & 0x1C));
              while (1)
              {
                v271 = *v270;
                if ((*v270 & v269) == 0)
                  break;
                v276 = __ldxr(v270);
                if (v276 == v271)
                {
                  if (!__stxr(v271 & ~v269, v270))
                    break;
                }
                else
                {
                  __clrex();
                }
              }
            }
            else
            {
              v262 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 36568)
                                           + (*(_DWORD *)(*(_QWORD *)(v257 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                           + 8)
                               + 8 * (*(_DWORD *)(*(_QWORD *)(v257 & 0xFFFFFFFFFFFFC000) + 12) & 7));
              if (v262)
              {
                v263 = 1 << (v257 >> 4);
                v264 = (unint64_t *)(v262 + 8 * ((v257 >> 10) & 0xF));
                while (1)
                {
                  v265 = *v264;
                  if ((*v264 & v263) == 0)
                    break;
                  v266 = __ldxr(v264);
                  if (v266 == v265)
                  {
                    if (!__stxr(v265 & ~v263, v264))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
            }
LABEL_361:
            v255 += *v251;
            if (v255 < 0x400)
              continue;
            break;
          }
LABEL_400:
          ++v250;
          v138 = v47 > 1;
          v47 = v47 >> 1;
        }
        while (v138);
LABEL_414:
        ++v44;
      }
      while (v44 != v46);
LABEL_428:
      v100 = *(_QWORD *)(v100 + 88);
    }
    while (v100);
  }
  v101 = (uint64_t *)v642[12];
  if (v101 != v642 + 12)
  {
    while ((*((_BYTE *)v101 + 33) & 1) == 0)
    {
LABEL_131:
      v101 = (uint64_t *)*v101;
      if (v101 == v642 + 12)
        goto LABEL_148;
    }
    v102 = v101[28];
    if ((v102 & 1) != 0)
      v103 = v102 & 0xFFFFFFFFFFFFFFF8;
    else
      v103 = *(_QWORD *)(v102 + 24);
    if (v103)
    {
      if ((v103 & 8) != 0)
      {
        if ((*(_BYTE *)(v103 - 79) & 1) != 0)
          goto LABEL_123;
      }
      else if (*(_DWORD *)(v103 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
             && ((*(_QWORD *)((v103 & 0xFFFFFFFFFFFFC000) + 8 * ((v103 >> 10) & 0xF) + 0x28) >> (v103 >> 4)) & 1) != 0)
      {
        goto LABEL_123;
      }
      *(_QWORD *)task_info_out = &off_1E3583C90;
      v655 = (double *)"InferredValue clean-up during GC";
      v542 = v101[28];
      if ((v542 & 1) != 0)
      {
        v101[28] = 5;
      }
      else
      {
        *(_QWORD *)(v542 + 24) = 0;
        if (*(_BYTE *)(v542 + 4) == 1)
          JSC::WatchpointSet::fireAllSlow(v542, (JSC::VM *)v62, task_info_out, v45, v46, v47, v48, (uint64_t)v49, *(double *)&v50);
        *(_BYTE *)(v542 + 4) = 2;
      }
    }
LABEL_123:
    v104 = (unint64_t)(v101 + 14);
    v105 = v101[26];
    while (v105)
    {
      if ((v105 & 8) != 0)
      {
        if ((*(_BYTE *)(v105 - 79) & 1) != 0)
          break;
      }
      else if (*(_DWORD *)(v105 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
             && ((*(_QWORD *)((v105 & 0xFFFFFFFFFFFFC000) + 8 * ((v105 >> 10) & 0xF) + 0x28) >> (v105 >> 4)) & 1) != 0)
      {
        break;
      }
      if (JSC::CodeBlock::shouldJettisonDueToWeakReference(v105, v62))
        v535 = 1;
      else
        v535 = 9;
      JSC::CodeBlock::jettison(v105, v535, 0, 0, v534, v530, v531, v532, v533);
      v206 = v105 == v101[26];
      v105 = v101[26];
      if (v206)
      {
        v101[26] = 0;
        break;
      }
    }
    v106 = v101[27];
    while (v106)
    {
      if ((v106 & 8) != 0)
      {
        if ((*(_BYTE *)(v106 - 79) & 1) != 0)
          break;
      }
      else if (*(_DWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v62 + 432)
             && ((*(_QWORD *)((v106 & 0xFFFFFFFFFFFFC000) + 8 * ((v106 >> 10) & 0xF) + 0x28) >> (v106 >> 4)) & 1) != 0)
      {
        break;
      }
      if (JSC::CodeBlock::shouldJettisonDueToWeakReference(v106, v62))
        v541 = 1;
      else
        v541 = 9;
      JSC::CodeBlock::jettison(v106, v541, 0, 0, v540, v536, v537, v538, v539);
      v206 = v106 == v101[27];
      v106 = v101[27];
      if (v206)
      {
        v101[27] = 0;
        break;
      }
    }
    if ((v104 & 8) != 0)
    {
      v545 = *((unsigned __int8 *)v101 + 36);
      v546 = (v545 >> 3) & 0x1C;
      v547 = 1 << v545;
      v548 = (unsigned int *)(v62 + 36528 + v546);
      while (1)
      {
        v549 = *v548;
        if ((*v548 & v547) == 0)
          break;
        v550 = __ldxr(v548);
        if (v550 == v549)
        {
          if (!__stxr(v549 & ~v547, v548))
            goto LABEL_131;
        }
        else
        {
          __clrex();
        }
      }
    }
    else
    {
      v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 36568)
                                   + (*(_DWORD *)(*(_QWORD *)(v104 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                   + 8)
                       + 8 * (*(_DWORD *)(*(_QWORD *)(v104 & 0xFFFFFFFFFFFFC000) + 12) & 7));
      if (v107)
      {
        v108 = 1 << (v104 >> 4);
        v109 = (unint64_t *)(v107 + 8 * ((v104 >> 10) & 0xF));
        while (1)
        {
          v110 = *v109;
          if ((*v109 & v108) == 0)
            break;
          v111 = __ldxr(v109);
          if (v111 == v110)
          {
            if (!__stxr(v110 & ~v108, v109))
              goto LABEL_131;
          }
          else
          {
            __clrex();
          }
        }
      }
    }
    goto LABEL_131;
  }
LABEL_148:
  m = v642;
  v113 = v642[126];
  v114 = *(unsigned int *)(v113 + 136);
  if ((_DWORD)v114)
  {
    v391 = 0;
    v392 = *(JSC::ErrorInstance **)(v113 + 120);
    v393 = *(_QWORD *)(v650 + 36952);
    v394 = (unint64_t)(v114 + 31) >> 5;
    do
    {
      v395 = *(_DWORD *)(v393 + 4 * v391) & *((_DWORD *)v392 + 10 * v391 + 8);
      if (v395)
      {
        v396 = 32 * v391;
        do
        {
          if ((v395 & 1) != 0)
          {
            if (*(_DWORD *)(v113 + 100) <= v396)
            {
              __break(0xC471u);
              goto LABEL_888;
            }
            v397 = *(unsigned int **)(*(_QWORD *)(v113 + 88) + 8 * v396);
            v398 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v650 + 36976) + (v396 & 0xFFFFFFF8) + 8) + 8 * (v396 & 7));
            v399 = *((_QWORD *)v397 + 11);
            v400 = *(_DWORD *)(*(_QWORD *)(v399 + 8) + 432);
            v401 = *(_DWORD *)(v399 + 32);
            __dmb(0xBu);
            if (v401 == v400)
            {
              v402 = v397[1];
              if (v402 <= 0x3FF)
              {
                v403 = v399 + 40;
                do
                {
                  if (((1 << v402) & *(_QWORD *)(v403 + 8 * (v402 >> 6))) != 0
                    && (*(_QWORD *)(v398 + 8 * (v402 >> 6)) & (1 << v402)) != 0)
                  {
                    v622 = v393;
                    v631 = v392;
                    v615 = v394;
                    v609 = v395;
                    JSC::GlobalExecutable::finalizeUnconditionally(*((_QWORD *)v397 + 11) + 16 * v402, v62);
                    v395 = v609;
                    v394 = v615;
                    v393 = v622;
                    v392 = v631;
                  }
                  v402 += *v397;
                }
                while (v402 < 0x400);
              }
            }
          }
          ++v396;
          v138 = v395 > 1;
          v395 >>= 1;
          m = v642;
        }
        while (v138);
      }
      ++v391;
    }
    while (v391 != v394);
    v113 = m[126];
  }
  v117 = *(uint64_t **)(v113 + 48);
  v115 = (uint64_t *)(v113 + 48);
  v116 = v117;
  v118 = v650;
  if (v117 != v115)
  {
    while (1)
    {
      v119 = *((unsigned __int8 *)v116 + 36);
      if (v119 >= 0x20)
        break;
      if (((*((_DWORD *)m + 250) >> v119) & 1) != 0 && (*((_BYTE *)v116 + 33) & 1) != 0)
        JSC::GlobalExecutable::finalizeUnconditionally((unint64_t)(v116 + 14), v62);
      v116 = (uint64_t *)*v116;
      if (v116 == v115)
        goto LABEL_153;
    }
LABEL_888:
    __break(1u);
LABEL_889:
    __break(0xC471u);
    JUMPOUT(0x1985B21F0);
  }
LABEL_153:
  v120 = m[4];
  if (v120)
  {
    LOBYTE(v659[0]) = v640;
    v651 = (integer_t *)v650;
    p_task_info_outCnt = (mach_msg_type_number_t *)v659;
    v417 = *(_QWORD *)(v120 + 448);
    v416 = *(_QWORD *)(v120 + 456);
    v418 = *(_QWORD *)(v417 + 120);
    v419 = *(unsigned int *)(v417 + 136);
    *(_QWORD *)task_info_out = v417 + 88;
    v655 = (double *)(v120 + 424);
    v656 = (double *)&v651;
    if ((_DWORD)v419)
    {
      v491 = 0;
      v492 = 0;
      v493 = (unint64_t)(v419 + 31) >> 5;
      do
      {
        v494 = *(_DWORD *)(v416 + 4 * v492) & *(_DWORD *)(v418 + 40 * v492 + 32);
        if (v494)
        {
          v577 = v491;
          do
          {
            if ((v494 & 1) != 0)
            {
              v637 = v577;
              JSC::IsoCellSet::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::EvalExecutable,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::EvalExecutable,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda#1}::operator()(task_info_out, v577);
              v577 = v637;
            }
            ++v577;
            v138 = v494 > 1;
            v494 >>= 1;
          }
          while (v138);
        }
        ++v492;
        v491 += 32;
      }
      while (v492 != v493);
      v417 = *(_QWORD *)(v120 + 448);
      v118 = v650;
    }
    v422 = *(uint64_t **)(v417 + 48);
    v421 = (uint64_t *)(v417 + 48);
    v420 = v422;
    for (m = v642; v420 != v421; v420 = (uint64_t *)*v420)
    {
      v423 = *((unsigned __int8 *)v420 + 36);
      if (v423 >= 0x20)
        goto LABEL_888;
      if (((*(_DWORD *)(v120 + 440) >> v423) & 1) != 0 && (*((_BYTE *)v420 + 33) & 1) != 0)
        JSC::GlobalExecutable::finalizeUnconditionally((unint64_t)(v420 + 14), (uint64_t)(v651 - 48));
    }
  }
  v121 = m[5];
  if (v121)
  {
    v429 = *(_QWORD *)(v121 + 448);
    v430 = *(unsigned int *)(v429 + 136);
    if ((_DWORD)v430)
    {
      v431 = 0;
      v432 = *(JSC::ErrorInstance **)(v429 + 120);
      v433 = *(_QWORD *)(v121 + 456);
      v434 = (unint64_t)(v430 + 31) >> 5;
      do
      {
        v435 = *(_DWORD *)(v433 + 4 * v431) & *((_DWORD *)v432 + 10 * v431 + 8);
        if (v435)
        {
          v436 = 32 * v431;
          do
          {
            if ((v435 & 1) != 0)
            {
              if (*(_DWORD *)(v429 + 100) <= v436)
              {
                __break(0xC471u);
                JUMPOUT(0x1985B2200);
              }
              v437 = *(unsigned int **)(*(_QWORD *)(v429 + 88) + 8 * v436);
              v438 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 + 480) + (v436 & 0xFFFFFFF8) + 8) + 8 * (v436 & 7));
              v439 = *((_QWORD *)v437 + 11);
              v440 = *(_DWORD *)(*(_QWORD *)(v439 + 8) + 432);
              v441 = *(_DWORD *)(v439 + 32);
              __dmb(0xBu);
              if (v441 == v440)
              {
                v442 = v437[1];
                if (v442 <= 0x3FF)
                {
                  v443 = v439 + 40;
                  do
                  {
                    if (((1 << v442) & *(_QWORD *)(v443 + 8 * (v442 >> 6))) != 0
                      && (*(_QWORD *)(v438 + 8 * (v442 >> 6)) & (1 << v442)) != 0)
                    {
                      v603 = v438;
                      v624 = v433;
                      v636 = v432;
                      v617 = v434;
                      v610 = v435;
                      JSC::GlobalExecutable::finalizeUnconditionally(*((_QWORD *)v437 + 11) + 16 * v442, v62);
                      v438 = v603;
                      v435 = v610;
                      v434 = v617;
                      v433 = v624;
                      v432 = v636;
                    }
                    v442 += *v437;
                  }
                  while (v442 < 0x400);
                }
              }
            }
            ++v436;
            v138 = v435 > 1;
            v435 >>= 1;
            v118 = v650;
          }
          while (v138);
        }
        ++v431;
      }
      while (v431 != v434);
      v429 = *(_QWORD *)(v121 + 448);
    }
    v497 = *(uint64_t **)(v429 + 48);
    v495 = (uint64_t *)(v429 + 48);
    for (n = v497; n != v495; n = (uint64_t *)*n)
    {
      v498 = *((unsigned __int8 *)n + 36);
      if (v498 >= 0x20)
        goto LABEL_888;
      if (((*(_DWORD *)(v121 + 440) >> v498) & 1) != 0 && (*((_BYTE *)n + 33) & 1) != 0)
        JSC::GlobalExecutable::finalizeUnconditionally((unint64_t)(n + 14), v62);
    }
  }
  v618 = (uint64_t *)(v118 + 33904);
  v122 = *(_QWORD *)(v118 + 34152);
  if (v122)
  {
    while (1)
    {
      v123 = *(unsigned int *)(v122 + 48);
      if ((_DWORD)v123)
        break;
LABEL_179:
      v122 = *(_QWORD *)(v122 + 88);
      if (!v122)
        goto LABEL_180;
    }
    v124 = 0;
    v125 = *(JSC::ErrorInstance **)(v122 + 32);
    v44 = (unint64_t)(v123 + 31) >> 5;
    while (1)
    {
      v126 = *((_DWORD *)v125 + 10 * v124 + 8);
      if (v126)
        break;
LABEL_178:
      if (++v124 == v44)
        goto LABEL_179;
    }
    v127 = 32 * v124;
    while (1)
    {
      if ((v126 & 1) != 0)
      {
        if (v127 >= *(unsigned int *)(v122 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1985B21C8);
        }
        v128 = *(unsigned int **)(*(_QWORD *)v122 + 8 * v127);
        v129 = *((_QWORD *)v128 + 11);
        v130 = *(_DWORD *)(*(_QWORD *)(v129 + 8) + 432);
        v131 = *(_DWORD *)(v129 + 32);
        __dmb(0xBu);
        if (v131 == v130)
        {
          v132 = v128[1];
          if (v132 <= 0x3FF)
            break;
        }
      }
LABEL_177:
      ++v127;
      v138 = v126 > 1;
      v126 >>= 1;
      if (!v138)
        goto LABEL_178;
    }
    v133 = v129 + 40;
    while (1)
    {
      if (((*(_QWORD *)(v133 + ((v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v132) & 1) != 0)
      {
        v134 = *((_QWORD *)v128 + 11) + 16 * v132;
        v135 = *(_QWORD *)(v134 + 40);
        v136 = (v135 & 1) != 0 ? v135 & 0xFFFFFFFFFFFFFFF8 : *(_QWORD *)(v135 + 24);
        if (v136)
        {
          if ((v136 & 8) != 0)
          {
            if ((*(_BYTE *)(v136 - 79) & 1) == 0)
              goto LABEL_174;
          }
          else if (*(_DWORD *)(v136 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v62 + 432)
                 || ((*(_QWORD *)((v136 & 0xFFFFFFFFFFFFC000) + 8 * ((v136 >> 10) & 0xF) + 0x28) >> (v136 >> 4)) & 1) == 0)
          {
LABEL_174:
            *(_QWORD *)task_info_out = &off_1E3583C90;
            v655 = (double *)"InferredValue clean-up during GC";
            v137 = *(_QWORD *)(v134 + 40);
            if ((v137 & 1) != 0)
            {
              *(_QWORD *)(v134 + 40) = 5;
            }
            else
            {
              *(_QWORD *)(v137 + 24) = 0;
              if (*(_BYTE *)(v137 + 4) == 1)
              {
                v616 = v44;
                v634 = v125;
                JSC::WatchpointSet::fireAllSlow(v137, (JSC::VM *)v62, task_info_out, v45, v46, v47, v48, (uint64_t)v49, *(double *)&v50);
                v44 = v616;
                v125 = v634;
              }
              *(_BYTE *)(v137 + 4) = 2;
            }
          }
        }
      }
      v132 += *v128;
      if (v132 >= 0x400)
        goto LABEL_177;
    }
  }
LABEL_180:
  kk = v650;
  v140 = v650 + 34168;
  v141 = *(uint64_t **)(v650 + 34168);
  v142 = v618;
  if (v141 != (uint64_t *)(v650 + 34168))
  {
    do
    {
      if ((*((_BYTE *)v141 + 33) & 1) != 0)
      {
        v143 = v141[19];
        v144 = (v143 & 1) != 0 ? v143 & 0xFFFFFFFFFFFFFFF8 : *(_QWORD *)(v143 + 24);
        if (v144)
        {
          if ((v144 & 8) != 0)
          {
            if ((*(_BYTE *)(v144 - 79) & 1) == 0)
              goto LABEL_785;
          }
          else if (*(_DWORD *)(v144 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v62 + 432)
                 || ((*(_QWORD *)((v144 & 0xFFFFFFFFFFFFC000) + 8 * ((v144 >> 10) & 0xF) + 0x28) >> (v144 >> 4)) & 1) == 0)
          {
LABEL_785:
            *(_QWORD *)task_info_out = &off_1E3583C90;
            v655 = (double *)"InferredValue clean-up during GC";
            v551 = v141[19];
            if ((v551 & 1) != 0)
            {
              v141[19] = 5;
            }
            else
            {
              *(_QWORD *)(v551 + 24) = 0;
              if (*(_BYTE *)(v551 + 4) == 1)
                JSC::WatchpointSet::fireAllSlow(v551, (JSC::VM *)v62, task_info_out, v45, v46, v47, v48, (uint64_t)v49, *(double *)&v50);
              *(_BYTE *)(v551 + 4) = 2;
            }
          }
        }
      }
      v141 = (uint64_t *)*v141;
    }
    while (v141 != (uint64_t *)v140);
  }
  v145 = v640;
  LOBYTE(task_info_outCnt) = v640;
  v651 = (integer_t *)v650;
  p_task_info_outCnt = &task_info_outCnt;
  v146 = *(_QWORD *)(v650 + 35904);
  v147 = *(unsigned int *)(v146 + 136);
  if ((_DWORD)v147)
  {
    v148 = 0;
    v602 = *(_QWORD *)(v650 + 35912);
    v605 = *(_QWORD *)(v146 + 120);
    v599 = (unint64_t)(v147 + 31) >> 5;
    do
    {
      v626 = v148;
      v149 = *(_DWORD *)(v602 + 4 * (_QWORD)v148) & *(_DWORD *)(v605 + 40 * (_QWORD)v148 + 32);
      if (v149)
      {
        v150 = 32 * (_DWORD)v148;
        do
        {
          if ((v149 & 1) != 0)
          {
            if (*(_DWORD *)(v146 + 100) <= v150)
            {
              __break(0xC471u);
              JUMPOUT(0x1985B21C0);
            }
            v151 = *(unsigned int **)(*(_QWORD *)(v146 + 88) + 8 * v150);
            v152 = *(_QWORD *)(*(_QWORD *)(*v642 + (v150 & 0xFFFFFFF8) + 8) + 8 * (v150 & 7));
            v153 = *((_QWORD *)v151 + 11);
            v154 = *(_DWORD *)(*(_QWORD *)(v153 + 8) + 432);
            v155 = *(_DWORD *)(v153 + 32);
            __dmb(0xBu);
            if (v155 == v154)
            {
              v156 = v151[1];
              if (v156 <= 0x3FF)
              {
                v157 = v153 + 40;
                do
                {
                  if (((1 << v156) & *(_QWORD *)(v157 + 8 * (v156 >> 6))) != 0
                    && (*(_QWORD *)(v152 + 8 * (v156 >> 6)) & (1 << v156)) != 0)
                  {
                    JSC::CodeBlock::finalizeUnconditionally((JSC::CodeBlock *)(*((_QWORD *)v151 + 11) + 16 * v156), (JSC::VM *)(v651 - 48), (void *)*(unsigned __int8 *)p_task_info_outCnt, v45, v46, v47, v48, v49, v50);
                  }
                  v156 += *v151;
                }
                while (v156 < 0x400);
              }
            }
          }
          ++v150;
          v138 = v149 > 1;
          v149 >>= 1;
        }
        while (v138);
      }
      v148 = (JSC::ErrorInstance *)((char *)v626 + 1);
    }
    while ((JSC::ErrorInstance *)((char *)v626 + 1) != (JSC::ErrorInstance *)v599);
    v140 = v650 + 34168;
    v142 = v618;
    v146 = *(_QWORD *)(v650 + 35904);
    kk = v650;
    v145 = v640;
  }
  LOWORD(v659[0]) = *(_WORD *)(*(_QWORD *)(v146 + 16) + 8);
  *(_QWORD *)task_info_out = kk + 35880;
  v655 = (double *)&v651;
  v656 = v659;
  v160 = *(_BYTE **)(v146 + 48);
  v158 = (_BYTE *)(v146 + 48);
  for (ii = v160; ii != v158; ii = *(_BYTE **)ii)
    JSC::IsoCellSet::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::CodeBlock,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::CodeBlock,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()((_QWORD **)task_info_out, ii, v50, v44, v45, v46, v47, v48, v49);
  if (v145 == 1)
  {
    LOBYTE(task_info_outCnt) = 1;
    v651 = (integer_t *)kk;
    p_task_info_outCnt = &task_info_outCnt;
    for (jj = *(_QWORD *)(v140 + 232); jj; jj = *(_QWORD *)(jj + 88))
    {
      v467 = *(unsigned int *)(jj + 48);
      if ((_DWORD)v467)
      {
        v468 = 0;
        v646 = *(_QWORD *)(jj + 32);
        v469 = (unint64_t)(v467 + 31) >> 5;
        do
        {
          v470 = *(_DWORD *)(v646 + 40 * v468 + 32);
          if (v470)
          {
            v471 = 32 * v468;
            do
            {
              if ((v470 & 1) != 0)
              {
                if (v471 >= *(unsigned int *)(jj + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1985B21D8);
                }
                v472 = *(unsigned int **)(*(_QWORD *)jj + 8 * v471);
                v473 = *((_QWORD *)v472 + 11);
                v474 = *(_DWORD *)(*(_QWORD *)(v473 + 8) + 432);
                v475 = *(_DWORD *)(v473 + 32);
                __dmb(0xBu);
                if (v475 == v474)
                {
                  v476 = v472[1];
                  if (v476 <= 0x3FF)
                  {
                    v477 = v473 + 40;
                    do
                    {
                      if (((*(_QWORD *)(v477 + ((v476 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v476) & 1) != 0)
                        JSC::Structure::finalizeUnconditionally(*((_QWORD *)v472 + 11) + 16 * v476, (uint64_t)(v651 - 48));
                      v476 += *v472;
                    }
                    while (v476 < 0x400);
                  }
                }
              }
              ++v471;
              v138 = v470 > 1;
              v470 >>= 1;
            }
            while (v138);
          }
          ++v468;
        }
        while (v468 != v469);
      }
    }
    v142 = v618;
    LOWORD(v659[0]) = *(_WORD *)(*(_QWORD *)(v650 + 34384) + 8);
    *(_QWORD *)task_info_out = &v651;
    v655 = v659;
    v478 = *(_QWORD **)(v650 + 34416);
    for (kk = v650; v478 != (_QWORD *)(v650 + 34416); v478 = (_QWORD *)*v478)
      JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::Structure,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::Structure,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()((_QWORD **)task_info_out, (uint64_t)v478);
    LOBYTE(task_info_outCnt) = 1;
    v651 = (integer_t *)v650;
    p_task_info_outCnt = &task_info_outCnt;
    for (mm = *(_QWORD *)(v650 + 34648); mm; mm = *(_QWORD *)(mm + 88))
    {
      v518 = *(unsigned int *)(mm + 48);
      if ((_DWORD)v518)
      {
        v519 = 0;
        v520 = *(_QWORD *)(mm + 32);
        v521 = (unint64_t)(v518 + 31) >> 5;
        do
        {
          v522 = *(_DWORD *)(v520 + 40 * v519 + 32);
          if (v522)
          {
            v523 = 32 * v519;
            v647 = v520;
            do
            {
              if ((v522 & 1) != 0)
              {
                if (v523 >= *(unsigned int *)(mm + 12))
                {
                  __break(0xC471u);
LABEL_895:
                  JUMPOUT(0x1985B0B6CLL);
                }
                v524 = *(unsigned int **)(*(_QWORD *)mm + 8 * v523);
                v525 = *((_QWORD *)v524 + 11);
                v526 = *(_DWORD *)(*(_QWORD *)(v525 + 8) + 432);
                v527 = *(_DWORD *)(v525 + 32);
                __dmb(0xBu);
                if (v527 == v526)
                {
                  v528 = v524[1];
                  if (v528 <= 0x3FF)
                  {
                    v529 = v525 + 40;
                    do
                    {
                      if (((*(_QWORD *)(v529 + ((v528 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v528) & 1) != 0)
                        JSC::Structure::finalizeUnconditionally(*((_QWORD *)v524 + 11) + 16 * v528, (uint64_t)(v651 - 48));
                      v528 += *v524;
                    }
                    while (v528 < 0x400);
                  }
                }
              }
              ++v523;
              v138 = v522 > 1;
              v522 >>= 1;
              v142 = v618;
              v520 = v647;
            }
            while (v138);
          }
          ++v519;
          kk = v650;
        }
        while (v519 != v521);
      }
    }
    LOWORD(v659[0]) = *(_WORD *)(*(_QWORD *)(v650 + 34632) + 8);
    *(_QWORD *)task_info_out = &v651;
    v655 = v659;
    for (nn = *(_QWORD **)(v650 + 34664); nn != (_QWORD *)(v650 + 34664); nn = (_QWORD *)*nn)
      JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::Structure,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::Structure,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()((_QWORD **)task_info_out, (uint64_t)nn);
  }
  v161 = *v142;
  if (*v142)
  {
    while (1)
    {
      v162 = *(unsigned int *)(v161 + 48);
      if ((_DWORD)v162)
        break;
LABEL_262:
      v161 = *(_QWORD *)(v161 + 88);
      if (!v161)
        goto LABEL_263;
    }
    v163 = 0;
    v627 = *(JSC::ErrorInstance **)(v161 + 32);
    v606 = (unint64_t)(v162 + 31) >> 5;
    while (1)
    {
      v643 = v163;
      v164 = *((_DWORD *)v627 + 10 * v163 + 8);
      if (v164)
        break;
LABEL_261:
      kk = v650;
      v163 = v643 + 1;
      if (v643 + 1 == v606)
        goto LABEL_262;
    }
    v165 = 32 * v163;
    while (1)
    {
      if ((v164 & 1) != 0)
      {
        if (v165 >= *(unsigned int *)(v161 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1985B21D0);
        }
        v166 = *(unsigned int **)(*(_QWORD *)v161 + 8 * v165);
        v167 = *((_QWORD *)v166 + 11);
        v168 = *(_DWORD *)(*(_QWORD *)(v167 + 8) + 432);
        v169 = *(_DWORD *)(v167 + 32);
        __dmb(0xBu);
        if (v169 == v168)
        {
          v170 = v166[1];
          if (v170 <= 0x3FF)
            break;
        }
      }
LABEL_217:
      ++v165;
      v138 = v164 > 1;
      v164 >>= 1;
      if (!v138)
        goto LABEL_261;
    }
    v171 = v167 + 40;
    while (1)
    {
      if (((*(_QWORD *)(v171 + ((v170 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v170) & 1) == 0)
        goto LABEL_225;
      v172 = *((_QWORD *)v166 + 11) + 16 * v170;
      v173 = *(uint64_t **)(v172 + 64);
      if (!v173)
        goto LABEL_225;
      v174 = v173[1];
      if (v174 && (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v174 + 8), v62) & 1) == 0)
        goto LABEL_233;
      v175 = *v173;
      if (v175)
        break;
LABEL_234:
      v176 = *(_QWORD *)(v172 + 64);
      v177 = *(_QWORD *)(v176 + 32);
      if (!v177 || (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v177 + 8), v62) & 1) != 0)
      {
        v178 = *(_QWORD *)(v176 + 24);
        if (!v178)
          goto LABEL_241;
        while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v178 + 24), v62) & 1) != 0)
        {
          v178 = *(_QWORD *)(v178 + 48);
          if (!v178)
            goto LABEL_241;
        }
      }
      JSC::StructureRareData::clearCachedSpecialProperty(v172, (void *)1, v44, v45, v46, v47, v48, (uint64_t)v49);
LABEL_241:
      v179 = *(unint64_t **)(v172 + 64);
      v180 = v179[7];
      if (v180)
      {
        v181 = (unint64_t *)(v180 + 8);
        goto LABEL_243;
      }
      while (1)
      {
        v179 = (unint64_t *)v179[6];
        if (!v179)
          break;
        v181 = v179 + 3;
LABEL_243:
        if ((JSC::ObjectPropertyCondition::isStillLive(v181, v62) & 1) == 0)
        {
          JSC::StructureRareData::clearCachedSpecialProperty(v172, (void *)2, v44, v45, v46, v47, v48, (uint64_t)v49);
          break;
        }
      }
      v182 = *(_QWORD *)(v172 + 64);
      v183 = *(_QWORD *)(v182 + 80);
      if (v183 && (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v183 + 8), v62) & 1) == 0)
        goto LABEL_253;
      v184 = *(_QWORD *)(v182 + 72);
      if (v184)
      {
        while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v184 + 24), v62) & 1) != 0)
        {
          v184 = *(_QWORD *)(v184 + 48);
          if (!v184)
            goto LABEL_254;
        }
LABEL_253:
        JSC::StructureRareData::clearCachedSpecialProperty(v172, (void *)3, v44, v45, v46, v47, v48, (uint64_t)v49);
      }
LABEL_254:
      v185 = *(_QWORD *)(v172 + 64);
      v186 = *(_QWORD *)(v185 + 104);
      if (v186 && (JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v186 + 8), v62) & 1) == 0)
        goto LABEL_260;
      v187 = *(_QWORD *)(v185 + 96);
      if (v187)
      {
        while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v187 + 24), v62) & 1) != 0)
        {
          v187 = *(_QWORD *)(v187 + 48);
          if (!v187)
            goto LABEL_225;
        }
LABEL_260:
        JSC::StructureRareData::clearCachedSpecialProperty(v172, (void *)4, v44, v45, v46, v47, v48, (uint64_t)v49);
      }
LABEL_225:
      v170 += *v166;
      if (v170 >= 0x400)
        goto LABEL_217;
    }
    while ((JSC::ObjectPropertyCondition::isStillLive((unint64_t *)(v175 + 24), v62) & 1) != 0)
    {
      v175 = *(_QWORD *)(v175 + 48);
      if (!v175)
        goto LABEL_234;
    }
LABEL_233:
    JSC::StructureRareData::clearCachedSpecialProperty(v172, 0, v44, v45, v46, v47, v48, (uint64_t)v49);
    goto LABEL_234;
  }
LABEL_263:
  v188 = (uint64_t *)v618[2];
  for (i1 = v650 + 36952; v188 != v618 + 2; v188 = (uint64_t *)*v188)
  {
    if ((*((_BYTE *)v188 + 33) & 1) != 0)
      JSC::StructureRareData::finalizeUnconditionally((uint64_t)(v188 + 14), v62);
  }
  v190 = *(_QWORD *)(v650 + 37280);
  v191 = *(unsigned int *)(v190 + 136);
  if ((_DWORD)v191)
  {
    v192 = 0;
    v193 = (_QWORD *)(kk + 37312);
    v194 = *(_QWORD *)(v190 + 120);
    v195 = *(_QWORD *)(v650 + 37288);
    v196 = (unint64_t)(v191 + 31) >> 5;
    do
    {
      v197 = *(_DWORD *)(v195 + 4 * (_QWORD)v192) & *(_DWORD *)(v194 + 40 * (_QWORD)v192 + 32);
      if (v197)
      {
        v198 = 32 * (_DWORD)v192;
        do
        {
          if ((v197 & 1) != 0)
          {
            if (*(_DWORD *)(v190 + 100) <= v198)
            {
              __break(0xC471u);
              JUMPOUT(0x1985B2198);
            }
            v199 = *(unsigned int **)(*(_QWORD *)(v190 + 88) + 8 * v198);
            v200 = *(_QWORD *)(*(_QWORD *)(*v193 + (v198 & 0xFFFFFFF8) + 8) + 8 * (v198 & 7));
            v201 = *((_QWORD *)v199 + 11);
            v202 = *(_DWORD *)(*(_QWORD *)(v201 + 8) + 432);
            v203 = *(_DWORD *)(v201 + 32);
            __dmb(0xBu);
            if (v203 == v202)
            {
              v204 = v199[1];
              if (v204 <= 0x3FF)
              {
                v205 = v201 + 40;
                do
                {
                  if (((1 << v204) & *(_QWORD *)(v205 + 8 * (v204 >> 6))) != 0
                    && (*(_QWORD *)(v200 + 8 * (v204 >> 6)) & (1 << v204)) != 0)
                  {
                    v206 = (_BYTE)word_1ECF4C758 || BYTE1(dword_1ECF4C240) == 0;
                    if (v206 || BYTE1(dword_1ECF4C723) != 0)
                    {
                      v208 = *((_QWORD *)v199 + 11) + 16 * v204;
                      if ((*(_QWORD *)(v208 + 8) & 0x80000000) == 0)
                      {
                        v601 = v196;
                        v604 = v195;
                        v611 = v194;
                        v625 = v193;
                        v638 = v192;
                        LOBYTE(v651) = 0;
                        LOBYTE(v659[0]) = 0;
                        *(_QWORD *)task_info_out = v62;
                        v655 = (double *)&v651;
                        v649 = v208;
                        v656 = v659;
                        JSC::UnlinkedFunctionExecutable::finalizeUnconditionally(JSC::VM &,JSC::CollectionScope)::$_0::operator()((_BYTE **)task_info_out, (unint64_t *)(v208 + 56));
                        JSC::UnlinkedFunctionExecutable::finalizeUnconditionally(JSC::VM &,JSC::CollectionScope)::$_0::operator()((_BYTE **)task_info_out, (unint64_t *)(v649 + 64));
                        if ((_BYTE)v651 && !LOBYTE(v659[0]))
                          JSC::IsoCellSet::remove(v62 + 37448, v649);
                        v193 = v625;
                        v192 = v638;
                        v195 = v604;
                        v194 = v611;
                        v196 = v601;
                      }
                    }
                  }
                  v204 += *v199;
                }
                while (v204 < 0x400);
              }
            }
          }
          ++v198;
          v138 = v197 > 1;
          v197 >>= 1;
        }
        while (v138);
      }
      v192 = (JSC::ErrorInstance *)((char *)v192 + 1);
    }
    while (v192 != (JSC::ErrorInstance *)v196);
    i1 = v650 + 36952;
    v190 = *(_QWORD *)(v650 + 37280);
    kk = v650;
  }
  v211 = *(unint64_t **)(v190 + 48);
  v209 = (uint64_t *)(v190 + 48);
  for (i2 = v211; i2 != (unint64_t *)v209; i2 = (unint64_t *)*i2)
  {
    v212 = *((unsigned __int8 *)i2 + 36);
    if (v212 >= 0x20)
      goto LABEL_888;
    if (((*(_DWORD *)(i1 + 320) >> v212) & 1) != 0 && (*((_BYTE *)i2 + 33) & 1) != 0)
    {
      v213 = (_BYTE)word_1ECF4C758 || BYTE1(dword_1ECF4C240) == 0;
      v214 = !v213 && BYTE1(dword_1ECF4C723) == 0;
      if (!v214 && (i2[15] & 0x80000000) == 0)
      {
        LOBYTE(v651) = 0;
        LOBYTE(v659[0]) = 0;
        *(_QWORD *)task_info_out = v62;
        v655 = (double *)&v651;
        v656 = v659;
        JSC::UnlinkedFunctionExecutable::finalizeUnconditionally(JSC::VM &,JSC::CollectionScope)::$_0::operator()((_BYTE **)task_info_out, i2 + 21);
        JSC::UnlinkedFunctionExecutable::finalizeUnconditionally(JSC::VM &,JSC::CollectionScope)::$_0::operator()((_BYTE **)task_info_out, i2 + 22);
        if ((_BYTE)v651)
        {
          if (!LOBYTE(v659[0]))
            JSC::IsoCellSet::remove(v62 + 37448, (unint64_t)(i2 + 14));
        }
        kk = v650;
        i1 = v650 + 36952;
      }
    }
  }
  v215 = (_QWORD *)(v650 + 34168);
  v216 = *(_QWORD **)(v650 + 35520);
  if (v216)
  {
    LOBYTE(task_info_outCnt) = v640;
    v651 = (integer_t *)kk;
    p_task_info_outCnt = &task_info_outCnt;
    *(_QWORD *)task_info_out = &v651;
    for (i3 = v216[4]; i3; i3 = *(_QWORD *)(i3 + 88))
    {
      v513 = *(unsigned int *)(i3 + 48);
      if ((_DWORD)v513)
      {
        v514 = 0;
        v515 = *(_QWORD *)(i3 + 32);
        v516 = (unint64_t)(v513 + 31) >> 5;
        do
        {
          v517 = *(_DWORD *)(v515 + 40 * v514 + 32);
          if (v517)
          {
            v586 = 32 * v514;
            do
            {
              if ((v517 & 1) != 0)
              {
                v648 = v586;
                JSC::BlockDirectory::forEachNotEmptyBlock<void JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::MarkedBlock::Handle *)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(unsigned long)#1}::operator()((_QWORD **)task_info_out, i3, v586);
                v586 = v648;
              }
              ++v586;
              v138 = v517 > 1;
              v517 >>= 1;
            }
            while (v138);
          }
          ++v514;
          kk = v650;
        }
        while (v514 != v516);
      }
    }
    LOWORD(v659[0]) = *(_WORD *)(v216[2] + 8);
    *(_QWORD *)task_info_out = &v651;
    v655 = v659;
    v451 = (_QWORD *)v216[6];
    v449 = v216 + 6;
    for (i4 = v451; i4 != v449; i4 = (_QWORD *)*i4)
      JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()((_QWORD **)task_info_out, (uint64_t)i4);
    v215 = (_QWORD *)(v650 + 34168);
  }
  v217 = v215[168];
  if (v217)
  {
    for (i5 = *(_QWORD *)(v217 + 32); i5; i5 = *(_QWORD *)(i5 + 88))
    {
      v404 = *(unsigned int *)(i5 + 48);
      if ((_DWORD)v404)
      {
        v405 = 0;
        v406 = *(_QWORD *)(i5 + 32);
        v407 = (unint64_t)(v404 + 31) >> 5;
        do
        {
          v408 = *(_DWORD *)(v406 + 40 * v405 + 32);
          if (v408)
          {
            v409 = 32 * v405;
            v645 = v406;
            v632 = (JSC::ErrorInstance *)v407;
            do
            {
              if ((v408 & 1) != 0)
              {
                if (v409 >= *(unsigned int *)(i5 + 12))
                  goto LABEL_889;
                v410 = *(unsigned int **)(*(_QWORD *)i5 + 8 * v409);
                v411 = *((_QWORD *)v410 + 11);
                v412 = *(_DWORD *)(*(_QWORD *)(v411 + 8) + 432);
                v413 = *(_DWORD *)(v411 + 32);
                __dmb(0xBu);
                if (v413 == v412)
                {
                  v414 = v410[1];
                  if (v414 <= 0x3FF)
                  {
                    v415 = v411 + 40;
                    do
                    {
                      if (((*(_QWORD *)(v415 + ((v414 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v414) & 1) != 0)
                        JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::finalizeUnconditionally(*((_QWORD *)v410 + 11) + 16 * v414, v62);
                      v414 += *v410;
                    }
                    while (v414 < 0x400);
                  }
                }
              }
              ++v409;
              v138 = v408 > 1;
              v408 >>= 1;
              v406 = v645;
              kk = v650;
              v215 = (_QWORD *)(v650 + 34168);
              v407 = (unint64_t)v632;
            }
            while (v138);
          }
          ++v405;
        }
        while (v405 != v407);
      }
    }
    v221 = *(uint64_t **)(v217 + 48);
    v219 = (uint64_t *)(v217 + 48);
    for (i6 = v221; i6 != v219; i6 = (uint64_t *)*i6)
    {
      if ((*((_BYTE *)i6 + 33) & 1) != 0)
        JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::finalizeUnconditionally((uint64_t)(i6 + 14), v62);
    }
  }
  v222 = v215[167];
  if (v222)
  {
    v444 = *(_QWORD *)(v222 + 32);
    if (!v444)
    {
LABEL_616:
      v447 = *(uint64_t **)(v222 + 48);
      v445 = (uint64_t *)(v222 + 48);
      for (i7 = v447; i7 != v445; i7 = (uint64_t *)*i7)
      {
        if ((*((_BYTE *)i7 + 33) & 1) != 0)
          JSC::JSWeakObjectRef::finalizeUnconditionally((uint64_t)(i7 + 14), v62);
      }
      goto LABEL_311;
    }
    while (1)
    {
      v499 = *(unsigned int *)(v444 + 48);
      if ((_DWORD)v499)
        break;
LABEL_702:
      v444 = *(_QWORD *)(v444 + 88);
      if (!v444)
        goto LABEL_616;
    }
    v500 = 0;
    v501 = *(_QWORD *)(v444 + 32);
    v502 = (unint64_t)(v499 + 31) >> 5;
    while (1)
    {
      v503 = *(_DWORD *)(v501 + 40 * v500 + 32);
      if (v503)
        break;
LABEL_706:
      if (++v500 == v502)
        goto LABEL_702;
    }
    v504 = 32 * v500;
    while (1)
    {
      if ((v503 & 1) != 0)
      {
        if (v504 >= *(unsigned int *)(v444 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1985B2208);
        }
        v505 = *(unsigned int **)(*(_QWORD *)v444 + 8 * v504);
        v506 = *((_QWORD *)v505 + 11);
        v507 = *(_DWORD *)(*(_QWORD *)(v506 + 8) + 432);
        v508 = *(_DWORD *)(v506 + 32);
        __dmb(0xBu);
        if (v508 == v507)
        {
          v509 = v505[1];
          if (v509 <= 0x3FF)
            break;
        }
      }
LABEL_724:
      ++v504;
      v138 = v503 > 1;
      v503 >>= 1;
      if (!v138)
        goto LABEL_706;
    }
    v510 = v506 + 40;
    while (1)
    {
      if (((*(_QWORD *)(v510 + ((v509 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v509) & 1) == 0)
        goto LABEL_715;
      v511 = *((_QWORD *)v505 + 11) + 16 * v509;
      v512 = *(_QWORD *)(v511 + 24);
      if (!v512)
        goto LABEL_715;
      if ((v512 & 8) == 0)
        break;
      if ((*(_BYTE *)(v512 - 79) & 1) == 0)
        goto LABEL_807;
LABEL_715:
      v509 += *v505;
      if (v509 >= 0x400)
        goto LABEL_724;
    }
    v44 = v512 & 0xFFFFFFFFFFFFC000;
    v46 = *(unsigned int *)(v62 + 432);
    v45 = *(unsigned int *)(v512 & 0xFFFFFFFFFFFFC000 | 0x20);
    v47 = v45;
    if ((_DWORD)v45 == (_DWORD)v46)
    {
      v45 = 0;
      v46 = v512 >> 4;
      if (((*(_QWORD *)((v512 & 0xFFFFFFFFFFFFC000) + 8 * ((v512 >> 10) & 0xF) + 0x28) >> (v512 >> 4)) & 1) != 0)
        goto LABEL_715;
    }
LABEL_807:
    *(_QWORD *)(v511 + 24) = 0;
    goto LABEL_715;
  }
LABEL_311:
  v223 = v215[107];
  if (v223)
  {
    for (i8 = *(_QWORD *)(v223 + 32); i8; i8 = *(_QWORD *)(i8 + 88))
    {
      v377 = *(unsigned int *)(i8 + 48);
      if ((_DWORD)v377)
      {
        v378 = 0;
        v608 = (unint64_t)(v377 + 31) >> 5;
        v613 = *(_QWORD *)(i8 + 32);
        do
        {
          v379 = *(_DWORD *)(v613 + 40 * v378 + 32);
          if (v379)
          {
            v380 = 32 * v378;
            v621 = v378;
            do
            {
              v644 = v380;
              if ((v379 & 1) != 0)
              {
                if (v380 >= *(unsigned int *)(i8 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1985B21F8);
                }
                v381 = *(unsigned int **)(*(_QWORD *)i8 + 8 * v380);
                v382 = *((_QWORD *)v381 + 11);
                v383 = *(_DWORD *)(*(_QWORD *)(v382 + 8) + 432);
                v384 = *(_DWORD *)(v382 + 32);
                __dmb(0xBu);
                if (v384 == v383)
                {
                  v385 = v381[1];
                  if (v385 <= 0x3FF)
                  {
                    v386 = v382 + 40;
                    do
                    {
                      if (((*(_QWORD *)(v386 + ((v385 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v385) & 1) != 0)
                      {
                        v630 = (JSC::ErrorInstance *)(*((_QWORD *)v381 + 11) + 16 * v385);
                        v387 = *((_QWORD *)v630 + 3);
                        if (v387)
                        {
                          v388 = *(unsigned int *)(v387 + 12);
                          if ((_DWORD)v388)
                          {
                            v389 = *(unint64_t **)v387;
                            v390 = 40 * v388;
                            while ((JSC::StackFrame::isMarked(v389, v62) & 1) != 0)
                            {
                              v389 += 5;
                              v390 -= 40;
                              if (!v390)
                                goto LABEL_529;
                            }
                            JSC::ErrorInstance::computeErrorInfo(v630, (JSC::VM *)v62, v44, v45, v46, v47, v48, (uint64_t)v49);
                          }
                        }
                      }
LABEL_529:
                      v385 += *v381;
                    }
                    while (v385 < 0x400);
                  }
                }
              }
              v380 = v644 + 1;
              v138 = v379 > 1;
              v379 >>= 1;
              v378 = v621;
            }
            while (v138);
          }
          ++v378;
          kk = v650;
          v215 = (_QWORD *)(v650 + 34168);
        }
        while (v378 != v608);
      }
    }
    v372 = *(uint64_t **)(v223 + 48);
    v370 = (uint64_t *)(v223 + 48);
    for (i9 = v372; i9 != v370; v215 = (_QWORD *)(v650 + 34168))
    {
      if ((*((_BYTE *)i9 + 33) & 1) != 0)
      {
        v373 = i9[17];
        if (v373)
        {
          v374 = *(unsigned int *)(v373 + 12);
          if ((_DWORD)v374)
          {
            v375 = *(unint64_t **)v373;
            v376 = 40 * v374;
            while ((JSC::StackFrame::isMarked(v375, v62) & 1) != 0)
            {
              v375 += 5;
              v376 -= 40;
              if (!v376)
                goto LABEL_513;
            }
            JSC::ErrorInstance::computeErrorInfo((JSC::ErrorInstance *)(i9 + 14), (JSC::VM *)v62, v44, v45, v46, v47, v48, (uint64_t)v49);
          }
        }
      }
LABEL_513:
      i9 = (uint64_t *)*i9;
      kk = v650;
    }
  }
  v224 = v215[108];
  if (v224)
    JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSFinalizationRegistry,JSC::IsoSubspace>(kk, v224, (_QWORD *)v640, v45, v46, v47, v48, (uint64_t)v49);
  v225 = (_QWORD *)v215[175];
  if (v225)
  {
    LOBYTE(task_info_outCnt) = v640;
    v651 = (integer_t *)kk;
    p_task_info_outCnt = &task_info_outCnt;
    *(_QWORD *)task_info_out = &v651;
    for (i10 = v225[4]; i10; i10 = *(_QWORD *)(i10 + 88))
    {
      v425 = *(unsigned int *)(i10 + 48);
      if ((_DWORD)v425)
      {
        v581 = 0;
        v582 = *(_QWORD *)(i10 + 32);
        v583 = (unint64_t)(v425 + 31) >> 5;
        do
        {
          v584 = *(_DWORD *)(v582 + 40 * v581 + 32);
          if (v584)
          {
            v585 = 32 * v581;
            do
            {
              if ((v584 & 1) != 0)
                JSC::BlockDirectory::forEachNotEmptyBlock<void JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::MarkedBlock::Handle *)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(unsigned long)#1}::operator()((uint64_t *)task_info_out, i10, v585, v45, v46, v47, v48, (uint64_t)v49, (uint8x8_t)v50);
              ++v585;
              v138 = v584 > 1;
              v584 >>= 1;
            }
            while (v138);
          }
          ++v581;
        }
        while (v581 != v583);
      }
    }
    LOWORD(v659[0]) = *(_WORD *)(v225[2] + 8);
    *(_QWORD *)task_info_out = &v651;
    v655 = v659;
    v428 = (_QWORD *)v225[6];
    v426 = v225 + 6;
    v427 = v428;
    for (kk = v650; v427 != v426; v427 = (_QWORD *)*v427)
      JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()((uint64_t)task_info_out, (uint64_t)v427, (uint8x8_t)v50, v44, v45, v46, v47, v48, (uint64_t)v49);
  }
  if (BYTE1(dword_1ECF4C240))
  {
    v226 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
    if (v226 != -1)
    {
      *(_QWORD *)task_info_out = v659;
      v651 = task_info_out;
      std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v651, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
    }
    JSC::JITWorklist::removeDeadPlans((JSC::JITWorklist *)JSC::theGlobalJITWorklist, (JSC::VM *)v62);
  }
  v227 = *(_QWORD *)(StatusReg + 736);
  if (!v227)
    v227 = WTF::Thread::initializeCurrentTLS(0);
  *(_QWORD *)(v227 + 56) = v596;
  JSC::JITStubRoutineSet::deleteUnmarkedJettisonedStubRoutines(*(JSC::JITStubRoutineSet **)(kk + 536), (JSC::VM *)v62, v44, v45, v46, v47, v48, (uint64_t)v49, (uint8x8_t)v50);
  if (*(_BYTE *)(kk + 155) == 1 && *(_DWORD *)(kk + 604))
    *(_QWORD *)(kk + 608) = 0;
  v228 = *(_QWORD *)(kk + 648);
  JSC::JSRunLoopTimer::setTimeUntilFire(v228, 0.1);
  *(_QWORD *)(v228 + 40) = *(_QWORD *)(kk + 304);
  v235 = *(_QWORD *)(kk + 528);
  v236 = (unsigned __int8 *)(v235 + 16);
  if (__ldaxr((unsigned __int8 *)(v235 + 16)))
  {
    __clrex();
LABEL_324:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v235 + 16);
    goto LABEL_325;
  }
  if (__stxr(1u, v236))
    goto LABEL_324;
LABEL_325:
  v238 = *(_QWORD **)(v235 + 8);
  if (!v238)
  {
    v241 = 0;
    v239 = 0;
LABEL_803:
    v240 = &v238[v239];
    goto LABEL_332;
  }
  v239 = *((unsigned int *)v238 - 1);
  v240 = &v238[v239];
  if (!*((_DWORD *)v238 - 3))
  {
    v241 = &v238[v239];
    goto LABEL_803;
  }
  v241 = v238;
  if ((_DWORD)v239)
  {
    v242 = 8 * v239;
    v241 = v238;
    while (*v241 + 1 <= 1)
    {
      ++v241;
      v242 -= 8;
      if (!v242)
      {
        v241 = v240;
        break;
      }
    }
  }
LABEL_332:
  if (v238)
    v243 = &v238[*((unsigned int *)v238 - 1)];
  else
    v243 = 0;
  while (v241 != v243)
  {
    v244 = *v241;
    if (*v241 && *(_DWORD *)(kk + 568) >= *(unsigned __int8 *)(v244 + 7))
      JSC::Heap::writeBarrierSlowPath(kk, v244);
    v245 = v241 + 1;
    v241 = v240;
    if (v245 != v240)
    {
      v241 = v245;
      while (*v241 + 1 <= 1)
      {
        if (++v241 == v240)
        {
          v241 = v240;
          break;
        }
      }
    }
  }
  v246 = __ldxr(v236);
  if (v246 != 1)
  {
    __clrex();
    v247 = v598;
    goto LABEL_438;
  }
  v247 = v598;
  if (__stlxr(0, v236))
LABEL_438:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v236, 0, v229, v230, v231, v232, v233, v234);
  JSC::CodeBlockSet::clearCurrentlyExecutingAndRemoveDeadCodeBlocks(*(JSC::CodeBlockSet **)(kk + 528), (JSC::VM *)v62, v229, v230, v231, v232, v233, v234);
  JSC::MarkedSpace::prepareForAllocation(v247);
  v280 = *(_QWORD *)(kk + 344);
  v281 = *(_QWORD *)(kk + 352);
  v53 = __CFADD__(v280, v281);
  v282 = v280 + v281;
  if (v53)
  {
    v284 = -1;
  }
  else
  {
    v283 = *(_QWORD *)(kk + 336);
    v53 = __CFADD__(v282, v283);
    v284 = v282 + v283;
    if (v53)
      v284 = -1;
  }
  v285 = *(_QWORD *)(kk + 232);
  if (v284 >= ~v285)
    v284 = ~v285;
  v286 = v284 + *(_QWORD *)(kk + 128);
  v287 = (task_name_t *)MEMORY[0x1E0C83DA0];
  if (*(_BYTE *)(kk + 155) == 1)
  {
    if (*(_BYTE *)(kk + 153))
    {
      v490 = *(_QWORD *)(kk + 112);
LABEL_691:
      *(_QWORD *)(kk + 48) = v286;
      *(_QWORD *)(kk + 88) = 0;
      *(_QWORD *)(kk + 96) = v490 - v286;
      goto LABEL_454;
    }
    v481 = *(unsigned __int8 *)(kk + 9);
    v482 = *(_QWORD *)(kk + 16);
    if (v481 == 1)
    {
      LODWORD(v279) = qword_1ECF4C35C;
      v552 = (double)v279;
      if (*(double *)&xmmword_1ECF4C368 * (double)v482 < v552)
        v552 = *(double *)&xmmword_1ECF4C368 * (double)v482;
      v483 = (unint64_t)v552;
    }
    else
    {
      v483 = HIDWORD(qword_1ECF4C35C);
    }
    if (!BYTE1(dword_1ECF4C240) || BYTE1(dword_1ECF4C723))
    {
      v488 = *((double *)&xmmword_1ECF4C388 + 1);
    }
    else
    {
      task_info_outCnt = 93;
      v484 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
      v485 = v657;
      v486 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
      if (v486 != -1)
      {
        v651 = (integer_t *)&v658;
        *(_QWORD *)&v659[0] = &v651;
        std::__call_once(&bmalloc::availableMemory(void)::onceFlag, v659, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
      }
      v487 = (double)v485;
      if (v484)
        v487 = 0.0;
      if (*(double *)&xmmword_1ECF4C368 * (double)v482 <= v487)
      {
        v587 = *(double *)&xmmword_1ECF4C378 * (double)v482;
        kk = v650;
        if (v587 <= v487)
          v588 = *(double *)&xmmword_1ECF4C388;
        else
          v588 = *((double *)&xmmword_1ECF4C378 + 1);
        v489 = v588 * (double)v286;
        goto LABEL_688;
      }
      v488 = *((double *)&xmmword_1ECF4C368 + 1);
    }
    v489 = v488 * (double)v286;
    kk = v650;
LABEL_688:
    v490 = (unint64_t)v489;
    if (v483 > (unint64_t)v489)
      v490 = v483;
    *(_QWORD *)(kk + 112) = v490;
    goto LABEL_691;
  }
  v288 = *(_QWORD *)(kk + 112);
  v289 = v288 - v286;
  if (v288 < v286)
    v289 = 0;
  *(_QWORD *)(kk + 64) = v286;
  if ((double)v289 / (double)v288 < 0.333333333)
    *(_BYTE *)(kk + 154) = 1;
  v290 = v286 - *(_QWORD *)(kk + 40) + v288;
  *(_QWORD *)(kk + 112) = v290;
  *(_QWORD *)(kk + 96) = v290 - v286;
  v291 = *(double **)(kk + 632);
  if (v291)
  {
    v292 = v286 - *(_QWORD *)(kk + 48);
    if (!v292)
      v292 = 1;
    v293 = (*(double (**)(_QWORD, uint64_t))(*(_QWORD *)v291 + 48))(*(_QWORD *)(kk + 632), kk)
         * (double)v292;
    v294 = (*(double (**)(double *, uint64_t))(*(_QWORD *)v291 + 32))(v291, kk);
    v302 = v294
         / (*(double (**)(double *, unint64_t))(*(_QWORD *)v291 + 40))(v291, (unint64_t)v293);
    v303 = v291[5];
    if (v302 + v302 <= v303)
    {
      v291[5] = v302;
      v561 = COERCE_DOUBLE(JSC::JSRunLoopTimer::timeUntilFire((JSC::JSRunLoopTimer *)v291, v295, v296, v297, v298, v299, v300, v301))
           - (v303
            - v302);
      if (!v562)
        v561 = v302;
      JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)v291, v561);
    }
  }
LABEL_454:
  task_info_outCnt = 93;
  v311 = task_info(*v287, 0x16u, task_info_out, &task_info_outCnt);
  v312 = v657;
  v313 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
  if (v313 != -1)
  {
    v651 = (integer_t *)&v658;
    *(_QWORD *)&v659[0] = &v651;
    std::__call_once(&bmalloc::availableMemory(void)::onceFlag, v659, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
  }
  v314 = (double)v312;
  if (v311)
    v314 = 0.0;
  v315 = v314 / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
  if (v315 > 1.0)
    v315 = 1.0;
  *(_BYTE *)(kk + 1124) = *(double *)&xmmword_1ECF4C398 < v315;
  *(_DWORD *)(kk + 1120) = 0;
  *(_QWORD *)(kk + 40) = v286;
  *(_QWORD *)(kk + 80) = 0;
  if ((_BYTE)word_1ECF4C5CC)
  {
    *(_QWORD *)task_info_out = v286 >> 10;
    WTF::dataLog<char [4],unsigned long,char [5]>(task_info_out);
  }
  v316 = *(JSC::HeapVerifier **)(kk + 696);
  if (v316)
  {
    JSC::HeapVerifier::trimDeadCells(v316, v304, v305, v306, v307, v308, v309, v310);
    JSC::HeapVerifier::verify(*(_QWORD *)(kk + 696), 3, v569, v570, v571, v572, v573, v574);
  }
  v317 = *(unsigned __int8 *)(kk + 155);
  v325 = mach_absolute_time();
  v327 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v327 != -1)
  {
    *(_QWORD *)task_info_out = v659;
    v651 = task_info_out;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v651, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v326) = dword_1ECF4400C;
  v328 = (double)(v325 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v326 * 1000000000.0);
  *(double *)(kk + 920) = v328;
  v329 = *(unsigned __int8 *)(kk + 155);
  v330 = v328 - *(double *)(kk + 912);
  v331 = 584;
  if ((_DWORD)v329 == 1)
    v331 = 576;
  *(double *)(kk + v331) = v330;
  v332 = *(_QWORD *)(v62 + 93352);
  if ((v332 & 1) == 0 && v332)
  {
    JSC::Heap::gatherExtraHeapData(kk, *(_QWORD *)(v332 + 24), v319, v320, v321, v322, v323, v324);
    JSC::Heap::removeDeadHeapSnapshotNodes(kk, *(_QWORD *)(v332 + 8), *(unsigned int *)(v332 + 20), v589, v590, v591, v592, v593);
  }
  v333 = *(_QWORD *)(kk + 696);
  if (v333)
    JSC::HeapVerifier::endGC(v333);
  v334 = *(unsigned __int8 *)(kk + 155);
  if (v334 == 255)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B1E2CLL);
  }
  *(_BYTE *)(kk + 156) = v334;
  *(_BYTE *)(kk + 155) = -1;
  v335 = *(unsigned int *)(kk + 676);
  if ((_DWORD)v335)
  {
    v578 = *(uint64_t **)(kk + 664);
    v579 = 8 * v335;
    do
    {
      v580 = *v578++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v580 + 24))(v580, v329);
      v579 -= 8;
    }
    while (v579);
  }
  v336 = *(_QWORD *)(kk + 976);
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 16))(v336);
  if ((_BYTE)word_1ECF4C5CC)
  {
    v575 = *(double *)(kk + 920);
    v576 = (v575 - *(double *)(kk + 928)) * 1000.0;
    *(double *)task_info_out = v576;
    v651 = *(integer_t **)&v576;
    v659[0] = (v575 - *(double *)(kk + 912)) * 1000.0;
    WTF::dataLog<char [3],double,char [9],double,char [10],double,char [9]>((double *)task_info_out, (double *)&v651, v659);
  }
  v337 = (unsigned __int8 *)(*(_QWORD *)(kk + 1024) + 4);
  if (__ldaxr(v337))
  {
    __clrex();
LABEL_478:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v337);
    goto LABEL_479;
  }
  if (__stxr(1u, v337))
    goto LABEL_478;
LABEL_479:
  v339 = *(_QWORD *)(kk + 936);
  if (v339 == *(_QWORD *)(kk + 944))
  {
    __break(0xC471u);
    JUMPOUT(0x1985B1EA4);
  }
  v340 = *(_QWORD *)(kk + 952) + 16 * v339;
  v341 = *(unsigned int **)(v340 + 8);
  *(_QWORD *)(v340 + 8) = 0;
  if (v341)
  {
    v342 = v341 + 2;
    do
    {
      v343 = __ldaxr(v342);
      v344 = v343 - 1;
    }
    while (__stlxr(v344, v342));
    if (!v344)
    {
      atomic_store(1u, v341 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v341 + 8))(v341);
    }
  }
  v345 = *(_QWORD *)(kk + 936);
  if (v345 == *(unsigned int *)(kk + 960) - 1)
    v346 = 0;
  else
    v346 = v345 + 1;
  *(_QWORD *)(kk + 936) = v346;
  ++*(_QWORD *)(kk + 984);
  v347 = (unsigned int *)(kk + 904);
  do
    v348 = __ldaxr(v347);
  while (__stlxr(v348 & 0xFFFFFFEF, v347));
  v349 = __ldxr(v337);
  if (v349 != 1)
  {
    __clrex();
    goto LABEL_494;
  }
  if (__stlxr(0, v337))
LABEL_494:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v337, 0, v319, v320, v321, v322, v323, v324);
  WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(kk + 904), v318, v319, v320, v321, v322, v323, v324);
  if ((_BYTE)word_1ECF4C5CC)
    WTF::dataLog<char [8],char [2]>();
  do
    v357 = __ldaxr(v347);
  while (__stlxr(v357 | 8, v347));
  WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(kk + 904), v350, v351, v352, v353, v354, v355, v356);
  v358 = *(_QWORD *)(kk + 656);
  if (!*(_BYTE *)(v358 + 35))
  {
    if (*(_BYTE *)(v358 + 34))
      __dmb(0xBu);
    else
      JSC::JSRunLoopTimer::setTimeUntilFire(v358, 0.0);
  }
  *(_QWORD *)(kk + 1056) = *(_QWORD *)(kk + 1072);
  v364 = mach_absolute_time();
  v366 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v366 != -1)
  {
    *(_QWORD *)task_info_out = v659;
    v651 = task_info_out;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v651, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v365) = dword_1ECF4400C;
  v367 = (double)(v364 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v365 * 1000000000.0);
  *(double *)(kk + 1064) = v367;
  *(double *)(kk + 1088) = *(double *)(kk + 1088) + v367 - *(double *)(kk + 1056);
  if (v317 == 1)
    *(double *)(kk + 1080) = v367;
  return JSC::Heap::changePhase(kk, (void *)v595, 0, v359, v360, v361, v362, v363);
}

uint64_t JSC::Heap::changePhase(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = atomic_load((unsigned int *)(a1 + 904));
  if (!(_DWORD)a2)
  {
    if ((v8 & 1) != 0)
      goto LABEL_3;
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1985B2280);
  }
  if ((_DWORD)a2 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B22A0);
  }
  if ((v8 & 1) != 0)
    goto LABEL_8;
LABEL_3:
  *(_BYTE *)(a1 + 1000) = *(_BYTE *)(a1 + 1001);
  *(_BYTE *)(a1 + 1002) = a3;
  return JSC::Heap::finishChangingPhase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char [5],WTF::RawPointer,char [10],char const*,char [2],unsigned long,char [4]>(const void **a1, const char **a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "[GC<");
  WTF::PrintStream::printf(v8, "%p", *a1);
  WTF::PrintStream::printf(v8, "%s", ">: START ");
  WTF::PrintStream::printf(v8, "%s", *a2);
  WTF::PrintStream::printf(v8, "%s", " ");
  WTF::PrintStream::printf(v8, "%lu", *a3);
  WTF::PrintStream::printf(v8, "%s", "kb ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [20],BOOL,char [2]>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "visitor.isEmpty(): ");
  if (*a1)
    v5 = "true";
  else
    v5 = "false";
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [41],BOOL,char [2]>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "visitor.collectorMarkStack().isEmpty(): ");
  if (*a1)
    v5 = "true";
  else
    v5 = "false";
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [39],BOOL,char [2]>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "visitor.mutatorMarkStack().isEmpty(): ");
  if (*a1)
    v5 = "true";
  else
    v5 = "false";
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [40],BOOL,char [2]>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "m_sharedCollectorMarkStack->isEmpty(): ");
  if (*a1)
    v5 = "true";
  else
    v5 = "false";
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [38],BOOL,char [2]>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "m_sharedMutatorMarkStack->isEmpty(): ");
  if (*a1)
    v5 = "true";
  else
    v5 = "false";
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v6, "%s", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_OWORD *JSC::Heap::forEachSlotVisitor<JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_0>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;

  v10 = *(_QWORD *)(a1 + 400);
  v11 = *a2;
  v12 = *(_QWORD *)(v10 + 96);
  v13 = *(_QWORD *)(v10 + 136);
  if (v12)
    v14 = v12 + 16;
  else
    v14 = 0;
  v38 = v13 >> 10;
  v39 = v14;
  WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v37, v11, &v39, (uint64_t *)&v38, a5, a6, a7, a8);
  v19 = *(_QWORD *)(a1 + 408);
  v20 = *a2;
  v21 = *(_QWORD *)(v19 + 96);
  v22 = *(_QWORD *)(v19 + 136);
  if (v21)
    v23 = v21 + 16;
  else
    v23 = 0;
  v38 = v22 >> 10;
  v39 = v23;
  result = WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v37, v20, &v39, (uint64_t *)&v38, v15, v16, v17, v18);
  v29 = *(unsigned int *)(a1 + 460);
  if ((_DWORD)v29)
  {
    v30 = *(uint64_t **)(a1 + 448);
    v31 = 8 * v29;
    do
    {
      v32 = *v30++;
      v33 = *a2;
      v34 = *(_QWORD *)(v32 + 96);
      v35 = *(_QWORD *)(v32 + 136);
      if (v34)
        v36 = v34 + 16;
      else
        v36 = 0;
      v38 = v35 >> 10;
      v39 = v36;
      result = WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v37, v33, &v39, (uint64_t *)&v38, v25, v26, v27, v28);
      v31 -= 8;
    }
    while (v31);
  }
  return result;
}

void WTF::sortedMapDump<WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1>(uint64_t *a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  WTF::PrintStream *v32;
  float v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  void (**v52)(WTF::StringPrintStream *__hidden);
  _BYTE *v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = *((unsigned int *)v4 - 1);
    v6 = &v4[16 * v5];
    if (*((_DWORD *)v4 - 3))
    {
      v7 = *a2;
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = *a2;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 16;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v7 = &v4[16 * v5];
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = &v4[16 * v5];
LABEL_11:
  v9 = 0;
  v10 = 0;
  if (!v4)
    goto LABEL_13;
LABEL_12:
  v4 += 16 * *((unsigned int *)v4 - 1);
LABEL_13:
  while (v7 != v4)
  {
    if (v10 == (_DWORD)v48)
    {
      v11 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v47, v10 + 1, (unint64_t)v7);
      v10 = HIDWORD(v48);
      v9 = v47;
      v12 = &v47[8 * HIDWORD(v48)];
    }
    else
    {
      v12 = &v9[8 * v10];
      v11 = v7;
    }
    *(_QWORD *)v12 = *(_QWORD *)v11;
    HIDWORD(v48) = ++v10;
    v13 = v7 + 16;
    v7 = v6;
    if (v13 != v6)
    {
      v7 = v13;
      while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
      {
        v7 += 16;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
    v4 = *a2;
    if (*a2)
      goto LABEL_12;
  }
  v14 = 126 - 2 * __clz(v10);
  if (v10)
    v15 = (const char *)v14;
  else
    v15 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**,false>((uint64_t)v9, (const char **)&v9[8 * v10], v15, 1);
  v52 = off_1E3572250;
  v53 = v55;
  v54 = xmmword_199122F80;
  v55[0] = 0;
  if (!v10)
  {
    v41 = 0;
    v42 = v55;
    goto LABEL_48;
  }
  v46 = a1;
  v16 = 0;
  v17 = 0;
  do
  {
    v18 = *a2;
    if (*a2)
    {
      v19 = *(_QWORD *)&v9[8 * v16];
      v20 = *((_DWORD *)v18 - 2);
      v21 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(_QWORD *)&v18[16 * v24];
      if (v25 == v19)
      {
LABEL_34:
        v27 = *(_QWORD *)&v18[16 * v24 + 8];
        goto LABEL_36;
      }
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(_QWORD *)&v18[16 * v24];
        ++v26;
        if (v25 == v19)
          goto LABEL_34;
      }
    }
    v27 = 0;
LABEL_36:
    v28 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v52[4])(&v52);
    v29 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 32))(v28);
    v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    if (v17)
    {
      WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v49, v31);
      WTF::printExpectedCStringHelper(v30, "StringView", &v49);
      if (v50 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v51, &v49);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v49, v31);
      WTF::printExpectedCStringHelper(v30, "StringView", &v49);
      if (v50 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v51, &v49);
      v17 = 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 40))(v28);
    WTF::PrintStream::printf(v28, "%s", *(const char **)&v9[8 * v16]);
    v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 32))(v28);
    WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v49, v33);
    WTF::printExpectedCStringHelper(v32, "StringView", &v49);
    if (v50 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v51, &v49);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v28 + 40))(v28);
    WTF::PrintStream::printf(v28, "%lu", v27);
    v52[5]((WTF::StringPrintStream *)&v52);
    ++v16;
  }
  while (v16 != v10);
  v42 = v53;
  v41 = v54;
  a1 = v46;
  *v46 = 0;
  if (v42)
  {
LABEL_48:
    if (v41 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1985B2ED4);
    }
    v43 = WTF::fastMalloc((WTF *)(v41 + 17));
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = v41;
    *a1 = v43;
    v44 = v43 + 16;
    memcpy((void *)(v43 + 16), v42, v41);
    *(_BYTE *)(v44 + v41) = 0;
    v45 = (unint64_t)v53;
    if (v53 == v55)
    {
      if (v9)
        goto LABEL_51;
      return;
    }
  }
  else
  {
    v45 = 0;
  }
  WTF::fastFree(v45, v34, v35, v36, v37, v38, v39, v40);
  if (v9)
  {
LABEL_51:
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree((unint64_t)v9, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t WTF::dataLog<char [3],unsigned long,char [5],WTF::CString,char [5],unsigned long,char [4],unsigned long,char [2]>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  const char *v11;
  char v13;
  char **v14;
  char *v15;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "v=");
  WTF::PrintStream::printf(v10, "%lu", *a1);
  WTF::PrintStream::printf(v10, "%s", "kb (");
  if (*a2)
    v11 = (const char *)(*a2 + 16);
  else
    v11 = 0;
  WTF::PrintStream::printf(v10, "%s", v11);
  WTF::PrintStream::printf(v10, "%s", ") o=");
  WTF::PrintStream::printf(v10, "%lu", *a3);
  WTF::PrintStream::printf(v10, "%s", " b=");
  WTF::PrintStream::printf(v10, "%lu", *a4);
  WTF::PrintStream::printf(v10, "%s", " ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::dataLog<unsigned long,char [2],unsigned long,char [2]>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%lu", *a1);
  WTF::PrintStream::printf(v6, "%s", "+");
  WTF::PrintStream::printf(v6, "%lu", *a2);
  WTF::PrintStream::printf(v6, "%s", " ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [3],double,char [9],double,char [7]>(double *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "p=");
  WTF::PrintStream::printf(v6, "%lf", *a1);
  WTF::PrintStream::printf(v6, "%s", "ms (max ");
  WTF::PrintStream::printf(v6, "%lf", *a2);
  WTF::PrintStream::printf(v6, "%s", ")...]\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [5],WTF::RawPointer,char [4],char const*,char [2]>(const void **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "[GC<");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", ">: ");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", " ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::Heap::iterateExecutingAndCompilingCodeBlocks<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  char v31;
  char **v32;
  char *v33;

  JSC::CodeBlockSet::iterateCurrentlyExecuting<WTF::Function<void ()(JSC::CodeBlock *)>>(*(_QWORD *)(a1 + 528), a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (BYTE1(dword_1ECF4C240))
  {
    v17 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
    if (v17 != -1)
    {
      v33 = &v31;
      v32 = &v33;
      std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
    }
    v18 = JSC::theGlobalJITWorklist;
    v19 = (unsigned __int8 *)(*(_QWORD *)(JSC::theGlobalJITWorklist + 304) + 4);
    if (__ldaxr(v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
LABEL_7:
      v21 = *(_QWORD **)(v18 + 144);
      if (v21)
      {
        v22 = *((unsigned int *)v21 - 1);
        v23 = &v21[3 * v22];
        if (*((_DWORD *)v21 - 3))
        {
          v24 = v21;
          if ((_DWORD)v22)
          {
            v25 = 24 * v22;
            v24 = v21;
            while (!*v24)
            {
              v24 += 3;
              v25 -= 24;
              if (!v25)
              {
                v24 = v23;
                break;
              }
            }
          }
LABEL_14:
          if (v21)
            v26 = &v21[3 * *((unsigned int *)v21 - 1)];
          else
            v26 = 0;
          if (v26 != v24)
          {
            v27 = a1 - 192;
            do
            {
              v28 = (_QWORD *)v24[2];
              if (v28[4] == v27)
                (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*v28 + 72))(v28, a2, a3);
              v29 = v24 + 3;
              v24 = v23;
              if (v29 != v23)
              {
                v24 = v29;
                while (!*v24)
                {
                  v24 += 3;
                  if (v24 == v23)
                  {
                    v24 = v23;
                    break;
                  }
                }
              }
            }
            while (v24 != v26);
          }
          v30 = __ldxr(v19);
          if (v30 == 1)
          {
            if (!__stlxr(0, v19))
              return;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v11, v12, v13, v14, v15, v16);
          return;
        }
        v24 = &v21[3 * v22];
      }
      else
      {
        v24 = 0;
        LODWORD(v22) = 0;
      }
      v23 = &v21[3 * v22];
      goto LABEL_14;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
    goto LABEL_7;
  }
}

uint64_t JSC::Heap::verifyGC(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t result;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;

  v8 = *((_QWORD *)this + 55);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B3F40);
  }
  if (*((_BYTE *)this + 564))
  {
    __break(0xC471u);
    JUMPOUT(0x1985B3F60);
  }
  *((_BYTE *)this + 564) = 1;
  v10 = *(_QWORD *)(v8 + 24);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    while (v10)
    {
      v12 = *(_QWORD *)(v8 + 56);
LABEL_21:
      if (v12 || *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8))
      {
LABEL_194:
        __break(0xC471u);
        JUMPOUT(0x1985B38F4);
      }
      if (v10)
      {
        do
        {
LABEL_24:
          v18 = v10 - 1;
          v19 = *(_QWORD *)(v8 + 8) + 8 * v18;
          *(_QWORD *)(v8 + 24) = v18;
          v20 = *(_DWORD **)(v19 + 16);
          if (!JSC::VerifierSlotVisitor::isMarked((JSC::VerifierSlotVisitor *)v8, (unint64_t)v20))
          {
            __break(0xC471u);
            JUMPOUT(0x1985B3914);
          }
          (*(void (**)(_DWORD *, uint64_t))(16 * *(unsigned int *)(16 * (*v20 & 0xFFFFFFFE) + 0x4C) + 0xD8))(v20, v8);
          v10 = *(_QWORD *)(v8 + 24);
        }
        while (v10);
      }
      else
      {
        v10 = 0;
        v13 = *(_QWORD *)(v8 + 8);
        v14 = *(_QWORD **)(v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)(v15 + 8) = v14;
            v14 = *(_QWORD **)(v13 + 8);
          }
          else
          {
            *(_QWORD *)(v8 + 8) = v14;
          }
          if (!v14)
            v14 = (_QWORD *)(v8 + 16);
          *v14 = v15;
          v16 = *(_QWORD *)(StatusReg + 752);
          if (v16)
          {
            if (!(v13 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
            {
              goto LABEL_17;
            }
            if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
              {
LABEL_17:
                v17 = *(unsigned int *)(v16 + 8000);
                if (v17 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v16, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v16 + 8 * v17) = v13 | 0x5000000000000;
                  *(_DWORD *)(v16 + 8000) = v17 + 1;
                }
                goto LABEL_19;
              }
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v16, v13, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_19:
          --*(_QWORD *)(v8 + 32);
          v10 = 510;
          goto LABEL_24;
        }
      }
    }
    v12 = *(_QWORD *)(v8 + 56);
    if (*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8))
      goto LABEL_21;
    if (v12 || *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8))
      goto LABEL_194;
    v21 = *((_QWORD *)this + 54);
    v22 = *(unsigned int *)(v21 + 36);
    if ((_DWORD)v22)
    {
      v23 = *(uint64_t **)(v21 + 24);
      v24 = 8 * v22;
      do
      {
        v25 = *v23++;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v25 + 40))(v25, &v92, v8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v8);
        v24 -= 8;
      }
      while (v24);
    }
    if ((_BYTE)word_1ECF4C5CC)
      WTF::dataLog<char [16]>(" ");
    while (1)
    {
      v26 = *(_QWORD *)(v8 + 248);
      if (v26 == *(_QWORD *)(v8 + 256))
        break;
      v27 = *(_QWORD *)(v8 + 264);
      v28 = *(unsigned int **)(v27 + 8 * v26);
      *(_QWORD *)(v27 + 8 * v26) = 0;
      v29 = *(_QWORD *)(v8 + 264);
      v30 = *(unsigned int **)(v29 + 8 * v26);
      *(_QWORD *)(v29 + 8 * v26) = 0;
      if (v30)
      {
        v31 = v30 + 2;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
      }
      v34 = *(_QWORD *)(v8 + 248);
      if (v34 == *(unsigned int *)(v8 + 272) - 1)
        v35 = 0;
      else
        v35 = v34 + 1;
      *(_QWORD *)(v8 + 248) = v35;
      v36 = v28 + 2;
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 16))(v28, v8);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
      }
    }
    v10 = *(_QWORD *)(v8 + 24);
  }
  while (v10
       || *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8)
       || *(_QWORD *)(v8 + 56)
       || *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8));
  *((_BYTE *)this + 564) = 0;
  v39 = *(_QWORD *)(v8 + 144);
  if (!v39)
  {
    v42 = 0;
    v40 = 0;
LABEL_69:
    v41 = v39 + 16 * v40;
    goto LABEL_70;
  }
  v40 = *(unsigned int *)(v39 - 4);
  v41 = v39 + 16 * v40;
  if (!*(_DWORD *)(v39 - 12))
  {
    v42 = v39 + 16 * v40;
    goto LABEL_69;
  }
  v42 = *(_QWORD *)(v8 + 144);
  if ((_DWORD)v40)
  {
    v43 = 16 * v40;
    v42 = *(_QWORD *)(v8 + 144);
    while ((unint64_t)(*(_QWORD *)v42 + 1) <= 1)
    {
      v42 += 16;
      v43 -= 16;
      if (!v43)
      {
        v42 = v41;
        break;
      }
    }
  }
LABEL_70:
  if (v39)
    v44 = v39 + 16 * *(unsigned int *)(v39 - 4);
  else
    v44 = 0;
  if (v44 != v42)
  {
    while (2)
    {
      v45 = **(_QWORD **)(v42 + 8);
      v46 = v45 + 112;
      v47 = (unint64_t)(v45 + 112) >> 4;
      v48 = ((unint64_t)(v45 + 112) >> 10) & 0xF;
      if ((((_DWORD)v45 + 112) & 8) != 0)
      {
        if ((*(_BYTE *)(v45 + 33) & 1) == 0)
          goto LABEL_77;
      }
      else if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)this + 60)
             || ((*(_QWORD *)((v46 & 0xFFFFFFFFFFFFC000) + 8 * v48 + 0x28) >> v47) & 1) == 0)
      {
LABEL_77:
        v92 = v45 + 112;
        WTF::dataLog<char [26],WTF::RawPointer,char [16],char [2]>((const void **)&v92);
        if (HIBYTE(word_1ECF4C610))
        {
          JSC::VerifierSlotVisitor::dumpMarkerData((_QWORD *)v8, v46);
          if ((v46 & 8) != 0)
            goto LABEL_91;
LABEL_79:
          if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)this + 60)
            || ((*(_QWORD *)((v46 & 0xFFFFFFFFFFFFC000) + 8 * v48 + 0x28) >> v47) & 1) == 0)
          {
LABEL_92:
            __break(0xC471u);
            JUMPOUT(0x1985B3AB8);
          }
        }
        else
        {
          if ((v46 & 8) == 0)
            goto LABEL_79;
LABEL_91:
          if ((*(_BYTE *)(v45 + 33) & 1) == 0)
            goto LABEL_92;
        }
      }
      v49 = v42 + 16;
      v42 = v41;
      if (v49 != v41)
      {
        v42 = v49;
        while ((unint64_t)(*(_QWORD *)v42 + 1) <= 1)
        {
          v42 += 16;
          if (v42 == v41)
          {
            v42 = v41;
            break;
          }
        }
      }
      if (v42 == v44)
        break;
      continue;
    }
  }
  v50 = *(_QWORD *)(v8 + 152);
  if (!v50)
  {
    v53 = 0;
    v51 = 0;
LABEL_102:
    v52 = (_QWORD *)(v50 + 16 * v51);
    goto LABEL_103;
  }
  v51 = *(unsigned int *)(v50 - 4);
  v52 = (_QWORD *)(v50 + 16 * v51);
  if (!*(_DWORD *)(v50 - 12))
  {
    v53 = (_QWORD *)(v50 + 16 * v51);
    goto LABEL_102;
  }
  v53 = *(_QWORD **)(v8 + 152);
  if ((_DWORD)v51)
  {
    v54 = 16 * v51;
    v53 = *(_QWORD **)(v8 + 152);
    while ((unint64_t)(*v53 + 1) <= 1)
    {
      v53 += 2;
      v54 -= 16;
      if (!v54)
      {
        v53 = v52;
        break;
      }
    }
  }
LABEL_103:
  if (v50)
    v55 = (_QWORD *)(v50 + 16 * *(unsigned int *)(v50 - 4));
  else
    v55 = 0;
  if (v55 != v53)
  {
    v90 = v52;
    while (1)
    {
      v56 = (uint64_t *)v53[1];
      v57 = *v56;
      v59 = v56 + 1;
      v58 = v56[1];
      if (v58)
      {
        v60 = __clz(__rbit64(v58));
        if (v60 < 0x40)
        {
          v61 = 0;
          goto LABEL_153;
        }
      }
      v62 = v56[2];
      if (v62)
      {
        v60 = __clz(__rbit64(v62));
        if (v60 < 0x40)
        {
          v61 = 64;
          goto LABEL_153;
        }
      }
      v63 = v56[3];
      if (v63)
      {
        v60 = __clz(__rbit64(v63));
        if (v60 < 0x40)
        {
          v61 = 128;
          goto LABEL_153;
        }
      }
      v64 = v56[4];
      if (v64)
      {
        v60 = __clz(__rbit64(v64));
        if (v60 < 0x40)
        {
          v61 = 192;
          goto LABEL_153;
        }
      }
      v65 = v56[5];
      if (v65)
      {
        v60 = __clz(__rbit64(v65));
        if (v60 < 0x40)
        {
          v61 = 256;
          goto LABEL_153;
        }
      }
      v66 = v56[6];
      if (v66)
      {
        v60 = __clz(__rbit64(v66));
        if (v60 < 0x40)
        {
          v61 = 320;
          goto LABEL_153;
        }
      }
      v67 = v56[7];
      if (v67)
      {
        v60 = __clz(__rbit64(v67));
        if (v60 < 0x40)
        {
          v61 = 384;
          goto LABEL_153;
        }
      }
      v68 = v56[8];
      if (v68)
      {
        v60 = __clz(__rbit64(v68));
        if (v60 < 0x40)
        {
          v61 = 448;
          goto LABEL_153;
        }
      }
      v69 = v56[9];
      if (v69)
      {
        v60 = __clz(__rbit64(v69));
        if (v60 < 0x40)
        {
          v61 = 512;
          goto LABEL_153;
        }
      }
      v70 = v56[10];
      if (v70)
      {
        v60 = __clz(__rbit64(v70));
        if (v60 < 0x40)
        {
          v61 = 576;
          goto LABEL_153;
        }
      }
      v71 = v56[11];
      if (v71)
      {
        v60 = __clz(__rbit64(v71));
        if (v60 < 0x40)
        {
          v61 = 640;
          goto LABEL_153;
        }
      }
      v72 = v56[12];
      if (v72)
      {
        v60 = __clz(__rbit64(v72));
        if (v60 < 0x40)
        {
          v61 = 704;
          goto LABEL_153;
        }
      }
      v73 = v56[13];
      if (v73)
      {
        v60 = __clz(__rbit64(v73));
        if (v60 < 0x40)
        {
          v61 = 768;
          goto LABEL_153;
        }
      }
      v74 = v56[14];
      if (v74)
      {
        v60 = __clz(__rbit64(v74));
        if (v60 < 0x40)
        {
          v61 = 832;
          goto LABEL_153;
        }
      }
      v75 = v56[15];
      if (v75)
      {
        v60 = __clz(__rbit64(v75));
        if (v60 < 0x40)
        {
          v61 = 896;
          goto LABEL_153;
        }
      }
      v87 = v56[16];
      if (v87)
      {
        v60 = __clz(__rbit64(v87));
        if (v60 <= 0x3F)
          break;
      }
LABEL_183:
      v88 = v53 + 2;
      v53 = v52;
      if (v88 != v52)
      {
        v53 = v88;
        while ((unint64_t)(*v53 + 1) <= 1)
        {
          v53 += 2;
          if (v53 == v52)
          {
            v53 = v52;
            break;
          }
        }
      }
      if (v53 == v55)
        goto LABEL_189;
    }
    v61 = 960;
LABEL_153:
    v76 = v60 + v61;
    v77 = v56 + 2;
    while (2)
    {
      v78 = *(_QWORD *)(*(_QWORD *)v57 + 88) + 16 * v76;
      v79 = v78 >> 4;
      v80 = (v78 >> 10) & 0xF;
      if ((v78 & 8) != 0)
      {
        if ((*(_BYTE *)(v78 - 79) & 1) == 0)
          goto LABEL_157;
      }
      else if (*(_DWORD *)(v78 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)this + 60)
             || ((*(_QWORD *)((v78 & 0xFFFFFFFFFFFFC000) + 8 * v80 + 0x28) >> v79) & 1) == 0)
      {
LABEL_157:
        v91 = v59;
        v92 = *(_QWORD *)(*(_QWORD *)v57 + 88) + 16 * v76;
        WTF::dataLog<char [26],WTF::RawPointer,char [16],char [2]>((const void **)&v92);
        if (HIBYTE(word_1ECF4C610))
        {
          JSC::VerifierSlotVisitor::dumpMarkerData((_QWORD *)v8, v78);
          if ((v78 & 8) != 0)
            goto LABEL_178;
LABEL_159:
          v52 = v90;
          v59 = v91;
          if (*(_DWORD *)(v78 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)this + 60)
            || ((*(_QWORD *)((v78 & 0xFFFFFFFFFFFFC000) + 8 * v80 + 0x28) >> v79) & 1) == 0)
          {
            goto LABEL_194;
          }
        }
        else
        {
          if ((v78 & 8) == 0)
            goto LABEL_159;
LABEL_178:
          v52 = v90;
          v59 = v91;
          if ((*(_BYTE *)(v78 - 79) & 1) == 0)
            goto LABEL_194;
        }
      }
      v81 = v76 + 1;
      if (v76 + 1 > 0x3FF)
        goto LABEL_183;
      v82 = v81 >> 6;
      if (v81 >> 6 <= 0xF)
        v83 = 15;
      else
        v83 = v81 >> 6;
      v84 = v59[v82];
      if (!v84 || (v85 = __clz(__rbit64(v84 >> (v81 & 0x3F))) + (v81 & 0x3F), v85 >= 0x40))
      {
        if (v81 > 0x3BF)
          goto LABEL_183;
        while (1)
        {
          v86 = v77[v82];
          if (v86)
          {
            v85 = __clz(__rbit64(v86));
            if (v85 < 0x40)
              break;
          }
          if (v83 == ++v82)
            goto LABEL_183;
        }
        ++v82;
      }
      v76 = v85 + (v82 << 6);
      if (v76 == 1024)
        goto LABEL_183;
      continue;
    }
  }
LABEL_189:
  result = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::dataLog<char [3],double,char [9],double,char [10],double,char [9]>(double *a1, double *a2, double *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "p=");
  WTF::PrintStream::printf(v8, "%lf", *a1);
  WTF::PrintStream::printf(v8, "%s", "ms (max ");
  WTF::PrintStream::printf(v8, "%lf", *a2);
  WTF::PrintStream::printf(v8, "%s", "), cycle ");
  WTF::PrintStream::printf(v8, "%lf", *a3);
  WTF::PrintStream::printf(v8, "%s", "ms END]\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

void JSC::Heap::resumeThePeriphery(JSC::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  _QWORD *v10;
  _QWORD *v11;
  JSC::MarkedBlock::Handle *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t k;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  WTF *v37;
  uint64_t j;
  uint64_t v39;
  unsigned __int8 *v40;
  BOOL v42;
  char v43;
  int v44;
  WTF *v45;
  BOOL v47;
  char v48;
  int v49;
  _QWORD *v50;
  WTF *v51;
  uint64_t v52;
  _OWORD v53[4];
  char v54;
  char **v55;
  char *v56;

  for (i = *((_QWORD *)this + 38); i; i = *(_QWORD *)(i + 80))
  {
    v10 = *(_QWORD **)(i + 104);
    if (v10 != (_QWORD *)(i + 104))
    {
      do
      {
        v11 = (_QWORD *)*v10;
        v12 = (JSC::MarkedBlock::Handle *)v10[9];
        if (v12)
        {
          JSC::MarkedBlock::Handle::resumeAllocating(v12, (JSC::FreeList *)(v10 + 3), a3, a4, a5, a6, a7, a8);
          v10[8] = v10[9];
          v10[9] = 0;
        }
        v10 = v11;
      }
      while (v11 != (_QWORD *)(i + 104));
    }
  }
  *((_QWORD *)this + 137) = 0;
  if (!*((_BYTE *)this + 908))
  {
    WTF::dataLog<char [62]>();
    __break(0xC471u);
    goto LABEL_88;
  }
  *((_BYTE *)this + 908) = 0;
  v51 = (WTF *)v53;
  v53[0] = *((_OWORD *)this + 25);
  v13 = (char **)*((_QWORD *)this + 56);
  v14 = *((unsigned int *)this + 115);
  v52 = 0x200000008;
  if (!(_DWORD)v14)
    goto LABEL_28;
  v15 = 8 * v14;
  v16 = 2;
  do
  {
    v17 = *v13;
    v56 = *v13;
    if (v16 == (_DWORD)v52)
    {
      v50 = (_QWORD *)WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, v16 + 1, (unint64_t)&v56);
      v16 = HIDWORD(v52);
      *((_QWORD *)v51 + HIDWORD(v52)) = *v50;
    }
    else
    {
      *((_QWORD *)v51 + v16) = v17;
    }
    HIDWORD(v52) = ++v16;
    ++v13;
    v15 -= 8;
  }
  while (v15);
  if (v16)
  {
LABEL_28:
    v27 = 39;
    do
    {
      v28 = 0;
      v29 = 0;
      v30 = v27;
      do
      {
        v31 = *((_QWORD *)v51 + v28);
        if (!*(_BYTE *)(v31 + 185))
          goto LABEL_31;
        v34 = (unsigned __int8 *)(v31 + 188);
        while (1)
        {
          v35 = *v34;
          if ((v35 & 1) != 0)
            break;
          v36 = __ldaxr(v34);
          if (v36 == v35)
          {
            if (!__stxr(v35 | 1, v34))
            {
              if (*(_BYTE *)(*(_QWORD *)(v31 + 80) + 908))
                v47 = *(_BYTE *)(v31 + 186) == 0;
              else
                v47 = 1;
              v48 = !v47;
              *(_BYTE *)(v31 + 185) = v48;
              v49 = __ldxr(v34);
              if (v49 == 1)
              {
                if (!__stlxr(0, v34))
                {
LABEL_31:
                  v32 = HIDWORD(v52);
                  if (!HIDWORD(v52))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985B44A0);
                  }
                  if (HIDWORD(v52) > v29)
                  {
                    --v29;
                    *((_QWORD *)v51 + v28) = *((_QWORD *)v51 + HIDWORD(v52) - 1);
                    v33 = v32 - 1;
                    HIDWORD(v52) = v33;
                    goto LABEL_34;
                  }
                  __break(0xC471u);
LABEL_88:
                  JUMPOUT(0x1985B4488);
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v34, 0, a3, a4, a5, a6, a7, a8);
              goto LABEL_31;
            }
          }
          else
          {
            __clrex();
          }
        }
        v33 = HIDWORD(v52);
LABEL_34:
        v28 = v29 + 1;
        v29 = v28;
      }
      while (v33 > v28);
      MEMORY[0x19AEBBF94](0, 1, 1);
      if (!HIDWORD(v52))
        goto LABEL_14;
      v27 = v30 - 1;
    }
    while (v30);
    v37 = v51;
    for (j = 8 * HIDWORD(v52); j; j -= 8)
    {
      v39 = *(_QWORD *)v37;
      if (*(unsigned __int8 *)(*(_QWORD *)v37 + 185) == (*(_BYTE *)(*(_QWORD *)v37 + 186) & *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v37 + 80) + 908)))
        goto LABEL_45;
      v40 = (unsigned __int8 *)(v39 + 188);
      if (__ldaxr((unsigned __int8 *)(v39 + 188)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v40))
      {
        goto LABEL_50;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v39 + 188);
LABEL_50:
      if (*(_BYTE *)(*(_QWORD *)(v39 + 80) + 908))
        v42 = *(_BYTE *)(v39 + 186) == 0;
      else
        v42 = 1;
      v43 = !v42;
      *(_BYTE *)(v39 + 185) = v43;
      v44 = __ldxr(v40);
      if (v44 == 1)
      {
        if (!__stlxr(0, v40))
          goto LABEL_45;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v39 + 188), 0, a3, a4, a5, a6, a7, a8);
LABEL_45:
      v37 = (WTF *)((char *)v37 + 8);
    }
  }
LABEL_14:
  if (!BYTE1(dword_1ECF4C240))
    goto LABEL_65;
  v18 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v18 != -1)
  {
    v56 = &v54;
    v55 = &v56;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v19 = JSC::theGlobalJITWorklist;
  v20 = *(unsigned int *)(JSC::theGlobalJITWorklist + 44);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD **)(JSC::theGlobalJITWorklist + 32);
    for (k = 8 * v20; k; k -= 8)
    {
      v23 = (unsigned __int8 *)(*v21 + 46);
      v24 = __ldxr(v23);
      if (v24 == 1)
      {
        if (!__stlxr(0, v23))
          goto LABEL_24;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, a3, a4, a5, a6, a7, a8);
LABEL_24:
      ++v21;
    }
  }
  v25 = (unsigned __int8 *)(v19 + 296);
  v26 = __ldxr((unsigned __int8 *)(v19 + 296));
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_64;
  }
  if (__stlxr(0, v25))
LABEL_64:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, a3, a4, a5, a6, a7, a8);
LABEL_65:
  v45 = v51;
  if (v53 != (_OWORD *)v51 && v51 != 0)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree((unint64_t)v45, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Heap::resumeTheMutator(JSC::Heap *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  BOOL v12;

  v8 = (unsigned int *)((char *)this + 904);
  while (1)
  {
    v9 = atomic_load(v8);
    if (((v9 >> 2) & 1) != ((v9 & 2) == 0))
    {
      v12 = (v9 & 4) != 0;
      v11 = (v9 & 2) >> 1;
      WTF::dataLog<char [20],BOOL,char [13],BOOL,char [2]>(&v12, &v11);
      __break(0xC471u);
      JUMPOUT(0x1985B4538);
    }
    if ((v9 & 1) != 0)
    {
      WTF::dataLog<char [30]>();
      __break(0xC471u);
      JUMPOUT(0x1985B455CLL);
    }
    if ((v9 & 2) == 0)
      break;
    v10 = __ldaxr(v8);
    if (v10 == v9)
    {
      if (!__stlxr(v9 & 0xFFFFFFFD, v8))
      {
        WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v8, a2, a3, a4, a5, a6, a7, a8);
        return;
      }
    }
    else
    {
      __clrex();
    }
  }
}

double JSC::Heap::stopThePeriphery(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  char v23;
  JSC::ShadowChicken *v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t *v27;
  JSC::MarkedBlock::Handle *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double result;
  char v34;
  char **v35;
  char *v36;

  if (*(_BYTE *)(a1 + 908))
  {
    WTF::dataLog<char [31]>();
    __break(0xC471u);
    JUMPOUT(0x1985B47A8);
  }
  if (*(_BYTE *)(a1 + 1005))
    ++*(_QWORD *)(a1 + 1008);
  *(_BYTE *)(a1 + 1005) = 0;
  if (BYTE1(dword_1ECF4C240))
  {
    v9 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
    if (v9 != -1)
    {
      v36 = &v34;
      v35 = &v36;
      std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
    }
    JSC::JITWorklist::suspendAllThreads((JSC::JITWorklist *)JSC::theGlobalJITWorklist, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(a1 + 908) = 1;
  v10 = *(_QWORD *)(a1 + 400);
  if (*(_BYTE *)(*(_QWORD *)(v10 + 80) + 908))
    v11 = *(_BYTE *)(v10 + 186) == 0;
  else
    v11 = 1;
  v12 = !v11;
  *(_BYTE *)(v10 + 185) = v12;
  v13 = *(_QWORD *)(a1 + 408);
  if (*(_BYTE *)(*(_QWORD *)(v13 + 80) + 908))
    v14 = *(_BYTE *)(v13 + 186) == 0;
  else
    v14 = 1;
  v15 = !v14;
  *(_BYTE *)(v13 + 185) = v15;
  v16 = *(unsigned int *)(a1 + 460);
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)(a1 + 448);
    v18 = 8 * v16;
    do
    {
      v20 = *v17++;
      v19 = v20;
      v21 = *(unsigned __int8 *)(v20 + 186);
      if (*(_BYTE *)(*(_QWORD *)(v20 + 80) + 908))
        v22 = v21 == 0;
      else
        v22 = 1;
      v23 = !v22;
      *(_BYTE *)(v19 + 185) = v23;
      v18 -= 8;
    }
    while (v18);
  }
  v24 = *(JSC::ShadowChicken **)(a1 + 93192);
  if ((v24 & 1) == 0 && v24)
    JSC::ShadowChicken::update(v24, (JSC::VM *)(a1 - 192), *(JSC::CallFrame **)(a1 - 152), a4, a5, a6, a7, a8);
  for (i = *(_QWORD *)(a1 + 304); i; i = *(_QWORD *)(i + 80))
  {
    v26 = *(uint64_t **)(i + 104);
    if (v26 != (uint64_t *)(i + 104))
    {
      do
      {
        v27 = (uint64_t *)*v26;
        v28 = (JSC::MarkedBlock::Handle *)v26[8];
        if (v28)
        {
          JSC::MarkedBlock::Handle::stopAllocating(v28, (const JSC::FreeList *)(v26 + 3), a3, a4, a5, a6, a7, a8);
          v29 = v26[8];
          v26[8] = 0;
          v26[9] = v29;
          v26[3] = 0;
          v26[4] = 0;
          v26[5] = 1;
          v26[6] = 0;
          *((_DWORD *)v26 + 14) = 0;
        }
        v26 = v27;
      }
      while (v27 != (uint64_t *)(i + 104));
    }
  }
  v30 = mach_absolute_time();
  v32 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v32 != -1)
  {
    v36 = &v34;
    v35 = &v36;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v31) = dword_1ECF4400C;
  result = (double)(v30 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v31 * 1000000000.0);
  *(double *)(a1 + 928) = result;
  return result;
}

uint64_t WTF::dataLog<char [31]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "FATAL: world already stopped.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [62]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Fatal: collector does not believe that the world is stopped.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [20],BOOL,char [13],BOOL,char [2]>(_BYTE *a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const char *v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Fatal: hasAccess = ");
  if (*a1)
    v7 = "true";
  else
    v7 = "false";
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v8, "%s", v7);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ", stopped = ");
  if (*a2)
    v9 = "true";
  else
    v9 = "false";
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v10, "%s", v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [30]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Fatal: mutator has the conn.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t JSC::Heap::stopIfNecessarySlow(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  WTF::AtomStringImpl *v15;
  uint64_t result;

  do
  {
    v9 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)this + 226);
    if ((v9 & 4) == 0)
      goto LABEL_14;
    if ((v9 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1985B4BBCLL);
    }
    v10 = JSC::Heap::handleNeedFinalize(this, v9, a3, a4, a5, a6, a7, a8);
    v12 = v10;
    if ((v9 & 1) != 0 && (v10 & 1) == 0)
      JSC::Heap::collectInMutatorThread(this, v11, a3, a4, a5, a6, a7, a8);
  }
  while ((v12 & 1) != 0);
  v13 = atomic_load((unsigned int *)this + 226);
  if ((v13 & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B4BDCLL);
  }
  v14 = atomic_load((unsigned int *)this + 226);
  if ((v14 & 2) != 0)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1985B4B9CLL);
  }
  do
  {
    v15 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)this + 226);
    result = JSC::Heap::handleNeedFinalize(this, v15, a3, a4, a5, a6, a7, a8);
  }
  while ((result & 1) != 0);
  *((_BYTE *)this + 1005) = 1;
  return result;
}

uint64_t JSC::Heap::handleNeedFinalize(JSC::Heap *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  double v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::MonotonicTime *v54;
  char *v55;
  char *v56;
  WTF::StringImpl *v57;
  __int128 v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF::MonotonicTime *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t StatusReg;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t);
  JSC::BlockDirectory *i;
  JSC::PreciseAllocation *v83;
  JSC::PreciseAllocation *v84;
  JSC::PreciseAllocation *v85;
  JSC::PreciseAllocation *v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 v101;
  char *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  WTF::ParkingLot *v122;
  WTF::MonotonicTime *v123;
  __int128 v124;
  __int128 v125;
  WTF *v126;
  uint64_t v127;

  if ((a2 & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B4C74);
  }
  if ((a2 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B4C94);
  }
  if ((a2 & 8) != 0)
  {
    v10 = __ldaxr((unsigned int *)this + 226);
    if (v10 != (_DWORD)a2)
    {
      __clrex();
      return (a2 >> 3) & 1;
    }
    if (!__stlxr(a2 & 0xFFFFFFF7, (unsigned int *)this + 226))
    {
      v122 = (JSC::Heap *)((char *)this + 904);
      v121 = (int)a2;
      v11 = 0.0;
      if ((_BYTE)word_1ECF4C5CC)
      {
        v11 = WTF::MonotonicTime::now(this);
        v123 = this;
        WTF::dataLog<char [25],WTF::RawPointer,char [2]>("[GC<", (const void **)&v123, ">: finalize ");
      }
      v12 = *((_BYTE *)this + 10);
      *((_BYTE *)this + 10) = 2;
      if (*((_BYTE *)this + 156) == 1)
        WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::clear((uint64_t *)this + 11280, a2, a3, a4, a5, a6, a7, a8);
      JSC::MarkedSpace::sweepPreciseAllocations((JSC::Heap *)((char *)this + 160), a2, a3, a4, a5, a6, a7, a8);
      v20 = *((_QWORD *)this + 4447);
      if (v20)
      {
        for (i = *(JSC::BlockDirectory **)(v20 + 32); i; i = (JSC::BlockDirectory *)*((_QWORD *)i + 11))
          JSC::BlockDirectory::sweep(i, (uint64_t)v13, v14, v15, v16, v17, v18, v19);
        v85 = *(JSC::PreciseAllocation **)(v20 + 48);
        v84 = (JSC::PreciseAllocation *)(v20 + 48);
        v83 = v85;
        if (v85 != v84)
        {
          do
          {
            v86 = *(JSC::PreciseAllocation **)v83;
            JSC::PreciseAllocation::sweep(v83, v13, v14, v15, v16, v17, v18, v19);
            v83 = v86;
          }
          while (v86 != v84);
        }
      }
      *((_BYTE *)this + 10) = v12;
      v21 = (char *)*((_QWORD *)this + 11610);
      if (v21)
        v22 = (*((_QWORD *)this + 11610) & 1) == 0;
      else
        v22 = 0;
      if (!v22)
      {
LABEL_18:
        v23 = *((_QWORD *)this + 11611);
        if (v23)
          v24 = (*((_QWORD *)this + 11611) & 1) == 0;
        else
          v24 = 0;
        if (v24)
          JSC::MegamorphicCache::age(v23, (WTF::AtomStringImpl *)(*((_BYTE *)this + 156) == 1), v14, v15, v16, v17, v18, v19);
        if (*((_BYTE *)this + 156) == 1)
        {
          v99 = 0;
          v100 = (char *)this + 64592;
          v101 = 0uLL;
          do
          {
            v102 = &v100[v99];
            *((_OWORD *)v102 + 1) = v101;
            *((_OWORD *)v102 + 2) = v101;
            *(_OWORD *)v102 = v101;
            v103 = *(WTF::StringImpl **)&v100[v99 + 56];
            *((_QWORD *)v102 + 6) = 0;
            *((_QWORD *)v102 + 7) = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
              {
                WTF::StringImpl::~StringImpl(v103, (WTF::AtomStringImpl *)v13, v14, v15, v16, v17, v18, v19);
                WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
                v101 = 0uLL;
              }
              else
              {
                *(_DWORD *)v103 -= 2;
              }
            }
            v99 += 64;
          }
          while (v99 != 0x4000);
        }
        bzero((char *)this + 80976, 0x1000uLL);
        v32 = 0;
        v33 = (char *)this + 85072;
        do
        {
          v34 = &v33[v32];
          v35 = *(WTF::StringImpl **)&v33[v32];
          *(_QWORD *)&v33[v32] = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          v36 = (WTF::StringImpl *)*((_QWORD *)v34 + 1);
          *((_QWORD *)v34 + 1) = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
            }
            else
            {
              *(_DWORD *)v36 -= 2;
            }
          }
          *((_QWORD *)v34 + 2) = 0;
          v32 += 24;
        }
        while (v32 != 1536);
        v53 = 0;
        v54 = 0;
        v125 = 0xFFFFFFFFFFFFFFFFLL;
        v55 = (char *)this + 86624;
        *(double *)&v123 = 0.0;
        v124 = 0uLL;
        v126 = 0;
        v127 = 0;
        while (1)
        {
          if (v54)
            *(_DWORD *)v54 += 2;
          v56 = &v55[v53];
          v57 = *(WTF::StringImpl **)&v55[v53];
          *(_QWORD *)&v55[v53] = v54;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
            {
              WTF::StringImpl::~StringImpl(v57, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
            else
            {
              *(_DWORD *)v57 -= 2;
            }
          }
          v58 = v124;
          *(_OWORD *)(v56 + 24) = v125;
          *(_OWORD *)(v56 + 8) = v58;
          WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)v56 + 5, (const void **)&v126, v26, v27, v28, v29, v30, v31);
          if (v53 == 3528)
            break;
          v54 = v123;
          v53 += 56;
        }
        v67 = v126;
        if (v126)
        {
          v126 = 0;
          LODWORD(v127) = 0;
          WTF::fastFree((unint64_t)v67, v25, v26, v27, v28, v29, v30, v31);
        }
        v68 = v123;
        *(double *)&v123 = 0.0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
          {
            WTF::StringImpl::~StringImpl(v68, v25, v26, v27, v28, v29, v30, v31);
            WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
          }
          else
          {
            *(_DWORD *)v68 -= 2;
          }
        }
        if (*((_BYTE *)this + 156) == 1)
        {
          v112 = 0;
          *((_QWORD *)this + 6792) = 0;
          *((_QWORD *)this + 6024) = 0;
          *((_QWORD *)this + 6027) = 0;
          *((_QWORD *)this + 6030) = 0;
          *((_QWORD *)this + 6033) = 0;
          *((_QWORD *)this + 6036) = 0;
          *((_QWORD *)this + 6039) = 0;
          *((_QWORD *)this + 6042) = 0;
          *((_QWORD *)this + 6045) = 0;
          *((_QWORD *)this + 6048) = 0;
          *((_QWORD *)this + 6051) = 0;
          *((_QWORD *)this + 6054) = 0;
          *((_QWORD *)this + 6057) = 0;
          *((_QWORD *)this + 6060) = 0;
          *((_QWORD *)this + 6063) = 0;
          *((_QWORD *)this + 6066) = 0;
          *((_QWORD *)this + 6069) = 0;
          *((_QWORD *)this + 6072) = 0;
          *((_QWORD *)this + 6075) = 0;
          *((_QWORD *)this + 6078) = 0;
          *((_QWORD *)this + 6081) = 0;
          *((_QWORD *)this + 6084) = 0;
          *((_QWORD *)this + 6087) = 0;
          *((_QWORD *)this + 6090) = 0;
          *((_QWORD *)this + 6093) = 0;
          *((_QWORD *)this + 6096) = 0;
          *((_QWORD *)this + 6099) = 0;
          *((_QWORD *)this + 6102) = 0;
          *((_QWORD *)this + 6105) = 0;
          *((_QWORD *)this + 6108) = 0;
          *((_QWORD *)this + 6111) = 0;
          *((_QWORD *)this + 6114) = 0;
          *((_QWORD *)this + 6117) = 0;
          *((_QWORD *)this + 6120) = 0;
          *((_QWORD *)this + 6123) = 0;
          *((_QWORD *)this + 6126) = 0;
          *((_QWORD *)this + 6129) = 0;
          *((_QWORD *)this + 6132) = 0;
          *((_QWORD *)this + 6135) = 0;
          *((_QWORD *)this + 6138) = 0;
          *((_QWORD *)this + 6141) = 0;
          *((_QWORD *)this + 6144) = 0;
          *((_QWORD *)this + 6147) = 0;
          *((_QWORD *)this + 6150) = 0;
          *((_QWORD *)this + 6153) = 0;
          *((_QWORD *)this + 6156) = 0;
          *((_QWORD *)this + 6159) = 0;
          *((_QWORD *)this + 6162) = 0;
          *((_QWORD *)this + 6165) = 0;
          *((_QWORD *)this + 6168) = 0;
          *((_QWORD *)this + 6171) = 0;
          *((_QWORD *)this + 6174) = 0;
          *((_QWORD *)this + 6177) = 0;
          *((_QWORD *)this + 6180) = 0;
          *((_QWORD *)this + 6183) = 0;
          *((_QWORD *)this + 6186) = 0;
          *((_QWORD *)this + 6189) = 0;
          *((_QWORD *)this + 6192) = 0;
          *((_QWORD *)this + 6195) = 0;
          *((_QWORD *)this + 6198) = 0;
          *((_QWORD *)this + 6201) = 0;
          *((_QWORD *)this + 6204) = 0;
          *((_QWORD *)this + 6207) = 0;
          *((_QWORD *)this + 6210) = 0;
          *((_QWORD *)this + 6213) = 0;
          *((_QWORD *)this + 6216) = 0;
          *((_QWORD *)this + 6219) = 0;
          *((_QWORD *)this + 6222) = 0;
          *((_QWORD *)this + 6225) = 0;
          *((_QWORD *)this + 6228) = 0;
          *((_QWORD *)this + 6231) = 0;
          *((_QWORD *)this + 6234) = 0;
          *((_QWORD *)this + 6237) = 0;
          *((_QWORD *)this + 6240) = 0;
          *((_QWORD *)this + 6243) = 0;
          *((_QWORD *)this + 6246) = 0;
          *((_QWORD *)this + 6249) = 0;
          *((_QWORD *)this + 6252) = 0;
          *((_QWORD *)this + 6255) = 0;
          *((_QWORD *)this + 6258) = 0;
          *((_QWORD *)this + 6261) = 0;
          *((_QWORD *)this + 6264) = 0;
          *((_QWORD *)this + 6267) = 0;
          *((_QWORD *)this + 6270) = 0;
          *((_QWORD *)this + 6273) = 0;
          *((_QWORD *)this + 6276) = 0;
          *((_QWORD *)this + 6279) = 0;
          *((_QWORD *)this + 6282) = 0;
          *((_QWORD *)this + 6285) = 0;
          *((_QWORD *)this + 6288) = 0;
          *((_QWORD *)this + 6291) = 0;
          *((_QWORD *)this + 6294) = 0;
          *((_QWORD *)this + 6297) = 0;
          *((_QWORD *)this + 6300) = 0;
          *((_QWORD *)this + 6303) = 0;
          *((_QWORD *)this + 6306) = 0;
          *((_QWORD *)this + 6309) = 0;
          *((_QWORD *)this + 6312) = 0;
          *((_QWORD *)this + 6315) = 0;
          *((_QWORD *)this + 6318) = 0;
          *((_QWORD *)this + 6321) = 0;
          *((_QWORD *)this + 6324) = 0;
          *((_QWORD *)this + 6327) = 0;
          *((_QWORD *)this + 6330) = 0;
          *((_QWORD *)this + 6333) = 0;
          *((_QWORD *)this + 6336) = 0;
          *((_QWORD *)this + 6339) = 0;
          *((_QWORD *)this + 6342) = 0;
          *((_QWORD *)this + 6345) = 0;
          *((_QWORD *)this + 6348) = 0;
          *((_QWORD *)this + 6351) = 0;
          *((_QWORD *)this + 6354) = 0;
          *((_QWORD *)this + 6357) = 0;
          *((_QWORD *)this + 6360) = 0;
          *((_QWORD *)this + 6363) = 0;
          *((_QWORD *)this + 6366) = 0;
          *((_QWORD *)this + 6369) = 0;
          *((_QWORD *)this + 6372) = 0;
          *((_QWORD *)this + 6375) = 0;
          *((_QWORD *)this + 6378) = 0;
          *((_QWORD *)this + 6381) = 0;
          *((_QWORD *)this + 6384) = 0;
          *((_QWORD *)this + 6387) = 0;
          *((_QWORD *)this + 6390) = 0;
          *((_QWORD *)this + 6393) = 0;
          *((_QWORD *)this + 6396) = 0;
          *((_QWORD *)this + 6399) = 0;
          *((_QWORD *)this + 6402) = 0;
          *((_QWORD *)this + 6405) = 0;
          *((_QWORD *)this + 6408) = 0;
          *((_QWORD *)this + 6411) = 0;
          *((_QWORD *)this + 6414) = 0;
          *((_QWORD *)this + 6417) = 0;
          *((_QWORD *)this + 6420) = 0;
          *((_QWORD *)this + 6423) = 0;
          *((_QWORD *)this + 6426) = 0;
          *((_QWORD *)this + 6429) = 0;
          *((_QWORD *)this + 6432) = 0;
          *((_QWORD *)this + 6435) = 0;
          *((_QWORD *)this + 6438) = 0;
          *((_QWORD *)this + 6441) = 0;
          *((_QWORD *)this + 6444) = 0;
          *((_QWORD *)this + 6447) = 0;
          *((_QWORD *)this + 6450) = 0;
          *((_QWORD *)this + 6453) = 0;
          *((_QWORD *)this + 6456) = 0;
          *((_QWORD *)this + 6459) = 0;
          *((_QWORD *)this + 6462) = 0;
          *((_QWORD *)this + 6465) = 0;
          *((_QWORD *)this + 6468) = 0;
          *((_QWORD *)this + 6471) = 0;
          *((_QWORD *)this + 6474) = 0;
          *((_QWORD *)this + 6477) = 0;
          *((_QWORD *)this + 6480) = 0;
          *((_QWORD *)this + 6483) = 0;
          *((_QWORD *)this + 6486) = 0;
          *((_QWORD *)this + 6489) = 0;
          *((_QWORD *)this + 6492) = 0;
          *((_QWORD *)this + 6495) = 0;
          *((_QWORD *)this + 6498) = 0;
          *((_QWORD *)this + 6501) = 0;
          *((_QWORD *)this + 6504) = 0;
          *((_QWORD *)this + 6507) = 0;
          *((_QWORD *)this + 6510) = 0;
          *((_QWORD *)this + 6513) = 0;
          *((_QWORD *)this + 6516) = 0;
          *((_QWORD *)this + 6519) = 0;
          *((_QWORD *)this + 6522) = 0;
          *((_QWORD *)this + 6525) = 0;
          *((_QWORD *)this + 6528) = 0;
          *((_QWORD *)this + 6531) = 0;
          *((_QWORD *)this + 6534) = 0;
          *((_QWORD *)this + 6537) = 0;
          *((_QWORD *)this + 6540) = 0;
          *((_QWORD *)this + 6543) = 0;
          *((_QWORD *)this + 6546) = 0;
          *((_QWORD *)this + 6549) = 0;
          *((_QWORD *)this + 6552) = 0;
          *((_QWORD *)this + 6555) = 0;
          *((_QWORD *)this + 6558) = 0;
          *((_QWORD *)this + 6561) = 0;
          *((_QWORD *)this + 6564) = 0;
          *((_QWORD *)this + 6567) = 0;
          *((_QWORD *)this + 6570) = 0;
          *((_QWORD *)this + 6573) = 0;
          *((_QWORD *)this + 6576) = 0;
          *((_QWORD *)this + 6579) = 0;
          *((_QWORD *)this + 6582) = 0;
          *((_QWORD *)this + 6585) = 0;
          *((_QWORD *)this + 6588) = 0;
          *((_QWORD *)this + 6591) = 0;
          *((_QWORD *)this + 6594) = 0;
          *((_QWORD *)this + 6597) = 0;
          *((_QWORD *)this + 6600) = 0;
          *((_QWORD *)this + 6603) = 0;
          *((_QWORD *)this + 6606) = 0;
          *((_QWORD *)this + 6609) = 0;
          *((_QWORD *)this + 6612) = 0;
          *((_QWORD *)this + 6615) = 0;
          *((_QWORD *)this + 6618) = 0;
          *((_QWORD *)this + 6621) = 0;
          *((_QWORD *)this + 6624) = 0;
          *((_QWORD *)this + 6627) = 0;
          *((_QWORD *)this + 6630) = 0;
          *((_QWORD *)this + 6633) = 0;
          *((_QWORD *)this + 6636) = 0;
          *((_QWORD *)this + 6639) = 0;
          *((_QWORD *)this + 6642) = 0;
          *((_QWORD *)this + 6645) = 0;
          *((_QWORD *)this + 6648) = 0;
          *((_QWORD *)this + 6651) = 0;
          *((_QWORD *)this + 6654) = 0;
          *((_QWORD *)this + 6657) = 0;
          *((_QWORD *)this + 6660) = 0;
          *((_QWORD *)this + 6663) = 0;
          *((_QWORD *)this + 6666) = 0;
          *((_QWORD *)this + 6669) = 0;
          *((_QWORD *)this + 6672) = 0;
          *((_QWORD *)this + 6675) = 0;
          *((_QWORD *)this + 6678) = 0;
          *((_QWORD *)this + 6681) = 0;
          *((_QWORD *)this + 6684) = 0;
          *((_QWORD *)this + 6687) = 0;
          *((_QWORD *)this + 6690) = 0;
          *((_QWORD *)this + 6693) = 0;
          *((_QWORD *)this + 6696) = 0;
          *((_QWORD *)this + 6699) = 0;
          *((_QWORD *)this + 6702) = 0;
          *((_QWORD *)this + 6705) = 0;
          *((_QWORD *)this + 6708) = 0;
          *((_QWORD *)this + 6711) = 0;
          *((_QWORD *)this + 6714) = 0;
          *((_QWORD *)this + 6717) = 0;
          *((_QWORD *)this + 6720) = 0;
          *((_QWORD *)this + 6723) = 0;
          *((_QWORD *)this + 6726) = 0;
          *((_QWORD *)this + 6729) = 0;
          *((_QWORD *)this + 6732) = 0;
          *((_QWORD *)this + 6735) = 0;
          *((_QWORD *)this + 6738) = 0;
          *((_QWORD *)this + 6741) = 0;
          *((_QWORD *)this + 6744) = 0;
          *((_QWORD *)this + 6747) = 0;
          *((_QWORD *)this + 6750) = 0;
          *((_QWORD *)this + 6753) = 0;
          *((_QWORD *)this + 6756) = 0;
          *((_QWORD *)this + 6759) = 0;
          *((_QWORD *)this + 6762) = 0;
          *((_QWORD *)this + 6765) = 0;
          *((_QWORD *)this + 6768) = 0;
          *((_QWORD *)this + 6771) = 0;
          *((_QWORD *)this + 6777) = 0;
          *((_QWORD *)this + 6780) = 0;
          *((_QWORD *)this + 6783) = 0;
          *((_QWORD *)this + 6786) = 0;
          *((_QWORD *)this + 6789) = 0;
          *((_QWORD *)this + 6774) = 0;
          *((_QWORD *)this + 6795) = 0;
          *((_QWORD *)this + 6798) = 0;
          *((_QWORD *)this + 6801) = 0;
          *((_QWORD *)this + 6804) = 0;
          *((_QWORD *)this + 6807) = 0;
          *((_QWORD *)this + 6810) = 0;
          *((_QWORD *)this + 6813) = 0;
          *((_QWORD *)this + 6816) = 0;
          *((_QWORD *)this + 6819) = 0;
          *((_QWORD *)this + 6822) = 0;
          *((_QWORD *)this + 6825) = 0;
          *((_QWORD *)this + 6828) = 0;
          *((_QWORD *)this + 6831) = 0;
          *((_QWORD *)this + 6834) = 0;
          *((_QWORD *)this + 6837) = 0;
          *((_QWORD *)this + 6840) = 0;
          *((_QWORD *)this + 6843) = 0;
          *((_QWORD *)this + 6846) = 0;
          *((_QWORD *)this + 6849) = 0;
          *((_QWORD *)this + 6852) = 0;
          *((_QWORD *)this + 6855) = 0;
          *((_QWORD *)this + 6858) = 0;
          *((_QWORD *)this + 6861) = 0;
          *((_QWORD *)this + 6864) = 0;
          *((_QWORD *)this + 6867) = 0;
          *((_QWORD *)this + 6870) = 0;
          *((_QWORD *)this + 6873) = 0;
          *((_QWORD *)this + 6876) = 0;
          *((_QWORD *)this + 6879) = 0;
          *((_QWORD *)this + 6882) = 0;
          *((_QWORD *)this + 6885) = 0;
          *((_QWORD *)this + 6888) = 0;
          *((_QWORD *)this + 6891) = 0;
          *((_QWORD *)this + 6894) = 0;
          *((_QWORD *)this + 6897) = 0;
          *((_QWORD *)this + 6900) = 0;
          *((_QWORD *)this + 6903) = 0;
          *((_QWORD *)this + 6906) = 0;
          *((_QWORD *)this + 6909) = 0;
          *((_QWORD *)this + 6912) = 0;
          *((_QWORD *)this + 6915) = 0;
          *((_QWORD *)this + 6918) = 0;
          *((_QWORD *)this + 6921) = 0;
          *((_QWORD *)this + 6924) = 0;
          *((_QWORD *)this + 6927) = 0;
          *((_QWORD *)this + 6930) = 0;
          *((_QWORD *)this + 6933) = 0;
          *((_QWORD *)this + 6936) = 0;
          *((_QWORD *)this + 6939) = 0;
          *((_QWORD *)this + 6942) = 0;
          *((_QWORD *)this + 6945) = 0;
          *((_QWORD *)this + 6948) = 0;
          *((_QWORD *)this + 6951) = 0;
          *((_QWORD *)this + 6954) = 0;
          *((_QWORD *)this + 6957) = 0;
          *((_QWORD *)this + 6960) = 0;
          *((_QWORD *)this + 6963) = 0;
          *((_QWORD *)this + 6966) = 0;
          *((_QWORD *)this + 6969) = 0;
          *((_QWORD *)this + 6972) = 0;
          *((_QWORD *)this + 6975) = 0;
          *((_QWORD *)this + 6978) = 0;
          *((_QWORD *)this + 6981) = 0;
          *((_QWORD *)this + 6984) = 0;
          *((_QWORD *)this + 6987) = 0;
          *((_QWORD *)this + 6990) = 0;
          *((_QWORD *)this + 6993) = 0;
          *((_QWORD *)this + 6996) = 0;
          *((_QWORD *)this + 6999) = 0;
          *((_QWORD *)this + 7002) = 0;
          *((_QWORD *)this + 7005) = 0;
          *((_QWORD *)this + 7008) = 0;
          *((_QWORD *)this + 7011) = 0;
          *((_QWORD *)this + 7014) = 0;
          *((_QWORD *)this + 7017) = 0;
          *((_QWORD *)this + 7020) = 0;
          *((_QWORD *)this + 7023) = 0;
          *((_QWORD *)this + 7026) = 0;
          *((_QWORD *)this + 7029) = 0;
          *((_QWORD *)this + 7032) = 0;
          *((_QWORD *)this + 7035) = 0;
          *((_QWORD *)this + 7038) = 0;
          *((_QWORD *)this + 7041) = 0;
          *((_QWORD *)this + 7044) = 0;
          *((_QWORD *)this + 7047) = 0;
          *((_QWORD *)this + 7050) = 0;
          *((_QWORD *)this + 7053) = 0;
          *((_QWORD *)this + 7056) = 0;
          *((_QWORD *)this + 7059) = 0;
          *((_QWORD *)this + 7062) = 0;
          *((_QWORD *)this + 7065) = 0;
          *((_QWORD *)this + 7068) = 0;
          *((_QWORD *)this + 7071) = 0;
          *((_QWORD *)this + 7074) = 0;
          *((_QWORD *)this + 7077) = 0;
          *((_QWORD *)this + 7080) = 0;
          *((_QWORD *)this + 7083) = 0;
          *((_QWORD *)this + 7086) = 0;
          *((_QWORD *)this + 7089) = 0;
          *((_QWORD *)this + 7092) = 0;
          *((_QWORD *)this + 7095) = 0;
          *((_QWORD *)this + 7098) = 0;
          *((_QWORD *)this + 7101) = 0;
          *((_QWORD *)this + 7104) = 0;
          *((_QWORD *)this + 7107) = 0;
          *((_QWORD *)this + 7110) = 0;
          *((_QWORD *)this + 7113) = 0;
          *((_QWORD *)this + 7116) = 0;
          *((_QWORD *)this + 7119) = 0;
          *((_QWORD *)this + 7122) = 0;
          *((_QWORD *)this + 7125) = 0;
          *((_QWORD *)this + 7128) = 0;
          *((_QWORD *)this + 7131) = 0;
          *((_QWORD *)this + 7134) = 0;
          *((_QWORD *)this + 7137) = 0;
          *((_QWORD *)this + 7140) = 0;
          *((_QWORD *)this + 7143) = 0;
          *((_QWORD *)this + 7146) = 0;
          *((_QWORD *)this + 7149) = 0;
          *((_QWORD *)this + 7152) = 0;
          *((_QWORD *)this + 7155) = 0;
          *((_QWORD *)this + 7158) = 0;
          *((_QWORD *)this + 7161) = 0;
          *((_QWORD *)this + 7164) = 0;
          *((_QWORD *)this + 7167) = 0;
          *((_QWORD *)this + 7170) = 0;
          *((_QWORD *)this + 7173) = 0;
          *((_QWORD *)this + 7176) = 0;
          *((_QWORD *)this + 7179) = 0;
          *((_QWORD *)this + 7182) = 0;
          *((_QWORD *)this + 7185) = 0;
          *((_QWORD *)this + 7188) = 0;
          *((_QWORD *)this + 7191) = 0;
          *((_QWORD *)this + 7194) = 0;
          *((_QWORD *)this + 7197) = 0;
          *((_QWORD *)this + 7200) = 0;
          *((_QWORD *)this + 7203) = 0;
          *((_QWORD *)this + 7206) = 0;
          *((_QWORD *)this + 7209) = 0;
          *((_QWORD *)this + 7212) = 0;
          *((_QWORD *)this + 7215) = 0;
          *((_QWORD *)this + 7218) = 0;
          *((_QWORD *)this + 7221) = 0;
          *((_QWORD *)this + 7224) = 0;
          *((_QWORD *)this + 7227) = 0;
          *((_QWORD *)this + 7230) = 0;
          *((_QWORD *)this + 7233) = 0;
          *((_QWORD *)this + 7236) = 0;
          *((_QWORD *)this + 7239) = 0;
          *((_QWORD *)this + 7242) = 0;
          *((_QWORD *)this + 7245) = 0;
          *((_QWORD *)this + 7248) = 0;
          *((_QWORD *)this + 7251) = 0;
          *((_QWORD *)this + 7254) = 0;
          *((_QWORD *)this + 7257) = 0;
          *((_QWORD *)this + 7260) = 0;
          *((_QWORD *)this + 7263) = 0;
          *((_QWORD *)this + 7266) = 0;
          *((_QWORD *)this + 7269) = 0;
          *((_QWORD *)this + 7272) = 0;
          *((_QWORD *)this + 7275) = 0;
          *((_QWORD *)this + 7278) = 0;
          *((_QWORD *)this + 7281) = 0;
          *((_QWORD *)this + 7284) = 0;
          *((_QWORD *)this + 7287) = 0;
          *((_QWORD *)this + 7290) = 0;
          *((_QWORD *)this + 7293) = 0;
          *((_QWORD *)this + 7296) = 0;
          *((_QWORD *)this + 7299) = 0;
          *((_QWORD *)this + 7302) = 0;
          *((_QWORD *)this + 7305) = 0;
          *((_QWORD *)this + 7308) = 0;
          *((_QWORD *)this + 7311) = 0;
          *((_QWORD *)this + 7314) = 0;
          *((_QWORD *)this + 7317) = 0;
          *((_QWORD *)this + 7320) = 0;
          *((_QWORD *)this + 7323) = 0;
          *((_QWORD *)this + 7326) = 0;
          *((_QWORD *)this + 7329) = 0;
          *((_QWORD *)this + 7332) = 0;
          *((_QWORD *)this + 7335) = 0;
          *((_QWORD *)this + 7338) = 0;
          *((_QWORD *)this + 7341) = 0;
          *((_QWORD *)this + 7344) = 0;
          *((_QWORD *)this + 7347) = 0;
          *((_QWORD *)this + 7350) = 0;
          *((_QWORD *)this + 7353) = 0;
          *((_QWORD *)this + 7356) = 0;
          *((_QWORD *)this + 7359) = 0;
          *((_QWORD *)this + 7362) = 0;
          *((_QWORD *)this + 7365) = 0;
          *((_QWORD *)this + 7368) = 0;
          *((_QWORD *)this + 7371) = 0;
          *((_QWORD *)this + 7374) = 0;
          *((_QWORD *)this + 7377) = 0;
          *((_QWORD *)this + 7380) = 0;
          *((_QWORD *)this + 7383) = 0;
          *((_QWORD *)this + 7386) = 0;
          *((_QWORD *)this + 7389) = 0;
          *((_QWORD *)this + 7392) = 0;
          *((_QWORD *)this + 7395) = 0;
          *((_QWORD *)this + 7398) = 0;
          *((_QWORD *)this + 7401) = 0;
          *((_QWORD *)this + 7404) = 0;
          *((_QWORD *)this + 7407) = 0;
          *((_QWORD *)this + 7410) = 0;
          *((_QWORD *)this + 7413) = 0;
          *((_QWORD *)this + 7416) = 0;
          *((_QWORD *)this + 7419) = 0;
          *((_QWORD *)this + 7422) = 0;
          *((_QWORD *)this + 7425) = 0;
          *((_QWORD *)this + 7428) = 0;
          *((_QWORD *)this + 7431) = 0;
          *((_QWORD *)this + 7434) = 0;
          *((_QWORD *)this + 7437) = 0;
          *((_QWORD *)this + 7440) = 0;
          *((_QWORD *)this + 7443) = 0;
          *((_QWORD *)this + 7446) = 0;
          *((_QWORD *)this + 7449) = 0;
          *((_QWORD *)this + 7452) = 0;
          *((_QWORD *)this + 7455) = 0;
          *((_QWORD *)this + 7458) = 0;
          *((_QWORD *)this + 7461) = 0;
          *((_QWORD *)this + 7464) = 0;
          *((_QWORD *)this + 7467) = 0;
          *((_QWORD *)this + 7470) = 0;
          *((_QWORD *)this + 7473) = 0;
          *((_QWORD *)this + 7476) = 0;
          *((_QWORD *)this + 7479) = 0;
          *((_QWORD *)this + 7482) = 0;
          *((_QWORD *)this + 7485) = 0;
          *((_QWORD *)this + 7488) = 0;
          *((_QWORD *)this + 7491) = 0;
          *((_QWORD *)this + 7494) = 0;
          *((_QWORD *)this + 7497) = 0;
          *((_QWORD *)this + 7500) = 0;
          *((_QWORD *)this + 7503) = 0;
          *((_QWORD *)this + 7506) = 0;
          *((_QWORD *)this + 7509) = 0;
          *((_QWORD *)this + 7512) = 0;
          *((_QWORD *)this + 7515) = 0;
          *((_QWORD *)this + 7518) = 0;
          *((_QWORD *)this + 7521) = 0;
          *((_QWORD *)this + 7524) = 0;
          *((_QWORD *)this + 7527) = 0;
          *((_QWORD *)this + 7530) = 0;
          *((_QWORD *)this + 7533) = 0;
          *((_QWORD *)this + 7536) = 0;
          *((_QWORD *)this + 7539) = 0;
          *((_QWORD *)this + 7542) = 0;
          *((_QWORD *)this + 7545) = 0;
          *((_QWORD *)this + 7548) = 0;
          *((_QWORD *)this + 7551) = 0;
          *((_QWORD *)this + 7554) = 0;
          *((_QWORD *)this + 7557) = 0;
          do
          {
            *(_QWORD *)((char *)this + v112 + 44248) = 0;
            v112 += 16;
          }
          while (v112 != 3936);
        }
        if (*((_DWORD *)this + 156))
        {
          v87 = *((unsigned int *)this + 157);
          if ((_DWORD)v87)
          {
            v88 = (WTF::StringImpl **)*((_QWORD *)this + 77);
            v89 = 8 * v87;
            do
            {
              v90 = *v88;
              *v88 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                {
                  WTF::StringImpl::~StringImpl(v90, v25, v26, v27, v28, v29, v30, v31);
                  WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
                }
                else
                {
                  *(_DWORD *)v90 -= 2;
                }
              }
              ++v88;
              v89 -= 8;
            }
            while (v89);
            *((_DWORD *)this + 157) = 0;
          }
          v68 = (WTF::MonotonicTime *)*((_QWORD *)this + 77);
          if (v68)
          {
            *((_QWORD *)this + 77) = 0;
            *((_DWORD *)this + 156) = 0;
            WTF::fastFree((unint64_t)v68, v25, v26, v27, v28, v29, v30, v31);
          }
        }
        v69 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          *(_QWORD *)this = 0;
          WTF::fastFree(v69 - 16, v25, v26, v27, v28, v29, v30, v31);
        }
        v70 = *((unsigned int *)this + 173);
        if ((_DWORD)v70)
        {
          v78 = *((_QWORD *)this + 85);
          v79 = v78 + 16 * v70;
          do
          {
            v81 = *(uint64_t (**)(char *, uint64_t))v78;
            v80 = *(_QWORD *)(v78 + 8);
            v78 += 16;
            v68 = (WTF::MonotonicTime *)v81((char *)this - 192, v80);
          }
          while (v78 != v79);
        }
        if (byte_1ECF4C5C4)
          v71 = 1;
        else
          v71 = BYTE1(dword_1ECF4C240) == 0;
        if (v71 || BYTE1(dword_1ECF4C723) != 0)
          JSC::Heap::sweepSynchronously(this, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
        if ((_BYTE)word_1ECF4C5CC)
        {
          *(double *)&v123 = (WTF::MonotonicTime::now(v68) - v11) * 1000.0;
          WTF::dataLog<double,char [5]>((double *)&v123, "ms]\n");
        }
        WTF::ParkingLot::unparkAll(v122, v25, v26, v27, v28, v29, v30, v31);
        LODWORD(a2) = v121;
        return (a2 >> 3) & 1;
      }
      v73 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v75 = *(_QWORD *)&v21[v73];
        *(_QWORD *)&v21[v73] = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v75, (WTF::AtomStringImpl *)v13, v14, v15, v16, v17, v18, v19);
            v76 = *(_QWORD *)(StatusReg + 752);
            if (v76)
            {
              if (!(v75 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v75 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v75)) & 1) != 0)
              {
LABEL_75:
                v77 = *(unsigned int *)(v76 + 8000);
                if (v77 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v76, v75, (os_unfair_lock_s *)5, v15, v16, v17, v18, v19);
                }
                else
                {
                  *(_QWORD *)(v76 + 8 * v77) = v75 | 0x5000000000000;
                  *(_DWORD *)(v76 + 8000) = v77 + 1;
                }
                goto LABEL_70;
              }
              if (v75 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v75 >> 24)
              {
                v15 = 0;
              }
              else
              {
                v15 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v75 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v75) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v15 == 1)
                  goto LABEL_75;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v76, v75, 1, v15, v16, v17, v18, v19);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v75, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
LABEL_70:
        v73 += 16;
        if (v73 == 0x8000)
        {
          bzero(v21, 0x8000uLL);
          goto LABEL_18;
        }
      }
    }
  }
  return (a2 >> 3) & 1;
}

uint64_t JSC::Heap::collectInMutatorThread(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  JSC *v10;
  char v11;
  unint64_t StatusReg;
  const void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t result;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::WordLock *v34;
  unsigned int v35;
  unsigned int v36;
  _opaque_pthread_t *v37;
  unint64_t v39;
  unint64_t v40;
  const void **v41;
  uint64_t v42;
  unint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  _opaque_pthread_t *v46;
  unint64_t v48;
  char *v49;
  _opaque_pthread_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  unsigned int v56;
  _opaque_pthread_t *v57;
  unint64_t v59;
  char *stackaddr_np;
  _opaque_pthread_t *v61;
  unint64_t v62;
  char *v63;
  _opaque_pthread_t *v64;
  int v65;
  unint64_t v66;
  JSC *v67;
  const void **v68;
  int v69;
  _opaque_pthread_t *v70;
  rlim_t stacksize_np;
  JSC *v72;
  const void **v73;
  int v74;
  _opaque_pthread_t *v75;
  rlim_t rlim_cur;
  int v77;
  _opaque_pthread_t *v78;
  rlim_t v79;
  char v80;
  uint64_t v81;
  const void *v82;
  const void *v83;
  uint64_t v84;
  int v85;
  JSC *v86;
  rlimit v87;
  JSC::Heap *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  rlimit *v92;

  v9 = *((unsigned __int8 *)this + 10);
  *((_BYTE *)this + 10) = 3;
  v10 = (JSC::Heap *)((char *)this - 192);
  v11 = atomic_load((unsigned int *)this + 226);
  if ((v11 & 1) == 0)
  {
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x1985B61D8);
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = (const void **)((char *)this + 92920);
  while (1)
  {
    *((_QWORD *)this + 138) = 0;
    v14 = *(_QWORD *)(StatusReg + 736);
    if (v14)
    {
      *((_QWORD *)this + 139) = v14;
      v15 = *(_QWORD *)(StatusReg + 736);
      if (v15)
        goto LABEL_5;
LABEL_50:
      v52 = atomic_load(&WTF::initialize(void)::onceKey);
      if (v52 != -1)
      {
        v87.rlim_cur = (rlim_t)&v91;
        v92 = &v87;
        std::__call_once(&WTF::initialize(void)::onceKey, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
      }
      v53 = WTF::fastMalloc((WTF *)0x68);
      v15 = v53;
      *(_OWORD *)v53 = 0u;
      *(_OWORD *)(v53 + 16) = 0u;
      *(_OWORD *)(v53 + 32) = 0u;
      *(_OWORD *)(v53 + 48) = 0u;
      *(_OWORD *)(v53 + 64) = 0u;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_QWORD *)(v53 + 96) = 0;
      *(_DWORD *)v53 = 1;
      *(_OWORD *)(v53 + 8) = 0u;
      v54 = (unint64_t *)(v53 + 8);
      *(_OWORD *)(v53 + 24) = 0u;
      do
      {
        v55 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
        v56 = v55 + 1;
      }
      while (__stlxr(v56, (unsigned int *)&WTF::ThreadLike::s_uid));
      *(_DWORD *)(v53 + 48) = v56;
      *(_QWORD *)(v53 + 52) = 0;
      *(_QWORD *)(v53 + 68) = 0;
      *(_QWORD *)(v53 + 60) = 0;
      *(_DWORD *)(v53 + 76) = 0;
      *(_QWORD *)(v53 + 88) = 0;
      *(_QWORD *)(v53 + 96) = 0;
      v57 = pthread_self();
      if (__ldaxr(v54))
      {
        __clrex();
      }
      else if (!__stxr(1uLL, v54))
      {
LABEL_57:
        *(_QWORD *)(v15 + 40) = v57;
        *(_DWORD *)(v15 + 52) = pthread_mach_thread_np(v57);
        v59 = __ldxr(v54);
        if (v59 == 1)
        {
          if (!__stlxr(0, v54))
            goto LABEL_62;
        }
        else
        {
          __clrex();
        }
        WTF::WordLock::unlockSlow((WTF::WordLock *)v54);
LABEL_62:
        stackaddr_np = *(char **)(v15 + 16);
        if (!stackaddr_np)
        {
          v72 = v10;
          v73 = v13;
          v74 = pthread_main_np();
          v75 = pthread_self();
          stackaddr_np = (char *)pthread_get_stackaddr_np(v75);
          if (v74)
          {
            getrlimit(3, &v87);
            if (v87.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
              rlim_cur = 0x800000;
            else
              rlim_cur = v87.rlim_cur;
          }
          else
          {
            rlim_cur = pthread_get_stacksize_np(v75);
          }
          *(_QWORD *)(v15 + 16) = stackaddr_np;
          *(_QWORD *)(v15 + 24) = &stackaddr_np[-rlim_cur];
          v13 = v73;
          v10 = v72;
        }
        *(_QWORD *)(v15 + 80) = stackaddr_np;
        *(_QWORD *)(v15 + 56) = v15 + 64;
        v61 = pthread_self();
        if (pthread_equal(v61, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
        {
          v62 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
          if (v62 != -1)
          {
            v87.rlim_cur = (rlim_t)&v91;
            v92 = &v87;
            std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
          }
          *(_QWORD *)(v15 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
        }
        *(_QWORD *)(StatusReg + 736) = v15;
        pthread_key_init_np();
        goto LABEL_5;
      }
      WTF::WordLock::lockSlow((WTF::WordLock *)v54);
      goto LABEL_57;
    }
    v31 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v31 != -1)
    {
      v87.rlim_cur = (rlim_t)&v91;
      v92 = &v87;
      std::__call_once(&WTF::initialize(void)::onceKey, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v32 = WTF::fastMalloc((WTF *)0x68);
    v33 = v32;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_QWORD *)(v32 + 96) = 0;
    *(_DWORD *)v32 = 1;
    *(_OWORD *)(v32 + 8) = 0u;
    v34 = (WTF::WordLock *)(v32 + 8);
    *(_OWORD *)(v32 + 24) = 0u;
    do
    {
      v35 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
      v36 = v35 + 1;
    }
    while (__stlxr(v36, (unsigned int *)&WTF::ThreadLike::s_uid));
    *(_DWORD *)(v32 + 48) = v36;
    *(_QWORD *)(v32 + 52) = 0;
    *(_QWORD *)(v32 + 68) = 0;
    *(_QWORD *)(v32 + 60) = 0;
    *(_DWORD *)(v32 + 76) = 0;
    *(_QWORD *)(v32 + 88) = 0;
    *(_QWORD *)(v32 + 96) = 0;
    v37 = pthread_self();
    if (__ldaxr((unint64_t *)v34))
    {
      __clrex();
LABEL_28:
      WTF::WordLock::lockSlow(v34);
      goto LABEL_29;
    }
    if (__stxr(1uLL, (unint64_t *)v34))
      goto LABEL_28;
LABEL_29:
    *(_QWORD *)(v33 + 40) = v37;
    *(_DWORD *)(v33 + 52) = pthread_mach_thread_np(v37);
    v39 = __ldxr((unint64_t *)v34);
    if (v39 != 1)
    {
      __clrex();
LABEL_43:
      WTF::WordLock::unlockSlow(v34);
      goto LABEL_44;
    }
    if (__stlxr(0, (unint64_t *)v34))
      goto LABEL_43;
LABEL_44:
    v49 = *(char **)(v33 + 16);
    if (!v49)
    {
      v67 = v10;
      v68 = v13;
      v69 = pthread_main_np();
      v70 = pthread_self();
      v49 = (char *)pthread_get_stackaddr_np(v70);
      if (v69)
      {
        getrlimit(3, &v87);
        if (v87.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
          stacksize_np = 0x800000;
        else
          stacksize_np = v87.rlim_cur;
      }
      else
      {
        stacksize_np = pthread_get_stacksize_np(v70);
      }
      *(_QWORD *)(v33 + 16) = v49;
      *(_QWORD *)(v33 + 24) = &v49[-stacksize_np];
      v13 = v68;
      v10 = v67;
    }
    *(_QWORD *)(v33 + 80) = v49;
    *(_QWORD *)(v33 + 56) = v33 + 64;
    v50 = pthread_self();
    if (pthread_equal(v50, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
    {
      v51 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
      if (v51 != -1)
      {
        v87.rlim_cur = (rlim_t)&v91;
        v92 = &v87;
        std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
      }
      *(_QWORD *)(v33 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
    }
    *(_QWORD *)(StatusReg + 736) = v33;
    pthread_key_init_np();
    *((_QWORD *)this + 139) = v33;
    v15 = *(_QWORD *)(StatusReg + 736);
    if (!v15)
      goto LABEL_50;
LABEL_5:
    v16 = *((_QWORD *)v10 + 14);
    if (!*(_BYTE *)(v16 + 6))
      goto LABEL_18;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(StatusReg + 736);
    if (!v18)
    {
      v86 = v10;
      v40 = atomic_load(&WTF::initialize(void)::onceKey);
      if (v40 != -1)
      {
        v87.rlim_cur = (rlim_t)&v91;
        v92 = &v87;
        std::__call_once(&WTF::initialize(void)::onceKey, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
      }
      v41 = v13;
      v42 = WTF::fastMalloc((WTF *)0x68);
      v18 = v42;
      *(_OWORD *)v42 = 0u;
      *(_OWORD *)(v42 + 16) = 0u;
      *(_OWORD *)(v42 + 32) = 0u;
      *(_OWORD *)(v42 + 48) = 0u;
      *(_OWORD *)(v42 + 64) = 0u;
      *(_OWORD *)(v42 + 80) = 0u;
      *(_QWORD *)(v42 + 96) = 0;
      *(_DWORD *)v42 = 1;
      *(_OWORD *)(v42 + 8) = 0u;
      v43 = (unint64_t *)(v42 + 8);
      *(_OWORD *)(v42 + 24) = 0u;
      do
      {
        v44 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
        v45 = v44 + 1;
      }
      while (__stlxr(v45, (unsigned int *)&WTF::ThreadLike::s_uid));
      *(_DWORD *)(v42 + 48) = v45;
      *(_QWORD *)(v42 + 52) = 0;
      *(_QWORD *)(v42 + 68) = 0;
      *(_QWORD *)(v42 + 60) = 0;
      *(_DWORD *)(v42 + 76) = 0;
      *(_QWORD *)(v42 + 88) = 0;
      *(_QWORD *)(v42 + 96) = 0;
      v46 = pthread_self();
      if (__ldaxr(v43))
      {
        __clrex();
        goto LABEL_38;
      }
      if (__stxr(1uLL, v43))
LABEL_38:
        WTF::WordLock::lockSlow((WTF::WordLock *)v43);
      *(_QWORD *)(v18 + 40) = v46;
      *(_DWORD *)(v18 + 52) = pthread_mach_thread_np(v46);
      v48 = __ldxr(v43);
      if (v48 == 1)
      {
        v13 = v41;
        if (!__stlxr(0, v43))
          goto LABEL_70;
      }
      else
      {
        __clrex();
        v13 = v41;
      }
      WTF::WordLock::unlockSlow((WTF::WordLock *)v43);
LABEL_70:
      v63 = *(char **)(v18 + 16);
      if (!v63)
      {
        v85 = v9;
        v77 = pthread_main_np();
        v78 = pthread_self();
        v63 = (char *)pthread_get_stackaddr_np(v78);
        if (v77)
        {
          getrlimit(3, &v87);
          if (v87.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
            v79 = 0x800000;
          else
            v79 = v87.rlim_cur;
        }
        else
        {
          v79 = pthread_get_stacksize_np(v78);
        }
        *(_QWORD *)(v18 + 16) = v63;
        *(_QWORD *)(v18 + 24) = &v63[-v79];
        v9 = v85;
        v13 = v41;
      }
      *(_QWORD *)(v18 + 80) = v63;
      *(_QWORD *)(v18 + 56) = v18 + 64;
      v64 = pthread_self();
      v65 = pthread_equal(v64, (pthread_t)WTF::s_webThreadPthread);
      v10 = v86;
      if (v65 || pthread_main_np())
      {
        v66 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
        if (v66 != -1)
        {
          v87.rlim_cur = (rlim_t)&v91;
          v92 = &v87;
          std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
        }
        *(_QWORD *)(v18 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
      }
      *(_QWORD *)(StatusReg + 736) = v18;
      pthread_key_init_np();
    }
    if (v17 == v18)
    {
      if (byte_1ECF4C348)
      {
        v81 = *(_QWORD *)(StatusReg + 736);
        if (!v81)
          v81 = WTF::Thread::initializeCurrentTLS(0);
        v87.rlim_cur = (rlim_t)v10;
        v92 = (rlimit *)&v84;
        v82 = *v13;
        v83 = *(const void **)(v81 + 16);
        v90 = *(const void **)(v81 + 24);
        v91 = v82;
        v89 = v83;
        WTF::dataLog<char [27],WTF::RawPointer,char [28],WTF::RawPointer,char [20],WTF::RawPointer,char [19],WTF::RawPointer,char [3],WTF::RawPointer,char [2],char [2]>("Sanitizing stack for VM = ", (const void **)&v87, ", current stack pointer at ", (const void **)&v92, ", last stack top = ", &v91, ", in stack range (", &v90, ", ", &v89, "]", "\n");
      }
      v19 = *v13;
      v20 = *(_QWORD *)(v15 + 16);
      if (v20)
        v21 = v20 >= (unint64_t)v19;
      else
        v21 = 0;
      if (!v21 || *(_QWORD *)(v15 + 24) >= (unint64_t)v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1985B62ACLL);
      }
      sanitizeStackForVMImpl((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8, v84);
      v22 = *(_QWORD *)(v15 + 16);
      if (!v22 || v22 < (unint64_t)*v13 || *(_QWORD *)(v15 + 24) >= (unint64_t)*v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1985B6298);
      }
    }
LABEL_18:
    result = JSC::Heap::finishChangingPhase((uint64_t)this, 0, a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
      break;
    if (*((_BYTE *)this + 1001))
    {
      switch(*((_BYTE *)this + 1001))
      {
        case 1:
          result = JSC::Heap::runBeginPhase((uint64_t)this, 0);
          if ((result & 1) != 0)
            goto LABEL_111;
          goto LABEL_78;
        case 2:
          JSC::sanitizeStackForVM(v10, v24, v25, v26, v27, v28, v29, v30);
          v87.rlim_cur = (rlim_t)WTF::ScopedLambdaFunctor<void ()(JSC::CurrentThreadState &),JSC::Heap::collectInMutatorThread(void)::$_0>::implFunction;
          v87.rlim_max = (rlim_t)&v87;
          v88 = this;
          result = JSC::callWithCurrentThreadState((uint64_t)&v87);
          goto LABEL_78;
        case 3:
          result = JSC::Heap::runConcurrentPhase((uint64_t)this, 0, v25, v26, v27, v28, v29, v30);
          if ((result & 1) == 0)
            goto LABEL_78;
          goto LABEL_111;
        case 4:
          result = JSC::Heap::runReloopPhase((_QWORD **)this, 0);
          if ((result & 1) != 0)
            goto LABEL_111;
          goto LABEL_78;
        case 5:
          result = JSC::Heap::runEndPhase((uint64_t)this, 0);
          if ((result & 1) != 0)
            goto LABEL_111;
          goto LABEL_78;
        default:
          goto LABEL_78;
      }
    }
    result = JSC::Heap::runNotRunningPhase((uint64_t)this, 0, v25, v26, v27, v28, v29, v30);
    if (!(_DWORD)result)
      break;
LABEL_111:
    v80 = atomic_load((unsigned int *)this + 226);
    if ((v80 & 1) == 0)
      goto LABEL_112;
  }
LABEL_78:
  *((_BYTE *)this + 10) = v9;
  return result;
}

uint64_t JSC::Heap::acquireAccessSlow(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v11;
  WTF::AtomStringImpl *v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD v19[3];
  _QWORD v20[3];

  v8 = (unsigned int *)((char *)this + 904);
  v9 = atomic_load((unsigned int *)this + 226);
  if ((v9 & 4) != 0)
  {
LABEL_12:
    result = 2054;
    __break(0xC471u);
    return result;
  }
  while (1)
  {
    if ((v9 & 2) != 0)
    {
      v17 = v8;
      v18 = v9;
      v14 = 0x7FF0000000000000;
      v15 = 0;
      v20[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction;
      v20[1] = v20;
      v20[2] = &v17;
      v19[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#2}>::implFunction;
      v19[1] = v19;
      v19[2] = &v16;
      WTF::ParkingLot::parkConditionallyImpl((uint64_t)v8, (uint64_t)v20, (uint64_t)v19, (WTF::TimeWithDynamicClockType *)&v14);
      goto LABEL_4;
    }
    v11 = __ldaxr(v8);
    if (v11 != v9)
    {
      __clrex();
      goto LABEL_4;
    }
    if (!__stlxr(v9 | 4, v8))
      break;
LABEL_4:
    v9 = atomic_load(v8);
    if ((v9 & 4) != 0)
      goto LABEL_12;
  }
  do
    v12 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)this + 226);
  while ((JSC::Heap::handleNeedFinalize(this, v12, a3, a4, a5, a6, a7, a8) & 1) != 0);
  *((_BYTE *)this + 1005) = 1;
  return JSC::Heap::stopIfNecessary(this);
}

uint64_t WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  _QWORD v8[3];
  _QWORD v9[3];

  v6 = a1;
  v7 = a2;
  v3 = 0x7FF0000000000000;
  v4 = 0;
  v9[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction;
  v9[1] = v9;
  v9[2] = &v6;
  v8[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#2}>::implFunction;
  v8[1] = v8;
  v8[2] = &v5;
  return WTF::ParkingLot::parkConditionallyImpl(a1, (uint64_t)v9, (uint64_t)v8, (WTF::TimeWithDynamicClockType *)&v3);
}

void JSC::Heap::releaseAccessSlow(JSC::Heap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  WTF::AtomStringImpl *v9;
  JSC::VM *v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  char v33;

  v8 = (unsigned int *)((char *)this + 904);
  v9 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)this + 226);
  if ((v9 & 4) == 0)
  {
LABEL_12:
    WTF::dataLog<char [75]>();
    __break(0xC471u);
    JUMPOUT(0x1985B64ECLL);
  }
  while (1)
  {
    if ((v9 & 2) != 0)
    {
      WTF::dataLog<char [16]>("FATAL: Attempting to release access but the mutator is stopped.\n");
      __break(0xC471u);
      JUMPOUT(0x1985B65C0);
    }
    if ((JSC::Heap::handleNeedFinalize(this, v9, a3, a4, a5, a6, a7, a8) & 1) != 0)
      goto LABEL_11;
    v12 = v9 & 0xFFFFFFFA;
    if ((v9 & 1) == 0)
    {
      v31 = __ldaxr(v8);
      if (v31 != (_DWORD)v9)
        goto LABEL_10;
      if (!__stlxr(v12, v8))
        return;
      goto LABEL_11;
    }
    if (*((unsigned __int8 *)this + 1002) != *((unsigned __int8 *)this + 1001))
      v12 = v9 & 0xFFFFFFF8 | 2;
    v13 = __ldaxr(v8);
    if (v13 != (_DWORD)v9)
    {
LABEL_10:
      __clrex();
      goto LABEL_11;
    }
    if (!__stlxr(v12, v8))
      break;
LABEL_11:
    v9 = (WTF::AtomStringImpl *)atomic_load(v8);
    if ((v9 & 4) == 0)
      goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC::Heap *)((char *)this - 192), v11, a3, a4, a5, a6, a7, a8);
  v21 = (unsigned __int8 *)(*((_QWORD *)this + 128) + 4);
  v32 = v21;
  v33 = 1;
  if (__ldaxr(v21))
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stxr(1u, v21))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
  if (*((_QWORD *)this + 117) != *((_QWORD *)this + 118))
    WTF::AutomaticThreadCondition::notifyOne(*((_QWORD *)this + 129), (uint64_t)&v32, v15, v16, v17, v18, v19, v20);
  WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v8, v14, v15, v16, v17, v18, v19, v20);
  if (v33)
  {
    v29 = v32;
    v30 = __ldxr(v32);
    if (v30 == 1)
    {
      if (!__stlxr(0, v32))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29, 0, v23, v24, v25, v26, v27, v28);
  }
}

uint64_t WTF::dataLog<char [75]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "FATAL: Attempting to release access but the mutator does not have access.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t JSC::Heap::relinquishConn(JSC::Heap *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  char v30;

  if ((a2 & 4) == 0 || (a2 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B6798);
  }
  if ((a2 & 1) == 0 || *((_BYTE *)this + 1004))
    return 0;
  v11 = __ldaxr((unsigned int *)this + 226);
  if (v11 != (_DWORD)a2)
  {
    __clrex();
    return 1;
  }
  v8 = 1;
  if (!__stlxr(a2 & 0xFFFFFFFE, (unsigned int *)this + 226))
  {
    JSC::sanitizeStackForVM((JSC::Heap *)((char *)this - 192), a2, a3, a4, a5, a6, a7, a8);
    v19 = (unsigned __int8 *)(*((_QWORD *)this + 128) + 4);
    v29 = v19;
    v30 = 1;
    if (__ldaxr(v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
LABEL_12:
      if (*((_QWORD *)this + 117) != *((_QWORD *)this + 118))
        WTF::AutomaticThreadCondition::notifyOne(*((_QWORD *)this + 129), (uint64_t)&v29, v13, v14, v15, v16, v17, v18);
      WTF::ParkingLot::unparkAll((JSC::Heap *)((char *)this + 904), v12, v13, v14, v15, v16, v17, v18);
      if (v30)
      {
        v27 = v29;
        v28 = __ldxr(v29);
        if (v28 == 1)
        {
          if (!__stlxr(0, v29))
            return v8;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v21, v22, v23, v24, v25, v26);
      }
      return v8;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
    goto LABEL_12;
  }
  return v8;
}

uint64_t WTF::dataLog<char [4],unsigned long,char [5]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "=> ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "kb, ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::Heap::fullActivityCallback(JSC::Heap *this)
{
  return *((_QWORD *)this + 79);
}

uint64_t JSC::Heap::edenActivityCallback(JSC::Heap *this)
{
  return *((_QWORD *)this + 80);
}

uint64_t JSC::Heap::setGarbageCollectionTimerEnabled(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 632);
  if (v2)
    *(_BYTE *)(v2 + 36) = a2;
  v3 = *(_QWORD *)(this + 640);
  if (v3)
    *(_BYTE *)(v3 + 36) = a2;
  return this;
}

_QWORD *JSC::Heap::addFinalizer(JSC::Heap *this, unint64_t a2, void (*a3)(JSC::JSCell *))
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  if ((a2 & 8) != 0)
    v6 = (a2 - 112) | 1;
  else
    v6 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v6 & 1) != 0)
    v7 = (_QWORD *)(v6 + 47);
  else
    v7 = (_QWORD *)(*(_QWORD *)v6 + 32);
  result = (_QWORD *)v7[2];
  if (!result)
    result = (_QWORD *)JSC::WeakSet::findAllocator(v7, v6);
  v7[2] = *result;
  *result = a2;
  result[1] = (char *)this + 544;
  result[2] = a3;
  return result;
}

void JSC::Heap::addFinalizer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v5 = *a3;
  *a3 = 0;
  if ((a2 & 8) != 0)
    v6 = (a2 - 112) | 1;
  else
    v6 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v6 & 1) != 0)
    v7 = (_QWORD *)(v6 + 47);
  else
    v7 = (_QWORD *)(*(_QWORD *)v6 + 32);
  v8 = (_QWORD *)v7[2];
  if (!v8)
  {
    while (1)
    {
      v9 = (_QWORD *)v7[3];
      if (!v9)
        break;
      v7[3] = v9[2];
      v8 = (_QWORD *)v9[4];
      v9[3] = 257;
      v9[4] = 0;
      if (v8)
        goto LABEL_7;
    }
    v10 = v7[6];
    if (!v7[1])
    {
      v11 = *(_QWORD **)(v10 + 488);
      *v7 = v10 + 480;
      v7[1] = v11;
      *v11 = v7;
      *(_QWORD *)(v10 + 488) = v7;
    }
    *(_QWORD *)(v10 + 1072) += 1024;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v12, v6);
    JSC::Heap::didAllocate((JSC::Heap *)(v7[6] + 192), 0x400uLL, v13, v14, v15, v16, v17, v18);
    v19 = v7 + 4;
    v20 = v7[5];
    if (v20)
      v19 = (_QWORD *)(v20 + 16);
    *v19 = v12;
    v7[5] = v12;
    v12[1] = v20;
    v12[2] = 0;
    v8 = (_QWORD *)v12[4];
    v12[3] = 257;
    v12[4] = 0;
  }
LABEL_7:
  v7[2] = *v8;
  *v8 = a2;
  v8[1] = a1 + 552;
  v8[2] = v5;
}

uint64_t JSC::Heap::CFinalizerOwner::finalize(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t result;

  result = a3(*a2);
  a2[1] = 3;
  return result;
}

uint64_t JSC::Heap::LambdaFinalizerOwner::finalize(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *a2);
  a2[1] = 3;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
}

void JSC::Heap::collectNowFullIfNotDoneRecently(JSC::Heap *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v8 = *((_QWORD *)a1 + 79);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 37))
    {
      JSC::Heap::reportAbandonedObjectGraph(a1);
      return;
    }
    *(_BYTE *)(v8 + 37) = 1;
    v10 = 257;
    v11 = 0;
    v9 = &v10;
  }
  else
  {
    v12 = 257;
    v13 = 0;
    v9 = &v12;
  }
  JSC::Heap::collectNow(a1, a2, (uint64_t)v9, a4, a5, a6, a7, a8);
}

unsigned int *JSC::Heap::setFullActivityCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v3;
  if (result)
  {
    v5 = result + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::Heap::setEdenActivityCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = v3;
  if (result)
  {
    v5 = result + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::Heap::disableStopIfNecessaryTimer(JSC::Heap *this)
{
  return JSC::StopIfNecessaryTimer::disable(*((_QWORD *)this + 82));
}

uint64_t JSC::Heap::sweepNextLogicallyEmptyWeakBlock(JSC::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *((_QWORD *)this + 76);
  if (v8 == -1)
    return 0;
  if (v8 >= *((unsigned int *)this + 151))
    goto LABEL_29;
  v11 = *(_QWORD *)(*((_QWORD *)this + 74) + 8 * v8);
  if (!*(_BYTE *)(v11 + 24) || !*(_QWORD *)(v11 + 32))
  {
    v12 = 0;
    v13 = 0;
    v14 = v11 + 48;
    v15 = 1;
    v16 = 1;
    do
    {
      v17 = (_QWORD *)(v14 + v12);
      v18 = *(_QWORD *)(v14 + v12 + 8);
      if ((v18 & 3) == 1)
      {
        v21 = v18 & 0xFFFFFFFFFFFFFFFCLL;
        v20 = (v18 & 0xFFFFFFFFFFFFFFFCLL) == 0;
        v18 = v18 & 0xFFFFFFFFFFFFFFFCLL | 2;
        v17[1] = v18;
        if (!v20)
        {
          (*(void (**)(unint64_t, unint64_t, _QWORD))(*(_QWORD *)v21 + 24))(v21, v14 + v12, *(_QWORD *)(v14 + v12 + 16));
          v18 = v17[1];
        }
      }
      v19 = v18 & 3;
      if (v19 == 3)
      {
        *v17 = v13;
        v13 = v14 + v12;
      }
      else
      {
        if (!v19)
          v16 = 0;
        v15 = 0;
      }
      v12 += 24;
    }
    while (v12 != 960);
    *(_BYTE *)(v11 + 24) = v15;
    *(_BYTE *)(v11 + 25) = v16;
    *(_QWORD *)(v11 + 32) = v13;
    if (!v15)
    {
      v8 = *((_QWORD *)this + 76);
      goto LABEL_19;
    }
    v8 = *((_QWORD *)this + 76);
    if (!v13)
    {
LABEL_19:
      v22 = v8 + 1;
      *((_QWORD *)this + 76) = v22;
      goto LABEL_20;
    }
  }
  v23 = *((unsigned int *)this + 151);
  if (v8 >= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1985B6D6CLL);
  }
  if (!(_DWORD)v23)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1985B6D64);
  }
  v24 = *((_QWORD *)this + 74);
  v25 = v24 + 8 * v23;
  v26 = *(_QWORD *)(v24 + 8 * v8);
  *(_QWORD *)(v24 + 8 * v8) = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v25 - 8) = v26;
  *((_DWORD *)this + 151) = v23 - 1;
  WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 110) -= 1024;
  v22 = *((_QWORD *)this + 76);
LABEL_20:
  if (v22 < *((unsigned int *)this + 151))
    return 1;
  result = 0;
  *((_QWORD *)this + 76) = -1;
  return result;
}

void JSC::Heap::forEachCodeBlockImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::JITWorklist *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  char v25;
  char **v26;
  char *v27;

  if (BYTE1(dword_1ECF4C240))
  {
    v10 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
    if (v10 != -1)
    {
      v27 = &v25;
      v26 = &v27;
      std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
    }
    v11 = (JSC::JITWorklist *)JSC::theGlobalJITWorklist;
    ++*(_DWORD *)(a1 + 724);
    JSC::JITWorklist::waitUntilAllPlansForVMAreReady(v11, (JSC::VM *)(a1 - 192), a3, a4, a5, a6, a7, a8);
    JSC::JITWorklist::completeAllReadyPlansForVM((uint64_t)v11, a1 - 192, 0, 0);
    v12 = *(_DWORD *)(a1 + 724) - 1;
    *(_DWORD *)(a1 + 724) = v12;
    if (*(unsigned __int8 *)(a1 + 1006) | HIBYTE(dword_1ECF4C5CE))
      v13 = v12 == 0;
    else
      v13 = 0;
    if (v13)
    {
      *(_BYTE *)(a1 + 1006) = 0;
      JSC::Heap::collectIfNecessaryOrDefer(a1, 0);
    }
  }
  v14 = *(_QWORD *)(a1 + 528);
  v15 = (unsigned __int8 *)(v14 + 16);
  if (__ldaxr((unsigned __int8 *)(v14 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v14 + 16);
LABEL_13:
  v17 = *(_QWORD **)v14;
  if (*(_QWORD *)v14)
  {
    v18 = *((unsigned int *)v17 - 1);
    v19 = &v17[v18];
    if (*((_DWORD *)v17 - 3))
    {
      v20 = v17;
      if ((_DWORD)v18)
      {
        v21 = 8 * v18;
        v20 = v17;
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            v20 = v19;
            break;
          }
        }
      }
      if (v17)
        goto LABEL_21;
      goto LABEL_36;
    }
    v20 = &v17[v18];
  }
  else
  {
    v20 = 0;
    v18 = 0;
  }
  v19 = &v17[v18];
  if (v17)
  {
LABEL_21:
    v22 = &v17[*((unsigned int *)v17 - 1)];
    goto LABEL_22;
  }
LABEL_36:
  v22 = 0;
LABEL_22:
  while (v20 != v22)
  {
    v23 = v20 + 1;
    (*(void (**)(_QWORD, _QWORD))a2)(*(_QWORD *)(a2 + 8), *v20);
    v20 = v19;
    if (v23 != v19)
    {
      v20 = v23;
      while ((unint64_t)(*v20 + 1) <= 1)
      {
        if (++v20 == v19)
        {
          v20 = v19;
          break;
        }
      }
    }
  }
  v24 = __ldxr(v15);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v15))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Heap::writeBarrierSlowPath(uint64_t this, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;

  if (!*(_BYTE *)(this + 563))
  {
    ++*(_QWORD *)(this + 1096);
LABEL_3:
    *(_BYTE *)(a2 + 7) = 2;
    v3 = *(_QWORD **)(this + 416);
    v4 = v3[2];
    if (v4 == 510)
    {
      this = WTF::fastMalloc((WTF *)0x1000);
      v4 = 0;
      *(_QWORD *)this = 0;
      *(_QWORD *)(this + 8) = 0;
      ++v3[3];
      v6 = (_QWORD *)*v3;
      v7 = v3 + 1;
      if (*v3)
        v7 = (_QWORD *)*v3;
      *v7 = this;
      *v3 = this;
      *(_QWORD *)this = 0;
      *(_QWORD *)(this + 8) = v6;
    }
    v5 = *v3 + 8 * v4;
    v3[2] = v4 + 1;
    *(_QWORD *)(v5 + 16) = a2;
    return this;
  }
  __dmb(0xBu);
  v8 = (unsigned __int8 *)(a2 + 7);
  if (*(_BYTE *)(a2 + 7))
    return this;
  v9 = *(unsigned __int8 *)(this + 563);
  ++*(_QWORD *)(this + 1096);
  if (!v9)
    goto LABEL_3;
  __dmb(0xBu);
  if ((a2 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 - 79) & 1) != 0)
      goto LABEL_3;
  }
  else if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(this + 240)
         && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
  {
    goto LABEL_3;
  }
  if (*(_BYTE *)(this + 155) == 1)
  {
    do
    {
      if (__ldaxr(v8))
      {
        __clrex();
        return this;
      }
    }
    while (__stlxr(1u, v8));
    if ((a2 & 8) != 0)
    {
      if ((*(_BYTE *)(a2 - 79) & 1) != 0)
LABEL_20:
        *v8 = 0;
    }
    else if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(this + 240)
           && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
    {
      goto LABEL_20;
    }
  }
  else
  {
    this = 1131;
    __break(0xC471u);
  }
  return this;
}

BOOL JSC::Heap::currentThreadIsDoingGCWork(JSC::Heap *this)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3)
    v3 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v3 + 5) > 0x3Fu)
    return 1;
  v4 = *(_QWORD *)(StatusReg + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(0);
  return (*(_BYTE *)(v4 + 5) & 8) != 0 || *((_BYTE *)this + 10) != 0;
}

uint64_t JSC::Heap::reportExternalMemoryVisited(uint64_t this, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (unint64_t *)(this + 888);
  do
  {
    while (1)
    {
      v3 = *v2;
      v4 = __ldxr(v2);
      if (v4 == v3)
        break;
      __clrex();
    }
  }
  while (__stxr(v3 + a2, v2));
  return this;
}

void JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow(JSC::Heap *this)
{
  if (!*((_DWORD *)this + 181))
  {
    *((_BYTE *)this + 1006) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)this, 0);
  }
}

uint64_t *JSC::Heap::registerWeakGCHashTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  return WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add((uint64_t *)(a1 + 728), &v10, a4, a5, a6, a7, a8, (uint64_t)&v9);
}

uint64_t *JSC::Heap::unregisterWeakGCHashTable(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v21;

  v8 = result[91];
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 8 * v13);
    if (v14 != a2)
    {
      v21 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v21) & v9;
        v14 = *(_QWORD *)(v8 + 8 * v13);
        ++v21;
        if (v14 == a2)
          goto LABEL_3;
      }
      v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_3:
    if (v13 != *(_DWORD *)(v8 - 4))
    {
      *(_QWORD *)(v8 + 8 * v13) = -1;
      result += 91;
      ++*(_DWORD *)(*result - 16);
      v15 = *result;
      v16 = *result ? *(_DWORD *)(v15 - 12) - 1 : -1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *result;
      if (*result)
      {
        v18 = 6 * *(_DWORD *)(v17 - 12);
        v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
          return WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(result, v19 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  return result;
}

uint64_t JSC::Heap::addCoreConstraints(JSC::Heap *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t result;
  uint64_t v149;
  uint64_t v150;

  v2 = *((_QWORD *)this + 54);
  v3 = WTF::fastMalloc((WTF *)0x13);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = 2;
  strcpy((char *)(v3 + 16), "Cs");
  v4 = WTF::fastMalloc((WTF *)0x22);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 17;
  strcpy((char *)(v4 + 16), "Conservative Scan");
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E35906F8;
  v5[1] = this;
  v5[2] = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E3590720;
  v6[1] = this;
  v6[2] = 0;
  v14 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v14 = off_1E3590DC0;
  v15 = (*(_DWORD *)v3)++;
  *(_QWORD *)(v14 + 8) = v3;
  *(_QWORD *)(v14 + 16) = v4;
  *(_QWORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 32) = -1;
  *(_DWORD *)(v14 + 36) = 257;
  if (v15)
    *(_DWORD *)v3 = v15;
  else
    WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
  *(_QWORD *)v14 = off_1E3590E28;
  *(_QWORD *)(v14 + 40) = v5;
  *(_QWORD *)(v14 + 48) = v6;
  v150 = v14;
  JSC::MarkingConstraintSet::add(v2, &v150);
  v16 = v150;
  v150 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 54);
  v18 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = 3;
  *(_DWORD *)(v18 + 16) = 7500621;
  v19 = WTF::fastMalloc((WTF *)0x21);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = 16;
  strcpy((char *)(v19 + 16), "Misc Small Roots");
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = off_1E3590748;
  v20[1] = this;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v21 = off_1E3590770;
  v21[1] = this;
  v29 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v29 = off_1E3590DC0;
  v30 = (*(_DWORD *)v18)++;
  *(_QWORD *)(v29 + 8) = v18;
  *(_QWORD *)(v29 + 16) = v19;
  *(_QWORD *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 32) = -1;
  *(_DWORD *)(v29 + 36) = 257;
  if (v30)
    *(_DWORD *)v18 = v30;
  else
    WTF::fastFree(v18, v22, v23, v24, v25, v26, v27, v28);
  *(_QWORD *)v29 = off_1E3590E28;
  *(_QWORD *)(v29 + 40) = v20;
  *(_QWORD *)(v29 + 48) = v21;
  v150 = v29;
  JSC::MarkingConstraintSet::add(v17, &v150);
  v31 = v150;
  v150 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 54);
  v33 = WTF::fastMalloc((WTF *)0x13);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = 2;
  strcpy((char *)(v33 + 16), "Sh");
  v34 = WTF::fastMalloc((WTF *)0x1F);
  *(_DWORD *)v34 = 1;
  *(_QWORD *)(v34 + 8) = 14;
  strcpy((char *)(v34 + 16), "Strong Handles");
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v35 = off_1E3590798;
  v35[1] = this;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v36 = off_1E35907C0;
  v36[1] = this;
  v44 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v44 = off_1E3590DC0;
  v45 = (*(_DWORD *)v33)++;
  *(_QWORD *)(v44 + 8) = v33;
  *(_QWORD *)(v44 + 16) = v34;
  *(_QWORD *)(v44 + 24) = 0;
  *(_DWORD *)(v44 + 32) = -1;
  *(_DWORD *)(v44 + 36) = 257;
  if (v45)
    *(_DWORD *)v33 = v45;
  else
    WTF::fastFree(v33, v37, v38, v39, v40, v41, v42, v43);
  *(_QWORD *)v44 = off_1E3590E28;
  *(_QWORD *)(v44 + 40) = v35;
  *(_QWORD *)(v44 + 48) = v36;
  v150 = v44;
  JSC::MarkingConstraintSet::add(v32, &v150);
  v46 = v150;
  v150 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 54);
  v48 = WTF::fastMalloc((WTF *)0x12);
  *(_DWORD *)v48 = 1;
  *(_QWORD *)(v48 + 8) = 1;
  *(_WORD *)(v48 + 16) = 68;
  v49 = WTF::fastMalloc((WTF *)0x19);
  *(_DWORD *)v49 = 1;
  *(_OWORD *)(v49 + 8) = xmmword_1991567B0;
  *(_BYTE *)(v49 + 24) = 0;
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v50 = off_1E35907E8;
  v50[1] = this;
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v51 = off_1E3590810;
  v51[1] = this;
  v59 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v59 = off_1E3590DC0;
  v60 = (*(_DWORD *)v48)++;
  *(_QWORD *)(v59 + 8) = v48;
  *(_QWORD *)(v59 + 16) = v49;
  *(_QWORD *)(v59 + 24) = 0;
  *(_DWORD *)(v59 + 32) = -1;
  *(_DWORD *)(v59 + 36) = 257;
  if (v60)
    *(_DWORD *)v48 = v60;
  else
    WTF::fastFree(v48, v52, v53, v54, v55, v56, v57, v58);
  *(_QWORD *)v59 = off_1E3590E28;
  *(_QWORD *)(v59 + 40) = v50;
  *(_QWORD *)(v59 + 48) = v51;
  v150 = v59;
  JSC::MarkingConstraintSet::add(v47, &v150);
  v61 = v150;
  v150 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *((_QWORD *)this + 54);
  v63 = WTF::fastMalloc((WTF *)0x13);
  *(_DWORD *)v63 = 1;
  *(_QWORD *)(v63 + 8) = 2;
  strcpy((char *)(v63 + 16), "Ws");
  v64 = WTF::fastMalloc((WTF *)0x1A);
  *(_DWORD *)v64 = 1;
  *(_QWORD *)(v64 + 8) = 9;
  strcpy((char *)(v64 + 16), "Weak Sets");
  v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v65 = off_1E3590838;
  v65[1] = this;
  v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v66 = off_1E3590888;
  v66[1] = this;
  ++*(_DWORD *)v63;
  ++*(_DWORD *)v64;
  v74 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v74 = off_1E3590DC0;
  v75 = (*(_DWORD *)v63)++;
  *(_QWORD *)(v74 + 8) = v63;
  *(_QWORD *)(v74 + 16) = v64;
  *(_QWORD *)(v74 + 24) = 0;
  *(_DWORD *)(v74 + 32) = -1;
  *(_DWORD *)(v74 + 36) = 65794;
  if (v75)
    *(_DWORD *)v63 = v75;
  else
    WTF::fastFree(v63, v67, v68, v69, v70, v71, v72, v73);
  *(_QWORD *)v74 = off_1E3590E28;
  *(_QWORD *)(v74 + 40) = v65;
  *(_QWORD *)(v74 + 48) = v66;
  v150 = v74;
  JSC::MarkingConstraintSet::add(v62, &v150);
  v83 = v150;
  v150 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  if (*(_DWORD *)v64 == 1)
    WTF::fastFree(v64, v76, v77, v78, v79, v80, v81, v82);
  else
    --*(_DWORD *)v64;
  if (*(_DWORD *)v63 == 1)
    WTF::fastFree(v63, v76, v77, v78, v79, v80, v81, v82);
  else
    --*(_DWORD *)v63;
  v84 = *((_QWORD *)this + 54);
  v85 = WTF::fastMalloc((WTF *)0x12);
  *(_DWORD *)v85 = 1;
  *(_QWORD *)(v85 + 8) = 1;
  *(_WORD *)(v85 + 16) = 79;
  v86 = WTF::fastMalloc((WTF *)0x17);
  *(_DWORD *)v86 = 1;
  *(_QWORD *)(v86 + 8) = 6;
  strcpy((char *)(v86 + 16), "Output");
  v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v87 = off_1E35908D8;
  v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v88 = off_1E3590950;
  ++*(_DWORD *)v85;
  ++*(_DWORD *)v86;
  v96 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v96 = off_1E3590DC0;
  v97 = (*(_DWORD *)v85)++;
  *(_QWORD *)(v96 + 8) = v85;
  *(_QWORD *)(v96 + 16) = v86;
  *(_QWORD *)(v96 + 24) = 0;
  *(_DWORD *)(v96 + 32) = -1;
  *(_DWORD *)(v96 + 36) = 65794;
  if (v97)
    *(_DWORD *)v85 = v97;
  else
    WTF::fastFree(v85, v89, v90, v91, v92, v93, v94, v95);
  *(_QWORD *)v96 = off_1E3590E28;
  *(_QWORD *)(v96 + 40) = v87;
  *(_QWORD *)(v96 + 48) = v88;
  v150 = v96;
  JSC::MarkingConstraintSet::add(v84, &v150);
  v105 = v150;
  v150 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  if (*(_DWORD *)v86 == 1)
    WTF::fastFree(v86, v98, v99, v100, v101, v102, v103, v104);
  else
    --*(_DWORD *)v86;
  if (*(_DWORD *)v85 == 1)
    WTF::fastFree(v85, v98, v99, v100, v101, v102, v103, v104);
  else
    --*(_DWORD *)v85;
  if (BYTE1(dword_1ECF4C240))
  {
    v106 = *((_QWORD *)this + 54);
    v107 = WTF::fastMalloc((WTF *)0x13);
    *(_DWORD *)v107 = 1;
    *(_QWORD *)(v107 + 8) = 2;
    strcpy((char *)(v107 + 16), "Jw");
    v108 = WTF::fastMalloc((WTF *)0x1D);
    *(_DWORD *)v108 = 1;
    *(_QWORD *)(v108 + 8) = 12;
    strcpy((char *)(v108 + 16), "JIT Worklist");
    v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v109 = off_1E35909C8;
    v109[1] = this;
    v110 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v110 = off_1E3590A18;
    v110[1] = this;
    v118 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v118 = off_1E3590DC0;
    v119 = (*(_DWORD *)v107)++;
    *(_QWORD *)(v118 + 8) = v107;
    *(_QWORD *)(v118 + 16) = v108;
    *(_QWORD *)(v118 + 24) = 0;
    *(_DWORD *)(v118 + 32) = -1;
    *(_DWORD *)(v118 + 36) = 258;
    if (v119)
      *(_DWORD *)v107 = v119;
    else
      WTF::fastFree(v107, v111, v112, v113, v114, v115, v116, v117);
    *(_QWORD *)v118 = off_1E3590E28;
    *(_QWORD *)(v118 + 40) = v109;
    *(_QWORD *)(v118 + 48) = v110;
    v150 = v118;
    JSC::MarkingConstraintSet::add(v106, &v150);
    v120 = v150;
    v150 = 0;
    if (v120)
      (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  }
  v121 = *((_QWORD *)this + 54);
  v122 = WTF::fastMalloc((WTF *)0x13);
  *(_DWORD *)v122 = 1;
  *(_QWORD *)(v122 + 8) = 2;
  strcpy((char *)(v122 + 16), "Cb");
  v123 = WTF::fastMalloc((WTF *)0x1B);
  *(_DWORD *)v123 = 1;
  *(_QWORD *)(v123 + 8) = 10;
  strcpy((char *)(v123 + 16), "CodeBlocks");
  v124 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v124 = off_1E3590A68;
  v124[1] = this;
  v125 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v125 = off_1E3590AB8;
  v125[1] = this;
  v133 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v133 = off_1E3590DC0;
  v134 = (*(_DWORD *)v122)++;
  *(_QWORD *)(v133 + 8) = v122;
  *(_QWORD *)(v133 + 16) = v123;
  *(_QWORD *)(v133 + 24) = 0;
  *(_DWORD *)(v133 + 32) = -1;
  *(_DWORD *)(v133 + 36) = 256;
  if (v134)
    *(_DWORD *)v122 = v134;
  else
    WTF::fastFree(v122, v126, v127, v128, v129, v130, v131, v132);
  *(_QWORD *)v133 = off_1E3590E28;
  *(_QWORD *)(v133 + 40) = v124;
  *(_QWORD *)(v133 + 48) = v125;
  v150 = v133;
  JSC::MarkingConstraintSet::add(v121, &v150);
  v135 = v150;
  v150 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *((_QWORD *)this + 54);
  v137 = WTF::fastMalloc((WTF *)0x30);
  v138 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v138 = 1;
  *(_QWORD *)(v138 + 8) = 3;
  strcpy((char *)(v138 + 16), "Msm");
  v139 = WTF::fastMalloc((WTF *)0x23);
  *(_DWORD *)v139 = 1;
  *(_QWORD *)(v139 + 8) = 18;
  strcpy((char *)(v139 + 16), "Mark Stack Merging");
  *(_QWORD *)v137 = off_1E3590DC0;
  v147 = (*(_DWORD *)v138)++;
  *(_QWORD *)(v137 + 8) = v138;
  *(_QWORD *)(v137 + 16) = v139;
  *(_QWORD *)(v137 + 24) = 0;
  *(_DWORD *)(v137 + 32) = -1;
  *(_DWORD *)(v137 + 36) = 257;
  if (v147)
    *(_DWORD *)v138 = v147;
  else
    WTF::fastFree(v138, v140, v141, v142, v143, v144, v145, v146);
  *(_QWORD *)v137 = off_1E3590D80;
  *(_QWORD *)(v137 + 40) = this;
  v149 = v137;
  JSC::MarkingConstraintSet::add(v136, &v149);
  result = v149;
  v149 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void JSC::Heap::addMarkingConstraint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;

  JSC::Heap::preventCollection(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 432);
  v11 = *a2;
  *a2 = 0;
  v21 = v11;
  JSC::MarkingConstraintSet::add(v10, &v21);
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_BYTE *)(a1 + 561))
  {
    v19 = (unsigned __int8 *)(a1 + 1126);
    v20 = __ldxr((unsigned __int8 *)(a1 + 1126));
    if (v20 == 1)
    {
      if (!__stlxr(0, v19))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v12, v13, v14, v15, v16, v17);
  }
}

WTF::MonotonicTime *JSC::Heap::notifyIsSafeToCollect(WTF::MonotonicTime *this)
{
  WTF::MonotonicTime *v1;
  double v2;
  WTF::MonotonicTime *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::MonotonicTime *v17;
  double v18;

  if (HIBYTE(word_1ECF4C5CC))
  {
    v1 = this;
    v2 = 0.0;
    if ((_BYTE)word_1ECF4C5CC)
    {
      v2 = WTF::MonotonicTime::now(this);
      v18 = *(double *)&v1;
      WTF::dataLog<char [25],WTF::RawPointer,char [2]>("[GC<", (const void **)&v18, ">: starting ");
    }
    this = (WTF::MonotonicTime *)JSC::Heap::addCoreConstraints(v1);
    *((_BYTE *)v1 + 561) = 1;
    if (byte_1ECF4C34B)
    {
      v3 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v3 = off_1E3590B08;
      *((_QWORD *)v3 + 1) = v1;
      v17 = v3;
      WTF::Thread::create((uint64_t)"JSC DEBUG Continuous GC", 24, (uint64_t *)&v17, 1, 0, (uint64_t *)&v18);
      WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>((unint64_t *)v1 + 131, (unint64_t *)&v18, v4, v5, v6, v7, v8, v9);
      WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::~Ref((unint64_t *)&v18, v10, v11, v12, v13, v14, v15, v16);
      this = v17;
      v17 = 0;
      if (this)
        this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 8))(this);
    }
    if ((_BYTE)word_1ECF4C5CC)
    {
      v18 = (WTF::MonotonicTime::now(this) - v2) * 1000.0;
      return (WTF::MonotonicTime *)WTF::dataLog<double,char [5]>(&v18, "ms]\n");
    }
  }
  return this;
}

unint64_t *WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count **v27;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(unsigned int **)(v10 + 96);
      *(_QWORD *)(v10 + 96) = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v10 + 64), a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_QWORD *)(v10 + 32);
      if (v25)
      {
        v26 = *(unsigned int *)(v25 - 4);
        if ((_DWORD)v26)
        {
          v27 = (std::__shared_weak_count **)(v25 + 16);
          do
          {
            if (*(v27 - 2) != (std::__shared_weak_count *)-1 && *v27)
              std::__shared_weak_count::__release_weak(*v27);
            v27 += 3;
            --v26;
          }
          while (v26);
        }
        WTF::fastFree(v25 - 16, v18, v19, v20, v21, v22, v23, v24);
      }
      WTF::fastFree(v10, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return a1;
}

uint64_t JSC::Heap::preventCollection(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  WTF::AtomStringImpl *v18;
  char v19;
  uint64_t v20;
  char v21;
  JSC::VM *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD v29[3];
  _QWORD v30[3];

  if (!*(_BYTE *)(this + 561))
    return this;
  v8 = this;
  v9 = (unsigned __int8 *)(this + 1126);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = (unsigned int *)(v8 + 904);
  while (1)
  {
    do
    {
      v12 = (unsigned __int8 *)(*(_QWORD *)(v8 + 1024) + 4);
      if (__ldaxr(v12))
      {
        __clrex();
LABEL_8:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
        goto LABEL_9;
      }
      if (__stxr(1u, v12))
        goto LABEL_8;
LABEL_9:
      v14 = *(_QWORD *)(v8 + 984);
      v15 = *(_QWORD *)(v8 + 992);
      if (v14 != v15)
      {
        do
          v16 = __ldaxr(v11);
        while (__stlxr(v16 | 0x10, v11));
      }
      v17 = __ldxr(v12);
      if (v17 != 1)
      {
        __clrex();
LABEL_15:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_16;
      }
      if (__stlxr(0, v12))
        goto LABEL_15;
LABEL_16:
      v18 = (WTF::AtomStringImpl *)atomic_load(v11);
      if ((v18 & 4) == 0)
        goto LABEL_35;
      if ((v18 & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985B81A0);
      }
      v19 = JSC::Heap::handleNeedFinalize((JSC::Heap *)v8, v18, a3, a4, a5, a6, a7, a8);
      v21 = v19;
      if ((v18 & 1) != 0 && (v19 & 1) == 0)
        JSC::Heap::collectInMutatorThread((JSC::Heap *)v8, v20, a3, a4, a5, a6, a7, a8);
    }
    while ((v21 & 1) != 0);
    *(_BYTE *)(v8 + 1005) = 1;
    do
    {
      v22 = (JSC::VM *)atomic_load((unsigned int *)(v8 + 904));
      this = JSC::Heap::relinquishConn((JSC::Heap *)v8, v22, a3, a4, a5, a6, a7, a8);
    }
    while ((this & 1) != 0);
    if (v14 == v15)
      break;
    v27 = v8 + 904;
    v28 = v18 | 0x10;
    v24 = 0x7FF0000000000000;
    v25 = 0;
    v30[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#1}>::implFunction;
    v30[1] = v30;
    v30[2] = &v27;
    v29[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned int,unsigned int>(WTF::Atomic<unsigned int> const*,unsigned int)::{lambda(void)#2}>::implFunction;
    v29[1] = v29;
    v29[2] = &v26;
    WTF::ParkingLot::parkConditionallyImpl(v8 + 904, (uint64_t)v30, (uint64_t)v29, (WTF::TimeWithDynamicClockType *)&v24);
  }
  do
    v23 = __ldaxr(v11);
  while (__stlxr(v23 & 0xFFFFFFEF, v11));
  if (*(unsigned __int8 *)(v8 + 155) != 255)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1985B8180);
  }
  return this;
}

__n128 JSC::Heap::addHeapFinalizerCallback(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(unsigned int *)(a1 + 692);
  if ((_DWORD)v2 == *(_DWORD *)(a1 + 688))
  {
    result.n128_u64[0] = WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::HeapFinalizerCallback const&>(a1 + 680, (unint64_t)a2).n128_u64[0];
  }
  else
  {
    result = *a2;
    *(__n128 *)(*(_QWORD *)(a1 + 680) + 16 * v2) = *a2;
    ++*(_DWORD *)(a1 + 692);
  }
  return result;
}

uint64_t JSC::Heap::addMarkedJSValueRefArray(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 384);
  *a2 = result + 376;
  a2[1] = v2;
  *v2 = a2;
  *(_QWORD *)(result + 384) = a2;
  return result;
}

void JSC::Heap::runTaskInParallel(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 v40;
  int v41;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;

  v10 = atomic_load(*a2 + 2);
  v11 = *a2;
  if (*a2)
  {
    v12 = v11 + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned __int8 *)(a1 + 909);
  if (__ldaxr((unsigned __int8 *)(a1 + 909)))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 909);
    goto LABEL_7;
  }
  if (__stxr(1u, v14))
    goto LABEL_6;
LABEL_7:
  if (v11)
  {
    v16 = v11 + 2;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *(unsigned int **)(a1 + 872);
  *(_QWORD *)(a1 + 872) = v11;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  v22 = (unsigned __int8 *)(a1 + 910);
  v23 = atomic_load((unsigned __int8 *)(a1 + 910));
  if ((v23 & 1) != 0)
  {
    atomic_store(0, v22);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(a1 + 910), a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = __ldxr(v14);
  if (v24 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 909), 0, a3, a4, a5, a6, a7, a8);
LABEL_22:
  if (v11)
  {
    v25 = v11 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 400));
  if (__ldaxr(v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_30;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 909);
LABEL_30:
  v36 = *(unsigned int **)(a1 + 872);
  *(_QWORD *)(a1 + 872) = 0;
  if (v36)
  {
    v37 = v36 + 2;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
    }
  }
  v40 = atomic_load(v22);
  if ((v40 & 1) != 0)
  {
    atomic_store(0, v22);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(a1 + 910), v28, v29, v30, v31, v32, v33, v34);
  }
  v41 = __ldxr(v14);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v14))
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 909), 0, v29, v30, v31, v32, v33, v34);
  if (__ldaxr(v14))
  {
    __clrex();
LABEL_44:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 909);
    goto LABEL_45;
  }
  if (__stxr(1u, v14))
    goto LABEL_44;
LABEL_45:
  v43 = atomic_load(*a2 + 2);
  if (v43 > v10)
  {
    do
    {
      v46 = 0x7FF0000000000000;
      v47 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v22, v14, (WTF::TimeWithDynamicClockType *)&v46);
      v45 = atomic_load(*a2 + 2);
    }
    while (v45 > v10);
  }
  v44 = __ldxr(v14);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v14))
LABEL_50:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, v29, v30, v31, v32, v33, v34);
}

uint64_t JSC::Heap::scheduleOpportunisticFullCollection(uint64_t this)
{
  *(_BYTE *)(this + 152) = 1;
  return this;
}

uint64_t JSC::Heap::apiWrapperObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1696;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x3E);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 45;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSCallbackObject<JSAPIWrapperObject>");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 40, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34864;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::objCCallbackFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1720;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2E);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 29;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace ObjCCallbackFunction");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 72, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34872;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::apiGlobalObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 3296;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[27],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1192, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34880;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::apiValueWrapperSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 26;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSAPIValueWrapper");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 16, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34888;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::arrayBufferSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 24;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSArrayBuffer", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34896;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::arrayIteratorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 40;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSArrayIterator", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34904;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::asyncGeneratorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 80;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSAsyncGenerator", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34912;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::bigInt64ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x29);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 24;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSBigInt64Array");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 48, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34920;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::bigIntObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 21;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace BigIntObject");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34928;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::bigUint64ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSBigUint64Array");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 48, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34936;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::BOOLeanObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 22;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace BooleanObject");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34944;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::boundFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 96;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSBoundFunction", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34952;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::callbackConstructorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1216;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2F);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 30;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSCallbackConstructor");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34960;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::callbackGlobalObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1240;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x3A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 41;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSCallbackObject<JSGlobalObject>");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 3312, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 34968;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::callbackFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 56;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[28],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34976;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::callbackObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 32;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[44],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1264, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34984;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::customGetterFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 72;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSCustomGetterFunction", (uint64_t)this, (uint64_t)this + 1288, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 34992;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::customSetterFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSCustomSetterFunction", (uint64_t)this, (uint64_t)this + 1312, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35000;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::dataViewSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 56;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[20],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35008;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::debuggerScopeSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 22;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace DebuggerScope");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35016;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::errorInstanceSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 64;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1360, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35024;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::finalizationRegistrySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1384;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 31;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSFinalizationRegistry");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 80, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35032;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::float32ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSFloat32Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35040;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::float64ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSFloat64Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35048;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::functionRareDataSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace FunctionRareData");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 72, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35056;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::generatorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 64;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSGenerator", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35064;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::globalObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1432;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 23;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSGlobalObject");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 3296, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35072;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::injectedScriptHostSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1456;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x39);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 40;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace Inspector::JSInjectedScriptHost");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35080;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::int8ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSInt8Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35088;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::int16ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSInt16Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35096;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::int32ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSInt32Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35104;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::intlCollatorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 56;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[22],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1744, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35112;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::intlDateTimeFormatSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1768;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 27;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlDateTimeFormat");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 104, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35120;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlDisplayNamesSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1792;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlDisplayNames");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 48, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35128;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlDurationFormatSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1816;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 27;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlDurationFormat");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 64, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35136;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlListFormatSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1840;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 23;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlListFormat");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 40, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35144;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlLocaleSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1864;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x24);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 19;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlLocale");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 168, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35152;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlNumberFormatSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 112;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[26],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1888, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35160;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::intlPluralRulesSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1912;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x29);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 24;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlPluralRules");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 80, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35168;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlRelativeTimeFormatSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1936;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 31;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlRelativeTimeFormat");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 56, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35176;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlSegmentIteratorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1960;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2D);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 28;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlSegmentIterator");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 48, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35184;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlSegmenterSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1984;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 22;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlSegmenter");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 40, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35192;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::intlSegmentsSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 2008;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 21;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace IntlSegments");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 48, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35200;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::javaScriptCallFrameSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1480;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x3A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 41;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace Inspector::JSJavaScriptCallFrame");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35208;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::jsModuleRecordSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 216;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[24],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1504, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35216;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::syntheticModuleRecordSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1528;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2F);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 30;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace SyntheticModuleRecord");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 128, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35224;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::mapIteratorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSMapIterator", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35232;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::mapSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 24;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSMap", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35240;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::moduleNamespaceObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 40;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSModuleNamespaceObject", (uint64_t)this, (uint64_t)this + 1552, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35248;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::nativeStdFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 40;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSNativeStdFunction", (uint64_t)this, (uint64_t)this + 1576, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35256;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::proxyObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 64;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace ProxyObject", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35264;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::proxyRevokeSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x25);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 20;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace ProxyRevoke");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 56, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35272;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::remoteFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSRemoteFunction");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 56, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35280;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::scopedArgumentsTableSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2E);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 29;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace ScopedArgumentsTable");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 40, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35288;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::scriptFetchParametersSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 16;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[33],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1176, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35296;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::scriptFetcherSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 16;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSScriptFetcher", (uint64_t)this, (uint64_t)this + 1176, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35304;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::setIteratorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSSetIterator", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35312;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::setSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 24;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSSet", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35320;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::shadowRealmSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 26;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace ShadowRealmObject");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35328;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::strictEvalActivationSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2E);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 29;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace StrictEvalActivation");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35336;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::stringIteratorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 32;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSStringIterator", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35344;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::sourceCodeSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 32;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSSourceCode", (uint64_t)this, (uint64_t)this + 1176, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35352;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::symbolSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v4 = 1;
  v16 = 0;
  v17 = (_DWORD *)v4;
  *(_QWORD *)(v4 + 8) = 15;
  strcpy((char *)(v4 + 16), "IsoSpace Symbol");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 16, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35360;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::symbolObjectSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 24;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace SymbolObject", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35368;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::templateObjectDescriptorSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 24;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[36],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1176, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35376;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::temporalCalendarSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalCalendar");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35384;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::temporalDurationSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalDuration");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 96, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35392;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::temporalInstantSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x29);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 24;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalInstant");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35400;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::temporalPlainDateSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 26;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalPlainDate");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35408;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::temporalPlainDateTimeSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2F);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 30;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalPlainDateTime");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 40, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35416;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::temporalPlainTimeSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 26;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalPlainTime");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35424;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::temporalTimeZoneSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace TemporalTimeZone");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35432;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::uint8ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSUint8Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35440;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::uint8ClampedArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[29],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35448;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::uint16ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSUint16Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35456;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::uint32ArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 48;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSUint32Array", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35464;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::unlinkedEvalCodeBlockSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2F);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 30;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace UnlinkedEvalCodeBlock");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 232, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35472;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::unlinkedFunctionCodeBlockSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x33);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 34;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace UnlinkedFunctionCodeBlock");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 216, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35480;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::unlinkedModuleProgramCodeBlockSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 224;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[40],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 1176, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35488;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::unlinkedProgramCodeBlockSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x32);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 33;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace UnlinkedProgramCodeBlock");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 264, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35496;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::weakObjectRefSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 32;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSWeakObjectRef", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35504;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::weakMapSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 40;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSWeakMap", (uint64_t)this, (uint64_t)this + 1632, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35512;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::weakSetSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 40;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSWeakSet", (uint64_t)this, (uint64_t)this + 1656, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35520;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::withScopeSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 32;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSWithScope", (uint64_t)this, (uint64_t)this + 1160, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35528;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyArraySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 2032;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 27;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSWebAssemblyArray");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 72, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35536;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::webAssemblyExceptionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 2056;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 31;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSWebAssemblyException");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 32, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35544;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::webAssemblyFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 112;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace WebAssemblyFunction", (uint64_t)this, (uint64_t)this + 2080, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35552;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyGlobalSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 2104;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2D);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 28;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSWebAssemblyGlobal");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35560;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::webAssemblyInstanceSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 72;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[31],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 2128, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35568;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyMemorySpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 40;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSWebAssemblyMemory", (uint64_t)this, (uint64_t)this + 2152, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35576;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyStructSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 2176;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2D);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 28;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSWebAssemblyStruct");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 40, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35584;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::webAssemblyModuleSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 32;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace JSWebAssemblyModule", (uint64_t)this, (uint64_t)this + 2200, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35592;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyModuleRecordSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 152;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(&v6, "IsoSpace WebAssemblyModuleRecord", (uint64_t)this, (uint64_t)this + 2224, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35600;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyTableSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 24;
  std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[28],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(&v6, (uint64_t)this, (uint64_t)this + 2248, &v5);
  __dmb(0xAu);
  v2 = (char *)this + 35608;
  result = v6;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t JSC::Heap::webAssemblyTagSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 2272;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 25;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace JSWebAssemblyTag");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 24, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35616;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::webAssemblyWrapperFunctionSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v2 = (char *)this + 1160;
  v3 = WTF::fastMalloc((WTF *)0xF8);
  v4 = WTF::fastMalloc((WTF *)0x34);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 35;
  v16 = 0;
  v17 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace WebAssemblyWrapperFunction");
  JSC::IsoSubspace::IsoSubspace(v3, &v17, (uint64_t)this, (uint64_t)v2, 80, 8, &v16, v5);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  __dmb(0xAu);
  v13 = (char *)this + 35624;
  v14 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return *(_QWORD *)v13;
  }
  return v3;
}

uint64_t JSC::Heap::evalExecutableSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v53;
  _DWORD *v54;

  v2 = (char *)this + 1176;
  v3 = WTF::fastMalloc((WTF *)0x200);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 23;
  v53 = 0;
  v54 = (_DWORD *)v4;
  strcpy((char *)(v4 + 16), "IsoSpace EvalExecutable");
  JSC::IsoSubspace::IsoSubspace(v3, &v54, (uint64_t)this, (uint64_t)v2, 112, 8, &v53, v5);
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v6, v7, v8, v9, v10, v11, v12);
  else
    --*(_DWORD *)v4;
  JSC::IsoCellSet::IsoCellSet(v3 + 248, v3);
  JSC::IsoCellSet::IsoCellSet(v3 + 336, v3);
  JSC::IsoCellSet::IsoCellSet(v3 + 424, v3);
  __dmb(0xAu);
  v20 = (char *)this + 35968;
  v21 = (_QWORD *)*((_QWORD *)this + 4496);
  *(_QWORD *)v20 = v3;
  if (v21)
  {
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v21 + 53), v13, v14, v15, v16, v17, v18, v19);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v21 + 42), v22, v23, v24, v25, v26, v27, v28);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v21 + 31), v29, v30, v31, v32, v33, v34, v35);
    *v21 = off_1E3590D20;
    v43 = v21[26];
    v21[26] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    JSC::BlockDirectory::~BlockDirectory((JSC::BlockDirectory *)(v21 + 11), v36, v37, v38, v39, v40, v41, v42);
    *v21 = off_1E3591150;
    v51 = (_DWORD *)v21[10];
    v21[10] = 0;
    if (v51)
    {
      if (*v51 == 1)
        WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
      else
        --*v51;
    }
    WTF::fastFree((unint64_t)v21, v44, v45, v46, v47, v48, v49, v50);
    return *(_QWORD *)v20;
  }
  return v3;
}

_QWORD **std::unique_ptr<JSC::Heap::ScriptExecutableSpaceAndSets>::operator=[abi:sn180100](_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;

  v9 = (_QWORD *)*a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v10 + 53), a2, a3, a4, a5, a6, a7, a8);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v10 + 42), v11, v12, v13, v14, v15, v16, v17);
    JSC::IsoCellSet::~IsoCellSet((JSC::IsoCellSet *)(v10 + 31), v18, v19, v20, v21, v22, v23, v24);
    *v10 = off_1E3590D20;
    v32 = v10[26];
    v10[26] = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    JSC::BlockDirectory::~BlockDirectory((JSC::BlockDirectory *)(v10 + 11), v25, v26, v27, v28, v29, v30, v31);
    *v10 = off_1E3591150;
    v40 = (_DWORD *)v10[10];
    v10[10] = 0;
    if (v40)
    {
      if (*v40 == 1)
        WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
      else
        --*v40;
    }
    WTF::fastFree((unint64_t)v10, v33, v34, v35, v36, v37, v38, v39);
  }
  return a1;
}

_QWORD *JSC::Heap::moduleProgramExecutableSpaceSlow(JSC::Heap *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v2 = (char *)this + 1176;
  v19 = 112;
  v3 = WTF::fastMalloc((WTF *)0x200);
  v20 = (_QWORD *)JSC::Heap::ScriptExecutableSpaceAndSets::ScriptExecutableSpaceAndSets<char const(&)[33],JSC::Heap&,JSC::HeapCellType &,unsigned long,unsigned char const&>(v3, (uint64_t)this, (uint64_t)v2, &v19);
  __dmb(0xAu);
  v10 = *std::unique_ptr<JSC::Heap::ScriptExecutableSpaceAndSets>::operator=[abi:sn180100]((_QWORD **)this + 4497, &v20, v4, v5, v6, v7, v8, v9);
  std::unique_ptr<JSC::Heap::ScriptExecutableSpaceAndSets>::~unique_ptr[abi:sn180100](&v20, v11, v12, v13, v14, v15, v16, v17);
  return v10;
}

JSC::GCClient::Heap *JSC::GCClient::Heap::Heap(JSC::GCClient::Heap *this, JSC::Heap *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  char *v11;
  int v12;
  unsigned __int8 *v13;
  _QWORD *v15;
  int v16;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  _QWORD *v21;
  int v22;
  char *v23;
  int v24;
  unsigned __int8 *v25;
  _QWORD *v27;
  int v28;
  char *v29;
  int v30;
  unsigned __int8 *v31;
  _QWORD *v33;
  int v34;
  char *v35;
  int v36;
  unsigned __int8 *v37;
  _QWORD *v39;
  int v40;
  char *v41;
  int v42;
  unsigned __int8 *v43;
  _QWORD *v45;
  int v46;
  char *v47;
  int v48;
  unsigned __int8 *v49;
  _QWORD *v51;
  int v52;
  char *v53;
  int v54;
  unsigned __int8 *v55;
  _QWORD *v57;
  int v58;
  char *v59;
  int v60;
  unsigned __int8 *v61;
  _QWORD *v63;
  int v64;
  char *v65;
  int v66;
  unsigned __int8 *v67;
  _QWORD *v69;
  int v70;
  char *v71;
  int v72;
  unsigned __int8 *v73;
  _QWORD *v75;
  int v76;
  char *v77;
  int v78;
  unsigned __int8 *v79;
  _QWORD *v81;
  int v82;
  char *v83;
  int v84;
  unsigned __int8 *v85;
  _QWORD *v87;
  int v88;
  char *v89;
  int v90;
  unsigned __int8 *v91;
  _QWORD *v93;
  int v94;
  char *v95;
  int v96;
  unsigned __int8 *v97;
  _QWORD *v99;
  int v100;
  char *v101;
  int v102;
  unsigned __int8 *v103;
  _QWORD *v105;
  int v106;
  char *v107;
  int v108;
  unsigned __int8 *v109;
  _QWORD *v111;
  int v112;
  char *v113;
  int v114;
  unsigned __int8 *v115;
  _QWORD *v117;
  int v118;
  char *v119;
  int v120;
  unsigned __int8 *v121;
  _QWORD *v123;
  int v124;
  char *v125;
  int v126;
  unsigned __int8 *v127;
  _QWORD *v129;
  int v130;
  char *v131;
  int v132;
  unsigned __int8 *v133;
  _QWORD *v135;
  int v136;
  char *v137;
  int v138;
  unsigned __int8 *v139;
  _QWORD **v141;
  _QWORD *v142;
  int v143;
  char *v144;
  int v145;
  unsigned __int8 *v146;
  _QWORD *v148;
  int v149;
  char *v150;
  int v151;
  unsigned __int8 *v152;
  _QWORD *v154;
  int v155;
  char *v156;
  int v157;
  unsigned __int8 *v158;
  _QWORD *v160;
  int v161;
  char *v162;
  int v163;
  unsigned __int8 *v164;
  _QWORD *v166;
  int v167;
  char *v168;
  int v169;
  unsigned __int8 *v170;
  _QWORD *v172;
  int v173;
  char *v174;
  int v175;
  unsigned __int8 *v176;
  _QWORD *v178;
  int v179;
  char *v180;
  int v181;
  unsigned __int8 *v182;
  _QWORD *v184;
  int v185;
  char *v186;
  int v187;
  unsigned __int8 *v188;
  _QWORD *v190;
  int v191;
  char *v192;
  int v193;
  unsigned __int8 *v194;
  _QWORD *v196;
  int v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned __int8 *v206;
  _QWORD *v208;
  int v209;
  char *v210;
  int v211;
  unsigned __int8 *v212;
  _QWORD *v214;
  int v215;
  char *v216;
  int v217;
  unsigned __int8 *v218;
  _QWORD *v220;
  int v221;
  char *v222;
  int v223;
  unsigned __int8 *v224;
  _QWORD *v226;
  int v227;

  v10 = (_DWORD *)((char *)a2 + 27324);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v11 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)a2 + 27264;
  v12 = *((_DWORD *)a2 + 6831);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 1;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 17) = v12;
  v13 = (unsigned __int8 *)a2 + 27321;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 27321))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 27321);
    goto LABEL_4;
  }
  if (__stxr(1u, v13))
    goto LABEL_3;
LABEL_4:
  v15 = (_QWORD *)*((_QWORD *)a2 + 3422);
  *((_QWORD *)this + 1) = (char *)a2 + 27368;
  *((_QWORD *)this + 2) = v15;
  *v15 = v11;
  *((_QWORD *)a2 + 3422) = v11;
  v16 = __ldxr(v13);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, v13))
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v17 = (char *)this + 96;
  *((_QWORD *)this + 14) = (char *)a2 + 27512;
  v18 = v10[62];
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 1;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 39) = v18;
  v19 = (unsigned __int8 *)a2 + 27569;
  *((_DWORD *)this + 44) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 27569))
  {
    __clrex();
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 27569);
    goto LABEL_12;
  }
  if (__stxr(1u, v19))
    goto LABEL_11;
LABEL_12:
  v21 = (_QWORD *)*((_QWORD *)a2 + 3453);
  *((_QWORD *)this + 12) = (char *)a2 + 27616;
  *((_QWORD *)this + 13) = v21;
  *v21 = v17;
  *((_QWORD *)a2 + 3453) = v17;
  v22 = __ldxr(v19);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v19))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 27569, 0, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v23 = (char *)this + 184;
  *((_QWORD *)this + 25) = (char *)a2 + 27760;
  v24 = v10[124];
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 61) = v24;
  v25 = (unsigned __int8 *)a2 + 27817;
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 27817))
  {
    __clrex();
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 27817);
    goto LABEL_20;
  }
  if (__stxr(1u, v25))
    goto LABEL_19;
LABEL_20:
  v27 = (_QWORD *)*((_QWORD *)a2 + 3484);
  *((_QWORD *)this + 23) = (char *)a2 + 27864;
  *((_QWORD *)this + 24) = v27;
  *v27 = v23;
  *((_QWORD *)a2 + 3484) = v23;
  v28 = __ldxr(v25);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v25))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 27817, 0, a3, a4, a5, a6, a7, a8);
  v29 = (char *)this + 272;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  v30 = v10[186];
  *((_QWORD *)this + 36) = (char *)a2 + 28008;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 1;
  *((_QWORD *)this + 40) = 0;
  *((_DWORD *)this + 82) = 0;
  *((_DWORD *)this + 83) = v30;
  v31 = (unsigned __int8 *)a2 + 28065;
  *((_DWORD *)this + 88) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 28065))
  {
    __clrex();
LABEL_27:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 28065);
    goto LABEL_28;
  }
  if (__stxr(1u, v31))
    goto LABEL_27;
LABEL_28:
  v33 = (_QWORD *)*((_QWORD *)a2 + 3515);
  *((_QWORD *)this + 34) = (char *)a2 + 28112;
  *((_QWORD *)this + 35) = v33;
  *v33 = v29;
  *((_QWORD *)a2 + 3515) = v29;
  v34 = __ldxr(v31);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, v31))
LABEL_32:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 28065, 0, a3, a4, a5, a6, a7, a8);
  v35 = (char *)this + 360;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  v36 = v10[248];
  *((_QWORD *)this + 47) = (char *)a2 + 28256;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 1;
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 105) = v36;
  v37 = (unsigned __int8 *)a2 + 28313;
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 28313))
  {
    __clrex();
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 28313);
    goto LABEL_36;
  }
  if (__stxr(1u, v37))
    goto LABEL_35;
LABEL_36:
  v39 = (_QWORD *)*((_QWORD *)a2 + 3546);
  *((_QWORD *)this + 45) = (char *)a2 + 28360;
  *((_QWORD *)this + 46) = v39;
  *v39 = v35;
  *((_QWORD *)a2 + 3546) = v35;
  v40 = __ldxr(v37);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v37))
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 28313, 0, a3, a4, a5, a6, a7, a8);
  v41 = (char *)this + 448;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  v42 = v10[310];
  *((_QWORD *)this + 58) = (char *)a2 + 28504;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 1;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_DWORD *)this + 127) = v42;
  v43 = (unsigned __int8 *)a2 + 28561;
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 28561))
  {
    __clrex();
LABEL_43:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 28561);
    goto LABEL_44;
  }
  if (__stxr(1u, v43))
    goto LABEL_43;
LABEL_44:
  v45 = (_QWORD *)*((_QWORD *)a2 + 3577);
  *((_QWORD *)this + 56) = (char *)a2 + 28608;
  *((_QWORD *)this + 57) = v45;
  *v45 = v41;
  *((_QWORD *)a2 + 3577) = v41;
  v46 = __ldxr(v43);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, v43))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 28561, 0, a3, a4, a5, a6, a7, a8);
  v47 = (char *)this + 536;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 69) = (char *)a2 + 28752;
  v48 = v10[372];
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 72) = 1;
  *((_QWORD *)this + 73) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_DWORD *)this + 149) = v48;
  v49 = (unsigned __int8 *)a2 + 28809;
  *((_DWORD *)this + 154) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 76) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 28809))
  {
    __clrex();
LABEL_51:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 28809);
    goto LABEL_52;
  }
  if (__stxr(1u, v49))
    goto LABEL_51;
LABEL_52:
  v51 = (_QWORD *)*((_QWORD *)a2 + 3608);
  *((_QWORD *)this + 68) = v51;
  *((_QWORD *)this + 67) = (char *)a2 + 28856;
  *v51 = v47;
  *((_QWORD *)a2 + 3608) = v47;
  v52 = __ldxr(v49);
  if (v52 != 1)
  {
    __clrex();
    goto LABEL_56;
  }
  if (__stlxr(0, v49))
LABEL_56:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 28809, 0, a3, a4, a5, a6, a7, a8);
  v53 = (char *)this + 624;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 80) = (char *)a2 + 29000;
  v54 = v10[434];
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 83) = 1;
  *((_QWORD *)this + 84) = 0;
  *((_DWORD *)this + 170) = 0;
  *((_DWORD *)this + 171) = v54;
  v55 = (unsigned __int8 *)a2 + 29057;
  *((_DWORD *)this + 176) = 0;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 87) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 29057))
  {
    __clrex();
LABEL_59:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 29057);
    goto LABEL_60;
  }
  if (__stxr(1u, v55))
    goto LABEL_59;
LABEL_60:
  v57 = (_QWORD *)*((_QWORD *)a2 + 3639);
  *((_QWORD *)this + 79) = v57;
  *((_QWORD *)this + 78) = (char *)a2 + 29104;
  *v57 = v53;
  *((_QWORD *)a2 + 3639) = v53;
  v58 = __ldxr(v55);
  if (v58 != 1)
  {
    __clrex();
    goto LABEL_64;
  }
  if (__stlxr(0, v55))
LABEL_64:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 29057, 0, a3, a4, a5, a6, a7, a8);
  v59 = (char *)this + 712;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_QWORD *)this + 91) = (char *)a2 + 29248;
  v60 = v10[496];
  *((_QWORD *)this + 92) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 94) = 1;
  *((_QWORD *)this + 95) = 0;
  *((_DWORD *)this + 192) = 0;
  *((_DWORD *)this + 193) = v60;
  v61 = (unsigned __int8 *)a2 + 29305;
  *((_DWORD *)this + 198) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 98) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 29305))
  {
    __clrex();
LABEL_67:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 29305);
    goto LABEL_68;
  }
  if (__stxr(1u, v61))
    goto LABEL_67;
LABEL_68:
  v63 = (_QWORD *)*((_QWORD *)a2 + 3670);
  *((_QWORD *)this + 90) = v63;
  *((_QWORD *)this + 89) = (char *)a2 + 29352;
  *v63 = v59;
  *((_QWORD *)a2 + 3670) = v59;
  v64 = __ldxr(v61);
  if (v64 != 1)
  {
    __clrex();
    goto LABEL_72;
  }
  if (__stlxr(0, v61))
LABEL_72:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 29305, 0, a3, a4, a5, a6, a7, a8);
  v65 = (char *)this + 800;
  *((_OWORD *)this + 50) = 0u;
  *((_QWORD *)this + 102) = (char *)a2 + 29496;
  v66 = v10[558];
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_QWORD *)this + 105) = 1;
  *((_QWORD *)this + 106) = 0;
  *((_DWORD *)this + 214) = 0;
  *((_DWORD *)this + 215) = v66;
  v67 = (unsigned __int8 *)a2 + 29553;
  *((_DWORD *)this + 220) = 0;
  *((_QWORD *)this + 108) = 0;
  *((_QWORD *)this + 109) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 29553))
  {
    __clrex();
LABEL_75:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 29553);
    goto LABEL_76;
  }
  if (__stxr(1u, v67))
    goto LABEL_75;
LABEL_76:
  v69 = (_QWORD *)*((_QWORD *)a2 + 3701);
  *((_QWORD *)this + 101) = v69;
  *((_QWORD *)this + 100) = (char *)a2 + 29600;
  *v69 = v65;
  *((_QWORD *)a2 + 3701) = v65;
  v70 = __ldxr(v67);
  if (v70 != 1)
  {
    __clrex();
    goto LABEL_80;
  }
  if (__stlxr(0, v67))
LABEL_80:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 29553, 0, a3, a4, a5, a6, a7, a8);
  v71 = (char *)this + 888;
  *(_OWORD *)((char *)this + 888) = 0u;
  *((_QWORD *)this + 113) = (char *)a2 + 29744;
  v72 = v10[620];
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_QWORD *)this + 116) = 1;
  *((_QWORD *)this + 117) = 0;
  *((_DWORD *)this + 236) = 0;
  *((_DWORD *)this + 237) = v72;
  v73 = (unsigned __int8 *)a2 + 29801;
  *((_DWORD *)this + 242) = 0;
  *((_QWORD *)this + 119) = 0;
  *((_QWORD *)this + 120) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 29801))
  {
    __clrex();
LABEL_83:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 29801);
    goto LABEL_84;
  }
  if (__stxr(1u, v73))
    goto LABEL_83;
LABEL_84:
  v75 = (_QWORD *)*((_QWORD *)a2 + 3732);
  *((_QWORD *)this + 112) = v75;
  *((_QWORD *)this + 111) = (char *)a2 + 29848;
  *v75 = v71;
  *((_QWORD *)a2 + 3732) = v71;
  v76 = __ldxr(v73);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_88;
  }
  if (__stlxr(0, v73))
LABEL_88:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 29801, 0, a3, a4, a5, a6, a7, a8);
  v77 = (char *)this + 976;
  *((_OWORD *)this + 61) = 0u;
  *((_QWORD *)this + 124) = (char *)a2 + 29992;
  v78 = v10[682];
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 127) = 1;
  *((_QWORD *)this + 128) = 0;
  *((_DWORD *)this + 258) = 0;
  *((_DWORD *)this + 259) = v78;
  v79 = (unsigned __int8 *)a2 + 30049;
  *((_DWORD *)this + 264) = 0;
  *((_QWORD *)this + 130) = 0;
  *((_QWORD *)this + 131) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 30049))
  {
    __clrex();
LABEL_91:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 30049);
    goto LABEL_92;
  }
  if (__stxr(1u, v79))
    goto LABEL_91;
LABEL_92:
  v81 = (_QWORD *)*((_QWORD *)a2 + 3763);
  *((_QWORD *)this + 123) = v81;
  *((_QWORD *)this + 122) = (char *)a2 + 30096;
  *v81 = v77;
  *((_QWORD *)a2 + 3763) = v77;
  v82 = __ldxr(v79);
  if (v82 != 1)
  {
    __clrex();
    goto LABEL_96;
  }
  if (__stlxr(0, v79))
LABEL_96:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 30049, 0, a3, a4, a5, a6, a7, a8);
  v83 = (char *)this + 1064;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_QWORD *)this + 135) = (char *)a2 + 30240;
  v84 = v10[744];
  *((_QWORD *)this + 136) = 0;
  *((_QWORD *)this + 137) = 0;
  *((_QWORD *)this + 138) = 1;
  *((_QWORD *)this + 139) = 0;
  *((_DWORD *)this + 280) = 0;
  *((_DWORD *)this + 281) = v84;
  v85 = (unsigned __int8 *)a2 + 30297;
  *((_DWORD *)this + 286) = 0;
  *((_QWORD *)this + 141) = 0;
  *((_QWORD *)this + 142) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 30297))
  {
    __clrex();
LABEL_99:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 30297);
    goto LABEL_100;
  }
  if (__stxr(1u, v85))
    goto LABEL_99;
LABEL_100:
  v87 = (_QWORD *)*((_QWORD *)a2 + 3794);
  *((_QWORD *)this + 134) = v87;
  *((_QWORD *)this + 133) = (char *)a2 + 30344;
  *v87 = v83;
  *((_QWORD *)a2 + 3794) = v83;
  v88 = __ldxr(v85);
  if (v88 != 1)
  {
    __clrex();
    goto LABEL_104;
  }
  if (__stlxr(0, v85))
LABEL_104:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 30297, 0, a3, a4, a5, a6, a7, a8);
  v89 = (char *)this + 1152;
  *((_OWORD *)this + 72) = 0u;
  *((_QWORD *)this + 146) = (char *)a2 + 30488;
  v90 = v10[806];
  *((_QWORD *)this + 147) = 0;
  *((_QWORD *)this + 148) = 0;
  *((_QWORD *)this + 149) = 1;
  *((_QWORD *)this + 150) = 0;
  *((_DWORD *)this + 302) = 0;
  *((_DWORD *)this + 303) = v90;
  v91 = (unsigned __int8 *)a2 + 30545;
  *((_DWORD *)this + 308) = 0;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 153) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 30545))
  {
    __clrex();
LABEL_107:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 30545);
    goto LABEL_108;
  }
  if (__stxr(1u, v91))
    goto LABEL_107;
LABEL_108:
  v93 = (_QWORD *)*((_QWORD *)a2 + 3825);
  *((_QWORD *)this + 145) = v93;
  *((_QWORD *)this + 144) = (char *)a2 + 30592;
  *v93 = v89;
  *((_QWORD *)a2 + 3825) = v89;
  v94 = __ldxr(v91);
  if (v94 != 1)
  {
    __clrex();
    goto LABEL_112;
  }
  if (__stlxr(0, v91))
LABEL_112:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 30545, 0, a3, a4, a5, a6, a7, a8);
  v95 = (char *)this + 1240;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_QWORD *)this + 157) = (char *)a2 + 30736;
  v96 = v10[868];
  *((_QWORD *)this + 158) = 0;
  *((_QWORD *)this + 159) = 0;
  *((_QWORD *)this + 160) = 1;
  *((_QWORD *)this + 161) = 0;
  *((_DWORD *)this + 324) = 0;
  *((_DWORD *)this + 325) = v96;
  v97 = (unsigned __int8 *)a2 + 30793;
  *((_DWORD *)this + 330) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 164) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 30793))
  {
    __clrex();
LABEL_115:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 30793);
    goto LABEL_116;
  }
  if (__stxr(1u, v97))
    goto LABEL_115;
LABEL_116:
  v99 = (_QWORD *)*((_QWORD *)a2 + 3856);
  *((_QWORD *)this + 156) = v99;
  *((_QWORD *)this + 155) = (char *)a2 + 30840;
  *v99 = v95;
  *((_QWORD *)a2 + 3856) = v95;
  v100 = __ldxr(v97);
  if (v100 != 1)
  {
    __clrex();
    goto LABEL_120;
  }
  if (__stlxr(0, v97))
LABEL_120:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 30793, 0, a3, a4, a5, a6, a7, a8);
  v101 = (char *)this + 1328;
  *((_OWORD *)this + 83) = 0u;
  *((_QWORD *)this + 168) = (char *)a2 + 30984;
  v102 = v10[930];
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 170) = 0;
  *((_QWORD *)this + 171) = 1;
  *((_QWORD *)this + 172) = 0;
  *((_DWORD *)this + 346) = 0;
  *((_DWORD *)this + 347) = v102;
  v103 = (unsigned __int8 *)a2 + 31041;
  *((_DWORD *)this + 352) = 0;
  *((_QWORD *)this + 174) = 0;
  *((_QWORD *)this + 175) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 31041))
  {
    __clrex();
LABEL_123:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 31041);
    goto LABEL_124;
  }
  if (__stxr(1u, v103))
    goto LABEL_123;
LABEL_124:
  v105 = (_QWORD *)*((_QWORD *)a2 + 3887);
  *((_QWORD *)this + 167) = v105;
  *((_QWORD *)this + 166) = (char *)a2 + 31088;
  *v105 = v101;
  *((_QWORD *)a2 + 3887) = v101;
  v106 = __ldxr(v103);
  if (v106 != 1)
  {
    __clrex();
    goto LABEL_128;
  }
  if (__stlxr(0, v103))
LABEL_128:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 31041, 0, a3, a4, a5, a6, a7, a8);
  v107 = (char *)this + 1416;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_QWORD *)this + 179) = (char *)a2 + 31232;
  v108 = v10[992];
  *((_QWORD *)this + 180) = 0;
  *((_QWORD *)this + 181) = 0;
  *((_QWORD *)this + 182) = 1;
  *((_QWORD *)this + 183) = 0;
  *((_DWORD *)this + 368) = 0;
  *((_DWORD *)this + 369) = v108;
  v109 = (unsigned __int8 *)a2 + 31289;
  *((_DWORD *)this + 374) = 0;
  *((_QWORD *)this + 185) = 0;
  *((_QWORD *)this + 186) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 31289))
  {
    __clrex();
LABEL_131:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 31289);
    goto LABEL_132;
  }
  if (__stxr(1u, v109))
    goto LABEL_131;
LABEL_132:
  v111 = (_QWORD *)*((_QWORD *)a2 + 3918);
  *((_QWORD *)this + 178) = v111;
  *((_QWORD *)this + 177) = (char *)a2 + 31336;
  *v111 = v107;
  *((_QWORD *)a2 + 3918) = v107;
  v112 = __ldxr(v109);
  if (v112 != 1)
  {
    __clrex();
    goto LABEL_136;
  }
  if (__stlxr(0, v109))
LABEL_136:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 31289, 0, a3, a4, a5, a6, a7, a8);
  v113 = (char *)this + 1504;
  *((_OWORD *)this + 94) = 0u;
  *((_QWORD *)this + 190) = (char *)a2 + 31480;
  v114 = v10[1054];
  *((_QWORD *)this + 191) = 0;
  *((_QWORD *)this + 192) = 0;
  *((_QWORD *)this + 193) = 1;
  *((_QWORD *)this + 194) = 0;
  *((_DWORD *)this + 390) = 0;
  *((_DWORD *)this + 391) = v114;
  v115 = (unsigned __int8 *)a2 + 31537;
  *((_DWORD *)this + 396) = 0;
  *((_QWORD *)this + 196) = 0;
  *((_QWORD *)this + 197) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 31537))
  {
    __clrex();
LABEL_139:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 31537);
    goto LABEL_140;
  }
  if (__stxr(1u, v115))
    goto LABEL_139;
LABEL_140:
  v117 = (_QWORD *)*((_QWORD *)a2 + 3949);
  *((_QWORD *)this + 189) = v117;
  *((_QWORD *)this + 188) = (char *)a2 + 31584;
  *v117 = v113;
  *((_QWORD *)a2 + 3949) = v113;
  v118 = __ldxr(v115);
  if (v118 != 1)
  {
    __clrex();
    goto LABEL_144;
  }
  if (__stlxr(0, v115))
LABEL_144:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 31537, 0, a3, a4, a5, a6, a7, a8);
  v119 = (char *)this + 1592;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *((_QWORD *)this + 201) = (char *)a2 + 31728;
  v120 = v10[1116];
  *((_QWORD *)this + 202) = 0;
  *((_QWORD *)this + 203) = 0;
  *((_QWORD *)this + 204) = 1;
  *((_QWORD *)this + 205) = 0;
  *((_DWORD *)this + 412) = 0;
  *((_DWORD *)this + 413) = v120;
  v121 = (unsigned __int8 *)a2 + 31785;
  *((_DWORD *)this + 418) = 0;
  *((_QWORD *)this + 207) = 0;
  *((_QWORD *)this + 208) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 31785))
  {
    __clrex();
LABEL_147:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 31785);
    goto LABEL_148;
  }
  if (__stxr(1u, v121))
    goto LABEL_147;
LABEL_148:
  v123 = (_QWORD *)*((_QWORD *)a2 + 3980);
  *((_QWORD *)this + 200) = v123;
  *((_QWORD *)this + 199) = (char *)a2 + 31832;
  *v123 = v119;
  *((_QWORD *)a2 + 3980) = v119;
  v124 = __ldxr(v121);
  if (v124 != 1)
  {
    __clrex();
    goto LABEL_152;
  }
  if (__stlxr(0, v121))
LABEL_152:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 31785, 0, a3, a4, a5, a6, a7, a8);
  v125 = (char *)this + 1680;
  *((_OWORD *)this + 105) = 0u;
  *((_QWORD *)this + 212) = (char *)a2 + 31976;
  v126 = v10[1178];
  *((_QWORD *)this + 213) = 0;
  *((_QWORD *)this + 214) = 0;
  *((_QWORD *)this + 215) = 1;
  *((_QWORD *)this + 216) = 0;
  *((_DWORD *)this + 434) = 0;
  *((_DWORD *)this + 435) = v126;
  v127 = (unsigned __int8 *)a2 + 32033;
  *((_DWORD *)this + 440) = 0;
  *((_QWORD *)this + 218) = 0;
  *((_QWORD *)this + 219) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 32033))
  {
    __clrex();
LABEL_155:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 32033);
    goto LABEL_156;
  }
  if (__stxr(1u, v127))
    goto LABEL_155;
LABEL_156:
  v129 = (_QWORD *)*((_QWORD *)a2 + 4011);
  *((_QWORD *)this + 211) = v129;
  *((_QWORD *)this + 210) = (char *)a2 + 32080;
  *v129 = v125;
  *((_QWORD *)a2 + 4011) = v125;
  v130 = __ldxr(v127);
  if (v130 != 1)
  {
    __clrex();
    goto LABEL_160;
  }
  if (__stlxr(0, v127))
LABEL_160:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 32033, 0, a3, a4, a5, a6, a7, a8);
  v131 = (char *)this + 1768;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *((_QWORD *)this + 223) = (char *)a2 + 32224;
  v132 = v10[1240];
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_QWORD *)this + 226) = 1;
  *((_QWORD *)this + 227) = 0;
  *((_DWORD *)this + 456) = 0;
  *((_DWORD *)this + 457) = v132;
  v133 = (unsigned __int8 *)a2 + 32281;
  *((_DWORD *)this + 462) = 0;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 230) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 32281))
  {
    __clrex();
LABEL_163:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 32281);
    goto LABEL_164;
  }
  if (__stxr(1u, v133))
    goto LABEL_163;
LABEL_164:
  v135 = (_QWORD *)*((_QWORD *)a2 + 4042);
  *((_QWORD *)this + 222) = v135;
  *((_QWORD *)this + 221) = (char *)a2 + 32328;
  *v135 = v131;
  *((_QWORD *)a2 + 4042) = v131;
  v136 = __ldxr(v133);
  if (v136 != 1)
  {
    __clrex();
    goto LABEL_168;
  }
  if (__stlxr(0, v133))
LABEL_168:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 32281, 0, a3, a4, a5, a6, a7, a8);
  v137 = (char *)this + 1856;
  *((_OWORD *)this + 116) = 0u;
  *((_QWORD *)this + 234) = (char *)a2 + 32472;
  v138 = v10[1302];
  *((_QWORD *)this + 235) = 0;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 237) = 1;
  *((_QWORD *)this + 238) = 0;
  *((_DWORD *)this + 478) = 0;
  *((_DWORD *)this + 479) = v138;
  v139 = (unsigned __int8 *)a2 + 32529;
  *((_DWORD *)this + 484) = 0;
  *((_QWORD *)this + 240) = 0;
  *((_QWORD *)this + 241) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 32529))
  {
    __clrex();
LABEL_171:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 32529);
    goto LABEL_172;
  }
  if (__stxr(1u, v139))
    goto LABEL_171;
LABEL_172:
  v141 = (_QWORD **)((char *)a2 + 32832);
  v142 = (_QWORD *)*((_QWORD *)a2 + 4073);
  *((_QWORD *)this + 233) = v142;
  *((_QWORD *)this + 232) = (char *)a2 + 32576;
  *v142 = v137;
  *((_QWORD *)a2 + 4073) = v137;
  v143 = __ldxr(v139);
  if (v143 != 1)
  {
    __clrex();
    goto LABEL_176;
  }
  if (__stlxr(0, v139))
LABEL_176:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 32529, 0, a3, a4, a5, a6, a7, a8);
  v144 = (char *)this + 1944;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *((_QWORD *)this + 245) = (char *)a2 + 32720;
  v145 = v10[1364];
  *((_QWORD *)this + 246) = 0;
  *((_QWORD *)this + 247) = 0;
  *((_QWORD *)this + 248) = 1;
  *((_QWORD *)this + 249) = 0;
  *((_DWORD *)this + 500) = 0;
  *((_DWORD *)this + 501) = v145;
  v146 = (unsigned __int8 *)a2 + 32777;
  *((_DWORD *)this + 506) = 0;
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 252) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 32777))
  {
    __clrex();
LABEL_179:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 32777);
    goto LABEL_180;
  }
  if (__stxr(1u, v146))
    goto LABEL_179;
LABEL_180:
  v148 = *v141;
  *((_QWORD *)this + 244) = *v141;
  *((_QWORD *)this + 243) = (char *)a2 + 32824;
  *v148 = v144;
  *v141 = v144;
  v149 = __ldxr(v146);
  if (v149 != 1)
  {
    __clrex();
    goto LABEL_184;
  }
  if (__stlxr(0, v146))
LABEL_184:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 32777, 0, a3, a4, a5, a6, a7, a8);
  v150 = (char *)this + 2032;
  *((_OWORD *)this + 127) = 0u;
  *((_QWORD *)this + 256) = (char *)a2 + 32968;
  v151 = *((_DWORD *)a2 + 8257);
  *((_QWORD *)this + 257) = 0;
  *((_QWORD *)this + 258) = 0;
  *((_QWORD *)this + 259) = 1;
  *((_QWORD *)this + 260) = 0;
  *((_DWORD *)this + 522) = 0;
  *((_DWORD *)this + 523) = v151;
  v152 = (unsigned __int8 *)a2 + 33025;
  *((_DWORD *)this + 528) = 0;
  *((_QWORD *)this + 262) = 0;
  *((_QWORD *)this + 263) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 33025))
  {
    __clrex();
LABEL_187:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 33025);
    goto LABEL_188;
  }
  if (__stxr(1u, v152))
    goto LABEL_187;
LABEL_188:
  v154 = (_QWORD *)*((_QWORD *)a2 + 4135);
  *((_QWORD *)this + 255) = v154;
  *((_QWORD *)this + 254) = (char *)a2 + 33072;
  *v154 = v150;
  *((_QWORD *)a2 + 4135) = v150;
  v155 = __ldxr(v152);
  if (v155 != 1)
  {
    __clrex();
    goto LABEL_192;
  }
  if (__stlxr(0, v152))
LABEL_192:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 33025, 0, a3, a4, a5, a6, a7, a8);
  v156 = (char *)this + 2120;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *((_QWORD *)this + 267) = (char *)a2 + 33216;
  v157 = *((_DWORD *)a2 + 8319);
  *((_QWORD *)this + 268) = 0;
  *((_QWORD *)this + 269) = 0;
  *((_QWORD *)this + 270) = 1;
  *((_QWORD *)this + 271) = 0;
  *((_DWORD *)this + 544) = 0;
  *((_DWORD *)this + 545) = v157;
  v158 = (unsigned __int8 *)a2 + 33273;
  *((_DWORD *)this + 550) = 0;
  *((_QWORD *)this + 273) = 0;
  *((_QWORD *)this + 274) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 33273))
  {
    __clrex();
LABEL_195:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 33273);
    goto LABEL_196;
  }
  if (__stxr(1u, v158))
    goto LABEL_195;
LABEL_196:
  v160 = (_QWORD *)*((_QWORD *)a2 + 4166);
  *((_QWORD *)this + 266) = v160;
  *((_QWORD *)this + 265) = (char *)a2 + 33320;
  *v160 = v156;
  *((_QWORD *)a2 + 4166) = v156;
  v161 = __ldxr(v158);
  if (v161 != 1)
  {
    __clrex();
    goto LABEL_200;
  }
  if (__stlxr(0, v158))
LABEL_200:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 33273, 0, a3, a4, a5, a6, a7, a8);
  v162 = (char *)this + 2208;
  *((_OWORD *)this + 138) = 0u;
  *((_QWORD *)this + 278) = (char *)a2 + 33464;
  v163 = *((_DWORD *)a2 + 8381);
  *((_QWORD *)this + 279) = 0;
  *((_QWORD *)this + 280) = 0;
  *((_QWORD *)this + 281) = 1;
  *((_QWORD *)this + 282) = 0;
  *((_DWORD *)this + 566) = 0;
  *((_DWORD *)this + 567) = v163;
  v164 = (unsigned __int8 *)a2 + 33521;
  *((_DWORD *)this + 572) = 0;
  *((_QWORD *)this + 284) = 0;
  *((_QWORD *)this + 285) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 33521))
  {
    __clrex();
LABEL_203:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 33521);
    goto LABEL_204;
  }
  if (__stxr(1u, v164))
    goto LABEL_203;
LABEL_204:
  v166 = (_QWORD *)*((_QWORD *)a2 + 4197);
  *((_QWORD *)this + 277) = v166;
  *((_QWORD *)this + 276) = (char *)a2 + 33568;
  *v166 = v162;
  *((_QWORD *)a2 + 4197) = v162;
  v167 = __ldxr(v164);
  if (v167 != 1)
  {
    __clrex();
    goto LABEL_208;
  }
  if (__stlxr(0, v164))
LABEL_208:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 33521, 0, a3, a4, a5, a6, a7, a8);
  v168 = (char *)this + 2296;
  *(_OWORD *)((char *)this + 2296) = 0u;
  *((_QWORD *)this + 289) = (char *)a2 + 33712;
  v169 = *((_DWORD *)a2 + 8443);
  *((_QWORD *)this + 290) = 0;
  *((_QWORD *)this + 291) = 0;
  *((_QWORD *)this + 292) = 1;
  *((_QWORD *)this + 293) = 0;
  *((_DWORD *)this + 588) = 0;
  *((_DWORD *)this + 589) = v169;
  v170 = (unsigned __int8 *)a2 + 33769;
  *((_DWORD *)this + 594) = 0;
  *((_QWORD *)this + 295) = 0;
  *((_QWORD *)this + 296) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 33769))
  {
    __clrex();
LABEL_211:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 33769);
    goto LABEL_212;
  }
  if (__stxr(1u, v170))
    goto LABEL_211;
LABEL_212:
  v172 = (_QWORD *)*((_QWORD *)a2 + 4228);
  *((_QWORD *)this + 288) = v172;
  *((_QWORD *)this + 287) = (char *)a2 + 33816;
  *v172 = v168;
  *((_QWORD *)a2 + 4228) = v168;
  v173 = __ldxr(v170);
  if (v173 != 1)
  {
    __clrex();
    goto LABEL_216;
  }
  if (__stlxr(0, v170))
LABEL_216:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 33769, 0, a3, a4, a5, a6, a7, a8);
  v174 = (char *)this + 2384;
  *((_OWORD *)this + 149) = 0u;
  *((_QWORD *)this + 300) = (char *)a2 + 33960;
  v175 = *((_DWORD *)a2 + 8505);
  *((_QWORD *)this + 301) = 0;
  *((_QWORD *)this + 302) = 0;
  *((_QWORD *)this + 303) = 1;
  *((_QWORD *)this + 304) = 0;
  *((_DWORD *)this + 610) = 0;
  *((_DWORD *)this + 611) = v175;
  v176 = (unsigned __int8 *)a2 + 34017;
  *((_DWORD *)this + 616) = 0;
  *((_QWORD *)this + 306) = 0;
  *((_QWORD *)this + 307) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 34017))
  {
    __clrex();
LABEL_219:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 34017);
    goto LABEL_220;
  }
  if (__stxr(1u, v176))
    goto LABEL_219;
LABEL_220:
  v178 = (_QWORD *)*((_QWORD *)a2 + 4259);
  *((_QWORD *)this + 299) = v178;
  *((_QWORD *)this + 298) = (char *)a2 + 34064;
  *v178 = v174;
  *((_QWORD *)a2 + 4259) = v174;
  v179 = __ldxr(v176);
  if (v179 != 1)
  {
    __clrex();
    goto LABEL_224;
  }
  if (__stlxr(0, v176))
LABEL_224:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 34017, 0, a3, a4, a5, a6, a7, a8);
  v180 = (char *)this + 2472;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *((_QWORD *)this + 311) = (char *)a2 + 34208;
  v181 = *((_DWORD *)a2 + 8567);
  *((_QWORD *)this + 312) = 0;
  *((_QWORD *)this + 313) = 0;
  *((_QWORD *)this + 314) = 1;
  *((_QWORD *)this + 315) = 0;
  *((_DWORD *)this + 632) = 0;
  *((_DWORD *)this + 633) = v181;
  v182 = (unsigned __int8 *)a2 + 34265;
  *((_DWORD *)this + 638) = 0;
  *((_QWORD *)this + 317) = 0;
  *((_QWORD *)this + 318) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 34265))
  {
    __clrex();
LABEL_227:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 34265);
    goto LABEL_228;
  }
  if (__stxr(1u, v182))
    goto LABEL_227;
LABEL_228:
  v184 = (_QWORD *)*((_QWORD *)a2 + 4290);
  *((_QWORD *)this + 310) = v184;
  *((_QWORD *)this + 309) = (char *)a2 + 34312;
  *v184 = v180;
  *((_QWORD *)a2 + 4290) = v180;
  v185 = __ldxr(v182);
  if (v185 != 1)
  {
    __clrex();
    goto LABEL_232;
  }
  if (__stlxr(0, v182))
LABEL_232:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 34265, 0, a3, a4, a5, a6, a7, a8);
  v186 = (char *)this + 2560;
  *((_OWORD *)this + 160) = 0u;
  *((_QWORD *)this + 322) = (char *)a2 + 34456;
  v187 = *((_DWORD *)a2 + 8629);
  *((_QWORD *)this + 323) = 0;
  *((_QWORD *)this + 324) = 0;
  *((_QWORD *)this + 325) = 1;
  *((_QWORD *)this + 326) = 0;
  *((_DWORD *)this + 654) = 0;
  *((_DWORD *)this + 655) = v187;
  v188 = (unsigned __int8 *)a2 + 34513;
  *((_DWORD *)this + 660) = 0;
  *((_QWORD *)this + 328) = 0;
  *((_QWORD *)this + 329) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 34513))
  {
    __clrex();
LABEL_235:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 34513);
    goto LABEL_236;
  }
  if (__stxr(1u, v188))
    goto LABEL_235;
LABEL_236:
  v190 = (_QWORD *)*((_QWORD *)a2 + 4321);
  *((_QWORD *)this + 321) = v190;
  *((_QWORD *)this + 320) = (char *)a2 + 34560;
  *v190 = v186;
  *((_QWORD *)a2 + 4321) = v186;
  v191 = __ldxr(v188);
  if (v191 != 1)
  {
    __clrex();
    goto LABEL_240;
  }
  if (__stlxr(0, v188))
LABEL_240:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 34513, 0, a3, a4, a5, a6, a7, a8);
  v192 = (char *)this + 2648;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *((_QWORD *)this + 333) = (char *)a2 + 34704;
  v193 = *((_DWORD *)a2 + 8691);
  *((_QWORD *)this + 334) = 0;
  *((_QWORD *)this + 335) = 0;
  *((_QWORD *)this + 336) = 1;
  *((_QWORD *)this + 337) = 0;
  *((_DWORD *)this + 676) = 0;
  *((_DWORD *)this + 677) = v193;
  v194 = (unsigned __int8 *)a2 + 34761;
  *((_DWORD *)this + 682) = 0;
  *((_QWORD *)this + 339) = 0;
  *((_QWORD *)this + 340) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 34761))
  {
    __clrex();
LABEL_243:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 34761);
    goto LABEL_244;
  }
  if (__stxr(1u, v194))
    goto LABEL_243;
LABEL_244:
  v196 = (_QWORD *)*((_QWORD *)a2 + 4352);
  *((_QWORD *)this + 332) = v196;
  *((_QWORD *)this + 331) = (char *)a2 + 34808;
  *v196 = v192;
  *((_QWORD *)a2 + 4352) = v192;
  v197 = __ldxr(v194);
  if (v197 != 1)
  {
    __clrex();
    goto LABEL_248;
  }
  if (__stlxr(0, v194))
LABEL_248:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 34761, 0, a3, a4, a5, a6, a7, a8);
  v198 = (char *)this + 3520;
  bzero((char *)this + 2736, 0x320uLL);
  *((_QWORD *)this + 442) = (char *)a2 + 35720;
  v205 = *((_DWORD *)a2 + 8945);
  *((_QWORD *)this + 443) = 0;
  *((_QWORD *)this + 444) = 0;
  *((_QWORD *)this + 445) = 1;
  *((_QWORD *)this + 446) = 0;
  *((_DWORD *)this + 894) = 0;
  *((_DWORD *)this + 895) = v205;
  v206 = (unsigned __int8 *)a2 + 35777;
  *((_DWORD *)this + 900) = 0;
  *((_QWORD *)this + 448) = 0;
  *((_QWORD *)this + 449) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 35777))
  {
    __clrex();
LABEL_251:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 35777);
    goto LABEL_252;
  }
  if (__stxr(1u, v206))
    goto LABEL_251;
LABEL_252:
  v208 = (_QWORD *)*((_QWORD *)a2 + 4479);
  *((_QWORD *)this + 441) = v208;
  *((_QWORD *)this + 440) = (char *)a2 + 35824;
  *v208 = v198;
  *((_QWORD *)a2 + 4479) = v198;
  v209 = __ldxr(v206);
  if (v209 != 1)
  {
    __clrex();
    goto LABEL_256;
  }
  if (__stlxr(0, v206))
LABEL_256:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 35777, 0, v199, v200, v201, v202, v203, v204);
  v210 = (char *)this + 3608;
  *(_OWORD *)((char *)this + 3608) = 0u;
  *((_QWORD *)this + 453) = (char *)a2 + 36072;
  v211 = *((_DWORD *)a2 + 9033);
  *((_QWORD *)this + 454) = 0;
  *((_QWORD *)this + 455) = 0;
  *((_QWORD *)this + 456) = 1;
  *((_QWORD *)this + 457) = 0;
  *((_DWORD *)this + 916) = 0;
  *((_DWORD *)this + 917) = v211;
  v212 = (unsigned __int8 *)a2 + 36129;
  *((_DWORD *)this + 922) = 0;
  *((_QWORD *)this + 459) = 0;
  *((_QWORD *)this + 460) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 36129))
  {
    __clrex();
LABEL_259:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 36129);
    goto LABEL_260;
  }
  if (__stxr(1u, v212))
    goto LABEL_259;
LABEL_260:
  v214 = (_QWORD *)*((_QWORD *)a2 + 4523);
  *((_QWORD *)this + 452) = v214;
  *((_QWORD *)this + 451) = (char *)a2 + 36176;
  *v214 = v210;
  *((_QWORD *)a2 + 4523) = v210;
  v215 = __ldxr(v212);
  if (v215 != 1)
  {
    __clrex();
    goto LABEL_264;
  }
  if (__stlxr(0, v212))
LABEL_264:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 36129, 0, v199, v200, v201, v202, v203, v204);
  v216 = (char *)this + 3696;
  *((_OWORD *)this + 231) = 0u;
  *((_QWORD *)this + 464) = (char *)a2 + 36584;
  v217 = *((_DWORD *)a2 + 9161);
  *((_QWORD *)this + 465) = 0;
  *((_QWORD *)this + 466) = 0;
  *((_QWORD *)this + 467) = 1;
  *((_QWORD *)this + 468) = 0;
  *((_DWORD *)this + 938) = 0;
  *((_DWORD *)this + 939) = v217;
  v218 = (unsigned __int8 *)a2 + 36641;
  *((_DWORD *)this + 944) = 0;
  *((_QWORD *)this + 470) = 0;
  *((_QWORD *)this + 471) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 36641))
  {
    __clrex();
LABEL_267:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 36641);
    goto LABEL_268;
  }
  if (__stxr(1u, v218))
    goto LABEL_267;
LABEL_268:
  v220 = (_QWORD *)*((_QWORD *)a2 + 4587);
  *((_QWORD *)this + 463) = v220;
  *((_QWORD *)this + 462) = (char *)a2 + 36688;
  *v220 = v216;
  *((_QWORD *)a2 + 4587) = v216;
  v221 = __ldxr(v218);
  if (v221 != 1)
  {
    __clrex();
    goto LABEL_272;
  }
  if (__stlxr(0, v218))
LABEL_272:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 36641, 0, v199, v200, v201, v202, v203, v204);
  v222 = (char *)this + 3784;
  *(_OWORD *)((char *)this + 3784) = 0u;
  *((_QWORD *)this + 475) = (char *)a2 + 37096;
  v223 = *((_DWORD *)a2 + 9289);
  *((_QWORD *)this + 476) = 0;
  *((_QWORD *)this + 477) = 0;
  *((_QWORD *)this + 478) = 1;
  *((_QWORD *)this + 479) = 0;
  *((_DWORD *)this + 960) = 0;
  *((_DWORD *)this + 961) = v223;
  v224 = (unsigned __int8 *)a2 + 37153;
  *((_DWORD *)this + 966) = 0;
  *((_QWORD *)this + 481) = 0;
  *((_QWORD *)this + 482) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 37153))
  {
    __clrex();
LABEL_275:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 37153);
    goto LABEL_276;
  }
  if (__stxr(1u, v224))
    goto LABEL_275;
LABEL_276:
  v226 = (_QWORD *)*((_QWORD *)a2 + 4651);
  *((_QWORD *)this + 474) = v226;
  *((_QWORD *)this + 473) = (char *)a2 + 37200;
  *v226 = v222;
  *((_QWORD *)a2 + 4651) = v222;
  v227 = __ldxr(v224);
  if (v227 == 1)
  {
    if (!__stlxr(0, v224))
      goto LABEL_281;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 37153, 0, v199, v200, v201, v202, v203, v204);
LABEL_281:
  *((_OWORD *)this + 242) = 0u;
  return this;
}

void JSC::GCClient::Heap::~Heap(JSC::GCClient::Heap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::IsoSubspacePerVM **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::LocalAllocator *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::LocalAllocator *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::LocalAllocator *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::LocalAllocator *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::LocalAllocator *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::LocalAllocator *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::LocalAllocator *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::LocalAllocator *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::LocalAllocator *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::LocalAllocator *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::LocalAllocator *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::LocalAllocator *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  JSC::LocalAllocator *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::LocalAllocator *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::LocalAllocator *v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  JSC::LocalAllocator *v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  JSC::LocalAllocator *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::LocalAllocator *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  JSC::LocalAllocator *v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  JSC::LocalAllocator *v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  JSC::LocalAllocator *v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  JSC::LocalAllocator *v228;
  unint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  JSC::LocalAllocator *v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  JSC::LocalAllocator *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  JSC::LocalAllocator *v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  JSC::LocalAllocator *v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  JSC::LocalAllocator *v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  JSC::LocalAllocator *v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  JSC::LocalAllocator *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  JSC::LocalAllocator *v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  JSC::LocalAllocator *v309;
  unint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  JSC::LocalAllocator *v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  JSC::LocalAllocator *v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  JSC::LocalAllocator *v336;
  unint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  JSC::LocalAllocator *v345;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  JSC::LocalAllocator *v354;
  unint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  JSC::LocalAllocator *v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  JSC::LocalAllocator *v372;
  unint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  JSC::LocalAllocator *v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  JSC::LocalAllocator *v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  JSC::LocalAllocator *v399;
  unint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  JSC::LocalAllocator *v408;
  unint64_t v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  JSC::LocalAllocator *v417;
  unint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  JSC::LocalAllocator *v426;
  unint64_t v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  JSC::LocalAllocator *v435;
  unint64_t v436;
  void *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  JSC::LocalAllocator *v444;
  unint64_t v445;
  void *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  JSC::LocalAllocator *v453;
  unint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  JSC::LocalAllocator *v462;
  unint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  JSC::LocalAllocator *v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  JSC::LocalAllocator *v480;
  unint64_t v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  JSC::LocalAllocator *v489;
  unint64_t v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  JSC::LocalAllocator *v498;
  unint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  JSC::LocalAllocator *v507;
  unint64_t v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  JSC::LocalAllocator *v516;
  unint64_t v517;
  void *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  JSC::LocalAllocator *v525;
  unint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  JSC::LocalAllocator *v534;
  unint64_t v535;
  void *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  JSC::LocalAllocator *v543;
  unint64_t v544;
  void *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  JSC::LocalAllocator *v552;
  unint64_t v553;
  void *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  JSC::LocalAllocator *v561;
  unint64_t v562;
  void *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  JSC::LocalAllocator *v570;
  unint64_t v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  JSC::LocalAllocator *v579;
  unint64_t v580;
  void *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  JSC::LocalAllocator *v588;
  unint64_t v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  JSC::LocalAllocator *v597;
  unint64_t v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  JSC::LocalAllocator *v606;
  unint64_t v607;
  void *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  JSC::LocalAllocator *v615;
  unint64_t v616;
  void *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  JSC::LocalAllocator *v624;
  unint64_t v625;
  void *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  JSC::LocalAllocator *v633;
  unint64_t v634;
  void *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  JSC::LocalAllocator *v642;
  unint64_t v643;
  void *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  JSC::LocalAllocator *v651;
  unint64_t v652;
  void *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  JSC::LocalAllocator *v660;
  unint64_t v661;
  void *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  JSC::LocalAllocator *v669;
  unint64_t v670;
  void *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  JSC::LocalAllocator *v678;
  unint64_t v679;
  void *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  JSC::LocalAllocator *v687;
  unint64_t v688;
  void *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  JSC::LocalAllocator *v696;
  unint64_t v697;
  void *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  JSC::LocalAllocator *v705;
  unint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  JSC::LocalAllocator *v714;
  unint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  JSC::LocalAllocator *v723;
  unint64_t v724;
  void *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  JSC::LocalAllocator *v732;
  unint64_t v733;
  void *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  JSC::LocalAllocator *v741;
  unint64_t v742;
  void *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  JSC::LocalAllocator *v750;
  unint64_t v751;
  void *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  JSC::LocalAllocator *v759;
  unint64_t v760;
  void *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  JSC::LocalAllocator *v768;
  unint64_t v769;
  void *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  JSC::LocalAllocator *v777;
  unint64_t v778;
  void *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  JSC::LocalAllocator *v786;
  unint64_t v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  JSC::LocalAllocator *v795;
  unint64_t v796;
  void *v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  JSC::LocalAllocator *v804;
  unint64_t v805;
  void *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  JSC::LocalAllocator *v813;
  unint64_t v814;
  void *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  JSC::LocalAllocator *v822;
  unint64_t v823;
  void *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  JSC::LocalAllocator *v831;
  unint64_t v832;
  void *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  JSC::LocalAllocator *v840;
  unint64_t v841;
  void *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  JSC::LocalAllocator *v849;
  unint64_t v850;
  void *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  JSC::LocalAllocator *v858;
  unint64_t v859;
  void *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  JSC::LocalAllocator *v867;
  unint64_t v868;
  void *v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  JSC::LocalAllocator *v876;
  unint64_t v877;
  void *v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  JSC::LocalAllocator *v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  JSC::LocalAllocator *v894;
  unint64_t v895;
  void *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  JSC::LocalAllocator *v903;
  unint64_t v904;
  void *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  JSC::LocalAllocator *v912;
  unint64_t v913;
  void *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  JSC::IsoSubspacePerVM *v1132;

  v9 = (JSC::IsoSubspacePerVM **)*((_QWORD *)this + 484);
  v10 = *((unsigned int *)this + 971);
  if ((_DWORD)v10)
  {
    v1131 = 8 * v10;
    do
    {
      v1132 = *v9++;
      JSC::IsoSubspacePerVM::releaseClientIsoSubspace(v1132, (uint64_t)this - 37552, a3, a4, a5, a6, a7, a8);
      v1131 -= 8;
    }
    while (v1131);
    v9 = (JSC::IsoSubspacePerVM **)*((_QWORD *)this + 484);
  }
  if (v9)
  {
    *((_QWORD *)this + 484) = 0;
    *((_DWORD *)this + 970) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 3784), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 3696), v11, v12, v13, v14, v15, v16, v17);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 3608), v18, v19, v20, v21, v22, v23, v24);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 3520), v25, v26, v27, v28, v29, v30, v31);
  v39 = (JSC::LocalAllocator *)*((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v39)
  {
    JSC::LocalAllocator::~LocalAllocator(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  v48 = (JSC::LocalAllocator *)*((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v48)
  {
    JSC::LocalAllocator::~LocalAllocator(v48, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
  v57 = (JSC::LocalAllocator *)*((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v57)
  {
    JSC::LocalAllocator::~LocalAllocator(v57, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
  }
  v66 = (JSC::LocalAllocator *)*((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v66)
  {
    JSC::LocalAllocator::~LocalAllocator(v66, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
  }
  v75 = (JSC::LocalAllocator *)*((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v75)
  {
    JSC::LocalAllocator::~LocalAllocator(v75, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  v84 = (JSC::LocalAllocator *)*((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v84)
  {
    JSC::LocalAllocator::~LocalAllocator(v84, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  v93 = (JSC::LocalAllocator *)*((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v93)
  {
    JSC::LocalAllocator::~LocalAllocator(v93, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
  }
  v102 = (JSC::LocalAllocator *)*((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v102)
  {
    JSC::LocalAllocator::~LocalAllocator(v102, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  v111 = (JSC::LocalAllocator *)*((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v111)
  {
    JSC::LocalAllocator::~LocalAllocator(v111, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
  }
  v120 = (JSC::LocalAllocator *)*((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v120)
  {
    JSC::LocalAllocator::~LocalAllocator(v120, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
  }
  v129 = (JSC::LocalAllocator *)*((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v129)
  {
    JSC::LocalAllocator::~LocalAllocator(v129, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
  }
  v138 = (JSC::LocalAllocator *)*((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v138)
  {
    JSC::LocalAllocator::~LocalAllocator(v138, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
  }
  v147 = (JSC::LocalAllocator *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v147)
  {
    JSC::LocalAllocator::~LocalAllocator(v147, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
  }
  v156 = (JSC::LocalAllocator *)*((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v156)
  {
    JSC::LocalAllocator::~LocalAllocator(v156, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
  }
  v165 = (JSC::LocalAllocator *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v165)
  {
    JSC::LocalAllocator::~LocalAllocator(v165, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
  }
  v174 = (JSC::LocalAllocator *)*((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v174)
  {
    JSC::LocalAllocator::~LocalAllocator(v174, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
  }
  v183 = (JSC::LocalAllocator *)*((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v183)
  {
    JSC::LocalAllocator::~LocalAllocator(v183, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
  }
  v192 = (JSC::LocalAllocator *)*((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v192)
  {
    JSC::LocalAllocator::~LocalAllocator(v192, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
  }
  v201 = (JSC::LocalAllocator *)*((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v201)
  {
    JSC::LocalAllocator::~LocalAllocator(v201, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
  }
  v210 = (JSC::LocalAllocator *)*((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v210)
  {
    JSC::LocalAllocator::~LocalAllocator(v210, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
  }
  v219 = (JSC::LocalAllocator *)*((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v219)
  {
    JSC::LocalAllocator::~LocalAllocator(v219, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
  }
  v228 = (JSC::LocalAllocator *)*((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v228)
  {
    JSC::LocalAllocator::~LocalAllocator(v228, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v229, v230, v231, v232, v233, v234, v235, v236);
  }
  v237 = (JSC::LocalAllocator *)*((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v237)
  {
    JSC::LocalAllocator::~LocalAllocator(v237, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
  }
  v246 = (JSC::LocalAllocator *)*((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v246)
  {
    JSC::LocalAllocator::~LocalAllocator(v246, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
  }
  v255 = (JSC::LocalAllocator *)*((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v255)
  {
    JSC::LocalAllocator::~LocalAllocator(v255, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
  }
  v264 = (JSC::LocalAllocator *)*((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v264)
  {
    JSC::LocalAllocator::~LocalAllocator(v264, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v265, v266, v267, v268, v269, v270, v271, v272);
  }
  v273 = (JSC::LocalAllocator *)*((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v273)
  {
    JSC::LocalAllocator::~LocalAllocator(v273, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
  }
  v282 = (JSC::LocalAllocator *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v282)
  {
    JSC::LocalAllocator::~LocalAllocator(v282, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v283, v284, v285, v286, v287, v288, v289, v290);
  }
  v291 = (JSC::LocalAllocator *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v291)
  {
    JSC::LocalAllocator::~LocalAllocator(v291, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
  }
  v300 = (JSC::LocalAllocator *)*((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v300)
  {
    JSC::LocalAllocator::~LocalAllocator(v300, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
  }
  v309 = (JSC::LocalAllocator *)*((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v309)
  {
    JSC::LocalAllocator::~LocalAllocator(v309, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v310, v311, v312, v313, v314, v315, v316, v317);
  }
  v318 = (JSC::LocalAllocator *)*((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v318)
  {
    JSC::LocalAllocator::~LocalAllocator(v318, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
  }
  v327 = (JSC::LocalAllocator *)*((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v327)
  {
    JSC::LocalAllocator::~LocalAllocator(v327, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
  }
  v336 = (JSC::LocalAllocator *)*((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v336)
  {
    JSC::LocalAllocator::~LocalAllocator(v336, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v337, v338, v339, v340, v341, v342, v343, v344);
  }
  v345 = (JSC::LocalAllocator *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v345)
  {
    JSC::LocalAllocator::~LocalAllocator(v345, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
  }
  v354 = (JSC::LocalAllocator *)*((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v354)
  {
    JSC::LocalAllocator::~LocalAllocator(v354, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v355, v356, v357, v358, v359, v360, v361, v362);
  }
  v363 = (JSC::LocalAllocator *)*((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v363)
  {
    JSC::LocalAllocator::~LocalAllocator(v363, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
  }
  v372 = (JSC::LocalAllocator *)*((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v372)
  {
    JSC::LocalAllocator::~LocalAllocator(v372, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v373, v374, v375, v376, v377, v378, v379, v380);
  }
  v381 = (JSC::LocalAllocator *)*((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v381)
  {
    JSC::LocalAllocator::~LocalAllocator(v381, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
  }
  v390 = (JSC::LocalAllocator *)*((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v390)
  {
    JSC::LocalAllocator::~LocalAllocator(v390, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v391, v392, v393, v394, v395, v396, v397, v398);
  }
  v399 = (JSC::LocalAllocator *)*((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v399)
  {
    JSC::LocalAllocator::~LocalAllocator(v399, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v400, v401, v402, v403, v404, v405, v406, v407);
  }
  v408 = (JSC::LocalAllocator *)*((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v408)
  {
    JSC::LocalAllocator::~LocalAllocator(v408, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v409, v410, v411, v412, v413, v414, v415, v416);
  }
  v417 = (JSC::LocalAllocator *)*((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v417)
  {
    JSC::LocalAllocator::~LocalAllocator(v417, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v418, v419, v420, v421, v422, v423, v424, v425);
  }
  v426 = (JSC::LocalAllocator *)*((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v426)
  {
    JSC::LocalAllocator::~LocalAllocator(v426, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v427, v428, v429, v430, v431, v432, v433, v434);
  }
  v435 = (JSC::LocalAllocator *)*((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v435)
  {
    JSC::LocalAllocator::~LocalAllocator(v435, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v436, v437, v438, v439, v440, v441, v442, v443);
  }
  v444 = (JSC::LocalAllocator *)*((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v444)
  {
    JSC::LocalAllocator::~LocalAllocator(v444, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v445, v446, v447, v448, v449, v450, v451, v452);
  }
  v453 = (JSC::LocalAllocator *)*((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v453)
  {
    JSC::LocalAllocator::~LocalAllocator(v453, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v454, v455, v456, v457, v458, v459, v460, v461);
  }
  v462 = (JSC::LocalAllocator *)*((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v462)
  {
    JSC::LocalAllocator::~LocalAllocator(v462, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v463, v464, v465, v466, v467, v468, v469, v470);
  }
  v471 = (JSC::LocalAllocator *)*((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v471)
  {
    JSC::LocalAllocator::~LocalAllocator(v471, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
  }
  v480 = (JSC::LocalAllocator *)*((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v480)
  {
    JSC::LocalAllocator::~LocalAllocator(v480, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v481, v482, v483, v484, v485, v486, v487, v488);
  }
  v489 = (JSC::LocalAllocator *)*((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v489)
  {
    JSC::LocalAllocator::~LocalAllocator(v489, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v490, v491, v492, v493, v494, v495, v496, v497);
  }
  v498 = (JSC::LocalAllocator *)*((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v498)
  {
    JSC::LocalAllocator::~LocalAllocator(v498, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v499, v500, v501, v502, v503, v504, v505, v506);
  }
  v507 = (JSC::LocalAllocator *)*((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v507)
  {
    JSC::LocalAllocator::~LocalAllocator(v507, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v508, v509, v510, v511, v512, v513, v514, v515);
  }
  v516 = (JSC::LocalAllocator *)*((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v516)
  {
    JSC::LocalAllocator::~LocalAllocator(v516, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v517, v518, v519, v520, v521, v522, v523, v524);
  }
  v525 = (JSC::LocalAllocator *)*((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v525)
  {
    JSC::LocalAllocator::~LocalAllocator(v525, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v526, v527, v528, v529, v530, v531, v532, v533);
  }
  v534 = (JSC::LocalAllocator *)*((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v534)
  {
    JSC::LocalAllocator::~LocalAllocator(v534, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v535, v536, v537, v538, v539, v540, v541, v542);
  }
  v543 = (JSC::LocalAllocator *)*((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v543)
  {
    JSC::LocalAllocator::~LocalAllocator(v543, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v544, v545, v546, v547, v548, v549, v550, v551);
  }
  v552 = (JSC::LocalAllocator *)*((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v552)
  {
    JSC::LocalAllocator::~LocalAllocator(v552, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v553, v554, v555, v556, v557, v558, v559, v560);
  }
  v561 = (JSC::LocalAllocator *)*((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v561)
  {
    JSC::LocalAllocator::~LocalAllocator(v561, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v562, v563, v564, v565, v566, v567, v568, v569);
  }
  v570 = (JSC::LocalAllocator *)*((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v570)
  {
    JSC::LocalAllocator::~LocalAllocator(v570, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v571, v572, v573, v574, v575, v576, v577, v578);
  }
  v579 = (JSC::LocalAllocator *)*((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v579)
  {
    JSC::LocalAllocator::~LocalAllocator(v579, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v580, v581, v582, v583, v584, v585, v586, v587);
  }
  v588 = (JSC::LocalAllocator *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v588)
  {
    JSC::LocalAllocator::~LocalAllocator(v588, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v589, v590, v591, v592, v593, v594, v595, v596);
  }
  v597 = (JSC::LocalAllocator *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v597)
  {
    JSC::LocalAllocator::~LocalAllocator(v597, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v598, v599, v600, v601, v602, v603, v604, v605);
  }
  v606 = (JSC::LocalAllocator *)*((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v606)
  {
    JSC::LocalAllocator::~LocalAllocator(v606, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v607, v608, v609, v610, v611, v612, v613, v614);
  }
  v615 = (JSC::LocalAllocator *)*((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v615)
  {
    JSC::LocalAllocator::~LocalAllocator(v615, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v616, v617, v618, v619, v620, v621, v622, v623);
  }
  v624 = (JSC::LocalAllocator *)*((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v624)
  {
    JSC::LocalAllocator::~LocalAllocator(v624, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v625, v626, v627, v628, v629, v630, v631, v632);
  }
  v633 = (JSC::LocalAllocator *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v633)
  {
    JSC::LocalAllocator::~LocalAllocator(v633, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v634, v635, v636, v637, v638, v639, v640, v641);
  }
  v642 = (JSC::LocalAllocator *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v642)
  {
    JSC::LocalAllocator::~LocalAllocator(v642, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v643, v644, v645, v646, v647, v648, v649, v650);
  }
  v651 = (JSC::LocalAllocator *)*((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v651)
  {
    JSC::LocalAllocator::~LocalAllocator(v651, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v652, v653, v654, v655, v656, v657, v658, v659);
  }
  v660 = (JSC::LocalAllocator *)*((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v660)
  {
    JSC::LocalAllocator::~LocalAllocator(v660, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v661, v662, v663, v664, v665, v666, v667, v668);
  }
  v669 = (JSC::LocalAllocator *)*((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v669)
  {
    JSC::LocalAllocator::~LocalAllocator(v669, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v670, v671, v672, v673, v674, v675, v676, v677);
  }
  v678 = (JSC::LocalAllocator *)*((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v678)
  {
    JSC::LocalAllocator::~LocalAllocator(v678, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v679, v680, v681, v682, v683, v684, v685, v686);
  }
  v687 = (JSC::LocalAllocator *)*((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v687)
  {
    JSC::LocalAllocator::~LocalAllocator(v687, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v688, v689, v690, v691, v692, v693, v694, v695);
  }
  v696 = (JSC::LocalAllocator *)*((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v696)
  {
    JSC::LocalAllocator::~LocalAllocator(v696, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v697, v698, v699, v700, v701, v702, v703, v704);
  }
  v705 = (JSC::LocalAllocator *)*((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v705)
  {
    JSC::LocalAllocator::~LocalAllocator(v705, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v706, v707, v708, v709, v710, v711, v712, v713);
  }
  v714 = (JSC::LocalAllocator *)*((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v714)
  {
    JSC::LocalAllocator::~LocalAllocator(v714, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v715, v716, v717, v718, v719, v720, v721, v722);
  }
  v723 = (JSC::LocalAllocator *)*((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v723)
  {
    JSC::LocalAllocator::~LocalAllocator(v723, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v724, v725, v726, v727, v728, v729, v730, v731);
  }
  v732 = (JSC::LocalAllocator *)*((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v732)
  {
    JSC::LocalAllocator::~LocalAllocator(v732, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v733, v734, v735, v736, v737, v738, v739, v740);
  }
  v741 = (JSC::LocalAllocator *)*((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v741)
  {
    JSC::LocalAllocator::~LocalAllocator(v741, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v742, v743, v744, v745, v746, v747, v748, v749);
  }
  v750 = (JSC::LocalAllocator *)*((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v750)
  {
    JSC::LocalAllocator::~LocalAllocator(v750, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v751, v752, v753, v754, v755, v756, v757, v758);
  }
  v759 = (JSC::LocalAllocator *)*((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v759)
  {
    JSC::LocalAllocator::~LocalAllocator(v759, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v760, v761, v762, v763, v764, v765, v766, v767);
  }
  v768 = (JSC::LocalAllocator *)*((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v768)
  {
    JSC::LocalAllocator::~LocalAllocator(v768, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v769, v770, v771, v772, v773, v774, v775, v776);
  }
  v777 = (JSC::LocalAllocator *)*((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v777)
  {
    JSC::LocalAllocator::~LocalAllocator(v777, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v778, v779, v780, v781, v782, v783, v784, v785);
  }
  v786 = (JSC::LocalAllocator *)*((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v786)
  {
    JSC::LocalAllocator::~LocalAllocator(v786, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v787, v788, v789, v790, v791, v792, v793, v794);
  }
  v795 = (JSC::LocalAllocator *)*((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v795)
  {
    JSC::LocalAllocator::~LocalAllocator(v795, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v796, v797, v798, v799, v800, v801, v802, v803);
  }
  v804 = (JSC::LocalAllocator *)*((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v804)
  {
    JSC::LocalAllocator::~LocalAllocator(v804, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v805, v806, v807, v808, v809, v810, v811, v812);
  }
  v813 = (JSC::LocalAllocator *)*((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v813)
  {
    JSC::LocalAllocator::~LocalAllocator(v813, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v814, v815, v816, v817, v818, v819, v820, v821);
  }
  v822 = (JSC::LocalAllocator *)*((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v822)
  {
    JSC::LocalAllocator::~LocalAllocator(v822, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v823, v824, v825, v826, v827, v828, v829, v830);
  }
  v831 = (JSC::LocalAllocator *)*((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v831)
  {
    JSC::LocalAllocator::~LocalAllocator(v831, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v832, v833, v834, v835, v836, v837, v838, v839);
  }
  v840 = (JSC::LocalAllocator *)*((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v840)
  {
    JSC::LocalAllocator::~LocalAllocator(v840, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v841, v842, v843, v844, v845, v846, v847, v848);
  }
  v849 = (JSC::LocalAllocator *)*((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v849)
  {
    JSC::LocalAllocator::~LocalAllocator(v849, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v850, v851, v852, v853, v854, v855, v856, v857);
  }
  v858 = (JSC::LocalAllocator *)*((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v858)
  {
    JSC::LocalAllocator::~LocalAllocator(v858, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v859, v860, v861, v862, v863, v864, v865, v866);
  }
  v867 = (JSC::LocalAllocator *)*((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v867)
  {
    JSC::LocalAllocator::~LocalAllocator(v867, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v868, v869, v870, v871, v872, v873, v874, v875);
  }
  v876 = (JSC::LocalAllocator *)*((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v876)
  {
    JSC::LocalAllocator::~LocalAllocator(v876, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v877, v878, v879, v880, v881, v882, v883, v884);
  }
  v885 = (JSC::LocalAllocator *)*((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v885)
  {
    JSC::LocalAllocator::~LocalAllocator(v885, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v886, v887, v888, v889, v890, v891, v892, v893);
  }
  v894 = (JSC::LocalAllocator *)*((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v894)
  {
    JSC::LocalAllocator::~LocalAllocator(v894, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v895, v896, v897, v898, v899, v900, v901, v902);
  }
  v903 = (JSC::LocalAllocator *)*((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v903)
  {
    JSC::LocalAllocator::~LocalAllocator(v903, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v904, v905, v906, v907, v908, v909, v910, v911);
  }
  v912 = (JSC::LocalAllocator *)*((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v912)
  {
    JSC::LocalAllocator::~LocalAllocator(v912, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v913, v914, v915, v916, v917, v918, v919, v920);
  }
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2648), v32, v33, v34, v35, v36, v37, v38);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2560), v921, v922, v923, v924, v925, v926, v927);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2472), v928, v929, v930, v931, v932, v933, v934);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2384), v935, v936, v937, v938, v939, v940, v941);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2296), v942, v943, v944, v945, v946, v947, v948);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2208), v949, v950, v951, v952, v953, v954, v955);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2120), v956, v957, v958, v959, v960, v961, v962);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 2032), v963, v964, v965, v966, v967, v968, v969);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1944), v970, v971, v972, v973, v974, v975, v976);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1856), v977, v978, v979, v980, v981, v982, v983);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1768), v984, v985, v986, v987, v988, v989, v990);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1680), v991, v992, v993, v994, v995, v996, v997);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1592), v998, v999, v1000, v1001, v1002, v1003, v1004);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1504), v1005, v1006, v1007, v1008, v1009, v1010, v1011);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1416), v1012, v1013, v1014, v1015, v1016, v1017, v1018);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1328), v1019, v1020, v1021, v1022, v1023, v1024, v1025);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1240), v1026, v1027, v1028, v1029, v1030, v1031, v1032);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1152), v1033, v1034, v1035, v1036, v1037, v1038, v1039);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 1064), v1040, v1041, v1042, v1043, v1044, v1045, v1046);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 976), v1047, v1048, v1049, v1050, v1051, v1052, v1053);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 888), v1054, v1055, v1056, v1057, v1058, v1059, v1060);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 800), v1061, v1062, v1063, v1064, v1065, v1066, v1067);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 712), v1068, v1069, v1070, v1071, v1072, v1073, v1074);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 624), v1075, v1076, v1077, v1078, v1079, v1080, v1081);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 536), v1082, v1083, v1084, v1085, v1086, v1087, v1088);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 448), v1089, v1090, v1091, v1092, v1093, v1094, v1095);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 360), v1096, v1097, v1098, v1099, v1100, v1101, v1102);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 272), v1103, v1104, v1105, v1106, v1107, v1108, v1109);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 184), v1110, v1111, v1112, v1113, v1114, v1115, v1116);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 96), v1117, v1118, v1119, v1120, v1121, v1122, v1123);
  JSC::LocalAllocator::~LocalAllocator((JSC::GCClient::Heap *)((char *)this + 8), v1124, v1125, v1126, v1127, v1128, v1129, v1130);
}

JSC::LocalAllocator **std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](JSC::LocalAllocator **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::LocalAllocator *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::LocalAllocator::~LocalAllocator(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

uint64_t JSC::GCClient::Heap::apiWrapperObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4358);
  if (!v4)
    v4 = JSC::Heap::apiWrapperObjectSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[342];
  this[342] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[342];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::LocalAllocator **std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](JSC::LocalAllocator **a1, JSC::LocalAllocator **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::LocalAllocator *v9;
  JSC::LocalAllocator *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    JSC::LocalAllocator::~LocalAllocator(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

uint64_t JSC::GCClient::Heap::objCCallbackFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4359);
  if (!v4)
    v4 = JSC::Heap::objCCallbackFunctionSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[343];
  this[343] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[343];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::apiGlobalObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4360);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::apiGlobalObjectSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 344, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[344];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::apiValueWrapperSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4361);
  if (!v4)
    v4 = JSC::Heap::apiValueWrapperSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[345];
  this[345] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[345];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::arrayBufferSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4362);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::arrayBufferSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 346, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[346];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::arrayIteratorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4363);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::arrayIteratorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 347, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[347];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::asyncGeneratorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4364);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::asyncGeneratorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 348, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[348];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::bigInt64ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4365);
  if (!v4)
    v4 = JSC::Heap::bigInt64ArraySpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[349];
  this[349] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[349];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::bigIntObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4366);
  if (!v4)
    v4 = JSC::Heap::bigIntObjectSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[350];
  this[350] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[350];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::bigUint64ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4367);
  if (!v4)
    v4 = JSC::Heap::bigUint64ArraySpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[351];
  this[351] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[351];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::BOOLeanObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4368);
  if (!v4)
    v4 = JSC::Heap::BOOLeanObjectSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[352];
  this[352] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[352];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::boundFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4369);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::boundFunctionSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 353, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[353];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::callbackConstructorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4370);
  if (!v4)
    v4 = JSC::Heap::callbackConstructorSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[354];
  this[354] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[354];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::callbackGlobalObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4371);
  if (!v4)
    v4 = JSC::Heap::callbackGlobalObjectSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[355];
  this[355] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[355];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::callbackFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4372);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::callbackFunctionSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 356, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[356];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::callbackObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4373);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::callbackObjectSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 357, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[357];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::customGetterFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4374);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::customGetterFunctionSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 358, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[358];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::customSetterFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4375);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::customSetterFunctionSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 359, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[359];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::dataViewSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4376);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::dataViewSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 360, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[360];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::debuggerScopeSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4377);
  if (!v4)
    v4 = JSC::Heap::debuggerScopeSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[361];
  this[361] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[361];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::errorInstanceSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4378);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::errorInstanceSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 362, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[362];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::finalizationRegistrySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4379);
  if (!v4)
    v4 = JSC::Heap::finalizationRegistrySpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[363];
  this[363] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[363];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::float32ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4380);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::float32ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 364, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[364];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::float64ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4381);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::float64ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 365, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[365];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::functionRareDataSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4382);
  if (!v4)
    v4 = JSC::Heap::functionRareDataSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[366];
  this[366] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[366];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::generatorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4383);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::generatorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 367, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[367];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::globalObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4384);
  if (!v4)
    v4 = JSC::Heap::globalObjectSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[368];
  this[368] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[368];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::injectedScriptHostSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4385);
  if (!v4)
    v4 = JSC::Heap::injectedScriptHostSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[369];
  this[369] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[369];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::int8ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4386);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::int8ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 370, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[370];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::int16ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4387);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::int16ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 371, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[371];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::int32ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4388);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::int32ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 372, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[372];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::intlCollatorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4389);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::intlCollatorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 373, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[373];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::intlDateTimeFormatSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4390);
  if (!v4)
    v4 = JSC::Heap::intlDateTimeFormatSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[374];
  this[374] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[374];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlDisplayNamesSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4391);
  if (!v4)
    v4 = JSC::Heap::intlDisplayNamesSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[375];
  this[375] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[375];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlDurationFormatSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4392);
  if (!v4)
    v4 = JSC::Heap::intlDurationFormatSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[376];
  this[376] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[376];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlListFormatSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4393);
  if (!v4)
    v4 = JSC::Heap::intlListFormatSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[377];
  this[377] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[377];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlLocaleSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4394);
  if (!v4)
    v4 = JSC::Heap::intlLocaleSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[378];
  this[378] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[378];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::intlNumberFormatSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4395);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::intlNumberFormatSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 379, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[379];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::intlPluralRulesSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4396);
  if (!v4)
    v4 = JSC::Heap::intlPluralRulesSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[380];
  this[380] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[380];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlRelativeTimeFormatSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4397);
  if (!v4)
    v4 = JSC::Heap::intlRelativeTimeFormatSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[381];
  this[381] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[381];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlSegmentIteratorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4398);
  if (!v4)
    v4 = JSC::Heap::intlSegmentIteratorSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[382];
  this[382] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[382];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlSegmenterSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4399);
  if (!v4)
    v4 = JSC::Heap::intlSegmenterSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[383];
  this[383] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[383];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::intlSegmentsSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4400);
  if (!v4)
    v4 = JSC::Heap::intlSegmentsSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[384];
  this[384] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[384];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::javaScriptCallFrameSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4401);
  if (!v4)
    v4 = JSC::Heap::javaScriptCallFrameSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[385];
  this[385] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[385];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::jsModuleRecordSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4402);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::jsModuleRecordSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 386, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[386];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::syntheticModuleRecordSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4403);
  if (!v4)
    v4 = JSC::Heap::syntheticModuleRecordSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[387];
  this[387] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[387];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::mapIteratorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4404);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::mapIteratorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 388, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[388];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::mapSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4405);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::mapSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 389, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[389];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::moduleNamespaceObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4406);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::moduleNamespaceObjectSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 390, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[390];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::nativeStdFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4407);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::nativeStdFunctionSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 391, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[391];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::proxyObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4408);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::proxyObjectSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 392, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[392];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::proxyRevokeSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4409);
  if (!v4)
    v4 = JSC::Heap::proxyRevokeSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[393];
  this[393] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[393];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::remoteFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4410);
  if (!v4)
    v4 = JSC::Heap::remoteFunctionSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[394];
  this[394] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[394];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::scopedArgumentsTableSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4411);
  if (!v4)
    v4 = JSC::Heap::scopedArgumentsTableSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[395];
  this[395] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[395];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::scriptFetchParametersSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *ParametersSpaceSlow;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  ParametersSpaceSlow = (JSC::IsoSubspace *)*((_QWORD *)*this + 4412);
  if (!ParametersSpaceSlow)
    ParametersSpaceSlow = (JSC::IsoSubspace *)JSC::Heap::scriptFetchParametersSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, ParametersSpaceSlow, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 396, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[396];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::scriptFetcherSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4413);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::scriptFetcherSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 397, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[397];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::setIteratorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4414);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::setIteratorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 398, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[398];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::setSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4415);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::setSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 399, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[399];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::shadowRealmSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4416);
  if (!v4)
    v4 = JSC::Heap::shadowRealmSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[400];
  this[400] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[400];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::strictEvalActivationSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4417);
  if (!v4)
    v4 = JSC::Heap::strictEvalActivationSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[401];
  this[401] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[401];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::stringIteratorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4418);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::stringIteratorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 402, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[402];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::sourceCodeSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4419);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::sourceCodeSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 403, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[403];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::symbolSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4420);
  if (!v4)
    v4 = JSC::Heap::symbolSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[404];
  this[404] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[404];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::symbolObjectSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4421);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::symbolObjectSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 405, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[405];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::templateObjectDescriptorSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4422);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::templateObjectDescriptorSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 406, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[406];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::temporalCalendarSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4423);
  if (!v4)
    v4 = JSC::Heap::temporalCalendarSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[407];
  this[407] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[407];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::temporalDurationSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4424);
  if (!v4)
    v4 = JSC::Heap::temporalDurationSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[408];
  this[408] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[408];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::temporalInstantSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4425);
  if (!v4)
    v4 = JSC::Heap::temporalInstantSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[409];
  this[409] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[409];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::temporalPlainDateSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4426);
  if (!v4)
    v4 = JSC::Heap::temporalPlainDateSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[410];
  this[410] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[410];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::temporalPlainDateTimeSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4427);
  if (!v4)
    v4 = JSC::Heap::temporalPlainDateTimeSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[411];
  this[411] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[411];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::temporalPlainTimeSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4428);
  if (!v4)
    v4 = JSC::Heap::temporalPlainTimeSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[412];
  this[412] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[412];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::temporalTimeZoneSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4429);
  if (!v4)
    v4 = JSC::Heap::temporalTimeZoneSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[413];
  this[413] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[413];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::uint8ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4430);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::uint8ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 414, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[414];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::uint8ClampedArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4431);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::uint8ClampedArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 415, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[415];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::uint16ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4432);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::uint16ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 416, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[416];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::uint32ArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4433);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::uint32ArraySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 417, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[417];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::unlinkedEvalCodeBlockSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4434);
  if (!v4)
    v4 = JSC::Heap::unlinkedEvalCodeBlockSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[418];
  this[418] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[418];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::unlinkedFunctionCodeBlockSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4435);
  if (!v4)
    v4 = JSC::Heap::unlinkedFunctionCodeBlockSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[419];
  this[419] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[419];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::unlinkedModuleProgramCodeBlockSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4436);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::unlinkedModuleProgramCodeBlockSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 420, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[420];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::unlinkedProgramCodeBlockSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4437);
  if (!v4)
    v4 = JSC::Heap::unlinkedProgramCodeBlockSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[421];
  this[421] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[421];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::weakObjectRefSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4438);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::weakObjectRefSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 422, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[422];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::weakMapSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4439);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::weakMapSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 423, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[423];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::weakSetSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4440);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::weakSetSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 424, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[424];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::withScopeSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4441);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::withScopeSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 425, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[425];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::webAssemblyArraySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4442);
  if (!v4)
    v4 = JSC::Heap::webAssemblyArraySpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[426];
  this[426] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[426];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::webAssemblyExceptionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4443);
  if (!v4)
    v4 = JSC::Heap::webAssemblyExceptionSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[427];
  this[427] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[427];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::webAssemblyFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4444);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::webAssemblyFunctionSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 428, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[428];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::webAssemblyGlobalSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4445);
  if (!v4)
    v4 = JSC::Heap::webAssemblyGlobalSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[429];
  this[429] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[429];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::webAssemblyInstanceSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4446);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::webAssemblyInstanceSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 430, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[430];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::webAssemblyMemorySpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4447);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::webAssemblyMemorySpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 431, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[431];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::webAssemblyStructSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4448);
  if (!v4)
    v4 = JSC::Heap::webAssemblyStructSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[432];
  this[432] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[432];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::webAssemblyModuleSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4449);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::webAssemblyModuleSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 433, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[433];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::webAssemblyModuleRecordSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4450);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::webAssemblyModuleRecordSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 434, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[434];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

JSC::Heap *JSC::GCClient::Heap::webAssemblyTableSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4451);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::webAssemblyTableSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 435, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[435];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

uint64_t JSC::GCClient::Heap::webAssemblyTagSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4452);
  if (!v4)
    v4 = JSC::Heap::webAssemblyTagSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[436];
  this[436] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[436];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::webAssemblyWrapperFunctionSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
LABEL_5:
  v4 = *((_QWORD *)*this + 4453);
  if (!v4)
    v4 = JSC::Heap::webAssemblyWrapperFunctionSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
LABEL_11:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v14))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[437];
  this[437] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[437];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::GCClient::Heap::evalExecutableSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  JSC::LocalAllocator *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)*this + 4496);
  if (!v4)
    v4 = JSC::Heap::evalExecutableSpaceSlow(*this);
  v12 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = *(_DWORD *)(v4 + 148);
  *(_QWORD *)(v12 + 16) = v4 + 88;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 60) = v13;
  v14 = (unsigned __int8 *)(v4 + 145);
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)(v4 + 145)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 145);
    goto LABEL_9;
  }
  if (__stxr(1u, v14))
    goto LABEL_8;
LABEL_9:
  v16 = *(uint64_t **)(v4 + 200);
  *(_QWORD *)v12 = v4 + 192;
  *(_QWORD *)(v12 + 8) = v16;
  *v16 = v12;
  *(_QWORD *)(v4 + 200) = v12;
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v14))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 145), 0, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  v18 = this[438];
  this[438] = (JSC::Heap *)v12;
  if (v18)
  {
    JSC::LocalAllocator::~LocalAllocator(v18, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v12 = (uint64_t)this[438];
  }
  v27 = __ldxr(v2);
  if (v27 == 1)
  {
    if (!__stlxr(0, v2))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

JSC::Heap *JSC::GCClient::Heap::moduleProgramExecutableSpaceSlow(JSC::Heap **this)
{
  unsigned __int8 *v2;
  JSC::IsoSubspace *v4;
  JSC::GCClient::IsoSubspace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  JSC::LocalAllocator *v34;

  v2 = (unsigned __int8 *)*this + 8;
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = (JSC::IsoSubspace *)*((_QWORD *)*this + 4497);
  if (!v4)
    v4 = (JSC::IsoSubspace *)JSC::Heap::moduleProgramExecutableSpaceSlow(*this);
  v5 = (JSC::GCClient::IsoSubspace *)WTF::fastMalloc((WTF *)0x58);
  v34 = JSC::GCClient::IsoSubspace::IsoSubspace(v5, v4, v6, v7, v8, v9, v10, v11);
  __dmb(0xAu);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::operator=[abi:sn180100](this + 439, &v34, v12, v13, v14, v15, v16, v17);
  v18 = this[439];
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v34, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v2);
  if (v32 == 1)
  {
    if (!__stlxr(0, v2))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v26, v27, v28, v29, v30, v31);
  return v18;
}

void JSC::Heap::CFinalizerOwner::~CFinalizerOwner(JSC::Heap::CFinalizerOwner *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::Heap::LambdaFinalizerOwner::~LambdaFinalizerOwner(JSC::Heap::LambdaFinalizerOwner *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::HeapVerifier::GCCycle::~GCCycle(JSC::HeapVerifier::GCCycle *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v9 = *((_QWORD *)this + 13);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    v11 = 0;
    while (v11 >> 6 < *((unsigned int *)this + 23))
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * (v11 >> 6)) + 40 * (v11 & 0x3F);
      v13 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 32) = 0;
      if (v13)
      {
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        v10 = *((_QWORD *)this + 9);
      }
      if (++v11 >= v10)
        goto LABEL_9;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1985C5640);
  }
LABEL_9:
  if (*((_DWORD *)this + 23))
  {
    v14 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 10) + 8 * v14++), a2, a3, a4, a5, a6, a7, a8);
    while (v14 < *((unsigned int *)this + 23));
  }
  v15 = *((_QWORD *)this + 10);
  if (v15)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 7);
  if (v16)
    WTF::fastFree(v16 - 16, a2, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 3);
  if (v17)
  {
    v18 = 0;
    while (v18 >> 6 < *((unsigned int *)this + 11))
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * (v18 >> 6)) + 40 * (v18 & 0x3F);
      v20 = *(_QWORD *)(v19 + 32);
      *(_QWORD *)(v19 + 32) = 0;
      if (v20)
      {
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        v17 = *((_QWORD *)this + 3);
      }
      if (++v18 >= v17)
        goto LABEL_22;
    }
    goto LABEL_28;
  }
LABEL_22:
  if (*((_DWORD *)this + 11))
  {
    v21 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v21++), a2, a3, a4, a5, a6, a7, a8);
    while (v21 < *((unsigned int *)this + 11));
  }
  v22 = *((_QWORD *)this + 4);
  if (v22)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Heap::HeapThread::~HeapThread(JSC::Heap::HeapThread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

const char *JSC::Heap::HeapThread::name(JSC::Heap::HeapThread *this)
{
  return "JSC Heap Collector Thread";
}

uint64_t JSC::Heap::HeapThread::poll(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t result;
  unsigned int *v15;
  unsigned int v16;

  v8 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v8 + 1004))
  {
    v15 = (unsigned int *)(v8 + 904);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 & 0xFFFFFFEF, v15));
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v15, a2, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 936);
    v10 = *(_QWORD *)(v8 + 944);
    v11 = *(_QWORD *)(v8 + 984);
    v12 = *(_QWORD *)(v8 + 992);
    if ((v9 == v10) != (v11 == v12) || v11 > v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1985C572CLL);
    }
    if (v9 == v10 || (v13 = atomic_load((unsigned int *)(v8 + 904)), v8 = *(_QWORD *)(a1 + 48), (v13 & 1) != 0))
    {
      *(_BYTE *)(v8 + 1003) = 0;
      return 2;
    }
    else
    {
      result = 0;
      *(_BYTE *)(v8 + 1003) = 1;
    }
  }
  return result;
}

uint64_t JSC::Heap::HeapThread::work(JSC::Heap::HeapThread *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;

  v8 = *((_QWORD *)this + 6);
  while (1)
  {
    result = JSC::Heap::runCurrentPhase(v8, (JSC::VM *)1, 0, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
      break;
    if ((_DWORD)result == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1985C5798);
    }
  }
  return result;
}

uint64_t JSC::Heap::HeapThread::threadDidStart(JSC::Heap::HeapThread *this)
{
  uint64_t result;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = WTF::Thread::initializeCurrentTLS(0);
  *(_BYTE *)(result + 5) = *(_BYTE *)(result + 5) & 0x3F | 0x40;
  return result;
}

uint64_t JSC::Heap::HeapThread::threadIsStopping(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 48) + 1003) = 0;
  return result;
}

void WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  if (a2 != a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v26 = (unint64_t)*a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v15 = *((unsigned int *)a2 + 3);
        if (v12 < v15)
        {
          if (v15 >> 30)
          {
            __break(0xC471u);
            return;
          }
          v16 = (char *)*a1;
          v17 = *((unsigned int *)a1 + 3);
          v18 = (char *)WTF::fastMalloc((WTF *)(4 * v15));
          *((_DWORD *)a1 + 2) = v15;
          *a1 = v18;
          memcpy(v18, v16, 4 * v17);
          if (v16)
          {
            if (*a1 == v16)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree((unint64_t)v16, v19, v20, v21, v22, v23, v24, v25);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v13 = (char *)*a1;
    if (v11)
    {
      memmove(v13, *a2, 4 * v11);
      v14 = *((unsigned int *)a1 + 3);
      v13 = (char *)*a1;
    }
    else
    {
      v14 = 0;
    }
    memcpy(&v13[4 * v14], (char *)*a2 + 4 * v14, (_BYTE *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 4 * v14));
    *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  }
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[27],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x2B);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 26;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSAPIGlobalObject");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  WTF *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;

  v10 = WTF::fastMalloc((WTF *)0xF8);
  v11 = strlen(a2);
  v12 = v11 + 16;
  if (v11 >= 0xFFFFFFFFFFFFFFF0 || (v13 = v11, v14 = (WTF *)(v11 + 17), v12 == -1))
  {
    __break(0xC471u);
    JUMPOUT(0x1985C5B28);
  }
  v15 = WTF::fastMalloc(v14);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  v26 = (_DWORD *)v15;
  memcpy((void *)(v15 + 16), a2, v13);
  *(_BYTE *)(v15 + 16 + v13) = 0;
  v16 = *a5;
  v25 = 0;
  JSC::IsoSubspace::IsoSubspace(v10, &v26, a3, a4, v16, 8, &v25, v17);
  *a1 = v10;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (*(_DWORD *)v15 == 1)
    WTF::fastFree(v15, v18, v19, v20, v21, v22, v23, v24);
  else
    --*(_DWORD *)v15;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[31],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x2F);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 30;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSWebAssemblyInstance");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[28],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 27;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSCallbackFunction");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[44],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x3C);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 43;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSCallbackObject<JSNonFinalObject>");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[20],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x24);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 19;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSDataView");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[23],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 22;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace ErrorInstance");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[24],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 23;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSModuleRecord");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[22],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 21;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace IntlCollator");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[28],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x2C);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 27;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSWebAssemblyTable");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[26],JSC::Heap &,JSC::IsoHeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x2A);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 25;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace IntlNumberFormat");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[33],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x31);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 32;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSScriptFetchParameters");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[36],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x34);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 35;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSTemplateObjectDescriptor");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[29],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x2D);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 28;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace JSUint8ClampedArray");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

void std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[40],JSC::Heap &,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = WTF::fastMalloc((WTF *)0xF8);
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 39;
  v18 = 0;
  v19 = (_DWORD *)v9;
  strcpy((char *)(v9 + 16), "IsoSpace UnlinkedModuleProgramCodeBlock");
  JSC::IsoSubspace::IsoSubspace(v8, &v19, a2, a3, *a4, 8, &v18, v10);
  *a1 = v8;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_DWORD *)v9 == 1)
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v9;
}

uint64_t JSC::Heap::ScriptExecutableSpaceAndSets::ScriptExecutableSpaceAndSets<char const(&)[33],JSC::Heap&,JSC::HeapCellType &,unsigned long,unsigned char const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  WTF *v20;

  WTF::CString::CString((WTF::CString *)&v20, "IsoSpace ModuleProgramExecutable");
  v8 = *a4;
  v19 = 0;
  JSC::IsoSubspace::IsoSubspace(a1, (_DWORD **)&v20, a2, a3, v8, 8, &v19, v9);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v17;
  }
  JSC::IsoCellSet::IsoCellSet(a1 + 248, a1);
  JSC::IsoCellSet::IsoCellSet(a1 + 336, a1);
  JSC::IsoCellSet::IsoCellSet(a1 + 424, a1);
  return a1;
}

void JSC::DateInstance::destroy(JSC::DateInstance *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
}

void JSC::ErrorInstance::~ErrorInstance(JSC::ErrorInstance *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::Wasm::NameSection *v35;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 12);
    if (v12)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)v11 + 40 * v12;
      do
      {
        v15 = *(unsigned int **)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            v35 = (JSC::Wasm::NameSection *)v15;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v35, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v13 += 40;
      }
      while (v13 != v14);
    }
    v18 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)v11 = 0;
      *(_DWORD *)(v11 + 8) = 0;
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::JSNativeStdFunction::destroy(JSC::JSNativeStdFunction *this, JSC::JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void JSC::IntlCollator::~IntlCollator(JSC::IntlCollator *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    ucol_close();
}

uint64_t JSC::IntlDisplayNames::destroy(JSC::IntlDisplayNames *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return uldn_close();
  return result;
}

void JSC::IntlLocale::~IntlLocale(JSC::IntlLocale *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  if (*((_BYTE *)this + 152))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 136))
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 120))
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 104))
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 88))
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v21;
  }
}

uint64_t JSC::IntlRelativeTimeFormat::destroy(JSC::IntlRelativeTimeFormat *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    unum_close();
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return ureldatefmt_close();
  return result;
}

uint64_t JSC::IntlSegmentIterator::destroy(JSC::IntlSegmentIterator *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 8);
      if (v13)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return ubrk_close();
  return result;
}

uint64_t JSC::IntlSegmenter::destroy(JSC::IntlSegmenter *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t result;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return ubrk_close();
  return result;
}

uint64_t JSC::IntlSegments::destroy(JSC::IntlSegments *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 8);
      if (v13)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return ubrk_close();
  return result;
}

void JSC::IsoInlinedHeapCellType<JSC::JSString>::~IsoInlinedHeapCellType()
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::IsoInlinedHeapCellType<JSC::JSString>::finishSweep(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  BOOL v24;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  signed int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t StatusReg;
  char v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  signed int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _BOOL4 v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  void *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  size_t v105;
  unsigned __int8 *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int16 *v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  unsigned __int16 *v175;
  void *v176;
  WTF::StringImpl *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  unint64_t v201;
  int v202;
  int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  unint64_t v216;
  WTF::StringImpl *v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unsigned __int16 *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned __int16 *v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  unsigned __int16 *v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  unsigned __int16 *v286;
  unsigned int v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  _BOOL4 v298;
  int v299;
  char v300;
  size_t __len;
  unint64_t v302;
  int v303;
  uint64_t v304;
  char v305;
  char v306;
  uint64_t v307;
  unsigned int v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v314;
  uint64_t v315;
  char v316;
  char *v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t *v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t *v325;
  char **v326;
  char *v327;
  char *v328;
  uint64_t *v329;
  unsigned int *v330;
  unint64_t *v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD v345[256];
  unint64_t v346;

  v9 = a3 != 0;
  v10 = *((unsigned __int8 *)a2 + 8);
  v11 = *((_QWORD *)a2 + 10);
  v12 = *((_QWORD *)a2 + 11);
  if (*(_BYTE *)(v11 + 445))
    v13 = 2;
  else
    v13 = 1;
  if ((_DWORD)v10 == 1)
    v14 = v13;
  else
    v14 = 0;
  v15 = *((_QWORD *)a2 + 3);
  LODWORD(v16) = ~*(_DWORD *)(*(_QWORD *)(v15 + 32) + 40 * (a2[3] >> 5) + 4) >> a2[3];
  v17 = *(_QWORD *)(v12 + 8);
  v18 = *(unsigned int *)(v17 + 436);
  v19 = *(_DWORD *)(v11 + 432);
  v21 = *(_DWORD *)(v12 + 32);
  v20 = *(unsigned int *)(v12 + 36);
  v22 = v21 == v19;
  v315 = *((_QWORD *)a2 + 11);
  if (*(_BYTE *)(v11 + 445))
  {
    v62 = *(unsigned __int8 *)(v17 + 347);
    v63 = v21 + 1;
    if (v21 == -1)
      v63 = 2;
    v64 = v63 == v19;
    if (v21)
      v65 = v64;
    else
      v65 = 1;
    if (v62 == 1)
      v66 = v65;
    else
      v66 = 0;
    if (v21 == v19)
      v22 = 1;
    else
      v22 = v66;
    v23 = byte_1ECF4C400 == 0;
    goto LABEL_50;
  }
  v23 = byte_1ECF4C400 == 0;
  if (byte_1ECF4C400)
    v24 = 1;
  else
    v24 = (_DWORD)v20 == (_DWORD)v18;
  if (v24 || (_DWORD)v10 != 1)
  {
LABEL_50:
    if (a3 || (_DWORD)v10 == 1)
    {
      v67 = *a2;
      __len = 16 * *a2;
      v68 = *(_QWORD *)(v11 + 168);
      v69 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
      v70 = (v68 >> 26) ^ (v69 >> 17) ^ v68 ^ v69;
      *(_QWORD *)(v11 + 160) = v68;
      *(_QWORD *)(v11 + 168) = v70;
      v71 = v70 + v68;
      v73 = (_DWORD)v20 == (_DWORD)v18 || (v16 & 1) != 0 || BYTE1(qword_1ECF4C414) == 0;
      v308 = v10;
      v300 = v23;
      if (!v73)
      {
        if (v22
          && (*(_QWORD *)(v12 + 40)
           || *(_QWORD *)(v12 + 48)
           || *(_QWORD *)(v12 + 56)
           || *(_QWORD *)(v12 + 64)
           || *(_QWORD *)(v12 + 72)
           || *(_QWORD *)(v12 + 80)
           || *(_QWORD *)(v12 + 88)
           || *(_QWORD *)(v12 + 96)
           || *(_QWORD *)(v12 + 104)
           || *(_QWORD *)(v12 + 112)
           || *(_QWORD *)(v12 + 120)
           || *(_QWORD *)(v12 + 128)
           || *(_QWORD *)(v12 + 136)
           || *(_QWORD *)(v12 + 144)
           || *(_QWORD *)(v12 + 152)
           || *(_QWORD *)(v12 + 160)))
        {
          v207 = WTF::dataFile((WTF *)v9);
          v345[0] = v12;
          v345[1] = v12;
          v345[2] = a2;
          v208 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v207 + 32))(v207);
          JSC::MarkedBlock::Handle::specializedSweep<false,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)0,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)0,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(WTF::PrintStream &)#1}::operator()((uint64_t)v345, v208);
        }
        v117 = a2[1];
        v118 = (_QWORD *)(v12 + 16 * v117);
        v119 = 0x4000 - 16 * v117;
        v120 = a3;
        if (v119 >= 0x3ED1)
        {
          __break(0xC471u);
          JUMPOUT(0x1985C83B0);
        }
        v121 = (unsigned __int8 *)(v15 + 56);
        if (__ldaxr((unsigned __int8 *)(v15 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v121))
        {
LABEL_140:
          v123 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v124 = v123 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v124 + 24) &= ~(1 << a2[3]);
          v125 = v123 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v125 + 16) &= ~(1 << a2[3]);
          v126 = v123 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v126 + 4) &= ~(1 << a2[3]);
          if (v120)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v127 = v123 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v127 + 4) |= 1 << a2[3];
          }
          v128 = __ldxr(v121);
          if (v128 == 1)
          {
            if (!__stlxr(0, v121))
              goto LABEL_147;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v121, 0, v20, a4, a5, a6, a7, a8);
          v120 = a3;
LABEL_147:
          v129 = v308;
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v130 = (unsigned int *)(v315 + 24);
            while (1)
            {
              v131 = *v130;
              if ((*v130 & 3) != 1)
                break;
              v132 = __ldxr(v130);
              if (v132 == v131)
              {
                if (!__stxr(v131 & 0xFFFFFFFE, v130))
                  goto LABEL_281;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v130, 0, v20, a4, a5, a6, a7, a8);
            v129 = v308;
            v120 = a3;
          }
LABEL_281:
          if (v129 == 1 && v117 <= 0x3FF)
          {
            v216 = v12 + 16 * v117;
            do
            {
              if (*(_DWORD *)v216)
              {
                v217 = *(WTF::StringImpl **)(v216 + 8);
                *(_QWORD *)(v216 + 8) = 0;
                if (v217)
                {
                  if (*(_DWORD *)v217 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v217, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
                    WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                    v120 = a3;
                  }
                  else
                  {
                    *(_DWORD *)v217 -= 2;
                  }
                }
                *(_DWORD *)v216 = 0;
                *(_DWORD *)(v216 + 8) = 1;
              }
              v216 += __len;
            }
            while (v216 < v12 + 0x4000);
          }
          if (v120)
          {
            if ((v300 & 1) == 0 && (_DWORD)v117 != 1024)
            {
              memset_pattern16(v118, &unk_1991567C0, 0x4000 - 16 * v117);
              v120 = a3;
            }
            v118[1] = ((v119 << 32) | 1) ^ v71;
            *(_QWORD *)v120 = v118;
            *(_QWORD *)(v120 + 8) = (char *)v118 + v119;
            *(_QWORD *)(v120 + 16) = (char *)v118 + 1;
            *(_QWORD *)(v120 + 24) = v71;
            *(_DWORD *)(v120 + 32) = v119;
          }
          return;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v121);
        v120 = a3;
        goto LABEL_140;
      }
      v298 = v9;
      v302 = v70 + v68;
      v346 = 0;
      v74 = 1024 - v67;
      a4 = 1;
      if (1024 - v67 >= (int)a2[1])
      {
        v75 = 0;
        v76 = 0;
        v77 = 0;
        v303 = 0;
        v304 = 0;
        a5 = v12 + 40;
        a6 = v12 + 168;
        v78 = v300;
        if (!(_DWORD)__len)
          v78 = 1;
        v309 = v78;
        v305 = 1;
        v306 = v16;
        v79 = a3;
        v307 = v12 + 40;
        while (1)
        {
          if ((v16 & 1) == 0)
            goto LABEL_71;
          if (v22)
          {
            if (v74 >= 0x400)
              goto LABEL_510;
            if (((*(_QWORD *)(a5 + (((unint64_t)v74 >> 3) & 0x1FFFFFF8)) >> v74) & 1) != 0)
              goto LABEL_88;
          }
          if ((_DWORD)v20 != (_DWORD)v18)
            goto LABEL_71;
          if (v74 >= 0x400)
            goto LABEL_510;
          if (((*(_QWORD *)(a6 + (((unint64_t)v74 >> 3) & 0x1FFFFFF8)) >> v74) & 1) != 0)
          {
LABEL_88:
            v305 = 0;
          }
          else
          {
LABEL_71:
            if ((_DWORD)v14 == 2)
            {
              v346 = v75 + 1;
              if (v75 >= 0x400)
                goto LABEL_510;
              *((_WORD *)v345 + v75++) = v74;
            }
            else
            {
              v80 = (void *)(v12 + 16 * (int)v74);
              if ((_DWORD)v10 == 1 && *(_DWORD *)v80)
              {
                v81 = (WTF::StringImpl *)*((_QWORD *)v80 + 1);
                *((_QWORD *)v80 + 1) = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                  {
                    v311 = v75;
                    v83 = v14;
                    v84 = v76;
                    v16 = v18;
                    v85 = v77;
                    v86 = v20;
                    v87 = a6;
                    WTF::StringImpl::~StringImpl(v81, (WTF::AtomStringImpl *)v10, v20, 1, a5, a6, a7, a8);
                    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                    a6 = v87;
                    a5 = v307;
                    a4 = 1;
                    v20 = v86;
                    v79 = a3;
                    v12 = v315;
                    v77 = v85;
                    v18 = v16;
                    LOBYTE(v16) = v306;
                    v76 = v84;
                    v14 = v83;
                    v75 = v311;
                    v10 = v308;
                  }
                  else
                  {
                    *(_DWORD *)v81 -= 2;
                  }
                }
                *(_DWORD *)v80 = 0;
                *((_DWORD *)v80 + 2) = 1;
              }
              if (v79)
              {
                if ((v309 & 1) == 0)
                {
                  v133 = v80;
                  v134 = v20;
                  v312 = v75;
                  v297 = v14;
                  v135 = v76;
                  v136 = v77;
                  v137 = a6;
                  memset_pattern16(v133, &unk_1991567C0, __len);
                  a6 = v137;
                  a5 = v307;
                  a4 = 1;
                  v20 = v134;
                  v79 = a3;
                  v12 = v315;
                  v77 = v136;
                  v76 = v135;
                  v14 = v297;
                  v75 = v312;
                  v10 = v308;
                }
                v82 = *a2;
                if (v82 + (int)v74 < v77)
                {
                  v96 = v12 + 16 * v77;
                  v97 = (v76 << 36) | 1;
                  if (v304)
                    v97 = ((int)v304 - (int)v96) | (unint64_t)(v76 << 36);
                  *(_QWORD *)(v96 + 8) = v97 ^ v302;
                  v303 += 16 * v76;
                  v304 = v96;
                  v76 = 0;
                }
                v76 += v82;
                v77 = (int)v74;
              }
            }
          }
          v74 -= *a2;
          if ((int)v74 < (int)a2[1])
            goto LABEL_160;
        }
      }
      v75 = 0;
      v303 = 0;
      v304 = 0;
      v77 = 0;
      v76 = 0;
      v305 = 1;
      v79 = a3;
LABEL_160:
      if ((_DWORD)v14 == 2)
      {
        v149 = v304;
        v138 = v302;
        v139 = v298;
      }
      else
      {
        v138 = v302;
        v139 = v298;
        if (!v79)
        {
          v139 = 0;
          goto LABEL_163;
        }
        if (v76)
        {
          v149 = v12 + 16 * v77;
          if (v304)
            v172 = (int)v304 - (int)v149;
          else
            v172 = 1;
          *(_QWORD *)(v149 + 8) = (v172 | (v76 << 36)) ^ v302;
          v303 += 16 * v76;
        }
        else
        {
          v149 = v304;
        }
      }
      if (v79 && (_DWORD)v20 == (_DWORD)v18)
      {
        *(_DWORD *)(v12 + 36) = 0;
        v139 = 1;
      }
      v304 = v149;
LABEL_163:
      v140 = v76;
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v150 = (unsigned int *)(v12 + 24);
        while (1)
        {
          v151 = *v150;
          if ((*v150 & 3) != 1)
            break;
          v152 = __ldxr(v150);
          if (v152 == v151)
          {
            if (!__stxr(v151 & 0xFFFFFFFE, v150))
              goto LABEL_164;
          }
          else
          {
            __clrex();
          }
        }
        v226 = v77;
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v150, 0, v20, 1, a5, a6, a7, a8);
        v79 = a3;
        v12 = v315;
        v77 = v226;
        v76 = v140;
      }
LABEL_164:
      if ((_DWORD)v14 != 2)
      {
        if (!v139)
          goto LABEL_166;
        goto LABEL_203;
      }
      v299 = v139;
      if (v75)
      {
        if ((v139 & 1) != 0)
        {
          if ((_DWORD)__len)
            v173 = v300;
          else
            v173 = 1;
          v174 = 2 * v75;
          v175 = (unsigned __int16 *)v345;
          do
          {
            v166 = *v175;
            v176 = (void *)(v12 + 16 * v166);
            if (*(_DWORD *)v176)
            {
              v177 = (WTF::StringImpl *)*((_QWORD *)v176 + 1);
              *((_QWORD *)v176 + 1) = 0;
              if (v177)
              {
                if (*(_DWORD *)v177 == 2)
                {
                  v179 = v76;
                  v180 = v138;
                  v181 = v77;
                  WTF::StringImpl::~StringImpl(v177, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
                  WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
                  v79 = a3;
                  v12 = v315;
                  v77 = v181;
                  v138 = v180;
                  v76 = v179;
                }
                else
                {
                  *(_DWORD *)v177 -= 2;
                }
              }
              *(_DWORD *)v176 = 0;
              *((_DWORD *)v176 + 2) = 1;
            }
            if ((v173 & 1) == 0)
            {
              v192 = v176;
              v193 = v76;
              v194 = v77;
              memset_pattern16(v192, &unk_1991567C0, __len);
              v79 = a3;
              v12 = v315;
              v77 = v194;
              v76 = v193;
            }
            v178 = *a2;
            if (v178 + v166 < v77)
            {
              v190 = v12 + 16 * v77;
              v191 = (v76 << 36) | 1;
              if (v304)
                v191 = ((int)v304 - (int)v190) | (unint64_t)(v76 << 36);
              *(_QWORD *)(v190 + 8) = v191 ^ v138;
              v303 += 16 * v76;
              v304 = v190;
              v76 = 0;
            }
            v76 += v178;
            ++v175;
            v77 = v166;
            v174 -= 2;
          }
          while (v174);
LABEL_198:
          v139 = v299;
          if (!v299)
            goto LABEL_166;
          if (v76)
          {
            v167 = v12 + 16 * v166;
            if (v304)
              v168 = (int)v304 - (int)v167;
            else
              v168 = 1;
            *(_QWORD *)(v167 + 8) = (v168 | (v76 << 36)) ^ v138;
            v169 = 16 * v76 + v303;
            goto LABEL_204;
          }
LABEL_203:
          v169 = v303;
          v167 = v304;
          if (!v304)
          {
            v138 = 0;
            v169 = 0;
            *(_QWORD *)v79 = 0;
            *(_QWORD *)(v79 + 8) = 0;
            v171 = 1;
            goto LABEL_205;
          }
LABEL_204:
          v170 = *(_QWORD *)(v167 + 8) ^ v138;
          *(_QWORD *)v79 = v167;
          *(_QWORD *)(v79 + 8) = v167 + HIDWORD(v170);
          v171 = v167 + (int)v170;
LABEL_205:
          *(_QWORD *)(v79 + 16) = v171;
          *(_QWORD *)(v79 + 24) = v138;
          *(_DWORD *)(v79 + 32) = v169;
LABEL_166:
          v141 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
          if (__ldaxr(v141))
          {
            __clrex();
          }
          else if (!__stxr(1u, v141))
          {
LABEL_169:
            v143 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
            v144 = v143 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v144 + 24) &= ~(1 << a2[3]);
            v145 = v143 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v145 + 16) &= ~(1 << a2[3]);
            v146 = v143 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v146 + 4) &= ~(1 << a2[3]);
            if (!v139)
            {
              if ((v305 & 1) != 0)
                goto LABEL_171;
              goto LABEL_352;
            }
            goto LABEL_351;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v141);
          goto LABEL_169;
        }
        v153 = 2 * v75;
        v154 = (unsigned __int16 *)v345;
        do
        {
          v155 = v12 + 16 * *v154;
          if (*(_DWORD *)v155)
          {
            v156 = *(WTF::StringImpl **)(v155 + 8);
            *(_QWORD *)(v155 + 8) = 0;
            if (v156)
            {
              if (*(_DWORD *)v156 == 2)
              {
                v157 = v77;
                WTF::StringImpl::~StringImpl(v156, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
                WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
                v79 = a3;
                v12 = v315;
                v77 = v157;
                v76 = v140;
              }
              else
              {
                *(_DWORD *)v156 -= 2;
              }
            }
            *(_DWORD *)v155 = 0;
            *(_DWORD *)(v155 + 8) = 1;
          }
          ++v154;
          v153 -= 2;
        }
        while (v153);
      }
      v166 = v77;
      goto LABEL_198;
    }
    __break(0xC471u);
LABEL_511:
    JUMPOUT(0x1985C818CLL);
  }
  if ((v16 & 1) != 0)
  {
    if (!a3)
    {
      if (v21 != v19)
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>((int *)a2, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
        return;
      }
      v26 = 1;
      v344 = 1;
      v27 = *a2;
      v343 = 16 * *a2;
      v28 = *(_QWORD *)(v11 + 168);
      v29 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
      v30 = (v28 >> 26) ^ (v29 >> 17) ^ v28 ^ v29;
      *(_QWORD *)(v11 + 160) = v28;
      *(_QWORD *)(v11 + 168) = v30;
      v341 = v11;
      v342 = v30 + v28;
      v339 = 0;
      v340 = &v316;
      v337 = 0;
      v338 = 0;
      v346 = 0;
      v324 = v12;
      v325 = &v344;
      v326 = &v340;
      v327 = (char *)&v344 + 4;
      v328 = (char *)&v343 + 4;
      v329 = &v343;
      v330 = a2;
      v331 = &v336;
      v332 = &v337;
      v333 = &v338;
      v334 = (uint64_t *)&v342;
      v335 = &v339;
      v336 = 0;
      v317 = (char *)&v344 + 4;
      v318 = &v337;
      v319 = v12;
      v320 = &v336;
      v321 = &v338;
      v322 = (uint64_t *)&v342;
      v323 = &v339;
      v31 = 1024 - v27;
      if (1024 - v27 < (int)a2[1])
      {
        v314 = 0;
        v36 = 1;
        goto LABEL_384;
      }
      v32 = 0;
      v33 = 0;
      v314 = 0;
      v34 = v12 + 40;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v36 = 1;
      while (1)
      {
        if (v31 >= 0x400)
          goto LABEL_510;
        v260 = v31;
        if (((*(_QWORD *)(v34 + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          break;
        v36 = 0;
LABEL_405:
        v31 = v260 - *a2;
        if (v31 < (int)a2[1])
        {
          v26 = v344;
          if ((_DWORD)v344 != 2 && v32 == 1)
          {
            if (v337)
            {
              v257 = 16 * v337;
              v12 = v315;
              v258 = v315 + 16 * v336;
              v259 = ((int)v338 - (int)v258) | (unint64_t)(v337 << 36);
              if (!v338)
                v259 = (v337 << 36) | 1;
              *(_QWORD *)(v258 + 8) = v259 ^ v342;
              v338 = v258;
              v339 += v257;
            }
            else
            {
              v12 = v315;
            }
          }
LABEL_384:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v251 = (unsigned int *)(v12 + 24);
            while (1)
            {
              v252 = *v251;
              if ((*v251 & 3) != 1)
                break;
              v253 = __ldxr(v251);
              if (v253 == v252)
              {
                if (!__stxr(v252 & 0xFFFFFFFE, v251))
                  goto LABEL_385;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v251, 0, v20, a4, a5, a6, a7, a8);
            v26 = v344;
          }
LABEL_385:
          if (v26 == 2)
          {
            if (v314)
            {
              v254 = 2 * v314;
              v255 = (unsigned __int16 *)v345;
              do
              {
                v256 = *v255++;
                JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v324, (WTF::AtomStringImpl *)v256, v20, a4, a5, a6, a7, a8);
                v254 -= 2;
              }
              while (v254);
            }
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v317);
          }
          if (HIDWORD(v344) == 1)
          {
            MEMORY[8] = 0;
            MEMORY[0] = 0;
            MEMORY[0x10] = 1;
            MEMORY[0x18] = 0;
            MEMORY[0x20] = 0;
          }
LABEL_441:
          v141 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
          if (__ldaxr(v141))
          {
            __clrex();
            goto LABEL_443;
          }
          if (__stxr(1u, v141))
LABEL_443:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v141);
          v143 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v270 = v143 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v270 + 24) &= ~(1 << a2[3]);
          v271 = v143 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v271 + 16) &= ~(1 << a2[3]);
          v272 = v143 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v272 + 4) &= ~(1 << a2[3]);
          if (HIDWORD(v344) != 1)
          {
            if ((v36 & 1) != 0)
            {
LABEL_171:
              v147 = v143 + 40 * (a2[3] >> 5);
              v148 = 1 << a2[3];
              goto LABEL_172;
            }
            goto LABEL_352;
          }
LABEL_351:
          *((_BYTE *)a2 + 10) = 1;
          goto LABEL_352;
        }
      }
      if ((_DWORD)v344 == 2)
      {
        v346 = v314 + 1;
        if (v314 >= 0x400)
          goto LABEL_510;
        v12 = v315;
        *((_WORD *)v345 + v314++) = v31;
        goto LABEL_405;
      }
      v261 = (_QWORD *)(v12 + 16 * v31);
      if (!(_DWORD)v344 || !*(_DWORD *)v261)
      {
LABEL_415:
        if (v33 == 1)
        {
          if (HIDWORD(v343) == 1 && v343 >= 8)
            memset_pattern16(v261, &unk_1991567C0, v343 & 0xFFFFFFF8);
          v265 = *a2;
          v266 = v337;
          if (v265 + v260 < v336)
          {
            v267 = v315 + 16 * v336;
            if (v338)
              v268 = (int)v338 - (int)v267;
            else
              v268 = 1;
            *(_QWORD *)(v267 + 8) = (v268 | (v337 << 36)) ^ v342;
            v338 = v267;
            v339 += 16 * v266;
            v266 = 0;
          }
          v336 = v260;
          v337 = v266 + v265;
          v33 = 1;
          v12 = v315;
        }
        goto LABEL_405;
      }
      v262 = v261[1];
      v261[1] = 0;
      if (!v262)
      {
LABEL_414:
        *(_DWORD *)v261 = 0;
        *((_DWORD *)v261 + 2) = 1;
        v32 = HIDWORD(v344);
        v33 = HIDWORD(v344);
        goto LABEL_415;
      }
      if (*(_DWORD *)v262 != 2)
      {
        *(_DWORD *)v262 -= 2;
        goto LABEL_414;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v262, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
      v263 = *(_QWORD *)(StatusReg + 752);
      if (!v263)
      {
        pas_try_deallocate_slow_no_cache(v262, (uint64_t)&bmalloc_heap_config, 1);
        v12 = v315;
        goto LABEL_414;
      }
      if (!(v262 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v262 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v262)) & 1) != 0)
      {
LABEL_420:
        v264 = *(unsigned int *)(v263 + 8000);
        if (v264 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v263, v262, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v263 + 8 * v264) = v262 | 0x5000000000000;
          *(_DWORD *)(v263 + 8000) = v264 + 1;
        }
        v12 = v315;
        goto LABEL_414;
      }
      if (v262 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v262 >> 24)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v262 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v262) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
          goto LABEL_420;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v263, v262, 1, a4, a5, a6, a7, a8);
      v12 = v315;
      goto LABEL_414;
    }
    if (v21 != v19)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(a2, (WTF::AtomStringImpl *)a3, v20, a4, a5, a6, a7, a8);
      return;
    }
    v52 = 1;
    v344 = 0x100000001;
    v53 = *a2;
    v343 = 16 * *a2;
    v54 = *(_QWORD *)(v11 + 168);
    v55 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
    v56 = (v54 >> 26) ^ (v55 >> 17) ^ v54 ^ v55;
    *(_QWORD *)(v11 + 160) = v54;
    *(_QWORD *)(v11 + 168) = v56;
    v341 = v11;
    v342 = v56 + v54;
    v339 = 0;
    v340 = &v316;
    v337 = 0;
    v338 = 0;
    v346 = 0;
    v324 = v12;
    v325 = &v344;
    v326 = &v340;
    v327 = (char *)&v344 + 4;
    v328 = (char *)&v343 + 4;
    v329 = &v343;
    v330 = a2;
    v331 = &v336;
    v332 = &v337;
    v333 = &v338;
    v334 = (uint64_t *)&v342;
    v335 = &v339;
    v336 = 0;
    v317 = (char *)&v344 + 4;
    v318 = &v337;
    v319 = v12;
    v320 = &v336;
    v321 = &v338;
    v322 = (uint64_t *)&v342;
    v323 = &v339;
    v57 = 1024 - v53;
    if (1024 - v53 < (int)a2[1])
    {
      v310 = 0;
      v36 = 1;
      goto LABEL_455;
    }
    v310 = 0;
    v58 = v12 + 40;
    v59 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v60 = 1;
    v61 = 1;
    v36 = 1;
    while (1)
    {
      if (v57 >= 0x400)
        goto LABEL_510;
      v288 = v57;
      if (((*(_QWORD *)(v58 + (((unint64_t)v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
        break;
      v36 = 0;
LABEL_475:
      v57 = v288 - *a2;
      if (v57 < (int)a2[1])
      {
        v52 = v344;
        if ((_DWORD)v344 == 2)
        {
          v52 = 2;
        }
        else if (v60 == 1 && v337)
        {
          v273 = 16 * v337;
          v274 = v12 + 16 * v336;
          v275 = ((int)v338 - (int)v274) | (unint64_t)(v337 << 36);
          if (!v338)
            v275 = (v337 << 36) | 1;
          *(_QWORD *)(v274 + 8) = v275 ^ v342;
          v338 = v274;
          v339 += v273;
        }
LABEL_455:
        v276 = a3;
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
        {
          v282 = (unsigned int *)(v12 + 24);
          do
          {
            while (1)
            {
              v283 = *v282;
              if ((*v282 & 3) != 1)
              {
                WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v282, 0, v20, a4, a5, a6, a7, a8);
                v52 = v344;
                v276 = a3;
                goto LABEL_456;
              }
              v284 = __ldxr(v282);
              if (v284 == v283)
                break;
              __clrex();
            }
          }
          while (__stxr(v283 & 0xFFFFFFFE, v282));
          v276 = a3;
        }
LABEL_456:
        if (v52 == 2)
        {
          if (v310)
          {
            v285 = 2 * v310;
            v286 = (unsigned __int16 *)v345;
            do
            {
              v287 = *v286++;
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v324, (WTF::AtomStringImpl *)v287, v20, a4, a5, a6, a7, a8);
              v285 -= 2;
            }
            while (v285);
          }
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v317);
          v276 = a3;
        }
        if (HIDWORD(v344) == 1)
        {
          v277 = v338;
          if (v338)
          {
            v278 = v339;
            v279 = v342;
            v280 = *(_QWORD *)(v338 + 8) ^ v342;
            *(_QWORD *)v276 = v338;
            *(_QWORD *)(v276 + 8) = v277 + HIDWORD(v280);
            v281 = v277 + (int)v280;
          }
          else
          {
            v279 = 0;
            v278 = 0;
            *(_QWORD *)v276 = 0;
            *(_QWORD *)(v276 + 8) = 0;
            v281 = 1;
          }
          *(_QWORD *)(v276 + 16) = v281;
          *(_QWORD *)(v276 + 24) = v279;
          *(_DWORD *)(v276 + 32) = v278;
        }
        goto LABEL_441;
      }
    }
    if ((_DWORD)v344 == 2)
    {
      v346 = v310 + 1;
      if (v310 >= 0x400)
        goto LABEL_510;
      *((_WORD *)v345 + v310++) = v57;
      v12 = v315;
      goto LABEL_475;
    }
    v289 = (_QWORD *)(v12 + 16 * v57);
    if (!(_DWORD)v344 || !*(_DWORD *)v289)
    {
LABEL_485:
      if (v61 == 1)
      {
        if (HIDWORD(v343) == 1 && v343 >= 8)
        {
          memset_pattern16(v289, &unk_1991567C0, v343 & 0xFFFFFFF8);
          v12 = v315;
        }
        v291 = *a2;
        v292 = v337;
        if (v291 + v288 < v336)
        {
          v295 = v12 + 16 * v336;
          if (v338)
            v296 = ((int)v338 - (int)v295) | (unint64_t)(v337 << 36);
          else
            v296 = (v337 << 36) | 1;
          *(_QWORD *)(v295 + 8) = v296 ^ v342;
          v338 = v295;
          v339 += 16 * v292;
          v292 = 0;
        }
        v336 = v288;
        v337 = v292 + v291;
        v61 = 1;
      }
      goto LABEL_475;
    }
    v290 = v289[1];
    v289[1] = 0;
    if (!v290)
    {
LABEL_484:
      *(_DWORD *)v289 = 0;
      *((_DWORD *)v289 + 2) = 1;
      v60 = HIDWORD(v344);
      v61 = HIDWORD(v344);
      goto LABEL_485;
    }
    if (*(_DWORD *)v290 != 2)
    {
      *(_DWORD *)v290 -= 2;
      goto LABEL_484;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v290, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
    v293 = *(_QWORD *)(v59 + 752);
    if (!v293)
    {
      pas_try_deallocate_slow_no_cache(v290, (uint64_t)&bmalloc_heap_config, 1);
      v12 = v315;
      goto LABEL_484;
    }
    if (!(v290 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v290 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v290)) & 1) != 0)
    {
LABEL_492:
      v294 = *(unsigned int *)(v293 + 8000);
      if (v294 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v293, v290, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(v293 + 8 * v294) = v290 | 0x5000000000000;
        *(_DWORD *)(v293 + 8000) = v294 + 1;
      }
      v12 = v315;
      goto LABEL_484;
    }
    if (v290 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v290 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v290 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v290) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_492;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v293, v290, 1, a4, a5, a6, a7, a8);
    v12 = v315;
    goto LABEL_484;
  }
  if (!a3)
  {
    if (v21 == v19)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>((int *)a2, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
      return;
    }
    v344 = 1;
    v37 = *a2;
    v343 = 16 * *a2;
    v38 = *(_QWORD *)(v11 + 168);
    v39 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
    v40 = (v38 >> 26) ^ (v39 >> 17) ^ v38 ^ v39;
    *(_QWORD *)(v11 + 160) = v38;
    *(_QWORD *)(v11 + 168) = v40;
    v341 = v11;
    v342 = v40 + v38;
    v340 = &v316;
    if (!BYTE1(qword_1ECF4C414))
    {
      v195 = 0;
      v338 = 0;
      v339 = 0;
      v337 = 0;
      v346 = 0;
      v324 = v12;
      v325 = &v344;
      v326 = &v340;
      v327 = (char *)&v344 + 4;
      v328 = (char *)&v343 + 4;
      v329 = &v343;
      v330 = a2;
      v331 = &v336;
      v332 = &v337;
      v333 = &v338;
      v334 = (uint64_t *)&v342;
      v335 = &v339;
      v336 = 0;
      v317 = (char *)&v344 + 4;
      v318 = &v337;
      v319 = v12;
      v320 = &v336;
      v321 = &v338;
      v322 = (uint64_t *)&v342;
      v323 = &v339;
      v196 = 1024 - v37;
      v197 = a2[1];
      if (1024 - v37 < v197)
        goto LABEL_229;
      v195 = 0;
      do
      {
        if ((_DWORD)v344 == 2)
        {
          v346 = v195 + 1;
          if (v195 >= 0x400)
            goto LABEL_510;
          *((_WORD *)v345 + v195++) = v196;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v324, (WTF::AtomStringImpl *)v196, v20, a4, a5, a6, a7, a8);
          v37 = *a2;
          v197 = a2[1];
        }
        v196 -= v37;
      }
      while (v196 >= v197);
      if ((_DWORD)v344 != 2)
LABEL_229:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v317);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v198 = (unsigned int *)(v315 + 24);
        while (1)
        {
          v199 = *v198;
          if ((*v198 & 3) != 1)
            break;
          v200 = __ldxr(v198);
          if (v200 == v199)
          {
            if (!__stxr(v199 & 0xFFFFFFFE, v198))
              goto LABEL_303;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v198, 0, v20, a4, a5, a6, a7, a8);
      }
LABEL_303:
      if ((_DWORD)v344 == 2)
      {
        if (v195)
        {
          v227 = 2 * v195;
          v228 = (unsigned __int16 *)v345;
          do
          {
            v229 = *v228++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v324, (WTF::AtomStringImpl *)v229, v20, a4, a5, a6, a7, a8);
            v227 -= 2;
          }
          while (v227);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v317);
      }
      if (HIDWORD(v344) == 1)
      {
        MEMORY[8] = 0;
        MEMORY[0] = 0;
        MEMORY[0x10] = 1;
        MEMORY[0x18] = 0;
        MEMORY[0x20] = 0;
      }
      goto LABEL_320;
    }
    v41 = v12 + 0x4000;
    v42 = a2[1];
    v43 = v12 + 16 * v42;
    if ((unint64_t)(16 * v42 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1985C8384);
    }
    v44 = (unsigned __int8 *)(v15 + 56);
    if (__ldaxr((unsigned __int8 *)(v15 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v44))
    {
LABEL_29:
      v46 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v47 = v46 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v47 + 24) &= ~(1 << a2[3]);
      v48 = v46 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v48 + 16) &= ~(1 << a2[3]);
      v49 = v46 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v49 + 4) &= ~(1 << a2[3]);
      if (HIDWORD(v344) == 1)
      {
        *((_BYTE *)a2 + 10) = 1;
      }
      else
      {
        v50 = v46 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v50 + 4) |= 1 << a2[3];
      }
      v51 = __ldxr(v44);
      if (v51 == 1)
      {
        if (!__stlxr(0, v44))
          goto LABEL_105;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, v20, a4, a5, a6, a7, a8);
      v12 = v315;
LABEL_105:
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v209 = (unsigned int *)(v12 + 24);
        while (1)
        {
          v210 = *v209;
          if ((*v209 & 3) != 1)
            break;
          v211 = __ldxr(v209);
          if (v211 == v210)
          {
            if (!__stxr(v210 & 0xFFFFFFFE, v209))
              goto LABEL_106;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v209, 0, v20, a4, a5, a6, a7, a8);
      }
LABEL_106:
      if (v42 > 0x3FF || !(_DWORD)v344)
        return;
      v113 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        if (!*(_DWORD *)v43)
          goto LABEL_335;
        v243 = *(_QWORD *)(v43 + 8);
        *(_QWORD *)(v43 + 8) = 0;
        if (v243)
        {
          if (*(_DWORD *)v243 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v243, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
            v244 = *(_QWORD *)(v113 + 752);
            if (v244)
            {
              if (!(v243 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v243 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v243)) & 1) != 0)
              {
LABEL_342:
                v245 = *(unsigned int *)(v244 + 8000);
                if (v245 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v244, v243, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v244 + 8 * v245) = v243 | 0x5000000000000;
                  *(_DWORD *)(v244 + 8000) = v245 + 1;
                }
                goto LABEL_334;
              }
              if (v243 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v243 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v243 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v243) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_342;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v244, v243, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v243, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v243 -= 2;
          }
        }
LABEL_334:
        *(_DWORD *)v43 = 0;
        *(_DWORD *)(v43 + 8) = 1;
LABEL_335:
        v43 += v343;
        if (v43 >= v41)
          return;
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v44);
    v12 = v315;
    goto LABEL_29;
  }
  if (v21 == v19)
  {
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(a2, (WTF::AtomStringImpl *)a3, v20, a4, a5, a6, a7, a8);
    return;
  }
  v344 = 0x100000001;
  v98 = *a2;
  v343 = 16 * *a2;
  v99 = *(_QWORD *)(v11 + 168);
  v100 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  v101 = (v99 >> 26) ^ (v100 >> 17) ^ v99 ^ v100;
  *(_QWORD *)(v11 + 160) = v99;
  *(_QWORD *)(v11 + 168) = v101;
  v341 = v11;
  v342 = v101 + v99;
  v340 = &v316;
  if (BYTE1(qword_1ECF4C414))
  {
    v102 = v12 + 0x4000;
    v103 = a2[1];
    v104 = (_QWORD *)(v12 + 16 * v103);
    v105 = 0x4000 - 16 * v103;
    if (v105 >= 0x3ED1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985C8398);
    }
    v106 = (unsigned __int8 *)(v15 + 56);
    if (__ldaxr((unsigned __int8 *)(v15 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v106))
    {
LABEL_98:
      v108 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v109 = v108 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v109 + 24) &= ~(1 << a2[3]);
      v110 = v108 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v110 + 16) &= ~(1 << a2[3]);
      v111 = v108 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v111 + 4) &= ~(1 << a2[3]);
      if (HIDWORD(v344) == 1)
      {
        *((_BYTE *)a2 + 10) = 1;
      }
      else
      {
        v212 = v108 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v212 + 4) |= 1 << a2[3];
      }
      v112 = __ldxr(v106);
      if (v112 == 1)
      {
        if (!__stlxr(0, v106))
          goto LABEL_113;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v106, 0, v20, a4, a5, a6, a7, a8);
      v12 = v315;
LABEL_113:
      v114 = a3;
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v213 = (unsigned int *)(v12 + 24);
        while (1)
        {
          v214 = *v213;
          if ((*v213 & 3) != 1)
            break;
          v215 = __ldxr(v213);
          if (v215 == v214)
          {
            if (!__stxr(v214 & 0xFFFFFFFE, v213))
              goto LABEL_114;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v213, 0, v20, a4, a5, a6, a7, a8);
        v114 = a3;
      }
LABEL_114:
      if (v103 > 0x3FF || !(_DWORD)v344)
      {
LABEL_370:
        if (HIDWORD(v344) == 1)
        {
          if (HIDWORD(v343) == 1 && (_DWORD)v103 != 1024)
          {
            memset_pattern16(v104, &unk_1991567C0, v105);
            v114 = a3;
          }
          v250 = v342;
          v104[1] = v342 ^ ((v105 << 32) | 1);
          *(_QWORD *)v114 = v104;
          *(_QWORD *)(v114 + 8) = (char *)v104 + v105;
          *(_QWORD *)(v114 + 16) = (char *)v104 + 1;
          *(_QWORD *)(v114 + 24) = v250;
          *(_DWORD *)(v114 + 32) = v105;
        }
        return;
      }
      v115 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v116 = v104;
      while (1)
      {
        if (!*(_DWORD *)v116)
          goto LABEL_360;
        v247 = v116[1];
        v116[1] = 0;
        if (v247)
        {
          if (*(_DWORD *)v247 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v247, (WTF::AtomStringImpl *)v10, v20, a4, a5, a6, a7, a8);
            v248 = *(_QWORD *)(v115 + 752);
            if (v248)
            {
              if (!(v247 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v247 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v247)) & 1) != 0)
              {
LABEL_367:
                v249 = *(unsigned int *)(v248 + 8000);
                if (v249 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v248, v247, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v248 + 8 * v249) = v247 | 0x5000000000000;
                  *(_DWORD *)(v248 + 8000) = v249 + 1;
                }
                v114 = a3;
                goto LABEL_359;
              }
              if (v247 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v247 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v247 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v247) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_367;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v248, v247, 1, a4, a5, a6, a7, a8);
              v114 = a3;
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v247, (uint64_t)&bmalloc_heap_config, 1);
              v114 = a3;
            }
          }
          else
          {
            *(_DWORD *)v247 -= 2;
          }
        }
LABEL_359:
        *(_DWORD *)v116 = 0;
        *((_DWORD *)v116 + 2) = 1;
LABEL_360:
        v116 = (_QWORD *)((char *)v116 + v343);
        if ((unint64_t)v116 >= v102)
          goto LABEL_370;
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v106);
    v12 = v315;
    goto LABEL_98;
  }
  v201 = 0;
  v338 = 0;
  v339 = 0;
  v337 = 0;
  v346 = 0;
  v324 = v12;
  v325 = &v344;
  v326 = &v340;
  v327 = (char *)&v344 + 4;
  v328 = (char *)&v343 + 4;
  v329 = &v343;
  v330 = a2;
  v331 = &v336;
  v332 = &v337;
  v333 = &v338;
  v334 = (uint64_t *)&v342;
  v335 = &v339;
  v336 = 0;
  v317 = (char *)&v344 + 4;
  v318 = &v337;
  v319 = v12;
  v320 = &v336;
  v321 = &v338;
  v322 = (uint64_t *)&v342;
  v323 = &v339;
  v202 = 1024 - v98;
  v203 = a2[1];
  if (1024 - v98 < v203)
    goto LABEL_238;
  v201 = 0;
  do
  {
    if ((_DWORD)v344 == 2)
    {
      v346 = v201 + 1;
      if (v201 >= 0x400)
      {
LABEL_510:
        __break(1u);
        goto LABEL_511;
      }
      *((_WORD *)v345 + v201++) = v202;
    }
    else
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v324, (WTF::AtomStringImpl *)v202, v20, a4, a5, a6, a7, a8);
      v98 = *a2;
      v203 = a2[1];
    }
    v202 -= v98;
  }
  while (v202 >= v203);
  if ((_DWORD)v344 != 2)
LABEL_238:
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v317);
  if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
  {
    v204 = (unsigned int *)(v315 + 24);
    while (1)
    {
      v205 = *v204;
      if ((*v204 & 3) != 1)
        break;
      v206 = __ldxr(v204);
      if (v206 == v205)
      {
        if (!__stxr(v205 & 0xFFFFFFFE, v204))
          goto LABEL_311;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v204, 0, v20, a4, a5, a6, a7, a8);
  }
LABEL_311:
  if ((_DWORD)v344 == 2)
  {
    if (v201)
    {
      v230 = 2 * v201;
      v231 = (unsigned __int16 *)v345;
      do
      {
        v232 = *v231++;
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v324, (WTF::AtomStringImpl *)v232, v20, a4, a5, a6, a7, a8);
        v230 -= 2;
      }
      while (v230);
    }
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v317);
  }
  if (HIDWORD(v344) == 1)
  {
    v233 = v338;
    if (v338)
    {
      v234 = v339;
      v235 = v342;
      v236 = *(_QWORD *)(v338 + 8) ^ v342;
      *(_QWORD *)a3 = v338;
      *(_QWORD *)(a3 + 8) = v233 + HIDWORD(v236);
      v237 = v233 + (int)v236;
    }
    else
    {
      v235 = 0;
      v234 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v237 = 1;
    }
    *(_QWORD *)(a3 + 16) = v237;
    *(_QWORD *)(a3 + 24) = v235;
    *(_DWORD *)(a3 + 32) = v234;
  }
LABEL_320:
  v141 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
  if (__ldaxr(v141))
  {
    __clrex();
    goto LABEL_322;
  }
  if (__stxr(1u, v141))
LABEL_322:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v141);
  v239 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v240 = v239 + 40 * (a2[3] >> 5);
  *(_DWORD *)(v240 + 24) &= ~(1 << a2[3]);
  v241 = v239 + 40 * (a2[3] >> 5);
  *(_DWORD *)(v241 + 16) &= ~(1 << a2[3]);
  v242 = v239 + 40 * (a2[3] >> 5);
  *(_DWORD *)(v242 + 4) &= ~(1 << a2[3]);
  if (HIDWORD(v344) == 1)
    goto LABEL_351;
  v147 = v239 + 40 * (a2[3] >> 5);
  v148 = 1 << a2[3];
LABEL_172:
  *(_DWORD *)(v147 + 4) |= v148;
LABEL_352:
  v246 = __ldxr(v141);
  if (v246 == 1)
  {
    if (!__stlxr(0, v141))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v141, 0, v20, a4, a5, a6, a7, a8);
}

void JSC::IsoInlinedHeapCellType<JSC::JSString>::destroy(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  WTF *v61;
  const char *v62;
  const char *v63;
  char v64;
  WTF::PrintStream *v65;
  WTF *v66;
  const char *v67;
  const char *v68;
  WTF *v69;
  const char *v70;
  const char *v71;
  WTF::PrintStream *v72;
  WTF *v73;
  const char *v74;
  const char *v75;
  char v76;
  char **v77;
  char *v78;

  v9 = *a1;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  if (!BYTE1(qword_1ECF4C414))
  {
    v19 = 1024 - v9;
    v20 = a1[1];
    if (1024 - v9 >= v20)
    {
      do
      {
        v21 = v11 + 16 * v19;
        if (*(_DWORD *)v21)
        {
          v22 = *(WTF::StringImpl **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
            {
              WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
            }
            else
            {
              *(_DWORD *)v22 -= 2;
            }
          }
          *(_DWORD *)v21 = 0;
          *(_DWORD *)(v21 + 8) = 1;
          v9 = *a1;
          v20 = a1[1];
        }
        v19 -= v9;
      }
      while (v19 >= v20);
      v10 = *((_QWORD *)a1 + 10);
    }
    if (*(_BYTE *)(v10 + 445))
    {
      v39 = (unsigned int *)(v11 + 24);
      while (1)
      {
        v40 = *v39;
        if ((*v39 & 3) != 1)
          break;
        v41 = __ldxr(v39);
        if (v41 == v40)
        {
          if (!__stxr(v40 & 0xFFFFFFFE, v39))
            goto LABEL_62;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v39, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_62:
    v51 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v51))
    {
      __clrex();
    }
    else if (!__stxr(1u, v51))
    {
      goto LABEL_66;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v51);
LABEL_66:
    v53 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v54 = v53 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v54 + 24) &= ~(1 << a1[3]);
    v55 = v53 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v55 + 16) &= ~(1 << a1[3]);
    v56 = v53 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v56 + 4) &= ~(1 << a1[3]);
    v57 = v53 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v57 + 4) |= 1 << a1[3];
    LODWORD(v57) = __ldxr(v51);
    if ((_DWORD)v57 == 1)
    {
      if (!__stlxr(0, v51))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v51, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)(v11 + 40)
    || *(_QWORD *)(v11 + 48)
    || *(_QWORD *)(v11 + 56)
    || *(_QWORD *)(v11 + 64)
    || *(_QWORD *)(v11 + 72)
    || *(_QWORD *)(v11 + 80)
    || *(_QWORD *)(v11 + 88)
    || *(_QWORD *)(v11 + 96)
    || *(_QWORD *)(v11 + 104)
    || *(_QWORD *)(v11 + 112)
    || *(_QWORD *)(v11 + 120)
    || *(_QWORD *)(v11 + 128)
    || *(_QWORD *)(v11 + 136)
    || *(_QWORD *)(v11 + 144)
    || *(_QWORD *)(v11 + 152)
    || *(_QWORD *)(v11 + 160))
  {
    v59 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v59 != -1)
    {
      v78 = &v76;
      v77 = &v78;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v61 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    WTF::printInternal(v61, (WTF::PrintStream *)"Block ", v62);
    WTF::printInternal(v61, (const void *)v11);
    WTF::printInternal(v61, (WTF::PrintStream *)": marks not empty!\n", v63);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
    v64 = atomic_load((unsigned int *)(v11 + 24));
    v65 = (WTF::PrintStream *)(v64 & 1);
    v66 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    WTF::printInternal(v66, (WTF::PrintStream *)"Block lock is held: ", v67);
    WTF::printInternal(v66, v65);
    WTF::printInternal(v66, (WTF::PrintStream *)"\n", v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
    v69 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    WTF::printInternal(v69, (WTF::PrintStream *)"Marking version of block: ", v70);
    WTF::printInternal(v69, (WTF::PrintStream *)*(unsigned int *)(v11 + 32));
    WTF::printInternal(v69, (WTF::PrintStream *)"\n", v71);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
    v72 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v73 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    WTF::printInternal(v73, (WTF::PrintStream *)"Marking version of heap: ", v74);
    WTF::printInternal(v73, v72);
    WTF::printInternal(v73, (WTF::PrintStream *)"\n", v75);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
    __break(0xC471u);
LABEL_75:
    JUMPOUT(0x1985C94ACLL);
  }
  v14 = (16 * v9);
  v15 = a1[1];
  v16 = v11 + 16 * v15;
  if ((unint64_t)(16 * v15 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
  {
    __break(0xC471u);
    goto LABEL_75;
  }
  v17 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_32;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_32:
  v31 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v32 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v32 + 24) &= ~(1 << a1[3]);
  v33 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v33 + 16) &= ~(1 << a1[3]);
  v34 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v34 + 4) &= ~(1 << a1[3]);
  v35 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v35 + 4) |= 1 << a1[3];
  LODWORD(v35) = __ldxr(v17);
  if ((_DWORD)v35 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_37;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
LABEL_37:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v36 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v37 = *v36;
      if ((*v36 & 3) != 1)
        break;
      v38 = __ldxr(v36);
      if (v38 == v37)
      {
        if (!__stxr(v37 & 0xFFFFFFFE, v36))
          goto LABEL_52;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v36, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_52:
  if (v15 <= 0x3FF)
  {
    do
    {
      if (*(_DWORD *)v16)
      {
        v42 = *(WTF::StringImpl **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        *(_DWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 1;
      }
      v16 += v14;
    }
    while (v16 < v11 + 0x4000);
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  signed int v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t v73;
  WTF *v74;
  const char *v75;
  const char *v76;
  char v77;
  WTF::PrintStream *v78;
  WTF *v79;
  const char *v80;
  const char *v81;
  WTF *v82;
  const char *v83;
  const char *v84;
  WTF::PrintStream *v85;
  WTF *v86;
  const char *v87;
  const char *v88;
  WTF::AtomStringImpl *v89;
  char v91;
  char **v92;
  char *v93;

  v8 = a2;
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 10);
  v12 = (unsigned int *)*((_QWORD *)a1 + 11);
  v13 = *(_QWORD *)(v11 + 168);
  v14 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  v15 = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
  *(_QWORD *)(v11 + 160) = v13;
  *(_QWORD *)(v11 + 168) = v15;
  v16 = v15 + v13;
  if (!BYTE1(qword_1ECF4C414))
  {
    v23 = 1024 - v10;
    if (1024 - (int)v10 >= (int)a1[1])
    {
      v33 = 0;
      v25 = 0;
      v34 = 0;
      v35 = 0;
      do
      {
        v24 = &v12[4 * v23];
        if (*v24)
        {
          v36 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::~StringImpl(v36, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
            }
            else
            {
              *(_DWORD *)v36 -= 2;
            }
          }
          *v24 = 0;
          v24[2] = 1;
          v10 = *a1;
        }
        v37 = v23;
        if (v23 + (unint64_t)v10 >= v35)
        {
          v40 = v10;
        }
        else
        {
          v38 = &v12[4 * v35];
          v39 = (v33 << 36) | 1;
          if (v34)
            v39 = ((int)v34 - (int)v38) | (unint64_t)(v33 << 36);
          *((_QWORD *)v38 + 1) = v39 ^ v16;
          v25 += 16 * v33;
          v40 = *a1;
          v34 = &v12[4 * v35];
          v33 = 0;
        }
        v33 += v10;
        v23 -= v40;
        v10 = v40;
        v35 = v37;
      }
      while (v23 >= (int)a1[1]);
      if (v33)
      {
        v49 = (v33 << 36) | 1;
        if (v34)
          v49 = ((int)v34 - (int)v24) | (unint64_t)(v33 << 36);
        *((_QWORD *)v24 + 1) = v49 ^ v16;
        v25 += 16 * v33;
      }
      else
      {
        v24 = v34;
      }
      v8 = a2;
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
    {
      v50 = v12 + 6;
      while (1)
      {
        v51 = *v50;
        if ((*v50 & 3) != 1)
          break;
        v52 = __ldxr(v50);
        if (v52 == v51)
        {
          if (!__stxr(v51 & 0xFFFFFFFE, v50))
            goto LABEL_78;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v50, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_78:
    if (v24)
    {
      v63 = *((_QWORD *)v24 + 1) ^ v16;
      *(_QWORD *)v8 = v24;
      *((_QWORD *)v8 + 1) = (char *)v24 + HIDWORD(v63);
      v64 = (uint64_t)v24 + (int)v63;
    }
    else
    {
      v16 = 0;
      v25 = 0;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      v64 = 1;
    }
    *((_QWORD *)v8 + 2) = v64;
    *((_QWORD *)v8 + 3) = v16;
    *((_DWORD *)v8 + 8) = v25;
    v65 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v65))
    {
      __clrex();
    }
    else if (!__stxr(1u, v65))
    {
      goto LABEL_84;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v65);
LABEL_84:
    v67 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v68 = v67 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v68 + 24) &= ~(1 << a1[3]);
    v69 = v67 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v69 + 16) &= ~(1 << a1[3]);
    v70 = v67 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v70 + 4) &= ~(1 << a1[3]);
    *((_BYTE *)a1 + 10) = 1;
    LODWORD(v70) = __ldxr(v65);
    if ((_DWORD)v70 == 1)
    {
      if (!__stlxr(0, v65))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v65, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*((_QWORD *)v12 + 5)
    || *((_QWORD *)v12 + 6)
    || *((_QWORD *)v12 + 7)
    || *((_QWORD *)v12 + 8)
    || *((_QWORD *)v12 + 9)
    || *((_QWORD *)v12 + 10)
    || *((_QWORD *)v12 + 11)
    || *((_QWORD *)v12 + 12)
    || *((_QWORD *)v12 + 13)
    || *((_QWORD *)v12 + 14)
    || *((_QWORD *)v12 + 15)
    || *((_QWORD *)v12 + 16)
    || *((_QWORD *)v12 + 17)
    || *((_QWORD *)v12 + 18)
    || *((_QWORD *)v12 + 19)
    || *((_QWORD *)v12 + 20))
  {
    v72 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v72 != -1)
    {
      v93 = &v91;
      v92 = &v93;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v74 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
    WTF::printInternal(v74, (WTF::PrintStream *)"Block ", v75);
    WTF::printInternal(v74, v12);
    WTF::printInternal(v74, (WTF::PrintStream *)": marks not empty!\n", v76);
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
    v77 = atomic_load(v12 + 6);
    v78 = (WTF::PrintStream *)(v77 & 1);
    v79 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
    WTF::printInternal(v79, (WTF::PrintStream *)"Block lock is held: ", v80);
    WTF::printInternal(v79, v78);
    WTF::printInternal(v79, (WTF::PrintStream *)"\n", v81);
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
    v82 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
    WTF::printInternal(v82, (WTF::PrintStream *)"Marking version of block: ", v83);
    WTF::printInternal(v82, (WTF::PrintStream *)v12[8]);
    WTF::printInternal(v82, (WTF::PrintStream *)"\n", v84);
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
    v85 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v86 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
    WTF::printInternal(v86, (WTF::PrintStream *)"Marking version of heap: ", v87);
    WTF::printInternal(v86, v85);
    WTF::printInternal(v86, (WTF::PrintStream *)"\n", v88);
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
    __break(0xC471u);
LABEL_94:
    JUMPOUT(0x1985C9BA8);
  }
  v17 = (16 * v10);
  v18 = a1[1];
  v19 = &v12[4 * v18];
  v20 = 0x4000 - 16 * v18;
  if (v20 >= 0x3ED1)
  {
    __break(0xC471u);
    goto LABEL_94;
  }
  v21 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_25;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_25:
  v26 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v27 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v27 + 24) &= ~(1 << a1[3]);
  v28 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v28 + 16) &= ~(1 << a1[3]);
  v29 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v29) = __ldxr(v21);
  v89 = v8;
  if ((_DWORD)v29 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, a3, a4, a5, a6, a7, a8);
LABEL_30:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v30 = v12 + 6;
    while (1)
    {
      v31 = *v30;
      if ((*v30 & 3) != 1)
        break;
      v32 = __ldxr(v30);
      if (v32 == v31)
      {
        if (!__stxr(v31 & 0xFFFFFFFE, v30))
          goto LABEL_65;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v30, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_65:
  if (v18 <= 0x3FF)
  {
    v53 = (unint64_t)&v12[4 * v18];
    do
    {
      if (*(_DWORD *)v53)
      {
        v54 = *(WTF::StringImpl **)(v53 + 8);
        *(_QWORD *)(v53 + 8) = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::~StringImpl(v54, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
          }
          else
          {
            *(_DWORD *)v54 -= 2;
          }
        }
        *(_DWORD *)v53 = 0;
        *(_DWORD *)(v53 + 8) = 1;
      }
      v53 += v17;
    }
    while (v53 < (unint64_t)(v12 + 4096));
  }
  *((_QWORD *)v19 + 1) = ((v20 << 32) | 1) ^ v16;
  *(_QWORD *)v89 = v19;
  *((_QWORD *)v89 + 1) = (char *)v19 + v20;
  *((_QWORD *)v89 + 2) = (char *)v19 + 1;
  *((_QWORD *)v89 + 3) = v16;
  *((_DWORD *)v89 + 8) = v20;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 11);
  v11 = *(_QWORD *)(v9 + 168);
  v12 = *(_QWORD *)(v9 + 160) ^ (*(_QWORD *)(v9 + 160) << 23);
  *(_QWORD *)(v9 + 160) = v11;
  *(_QWORD *)(v9 + 168) = (v11 >> 26) ^ (v12 >> 17) ^ v11 ^ v12;
  v13 = *a1;
  v14 = a1[1];
  v15 = 1024 - *a1;
  if (v15 >= v14)
  {
    do
    {
      v16 = v10 + 16 * v15;
      if (*(_DWORD *)v16)
      {
        v17 = *(WTF::StringImpl **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        *(_DWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 1;
        v13 = *a1;
        v14 = a1[1];
      }
      v15 -= v13;
    }
    while (v15 >= v14);
    v9 = *((_QWORD *)a1 + 10);
  }
  if (*(_BYTE *)(v9 + 445))
  {
    v26 = (unsigned int *)(v10 + 24);
    while (1)
    {
      v27 = *v26;
      if ((*v26 & 3) != 1)
        break;
      v28 = __ldxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 & 0xFFFFFFFE, v26))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v26, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_18:
  v29 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, v29))
  {
    goto LABEL_22;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v29);
LABEL_22:
  v31 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v32 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v32 + 24) &= ~(1 << a1[3]);
  v33 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v33 + 16) &= ~(1 << a1[3]);
  v34 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v34 + 4) &= ~(1 << a1[3]);
  v35 = v31 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v35 + 4) |= 1 << a1[3];
  LODWORD(v35) = __ldxr(v29);
  if ((_DWORD)v35 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v29))
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = a2;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  v14 = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = v14;
  v15 = v14 + v12;
  v16 = *a1;
  v17 = 1024 - v16;
  if (1024 - (int)v16 >= (int)a1[1])
  {
    v20 = 0;
    v19 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v18 = v11 + 16 * v17;
      if (*(_DWORD *)v18)
      {
        v23 = *(WTF::StringImpl **)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v23 -= 2;
          }
        }
        *(_DWORD *)v18 = 0;
        *(_DWORD *)(v18 + 8) = 1;
        v16 = *a1;
      }
      v24 = v17;
      if (v17 + (unint64_t)v16 >= v22)
      {
        v27 = v16;
      }
      else
      {
        v25 = v11 + 16 * v22;
        v26 = (v20 << 36) | 1;
        if (v21)
          v26 = ((int)v21 - (int)v25) | (unint64_t)(v20 << 36);
        *(_QWORD *)(v25 + 8) = v26 ^ v15;
        v19 += 16 * v20;
        v27 = *a1;
        v21 = v11 + 16 * v22;
        v20 = 0;
      }
      v20 += v16;
      v17 -= v27;
      v16 = v27;
      v22 = v24;
    }
    while (v17 >= (int)a1[1]);
    if (v20)
    {
      v36 = (v20 << 36) | 1;
      if (v21)
        v36 = ((int)v21 - (int)v18) | (unint64_t)(v20 << 36);
      *(_QWORD *)(v18 + 8) = v36 ^ v15;
      v19 += 16 * v20;
    }
    else
    {
      v18 = v21;
    }
    v8 = a2;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v37 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v38 = *v37;
      if ((*v37 & 3) != 1)
        break;
      v39 = __ldxr(v37);
      if (v39 == v38)
      {
        if (!__stxr(v38 & 0xFFFFFFFE, v37))
          goto LABEL_31;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v37, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_31:
  if (v18)
  {
    v40 = *(_QWORD *)(v18 + 8) ^ v15;
    *(_QWORD *)v8 = v18;
    *((_QWORD *)v8 + 1) = v18 + HIDWORD(v40);
    v41 = v18 + (int)v40;
  }
  else
  {
    v15 = 0;
    v19 = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    v41 = 1;
  }
  *((_QWORD *)v8 + 2) = v41;
  *((_QWORD *)v8 + 3) = v15;
  *((_DWORD *)v8 + 8) = v19;
  v42 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v42))
  {
    __clrex();
  }
  else if (!__stxr(1u, v42))
  {
    goto LABEL_37;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v42);
LABEL_37:
  v44 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v45 = v44 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v45 + 24) &= ~(1 << a1[3]);
  v46 = v44 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v46 + 16) &= ~(1 << a1[3]);
  v47 = v44 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v47 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v47) = __ldxr(v42);
  if ((_DWORD)v47 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v42))
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v10 = *(unsigned int **)(a1 + 48);
  v11 = *(_QWORD *)a1 + 16 * (_QWORD)a2;
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v11)
  {
    v12 = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    *(_DWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v30 = **(_DWORD **)(a1 + 40);
      if (v30 >= 8)
        memset_pattern16((void *)v11, &unk_1991567C0, v30 & 0xFFFFFFF8);
    }
    v13 = *v10;
    v15 = *(_QWORD **)(a1 + 56);
    v14 = *(uint64_t **)(a1 + 64);
    v16 = *v14;
    if ((unint64_t)a2 + v13 < *v15)
    {
      v17 = 16 * v16;
      v18 = *(_QWORD *)a1 + 16 * *v15;
      v19 = *(_QWORD **)(a1 + 72);
      v20 = (v16 << 36) | 1;
      v21 = (int)(*v19 - v18) | (unint64_t)(v16 << 36);
      if (!*v19)
        v21 = v20;
      *(_QWORD *)(v18 + 8) = v21 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v17;
      *v19 = v18;
      v15 = *(_QWORD **)(a1 + 56);
      v14 = *(uint64_t **)(a1 + 64);
      *v14 = 0;
      v16 = 0;
    }
    *v14 = v16 + v13;
    *v15 = a2;
  }
}

uint64_t JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (**(_DWORD **)result == 1)
  {
    v1 = **(_QWORD **)(result + 8);
    if (v1)
    {
      v2 = 16 * v1;
      v3 = *(_QWORD *)(result + 16) + 16 * **(_QWORD **)(result + 24);
      v4 = *(_QWORD **)(result + 32);
      v5 = (v1 << 36) | 1;
      v6 = (int)(*v4 - v3) | (unint64_t)(v1 << 36);
      if (!*v4)
        v6 = v5;
      *(_QWORD *)(v3 + 8) = v6 ^ **(_QWORD **)(result + 40);
      **(_QWORD **)(result + 48) += v2;
      *v4 = v3;
    }
  }
  return result;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v10 = *(unsigned int **)(a1 + 48);
  v11 = *(_QWORD *)a1 + 16 * (_QWORD)a2;
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v11)
  {
    v12 = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    *(_DWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v30 = **(_DWORD **)(a1 + 40);
      if (v30 >= 8)
        memset_pattern16((void *)v11, &unk_1991567C0, v30 & 0xFFFFFFF8);
    }
    v21 = *v10;
    v23 = *(_QWORD **)(a1 + 56);
    v22 = *(uint64_t **)(a1 + 64);
    v24 = *v22;
    if ((unint64_t)a2 + v21 < *v23)
    {
      v25 = 16 * v24;
      v26 = *(_QWORD *)a1 + 16 * *v23;
      v27 = *(_QWORD **)(a1 + 72);
      v28 = (v24 << 36) | 1;
      v29 = (int)(*v27 - v26) | (unint64_t)(v24 << 36);
      if (!*v27)
        v29 = v28;
      *(_QWORD *)(v26 + 8) = v29 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v25;
      *v27 = v26;
      v23 = *(_QWORD **)(a1 + 56);
      v22 = *(uint64_t **)(a1 + 64);
      *v22 = 0;
      v24 = 0;
    }
    *v22 = v24 + v21;
    *v23 = a2;
  }
}

uint64_t JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (**(_DWORD **)result == 1)
  {
    v1 = **(_QWORD **)(result + 8);
    if (v1)
    {
      v2 = 16 * v1;
      v3 = *(_QWORD *)(result + 16) + 16 * **(_QWORD **)(result + 24);
      v4 = *(_QWORD **)(result + 32);
      v5 = (v1 << 36) | 1;
      v6 = (int)(*v4 - v3) | (unint64_t)(v1 << 36);
      if (!*v4)
        v6 = v5;
      *(_QWORD *)(v3 + 8) = v6 ^ **(_QWORD **)(result + 40);
      **(_QWORD **)(result + 48) += v2;
      *v4 = v3;
    }
  }
  return result;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v10 = *(unsigned int **)(a1 + 48);
  v11 = *(_QWORD *)a1 + 16 * (_QWORD)a2;
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v11)
  {
    v12 = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    *(_DWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v30 = **(_DWORD **)(a1 + 40);
      if (v30 >= 8)
        memset_pattern16((void *)v11, &unk_1991567C0, v30 & 0xFFFFFFF8);
    }
    v13 = *v10;
    v15 = *(_QWORD **)(a1 + 56);
    v14 = *(uint64_t **)(a1 + 64);
    v16 = *v14;
    if ((unint64_t)a2 + v13 < *v15)
    {
      v25 = 16 * v16;
      v26 = *(_QWORD *)a1 + 16 * *v15;
      v27 = *(_QWORD **)(a1 + 72);
      v28 = (v16 << 36) | 1;
      v29 = (int)(*v27 - v26) | (unint64_t)(v16 << 36);
      if (!*v27)
        v29 = v28;
      *(_QWORD *)(v26 + 8) = v29 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v25;
      *v27 = v26;
      v15 = *(_QWORD **)(a1 + 56);
      v14 = *(uint64_t **)(a1 + 64);
      *v14 = 0;
      v16 = 0;
    }
    *v14 = v16 + v13;
    *v15 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<false,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)0,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)0,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(WTF::PrintStream &)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  WTF *v6;
  const char *v7;
  const char *v8;
  char v9;
  WTF::PrintStream *v10;
  WTF *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  WTF *v15;
  const char *v16;
  const char *v17;
  WTF::PrintStream *v18;
  WTF *v19;
  const char *v20;
  const char *v21;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(const void **)a1;
  v6 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v6, (WTF::PrintStream *)"Block ", v7);
  WTF::printInternal(v6, v5);
  WTF::printInternal(v6, (WTF::PrintStream *)": marks not empty!\n", v8);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v9 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 8) + 24));
  v10 = (WTF::PrintStream *)(v9 & 1);
  v11 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v11, (WTF::PrintStream *)"Block lock is held: ", v12);
  WTF::printInternal(v11, v10);
  WTF::printInternal(v11, (WTF::PrintStream *)"\n", v13);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v15, (WTF::PrintStream *)"Marking version of block: ", v16);
  WTF::printInternal(v15, (WTF::PrintStream *)*(unsigned int *)(v14 + 32));
  WTF::printInternal(v15, (WTF::PrintStream *)"\n", v17);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v18 = (WTF::PrintStream *)*(unsigned int *)(*(_QWORD *)(v4 + 80) + 432);
  v19 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v19, (WTF::PrintStream *)"Marking version of heap: ", v20);
  WTF::printInternal(v19, v18);
  WTF::printInternal(v19, (WTF::PrintStream *)"\n", v21);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  __break(0xC471u);
}

void JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::~IsoInlinedHeapCellType()
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::finishSweep(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  signed int v70;
  int v71;
  int v72;
  int v73;
  _BOOL4 v74;
  int v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v83;
  BOOL v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unsigned __int8 *v91;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  signed int v104;
  int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  char v123;
  uint64_t v124;
  unsigned __int16 *v125;
  unint64_t v126;
  _QWORD *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  unsigned __int16 *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned __int16 *v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  size_t v208;
  unsigned __int8 *v209;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unint64_t StatusReg;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unsigned __int8 *v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  signed int v241;
  int v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int v265;
  BOOL v266;
  int v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  unsigned __int8 *v296;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  signed int v309;
  int v310;
  WTF::StringImpl *v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned __int16 *v321;
  unsigned int v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int v325;
  unint64_t v326;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int v333;
  size_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  WTF::StringImpl *v338;
  unint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  int v348;
  unsigned int *v349;
  unsigned int v350;
  unsigned int v351;
  unint64_t v352;
  int v353;
  unsigned int *v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int *v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int *v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int v366;
  uint64_t v367;
  unsigned __int16 *v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unsigned int *v377;
  unsigned int v378;
  unsigned int v379;
  uint64_t v380;
  unsigned __int16 *v381;
  unsigned int v382;
  uint64_t v383;
  int v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned __int16 *v389;
  unsigned int v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int *v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  unsigned __int16 *v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WTF::StringImpl *v412;
  unint64_t v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unsigned int *v438;
  unsigned int v439;
  unsigned int v440;
  uint64_t v441;
  uint64_t v442;
  unsigned __int16 *v443;
  unsigned int v444;
  WTF::StringImpl *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  WTF::StringImpl *v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void *v473;
  uint64_t v474;
  int v475;
  size_t __len;
  uint64_t v477;
  unint64_t v478;
  unsigned int v479;
  unsigned int v480;
  unint64_t v481;
  unsigned int v482;
  unsigned int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  char v490;
  uint64_t v491;
  int v492;
  int v493;
  size_t v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  uint64_t v498;
  char v499;
  char *v500;
  uint64_t *v501;
  uint64_t v502;
  unint64_t *v503;
  uint64_t *v504;
  unint64_t *v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t *v508;
  char **v509;
  char *v510;
  char *v511;
  uint64_t *v512;
  unsigned int *v513;
  unint64_t *v514;
  uint64_t *v515;
  uint64_t *v516;
  unint64_t *v517;
  uint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD v528[256];
  unint64_t v529;

  v12 = a3;
  v14 = &v507;
  v15 = a3 != 0;
  v16 = *((unsigned __int8 *)a2 + 8);
  v17 = *((_QWORD *)a2 + 10);
  v18 = *((_QWORD *)a2 + 11);
  LODWORD(v19) = *(unsigned __int8 *)(v17 + 445);
  v20 = *((_QWORD *)a2 + 3);
  LODWORD(v21) = ~*(_DWORD *)(*(_QWORD *)(v20 + 32) + 40 * (a2[3] >> 5) + 4) >> a2[3];
  v22 = (WTF *)byte_1ECF4C400;
  v23 = *(_QWORD *)(v18 + 8);
  v24 = *(unsigned int *)(v23 + 436);
  v25 = *(_DWORD *)(v17 + 432);
  v27 = *(_DWORD *)(v18 + 32);
  v26 = *(unsigned int *)(v18 + 36);
  v28 = v27 == v25;
  v497 = v12;
  v498 = v18;
  if (*((_BYTE *)a2 + 8) != 1)
  {
    v10 = *(unsigned int *)(v18 + 36);
    v9 = *(unsigned int *)(v23 + 436);
    v475 = byte_1ECF4C400;
    v482 = v15;
    if (*(_BYTE *)(v17 + 445))
    {
      v256 = *(unsigned __int8 *)(v23 + 347);
      v257 = v27 + 1;
      v8 = 2;
      if (v27 == -1)
        v257 = 2;
      v28 = v257 == v25;
      if (v27)
        v258 = v28;
      else
        v258 = 1;
      if (v256 == 1)
        v259 = v258;
      else
        v259 = 0;
      if (v27 == v25)
        v63 = 1;
      else
        v63 = v259;
    }
    else
    {
      v63 = v27 == v25;
      if (*((_BYTE *)a2 + 8) == 1 && !byte_1ECF4C400 && (_DWORD)v26 != (_DWORD)v24)
      {
        if ((v21 & 1) != 0)
        {
          if (v12)
          {
            if (v27 != v25)
              goto LABEL_42;
            v236 = 1;
            v527 = 0x100000001;
            v237 = *a2;
            v526 = 16 * *a2;
            v238 = *(_QWORD *)(v17 + 168);
            v239 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
            v240 = (v238 >> 26) ^ (v239 >> 17) ^ v238 ^ v239;
            *(_QWORD *)(v17 + 160) = v238;
            *(_QWORD *)(v17 + 168) = v240;
            v524 = v17;
            v525 = v240 + v238;
            v522 = 0;
            v523 = &v499;
            v520 = 0;
            v521 = 0;
            v529 = 0;
            v28 = v498;
            v507 = v498;
            v508 = &v527;
            v509 = &v523;
            v510 = (char *)&v527 + 4;
            v511 = (char *)&v526 + 4;
            v512 = &v526;
            v513 = a2;
            v514 = &v519;
            v515 = &v520;
            v68 = (unint64_t)&v521;
            v516 = &v521;
            v517 = &v525;
            v69 = (unint64_t)&v522;
            v518 = &v522;
            v519 = 0;
            v500 = (char *)&v527 + 4;
            v501 = &v520;
            v502 = v498;
            v503 = &v519;
            v504 = &v521;
            v505 = &v525;
            v506 = &v522;
            v241 = 1024 - v237;
            if (1024 - v237 >= (int)a2[1])
            {
              v16 = 0;
              v10 = v498 + 40;
              LODWORD(v11) = 1;
              v242 = 1;
              v9 = 1;
              v63 = (uint64_t)&unk_1991567C0;
              while (v241 <= 0x3FF)
              {
                v19 = v241;
                if (((*(_QWORD *)(v10 + (((unint64_t)v241 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v241) & 1) != 0)
                {
                  v9 = 0;
                }
                else if ((_DWORD)v527 == 2)
                {
                  v529 = v16 + 1;
                  if (v16 > 0x3FF)
                    goto LABEL_903;
                  *((_WORD *)v528 + v16++) = v241;
                }
                else
                {
                  v21 = v498 + 16 * v241;
                  if ((_DWORD)v527 && *(_DWORD *)v21)
                  {
                    v243 = *(WTF::StringImpl **)(v21 + 8);
                    if ((v243 & 1) == 0)
                    {
                      *(_QWORD *)(v21 + 8) = 0;
                      if (v243)
                      {
                        if (*(_DWORD *)v243 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v243, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                          WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
                          LODWORD(v11) = HIDWORD(v527);
                        }
                        else
                        {
                          *(_DWORD *)v243 -= 2;
                        }
                      }
                    }
                    *(_DWORD *)v21 = 0;
                    *(_DWORD *)(v21 + 8) = 1;
                    v242 = v11;
                  }
                  if (v242 == 1)
                  {
                    if (HIDWORD(v526) == 1 && v526 > 7)
                      memset_pattern16((void *)v21, &unk_1991567C0, v526 & 0xFFFFFFF8);
                    v244 = *a2;
                    v245 = v520;
                    if (v244 + v19 < v519)
                    {
                      v246 = v498 + 16 * v519;
                      if (v521)
                        v247 = ((int)v521 - (int)v246) | (unint64_t)(v520 << 36);
                      else
                        v247 = (v520 << 36) | 1;
                      v68 = v525;
                      *(_QWORD *)(v246 + 8) = v247 ^ v525;
                      v521 = v246;
                      v522 += 16 * v245;
                      v245 = 0;
                    }
                    v519 = v19;
                    v520 = v245 + v244;
                    v242 = 1;
                  }
                }
                v241 = v19 - *a2;
                if (v241 < (int)a2[1])
                {
                  v236 = v527;
                  if ((_DWORD)v527 == 2)
                  {
                    v236 = 2;
                  }
                  else if ((_DWORD)v11 == 1 && v520)
                  {
                    v281 = 16 * v520;
                    v282 = v498 + 16 * v519;
                    v283 = (v520 << 36) | 1;
                    if (v521)
                      v283 = ((int)v521 - (int)v282) | (unint64_t)(v520 << 36);
                    *(_QWORD *)(v282 + 8) = v283 ^ v525;
                    v521 = v282;
                    v522 += v281;
                  }
                  goto LABEL_435;
                }
              }
              goto LABEL_903;
            }
            v16 = 0;
            LOBYTE(v9) = 1;
LABEL_435:
            if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
            {
              v364 = (unsigned int *)(v498 + 24);
              while (1)
              {
                v365 = *v364;
                if ((*v364 & 3) != 1)
                  break;
                v366 = __ldxr(v364);
                if (v366 == v365)
                {
                  if (!__stxr(v365 & 0xFFFFFFFE, v364))
                    goto LABEL_436;
                }
                else
                {
                  __clrex();
                }
              }
              WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v364, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
              v236 = v527;
            }
LABEL_436:
            if (v236 == 2)
            {
              if (v16)
              {
                v367 = 2 * v16;
                v368 = (unsigned __int16 *)v528;
                do
                {
                  v369 = *v368++;
                  JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v369, v24, v26, a5, a6, a7, (uint64_t)a8);
                  v367 -= 2;
                }
                while (v367);
              }
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
            }
            if (HIDWORD(v527) == 1)
            {
              v284 = v521;
              if (v521)
              {
                v285 = v522;
                v286 = v525;
                v287 = *(_QWORD *)(v521 + 8) ^ v525;
                *(_QWORD *)v497 = v521;
                *(_QWORD *)(v497 + 8) = v284 + HIDWORD(v287);
                v288 = v284 + (int)v287;
              }
              else
              {
                v286 = 0;
                v285 = 0;
                *(_QWORD *)v497 = 0;
                *(_QWORD *)(v497 + 8) = 0;
                v288 = 1;
              }
              *(_QWORD *)(v497 + 16) = v288;
              *(_QWORD *)(v497 + 24) = v286;
              *(_DWORD *)(v497 + 32) = v285;
            }
LABEL_830:
            v111 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
            if (__ldaxr(v111))
            {
              __clrex();
            }
            else if (!__stxr(1u, v111))
            {
LABEL_833:
              v113 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
              v434 = v113 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v434 + 24) &= ~(1 << a2[3]);
              v435 = v113 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v435 + 16) &= ~(1 << a2[3]);
              v436 = v113 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v436 + 4) &= ~(1 << a2[3]);
              if (HIDWORD(v527) == 1)
                goto LABEL_729;
              if ((v9 & 1) == 0)
                goto LABEL_730;
LABEL_137:
              v117 = v113 + 40 * (a2[3] >> 5);
              v118 = 1 << a2[3];
LABEL_138:
              *(_DWORD *)(v117 + 4) |= v118;
              goto LABEL_730;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v111);
            goto LABEL_833;
          }
          if (v27 == v25)
          {
            v304 = 1;
            v527 = 1;
            v305 = *a2;
            v526 = 16 * *a2;
            v306 = *(_QWORD *)(v17 + 168);
            v307 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
            v308 = (v306 >> 26) ^ (v307 >> 17) ^ v306 ^ v307;
            *(_QWORD *)(v17 + 160) = v306;
            *(_QWORD *)(v17 + 168) = v308;
            v524 = v17;
            v525 = v308 + v306;
            v522 = 0;
            v523 = &v499;
            v520 = 0;
            v521 = 0;
            v529 = 0;
            v28 = v498;
            v507 = v498;
            v508 = &v527;
            v509 = &v523;
            v510 = (char *)&v527 + 4;
            v511 = (char *)&v526 + 4;
            v512 = &v526;
            v513 = a2;
            v514 = &v519;
            v515 = &v520;
            v68 = (unint64_t)&v521;
            v516 = &v521;
            v517 = &v525;
            v69 = (unint64_t)&v522;
            v518 = &v522;
            v519 = 0;
            v500 = (char *)&v527 + 4;
            v501 = &v520;
            v502 = v498;
            v503 = &v519;
            v504 = &v521;
            v505 = &v525;
            v506 = &v522;
            v309 = 1024 - v305;
            if (1024 - v305 >= (int)a2[1])
            {
              v10 = 0;
              v310 = 0;
              v21 = 0;
              v16 = v498 + 40;
              v63 = 1;
              while (v309 <= 0x3FF)
              {
                v11 = v309;
                if (((*(_QWORD *)(v16 + (((unint64_t)v309 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v309) & 1) != 0)
                {
                  v63 = 0;
                }
                else if ((_DWORD)v527 == 2)
                {
                  v529 = v21 + 1;
                  if (v21 > 0x3FF)
                    goto LABEL_903;
                  *((_WORD *)v528 + v21++) = v309;
                }
                else
                {
                  v9 = v498 + 16 * v309;
                  if ((_DWORD)v527 && *(_DWORD *)v9)
                  {
                    v311 = *(WTF::StringImpl **)(v9 + 8);
                    if ((v311 & 1) == 0)
                    {
                      *(_QWORD *)(v9 + 8) = 0;
                      if (v311)
                      {
                        if (*(_DWORD *)v311 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v311, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                          WTF::fastFree(v312, v313, v314, v315, v316, v317, v318, v319);
                          v10 = HIDWORD(v527);
                        }
                        else
                        {
                          *(_DWORD *)v311 -= 2;
                        }
                      }
                    }
                    *(_DWORD *)v9 = 0;
                    *(_DWORD *)(v9 + 8) = 1;
                    v310 = v10;
                  }
                  if (v310 == 1)
                  {
                    if (HIDWORD(v526) == 1 && v526 > 7)
                      memset_pattern16((void *)v9, &unk_1991567C0, v526 & 0xFFFFFFF8);
                    v370 = *a2;
                    v371 = v520;
                    if (v370 + v11 < v519)
                    {
                      v372 = v498 + 16 * v519;
                      if (v521)
                        v373 = (int)v521 - (int)v372;
                      else
                        v373 = 1;
                      v68 = v525;
                      *(_QWORD *)(v372 + 8) = (v373 | (v520 << 36)) ^ v525;
                      v521 = v372;
                      v522 += 16 * v371;
                      v371 = 0;
                    }
                    v519 = v11;
                    v520 = v371 + v370;
                    v310 = 1;
                  }
                }
                v309 = v11 - *a2;
                if (v309 < (int)a2[1])
                {
                  v304 = v527;
                  if ((_DWORD)v527 != 2 && (_DWORD)v10 == 1 && v520)
                  {
                    v374 = 16 * v520;
                    v375 = v498 + 16 * v519;
                    v376 = (v520 << 36) | 1;
                    if (v521)
                      v376 = ((int)v521 - (int)v375) | (unint64_t)(v520 << 36);
                    *(_QWORD *)(v375 + 8) = v376 ^ v525;
                    v521 = v375;
                    v522 += v374;
                  }
                  goto LABEL_494;
                }
              }
              goto LABEL_903;
            }
            v21 = 0;
            LOBYTE(v63) = 1;
LABEL_494:
            if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
            {
              v377 = (unsigned int *)(v498 + 24);
              while (1)
              {
                v378 = *v377;
                if ((*v377 & 3) != 1)
                  break;
                v379 = __ldxr(v377);
                if (v379 == v378)
                {
                  if (!__stxr(v378 & 0xFFFFFFFE, v377))
                    goto LABEL_495;
                }
                else
                {
                  __clrex();
                }
              }
              WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v377, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
              v304 = v527;
            }
LABEL_495:
            if (v304 != 2)
              goto LABEL_765;
            if (v21)
            {
              v320 = 2 * v21;
              v321 = (unsigned __int16 *)v528;
              do
              {
                v322 = *v321++;
                JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v322, v24, v26, a5, a6, a7, (uint64_t)a8);
                v320 -= 2;
              }
              while (v320);
            }
            goto LABEL_784;
          }
LABEL_491:
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>((uint64_t)a2, (uint64_t)&v499, v24, v26, a5, a6, a7, (uint64_t)a8);
          return;
        }
        if (v12)
        {
          if (v27 == v25)
          {
            v176 = (int *)a2;
            v177 = v12;
            goto LABEL_248;
          }
          v527 = 0x100000001;
          v202 = *a2;
          v526 = 16 * *a2;
          v203 = *(_QWORD *)(v17 + 168);
          v204 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
          v205 = (v203 >> 26) ^ (v204 >> 17) ^ v203 ^ v204;
          *(_QWORD *)(v17 + 160) = v203;
          *(_QWORD *)(v17 + 168) = v205;
          v524 = v17;
          v525 = v205 + v203;
          v523 = &v499;
          if (!BYTE1(qword_1ECF4C414))
          {
            v347 = 0;
            v521 = 0;
            v522 = 0;
            v520 = 0;
            v529 = 0;
            v28 = v498;
            v507 = v498;
            v508 = &v527;
            v509 = &v523;
            v510 = (char *)&v527 + 4;
            v511 = (char *)&v526 + 4;
            v512 = &v526;
            v513 = a2;
            v514 = &v519;
            v515 = &v520;
            v68 = (unint64_t)&v521;
            v516 = &v521;
            v517 = &v525;
            v69 = (unint64_t)&v522;
            v518 = &v522;
            v519 = 0;
            v500 = (char *)&v527 + 4;
            v501 = &v520;
            v502 = v498;
            v503 = &v519;
            v504 = &v521;
            v505 = &v525;
            v506 = &v522;
            v9 = (1024 - v202);
            v348 = a2[1];
            if ((int)v9 < v348)
              goto LABEL_601;
            v347 = 0;
            v63 = (uint64_t)v528;
            do
            {
              if ((_DWORD)v527 == 2)
              {
                v529 = v347 + 1;
                if (v347 > 0x3FF)
                  goto LABEL_903;
                *((_WORD *)v528 + v347++) = v9;
              }
              else
              {
                JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)(int)v9, v24, v26, a5, a6, a7, (uint64_t)a8);
                v202 = *a2;
                v348 = a2[1];
              }
              v9 = (v9 - v202);
            }
            while ((int)v9 >= v348);
            if ((_DWORD)v527 != 2)
LABEL_601:
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
            if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
            {
              v349 = (unsigned int *)(v498 + 24);
              while (1)
              {
                v350 = *v349;
                if ((*v349 & 3) != 1)
                  break;
                v351 = __ldxr(v349);
                if (v351 == v350)
                {
                  if (!__stxr(v350 & 0xFFFFFFFE, v349))
                    goto LABEL_687;
                }
                else
                {
                  __clrex();
                }
              }
              WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v349, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
            }
LABEL_687:
            if ((_DWORD)v527 == 2)
            {
              if (v347)
              {
                v380 = 2 * v347;
                v381 = (unsigned __int16 *)v528;
                do
                {
                  v382 = *v381++;
                  JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v382, v24, v26, a5, a6, a7, (uint64_t)a8);
                  v380 -= 2;
                }
                while (v380);
              }
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
            }
            if (HIDWORD(v527) == 1)
            {
              v383 = v521;
              if (v521)
              {
                v384 = v522;
                v385 = v525;
                v386 = *(_QWORD *)(v521 + 8) ^ v525;
                *(_QWORD *)v497 = v521;
                *(_QWORD *)(v497 + 8) = v383 + HIDWORD(v386);
                v387 = v383 + (int)v386;
              }
              else
              {
                v385 = 0;
                v384 = 0;
                *(_QWORD *)v497 = 0;
                *(_QWORD *)(v497 + 8) = 0;
                v387 = 1;
              }
              *(_QWORD *)(v497 + 16) = v387;
              *(_QWORD *)(v497 + 24) = v385;
              *(_DWORD *)(v497 + 32) = v384;
            }
LABEL_281:
            v111 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
            if (__ldaxr(v111))
            {
              __clrex();
            }
            else if (!__stxr(1u, v111))
            {
LABEL_284:
              v197 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
              v198 = v197 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v198 + 24) &= ~(1 << a2[3]);
              v199 = v197 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v199 + 16) &= ~(1 << a2[3]);
              v200 = v197 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v200 + 4) &= ~(1 << a2[3]);
              if (HIDWORD(v527) != 1)
              {
                v117 = v197 + 40 * (a2[3] >> 5);
                v118 = 1 << a2[3];
                goto LABEL_138;
              }
              goto LABEL_729;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v111);
            goto LABEL_284;
          }
          v206 = a2[1];
          v207 = (_QWORD *)(v18 + 16 * v206);
          v496 = a2[1];
          v208 = 0x4000 - 16 * v206;
          if (v208 >= 0x3ED1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985CCFF8);
          }
          v209 = (unsigned __int8 *)(v20 + 56);
          if (__ldaxr((unsigned __int8 *)(v20 + 56)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v209))
          {
LABEL_306:
            v211 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
            v212 = v211 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v212 + 24) &= ~(1 << a2[3]);
            v213 = v211 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v213 + 16) &= ~(1 << a2[3]);
            v214 = v211 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v214 + 4) &= ~(1 << a2[3]);
            if (HIDWORD(v527) == 1)
            {
              *((_BYTE *)a2 + 10) = 1;
            }
            else
            {
              v357 = v211 + 40 * (a2[3] >> 5);
              *(_DWORD *)(v357 + 4) |= 1 << a2[3];
            }
            v215 = __ldxr(v209);
            if (v215 == 1)
            {
              if (!__stlxr(0, v209))
                goto LABEL_314;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v209, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
LABEL_314:
            if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
            {
              v358 = (unsigned int *)(v18 + 24);
              while (1)
              {
                v359 = *v358;
                if ((*v358 & 3) != 1)
                  break;
                v360 = __ldxr(v358);
                if (v360 == v359)
                {
                  if (!__stxr(v359 & 0xFFFFFFFE, v358))
                    goto LABEL_315;
                }
                else
                {
                  __clrex();
                }
              }
              WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v358, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
            }
LABEL_315:
            if (v496 > 0x3FF || !(_DWORD)v527)
            {
LABEL_331:
              if (HIDWORD(v527) == 1)
              {
                if (HIDWORD(v526) == 1 && v496 != 1024)
                  memset_pattern16(v207, &unk_1991567C0, v208);
                v221 = v525;
                v207[1] = v525 ^ ((v208 << 32) | 1);
                *(_QWORD *)v497 = v207;
                *(_QWORD *)(v497 + 8) = (char *)v207 + v208;
                *(_QWORD *)(v497 + 16) = (char *)v207 + 1;
                *(_QWORD *)(v497 + 24) = v221;
                *(_DWORD *)(v497 + 32) = v208;
              }
              return;
            }
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            v217 = (unint64_t)v207;
            while (!*(_DWORD *)v217)
            {
LABEL_321:
              v217 += v526;
              if (v217 >= v498 + 0x4000)
                goto LABEL_331;
            }
            v218 = *(_QWORD *)(v217 + 8);
            if ((v218 & 1) != 0 || (*(_QWORD *)(v217 + 8) = 0, !v218))
            {
LABEL_320:
              *(_DWORD *)v217 = 0;
              *(_DWORD *)(v217 + 8) = 1;
              goto LABEL_321;
            }
            if (*(_DWORD *)v218 != 2)
            {
              *(_DWORD *)v218 -= 2;
              goto LABEL_320;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v218, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
            v219 = *(_QWORD *)(StatusReg + 752);
            if (!v219)
            {
              pas_try_deallocate_slow_no_cache(v218, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_320;
            }
            if (!(v218 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v218 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v218)) & 1) != 0)
            {
LABEL_329:
              v220 = *(unsigned int *)(v219 + 8000);
              if (v220 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v219, v218, (os_unfair_lock_s *)5, v26, a5, a6, a7, (uint64_t)a8);
              }
              else
              {
                *(_QWORD *)(v219 + 8 * v220) = v218 | 0x5000000000000;
                *(_DWORD *)(v219 + 8000) = v220 + 1;
              }
              goto LABEL_320;
            }
            if (v218 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v218 >> 24)
            {
              v26 = 0;
            }
            else
            {
              v26 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v218 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v218) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v26 == 1)
                goto LABEL_329;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v219, v218, 1, v26, a5, a6, a7, (uint64_t)a8);
            goto LABEL_320;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v209);
          goto LABEL_306;
        }
        if (v27 == v25)
          goto LABEL_347;
        v527 = 1;
        v222 = *a2;
        v526 = 16 * *a2;
        v223 = *(_QWORD *)(v17 + 168);
        v224 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
        v225 = (v223 >> 26) ^ (v224 >> 17) ^ v223 ^ v224;
        *(_QWORD *)(v17 + 160) = v223;
        *(_QWORD *)(v17 + 168) = v225;
        v524 = v17;
        v525 = v225 + v223;
        v523 = &v499;
        if (!BYTE1(qword_1ECF4C414))
        {
          v352 = 0;
          v521 = 0;
          v522 = 0;
          v520 = 0;
          v529 = 0;
          v28 = v498;
          v507 = v498;
          v508 = &v527;
          v509 = &v523;
          v510 = (char *)&v527 + 4;
          v511 = (char *)&v526 + 4;
          v512 = &v526;
          v513 = a2;
          v514 = &v519;
          v515 = &v520;
          v68 = (unint64_t)&v521;
          v516 = &v521;
          v517 = &v525;
          v69 = (unint64_t)&v522;
          v518 = &v522;
          v519 = 0;
          v500 = (char *)&v527 + 4;
          v501 = &v520;
          v502 = v498;
          v503 = &v519;
          v504 = &v521;
          v505 = &v525;
          v506 = &v522;
          v9 = (1024 - v222);
          v353 = a2[1];
          if ((int)v9 < v353)
            goto LABEL_610;
          v352 = 0;
          v63 = (uint64_t)v528;
          do
          {
            if ((_DWORD)v527 == 2)
            {
              v529 = v352 + 1;
              if (v352 > 0x3FF)
                goto LABEL_903;
              *((_WORD *)v528 + v352++) = v9;
            }
            else
            {
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)(int)v9, v24, v26, a5, a6, a7, (uint64_t)a8);
              v222 = *a2;
              v353 = a2[1];
            }
            v9 = (v9 - v222);
          }
          while ((int)v9 >= v353);
          if ((_DWORD)v527 != 2)
LABEL_610:
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v354 = (unsigned int *)(v498 + 24);
            while (1)
            {
              v355 = *v354;
              if ((*v354 & 3) != 1)
                break;
              v356 = __ldxr(v354);
              if (v356 == v355)
              {
                if (!__stxr(v355 & 0xFFFFFFFE, v354))
                  goto LABEL_697;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v354, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
          }
LABEL_697:
          if ((_DWORD)v527 != 2)
            goto LABEL_269;
          if (v352)
          {
            v388 = 2 * v352;
            v389 = (unsigned __int16 *)v528;
            do
            {
              v390 = *v389++;
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v390, v24, v26, a5, a6, a7, (uint64_t)a8);
              v388 -= 2;
            }
            while (v388);
          }
          goto LABEL_268;
        }
        v226 = a2[1];
        v227 = v498 + 16 * v226;
        if ((unint64_t)(16 * v226 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
        {
          __break(0xC471u);
          JUMPOUT(0x1985CD010);
        }
        v228 = (unsigned __int8 *)(v20 + 56);
        if (__ldaxr((unsigned __int8 *)(v20 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v228))
        {
LABEL_342:
          v230 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v231 = v230 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v231 + 24) &= ~(1 << a2[3]);
          v232 = v230 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v232 + 16) &= ~(1 << a2[3]);
          v233 = v230 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v233 + 4) &= ~(1 << a2[3]);
          if (HIDWORD(v527) == 1)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v234 = v230 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v234 + 4) |= 1 << a2[3];
          }
          v235 = __ldxr(v228);
          if (v235 == 1)
          {
            if (!__stlxr(0, v228))
              goto LABEL_443;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v228, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
LABEL_443:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v361 = (unsigned int *)(v498 + 24);
            while (1)
            {
              v362 = *v361;
              if ((*v361 & 3) != 1)
                break;
              v363 = __ldxr(v361);
              if (v363 == v362)
              {
                if (!__stxr(v362 & 0xFFFFFFFE, v361))
                  goto LABEL_444;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v361, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
          }
LABEL_444:
          if (v226 > 0x3FF || !(_DWORD)v527)
            return;
          v289 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          while (!*(_DWORD *)v227)
          {
LABEL_450:
            v227 += v526;
            if (v227 >= v498 + 0x4000)
              return;
          }
          v290 = *(_QWORD *)(v227 + 8);
          if ((v290 & 1) != 0 || (*(_QWORD *)(v227 + 8) = 0, !v290))
          {
LABEL_449:
            *(_DWORD *)v227 = 0;
            *(_DWORD *)(v227 + 8) = 1;
            goto LABEL_450;
          }
          if (*(_DWORD *)v290 != 2)
          {
            *(_DWORD *)v290 -= 2;
            goto LABEL_449;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v290, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
          v291 = *(_QWORD *)(v289 + 752);
          if (!v291)
          {
            pas_try_deallocate_slow_no_cache(v290, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_449;
          }
          if (!(v290 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v290 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v290)) & 1) != 0)
          {
LABEL_458:
            v292 = *(unsigned int *)(v291 + 8000);
            if (v292 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v291, v290, (os_unfair_lock_s *)5, v26, a5, a6, a7, (uint64_t)a8);
            }
            else
            {
              *(_QWORD *)(v291 + 8 * v292) = v290 | 0x5000000000000;
              *(_DWORD *)(v291 + 8000) = v292 + 1;
            }
            goto LABEL_449;
          }
          if (v290 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v290 >> 24)
          {
            v26 = 0;
          }
          else
          {
            v26 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v290 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v290) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v26 == 1)
              goto LABEL_458;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v291, v290, 1, v26, a5, a6, a7, (uint64_t)a8);
          goto LABEL_449;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v228);
        goto LABEL_342;
      }
    }
    if (!v12 && *((_BYTE *)a2 + 8) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985CD030);
    }
    v260 = *a2;
    v494 = 16 * *a2;
    v261 = *(_QWORD *)(v17 + 168);
    v262 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
    v69 = (v261 >> 26) ^ (v262 >> 17);
    v68 = v69 ^ v261 ^ v262;
    *(_QWORD *)(v17 + 160) = v261;
    *(_QWORD *)(v17 + 168) = v68;
    __len = v68 + v261;
    if ((_DWORD)v26 != (_DWORD)v24 && (v21 & 1) == 0 && BYTE1(qword_1ECF4C414) != 0)
    {
      if ((_DWORD)v63
        && (*(_QWORD *)(v18 + 40)
         || *(_QWORD *)(v18 + 48)
         || *(_QWORD *)(v18 + 56)
         || *(_QWORD *)(v18 + 64)
         || *(_QWORD *)(v18 + 72)
         || *(_QWORD *)(v18 + 80)
         || *(_QWORD *)(v18 + 88)
         || *(_QWORD *)(v18 + 96)
         || *(_QWORD *)(v18 + 104)
         || *(_QWORD *)(v18 + 112)
         || *(_QWORD *)(v18 + 120)
         || *(_QWORD *)(v18 + 128)
         || *(_QWORD *)(v18 + 136)
         || *(_QWORD *)(v18 + 144)
         || *(_QWORD *)(v18 + 152)
         || *(_QWORD *)(v18 + 160)))
      {
        goto LABEL_123;
      }
      v293 = a2[1];
      v294 = (_QWORD *)(v498 + 16 * v293);
      v295 = 0x4000 - 16 * v293;
      if (v295 >= 0x3ED1)
      {
        __break(0xC471u);
        JUMPOUT(0x1985CD04CLL);
      }
      v296 = (unsigned __int8 *)(v20 + 56);
      if (__ldaxr((unsigned __int8 *)(v20 + 56)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v296))
      {
LABEL_467:
        v298 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v299 = v298 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v299 + 24) &= ~(1 << a2[3]);
        v300 = v298 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v300 + 16) &= ~(1 << a2[3]);
        v301 = v298 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v301 + 4) &= ~(1 << a2[3]);
        if (v497)
        {
          *((_BYTE *)a2 + 10) = 1;
        }
        else
        {
          v302 = v298 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v302 + 4) |= 1 << a2[3];
        }
        v303 = __ldxr(v296);
        if (v303 == 1)
        {
          if (!__stlxr(0, v296))
            goto LABEL_502;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v296, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
LABEL_502:
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
        {
          v323 = (unsigned int *)(v498 + 24);
          while (1)
          {
            v324 = *v323;
            if ((*v323 & 3) != 1)
              break;
            v325 = __ldxr(v323);
            if (v325 == v324)
            {
              if (!__stxr(v324 & 0xFFFFFFFE, v323))
                goto LABEL_578;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v323, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
        }
LABEL_578:
        if (v16 == 1 && v293 <= 0x3FF)
        {
          v337 = v498 + 16 * v293;
          do
          {
            if (*(_DWORD *)v337)
            {
              v338 = *(WTF::StringImpl **)(v337 + 8);
              if ((v338 & 1) == 0)
              {
                *(_QWORD *)(v337 + 8) = 0;
                if (v338)
                {
                  if (*(_DWORD *)v338 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v338, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                    WTF::fastFree(v339, v340, v341, v342, v343, v344, v345, v346);
                  }
                  else
                  {
                    *(_DWORD *)v338 -= 2;
                  }
                }
              }
              *(_DWORD *)v337 = 0;
              *(_DWORD *)(v337 + 8) = 1;
            }
            v337 += v494;
          }
          while (v337 < v498 + 0x4000);
        }
        if (v497)
        {
          if (v475 && (_DWORD)v293 != 1024)
            memset_pattern16(v294, &unk_1991567C0, 0x4000 - 16 * v293);
          v294[1] = ((v295 << 32) | 1) ^ __len;
          *(_QWORD *)v497 = v294;
          *(_QWORD *)(v497 + 8) = (char *)v294 + v295;
          *(_QWORD *)(v497 + 16) = (char *)v294 + 1;
          *(_QWORD *)(v497 + 24) = __len;
          *(_DWORD *)(v497 + 32) = v295;
        }
        return;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v296);
      goto LABEL_467;
    }
    v529 = 0;
    v265 = 1024 - v260;
    if (1024 - v260 < (int)a2[1])
    {
      LODWORD(v477) = 0;
      v478 = 0;
      v487 = 0;
      v491 = 0;
      LOBYTE(v481) = 1;
    }
    else
    {
      v487 = 0;
      v491 = 0;
      v477 = 0;
      v478 = 0;
      v19 = v498 + 40;
      v11 = v498 + 168;
      if ((_DWORD)v22)
        v266 = (_DWORD)v494 == 0;
      else
        v266 = 1;
      v267 = v266;
      v484 = v267;
      LODWORD(v481) = 1;
      do
      {
        if ((v21 & 1) == 0)
          goto LABEL_410;
        if ((_DWORD)v63)
        {
          if (v265 > 0x3FF)
            goto LABEL_903;
          if (((*(_QWORD *)(v19 + (((unint64_t)v265 >> 3) & 0x1FFFFFF8)) >> v265) & 1) != 0)
            goto LABEL_424;
        }
        if ((_DWORD)v10 != (_DWORD)v9)
          goto LABEL_410;
        if (v265 > 0x3FF)
          goto LABEL_903;
        if (((*(_QWORD *)(v11 + (((unint64_t)v265 >> 3) & 0x1FFFFFF8)) >> v265) & 1) != 0)
        {
LABEL_424:
          LODWORD(v481) = 0;
        }
        else
        {
LABEL_410:
          v14 = (uint64_t *)(v498 + 16 * (int)v265);
          if (v16 == 1 && *(_DWORD *)v14)
          {
            v268 = (WTF::StringImpl *)v14[1];
            if ((v268 & 1) == 0)
            {
              v14[1] = 0;
              if (v268)
              {
                if (*(_DWORD *)v268 == 2)
                {
                  WTF::StringImpl::~StringImpl(v268, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                  WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
                }
                else
                {
                  *(_DWORD *)v268 -= 2;
                }
              }
            }
            *(_DWORD *)v14 = 0;
            *((_DWORD *)v14 + 2) = 1;
          }
          if (v497)
          {
            if (!v484)
              memset_pattern16(v14, &unk_1991567C0, v494);
            v269 = *a2;
            if (v269 + (int)v265 < v487)
            {
              v278 = 16 * v491;
              v279 = v498 + 16 * v487;
              LODWORD(v69) = v478;
              v280 = ((int)v478 - (int)v279) | (unint64_t)(v491 << 36);
              v28 = 1;
              if (!v478)
                v280 = (v491 << 36) | 1;
              *(_QWORD *)(v279 + 8) = v280 ^ __len;
              v68 = v477 + v278;
              v477 += v278;
              v478 = v498 + 16 * v487;
              v491 = 0;
            }
            v487 = (int)v265;
            v491 += v269;
          }
        }
        v265 -= *a2;
      }
      while ((int)v265 >= (int)a2[1]);
    }
    if (v497)
    {
      if (v491)
      {
        v326 = v498 + 16 * v487;
        if (v478)
          v336 = (int)v478 - (int)v326;
        else
          v336 = 1;
        *(_QWORD *)(v326 + 8) = (v336 | (v491 << 36)) ^ __len;
        LODWORD(v477) = 16 * v491 + v477;
      }
      else
      {
        v326 = v478;
      }
      if ((_DWORD)v10 == (_DWORD)v9)
      {
        *(_DWORD *)(v498 + 36) = 0;
        v482 = 1;
      }
    }
    else
    {
      v482 = 0;
      v326 = v478;
    }
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v331 = (unsigned int *)(v498 + 24);
      while (1)
      {
        v332 = *v331;
        if ((*v331 & 3) != 1)
          break;
        v333 = __ldxr(v331);
        if (v333 == v332)
        {
          if (!__stxr(v332 & 0xFFFFFFFE, v331))
            goto LABEL_551;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v331, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
    }
LABEL_551:
    if ((v482 & 1) != 0)
    {
      if (v326)
      {
        v334 = *(_QWORD *)(v326 + 8) ^ __len;
        *(_QWORD *)v497 = v326;
        *(_QWORD *)(v497 + 8) = v326 + HIDWORD(v334);
        v335 = v326 + (int)v334;
      }
      else
      {
        __len = 0;
        LODWORD(v477) = 0;
        *(_QWORD *)v497 = 0;
        *(_QWORD *)(v497 + 8) = 0;
        v335 = 1;
      }
      *(_QWORD *)(v497 + 16) = v335;
      *(_QWORD *)(v497 + 24) = __len;
      *(_DWORD *)(v497 + 32) = v477;
    }
    v111 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
    if (__ldaxr(v111))
    {
      __clrex();
    }
    else if (!__stxr(1u, v111))
    {
LABEL_555:
      v113 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v328 = v113 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v328 + 24) &= ~(1 << a2[3]);
      v329 = v113 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v329 + 16) &= ~(1 << a2[3]);
      v330 = v113 + 40 * (a2[3] >> 5);
      *(_DWORD *)(v330 + 4) &= ~(1 << a2[3]);
      if (v482)
        goto LABEL_729;
      if ((v481 & 1) != 0)
        goto LABEL_137;
LABEL_730:
      v394 = __ldxr(v111);
      if (v394 == 1)
      {
        if (!__stlxr(0, v111))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v111, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v111);
    goto LABEL_555;
  }
  if (*(_BYTE *)(v17 + 445))
  {
    v72 = *(unsigned __int8 *)(v23 + 347);
    v73 = v27 + 1;
    if (v27 == -1)
      v73 = 2;
    v74 = v73 == v25;
    if (v27)
      v75 = v74;
    else
      v75 = 1;
    if (v72 == 1)
      v76 = v75;
    else
      v76 = 0;
    if (v27 == v25)
      v28 = 1;
    else
      v28 = v76;
LABEL_56:
    if (!v12 && *((_BYTE *)a2 + 8) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985CB8C4);
    }
    v77 = *a2;
    __len = 16 * *a2;
    v78 = *(_QWORD *)(v17 + 168);
    v79 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
    v80 = (v78 >> 26) ^ (v79 >> 17) ^ v78 ^ v79;
    *(_QWORD *)(v17 + 160) = v78;
    *(_QWORD *)(v17 + 168) = v80;
    v81 = v80 + v78;
    v83 = (_DWORD)v26 == (_DWORD)v24 || (v21 & 1) != 0 || BYTE1(qword_1ECF4C414) == 0;
    v481 = v81;
    if (v83)
    {
      v475 = (int)v22;
      v529 = 0;
      LODWORD(v11) = 1024 - v77;
      a6 = 1;
      if (1024 - v77 >= (int)a2[1])
      {
        v9 = 0;
        v8 = 0;
        v68 = 0;
        a5 = 0;
        LODWORD(v494) = 0;
        v63 = v18 + 40;
        v10 = v18 + 168;
        if ((_DWORD)v22)
          v84 = (_DWORD)__len == 0;
        else
          v84 = 1;
        a7 = v84;
        a8 = v528;
        LODWORD(v69) = 1;
        LODWORD(v478) = a7;
        v482 = v15;
        v479 = v26;
        v480 = v24;
        LODWORD(v477) = v28;
        goto LABEL_879;
      }
      v9 = 0;
      LODWORD(v494) = 0;
      a5 = 0;
      v68 = 0;
      v8 = 0;
      LOBYTE(v69) = 1;
LABEL_126:
      if ((_DWORD)v19)
        goto LABEL_177;
      if (!v12)
      {
        v15 = 0;
        goto LABEL_129;
      }
      if (!v8)
      {
LABEL_177:
        v143 = a5;
      }
      else
      {
        v143 = v18 + 16 * v68;
        if (a5)
          v144 = (int)a5 - (int)v143;
        else
          v144 = 1;
        *(_QWORD *)(v143 + 8) = (v144 | (v8 << 36)) ^ v481;
        LODWORD(v494) = 16 * v8 + v494;
      }
      if (v12 && (_DWORD)v26 == (_DWORD)v24)
      {
        *(_DWORD *)(v18 + 36) = 0;
        v15 = 1;
      }
      a5 = v143;
LABEL_129:
      v483 = v15;
      v490 = v69;
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v119 = (unsigned int *)(v18 + 24);
        while (1)
        {
          v120 = *v119;
          if ((*v119 & 3) != 1)
            break;
          v121 = __ldxr(v119);
          if (v121 == v120)
          {
            if (!__stxr(v120 & 0xFFFFFFFE, v119))
              goto LABEL_130;
          }
          else
          {
            __clrex();
          }
        }
        v165 = v8;
        v166 = a5;
        v167 = v68;
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v119, 0, v24, v26, a5, 1, a7, (uint64_t)a8);
        v68 = v167;
        a5 = v166;
        v8 = v165;
        v15 = v483;
        v12 = v497;
        v18 = v498;
      }
LABEL_130:
      if ((_DWORD)v19)
      {
        if (v9)
        {
          if (v475)
            v122 = (_DWORD)__len == 0;
          else
            v122 = 1;
          v123 = v122;
          v124 = 2 * v9;
          v125 = (unsigned __int16 *)v528;
          do
          {
            v126 = *v125;
            v127 = (_QWORD *)(v18 + 16 * v126);
            if (*(_DWORD *)v127)
            {
              v128 = (WTF::StringImpl *)v127[1];
              if ((v128 & 1) == 0)
              {
                v127[1] = 0;
                if (v128)
                {
                  if (*(_DWORD *)v128 == 2)
                  {
                    v130 = v8;
                    v131 = a5;
                    v132 = v68;
                    WTF::StringImpl::~StringImpl(v128, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                    WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
                    v68 = v132;
                    a5 = v131;
                    v8 = v130;
                    v15 = v483;
                    v12 = v497;
                    v18 = v498;
                  }
                  else
                  {
                    *(_DWORD *)v128 -= 2;
                  }
                }
              }
              *(_DWORD *)v127 = 0;
              *((_DWORD *)v127 + 2) = 1;
            }
            if ((_DWORD)v15)
            {
              if ((v123 & 1) == 0)
              {
                v145 = v127;
                v146 = v8;
                v147 = a5;
                v148 = v68;
                memset_pattern16(v145, &unk_1991567C0, __len);
                v68 = v148;
                a5 = v147;
                v8 = v146;
                v15 = v483;
                v12 = v497;
                v18 = v498;
              }
              v129 = *a2;
              if (v129 + v126 < v68)
              {
                v141 = v18 + 16 * v68;
                v142 = (v8 << 36) | 1;
                if (a5)
                  v142 = ((int)a5 - (int)v141) | (unint64_t)(v8 << 36);
                *(_QWORD *)(v141 + 8) = v142 ^ v481;
                LODWORD(v494) = v494 + 16 * v8;
                a5 = v18 + 16 * v68;
                v8 = 0;
              }
              v8 += v129;
              v68 = v126;
            }
            else
            {
              v126 = v68;
            }
            ++v125;
            v124 -= 2;
          }
          while (v124);
        }
        else
        {
          v126 = v68;
        }
        if (!(_DWORD)v15)
        {
LABEL_132:
          v111 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
          if (__ldaxr(v111))
          {
            __clrex();
          }
          else if (!__stxr(1u, v111))
          {
LABEL_135:
            v113 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
            v114 = v113 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v114 + 24) &= ~(1 << a2[3]);
            v115 = v113 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v115 + 16) &= ~(1 << a2[3]);
            v116 = v113 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v116 + 4) &= ~(1 << a2[3]);
            if (!(_DWORD)v15)
            {
              if ((v490 & 1) == 0)
                goto LABEL_730;
              goto LABEL_137;
            }
LABEL_729:
            *((_BYTE *)a2 + 10) = 1;
            goto LABEL_730;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v111);
          LODWORD(v15) = v483;
          goto LABEL_135;
        }
        if (v8)
        {
          v149 = v18 + 16 * v126;
          v150 = v481;
          if (a5)
            v151 = (int)a5 - (int)v149;
          else
            v151 = 1;
          *(_QWORD *)(v149 + 8) = (v151 | (v8 << 36)) ^ v481;
          v152 = 16 * v8 + v494;
          goto LABEL_190;
        }
      }
      else if (!(_DWORD)v15)
      {
        goto LABEL_132;
      }
      v149 = a5;
      v150 = v481;
      v152 = v494;
      if (!a5)
      {
        v150 = 0;
        v152 = 0;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        v154 = 1;
        goto LABEL_191;
      }
LABEL_190:
      v153 = *(_QWORD *)(v149 + 8) ^ v150;
      *(_QWORD *)v12 = v149;
      *(_QWORD *)(v12 + 8) = v149 + HIDWORD(v153);
      v154 = v149 + (int)v153;
LABEL_191:
      *(_QWORD *)(v12 + 16) = v154;
      *(_QWORD *)(v12 + 24) = v150;
      *(_DWORD *)(v12 + 32) = v152;
      goto LABEL_132;
    }
    v86 = (int)v22;
    if ((_DWORD)v28
      && (*(_QWORD *)(v18 + 40)
       || *(_QWORD *)(v18 + 48)
       || *(_QWORD *)(v18 + 56)
       || *(_QWORD *)(v18 + 64)
       || *(_QWORD *)(v18 + 72)
       || *(_QWORD *)(v18 + 80)
       || *(_QWORD *)(v18 + 88)
       || *(_QWORD *)(v18 + 96)
       || *(_QWORD *)(v18 + 104)
       || *(_QWORD *)(v18 + 112)
       || *(_QWORD *)(v18 + 120)
       || *(_QWORD *)(v18 + 128)
       || *(_QWORD *)(v18 + 136)
       || *(_QWORD *)(v18 + 144)
       || *(_QWORD *)(v18 + 152)
       || *(_QWORD *)(v18 + 160)))
    {
LABEL_123:
      v109 = WTF::dataFile(v22);
      v528[0] = v18;
      v528[1] = v18;
      v528[2] = a2;
      v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109);
      JSC::MarkedBlock::Handle::specializedSweep<false,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)0,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)0,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(WTF::PrintStream &)#1}::operator()((uint64_t)v528, v110);
    }
    v87 = v18 + 0x4000;
    v88 = a2[1];
    v89 = (_QWORD *)(v18 + 16 * v88);
    v90 = 0x4000 - 16 * v88;
    if (v90 >= 0x3ED1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985CC39CLL);
    }
    v91 = (unsigned __int8 *)(v20 + 56);
    if (__ldaxr((unsigned __int8 *)(v20 + 56)))
    {
      __clrex();
      v93 = __len;
    }
    else
    {
      v93 = __len;
      if (!__stxr(1u, v91))
      {
LABEL_87:
        v94 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v95 = v94 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v95 + 24) &= ~(1 << a2[3]);
        v96 = v94 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v96 + 16) &= ~(1 << a2[3]);
        v97 = v94 + 40 * (a2[3] >> 5);
        *(_DWORD *)(v97 + 4) &= ~(1 << a2[3]);
        if (v12)
        {
          *((_BYTE *)a2 + 10) = 1;
        }
        else
        {
          v98 = v94 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v98 + 4) |= 1 << a2[3];
        }
        v99 = __ldxr(v91);
        if (v99 == 1)
        {
          if (!__stlxr(0, v91))
            goto LABEL_97;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v91, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
        v12 = v497;
LABEL_97:
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
        {
          v106 = (unsigned int *)(v498 + 24);
          while (1)
          {
            v107 = *v106;
            if ((*v106 & 3) != 1)
              break;
            v108 = __ldxr(v106);
            if (v108 == v107)
            {
              if (!__stxr(v107 & 0xFFFFFFFE, v106))
                goto LABEL_193;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v106, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
          v12 = v497;
        }
LABEL_193:
        if (v16 == 1 && v88 <= 0x3FF)
        {
          v155 = v89;
          do
          {
            if (*(_DWORD *)v155)
            {
              v156 = (WTF::StringImpl *)v155[1];
              if ((v156 & 1) == 0)
              {
                v155[1] = 0;
                if (v156)
                {
                  if (*(_DWORD *)v156 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v156, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                    WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    v12 = v497;
                  }
                  else
                  {
                    *(_DWORD *)v156 -= 2;
                  }
                }
              }
              *(_DWORD *)v155 = 0;
              *((_DWORD *)v155 + 2) = 1;
            }
            v155 = (_QWORD *)((char *)v155 + v93);
          }
          while ((unint64_t)v155 < v87);
        }
        if (v12)
        {
          if (v86 && (_DWORD)v88 != 1024)
          {
            memset_pattern16(v89, &unk_1991567C0, 0x4000 - 16 * v88);
            v12 = v497;
          }
          v89[1] = ((v90 << 32) | 1) ^ v481;
          *(_QWORD *)v12 = v89;
          *(_QWORD *)(v12 + 8) = (char *)v89 + v90;
          *(_QWORD *)(v12 + 16) = (char *)v89 + 1;
          *(_QWORD *)(v12 + 24) = v481;
          *(_DWORD *)(v12 + 32) = v90;
        }
        return;
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v91);
    v12 = v497;
    goto LABEL_87;
  }
  if (*((_BYTE *)a2 + 8) != 1)
    goto LABEL_56;
  if (byte_1ECF4C400 || (_DWORD)v26 == (_DWORD)v24)
    goto LABEL_56;
  if ((v21 & 1) != 0)
  {
    if (v12)
    {
      if (v27 != v25)
      {
LABEL_42:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>((uint64_t)a2, v12, (uint64_t)&v499, v26, a5, a6, a7, (uint64_t)a8);
        return;
      }
      v63 = 1;
      v527 = 0x100000001;
      v64 = *a2;
      v526 = 16 * *a2;
      v65 = *(_QWORD *)(v17 + 168);
      v66 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
      v67 = (v65 >> 26) ^ (v66 >> 17) ^ v65 ^ v66;
      *(_QWORD *)(v17 + 160) = v65;
      *(_QWORD *)(v17 + 168) = v67;
      v524 = v17;
      v525 = v67 + v65;
      v522 = 0;
      v523 = &v499;
      v520 = 0;
      v521 = 0;
      v529 = 0;
      v507 = v18;
      v508 = &v527;
      v509 = &v523;
      v510 = (char *)&v527 + 4;
      v511 = (char *)&v526 + 4;
      v512 = &v526;
      v513 = a2;
      v514 = &v519;
      v515 = &v520;
      v68 = (unint64_t)&v521;
      v516 = &v521;
      v517 = &v525;
      v69 = (unint64_t)&v522;
      v518 = &v522;
      v519 = 0;
      v500 = (char *)&v527 + 4;
      v501 = &v520;
      v502 = v18;
      v503 = &v519;
      v504 = &v521;
      v505 = &v525;
      v506 = &v522;
      v70 = 1024 - v64;
      if (1024 - v64 >= (int)a2[1])
      {
        v16 = 0;
        v10 = v18 + 40;
        LODWORD(v11) = 1;
        v71 = 1;
        v9 = 1;
        while (v70 < 0x400)
        {
          v19 = v70;
          if (((*(_QWORD *)(v10 + (((unint64_t)v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v70) & 1) != 0)
          {
            v9 = 0;
          }
          else if ((_DWORD)v527 == 2)
          {
            v529 = v16 + 1;
            if (v16 >= 0x400)
              break;
            *((_WORD *)v528 + v16++) = v70;
            v18 = v498;
          }
          else
          {
            v21 = v18 + 16 * v70;
            if ((_DWORD)v527 && *(_DWORD *)v21)
            {
              v445 = *(WTF::StringImpl **)(v21 + 8);
              if ((v445 & 1) == 0)
              {
                *(_QWORD *)(v21 + 8) = 0;
                if (v445)
                {
                  if (*(_DWORD *)v445 == 2)
                  {
                    v450 = v12;
                    WTF::StringImpl::~StringImpl(v445, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                    WTF::fastFree(v451, v452, v453, v454, v455, v456, v457, v458);
                    v12 = v450;
                    v18 = v498;
                    LODWORD(v11) = HIDWORD(v527);
                  }
                  else
                  {
                    *(_DWORD *)v445 -= 2;
                  }
                }
              }
              *(_DWORD *)v21 = 0;
              *(_DWORD *)(v21 + 8) = 1;
              v71 = v11;
            }
            if (v71 == 1)
            {
              if (HIDWORD(v526) == 1 && v526 >= 8)
              {
                v459 = v12;
                memset_pattern16((void *)v21, &unk_1991567C0, v526 & 0xFFFFFFF8);
                v12 = v459;
                v18 = v498;
              }
              v446 = *a2;
              v447 = v520;
              if (v446 + v19 < v519)
              {
                v448 = v18 + 16 * v519;
                if (v521)
                  v449 = ((int)v521 - (int)v448) | (unint64_t)(v520 << 36);
                else
                  v449 = (v520 << 36) | 1;
                v68 = v525;
                *(_QWORD *)(v448 + 8) = v449 ^ v525;
                v521 = v448;
                v522 += 16 * v447;
                v447 = 0;
              }
              v519 = v19;
              v520 = v447 + v446;
              v71 = 1;
            }
          }
          v70 = v19 - *a2;
          if (v70 < (int)a2[1])
          {
            LODWORD(v63) = v527;
            if ((_DWORD)v527 == 2)
            {
              LODWORD(v63) = 2;
            }
            else if ((_DWORD)v11 == 1 && v520)
            {
              v425 = 16 * v520;
              v426 = v18 + 16 * v519;
              v427 = ((int)v521 - (int)v426) | (unint64_t)(v520 << 36);
              if (!v521)
                v427 = (v520 << 36) | 1;
              *(_QWORD *)(v426 + 8) = v427 ^ v525;
              v521 = v426;
              v522 += v425;
            }
            goto LABEL_824;
          }
        }
LABEL_903:
        __break(1u);
LABEL_904:
        v473 = (void *)v16;
        v493 = v69;
        v16 = v28;
        v486 = v8;
        v489 = v68;
        v474 = a5;
        memset_pattern16(v473, &unk_1991567C0, __len);
        a8 = v528;
        a7 = v478;
        a6 = 1;
        v8 = v486;
        v68 = v489;
        a5 = v474;
        v28 = v16;
        LODWORD(v69) = v493;
        v26 = v479;
        v24 = v480;
        v15 = v482;
        v12 = v497;
        v18 = v498;
LABEL_892:
        v461 = *a2;
        if (v461 + (int)v11 < v68)
        {
          v471 = v18 + 16 * v68;
          v472 = (v8 << 36) | 1;
          if (a5)
            v472 = ((int)a5 - (int)v471) | (unint64_t)(v8 << 36);
          *(_QWORD *)(v471 + 8) = v472 ^ v481;
          LODWORD(v494) = v494 + 16 * v8;
          a5 = v471;
          v8 = 0;
        }
        v8 += v461;
        v68 = (int)v11;
        while (1)
        {
          LODWORD(v11) = v11 - *a2;
          if ((int)v11 < (int)a2[1])
            goto LABEL_126;
          if ((v21 & 1) == 0)
            goto LABEL_886;
LABEL_879:
          if ((_DWORD)v28)
          {
            if (v11 >= 0x400)
              goto LABEL_903;
            if (((*(_QWORD *)(v63 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
              goto LABEL_877;
          }
          if ((_DWORD)v26 != (_DWORD)v24)
            goto LABEL_886;
          if (v11 >= 0x400)
            goto LABEL_903;
          if (((*(_QWORD *)(v10 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
          {
LABEL_877:
            LODWORD(v69) = 0;
          }
          else
          {
LABEL_886:
            if ((_DWORD)v19)
            {
              v14[277] = v9 + 1;
              if (v9 >= 0x400)
                goto LABEL_903;
              *((_WORD *)v528 + v9++) = v11;
            }
            else
            {
              v16 = v18 + 16 * (int)v11;
              if (*(_DWORD *)v16)
              {
                v460 = *(WTF::StringImpl **)(v16 + 8);
                if ((v460 & 1) == 0)
                {
                  *(_QWORD *)(v16 + 8) = 0;
                  if (v460)
                  {
                    if (*(_DWORD *)v460 == 2)
                    {
                      v492 = v69;
                      v462 = v8;
                      v485 = a5;
                      v488 = v68;
                      WTF::StringImpl::~StringImpl(v460, (WTF::AtomStringImpl *)v15, v24, v26, a5, 1, a7, (uint64_t)v528);
                      WTF::fastFree(v463, v464, v465, v466, v467, v468, v469, v470);
                      a8 = v528;
                      a7 = v478;
                      a6 = 1;
                      a5 = v485;
                      v68 = v488;
                      v8 = v462;
                      v28 = v477;
                      LODWORD(v69) = v492;
                      v26 = v479;
                      v24 = v480;
                      v15 = v482;
                      v12 = v497;
                      v18 = v498;
                    }
                    else
                    {
                      *(_DWORD *)v460 -= 2;
                    }
                  }
                }
                *(_DWORD *)v16 = 0;
                *(_DWORD *)(v16 + 8) = 1;
              }
              if (v12)
              {
                if ((a7 & 1) == 0)
                  goto LABEL_904;
                goto LABEL_892;
              }
            }
          }
        }
      }
      v16 = 0;
      LOBYTE(v9) = 1;
LABEL_824:
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v437 = v12;
        v438 = (unsigned int *)(v18 + 24);
        while (1)
        {
          v439 = *v438;
          if ((*v438 & 3) != 1)
            break;
          v440 = __ldxr(v438);
          if (v440 == v439)
          {
            if (!__stxr(v439 & 0xFFFFFFFE, v438))
              goto LABEL_851;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v438, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
        LODWORD(v63) = v527;
LABEL_851:
        v12 = v437;
      }
      if ((_DWORD)v63 == 2)
      {
        v441 = v12;
        if (v16)
        {
          v442 = 2 * v16;
          v443 = (unsigned __int16 *)v528;
          do
          {
            v444 = *v443++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v444, v24, v26, a5, a6, a7, (uint64_t)a8);
            v442 -= 2;
          }
          while (v442);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
        v12 = v441;
      }
      if (HIDWORD(v527) == 1)
      {
        v428 = v521;
        if (v521)
        {
          v429 = v522;
          v430 = v525;
          v431 = *(_QWORD *)(v521 + 8) ^ v525;
          *(_QWORD *)v12 = v521;
          *(_QWORD *)(v12 + 8) = v428 + HIDWORD(v431);
          v432 = v428 + (int)v431;
        }
        else
        {
          v430 = 0;
          v429 = 0;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
          v432 = 1;
        }
        *(_QWORD *)(v12 + 16) = v432;
        *(_QWORD *)(v12 + 24) = v430;
        *(_DWORD *)(v12 + 32) = v429;
      }
      goto LABEL_830;
    }
    if (v27 == v25)
    {
      LODWORD(v19) = 1;
      v527 = 1;
      v100 = *a2;
      v526 = 16 * *a2;
      v101 = *(_QWORD *)(v17 + 168);
      v102 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
      v103 = (v101 >> 26) ^ (v102 >> 17) ^ v101 ^ v102;
      *(_QWORD *)(v17 + 160) = v101;
      *(_QWORD *)(v17 + 168) = v103;
      v524 = v17;
      v525 = v103 + v101;
      v522 = 0;
      v523 = &v499;
      v520 = 0;
      v521 = 0;
      v529 = 0;
      v507 = v18;
      v508 = &v527;
      v509 = &v523;
      v510 = (char *)&v527 + 4;
      v511 = (char *)&v526 + 4;
      v512 = &v526;
      v513 = a2;
      v514 = &v519;
      v515 = &v520;
      v68 = (unint64_t)&v521;
      v516 = &v521;
      v517 = &v525;
      v69 = (unint64_t)&v522;
      v518 = &v522;
      v519 = 0;
      v500 = (char *)&v527 + 4;
      v501 = &v520;
      v502 = v18;
      v503 = &v519;
      v504 = &v521;
      v505 = &v525;
      v506 = &v522;
      v104 = 1024 - v100;
      if (1024 - v100 >= (int)a2[1])
      {
        v10 = 0;
        v105 = 0;
        v21 = 0;
        v16 = v18 + 40;
        v63 = 1;
        while (1)
        {
          if (v104 >= 0x400)
            goto LABEL_903;
          v11 = v104;
          if (((*(_QWORD *)(v16 + (((unint64_t)v104 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v104) & 1) != 0)
          {
            v63 = 0;
          }
          else
          {
            if ((_DWORD)v527 == 2)
            {
              v529 = v21 + 1;
              if (v21 >= 0x400)
                goto LABEL_903;
              *((_WORD *)v528 + v21++) = v104;
            }
            else
            {
              v9 = v18 + 16 * v104;
              if ((_DWORD)v527 && *(_DWORD *)v9)
              {
                v412 = *(WTF::StringImpl **)(v9 + 8);
                if ((v412 & 1) == 0)
                {
                  *(_QWORD *)(v9 + 8) = 0;
                  if (v412)
                  {
                    if (*(_DWORD *)v412 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v412, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                      WTF::fastFree(v413, v414, v415, v416, v417, v418, v419, v420);
                      v18 = v498;
                      v10 = HIDWORD(v527);
                    }
                    else
                    {
                      *(_DWORD *)v412 -= 2;
                    }
                  }
                }
                *(_DWORD *)v9 = 0;
                *(_DWORD *)(v9 + 8) = 1;
                v105 = v10;
              }
              if (v105 != 1)
                goto LABEL_792;
              if (HIDWORD(v526) == 1 && v526 >= 8)
                memset_pattern16((void *)v9, &unk_1991567C0, v526 & 0xFFFFFFF8);
              v421 = *a2;
              v422 = v520;
              if (v421 + v11 < v519)
              {
                v423 = v498 + 16 * v519;
                if (v521)
                  v424 = (int)v521 - (int)v423;
                else
                  v424 = 1;
                v68 = v525;
                *(_QWORD *)(v423 + 8) = (v424 | (v520 << 36)) ^ v525;
                v521 = v423;
                v522 += 16 * v422;
                v422 = 0;
              }
              v519 = v11;
              v520 = v422 + v421;
              v105 = 1;
            }
            v18 = v498;
          }
LABEL_792:
          v104 = v11 - *a2;
          if (v104 < (int)a2[1])
          {
            LODWORD(v19) = v527;
            if ((_DWORD)v527 != 2 && (_DWORD)v10 == 1)
            {
              if (v520)
              {
                v409 = 16 * v520;
                v18 = v498;
                v410 = v498 + 16 * v519;
                v411 = ((int)v521 - (int)v410) | (unint64_t)(v520 << 36);
                if (!v521)
                  v411 = (v520 << 36) | 1;
                *(_QWORD *)(v410 + 8) = v411 ^ v525;
                v521 = v410;
                v522 += v409;
              }
              else
              {
                v18 = v498;
              }
            }
            goto LABEL_763;
          }
        }
      }
      v21 = 0;
      LOBYTE(v63) = 1;
LABEL_763:
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v403 = (unsigned int *)(v18 + 24);
        while (1)
        {
          v404 = *v403;
          if ((*v403 & 3) != 1)
            break;
          v405 = __ldxr(v403);
          if (v405 == v404)
          {
            if (!__stxr(v404 & 0xFFFFFFFE, v403))
              goto LABEL_764;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v403, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
        LODWORD(v19) = v527;
      }
LABEL_764:
      if ((_DWORD)v19 != 2)
      {
LABEL_765:
        if (HIDWORD(v527) == 1)
        {
          MEMORY[8] = 0;
          MEMORY[0] = 0;
          MEMORY[0x10] = 1;
          MEMORY[0x18] = 0;
          MEMORY[0x20] = 0;
        }
        v111 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
        if (__ldaxr(v111))
        {
          __clrex();
        }
        else if (!__stxr(1u, v111))
        {
LABEL_770:
          v113 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v400 = v113 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v400 + 24) &= ~(1 << a2[3]);
          v401 = v113 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v401 + 16) &= ~(1 << a2[3]);
          v402 = v113 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v402 + 4) &= ~(1 << a2[3]);
          if (HIDWORD(v527) == 1)
            goto LABEL_729;
          if ((v63 & 1) != 0)
            goto LABEL_137;
          goto LABEL_730;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v111);
        goto LABEL_770;
      }
      if (v21)
      {
        v406 = 2 * v21;
        v407 = (unsigned __int16 *)v528;
        do
        {
          v408 = *v407++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v408, v24, v26, a5, a6, a7, (uint64_t)a8);
          v406 -= 2;
        }
        while (v406);
      }
LABEL_784:
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
      goto LABEL_765;
    }
    goto LABEL_491;
  }
  if (!v12)
  {
    if (v27 != v25)
    {
      v527 = 1;
      v48 = *a2;
      v526 = 16 * *a2;
      v49 = *(_QWORD *)(v17 + 168);
      v50 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
      v51 = (v49 >> 26) ^ (v50 >> 17) ^ v49 ^ v50;
      *(_QWORD *)(v17 + 160) = v49;
      *(_QWORD *)(v17 + 168) = v51;
      v524 = v17;
      v525 = v51 + v49;
      v523 = &v499;
      if (BYTE1(qword_1ECF4C414))
      {
        v52 = v18 + 0x4000;
        v53 = a2[1];
        v54 = v18 + 16 * v53;
        if ((unint64_t)(16 * v53 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
        {
          __break(0xC471u);
          JUMPOUT(0x1985CBCE0);
        }
        v55 = (unsigned __int8 *)(v20 + 56);
        if (__ldaxr((unsigned __int8 *)(v20 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v55))
        {
LABEL_35:
          v57 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v58 = v57 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v58 + 24) &= ~(1 << a2[3]);
          v59 = v57 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v59 + 16) &= ~(1 << a2[3]);
          v60 = v57 + 40 * (a2[3] >> 5);
          *(_DWORD *)(v60 + 4) &= ~(1 << a2[3]);
          if (HIDWORD(v527) == 1)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v61 = v57 + 40 * (a2[3] >> 5);
            *(_DWORD *)(v61 + 4) |= 1 << a2[3];
          }
          v62 = __ldxr(v55);
          if (v62 == 1)
          {
            if (!__stlxr(0, v55))
              goto LABEL_76;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v55, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
LABEL_76:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v182 = (unsigned int *)(v18 + 24);
            while (1)
            {
              v183 = *v182;
              if ((*v182 & 3) != 1)
                break;
              v184 = __ldxr(v182);
              if (v184 == v183)
              {
                if (!__stxr(v183 & 0xFFFFFFFE, v182))
                  goto LABEL_77;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v182, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
          }
LABEL_77:
          if (v53 > 0x3FF || !(_DWORD)v527)
            return;
          v85 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          while (1)
          {
            if (!*(_DWORD *)v54)
              goto LABEL_712;
            v391 = *(_QWORD *)(v54 + 8);
            if ((v391 & 1) == 0)
            {
              *(_QWORD *)(v54 + 8) = 0;
              if (v391)
              {
                if (*(_DWORD *)v391 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v391, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
                  v392 = *(_QWORD *)(v85 + 752);
                  if (v392)
                  {
                    if (!(v391 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v391 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v391)) & 1) != 0)
                    {
LABEL_720:
                      v393 = *(unsigned int *)(v392 + 8000);
                      if (v393 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v392, v391, (os_unfair_lock_s *)5, v26, a5, a6, a7, (uint64_t)a8);
                      }
                      else
                      {
                        *(_QWORD *)(v392 + 8 * v393) = v391 | 0x5000000000000;
                        *(_DWORD *)(v392 + 8000) = v393 + 1;
                      }
                      goto LABEL_711;
                    }
                    if (v391 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v391 >> 24)
                    {
                      v26 = 0;
                    }
                    else
                    {
                      v26 = (*(_DWORD *)((char *)off_1ECF425F8
                                       + ((((v391 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                       + 24) >> (2 * ((BYTE3(v391) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v26 == 1)
                        goto LABEL_720;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v392, v391, 1, v26, a5, a6, a7, (uint64_t)a8);
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v391, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
                else
                {
                  *(_DWORD *)v391 -= 2;
                }
              }
            }
LABEL_711:
            *(_DWORD *)v54 = 0;
            *(_DWORD *)(v54 + 8) = 1;
LABEL_712:
            v54 += v526;
            if (v54 >= v52)
              return;
          }
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v55);
        goto LABEL_35;
      }
      v21 = 0;
      v521 = 0;
      v522 = 0;
      v520 = 0;
      v529 = 0;
      v507 = v18;
      v508 = &v527;
      v509 = &v523;
      v510 = (char *)&v527 + 4;
      v511 = (char *)&v526 + 4;
      v512 = &v526;
      v513 = a2;
      v514 = &v519;
      v515 = &v520;
      v68 = (unint64_t)&v521;
      v516 = &v521;
      v517 = &v525;
      v69 = (unint64_t)&v522;
      v518 = &v522;
      v519 = 0;
      v500 = (char *)&v527 + 4;
      v501 = &v520;
      v502 = v18;
      v503 = &v519;
      v504 = &v521;
      v505 = &v525;
      v506 = &v522;
      v9 = (1024 - v48);
      v168 = a2[1];
      if ((int)v9 < v168)
        goto LABEL_213;
      v21 = 0;
      v63 = (uint64_t)v528;
      do
      {
        if ((_DWORD)v527 == 2)
        {
          v529 = v21 + 1;
          if (v21 >= 0x400)
            goto LABEL_903;
          *((_WORD *)v528 + v21++) = v9;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)(int)v9, v24, v26, a5, a6, a7, (uint64_t)a8);
          v48 = *a2;
          v168 = a2[1];
        }
        v9 = (v9 - v48);
      }
      while ((int)v9 >= v168);
      if ((_DWORD)v527 != 2)
LABEL_213:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v169 = (unsigned int *)(v18 + 24);
        while (1)
        {
          v170 = *v169;
          if ((*v169 & 3) != 1)
            break;
          v171 = __ldxr(v169);
          if (v171 == v170)
          {
            if (!__stxr(v170 & 0xFFFFFFFE, v169))
              goto LABEL_264;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v169, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
      }
LABEL_264:
      if ((_DWORD)v527 != 2)
      {
LABEL_269:
        if (HIDWORD(v527) == 1)
        {
          MEMORY[8] = 0;
          MEMORY[0] = 0;
          MEMORY[0x10] = 1;
          MEMORY[0x18] = 0;
          MEMORY[0x20] = 0;
        }
        goto LABEL_281;
      }
      if (v21)
      {
        v185 = 2 * v21;
        v186 = (unsigned __int16 *)v528;
        do
        {
          v187 = *v186++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v187, v24, v26, a5, a6, a7, (uint64_t)a8);
          v185 -= 2;
        }
        while (v185);
      }
LABEL_268:
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
      goto LABEL_269;
    }
LABEL_347:
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>((int *)a2, (WTF::AtomStringImpl *)&v499, v24, v26, a5, a6, a7, (uint64_t)a8);
    return;
  }
  if (v27 == v25)
  {
    v176 = (int *)a2;
    v177 = v12;
LABEL_248:
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(v176, v177, (uint64_t)&v499, v26, a5, a6, a7, (uint64_t)a8);
    return;
  }
  v527 = 0x100000001;
  v30 = *a2;
  v526 = 16 * *a2;
  v31 = *(_QWORD *)(v17 + 168);
  v32 = *(_QWORD *)(v17 + 160) ^ (*(_QWORD *)(v17 + 160) << 23);
  v33 = (v31 >> 26) ^ (v32 >> 17) ^ v31 ^ v32;
  *(_QWORD *)(v17 + 160) = v31;
  *(_QWORD *)(v17 + 168) = v33;
  v524 = v17;
  v525 = v33 + v31;
  v523 = &v499;
  if (!BYTE1(qword_1ECF4C414))
  {
    v16 = v12;
    v9 = 0;
    v521 = 0;
    v522 = 0;
    v520 = 0;
    v529 = 0;
    v507 = v18;
    v508 = &v527;
    v509 = &v523;
    v510 = (char *)&v527 + 4;
    v511 = (char *)&v526 + 4;
    v512 = &v526;
    v513 = a2;
    v514 = &v519;
    v515 = &v520;
    v68 = (unint64_t)&v521;
    v516 = &v521;
    v517 = &v525;
    v69 = (unint64_t)&v522;
    v518 = &v522;
    v519 = 0;
    v500 = (char *)&v527 + 4;
    v501 = &v520;
    v502 = v18;
    v503 = &v519;
    v504 = &v521;
    v505 = &v525;
    v506 = &v522;
    v63 = (1024 - v30);
    v172 = a2[1];
    if ((int)v63 < v172)
      goto LABEL_222;
    v9 = 0;
    v21 = (unint64_t)v528;
    do
    {
      if ((_DWORD)v527 == 2)
      {
        v529 = v9 + 1;
        if (v9 >= 0x400)
          goto LABEL_903;
        *((_WORD *)v528 + v9++) = v63;
      }
      else
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)(int)v63, v24, v26, a5, a6, a7, (uint64_t)a8);
        v30 = *a2;
        v172 = a2[1];
      }
      v63 = (v63 - v30);
    }
    while ((int)v63 >= v172);
    if ((_DWORD)v527 != 2)
LABEL_222:
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v173 = (unsigned int *)(v18 + 24);
      while (1)
      {
        v174 = *v173;
        if ((*v173 & 3) != 1)
          break;
        v175 = __ldxr(v173);
        if (v175 == v174)
        {
          if (!__stxr(v174 & 0xFFFFFFFE, v173))
            goto LABEL_272;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v173, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
    }
LABEL_272:
    if ((_DWORD)v527 == 2)
    {
      if (v9)
      {
        v188 = 2 * v9;
        v189 = (unsigned __int16 *)v528;
        do
        {
          v190 = *v189++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v507, (WTF::AtomStringImpl *)v190, v24, v26, a5, a6, a7, (uint64_t)a8);
          v188 -= 2;
        }
        while (v188);
      }
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v500);
    }
    if (HIDWORD(v527) == 1)
    {
      v191 = v521;
      if (v521)
      {
        v192 = v522;
        v193 = v525;
        v194 = *(_QWORD *)(v521 + 8) ^ v525;
        *(_QWORD *)v16 = v521;
        *(_QWORD *)(v16 + 8) = v191 + HIDWORD(v194);
        v195 = v191 + (int)v194;
      }
      else
      {
        v193 = 0;
        v192 = 0;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        v195 = 1;
      }
      *(_QWORD *)(v16 + 16) = v195;
      *(_QWORD *)(v16 + 24) = v193;
      *(_DWORD *)(v16 + 32) = v192;
    }
    goto LABEL_281;
  }
  v34 = v18 + 0x4000;
  v35 = a2[1];
  v36 = (_QWORD *)(v18 + 16 * v35);
  if ((unint64_t)(0x4000 - 16 * v35) >= 0x3ED1)
  {
    __break(0xC471u);
    JUMPOUT(0x1985CBA50);
  }
  v37 = (unsigned __int8 *)(v20 + 56);
  if (__ldaxr((unsigned __int8 *)(v20 + 56)))
  {
    __clrex();
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v37);
    goto LABEL_16;
  }
  if (__stxr(1u, v37))
    goto LABEL_15;
LABEL_16:
  v39 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v40 = v39 + 40 * (a2[3] >> 5);
  *(_DWORD *)(v40 + 24) &= ~(1 << a2[3]);
  v41 = v39 + 40 * (a2[3] >> 5);
  *(_DWORD *)(v41 + 16) &= ~(1 << a2[3]);
  v42 = v39 + 40 * (a2[3] >> 5);
  *(_DWORD *)(v42 + 4) &= ~(1 << a2[3]);
  if (HIDWORD(v527) == 1)
  {
    *((_BYTE *)a2 + 10) = 1;
  }
  else
  {
    v178 = v39 + 40 * (a2[3] >> 5);
    *(_DWORD *)(v178 + 4) |= 1 << a2[3];
  }
  v43 = __ldxr(v37);
  v495 = 0x4000 - 16 * v35;
  if (v43 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
LABEL_23:
  v44 = v497;
  if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
  {
    v179 = (unsigned int *)(v18 + 24);
    while (1)
    {
      v180 = *v179;
      if ((*v179 & 3) != 1)
        break;
      v181 = __ldxr(v179);
      if (v181 == v180)
      {
        if (!__stxr(v180 & 0xFFFFFFFE, v179))
          goto LABEL_24;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v179, 0, v24, v26, a5, a6, a7, (uint64_t)a8);
    v44 = v497;
  }
LABEL_24:
  v45 = v44;
  if (v35 <= 0x3FF && (_DWORD)v527)
  {
    v46 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v47 = v18 + 16 * v35;
    do
    {
      if (!*(_DWORD *)v47)
        goto LABEL_737;
      v395 = *(_QWORD *)(v47 + 8);
      if ((v395 & 1) == 0)
      {
        *(_QWORD *)(v47 + 8) = 0;
        if (v395)
        {
          if (*(_DWORD *)v395 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v395, (WTF::AtomStringImpl *)v15, v24, v26, a5, a6, a7, (uint64_t)a8);
            v396 = *(_QWORD *)(v46 + 752);
            if (v396)
            {
              if (!(v395 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v395 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v395)) & 1) != 0)
              {
LABEL_745:
                v397 = *(unsigned int *)(v396 + 8000);
                if (v397 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v396, v395, (os_unfair_lock_s *)5, v26, a5, a6, a7, (uint64_t)a8);
                }
                else
                {
                  *(_QWORD *)(v396 + 8 * v397) = v395 | 0x5000000000000;
                  *(_DWORD *)(v396 + 8000) = v397 + 1;
                }
                v44 = v45;
                goto LABEL_736;
              }
              if (v395 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v395 >> 24)
              {
                v26 = 0;
              }
              else
              {
                v26 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v395 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v395) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v26 == 1)
                  goto LABEL_745;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v396, v395, 1, v26, a5, a6, a7, (uint64_t)a8);
              v44 = v45;
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v395, (uint64_t)&bmalloc_heap_config, 1);
              v44 = v45;
            }
          }
          else
          {
            *(_DWORD *)v395 -= 2;
          }
        }
      }
LABEL_736:
      *(_DWORD *)v47 = 0;
      *(_DWORD *)(v47 + 8) = 1;
LABEL_737:
      v47 += v526;
    }
    while (v47 < v34);
  }
  if (HIDWORD(v527) == 1)
  {
    if (HIDWORD(v526) == 1 && (_DWORD)v35 != 1024)
    {
      memset_pattern16(v36, &unk_1991567C0, v495);
      v44 = v45;
    }
    v398 = v525;
    v36[1] = v525 ^ ((v495 << 32) | 1);
    *(_QWORD *)v44 = v36;
    *(_QWORD *)(v44 + 8) = (char *)v36 + v495;
    *(_QWORD *)(v44 + 16) = (char *)v36 + 1;
    *(_QWORD *)(v44 + 24) = v398;
    *(_DWORD *)(v44 + 32) = v495;
  }
}

void JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::destroy(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)(a3 + 8);
  if ((v8 & 1) == 0)
  {
    *(_QWORD *)(a3 + 8) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  WTF *v64;
  const char *v65;
  const char *v66;
  char v67;
  WTF::PrintStream *v68;
  WTF *v69;
  const char *v70;
  const char *v71;
  WTF *v72;
  const char *v73;
  const char *v74;
  WTF::PrintStream *v75;
  WTF *v76;
  const char *v77;
  const char *v78;
  _QWORD v79[12];
  _QWORD v80[256];
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;

  v89 = 1;
  v90 = 0;
  v9 = *a1;
  v88 = (16 * *a1);
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  v14 = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = v14;
  v86[1] = v10;
  v87 = v14 + v12;
  v86[0] = a2;
  if (BYTE1(qword_1ECF4C414))
  {
    if (*(_QWORD *)(v11 + 40)
      || *(_QWORD *)(v11 + 48)
      || *(_QWORD *)(v11 + 56)
      || *(_QWORD *)(v11 + 64)
      || *(_QWORD *)(v11 + 72)
      || *(_QWORD *)(v11 + 80)
      || *(_QWORD *)(v11 + 88)
      || *(_QWORD *)(v11 + 96)
      || *(_QWORD *)(v11 + 104)
      || *(_QWORD *)(v11 + 112)
      || *(_QWORD *)(v11 + 120)
      || *(_QWORD *)(v11 + 128)
      || *(_QWORD *)(v11 + 136)
      || *(_QWORD *)(v11 + 144)
      || *(_QWORD *)(v11 + 152)
      || *(_QWORD *)(v11 + 160))
    {
      v62 = atomic_load(&WTF::initializeLogFile(void)::once);
      if (v62 != -1)
      {
        v80[0] = &v85;
        v79[0] = v80;
        std::__call_once(&WTF::initializeLogFile(void)::once, v79, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
      v64 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
      WTF::printInternal(v64, (WTF::PrintStream *)"Block ", v65);
      WTF::printInternal(v64, (const void *)v11);
      WTF::printInternal(v64, (WTF::PrintStream *)": marks not empty!\n", v66);
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
      v67 = atomic_load((unsigned int *)(v11 + 24));
      v68 = (WTF::PrintStream *)(v67 & 1);
      v69 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
      WTF::printInternal(v69, (WTF::PrintStream *)"Block lock is held: ", v70);
      WTF::printInternal(v69, v68);
      WTF::printInternal(v69, (WTF::PrintStream *)"\n", v71);
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
      v72 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
      WTF::printInternal(v72, (WTF::PrintStream *)"Marking version of block: ", v73);
      WTF::printInternal(v72, (WTF::PrintStream *)*(unsigned int *)(v11 + 32));
      WTF::printInternal(v72, (WTF::PrintStream *)"\n", v74);
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
      v75 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
      v76 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
      WTF::printInternal(v76, (WTF::PrintStream *)"Marking version of heap: ", v77);
      WTF::printInternal(v76, v75);
      WTF::printInternal(v76, (WTF::PrintStream *)"\n", v78);
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
      __break(0xC471u);
    }
    else
    {
      v15 = a1[1];
      v16 = v11 + 16 * v15;
      if ((unint64_t)(16 * v15 - 16385) > 0xFFFFFFFFFFFFC12ELL)
      {
        v17 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
        if (__ldaxr(v17))
        {
          __clrex();
        }
        else if (!__stxr(1u, v17))
        {
          goto LABEL_25;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_25:
        v23 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
        v24 = v23 + 40 * (a1[3] >> 5);
        *(_DWORD *)(v24 + 24) &= ~(1 << a1[3]);
        v25 = v23 + 40 * (a1[3] >> 5);
        *(_DWORD *)(v25 + 16) &= ~(1 << a1[3]);
        v26 = v23 + 40 * (a1[3] >> 5);
        *(_DWORD *)(v26 + 4) &= ~(1 << a1[3]);
        if (v90 == 1)
        {
          *((_BYTE *)a1 + 10) = 1;
        }
        else
        {
          v27 = v23 + 40 * (a1[3] >> 5);
          *(_DWORD *)(v27 + 4) |= 1 << a1[3];
        }
        v28 = __ldxr(v17);
        if (v28 == 1)
        {
          if (!__stlxr(0, v17))
            goto LABEL_33;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
LABEL_33:
        if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
        {
          v29 = (unsigned int *)(v11 + 24);
          while (1)
          {
            v30 = *v29;
            if ((*v29 & 3) != 1)
              break;
            v31 = __ldxr(v29);
            if (v31 == v30)
            {
              if (!__stxr(v30 & 0xFFFFFFFE, v29))
                goto LABEL_63;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v29, 0, a3, a4, a5, a6, a7, a8);
        }
LABEL_63:
        if (v15 <= 0x3FF && v89)
        {
          do
          {
            if (*(_DWORD *)v16)
            {
              v39 = *(WTF::StringImpl **)(v16 + 8);
              if ((v39 & 1) == 0)
              {
                *(_QWORD *)(v16 + 8) = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v39, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
                  }
                  else
                  {
                    *(_DWORD *)v39 -= 2;
                  }
                }
              }
              *(_DWORD *)v16 = 0;
              *(_DWORD *)(v16 + 8) = 1;
            }
            v16 += v88;
          }
          while (v16 < v11 + 0x4000);
        }
        return;
      }
      __break(0xC471u);
LABEL_104:
      __break(1u);
    }
    JUMPOUT(0x1985CE48CLL);
  }
  v84 = 0;
  v85 = 0;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  v79[0] = v11;
  v79[1] = &v89;
  v79[2] = v86;
  v79[3] = &v90;
  v79[4] = (char *)&v88 + 4;
  v79[5] = &v88;
  v79[6] = a1;
  v79[7] = &v82;
  v79[8] = &v83;
  v79[9] = &v84;
  v79[10] = &v87;
  v79[11] = &v85;
  v19 = 1024 - v9;
  v20 = a1[1];
  if (1024 - v9 >= v20)
  {
    v21 = 0;
    do
    {
      if (v89 == 2)
      {
        v81 = v21 + 1;
        if (v21 >= 0x400)
          goto LABEL_104;
        *((_WORD *)v80 + v21++) = v19;
      }
      else
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v79, (WTF::AtomStringImpl *)v19, a3, a4, a5, a6, a7, a8);
        v9 = *a1;
        v20 = a1[1];
      }
      v19 -= v9;
    }
    while (v19 >= v20);
    v22 = v89;
    v32 = v89 != 2 && v90 == 1;
    if (v32 && v83)
    {
      v33 = 16 * v83;
      v34 = v11 + 16 * v82;
      v35 = ((int)v84 - (int)v34) | (unint64_t)(v83 << 36);
      if (!v84)
        v35 = (v83 << 36) | 1;
      *(_QWORD *)(v34 + 8) = v35 ^ v87;
      v84 = v34;
      v85 += v33;
    }
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v36 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v37 = *v36;
      if ((*v36 & 3) != 1)
        break;
      v38 = __ldxr(v36);
      if (v38 == v37)
      {
        if (!__stxr(v37 & 0xFFFFFFFE, v36))
          goto LABEL_75;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v36, 0, a3, a4, a5, a6, a7, a8);
    v22 = v89;
  }
LABEL_75:
  if (v22 != 2)
  {
    if (v90 != 1)
      goto LABEL_86;
    goto LABEL_85;
  }
  if (v21)
  {
    v48 = 2 * v21;
    v49 = (unsigned __int16 *)v80;
    do
    {
      v50 = *v49++;
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v79, (WTF::AtomStringImpl *)v50, a3, a4, a5, a6, a7, a8);
      v48 -= 2;
    }
    while (v48);
  }
  if (v90 == 1)
  {
    v51 = v83;
    if (v83)
    {
      v52 = v11 + 16 * v82;
      if (v84)
        v53 = (int)v84 - (int)v52;
      else
        v53 = 1;
      *(_QWORD *)(v52 + 8) = (v53 | (v83 << 36)) ^ v87;
      v84 = v52;
      v85 += 16 * v51;
    }
LABEL_85:
    MEMORY[8] = 0;
    MEMORY[0] = 0;
    MEMORY[0x10] = 1;
    MEMORY[0x18] = 0;
    MEMORY[0x20] = 0;
  }
LABEL_86:
  v54 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v54))
  {
    __clrex();
LABEL_89:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v54);
    goto LABEL_90;
  }
  if (__stxr(1u, v54))
    goto LABEL_89;
LABEL_90:
  v56 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v57 = v56 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v57 + 24) &= ~(1 << a1[3]);
  v58 = v56 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v58 + 16) &= ~(1 << a1[3]);
  v59 = v56 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v59 + 4) &= ~(1 << a1[3]);
  if (v90 == 1)
  {
    *((_BYTE *)a1 + 10) = 1;
  }
  else
  {
    v60 = v56 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v60 + 4) |= 1 << a1[3];
  }
  v61 = __ldxr(v54);
  if (v61 == 1)
  {
    if (!__stlxr(0, v54))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v54, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v73;
  uint64_t v74;
  WTF *v75;
  const char *v76;
  const char *v77;
  char v78;
  WTF::PrintStream *v79;
  WTF *v80;
  const char *v81;
  const char *v82;
  WTF *v83;
  const char *v84;
  const char *v85;
  WTF::PrintStream *v86;
  WTF *v87;
  const char *v88;
  const char *v89;
  _QWORD v90[12];
  _QWORD v91[256];
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;

  v100 = 1;
  v101 = 1;
  v10 = *a1;
  v99 = (16 * *a1);
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_QWORD *)a1 + 11);
  v13 = *(_QWORD *)(v11 + 168);
  v14 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  v15 = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
  *(_QWORD *)(v11 + 160) = v13;
  *(_QWORD *)(v11 + 168) = v15;
  v97[1] = v11;
  v98 = v15 + v13;
  v97[0] = a3;
  if (BYTE1(qword_1ECF4C414))
  {
    if (*(_QWORD *)(v12 + 40)
      || *(_QWORD *)(v12 + 48)
      || *(_QWORD *)(v12 + 56)
      || *(_QWORD *)(v12 + 64)
      || *(_QWORD *)(v12 + 72)
      || *(_QWORD *)(v12 + 80)
      || *(_QWORD *)(v12 + 88)
      || *(_QWORD *)(v12 + 96)
      || *(_QWORD *)(v12 + 104)
      || *(_QWORD *)(v12 + 112)
      || *(_QWORD *)(v12 + 120)
      || *(_QWORD *)(v12 + 128)
      || *(_QWORD *)(v12 + 136)
      || *(_QWORD *)(v12 + 144)
      || *(_QWORD *)(v12 + 152)
      || *(_QWORD *)(v12 + 160))
    {
      v73 = atomic_load(&WTF::initializeLogFile(void)::once);
      if (v73 != -1)
      {
        v91[0] = &v96;
        v90[0] = v91;
        std::__call_once(&WTF::initializeLogFile(void)::once, v90, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
      v75 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
      WTF::printInternal(v75, (WTF::PrintStream *)"Block ", v76);
      WTF::printInternal(v75, (const void *)v12);
      WTF::printInternal(v75, (WTF::PrintStream *)": marks not empty!\n", v77);
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
      v78 = atomic_load((unsigned int *)(v12 + 24));
      v79 = (WTF::PrintStream *)(v78 & 1);
      v80 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
      WTF::printInternal(v80, (WTF::PrintStream *)"Block lock is held: ", v81);
      WTF::printInternal(v80, v79);
      WTF::printInternal(v80, (WTF::PrintStream *)"\n", v82);
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
      v83 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
      WTF::printInternal(v83, (WTF::PrintStream *)"Marking version of block: ", v84);
      WTF::printInternal(v83, (WTF::PrintStream *)*(unsigned int *)(v12 + 32));
      WTF::printInternal(v83, (WTF::PrintStream *)"\n", v85);
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
      v86 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
      v87 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
      WTF::printInternal(v87, (WTF::PrintStream *)"Marking version of heap: ", v88);
      WTF::printInternal(v87, v86);
      WTF::printInternal(v87, (WTF::PrintStream *)"\n", v89);
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
      __break(0xC471u);
    }
    else
    {
      v16 = a1[1];
      v17 = (_QWORD *)(v12 + 16 * v16);
      v18 = 0x4000 - 16 * v16;
      if (v18 < 0x3ED1)
      {
        v19 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
        if (__ldaxr(v19))
        {
          __clrex();
        }
        else if (!__stxr(1u, v19))
        {
          goto LABEL_25;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
LABEL_25:
        v26 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
        v27 = v26 + 40 * (a1[3] >> 5);
        *(_DWORD *)(v27 + 24) &= ~(1 << a1[3]);
        v28 = v26 + 40 * (a1[3] >> 5);
        *(_DWORD *)(v28 + 16) &= ~(1 << a1[3]);
        v29 = v26 + 40 * (a1[3] >> 5);
        *(_DWORD *)(v29 + 4) &= ~(1 << a1[3]);
        if (v101 == 1)
        {
          *((_BYTE *)a1 + 10) = 1;
        }
        else
        {
          v30 = v26 + 40 * (a1[3] >> 5);
          *(_DWORD *)(v30 + 4) |= 1 << a1[3];
        }
        v31 = __ldxr(v19);
        if (v31 == 1)
        {
          if (!__stlxr(0, v19))
            goto LABEL_33;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, a3, a4, a5, a6, a7, a8);
LABEL_33:
        if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
        {
          v32 = (unsigned int *)(v12 + 24);
          while (1)
          {
            v33 = *v32;
            if ((*v32 & 3) != 1)
              break;
            v34 = __ldxr(v32);
            if (v34 == v33)
            {
              if (!__stxr(v33 & 0xFFFFFFFE, v32))
                goto LABEL_64;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v32, 0, a3, a4, a5, a6, a7, a8);
        }
LABEL_64:
        if (v16 <= 0x3FF && v100)
        {
          v42 = v12 + 16 * v16;
          do
          {
            if (*(_DWORD *)v42)
            {
              v43 = *(WTF::StringImpl **)(v42 + 8);
              if ((v43 & 1) == 0)
              {
                *(_QWORD *)(v42 + 8) = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
                  }
                  else
                  {
                    *(_DWORD *)v43 -= 2;
                  }
                }
              }
              *(_DWORD *)v42 = 0;
              *(_DWORD *)(v42 + 8) = 1;
            }
            v42 += v99;
          }
          while (v42 < v12 + 0x4000);
        }
        if (v101 == 1)
        {
          if (HIDWORD(v99) == 1 && (_DWORD)v16 != 1024)
            memset_pattern16(v17, &unk_1991567C0, 0x4000 - 16 * v16);
          v52 = v98;
          v17[1] = v98 ^ ((v18 << 32) | 1);
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 8) = (char *)v17 + v18;
          *(_QWORD *)(a2 + 16) = (char *)v17 + 1;
          *(_QWORD *)(a2 + 24) = v52;
          *(_DWORD *)(a2 + 32) = v18;
        }
        return;
      }
      __break(0xC471u);
LABEL_115:
      __break(1u);
    }
    JUMPOUT(0x1985CECC0);
  }
  v95 = 0;
  v96 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  v90[0] = v12;
  v90[1] = &v100;
  v90[2] = v97;
  v90[3] = &v101;
  v90[4] = (char *)&v99 + 4;
  v90[5] = &v99;
  v90[6] = a1;
  v90[7] = &v93;
  v90[8] = &v94;
  v90[9] = &v95;
  v90[10] = &v98;
  v90[11] = &v96;
  v21 = 1024 - v10;
  v22 = a1[1];
  if (1024 - v10 >= v22)
  {
    v23 = 0;
    do
    {
      if (v100 == 2)
      {
        v92 = v23 + 1;
        if (v23 >= 0x400)
          goto LABEL_115;
        *((_WORD *)v91 + v23++) = v21;
      }
      else
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v90, (WTF::AtomStringImpl *)v21, a3, a4, a5, a6, a7, a8);
        v10 = *a1;
        v22 = a1[1];
      }
      v21 -= v10;
    }
    while (v21 >= v22);
    v25 = v100;
    v24 = v101;
  }
  else
  {
    v23 = 0;
    v24 = 1;
    v25 = 1;
  }
  v35 = v25 != 2 && v24 == 1;
  if (v35 && v94)
  {
    v36 = 16 * v94;
    v37 = v12 + 16 * v93;
    v38 = ((int)v95 - (int)v37) | (unint64_t)(v94 << 36);
    if (!v95)
      v38 = (v94 << 36) | 1;
    *(_QWORD *)(v37 + 8) = v38 ^ v98;
    v95 = v37;
    v96 += v36;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v39 = (unsigned int *)(v12 + 24);
    while (1)
    {
      v40 = *v39;
      if ((*v39 & 3) != 1)
        break;
      v41 = __ldxr(v39);
      if (v41 == v40)
      {
        if (!__stxr(v40 & 0xFFFFFFFE, v39))
          goto LABEL_82;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v39, 0, a3, a4, a5, a6, a7, a8);
    v25 = v100;
  }
LABEL_82:
  if (v25 != 2)
  {
    if (v101 != 1)
      goto LABEL_97;
    v56 = v95;
    v57 = v98;
    goto LABEL_94;
  }
  if (v23)
  {
    v53 = 2 * v23;
    v54 = (unsigned __int16 *)v91;
    do
    {
      v55 = *v54++;
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v90, (WTF::AtomStringImpl *)v55, a3, a4, a5, a6, a7, a8);
      v53 -= 2;
    }
    while (v53);
  }
  if (v101 == 1)
  {
    v56 = v95;
    v57 = v98;
    if (v94)
    {
      v58 = 16 * v94;
      v59 = v12 + 16 * v93;
      if (v95)
        v60 = ((int)v95 - (int)v59) | (unint64_t)(v94 << 36);
      else
        v60 = (v94 << 36) | 1;
      *(_QWORD *)(v59 + 8) = v60 ^ v98;
      v95 = v59;
      v96 += v58;
      v56 = v59;
      goto LABEL_95;
    }
LABEL_94:
    if (!v56)
    {
      v57 = 0;
      v61 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v63 = 1;
      goto LABEL_96;
    }
LABEL_95:
    v61 = v96;
    v62 = *(_QWORD *)(v56 + 8) ^ v57;
    *(_QWORD *)a2 = v56;
    *(_QWORD *)(a2 + 8) = v56 + HIDWORD(v62);
    v63 = v56 + (int)v62;
LABEL_96:
    *(_QWORD *)(a2 + 16) = v63;
    *(_QWORD *)(a2 + 24) = v57;
    *(_DWORD *)(a2 + 32) = v61;
  }
LABEL_97:
  v64 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v64))
  {
    __clrex();
LABEL_100:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v64);
    goto LABEL_101;
  }
  if (__stxr(1u, v64))
    goto LABEL_100;
LABEL_101:
  v66 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v67 = v66 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v67 + 24) &= ~(1 << a1[3]);
  v68 = v66 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v68 + 16) &= ~(1 << a1[3]);
  v69 = v66 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v69 + 4) &= ~(1 << a1[3]);
  if (v101 == 1)
  {
    *((_BYTE *)a1 + 10) = 1;
  }
  else
  {
    v70 = v66 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v70 + 4) |= 1 << a1[3];
  }
  v71 = __ldxr(v64);
  if (v71 == 1)
  {
    if (!__stlxr(0, v64))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v64, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  signed int v16;
  signed int v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[12];
  _WORD v40[1024];
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;

  v8 = a1;
  v9 = 1;
  v50 = 1;
  v10 = *(_DWORD *)a1;
  v48 = 16 * *(_DWORD *)a1;
  v49 = 0;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(v11 + 168);
  v14 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  v15 = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
  *(_QWORD *)(v11 + 160) = v13;
  *(_QWORD *)(v11 + 168) = v15;
  v46[1] = v11;
  v47 = v15 + v13;
  v45 = 0;
  v46[0] = a2;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v41 = 0;
  v39[0] = v12;
  v39[1] = &v50;
  v39[2] = v46;
  v39[3] = (char *)&v50 + 4;
  v39[4] = &v49;
  v39[5] = &v48;
  v39[6] = a1;
  v39[7] = &v42;
  v39[8] = &v43;
  v39[9] = &v44;
  v39[10] = &v47;
  v39[11] = &v45;
  v16 = 1024 - v10;
  v17 = *(_DWORD *)(a1 + 4);
  if ((int)(1024 - v10) >= v17)
  {
    v18 = 0;
    do
    {
      if ((_DWORD)v50 == 2)
      {
        v41 = v18 + 1;
        if (v18 >= 0x400)
        {
          __break(1u);
          goto LABEL_26;
        }
        v40[v18++] = v16;
      }
      else
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v39, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
        v10 = *(_DWORD *)v8;
        v17 = *(_DWORD *)(v8 + 4);
      }
      v16 -= v10;
    }
    while (v16 >= v17);
    v9 = v50;
    v19 = (_DWORD)v50 != 2 && HIDWORD(v50) == 1;
    if (v19 && v43)
    {
      v20 = 16 * v43;
      v21 = v12 + 16 * v42;
      v22 = ((int)v44 - (int)v21) | (unint64_t)(v43 << 36);
      if (!v44)
        v22 = (v43 << 36) | 1;
      *(_QWORD *)(v21 + 8) = v22 ^ v47;
      v44 = v21;
      v45 += v20;
    }
  }
  else
  {
    v18 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 80) + 445))
  {
    a1 = v12 + 24;
    while (1)
    {
      v23 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 3) != 1)
        break;
      v24 = __ldxr((unsigned int *)a1);
      if (v24 == v23)
      {
        if (!__stxr(v23 & 0xFFFFFFFE, (unsigned int *)a1))
          goto LABEL_27;
      }
      else
      {
        __clrex();
      }
    }
LABEL_26:
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow((unsigned int *)a1, 0, a3, a4, a5, a6, a7, a8);
    v9 = v50;
  }
LABEL_27:
  if (v9 != 2)
  {
    if (HIDWORD(v50) != 1)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (v18)
  {
    v25 = 2 * v18;
    v26 = v40;
    do
    {
      v27 = *v26++;
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v39, (WTF::AtomStringImpl *)v27, a3, a4, a5, a6, a7, a8);
      v25 -= 2;
    }
    while (v25);
  }
  if (HIDWORD(v50) == 1)
  {
    v28 = v43;
    if (v43)
    {
      v29 = v12 + 16 * v42;
      if (v44)
        v30 = (int)v44 - (int)v29;
      else
        v30 = 1;
      *(_QWORD *)(v29 + 8) = (v30 | (v43 << 36)) ^ v47;
      v44 = v29;
      v45 += 16 * v28;
    }
LABEL_37:
    MEMORY[8] = 0;
    MEMORY[0] = 0;
    MEMORY[0x10] = 1;
    MEMORY[0x18] = 0;
    MEMORY[0x20] = 0;
  }
LABEL_38:
  v31 = (unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 56);
  if (__ldaxr(v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, v31))
  {
    goto LABEL_42;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v31);
LABEL_42:
  v33 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 32);
  v34 = v33 + 40 * (*(_DWORD *)(v8 + 12) >> 5);
  *(_DWORD *)(v34 + 24) &= ~(1 << *(_DWORD *)(v8 + 12));
  v35 = v33 + 40 * (*(_DWORD *)(v8 + 12) >> 5);
  *(_DWORD *)(v35 + 16) &= ~(1 << *(_DWORD *)(v8 + 12));
  v36 = v33 + 40 * (*(_DWORD *)(v8 + 12) >> 5);
  *(_DWORD *)(v36 + 4) &= ~(1 << *(_DWORD *)(v8 + 12));
  if (HIDWORD(v50) == 1)
  {
    *(_BYTE *)(v8 + 10) = 1;
  }
  else
  {
    v37 = v33 + 40 * (*(_DWORD *)(v8 + 12) >> 5);
    *(_DWORD *)(v37 + 4) |= 1 << *(_DWORD *)(v8 + 12);
  }
  v38 = __ldxr(v31);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_49;
  }
  if (__stlxr(0, v31))
LABEL_49:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  signed int v17;
  signed int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD v45[12];
  _WORD v46[1024];
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a1;
  v10 = 1;
  v56 = 1;
  v57 = 1;
  v11 = *(_DWORD *)a1;
  v54 = 16 * *(_DWORD *)a1;
  v55 = 0;
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(v12 + 168);
  v15 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
  v16 = (v14 >> 26) ^ (v15 >> 17) ^ v14 ^ v15;
  *(_QWORD *)(v12 + 160) = v14;
  *(_QWORD *)(v12 + 168) = v16;
  v52[1] = v12;
  v53 = v16 + v14;
  v51 = 0;
  v52[0] = a3;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v47 = 0;
  v45[0] = v13;
  v45[1] = &v56;
  v45[2] = v52;
  v45[3] = &v57;
  v45[4] = &v55;
  v45[5] = &v54;
  v45[6] = a1;
  v45[7] = &v48;
  v45[8] = &v49;
  v45[9] = &v50;
  v45[10] = &v53;
  v45[11] = &v51;
  v17 = 1024 - v11;
  v18 = *(_DWORD *)(a1 + 4);
  if ((int)(1024 - v11) >= v18)
  {
    v19 = 0;
    while (1)
    {
      if (v56 == 2)
      {
        v47 = v19 + 1;
        if (v19 >= 0x400)
        {
          __break(1u);
          goto LABEL_24;
        }
        v46[v19++] = v17;
      }
      else
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v45, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
        v11 = *(_DWORD *)v9;
        v18 = *(_DWORD *)(v9 + 4);
      }
      v17 -= v11;
      if (v17 < v18)
      {
        v20 = v56;
        v10 = v57 == 1;
        goto LABEL_10;
      }
    }
  }
  v19 = 0;
  v20 = 1;
LABEL_10:
  if (v20 != 2 && v10)
  {
    v21 = v49;
    if (v49)
    {
      v22 = v13 + 16 * v48;
      if (v50)
        v23 = (int)v50 - (int)v22;
      else
        v23 = 1;
      *(_QWORD *)(v22 + 8) = (v23 | (v49 << 36)) ^ v53;
      v50 = v22;
      v51 += 16 * v21;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v9 + 80) + 445))
  {
    a1 = v13 + 24;
    while (1)
    {
      v24 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 3) != 1)
        break;
      v25 = __ldxr((unsigned int *)a1);
      if (v25 == v24)
      {
        if (!__stxr(v24 & 0xFFFFFFFE, (unsigned int *)a1))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
    }
LABEL_24:
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow((unsigned int *)a1, 0, a3, a4, a5, a6, a7, a8);
    v20 = v56;
  }
LABEL_25:
  if (v20 != 2)
  {
    if (v57 != 1)
      goto LABEL_40;
    v29 = v50;
    v30 = v53;
    goto LABEL_37;
  }
  if (v19)
  {
    v26 = 2 * v19;
    v27 = v46;
    do
    {
      v28 = *v27++;
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)v45, (WTF::AtomStringImpl *)v28, a3, a4, a5, a6, a7, a8);
      v26 -= 2;
    }
    while (v26);
  }
  if (v57 == 1)
  {
    v29 = v50;
    v30 = v53;
    if (v49)
    {
      v31 = 16 * v49;
      v32 = v13 + 16 * v48;
      if (v50)
        v33 = ((int)v50 - (int)v32) | (unint64_t)(v49 << 36);
      else
        v33 = (v49 << 36) | 1;
      *(_QWORD *)(v32 + 8) = v33 ^ v53;
      v50 = v32;
      v51 += v31;
      v29 = v32;
      goto LABEL_38;
    }
LABEL_37:
    if (!v29)
    {
      v30 = 0;
      v34 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v36 = 1;
      goto LABEL_39;
    }
LABEL_38:
    v34 = v51;
    v35 = *(_QWORD *)(v29 + 8) ^ v30;
    *(_QWORD *)a2 = v29;
    *(_QWORD *)(a2 + 8) = v29 + HIDWORD(v35);
    v36 = v29 + (int)v35;
LABEL_39:
    *(_QWORD *)(a2 + 16) = v36;
    *(_QWORD *)(a2 + 24) = v30;
    *(_DWORD *)(a2 + 32) = v34;
  }
LABEL_40:
  v37 = (unsigned __int8 *)(*(_QWORD *)(v9 + 24) + 56);
  if (__ldaxr(v37))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_44;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v37);
LABEL_44:
  v39 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 32);
  v40 = v39 + 40 * (*(_DWORD *)(v9 + 12) >> 5);
  *(_DWORD *)(v40 + 24) &= ~(1 << *(_DWORD *)(v9 + 12));
  v41 = v39 + 40 * (*(_DWORD *)(v9 + 12) >> 5);
  *(_DWORD *)(v41 + 16) &= ~(1 << *(_DWORD *)(v9 + 12));
  v42 = v39 + 40 * (*(_DWORD *)(v9 + 12) >> 5);
  *(_DWORD *)(v42 + 4) &= ~(1 << *(_DWORD *)(v9 + 12));
  if (v57 == 1)
  {
    *(_BYTE *)(v9 + 10) = 1;
  }
  else
  {
    v43 = v39 + 40 * (*(_DWORD *)(v9 + 12) >> 5);
    *(_DWORD *)(v43 + 4) |= 1 << *(_DWORD *)(v9 + 12);
  }
  v44 = __ldxr(v37);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, v37))
LABEL_51:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v10 = *(unsigned int **)(a1 + 48);
  v11 = (_QWORD *)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v11)
  {
    v12 = (WTF::StringImpl *)v11[1];
    if ((v12 & 1) == 0)
    {
      v11[1] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    *(_DWORD *)v11 = 0;
    *((_DWORD *)v11 + 2) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v30 = **(_DWORD **)(a1 + 40);
      if (v30 >= 8)
        memset_pattern16(v11, &unk_1991567C0, v30 & 0xFFFFFFF8);
    }
    v13 = *v10;
    v15 = *(_QWORD **)(a1 + 56);
    v14 = *(uint64_t **)(a1 + 64);
    v16 = *v14;
    if ((unint64_t)a2 + v13 < *v15)
    {
      v17 = 16 * v16;
      v18 = *(_QWORD *)a1 + 16 * *v15;
      v19 = *(_QWORD **)(a1 + 72);
      v20 = (v16 << 36) | 1;
      v21 = (int)(*v19 - v18) | (unint64_t)(v16 << 36);
      if (!*v19)
        v21 = v20;
      *(_QWORD *)(v18 + 8) = v21 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v17;
      *v19 = v18;
      v15 = *(_QWORD **)(a1 + 56);
      v14 = *(uint64_t **)(a1 + 64);
      *v14 = 0;
      v16 = 0;
    }
    *v14 = v16 + v13;
    *v15 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v10 = *(unsigned int **)(a1 + 48);
  v11 = (_QWORD *)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v11)
  {
    v12 = (WTF::StringImpl *)v11[1];
    if ((v12 & 1) == 0)
    {
      v11[1] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    *(_DWORD *)v11 = 0;
    *((_DWORD *)v11 + 2) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v30 = **(_DWORD **)(a1 + 40);
      if (v30 >= 8)
        memset_pattern16(v11, &unk_1991567C0, v30 & 0xFFFFFFF8);
    }
    v21 = *v10;
    v23 = *(_QWORD **)(a1 + 56);
    v22 = *(uint64_t **)(a1 + 64);
    v24 = *v22;
    if ((unint64_t)a2 + v21 < *v23)
    {
      v25 = 16 * v24;
      v26 = *(_QWORD *)a1 + 16 * *v23;
      v27 = *(_QWORD **)(a1 + 72);
      v28 = (v24 << 36) | 1;
      v29 = (int)(*v27 - v26) | (unint64_t)(v24 << 36);
      if (!*v27)
        v29 = v28;
      *(_QWORD *)(v26 + 8) = v29 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v25;
      *v27 = v26;
      v23 = *(_QWORD **)(a1 + 56);
      v22 = *(uint64_t **)(a1 + 64);
      *v22 = 0;
      v24 = 0;
    }
    *v22 = v24 + v21;
    *v23 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSRopeString>::DestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v10 = *(unsigned int **)(a1 + 48);
  v11 = (_QWORD *)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v11)
  {
    v12 = (WTF::StringImpl *)v11[1];
    if ((v12 & 1) == 0)
    {
      v11[1] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    *(_DWORD *)v11 = 0;
    *((_DWORD *)v11 + 2) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v30 = **(_DWORD **)(a1 + 40);
      if (v30 >= 8)
        memset_pattern16(v11, &unk_1991567C0, v30 & 0xFFFFFFF8);
    }
    v13 = *v10;
    v15 = *(_QWORD **)(a1 + 56);
    v14 = *(uint64_t **)(a1 + 64);
    v16 = *v14;
    if ((unint64_t)a2 + v13 < *v15)
    {
      v17 = 16 * v16;
      v18 = *(_QWORD *)a1 + 16 * *v15;
      v19 = *(_QWORD **)(a1 + 72);
      v20 = (v16 << 36) | 1;
      v21 = (int)(*v19 - v18) | (unint64_t)(v16 << 36);
      if (!*v19)
        v21 = v20;
      *(_QWORD *)(v18 + 8) = v21 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v17;
      *v19 = v18;
      v15 = *(_QWORD **)(a1 + 56);
      v14 = *(uint64_t **)(a1 + 64);
      *v14 = 0;
      v16 = 0;
    }
    *v14 = v16 + v13;
    *v15 = a2;
  }
}

uint64_t WTF::dataLog<char [2],unsigned int,char [3],unsigned long,char [3],unsigned int,char [4],unsigned int,char [2],double,char [3],JSC::CellAttributes,char [2],char const*,char [2]>(_DWORD *a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, double *a5, JSC::CellAttributes *a6, const char **a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", "[");
  WTF::PrintStream::printf(v16, "%u", *a1);
  WTF::PrintStream::printf(v16, "%s", "] ");
  WTF::PrintStream::printf(v16, "%lu", *a2);
  WTF::PrintStream::printf(v16, "%s", ", ");
  WTF::PrintStream::printf(v16, "%u", *a3);
  WTF::PrintStream::printf(v16, "%s", " / ");
  WTF::PrintStream::printf(v16, "%u", *a4);
  WTF::PrintStream::printf(v16, "%s", " ");
  WTF::PrintStream::printf(v16, "%lf", *a5);
  WTF::PrintStream::printf(v16, "%s", "% ");
  JSC::CellAttributes::dump(a6, v16);
  WTF::PrintStream::printf(v16, "%s", " ");
  WTF::PrintStream::printf(v16, "%s", *a7);
  WTF::PrintStream::printf(v16, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

uint64_t WTF::dataLog<char [5],JSC::JSValue,char [2]>(JSC::JSValue *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::Structure *v5;
  unint64_t v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    ");
  v5 = 0;
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v6 & 0xFFFE000000000002) == 0)
    v5 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a1, v4, 0, v5);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [5],JSC::JSCell,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    ");
  (*(void (**)(_DWORD *, WTF::PrintStream *))(16 * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C)
                                                       + 0xB8))(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::filterIncomingReferences<JSC::GCIncomingRefCountedSet<JSC::ArrayBuffer>::lastChanceToFinalize(void)::{lambda(JSC::JSCell *)#1}>(JSC::ArrayBuffer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    if ((v8 & 1) == 0)
    {
      v10 = *(unsigned int *)(v8 + 12);
      if ((_DWORD)v10)
      {
        v11 = v10 - 1;
        do
          **(_QWORD **)v8 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v11);
        while ((_DWORD)v11--);
        *(_DWORD *)(v8 + 12) = 0;
      }
      v13 = *(_QWORD **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
        WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
    *((_QWORD *)this + 1) = 0;
    v14 = (*(_DWORD *)this & 0xFFFFFFFE) == 0;
    *(_DWORD *)this &= ~1u;
    if (v14)
    {
      JSC::ArrayBuffer::~ArrayBuffer(this, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

uint64_t *WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,unsigned int>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::expand(result, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = v13 + 16 * v20;
  v22 = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v13 - 4);
        v32 = 0;
        v31 = v13 + 16 * v33;
        goto LABEL_18;
      }
      if (v22 == -1)
        v23 = (_QWORD *)v21;
      v20 = (v20 + v24) & v15;
      v21 = v13 + 16 * v20;
      v22 = *(_QWORD *)v21;
      ++v24;
    }
    while (*(_QWORD *)v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = (uint64_t)v23;
    }
  }
  *(_QWORD *)v21 = v16;
  *(_DWORD *)(v21 + 8) = *a3;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v11;
  if (*v11)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_17;
    goto LABEL_27;
  }
  if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v34 = 8;
      goto LABEL_28;
    }
LABEL_27:
    v34 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
LABEL_28:
    result = (uint64_t *)WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,unsigned int>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v11, v34, v21, a4, a5, a6, a7, a8);
    v21 = (uint64_t)result;
    v27 = *v11;
    if (*v11)
      v30 = *(unsigned int *)(v27 - 4);
    else
      v30 = 0;
  }
LABEL_17:
  v31 = v27 + 16 * v30;
  v32 = 1;
LABEL_18:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v31;
  *(_BYTE *)(a9 + 16) = v32;
  return result;
}

_OWORD *WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,unsigned int>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = *a1;
  if (*a1 && (v9 = *(_DWORD *)(v8 - 4)) != 0)
    v10 = (v9 << (6 * *(_DWORD *)(v8 - 12) >= (2 * v9)));
  else
    v10 = 8;
  return WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,unsigned int>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(a1, v10, 0, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,unsigned int>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,unsigned int,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 16 * v22);
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = (~(*v24 << 32) + *v24) ^ ((~(*v24 << 32) + *v24) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((unint64_t)(v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        v31 = 1;
        do
        {
          v32 = v30;
          v33 = *(_QWORD *)(v25 + 16 * v30);
          v30 = (v30 + v31++) & v26;
        }
        while (v33);
        v34 = (_OWORD *)(v25 + 16 * v32);
        *v34 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v23 = v34;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

BOOL JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::addIncomingReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v19 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if ((v3 & 1) != 0)
    {
      v7 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v18 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL;
      v8 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, 1uLL, (unint64_t)&v18);
      v9 = *(unsigned int *)(v7 + 12);
      *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = *v8;
      v10 = *(_DWORD *)(v7 + 8);
      v11 = (v9 + 1);
      *(_DWORD *)(v7 + 12) = v11;
      if ((_DWORD)v11 == v10)
      {
        v17 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v11 + 1, (unint64_t)&v19);
        v11 = *(unsigned int *)(v7 + 12);
        v12 = v11 + 1;
        v13 = *(_QWORD *)v7;
        v14 = *v17;
      }
      else
      {
        v12 = v9 + 2;
        v13 = *(_QWORD *)v7;
        v14 = v19;
      }
      *(_QWORD *)(v13 + 8 * v11) = v14;
      *(_DWORD *)(v7 + 12) = v12;
      *(_QWORD *)(a1 + 8) = v7;
    }
    else
    {
      v5 = *(unsigned int *)(v3 + 12);
      if ((_DWORD)v5 == *(_DWORD *)(v3 + 8))
      {
        v15 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 8), v5 + 1, (unint64_t)&v19);
        v16 = *(unsigned int *)(v3 + 12);
        v6 = v16 + 1;
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v16) = *v15;
      }
      else
      {
        v6 = v5 + 1;
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = a2;
      }
      *(_DWORD *)(v3 + 12) = v6;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2 | 1;
    *(_DWORD *)a1 |= 1u;
  }
  return v3 == 0;
}

uint64_t WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBuffer *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::ArrayBuffer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void JSC::IsoCellSet::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::EvalExecutable,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::EvalExecutable,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(unsigned int)#1}::operator()(_QWORD *a1, unsigned int a2)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(*a1 + 12) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v2 = *(unsigned int **)(*(_QWORD *)*a1 + 8 * a2);
    v3 = (_QWORD *)a1[2];
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 56) + (a2 & 0xFFFFFFF8) + 8) + 8 * (a2 & 7));
    v5 = *((_QWORD *)v2 + 11);
    v6 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 432);
    v7 = *(_DWORD *)(v5 + 32);
    __dmb(0xBu);
    if (v7 == v6)
    {
      v8 = v2[1];
      if (v8 <= 0x3FF)
      {
        v9 = v5 + 40;
        do
        {
          if (((1 << v8) & *(_QWORD *)(v9 + 8 * (v8 >> 6))) != 0
            && (*(_QWORD *)(v4 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
          {
            JSC::GlobalExecutable::finalizeUnconditionally(*((_QWORD *)v2 + 11) + 16 * v8, *v3 - 192);
          }
          v8 += *v2;
        }
        while (v8 < 0x400);
      }
    }
  }
}

void JSC::IsoCellSet::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::CodeBlock,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::CodeBlock,JSC::IsoCellSet>(JSC::IsoCellSet &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()(_QWORD **a1, _BYTE *a2, int8x8_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unsigned int v9;

  v9 = a2[36];
  if (v9 >= 0x20)
  {
    __break(1u);
  }
  else if (((*((_DWORD *)*a1 + 4) >> v9) & 1) != 0 && (a2[33] & 1) != 0)
  {
    JSC::CodeBlock::finalizeUnconditionally((JSC::CodeBlock *)(a2 + 112), (JSC::VM *)(*a1[1] - 192), (void *)*(unsigned __int8 *)a1[1][1], a5, a6, a7, a8, a9, a3);
  }
}

_QWORD **JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::Structure,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::Structure,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()(_QWORD **result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 33) & 1) != 0)
    return (_QWORD **)JSC::Structure::finalizeUnconditionally(a2 + 112, **result - 192);
  return result;
}

void JSC::BlockDirectory::forEachNotEmptyBlock<void JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::MarkedBlock::Handle *)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(unsigned long)#1}::operator()(_QWORD **a1, uint64_t a2, unint64_t a3)
{
  unsigned int *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  if (*(unsigned int *)(a2 + 12) <= a3)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(unsigned int **)(*(_QWORD *)a2 + 8 * a3);
    v4 = *a1;
    v5 = *((_QWORD *)v3 + 11);
    v6 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 432);
    v7 = *(_DWORD *)(v5 + 32);
    __dmb(0xBu);
    if (v7 == v6)
    {
      v8 = v3[1];
      if (v8 <= 0x3FF)
      {
        v9 = v5 + 40;
        do
        {
          if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
            JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::finalizeUnconditionally(*((_QWORD *)v3 + 11) + 16 * v8, *v4 - 192);
          v8 += *v3;
        }
        while (v8 < 0x400);
      }
    }
  }
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::finalizeUnconditionally(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  int v10;

  if (!*(_DWORD *)(a1 + 24))
    return;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  do
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    if (v6)
      v7 = v6 == -3;
    else
      v7 = 1;
    if (!v7)
    {
      if ((v6 & 8) != 0)
      {
        if ((*(_BYTE *)(v6 - 79) & 1) != 0)
          goto LABEL_8;
      }
      else if ((JSC::MarkedBlock::isMarked(v6 & 0xFFFFFFFFFFFFC000, *(_DWORD *)(a2 + 432), v6) & 1) != 0)
      {
        goto LABEL_8;
      }
      *(_QWORD *)(v5 + 8 * v4) = -3;
      v10 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 32);
      if (!v10)
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(a1 + 28) = v10 - 1;
    }
LABEL_8:
    ++v4;
    v8 = *(unsigned int *)(a1 + 24);
  }
  while (v4 < v8);
  if (v8 >= 5 && 8 * *(_DWORD *)(a1 + 28) <= v8)
    JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::rehash(a1, 1);
}

void JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWeakSet,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()(_QWORD **a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 33) & 1) != 0)
    JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::finalizeUnconditionally(a2 + 112, **a1 - 192);
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::finalizeUnconditionally(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;

  if (!*(_DWORD *)(a1 + 24))
    return;
  v2 = 0;
  v3 = *(unint64_t **)(a1 + 16);
  do
  {
    v4 = *v3;
    if (*v3)
      v5 = v4 == -3;
    else
      v5 = 1;
    if (!v5)
    {
      if ((v4 & 8) != 0)
      {
        if ((*(_BYTE *)(v4 - 79) & 1) != 0)
          goto LABEL_8;
      }
      else if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
             && ((*(_QWORD *)((v4 & 0xFFFFFFFFFFFFC000) + 8 * ((v4 >> 10) & 0xF) + 0x28) >> (v4 >> 4)) & 1) != 0)
      {
        goto LABEL_8;
      }
      *v3 = -3;
      v3[1] = 0;
      v7 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 32);
      if (!v7)
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(a1 + 28) = v7 - 1;
    }
LABEL_8:
    ++v2;
    v6 = *(unsigned int *)(a1 + 24);
    v3 += 2;
  }
  while (v2 < v6);
  if (v6 >= 5 && 8 * *(_DWORD *)(a1 + 28) <= v6)
    JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::rehash(a1, 1);
}

void JSC::BlockDirectory::forEachNotEmptyBlock<void JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::MarkedBlock::Handle *)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  if (*(unsigned int *)(a2 + 12) <= a3)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(unsigned int **)(*(_QWORD *)a2 + 8 * a3);
    v10 = *a1;
    v11 = *((_QWORD *)v9 + 11);
    v12 = *(_DWORD *)(*(_QWORD *)(v11 + 8) + 432);
    v13 = *(_DWORD *)(v11 + 32);
    __dmb(0xBu);
    if (v13 == v12)
    {
      v14 = v9[1];
      if (v14 <= 0x3FF)
      {
        v15 = v11 + 40;
        do
        {
          if (((*(_QWORD *)(v15 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
            JSC::JSWebAssemblyInstance::finalizeUnconditionally(*((_QWORD *)v9 + 11) + 16 * v14, (JSC::VM *)(*(_QWORD *)v10 - 192), (void *)**(unsigned __int8 **)(v10 + 8), a4, a5, a6, a7, a8, a9);
          v14 += *v9;
        }
        while (v14 < 0x400);
      }
    }
  }
}

void JSC::Subspace::forEachMarkedCell<void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1}>(void JSC::Heap::finalizeMarkedUnconditionalFinalizers<JSC::JSWebAssemblyInstance,JSC::IsoSubspace>(JSC::IsoSubspace &,JSC::CollectionScope)::{lambda(JSC::HeapCell *,JSC::HeapCell::Kind)#1} const&)::{lambda(JSC::PreciseAllocation *)#1}::operator()(uint64_t a1, uint64_t a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(_BYTE *)(a2 + 33) & 1) != 0)
    JSC::JSWebAssemblyInstance::finalizeUnconditionally(a2 + 112, (JSC::VM *)(**(_QWORD **)a1 - 192), (void *)**(unsigned __int8 **)(*(_QWORD *)a1 + 8), a5, a6, a7, a8, a9, a3);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [16]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: Visitor ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " is not empty!\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t *JSC::`anonymous namespace'::recordType(uint64_t *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  uint64_t *v28;

  v8 = *(unsigned int *)(16 * (a2 & 0xFFFFFFFE) + 0x4C);
  v9 = "[unknown]";
  if ((_DWORD)v8)
  {
    v10 = *(const char **)(16 * v8);
    if (v10)
      v9 = v10;
  }
  v11 = *result;
  if (*result
    || (v27 = v9,
        v28 = result,
        WTF::HashTable<char const*,WTF::KeyValuePair<char const*,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<char const*,unsigned int>>,WTF::DefaultHash<char const*>,WTF::HashMap<char const*,unsigned int,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<char const*>>::expand(result, 0, a3, a4, a5, a6, a7, a8), v9 = v27, result = v28, (v11 = *v28) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (unint64_t)&v9[~((_QWORD)v9 << 32)] ^ ((unint64_t)&v9[~((_QWORD)v9 << 32)] >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = v11 + 16 * v16;
  v18 = *(const char **)v17;
  if (!*(_QWORD *)v17)
  {
LABEL_15:
    *(_QWORD *)v17 = v9;
    *(_DWORD *)(v17 + 8) = 0;
    v21 = *result;
    if (*result)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *result;
    if (*result)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_9;
    }
    else if (3 * v26 > 4 * v25)
    {
      goto LABEL_9;
    }
    result = (uint64_t *)WTF::HashTable<char const*,WTF::KeyValuePair<char const*,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<char const*,unsigned int>>,WTF::DefaultHash<char const*>,WTF::HashMap<char const*,unsigned int,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<char const*>>::expand(result, v17, a3, a4, a5, a6, a7, a8);
    v17 = (uint64_t)result;
    goto LABEL_9;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != v9)
  {
    if (v18 == (const char *)-1)
      v19 = (_QWORD *)v17;
    v16 = (v16 + v20) & v12;
    v17 = v11 + 16 * v16;
    v18 = *(const char **)v17;
    ++v20;
    if (!*(_QWORD *)v17)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*result - 16);
        v17 = (uint64_t)v19;
      }
      goto LABEL_15;
    }
  }
LABEL_9:
  ++*(_DWORD *)(v17 + 8);
  return result;
}

_OWORD *WTF::HashTable<char const*,WTF::KeyValuePair<char const*,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<char const*,unsigned int>>,WTF::DefaultHash<char const*>,WTF::HashMap<char const*,unsigned int,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<char const*>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)::$_0::operator()<JSC::Heap::ScriptExecutableSpaceAndSets>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MarkedSpace *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *i;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int v30;
  JSC::MarkedSpace *v31;
  unint64_t v32;

  v9 = (JSC::MarkedSpace *)(a1 + 160);
  JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(a1 + 160), a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(a2 + 272);
  v18 = *(_QWORD *)(a2 + 288) + 31;
  if (v18 < 0x20)
  {
LABEL_16:
    v29 = *(uint64_t **)(v17 + 48);
    v28 = (uint64_t *)(v17 + 48);
    for (i = v29; i != v28; i = (uint64_t *)*i)
    {
      v30 = *((unsigned __int8 *)i + 36);
      if (v30 >= 0x20)
        goto LABEL_26;
      if (((*(_DWORD *)(a2 + 264) >> v30) & 1) != 0 && ((*((_BYTE *)i + 33) & 1) != 0 || (i[4] & 1) != 0))
        JSC::ScriptExecutable::clearCode((unint64_t)(i + 14), (JSC::IsoCellSet *)(a2 + 248));
    }
    JSC::MarkedSpace::didFinishIterating(v9, v10, v11, v12, v13, v14, v15, v16);
    return;
  }
  v19 = 0;
  v31 = v9;
  v32 = v18 >> 5;
  while (1)
  {
    v20 = *(_DWORD *)(*(_QWORD *)(a2 + 280) + 4 * v19);
    if (v20)
      break;
LABEL_14:
    if (++v19 == v32)
    {
      v17 = *(_QWORD *)(a2 + 272);
      v9 = v31;
      goto LABEL_16;
    }
  }
  v21 = 32 * v19;
  while ((v20 & 1) == 0)
  {
LABEL_13:
    ++v21;
    v26 = v20 > 1;
    v20 >>= 1;
    if (!v26)
      goto LABEL_14;
  }
  if (*(_DWORD *)(v17 + 100) > v21)
  {
    v22 = *(unsigned int **)(*(_QWORD *)(v17 + 88) + 8 * v21);
    v23 = v22[1];
    if (v23 <= 0x3FF)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 304) + (v21 & 0xFFFFFFF8) + 8) + 8 * (v21 & 7));
      do
      {
        if (((*(_QWORD *)(v24 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
        {
          v25 = *((_QWORD *)v22 + 11) + 16 * v23;
          if (JSC::MarkedBlock::Handle::isLive((uint64_t)v22, v25, v11, v12, v13, v14, v15, v16))
            JSC::ScriptExecutable::clearCode(v25, (JSC::IsoCellSet *)(a2 + 248));
        }
        v23 += *v22;
      }
      while (v23 < 0x400);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
LABEL_26:
  __break(1u);
}

uint64_t WTF::dataLog<char [41],JSC::CollectionScope,char [2]>(_BYTE *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  uint64_t result;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Collection scope already set during GC: ");
  if (!*a1)
  {
    v5 = "Eden";
    goto LABEL_7;
  }
  if (*a1 == 1)
  {
    v5 = "Full";
LABEL_7:
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s", v5);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    WTF::PrintStream::printf(v4, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  result = 41;
  __break(0xC471u);
  return result;
}

void WTF::SharedTaskFunctor<void ()(void),JSC::Heap::runBeginPhase(JSC::GCConductor)::$_1>::run(uint64_t a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;

  v8 = *(_QWORD *)(a1 + 16);
  v27 = 0;
  v9 = (unsigned __int8 *)(v8 + 560);
  if (__ldaxr((unsigned __int8 *)(v8 + 560)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 560);
LABEL_5:
  v11 = *(unsigned int *)(v8 + 476);
  if (!(_DWORD)v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1985D0DE8);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 464) + 8 * v11 - 8);
  *(_DWORD *)(v8 + 476) = v11 - 1;
  v27 = v12;
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v9))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 560), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS(0);
  *(_BYTE *)(v14 + 5) = *(_BYTE *)(v14 + 5) & 0x3F | 0x80;
  v15 = v27;
  *(_BYTE *)(v27 + 187) = 1;
  JSC::SlotVisitor::drainFromShared((_QWORD *)v15, 0, a3, a4, a5, a6, a7, a8, INFINITY);
  *(_BYTE *)(v15 + 187) = 0;
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_17;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 560);
LABEL_17:
  v23 = (_QWORD *)(v8 + 464);
  v24 = *(unsigned int *)(v8 + 476);
  if ((_DWORD)v24 == *(_DWORD *)(v8 + 472))
  {
    v26 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v27);
    v24 = *(unsigned int *)(v8 + 476);
    *(_QWORD *)(*(_QWORD *)(v8 + 464) + 8 * v24) = *v26;
  }
  else
  {
    *(_QWORD *)(*v23 + 8 * v24) = v27;
  }
  *(_DWORD *)(v8 + 476) = v24 + 1;
  v25 = __ldxr(v9);
  if (v25 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 560), 0, v16, v17, v18, v19, v20, v21);
}

_OWORD *WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v12 - 4);
        v33 = 0;
        v34 = v12 + 16 * v27;
        goto LABEL_32;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  v24 = *a4;
  *v20 = v15;
  v20[1] = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
      goto LABEL_23;
  }
  else if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
LABEL_28:
      result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a2, v32, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
      v20 = result;
      v28 = *a2;
      if (*a2)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v32 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
    goto LABEL_28;
  }
LABEL_31:
  v34 = v28 + 16 * v31;
  v33 = 1;
LABEL_32:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v34;
  *((_BYTE *)v11 + 16) = v33;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**,false>(uint64_t result, const char **a2, const char *a3, char a4)
{
  const char *v4;
  uint64_t v7;
  const char **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char **v12;
  const char *v13;
  const char *v14;
  const char *v15;
  int v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;
  int v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char **v27;
  const char *v28;
  const char **v29;
  const char *v30;
  const char *v31;
  int v32;
  const char *v33;
  int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char **v39;
  const char *v40;
  const char *v41;
  const char *v42;
  int v43;
  const char *v44;
  int v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  int v51;
  const char *v52;
  int v53;
  const char *v54;
  const char *v55;
  const char **v56;
  const char *v57;
  const char **v58;
  const char *v59;
  const char *v60;
  const char *v61;
  char *v62;
  const char **v63;
  const char *v64;
  const char *v65;
  const char **v66;
  BOOL v67;
  const char *v68;
  const char **v69;
  const char *v70;
  const char *v71;
  const char **v72;
  const char *v73;
  const char *v74;
  const char **v75;
  const char *v76;
  const char *v77;
  int v78;
  const char *v79;
  const char **v80;
  const char **v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char **v87;
  BOOL v89;
  uint64_t v90;
  const char **v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char **v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  uint64_t v100;
  const char **v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  int v105;
  const char **v106;
  char **v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  const char **v114;
  const char **v115;
  const char *v116;
  const char **v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  unint64_t v123;
  const char **v124;
  const char *v125;
  const char *v126;
  const char **v127;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char **v133;
  const char *v134;
  unint64_t v135;
  int64_t v136;
  const char *v137;
  uint64_t v138;
  char *__s2a;
  char *__s2b;
  const char **v142;

  v7 = result;
LABEL_2:
  v8 = (const char **)v7;
  while (2)
  {
    v7 = (uint64_t)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v76 = *(a2 - 1);
        v77 = *v8;
        result = strcmp(v76, *v8);
        if ((result & 0x80000000) != 0)
        {
          *v8 = v76;
          *(a2 - 1) = v77;
        }
        return result;
      case 3:
        v4 = *v8;
        v11 = (unint64_t)v8[1];
        v78 = strcmp((const char *)v11, *v8);
        v79 = *(a2 - 1);
        result = strcmp(v79, (const char *)v11);
        if (v78 < 0)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_184;
          *(_QWORD *)v7 = v79;
          goto LABEL_186;
        }
        if ((result & 0x80000000) != 0)
        {
          *(_QWORD *)(v7 + 8) = v79;
          *(a2 - 1) = (const char *)v11;
          v84 = *(const char **)(v7 + 8);
          goto LABEL_172;
        }
        return result;
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v80 = v8 + 2;
        v81 = v8 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(v8, v8 + 1, v8 + 2, v8 + 3);
        v82 = *(a2 - 1);
        v83 = *(const char **)(v7 + 24);
        result = strcmp(v82, v83);
        if ((result & 0x80000000) != 0)
        {
          *v81 = v82;
          *(a2 - 1) = v83;
          v84 = *v81;
          v85 = *v80;
          result = strcmp(*v81, *v80);
          if ((result & 0x80000000) != 0)
          {
            *v80 = v84;
            *v81 = v85;
            v86 = *(const char **)(v7 + 8);
            result = strcmp(v84, v86);
            if ((result & 0x80000000) != 0)
            {
              *(_QWORD *)(v7 + 8) = v84;
              *(_QWORD *)(v7 + 16) = v86;
LABEL_172:
              v129 = *(const char **)v7;
              result = strcmp(v84, *(const char **)v7);
              if ((result & 0x80000000) != 0)
              {
                *(_QWORD *)v7 = v84;
                *(_QWORD *)(v7 + 8) = v129;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v87 = v8 + 1;
          v89 = v8 == a2 || v87 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v89)
            {
              v90 = 8;
              v91 = (const char **)v7;
              do
              {
                v92 = *v91;
                v91 = v87;
                v93 = *v87;
                result = strcmp(*v87, v92);
                if ((result & 0x80000000) != 0)
                {
                  v94 = v90;
                  while (1)
                  {
                    *(_QWORD *)(v7 + v94) = v92;
                    v95 = v94 - 8;
                    if (v94 == 8)
                      break;
                    v92 = *(const char **)(v7 + v94 - 16);
                    result = strcmp(v93, v92);
                    v94 = v95;
                    if ((result & 0x80000000) == 0)
                    {
                      v96 = (const char **)(v7 + v95);
                      goto LABEL_131;
                    }
                  }
                  v96 = (const char **)v7;
LABEL_131:
                  *v96 = v93;
                }
                v87 = v91 + 1;
                v90 += 8;
              }
              while (v91 + 1 != a2);
            }
          }
          else if (!v89)
          {
            v130 = 0;
            v131 = 1;
            while (1)
            {
              v11 = *(_QWORD *)(v7 + 8 * v130);
              v130 = v131;
              v4 = *v87;
              result = strcmp(*v87, (const char *)v11);
              if ((result & 0x80000000) != 0)
                break;
LABEL_181:
              v131 = v130 + 1;
              if (++v87 == a2)
                return result;
            }
            v132 = 0;
            while (1)
            {
              v133 = &v87[v132];
              *v133 = (const char *)v11;
              if (!(v130 + v132))
                break;
              v11 = (unint64_t)*(v133 - 2);
              result = strcmp(v4, (const char *)v11);
              --v132;
              if ((result & 0x80000000) == 0)
              {
                v87[v132] = v4;
                goto LABEL_181;
              }
            }
LABEL_183:
            __break(1u);
LABEL_184:
            *(_QWORD *)v7 = v11;
            *(_QWORD *)(v7 + 8) = v4;
            v134 = *(a2 - 1);
            result = strcmp(v134, v4);
            if ((result & 0x80000000) != 0)
            {
              *(_QWORD *)(v7 + 8) = v134;
LABEL_186:
              *(a2 - 1) = v4;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v135 = (char *)a2 - (char *)v8;
            v97 = (unint64_t)(v10 - 2) >> 1;
            v98 = v97;
            v138 = a2 - v8;
            do
            {
              v99 = v98;
              if (v97 >= v98)
              {
                v100 = (2 * v98) | 1;
                v101 = (const char **)(v7 + 8 * v100);
                v102 = 2 * v98 + 2;
                v103 = *v101;
                v136 = v98;
                if (v102 < v10)
                {
                  v104 = v101[1];
                  v105 = strcmp(v103, v104);
                  if (v105 < 0)
                    v103 = v104;
                  v99 = v136;
                  if (v105 < 0)
                  {
                    ++v101;
                    v100 = v102;
                  }
                }
                v106 = (const char **)(v7 + 8 * v99);
                __s2a = (char *)*v106;
                result = strcmp(v103, *v106);
                if ((result & 0x80000000) == 0)
                {
                  do
                  {
                    v107 = (char **)v101;
                    *v106 = v103;
                    if (v97 < v100)
                      break;
                    v108 = (2 * v100) | 1;
                    v101 = (const char **)(v7 + 8 * v108);
                    v109 = 2 * v100 + 2;
                    v103 = *v101;
                    if (v109 < v10)
                    {
                      v110 = v101[1];
                      v111 = strcmp(*v101, v110);
                      if (v111 < 0)
                      {
                        v103 = v110;
                        ++v101;
                      }
                      v10 = v138;
                      if (v111 < 0)
                        v108 = v109;
                    }
                    result = strcmp(v103, __s2a);
                    v106 = (const char **)v107;
                    v100 = v108;
                  }
                  while ((result & 0x80000000) == 0);
                  *v107 = __s2a;
                  v99 = v136;
                }
              }
              v98 = v99 - 1;
            }
            while (v99);
            v112 = v135 >> 3;
            v142 = (const char **)v7;
            do
            {
              v113 = 0;
              __s2b = *(char **)v7;
              v114 = (const char **)v7;
              do
              {
                v115 = &v114[v113];
                v118 = v115[1];
                v117 = v115 + 1;
                v116 = v118;
                v119 = (2 * v113) | 1;
                v120 = 2 * v113 + 2;
                if (v120 < v112)
                {
                  v121 = v117[1];
                  result = strcmp(v116, v121);
                  if ((int)result < 0)
                  {
                    v116 = v121;
                    ++v117;
                  }
                  v7 = (uint64_t)v142;
                  if ((int)result < 0)
                    v119 = v120;
                }
                *v114 = v116;
                v114 = v117;
                v113 = v119;
              }
              while (v119 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
              if (v117 == --a2)
              {
                *v117 = __s2b;
              }
              else
              {
                *v117 = *a2;
                *a2 = __s2b;
                v122 = (uint64_t)v117 - v7 + 8;
                if (v122 >= 9)
                {
                  v123 = (((unint64_t)v122 >> 3) - 2) >> 1;
                  v124 = (const char **)(v7 + 8 * v123);
                  v125 = *v124;
                  v126 = *v117;
                  result = strcmp(*v124, *v117);
                  if ((result & 0x80000000) != 0)
                  {
                    do
                    {
                      v127 = v124;
                      *v117 = v125;
                      if (!v123)
                        break;
                      v123 = (v123 - 1) >> 1;
                      v124 = (const char **)(v7 + 8 * v123);
                      v125 = *v124;
                      result = strcmp(*v124, v126);
                      v117 = v127;
                    }
                    while ((result & 0x80000000) != 0);
                    *v127 = v126;
                  }
                }
              }
            }
            while (v112-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 >= 0x401)
        {
          v14 = *v12;
          v15 = *v8;
          v16 = strcmp(*v12, *(const char **)v7);
          v17 = strcmp(v13, v14);
          v4 = a3;
          if (v16 < 0)
          {
            if (v17 < 0)
            {
              *(_QWORD *)v7 = v13;
              goto LABEL_21;
            }
            *(_QWORD *)v7 = v14;
            *v12 = v15;
            v26 = *(a2 - 1);
            if (strcmp(v26, v15) < 0)
            {
              *v12 = v26;
LABEL_21:
              *(a2 - 1) = v15;
            }
          }
          else if (v17 < 0)
          {
            *v12 = v13;
            *(a2 - 1) = v14;
            v22 = *v12;
            v23 = *(const char **)v7;
            if (strcmp(*v12, *(const char **)v7) < 0)
            {
              *(_QWORD *)v7 = v22;
              *v12 = v23;
            }
          }
          v27 = (const char **)(v7 + 8 * v11);
          v30 = *(v27 - 1);
          v29 = v27 - 1;
          v28 = v30;
          v31 = *(const char **)(v7 + 8);
          v32 = strcmp(v30, v31);
          v33 = *(a2 - 2);
          v34 = strcmp(v33, v30);
          if (v32 < 0)
          {
            if (v34 < 0)
            {
              *(_QWORD *)(v7 + 8) = v33;
              goto LABEL_33;
            }
            *(_QWORD *)(v7 + 8) = v28;
            *v29 = v31;
            v38 = *(a2 - 2);
            if (strcmp(v38, v31) < 0)
            {
              *v29 = v38;
LABEL_33:
              *(a2 - 2) = v31;
            }
          }
          else if (v34 < 0)
          {
            *v29 = v33;
            *(a2 - 2) = v28;
            v35 = *v29;
            v36 = *(const char **)(v7 + 8);
            if (strcmp(*v29, v36) < 0)
            {
              *(_QWORD *)(v7 + 8) = v35;
              *v29 = v36;
            }
          }
          v39 = (const char **)(v7 + 8 * v11);
          v41 = v39[1];
          v11 = (unint64_t)(v39 + 1);
          v40 = v41;
          v42 = *(const char **)(v7 + 16);
          v43 = strcmp(v41, v42);
          v44 = *(a2 - 3);
          v45 = strcmp(v44, v41);
          if (v43 < 0)
          {
            if (v45 < 0)
            {
              *(_QWORD *)(v7 + 16) = v44;
              goto LABEL_42;
            }
            *(_QWORD *)(v7 + 16) = v40;
            *(_QWORD *)v11 = v42;
            v48 = *(a2 - 3);
            if (strcmp(v48, v42) < 0)
            {
              *(_QWORD *)v11 = v48;
LABEL_42:
              *(a2 - 3) = v42;
            }
          }
          else if (v45 < 0)
          {
            *(_QWORD *)v11 = v44;
            *(a2 - 3) = v40;
            v46 = *(const char **)v11;
            v47 = *(const char **)(v7 + 16);
            if (strcmp(*(const char **)v11, v47) < 0)
            {
              *(_QWORD *)(v7 + 16) = v46;
              *(_QWORD *)v11 = v47;
            }
          }
          v49 = *v12;
          v50 = *v29;
          v51 = strcmp(*v12, *v29);
          v52 = *(const char **)v11;
          v53 = strcmp(*(const char **)v11, v49);
          if (v51 < 0)
          {
            if ((v53 & 0x80000000) == 0)
            {
              *v29 = v49;
              *v12 = v50;
              v29 = v12;
              v49 = v52;
              if ((strcmp(v52, v50) & 0x80000000) == 0)
              {
                v49 = v50;
LABEL_50:
                v54 = *(const char **)v7;
                *(_QWORD *)v7 = v49;
                *v12 = v54;
                a3 = v4;
                goto LABEL_51;
              }
            }
          }
          else
          {
            if ((v53 & 0x80000000) == 0)
              goto LABEL_50;
            *v12 = v52;
            *(_QWORD *)v11 = v49;
            v11 = (unint64_t)v12;
            v49 = v50;
            if ((strcmp(v52, v50) & 0x80000000) == 0)
            {
              v49 = v52;
              goto LABEL_50;
            }
          }
          *v29 = v52;
          *(_QWORD *)v11 = v50;
          goto LABEL_50;
        }
        v18 = *v8;
        v19 = *v12;
        v20 = strcmp(*(const char **)v7, *v12);
        v21 = strcmp(v13, v18);
        if (v20 < 0)
        {
          if (v21 < 0)
          {
            *v12 = v13;
          }
          else
          {
            *v12 = v18;
            *(_QWORD *)v7 = v19;
            v37 = *(a2 - 1);
            if ((strcmp(v37, v19) & 0x80000000) == 0)
              goto LABEL_51;
            *(_QWORD *)v7 = v37;
          }
          *(a2 - 1) = v19;
        }
        else if (v21 < 0)
        {
          *(_QWORD *)v7 = v13;
          *(a2 - 1) = v18;
          v24 = *(const char **)v7;
          v25 = *v12;
          if (strcmp(*(const char **)v7, *v12) < 0)
          {
            *v12 = v24;
            *(_QWORD *)v7 = v25;
          }
        }
LABEL_51:
        --a3;
        v55 = *(const char **)v7;
        if ((a4 & 1) == 0 && (strcmp(*(const char **)(v7 - 8), *(const char **)v7) & 0x80000000) == 0)
        {
          result = strcmp(v55, *(a2 - 1));
          v4 = (const char *)(v7 + 8);
          if ((result & 0x80000000) != 0)
          {
            do
            {
              if (v4 == (const char *)a2)
                goto LABEL_183;
              v68 = *(const char **)v4;
              v4 += 8;
              result = strcmp(v55, v68);
            }
            while ((result & 0x80000000) == 0);
            v8 = (const char **)(v4 - 8);
          }
          else
          {
            do
            {
              v8 = (const char **)v4;
              if (v4 >= (const char *)a2)
                break;
              v4 += 8;
              result = strcmp(v55, *v8);
            }
            while ((result & 0x80000000) == 0);
          }
          v69 = a2;
          if (v8 < a2)
          {
            v69 = a2;
            while (v69 != (const char **)v7)
            {
              v70 = *--v69;
              result = strcmp(v55, v70);
              if ((result & 0x80000000) == 0)
                goto LABEL_91;
            }
            goto LABEL_183;
          }
LABEL_91:
          if (v8 < v69)
          {
            v11 = (unint64_t)*v8;
            v71 = *v69;
            do
            {
              *v8 = v71;
              v72 = v8 + 1;
              *v69 = (const char *)v11;
              do
              {
                if (v72 == a2)
                  goto LABEL_183;
                v73 = *v72++;
                v11 = (unint64_t)v73;
              }
              while ((strcmp(v55, v73) & 0x80000000) == 0);
              v8 = v72 - 1;
              do
              {
                if (v69 == (const char **)v7)
                  goto LABEL_183;
                v74 = *--v69;
                v71 = v74;
                result = strcmp(v55, v74);
              }
              while ((result & 0x80000000) != 0);
            }
            while (v8 < v69);
          }
          v75 = v8 - 1;
          if (v8 - 1 != (const char **)v7)
            *(_QWORD *)v7 = *v75;
          a4 = 0;
          *v75 = v55;
          continue;
        }
        v11 = 0;
        do
        {
          v56 = (const char **)(v7 + v11 + 8);
          if (v56 == a2)
            goto LABEL_183;
          v57 = *v56;
          v11 += 8;
        }
        while (strcmp(*v56, v55) < 0);
        v4 = (const char *)(v7 + v11);
        v58 = a2;
        if (v11 != 8)
        {
          while (v58 != (const char **)v7)
          {
            v59 = *--v58;
            if (strcmp(v59, v55) < 0)
              goto LABEL_63;
          }
          goto LABEL_183;
        }
        v58 = a2;
        do
        {
          if (v4 >= (const char *)v58)
            break;
          v60 = *--v58;
        }
        while ((strcmp(v60, v55) & 0x80000000) == 0);
LABEL_63:
        if (v4 >= (const char *)v58)
        {
          v66 = (const char **)(v4 - 8);
        }
        else
        {
          v137 = a3;
          v61 = *v58;
          v11 += v7;
          v62 = (char *)v58;
          do
          {
            *(_QWORD *)v11 = v61;
            v11 += 8;
            *(_QWORD *)v62 = v57;
            v63 = (const char **)v11;
            do
            {
              if (v63 == a2)
                goto LABEL_183;
              v64 = *v63++;
              v57 = v64;
            }
            while (strcmp(v64, v55) < 0);
            v11 = (unint64_t)(v63 - 1);
            do
            {
              if (v62 == (char *)v7)
                goto LABEL_183;
              v65 = (const char *)*((_QWORD *)v62 - 1);
              v62 -= 8;
              v61 = v65;
            }
            while ((strcmp(v65, v55) & 0x80000000) == 0);
          }
          while (v11 < (unint64_t)v62);
          v66 = v63 - 2;
          a3 = v137;
        }
        if (v66 != (const char **)v7)
          *(_QWORD *)v7 = *v66;
        *v66 = v55;
        if (v4 < (const char *)v58)
        {
LABEL_79:
          result = std::__introsort<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**,false>(v7, v66, a3, a4 & 1);
          a4 = 0;
          v8 = v66 + 1;
          continue;
        }
        v67 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>((const char **)v7, v66);
        v8 = v66 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(v66 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v67)
            continue;
          goto LABEL_79;
        }
        a2 = v66;
        if (!v67)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(const char **a1, const char **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char **v13;
  const char **v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  int v22;
  const char *v23;
  const char **v24;
  int v25;
  const char **v26;
  const char **v27;
  int v28;
  const char *v29;
  int v30;
  const char **v31;
  int v32;
  uint64_t i;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char **v39;
  const char *v40;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (strcmp(v6, *a1) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = strcmp(v9, *a1);
      v11 = *(a2 - 1);
      v12 = strcmp(v11, v9);
      if (v10 < 0)
      {
        if (v12 < 0)
        {
          *a1 = v11;
        }
        else
        {
          *a1 = v9;
          a1[1] = v8;
          v40 = *(a2 - 1);
          if ((strcmp(v40, v8) & 0x80000000) == 0)
            return 1;
          a1[1] = v40;
        }
        *(a2 - 1) = v8;
      }
      else if (v12 < 0)
      {
        a1[1] = v11;
        *(a2 - 1) = v9;
        v17 = a1[1];
LABEL_18:
        v29 = *a1;
        if (strcmp(v17, *a1) < 0)
        {
          *a1 = v17;
          a1[1] = v29;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v13 = a1 + 2;
      v14 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v15 = *(a2 - 1);
      v16 = a1[3];
      if ((strcmp(v15, v16) & 0x80000000) == 0)
        return 1;
      *v14 = v15;
      *(a2 - 1) = v16;
      v17 = *v14;
      v18 = *v13;
      if ((strcmp(*v14, *v13) & 0x80000000) == 0)
        return 1;
      *v13 = v17;
      *v14 = v18;
      v19 = a1[1];
      if ((strcmp(v17, v19) & 0x80000000) == 0)
        return 1;
      a1[1] = v17;
      a1[2] = v19;
      goto LABEL_18;
    default:
      v20 = a1[1];
      v21 = *a1;
      v22 = strcmp(v20, *a1);
      v24 = a1 + 2;
      v23 = a1[2];
      v25 = strcmp(v23, v20);
      if (v22 < 0)
      {
        v26 = a1;
        v27 = a1 + 2;
        if ((v25 & 0x80000000) == 0)
        {
          *a1 = v20;
          a1[1] = v21;
          v28 = strcmp(v23, v21);
          v26 = a1 + 1;
          v27 = a1 + 2;
          if ((v28 & 0x80000000) == 0)
            goto LABEL_23;
        }
LABEL_22:
        *v26 = v23;
        *v27 = v21;
        goto LABEL_23;
      }
      if (v25 < 0)
      {
        a1[1] = v23;
        *v24 = v20;
        v30 = strcmp(v23, v21);
        v26 = a1;
        v27 = a1 + 1;
        if (v30 < 0)
          goto LABEL_22;
      }
LABEL_23:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v34 = *v31;
        v35 = *v24;
        if (strcmp(*v31, *v24) < 0)
        {
          v36 = i;
          while (1)
          {
            *(const char **)((char *)a1 + v36) = v35;
            v37 = v36 - 8;
            if (v36 == 8)
              break;
            v35 = *(const char **)((char *)a1 + v36 - 16);
            v38 = strcmp(v34, v35);
            v36 = v37;
            if ((v38 & 0x80000000) == 0)
            {
              v39 = (const char **)((char *)a1 + v37);
              goto LABEL_31;
            }
          }
          v39 = a1;
LABEL_31:
          *v39 = v34;
          if (++v32 == 8)
            break;
        }
        v24 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::Heap::runFixpointPhase(JSC::GCConductor)::$_1 &,char const**>(const char **a1, const char **a2, const char **a3, const char **a4)
{
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t result;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;

  v8 = *a2;
  v9 = *a1;
  v10 = strcmp(*a2, *a1);
  v11 = *a3;
  v12 = strcmp(*a3, v8);
  if (v10 < 0)
  {
    if (v12 < 0)
    {
      *a1 = v11;
LABEL_9:
      *a3 = v9;
      v8 = v9;
      goto LABEL_11;
    }
    *a1 = v8;
    *a2 = v9;
    v8 = *a3;
    if (strcmp(*a3, v9) < 0)
    {
      *a2 = v8;
      goto LABEL_9;
    }
  }
  else if (v12 < 0)
  {
    *a2 = v11;
    *a3 = v8;
    v13 = *a2;
    v14 = *a1;
    if (strcmp(*a2, *a1) < 0)
    {
      *a1 = v13;
      *a2 = v14;
      v8 = *a3;
    }
  }
  else
  {
    v8 = v11;
  }
LABEL_11:
  v15 = *a4;
  result = strcmp(*a4, v8);
  if ((result & 0x80000000) != 0)
  {
    *a3 = v15;
    *a4 = v8;
    v17 = *a3;
    v18 = *a2;
    result = strcmp(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      *a2 = v17;
      *a3 = v18;
      v19 = *a2;
      v20 = *a1;
      result = strcmp(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  return result;
}

void JSC::CodeBlockSet::iterateCurrentlyExecuting<WTF::Function<void ()(JSC::CodeBlock *)>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;

  v10 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *(_QWORD **)(a1 + 8);
  if (!v12)
  {
    v15 = 0;
    v13 = 0;
LABEL_29:
    v14 = &v12[v13];
    goto LABEL_11;
  }
  v13 = *((unsigned int *)v12 - 1);
  v14 = &v12[v13];
  if (!*((_DWORD *)v12 - 3))
  {
    v15 = &v12[v13];
    goto LABEL_29;
  }
  v15 = v12;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13;
    v15 = v12;
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
      {
        v15 = v14;
        break;
      }
    }
  }
LABEL_11:
  if (v12)
    v17 = &v12[*((unsigned int *)v12 - 1)];
  else
    v17 = 0;
  while (v15 != v17)
  {
    v18 = v15 + 1;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v15);
    v15 = v14;
    if (v18 != v14)
    {
      v15 = v18;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        if (++v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v10))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::runEndPhase(JSC::GCConductor)::$_0,void,JSC::CodeBlock *>::call(uint64_t result, unint64_t a2)
{
  if (a2)
  {
    result = *(_QWORD *)(result + 8);
    if (*(_DWORD *)(result + 568) >= *(unsigned __int8 *)(a2 + 7))
      return JSC::Heap::writeBarrierSlowPath(result, a2);
  }
  return result;
}

uint64_t WTF::dataLog<char [8],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "GC END!");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::CurrentThreadState &),JSC::Heap::collectInMutatorThread(void)::$_0>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = JSC::Heap::runCurrentPhase(v9, 0, a2, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
      break;
    if ((_DWORD)result == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1985D20F8);
    }
  }
  return result;
}

void WTF::Deque<JSC::GCRequest,0ul>::expandCapacityIfNeeded(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  if (*a1)
  {
    ++v1;
    goto LABEL_3;
  }
  v3 = *((unsigned int *)a1 + 6);
  if (v1)
  {
    v2 = v3 - 1;
LABEL_3:
    if (v1 != v2)
      return;
LABEL_7:
    WTF::Deque<JSC::GCRequest,0ul>::expandCapacity(a1);
    return;
  }
  if (!(_DWORD)v3)
    goto LABEL_7;
}

void WTF::Deque<JSC::GCRequest,0ul>::expandCapacity(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  char *v25;

  v1 = *((unsigned int *)a1 + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x1985D2294);
  }
  v4 = a1[2];
  v5 = v2 + 1;
  v6 = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
  v12 = v6;
  *((_DWORD *)a1 + 6) = v5;
  a1[2] = v6;
  v14 = *a1;
  v13 = a1[1];
  v15 = (char *)(v4 + 16 * v13);
  if (*a1 > v13)
  {
    WTF::VectorTypeOperations<JSC::GCRequest>::move(v4, (uint64_t)v15, v6);
    v16 = *a1 - v1 + *((unsigned int *)a1 + 6);
    WTF::VectorTypeOperations<JSC::GCRequest>::move(v4 + 16 * *a1, v4 + 16 * v1, a1[2] + 16 * v16);
    *a1 = v16;
  }
  else if (*a1 != v13)
  {
    v17 = v6 + 16 * v14;
    v18 = (char *)(v4 + 16 * v14);
    do
    {
      *(_WORD *)v17 = *(_WORD *)v18;
      v19 = *((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = 0;
      *(_QWORD *)(v17 + 8) = v19;
      v20 = (unsigned int *)*((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          v24 = v15;
          v25 = v18;
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
          v15 = v24;
          v18 = v25;
        }
      }
      v17 += 16;
      v18 += 16;
    }
    while (v18 != v15);
  }
  if (v4)
  {
    if (a1[2] == v4)
    {
      a1[2] = 0;
      *((_DWORD *)a1 + 6) = 0;
    }
    WTF::fastFree(v4, v15, v12, v7, v8, v9, v10, v11);
  }
}

uint64_t WTF::VectorTypeOperations<JSC::GCRequest>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  for (; result != a2; result += 16)
  {
    *(_WORD *)a3 = *(_WORD *)result;
    v3 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(a3 + 8) = v3;
    v4 = *(unsigned int **)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        v10 = result;
        v8 = a2;
        v9 = a3;
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
        result = v10;
        a2 = v8;
        a3 = v9;
      }
    }
    a3 += 16;
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v32;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v9;
  if (*v9)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v31 = 8;
LABEL_25:
      result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v9, v31, (uint64_t)v19, a3, a4, a5, a6, a7);
      v19 = result;
      v25 = *v9;
      if (*v9)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_17;
    }
LABEL_20:
    v31 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_25;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v29;
  *(_BYTE *)(a8 + 16) = v30;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_0,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t v85;
  char v86;
  _QWORD v87[2];
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  _QWORD v92[2];
  uint64_t v93;
  char v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) == *(_QWORD *)(v4 + 1016) || *(_BYTE *)(v4 + 564))
    return result;
  v5 = v3;
  v6 = result;
  v7 = *(_QWORD *)(v4 + 184);
  v8 = *(unsigned int *)(v4 + 204);
  v9 = v7 + 8 * v8;
  v10 = *(unsigned int *)(v4 + 196);
  *(_DWORD *)(v4 + 212) = v10 - v8;
  v11 = (unint64_t *)(v7 + 8 * v10);
  *(_QWORD *)(v4 + 216) = v9;
  *(_QWORD *)(v4 + 224) = v11;
  if (v11 != (unint64_t *)(v9 + 8 * (v10 - v8)))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D2940);
  }
  v12 = 126 - 2 * __clz(((uint64_t)v11 - v9) >> 3);
  if ((_DWORD)v10 == (_DWORD)v8)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **,false>(v9, v11, v13, 1);
  v17 = *(uint64_t **)(v4 + 216);
  v18 = *(uint64_t **)(v4 + 224);
  if (v17 != v18)
  {
    v19 = *(_DWORD *)(v4 + 204);
    do
    {
      v20 = *v17++;
      *(_DWORD *)(v20 + 16) = v19++;
    }
    while (v17 != v18);
  }
  v21 = *(_QWORD ***)(v4 + 536);
  v22 = *((unsigned int *)v21 + 3);
  if ((_DWORD)v22)
  {
    std::__introsort<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *,false>((__n128 *)*v21, (__n128 *)&(*v21)[2 * v22], 126 - 2 * __clz(v22), 1, v16);
    v23 = *((unsigned int *)v21 + 3);
    if (!(_DWORD)v23)
    {
      __break(0xC471u);
LABEL_104:
      JUMPOUT(0x1985D2920);
    }
    v24 = (_QWORD *)**v21;
    v25 = *(_QWORD *)((*v21)[2 * v23 - 1] + 8);
    v26 = (_QWORD *)(*(unsigned int *)(v25 + 4) + *(_QWORD *)(v25 + 8));
    if (v24 == v26)
      v27 = 0;
    else
      v27 = (_QWORD *)**v21;
    if (v24 == v26)
      v26 = 0;
    v21[4] = v27;
    v21[5] = v26;
  }
  else
  {
    v21[4] = 0;
    v21[5] = 0;
  }
  v95 = &v98;
  v96 = xmmword_199156770;
  v97 = v4;
  JSC::MachineThreads::gatherConservativeRoots(*(WTF::Thread **)(v4 + 392), (JSC::ConservativeRoots *)&v95, *(JSC **)(v4 + 536), *(unsigned __int8 **)(v4 + 528), *(const char ***)(v4 + 1104), *(unint64_t **)(v4 + 1112), v14, v15);
  if (BYTE1(dword_1ECF4C240))
  {
    v34 = (unsigned __int8 *)(v4 + 92997);
    if (__ldaxr((unsigned __int8 *)(v4 + 92997)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v34))
    {
      goto LABEL_24;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 92997);
LABEL_24:
    v36 = *(unsigned int *)(v4 + 93012);
    if ((_DWORD)v36)
    {
      v37 = *(uint64_t ***)(v4 + 93000);
      v38 = 8 * v36;
      do
      {
        v39 = **v37;
        if (v39)
        {
          v84 = v37;
          JSC::ConservativeRoots::add((JSC::ConservativeRoots *)&v95, (unint64_t *)*v37 + 1, (unint64_t *)((char *)*v37 + v39 + 8), v29, v30, v31, v32, v33);
          v37 = v84;
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v40 = __ldxr(v34);
    if (v40 == 1)
    {
      if (!__stlxr(0, v34))
      {
LABEL_34:
        v41 = *(unsigned int *)(v4 + 93036);
        if ((_DWORD)v41)
        {
          v81 = *(uint64_t **)(v4 + 93024);
          v82 = 8 * v41;
          do
          {
            v83 = *v81++;
            JSC::ConservativeRoots::add((JSC::ConservativeRoots *)&v95, (unint64_t *)(v83 + 16), (unint64_t *)(v83 + 48), v29, v30, v31, v32, v33);
            v82 -= 8;
          }
          while (v82);
        }
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 92997), 0, v28, v29, v30, v31, v32, v33);
    goto LABEL_34;
  }
LABEL_35:
  v90 = v5;
  v91 = *(_BYTE *)(v5 + 128);
  v92[0] = v5;
  v92[1] = 6;
  v94 = 0;
  v42 = *(_QWORD *)(v5 + 88);
  v93 = v42;
  if (v42 && *(_BYTE *)(v42 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D2A98);
  }
  *(_QWORD *)(v5 + 88) = v92;
  *(_BYTE *)(v5 + 128) = 1;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 16))(v5, &v95);
  v49 = *(_QWORD *)(v4 + 440);
  if (v49)
  {
    v85 = *(_QWORD *)(v4 + 440);
    v86 = *(_BYTE *)(v49 + 128);
    v87[0] = v85;
    v87[1] = 6;
    v89 = 0;
    v66 = *(_QWORD *)(v49 + 88);
    v88 = v66;
    if (v66 && *(_BYTE *)(v66 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1985D2B00);
    }
    *(_QWORD *)(v49 + 88) = v87;
    *(_BYTE *)(v49 + 128) = 1;
    JSC::VerifierSlotVisitor::append(*(JSC::VerifierSlotVisitor **)(v4 + 440), (const JSC::ConservativeRoots *)&v95, v43, v44, v45, v46, v47, v48);
    *(_BYTE *)(v85 + 128) = v86;
    *(_QWORD *)(v87[0] + 88) = v88;
  }
  *(_BYTE *)(v90 + 128) = v91;
  *(_QWORD *)(v92[0] + 88) = v93;
  result = (uint64_t)v95;
  if (v95 != &v98)
  {
    result = munmap(v95, 8 * *((_QWORD *)&v96 + 1));
    if ((_DWORD)result == -1)
    {
      __break(0xC471u);
      goto LABEL_104;
    }
  }
  v95 = (void *)v5;
  LOBYTE(v96) = *(_BYTE *)(v5 + 128);
  *((_QWORD *)&v96 + 1) = v5;
  v97 = 46;
  v99 = 0;
  v50 = *(_QWORD *)(v5 + 88);
  v98 = v50;
  if (v50 && *(_BYTE *)(v50 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D2AB8);
  }
  *(_QWORD *)(v5 + 88) = (char *)&v96 + 8;
  *(_BYTE *)(v5 + 128) = 11;
  v51 = *(uint64_t **)(v4 + 536);
  v52 = *((unsigned int *)v51 + 3);
  if ((_DWORD)v52)
  {
    v53 = *v51;
    v54 = *v51 + 16 * v52;
    do
    {
      v55 = *(_QWORD *)(v53 + 8);
      if ((*(_BYTE *)(v55 + 40) & 1) != 0)
      {
        v56 = *(unsigned __int8 *)(v55 + 24);
        if (v56 == 5)
        {
          v60 = *(unsigned int **)(v55 + 96);
          if (v60)
            v61 = (uint64_t *)(v60 + 2);
          else
            v61 = 0;
          if (v60)
            v62 = (uint64_t)&v60[2 * *v60 + 2];
          else
            v62 = 0;
          while (v61 != (uint64_t *)v62)
          {
            v64 = *v61++;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v64);
          }
        }
        else if (v56 == 4)
        {
          v57 = *(unsigned int **)(v55 + 96);
          if (v57)
            v58 = (uint64_t *)(v57 + 2);
          else
            v58 = 0;
          if (v57)
            v59 = (uint64_t)&v57[2 * *v57 + 2];
          else
            v59 = 0;
          while (v58 != (uint64_t *)v59)
          {
            v63 = *v58++;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v63);
          }
        }
      }
      v53 += 16;
    }
    while (v53 != v54);
  }
  v65 = *(_QWORD *)(v4 + 440);
  if (v65)
  {
    v67 = *(uint64_t **)(v4 + 536);
    v68 = *((unsigned int *)v67 + 3);
    if ((_DWORD)v68)
    {
      v69 = *v67;
      v70 = *v67 + 16 * v68;
      do
      {
        v71 = *(_QWORD *)(v69 + 8);
        if ((*(_BYTE *)(v71 + 40) & 1) != 0)
        {
          v72 = *(unsigned __int8 *)(v71 + 24);
          if (v72 == 5)
          {
            v76 = *(unsigned int **)(v71 + 96);
            if (v76)
              v77 = (uint64_t *)(v76 + 2);
            else
              v77 = 0;
            if (v76)
              v78 = (uint64_t)&v76[2 * *v76 + 2];
            else
              v78 = 0;
            while (v77 != (uint64_t *)v78)
            {
              v80 = *v77++;
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 24))(v65, v80);
            }
          }
          else if (v72 == 4)
          {
            v73 = *(unsigned int **)(v71 + 96);
            if (v73)
              v74 = (uint64_t *)(v73 + 2);
            else
              v74 = 0;
            if (v73)
              v75 = (uint64_t)&v73[2 * *v73 + 2];
            else
              v75 = 0;
            while (v74 != (uint64_t *)v75)
            {
              v79 = *v74++;
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 24))(v65, v79);
            }
          }
        }
        v69 += 16;
      }
      while (v69 != v70);
    }
  }
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 1016);
  *((_BYTE *)v95 + 128) = v96;
  *(_QWORD *)(*((_QWORD *)&v96 + 1) + 88) = v98;
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_1,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::SlotVisitor *v3;
  uint64_t v4;
  JSC::SlotVisitor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int *v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD v77[2];
  uint64_t v78;
  char v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[16384];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = *(_QWORD *)(v2 + 8);
  if (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v4 + 1016) || *(_BYTE *)(v4 + 564))
    return;
  v5 = v3;
  v6 = v2;
  v7 = *(_QWORD *)(v4 + 184);
  v8 = *(unsigned int *)(v4 + 204);
  v9 = v7 + 8 * v8;
  v10 = *(unsigned int *)(v4 + 196);
  *(_DWORD *)(v4 + 212) = v10 - v8;
  v11 = (unint64_t *)(v7 + 8 * v10);
  *(_QWORD *)(v4 + 216) = v9;
  *(_QWORD *)(v4 + 224) = v11;
  if (v11 != (unint64_t *)(v9 + 8 * (v10 - v8)))
  {
    __break(0xC471u);
    goto LABEL_86;
  }
  v12 = 126 - 2 * __clz(((uint64_t)v11 - v9) >> 3);
  if ((_DWORD)v10 == (_DWORD)v8)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **,false>(v9, v11, v13, 1);
  v17 = *(uint64_t **)(v4 + 216);
  v18 = *(uint64_t **)(v4 + 224);
  if (v17 != v18)
  {
    v19 = *(_DWORD *)(v4 + 204);
    do
    {
      v20 = *v17++;
      *(_DWORD *)(v20 + 16) = v19++;
    }
    while (v17 != v18);
  }
  v21 = *(_QWORD ***)(v4 + 536);
  v22 = *((unsigned int *)v21 + 3);
  if ((_DWORD)v22)
  {
    std::__introsort<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *,false>((__n128 *)*v21, (__n128 *)&(*v21)[2 * v22], 126 - 2 * __clz(v22), 1, v16);
    v23 = *((unsigned int *)v21 + 3);
    if (!(_DWORD)v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1985D2FD4);
    }
    v24 = (_QWORD *)**v21;
    v25 = *(_QWORD *)((*v21)[2 * v23 - 1] + 8);
    v26 = (_QWORD *)(*(unsigned int *)(v25 + 4) + *(_QWORD *)(v25 + 8));
    if (v24 == v26)
      v27 = 0;
    else
      v27 = (_QWORD *)**v21;
    if (v24 == v26)
      v26 = 0;
    v21[4] = v27;
    v21[5] = v26;
  }
  else
  {
    v21[4] = 0;
    v21[5] = 0;
  }
  v80 = v83;
  v81 = xmmword_199156770;
  v82 = v4;
  JSC::MachineThreads::gatherConservativeRoots(*(WTF::Thread **)(v4 + 392), (JSC::ConservativeRoots *)&v80, *(JSC **)(v4 + 536), *(unsigned __int8 **)(v4 + 528), *(const char ***)(v4 + 1104), *(unint64_t **)(v4 + 1112), v14, v15);
  if (BYTE1(dword_1ECF4C240))
  {
    v34 = (unsigned __int8 *)(v4 + 92997);
    if (__ldaxr((unsigned __int8 *)(v4 + 92997)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v34))
    {
      goto LABEL_24;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v4 + 92997);
LABEL_24:
    v36 = *(unsigned int *)(v4 + 93012);
    if ((_DWORD)v36)
    {
      v37 = *(uint64_t ***)(v4 + 93000);
      v38 = 8 * v36;
      do
      {
        v39 = **v37;
        if (v39)
          JSC::ConservativeRoots::add((JSC::ConservativeRoots *)&v80, (unint64_t *)*v37 + 1, (unint64_t *)((char *)*v37 + v39 + 8), v29, v30, v31, v32, v33);
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v40 = __ldxr(v34);
    if (v40 == 1)
    {
      if (!__stlxr(0, v34))
      {
LABEL_34:
        v41 = *(unsigned int *)(v4 + 93036);
        if ((_DWORD)v41)
        {
          v72 = *(uint64_t **)(v4 + 93024);
          v73 = 8 * v41;
          do
          {
            v74 = *v72++;
            JSC::ConservativeRoots::add((JSC::ConservativeRoots *)&v80, (unint64_t *)(v74 + 16), (unint64_t *)(v74 + 48), v29, v30, v31, v32, v33);
            v73 -= 8;
          }
          while (v73);
        }
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v4 + 92997), 0, v28, v29, v30, v31, v32, v33);
    goto LABEL_34;
  }
LABEL_35:
  v42 = *((_BYTE *)v5 + 128);
  *((_BYTE *)v5 + 128) = 1;
  JSC::SlotVisitor::append(v5, (const JSC::ConservativeRoots *)&v80, v28, v29, v30, v31, v32, v33);
  v49 = *(_QWORD *)(v4 + 440);
  if (v49)
  {
    v75 = *(_QWORD *)(v4 + 440);
    v76 = *(_BYTE *)(v49 + 128);
    v77[0] = v75;
    v77[1] = 6;
    v79 = 0;
    v57 = *(_QWORD *)(v49 + 88);
    v78 = v57;
    if (v57 && *(_BYTE *)(v57 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1985D2FCCLL);
    }
    *(_QWORD *)(v49 + 88) = v77;
    *(_BYTE *)(v49 + 128) = 1;
    JSC::VerifierSlotVisitor::append(*(JSC::VerifierSlotVisitor **)(v4 + 440), (const JSC::ConservativeRoots *)&v80, v43, v44, v45, v46, v47, v48);
    *(_BYTE *)(v75 + 128) = v76;
    *(_QWORD *)(v77[0] + 88) = v78;
  }
  *((_BYTE *)v5 + 128) = v42;
  if (v80 == v83)
    goto LABEL_37;
  if (munmap(v80, 8 * *((_QWORD *)&v81 + 1)) == -1)
  {
    __break(0xC471u);
LABEL_86:
    JUMPOUT(0x1985D2E4CLL);
  }
  v42 = *((_BYTE *)v5 + 128);
LABEL_37:
  *((_BYTE *)v5 + 128) = 11;
  v50 = *(_QWORD *)(v4 + 536);
  v51 = *(unsigned int *)(v50 + 12);
  if ((_DWORD)v51)
  {
    v52 = 16 * v51;
    v53 = *(_QWORD *)v50 + 8;
    do
    {
      v54 = *(unsigned __int8 **)v53;
      if ((*(_BYTE *)(*(_QWORD *)v53 + 40) & 1) != 0)
      {
        v55 = v54[24];
        if (v55 == 5 || v55 == 4)
        {
          JSC::MarkingGCAwareJITStubRoutine::markRequiredObjectsImpl((JSC::MarkingGCAwareJITStubRoutine *)v54, v5, v43, v44, v45, v46, v47, v48);
        }
        else if (v55 == 2)
        {
          JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)v54);
        }
      }
      v53 += 16;
      v52 -= 16;
    }
    while (v52);
  }
  v56 = *(_QWORD *)(v4 + 440);
  if (v56)
  {
    v58 = *(uint64_t **)(v4 + 536);
    v59 = *((unsigned int *)v58 + 3);
    if ((_DWORD)v59)
    {
      v60 = *v58;
      v61 = *v58 + 16 * v59;
      do
      {
        v62 = *(_QWORD *)(v60 + 8);
        if ((*(_BYTE *)(v62 + 40) & 1) != 0)
        {
          v63 = *(unsigned __int8 *)(v62 + 24);
          if (v63 == 5)
          {
            v67 = *(unsigned int **)(v62 + 96);
            if (v67)
              v68 = (uint64_t *)(v67 + 2);
            else
              v68 = 0;
            if (v67)
              v69 = (uint64_t)&v67[2 * *v67 + 2];
            else
              v69 = 0;
            while (v68 != (uint64_t *)v69)
            {
              v71 = *v68++;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 24))(v56, v71);
            }
          }
          else if (v63 == 4)
          {
            v64 = *(unsigned int **)(v62 + 96);
            if (v64)
              v65 = (uint64_t *)(v64 + 2);
            else
              v65 = 0;
            if (v64)
              v66 = (uint64_t)&v64[2 * *v64 + 2];
            else
              v66 = 0;
            while (v65 != (uint64_t *)v66)
            {
              v70 = *v65++;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 24))(v56, v70);
            }
          }
        }
        v60 += 16;
      }
      while (v60 != v61);
    }
  }
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 1016);
  *((_BYTE *)v5 + 128) = v42;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_2,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  JSC::AbstractSlotVisitor *v8;
  JSC::AbstractSlotVisitor *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  JSC::AbstractSlotVisitor *v19;
  JSC::AbstractSlotVisitor *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int **v26;
  unsigned int **v27;
  unsigned int **v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t i;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t j;
  JSC::AbstractSlotVisitor *v40;
  JSC::AbstractSlotVisitor *v41;
  uint64_t v42;
  uint64_t result;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  JSC::AbstractSlotVisitor *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  v3 = *(_QWORD *)(a1 + 8);
  v45 = *((_BYTE *)a2 + 128);
  v51 = a2;
  v52 = 14;
  v54 = 0;
  v4 = *((_QWORD *)a2 + 11);
  v53 = v4;
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D34C4);
  }
  v5 = (_QWORD *)(v3 - 192);
  *((_QWORD *)a2 + 11) = &v51;
  *((_BYTE *)a2 + 128) = 3;
  scanExternalRememberedSet((JSC::VM *)(v3 - 192), a2);
  *((_BYTE *)a2 + 128) = v45;
  *((_QWORD *)v51 + 11) = v53;
  v6 = *((_BYTE *)a2 + 128);
  v46 = v6;
  v51 = a2;
  v52 = 18;
  v54 = 0;
  v7 = *((_QWORD *)a2 + 11);
  v53 = v7;
  if (v7 && *(_BYTE *)(v7 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D34E4);
  }
  *((_QWORD *)a2 + 11) = &v51;
  *((_BYTE *)a2 + 128) = 4;
  if (*(_BYTE *)(v3 + 155) == 1 || *(_BYTE *)(v3 + 44072))
  {
    JSC::SmallStrings::visitStrongReferences<JSC::AbstractSlotVisitor>(v3 + 41776, (uint64_t)a2);
    v8 = a2;
    v6 = v46;
    v7 = v53;
    v9 = v51;
  }
  else
  {
    v9 = a2;
    v8 = a2;
  }
  *((_BYTE *)v8 + 128) = v6;
  *((_QWORD *)v9 + 11) = v7;
  v10 = *((_BYTE *)a2 + 128);
  v47 = v10;
  v51 = a2;
  v52 = 22;
  v54 = 0;
  v11 = *((_QWORD *)a2 + 11);
  v53 = v11;
  if (v11 && *(_BYTE *)(v11 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D3504);
  }
  *((_QWORD *)a2 + 11) = &v51;
  *((_BYTE *)a2 + 128) = 5;
  v12 = *(_QWORD *)(v3 + 360);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    v14 = (_QWORD *)(v12 + 16 * v13);
    if (*(_DWORD *)(v12 - 12))
    {
      v15 = *(_QWORD **)(v3 + 360);
      if ((_DWORD)v13)
      {
        v16 = 16 * v13;
        v15 = *(_QWORD **)(v3 + 360);
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          v15 += 2;
          v16 -= 16;
          if (!v16)
          {
            v15 = v14;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v15 = (_QWORD *)(v12 + 16 * v13);
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = (_QWORD *)(v12 + 16 * v13);
  if (v12)
  {
LABEL_18:
    v17 = (_QWORD *)(v12 + 16 * *(unsigned int *)(v12 - 4));
    goto LABEL_22;
  }
  v17 = 0;
LABEL_22:
  if (v17 == v15)
  {
    v20 = a2;
    v19 = a2;
  }
  else
  {
    do
    {
      v18 = v15 + 2;
      (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v15);
      v15 = v14;
      if (v18 != v14)
      {
        v15 = v18;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          v15 += 2;
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v17);
    v19 = a2;
    v10 = v47;
    v11 = v53;
    v20 = v51;
  }
  *((_BYTE *)v19 + 128) = v10;
  *((_QWORD *)v20 + 11) = v11;
  v21 = *(_QWORD *)(v3 + 368);
  if (v21 && *(_DWORD *)(v21 - 12))
  {
    v48 = *((_BYTE *)a2 + 128);
    v51 = a2;
    v52 = 6;
    v54 = 0;
    v22 = *((_QWORD *)a2 + 11);
    v53 = v22;
    if (v22 && *(_BYTE *)(v22 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1985D3564);
    }
    *((_QWORD *)a2 + 11) = &v51;
    *((_BYTE *)a2 + 128) = 1;
    v23 = *(_QWORD *)(v3 + 368);
    if (v23)
      v24 = (unsigned int **)(v23 + 8 * *(unsigned int *)(v23 - 4));
    else
      v24 = 0;
    v25 = (unsigned int **)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::begin((_QWORD **)(v3 + 368));
    if (v24 != v25)
    {
      v27 = v25;
      v28 = v26;
      do
      {
        v29 = *v27;
        v30 = **v27;
        if ((_DWORD)v30)
        {
          for (i = 0; i < v30; ++i)
          {
            if ((*(_QWORD *)(*((_QWORD *)v29 + 1) + 8 * i) & 0xFFFE000000000002) == 0)
            {
              (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
              v30 = *v29;
            }
          }
        }
        while (++v27 != v28)
        {
          if ((unint64_t)*v27 + 1 > 1)
            goto LABEL_48;
        }
        v27 = v28;
LABEL_48:
        ;
      }
      while (v27 != v24);
    }
    *((_BYTE *)a2 + 128) = v48;
    *((_QWORD *)v51 + 11) = v53;
  }
  v32 = *((_BYTE *)a2 + 128);
  v49 = v32;
  v51 = a2;
  v52 = 26;
  v54 = 0;
  v33 = *((_QWORD *)a2 + 11);
  v53 = v33;
  if (v33 && *(_BYTE *)(v33 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D3524);
  }
  *((_QWORD *)a2 + 11) = &v51;
  *((_BYTE *)a2 + 128) = 6;
  v34 = (uint64_t *)(v3 + 376);
  v35 = *(uint64_t **)(v3 + 376);
  if (v35 == (uint64_t *)(v3 + 376))
  {
    v41 = a2;
    v40 = a2;
  }
  else
  {
    do
    {
      v36 = (uint64_t *)*v35;
      if (v35[11])
        v37 = (uint64_t *)v35[11];
      else
        v37 = v35 + 3;
      v38 = *((unsigned int *)v35 + 4);
      if ((_DWORD)v38)
      {
        for (j = 0; j < v38; ++j)
        {
          if ((v37[j] & 0xFFFE000000000002) == 0)
          {
            (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
            v38 = *((unsigned int *)v35 + 4);
          }
        }
      }
      v35 = v36;
    }
    while (v36 != v34);
    v40 = a2;
    v32 = v49;
    v33 = v53;
    v41 = v51;
  }
  *((_BYTE *)v40 + 128) = v32;
  *((_QWORD *)v41 + 11) = v33;
  v50 = *((_BYTE *)a2 + 128);
  v51 = a2;
  v52 = 34;
  v54 = 0;
  v42 = *((_QWORD *)a2 + 11);
  v53 = v42;
  if (v42 && *(_BYTE *)(v42 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D3544);
  }
  *((_QWORD *)a2 + 11) = &v51;
  *((_BYTE *)a2 + 128) = 8;
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v5[2]);
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v5[4]);
  result = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v5[3]);
  *((_BYTE *)a2 + 128) = v50;
  *((_QWORD *)v51 + 11) = v53;
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_3,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a2 + 128) = 3;
  scanExternalRememberedSet((JSC::VM *)(v3 - 192), (JSC::AbstractSlotVisitor *)a2);
  *(_BYTE *)(a2 + 128) = 4;
  if (*(_BYTE *)(v3 + 155) == 1 || *(_BYTE *)(v3 + 44072))
    JSC::SmallStrings::visitStrongReferences<JSC::SlotVisitor>(v3 + 41776, a2, v5, v6, v7, v8, v9, v10);
  *(_BYTE *)(a2 + 128) = 5;
  v11 = *(_QWORD *)(v3 + 360);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = (unint64_t *)(v11 + 16 * v12);
    if (*(_DWORD *)(v11 - 12))
    {
      v14 = *(unint64_t **)(v3 + 360);
      if ((_DWORD)v12)
      {
        v15 = 16 * v12;
        v14 = *(unint64_t **)(v3 + 360);
        while (*v14 + 1 <= 1)
        {
          v14 += 2;
          v15 -= 16;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v14 = (unint64_t *)(v11 + 16 * v12);
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = (unint64_t *)(v11 + 16 * v12);
  if (v11)
  {
LABEL_11:
    v16 = (unint64_t *)(v11 + 16 * *(unsigned int *)(v11 - 4));
    goto LABEL_15;
  }
  v16 = 0;
LABEL_15:
  while (v14 != v16)
  {
    v17 = *v14;
    if (*v14)
    {
      if ((v17 & 8) != 0)
      {
        if ((*(_BYTE *)(v17 - 79) & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        v18 = *(_DWORD *)(a2 + 132);
        if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000), v18, v5, v6, v7, v8, v9, v10);
        if (((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) == 0)
        {
LABEL_30:
          JSC::SlotVisitor::appendSlow(a2, v17, 0, v6, v7, v8, v9, v10);
          goto LABEL_22;
        }
      }
      if (*(_QWORD *)(a2 + 168))
        goto LABEL_30;
    }
LABEL_22:
    v19 = v14 + 2;
    v14 = v13;
    if (v19 != v13)
    {
      v14 = v19;
      while (*v14 + 1 <= 1)
      {
        v14 += 2;
        if (v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  *(_BYTE *)(a2 + 128) = v4;
  v20 = *(_QWORD *)(v3 + 368);
  if (v20 && *(_DWORD *)(v20 - 12))
  {
    *(_BYTE *)(a2 + 128) = 1;
    JSC::MarkedVectorBase::markLists<JSC::SlotVisitor>(a2, (_QWORD **)(v3 + 368));
  }
  *(_BYTE *)(a2 + 128) = 6;
  v21 = *(_QWORD **)(v3 + 376);
  if (v21 != (_QWORD *)(v3 + 376))
  {
    do
    {
      v22 = (_QWORD *)*v21;
      JSC::MarkedJSValueRefArray::visitAggregate<JSC::SlotVisitor>((uint64_t)v21, a2, v5, v6, v7, v8, v9, v10);
      v21 = v22;
    }
    while (v22 != (_QWORD *)(v3 + 376));
  }
  *(_BYTE *)(a2 + 128) = 8;
  v23 = *(_QWORD *)(v3 - 176);
  if (v23)
  {
    if ((v23 & 8) != 0)
    {
      if ((*(_BYTE *)(v23 - 79) & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      v24 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != v24)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000), v24, v5, v6, v7, v8, v9, v10);
      if (((*(_QWORD *)((v23 & 0xFFFFFFFFFFFFC000) + 8 * ((v23 >> 10) & 0xF) + 0x28) >> (v23 >> 4)) & 1) != 0)
      {
LABEL_41:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_42;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v23, 0, v6, v7, v8, v9, v10);
  }
LABEL_42:
  v25 = *(_QWORD *)(v3 - 160);
  if (!v25)
    goto LABEL_48;
  if ((v25 & 8) != 0)
  {
    if ((*(_BYTE *)(v25 - 79) & 1) != 0)
      goto LABEL_47;
  }
  else
  {
    v26 = *(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v26)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v26, v5, v6, v7, v8, v9, v10);
    if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) != 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_48;
    }
  }
  JSC::SlotVisitor::appendSlow(a2, v25, 0, v6, v7, v8, v9, v10);
LABEL_48:
  v27 = *(_QWORD *)(v3 - 168);
  if (v27)
  {
    if ((v27 & 8) != 0)
    {
      if ((*(_BYTE *)(v27 - 79) & 1) == 0)
        goto LABEL_60;
    }
    else
    {
      v28 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != v28)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000), v28, v5, v6, v7, v8, v9, v10);
      if (((*(_QWORD *)((v27 & 0xFFFFFFFFFFFFC000) + 8 * ((v27 >> 10) & 0xF) + 0x28) >> (v27 >> 4)) & 1) == 0)
        goto LABEL_60;
    }
    if (!*(_QWORD *)(a2 + 168))
      goto LABEL_54;
LABEL_60:
    JSC::SlotVisitor::appendSlow(a2, v27, 0, v6, v7, v8, v9, v10);
  }
LABEL_54:
  *(_BYTE *)(a2 + 128) = v4;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_4,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t result;
  char v8;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)(a1 + 8);
  v8 = *((_BYTE *)a2 + 128);
  v9[0] = a2;
  v9[1] = 38;
  v11 = 0;
  v4 = *((_QWORD *)a2 + 11);
  v10 = v4;
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    *((_BYTE *)a2 + 128) = 9;
    for (i = *(_QWORD **)(v3 + 504); i != (_QWORD *)(v3 + 504); i = (_QWORD *)*i)
    {
      if ((i[2] & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
    }
    result = JSC::VM::visitAggregate((JSC::VM *)(v3 - 192), a2);
    *((_BYTE *)a2 + 128) = v8;
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_5,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  _QWORD *i;
  unint64_t v12;
  int v14;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a2 + 128) = 9;
  for (i = *(_QWORD **)(v9 + 504); i != (_QWORD *)(v9 + 504); i = (_QWORD *)*i)
  {
    v12 = i[2];
    if ((v12 & 0xFFFE000000000002) != 0 || v12 == 0)
      continue;
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v14)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v14, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
      {
LABEL_14:
        JSC::SlotVisitor::appendSlow(a2, v12, 0, a4, a5, a6, a7, a8);
        continue;
      }
    }
    if (*(_QWORD *)(a2 + 168))
      goto LABEL_14;
  }
  JSC::VM::visitAggregate((JSC::VM *)(v9 - 192), (JSC::SlotVisitor *)a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a2 + 128) = v10;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_6,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, JSC::AbstractSlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t result;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  char v35;
  _QWORD v36[2];
  uint64_t v37;
  char v38;

  v9 = *(_QWORD **)(a1 + 8);
  v35 = *((_BYTE *)a2 + 128);
  v36[0] = a2;
  v36[1] = 42;
  v38 = 0;
  v10 = *((_QWORD *)a2 + 11);
  v37 = v10;
  if (v10 && *(_BYTE *)(v10 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D3C94);
  }
  *((_QWORD *)a2 + 11) = v36;
  *((_BYTE *)a2 + 128) = 10;
  v11 = v9[11647];
  if (!v11)
    goto LABEL_4;
  v17 = (unsigned __int8 *)(v11 + 4);
  if (__ldaxr((unsigned __int8 *)(v11 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11 + 4);
LABEL_18:
  JSC::SamplingProfiler::processUnverifiedStackTraces((JSC::SamplingProfiler *)v11, a2, a3, a4, a5, a6, a7, a8);
  v25 = atomic_load((unsigned __int8 *)(v11 + 4));
  if ((v25 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1985D3DF8);
  }
  v26 = *(_QWORD **)(v11 + 104);
  if (v26)
  {
    v27 = *((unsigned int *)v26 - 1);
    v28 = &v26[v27];
    if (*((_DWORD *)v26 - 3))
    {
      v29 = v26;
      if ((_DWORD)v27)
      {
        v30 = 8 * v27;
        v29 = v26;
        while ((unint64_t)(*v29 + 1) <= 1)
        {
          ++v29;
          v30 -= 8;
          if (!v30)
          {
            v29 = v28;
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }
    v29 = &v26[v27];
  }
  else
  {
    v29 = 0;
    v27 = 0;
  }
  v28 = &v26[v27];
  if (!v26)
  {
    v31 = 0;
    goto LABEL_27;
  }
LABEL_26:
  v31 = &v26[*((unsigned int *)v26 - 1)];
LABEL_27:
  while (v29 != v31)
  {
    v32 = v29 + 1;
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v29);
    v29 = v28;
    if (v32 != v28)
    {
      v29 = v32;
      while ((unint64_t)(*v29 + 1) <= 1)
      {
        if (++v29 == v28)
        {
          v29 = v28;
          break;
        }
      }
    }
  }
  if (word_1ECF4C5CC == 2)
    WTF::dataLog<char [25],JSC::AbstractSlotVisitor>((uint64_t)a2);
  v33 = __ldxr(v17);
  if (v33 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_4;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, v19, v20, v21, v22, v23, v24);
LABEL_4:
  v12 = v9 - 24;
  if (v9[11622])
  {
    v13 = v9[11623];
    for (i = *(_QWORD *)(v13 + 16); i != *(_QWORD *)(v13 + 24); i += 24)
    {
      if ((*(_QWORD *)i & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v15 = *(_DWORD *)(i + 16);
      if (v15)
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16 * (v15 & 0xFFFFFFFE));
    }
  }
  result = v12[11673];
  if ((result & 1) == 0 && result)
    result = (uint64_t)JSC::ShadowChicken::visitChildren((_QWORD *)result, a2);
  *((_BYTE *)a2 + 128) = v35;
  *(_QWORD *)(v36[0] + 88) = v37;
  return result;
}

uint64_t WTF::dataLog<char [25],JSC::AbstractSlotVisitor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Sampling Profiler data:\n");
  (*(void (**)(uint64_t, WTF::PrintStream *))(*(_QWORD *)a1 + 112))(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_7,void,JSC::SlotVisitor &>::call(uint64_t a1, JSC::AbstractSlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t result;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *((_BYTE *)a2 + 128);
  *((_BYTE *)a2 + 128) = 10;
  v11 = (_QWORD *)(v9 - 192);
  v12 = *(unsigned __int8 **)(v9 + 93176);
  if (!v12)
    goto LABEL_2;
  v17 = v12 + 4;
  if (__ldaxr(v12 + 4))
  {
    __clrex();
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v12 + 4));
    goto LABEL_15;
  }
  if (__stxr(1u, v17))
    goto LABEL_14;
LABEL_15:
  JSC::SamplingProfiler::processUnverifiedStackTraces((JSC::SamplingProfiler *)v12, a2, a3, a4, a5, a6, a7, a8);
  JSC::SamplingProfiler::visit<JSC::SlotVisitor>((uint64_t)v12, (uint64_t)a2, v19, v20, v21, v22, v23, v24);
  if (word_1ECF4C5CC == 2)
    WTF::dataLog<char [25],JSC::SlotVisitor>((uint64_t)a2);
  v31 = __ldxr(v17);
  if (v31 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12 + 4, 0, v25, v26, v27, v28, v29, v30);
LABEL_2:
  if (v11[11646])
  {
    v13 = v11[11647];
    for (i = *(_QWORD *)(v13 + 16); i != *(_QWORD *)(v13 + 24); i += 24)
    {
      if ((*(_QWORD *)i & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v15 = *(_DWORD *)(i + 16);
      if (v15)
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16 * (v15 & 0xFFFFFFFE));
    }
  }
  result = v11[11673];
  if ((result & 1) == 0 && result)
    result = (uint64_t)JSC::ShadowChicken::visitChildren((_QWORD *)result, a2);
  *((_BYTE *)a2 + 128) = v10;
  return result;
}

uint64_t WTF::dataLog<char [25],JSC::SlotVisitor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  uint64_t *v8[5];
  char v9;
  uint64_t *v10[5];
  char v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10[0] = (uint64_t *)&v7;
    v8[0] = (uint64_t *)v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Sampling Profiler data:\n");
  v10[0] = (uint64_t *)(a1 + 8);
  v10[1] = (uint64_t *)", ";
  v10[2] = (uint64_t *)3;
  v10[3] = (uint64_t *)"";
  v10[4] = (uint64_t *)1;
  v11 = 0;
  v8[0] = (uint64_t *)(a1 + 40);
  v8[1] = (uint64_t *)", ";
  v8[2] = (uint64_t *)3;
  v8[3] = (uint64_t *)"";
  v8[4] = (uint64_t *)1;
  v9 = 0;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "Collector: [");
  WTF::PrintStream::printImpl<WTF::PointerListDump<JSC::MarkStackArray>,char [14],WTF::PointerListDump<JSC::MarkStackArray>,char [2]>(v5, v10, "], Mutator: [", v8, "]");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_8,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)(a1 + 8);
  v12 = a2;
  v13 = *(_BYTE *)(a2 + 128);
  v14[0] = a2;
  v14[1] = 54;
  v16 = 0;
  v4 = *(_QWORD *)(a2 + 88);
  v15 = v4;
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)(a2 + 88) = v14;
    *(_BYTE *)(a2 + 128) = 13;
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E3590860;
    *(_QWORD *)(v5 + 16) = v3 + 160;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(v3 + 288);
    if (*(_BYTE *)(v3 + 155) == 1)
      v6 = *(_QWORD *)(v3 + 272);
    else
      v6 = v3 + 272;
    *(_QWORD *)(v5 + 40) = v6;
    *(_BYTE *)(v5 + 48) = 0;
    v11 = v5;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v11);
    result = v11;
    v11 = 0;
    if (result)
    {
      v8 = (unsigned int *)(result + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    *(_BYTE *)(v12 + 128) = v13;
    *(_QWORD *)(v14[0] + 88) = v15;
  }
  return result;
}

void JSC::MarkedSpace::forEachWeakInParallel<JSC::AbstractSlotVisitor &>(void)::Task::run(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD v25[16];

  v10 = (unsigned __int8 *)(a1 + 6);
LABEL_2:
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_6;
  }
  if (__stxr(1u, v10))
    goto LABEL_5;
LABEL_6:
  v12 = 0;
  v13 = a1[3];
  while (1)
  {
    do
    {
      v14 = v13;
      if (!v13)
      {
        v15 = a1[2];
        v16 = (_QWORD *)(v15 + 128);
        v17 = (_QWORD *)(v15 + 112);
        v18 = (_QWORD *)a1[4];
        while (1)
        {
          while (v18 != v16)
          {
            v14 = v18[4];
            a1[3] = v14;
            v18 = (_QWORD *)*v18;
            a1[4] = v18;
            if (v14)
              goto LABEL_8;
          }
          v19 = (_QWORD *)a1[5];
          if (v19 == v17)
            break;
          v14 = v19[4];
          a1[3] = v14;
          a1[5] = *v19;
          v18 = v16;
          if (v14)
            goto LABEL_8;
        }
LABEL_20:
        v20 = __ldxr(v10);
        if (v20 == 1)
        {
          if (!__stlxr(0, v10))
          {
            if (!v12)
              return;
LABEL_26:
            v21 = 8 * v12;
            v22 = (uint64_t **)v25;
            do
            {
              v23 = *v22;
              if (!*((_BYTE *)*v22 + 24) || !v23[4])
              {
                v24 = *v23;
                if ((*v23 & 1) != 0)
                  JSC::WeakBlock::specializedVisit<JSC::PreciseAllocation,JSC::AbstractSlotVisitor>((uint64_t)v23, v24 - 1, a2);
                else
                  JSC::WeakBlock::specializedVisit<JSC::MarkedBlock,JSC::AbstractSlotVisitor>((uint64_t)v23, v24, a2);
              }
              ++v22;
              v21 -= 8;
            }
            while (v21);
            goto LABEL_2;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
        if (!v12)
          return;
        goto LABEL_26;
      }
LABEL_8:
      v13 = *(_QWORD *)(v14 + 16);
      a1[3] = v13;
    }
    while (*(_BYTE *)(v14 + 24) && *(_QWORD *)(v14 + 32));
    if (v12 >= 0x10)
      break;
    v25[v12++] = v14;
    if (v12 == 16)
      goto LABEL_20;
  }
  __break(1u);
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_9,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a2 + 128) = 13;
  v5 = WTF::fastMalloc((WTF *)0x38);
  v12 = (unsigned int *)v5;
  *(_DWORD *)(v5 + 8) = 1;
  v13 = (unsigned int *)(v5 + 8);
  *(_QWORD *)v5 = off_1E35908B0;
  *(_QWORD *)(v5 + 16) = v3 + 160;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v3 + 288);
  v14 = (_QWORD *)(v3 + 272);
  if (*(_BYTE *)(v3 + 155) == 1)
    v14 = (_QWORD *)*v14;
  *(_QWORD *)(v5 + 40) = v14;
  *(_BYTE *)(v5 + 48) = 0;
  v17 = v5;
  JSC::SlotVisitor::addParallelConstraintTask(a2, &v17, v6, v7, v8, v9, v10, v11);
  v17 = 0;
  do
  {
    v15 = __ldaxr(v13);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v13));
  if (!v16)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  }
  *(_BYTE *)(a2 + 128) = v4;
}

void JSC::MarkedSpace::forEachWeakInParallel<JSC::SlotVisitor &>(void)::Task::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD v36[18];
  unint64_t v37;

  v32 = (unsigned __int8 *)(a1 + 48);
LABEL_2:
  v12 = v32;
  if (__ldaxr(v32))
  {
    __clrex();
    v14 = (_QWORD *)a1;
    v15 = v36;
  }
  else
  {
    v14 = (_QWORD *)a1;
    v15 = v36;
    if (!__stxr(1u, v32))
      goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v32);
LABEL_5:
  v16 = 0;
  v17 = v14[3];
  do
  {
    do
    {
      v18 = v17;
      if (!v17)
      {
        v19 = v14[2];
        v20 = (_QWORD *)v14[4];
        do
        {
          if (v20 == (_QWORD *)(v19 + 128))
          {
            v21 = (_QWORD *)v14[5];
            if (v21 == (_QWORD *)(v19 + 112))
              goto LABEL_19;
            v18 = v21[4];
            v14[3] = v18;
            v14[5] = *v21;
            v20 = (_QWORD *)(v19 + 128);
          }
          else
          {
            v18 = v20[4];
            v14[3] = v18;
            v20 = (_QWORD *)*v20;
            v14[4] = v20;
          }
        }
        while (!v18);
      }
      v17 = *(_QWORD *)(v18 + 16);
      v14[3] = v17;
    }
    while (*(_BYTE *)(v18 + 24) && *(_QWORD *)(v18 + 32));
    if (v16 >= 0x10)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      if ((v37 & 0xFFFE000000000002) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
      while (1)
      {
        while (1)
        {
          v10 += 24;
          if (v10 == 960)
          {
            while (1)
            {
              v23 = v35 + 1;
              if (v35 + 1 == v34)
                goto LABEL_2;
LABEL_23:
              v35 = v23;
              v12 = (_QWORD *)*v23;
              if (!*(_BYTE *)(*v23 + 24) || !v12[4])
              {
                v14 = (_QWORD *)*v12;
                if ((*v12 & 1) == 0)
                {
                  v10 = 0;
                  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 92936);
                  v9 = v14 + 4;
                  v15 = v14 + 5;
                  break;
                }
                JSC::WeakBlock::specializedVisit<JSC::PreciseAllocation,JSC::SlotVisitor>(*v23, (uint64_t)v14 - 1, a2);
              }
            }
          }
          v24 = *(_QWORD *)((char *)v12 + v10 + 56);
          v25 = v24 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v24 & 3) == 0 && v25 != 0)
          {
            v27 = *(_QWORD *)((char *)v12 + v10 + 48);
            v37 = v27;
            if (*v9 != *(_DWORD *)(a2 + 132))
              goto LABEL_36;
            v28 = v27 - (_QWORD)v14;
            v29 = ((v27 - (unint64_t)v14) >> 4);
            if (v29 >= 0x400)
              goto LABEL_53;
            if (((*(_QWORD *)((char *)v15 + ((v29 >> 3) & 0x1FFFFFF8)) >> (v28 >> 4)) & 1) == 0)
            {
LABEL_36:
              v36[16] = &str_34_10;
              v36[17] = 1;
              if ((*(unsigned int (**)(unint64_t, unint64_t *, _QWORD, uint64_t))(*(_QWORD *)v25 + 16))(v25, &v37, *(_QWORD *)((char *)v12 + v10 + 64), a2))
              {
                break;
              }
            }
          }
        }
        v30 = v37;
        if ((v37 & 0xFFFE000000000002) == 0 && v37)
        {
          if ((v37 & 8) != 0)
          {
            if ((*(_BYTE *)(v37 - 79) & 1) != 0 && !*(_QWORD *)(a2 + 168))
              goto LABEL_27;
          }
          else
          {
            v31 = *(_DWORD *)(a2 + 132);
            if (*(_DWORD *)(v37 & 0xFFFFFFFFFFFFC000 | 0x20) != v31)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v37 & 0xFFFFFFFFFFFFC000), v31, a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v30 & 0xFFFFFFFFFFFFC000) + 8 * ((v30 >> 10) & 0xF) + 0x28) >> (v30 >> 4)) & 1) != 0
              && !*(_QWORD *)(a2 + 168))
            {
              goto LABEL_27;
            }
          }
          JSC::SlotVisitor::appendSlow(a2, v30, 0, a4, a5, a6, a7, a8);
        }
LABEL_27:
        if (v8)
          goto LABEL_54;
      }
    }
    v36[v16++] = v18;
  }
  while (v16 != 16);
LABEL_19:
  v22 = __ldxr(v32);
  if (v22 == 1)
  {
    if (!__stlxr(0, v32))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, a3, a4, a5, a6, a7, a8);
LABEL_21:
  if (v16)
  {
    v23 = v36;
    v34 = &v36[v16];
    goto LABEL_23;
  }
}

unsigned int *WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_10,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int *v55;

  v49 = *(_BYTE *)(a2 + 128);
  v51 = a2;
  v52 = 10;
  v54 = 0;
  v4 = *(_QWORD *)(a2 + 80);
  v3 = *(_QWORD *)(a2 + 88);
  v53 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v5 = (uint64_t *)(v4 + 35512);
  *(_QWORD *)(a2 + 88) = &v51;
  *(_BYTE *)(a2 + 128) = 2;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = &off_1E3590900;
  *(_QWORD *)(v6 + 16) = v4 + 36320;
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E3590D58;
  *(_QWORD *)(v7 + 16) = v4 + 36320;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v4 + 36344) + 88;
  *(_QWORD *)(v7 + 32) = 0;
  *(_WORD *)(v7 + 40) = 0;
  *(_QWORD *)(v6 + 24) = v7;
  *(_BYTE *)(v6 + 33) = 0;
  v55 = (unsigned int *)v6;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a2 + 72))(a2, &v55);
  v8 = v55;
  v55 = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = v4 + 36832;
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = &off_1E3590900;
  *(_QWORD *)(v13 + 16) = v12;
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E3590D58;
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v5[168] + 88;
  *(_QWORD *)(v14 + 32) = 0;
  *(_WORD *)(v14 + 40) = 0;
  *(_QWORD *)(v13 + 24) = v14;
  *(_BYTE *)(v13 + 33) = 0;
  v55 = (unsigned int *)v13;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a2 + 72))(a2, &v55);
  result = v55;
  v55 = 0;
  if (result)
  {
    v16 = result + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v19 = v5[57];
  if (v19)
  {
    v20 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v20 + 8) = 1;
    *(_QWORD *)v20 = &off_1E3590900;
    *(_QWORD *)(v20 + 16) = v19 + 336;
    v21 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v21 + 8) = 1;
    *(_QWORD *)v21 = off_1E3590D58;
    *(_QWORD *)(v21 + 16) = v19 + 336;
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(v19 + 360) + 88;
    *(_QWORD *)(v21 + 32) = 0;
    *(_WORD *)(v21 + 40) = 0;
    *(_QWORD *)(v20 + 24) = v21;
    *(_BYTE *)(v20 + 33) = 0;
    v55 = (unsigned int *)v20;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a2 + 72))(a2, &v55);
    result = v55;
    v55 = 0;
    if (result)
    {
      v22 = result + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  v25 = v5[58];
  if (v25)
  {
    v26 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v26 + 8) = 1;
    *(_QWORD *)v26 = &off_1E3590900;
    *(_QWORD *)(v26 + 16) = v25 + 336;
    v27 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v27 + 8) = 1;
    *(_QWORD *)v27 = off_1E3590D58;
    *(_QWORD *)(v27 + 16) = v25 + 336;
    *(_QWORD *)(v27 + 24) = *(_QWORD *)(v25 + 360) + 88;
    *(_QWORD *)(v27 + 32) = 0;
    *(_WORD *)(v27 + 40) = 0;
    *(_QWORD *)(v26 + 24) = v27;
    *(_BYTE *)(v26 + 33) = 0;
    v55 = (unsigned int *)v26;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a2 + 72))(a2, &v55);
    result = v55;
    v55 = 0;
    if (result)
    {
      v28 = result + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  *(_BYTE *)(a2 + 128) = v49;
  *(_QWORD *)(v51 + 88) = v53;
  if (*v5)
  {
    v50 = *(_BYTE *)(a2 + 128);
    v51 = a2;
    v52 = 50;
    v54 = 0;
    v31 = *(_QWORD *)(a2 + 88);
    v53 = v31;
    if (!v31 || !*(_BYTE *)(v31 + 24))
    {
      *(_QWORD *)(a2 + 88) = &v51;
      *(_BYTE *)(a2 + 128) = 12;
      v32 = *v5;
      v33 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v33 + 8) = 1;
      *(_QWORD *)v33 = &off_1E3590928;
      *(_QWORD *)(v33 + 16) = v32;
      v34 = WTF::fastMalloc((WTF *)0x20);
      v35 = *(_QWORD *)(v32 + 32);
      *(_DWORD *)(v34 + 8) = 1;
      v36 = (unsigned int *)(v34 + 8);
      *(_QWORD *)v34 = off_1E35912B0;
      *(_QWORD *)(v34 + 16) = v35;
      *(_BYTE *)(v34 + 24) = 0;
      v37 = WTF::fastMalloc((WTF *)0x28);
      v38 = v37;
      do
        v39 = __ldaxr(v36);
      while (__stlxr(v39 + 1, v36));
      *(_DWORD *)(v37 + 8) = 1;
      *(_QWORD *)v37 = &off_1E35912D8;
      do
        v40 = __ldaxr(v36);
      while (__stlxr(v40 + 1, v36));
      *(_QWORD *)(v37 + 16) = v34;
      *(_QWORD *)(v37 + 24) = 0;
      *(_BYTE *)(v37 + 33) = 0;
      do
      {
        v41 = __ldaxr(v36);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v36));
      if (!v42)
      {
        atomic_store(1u, (unsigned int *)(v34 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      *(_QWORD *)(v33 + 24) = v38;
      do
      {
        v43 = __ldaxr(v36);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v36));
      if (!v44)
      {
        atomic_store(1u, (unsigned int *)(v34 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      *(_BYTE *)(v33 + 33) = 0;
      v55 = (unsigned int *)v33;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a2 + 72))(a2, &v55);
      result = v55;
      v55 = 0;
      if (result)
      {
        v45 = result + 2;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      *(_BYTE *)(a2 + 128) = v50;
      *(_QWORD *)(v51 + 88) = v53;
      return result;
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x1985D4D70);
  }
  return result;
}

uint64_t _ZZN3JSC10IsoCellSet27forEachMarkedCellInParallelIRNS_19AbstractSlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__10clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD1Ev(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void _ZZN3JSC10IsoCellSet27forEachMarkedCellInParallelIRNS_19AbstractSlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__10clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZZN3JSC10IsoCellSet27forEachMarkedCellInParallelIRNS_19AbstractSlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__10clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4Task3runES3_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (result)
  {
    v5 = (unsigned int *)result;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + (v5[3] & 0xFFFFFFF8) + 8)
                     + 8 * (v5[3] & 7));
      v7 = *((_QWORD *)v5 + 11);
      v8 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 432);
      v9 = *(_DWORD *)(v7 + 32);
      __dmb(0xBu);
      if (v9 == v8)
      {
        v10 = v5[1];
        if (v10 <= 0x3FF)
        {
          v11 = v7 + 40;
          do
          {
            if (((1 << v10) & *(_QWORD *)(v11 + 8 * (v10 >> 6))) != 0
              && (*(_QWORD *)(v6 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
            {
              v12 = *((_QWORD *)v5 + 11);
              v22 = *(_BYTE *)(a2 + 128);
              v24 = a2;
              v25 = 58;
              v27 = 0;
              v13 = *(_QWORD *)(a2 + 88);
              v26 = v13;
              if (v13 && *(_BYTE *)(v13 + 24))
              {
                __break(0xC471u);
                goto LABEL_26;
              }
              *(_QWORD *)(a2 + 88) = &v24;
              *(_BYTE *)(a2 + 128) = 14;
              (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)(v12 + 16 * v10) & 0xFFFFFFFE) + 0x4C)
                                + 0xE8))();
              *(_BYTE *)(a2 + 128) = v22;
              *(_QWORD *)(v24 + 88) = v26;
            }
            v10 += *v5;
          }
          while (v10 < 0x400);
        }
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v5 = (unsigned int *)result;
    }
    while (result);
  }
  v14 = (unsigned __int8 *)(a1 + 33);
  do
    v15 = __ldxr(v14);
  while (__stxr(1u, v14));
  if ((v15 & 1) == 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
    v19 = *(uint64_t **)(v16 + 48);
    v17 = (uint64_t *)(v16 + 48);
    v18 = v19;
    if (v19 != v17)
    {
      while (1)
      {
        v20 = *((unsigned __int8 *)v18 + 36);
        if (v20 >= 0x20)
          break;
        if (((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16) >> v20) & 1) != 0 && (*((_BYTE *)v18 + 33) & 1) != 0)
        {
          v23 = *(_BYTE *)(a2 + 128);
          v24 = a2;
          v25 = 58;
          v27 = 0;
          v21 = *(_QWORD *)(a2 + 88);
          v26 = v21;
          if (v21 && *(_BYTE *)(v21 + 24))
            goto LABEL_27;
          *(_QWORD *)(a2 + 88) = &v24;
          *(_BYTE *)(a2 + 128) = 14;
          result = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * ((_DWORD)v18[14] & 0xFFFFFFFE) + 0x4C) + 0xE8))();
          *(_BYTE *)(a2 + 128) = v23;
          *(_QWORD *)(v24 + 88) = v26;
        }
        v18 = (uint64_t *)*v18;
        if (v18 == v17)
          return result;
      }
LABEL_26:
      __break(1u);
LABEL_27:
      result = 75;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t _ZZN3JSC8Subspace27forEachMarkedCellInParallelIRNS_19AbstractSlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__10clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD1Ev(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void _ZZN3JSC8Subspace27forEachMarkedCellInParallelIRNS_19AbstractSlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__10clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZZN3JSC8Subspace27forEachMarkedCellInParallelIRNS_19AbstractSlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__10clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4Task3runES3_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (result)
  {
    v5 = (unsigned int *)result;
    do
    {
      v6 = *((_QWORD *)v5 + 11);
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 8) + 432);
      v8 = *(_DWORD *)(v6 + 32);
      __dmb(0xBu);
      if (v8 == v7)
      {
        v9 = v5[1];
        if (v9 <= 0x3FF)
        {
          v10 = v6 + 40;
          do
          {
            if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
            {
              v11 = *((_QWORD *)v5 + 11);
              v20 = *(_BYTE *)(a2 + 128);
              v22 = a2;
              v23 = 58;
              v25 = 0;
              v12 = *(_QWORD *)(a2 + 88);
              v24 = v12;
              if (v12 && *(_BYTE *)(v12 + 24))
              {
LABEL_22:
                __break(0xC471u);
                JUMPOUT(0x1985D544CLL);
              }
              *(_QWORD *)(a2 + 88) = &v22;
              *(_BYTE *)(a2 + 128) = 14;
              (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)(v11 + 16 * v9) & 0xFFFFFFFE) + 0x4C)
                                + 0xE8))();
              *(_BYTE *)(a2 + 128) = v20;
              *(_QWORD *)(v22 + 88) = v24;
            }
            v9 += *v5;
          }
          while (v9 < 0x400);
        }
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v5 = (unsigned int *)result;
    }
    while (result);
  }
  v13 = (unsigned __int8 *)(a1 + 33);
  do
    v14 = __ldxr(v13);
  while (__stxr(1u, v13));
  if ((v14 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v18 = *(uint64_t **)(v15 + 48);
    v16 = (uint64_t *)(v15 + 48);
    for (i = v18; i != v16; i = (uint64_t *)*i)
    {
      if ((*((_BYTE *)i + 33) & 1) != 0)
      {
        v21 = *(_BYTE *)(a2 + 128);
        v22 = a2;
        v23 = 58;
        v25 = 0;
        v19 = *(_QWORD *)(a2 + 88);
        v24 = v19;
        if (v19 && *(_BYTE *)(v19 + 24))
          goto LABEL_22;
        *(_QWORD *)(a2 + 88) = &v22;
        *(_BYTE *)(a2 + 128) = 14;
        result = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * ((_DWORD)i[14] & 0xFFFFFFFE) + 0x4C) + 0xE8))();
        *(_BYTE *)(a2 + 128) = v21;
        *(_QWORD *)(v22 + 88) = v24;
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_11,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = (uint64_t *)(v3 + 35512);
  v5 = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a2 + 128) = 2;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  v7 = (unsigned int *)(v6 + 8);
  *(_QWORD *)v6 = &off_1E3590978;
  *(_QWORD *)(v6 + 16) = v3 + 36320;
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E3590D58;
  *(_QWORD *)(v8 + 16) = v3 + 36320;
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v3 + 36344) + 88;
  *(_QWORD *)(v8 + 32) = 0;
  *(_WORD *)(v8 + 40) = 0;
  *(_QWORD *)(v6 + 24) = v8;
  *(_BYTE *)(v6 + 33) = 0;
  v75 = v6;
  JSC::SlotVisitor::addParallelConstraintTask(a2, &v75, v9, v10, v11, v12, v13, v14);
  v75 = 0;
  do
  {
    v15 = __ldaxr(v7);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v7));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)(v6 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v17 = v3 + 36832;
  v18 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v18 + 8) = 1;
  v19 = (unsigned int *)(v18 + 8);
  *(_QWORD *)v18 = &off_1E3590978;
  *(_QWORD *)(v18 + 16) = v17;
  v20 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E3590D58;
  *(_QWORD *)(v20 + 16) = v17;
  *(_QWORD *)(v20 + 24) = v4[168] + 88;
  *(_QWORD *)(v20 + 32) = 0;
  *(_WORD *)(v20 + 40) = 0;
  *(_QWORD *)(v18 + 24) = v20;
  *(_BYTE *)(v18 + 33) = 0;
  v75 = v18;
  JSC::SlotVisitor::addParallelConstraintTask(a2, &v75, v21, v22, v23, v24, v25, v26);
  v75 = 0;
  do
  {
    v27 = __ldaxr(v19);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v19));
  if (!v28)
  {
    atomic_store(1u, (unsigned int *)(v18 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v29 = v4[57];
  if (v29)
  {
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v30 + 8) = 1;
    v31 = (unsigned int *)(v30 + 8);
    *(_QWORD *)v30 = &off_1E3590978;
    *(_QWORD *)(v30 + 16) = v29 + 336;
    v32 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v32 + 8) = 1;
    *(_QWORD *)v32 = off_1E3590D58;
    *(_QWORD *)(v32 + 16) = v29 + 336;
    *(_QWORD *)(v32 + 24) = *(_QWORD *)(v29 + 360) + 88;
    *(_QWORD *)(v32 + 32) = 0;
    *(_WORD *)(v32 + 40) = 0;
    *(_QWORD *)(v30 + 24) = v32;
    *(_BYTE *)(v30 + 33) = 0;
    v75 = v30;
    JSC::SlotVisitor::addParallelConstraintTask(a2, &v75, v33, v34, v35, v36, v37, v38);
    v75 = 0;
    do
    {
      v39 = __ldaxr(v31);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v31));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)(v30 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  v41 = v4[58];
  if (v41)
  {
    v42 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v42 + 8) = 1;
    v43 = (unsigned int *)(v42 + 8);
    *(_QWORD *)v42 = &off_1E3590978;
    *(_QWORD *)(v42 + 16) = v41 + 336;
    v44 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v44 + 8) = 1;
    *(_QWORD *)v44 = off_1E3590D58;
    *(_QWORD *)(v44 + 16) = v41 + 336;
    *(_QWORD *)(v44 + 24) = *(_QWORD *)(v41 + 360) + 88;
    *(_QWORD *)(v44 + 32) = 0;
    *(_WORD *)(v44 + 40) = 0;
    *(_QWORD *)(v42 + 24) = v44;
    *(_BYTE *)(v42 + 33) = 0;
    v75 = v42;
    JSC::SlotVisitor::addParallelConstraintTask(a2, &v75, v45, v46, v47, v48, v49, v50);
    v75 = 0;
    do
    {
      v51 = __ldaxr(v43);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v43));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)(v42 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
  }
  *(_BYTE *)(a2 + 128) = v5;
  v53 = *v4;
  if (*v4)
  {
    *(_BYTE *)(a2 + 128) = 12;
    v54 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v54 + 8) = 1;
    v55 = (unsigned int *)(v54 + 8);
    *(_QWORD *)v54 = &off_1E35909A0;
    *(_QWORD *)(v54 + 16) = v53;
    v56 = WTF::fastMalloc((WTF *)0x20);
    v57 = *(_QWORD *)(v53 + 32);
    *(_DWORD *)(v56 + 8) = 1;
    v58 = (unsigned int *)(v56 + 8);
    *(_QWORD *)v56 = off_1E35912B0;
    *(_QWORD *)(v56 + 16) = v57;
    *(_BYTE *)(v56 + 24) = 0;
    v59 = WTF::fastMalloc((WTF *)0x28);
    v66 = v59;
    do
      v67 = __ldaxr(v58);
    while (__stlxr(v67 + 1, v58));
    *(_DWORD *)(v59 + 8) = 1;
    *(_QWORD *)v59 = &off_1E35912D8;
    do
      v68 = __ldaxr(v58);
    while (__stlxr(v68 + 1, v58));
    *(_QWORD *)(v59 + 16) = v56;
    *(_QWORD *)(v59 + 24) = 0;
    *(_BYTE *)(v59 + 33) = 0;
    do
    {
      v69 = __ldaxr(v58);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v58));
    if (!v70)
    {
      atomic_store(1u, (unsigned int *)(v56 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    }
    *(_QWORD *)(v54 + 24) = v66;
    do
    {
      v71 = __ldaxr(v58);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v58));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)(v56 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    }
    *(_BYTE *)(v54 + 33) = 0;
    v75 = v54;
    JSC::SlotVisitor::addParallelConstraintTask(a2, &v75, v60, v61, v62, v63, v64, v65);
    v75 = 0;
    do
    {
      v73 = __ldaxr(v55);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v55));
    if (!v74)
    {
      atomic_store(1u, (unsigned int *)(v54 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    }
    *(_BYTE *)(a2 + 128) = v5;
  }
}

uint64_t _ZZN3JSC10IsoCellSet27forEachMarkedCellInParallelIRNS_11SlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__11clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD1Ev(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void _ZZN3JSC10IsoCellSet27forEachMarkedCellInParallelIRNS_11SlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__11clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZZN3JSC10IsoCellSet27forEachMarkedCellInParallelIRNS_11SlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__11clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4Task3runES3_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  char v21;
  int v22;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (result)
  {
    v5 = (unsigned int *)result;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + (v5[3] & 0xFFFFFFF8) + 8)
                     + 8 * (v5[3] & 7));
      v7 = *((_QWORD *)v5 + 11);
      v8 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 432);
      v9 = *(_DWORD *)(v7 + 32);
      __dmb(0xBu);
      if (v9 == v8)
      {
        v10 = v5[1];
        if (v10 <= 0x3FF)
        {
          v11 = v7 + 40;
          do
          {
            if (((1 << v10) & *(_QWORD *)(v11 + 8 * (v10 >> 6))) != 0
              && (*(_QWORD *)(v6 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
            {
              v12 = (_DWORD *)(*((_QWORD *)v5 + 11) + 16 * v10);
              v13 = *(_BYTE *)(a2 + 128);
              *(_BYTE *)(a2 + 128) = 14;
              (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v12 & 0xFFFFFFFE) + 0x4C) + 0xE0))();
              *(_BYTE *)(a2 + 128) = v13;
            }
            v10 += *v5;
          }
          while (v10 < 0x400);
        }
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v5 = (unsigned int *)result;
    }
    while (result);
  }
  v14 = (unsigned __int8 *)(a1 + 33);
  do
    v15 = __ldxr(v14);
  while (__stxr(1u, v14));
  if ((v15 & 1) == 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
    v19 = *(uint64_t **)(v16 + 48);
    v17 = (uint64_t *)(v16 + 48);
    v18 = v19;
    if (v19 != v17)
    {
      while (1)
      {
        v20 = *((unsigned __int8 *)v18 + 36);
        if (v20 >= 0x20)
          break;
        if (((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16) >> v20) & 1) != 0 && (*((_BYTE *)v18 + 33) & 1) != 0)
        {
          v21 = *(_BYTE *)(a2 + 128);
          v22 = *((_DWORD *)v18 + 28);
          *(_BYTE *)(a2 + 128) = 14;
          result = (*(uint64_t (**)(uint64_t *, uint64_t))(16
                                                                 * *(unsigned int *)(16 * (v22 & 0xFFFFFFFE) + 0x4C)
                                                                 + 0xE0))(v18 + 14, a2);
          *(_BYTE *)(a2 + 128) = v21;
        }
        v18 = (uint64_t *)*v18;
        if (v18 == v17)
          return result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t _ZZN3JSC8Subspace27forEachMarkedCellInParallelIRNS_11SlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__11clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD1Ev(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

void _ZZN3JSC8Subspace27forEachMarkedCellInParallelIRNS_11SlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__11clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4TaskD0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZZN3JSC8Subspace27forEachMarkedCellInParallelIRNS_11SlotVisitorEZZNS_4Heap18addCoreConstraintsEvENK4__11clIS2_EEDaRT_EUlS9_PNS_8HeapCellENSA_4KindEE_EEN3WTF3RefINSE_10SharedTaskIFvS9_EEENSE_12RawPtrTraitsISI_EENSE_21DefaultRefDerefTraitsISI_EEEERKT0_EN4Task3runES3_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t *v18;
  char v19;
  int v20;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (result)
  {
    v5 = (unsigned int *)result;
    do
    {
      v6 = *((_QWORD *)v5 + 11);
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 8) + 432);
      v8 = *(_DWORD *)(v6 + 32);
      __dmb(0xBu);
      if (v8 == v7)
      {
        v9 = v5[1];
        if (v9 <= 0x3FF)
        {
          v10 = v6 + 40;
          do
          {
            if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
            {
              v11 = (_DWORD *)(*((_QWORD *)v5 + 11) + 16 * v9);
              v12 = *(_BYTE *)(a2 + 128);
              *(_BYTE *)(a2 + 128) = 14;
              (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v11 & 0xFFFFFFFE) + 0x4C) + 0xE0))();
              *(_BYTE *)(a2 + 128) = v12;
            }
            v9 += *v5;
          }
          while (v9 < 0x400);
        }
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v5 = (unsigned int *)result;
    }
    while (result);
  }
  v13 = (unsigned __int8 *)(a1 + 33);
  do
    v14 = __ldxr(v13);
  while (__stxr(1u, v13));
  if ((v14 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v18 = *(uint64_t **)(v15 + 48);
    v16 = (uint64_t *)(v15 + 48);
    for (i = v18; i != v16; i = (uint64_t *)*i)
    {
      if ((*((_BYTE *)i + 33) & 1) != 0)
      {
        v19 = *(_BYTE *)(a2 + 128);
        v20 = *((_DWORD *)i + 28);
        *(_BYTE *)(a2 + 128) = 14;
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(16
                                                               * *(unsigned int *)(16 * (v20 & 0xFFFFFFFE) + 0x4C)
                                                               + 0xE0))(i + 14, a2);
        *(_BYTE *)(a2 + 128) = v19;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_12,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t result;
  char v35;
  _QWORD v36[2];
  uint64_t v37;
  char v38;
  char v39;
  char **v40;
  char *v41;

  v9 = *(_QWORD *)(a1 + 8);
  v35 = *(_BYTE *)(a2 + 128);
  v36[0] = a2;
  v36[1] = 62;
  v38 = 0;
  v10 = *(_QWORD *)(a2 + 88);
  v37 = v10;
  if (v10 && *(_BYTE *)(v10 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D5FF8);
  }
  *(_QWORD *)(a2 + 88) = v36;
  *(_BYTE *)(a2 + 128) = 15;
  v11 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v11 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  JSC::JITWorklist::visitWeakReferences<JSC::AbstractSlotVisitor>(JSC::theGlobalJITWorklist, a2, a3, a4, a5, a6, a7, a8);
  v12 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v12 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v13 = JSC::theGlobalJITWorklist;
  v14 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v14 = off_1E35909F0;
  *((_QWORD *)v14 + 1) = a2;
  v41 = v14;
  v21 = (unsigned __int8 *)(*(_QWORD *)(v13 + 304) + 4);
  if (__ldaxr(v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_11:
  v23 = *(_QWORD **)(v13 + 144);
  if (v23)
  {
    v24 = *((unsigned int *)v23 - 1);
    v25 = &v23[3 * v24];
    if (*((_DWORD *)v23 - 3))
    {
      v26 = v23;
      if ((_DWORD)v24)
      {
        v27 = 24 * v24;
        v26 = v23;
        while (!*v26)
        {
          v26 += 3;
          v27 -= 24;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v26 = &v23[3 * v24];
  }
  else
  {
    v26 = 0;
    LODWORD(v24) = 0;
  }
  v25 = &v23[3 * v24];
  if (v23)
  {
LABEL_18:
    v28 = &v23[3 * *((unsigned int *)v23 - 1)];
    goto LABEL_19;
  }
  v28 = 0;
LABEL_19:
  if (v28 != v26)
  {
    v29 = v9 - 192;
    do
    {
      v30 = (_QWORD *)v26[2];
      if (v30[4] == v29)
        (*(void (**)(_QWORD *, uint64_t, char **))(*v30 + 72))(v30, a2, &v41);
      v31 = v26 + 3;
      v26 = v25;
      if (v31 != v25)
      {
        v26 = v31;
        while (!*v26)
        {
          v26 += 3;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
    }
    while (v26 != v28);
  }
  v32 = __ldxr(v21);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v21))
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v15, v16, v17, v18, v19, v20);
  result = (uint64_t)v41;
  v41 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (word_1ECF4C5CC == 2)
    result = WTF::dataLog<char [16],JSC::AbstractSlotVisitor>(a2);
  *(_BYTE *)(a2 + 128) = v35;
  *(_QWORD *)(v36[0] + 88) = v37;
  return result;
}

uint64_t WTF::dataLog<char [16],JSC::AbstractSlotVisitor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "JIT Worklists:\n");
  (*(void (**)(uint64_t, WTF::PrintStream *))(*(_QWORD *)a1 + 112))(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN3JSC4Heap18addCoreConstraintsEvENK4__12clINS2_19AbstractSlotVisitorEEEDaRT_EUlPNS2_9CodeBlockEE_vJSB_EE4callESB_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_13,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t result;
  char v34;
  char **v35;
  char *v36;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a2 + 128) = 15;
  v11 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v11 != -1)
  {
    v36 = &v34;
    v35 = &v36;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  JSC::JITWorklist::visitWeakReferences<JSC::SlotVisitor>(JSC::theGlobalJITWorklist, a2, a3, a4, a5, a6, a7, a8);
  v12 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v12 != -1)
  {
    v36 = &v34;
    v35 = &v36;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v13 = JSC::theGlobalJITWorklist;
  v14 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v14 = off_1E3590A40;
  *((_QWORD *)v14 + 1) = a2;
  v36 = v14;
  v21 = (unsigned __int8 *)(*(_QWORD *)(v13 + 304) + 4);
  if (__ldaxr(v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_9:
  v23 = *(_QWORD **)(v13 + 144);
  if (v23)
  {
    v24 = *((unsigned int *)v23 - 1);
    v25 = &v23[3 * v24];
    if (*((_DWORD *)v23 - 3))
    {
      v26 = v23;
      if ((_DWORD)v24)
      {
        v27 = 24 * v24;
        v26 = v23;
        while (!*v26)
        {
          v26 += 3;
          v27 -= 24;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v26 = &v23[3 * v24];
  }
  else
  {
    v26 = 0;
    LODWORD(v24) = 0;
  }
  v25 = &v23[3 * v24];
  if (v23)
  {
LABEL_16:
    v28 = &v23[3 * *((unsigned int *)v23 - 1)];
    goto LABEL_17;
  }
  v28 = 0;
LABEL_17:
  if (v28 != v26)
  {
    v29 = v9 - 192;
    do
    {
      v30 = (_QWORD *)v26[2];
      if (v30[4] == v29)
        (*(void (**)(_QWORD *, uint64_t, char **))(*v30 + 72))(v30, a2, &v36);
      v31 = v26 + 3;
      v26 = v25;
      if (v31 != v25)
      {
        v26 = v31;
        while (!*v26)
        {
          v26 += 3;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
    }
    while (v26 != v28);
  }
  v32 = __ldxr(v21);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v21))
LABEL_31:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v15, v16, v17, v18, v19, v20);
  result = (uint64_t)v36;
  v36 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (word_1ECF4C5CC == 2)
    result = WTF::dataLog<char [16],JSC::SlotVisitor>(a2);
  *(_BYTE *)(a2 + 128) = v10;
  return result;
}

uint64_t WTF::dataLog<char [16],JSC::SlotVisitor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  uint64_t *v8[5];
  char v9;
  uint64_t *v10[5];
  char v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10[0] = (uint64_t *)&v7;
    v8[0] = (uint64_t *)v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "JIT Worklists:\n");
  v10[0] = (uint64_t *)(a1 + 8);
  v10[1] = (uint64_t *)", ";
  v10[2] = (uint64_t *)3;
  v10[3] = (uint64_t *)"";
  v10[4] = (uint64_t *)1;
  v11 = 0;
  v8[0] = (uint64_t *)(a1 + 40);
  v8[1] = (uint64_t *)", ";
  v8[2] = (uint64_t *)3;
  v8[3] = (uint64_t *)"";
  v8[4] = (uint64_t *)1;
  v9 = 0;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "Collector: [");
  WTF::PrintStream::printImpl<WTF::PointerListDump<JSC::MarkStackArray>,char [14],WTF::PointerListDump<JSC::MarkStackArray>,char [2]>(v5, v10, "], Mutator: [", v8, "]");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZN3JSC4Heap18addCoreConstraintsEvENK4__13clINS2_11SlotVisitorEEEDaRT_EUlPNS2_9CodeBlockEE_vJSB_EE4callESB_(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;

  if (!a2)
    return;
  v9 = *(_QWORD *)(a1 + 8);
  if ((a2 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 - 79) & 1) != 0 && !*(_QWORD *)(v9 + 168))
      return;
LABEL_10:
    JSC::SlotVisitor::appendSlow(v9, a2, 0, a4, a5, a6, a7, a8);
    return;
  }
  v10 = *(_DWORD *)(v9 + 132);
  if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) != v10)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000), v10, a3, a4, a5, a6, a7, a8);
  if (((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) == 0
    || *(_QWORD *)(v9 + 168))
  {
    goto LABEL_10;
  }
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_14,void,JSC::AbstractSlotVisitor &>::call(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  _QWORD *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  char v42;
  _QWORD *v43;
  WTF *v44;
  uint64_t v45;
  _BYTE v46[2055];
  char v47;
  char **v48;
  char *v49;

  v3 = *(_QWORD *)(a1 + 8);
  v39 = a2[128];
  v40[0] = a2;
  v40[1] = 66;
  v42 = 0;
  v4 = *((_QWORD *)a2 + 11);
  v41 = v4;
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1985D6834);
  }
  *((_QWORD *)a2 + 11) = v40;
  a2[128] = 16;
  v44 = (WTF *)v46;
  v45 = 256;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3590A90;
  v5[1] = &v44;
  v43 = v5;
  JSC::CodeBlockSet::iterateCurrentlyExecuting<WTF::Function<void ()(JSC::CodeBlock *)>>(*(_QWORD *)(v3 + 528), &v43, v6, v7, v8, v9, v10, v11);
  if (BYTE1(dword_1ECF4C240))
  {
    v19 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
    if (v19 != -1)
    {
      v49 = &v47;
      v48 = &v49;
      std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
    }
    v20 = JSC::theGlobalJITWorklist;
    v21 = (unsigned __int8 *)(*(_QWORD *)(JSC::theGlobalJITWorklist + 304) + 4);
    if (__ldaxr(v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_10;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_10:
    v23 = *(_QWORD **)(v20 + 144);
    if (v23)
    {
      v24 = *((unsigned int *)v23 - 1);
      v25 = &v23[3 * v24];
      if (*((_DWORD *)v23 - 3))
      {
        v26 = v23;
        if ((_DWORD)v24)
        {
          v27 = 24 * v24;
          v26 = v23;
          while (!*v26)
          {
            v26 += 3;
            v27 -= 24;
            if (!v27)
            {
              v26 = v25;
              goto LABEL_17;
            }
          }
        }
        goto LABEL_17;
      }
      v26 = &v23[3 * v24];
    }
    else
    {
      v26 = 0;
      LODWORD(v24) = 0;
    }
    v25 = &v23[3 * v24];
    if (!v23)
    {
      v28 = 0;
LABEL_18:
      if (v28 != v26)
      {
        v29 = v3 - 192;
        do
        {
          v30 = (_QWORD *)v26[2];
          if (v30[4] == v29)
            (*(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v30 + 72))(v30, a2, &v43);
          v31 = v26 + 3;
          v26 = v25;
          if (v31 != v25)
          {
            v26 = v31;
            while (!*v26)
            {
              v26 += 3;
              if (v26 == v25)
              {
                v26 = v25;
                break;
              }
            }
          }
        }
        while (v26 != v28);
      }
      v32 = __ldxr(v21);
      if (v32 == 1)
      {
        if (!__stlxr(0, v21))
          goto LABEL_33;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v13, v14, v15, v16, v17, v18);
      goto LABEL_33;
    }
LABEL_17:
    v28 = &v23[3 * *((unsigned int *)v23 - 1)];
    goto LABEL_18;
  }
LABEL_33:
  v33 = v43;
  v43 = 0;
  if (v33)
    (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  v34 = v44;
  if (HIDWORD(v45))
  {
    v35 = 8 * HIDWORD(v45);
    do
    {
      v36 = *(_QWORD *)v34;
      if ((*(unsigned int (**)(_BYTE *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)v34)
        && !*(_BYTE *)(v36 + 7))
      {
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 136))(a2, v36);
      }
      v34 = (WTF *)((char *)v34 + 8);
      v35 -= 8;
    }
    while (v35);
    v34 = v44;
  }
  if (v46 != (_BYTE *)v34 && v34 != 0)
  {
    v44 = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v34, v12, v13, v14, v15, v16, v17, v18);
  }
  a2[128] = v39;
  *(_QWORD *)(v40[0] + 88) = v41;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3JSC4Heap57iterateExecutingAndCompilingCodeBlocksWithoutHoldingLocksIZZNS3_18addCoreConstraintsEvENK4__14clINS2_19AbstractSlotVisitorEEEDaRT_EUlPNS2_9CodeBlockEE_S7_EEvRT0_RKS9_EUlSC_E_vJSC_EE4callESC_(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = *(_QWORD **)(a1 + 8);
  v4 = a2;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 == *((_DWORD *)result + 2))
    return WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CodeBlock *&>((uint64_t)result, (unint64_t)&v4);
  *(_QWORD *)(*result + 8 * v3) = a2;
  *((_DWORD *)result + 3) = v3 + 1;
  return result;
}

_QWORD *WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CodeBlock *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::CodeBlock *,256ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::CodeBlock *,256ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x101)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 256;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Heap::addCoreConstraints(void)::$_15,void,JSC::SlotVisitor &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  JSC::SlotVisitor *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  WTF *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  _QWORD *v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[2048];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a2 + 128) = 16;
  v26 = (WTF *)v28;
  v27 = 256;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3590AE0;
  v5[1] = &v26;
  v25 = v5;
  JSC::Heap::iterateExecutingAndCompilingCodeBlocks<JSC::SlotVisitor>(v3, a2, &v25, v6, v7, v8, v9, v10);
  v18 = v25;
  v25 = 0;
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  v19 = v26;
  if (HIDWORD(v27))
  {
    v20 = 8 * HIDWORD(v27);
    while (1)
    {
      v21 = *(unsigned __int8 **)v19;
      if ((*(_QWORD *)v19 & 8) != 0)
      {
        if ((*(v21 - 79) & 1) != 0)
          goto LABEL_8;
      }
      else if (*(_DWORD *)((unint64_t)v21 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a2 + 80)
                                                                                              + 240)
             && ((*(_QWORD *)(((unint64_t)v21 & 0xFFFFFFFFFFFFC000)
                            + 8 * (((unint64_t)v21 >> 10) & 0xF)
                            + 0x28) >> ((unint64_t)v21 >> 4)) & 1) != 0)
      {
LABEL_8:
        if (!v21[7])
        {
          *(_BYTE *)(a2 + 184) = 0;
          *(_QWORD *)(a2 + 176) = v21;
          v21[7] = 0;
          __dmb(0xBu);
          v22 = v21[5];
          switch(v22)
          {
            case 24:
              JSC::JSFinalObject::visitChildren((JSC::JSFinalObject *)v21, (JSC::JSCell *)a2, v12, v13, v14, v15, v16, v17);
              break;
            case 2:
              JSC::JSString::visitChildren((JSC::JSString *)v21, (JSC::JSCell *)a2, v12, v13, v14, v15, v16, v17);
              break;
            case 36:
              JSC::JSObject::visitChildren((JSC::JSObject *)v21, (JSC::JSCell *)a2, v12, v13, v14, v15, v16, v17);
              break;
            default:
              (*(void (**)(unsigned __int8 *, uint64_t))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0xD0))(v21, a2);
              break;
          }
          v23 = *(_QWORD *)(a2 + 168);
          if (v23 && *(_BYTE *)(a2 + 184))
            (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v23 + 16))(v23, v21);
          *(_QWORD *)(a2 + 176) = 0;
        }
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
      if (!v20)
      {
        v19 = v26;
        break;
      }
    }
  }
  if (v28 != (_BYTE *)v19 && v19 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree((unint64_t)v19, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  }
  *(_BYTE *)(a2 + 128) = v4;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3JSC4Heap57iterateExecutingAndCompilingCodeBlocksWithoutHoldingLocksIZZNS3_18addCoreConstraintsEvENK4__15clINS2_11SlotVisitorEEEDaRT_EUlPNS2_9CodeBlockEE_S7_EEvRT0_RKS9_EUlSC_E_vJSC_EE4callESC_(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = *(_QWORD **)(a1 + 8);
  v4 = a2;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 == *((_DWORD *)result + 2))
    return WTF::Vector<JSC::CodeBlock *,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CodeBlock *&>((uint64_t)result, (unint64_t)&v4);
  *(_QWORD *)(*result + 8 * v3) = a2;
  *((_DWORD *)result + 3) = v3 + 1;
  return result;
}

void WTF::Detail::CallableWrapper<JSC::Heap::notifyIsSafeToCollect(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unsigned __int8 *v12;
  double v13;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  long double v31;
  double v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v42;
  int v43;
  double v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  unsigned __int8 *v49;
  unsigned __int8 **v50;
  uint64_t *v51;

  v1 = *(_QWORD *)(a1 + 8);
  v8 = mach_absolute_time();
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    v49 = (unsigned __int8 *)&v44;
    v48[0] = &v49;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v9) = dword_1ECF4400C;
  v11 = (double)(v8 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v9 * 1000000000.0);
  v12 = (unsigned __int8 *)(v1 + 1126);
  v13 = *(double *)&qword_1ECF4C350 / 1000.0;
  do
  {
    while (1)
    {
      if (__ldaxr(v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, v12))
      {
        goto LABEL_8;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v1 + 1126);
LABEL_8:
      v15 = (unsigned __int8 *)(*(_QWORD *)(v1 + 1024) + 4);
      v49 = v15;
      LOBYTE(v50) = 1;
      if (__ldaxr(v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, v15))
      {
        goto LABEL_12;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_12:
      if (*(_QWORD *)(v1 + 936) == *(_QWORD *)(v1 + 944))
      {
        WTF::Deque<JSC::GCRequest,0ul>::expandCapacityIfNeeded((uint64_t *)(v1 + 936));
        v23 = *(_QWORD *)(v1 + 952) + 16 * *(_QWORD *)(v1 + 944);
        *(_WORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        v24 = *(_QWORD *)(v1 + 944);
        if (v24 == *(unsigned int *)(v1 + 960) - 1)
          v25 = 0;
        else
          v25 = v24 + 1;
        *(_QWORD *)(v1 + 944) = v25;
        ++*(_QWORD *)(v1 + 992);
        WTF::AutomaticThreadCondition::notifyOne(*(_QWORD *)(v1 + 1032), (uint64_t)&v49, v17, v18, v19, v20, v21, v22);
      }
      if ((_BYTE)v50)
      {
        v26 = v49;
        v27 = __ldxr(v49);
        if (v27 != 1)
        {
          __clrex();
LABEL_22:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v26, 0, v2, v3, v4, v5, v6, v7);
          goto LABEL_23;
        }
        if (__stlxr(0, v49))
          goto LABEL_22;
      }
LABEL_23:
      v28 = mach_absolute_time();
      v30 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v30 != -1)
      {
        v49 = (unsigned __int8 *)&v44;
        v48[0] = &v49;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v29) = dword_1ECF4400C;
      v31 = (double)(v28 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v29 * 1000000000.0) - v11;
      v32 = v13 + v11 + v31 - fmod(v31, v13);
      if (v32 > 0.0)
      {
        v33 = fabs(v32) == INFINITY;
        while (1)
        {
          if (!v33)
          {
            v34 = mach_absolute_time();
            v36 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
            if (v36 != -1)
            {
              v49 = (unsigned __int8 *)&v44;
              v48[0] = &v49;
              std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
            }
            LODWORD(v35) = dword_1ECF4400C;
            if (v32 <= (double)(v34 * WTF::machTimebaseInfo(void)::timebaseInfo)
                      / ((double)v35
                       * 1000000000.0))
              goto LABEL_46;
          }
          if (*(_BYTE *)(v1 + 1007))
          {
            v42 = 1;
            goto LABEL_48;
          }
          v44 = v32;
          v45 = 1;
          v37 = mach_absolute_time();
          v39 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
          if (v39 != -1)
          {
            v49 = (unsigned __int8 *)&v47;
            v48[0] = &v49;
            std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
          }
          if (v45 != 1)
          {
            __break(0xC471u);
            return;
          }
          LODWORD(v38) = dword_1ECF4400C;
          if (v44 >= (double)(v37 * WTF::machTimebaseInfo(void)::timebaseInfo)
                    / ((double)v38
                     * 1000000000.0))
          {
            v46 = v1 + 1126;
            v47 = v1 + 1127;
            v49 = (unsigned __int8 *)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
            v50 = &v49;
            v51 = &v47;
            v48[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
            v48[1] = v48;
            v48[2] = &v46;
            WTF::ParkingLot::parkConditionallyImpl(v1 + 1127, (uint64_t)&v49, (uint64_t)v48, (WTF::TimeWithDynamicClockType *)&v44);
            goto LABEL_42;
          }
          v40 = __ldxr(v12);
          if (v40 != 1)
            break;
          if (__stlxr(0, v12))
            goto LABEL_41;
LABEL_42:
          if (__ldaxr(v12))
          {
            __clrex();
LABEL_45:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v1 + 1126);
            continue;
          }
          if (__stxr(1u, v12))
            goto LABEL_45;
        }
        __clrex();
LABEL_41:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v1 + 1126), 0, v2, v3, v4, v5, v6, v7);
        goto LABEL_42;
      }
LABEL_46:
      v42 = *(unsigned __int8 *)(v1 + 1007);
LABEL_48:
      v43 = __ldxr(v12);
      if (v43 != 1)
        break;
      if (__stlxr(0, v12))
        goto LABEL_53;
      if (v42)
        return;
    }
    __clrex();
LABEL_53:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v1 + 1126), 0, v2, v3, v4, v5, v6, v7);
  }
  while (!v42);
}

__n128 WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::HeapFinalizerCallback const&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::HeapFinalizerCallback,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = 16 * v5;
        v15 = (__int128 *)v4;
        do
        {
          v16 = *v15++;
          *v6++ = v16;
          v14 -= 16;
        }
        while (v14);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::dataLog<char [26],WTF::RawPointer,char [16],char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "\nGC Verifier: ERROR cell ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " was not marked");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::HeapCellType::HeapCellType(uint64_t result, __int16 a2)
{
  *(_QWORD *)result = &off_1E3590B30;
  *(_WORD *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_1E3590B30;
  *(_WORD *)(result + 8) = a2;
  return result;
}

void JSC::HeapCellType::~HeapCellType(JSC::HeapCellType *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::HeapCellType::finishSweep(JSC::HeapCellType *this, JSC::MarkedBlock::Handle *a2, JSC::FreeList *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  signed int v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned __int8 *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  signed int v52;
  int v53;
  int v54;
  int v55;
  _BOOL4 v56;
  int v57;
  int v58;
  JSC::FreeList *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unsigned __int8 *v75;
  int v76;
  JSC::FreeList *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _DWORD *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned __int8 *v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int16 *v114;
  _DWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  unsigned __int16 *v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL8 isEmpty;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  _DWORD *v149;
  uint64_t v150;
  unsigned __int16 *v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int16 *v154;
  unsigned int v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  unsigned __int16 *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  JSC::FreeList *v187;
  uint64_t v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned __int16 *v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  _BOOL4 v211;
  char v212;
  size_t __len;
  char v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  int v219;
  uint64_t v221;
  char v222;
  char *v223;
  uint64_t *v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t *v231;
  char **v232;
  char *v233;
  char *v234;
  uint64_t *v235;
  JSC::MarkedBlock::Handle *v236;
  unint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD v251[256];
  unint64_t v252;

  v10 = *((unsigned __int8 *)a2 + 8);
  v11 = *((_QWORD *)a2 + 10);
  v12 = *((_QWORD *)a2 + 11);
  if (*(_BYTE *)(v11 + 445))
    v13 = 2;
  else
    v13 = 1;
  if ((_DWORD)v10 == 1)
    v14 = v13;
  else
    v14 = 0;
  v15 = *((_QWORD *)a2 + 3);
  LODWORD(v16) = ~*(_DWORD *)(*(_QWORD *)(v15 + 32) + 40 * (*((_DWORD *)a2 + 3) >> 5) + 4) >> *((_DWORD *)a2 + 3);
  v17 = *(_QWORD *)(v12 + 8);
  LODWORD(v18) = *(_DWORD *)(v17 + 436);
  v19 = *(_DWORD *)(v11 + 432);
  v20 = *(_DWORD *)(v12 + 32);
  v21 = *(_DWORD *)(v12 + 36);
  LODWORD(v22) = v20 == v19;
  v221 = v12;
  if (*(_BYTE *)(v11 + 445))
  {
    v54 = *(unsigned __int8 *)(v17 + 347);
    v55 = v20 + 1;
    if (v20 == -1)
      v55 = 2;
    v56 = v55 == v19;
    if (v20)
      v57 = v56;
    else
      v57 = 1;
    if (v54 == 1)
      v58 = v57;
    else
      v58 = 0;
    if (v20 == v19)
      LODWORD(v22) = 1;
    else
      LODWORD(v22) = v58;
    LOBYTE(v23) = byte_1ECF4C400 == 0;
LABEL_50:
    v59 = a3;
    if (!a3 && (_DWORD)v10 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985D8618);
    }
    v60 = *(_DWORD *)a2;
    v33 = (16 * *(_DWORD *)a2);
    v61 = *(_QWORD *)(v11 + 168);
    v62 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
    v63 = (v61 >> 26) ^ (v62 >> 17) ^ v61 ^ v62;
    *(_QWORD *)(v11 + 160) = v61;
    *(_QWORD *)(v11 + 168) = v63;
    v208 = v63 + v61;
    if (v21 != (_DWORD)v18 && (v16 & 1) == 0 && BYTE1(qword_1ECF4C414) != 0)
    {
      v85 = v10;
      if ((_DWORD)v22)
      {
        isEmpty = WTF::BitSet<1024ul,unsigned long long>::isEmpty((_QWORD *)(v12 + 40));
        v59 = a3;
        if (!isEmpty)
        {
          v132 = WTF::dataFile((WTF *)isEmpty);
          v251[0] = v12;
          v251[1] = v12;
          v251[2] = a2;
          v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 32))(v132);
          JSC::MarkedBlock::Handle::specializedSweep<false,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)0,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)0,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(WTF::PrintStream &)#1}::operator()((uint64_t)v251, v133);
        }
      }
      v86 = v12 + 0x4000;
      v87 = *((unsigned int *)a2 + 1);
      v88 = (_QWORD *)(v12 + 16 * v87);
      v89 = 0x4000 - 16 * v87;
      if (v89 >= 0x3ED1)
      {
        __break(0xC471u);
        JUMPOUT(0x1985D8670);
      }
      v90 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
      if (__ldaxr(v90))
      {
        __clrex();
      }
      else if (!__stxr(1u, v90))
      {
LABEL_106:
        v92 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v93 = v92 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v93 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
        v94 = v92 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v94 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
        v95 = v92 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v95 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
        if (v59)
        {
          *((_BYTE *)a2 + 10) = 1;
        }
        else
        {
          v96 = v92 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v96 + 4) |= 1 << *((_DWORD *)a2 + 3);
        }
        v97 = __ldxr(v90);
        if (v97 == 1)
        {
          if (!__stlxr(0, v90))
            goto LABEL_113;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v90, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
        v59 = a3;
LABEL_113:
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
        {
          v98 = (unsigned int *)(v12 + 24);
          while (1)
          {
            v99 = *v98;
            if ((*v98 & 3) != 1)
              break;
            v100 = __ldxr(v98);
            if (v100 == v99)
            {
              if (!__stxr(v99 & 0xFFFFFFFE, v98))
                goto LABEL_241;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v98, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          v59 = a3;
        }
LABEL_241:
        if (v85 == 1 && v87 <= 0x3FF)
        {
          v149 = (_DWORD *)(v12 + 16 * v87);
          do
          {
            if (*v149)
            {
              (*(void (**)(_DWORD *))(16 * *(unsigned int *)(16 * (*v149 & 0xFFFFFFFE) + 0x4C) + 0x30))(v149);
              v59 = a3;
              *v149 = 0;
              v149[2] = 1;
            }
            v149 = (_DWORD *)((char *)v149 + v33);
          }
          while ((unint64_t)v149 < v86);
        }
        if (v59)
        {
          if ((v23 & 1) == 0 && (_DWORD)v87 != 1024)
          {
            memset_pattern16(v88, &unk_1991567C0, 0x4000 - 16 * v87);
            v59 = a3;
          }
          v88[1] = ((v89 << 32) | 1) ^ v208;
          *(_QWORD *)v59 = v88;
          *((_QWORD *)v59 + 1) = (char *)v88 + v89;
          *((_QWORD *)v59 + 2) = (char *)v88 + 1;
          *((_QWORD *)v59 + 3) = v208;
          *((_DWORD *)v59 + 8) = v89;
        }
        return;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v90);
      v59 = a3;
      goto LABEL_106;
    }
    v211 = a3 != 0;
    v212 = (char)v23;
    __len = (16 * v60);
    v252 = 0;
    LODWORD(v8) = 1024 - v60;
    v219 = v14;
    if (1024 - v60 >= *((_DWORD *)a2 + 1))
    {
      v216 = 0;
      v217 = 0;
      v215 = 0;
      v209 = 0;
      v210 = 0;
      v26 = v12 + 40;
      v23 = (uint64_t *)(v12 + 168);
      v66 = v212;
      if (!(_DWORD)__len)
        v66 = 1;
      v214 = v66;
      v218 = 1;
      while (1)
      {
        if ((v16 & 1) == 0)
          goto LABEL_399;
        if ((_DWORD)v22)
        {
          if (v8 >= 0x400)
            goto LABEL_412;
          if (((*(_QWORD *)(v26 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) != 0)
            goto LABEL_403;
        }
        if (v21 != (_DWORD)v18)
          goto LABEL_399;
        if (v8 >= 0x400)
          goto LABEL_412;
        if (((*(unint64_t *)((char *)v23 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) != 0)
        {
LABEL_403:
          v218 = 0;
        }
        else
        {
LABEL_399:
          if ((_DWORD)v14 != 2)
          {
            v33 = v12 + 16 * (int)v8;
            if ((_DWORD)v10 == 1 && *(_DWORD *)v33)
            {
              v203 = v10;
              (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C)
                                              + 0x30))(v33);
              LODWORD(v14) = v219;
              v10 = v203;
              v59 = a3;
              v12 = v221;
              *(_DWORD *)v33 = 0;
              *(_DWORD *)(v33 + 8) = 1;
            }
            if (!v59)
              goto LABEL_391;
            if ((v214 & 1) == 0)
            {
LABEL_413:
              v207 = v10;
              memset_pattern16((void *)v33, &unk_1991567C0, __len);
              LODWORD(v14) = v219;
              v10 = v207;
              v59 = a3;
              v12 = v221;
            }
            v204 = *(unsigned int *)a2;
            if (v204 + (int)v8 < v215)
            {
              v205 = v12 + 16 * v215;
              v206 = (v216 << 36) | 1;
              if (v210)
                v206 = ((int)v210 - (int)v205) | (unint64_t)(v216 << 36);
              *(_QWORD *)(v205 + 8) = v206 ^ v208;
              v209 += 16 * v216;
              v210 = v12 + 16 * v215;
              v216 = 0;
            }
            v215 = (int)v8;
            v216 += v204;
            goto LABEL_391;
          }
          v252 = v217 + 1;
          if (v217 >= 0x400)
          {
LABEL_412:
            __break(1u);
            goto LABEL_413;
          }
          *((_WORD *)v251 + v217++) = v8;
        }
LABEL_391:
        LODWORD(v8) = v8 - *(_DWORD *)a2;
        if ((int)v8 < *((_DWORD *)a2 + 1))
          goto LABEL_124;
      }
    }
    v216 = 0;
    v217 = 0;
    v209 = 0;
    v210 = 0;
    v215 = 0;
    v218 = 1;
LABEL_124:
    if ((_DWORD)v14 == 2)
    {
      v121 = v210;
      v101 = v211;
    }
    else
    {
      v101 = v211;
      if (!v59)
      {
        v101 = 0;
        goto LABEL_127;
      }
      if (v216)
      {
        v121 = v12 + 16 * v215;
        if (v210)
          v124 = (int)v210 - (int)v121;
        else
          v124 = 1;
        *(_QWORD *)(v121 + 8) = (v124 | (v216 << 36)) ^ v208;
        v209 += 16 * v216;
      }
      else
      {
        v121 = v210;
      }
    }
    if (v59 && v21 == (_DWORD)v18)
    {
      *(_DWORD *)(v12 + 36) = 0;
      v101 = 1;
    }
    v210 = v121;
LABEL_127:
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v110 = (unsigned int *)(v12 + 24);
      while (1)
      {
        v111 = *v110;
        if ((*v110 & 3) != 1)
          break;
        v112 = __ldxr(v110);
        if (v112 == v111)
        {
          if (!__stxr(v111 & 0xFFFFFFFE, v110))
            goto LABEL_128;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v110, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      LODWORD(v14) = v219;
      v59 = a3;
      v12 = v221;
    }
LABEL_128:
    if ((_DWORD)v14 != 2)
    {
      if (!v101)
        goto LABEL_130;
      goto LABEL_162;
    }
    if (v217)
    {
      v113 = 2 * v217;
      if ((v101 & 1) != 0)
      {
        if ((_DWORD)__len)
          v125 = v212;
        else
          v125 = 1;
        v126 = (unsigned __int16 *)v251;
        do
        {
          v116 = *v126;
          v127 = (_DWORD *)(v12 + 16 * v116);
          if (*v127)
          {
            (*(void (**)(unint64_t))(16 * *(unsigned int *)(16 * (*v127 & 0xFFFFFFFE) + 0x4C)
                                                     + 0x30))(v12 + 16 * v116);
            v59 = a3;
            v12 = v221;
            *v127 = 0;
            v127[2] = 1;
          }
          if ((v125 & 1) == 0)
          {
            memset_pattern16(v127, &unk_1991567C0, __len);
            v59 = a3;
            v12 = v221;
          }
          v128 = *(unsigned int *)a2;
          if (v128 + v116 < v215)
          {
            v129 = v12 + 16 * v215;
            v130 = (v216 << 36) | 1;
            if (v210)
              v130 = ((int)v210 - (int)v129) | (unint64_t)(v216 << 36);
            *(_QWORD *)(v129 + 8) = v130 ^ v208;
            v209 += 16 * v216;
            v210 = v12 + 16 * v215;
            v216 = 0;
          }
          v215 = v116;
          v216 += v128;
          ++v126;
          v113 -= 2;
        }
        while (v113);
LABEL_152:
        if (!v101)
          goto LABEL_130;
        if (v216)
        {
          v117 = v12 + 16 * v116;
          if (v210)
            v118 = (int)v210 - (int)v117;
          else
            v118 = 1;
          v119 = v208;
          *(_QWORD *)(v117 + 8) = (v118 | (v216 << 36)) ^ v208;
          v120 = 16 * v216 + v209;
          goto LABEL_163;
        }
LABEL_162:
        v120 = v209;
        v117 = v210;
        v119 = v208;
        if (!v210)
        {
          v119 = 0;
          v120 = 0;
          *(_QWORD *)v59 = 0;
          *((_QWORD *)v59 + 1) = 0;
          v123 = 1;
          goto LABEL_164;
        }
LABEL_163:
        v122 = *(_QWORD *)(v117 + 8) ^ v119;
        *(_QWORD *)v59 = v117;
        *((_QWORD *)v59 + 1) = v117 + HIDWORD(v122);
        v123 = v117 + (int)v122;
LABEL_164:
        *((_QWORD *)v59 + 2) = v123;
        *((_QWORD *)v59 + 3) = v119;
        *((_DWORD *)v59 + 8) = v120;
LABEL_130:
        v102 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
        if (__ldaxr(v102))
        {
          __clrex();
        }
        else if (!__stxr(1u, v102))
        {
LABEL_133:
          v104 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v105 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v105 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
          v106 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v106 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
          v107 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v107 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
          if (!v101)
          {
            if ((v218 & 1) != 0)
              goto LABEL_135;
            goto LABEL_288;
          }
          goto LABEL_287;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v102);
        goto LABEL_133;
      }
      v114 = (unsigned __int16 *)v251;
      do
      {
        v115 = (_DWORD *)(v12 + 16 * *v114);
        if (*v115)
        {
          (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v115 & 0xFFFFFFFE) + 0x4C) + 0x30))(v12 + 16 * *v114);
          v59 = a3;
          v12 = v221;
          *v115 = 0;
          v115[2] = 1;
        }
        ++v114;
        v113 -= 2;
      }
      while (v113);
    }
    v116 = v215;
    goto LABEL_152;
  }
  v23 = (uint64_t *)(byte_1ECF4C400 == 0);
  if (byte_1ECF4C400)
    v24 = 1;
  else
    v24 = v21 == (_DWORD)v18;
  if (v24 || (_DWORD)v10 != 1)
    goto LABEL_50;
  if ((v16 & 1) == 0)
  {
    v8 = (unint64_t)&v230;
    if (!a3)
    {
      if (v20 == v19)
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>((int *)a2, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      }
      v250 = 1;
      v34 = *(_DWORD *)a2;
      v249 = (16 * *(_DWORD *)a2);
      v35 = *(_QWORD *)(v11 + 168);
      v36 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
      v37 = (v35 >> 26) ^ (v36 >> 17) ^ v35 ^ v36;
      *(_QWORD *)(v11 + 160) = v35;
      *(_QWORD *)(v11 + 168) = v37;
      v247 = v11;
      v248 = v37 + v35;
      v246 = &v222;
      if (BYTE1(qword_1ECF4C414))
      {
        v38 = *((unsigned int *)a2 + 1);
        v39 = (_DWORD *)(v12 + 16 * v38);
        if ((unint64_t)(16 * v38 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
        {
          __break(0xC471u);
          JUMPOUT(0x1985D8648);
        }
        v40 = (unsigned __int8 *)(v15 + 56);
        if (__ldaxr((unsigned __int8 *)(v15 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v40))
        {
LABEL_29:
          v42 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v43 = v42 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v43 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
          v44 = v42 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v44 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
          v45 = v42 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v45 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
          if (HIDWORD(v250) == 1)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v46 = v42 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v46 + 4) |= 1 << *((_DWORD *)a2 + 3);
          }
          v47 = __ldxr(v40);
          if (v47 == 1)
          {
            if (!__stlxr(0, v40))
              goto LABEL_66;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v40, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_66:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v142 = (unsigned int *)(v12 + 24);
            while (1)
            {
              v143 = *v142;
              if ((*v142 & 3) != 1)
                break;
              v144 = __ldxr(v142);
              if (v144 == v143)
              {
                if (!__stxr(v143 & 0xFFFFFFFE, v142))
                  goto LABEL_67;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v142, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
LABEL_67:
          if (v38 <= 0x3FF && (_DWORD)v250)
          {
            do
            {
              if (*v39)
              {
                (*(void (**)(_DWORD *))(16 * *(unsigned int *)(16 * (*v39 & 0xFFFFFFFE) + 0x4C) + 0x30))(v39);
                *v39 = 0;
                v39[2] = 1;
              }
              v39 = (_DWORD *)((char *)v39 + v249);
            }
            while ((unint64_t)v39 < v12 + 0x4000);
          }
          return;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 56);
        goto LABEL_29;
      }
      v16 = 0;
      v244 = 0;
      v245 = 0;
      v243 = 0;
      v252 = 0;
      v230 = v12;
      v231 = &v250;
      v232 = &v246;
      v233 = (char *)&v250 + 4;
      v234 = (char *)&v249 + 4;
      v235 = &v249;
      v236 = a2;
      v237 = &v242;
      v238 = &v243;
      v239 = &v244;
      v240 = (uint64_t *)&v248;
      v241 = &v245;
      v242 = 0;
      v223 = (char *)&v250 + 4;
      v224 = &v243;
      v225 = v12;
      v226 = &v242;
      v227 = &v244;
      v228 = (uint64_t *)&v248;
      v229 = &v245;
      v33 = (1024 - v34);
      v134 = *((_DWORD *)a2 + 1);
      if ((int)v33 < v134)
        goto LABEL_189;
      v16 = 0;
      v22 = v251;
      v26 = (uint64_t)&v230;
      do
      {
        if ((_DWORD)v250 == 2)
        {
          v252 = v16 + 1;
          if (v16 >= 0x400)
            goto LABEL_412;
          *((_WORD *)v251 + v16++) = v33;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v230, (int)v33);
          v34 = *(_DWORD *)a2;
          v134 = *((_DWORD *)a2 + 1);
        }
        v33 = (v33 - v34);
      }
      while ((int)v33 >= v134);
      if ((_DWORD)v250 != 2)
LABEL_189:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v223);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v135 = (unsigned int *)(v12 + 24);
        while (1)
        {
          v136 = *v135;
          if ((*v135 & 3) != 1)
            break;
          v137 = __ldxr(v135);
          if (v137 == v136)
          {
            if (!__stxr(v136 & 0xFFFFFFFE, v135))
              goto LABEL_256;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v135, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
LABEL_256:
      if ((_DWORD)v250 == 2)
      {
        if (v16)
        {
          v150 = 2 * v16;
          v151 = (unsigned __int16 *)v251;
          do
          {
            v152 = *v151++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v230, v152);
            v150 -= 2;
          }
          while (v150);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v223);
      }
      if (HIDWORD(v250) == 1)
      {
        MEMORY[8] = 0;
        MEMORY[0] = 0;
        MEMORY[0x10] = 1;
        MEMORY[0x18] = 0;
        MEMORY[0x20] = 0;
      }
LABEL_273:
      v102 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
      if (__ldaxr(v102))
      {
        __clrex();
      }
      else if (!__stxr(1u, v102))
      {
        goto LABEL_276;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v102);
LABEL_276:
      v162 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v163 = v162 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v163 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
      v164 = v162 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v164 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
      v165 = v162 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v165 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
      if (HIDWORD(v250) == 1)
        goto LABEL_287;
      v108 = v162 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      v109 = 1 << *((_DWORD *)a2 + 3);
LABEL_136:
      *(_DWORD *)(v108 + 4) |= v109;
LABEL_288:
      v166 = __ldxr(v102);
      if (v166 == 1)
      {
        if (!__stlxr(0, v102))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v102, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    if (v20 == v19)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>((unsigned int *)a2, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    v250 = 0x100000001;
    v67 = *(_DWORD *)a2;
    v249 = (16 * *(_DWORD *)a2);
    v68 = *(_QWORD *)(v11 + 168);
    v69 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
    v70 = (v68 >> 26) ^ (v69 >> 17) ^ v68 ^ v69;
    *(_QWORD *)(v11 + 160) = v68;
    *(_QWORD *)(v11 + 168) = v70;
    v247 = v11;
    v248 = v70 + v68;
    v246 = &v222;
    if (!BYTE1(qword_1ECF4C414))
    {
      v16 = 0;
      v244 = 0;
      v245 = 0;
      v243 = 0;
      v252 = 0;
      v230 = v12;
      v231 = &v250;
      v232 = &v246;
      v233 = (char *)&v250 + 4;
      v234 = (char *)&v249 + 4;
      v235 = &v249;
      v236 = a2;
      v237 = &v242;
      v238 = &v243;
      v239 = &v244;
      v240 = (uint64_t *)&v248;
      v241 = &v245;
      v242 = 0;
      v223 = (char *)&v250 + 4;
      v224 = &v243;
      v225 = v12;
      v226 = &v242;
      v227 = &v244;
      v228 = (uint64_t *)&v248;
      v229 = &v245;
      v33 = (1024 - v67);
      v138 = *((_DWORD *)a2 + 1);
      if ((int)v33 < v138)
        goto LABEL_198;
      v16 = 0;
      v22 = v251;
      v26 = (uint64_t)&v230;
      do
      {
        if ((_DWORD)v250 == 2)
        {
          v252 = v16 + 1;
          if (v16 >= 0x400)
            goto LABEL_412;
          *((_WORD *)v251 + v16++) = v33;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v230, (int)v33);
          v67 = *(_DWORD *)a2;
          v138 = *((_DWORD *)a2 + 1);
        }
        v33 = (v33 - v67);
      }
      while ((int)v33 >= v138);
      if ((_DWORD)v250 != 2)
LABEL_198:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v223);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v139 = (unsigned int *)(v12 + 24);
        while (1)
        {
          v140 = *v139;
          if ((*v139 & 3) != 1)
            break;
          v141 = __ldxr(v139);
          if (v141 == v140)
          {
            if (!__stxr(v140 & 0xFFFFFFFE, v139))
              goto LABEL_264;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v139, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
LABEL_264:
      if ((_DWORD)v250 == 2)
      {
        if (v16)
        {
          v153 = 2 * v16;
          v154 = (unsigned __int16 *)v251;
          do
          {
            v155 = *v154++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v230, v155);
            v153 -= 2;
          }
          while (v153);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v223);
      }
      if (HIDWORD(v250) == 1)
      {
        v156 = v244;
        if (v244)
        {
          v157 = v245;
          v158 = v248;
          v159 = *(_QWORD *)(v244 + 8) ^ v248;
          *(_QWORD *)a3 = v244;
          *((_QWORD *)a3 + 1) = v156 + HIDWORD(v159);
          v160 = v156 + (int)v159;
        }
        else
        {
          v158 = 0;
          v157 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v160 = 1;
        }
        *((_QWORD *)a3 + 2) = v160;
        *((_QWORD *)a3 + 3) = v158;
        *((_DWORD *)a3 + 8) = v157;
      }
      goto LABEL_273;
    }
    v71 = v12 + 0x4000;
    v72 = *((unsigned int *)a2 + 1);
    v73 = (_QWORD *)(v12 + 16 * v72);
    v74 = 0x4000 - 16 * v72;
    if (v74 >= 0x3ED1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985D865CLL);
    }
    v75 = (unsigned __int8 *)(v15 + 56);
    v76 = __ldaxr((unsigned __int8 *)(v15 + 56));
    v77 = a3;
    if (v76)
    {
      __clrex();
    }
    else if (!__stxr(1u, v75))
    {
LABEL_79:
      v78 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v79 = v78 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v79 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
      v80 = v78 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v80 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
      v81 = v78 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v81 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
      if (HIDWORD(v250) == 1)
      {
        *((_BYTE *)a2 + 10) = 1;
      }
      else
      {
        v145 = v78 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v145 + 4) |= 1 << *((_DWORD *)a2 + 3);
      }
      v82 = __ldxr(v75);
      if (v82 == 1)
      {
        if (!__stlxr(0, v75))
          goto LABEL_88;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v75, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      v77 = a3;
LABEL_88:
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v146 = (unsigned int *)(v12 + 24);
        while (1)
        {
          v147 = *v146;
          if ((*v146 & 3) != 1)
            break;
          v148 = __ldxr(v146);
          if (v148 == v147)
          {
            if (!__stxr(v147 & 0xFFFFFFFE, v146))
              goto LABEL_89;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v146, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
        v77 = a3;
      }
LABEL_89:
      if (v72 <= 0x3FF && (_DWORD)v250)
      {
        v83 = (_DWORD *)(v12 + 16 * v72);
        do
        {
          if (*v83)
          {
            (*(void (**)(_DWORD *))(16 * *(unsigned int *)(16 * (*v83 & 0xFFFFFFFE) + 0x4C) + 0x30))(v83);
            v77 = a3;
            *v83 = 0;
            v83[2] = 1;
          }
          v83 = (_DWORD *)((char *)v83 + v249);
        }
        while ((unint64_t)v83 < v71);
      }
      if (HIDWORD(v250) == 1)
      {
        if (HIDWORD(v249) == 1 && (_DWORD)v72 != 1024)
        {
          memset_pattern16(v73, &unk_1991567C0, 0x4000 - 16 * v72);
          v77 = a3;
        }
        v84 = v248;
        v73[1] = v248 ^ ((v74 << 32) | 1);
        *(_QWORD *)v77 = v73;
        *((_QWORD *)v77 + 1) = (char *)v73 + v74;
        *((_QWORD *)v77 + 2) = (char *)v73 + 1;
        *((_QWORD *)v77 + 3) = v84;
        *((_DWORD *)v77 + 8) = v74;
      }
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 56);
    v77 = a3;
    goto LABEL_79;
  }
  v23 = &v230;
  if (!a3)
  {
    if (v20 != v19)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>((int *)a2, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    v26 = 1;
    v250 = 1;
    v27 = *(_DWORD *)a2;
    v249 = (16 * *(_DWORD *)a2);
    v28 = *(_QWORD *)(v11 + 168);
    v29 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
    v30 = (v28 >> 26) ^ (v29 >> 17) ^ v28 ^ v29;
    *(_QWORD *)(v11 + 160) = v28;
    *(_QWORD *)(v11 + 168) = v30;
    v247 = v11;
    v248 = v30 + v28;
    v245 = 0;
    v246 = &v222;
    v243 = 0;
    v244 = 0;
    v252 = 0;
    v230 = v12;
    v231 = &v250;
    v232 = &v246;
    v233 = (char *)&v250 + 4;
    v234 = (char *)&v249 + 4;
    v235 = &v249;
    v236 = a2;
    v237 = &v242;
    v238 = &v243;
    v239 = &v244;
    v240 = (uint64_t *)&v248;
    v241 = &v245;
    v242 = 0;
    v223 = (char *)&v250 + 4;
    v224 = &v243;
    v225 = v12;
    v226 = &v242;
    v227 = &v244;
    v228 = (uint64_t *)&v248;
    v229 = &v245;
    v31 = 1024 - v27;
    if (v31 < *((_DWORD *)a2 + 1))
    {
      v16 = 0;
      LOBYTE(v33) = 1;
      goto LABEL_296;
    }
    v21 = 0;
    v16 = 0;
    v32 = 0;
    v8 = v12 + 40;
    v33 = 1;
    while (1)
    {
      if (v31 >= 0x400)
        goto LABEL_412;
      v18 = v31;
      if (((*(_QWORD *)(v8 + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) != 0)
      {
        v33 = 0;
      }
      else
      {
        if ((_DWORD)v250 == 2)
        {
          v252 = v16 + 1;
          if (v16 >= 0x400)
            goto LABEL_412;
          *((_WORD *)v251 + v16++) = v31;
          v23 = &v230;
        }
        else
        {
          v22 = (_DWORD *)(v12 + 16 * v31);
          if ((_DWORD)v250 && *v22)
          {
            v10 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                              * *(unsigned int *)(16 * (*v22 & 0xFFFFFFFE) + 0x4C)
                                                              + 0x30))(v12 + 16 * v31, v14);
            v12 = v221;
            *v22 = 0;
            v22[2] = 1;
            v21 = HIDWORD(v250);
            v32 = HIDWORD(v250);
          }
          if (v32 != 1)
            goto LABEL_325;
          if (HIDWORD(v249) == 1 && v249 >= 8)
            memset_pattern16(v22, &unk_1991567C0, v249 & 0xFFFFFFF8);
          v180 = *(unsigned int *)a2;
          v181 = v243;
          if (v180 + v18 < v242)
          {
            v182 = v221 + 16 * v242;
            if (v244)
              v183 = (int)v244 - (int)v182;
            else
              v183 = 1;
            *(_QWORD *)(v182 + 8) = (v183 | (v243 << 36)) ^ v248;
            v244 = v182;
            v245 += 16 * v181;
            v181 = 0;
          }
          v23 = &v230;
          v242 = v18;
          v243 = v181 + v180;
          v32 = 1;
        }
        v12 = v221;
      }
LABEL_325:
      v31 = v18 - *(_DWORD *)a2;
      if (v31 < *((_DWORD *)a2 + 1))
      {
        LODWORD(v26) = v250;
        if ((_DWORD)v250 != 2 && v21 == 1)
        {
          if (v243)
          {
            v177 = 16 * v243;
            v12 = v221;
            v178 = v221 + 16 * v242;
            v179 = ((int)v244 - (int)v178) | (unint64_t)(v243 << 36);
            if (!v244)
              v179 = (v243 << 36) | 1;
            *(_QWORD *)(v178 + 8) = v179 ^ v248;
            v244 = v178;
            v245 += v177;
          }
          else
          {
            v12 = v221;
          }
        }
LABEL_296:
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
        {
          v171 = (unsigned int *)(v12 + 24);
          while (1)
          {
            v172 = *v171;
            if ((*v171 & 3) != 1)
              break;
            v173 = __ldxr(v171);
            if (v173 == v172)
            {
              if (!__stxr(v172 & 0xFFFFFFFE, v171))
                goto LABEL_297;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v171, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          LODWORD(v26) = v250;
        }
LABEL_297:
        if ((_DWORD)v26 == 2)
        {
          if (v16)
          {
            v174 = 2 * v16;
            v175 = (unsigned __int16 *)v251;
            do
            {
              v176 = *v175++;
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v230, v176);
              v174 -= 2;
            }
            while (v174);
          }
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v223);
        }
        if (HIDWORD(v250) == 1)
        {
          MEMORY[8] = 0;
          MEMORY[0] = 0;
          MEMORY[0x10] = 1;
          MEMORY[0x18] = 0;
          MEMORY[0x20] = 0;
        }
LABEL_300:
        v102 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
        if (__ldaxr(v102))
        {
          __clrex();
          goto LABEL_302;
        }
        if (__stxr(1u, v102))
LABEL_302:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v102);
        v104 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v168 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v168 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
        v169 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v169 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
        v170 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v170 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
        if (HIDWORD(v250) != 1)
        {
          if ((v33 & 1) != 0)
          {
LABEL_135:
            v108 = v104 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            v109 = 1 << *((_DWORD *)a2 + 3);
            goto LABEL_136;
          }
          goto LABEL_288;
        }
LABEL_287:
        *((_BYTE *)a2 + 10) = 1;
        goto LABEL_288;
      }
    }
  }
  if (v20 == v19)
  {
    v21 = 1;
    v250 = 0x100000001;
    v48 = *(_DWORD *)a2;
    v249 = (16 * *(_DWORD *)a2);
    v49 = *(_QWORD *)(v11 + 168);
    v50 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
    v51 = (v49 >> 26) ^ (v50 >> 17) ^ v49 ^ v50;
    *(_QWORD *)(v11 + 160) = v49;
    *(_QWORD *)(v11 + 168) = v51;
    v247 = v11;
    v248 = v51 + v49;
    v245 = 0;
    v246 = &v222;
    v243 = 0;
    v244 = 0;
    v252 = 0;
    v230 = v12;
    v231 = &v250;
    v232 = &v246;
    v233 = (char *)&v250 + 4;
    v234 = (char *)&v249 + 4;
    v235 = &v249;
    v236 = a2;
    v237 = &v242;
    v238 = &v243;
    v239 = &v244;
    v240 = (uint64_t *)&v248;
    v241 = &v245;
    v242 = 0;
    v223 = (char *)&v250 + 4;
    v224 = &v243;
    v225 = v12;
    v226 = &v242;
    v227 = &v244;
    v228 = (uint64_t *)&v248;
    v229 = &v245;
    v52 = 1024 - v48;
    if (v52 < *((_DWORD *)a2 + 1))
    {
      v18 = 0;
      LOBYTE(v33) = 1;
    }
    else
    {
      v18 = 0;
      v26 = v12 + 40;
      LODWORD(v22) = 1;
      v53 = 1;
      v33 = 1;
      do
      {
        if (v52 >= 0x400)
          goto LABEL_412;
        v8 = v52;
        if (((*(_QWORD *)(v26 + (((unint64_t)v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v52) & 1) != 0)
        {
          v33 = 0;
        }
        else if ((_DWORD)v250 == 2)
        {
          v252 = v18 + 1;
          if (v18 >= 0x400)
            goto LABEL_412;
          *((_WORD *)v251 + v18++) = v52;
          v23 = &v230;
          v12 = v221;
        }
        else
        {
          v16 = v12 + 16 * v52;
          if ((_DWORD)v250 && *(_DWORD *)v16)
          {
            v10 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x30))(v12 + 16 * v52, v14);
            v12 = v221;
            *(_DWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 1;
            LODWORD(v22) = HIDWORD(v250);
            v53 = HIDWORD(v250);
          }
          if (v53 == 1)
          {
            if (HIDWORD(v249) == 1 && v249 >= 8)
            {
              memset_pattern16((void *)v16, &unk_1991567C0, v249 & 0xFFFFFFF8);
              v12 = v221;
            }
            v199 = *(unsigned int *)a2;
            v200 = v243;
            if (v199 + v8 < v242)
            {
              v201 = v12 + 16 * v242;
              if (v244)
                v202 = (int)v244 - (int)v201;
              else
                v202 = 1;
              *(_QWORD *)(v201 + 8) = (v202 | (v243 << 36)) ^ v248;
              v244 = v201;
              v245 += 16 * v200;
              v200 = 0;
            }
            v242 = v8;
            v243 = v200 + v199;
            v53 = 1;
          }
        }
        v52 = v8 - *(_DWORD *)a2;
      }
      while (v52 >= *((_DWORD *)a2 + 1));
      v21 = v250;
      if ((_DWORD)v250 != 2 && (_DWORD)v22 == 1 && v243)
      {
        v184 = 16 * v243;
        v185 = v12 + 16 * v242;
        v186 = ((int)v244 - (int)v185) | (unint64_t)(v243 << 36);
        if (!v244)
          v186 = (v243 << 36) | 1;
        *(_QWORD *)(v185 + 8) = v186 ^ v248;
        v244 = v185;
        v245 += v184;
      }
    }
    v187 = a3;
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v193 = (unsigned int *)(v12 + 24);
      while (1)
      {
        v194 = *v193;
        if ((*v193 & 3) != 1)
          break;
        v195 = __ldxr(v193);
        if (v195 == v194)
        {
          if (!__stxr(v194 & 0xFFFFFFFE, v193))
            goto LABEL_368;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v193, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      v21 = v250;
LABEL_368:
      v187 = a3;
    }
    if (v21 == 2)
    {
      if (v18)
      {
        v196 = 2 * v18;
        v197 = (unsigned __int16 *)v251;
        do
        {
          v198 = *v197++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v230, v198);
          v196 -= 2;
        }
        while (v196);
      }
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v223);
      v187 = a3;
    }
    if (HIDWORD(v250) == 1)
    {
      v188 = v244;
      if (v244)
      {
        v189 = v245;
        v190 = v248;
        v191 = *(_QWORD *)(v244 + 8) ^ v248;
        *(_QWORD *)v187 = v244;
        *((_QWORD *)v187 + 1) = v188 + HIDWORD(v191);
        v192 = v188 + (int)v191;
      }
      else
      {
        v190 = 0;
        v189 = 0;
        *(_QWORD *)v187 = 0;
        *((_QWORD *)v187 + 1) = 0;
        v192 = 1;
      }
      *((_QWORD *)v187 + 2) = v192;
      *((_QWORD *)v187 + 3) = v190;
      *((_DWORD *)v187 + 8) = v189;
    }
    goto LABEL_300;
  }
  JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>((unsigned int *)a2, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::HeapCellType::destroy(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return (*(uint64_t (**)(_DWORD *))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C) + 0x30))(a3);
}

void JSC::HeapProfiler::~HeapProfiler(JSC::HeapProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t *)*((_QWORD *)this + 1);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::HeapSnapshot::shrinkToFit(JSC::HeapSnapshot *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;

  while (1)
  {
    if (!*((_BYTE *)this + 40) || !*((_BYTE *)this + 41))
      goto LABEL_38;
    *((_QWORD *)this + 2) = 0;
    v9 = *(char **)this;
    v10 = *((unsigned int *)this + 3);
    v11 = (char *)(*(_QWORD *)this + 16 * v10);
    if ((_DWORD)v10)
    {
      LODWORD(v10) = 0;
      v12 = v11;
      v13 = v11;
      do
      {
        if ((*(_QWORD *)v9 & 1) != 0)
        {
          v14 = v9;
          if (v13 != (char *)(*(_QWORD *)this + 16 * *((unsigned int *)this + 3)))
          {
            if (v12 == v9)
            {
              v14 = v13;
            }
            else
            {
              if (v12 <= v13)
              {
                v19 = 0;
                v18 = (v9 - v12) >> 4;
                do
                {
                  *(_OWORD *)&v13[((v9 - v12) & 0xFFFFFFFFFFFFFFF0) - 16 + v19] = *(_OWORD *)&v9[v19 - 16];
                  v19 -= 16;
                }
                while (&v9[v19] != v12);
              }
              else
              {
                v15 = v13;
                v16 = v12;
                do
                {
                  v17 = *(_OWORD *)v16;
                  v16 += 16;
                  *(_OWORD *)v15 = v17;
                  v15 += 16;
                }
                while (v16 != v9);
                v18 = (v9 - v12) >> 4;
              }
              v14 = &v13[16 * v18];
            }
          }
          v12 = v9 + 16;
          LODWORD(v10) = v10 + 1;
          v13 = v14;
        }
        else
        {
          *((_QWORD *)this + 2) |= *(_QWORD *)v9;
        }
        v9 += 16;
      }
      while (v9 < v11);
      v9 = *(char **)this;
      v20 = *((unsigned int *)this + 3);
      v11 = v13;
    }
    else
    {
      v20 = 0;
      v12 = (char *)(*(_QWORD *)this + 16 * v10);
    }
    v21 = &v9[16 * v20];
    if (v12 != v21)
    {
      if (v12 <= v11)
      {
        v23 = &v11[((v21 - v12) & 0xFFFFFFFFFFFFFFF0) - 16];
        do
        {
          *(_OWORD *)v23 = *((_OWORD *)v21 - 1);
          v23 -= 16;
          v21 -= 16;
        }
        while (v21 != v12);
      }
      else
      {
        do
        {
          v22 = *(_OWORD *)v12;
          v12 += 16;
          *(_OWORD *)v11 = v22;
          v11 += 16;
        }
        while (v12 != v21);
      }
    }
    v25 = *((_DWORD *)this + 2);
    v24 = *((_DWORD *)this + 3);
    v26 = (v24 - v10);
    *((_DWORD *)this + 3) = v26;
    if (v25 > v26)
      break;
LABEL_37:
    *((_BYTE *)this + 41) = 0;
LABEL_38:
    this = (JSC::HeapSnapshot *)*((_QWORD *)this + 3);
    if (!this)
      return;
  }
  v27 = *(_QWORD *)this;
  if (v24 == (_DWORD)v10)
  {
LABEL_33:
    if (v27)
    {
      if (*(_QWORD *)this == v27)
      {
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
      }
      WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_37;
  }
  if (!(v26 >> 28))
  {
    v28 = 16 * v26;
    v29 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v26));
    *((_DWORD *)this + 2) = v26;
    *(_QWORD *)this = v29;
    if (v29 != (_OWORD *)v27)
    {
      v30 = (__int128 *)v27;
      do
      {
        v31 = *v30++;
        *v29++ = v31;
        v28 -= 16;
      }
      while (v28);
    }
    goto LABEL_33;
  }
  __break(0xC471u);
}

uint64_t JSC::HeapSnapshotBuilder::getNextObjectIdentifier(JSC::HeapSnapshotBuilder *this)
{
  return JSC::HeapSnapshotBuilder::nextAvailableObjectIdentifier++;
}

void JSC::HeapSnapshotBuilder::resetNextAvailableObjectIdentifier(JSC::HeapSnapshotBuilder *this)
{
  JSC::HeapSnapshotBuilder::nextAvailableObjectIdentifier = 1;
}

double JSC::HeapSnapshotBuilder::HeapSnapshotBuilder(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  *(_QWORD *)a1 = off_1E3590B60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = a3;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1E3590B60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = a3;
  return result;
}

void JSC::HeapSnapshotBuilder::~HeapSnapshotBuilder(JSC::HeapSnapshotBuilder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  if (*((_DWORD *)this + 22) == 1)
  {
    v9 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v9 + 16))
    {
      v10 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(unint64_t **)(v9 + 8);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            v14 = *(_QWORD *)v13;
            if (*(_QWORD *)v13)
            {
              *(_QWORD *)v13 = 0;
              *(_DWORD *)(v13 + 8) = 0;
              WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
        *(_DWORD *)(v9 + 20) = 0;
      }
      v15 = *(_QWORD *)(v9 + 8);
      if (v15)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  v16 = *((_QWORD *)this + 10);
  if (v16)
    WTF::fastFree(v16 - 16, a2, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = (WTF::StringImpl **)(v17 + 8);
      do
      {
        if (*(v19 - 1) != (WTF::StringImpl *)-1)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v17 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 8);
  if (v29)
    WTF::fastFree(v29 - 16, a2, a3, a4, a5, a6, a7, a8);
  v30 = *((_QWORD *)this + 7);
  if (v30)
    WTF::fastFree(v30 - 16, a2, a3, a4, a5, a6, a7, a8);
  v31 = *((_QWORD *)this + 5);
  if (v31)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v32)
  {
    v33 = *(_QWORD *)v32;
    if (*(_QWORD *)v32)
    {
      *(_QWORD *)v32 = 0;
      *(_DWORD *)(v32 + 8) = 0;
      WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::HeapSnapshotBuilder::~HeapSnapshotBuilder(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::HeapSnapshotBuilder::buildSnapshot(JSC::HeapSnapshotBuilder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __n128 *v48;
  unsigned __int32 v49;
  unint64_t v50;
  unint64_t n128_u64;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  char **v64;
  uint64_t v65;
  WTF **v66;
  WTF **v67;
  WTF *v68;
  unint64_t v69;
  unsigned __int8 *v70;
  int v71;
  WTF *v72;
  __int16 v73;
  unsigned int *v74;

  if (*((_DWORD *)this + 22) == 1)
  {
    v9 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v9 + 16))
    {
      v10 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(unint64_t **)(v9 + 8);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            v14 = *(_QWORD *)v13;
            if (*(_QWORD *)v13)
            {
              *(_QWORD *)v13 = 0;
              *(_DWORD *)(v13 + 8) = 0;
              WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
        *(_DWORD *)(v9 + 20) = 0;
      }
      v15 = *(_QWORD *)(v9 + 8);
      if (v15)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  v16 = **((_QWORD **)this + 1);
  JSC::Heap::preventCollection(v16 + 192, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 1);
  v18 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v18)
    v19 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v18 - 8);
  else
    v19 = 0;
  v20 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = 0;
  *(_WORD *)(v20 + 40) = 0;
  v28 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v20;
  if (v28)
  {
    v29 = *(_QWORD *)v28;
    if (*(_QWORD *)v28)
    {
      *(_QWORD *)v28 = 0;
      *(_DWORD *)(v28 + 8) = 0;
      WTF::fastFree(v29, v21, v22, v23, v24, v25, v26, v27);
    }
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  }
  v30 = (uint64_t *)*((_QWORD *)this + 1);
  v30[3] = (uint64_t)this;
  v31 = *v30;
  *(_QWORD *)(v31 + 93128) = this;
  v73 = 257;
  v74 = 0;
  JSC::Heap::collectNow((JSC::Heap *)(v31 + 192), (void *)1, (uint64_t)&v73, v23, v24, v25, v26, v27);
  v39 = v74;
  v74 = 0;
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  v43 = (_QWORD *)*((_QWORD *)this + 1);
  v43[3] = 0;
  *(_QWORD *)(*v43 + 93128) = 0;
  v44 = (unsigned __int8 *)this + 16;
  LODWORD(v43) = __ldaxr((unsigned __int8 *)this + 16);
  if ((_DWORD)v43)
  {
    __clrex();
  }
  else if (!__stxr(1u, v44))
  {
    goto LABEL_29;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
LABEL_29:
  v45 = *((_QWORD *)this + 10);
  if (v45)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::fastFree(v45 - 16, v32, v33, v34, v35, v36, v37, v38);
  }
  v46 = *((_QWORD *)this + 3);
  *(_BYTE *)(v46 + 40) = 1;
  v47 = *(unsigned int *)(v46 + 12);
  v48 = *(__n128 **)v46;
  if ((_DWORD)v47)
  {
    v49 = v48[v47 - 1].n128_u32[2];
    *(_DWORD *)(v46 + 32) = v48->n128_u32[2];
    *(_DWORD *)(v46 + 36) = v49;
    v50 = v47;
  }
  else
  {
    v50 = 0;
  }
  n128_u64 = (unint64_t)v48[v50].n128_u64;
  v52 = 126 - 2 * __clz(v50);
  if ((_DWORD)v47)
    v53 = v52;
  else
    v53 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *,false>(v48, n128_u64, v53, 1);
  v61 = __ldxr(v44);
  if (v61 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v44))
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 16, 0, v55, v56, v57, v58, v59, v60);
  v62 = *((_QWORD *)this + 1);
  v63 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  v72 = v63;
  v64 = (char **)(v62 + 8);
  v65 = *(unsigned int *)(v62 + 20);
  if ((_DWORD)v65 == *(_DWORD *)(v62 + 16))
  {
    v66 = (WTF **)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v64, v65 + 1, (unint64_t)&v72);
    v65 = *(unsigned int *)(v62 + 20);
    v67 = (WTF **)(*(_QWORD *)(v62 + 8) + 8 * v65);
    v63 = *v66;
  }
  else
  {
    v67 = (WTF **)&(*v64)[8 * v65];
    v66 = &v72;
  }
  *v66 = 0;
  *v67 = v63;
  *(_DWORD *)(v62 + 20) = v65 + 1;
  v68 = v72;
  v72 = 0;
  if (v68)
  {
    v69 = *(_QWORD *)v68;
    if (*(_QWORD *)v68)
    {
      *(_QWORD *)v68 = 0;
      *((_DWORD *)v68 + 2) = 0;
      WTF::fastFree(v69, v54, v55, v56, v57, v58, v59, v60);
    }
    WTF::fastFree((unint64_t)v68, v54, v55, v56, v57, v58, v59, v60);
  }
  if (*(_BYTE *)(v16 + 753))
  {
    v70 = (unsigned __int8 *)(v16 + 1318);
    v71 = __ldxr((unsigned __int8 *)(v16 + 1318));
    if (v71 == 1)
    {
      if (!__stlxr(0, v70))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v70, 0, v55, v56, v57, v58, v59, v60);
  }
}

void JSC::HeapSnapshotBuilder::analyzeNode(JSC::HeapSnapshotBuilder *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  JSC::JSCell *v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  _BYTE v29[24];
  unint64_t v30;

  v30 = a2;
  v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  if (v9)
  {
    if (a2)
    {
      while (1)
      {
        if ((a2 & ~*(_QWORD *)(v9 + 16)) == 0)
        {
          v10 = *(_DWORD *)(v9 + 12);
          if (v10)
            break;
        }
LABEL_12:
        v9 = *(_QWORD *)(v9 + 24);
        if (!v9)
          goto LABEL_13;
      }
      v11 = 0;
      v12 = *(_DWORD *)(v9 + 12);
      while (1)
      {
        v13 = v11 + ((v12 - v11) >> 1);
        if (v10 <= v13)
          break;
        v14 = *(JSC::JSCell **)(*(_QWORD *)v9 + 16 * (v11 + ((v12 - v11) >> 1)));
        if (v14 == (JSC::JSCell *)a2)
          return;
        if ((unint64_t)v14 <= a2)
          v11 = v13 + 1;
        else
          v12 = v11 + ((v12 - v11) >> 1);
        if (v11 == v12)
          goto LABEL_12;
      }
      __break(0xC471u);
      return;
    }
    do
      v9 = *(_QWORD *)(v9 + 24);
    while (v9);
  }
LABEL_13:
  v15 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
    goto LABEL_17;
  }
  if (__stxr(1u, v15))
    goto LABEL_16;
LABEL_17:
  WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add((uint64_t *)this + 10, (uint64_t *)&v30, a4, a5, a6, a7, a8, (uint64_t)v29);
  if (v29[16])
  {
    v23 = *((_QWORD *)this + 3);
    v24 = v30;
    v25 = JSC::HeapSnapshotBuilder::nextAvailableObjectIdentifier++;
    *(_QWORD *)&v28 = v30;
    DWORD2(v28) = v25;
    v26 = *(unsigned int *)(v23 + 12);
    if ((_DWORD)v26 == *(_DWORD *)(v23 + 8))
    {
      *(_OWORD *)(*(_QWORD *)v23 + 16 * *(unsigned int *)(v23 + 12)) = *(_OWORD *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v26 + 1, (unint64_t)&v28);
      v24 = v28;
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)v23 + 16 * v26) = v28;
    }
    ++*(_DWORD *)(v23 + 12);
    *(_QWORD *)(v23 + 16) |= v24;
  }
  v27 = __ldxr(v15);
  if (v27 == 1)
  {
    if (!__stlxr(0, v15))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, v17, v18, v19, v20, v21, v22);
}

uint64_t JSC::HeapSnapshotBuilder::previousSnapshotHasNodeForCell(JSC::HeapSnapshotBuilder *this, unint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  JSC::JSCell *v8;
  uint64_t result;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  if (!v3)
    return 0;
  if (a2)
  {
    while (1)
    {
      if ((a2 & ~*(_QWORD *)(v3 + 16)) == 0)
      {
        v4 = *(_DWORD *)(v3 + 12);
        if (v4)
          break;
      }
LABEL_12:
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 0;
    }
    v5 = 0;
    v6 = *(_DWORD *)(v3 + 12);
    while (1)
    {
      v7 = v5 + ((v6 - v5) >> 1);
      if (v4 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1985D981CLL);
      }
      v8 = *(JSC::JSCell **)(*(_QWORD *)v3 + 16 * (v5 + ((v6 - v5) >> 1)));
      if (v8 == (JSC::JSCell *)a2)
        break;
      if ((unint64_t)v8 <= a2)
        v5 = v7 + 1;
      else
        v6 = v5 + ((v6 - v5) >> 1);
      if (v5 == v6)
        goto LABEL_12;
    }
    *a3 = *(_DWORD *)(*(_QWORD *)v3 + 16 * v7 + 8);
    return 1;
  }
  else
  {
    result = 0;
    do
      v3 = *(_QWORD *)(v3 + 24);
    while (v3);
  }
  return result;
}

void JSC::HeapSnapshotBuilder::analyzeEdge(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  if ((_OWORD *)a2 == a3)
    return;
  v42 = v8;
  v43 = v9;
  v10 = a4;
  v11 = a3;
  v14 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
    goto LABEL_6;
  }
  if (__stxr(1u, v14))
    goto LABEL_5;
LABEL_6:
  if (!a2 && *(_DWORD *)(a1 + 88) == 1)
  {
    if (!v10 && HIBYTE(dword_1ECF4C358))
      WTFLogAlways("Cell %p is a root but no root marking reason was supplied", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)v11);
    v17 = (uint64_t *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 56);
    if (v16
      || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::HeapSnapshotBuilder::RootData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 56), 8u, 0), (v16 = *v17) != 0))
    {
      v18 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    a3 = (_OWORD *)(v16 + 32 * v22);
    v23 = *(_OWORD **)a3;
    if (*(_QWORD *)a3)
    {
      v24 = 0;
      v25 = 1;
      while (v23 != v11)
      {
        if (v23 == (_OWORD *)-1)
          v24 = a3;
        v22 = ((_DWORD)v22 + v25) & v18;
        a3 = (_OWORD *)(v16 + 32 * v22);
        v23 = *(_OWORD **)a3;
        ++v25;
        if (!*(_QWORD *)a3)
        {
          if (v24)
          {
            *v24 = 0u;
            v24[1] = 0u;
            --*(_DWORD *)(*v17 - 16);
            a3 = v24;
          }
          goto LABEL_22;
        }
      }
      goto LABEL_35;
    }
LABEL_22:
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = v11;
    *((_BYTE *)a3 + 24) = 0;
    v26 = *v17;
    if (*v17)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *v17;
    if (*v17)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_35;
    }
    else
    {
      if (3 * v31 > 4 * v30)
      {
LABEL_35:
        *((_BYTE *)a3 + 24) = v10;
        goto LABEL_36;
      }
      if (!(_DWORD)v31)
      {
        v32 = 8;
        goto LABEL_34;
      }
    }
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_34:
    a3 = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::HeapSnapshotBuilder::RootData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 56), v32, (uint64_t)a3);
    goto LABEL_35;
  }
LABEL_36:
  v33 = (_QWORD *)(a1 + 40);
  BYTE8(v41) = 0;
  *(_QWORD *)&v40 = a2;
  *((_QWORD *)&v40 + 1) = v11;
  v34 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v34 == *(_DWORD *)(a1 + 48))
  {
    v35 = (__int128 *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v40);
    v36 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 32 * *(unsigned int *)(a1 + 52));
    v37 = *v35;
    v38 = v35[1];
  }
  else
  {
    v36 = (_OWORD *)(*v33 + 32 * v34);
    v37 = v40;
    v38 = v41;
  }
  *v36 = v37;
  v36[1] = v38;
  ++*(_DWORD *)(a1 + 52);
  v39 = __ldxr(v14);
  if (v39 == 1)
  {
    if (!__stlxr(0, v14))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::HeapSnapshotBuilder::analyzePropertyNameEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;

  v12 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
LABEL_5:
  v14 = (_QWORD *)(a1 + 40);
  BYTE8(v22) = 1;
  *(_QWORD *)&v21 = a2;
  *((_QWORD *)&v21 + 1) = a3;
  *(_QWORD *)&v22 = a4;
  v15 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 48))
  {
    v16 = (__int128 *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v21);
    v17 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 32 * *(unsigned int *)(a1 + 52));
    v18 = *v16;
    v19 = v16[1];
  }
  else
  {
    v17 = (_OWORD *)(*v14 + 32 * v15);
    v18 = v21;
    v19 = v22;
  }
  *v17 = v18;
  v17[1] = v19;
  ++*(_DWORD *)(a1 + 52);
  v20 = __ldxr(v12);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v12))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::HeapSnapshotBuilder::analyzeVariableNameEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;

  v12 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
LABEL_5:
  v14 = (_QWORD *)(a1 + 40);
  BYTE8(v22) = 3;
  *(_QWORD *)&v21 = a2;
  *((_QWORD *)&v21 + 1) = a3;
  *(_QWORD *)&v22 = a4;
  v15 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 48))
  {
    v16 = (__int128 *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v21);
    v17 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 32 * *(unsigned int *)(a1 + 52));
    v18 = *v16;
    v19 = v16[1];
  }
  else
  {
    v17 = (_OWORD *)(*v14 + 32 * v15);
    v18 = v21;
    v19 = v22;
  }
  *v17 = v18;
  v17[1] = v19;
  ++*(_DWORD *)(a1 + 52);
  v20 = __ldxr(v12);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v12))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::HeapSnapshotBuilder::analyzeIndexEdge(JSC::HeapSnapshotBuilder *this, JSC::JSCell *a2, JSC::JSCell *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v12;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;

  v8 = a4;
  v12 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 32);
LABEL_5:
  v14 = (_QWORD *)((char *)this + 40);
  BYTE8(v22) = 2;
  *(_QWORD *)&v21 = a2;
  *((_QWORD *)&v21 + 1) = a3;
  LODWORD(v22) = v8;
  v15 = *((unsigned int *)this + 13);
  if ((_DWORD)v15 == *((_DWORD *)this + 12))
  {
    v16 = (__int128 *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v21);
    v17 = (_OWORD *)(*((_QWORD *)this + 5) + 32 * *((unsigned int *)this + 13));
    v18 = *v16;
    v19 = v16[1];
  }
  else
  {
    v17 = (_OWORD *)(*v14 + 32 * v15);
    v18 = v21;
    v19 = v22;
  }
  *v17 = v18;
  v17[1] = v19;
  ++*((_DWORD *)this + 13);
  v20 = __ldxr(v12);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v12))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::HeapSnapshotBuilder::setOpaqueRootReachabilityReasonForCell(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;

  if (a4 >= 2 && *(_DWORD *)(a1 + 88) == 1)
  {
    v12 = (unsigned __int8 *)(a1 + 32);
    if (__ldaxr((unsigned __int8 *)(a1 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
LABEL_7:
      v16 = *(_QWORD *)(a1 + 56);
      v15 = (uint64_t *)(a1 + 56);
      v14 = v16;
      if (v16
        || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::HeapSnapshotBuilder::RootData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v15, 8u, 0), (v14 = *v15) != 0))
      {
        v17 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (_OWORD *)(v14 + 32 * v21);
      v23 = *(_QWORD *)v22;
      if (*(_QWORD *)v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != a2)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = ((_DWORD)v21 + v25) & v17;
          v22 = (_OWORD *)(v14 + 32 * v21);
          v23 = *(_QWORD *)v22;
          ++v25;
          if (!*(_QWORD *)v22)
          {
            if (v24)
            {
              *v24 = 0u;
              v24[1] = 0u;
              --*(_DWORD *)(*v15 - 16);
              v22 = v24;
            }
            goto LABEL_18;
          }
        }
LABEL_31:
        *((_QWORD *)v22 + 1) = a3;
        *((_QWORD *)v22 + 2) = a4;
        v33 = __ldxr(v12);
        if (v33 == 1)
        {
          if (!__stlxr(0, v12))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)v22, a4, a5, a6, a7, a8);
        return;
      }
LABEL_18:
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *(_QWORD *)v22 = a2;
      *((_BYTE *)v22 + 24) = 0;
      v26 = *v15;
      if (*v15)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v15;
      if (*v15)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_31;
      }
      else
      {
        if (3 * v31 > 4 * v30)
          goto LABEL_31;
        if (!(_DWORD)v31)
        {
          v32 = 8;
          goto LABEL_30;
        }
      }
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_30:
      v22 = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::HeapSnapshotBuilder::RootData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v15, v32, (uint64_t)v22);
      goto LABEL_31;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
    goto LABEL_7;
  }
}

void JSC::HeapSnapshotBuilder::setWrappedObjectForCell(JSC::HeapSnapshotBuilder *this, JSC::JSCell *a2, JSC::JSCell *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  JSC::JSCell **v17;
  JSC::JSCell *v18;
  JSC::JSCell **v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v11 = (uint64_t *)((char *)this + 64);
  v10 = *((_QWORD *)this + 8);
  if (v10
    || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)this + 8, 8uLL, 0, a4, a5, a6, a7, a8), (v10 = *v11) != 0))
  {
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (JSC::JSCell **)(v10 + 16 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == a2)
      {
        v17[1] = a3;
        return;
      }
      if (v18 == (JSC::JSCell *)-1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (JSC::JSCell **)(v10 + 16 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v17 = v19;
    }
  }
  *v17 = a2;
  v17[1] = a3;
  v21 = *v11;
  if (*v11)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 <= 0x400)
  {
    if (3 * v26 > 4 * v25)
      return;
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_26;
    }
LABEL_23:
    v27 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
LABEL_26:
    WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v11, v27, (uint64_t)v17, a4, a5, a6, a7, a8);
    return;
  }
  if (v26 <= 2 * v25)
    goto LABEL_23;
}

uint64_t JSC::HeapSnapshotBuilder::json@<X0>(JSC::HeapSnapshotBuilder *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3590BE8;
  v6 = v4;
  JSC::HeapSnapshotBuilder::json((uint64_t)this, &v6, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void JSC::HeapSnapshotBuilder::json(uint64_t a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  int i;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  WTF **v45;
  WTF *v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  int8x16_t v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  char *v79;
  char *v80;
  __int16 v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int8x16_t *v96;
  size_t v97;
  unint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  _OWORD *v113;
  int v114;
  _DWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  _OWORD *v120;
  _DWORD *v121;
  _QWORD *v122;
  int v123;
  _DWORD *v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  _DWORD *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t j;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int *v151;
  int8x16_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  JSC::VM *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  unint64_t v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  _QWORD *v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  WTF *v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  _DWORD *v212;
  uint64_t v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  _BOOL4 v217;
  char **v218;
  BOOL v219;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int *v224;
  int v225;
  uint64_t v226;
  BOOL v227;
  int v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  char v231;
  unint64_t v232;
  unsigned __int16 *v233;
  uint64_t v234;
  unsigned int v235;
  BOOL v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int8x16_t *v282;
  WTF::StringImpl *v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  BOOL v306;
  int v307;
  unint64_t v308;
  int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  int v313;
  char v314;
  int v315;
  int v316;
  int v317;
  char v318;
  int v319;
  int v320;
  int v321;
  char v322;
  int v323;
  int v324;
  uint64_t v325;
  int v326;
  _WORD *v327;
  WTF::StringImpl *v328;
  WTF::AtomStringImpl *v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  _WORD *v338;
  int v339;
  int v340;
  int v341;
  _WORD *v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  _WORD *v347;
  _WORD *v348;
  int v349;
  int v350;
  int v351;
  _WORD *v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int v355;
  uint64_t v356;
  _WORD *v357;
  _WORD *v358;
  int v359;
  int v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _WORD *v365;
  unint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _BYTE *v398;
  uint64_t v399;
  unsigned int v400;
  _BYTE *v401;
  int v402;
  uint64_t v403;
  _BYTE *v404;
  unint64_t v405;
  char *v406;
  int v407;
  uint64_t v408;
  char *v409;
  unsigned int v410;
  char *v411;
  int v412;
  uint64_t v413;
  char *v414;
  size_t v415;
  unint64_t v416;
  unsigned int v417;
  size_t v418;
  unsigned int v419;
  unsigned int p_n;
  unsigned int v421;
  int v422;
  unsigned int v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  int v427;
  int v428;
  char v429;
  int v430;
  int v431;
  uint64_t v432;
  WTF::StringImpl *v433;
  _WORD *v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int v437;
  uint64_t v438;
  _WORD *v439;
  int v440;
  _QWORD *v441;
  char *v442;
  uint64_t v443;
  _OWORD *v444;
  char *v445;
  char *v446;
  __int16 v447;
  char *v448;
  char *v449;
  uint64_t v450;
  _OWORD *v451;
  char *v452;
  char *v453;
  __int16 v454;
  char *v455;
  int8x16_t v456;
  int8x16_t v457;
  __int128 v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  int8x16_t v463;
  int8x16_t v464;
  __int128 v465;
  char *v466;
  char *v467;
  char *v468;
  _BYTE *v469;
  uint64_t v470;
  unsigned int v471;
  _BYTE *v472;
  int v473;
  _DWORD *v474;
  _BYTE *v475;
  _BYTE *v476;
  _BYTE *v477;
  _BYTE *v478;
  unint64_t v479;
  void *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  WTF::AtomStringImpl *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int8x16_t *v494;
  unint64_t v495;
  WTF::StringImpl *v496;
  unint64_t v497;
  void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unsigned __int8 *v505;
  uint64_t v506;
  unsigned int v507;
  uint64_t v508;
  BOOL v509;
  int v510;
  uint64_t v511;
  unsigned int v512;
  WTF::StringImpl *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  WTF::StringImpl **v523;
  uint64_t v524;
  _DWORD *v525;
  WTF::StringImpl *v526;
  unint64_t v527;
  void *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  WTF::StringImpl **v536;
  WTF::StringImpl *v537;
  unint64_t v538;
  void *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  WTF::AtomStringImpl *v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  WTF::StringImpl *v554;
  unint64_t v555;
  void *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  BOOL v564;
  int v565;
  uint64_t v566;
  __n128 *v567;
  uint64_t v568;
  __n128 *v569;
  int v570;
  __n128 *v571;
  __n128 *v572;
  unint64_t v573;
  unsigned int v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  unint64_t v582;
  unsigned int v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  __n128 *v591;
  __n128 *v592;
  __n128 *v593;
  __n128 v594;
  uint64_t v595;
  uint64_t v596;
  __n128 *v597;
  __n128 v598;
  uint64_t v599;
  __n128 *v600;
  __n128 v601;
  __n128 *v602;
  __n128 v603;
  unsigned int v604;
  unint64_t v605;
  unint64_t v606;
  WTF *v607;
  _OWORD *v608;
  __n128 *v609;
  __n128 v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  WTF::StringImpl *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  __int32 v625;
  unsigned __int8 v626;
  int v627;
  int8x16_t *v628;
  const WTF::String *v629;
  uint64_t v630;
  uint64_t v631;
  BOOL v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  BOOL v639;
  int v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  WTF::StringImpl *v644;
  uint64_t v645;
  void *v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  unsigned __int8 *v656;
  uint64_t v657;
  BOOL v658;
  int v659;
  uint64_t v660;
  unsigned __int8 v661;
  int v662;
  int8x16_t *v663;
  uint64_t v664;
  BOOL v665;
  int v666;
  uint64_t v667;
  void *v668;
  WTF::StringImpl *v669;
  uint64_t v670;
  void *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  _DWORD *v682;
  WTF::AtomStringImpl *v683;
  uint64_t v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  WTF::StringImpl *v690;
  uint64_t v691;
  BOOL v692;
  int v693;
  uint64_t v694;
  WTF::StringImpl *v695;
  uint64_t v696;
  _DWORD **v697;
  uint64_t v698;
  uint64_t v699;
  BOOL v700;
  int v701;
  uint64_t v702;
  _DWORD *v703;
  WTF::StringImpl *v704;
  unint64_t v705;
  void *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t *v718;
  uint64_t *v719;
  uint64_t v720;
  uint64_t *v721;
  int v722;
  char v723;
  unint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  unsigned int v729;
  int v730;
  int v731;
  uint64_t v732;
  unint64_t v733;
  __int32 v734;
  uint64_t v735;
  BOOL v736;
  int v737;
  uint64_t v738;
  const char *v739;
  int v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  WTF::AtomStringImpl *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  int *v759;
  WTF::AtomStringImpl *v760;
  uint64_t v761;
  __int32 v762;
  uint64_t *v763;
  unint64_t v764;
  void *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  unint64_t v772;
  void *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  BOOL v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  WTF::StringImpl *v786;
  uint64_t v787;
  unint64_t v788;
  void *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  char *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  WTF::StringImpl **v804;
  uint64_t v805;
  _DWORD *v806;
  WTF::StringImpl *v807;
  unint64_t v808;
  void *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  WTF::StringImpl **v817;
  WTF::StringImpl *v818;
  unint64_t v819;
  void *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  WTF::AtomStringImpl *v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  WTF::StringImpl *v835;
  unint64_t v836;
  void *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  BOOL v845;
  int v846;
  uint64_t v847;
  uint64_t v848;
  BOOL v849;
  int v850;
  uint64_t v851;
  WTF::StringImpl **v852;
  WTF::StringImpl *v853;
  WTF::StringImpl *v854;
  WTF::StringImpl *v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  void *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  void *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  const WTF::String *v874;
  uint64_t v875;
  uint64_t v876;
  BOOL v877;
  int v878;
  uint64_t v879;
  WTF::AtomStringImpl *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  WTF::StringImpl *v887;
  unint64_t v888;
  void *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  WTF::StringImpl **v897;
  WTF::StringImpl *v898;
  unint64_t v899;
  void *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  WTF::StringImpl **v908;
  WTF::StringImpl *v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  size_t v918;
  int v919;
  uint64_t v921;
  _QWORD *v922;
  uint64_t v923;
  _QWORD *v924;
  uint64_t v925;
  JSC::VM *v926;
  unsigned int v927;
  char *v928;
  int v929;
  uint64_t v930;
  WTF::StringImpl *v931;
  WTF::StringImpl *v932;
  unsigned int v933;
  char v934;
  int v935;
  uint64_t v936;
  int v937;
  WTF::StringImpl **v938;
  WTF::StringImpl **v939;
  char v940;
  unsigned __int8 v941;
  char v942;
  int8x16_t v943;
  size_t __n;
  int8x16_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  __int16 v950;
  __int16 v951;
  char v952;
  JSC::VM *v953;
  char v954;
  uint64_t v955;
  uint64_t v956;
  WTF::StringImpl *v957[4];
  int8x16x2_t v958;
  int8x16x2_t v959;
  int8x16x2_t v960;
  int8x16x2_t v961;
  int8x16x2_t v962;
  int8x16x2_t v963;
  int8x16x2_t v964;
  int8x16x2_t v965;
  int8x16x2_t v966;

  v957[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v926 = **(JSC::VM ***)(a1 + 8);
  ++*((_DWORD *)v926 + 229);
  v939 = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "<root>";
  *(_DWORD *)(v5 + 16) = 4;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v939, 8uLL, 0, v6, v7, v8, v9, v10);
  v17 = (uint64_t)v939;
  if (v939)
    v18 = *((_DWORD *)v939 - 2);
  else
    v18 = 0;
  v19 = *(_DWORD *)(v5 + 16);
  v925 = a1;
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v5);
  else
    v20 = v19 >> 8;
  v21 = 0;
  for (i = 1; ; ++i)
  {
    v23 = v20 & v18;
    v24 = (WTF **)(v17 + 16 * v23);
    v25 = *v24;
    if (*v24 != (WTF *)-1)
      break;
    v21 = (_QWORD *)(v17 + 16 * v23);
LABEL_12:
    v20 = i + v23;
  }
  if (!v25)
  {
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*((_DWORD *)v939 - 4);
      *v21 = v5;
      v27 = v925;
    }
    else
    {
      *v24 = (WTF *)v5;
      v27 = v925;
      v21 = v24;
    }
    *((_DWORD *)v21 + 2) = 0;
    if (v939)
      v28 = *((_DWORD *)v939 - 3) + 1;
    else
      v28 = 1;
    *((_DWORD *)v939 - 3) = v28;
    if (v939)
      v29 = *((_DWORD *)v939 - 3);
    else
      v29 = 0;
    v30 = (*((_DWORD *)v939 - 4) + v29);
    v31 = *((unsigned int *)v939 - 1);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_32;
    }
    else
    {
      if (3 * v31 > 4 * v30)
        goto LABEL_32;
      if (!(_DWORD)v31)
      {
        v32 = 8;
        goto LABEL_31;
      }
    }
    v32 = ((_DWORD)v31 << (6 * *((_DWORD *)v939 - 3) >= (2 * v31)));
LABEL_31:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v939, v32, (uint64_t)v21, v12, v13, v14, v15, v16);
    goto LABEL_32;
  }
  if (!WTF::equal(v25, (const WTF::StringImpl *)v5, v11))
    goto LABEL_12;
  *(_DWORD *)(v17 + 16 * v23 + 8) = 0;
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v5, v26, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
  }
  else
  {
    *(_DWORD *)v5 -= 2;
  }
  v27 = v925;
LABEL_32:
  v938 = 0;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v938, 8uLL, 0, v12, v13, v14, v15, v16);
  v39 = (uint64_t)v938;
  if (v938)
    v40 = *((_DWORD *)v938 - 2);
  else
    v40 = 0;
  if (dword_1ECF2C430 < 0x100)
    v41 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString);
  else
    v41 = dword_1ECF2C430 >> 8;
  v42 = 0;
  v43 = 1;
  while (2)
  {
    v44 = v41 & v40;
    v45 = (WTF **)(v39 + 16 * v44);
    v46 = *v45;
    if (*v45 == (WTF *)-1)
    {
      v42 = (_QWORD *)(v39 + 16 * v44);
LABEL_43:
      v41 = v43 + v44;
      ++v43;
      continue;
    }
    break;
  }
  if (v46)
  {
    if (WTF::equal(v46, (const WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, v33))
    {
      *(_DWORD *)(v39 + 16 * v44 + 8) = 0;
      goto LABEL_60;
    }
    goto LABEL_43;
  }
  if (v42)
  {
    *v42 = 0;
    v42[1] = 0;
    --*((_DWORD *)v938 - 4);
    WTF::StringImpl::s_emptyAtomString += 2;
    *v42 = &WTF::StringImpl::s_emptyAtomString;
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *v45 = (WTF *)&WTF::StringImpl::s_emptyAtomString;
    v42 = (_QWORD *)(v39 + 16 * v44);
  }
  *((_DWORD *)v42 + 2) = 0;
  if (v938)
    v47 = *((_DWORD *)v938 - 3) + 1;
  else
    v47 = 1;
  *((_DWORD *)v938 - 3) = v47;
  if (v938)
    v48 = *((_DWORD *)v938 - 3);
  else
    v48 = 0;
  v49 = (*((_DWORD *)v938 - 4) + v48);
  v50 = *((unsigned int *)v938 - 1);
  if (v50 > 0x400)
  {
    if (v50 <= 2 * v49)
    {
LABEL_56:
      v51 = ((_DWORD)v50 << (6 * *((_DWORD *)v938 - 3) >= (2 * v50)));
      goto LABEL_59;
    }
  }
  else if (3 * v50 <= 4 * v49)
  {
    if ((_DWORD)v50)
      goto LABEL_56;
    v51 = 8;
LABEL_59:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v938, v51, (uint64_t)v42, v34, v35, v36, v37, v38);
  }
LABEL_60:
  v937 = 1;
  v936 = 0;
  v935 = 0;
  v931 = 0;
  v932 = 0;
  v933 = 0;
  v934 = 1;
  v52 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)0xC, (uint64_t)v33, v34, v35, v36, v37, v38);
  if (v52)
  {
    *(_DWORD *)(v52 + 8) = 842670702;
    *(_QWORD *)v52 = *(_QWORD *)"{\"version\":2";
  }
  v59 = *(_DWORD *)(v27 + 88);
  if (v59 == 1)
    v60 = "GCDebugging";
  else
    v60 = "Inspector";
  v61 = 10;
  if (v59 == 1)
    v61 = 12;
  v922 = a2;
  v918 = v61 - 1;
  if ((unint64_t)(v61 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1985DDCA0);
  }
  v919 = v61 + 9;
  v195 = v925;
  v62 = v919 + v933;
  if (__CFADD__(v919, v933))
    v62 = 0xFFFFFFFFLL;
  v63 = v932;
  if ((v932 || (v63 = v931) != 0) && (*((_BYTE *)v63 + 16) & 4) == 0)
  {
    v64 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v931, (WTF::AtomStringImpl *)v62, v53, v54, v55, v56, v57, v58);
    if (v64)
    {
      *(_OWORD *)v64 = xmmword_199156810;
      *(_WORD *)(v64 + 16) = 34;
      v71 = (char *)(v64 + 18);
      v72 = (char *)(v64 + 18 + 2 * v918);
      if ((v918 & 0xFFFFFFC0) != 0)
      {
        v73 = &v71[2 * (v918 & 0xFFFFFFC0)];
        v74 = 0uLL;
        do
        {
          v958.val[0] = *(int8x16_t *)v60;
          v75 = *((int8x16_t *)v60 + 1);
          v961.val[0] = (int8x16_t)*((_OWORD *)v60 + 2);
          v76 = *((_OWORD *)v60 + 3);
          v60 += 64;
          v77 = v76;
          v961.val[1] = 0uLL;
          v964.val[0] = v75;
          v958.val[1] = 0uLL;
          v78 = v71;
          vst2q_s8(v78, v958);
          v78 += 32;
          v964.val[1] = 0uLL;
          vst2q_s8(v78, v964);
          v79 = v71 + 64;
          vst2q_s8(v79, v961);
          v80 = v71 + 96;
          vst2q_s8(v80, *(int8x16x2_t *)(&v74 - 1));
          v71 += 128;
        }
        while (v71 != v73);
        v71 = v73;
      }
      while (v71 != v72)
      {
        v81 = *(unsigned __int8 *)v60++;
        *(_WORD *)v71 = v81;
        v71 += 2;
      }
      *(_WORD *)v72 = 34;
    }
  }
  else
  {
    v90 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)v62, v53, v54, v55, v56, v57, v58);
    if (v90)
    {
      *(_BYTE *)(v90 + 8) = 34;
      *(_QWORD *)v90 = *(_QWORD *)",\"type\":\"";
      v91 = (char *)(v90 + 9);
      if ((_DWORD)v918 == 1)
      {
        *v91 = *v60;
      }
      else if ((_DWORD)v918)
      {
        memcpy((void *)(v90 + 9), v60, v918);
      }
      v91[v918] = 34;
    }
  }
  if ((v933 & 0x80000000) == 0)
  {
    v92 = v932;
    if ((v932 || (v92 = v931) != 0) && (*((_BYTE *)v92 + 16) & 4) == 0)
    {
      v93 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 10), v65, v66, v67, v68, v69, v70);
      if (v93)
      {
        *(_OWORD *)v93 = xmmword_199156820;
        *(_DWORD *)(v93 + 16) = 5963834;
      }
    }
    else
    {
      v94 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 10), v65, v66, v67, v68, v69, v70);
      if (v94)
      {
        *(_WORD *)(v94 + 8) = 23354;
        *(_QWORD *)v94 = *(_QWORD *)",\"nodes\":[";
      }
    }
  }
  v95 = *(_DWORD *)(v925 + 88);
  if (v95 == 1)
    v96 = (int8x16_t *)"0,0,0,0,0,\"0x0\",\"0x0\"";
  else
    v96 = (int8x16_t *)"0,0,0,0";
  if (v95 == 1)
    v97 = 21;
  else
    v97 = 7;
  WTF::StringBuilder::append((uint64_t)&v931, v96, v97, v66, v67, v68, v69, v70);
  v106 = *(_QWORD *)(v925 + 8);
  v107 = *(unsigned int *)(v106 + 20);
  if ((_DWORD)v107)
  {
    v108 = *(_QWORD *)(*(_QWORD *)(v106 + 8) + 8 * v107 - 8);
    if (v108)
    {
      v109 = 0;
      v105 = (__n128)xmmword_19914F680;
      v929 = 1;
      while (1)
      {
        v110 = *(unsigned int *)(v108 + 12);
        v921 = v108;
        if (!(_DWORD)v110)
        {
          v124 = v109;
          goto LABEL_600;
        }
        v111 = *(_DWORD **)v108;
        v112 = *(_QWORD *)v108 + 16 * v110;
        v923 = v112;
        do
        {
          if (!(*(unsigned int (**)(_QWORD, _DWORD *))(*(_QWORD *)*a2 + 16))(*a2, v111))
          {
            v124 = v109;
            goto LABEL_546;
          }
          if (!v109)
          {
            v113 = (_OWORD *)WTF::fastZeroedMalloc(0x90uLL, v98, v99, v100, v101, v102, v103, v104);
            *v113 = xmmword_19914F680;
            v109 = v113 + 1;
          }
          v114 = *((_DWORD *)v109 - 2);
          v115 = *(_DWORD **)v111;
          v116 = ~(*(_QWORD *)v111 << 32) + *(_QWORD *)v111;
          v117 = (v116 ^ (v116 >> 22)) + ~((v116 ^ (v116 >> 22)) << 13);
          v118 = (9 * (v117 ^ (v117 >> 8))) ^ ((9 * (v117 ^ (v117 >> 8))) >> 15);
          v119 = v114 & (((v118 + ~(v118 << 27)) >> 31) ^ (v118 + ~((_DWORD)v118 << 27)));
          v120 = &v109[v119];
          v121 = *(_DWORD **)v120;
          if (!*(_QWORD *)v120)
            goto LABEL_123;
          v122 = 0;
          v123 = 1;
          do
          {
            if (v121 == v115)
            {
              *((_DWORD *)v120 + 2) = v111[2];
LABEL_129:
              v124 = v109;
              goto LABEL_140;
            }
            if (v121 == (_DWORD *)-1)
              v122 = v120;
            v119 = (v119 + v123) & v114;
            v120 = &v109[v119];
            v121 = *(_DWORD **)v120;
            ++v123;
          }
          while (*(_QWORD *)v120);
          if (v122)
          {
            *v122 = 0;
            v122[1] = 0;
            --*((_DWORD *)v109 - 4);
            *v122 = *(_QWORD *)v111;
            *((_DWORD *)v122 + 2) = v111[2];
            goto LABEL_124;
          }
LABEL_123:
          *(_QWORD *)v120 = v115;
          *((_DWORD *)v120 + 2) = v111[2];
LABEL_124:
          v125 = *((_DWORD *)v109 - 3) + 1;
          *((_DWORD *)v109 - 3) = v125;
          v126 = (*((_DWORD *)v109 - 4) + v125);
          v127 = *((unsigned int *)v109 - 1);
          if (v127 > 0x400)
          {
            if (v127 <= 2 * v126)
              goto LABEL_131;
            goto LABEL_129;
          }
          if (3 * v127 > 4 * v126)
            goto LABEL_129;
          if (!(_DWORD)v127)
          {
            v128 = 8;
            goto LABEL_132;
          }
LABEL_131:
          v128 = (_DWORD)v127 << (6 * v125 >= (2 * v127));
LABEL_132:
          v129 = (_DWORD *)WTF::fastZeroedMalloc(16 * v128 + 16, v98, v99, v100, v101, v102, v103, v104);
          v124 = v129 + 4;
          v137 = v128 - 1;
          v129[2] = v128 - 1;
          v129[3] = v128;
          *v129 = 0;
          v129[1] = v125;
          if ((_DWORD)v127)
          {
            for (j = 0; j != v127; ++j)
            {
              v139 = &v109[j];
              if ((unint64_t)(*v139 + 1) >= 2)
              {
                v140 = (~(*v139 << 32) + *v139) ^ ((~(*v139 << 32) + *v139) >> 22);
                v141 = 9 * ((v140 + ~(v140 << 13)) ^ ((unint64_t)(v140 + ~(v140 << 13)) >> 8));
                v142 = (v141 ^ (v141 >> 15)) + ~((v141 ^ (v141 >> 15)) << 27);
                v143 = v137 & ((v142 >> 31) ^ v142);
                v144 = 1;
                do
                {
                  v145 = v143;
                  v146 = *(_QWORD *)&v124[4 * v143];
                  v143 = (v143 + v144++) & v137;
                }
                while (v146);
                *(_OWORD *)&v124[4 * v145] = *(_OWORD *)v139;
              }
            }
          }
          WTF::fastFree((unint64_t)(v109 - 1), v130, v131, v132, v133, v134, v135, v136);
LABEL_140:
          v147 = *(_QWORD *)v111;
          v148 = *(_QWORD *)(16 * *(unsigned int *)(16 * (**(_DWORD **)v111 & 0xFFFFFFFE) + 0x4C) + 8);
          if (v148)
          {
            v149 = v148 - 1;
            if (v148 == 1)
            {
              v151 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            else
            {
              v150 = *(_QWORD *)(16 * *(unsigned int *)(16 * (**(_DWORD **)v111 & 0xFFFFFFFE) + 0x4C));
              v151 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
              *v151 = 2;
              v151[1] = v149;
              *((_QWORD *)v151 + 1) = v150;
              v151[4] = 4;
              v147 = *(_QWORD *)v111;
            }
          }
          else
          {
            v151 = 0;
          }
          if (*(unsigned __int8 *)(v147 + 5) < 0x17u
            || !WTF::equalInternal<unsigned char>((uint64_t)v151, (unint64_t)"Object", 6))
          {
            v170 = 0;
            goto LABEL_195;
          }
          v153 = *(_QWORD *)v111;
          v154 = *(_QWORD *)(16 * (**(_DWORD **)v111 & 0xFFFFFFFE) + 0x28);
          if (!v154)
            goto LABEL_194;
          v946 = 0xFFFFFFFF00000000;
          v947 = v153;
          v948 = 0;
          v949 = 0;
          v950 = 0;
          v951 = 3;
          v952 = 0;
          v955 = 0;
          v956 = 0;
          v953 = v926;
          ++*((_DWORD *)v926 + 1);
          v954 = 1;
          v155 = *(_QWORD *)(*((_QWORD *)v926 + 5244) + 1080);
          v156 = *(JSC::VM **)(v154 + 56);
          if (!(v155 >> 4))
            goto LABEL_181;
          v157 = 16 * (*(_DWORD *)v153 & 0xFFFFFFFE);
          if (((v155 >> 4) & ~*(_DWORD *)(v157 + 0x20)) != 0)
            goto LABEL_181;
          v158 = *(_QWORD *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE) + 0x58);
          if (!v158)
          {
            v159 = *(_QWORD *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE) + 0x40);
            if (!v159 || *(_BYTE *)(v159 + 5) != 1 && *(_DWORD *)(v159 + 80) < 2u)
              goto LABEL_181;
            JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE)), *(JSC::VM **)(v154 + 56), 1, (const JSC::PropertyTable *)v100, v101, v102, v103, v104);
            if (!v158)
              goto LABEL_181;
          }
          if (!*(_DWORD *)(v158 + 24))
            goto LABEL_181;
          v160 = *(_QWORD *)(v158 + 16);
          v161 = v160 & 0xFFFFFFFFFFFFFFFELL;
          v162 = *(unsigned int *)(v158 + 8);
          v163 = *(_DWORD *)(v155 + 16);
          if ((v160 & 1) != 0)
          {
            if ((v163 & 0x20) != 0)
              v163 = *(_DWORD *)(v155 + 32);
            v164 = *(_DWORD *)(v158 + 12);
            v165 = (v163 >> 8) & *(_QWORD *)&v164;
            v166 = *(unsigned __int8 *)(v161 + v165);
            if (*(_BYTE *)(v161 + v165))
            {
              v167 = v161 + v162;
              v168 = 1;
              while (1)
              {
                v169 = *(_QWORD *)(v167 + 8 * (v166 - 1));
                if (v155 == (v169 & 0xFFFFFFFFFFFFLL))
                  break;
                v165 = ((_DWORD)v165 + v168) & v164;
                v166 = *(unsigned __int8 *)(v161 + v165);
                ++v168;
                if (!*(_BYTE *)(v161 + v165))
                  goto LABEL_181;
              }
              v102 = (v169 >> 16) & 0xFF00000000 | HIBYTE(v169);
              goto LABEL_171;
            }
            goto LABEL_181;
          }
          if ((v163 & 0x20) != 0)
            v163 = *(_DWORD *)(v155 + 32);
          v171 = *(_DWORD *)(v158 + 12);
          v172 = v171 & (v163 >> 8);
          v173 = *(_DWORD *)(v161 + 4 * v172);
          if (!v173)
            goto LABEL_181;
          v174 = v161 + 4 * v162;
          v175 = 1;
          while (1)
          {
            v176 = (v173 - 1);
            if (v155 == *(_QWORD *)(v174 + 16 * v176))
              break;
            v172 = (v172 + v175) & v171;
            v173 = *(_DWORD *)(v161 + 4 * v172);
            ++v175;
            if (!v173)
              goto LABEL_181;
          }
          v102 = *(unsigned int *)(v174 + 16 * v176 + 8) | ((unint64_t)*(unsigned __int8 *)(v174 + 16 * v176 + 12) << 32);
LABEL_171:
          if ((_DWORD)v102 == -1)
          {
LABEL_181:
            if ((*(_BYTE *)(v153 + 6) & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v153, v156, v155, (uint64_t)&v945) & 1) != 0)
            {
              goto LABEL_191;
            }
            if (v155)
            {
              v180 = *(_DWORD *)(v155 + 16);
              if ((v180 & 0x20) == 0)
              {
                v181 = *(_BYTE **)(v155 + 8);
                v182 = *(unsigned int *)(v155 + 4);
                if ((v180 & 4) != 0)
                {
                  if ((_DWORD)v182)
                  {
                    v99 = *v181 - 48;
                    if (v99 <= 9 && (v182 < 2 || *v181 != 48))
                    {
                      v505 = v181 + 1;
                      v506 = v182 - 1;
                      while (v506)
                      {
                        if (v99 <= 0x19999999)
                        {
                          v507 = *v505 - 48;
                          if (v507 <= 9)
                          {
                            v236 = __CFADD__(v507, 10 * v99);
                            v99 = v507 + 10 * (_DWORD)v99;
                            ++v505;
                            --v506;
                            if (!v236)
                              continue;
                          }
                        }
                        goto LABEL_187;
                      }
                      goto LABEL_596;
                    }
                  }
                }
                else if ((_DWORD)v182)
                {
                  v99 = *(unsigned __int16 *)v181 - 48;
                  if (v99 <= 9 && (*(_WORD *)v181 != 48 || v182 <= 1))
                  {
                    v233 = (unsigned __int16 *)(v181 + 2);
                    v234 = v182 - 1;
                    while (v234)
                    {
                      if (v99 <= 0x19999999)
                      {
                        v235 = *v233 - 48;
                        if (v235 <= 9)
                        {
                          v236 = __CFADD__(v235, 10 * v99);
                          v99 = v235 + 10 * (_DWORD)v99;
                          ++v233;
                          --v234;
                          if (!v236)
                            continue;
                        }
                      }
                      goto LABEL_187;
                    }
LABEL_596:
                    if ((_DWORD)v99 != -1
                      && (JSC::JSObject::getOwnPropertySlotByIndex(v153, v154, (const WTF::StringImpl *)v99, (uint64_t)&v945, v101, v102, v103, v104) & 1) != 0)
                    {
                      goto LABEL_191;
                    }
                  }
                }
              }
            }
LABEL_187:
            JSC::JSObject::calculatedClassName((JSC::JSObject *)v153, (JSC::JSObject *)v98, v99, v100, v101, v102, v103, v104, &v943, v152);
            v183 = v943.i64[0];
            v943.i64[0] = 0;
            if (v151)
            {
              if (*v151 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v151, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
                WTF::fastFree(v245, v246, v247, v248, v249, v250, v251, v252);
                v253 = (WTF::StringImpl *)v943.i64[0];
                v943.i64[0] = 0;
                if (v253)
                {
                  if (*(_DWORD *)v253 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v253, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
                    WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
                  }
                  else
                  {
                    *(_DWORD *)v253 -= 2;
                  }
                }
              }
              else
              {
                *v151 -= 2;
              }
            }
            v151 = (int *)v183;
            goto LABEL_191;
          }
          if ((int)v102 <= 63)
          {
            v177 = v153 + 16;
            v178 = v102 << 32;
          }
          else
          {
            v177 = *(_QWORD *)(v153 + 8) - 8;
            v178 = 0x3F00000000 - (v102 << 32);
          }
          v101 = HIDWORD(v102);
          v100 = *(_QWORD *)(v177 + (v178 >> 29));
          if ((v100 & 0xFFFE000000000002) != 0)
          {
LABEL_178:
            v945.i64[0] = v100;
            v948 = v153;
            v946 = __PAIR64__(v102, HIDWORD(v102));
            v950 = 257;
          }
          else
          {
            v179 = *(unsigned __int8 *)(v100 + 5);
            if (v179 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v153, (uint64_t)v156, (uint64_t)&v945, v100, SHIDWORD(v102), v102);
            }
            else
            {
              if (v179 != 6)
                goto LABEL_178;
              v278 = *(_DWORD *)(v157 + 16) & 3;
              v279 = *(_QWORD *)(v100 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v100 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v281 = *(_QWORD *)(v100 + 24);
                v280 = *(_QWORD *)(v100 + 32);
                v945.i64[0] = *(_QWORD *)(v100 + 8);
                v945.i64[1] = v279;
                LODWORD(v946) = HIDWORD(v102);
                v948 = v153;
                HIBYTE(v950) = 3;
                if (v278 != 2)
                  LOBYTE(v950) = 1;
                HIBYTE(v951) = 1;
                v955 = v281;
                v956 = v280;
              }
              else
              {
                v945.i64[0] = *(_QWORD *)(v100 + 8);
                v945.i64[1] = v279;
                LODWORD(v946) = HIDWORD(v102);
                v948 = v153;
                HIBYTE(v950) = 3;
                if (v278 != 2)
                  LOBYTE(v950) = 1;
              }
            }
          }
LABEL_191:
          if (v954)
          {
            v184 = *((_DWORD *)v953 + 1);
            if (!v184)
            {
              __break(0xC471u);
              JUMPOUT(0x1985DCCC4);
            }
            *((_DWORD *)v953 + 1) = v184 - 1;
          }
LABEL_194:
          v170 = 2;
LABEL_195:
          v185 = (uint64_t)v939;
          if (v939
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v939, 8uLL, 0, v100, v101, v102, v103, v104), (v185 = (uint64_t)v939) != 0))
          {
            v186 = *(_DWORD *)(v185 - 8);
          }
          else
          {
            v186 = 0;
          }
          v187 = v151[4];
          if (v187 < 0x100)
            v188 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v151);
          else
            v188 = v187 >> 8;
          v189 = 0;
          v190 = 1;
          while (2)
          {
            v191 = v188 & v186;
            v192 = v185 + 16 * (v188 & v186);
            v193 = *(WTF **)v192;
            if (*(_QWORD *)v192 == -1)
            {
              v189 = (_QWORD *)(v185 + 16 * v191);
LABEL_206:
              v188 = v190 + v191;
              ++v190;
              continue;
            }
            break;
          }
          if (v193)
          {
            if (WTF::equal(v193, (const WTF::StringImpl *)v151, (const WTF::StringImpl *)v99))
            {
              v195 = v925;
              goto LABEL_226;
            }
            goto LABEL_206;
          }
          if (v189)
          {
            *v189 = 0;
            v189[1] = 0;
            --*((_DWORD *)v939 - 4);
            v192 = (uint64_t)v189;
          }
          v195 = v925;
          if (v151)
            *v151 += 2;
          *(_QWORD *)v192 = v151;
          *(_DWORD *)(v192 + 8) = v929;
          if (v939)
            v194 = *((_DWORD *)v939 - 3) + 1;
          else
            v194 = 1;
          *((_DWORD *)v939 - 3) = v194;
          if (v939)
            v196 = *((_DWORD *)v939 - 3);
          else
            v196 = 0;
          v197 = (*((_DWORD *)v939 - 4) + v196);
          v198 = *((unsigned int *)v939 - 1);
          if (v198 > 0x400)
          {
            if (v198 <= 2 * v197)
            {
LABEL_220:
              v199 = ((_DWORD)v198 << (6 * *((_DWORD *)v939 - 3) >= (2 * v198)));
              goto LABEL_224;
            }
          }
          else if (3 * v198 <= 4 * v197)
          {
            if ((_DWORD)v198)
              goto LABEL_220;
            v199 = 8;
LABEL_224:
            v192 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v939, v199, v192, v100, v101, v102, v103, v104);
          }
          ++v929;
LABEL_226:
          v200 = *(_DWORD *)(v192 + 8);
          v201 = *(_QWORD *)v111;
          if ((*(_BYTE *)(*(_QWORD *)v111 + 5) & 0xFE) == 2)
            goto LABEL_237;
          v202 = *(_DWORD *)v201 & 0xFFFFFFFE;
          if (!(_DWORD)v202 || !*(_QWORD *)(16 * v202 + 0x28))
            v170 |= 1u;
          if (*(_DWORD *)(v195 + 88) != 1)
          {
LABEL_237:
            v927 = 0;
            v211 = 0;
            goto LABEL_349;
          }
          v945 = 0uLL;
          LODWORD(v946) = 0;
          BYTE4(v946) = 1;
          v203 = *(_QWORD *)(v195 + 72);
          if (!v203)
            goto LABEL_242;
          v204 = *(_DWORD *)(v203 - 8);
          v205 = (~(v201 << 32) + v201) ^ ((unint64_t)(~(v201 << 32) + v201) >> 22);
          v206 = 9 * ((v205 + ~(v205 << 13)) ^ ((v205 + ~(v205 << 13)) >> 8));
          v207 = (v206 ^ (v206 >> 15)) + ~((v206 ^ (v206 >> 15)) << 27);
          v208 = v204 & ((v207 >> 31) ^ v207);
          v209 = *(_QWORD *)(v203 + 16 * v208);
          if (v209 != v201)
          {
            v210 = 1;
            while (v209)
            {
              v208 = ((_DWORD)v208 + v210) & v204;
              v209 = *(_QWORD *)(v203 + 16 * v208);
              ++v210;
              if (v209 == v201)
                goto LABEL_239;
            }
            v208 = *(unsigned int *)(v203 - 4);
          }
LABEL_239:
          if (v208 == *(_DWORD *)(v203 - 4))
          {
LABEL_242:
            if (!v201)
              goto LABEL_258;
LABEL_243:
            if (*(_BYTE *)(v201 + 5) != 26)
              goto LABEL_258;
            JSC::JSFunction::calculatedDisplayName((JSC::JSFunction *)v201, v926, (const JSC::PropertyTable *)v100, v101, v102, v103, v104, (WTF::StringImpl **)&v943);
            v213 = v943.i64[0];
            if (!(_DWORD)v946 && !v945.i64[1])
            {
              if (v943.i64[0])
                *(_DWORD *)v943.i64[0] += 2;
              v214 = (WTF::StringImpl *)v945.i64[0];
              v945.i64[0] = v213;
              if (v214)
              {
                if (*(_DWORD *)v214 != 2)
                {
                  *(_DWORD *)v214 -= 2;
                  goto LABEL_251;
                }
                WTF::StringImpl::~StringImpl(v214, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
                WTF::fastFree(v262, v263, v264, v265, v266, v267, v268, v269);
                v213 = v943.i64[0];
                if (!v943.i64[0])
                {
LABEL_253:
                  LODWORD(v946) = v213;
                  goto LABEL_254;
                }
              }
              else
              {
LABEL_251:
                if (!v213)
                  goto LABEL_253;
              }
              LODWORD(v213) = *(_DWORD *)(v213 + 4);
              goto LABEL_253;
            }
            if (v943.i64[0])
            {
              v494 = *(int8x16_t **)(v943.i64[0] + 8);
              v495 = *(unsigned int *)(v943.i64[0] + 4);
              if ((*(_BYTE *)(v943.i64[0] + 16) & 4) == 0)
              {
                WTF::StringBuilder::append((uint64_t)&v945, v494, v495, v100, v101, v102, v103, v104);
                goto LABEL_254;
              }
            }
            else
            {
              v494 = 0;
              v495 = 0;
            }
            WTF::StringBuilder::append((uint64_t)&v945, v494, v495, v100, v101, v102, v103, v104);
LABEL_254:
            v215 = (WTF::StringImpl *)v943.i64[0];
            v943.i64[0] = 0;
            if (v215)
            {
              if (*(_DWORD *)v215 == 2)
              {
                WTF::StringImpl::~StringImpl(v215, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
                WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
              }
              else
              {
                *(_DWORD *)v215 -= 2;
              }
            }
            v201 = *(_QWORD *)v111;
            goto LABEL_258;
          }
          v212 = *(_DWORD **)(v203 + 16 * v208 + 8);
          if (!v212)
          {
            v201 = *(_QWORD *)v111;
            if (!*(_QWORD *)v111)
              goto LABEL_258;
            goto LABEL_243;
          }
          *v212 += 2;
          v945.i64[0] = (uint64_t)v212;
          LODWORD(v946) = v212[1];
          v201 = *(_QWORD *)v111;
          if (!(_DWORD)v946)
            goto LABEL_242;
LABEL_258:
          if (*(_BYTE *)(v201 + 5) == 2)
            goto LABEL_272;
          v216 = *(unsigned int *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C);
          v217 = *(_DWORD *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C) != 0;
          v218 = (char **)(16 * v216);
          if ((_DWORD)v216)
            v219 = v218 == &JSC::Structure::s_info;
          else
            v219 = 1;
          if (!v219)
          {
            do
            {
              v218 = (char **)v218[2];
              v217 = v218 != 0;
            }
            while (v218 != &JSC::Structure::s_info && v218 != 0);
          }
          if (!v217)
            goto LABEL_272;
          v221 = *(_QWORD *)(16 * *(unsigned int *)(v201 + 76) + 8);
          if (!v221)
          {
            v224 = 0;
            v231 = 1;
            goto LABEL_321;
          }
          v222 = v221 - 1;
          if (v221 != 1)
          {
            v223 = *(_QWORD *)(16 * *(unsigned int *)(v201 + 76));
            v224 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
            v225 = 2;
            *v224 = 2;
            v224[1] = v222;
            *((_QWORD *)v224 + 1) = v223;
            v224[4] = 4;
            goto LABEL_273;
          }
LABEL_272:
          v224 = &WTF::StringImpl::s_emptyAtomString;
          v225 = WTF::StringImpl::s_emptyAtomString + 2;
          WTF::StringImpl::s_emptyAtomString += 2;
LABEL_273:
          v99 = v224[1];
          if (!(_DWORD)v99)
            goto LABEL_320;
          v226 = v946;
          if ((v946 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1985DCCA4);
          }
          if (!(_DWORD)v946)
          {
            if (v945.i64[1])
              goto LABEL_318;
LABEL_288:
            *v224 = v225 + 2;
            v230 = (WTF::StringImpl *)v945.i64[0];
            v945.i64[0] = (uint64_t)v224;
            if (v230)
            {
              if (*(_DWORD *)v230 == 2)
              {
                WTF::StringImpl::~StringImpl(v230, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
                WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
              }
              else
              {
                *(_DWORD *)v230 -= 2;
              }
            }
            v231 = 0;
            v232 = v224[1];
            LODWORD(v946) = v232;
            if ((_DWORD)v232)
              goto LABEL_322;
LABEL_331:
            v927 = 0;
            goto LABEL_332;
          }
          v943.i8[0] = 32;
          if (!v945.i64[1]
            || (v946 < *(_DWORD *)(v945.i64[1] + 4) ? (v227 = v945.i64[0] == 0) : (v227 = 0), !v227))
          {
            WTF::StringBuilder::append((uint64_t)&v945, &v943, 1uLL, v100, v101, v102, v103, v104);
            goto LABEL_284;
          }
          v228 = *(_DWORD *)(v945.i64[1] + 16);
          v229 = *(_QWORD *)(v945.i64[1] + 8);
          LODWORD(v946) = v946 + 1;
          if ((v228 & 4) != 0)
          {
            *(_BYTE *)(v229 + v226) = 32;
LABEL_284:
            if (!(_DWORD)v946 && !v945.i64[1])
            {
              v225 = *v224;
              goto LABEL_288;
            }
            v99 = v224[1];
          }
          else
          {
            *(_WORD *)(v229 + 2 * v226) = 32;
          }
LABEL_318:
          v282 = (int8x16_t *)*((_QWORD *)v224 + 1);
          if ((v224[4] & 4) != 0)
            WTF::StringBuilder::append((uint64_t)&v945, v282, v99, v100, v101, v102, v103, v104);
          else
            WTF::StringBuilder::append((uint64_t)&v945, v282, v99, v100, v101, v102, v103, v104);
LABEL_320:
          v231 = 0;
LABEL_321:
          v232 = v946;
          if (!(_DWORD)v946)
            goto LABEL_331;
LABEL_322:
          if (*(_DWORD *)(v195 + 88) != 1)
            goto LABEL_331;
          v283 = (WTF::StringImpl *)v945.i64[0];
          if (v945.i64[0])
            goto LABEL_324;
          if ((v232 & 0x80000000) == 0
            && v945.i64[1]
            && *(_DWORD *)(v945.i64[1] + 4) > v232 + (v232 >> 2))
          {
            if ((*(_BYTE *)(v945.i64[1] + 16) & 4) != 0)
              WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v945, (WTF::AtomStringImpl *)v232, v99, v100, v101, v102, v103, v104);
            else
              WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v945, (WTF::AtomStringImpl *)v232, v99, v100, v101, v102, v103, v104);
            v496 = (WTF::StringImpl *)v945.i64[0];
            v945 = (int8x16_t)v945.u64[1];
            if (v496)
            {
              if (*(_DWORD *)v496 == 2)
              {
                WTF::StringImpl::~StringImpl(v496, v487, v488, v489, v490, v491, v492, v493);
                WTF::fastFree(v497, v498, v499, v500, v501, v502, v503, v504);
              }
              else
              {
                *(_DWORD *)v496 -= 2;
              }
            }
          }
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v945);
          v283 = (WTF::StringImpl *)v945.i64[0];
          if (v945.i64[0])
LABEL_324:
            *(_DWORD *)v283 += 2;
          v957[0] = v283;
          WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>((uint64_t)&v943, (uint64_t *)&v938, v957, &v937, v101, v102, v103, v104);
          if (v957[0])
          {
            if (*(_DWORD *)v957[0] == 2)
            {
              WTF::StringImpl::~StringImpl(v957[0], (WTF::AtomStringImpl *)v232, v99, v100, v101, v102, v103, v104);
              WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
            }
            else
            {
              *(_DWORD *)v957[0] -= 2;
            }
          }
          if ((_BYTE)__n)
            ++v937;
          v927 = *(_DWORD *)(v943.i64[0] + 8);
LABEL_332:
          v284 = *(_QWORD *)(v195 + 64);
          if (v284)
          {
            v285 = *(_DWORD *)(v284 - 8);
            v286 = ~(*(_QWORD *)v111 << 32) + *(_QWORD *)v111;
            v287 = (v286 ^ (v286 >> 22)) + ~((v286 ^ (v286 >> 22)) << 13);
            v288 = (9 * (v287 ^ (v287 >> 8))) ^ ((9 * (v287 ^ (v287 >> 8))) >> 15);
            v289 = v285 & (((v288 + ~(v288 << 27)) >> 31) ^ ((_DWORD)v288 + ~((_DWORD)v288 << 27)));
            v290 = *(_QWORD *)(v284 + 16 * v289);
            if (v290 != *(_QWORD *)v111)
            {
              v291 = 1;
              while (v290)
              {
                v289 = ((_DWORD)v289 + v291) & v285;
                v290 = *(_QWORD *)(v284 + 16 * v289);
                ++v291;
                if (v290 == *(_QWORD *)v111)
                  goto LABEL_337;
              }
              goto LABEL_338;
            }
LABEL_337:
            v211 = *(_QWORD *)(v284 + 16 * v289 + 8);
          }
          else
          {
LABEL_338:
            v211 = 0;
          }
          if ((v231 & 1) == 0)
          {
            if (*v224 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v224, (WTF::AtomStringImpl *)v232, v99, v100, v101, v102, v103, v104);
              WTF::fastFree(v366, v367, v368, v369, v370, v371, v372, v373);
            }
            else
            {
              *v224 -= 2;
            }
          }
          v292 = (WTF::StringImpl *)v945.i64[1];
          v945.i64[1] = 0;
          if (v292)
          {
            if (*(_DWORD *)v292 == 2)
            {
              WTF::StringImpl::~StringImpl(v292, (WTF::AtomStringImpl *)v232, v99, v100, v101, v102, v103, v104);
              WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
            }
            else
            {
              *(_DWORD *)v292 -= 2;
            }
          }
          v293 = (WTF::StringImpl *)v945.i64[0];
          v945.i64[0] = 0;
          if (v293)
          {
            if (*(_DWORD *)v293 == 2)
            {
              WTF::StringImpl::~StringImpl(v293, (WTF::AtomStringImpl *)v232, v99, v100, v101, v102, v103, v104);
              WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
            }
            else
            {
              *(_DWORD *)v293 -= 2;
            }
          }
          v201 = *(_QWORD *)v111;
LABEL_349:
          v294 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C) + 0xC8))();
          v301 = v294;
          v302 = 0;
          v303 = v111[2];
          v304 = v933;
          v305 = v303;
          do
          {
            ++v302;
            v306 = v305 > 9;
            v305 /= 0xAu;
          }
          while (v306);
          v307 = 0;
          v308 = v294;
          do
          {
            ++v307;
            v306 = v308 > 9;
            v308 /= 0xAuLL;
          }
          while (v306);
          v309 = 0;
          v310 = v200;
          do
          {
            ++v309;
            v306 = v310 > 9;
            v310 /= 0xAu;
          }
          while (v306);
          v311 = 1;
          v312 = v170;
          do
          {
            ++v311;
            v306 = v312 > 9;
            v312 /= 0xAu;
          }
          while (v306);
          if (!v311)
            v311 = -1;
          v236 = __CFADD__(v311, v309);
          v313 = v311 + v309;
          v314 = v236;
          v236 = __CFADD__(v313, 1);
          v315 = v313 + 1;
          v316 = v236;
          if ((v314 & 1) != 0 || v316)
            v315 = -1;
          v236 = __CFADD__(v315, v307);
          v317 = v315 + v307;
          v318 = v236;
          v236 = __CFADD__(v317, 1);
          v319 = v317 + 1;
          v320 = v236;
          if ((v318 & 1) != 0 || v320)
            v319 = -1;
          v236 = __CFADD__(v319, v302);
          v321 = v319 + v302;
          v322 = v236;
          v236 = __CFADD__(v321, 1);
          v323 = v321 + 1;
          v324 = v236;
          if ((v322 & 1) != 0 || v324)
            v323 = -1;
          v325 = v323 + v933;
          if (__CFADD__(v323, v933))
            v325 = 0xFFFFFFFFLL;
          if (!v932)
          {
            if (!v931)
              goto LABEL_445;
            v326 = *((_DWORD *)v931 + 4);
            if ((v326 & 4) != 0)
              goto LABEL_445;
LABEL_387:
            if ((v326 & 4) == 0)
            {
              v327 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)v325, v295, v296, v297, v298, v299, v300);
              v98 = 10;
              if (!v327)
                goto LABEL_468;
              goto LABEL_407;
            }
            if (v933)
            {
              v328 = v931;
              if (!v931)
                v328 = v932;
              v329 = (WTF::AtomStringImpl *)*((_QWORD *)v328 + 1);
              if (!v932)
              {
                if ((v933 & 0x80000000) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1985DCCE4);
                }
LABEL_398:
                v330 = 2 * v304;
                if (v330 >= 0x7FFFFFFF)
                  v330 = 0x7FFFFFFF;
                if (v330 <= v325)
                  v330 = v325;
                if (v330 <= 0x10)
                  v331 = 16;
                else
                  v331 = v330;
                WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>((uint64_t)&v931, v329, v331, v296, v297, v298, v299, v300);
                v332 = v933;
                v98 = 10;
                if ((v933 & 0x80000000) != 0)
                  goto LABEL_468;
                v333 = *((_QWORD *)v932 + 1);
                v933 = v325;
                v327 = (_WORD *)(v333 + 2 * v332);
                if (!v327)
                  goto LABEL_468;
LABEL_407:
                *v327 = 44;
                v334 = -1;
                v335 = 12;
                v336 = v303;
                do
                {
                  v337 = v334;
                  v945.i8[v335--] = (v336 % 0xA) | 0x30;
                  --v334;
                  v306 = v336 > 9;
                  v336 /= 0xAu;
                }
                while (v306);
                if (v335 + 2 <= 13)
                {
                  v338 = v327 + 1;
                  do
                  {
                    *v338++ = v945.u8[v337 + 13];
                    v236 = __CFADD__(v337++, 1);
                  }
                  while (!v236);
                }
                v339 = 0;
                v340 = 1;
                do
                {
                  v341 = v340;
                  ++v339;
                  ++v340;
                  v306 = v303 > 9;
                  v303 /= 0xAu;
                }
                while (v306);
                v342 = &v327[v339 + 1];
                *v342 = 44;
                v343 = -1;
                v344 = 24;
                v345 = v301;
                do
                {
                  v346 = v343;
                  v945.i8[v344--] = (v345 % 0xA) | 0x30;
                  --v343;
                  v306 = v345 > 9;
                  v345 /= 0xAuLL;
                }
                while (v306);
                v347 = v342 + 1;
                if (v344 + 2 <= 25)
                {
                  v348 = v347;
                  do
                  {
                    *v348++ = *((unsigned __int8 *)&v947 + v346 + 1);
                    v236 = __CFADD__(v346++, 1);
                  }
                  while (!v236);
                }
                v349 = 0;
                v350 = 1;
                do
                {
                  v351 = v350;
                  ++v349;
                  ++v350;
                  v306 = v301 > 9;
                  v301 /= 0xAuLL;
                }
                while (v306);
                v352 = &v347[v349];
                *v352 = 44;
                v353 = -1;
                v354 = 12;
                v355 = v200;
                do
                {
                  v356 = v353;
                  v945.i8[v354--] = (v355 % 0xA) | 0x30;
                  --v353;
                  v306 = v355 > 9;
                  v355 /= 0xAu;
                }
                while (v306);
                v357 = v352 + 1;
                if (v354 + 2 <= 13)
                {
                  v358 = v357;
                  do
                  {
                    *v358++ = v945.u8[v356 + 13];
                    v236 = __CFADD__(v356++, 1);
                  }
                  while (!v236);
                }
                v359 = 0;
                v360 = 1;
                do
                {
                  v361 = v360;
                  ++v359;
                  ++v360;
                  v306 = v200 > 9;
                  v200 /= 0xAu;
                }
                while (v306);
                v357[v359] = 44;
                v362 = -1;
                v363 = 12;
                do
                {
                  v364 = v362;
                  v945.i8[v363--] = (v170 % 0xA) | 0x30;
                  --v362;
                  v306 = v170 > 9;
                  v170 /= 0xAu;
                }
                while (v306);
                if (v363 + 2 <= 13)
                {
                  v365 = &v327[v341 + 4 + v351 + v361];
                  do
                  {
                    *v365++ = v945.u8[v364 + 13];
                    v236 = __CFADD__(v364++, 1);
                  }
                  while (!v236);
                }
                goto LABEL_468;
              }
            }
            else
            {
              v329 = 0;
              if (!v932)
              {
                v304 = 0;
                goto LABEL_398;
              }
            }
            v304 = *((_DWORD *)v932 + 1);
            goto LABEL_398;
          }
          v326 = *((_DWORD *)v932 + 4);
          if ((v326 & 4) == 0)
            goto LABEL_387;
LABEL_445:
          v398 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)v325, v295, v296, v297, v298, v299, v300);
          if (v398)
          {
            v399 = 0;
            *v398 = 44;
            v400 = v303;
            do
            {
              v945.i8[v399-- + 12] = (v400 % 0xA) | 0x30;
              v306 = v400 > 9;
              v400 /= 0xAu;
            }
            while (v306);
            v401 = v398 + 1;
            if (v399 + 14 <= 13)
              memcpy(v398 + 1, (char *)&v945.u64[1] + v399 + 5, -v399);
            v402 = 0;
            do
            {
              ++v402;
              v306 = v303 > 9;
              v303 /= 0xAu;
            }
            while (v306);
            v403 = 0;
            v404 = &v401[v402];
            *v404 = 44;
            v405 = v301;
            do
            {
              *((_BYTE *)&v947 + v403--) = (v405 % 0xA) | 0x30;
              v306 = v405 > 9;
              v405 /= 0xAuLL;
            }
            while (v306);
            v406 = v404 + 1;
            if (v403 + 26 <= 25)
              memcpy(v406, (char *)&v947 + v403 + 1, -v403);
            v407 = 0;
            do
            {
              ++v407;
              v306 = v301 > 9;
              v301 /= 0xAuLL;
            }
            while (v306);
            v408 = 0;
            v409 = &v406[v407];
            *v409 = 44;
            v410 = v200;
            do
            {
              v945.i8[v408-- + 12] = (v410 % 0xA) | 0x30;
              v306 = v410 > 9;
              v410 /= 0xAu;
            }
            while (v306);
            v411 = v409 + 1;
            if (v408 + 14 <= 13)
              memcpy(v411, (char *)&v945.u64[1] + v408 + 5, -v408);
            v412 = 0;
            do
            {
              ++v412;
              v306 = v200 > 9;
              v200 /= 0xAu;
            }
            while (v306);
            v413 = 0;
            v414 = &v411[v412];
            *v414 = 44;
            do
            {
              v945.i8[v413-- + 12] = (v170 % 0xA) | 0x30;
              v306 = v170 > 9;
              v170 /= 0xAu;
            }
            while (v306);
            if (v413 + 14 <= 13)
              memcpy(v414 + 1, (char *)&v945.u64[1] + v413 + 5, -v413);
          }
LABEL_468:
          if (*(_DWORD *)(v195 + 88) == 1)
          {
            v415 = 0;
            v416 = *(_QWORD *)v111;
            do
            {
              v945.i8[v415-- + 15] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v416 & 0xF];
              v306 = v416 > 0xF;
              v416 >>= 4;
            }
            while (v306);
            if ((uint64_t)(v415 + 17) <= 17)
            {
              v417 = &v946 + v415;
            }
            else
            {
              memset(&v946, 48, v415);
              v417 = &v946;
            }
            v418 = 0;
            v419 = &v946 - v417;
            LODWORD(v946) = v419;
            do
            {
              v943.i8[v418-- + 15] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v211 & 0xF];
              v306 = v211 > 0xF;
              v211 >>= 4;
            }
            while (v306);
            if ((uint64_t)(v418 + 17) <= 17)
            {
              p_n = &__n + v418;
            }
            else
            {
              memset(&__n, 48, v418);
              p_n = &__n;
            }
            v421 = v927;
            v422 = 0;
            v423 = &__n - p_n;
            LODWORD(__n) = v423;
            v424 = v927;
            do
            {
              ++v422;
              v306 = v424 > 9;
              v424 /= 0xAu;
            }
            while (v306);
            v236 = __CFADD__(v423, 6);
            v425 = v423 + 6;
            if (v236)
              v425 = -1;
            v236 = __CFADD__(v425, v419);
            v426 = v425 + v419;
            if (v236 || v426 >= 0xFFFFFFFC)
              v427 = -1;
            else
              v427 = v426 + 4;
            v236 = __CFADD__(v427, v422);
            v428 = v427 + v422;
            v429 = v236;
            v236 = __CFADD__(v428, 1);
            v430 = v428 + 1;
            v431 = v236;
            if ((v429 & 1) != 0 || v431)
              v430 = -1;
            v432 = v430 + v933;
            if (__CFADD__(v430, v933))
              v432 = 0xFFFFFFFFLL;
            v433 = v932;
            if ((v932 || (v433 = v931) != 0) && (*((_BYTE *)v433 + 16) & 4) == 0)
            {
              v434 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v931, (WTF::AtomStringImpl *)v432, v418, v100, v101, v102, v103, v104);
              if (v434)
              {
                *v434 = 44;
                v435 = -1;
                v436 = 12;
                v437 = v927;
                do
                {
                  v438 = v435;
                  *((_BYTE *)v957 + v436--) = (v437 % 0xA) | 0x30;
                  --v435;
                  v306 = v437 > 9;
                  v437 /= 0xAu;
                }
                while (v306);
                if (v436 + 2 <= 13)
                {
                  v439 = v434 + 1;
                  do
                  {
                    *v439++ = *((unsigned __int8 *)&v957[1] + v438 + 5);
                    v236 = __CFADD__(v438++, 1);
                  }
                  while (!v236);
                }
                v440 = 0;
                do
                {
                  ++v440;
                  v306 = v421 > 9;
                  v421 /= 0xAu;
                }
                while (v306);
                v441 = &v434[v440 + 1];
                *v441 = 0x7800300022002CLL;
                v442 = (char *)(v441 + 1);
                v443 = v946;
                v444 = (_OWORD *)((char *)&v946 - v946);
                if (v946 >= 0x40)
                {
                  v445 = &v442[2 * (v946 & 0xFFFFFFC0)];
                  v455 = v442;
                  do
                  {
                    v105 = *(__n128 *)v444;
                    v456 = *((int8x16_t *)v444 + 1);
                    v959.val[0] = (int8x16_t)v444[2];
                    v457 = *((int8x16_t *)v444 + 3);
                    v444 += 4;
                    v965.val[1] = 0u;
                    v965.val[0] = v457;
                    v959.val[1] = 0u;
                    v962.val[0] = v456;
                    v458 = 0u;
                    v459 = v455;
                    vst2q_s8(v459, *(int8x16x2_t *)v105.n128_u64);
                    v459 += 32;
                    v962.val[1] = 0u;
                    vst2q_s8(v459, v962);
                    v460 = v455 + 64;
                    vst2q_s8(v460, v959);
                    v461 = v455 + 96;
                    vst2q_s8(v461, v965);
                    v455 += 128;
                  }
                  while (v455 != v445);
                }
                else
                {
                  v445 = v442;
                }
                v446 = &v442[2 * v443];
                while (v445 != v446)
                {
                  v447 = *(unsigned __int8 *)v444;
                  v444 = (_OWORD *)((char *)v444 + 1);
                  *(_WORD *)v445 = v447;
                  v445 += 2;
                }
                v448 = &v442[2 * v946];
                *(_QWORD *)v448 = 0x300022002C0022;
                *((_WORD *)v448 + 4) = 120;
                v449 = v448 + 10;
                v450 = __n;
                v451 = (_OWORD *)((char *)&__n - __n);
                if (__n >= 0x40)
                {
                  v452 = &v449[2 * (__n & 0xFFFFFFC0)];
                  v462 = v449;
                  do
                  {
                    v105 = *(__n128 *)v451;
                    v463 = *((int8x16_t *)v451 + 1);
                    v960.val[0] = (int8x16_t)v451[2];
                    v464 = *((int8x16_t *)v451 + 3);
                    v451 += 4;
                    v963.val[0] = v464;
                    v960.val[1] = 0u;
                    v966.val[0] = v463;
                    v465 = 0u;
                    v466 = v462;
                    vst2q_s8(v466, *(int8x16x2_t *)v105.n128_u64);
                    v466 += 32;
                    v963.val[1] = 0u;
                    v966.val[1] = 0u;
                    vst2q_s8(v466, v966);
                    v467 = v462 + 64;
                    vst2q_s8(v467, v960);
                    v468 = v462 + 96;
                    v462 += 128;
                    vst2q_s8(v468, v963);
                  }
                  while (v462 != v452);
                }
                else
                {
                  v452 = v449;
                }
                v453 = &v449[2 * v450];
                while (v452 != v453)
                {
                  v454 = *(unsigned __int8 *)v451;
                  v451 = (_OWORD *)((char *)v451 + 1);
                  *(_WORD *)v452 = v454;
                  v452 += 2;
                }
                *(_WORD *)&v449[2 * __n] = 34;
              }
            }
            else
            {
              v469 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)v432, v418, v100, v101, v102, v103, v104);
              if (v469)
              {
                v470 = 0;
                *v469 = 44;
                v471 = v927;
                do
                {
                  *((_BYTE *)&v957[1] + v470-- + 4) = (v471 % 0xA) | 0x30;
                  v306 = v471 > 9;
                  v471 /= 0xAu;
                }
                while (v306);
                v472 = v469 + 1;
                if (v470 + 14 <= 13)
                  memcpy(v469 + 1, (char *)&v957[1] + v470 + 5, -v470);
                v473 = 0;
                do
                {
                  ++v473;
                  v306 = v421 > 9;
                  v421 /= 0xAu;
                }
                while (v306);
                v474 = &v472[v473];
                *v474 = 2016420396;
                v475 = v474 + 1;
                v476 = (char *)&v946 - v946;
                if ((_DWORD)v946 == 1)
                {
                  *v475 = *v476;
                }
                else if ((_DWORD)v946)
                {
                  memcpy(v475, v476, v946);
                }
                v477 = &v475[v946];
                v477[4] = 120;
                *(_DWORD *)v477 = 807545890;
                v478 = v477 + 5;
                v99 = __n;
                v98 = (unint64_t)&__n - __n;
                if ((_DWORD)__n == 1)
                {
                  *v478 = *(_BYTE *)v98;
                }
                else if ((_DWORD)__n)
                {
                  memcpy(v477 + 5, (const void *)v98, __n);
                }
                v478[__n] = 34;
              }
            }
          }
          if (v151)
          {
            a2 = v922;
            if (*v151 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v151, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
              WTF::fastFree(v479, v480, v481, v482, v483, v484, v485, v486);
            }
            else
            {
              *v151 -= 2;
            }
          }
          else
          {
            a2 = v922;
          }
          v112 = v923;
LABEL_546:
          v111 += 4;
          v109 = v124;
        }
        while (v111 != (_DWORD *)v112);
LABEL_600:
        v108 = *(_QWORD *)(v921 + 24);
        v109 = v124;
        if (!v108)
          goto LABEL_603;
      }
    }
  }
  v124 = 0;
LABEL_603:
  v945.i8[0] = 93;
  if (v932 && ((v508 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v509 = v931 == 0) : (v509 = 0), v509))
  {
    v510 = *((_DWORD *)v932 + 4);
    v511 = *((_QWORD *)v932 + 1);
    v512 = ++v933;
    if ((v510 & 4) != 0)
    {
      *(_BYTE *)(v511 + v508) = 93;
      goto LABEL_611;
    }
    *(_WORD *)(v511 + 2 * v508) = 93;
    if ((v512 & 0x80000000) == 0)
    {
LABEL_612:
      v513 = v932;
      if ((v932 || (v513 = v931) != 0) && (*((_BYTE *)v513 + 16) & 4) == 0)
      {
        v514 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)(v512 + 19), v99, v100, v101, v102, v103, v104);
        if (v514)
        {
          v105 = (__n128)xmmword_199156830;
          *(_OWORD *)v514 = xmmword_199156830;
          *(_OWORD *)(v514 + 16) = xmmword_199156840;
          *(_DWORD *)(v514 + 32) = 3801122;
          *(_WORD *)(v514 + 36) = 91;
        }
      }
      else
      {
        v515 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)(v512 + 19), v99, v100, v101, v102, v103, v104);
        if (v515)
        {
          *(_DWORD *)(v515 + 15) = 1530536563;
          v105 = *(__n128 *)",\"nodeClassNames\":[";
          *(_OWORD *)v515 = *(_OWORD *)",\"nodeClassNames\":[";
        }
      }
    }
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v100, v101, v102, v103, v104);
LABEL_611:
    v512 = v933;
    if ((v933 & 0x80000000) == 0)
      goto LABEL_612;
  }
  v516 = (uint64_t)v939;
  if (v939)
  {
    v517 = *((unsigned int *)v939 - 3);
    v518 = 8 * v517;
    if (!(_DWORD)v517)
    {
      v519 = 0;
      goto LABEL_645;
    }
    if (v517 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1985DDCB0);
    }
    v519 = (char *)WTF::fastMalloc((WTF *)(8 * v517));
    bzero(v519, 8 * v517);
    v516 = (uint64_t)v939;
    if (!v939)
      goto LABEL_657;
    v520 = *((unsigned int *)v939 - 1);
    if (!*((_DWORD *)v939 - 3))
      goto LABEL_646;
    v521 = (uint64_t)v939;
    if ((_DWORD)v520)
    {
      v522 = 0;
      while ((unint64_t)v939[v522] + 1 <= 1)
      {
        v522 += 2;
        if (2 * v520 == v522)
          goto LABEL_644;
      }
      v521 = (uint64_t)&v939[v522];
    }
    v523 = &v939[2 * v520];
    if ((WTF::StringImpl **)v521 != v523)
    {
LABEL_632:
      v524 = *(unsigned int *)(v521 + 8);
      if (v517 <= v524)
      {
        __break(0xC471u);
        JUMPOUT(0x1985DDCD0);
      }
      v525 = *(_DWORD **)v521;
      if (*(_QWORD *)v521)
        *v525 += 2;
      v526 = *(WTF::StringImpl **)&v519[8 * v524];
      *(_QWORD *)&v519[8 * v524] = v525;
      if (v526)
      {
        if (*(_DWORD *)v526 == 2)
        {
          WTF::StringImpl::~StringImpl(v526, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
          WTF::fastFree(v527, v528, v529, v530, v531, v532, v533, v534);
        }
        else
        {
          *(_DWORD *)v526 -= 2;
        }
      }
      while (1)
      {
        v521 += 16;
        if ((WTF::StringImpl **)v521 == v523)
          break;
        if ((unint64_t)(*(_QWORD *)v521 + 1) > 1)
        {
          if ((WTF::StringImpl **)v521 != v523)
            goto LABEL_632;
          break;
        }
      }
      v516 = (uint64_t)v939;
    }
LABEL_644:
    v195 = v925;
    if (v516)
    {
LABEL_645:
      LODWORD(v520) = *(_DWORD *)(v516 - 4);
LABEL_646:
      v939 = 0;
      if ((_DWORD)v520)
      {
        v535 = v520;
        v536 = (WTF::StringImpl **)v516;
        do
        {
          v537 = *v536;
          if (*v536 != (WTF::StringImpl *)-1)
          {
            *v536 = 0;
            if (v537)
            {
              if (*(_DWORD *)v537 == 2)
              {
                WTF::StringImpl::~StringImpl(v537, (WTF::AtomStringImpl *)v98, v99, v100, v101, v102, v103, v104);
                WTF::fastFree(v538, v539, v540, v541, v542, v543, v544, v545);
              }
              else
              {
                *(_DWORD *)v537 -= 2;
              }
            }
          }
          v536 += 2;
          --v535;
        }
        while (v535);
      }
      WTF::fastFree(v516 - 16, (void *)v98, v99, v100, v101, v102, v103, v104);
    }
    if ((_DWORD)v517)
    {
LABEL_657:
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v931, (const WTF::String *)v519, v99, v100, v101, v102, v103, v104);
      if ((_DWORD)v517 != 1)
      {
        v629 = (const WTF::String *)(v519 + 8);
        v630 = v518 - 8;
        do
        {
          v945.i8[0] = 44;
          if (v932 && ((v631 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v632 = v931 == 0) : (v632 = 0), v632))
          {
            v633 = *((_DWORD *)v932 + 4);
            v634 = *((_QWORD *)v932 + 1);
            ++v933;
            if ((v633 & 4) != 0)
              *(_BYTE *)(v634 + v631) = 44;
            else
              *(_WORD *)(v634 + 2 * v631) = 44;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v548, v549, v550, v551, v552);
          }
          WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v931, v629, v547, v548, v549, v550, v551, v552);
          v629 = (const WTF::String *)((char *)v629 + 8);
          v630 -= 8;
        }
        while (v630);
      }
      v553 = 0;
      do
      {
        v554 = *(WTF::StringImpl **)&v519[v553];
        *(_QWORD *)&v519[v553] = 0;
        if (v554)
        {
          if (*(_DWORD *)v554 == 2)
          {
            WTF::StringImpl::~StringImpl(v554, v546, v547, v548, v549, v550, v551, v552);
            WTF::fastFree(v555, v556, v557, v558, v559, v560, v561, v562);
          }
          else
          {
            *(_DWORD *)v554 -= 2;
          }
        }
        v553 += 8;
      }
      while (v518 != v553);
      WTF::fastFree((unint64_t)v519, v546, v547, v548, v549, v550, v551, v552);
      goto LABEL_665;
    }
  }
  else
  {
LABEL_665:
    v519 = 0;
  }
  v945.i8[0] = 93;
  if (v932 && ((v563 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v564 = v931 == 0) : (v564 = 0), v564))
  {
    v565 = *((_DWORD *)v932 + 4);
    v566 = *((_QWORD *)v932 + 1);
    ++v933;
    if ((v565 & 4) != 0)
      *(_BYTE *)(v566 + v563) = 93;
    else
      *(_WORD *)(v566 + 2 * v563) = 93;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v100, v101, v102, v103, v104);
  }
  v567 = *(__n128 **)(v195 + 40);
  v568 = *(unsigned int *)(v195 + 52);
  v569 = &v567[2 * v568];
  if ((_DWORD)v568)
  {
    v570 = 0;
    v571 = &v567[2 * v568];
    v572 = v571;
    while (1)
    {
      v573 = v567->n128_u64[0];
      if (v567->n128_u64[0])
      {
        if (!v124)
          goto LABEL_685;
        v574 = *(v124 - 2);
        v575 = (~(v573 << 32) + v573) ^ ((~(v573 << 32) + v573) >> 22);
        v576 = 9 * ((v575 + ~(v575 << 13)) ^ ((v575 + ~(v575 << 13)) >> 8));
        v577 = (v576 ^ (v576 >> 15)) + ~((v576 ^ (v576 >> 15)) << 27);
        v578 = v574 & ((v577 >> 31) ^ v577);
        v579 = *(_QWORD *)&v124[4 * v578];
        if (v579 != v573)
        {
          v580 = 1;
          while (v579)
          {
            v578 = ((_DWORD)v578 + v580) & v574;
            v579 = *(_QWORD *)&v124[4 * v578];
            ++v580;
            if (v579 == v573)
              goto LABEL_684;
          }
          v578 = *(v124 - 1);
        }
LABEL_684:
        if (v578 == *(v124 - 1))
        {
LABEL_685:
          if (*(_DWORD *)(v925 + 88) == 1 && HIBYTE(dword_1ECF4C358) != 0)
            WTFLogAlways("Failed to find node for from-edge cell %p", v98, v99, v100, v101, v102, v103, v104, v567->n128_u64[0]);
LABEL_706:
          v591 = v567;
          if (v572 != (__n128 *)(*(_QWORD *)(v925 + 40) + 32 * *(unsigned int *)(v925 + 52)))
          {
            if (v571 == v567)
            {
              v591 = v572;
            }
            else
            {
              if (v571 <= v572)
              {
                v596 = 0;
                v595 = ((char *)v567 - (char *)v571) >> 5;
                do
                {
                  v597 = (__n128 *)((char *)v572
                                  + (((char *)v567 - (char *)v571) & 0xFFFFFFFFFFFFFFE0)
                                  + v596 * 16
                                  - 32);
                  v105 = v567[v596 - 2];
                  v598 = v567[v596 - 1];
                  *v597 = v105;
                  v597[1] = v598;
                  v596 -= 2;
                }
                while (&v567[v596] != v571);
              }
              else
              {
                v592 = v572;
                v593 = v571;
                do
                {
                  v105 = *v593;
                  v594 = v593[1];
                  v593 += 2;
                  *v592 = v105;
                  v592[1] = v594;
                  v592 += 2;
                }
                while (v593 != v567);
                v595 = ((char *)v567 - (char *)v571) >> 5;
              }
              v591 = &v572[2 * v595];
            }
          }
          v571 = v567 + 2;
          ++v570;
          v572 = v591;
          goto LABEL_718;
        }
        LODWORD(v573) = v124[4 * v578 + 2];
      }
      v567->n128_u32[0] = v573;
      v582 = v567->n128_u64[1];
      if (v582)
      {
        if (!v124)
          goto LABEL_701;
        v583 = *(v124 - 2);
        v584 = (~(v582 << 32) + v582) ^ ((~(v582 << 32) + v582) >> 22);
        v585 = 9 * ((v584 + ~(v584 << 13)) ^ ((v584 + ~(v584 << 13)) >> 8));
        v586 = (v585 ^ (v585 >> 15)) + ~((v585 ^ (v585 >> 15)) << 27);
        v587 = v583 & ((v586 >> 31) ^ v586);
        v588 = *(_QWORD *)&v124[4 * v587];
        if (v588 != v582)
        {
          v589 = 1;
          while (v588)
          {
            v587 = ((_DWORD)v587 + v589) & v583;
            v588 = *(_QWORD *)&v124[4 * v587];
            ++v589;
            if (v588 == v582)
              goto LABEL_700;
          }
          v587 = *(v124 - 1);
        }
LABEL_700:
        if (v587 == *(v124 - 1))
        {
LABEL_701:
          if (*(_DWORD *)(v925 + 88) == 1 && HIBYTE(dword_1ECF4C358) != 0)
            WTFLogAlways("Failed to find node for to-edge cell %p", v98, v99, v100, v101, v102, v103, v104, v567->n128_u64[1]);
          goto LABEL_706;
        }
        v567->n128_u32[2] = v124[4 * v587 + 2];
      }
      else
      {
        v567->n128_u32[2] = 0;
      }
LABEL_718:
      v567 += 2;
      if (v567 >= v569)
      {
        v567 = *(__n128 **)(v925 + 40);
        v599 = *(unsigned int *)(v925 + 52);
        v569 = v572;
        goto LABEL_721;
      }
    }
  }
  v599 = 0;
  v570 = 0;
  v571 = v569;
LABEL_721:
  v600 = &v567[2 * v599];
  if (v571 != v600)
  {
    if (v571 <= v569)
    {
      v602 = (__n128 *)((char *)v569 + (((char *)v600 - (char *)v571) & 0xFFFFFFFFFFFFFFE0) - 32);
      do
      {
        v105 = v600[-2];
        v603 = v600[-1];
        *v602 = v105;
        v602[1] = v603;
        v602 -= 2;
        v600 -= 2;
      }
      while (v600 != v571);
    }
    else
    {
      do
      {
        v105 = *v571;
        v601 = v571[1];
        v571 += 2;
        *v569 = v105;
        v569[1] = v601;
        v569 += 2;
      }
      while (v571 != v600);
    }
  }
  v604 = *(_DWORD *)(v925 + 52) - v570;
  *(_DWORD *)(v925 + 52) = v604;
  if (v124)
  {
    WTF::fastFree((unint64_t)(v124 - 4), (void *)v98, v99, v100, v101, v102, v103, v104);
    v604 = *(_DWORD *)(v925 + 52);
  }
  v605 = *(_QWORD *)(v925 + 40);
  if (*(_DWORD *)(v925 + 48) > v604)
  {
    v606 = *(_QWORD *)(v925 + 40);
    if (v604)
    {
      if (v604 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1985DDCB8);
      }
      v607 = (WTF *)(32 * v604);
      v608 = (_OWORD *)WTF::fastMalloc(v607);
      *(_DWORD *)(v925 + 48) = v604;
      *(_QWORD *)(v925 + 40) = v608;
      v606 = v605;
      if (v608 != (_OWORD *)v605)
      {
        v609 = (__n128 *)v605;
        do
        {
          v105 = *v609;
          v610 = v609[1];
          v609 += 2;
          *v608 = v105;
          v608[1] = v610;
          v608 += 2;
          v607 = (WTF *)((char *)v607 - 32);
        }
        while (v607);
        v606 = *(_QWORD *)(v925 + 40);
      }
    }
    if (v605)
    {
      if (v606 == v605)
      {
        *(_QWORD *)(v925 + 40) = 0;
        *(_DWORD *)(v925 + 48) = 0;
      }
      WTF::fastFree(v605, (void *)v98, v99, v100, v101, v102, v103, v104);
      v605 = *(_QWORD *)(v925 + 40);
    }
    else
    {
      v605 = v606;
    }
  }
  v611 = *(unsigned int *)(v925 + 52);
  v612 = 126 - 2 * __clz(v611);
  if ((_DWORD)v611)
    v613 = v612;
  else
    v613 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *,false>(v605, (unsigned int *)(v605 + 32 * v611), v613, 1, v105);
  if ((v933 & 0x80000000) == 0)
  {
    v620 = v932;
    if ((v932 || (v620 = v931) != 0) && (*((_BYTE *)v620 + 16) & 4) == 0)
    {
      v621 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 10), v614, v615, v616, v617, v618, v619);
      if (v621)
      {
        *(_OWORD *)v621 = xmmword_199156850;
        *(_DWORD *)(v621 + 16) = 5963834;
      }
    }
    else
    {
      v622 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 10), v614, v615, v616, v617, v618, v619);
      if (v622)
      {
        *(_WORD *)(v622 + 8) = 23354;
        *(_QWORD *)v622 = *(_QWORD *)",\"edges\":[";
      }
    }
  }
  v623 = *(unsigned int *)(v925 + 52);
  if ((_DWORD)v623)
  {
    v624 = *(_QWORD *)(v925 + 40);
    v625 = *(_DWORD *)(v624 + 8);
    v626 = *(_BYTE *)(v624 + 24);
    v945.i32[0] = *(_DWORD *)v624;
    LOBYTE(v957[0]) = 44;
    v943.i32[0] = v625;
    v942 = 44;
    v941 = v626;
    v940 = 44;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v931, (unsigned int *)&v945, (char *)v957, (unsigned int *)&v943, &v942, &v941, &v940, v619);
    v627 = *(unsigned __int8 *)(v624 + 24);
    if (v627 == 1 || v627 == 3)
    {
      WTF::HashMap<WTF::UniquedStringImpl *,unsigned int,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(&v945, &v936, (uint64_t *)(v624 + 16), &v935, v616, v617, v618, v619);
      if ((_BYTE)v946)
        ++v935;
      v943.i32[0] = *(_DWORD *)(v945.i64[0] + 8);
      v628 = &v943;
LABEL_760:
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v931, (unsigned int *)v628, v614, v615, v616, v617, v618, v619);
    }
    else
    {
      if (v627 == 2)
      {
        v945.i32[0] = *(_DWORD *)(v624 + 16);
        v628 = &v945;
        goto LABEL_760;
      }
      v945.i8[0] = 48;
      if (!v932 || (v635 = v933, v933 >= *((_DWORD *)v932 + 1)) || v931)
      {
        WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v615, v616, v617, v618, v619);
      }
      else
      {
        v636 = *((_DWORD *)v932 + 4);
        v637 = *((_QWORD *)v932 + 1);
        ++v933;
        if ((v636 & 4) != 0)
          *(_BYTE *)(v637 + v635) = 48;
        else
          *(_WORD *)(v637 + 2 * v635) = 48;
      }
    }
    if ((_DWORD)v623 != 1)
    {
      v653 = 32 * v623;
      v654 = v935;
      v655 = v653 - 32;
      v656 = (unsigned __int8 *)(v624 + 56);
      while (1)
      {
        v945.i8[0] = 44;
        if (v932 && ((v657 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v658 = v931 == 0) : (v658 = 0), v658))
        {
          v659 = *((_DWORD *)v932 + 4);
          v660 = *((_QWORD *)v932 + 1);
          ++v933;
          if ((v659 & 4) != 0)
            *(_BYTE *)(v660 + v657) = 44;
          else
            *(_WORD *)(v660 + 2 * v657) = 44;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v615, v616, v617, v618, v619);
        }
        v661 = *v656;
        v945.i32[0] = *((_DWORD *)v656 - 6);
        LOBYTE(v957[0]) = 44;
        v943.i32[0] = *((_DWORD *)v656 - 4);
        v942 = 44;
        v941 = v661;
        v940 = 44;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v931, (unsigned int *)&v945, (char *)v957, (unsigned int *)&v943, &v942, &v941, &v940, v619);
        v662 = *v656;
        if (v662 == 3)
          goto LABEL_807;
        if (v662 != 2)
          break;
        v945.i32[0] = *((_DWORD *)v656 - 2);
        v663 = &v945;
LABEL_811:
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v931, (unsigned int *)v663, v614, v615, v616, v617, v618, v619);
LABEL_820:
        v656 += 32;
        v655 -= 32;
        if (!v655)
          goto LABEL_780;
      }
      if (v662 != 1)
      {
        v945.i8[0] = 48;
        if (v932 && ((v664 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v665 = v931 == 0) : (v665 = 0), v665))
        {
          v666 = *((_DWORD *)v932 + 4);
          v667 = *((_QWORD *)v932 + 1);
          ++v933;
          if ((v666 & 4) != 0)
            *(_BYTE *)(v667 + v664) = 48;
          else
            *(_WORD *)(v667 + 2 * v664) = 48;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v615, v616, v617, v618, v619);
        }
        goto LABEL_820;
      }
LABEL_807:
      WTF::HashMap<WTF::UniquedStringImpl *,unsigned int,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(&v945, &v936, (uint64_t *)v656 - 1, &v935, v616, v617, v618, v619);
      if ((_BYTE)v946)
        v935 = ++v654;
      v943.i32[0] = *(_DWORD *)(v945.i64[0] + 8);
      v663 = &v943;
      goto LABEL_811;
    }
  }
LABEL_780:
  v945.i8[0] = 93;
  if (v932 && ((v638 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v639 = v931 == 0) : (v639 = 0), v639))
  {
    v640 = *((_DWORD *)v932 + 4);
    v641 = *((_QWORD *)v932 + 1);
    v642 = ++v933;
    if ((v640 & 4) != 0)
    {
      *(_BYTE *)(v641 + v638) = 93;
      goto LABEL_788;
    }
    *(_WORD *)(v641 + 2 * v638) = 93;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v615, v616, v617, v618, v619);
LABEL_788:
    v642 = v933;
  }
  if (v642 >= 0xFFFFFFC9)
    v643 = 0xFFFFFFFFLL;
  else
    v643 = v642 + 55;
  v644 = v932;
  if ((v932 || (v644 = v931) != 0) && (*((_BYTE *)v644 + 16) & 4) == 0)
  {
    v645 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v931, (WTF::AtomStringImpl *)v643, v614, v615, v616, v617, v618, v619);
    if (v645)
    {
      *(_OWORD *)v645 = xmmword_199156860;
      *(_OWORD *)(v645 + 16) = xmmword_199156870;
      *(_OWORD *)(v645 + 32) = xmmword_199156880;
      *(_OWORD *)(v645 + 48) = xmmword_199156890;
      *(_OWORD *)(v645 + 64) = xmmword_1991568A0;
      *(_OWORD *)(v645 + 80) = xmmword_1991568B0;
      *(_WORD *)(v645 + 104) = 101;
      *(_QWORD *)(v645 + 96) = 0x6C006200610069;
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v645 + 106), (int8x16_t *)"\"]", 2);
    }
  }
  else
  {
    v668 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)v643, v614, v615, v616, v617, v618, v619);
    if (v668)
      qmemcpy(v668, ",\"edgeTypes\":[\"Internal\",\"Property\",\"Index\",\"Variable\"]", 55);
  }
  if ((v933 & 0x80000000) == 0)
  {
    v669 = v932;
    if ((v932 || (v669 = v931) != 0) && (*((_BYTE *)v669 + 16) & 4) == 0)
    {
      v670 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 14), v647, v648, v649, v650, v651, v652);
      if (v670)
      {
        *(_OWORD *)v670 = xmmword_1991568C0;
        *(_QWORD *)(v670 + 16) = 0x2200730065006DLL;
        *(_DWORD *)(v670 + 24) = 5963834;
      }
    }
    else
    {
      v671 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 14), v647, v648, v649, v650, v651, v652);
      if (v671)
        qmemcpy(v671, ",\"edgeNames\":[", 14);
    }
  }
  v672 = v936;
  if (v936)
  {
    v673 = *(unsigned int *)(v936 - 12);
    if (!(_DWORD)v673)
    {
      v675 = 0;
      goto LABEL_860;
    }
    if (v673 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1985DDCA8);
    }
    v674 = WTF::fastMalloc((WTF *)(8 * v673));
    v675 = (_QWORD *)v674;
    v672 = v936;
    if (!v936)
      goto LABEL_862;
    if (!*(_DWORD *)(v936 - 12))
      goto LABEL_860;
    v676 = *(unsigned int *)(v936 - 4);
    v677 = v936;
    if ((_DWORD)v676)
    {
      v678 = 0;
      while ((unint64_t)(*(_QWORD *)(v936 + v678) + 1) <= 1)
      {
        v678 += 16;
        if (16 * v676 == v678)
          goto LABEL_859;
      }
      v677 = v936 + v678;
    }
    v679 = v936 + 16 * v676;
    if (v677 != v679)
    {
LABEL_852:
      v680 = *(unsigned int *)(v677 + 8);
      if (v673 <= v680)
      {
        __break(0xC471u);
        JUMPOUT(0x1985DDCC0);
      }
      v681 = *(_QWORD *)v677;
      v677 += 16;
      *(_QWORD *)(v674 + 8 * v680) = v681;
      while (v677 != v679)
      {
        if ((unint64_t)(*(_QWORD *)v677 + 1) > 1)
        {
          if (v677 != v679)
            goto LABEL_852;
          break;
        }
        v677 += 16;
      }
      v672 = v936;
    }
LABEL_859:
    if (v672)
    {
LABEL_860:
      v936 = 0;
      WTF::fastFree(v672 - 16, v646, v647, v648, v649, v650, v651, v652);
    }
    if ((_DWORD)v673)
    {
LABEL_862:
      v682 = (_DWORD *)*v675;
      if (*v675)
        *v682 += 2;
      v945.i64[0] = (uint64_t)v682;
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v931, (const WTF::String *)&v945, v647, v648, v649, v650, v651, v652);
      v690 = (WTF::StringImpl *)v945.i64[0];
      v945.i64[0] = 0;
      if (v690)
      {
        if (*(_DWORD *)v690 == 2)
        {
          WTF::StringImpl::~StringImpl(v690, v683, v684, v685, v686, v687, v688, v689);
          WTF::fastFree(v788, v789, v790, v791, v792, v793, v794, v795);
        }
        else
        {
          *(_DWORD *)v690 -= 2;
        }
      }
      if ((_DWORD)v673 != 1)
      {
        v697 = (_DWORD **)(v675 + 1);
        v698 = 8 * v673 - 8;
        do
        {
          v945.i8[0] = 44;
          if (v932 && ((v699 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v700 = v931 == 0) : (v700 = 0), v700))
          {
            v701 = *((_DWORD *)v932 + 4);
            v702 = *((_QWORD *)v932 + 1);
            ++v933;
            if ((v701 & 4) != 0)
              *(_BYTE *)(v702 + v699) = 44;
            else
              *(_WORD *)(v702 + 2 * v699) = 44;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v685, v686, v687, v688, v689);
          }
          v703 = *v697;
          if (*v697)
            *v703 += 2;
          v945.i64[0] = (uint64_t)v703;
          WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v931, (const WTF::String *)&v945, v684, v685, v686, v687, v688, v689);
          v704 = (WTF::StringImpl *)v945.i64[0];
          v945.i64[0] = 0;
          if (v704)
          {
            if (*(_DWORD *)v704 == 2)
            {
              WTF::StringImpl::~StringImpl(v704, v683, v684, v685, v686, v687, v688, v689);
              WTF::fastFree(v705, v706, v707, v708, v709, v710, v711, v712);
            }
            else
            {
              *(_DWORD *)v704 -= 2;
            }
          }
          ++v697;
          v698 -= 8;
        }
        while (v698);
      }
      WTF::fastFree((unint64_t)v675, v683, v684, v685, v686, v687, v688, v689);
      goto LABEL_869;
    }
  }
  else
  {
LABEL_869:
    v675 = 0;
  }
  v945.i8[0] = 93;
  if (v932 && ((v691 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v692 = v931 == 0) : (v692 = 0), v692))
  {
    v693 = *((_DWORD *)v932 + 4);
    v694 = *((_QWORD *)v932 + 1);
    ++v933;
    if ((v693 & 4) != 0)
      *(_BYTE *)(v694 + v691) = 93;
    else
      *(_WORD *)(v694 + 2 * v691) = 93;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v648, v649, v650, v651, v652);
  }
  if (*(_DWORD *)(v925 + 88) != 1)
    goto LABEL_1078;
  if ((v933 & 0x80000000) == 0)
  {
    v695 = v932;
    if ((v932 || (v695 = v931) != 0) && (*((_BYTE *)v695 + 16) & 4) == 0)
    {
      v696 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 10), v647, v648, v649, v650, v651, v652);
      if (v696)
      {
        *(_OWORD *)v696 = xmmword_1991568D0;
        *(_DWORD *)(v696 + 16) = 5963834;
      }
    }
    else
    {
      v713 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 10), v647, v648, v649, v650, v651, v652);
      if (v713)
      {
        *(_WORD *)(v713 + 8) = 23354;
        *(_QWORD *)v713 = *(_QWORD *)",\"roots\":[";
      }
    }
  }
  v714 = *(_QWORD *)(v925 + 8);
  v715 = *(unsigned int *)(v714 + 20);
  if ((_DWORD)v715)
    v930 = *(_QWORD *)(*(_QWORD *)(v714 + 8) + 8 * v715 - 8);
  else
    v930 = 0;
  v716 = *(_QWORD *)(v925 + 56);
  if (!v716)
  {
    v719 = 0;
    v717 = 0;
LABEL_918:
    v718 = (uint64_t *)(v716 + 32 * v717);
    goto LABEL_919;
  }
  v717 = *(unsigned int *)(v716 - 4);
  v718 = (uint64_t *)(v716 + 32 * v717);
  if (!*(_DWORD *)(v716 - 12))
  {
    v719 = (uint64_t *)(v716 + 32 * v717);
    goto LABEL_918;
  }
  v719 = *(uint64_t **)(v925 + 56);
  if ((_DWORD)v717)
  {
    v720 = 32 * v717;
    v719 = *(uint64_t **)(v925 + 56);
    while ((unint64_t)(*v719 + 1) <= 1)
    {
      v719 += 4;
      v720 -= 32;
      if (!v720)
      {
        v719 = v718;
        break;
      }
    }
  }
LABEL_919:
  v928 = v519;
  v924 = v675;
  if (v716)
    v721 = (uint64_t *)(v716 + 32 * *(unsigned int *)(v716 - 4));
  else
    v721 = 0;
  if (v721 != v719)
  {
    v722 = v937;
    v723 = 1;
    do
    {
      v724 = *v719;
      if (*v719)
      {
        v726 = v719[1];
        v725 = v719[2];
        v727 = v930;
        v728 = *((unsigned __int8 *)v719 + 24);
        while (1)
        {
          if ((v724 & ~*(_QWORD *)(v727 + 16)) == 0)
          {
            v729 = *(_DWORD *)(v727 + 12);
            if (v729)
              break;
          }
LABEL_935:
          v727 = *(_QWORD *)(v727 + 24);
          if (!v727)
            goto LABEL_936;
        }
        v730 = 0;
        v731 = *(_DWORD *)(v727 + 12);
        while (1)
        {
          v732 = v730 + ((v731 - v730) >> 1);
          if (v729 <= v732)
          {
            __break(0xC471u);
            JUMPOUT(0x1985DDC74);
          }
          v733 = *(_QWORD *)(*(_QWORD *)v727 + 16 * (v730 + ((v731 - v730) >> 1)));
          if (v733 == v724)
            break;
          if (v733 <= v724)
            v730 = v732 + 1;
          else
            v731 = v730 + ((v731 - v730) >> 1);
          if (v730 == v731)
            goto LABEL_935;
        }
        v734 = *(_DWORD *)(*(_QWORD *)v727 + 16 * v732 + 8);
        if ((v723 & 1) == 0)
        {
          v945.i8[0] = 44;
          if (v932 && ((v735 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v736 = v931 == 0) : (v736 = 0), v736))
          {
            v737 = *((_DWORD *)v932 + 4);
            v738 = *((_QWORD *)v932 + 1);
            ++v933;
            if ((v737 & 4) != 0)
              *(_BYTE *)(v738 + v735) = 44;
            else
              *(_WORD *)(v738 + 2 * v735) = 44;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v648, v649, v650, v651, v652);
          }
        }
        v945.i32[0] = v734;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v931, (unsigned int *)&v945, v647, v648, v649, v650, v651, v652);
        switch(v728)
        {
          case 1:
            v739 = "ConservativeScan";
            goto LABEL_959;
          case 2:
            v739 = "ExecutableToCodeBlockEdges";
            v740 = 27;
            break;
          case 3:
            v739 = "ExternalRememberedSet";
            goto LABEL_965;
          case 4:
            v739 = "StrongReferences";
LABEL_959:
            v740 = 17;
            break;
          case 5:
            v739 = "ProtectedValues";
            goto LABEL_970;
          case 6:
            v739 = "MarkedJSValueRefArray";
LABEL_965:
            v740 = 22;
            break;
          case 7:
            v739 = "MarkListSet";
            goto LABEL_968;
          case 8:
            v739 = "VMExceptions";
            goto LABEL_961;
          case 9:
            v739 = "StrongHandles";
            v740 = 14;
            break;
          case 10:
            v739 = "Debugger";
            goto LABEL_955;
          case 11:
            v739 = "JITStubRoutines";
LABEL_970:
            v740 = 16;
            break;
          case 12:
            v739 = "WeakMapSpace";
LABEL_961:
            v740 = 13;
            break;
          case 13:
            v739 = "WeakSets";
LABEL_955:
            v740 = 9;
            break;
          case 14:
            v739 = "Output";
            v740 = 7;
            break;
          case 15:
            v739 = "JITWorkList";
            goto LABEL_968;
          case 16:
            v739 = "CodeBlocks";
            v740 = 11;
            break;
          case 17:
            v739 = "DOMGCOutput";
LABEL_968:
            v740 = 12;
            break;
          default:
            v739 = "None";
            v740 = 5;
            break;
        }
        v741 = v740 - 1;
        v742 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)v742 = 2;
        *(_DWORD *)(v742 + 4) = v741;
        *(_QWORD *)(v742 + 8) = v739;
        *(_DWORD *)(v742 + 16) = 4;
        v943.i64[0] = v742;
        WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>((uint64_t)&v945, (uint64_t *)&v938, (WTF::StringImpl **)&v943, &v937, v743, v744, v745, v746);
        if (v943.i64[0])
        {
          if (*(_DWORD *)v943.i64[0] == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v943.i64[0], v747, v748, v749, v750, v751, v752, v753);
            WTF::fastFree(v764, v765, v766, v767, v768, v769, v770, v771);
          }
          else
          {
            *(_DWORD *)v943.i64[0] -= 2;
          }
        }
        if ((_BYTE)v946)
          v937 = ++v722;
        LOBYTE(v957[0]) = 44;
        v943.i32[0] = *(_DWORD *)(v945.i64[0] + 8);
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v931, v957, (unsigned int *)&v943, v749, v750, v751, v752, v753);
        if (v725)
        {
          if (v725 == 1)
          {
            v759 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          else
          {
            v759 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
            *v759 = 2;
            v759[1] = v725 - 1;
            *((_QWORD *)v759 + 1) = v726;
            v759[4] = 4;
          }
          v957[0] = (WTF::StringImpl *)v759;
          WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>((uint64_t)&v943, (uint64_t *)&v938, v957, &v937, v755, v756, v757, v758);
          if (v957[0])
          {
            if (*(_DWORD *)v957[0] == 2)
            {
              WTF::StringImpl::~StringImpl(v957[0], v760, v761, v754, v755, v756, v757, v758);
              WTF::fastFree(v772, v773, v774, v775, v776, v777, v778, v779);
            }
            else
            {
              *(_DWORD *)v957[0] -= 2;
            }
          }
          if ((_BYTE)__n)
            v937 = ++v722;
          v762 = *(_DWORD *)(v943.i64[0] + 8);
        }
        else
        {
          v762 = 0;
        }
        LOBYTE(v957[0]) = 44;
        v943.i32[0] = v762;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v931, v957, (unsigned int *)&v943, v754, v755, v756, v757, v758);
        v723 = 0;
      }
      else
      {
        v780 = v930;
        do
          v780 = *(_QWORD *)(v780 + 24);
        while (v780);
LABEL_936:
        if (HIBYTE(dword_1ECF4C358))
          WTFLogAlways("Failed to find snapshot node for cell %p", (uint64_t)v646, v647, v648, v649, v650, v651, v652, *v719);
      }
      v763 = v719 + 4;
      v719 = v718;
      if (v763 != v718)
      {
        v719 = v763;
        while ((unint64_t)(*v719 + 1) <= 1)
        {
          v719 += 4;
          if (v719 == v718)
          {
            v719 = v718;
            break;
          }
        }
      }
    }
    while (v719 != v721);
  }
  v945.i8[0] = 93;
  if (v932 && ((v781 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v782 = v931 == 0) : (v782 = 0), v782))
  {
    v783 = *((_DWORD *)v932 + 4);
    v784 = *((_QWORD *)v932 + 1);
    ++v933;
    v675 = v924;
    v785 = v925;
    v519 = v928;
    if ((v783 & 4) != 0)
      *(_BYTE *)(v784 + v781) = 93;
    else
      *(_WORD *)(v784 + 2 * v781) = 93;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v648, v649, v650, v651, v652);
    v675 = v924;
    v785 = v925;
    v519 = v928;
  }
  if (*(_DWORD *)(v785 + 88) == 1)
  {
    if ((v933 & 0x80000000) == 0)
    {
      v786 = v932;
      if ((v932 || (v786 = v931) != 0) && (*((_BYTE *)v786 + 16) & 4) == 0)
      {
        v787 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 11), v647, v648, v649, v650, v651, v652);
        if (v787)
        {
          *(_OWORD *)v787 = xmmword_1991568E0;
          *(_DWORD *)(v787 + 16) = 3801122;
          *(_WORD *)(v787 + 20) = 91;
        }
      }
      else
      {
        v796 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)(v933 + 11), v647, v648, v649, v650, v651, v652);
        if (v796)
        {
          *(_DWORD *)(v796 + 7) = 1530536563;
          *(_QWORD *)v796 = *(_QWORD *)",\"labels\":[";
        }
      }
    }
    v797 = (uint64_t)v938;
    if (v938)
    {
      v798 = *((unsigned int *)v938 - 3);
      v799 = 8 * v798;
      if (!(_DWORD)v798)
      {
        v800 = 0;
        goto LABEL_1047;
      }
      if (v798 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1985DDCC8);
      }
      v800 = (char *)WTF::fastMalloc((WTF *)(8 * v798));
      bzero(v800, 8 * v798);
      v797 = (uint64_t)v938;
      if (!v938)
        goto LABEL_1059;
      v801 = *((unsigned int *)v938 - 1);
      if (!*((_DWORD *)v938 - 3))
        goto LABEL_1048;
      v802 = (uint64_t)v938;
      if ((_DWORD)v801)
      {
        v803 = 0;
        while ((unint64_t)v938[v803] + 1 <= 1)
        {
          v803 += 2;
          if (2 * v801 == v803)
            goto LABEL_1046;
        }
        v802 = (uint64_t)&v938[v803];
      }
      v804 = &v938[2 * v801];
      if ((WTF::StringImpl **)v802 != v804)
      {
LABEL_1034:
        v805 = *(unsigned int *)(v802 + 8);
        if (v798 <= v805)
        {
          __break(0xC471u);
          JUMPOUT(0x1985DDCD8);
        }
        v806 = *(_DWORD **)v802;
        if (*(_QWORD *)v802)
          *v806 += 2;
        v807 = *(WTF::StringImpl **)&v800[8 * v805];
        *(_QWORD *)&v800[8 * v805] = v806;
        if (v807)
        {
          if (*(_DWORD *)v807 == 2)
          {
            WTF::StringImpl::~StringImpl(v807, (WTF::AtomStringImpl *)v646, v647, v648, v649, v650, v651, v652);
            WTF::fastFree(v808, v809, v810, v811, v812, v813, v814, v815);
          }
          else
          {
            *(_DWORD *)v807 -= 2;
          }
        }
        while (1)
        {
          v802 += 16;
          if ((WTF::StringImpl **)v802 == v804)
            break;
          if ((unint64_t)(*(_QWORD *)v802 + 1) > 1)
          {
            if ((WTF::StringImpl **)v802 != v804)
              goto LABEL_1034;
            break;
          }
        }
        v797 = (uint64_t)v938;
      }
LABEL_1046:
      if (v797)
      {
LABEL_1047:
        LODWORD(v801) = *(_DWORD *)(v797 - 4);
LABEL_1048:
        v938 = 0;
        if ((_DWORD)v801)
        {
          v816 = v801;
          v817 = (WTF::StringImpl **)v797;
          do
          {
            v818 = *v817;
            if (*v817 != (WTF::StringImpl *)-1)
            {
              *v817 = 0;
              if (v818)
              {
                if (*(_DWORD *)v818 == 2)
                {
                  WTF::StringImpl::~StringImpl(v818, (WTF::AtomStringImpl *)v646, v647, v648, v649, v650, v651, v652);
                  WTF::fastFree(v819, v820, v821, v822, v823, v824, v825, v826);
                }
                else
                {
                  *(_DWORD *)v818 -= 2;
                }
              }
            }
            v817 += 2;
            --v816;
          }
          while (v816);
        }
        WTF::fastFree(v797 - 16, v646, v647, v648, v649, v650, v651, v652);
      }
      if ((_DWORD)v798)
      {
LABEL_1059:
        WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v931, (const WTF::String *)v800, v647, v648, v649, v650, v651, v652);
        if ((_DWORD)v798 != 1)
        {
          v874 = (const WTF::String *)(v800 + 8);
          v875 = v799 - 8;
          do
          {
            v945.i8[0] = 44;
            if (v932 && ((v876 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v877 = v931 == 0) : (v877 = 0), v877))
            {
              v878 = *((_DWORD *)v932 + 4);
              v879 = *((_QWORD *)v932 + 1);
              ++v933;
              if ((v878 & 4) != 0)
                *(_BYTE *)(v879 + v876) = 44;
              else
                *(_WORD *)(v879 + 2 * v876) = 44;
            }
            else
            {
              WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v829, v830, v831, v832, v833);
            }
            WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v931, v874, v828, v829, v830, v831, v832, v833);
            v874 = (const WTF::String *)((char *)v874 + 8);
            v875 -= 8;
          }
          while (v875);
        }
        v834 = 0;
        do
        {
          v835 = *(WTF::StringImpl **)&v800[v834];
          *(_QWORD *)&v800[v834] = 0;
          if (v835)
          {
            if (*(_DWORD *)v835 == 2)
            {
              WTF::StringImpl::~StringImpl(v835, v827, v828, v829, v830, v831, v832, v833);
              WTF::fastFree(v836, v837, v838, v839, v840, v841, v842, v843);
            }
            else
            {
              *(_DWORD *)v835 -= 2;
            }
          }
          v834 += 8;
        }
        while (v799 != v834);
        WTF::fastFree((unint64_t)v800, v827, v828, v829, v830, v831, v832, v833);
        goto LABEL_1067;
      }
    }
    else
    {
LABEL_1067:
      v800 = 0;
    }
    v945.i8[0] = 93;
    if (v932 && ((v844 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v845 = v931 == 0) : (v845 = 0), v845))
    {
      v846 = *((_DWORD *)v932 + 4);
      v847 = *((_QWORD *)v932 + 1);
      ++v933;
      if ((v846 & 4) != 0)
        *(_BYTE *)(v847 + v844) = 93;
      else
        *(_WORD *)(v847 + 2 * v844) = 93;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v648, v649, v650, v651, v652);
    }
    if (v800)
      WTF::fastFree((unint64_t)v800, v646, v647, v648, v649, v650, v651, v652);
  }
LABEL_1078:
  v945.i8[0] = 125;
  if (v932 && ((v848 = v933, v933 < *((_DWORD *)v932 + 1)) ? (v849 = v931 == 0) : (v849 = 0), v849))
  {
    v850 = *((_DWORD *)v932 + 4);
    v851 = *((_QWORD *)v932 + 1);
    ++v933;
    v852 = a3;
    if ((v850 & 4) != 0)
      *(_BYTE *)(v851 + v848) = 125;
    else
      *(_WORD *)(v851 + 2 * v848) = 125;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)&v931, &v945, 1uLL, v648, v649, v650, v651, v652);
    v852 = a3;
  }
  v853 = v931;
  if (v931)
    goto LABEL_1087;
  if ((v933 & 0x80000000) == 0 && v932 && *((_DWORD *)v932 + 1) > v933 + (v933 >> 2))
  {
    if ((*((_BYTE *)v932 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v931, (WTF::AtomStringImpl *)v933, v647, v648, v649, v650, v651, v652);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v931, (WTF::AtomStringImpl *)v933, v647, v648, v649, v650, v651, v652);
    v887 = v931;
    v931 = v932;
    v932 = 0;
    if (v887)
    {
      if (*(_DWORD *)v887 == 2)
      {
        WTF::StringImpl::~StringImpl(v887, v880, v881, v882, v883, v884, v885, v886);
        WTF::fastFree(v888, v889, v890, v891, v892, v893, v894, v895);
      }
      else
      {
        *(_DWORD *)v887 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v931);
  v853 = v931;
  if (v931)
LABEL_1087:
    *(_DWORD *)v853 += 2;
  *v852 = v853;
  if (v675)
    WTF::fastFree((unint64_t)v675, v646, v647, v648, v649, v650, v651, v652);
  if (v519)
    WTF::fastFree((unint64_t)v519, v646, v647, v648, v649, v650, v651, v652);
  v854 = v932;
  v932 = 0;
  if (v854)
  {
    if (*(_DWORD *)v854 == 2)
    {
      WTF::StringImpl::~StringImpl(v854, (WTF::AtomStringImpl *)v646, v647, v648, v649, v650, v651, v652);
      WTF::fastFree(v858, v859, v860, v861, v862, v863, v864, v865);
    }
    else
    {
      *(_DWORD *)v854 -= 2;
    }
  }
  v855 = v931;
  v931 = 0;
  if (v855)
  {
    if (*(_DWORD *)v855 == 2)
    {
      WTF::StringImpl::~StringImpl(v855, (WTF::AtomStringImpl *)v646, v647, v648, v649, v650, v651, v652);
      WTF::fastFree(v866, v867, v868, v869, v870, v871, v872, v873);
    }
    else
    {
      *(_DWORD *)v855 -= 2;
    }
  }
  if (v936)
    WTF::fastFree(v936 - 16, v646, v647, v648, v649, v650, v651, v652);
  v856 = (uint64_t)v938;
  if (v938)
  {
    v896 = *((unsigned int *)v938 - 1);
    if ((_DWORD)v896)
    {
      v897 = v938;
      do
      {
        v898 = *v897;
        if (*v897 != (WTF::StringImpl *)-1)
        {
          *v897 = 0;
          if (v898)
          {
            if (*(_DWORD *)v898 == 2)
            {
              WTF::StringImpl::~StringImpl(v898, (WTF::AtomStringImpl *)v646, v647, v648, v649, v650, v651, v652);
              WTF::fastFree(v899, v900, v901, v902, v903, v904, v905, v906);
            }
            else
            {
              *(_DWORD *)v898 -= 2;
            }
          }
        }
        v897 += 2;
        --v896;
      }
      while (v896);
    }
    WTF::fastFree(v856 - 16, v646, v647, v648, v649, v650, v651, v652);
  }
  v857 = (uint64_t)v939;
  if (v939)
  {
    v907 = *((unsigned int *)v939 - 1);
    if ((_DWORD)v907)
    {
      v908 = v939;
      do
      {
        v909 = *v908;
        if (*v908 != (WTF::StringImpl *)-1)
        {
          *v908 = 0;
          if (v909)
          {
            if (*(_DWORD *)v909 == 2)
            {
              WTF::StringImpl::~StringImpl(v909, (WTF::AtomStringImpl *)v646, v647, v648, v649, v650, v651, v652);
              WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
            }
            else
            {
              *(_DWORD *)v909 -= 2;
            }
          }
        }
        v908 += 2;
        --v907;
      }
      while (v907);
    }
    WTF::fastFree(v857 - 16, v646, v647, v648, v649, v650, v651, v652);
  }
  --*((_DWORD *)v926 + 229);
}

