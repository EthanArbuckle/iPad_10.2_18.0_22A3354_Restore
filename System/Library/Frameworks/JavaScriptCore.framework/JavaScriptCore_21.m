uint64_t JSC::BytecodeGenerator::emitBinaryOp<JSC::OpEq>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  v12 = a4;
  if ((JSC::OpEq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpEq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpEq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v18, v19, v20, v21);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitToString(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpToString::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpToString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpToString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitBinaryOp<JSC::OpAdd>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  char v106;

  v9 = a4;
  v10 = a3;
  v13 = *(_DWORD *)(a2 + 4);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned int *)(v14 + 288);
  *(_DWORD *)(v14 + 288) = v15 + 1;
  v16 = (v13 - 1073741808) < 0x80;
  if (v13 <= 0x3FFFFFFF)
    v16 = (v13 + 128) < 0x90;
  if (!v16)
    goto LABEL_60;
  v17 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v17 = (a3 + 128) < 0x90;
  if (!v17)
    goto LABEL_60;
  v18 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v18 = (a4 + 128) < 0x90;
  if (!v18
    || v15 > 0xFF
    || (BYTE1(a5) != 126 ? (v19 = BYTE1(a5) >= 0x10u) : (v19 = 0),
        v19 ? (v20 = 0) : (v20 = 1),
        a5 > 0xFu ? (v21 = a5 == 126) : (v21 = 1),
        !v21 || !v20))
  {
LABEL_60:
    if (v13 <= 0x3FFFFFFF)
      v51 = (v13 + 0x8000) >> 6 < 0x201;
    else
      v51 = (v13 - 1073741760) < 0x8000;
    if (!v51)
      goto LABEL_141;
    v52 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v52 = (a3 + 0x8000) >> 6 < 0x201;
    if (!v52)
      goto LABEL_141;
    v53 = (a4 - 1073741760) < 0x8000;
    if ((int)a4 <= 0x3FFFFFFF)
      v53 = (a4 + 0x8000) >> 6 < 0x201;
    if (!v53 || WORD1(v15))
    {
LABEL_141:
      JSC::OpAdd::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v13, a3, a4, v15, (unsigned __int16)a5, a7, a8);
      return a2;
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9D, a3, a4, a5, a6, a7, a8);
    v106 = 0x80;
    v54 = *(unsigned int *)(a1 + 12);
    v55 = *(unsigned int *)(a1 + 16);
    if (v54 > v55)
    {
      *(_DWORD *)(a1 + 16) = v55 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v55) = 0x80;
      v58 = *(_DWORD *)(a1 + 12);
      v59 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v54 == *(_DWORD *)(a1 + 8))
      {
        v100 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v106);
        v54 = *(unsigned int *)(a1 + 12);
        v56 = *(_QWORD *)a1;
        v57 = *v100;
      }
      else
      {
        v56 = *(_QWORD *)a1;
        v57 = 0x80;
      }
      *(_BYTE *)(v56 + v54) = v57;
      v58 = *(_DWORD *)(a1 + 12) + 1;
      v59 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v58;
      *(_DWORD *)(a1 + 16) = v59;
    }
    v60 = -99;
    v106 = -99;
    if (v58 > v59)
    {
      *(_DWORD *)(a1 + 16) = v59 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v59) = -99;
      v63 = *(_DWORD *)(a1 + 12);
      v64 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v61 = v58;
      if (v58 == *(_DWORD *)(a1 + 8))
      {
        v101 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v58 + 1), (unint64_t)&v106);
        v61 = *(unsigned int *)(a1 + 12);
        v62 = *(_QWORD *)a1;
        v60 = *v101;
      }
      else
      {
        v62 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v62 + v61) = v60;
      v63 = *(_DWORD *)(a1 + 12) + 1;
      v64 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v63;
      *(_DWORD *)(a1 + 16) = v64;
    }
    if (v13 > 0x3FFFFFFF)
      v13 += 64;
    v106 = v13;
    if (v63 > v64)
    {
      *(_DWORD *)(a1 + 16) = v64 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v64) = v13;
      v65 = *(_DWORD *)(a1 + 12);
      v66 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v63 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v63 + 1), (unint64_t)&v106);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v63) = v13;
      v65 = *(_DWORD *)(a1 + 12) + 1;
      v66 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v65;
      *(_DWORD *)(a1 + 16) = v66;
    }
    v67 = v13 >> 8;
    v106 = BYTE1(v13);
    if (v65 > v66)
    {
      *(_DWORD *)(a1 + 16) = v66 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v66) = BYTE1(v13);
      v70 = *(_DWORD *)(a1 + 12);
      v71 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v68 = v65;
      if (v65 == *(_DWORD *)(a1 + 8))
      {
        v102 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v106);
        v68 = *(unsigned int *)(a1 + 12);
        v69 = *(_QWORD *)a1;
        LOBYTE(v67) = *v102;
      }
      else
      {
        v69 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v69 + v68) = v67;
      v70 = *(_DWORD *)(a1 + 12) + 1;
      v71 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v70;
      *(_DWORD *)(a1 + 16) = v71;
    }
    if (v10 > 0x3FFFFFFF)
      v10 += 64;
    v106 = v10;
    if (v70 > v71)
    {
      *(_DWORD *)(a1 + 16) = v71 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v71) = v10;
      v72 = *(_DWORD *)(a1 + 12);
      v73 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v70 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v70 + 1), (unint64_t)&v106);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v70) = v10;
      v72 = *(_DWORD *)(a1 + 12) + 1;
      v73 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v72;
      *(_DWORD *)(a1 + 16) = v73;
    }
    v74 = v10 >> 8;
    v106 = BYTE1(v10);
    if (v72 > v73)
    {
      *(_DWORD *)(a1 + 16) = v73 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v73) = BYTE1(v10);
      v77 = *(_DWORD *)(a1 + 12);
      v78 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v75 = v72;
      if (v72 == *(_DWORD *)(a1 + 8))
      {
        v103 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v72 + 1), (unint64_t)&v106);
        v75 = *(unsigned int *)(a1 + 12);
        v76 = *(_QWORD *)a1;
        LOBYTE(v74) = *v103;
      }
      else
      {
        v76 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v76 + v75) = v74;
      v77 = *(_DWORD *)(a1 + 12) + 1;
      v78 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v77;
      *(_DWORD *)(a1 + 16) = v78;
    }
    if (v9 > 0x3FFFFFFF)
      v9 += 64;
    v106 = v9;
    if (v77 > v78)
    {
      *(_DWORD *)(a1 + 16) = v78 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v78) = v9;
      v79 = *(_DWORD *)(a1 + 12);
      v80 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v77 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v106);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v77) = v9;
      v79 = *(_DWORD *)(a1 + 12) + 1;
      v80 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v79;
      *(_DWORD *)(a1 + 16) = v80;
    }
    v81 = v9 >> 8;
    v106 = BYTE1(v9);
    if (v79 > v80)
    {
      *(_DWORD *)(a1 + 16) = v80 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v80) = BYTE1(v9);
      v84 = *(_DWORD *)(a1 + 12);
      v85 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v82 = v79;
      if (v79 == *(_DWORD *)(a1 + 8))
      {
        v104 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v106);
        v82 = *(unsigned int *)(a1 + 12);
        v83 = *(_QWORD *)a1;
        LOBYTE(v81) = *v104;
      }
      else
      {
        v83 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v83 + v82) = v81;
      v84 = *(_DWORD *)(a1 + 12) + 1;
      v85 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v84;
      *(_DWORD *)(a1 + 16) = v85;
    }
    v106 = v15;
    if (v84 > v85)
    {
      *(_DWORD *)(a1 + 16) = v85 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v85) = v15;
      v86 = *(_DWORD *)(a1 + 12);
      v87 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v84 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v106);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v84) = v15;
      v86 = *(_DWORD *)(a1 + 12) + 1;
      v87 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v86;
      *(_DWORD *)(a1 + 16) = v87;
    }
    v88 = v15 >> 8;
    v106 = BYTE1(v15);
    if (v86 > v87)
    {
      *(_DWORD *)(a1 + 16) = v87 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v87) = BYTE1(v15);
      v91 = *(_DWORD *)(a1 + 12);
      v92 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v89 = v86;
      if (v86 == *(_DWORD *)(a1 + 8))
      {
        v105 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v86 + 1), (unint64_t)&v106);
        v89 = *(unsigned int *)(a1 + 12);
        v90 = *(_QWORD *)a1;
        LOBYTE(v88) = *v105;
      }
      else
      {
        v90 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v90 + v89) = v88;
      v91 = *(_DWORD *)(a1 + 12) + 1;
      v92 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v91;
      *(_DWORD *)(a1 + 16) = v92;
    }
    v106 = a5;
    if (v91 > v92)
    {
      *(_DWORD *)(a1 + 16) = v92 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v92) = a5;
      v93 = *(_DWORD *)(a1 + 12);
      v94 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v91 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v91 + 1), (unint64_t)&v106);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v91) = a5;
      v93 = *(_DWORD *)(a1 + 12) + 1;
      v94 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v93;
      *(_DWORD *)(a1 + 16) = v94;
    }
    v106 = BYTE1(a5);
    if (v93 > v94)
    {
      *(_DWORD *)(a1 + 16) = v94 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v94) = BYTE1(a5);
      return a2;
    }
    v48 = v93;
    if (v93 != *(_DWORD *)(a1 + 8))
    {
      *(_BYTE *)(*(_QWORD *)a1 + v93) = BYTE1(a5);
      goto LABEL_58;
    }
    goto LABEL_124;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9D, a3, a4, a5, a6, a7, a8);
  v106 = -99;
  v22 = *(unsigned int *)(a1 + 12);
  v23 = *(unsigned int *)(a1 + 16);
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -99;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 8))
    {
      v96 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v106);
      v22 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v25 = *v96;
    }
    else
    {
      v24 = *(_QWORD *)a1;
      v25 = -99;
    }
    *(_BYTE *)(v24 + v22) = v25;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v13 + 16;
  if (v13 <= 0x3FFFFFFF)
    v28 = v13;
  v106 = v28;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v97 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v106);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      v28 = *v97;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v33 = v10;
  v106 = v33;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v33;
    v36 = *(_DWORD *)(a1 + 12);
    v37 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v98 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v106);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      v33 = *v98;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    v36 = *(_DWORD *)(a1 + 12) + 1;
    v37 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v36;
    *(_DWORD *)(a1 + 16) = v37;
  }
  v38 = v9 + 16;
  if (v9 <= 0x3FFFFFFF)
    v38 = v9;
  v106 = v38;
  if (v36 > v37)
  {
    *(_DWORD *)(a1 + 16) = v37 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v37) = v38;
    v41 = *(_DWORD *)(a1 + 12);
    v42 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v39 = v36;
    if (v36 == *(_DWORD *)(a1 + 8))
    {
      v99 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v106);
      v39 = *(unsigned int *)(a1 + 12);
      v40 = *(_QWORD *)a1;
      v38 = *v99;
    }
    else
    {
      v40 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v40 + v39) = v38;
    v41 = *(_DWORD *)(a1 + 12) + 1;
    v42 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v41;
    *(_DWORD *)(a1 + 16) = v42;
  }
  v106 = v15;
  if (v41 > v42)
  {
    *(_DWORD *)(a1 + 16) = v42 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v42) = v15;
    v43 = *(_DWORD *)(a1 + 12);
    v44 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v41 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v106);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v15;
    v43 = *(_DWORD *)(a1 + 12) + 1;
    v44 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v43;
    *(_DWORD *)(a1 + 16) = v44;
  }
  v45 = a5 >> 8;
  if (BYTE1(a5) == 126)
    LOBYTE(v45) = 0;
  if (a5 == 126)
    v46 = 0;
  else
    v46 = 16 * a5;
  v47 = v45 | v46;
  v106 = v47;
  if (v43 > v44)
  {
    *(_DWORD *)(a1 + 16) = v44 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v44) = v47;
    return a2;
  }
  v48 = v43;
  if (v43 == *(_DWORD *)(a1 + 8))
  {
LABEL_124:
    v95 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v106);
    v48 = *(unsigned int *)(a1 + 12);
    v49 = *(_QWORD *)a1;
    v47 = *v95;
    goto LABEL_57;
  }
  v49 = *(_QWORD *)a1;
LABEL_57:
  *(_BYTE *)(v49 + v48) = v47;
LABEL_58:
  *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitToObject(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a3;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = JSC::BytecodeGenerator::addConstant(a1, a4, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = (*(_DWORD *)(v13 + 8) + 1);
  *(_DWORD *)(v13 + 8) = v14;
  JSC::OpToObject::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v11, v8, v12, v14, v15, v16, v17);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitToNumber(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 292);
  *(_DWORD *)(v11 + 292) = v12 + 1;
  v13 = a3;
  if ((JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, v12, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v13, v12, v14, v15, v16, v17) & 1) == 0)
  {
    JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v13, v12, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitToNumeric(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 292);
  *(_DWORD *)(v11 + 292) = v12 + 1;
  v13 = a3;
  if ((JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, v12, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v13, v12, v14, v15, v16, v17) & 1) == 0)
  {
    JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v13, v12, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitInc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 292);
  *(_DWORD *)(v11 + 292) = v12 + 1;
  if (!JSC::OpInc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, v12, a4, a5, a6, a7, a8)
    && !JSC::OpInc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v12, v13, v14, v15, v16, v17))
  {
    JSC::OpInc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v12, v19, v20, v21, v22, v23);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitEqualityOpImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  char v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BOOL4 v95;
  _BOOL4 v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _BOOL4 v106;
  _BOOL4 v107;
  int v108;
  _BOOL4 v109;
  _BOOL4 v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BOOL4 v118;
  _BOOL4 v119;
  int v120;
  int v121;
  _BYTE *v122;
  char *v123;
  char *v124;
  _BOOL4 v125;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  char *v146;
  char *v147;
  _BYTE *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;

  if (*(_DWORD *)(result + 36) == 115)
    return 0;
  v10 = result;
  v11 = (unsigned __int8 *)(**(_QWORD **)(result + 40) + *(unsigned int *)(result + 48));
  v12 = *v11;
  v13 = v12;
  if ((v12 | 2) == 0x82)
    v13 = v11[1];
  if (v13 != 189)
    return 0;
  if (v12 == 128)
  {
    v14 = *((__int16 *)v11 + 1);
    if (v14 > 63)
      v14 += 1073741760;
    v15 = *((__int16 *)v11 + 2);
    v16 = v15 + 1073741760;
    v17 = v15 <= 63;
    goto LABEL_11;
  }
  if (v12 != 130)
  {
    v14 = (char)v11[1];
    if (v14 > 15)
      v14 += 1073741808;
    v15 = (char)v11[2];
    v16 = v15 + 1073741808;
    v17 = v15 <= 15;
LABEL_11:
    if (v17)
      v18 = v15;
    else
      v18 = v16;
    goto LABEL_14;
  }
  v14 = *(_DWORD *)(v11 + 2);
  v18 = *(_DWORD *)(v11 + 6);
LABEL_14:
  if (*(_DWORD *)(a3 + 4) != v14)
    return 0;
  if (!*(_BYTE *)(a3 + 8))
    return 0;
  v19 = *(_DWORD *)(a4 + 4);
  if (v19 < 0x40000000)
    return 0;
  v20 = *(_QWORD *)(result + 24);
  v21 = v19 - 0x40000000;
  if (v21 >= *(_DWORD *)(v20 + 60))
  {
    __break(0xC471u);
    return result;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v21);
  if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
    return 0;
  v23 = *(WTF::StringImpl **)(v22 + 8);
  if ((v23 & 1) != 0)
    v23 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v22, 0, a3, a4, a9, a5, a6, a7, a8);
  if (v23)
    *(_DWORD *)v23 += 2;
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"undefined", 9))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v94 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v94;
    *(_DWORD *)(v10 + 16) = v94;
    v69 = *(_DWORD *)(a2 + 4);
    v95 = (v69 - 1073741808) < 0x80;
    if (v69 <= 0x3FFFFFFF)
      v95 = (v69 + 128) < 0x90;
    if (!v95)
      goto LABEL_105;
    v96 = v18 - 1073741808 < 0x80;
    if ((int)v18 <= 0x3FFFFFFF)
      v96 = v18 + 128 < 0x90;
    if (!v96)
    {
LABEL_105:
      if (v69 <= 0x3FFFFFFF)
        v125 = (v69 + 0x8000) >> 6 < 0x201;
      else
        v125 = (v69 - 1073741760) < 0x8000;
      if (!v125)
        goto LABEL_158;
      v126 = v18 - 1073741760 < 0x8000;
      if ((int)v18 <= 0x3FFFFFFF)
        v126 = (v18 + 0x8000) >> 6 < 0x201;
      if (!v126)
      {
LABEL_158:
        JSC::OpTypeofIsUndefined::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v10, v69, v18, v25, v26, v27, v28, v29);
        goto LABEL_54;
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0xAB, v24, v25, v26, v27, v28, v29);
      v157 = 0x80;
      v127 = *(unsigned int *)(v10 + 12);
      v128 = *(unsigned int *)(v10 + 16);
      if (v127 > v128)
      {
        *(_DWORD *)(v10 + 16) = v128 + 1;
        *(_BYTE *)(*(_QWORD *)v10 + v128) = 0x80;
        v131 = *(_DWORD *)(v10 + 12);
        v132 = *(_DWORD *)(v10 + 16);
      }
      else
      {
        if ((_DWORD)v127 == *(_DWORD *)(v10 + 8))
        {
          v146 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v127 + 1), (unint64_t)&v157);
          v127 = *(unsigned int *)(v10 + 12);
          v129 = *(_QWORD *)v10;
          v130 = *v146;
        }
        else
        {
          v129 = *(_QWORD *)v10;
          v130 = 0x80;
        }
        *(_BYTE *)(v129 + v127) = v130;
        v131 = *(_DWORD *)(v10 + 12) + 1;
        v132 = *(_DWORD *)(v10 + 16) + 1;
        *(_DWORD *)(v10 + 12) = v131;
        *(_DWORD *)(v10 + 16) = v132;
      }
      v133 = -85;
      v157 = -85;
      if (v131 > v132)
      {
        *(_DWORD *)(v10 + 16) = v132 + 1;
        *(_BYTE *)(*(_QWORD *)v10 + v132) = -85;
        v136 = *(_DWORD *)(v10 + 12);
        v137 = *(_DWORD *)(v10 + 16);
      }
      else
      {
        v134 = v131;
        if (v131 == *(_DWORD *)(v10 + 8))
        {
          v147 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v131 + 1), (unint64_t)&v157);
          v134 = *(unsigned int *)(v10 + 12);
          v135 = *(_QWORD *)v10;
          v133 = *v147;
        }
        else
        {
          v135 = *(_QWORD *)v10;
        }
        *(_BYTE *)(v135 + v134) = v133;
        v136 = *(_DWORD *)(v10 + 12) + 1;
        v137 = *(_DWORD *)(v10 + 16) + 1;
        *(_DWORD *)(v10 + 12) = v136;
        *(_DWORD *)(v10 + 16) = v137;
      }
      if (v69 > 0x3FFFFFFF)
        v69 += 64;
      v157 = v69;
      if (v136 > v137)
      {
        *(_DWORD *)(v10 + 16) = v137 + 1;
        *(_BYTE *)(*(_QWORD *)v10 + v137) = v69;
        v138 = *(_DWORD *)(v10 + 12);
        v139 = *(_DWORD *)(v10 + 16);
      }
      else
      {
        if (v136 == *(_DWORD *)(v10 + 8))
          *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v136 + 1), (unint64_t)&v157);
        else
          *(_BYTE *)(*(_QWORD *)v10 + v136) = v69;
        v138 = *(_DWORD *)(v10 + 12) + 1;
        v139 = *(_DWORD *)(v10 + 16) + 1;
        *(_DWORD *)(v10 + 12) = v138;
        *(_DWORD *)(v10 + 16) = v139;
      }
      v140 = v69 >> 8;
      v157 = BYTE1(v69);
      if (v138 > v139)
      {
        *(_DWORD *)(v10 + 16) = v139 + 1;
        *(_BYTE *)(*(_QWORD *)v10 + v139) = BYTE1(v69);
        v143 = *(_DWORD *)(v10 + 12);
        v144 = *(_DWORD *)(v10 + 16);
      }
      else
      {
        v141 = v138;
        if (v138 == *(_DWORD *)(v10 + 8))
        {
          v148 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v138 + 1), (unint64_t)&v157);
          v141 = *(unsigned int *)(v10 + 12);
          v142 = *(_QWORD *)v10;
          LOBYTE(v140) = *v148;
        }
        else
        {
          v142 = *(_QWORD *)v10;
        }
        *(_BYTE *)(v142 + v141) = v140;
        v143 = *(_DWORD *)(v10 + 12) + 1;
        v144 = *(_DWORD *)(v10 + 16) + 1;
        *(_DWORD *)(v10 + 12) = v143;
        *(_DWORD *)(v10 + 16) = v144;
      }
      if ((int)v18 > 0x3FFFFFFF)
        v18 += 64;
      v157 = v18;
      if (v143 > v144)
      {
        *(_DWORD *)(v10 + 16) = v144 + 1;
        *(_BYTE *)(*(_QWORD *)v10 + v144) = v18;
        v89 = *(_DWORD *)(v10 + 12);
        v90 = *(_DWORD *)(v10 + 16);
      }
      else
      {
        if (v143 == *(_DWORD *)(v10 + 8))
          *(_BYTE *)(*(_QWORD *)v10 + *(unsigned int *)(v10 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v143 + 1), (unint64_t)&v157);
        else
          *(_BYTE *)(*(_QWORD *)v10 + v143) = v18;
        v89 = *(_DWORD *)(v10 + 12) + 1;
        v90 = *(_DWORD *)(v10 + 16) + 1;
        *(_DWORD *)(v10 + 12) = v89;
        *(_DWORD *)(v10 + 16) = v90;
      }
      v91 = v18 >> 8;
      goto LABEL_50;
    }
    v72 = -85;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0xAB, v24, v25, v26, v27, v28, v29);
    v157 = -85;
    v80 = *(unsigned int *)(v10 + 12);
    v81 = *(unsigned int *)(v10 + 16);
    if (v80 > v81)
      goto LABEL_160;
    if ((_DWORD)v80 != *(_DWORD *)(v10 + 8))
    {
      v82 = *(_QWORD *)v10;
      v83 = -85;
      goto LABEL_41;
    }
LABEL_103:
    v123 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v80 + 1), (unint64_t)&v157);
    v80 = *(unsigned int *)(v10 + 12);
    v82 = *(_QWORD *)v10;
    v83 = *v123;
    goto LABEL_41;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"BOOLean", 7))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v117 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v117;
    *(_DWORD *)(v10 + 16) = v117;
    v69 = *(_DWORD *)(a2 + 4);
    v118 = (v69 - 1073741808) < 0x80;
    if (v69 <= 0x3FFFFFFF)
      v118 = (v69 + 128) < 0x90;
    if (!v118)
      goto LABEL_156;
    v119 = v18 - 1073741808 < 0x80;
    if ((int)v18 <= 0x3FFFFFFF)
      v119 = v18 + 128 < 0x90;
    if (!v119)
    {
LABEL_156:
      if ((JSC::OpIsBoolean::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v10, v69, v18, v31, v32, v33, v34, v35) & 1) == 0)JSC::OpIsBoolean::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v10, v69, v18, v75, v76, v77, v78, v79);
      goto LABEL_54;
    }
    v72 = -81;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0xAF, v30, v31, v32, v33, v34, v35);
    v157 = -81;
    v80 = *(unsigned int *)(v10 + 12);
    v81 = *(unsigned int *)(v10 + 16);
    if (v80 <= v81)
    {
      if ((_DWORD)v80 != *(_DWORD *)(v10 + 8))
      {
        v82 = *(_QWORD *)v10;
        v83 = -81;
        goto LABEL_41;
      }
      goto LABEL_103;
    }
    goto LABEL_160;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"number", 6))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v108 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v108;
    *(_DWORD *)(v10 + 16) = v108;
    v69 = *(_DWORD *)(a2 + 4);
    v109 = (v69 - 1073741808) < 0x80;
    if (v69 <= 0x3FFFFFFF)
      v109 = (v69 + 128) < 0x90;
    if (!v109)
      goto LABEL_154;
    v110 = v18 - 1073741808 < 0x80;
    if ((int)v18 <= 0x3FFFFFFF)
      v110 = v18 + 128 < 0x90;
    if (!v110)
    {
LABEL_154:
      if ((JSC::OpIsNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v10, v69, v18, v37, v38, v39, v40, v41) & 1) == 0)JSC::OpIsNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v10, v69, v18, v75, v76, v77, v78, v79);
      goto LABEL_54;
    }
    v72 = -80;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0xB0, v36, v37, v38, v39, v40, v41);
    v157 = -80;
    v80 = *(unsigned int *)(v10 + 12);
    v81 = *(unsigned int *)(v10 + 16);
    if (v80 <= v81)
    {
      if ((_DWORD)v80 != *(_DWORD *)(v10 + 8))
      {
        v82 = *(_QWORD *)v10;
        v83 = -80;
        goto LABEL_41;
      }
      goto LABEL_103;
    }
    goto LABEL_160;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"string", 6))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v111 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v111;
    *(_DWORD *)(v10 + 16) = v111;
    v112 = *(_DWORD *)(a2 + 4);
    if ((JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v10, v112, v18, 2, v42, v43, v44, v45) & 1) != 0|| (JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v10, v112, v18, 2, v76, v77, v78, v79) & 1) != 0)
    {
      goto LABEL_54;
    }
    v113 = v10;
    v114 = v112;
    v115 = v18;
    v116 = 2;
LABEL_89:
    JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v113, v114, v115, v116, v76, v77, v78, v79);
    goto LABEL_54;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"symbol", 6))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v120 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v120;
    *(_DWORD *)(v10 + 16) = v120;
    v121 = *(_DWORD *)(a2 + 4);
    if ((JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v10, v121, v18, 4, v46, v47, v48, v49) & 1) != 0|| (JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v10, v121, v18, 4, v76, v77, v78, v79) & 1) != 0)
    {
      goto LABEL_54;
    }
    v113 = v10;
    v114 = v121;
    v115 = v18;
    v116 = 4;
    goto LABEL_89;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"bigint", 6))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v145 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v145;
    *(_DWORD *)(v10 + 16) = v145;
    JSC::OpIsCellWithType::emit<JSC::BytecodeGenerator>(v10, *(_DWORD *)(a2 + 4), v18, v50, v51, v52, v53, v54);
    goto LABEL_54;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"object", 6))
  {
    *(_DWORD *)(v10 + 36) = 115;
    v105 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(v10 + 12) = v105;
    *(_DWORD *)(v10 + 16) = v105;
    v69 = *(_DWORD *)(a2 + 4);
    v106 = (v69 - 1073741808) < 0x80;
    if (v69 <= 0x3FFFFFFF)
      v106 = (v69 + 128) < 0x90;
    if (!v106)
      goto LABEL_139;
    v107 = v18 - 1073741808 < 0x80;
    if ((int)v18 <= 0x3FFFFFFF)
      v107 = v18 + 128 < 0x90;
    if (!v107)
    {
LABEL_139:
      if ((JSC::OpTypeofIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v10, v69, v18, v56, v57, v58, v59, v60) & 1) == 0)JSC::OpTypeofIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v10, v69, v18, v75, v76, v77, v78, v79);
      goto LABEL_54;
    }
    v72 = -84;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0xAC, v55, v56, v57, v58, v59, v60);
    v157 = -84;
    v80 = *(unsigned int *)(v10 + 12);
    v81 = *(unsigned int *)(v10 + 16);
    if (v80 <= v81)
    {
      if ((_DWORD)v80 != *(_DWORD *)(v10 + 8))
      {
        v82 = *(_QWORD *)v10;
        v83 = -84;
        goto LABEL_41;
      }
      goto LABEL_103;
    }
LABEL_160:
    *(_DWORD *)(v10 + 16) = v81 + 1;
    *(_BYTE *)(*(_QWORD *)v10 + v81) = v72;
    v84 = *(_DWORD *)(v10 + 12);
    v85 = *(_DWORD *)(v10 + 16);
    goto LABEL_42;
  }
  if (!WTF::equalInternal<unsigned char>((uint64_t)v23, (unint64_t)"function", 8))
  {
    if (v23)
    {
      if (*(_DWORD *)v23 != 2)
      {
        result = 0;
        *(_DWORD *)v23 -= 2;
        return result;
      }
      WTF::StringImpl::~StringImpl(v23, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    return 0;
  }
  *(_DWORD *)(v10 + 36) = 115;
  v68 = *(_DWORD *)(v10 + 48);
  *(_DWORD *)(v10 + 12) = v68;
  *(_DWORD *)(v10 + 16) = v68;
  v69 = *(_DWORD *)(a2 + 4);
  v70 = (v69 - 1073741808) < 0x80;
  if (v69 <= 0x3FFFFFFF)
    v70 = (v69 + 128) < 0x90;
  if (!v70)
    goto LABEL_137;
  v71 = v18 - 1073741808 < 0x80;
  if ((int)v18 <= 0x3FFFFFFF)
    v71 = v18 + 128 < 0x90;
  if (!v71)
  {
LABEL_137:
    if ((JSC::OpTypeofIsFunction::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v10, v69, v18, v63, v64, v65, v66, v67) & 1) == 0)JSC::OpTypeofIsFunction::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v10, v69, v18, v75, v76, v77, v78, v79);
    goto LABEL_54;
  }
  v72 = -83;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v10, (void *)0xAD, v62, v63, v64, v65, v66, v67);
  v157 = -83;
  v80 = *(unsigned int *)(v10 + 12);
  v81 = *(unsigned int *)(v10 + 16);
  if (v80 > v81)
    goto LABEL_160;
  if ((_DWORD)v80 == *(_DWORD *)(v10 + 8))
    goto LABEL_103;
  v82 = *(_QWORD *)v10;
  v83 = -83;
LABEL_41:
  *(_BYTE *)(v82 + v80) = v83;
  v84 = *(_DWORD *)(v10 + 12) + 1;
  v85 = *(_DWORD *)(v10 + 16) + 1;
  *(_DWORD *)(v10 + 12) = v84;
  *(_DWORD *)(v10 + 16) = v85;
LABEL_42:
  v86 = v69 + 16;
  if (v69 <= 0x3FFFFFFF)
    v86 = v69;
  v157 = v86;
  if (v84 > v85)
  {
    *(_DWORD *)(v10 + 16) = v85 + 1;
    *(_BYTE *)(*(_QWORD *)v10 + v85) = v86;
    v89 = *(_DWORD *)(v10 + 12);
    v90 = *(_DWORD *)(v10 + 16);
  }
  else
  {
    v87 = v84;
    if (v84 == *(_DWORD *)(v10 + 8))
    {
      v124 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v84 + 1), (unint64_t)&v157);
      v87 = *(unsigned int *)(v10 + 12);
      v88 = *(_QWORD *)v10;
      v86 = *v124;
    }
    else
    {
      v88 = *(_QWORD *)v10;
    }
    *(_BYTE *)(v88 + v87) = v86;
    v89 = *(_DWORD *)(v10 + 12) + 1;
    v90 = *(_DWORD *)(v10 + 16) + 1;
    *(_DWORD *)(v10 + 12) = v89;
    *(_DWORD *)(v10 + 16) = v90;
  }
  LOBYTE(v91) = v18 + 16;
  if ((int)v18 <= 0x3FFFFFFF)
    LOBYTE(v91) = v18;
LABEL_50:
  v157 = v91;
  if (v89 > v90)
  {
    *(_DWORD *)(v10 + 16) = v90 + 1;
    *(_BYTE *)(*(_QWORD *)v10 + v90) = v91;
  }
  else
  {
    v92 = v89;
    if (v89 == *(_DWORD *)(v10 + 8))
    {
      v122 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (WTF *)(v89 + 1), (unint64_t)&v157);
      v92 = *(unsigned int *)(v10 + 12);
      v93 = *(_QWORD *)v10;
      LOBYTE(v91) = *v122;
    }
    else
    {
      v93 = *(_QWORD *)v10;
    }
    *(_BYTE *)(v93 + v92) = v91;
    *(int32x2_t *)(v10 + 12) = vadd_s32(*(int32x2_t *)(v10 + 12), (int32x2_t)0x100000001);
  }
LABEL_54:
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return 1;
}

uint64_t JSC::OpIsCellWithType::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = a3;
  result = JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, 3, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, 3, v12, v13, v14, v15);
    if ((result & 1) == 0)
      return JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, 3, v16, v17, v18, v19);
  }
  return result;
}

uint64_t JSC::OpProfileType::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v13 = a3;
  v14 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v14 + 4) |= 1u;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(unsigned int *)(v15 + 80);
  *(_DWORD *)(v15 + 80) = v16 + 1;
  result = JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, v16, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v13, a4, a5, a6, v16, v18);
    if ((result & 1) == 0)
      return JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v13, a4, a5, a6, v16, v19);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::resolveType(JSC::BytecodeGenerator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *((unsigned int *)this + 31);
  if ((_DWORD)v1)
  {
    v2 = *((_QWORD *)this + 14);
    v3 = 24 * v1;
    while (!*(_BYTE *)(v2 + v3 - 8))
    {
      v4 = *((unsigned __int8 *)this + 708);
      if (*((_BYTE *)this + 708))
      {
        if ((*(_BYTE *)(*(_QWORD *)(v2 + v3 - 24) + 21) & 0x1C) == 0x14)
          break;
      }
      v3 -= 24;
      if (!v3)
        goto LABEL_8;
    }
    return 12;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 708);
LABEL_8:
    if (v4)
      return 6;
    else
      return 0;
  }
}

uint64_t *JSC::BytecodeGenerator::emitProfileType(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[28];
  unint64_t v15;
  int v16;

  if ((result[13] & 2) != 0)
  {
    if (a2)
    {
      v4 = *(_DWORD *)(a2 + 4);
      v5 = (uint64_t)result;
      v8 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)result);
      JSC::OpProfileType::emit<JSC::BytecodeGenerator>(v5, v4, 0, 2, 0, v8, v9, v10);
      v11 = *(_DWORD *)(a3 + 4);
      v12 = *(_DWORD *)(a4 + 4) - 1;
      v13 = *(_QWORD *)(v5 + 24);
      v16 = *(_DWORD *)(v5 + 12) - 1;
      v15 = __PAIR64__(v12, v11);
      return WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v13 + 232), &v16, (uint64_t *)&v15, (uint64_t)v14);
    }
  }
  return result;
}

{
  unsigned int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[28];
  unint64_t v15;
  int v16;

  if ((result[13] & 2) != 0)
  {
    if (a2)
    {
      v4 = *(_DWORD *)(a2 + 4);
      v5 = (uint64_t)result;
      v8 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)result);
      JSC::OpProfileType::emit<JSC::BytecodeGenerator>(v5, v4, 0, 3, 0, v8, v9, v10);
      v11 = *(_DWORD *)(a3 + 4);
      v12 = *(_DWORD *)(a4 + 4) - 1;
      v13 = *(_QWORD *)(v5 + 24);
      v16 = *(_DWORD *)(v5 + 12) - 1;
      v15 = __PAIR64__(v12, v11);
      return WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v13 + 232), &v16, (uint64_t *)&v15, (uint64_t)v14);
    }
  }
  return result;
}

uint64_t *JSC::BytecodeGenerator::emitProfileType(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  _BYTE v21[28];
  unint64_t v22;
  int v23;

  if ((result[13] & 2) != 0 && a2)
  {
    v8 = (uint64_t)result;
    if (*(_QWORD *)(a3 + 16) || *(_BYTE *)(a3 + 8) == 1)
    {
      v9 = *(_DWORD *)(a3 + 32) - 0x40000000;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      v9 = *((_DWORD *)result + 103);
    }
    v11 = *(_DWORD *)(a2 + 4);
    v12 = JSC::BytecodeGenerator::addConstant((uint64_t)result, (WTF::AtomStringImpl *)a3, a3, a4, a5, a6, a7, a8);
    v13 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)v8);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(v8, v11, v9, v10, v12, v13, v14, v15);
    v16 = *(_DWORD *)(a4 + 4);
    v17 = *(_DWORD *)(a5 + 4) - 1;
    v18 = *(_QWORD *)(v8 + 24);
    v23 = *(_DWORD *)(v8 + 12) - 1;
    v22 = __PAIR64__(v17, v16);
    return WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v18 + 232), &v23, (uint64_t *)&v22, (uint64_t)v21);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitProfileControlFlow(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if ((*(_BYTE *)(this + 104) & 4) != 0)
  {
    if ((a2 & 0x80000000) != 0)
    {
      this = 1921;
      __break(0xC471u);
    }
    else
    {
      v8 = this;
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(this, a2, a3, a4, a5, a6, a7, a8);
      return (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(v8 + 24), *(_DWORD *)(v8 + 48));
    }
  }
  return this;
}

uint64_t JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v10 + 4) |= 1u;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(unsigned int *)(v11 + 84);
  *(_DWORD *)(v11 + 84) = v12 + 1;
  result = JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, v12, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v12, v14, v15, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v12, v19, v20, v21, v22, v23);
  }
  return result;
}

_DWORD *JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(JSC::UnlinkedCodeBlockGenerator *this, int a2)
{
  _DWORD *result;
  uint64_t v4;
  int v5;

  v5 = a2;
  result = (_DWORD *)((char *)this + 240);
  v4 = *((unsigned int *)this + 63);
  if ((_DWORD)v4 == *((_DWORD *)this + 62))
  {
    result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    *(_DWORD *)(*((_QWORD *)this + 30) + 4 * *((unsigned int *)this + 63)) = *result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v4) = a2;
  }
  ++*((_DWORD *)this + 63);
  return result;
}

int *JSC::BytecodeGenerator::emitLoad(uint64_t a1, int *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  __int128 v20;

  v19 = *(_QWORD *)a3;
  WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::add<decltype(nullptr)>(&v20, (uint64_t *)(a1 + 656), &v19, a4, a5, a6, a7, a8);
  v16 = v20;
  v17 = *(_QWORD *)(v20 + 8);
  if (!v17)
  {
    v17 = JSC::jsOwnedString(*(JSC **)(a1 + 696), a3, 0, v11, v12, v13, v14, v15);
    *(_QWORD *)(v16 + 8) = v17;
  }
  return JSC::BytecodeGenerator::emitLoad(a1, a2, v17, v11, v12, v13, v14, v15);
}

_OWORD *WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::add<decltype(nullptr)>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = *(_DWORD *)(*a3 + 16);
  if ((v15 & 0x20) != 0)
    v15 = *(_DWORD *)(v14 + 32);
  v16 = v13 & (v15 >> 8);
  v17 = (_QWORD *)(v11 + 16 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == v14)
      {
        if ((v12 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v11 - 4);
        v28 = 0;
        v27 = v11 + 16 * v29;
        goto LABEL_23;
      }
      if (v18 == -1)
        v19 = v17;
      v16 = (v16 + v20) & v13;
      v17 = (_QWORD *)(v11 + 16 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v17 = v19;
    }
  }
  *v17 = v14;
  v17[1] = 0;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_19;
    goto LABEL_27;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v30 = 8;
LABEL_33:
      result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2, v30, (uint64_t)v17, a4, a5, a6, a7, a8);
      v17 = result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_19;
    }
LABEL_27:
    v30 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
    goto LABEL_33;
  }
LABEL_19:
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_23:
  *(_QWORD *)v10 = v17;
  *((_QWORD *)v10 + 1) = v27;
  *((_BYTE *)v10 + 16) = v28;
  return result;
}

unint64_t JSC::jsOwnedString(JSC *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t SlowCase;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC *v21;

  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return *((_QWORD *)this + 5246);
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 != 1)
  {
    if (v9)
      goto LABEL_4;
    return *((_QWORD *)this + 5246);
  }
  v13 = *(unsigned __int8 **)(v8 + 8);
  if ((*(_BYTE *)(v8 + 16) & 4) != 0)
  {
    v14 = *v13;
    return *((_QWORD *)this + v14 + 5277);
  }
  v14 = *(unsigned __int16 *)v13;
  if (v14 <= 0xFF)
    return *((_QWORD *)this + v14 + 5277);
LABEL_4:
  v10 = (_QWORD *)((char *)this + 39696);
  *(_DWORD *)v8 += 2;
  SlowCase = *((_QWORD *)this + 4962);
  if (SlowCase < *((_QWORD *)this + 4963))
  {
LABEL_5:
    *v10 = SlowCase + 16;
    goto LABEL_6;
  }
  SlowCase = *((_QWORD *)this + 4964);
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4965);
    *((_QWORD *)this + 4963) = SlowCase + HIDWORD(v15);
    *((_QWORD *)this + 4964) = SlowCase + (int)v15;
    goto LABEL_5;
  }
  v16 = (char *)this + 39672;
  v17 = (char *)this + 192;
  v21 = this;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v16, (uint64_t)v17, 16, 0, 0, v18, v19, v20);
  this = v21;
LABEL_6:
  *(_DWORD *)SlowCase = v10[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v8;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t *JSC::SymbolTable::get(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
  {
LABEL_10:
    v10 = 1;
    goto LABEL_9;
  }
  v3 = *(_DWORD *)(a2 - 8);
  v4 = *(_DWORD *)(a3 + 16);
  if ((v4 & 0x20) != 0)
    v4 = *(_DWORD *)(a3 + 32);
  v5 = v3 & (v4 >> 8);
  v6 = *(_QWORD *)(a2 + 16 * v5);
  if (v6 != a3)
  {
    v7 = 1;
    while (v6)
    {
      v5 = ((_DWORD)v5 + v7) & v3;
      v6 = *(_QWORD *)(a2 + 16 * v5);
      ++v7;
      if (v6 == a3)
        goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_8:
  v8 = a2 + 16 * v5;
  v11 = *(_QWORD *)(v8 + 8);
  v9 = (_QWORD **)(v8 + 8);
  v10 = v11;
  *result = 1;
  if ((v11 & 1) != 0)
  {
LABEL_9:
    *result = v10;
    return result;
  }
  return JSC::SymbolTableEntry::copySlow(result, v9);
}

void JSC::BytecodeGenerator::initializeBlockScopedFunctions(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66[5];
  _QWORD *v67;

  v8 = *a2;
  if (*a2)
    LODWORD(v8) = *(_DWORD *)(v8 - 12);
  v9 = (_QWORD *)a2[2];
  if (v9)
  {
    v9 = (_QWORD *)*v9;
    if (v9)
      LODWORD(v9) = *((_DWORD *)v9 - 3);
  }
  v10 = *(_DWORD *)(a3 + 12);
  if (!((_DWORD)v8 + (_DWORD)v9))
  {
    if (!v10)
      return;
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x19823F644);
  }
  if (v10)
  {
    v11 = *(_DWORD *)(a1 + 124);
    if (!v11)
      goto LABEL_45;
    v12 = *(_QWORD *)(a1 + 112) + 24 * v11;
    v13 = *(_QWORD *)(v12 - 16);
    v65 = *(_QWORD *)(v12 - 24);
    v14 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v15 = v14;
    if (v14)
      ++*v14;
    if (a4)
      LODWORD(a4) = *(_DWORD *)(a4 + 4);
    v16 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)a3;
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        v20 = *(WTF::StringImpl **)(*v17 + 40);
        if (v20)
        {
          v21 = *(_DWORD *)v20;
          *(_DWORD *)v20 += 2;
          v22 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::find(*a2, (uint64_t)v20);
          if (v21)
          {
            *(_DWORD *)v20 = v21;
          }
          else
          {
            v48 = v22;
            WTF::StringImpl::~StringImpl(v20, v23, v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
            v22 = v48;
          }
          v30 = *a2;
        }
        else
        {
          v30 = *a2;
          v22 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::find(*a2, 0);
        }
        if (v30)
          v31 = v30 + 16 * *(unsigned int *)(v30 - 4);
        else
          v31 = 0;
        if (v31 == v22)
        {
          __break(0xC471u);
          JUMPOUT(0x19823F688);
        }
        if ((*(_WORD *)(v22 + 8) & 0x80) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19823F6BCLL);
        }
        JSC::SymbolTable::get((unint64_t *)&v67, *(_QWORD *)(v65 + 8), *(_QWORD *)(v19 + 40));
        v37 = v67;
        if ((v67 & 1) != 0)
          v37 = &v67;
        if (*v37 <= 1uLL)
        {
          __break(0xC471u);
          JUMPOUT(0x19823F6DCLL);
        }
        JSC::BytecodeGenerator::emitNewFunctionExpressionCommon(a1, (uint64_t)v15, v19, v32, v33, v34, v35, v36);
        JSC::BytecodeGenerator::variableForLocalEntry((uint64_t)v66, a1, *(_DWORD **)(v19 + 40), &v67, a4, 1);
        JSC::BytecodeGenerator::emitPutToScope(a1, v13, (uint64_t)v66, (uint64_t)v15, 1, 0, v38, v39);
        v47 = v66[0];
        v66[0] = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
          {
            WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            *(_DWORD *)v47 -= 2;
          }
        }
        if ((v67 & 1) == 0)
          JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v67, v40, v41, v42, v43, v44, v45, v46);
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    if (v15)
      --*v15;
  }
}

void JSC::BytecodeGenerator::popLexicalScopeInternal(JSC::BytecodeGenerator *this, JSC::VariableEnvironment *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl ***v32;
  JSC::TDZEnvironmentLink *v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  JSC::VariableEnvironment *v49;
  unint64_t *v50;

  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    LODWORD(v9) = *(_DWORD *)(v9 - 12);
  v10 = (_QWORD *)*((_QWORD *)a2 + 2);
  if (v10)
  {
    v10 = (_QWORD *)*v10;
    if (v10)
      LODWORD(v10) = *((_DWORD *)v10 - 3);
  }
  if (!((_DWORD)v9 + (_DWORD)v10))
    return;
  if ((*((_BYTE *)this + 104) & 1) != 0 && !*((_BYTE *)this + 707))
  {
    v49 = a2;
    JSC::VariableEnvironment::markAllVariablesAsCaptured((uint64_t *)a2);
    a2 = v49;
  }
  v11 = *((_DWORD *)this + 31);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19823FA50);
  }
  v12 = *((_QWORD *)this + 14) + 24 * v11;
  v13 = *(_QWORD *)(v12 - 24);
  v14 = *(_DWORD **)(v12 - 16);
  *((_DWORD *)this + 31) = v11 - 1;
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v16 = *(unsigned int *)(v15 - 4);
    v17 = v15 + 16 * v16;
    if (*(_DWORD *)(v15 - 12))
    {
      v18 = *(_QWORD *)a2;
      if ((_DWORD)v16)
      {
        v19 = 16 * v16;
        v18 = *(_QWORD *)a2;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 16;
          v19 -= 16;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v18 = v15 + 16 * v16;
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = v15 + 16 * v16;
LABEL_14:
  if (v15)
    v20 = v15 + 16 * *(unsigned int *)(v15 - 4);
  else
    v20 = 0;
  if (v20 == v18)
    goto LABEL_40;
  v21 = 0;
  do
  {
    if ((*(_WORD *)(v18 + 8) & 1) != 0)
    {
      v21 = 1;
      goto LABEL_28;
    }
    JSC::SymbolTable::get((unint64_t *)&v50, *(_QWORD *)(v13 + 8), *(_QWORD *)v18);
    v22 = (char)v50;
    if ((v50 & 1) != 0)
      v23 = (unint64_t *)&v50;
    else
      v23 = v50;
    v24 = *v23 >> 6;
    if ((v24 & 0x80000000) != 0)
    {
      v25 = v24 ^ 0xFFFFFFFFLL;
      v26 = v25 >> 5;
      if (v25 >> 5 >= *((unsigned int *)this + 25))
      {
        __break(0xC471u);
        JUMPOUT(0x19823FA68);
      }
      v27 = (char *)this + 88;
LABEL_25:
      v28 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v27 + 8 * v26) + 12 * (v25 & 0x1F));
      goto LABEL_26;
    }
    if ((_DWORD)v24 != 3)
    {
      v25 = (int)v24 - 5;
      v26 = v25 >> 5;
      if (v25 >> 5 >= *((unsigned int *)this + 89))
      {
        __break(0xC471u);
        JUMPOUT(0x19823FA70);
      }
      v27 = (char *)this + 344;
      goto LABEL_25;
    }
    v28 = (_DWORD *)((char *)this + 232);
LABEL_26:
    --*v28;
    if ((v22 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v50, a2, a3, a4, a5, a6, a7, a8);
LABEL_28:
    v29 = v18 + 16;
    v18 = v17;
    if (v29 != v17)
    {
      v18 = v29;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 16;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  while (v18 != v20);
  if ((v21 & 1) != 0)
  {
    if (!v14)
      goto LABEL_75;
    v46 = *(_DWORD *)(*((_QWORD *)this + 31) + 4);
    v47 = v14[1];
    if ((JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, v46, v47, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)this, v46, v47, a4, a5, a6, a7, a8) & 1) == 0)
    {
      JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, v46, v47, a4, a5, a6, a7, a8);
    }
    v48 = *((_QWORD *)this + 53) - 1;
    if (*((unsigned int *)this + 111) <= v48 >> 4)
    {
LABEL_75:
      __break(0xC471u);
      JUMPOUT(0x19823FA24);
    }
    *((_QWORD *)this + 53) = v48;
    --*((_DWORD *)this + 103);
    --*v14;
  }
LABEL_40:
  v30 = *((unsigned int *)this + 39);
  if (!(_DWORD)v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19823FA58);
  }
  v31 = v30 - 1;
  v32 = (WTF::StringImpl ***)(*((_QWORD *)this + 18) + 16 * (v30 - 1));
  v33 = (JSC::TDZEnvironmentLink *)v32[1];
  v32[1] = 0;
  if (v33)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v33);
  v34 = *v32;
  if (v34)
  {
    v35 = *((unsigned int *)v34 - 1);
    if ((_DWORD)v35)
    {
      v36 = v34;
      do
      {
        v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
            {
              WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
            }
            else
            {
              *(_DWORD *)v37 -= 2;
            }
          }
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((unint64_t)(v34 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  *((_DWORD *)this + 39) = v31;
}

uint64_t JSC::BytecodeGenerator::emitNewFunctionExpressionCommon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  signed int v36;
  int v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  _BOOL4 v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;

  v11 = *(_QWORD *)(a1 + 24);
  result = JSC::BytecodeGenerator::makeFunction(a1, a3, a3, a4, a5, a6, a7, a8);
  v19 = result;
  v20 = (_QWORD *)(v11 + 96);
  v86 = 0;
  v21 = *(unsigned int *)(v11 + 108);
  if ((_DWORD)v21 == *(_DWORD *)(v11 + 104))
  {
    result = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 96, v21 + 1, (unint64_t)&v86);
    *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8 * *(unsigned int *)(v11 + 108)) = *(_QWORD *)result;
  }
  else
  {
    *(_QWORD *)(*v20 + 8 * v21) = 0;
  }
  v22 = *(_DWORD *)(v11 + 108);
  v23 = __CFADD__(v22, 1);
  v24 = v22 + 1;
  *(_DWORD *)(v11 + 108) = v24;
  if (v23)
  {
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)(*v20 + 8 * v24 - 8) = v19;
  v25 = *(unsigned __int8 *)(a3 + 35);
  if (v25 <= 0x12)
  {
    if (((1 << v25) & 0xE00) == 0)
    {
      if (((1 << v25) & 0x40004) != 0)
        return JSC::OpNewGeneratorFuncExp::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      if (((1 << v25) & 0x30000) != 0)
        return JSC::OpNewAsyncGeneratorFuncExp::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      goto LABEL_8;
    }
    v36 = *(_DWORD *)(a2 + 4);
    v37 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4);
    v38 = (v36 - 1073741808) < 0x80;
    if (v36 <= 0x3FFFFFFF)
      v38 = (v36 + 128) < 0x90;
    if (!v38)
      goto LABEL_40;
    v39 = (v37 - 1073741808) < 0x80;
    if (v37 <= 0x3FFFFFFF)
      v39 = (v37 + 128) < 0x90;
    if (v21 <= 0xFF && v39)
    {
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x62, v13, v14, v15, v16, v17, v18);
      LOBYTE(v86) = 98;
      v40 = *(unsigned int *)(a1 + 12);
      v41 = *(unsigned int *)(a1 + 16);
      if (v40 > v41)
      {
        *(_DWORD *)(a1 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v41) = 98;
        v44 = *(_DWORD *)(a1 + 12);
        v45 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v40 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v86);
          v40 = *(unsigned int *)(a1 + 12);
          v42 = *(_QWORD *)a1;
          v43 = *(_BYTE *)result;
        }
        else
        {
          v42 = *(_QWORD *)a1;
          v43 = 98;
        }
        *(_BYTE *)(v42 + v40) = v43;
        v44 = *(_DWORD *)(a1 + 12) + 1;
        v45 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v44;
        *(_DWORD *)(a1 + 16) = v45;
      }
      v46 = v36 + 16;
      if (v36 <= 0x3FFFFFFF)
        v46 = v36;
      LOBYTE(v86) = v46;
      if (v44 > v45)
      {
        *(_DWORD *)(a1 + 16) = v45 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v45) = v46;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v47 = v44;
        if (v44 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v86);
          v47 = *(unsigned int *)(a1 + 12);
          v48 = *(_QWORD *)a1;
          v46 = *(_BYTE *)result;
        }
        else
        {
          v48 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v48 + v47) = v46;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v51 = v37 + 16;
      if (v37 <= 0x3FFFFFFF)
        v51 = v37;
      LOBYTE(v86) = v51;
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = v51;
        v54 = *(_DWORD *)(a1 + 12);
        v55 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v86);
          v52 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          v51 = *(_BYTE *)result;
        }
        else
        {
          v53 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v53 + v52) = v51;
        v54 = *(_DWORD *)(a1 + 12) + 1;
        v55 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v54;
        *(_DWORD *)(a1 + 16) = v55;
      }
      LOBYTE(v86) = v21;
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = v21;
        return result;
      }
      v56 = v54;
      if (v54 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v54) = v21;
LABEL_39:
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        return result;
      }
    }
    else
    {
LABEL_40:
      if (v36 <= 0x3FFFFFFF)
        v57 = (v36 + 0x8000) >> 6 < 0x201;
      else
        v57 = (v36 - 1073741760) < 0x8000;
      if (!v57)
        return JSC::OpNewAsyncFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v36, *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      v58 = (v37 - 1073741760) < 0x8000;
      if (v37 <= 0x3FFFFFFF)
        v58 = (v37 + 0x8000) >> 6 < 0x201;
      if (WORD1(v21) || !v58)
        return JSC::OpNewAsyncFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v36, *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x62, v13, v14, v15, v16, v17, v18);
      LOBYTE(v86) = 0x80;
      v59 = *(unsigned int *)(a1 + 12);
      v60 = *(unsigned int *)(a1 + 16);
      if (v59 > v60)
      {
        *(_DWORD *)(a1 + 16) = v60 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v60) = 0x80;
        v63 = *(_DWORD *)(a1 + 12);
        v64 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v59 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v59 + 1), (unint64_t)&v86);
          v59 = *(unsigned int *)(a1 + 12);
          v61 = *(_QWORD *)a1;
          v62 = *(_BYTE *)result;
        }
        else
        {
          v61 = *(_QWORD *)a1;
          v62 = 0x80;
        }
        *(_BYTE *)(v61 + v59) = v62;
        v63 = *(_DWORD *)(a1 + 12) + 1;
        v64 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v63;
        *(_DWORD *)(a1 + 16) = v64;
      }
      v65 = 98;
      LOBYTE(v86) = 98;
      if (v63 > v64)
      {
        *(_DWORD *)(a1 + 16) = v64 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v64) = 98;
        v68 = *(_DWORD *)(a1 + 12);
        v69 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v66 = v63;
        if (v63 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v63 + 1), (unint64_t)&v86);
          v66 = *(unsigned int *)(a1 + 12);
          v67 = *(_QWORD *)a1;
          v65 = *(_BYTE *)result;
        }
        else
        {
          v67 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v67 + v66) = v65;
        v68 = *(_DWORD *)(a1 + 12) + 1;
        v69 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v68;
        *(_DWORD *)(a1 + 16) = v69;
      }
      if (v36 > 0x3FFFFFFF)
        v36 += 64;
      LOBYTE(v86) = v36;
      if (v68 > v69)
      {
        *(_DWORD *)(a1 + 16) = v69 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v69) = v36;
        v70 = *(_DWORD *)(a1 + 12);
        v71 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v68 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v68 + 1), (unint64_t)&v86);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v68) = v36;
        }
        v70 = *(_DWORD *)(a1 + 12) + 1;
        v71 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v70;
        *(_DWORD *)(a1 + 16) = v71;
      }
      v72 = v36 >> 8;
      LOBYTE(v86) = BYTE1(v36);
      if (v70 > v71)
      {
        *(_DWORD *)(a1 + 16) = v71 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v71) = BYTE1(v36);
        v75 = *(_DWORD *)(a1 + 12);
        v76 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v73 = v70;
        if (v70 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v70 + 1), (unint64_t)&v86);
          v73 = *(unsigned int *)(a1 + 12);
          v74 = *(_QWORD *)a1;
          LOBYTE(v72) = *(_BYTE *)result;
        }
        else
        {
          v74 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v74 + v73) = v72;
        v75 = *(_DWORD *)(a1 + 12) + 1;
        v76 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v75;
        *(_DWORD *)(a1 + 16) = v76;
      }
      if (v37 > 0x3FFFFFFF)
        v37 += 64;
      LOBYTE(v86) = v37;
      if (v75 > v76)
      {
        *(_DWORD *)(a1 + 16) = v76 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v76) = v37;
        v77 = *(_DWORD *)(a1 + 12);
        v78 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v75 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v75 + 1), (unint64_t)&v86);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v75) = v37;
        }
        v77 = *(_DWORD *)(a1 + 12) + 1;
        v78 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v77;
        *(_DWORD *)(a1 + 16) = v78;
      }
      v79 = v37 >> 8;
      LOBYTE(v86) = BYTE1(v37);
      if (v77 > v78)
      {
        *(_DWORD *)(a1 + 16) = v78 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v78) = BYTE1(v37);
        v82 = *(_DWORD *)(a1 + 12);
        v83 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v80 = v77;
        if (v77 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v86);
          v80 = *(unsigned int *)(a1 + 12);
          v81 = *(_QWORD *)a1;
          LOBYTE(v79) = *(_BYTE *)result;
        }
        else
        {
          v81 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v81 + v80) = v79;
        v82 = *(_DWORD *)(a1 + 12) + 1;
        v83 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v82;
        *(_DWORD *)(a1 + 16) = v83;
      }
      LOBYTE(v86) = v21;
      if (v82 > v83)
      {
        *(_DWORD *)(a1 + 16) = v83 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v83) = v21;
        v84 = *(_DWORD *)(a1 + 12);
        v85 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v82 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v82 + 1), (unint64_t)&v86);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v82) = v21;
        }
        v84 = *(_DWORD *)(a1 + 12) + 1;
        v85 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v84;
        *(_DWORD *)(a1 + 16) = v85;
      }
      LOBYTE(v86) = BYTE1(v21);
      if (v84 > v85)
      {
        *(_DWORD *)(a1 + 16) = v85 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v85) = BYTE1(v21);
        return result;
      }
      v56 = v84;
      if (v84 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v84) = BYTE1(v21);
        goto LABEL_39;
      }
    }
    result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v56 + 1), (unint64_t)&v86);
    *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
    goto LABEL_39;
  }
LABEL_8:
  v26 = *(_DWORD *)(a2 + 4);
  v27 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
  result = JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v26, v27, v21, v15, v16, v17, v18);
  if ((result & 1) == 0)
  {
    result = JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v26, v27, v21, v28, v29, v30, v31);
    if ((result & 1) == 0)
      return JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v26, v27, v21, v32, v33, v34, v35);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::variableForLocalEntry(uint64_t result, uint64_t a2, _DWORD *a3, _QWORD **a4, int a5, char a6)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = *a4;
  if (((unint64_t)*a4 & 1) != 0)
    v6 = (unint64_t *)a4;
  v7 = *v6;
  v8 = *v6 & 0x30;
  v9 = *v6 >> 6;
  if (v8 == 32)
  {
    v10 = (v7 >> 6);
    if ((v9 & 0x80000000) != 0)
    {
      v11 = v10 ^ 0xFFFFFFFFLL;
      if (v11 >> 5 < *(unsigned int *)(a2 + 100))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * (v11 >> 5));
        LODWORD(v11) = v11 & 0x1F;
LABEL_7:
        v13 = v12 + 12 * v11;
        goto LABEL_8;
      }
      goto LABEL_24;
    }
    if ((_DWORD)v9 != 3)
    {
      v17 = (v10 << 32) - 0x500000000;
      v18 = (unint64_t)(v17 >> 32) >> 5;
      if (v18 < *(unsigned int *)(a2 + 356))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 344) + 8 * v18);
        v11 = HIDWORD(v17) & 0x1F;
        goto LABEL_7;
      }
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x198240334);
    }
    v13 = a2 + 232;
  }
  else
  {
    v13 = 0;
  }
LABEL_8:
  if ((v7 & 4) != 0)
    v14 = v7 & 2 | 4;
  else
    v14 = v7 & 2;
  if (a3)
    *a3 += 2;
  v15 = 2;
  if (v8 != 32)
    v15 = 3;
  if (v8 <= 0x10)
    v16 = 1;
  else
    v16 = v15;
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = v16 | (v9 << 32);
  *(_QWORD *)(result + 16) = v13;
  *(_DWORD *)(result + 24) = v14;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = a5;
  *(_BYTE *)(result + 36) = a6;
  return result;
}

uint64_t WTF::FixedVector<JSC::Identifier>::contains<JSC::Identifier>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = *(unsigned int *)result;
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = result + 8;
      while ((_DWORD)v2 != (_DWORD)v3)
      {
        v5 = *(_QWORD *)(v4 + 8 * v3);
        result = v5 == a2;
        if (v5 == a2 || v2 - 1 == v3++)
          return result;
      }
      result = 146;
      __break(0xC471u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::finalDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  if (!a2 || a1 + 208 == a2)
  {
    if (!a3 || (a2 = a3, !*(_BYTE *)(a3 + 8)))
    {
      v4 = *(_QWORD *)(a1 + 80);
      v5 = *(unsigned int *)(a1 + 100);
      if (v4)
      {
        v6 = *(_QWORD *)(a1 + 88);
        do
        {
          v7 = v4 - 1;
          v8 = (v4 - 1) >> 5;
          if (v8 >= v5)
          {
            __break(0xC471u);
            JUMPOUT(0x198240584);
          }
          if (*(_DWORD *)(*(_QWORD *)(v6 + 8 * v8) + 12 * (v7 & 0x1F)))
            break;
          *(_QWORD *)(a1 + 80) = v7;
          --v4;
        }
        while (v7);
      }
      v9 = v4 + 1;
      *(_QWORD *)(a1 + 80) = v4 + 1;
      v10 = v4 >> 5;
      if (v4 >> 5 >= v5)
      {
        v18 = (_QWORD *)(a1 + 88);
        v19 = WTF::fastMalloc((WTF *)0x180);
        v22 = v19;
        v20 = *(unsigned int *)(a1 + 100);
        if ((_DWORD)v20 == *(_DWORD *)(a1 + 96))
        {
          v21 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v20 + 1, (unint64_t)&v22);
          v20 = *(unsigned int *)(a1 + 100);
          *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v20) = *v21;
        }
        else
        {
          *(_QWORD *)(*v18 + 8 * v20) = v19;
        }
        v5 = (v20 + 1);
        *(_DWORD *)(a1 + 100) = v5;
        v9 = *(_QWORD *)(a1 + 80);
        v11 = v9 - 1;
        v10 = (v9 - 1) >> 5;
      }
      else
      {
        v11 = v4;
      }
      if (v10 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x19824058CLL);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v10) + 12 * (v11 & 0x1F);
      *(_DWORD *)v12 = 0;
      *(_DWORD *)(v12 + 4) = ~(_DWORD)v4;
      *(_BYTE *)(v12 + 8) = 0;
      v13 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
      v14 = *(_QWORD *)(v13 + 20);
      if ((v14 & 0x7FFFFFFF) > v9)
        v9 = v14 & 0x7FFFFFFF;
      v15 = v9 + 1;
      *(_QWORD *)(v13 + 20) = v14 & 0xFFFFFFFF80000000 | v15 & 0x7FFFFFFE;
      if ((v15 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL)
        || (v16 = *(_QWORD *)(a1 + 80) - 1, v16 >> 5 >= *(unsigned int *)(a1 + 100)))
      {
        __break(0xC471u);
        JUMPOUT(0x19824057CLL);
      }
      a2 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v16 >> 5)) + 12 * (v16 & 0x1F);
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  return a2;
}

_DWORD *JSC::BytecodeGenerator::kill(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v9 = *(_QWORD *)(a1 + 688);
  if (v9)
  {
    v11 = a2[1];
    v12 = *(_DWORD *)(v9 - 8);
    v13 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = v12 & (v14 ^ HIWORD(v14));
    v16 = *(_DWORD *)(v9 + 16 * v15);
    if (v16 != v11)
    {
      v17 = 1;
      while (v16 != 0x7FFFFFFF)
      {
        v15 = ((_DWORD)v15 + v17) & v12;
        v16 = *(_DWORD *)(v9 + 16 * v15);
        ++v17;
        if (v16 == v11)
          goto LABEL_9;
      }
      v15 = *(unsigned int *)(v9 - 4);
    }
LABEL_9:
    if (v15 != *(_DWORD *)(v9 - 4))
    {
      v18 = v9 + 16 * v15;
      v19 = (unint64_t *)(v18 + 8);
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(_QWORD *)(v20 + 24);
      if (v21)
      {
        v22 = *(_DWORD *)(v21 - 12);
        if (v22)
        {
          v23 = (uint64_t *)(a1 + 688);
          if (*(_DWORD *)v20 == 1)
          {
            v24 = (unsigned __int8 *)(**(_QWORD **)(v20 + 8) + *(unsigned int *)(v20 + 16));
            v25 = *v24;
            v26 = v25;
            if ((v25 | 2) == 0x82)
              v26 = v24[1];
            if (v26 == 29)
            {
              if (v25 == 128)
              {
                if (v22 >= 0x10000)
                  LOWORD(v22) = 255;
                *((_WORD *)v24 + 2) = v22;
              }
              else if (v25 == 130)
              {
                *(_DWORD *)(v24 + 6) = v22;
              }
              else
              {
                if (v22 >= 0xFF)
                  LOBYTE(v22) = -1;
                v24[2] = v22;
              }
            }
            else if (v26 == 28)
            {
              if (v25 == 128)
              {
                if (v22 >= 0x10000)
                  LOWORD(v22) = 255;
                *((_WORD *)v24 + 3) = v22;
              }
              else if (v25 == 130)
              {
                *(_DWORD *)(v24 + 10) = v22;
              }
              else
              {
                if (v22 >= 0xFF)
                  LOBYTE(v22) = -1;
                v24[3] = v22;
              }
            }
          }
          v27 = *v23;
          if (!*v23 || (v27 += 16 * *(unsigned int *)(v27 - 4), v27 != v18))
          {
            if (v27 != v18)
            {
              *(_DWORD *)v18 = 2147483646;
              v28 = *v19;
              *v19 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                {
                  v34 = *(_QWORD *)(v28 + 24);
                  if (v34)
                    WTF::fastFree(v34 - 16, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  --*(_DWORD *)v28;
                }
              }
              ++*(_DWORD *)(*v23 - 16);
              v29 = *v23;
              if (*v23)
                v30 = *(_DWORD *)(v29 - 12) - 1;
              else
                v30 = -1;
              *(_DWORD *)(v29 - 12) = v30;
              v31 = *v23;
              if (*v23)
              {
                v32 = 6 * *(_DWORD *)(v31 - 12);
                v33 = *(_DWORD *)(v31 - 4);
                if (v32 < v33 && v33 >= 9)
                  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v23, v33 >> 1, 0);
              }
            }
          }
        }
      }
    }
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitGetParentScope(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

void JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(uint64_t a1, JSC::VariableEnvironment *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  _QWORD *v34;
  int *v35;
  int v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  int v49;
  WTF::StringImpl **v50;
  WTF::StringImpl **v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _QWORD *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  WTF *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl **v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  WTF *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;

  v12 = (uint64_t *)((char *)this + 8);
  v11 = *((_QWORD *)this + 1);
  if (v11)
    v13 = *(_DWORD *)(v11 - 12);
  else
    v13 = 0;
  v14 = (_QWORD *)*((_QWORD *)this + 3);
  if (v14)
  {
    v14 = (_QWORD *)*v14;
    if (v14)
      LODWORD(v14) = *((_DWORD *)v14 - 3);
  }
  if (v13 + (_DWORD)v14)
  {
    if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    {
      JSC::VariableEnvironment::markAllVariablesAsCaptured((uint64_t *)this + 1);
      v11 = *v12;
    }
    if (*((_BYTE *)this + 16))
    {
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 - 12);
      v20 = (_QWORD *)*((_QWORD *)this + 3);
      if (v20)
      {
        v20 = (_QWORD *)*v20;
        if (v20)
          LODWORD(v20) = *((_DWORD *)v20 - 3);
      }
      if (!((_DWORD)v11 + (_DWORD)v20))
        return;
LABEL_33:
      if (!a3)
      {
        __break(0xC471u);
        JUMPOUT(0x198240FF8);
      }
      v21 = *(_DWORD *)(a1 + 124);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198241038);
      }
      v22 = *(_QWORD *)(a1 + 112) + 24 * v21;
      v23 = *(_QWORD *)(v22 - 24);
      v24 = *(_QWORD *)(v22 - 16);
      v160 = 0;
      v161 = 0;
      LODWORD(v22) = *(_DWORD *)(v23 + 16);
      v25 = (v22 + 1);
      if ((_DWORD)v22 == -1)
      {
        v26 = 0;
      }
      else
      {
        if (v25 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x198241040);
        }
        v26 = (WTF *)WTF::fastMalloc((WTF *)(16 * v25));
        LODWORD(v161) = v25;
        v160 = v26;
      }
      v27 = *(_QWORD *)(v23 + 8);
      v157 = v23;
      v158 = v24;
      if (v27)
      {
        v28 = *(unsigned int *)(v27 - 4);
        v29 = (_QWORD *)(v27 + 16 * v28);
        if (*(_DWORD *)(v27 - 12))
        {
          v30 = *(_QWORD **)(v23 + 8);
          if ((_DWORD)v28)
          {
            v31 = 16 * v28;
            v30 = *(_QWORD **)(v23 + 8);
            while ((unint64_t)(*v30 + 1) <= 1)
            {
              v30 += 2;
              v31 -= 16;
              if (!v31)
              {
                v30 = v29;
                break;
              }
            }
          }
LABEL_45:
          if (v27)
            v32 = (_QWORD *)(v27 + 16 * *(unsigned int *)(v27 - 4));
          else
            v32 = 0;
          if (v32 == v30)
          {
            v33 = 0;
            v99 = 0;
          }
          else
          {
            v33 = 0;
            do
            {
              v34 = (_QWORD *)v30[1];
              if ((v34 & 1) != 0)
                v34 = v30 + 1;
              if ((*v34 & 0x30uLL) <= 0x10)
              {
                v35 = (int *)*v30;
                if (*v30)
                  *v35 += 2;
                v36 = v35[4];
                if ((v36 & 0x20) != 0)
                {
                  *v35 += 2;
                  v38 = (WTF::StringImpl *)v35;
                }
                else
                {
                  if ((v36 & 0x10) != 0)
                  {
                    v37 = *v35 + 2;
                    *v35 = v37;
                    v38 = (WTF::StringImpl *)v35;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a1 + 696) + 41912), (unint64_t)v35, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v162);
                    v38 = v162;
                    v37 = *(_DWORD *)v162;
                  }
                  *(_DWORD *)v38 = v37 + 2;
                  if (v37)
                  {
                    *(_DWORD *)v38 = v37;
                  }
                  else
                  {
                    WTF::StringImpl::~StringImpl(v38, this, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                  }
                }
                v39 = *(_QWORD *)(a1 + 80);
                if (v39)
                {
                  v40 = *(unsigned int *)(a1 + 100);
                  v41 = *(_QWORD *)(a1 + 88);
                  v42 = v39 - 1;
                  do
                  {
                    if (v42 >> 5 >= v40)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198241028);
                    }
                    if (*(_DWORD *)(*(_QWORD *)(v41 + 8 * (v42 >> 5)) + 12 * (v42 & 0x1F)))
                      break;
                    *(_QWORD *)(a1 + 80) = v42--;
                  }
                  while (v42 != -1);
                }
                v43 = (WTF::StringImpl *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(a1);
                ++*(_DWORD *)v43;
                JSC::BytecodeGenerator::variableForLocalEntry((uint64_t)&v162, a1, v38, (_QWORD **)v30 + 1, a3[1], 1);
                JSC::BytecodeGenerator::emitGetFromScope(a1, v43, v24, (unint64_t)&v162, 1, v44, v45, v46);
                v47 = v162;
                v162 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v47, this, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
                  }
                  else
                  {
                    *(_DWORD *)v47 -= 2;
                  }
                }
                v48 = *(_DWORD *)v38;
                *(_DWORD *)v38 += 2;
                if (v48)
                {
                  *(_DWORD *)v38 = v48;
                }
                else
                {
                  WTF::StringImpl::~StringImpl(v38, this, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
                }
                if (*v35 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, this, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
                }
                else
                {
                  *v35 -= 2;
                }
                v162 = v43;
                v163 = v38;
                v49 = HIDWORD(v161);
                if (HIDWORD(v161) == (_DWORD)v161)
                {
                  v96 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v160, HIDWORD(v161) + 1, (unint64_t)&v162);
                  v49 = HIDWORD(v161);
                  v26 = v160;
                  v97 = (_QWORD *)((char *)v160 + 16 * HIDWORD(v161));
                  v98 = *(_QWORD *)v96;
                  v52 = (WTF::StringImpl **)(v96 + 8);
                  *v97 = v98;
                  v51 = (WTF::StringImpl **)(v97 + 1);
                }
                else
                {
                  v26 = v160;
                  v50 = (WTF::StringImpl **)((char *)v160 + 16 * HIDWORD(v161));
                  *v50 = v43;
                  v51 = v50 + 1;
                  v52 = &v163;
                }
                v53 = *v52;
                *v52 = 0;
                *v51 = v53;
                v33 = v49 + 1;
                HIDWORD(v161) = v49 + 1;
                v54 = v163;
                v163 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v54, this, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                  }
                  else
                  {
                    *(_DWORD *)v54 -= 2;
                  }
                }
              }
              v55 = v30 + 2;
              v30 = v29;
              if (v55 != v29)
              {
                v30 = v55;
                while ((unint64_t)(*v30 + 1) <= 1)
                {
                  v30 += 2;
                  if (v30 == v29)
                  {
                    v30 = v29;
                    break;
                  }
                }
              }
            }
            while (v30 != v32);
            v99 = v33;
            LODWORD(v25) = v161;
          }
          if (v99 >= v25)
            goto LABEL_92;
          if (v99 < v33)
          {
            WTF::Vector<std::pair<JSC::RegisterID *,JSC::Identifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)&v160, (WTF::AtomStringImpl *)v99, (uint64_t)a3, a4, a5, a6, a7, a8);
            v26 = v160;
          }
          v153 = v26;
          if (v99)
          {
            if ((_DWORD)v161)
            {
              LODWORD(v161) = v99;
              v160 = (WTF *)WTF::fastRealloc((unint64_t)v26, 16 * v99, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_92:
              v100 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4);
              v101 = *(unsigned int *)(v158 + 4);
              if ((JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v100, v101, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v100, v101, v102, v103, v104, v105, v106) & 1) == 0)
              {
                JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v100, v101, v148, v149, v150, v151, v152);
              }
              v107 = *(_DWORD *)(v158 + 4);
              v108 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
              v109 = a3[1];
              v110 = *(unsigned int *)(JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a1) + 4);
              if ((JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v107, v108, v109, v110, v111, v112, v113) & 1) == 0&& (JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v107, v108, v109, v110, v117, v118, v119) & 1) == 0)
              {
                JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v107, v108, v109, v110, v117, v118, v119);
              }
              v120 = *(int **)(a1 + 248);
              if ((int *)(a1 + 208) != v120 && v120 && v120 != (int *)v158)
                JSC::BytecodeGenerator::emitMove(a1, v120, v158, v115, v116, v117, v118, v119);
              v121 = v160;
              if (!HIDWORD(v161))
              {
LABEL_117:
                if (v121)
                  WTF::fastFree((unint64_t)v121, v120, v114, v115, v116, v117, v118, v119);
                return;
              }
              v122 = 16 * HIDWORD(v161);
              v123 = (uint64_t *)((char *)v160 + 8);
              v124 = v122;
              while (1)
              {
                JSC::SymbolTable::get((unint64_t *)&v159, *(_QWORD *)(v157 + 8), *v123);
                v125 = v159;
                if ((v159 & 1) != 0)
                  v125 = &v159;
                if (*v125 <= 1uLL)
                  break;
                v126 = (_DWORD *)*(v123 - 1);
                JSC::BytecodeGenerator::variableForLocalEntry((uint64_t)&v162, a1, (_DWORD *)*v123, &v159, a3[1], 1);
                JSC::BytecodeGenerator::emitPutToScope(a1, v158, (uint64_t)&v162, (uint64_t)v126, 1, 2, v127, v128);
                v129 = v162;
                v162 = 0;
                if (v129)
                {
                  if (*(_DWORD *)v129 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v129, (WTF::AtomStringImpl *)v120, v114, v115, v116, v117, v118, v119);
                    WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
                  }
                  else
                  {
                    *(_DWORD *)v129 -= 2;
                  }
                }
                --*v126;
                if ((v159 & 1) == 0)
                  JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v159, v120, v114, v115, v116, v117, v118, v119);
                v123 += 2;
                v124 -= 16;
                if (!v124)
                {
                  v138 = (WTF::StringImpl **)((char *)v121 + 8);
                  do
                  {
                    v139 = *v138;
                    *v138 = 0;
                    if (v139)
                    {
                      if (*(_DWORD *)v139 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v139, (WTF::AtomStringImpl *)v120, v114, v115, v116, v117, v118, v119);
                        WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
                      }
                      else
                      {
                        *(_DWORD *)v139 -= 2;
                      }
                    }
                    v138 += 2;
                    v122 -= 16;
                  }
                  while (v122);
                  goto LABEL_117;
                }
              }
              __break(0xC471u);
LABEL_154:
              JUMPOUT(0x198240FCCLL);
            }
            if (v99 >> 28)
            {
              __break(0xC471u);
              goto LABEL_154;
            }
            v154 = HIDWORD(v161);
            v155 = (WTF *)WTF::fastMalloc((WTF *)(16 * v99));
            LODWORD(v161) = v99;
            v160 = v155;
            v153 = v26;
            if (v155 != v26)
            {
              v156 = v155;
              memcpy(v155, v26, 16 * v154);
              v153 = v156;
            }
          }
          if (v26)
          {
            if (v153 == v26)
            {
              v160 = 0;
              LODWORD(v161) = 0;
            }
            WTF::fastFree((unint64_t)v26, this, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_92;
        }
        v30 = (_QWORD *)(v27 + 16 * v28);
      }
      else
      {
        v30 = 0;
        v28 = 0;
      }
      v29 = (_QWORD *)(v27 + 16 * v28);
      goto LABEL_45;
    }
    if (v11)
    {
      v15 = *(unsigned int *)(v11 - 4);
      v16 = v11 + 16 * v15;
      if (*(_DWORD *)(v11 - 12))
      {
        v17 = v11;
        if ((_DWORD)v15)
        {
          v18 = 16 * v15;
          v17 = v11;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            v18 -= 16;
            if (!v18)
            {
              v17 = v16;
              goto LABEL_16;
            }
          }
        }
        goto LABEL_16;
      }
      v17 = v11 + 16 * v15;
    }
    else
    {
      v17 = 0;
      v15 = 0;
    }
    v16 = v11 + 16 * v15;
LABEL_16:
    if (v11)
      v11 += 16 * *(unsigned int *)(v11 - 4);
    if (v11 == v17)
      return;
    while ((*(_WORD *)(v17 + 8) & 1) == 0)
    {
      v19 = v17 + 16;
      v17 = v16;
      if (v19 != v16)
      {
        v17 = v19;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 16;
          if (v17 == v16)
          {
            v17 = v16;
            break;
          }
        }
      }
      if (v17 == v11)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t WTF::dataLog<char [31],JSC::Identifier,char [5],JSC::VarKind,char [30],JSC::VarOffset,char [3]>(JSC::Identifier *a1, char *a2, JSC::VarOffset *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  const char *v10;
  WTF::PrintStream *v11;
  uint64_t result;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Trying to add variable called ");
  JSC::Identifier::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", " as ");
  v9 = *a2;
  if (v9 >= 4)
  {
    result = 72;
    __break(0xC471u);
  }
  else
  {
    v10 = off_1E358BD70[v9];
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", " but it was already added as ");
    JSC::VarOffset::dump(a3, v8);
    WTF::PrintStream::printf(v8, "%s", ".\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::tempDestination(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (!a2 || a1 + 208 == a2 || !*(_BYTE *)(a2 + 8))
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(unsigned int *)(a1 + 100);
    if (v3)
    {
      v5 = *(_QWORD *)(a1 + 88);
      do
      {
        v6 = v3 - 1;
        v7 = (v3 - 1) >> 5;
        if (v7 >= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x1982413B0);
        }
        if (*(_DWORD *)(*(_QWORD *)(v5 + 8 * v7) + 12 * (v6 & 0x1F)))
          break;
        *(_QWORD *)(a1 + 80) = v6;
        --v3;
      }
      while (v6);
    }
    v8 = v3 + 1;
    *(_QWORD *)(a1 + 80) = v3 + 1;
    v9 = v3 >> 5;
    if (v3 >> 5 >= v4)
    {
      v17 = (_QWORD *)(a1 + 88);
      v18 = WTF::fastMalloc((WTF *)0x180);
      v21 = v18;
      v19 = *(unsigned int *)(a1 + 100);
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 96))
      {
        v20 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v19 + 1, (unint64_t)&v21);
        v19 = *(unsigned int *)(a1 + 100);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v19) = *v20;
      }
      else
      {
        *(_QWORD *)(*v17 + 8 * v19) = v18;
      }
      v4 = (v19 + 1);
      *(_DWORD *)(a1 + 100) = v4;
      v8 = *(_QWORD *)(a1 + 80);
      v10 = v8 - 1;
      v9 = (v8 - 1) >> 5;
    }
    else
    {
      v10 = v3;
    }
    if (v9 >= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1982413B8);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v9) + 12 * (v10 & 0x1F);
    *(_DWORD *)v11 = 0;
    *(_DWORD *)(v11 + 4) = ~(_DWORD)v3;
    *(_BYTE *)(v11 + 8) = 0;
    v12 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
    v13 = *(_QWORD *)(v12 + 20);
    if ((v13 & 0x7FFFFFFF) > v8)
      v8 = v13 & 0x7FFFFFFF;
    v14 = v8 + 1;
    *(_QWORD *)(v12 + 20) = v13 & 0xFFFFFFFF80000000 | v14 & 0x7FFFFFFE;
    if ((v14 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL)
      || (v15 = *(_QWORD *)(a1 + 80) - 1, v15 >> 5 >= *(unsigned int *)(a1 + 100)))
    {
      __break(0xC471u);
      JUMPOUT(0x1982413A8);
    }
    a2 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v15 >> 5)) + 12 * (v15 & 0x1F);
    *(_BYTE *)(a2 + 8) = 1;
  }
  return a2;
}

uint64_t JSC::OpInByVal::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  v11 = a4;
  v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v12 + 4) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(unsigned int *)(v13 + 148);
  *(_DWORD *)(v13 + 148) = v14 + 1;
  result = JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v14, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, v11, v14, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, v11, v14, v19, v20, v21);
  }
  return result;
}

_DWORD *JSC::BytecodeGenerator::emitTryGetById(uint64_t a1, _DWORD *a2, uint64_t a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;

  JSC::BytecodeGenerator::kill(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = a2[1];
  v13 = *(unsigned int *)(a3 + 4);
  v20 = JSC::BytecodeGenerator::addConstant(a1, a4, v14, v15, v16, v17, v18, v19);
  v27 = v20;
  v28 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v28 + 4) |= 1u;
  v29 = (*(_DWORD *)(v28 + 8) + 1);
  *(_DWORD *)(v28 + 8) = v29;
  v30 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v30 + 4) |= 1u;
  v31 = *(_QWORD *)(v30 + 16);
  v32 = *(unsigned int *)(v31 + 180);
  *(_DWORD *)(v31 + 180) = v32 + 1;
  v33 = (v12 - 1073741808) < 0x80;
  if (v12 <= 0x3FFFFFFF)
    v33 = (v12 + 128) < 0x90;
  if (v33
    && ((int)v13 <= 0x3FFFFFFF
      ? (v34 = (v13 + 128) < 0x90)
      : (v34 = (v13 - 1073741808) < 0x80),
        v34 && (v29 | v20 | v32) <= 0xFF))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2D, v21, v22, v23, v24, v25, v26);
    v61 = 45;
    v35 = *(unsigned int *)(a1 + 12);
    v36 = *(unsigned int *)(a1 + 16);
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = 45;
      v39 = *(_DWORD *)(a1 + 12);
      v40 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v35 == *(_DWORD *)(a1 + 8))
      {
        v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v61);
        v35 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        v38 = *v56;
      }
      else
      {
        v37 = *(_QWORD *)a1;
        v38 = 45;
      }
      *(_BYTE *)(v37 + v35) = v38;
      v39 = *(_DWORD *)(a1 + 12) + 1;
      v40 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v39;
      *(_DWORD *)(a1 + 16) = v40;
    }
    v41 = v12 + 16;
    if (v12 <= 0x3FFFFFFF)
      v41 = v12;
    v62 = v41;
    if (v39 > v40)
    {
      *(_DWORD *)(a1 + 16) = v40 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v41;
      v44 = *(_DWORD *)(a1 + 12);
      v45 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v42 = v39;
      if (v39 == *(_DWORD *)(a1 + 8))
      {
        v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v62);
        v42 = *(unsigned int *)(a1 + 12);
        v43 = *(_QWORD *)a1;
        v41 = *v57;
      }
      else
      {
        v43 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v43 + v42) = v41;
      v44 = *(_DWORD *)(a1 + 12) + 1;
      v45 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v44;
      *(_DWORD *)(a1 + 16) = v45;
    }
    v46 = v13 + 16;
    if ((int)v13 <= 0x3FFFFFFF)
      v46 = v13;
    v63 = v46;
    if (v44 > v45)
    {
      *(_DWORD *)(a1 + 16) = v45 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v45) = v46;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v47 = v44;
      if (v44 == *(_DWORD *)(a1 + 8))
      {
        v58 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v63);
        v47 = *(unsigned int *)(a1 + 12);
        v48 = *(_QWORD *)a1;
        v46 = *v58;
      }
      else
      {
        v48 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v48 + v47) = v46;
      v49 = *(_DWORD *)(a1 + 12) + 1;
      v50 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v49;
      *(_DWORD *)(a1 + 16) = v50;
    }
    v64 = v27;
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = v27;
      v51 = *(_DWORD *)(a1 + 12);
      v52 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v49 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v64);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v49) = v27;
      v51 = *(_DWORD *)(a1 + 12) + 1;
      v52 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v51;
      *(_DWORD *)(a1 + 16) = v52;
    }
    v65 = v29;
    if (v51 > v52)
    {
      *(_DWORD *)(a1 + 16) = v52 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v52) = v29;
      v53 = *(_DWORD *)(a1 + 12);
      v54 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v51 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v65);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v51) = v29;
      v53 = *(_DWORD *)(a1 + 12) + 1;
      v54 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v53;
      *(_DWORD *)(a1 + 16) = v54;
    }
    v66 = v32;
    if (v53 > v54)
    {
      *(_DWORD *)(a1 + 16) = v54 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v54) = v32;
    }
    else
    {
      if (v53 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v66);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v53) = v32;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else if ((JSC::OpTryGetById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v12, v13, v20, v29, v32, v25, v26) & 1) == 0)
  {
    JSC::OpTryGetById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v12, v13, v27, v29, v32, v59, v60);
  }
  return a2;
}

_DWORD *JSC::BytecodeGenerator::emitGetLength(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = a2[1];
  v12 = *(_DWORD *)(a3 + 4);
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = (*(_DWORD *)(v13 + 8) + 1);
  *(_DWORD *)(v13 + 8) = v14;
  JSC::OpGetLength::emit<JSC::BytecodeGenerator>(a1, v11, v12, v14, v15, v16, v17, v18);
  return a2;
}

uint64_t JSC::OpGetLength::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = a3;
  v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v12 + 4) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(unsigned int *)(v13 + 76);
  *(_DWORD *)(v13 + 76) = v14 + 1;
  result = JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v14, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v14, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v14, v19, v20, v21);
  }
  return result;
}

_DWORD *JSC::BytecodeGenerator::emitGetById(uint64_t a1, _DWORD *a2, uint64_t a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  _BOOL4 v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  _BYTE *v124;
  char v125;

  v12 = *(_QWORD *)a4;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 1768);
  JSC::BytecodeGenerator::kill(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v20 = a2[1];
  v21 = *(unsigned int *)(a3 + 4);
  if (v12 != v13)
  {
    v22 = JSC::BytecodeGenerator::addConstant(a1, a4, v14, v15, v16, v17, v18, v19);
    v29 = v22;
    v30 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v30 + 4) |= 1u;
    v31 = (*(_DWORD *)(v30 + 8) + 1);
    *(_DWORD *)(v30 + 8) = v31;
    v32 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v32 + 4) |= 1u;
    v33 = *(_QWORD *)(v32 + 16);
    v34 = *(unsigned int *)(v33 + 72);
    *(_DWORD *)(v33 + 72) = v34 + 1;
    v35 = (v20 - 1073741808) < 0x80;
    if (v20 <= 0x3FFFFFFF)
      v35 = (v20 + 128) < 0x90;
    if (!v35)
      goto LABEL_38;
    v36 = (v21 - 1073741808) < 0x80;
    if ((int)v21 <= 0x3FFFFFFF)
      v36 = (v21 + 128) < 0x90;
    if (v36 && (v31 | v22 | v34) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x12, v23, v24, v25, v26, v27, v28);
      v125 = 18;
      v37 = *(unsigned int *)(a1 + 12);
      v38 = *(unsigned int *)(a1 + 16);
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = 18;
        v41 = *(_DWORD *)(a1 + 12);
        v42 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v37 == *(_DWORD *)(a1 + 8))
        {
          v116 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v125);
          v37 = *(unsigned int *)(a1 + 12);
          v39 = *(_QWORD *)a1;
          v40 = *v116;
        }
        else
        {
          v39 = *(_QWORD *)a1;
          v40 = 18;
        }
        *(_BYTE *)(v39 + v37) = v40;
        v41 = *(_DWORD *)(a1 + 12) + 1;
        v42 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v41;
        *(_DWORD *)(a1 + 16) = v42;
      }
      v43 = v20 + 16;
      if (v20 <= 0x3FFFFFFF)
        v43 = v20;
      v125 = v43;
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = v43;
        v46 = *(_DWORD *)(a1 + 12);
        v47 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v44 = v41;
        if (v41 == *(_DWORD *)(a1 + 8))
        {
          v117 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v125);
          v44 = *(unsigned int *)(a1 + 12);
          v45 = *(_QWORD *)a1;
          v43 = *v117;
        }
        else
        {
          v45 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v45 + v44) = v43;
        v46 = *(_DWORD *)(a1 + 12) + 1;
        v47 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v46;
        *(_DWORD *)(a1 + 16) = v47;
      }
      v48 = v21 + 16;
      if ((int)v21 <= 0x3FFFFFFF)
        v48 = v21;
      v125 = v48;
      if (v46 > v47)
      {
        *(_DWORD *)(a1 + 16) = v47 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v47) = v48;
        v51 = *(_DWORD *)(a1 + 12);
        v52 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v49 = v46;
        if (v46 == *(_DWORD *)(a1 + 8))
        {
          v118 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v125);
          v49 = *(unsigned int *)(a1 + 12);
          v50 = *(_QWORD *)a1;
          v48 = *v118;
        }
        else
        {
          v50 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v50 + v49) = v48;
        v51 = *(_DWORD *)(a1 + 12) + 1;
        v52 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v51;
        *(_DWORD *)(a1 + 16) = v52;
      }
      v125 = v29;
      if (v51 > v52)
      {
        *(_DWORD *)(a1 + 16) = v52 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v52) = v29;
        v53 = *(_DWORD *)(a1 + 12);
        v54 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v51 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v51) = v29;
        v53 = *(_DWORD *)(a1 + 12) + 1;
        v54 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v53;
        *(_DWORD *)(a1 + 16) = v54;
      }
      v125 = v31;
      if (v53 > v54)
      {
        *(_DWORD *)(a1 + 16) = v54 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v54) = v31;
        v55 = *(_DWORD *)(a1 + 12);
        v56 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v53 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v53) = v31;
        v55 = *(_DWORD *)(a1 + 12) + 1;
        v56 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v55;
        *(_DWORD *)(a1 + 16) = v56;
      }
      v125 = v34;
      if (v55 > v56)
      {
        *(_DWORD *)(a1 + 16) = v56 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v56) = v34;
        return a2;
      }
      v57 = v55;
      if (v55 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v55) = v34;
LABEL_36:
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        return a2;
      }
    }
    else
    {
LABEL_38:
      if (v20 <= 0x3FFFFFFF)
        v59 = (v20 + 0x8000) >> 6 < 0x201;
      else
        v59 = (v20 - 1073741760) < 0x8000;
      if (!v59)
        goto LABEL_124;
      v60 = (v21 - 1073741760) < 0x8000;
      if ((int)v21 <= 0x3FFFFFFF)
        v60 = (v21 + 0x8000) >> 6 < 0x201;
      if (!v60 || (v31 | v22 | v34) >> 16)
      {
LABEL_124:
        JSC::OpGetById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v20, v21, v22, v31, v34, v27, v28);
        return a2;
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x12, v23, v24, v25, v26, v27, v28);
      v125 = 0x80;
      v61 = *(unsigned int *)(a1 + 12);
      v62 = *(unsigned int *)(a1 + 16);
      if (v61 > v62)
      {
        *(_DWORD *)(a1 + 16) = v62 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v62) = 0x80;
        v65 = *(_DWORD *)(a1 + 12);
        v66 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v61 == *(_DWORD *)(a1 + 8))
        {
          v119 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v61 + 1), (unint64_t)&v125);
          v61 = *(unsigned int *)(a1 + 12);
          v63 = *(_QWORD *)a1;
          v64 = *v119;
        }
        else
        {
          v63 = *(_QWORD *)a1;
          v64 = 0x80;
        }
        *(_BYTE *)(v63 + v61) = v64;
        v65 = *(_DWORD *)(a1 + 12) + 1;
        v66 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v65;
        *(_DWORD *)(a1 + 16) = v66;
      }
      v67 = 18;
      v125 = 18;
      if (v65 > v66)
      {
        *(_DWORD *)(a1 + 16) = v66 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v66) = 18;
        v70 = *(_DWORD *)(a1 + 12);
        v71 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v68 = v65;
        if (v65 == *(_DWORD *)(a1 + 8))
        {
          v120 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v125);
          v68 = *(unsigned int *)(a1 + 12);
          v69 = *(_QWORD *)a1;
          v67 = *v120;
        }
        else
        {
          v69 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v69 + v68) = v67;
        v70 = *(_DWORD *)(a1 + 12) + 1;
        v71 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v70;
        *(_DWORD *)(a1 + 16) = v71;
      }
      if (v20 > 0x3FFFFFFF)
        v20 += 64;
      v125 = v20;
      if (v70 > v71)
      {
        *(_DWORD *)(a1 + 16) = v71 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v71) = v20;
        v72 = *(_DWORD *)(a1 + 12);
        v73 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v70 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v70 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v70) = v20;
        v72 = *(_DWORD *)(a1 + 12) + 1;
        v73 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v72;
        *(_DWORD *)(a1 + 16) = v73;
      }
      v74 = v20 >> 8;
      v125 = BYTE1(v20);
      if (v72 > v73)
      {
        *(_DWORD *)(a1 + 16) = v73 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v73) = BYTE1(v20);
        v77 = *(_DWORD *)(a1 + 12);
        v78 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v75 = v72;
        if (v72 == *(_DWORD *)(a1 + 8))
        {
          v121 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v72 + 1), (unint64_t)&v125);
          v75 = *(unsigned int *)(a1 + 12);
          v76 = *(_QWORD *)a1;
          LOBYTE(v74) = *v121;
        }
        else
        {
          v76 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v76 + v75) = v74;
        v77 = *(_DWORD *)(a1 + 12) + 1;
        v78 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v77;
        *(_DWORD *)(a1 + 16) = v78;
      }
      if ((int)v21 > 0x3FFFFFFF)
        LODWORD(v21) = v21 + 64;
      v125 = v21;
      if (v77 > v78)
      {
        *(_DWORD *)(a1 + 16) = v78 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v78) = v21;
        v79 = *(_DWORD *)(a1 + 12);
        v80 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v77 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v77) = v21;
        v79 = *(_DWORD *)(a1 + 12) + 1;
        v80 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v79;
        *(_DWORD *)(a1 + 16) = v80;
      }
      v81 = v21 >> 8;
      v125 = BYTE1(v21);
      if (v79 > v80)
      {
        *(_DWORD *)(a1 + 16) = v80 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v80) = BYTE1(v21);
        v84 = *(_DWORD *)(a1 + 12);
        v85 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v82 = v79;
        if (v79 == *(_DWORD *)(a1 + 8))
        {
          v122 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v125);
          v82 = *(unsigned int *)(a1 + 12);
          v83 = *(_QWORD *)a1;
          LOBYTE(v81) = *v122;
        }
        else
        {
          v83 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v83 + v82) = v81;
        v84 = *(_DWORD *)(a1 + 12) + 1;
        v85 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v84;
        *(_DWORD *)(a1 + 16) = v85;
      }
      v125 = v29;
      if (v84 > v85)
      {
        *(_DWORD *)(a1 + 16) = v85 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v85) = v29;
        v86 = *(_DWORD *)(a1 + 12);
        v87 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v84 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v84) = v29;
        v86 = *(_DWORD *)(a1 + 12) + 1;
        v87 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v86;
        *(_DWORD *)(a1 + 16) = v87;
      }
      v88 = v29 >> 8;
      v125 = BYTE1(v29);
      if (v86 > v87)
      {
        *(_DWORD *)(a1 + 16) = v87 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v87) = BYTE1(v29);
        v91 = *(_DWORD *)(a1 + 12);
        v92 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v89 = v86;
        if (v86 == *(_DWORD *)(a1 + 8))
        {
          v123 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v86 + 1), (unint64_t)&v125);
          v89 = *(unsigned int *)(a1 + 12);
          v90 = *(_QWORD *)a1;
          LOBYTE(v88) = *v123;
        }
        else
        {
          v90 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v90 + v89) = v88;
        v91 = *(_DWORD *)(a1 + 12) + 1;
        v92 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v91;
        *(_DWORD *)(a1 + 16) = v92;
      }
      v125 = v31;
      if (v91 > v92)
      {
        *(_DWORD *)(a1 + 16) = v92 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v92) = v31;
        v93 = *(_DWORD *)(a1 + 12);
        v94 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v91 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v91 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v91) = v31;
        v93 = *(_DWORD *)(a1 + 12) + 1;
        v94 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v93;
        *(_DWORD *)(a1 + 16) = v94;
      }
      v95 = v31 >> 8;
      v125 = BYTE1(v31);
      if (v93 > v94)
      {
        *(_DWORD *)(a1 + 16) = v94 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v94) = BYTE1(v31);
        v98 = *(_DWORD *)(a1 + 12);
        v99 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v96 = v93;
        if (v93 == *(_DWORD *)(a1 + 8))
        {
          v124 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v93 + 1), (unint64_t)&v125);
          v96 = *(unsigned int *)(a1 + 12);
          v97 = *(_QWORD *)a1;
          LOBYTE(v95) = *v124;
        }
        else
        {
          v97 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v97 + v96) = v95;
        v98 = *(_DWORD *)(a1 + 12) + 1;
        v99 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v98;
        *(_DWORD *)(a1 + 16) = v99;
      }
      v125 = v34;
      if (v98 > v99)
      {
        *(_DWORD *)(a1 + 16) = v99 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v99) = v34;
        v100 = *(_DWORD *)(a1 + 12);
        v101 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v98 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v98 + 1), (unint64_t)&v125);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v98) = v34;
        v100 = *(_DWORD *)(a1 + 12) + 1;
        v101 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v100;
        *(_DWORD *)(a1 + 16) = v101;
      }
      v102 = v34 >> 8;
      v125 = BYTE1(v34);
      if (v100 > v101)
      {
        *(_DWORD *)(a1 + 16) = v101 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v101) = BYTE1(v34);
        return a2;
      }
      v57 = v100;
      if (v100 != *(_DWORD *)(a1 + 8))
      {
        v103 = *(_QWORD *)a1;
LABEL_97:
        *(_BYTE *)(v103 + v57) = v102;
        goto LABEL_36;
      }
    }
    v115 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v57 + 1), (unint64_t)&v125);
    v57 = *(unsigned int *)(a1 + 12);
    v103 = *(_QWORD *)a1;
    LOBYTE(v102) = *v115;
    goto LABEL_97;
  }
  v104 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v104 + 4) |= 1u;
  v105 = (*(_DWORD *)(v104 + 8) + 1);
  *(_DWORD *)(v104 + 8) = v105;
  v106 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v106 + 4) |= 1u;
  v107 = *(_QWORD *)(v106 + 16);
  v108 = *(unsigned int *)(v107 + 76);
  *(_DWORD *)(v107 + 76) = v108 + 1;
  if ((JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v20, v21, v105, v108, v17, v18, v19) & 1) == 0&& (JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v20, v21, v105, v108, v109, v110, v111) & 1) == 0)
  {
    JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v20, v21, v105, v108, v112, v113, v114);
  }
  return a2;
}

_DWORD *JSC::BytecodeGenerator::emitGetById(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, WTF::AtomStringImpl *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  JSC::BytecodeGenerator::kill(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v13 = a2[1];
  v14 = *(unsigned int *)(a3 + 4);
  v15 = *(unsigned int *)(a4 + 4);
  v22 = JSC::BytecodeGenerator::addConstant(a1, a5, v16, v17, v18, v19, v20, v21);
  v29 = v22;
  v30 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v30 + 4) |= 1u;
  v31 = (*(_DWORD *)(v30 + 8) + 1);
  *(_DWORD *)(v30 + 8) = v31;
  v32 = (v13 - 1073741808) < 0x80;
  if (v13 <= 0x3FFFFFFF)
    v32 = (v13 + 128) < 0x90;
  if (!v32)
    goto LABEL_49;
  if (!((int)v14 <= 0x3FFFFFFF ? (v14 + 128) < 0x90 : (v14 - 1073741808) < 0x80))
    goto LABEL_49;
  v34 = (v15 - 1073741808) < 0x80;
  if ((int)v15 <= 0x3FFFFFFF)
    v34 = (v15 + 128) < 0x90;
  if (v34 && (v31 | v22) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x33, v23, v24, v25, v26, v27, v28);
    v65 = 51;
    v35 = *(unsigned int *)(a1 + 12);
    v36 = *(unsigned int *)(a1 + 16);
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = 51;
      v39 = *(_DWORD *)(a1 + 12);
      v40 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v35 == *(_DWORD *)(a1 + 8))
      {
        v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v65);
        v35 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        v38 = *v59;
      }
      else
      {
        v37 = *(_QWORD *)a1;
        v38 = 51;
      }
      *(_BYTE *)(v37 + v35) = v38;
      v39 = *(_DWORD *)(a1 + 12) + 1;
      v40 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v39;
      *(_DWORD *)(a1 + 16) = v40;
    }
    v41 = v13 + 16;
    if (v13 <= 0x3FFFFFFF)
      v41 = v13;
    v66 = v41;
    if (v39 > v40)
    {
      *(_DWORD *)(a1 + 16) = v40 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v41;
      v44 = *(_DWORD *)(a1 + 12);
      v45 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v42 = v39;
      if (v39 == *(_DWORD *)(a1 + 8))
      {
        v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v66);
        v42 = *(unsigned int *)(a1 + 12);
        v43 = *(_QWORD *)a1;
        v41 = *v60;
      }
      else
      {
        v43 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v43 + v42) = v41;
      v44 = *(_DWORD *)(a1 + 12) + 1;
      v45 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v44;
      *(_DWORD *)(a1 + 16) = v45;
    }
    v46 = v14 + 16;
    if ((int)v14 <= 0x3FFFFFFF)
      v46 = v14;
    v67 = v46;
    if (v44 > v45)
    {
      *(_DWORD *)(a1 + 16) = v45 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v45) = v46;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v47 = v44;
      if (v44 == *(_DWORD *)(a1 + 8))
      {
        v61 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v67);
        v47 = *(unsigned int *)(a1 + 12);
        v48 = *(_QWORD *)a1;
        v46 = *v61;
      }
      else
      {
        v48 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v48 + v47) = v46;
      v49 = *(_DWORD *)(a1 + 12) + 1;
      v50 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v49;
      *(_DWORD *)(a1 + 16) = v50;
    }
    v51 = v15 + 16;
    if ((int)v15 <= 0x3FFFFFFF)
      v51 = v15;
    v68 = v51;
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = v51;
      v54 = *(_DWORD *)(a1 + 12);
      v55 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v52 = v49;
      if (v49 == *(_DWORD *)(a1 + 8))
      {
        v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v68);
        v52 = *(unsigned int *)(a1 + 12);
        v53 = *(_QWORD *)a1;
        v51 = *v62;
      }
      else
      {
        v53 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v53 + v52) = v51;
      v54 = *(_DWORD *)(a1 + 12) + 1;
      v55 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v54;
      *(_DWORD *)(a1 + 16) = v55;
    }
    v69 = v29;
    if (v54 > v55)
    {
      *(_DWORD *)(a1 + 16) = v55 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v55) = v29;
      v56 = *(_DWORD *)(a1 + 12);
      v57 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v54 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v69);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v54) = v29;
      v56 = *(_DWORD *)(a1 + 12) + 1;
      v57 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v56;
      *(_DWORD *)(a1 + 16) = v57;
    }
    v70 = v31;
    if (v56 > v57)
    {
      *(_DWORD *)(a1 + 16) = v57 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v57) = v31;
    }
    else
    {
      if (v56 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v56 + 1), (unint64_t)&v70);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v56) = v31;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_49:
    if ((JSC::OpGetByIdWithThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v13, v14, v15, v22, v31, v27, v28) & 1) == 0)JSC::OpGetByIdWithThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v13, v14, v15, v29, v31, v63, v64);
  }
  return a2;
}

_DWORD *JSC::BytecodeGenerator::emitDirectGetById(uint64_t a1, _DWORD *a2, uint64_t a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = a3;
  JSC::BytecodeGenerator::kill(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = a2[1];
  LODWORD(v9) = *(_DWORD *)(v9 + 4);
  v19 = JSC::BytecodeGenerator::addConstant(a1, a4, v13, v14, v15, v16, v17, v18);
  v20 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v20 + 4) |= 1u;
  v21 = (*(_DWORD *)(v20 + 8) + 1);
  *(_DWORD *)(v20 + 8) = v21;
  JSC::OpGetByIdDirect::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v12, v9, v19, v21, v22, v23, v24);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitPutById(uint64_t a1, uint64_t a2, WTF::AtomStringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = JSC::BytecodeGenerator::addConstant(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a1 + 688), *(_DWORD *)(a2 + 4), v11);
  JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, (void *)*(unsigned int *)(a2 + 4), v11, *(unsigned int *)(a4 + 4), (unint64_t)*(unsigned __int8 *)(a1 + 712) << 8, v12, v13, v14);
  return a4;
}

_DWORD *JSC::StaticPropertyAnalyzer::putById(_DWORD *result, int a2, int a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int *v26;
  int v27;
  unsigned int v28;

  if (result)
  {
    v4 = *(result - 2);
    v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = v4 & (v6 ^ HIWORD(v6));
    v8 = result[4 * v7];
    if (v8 == a2)
    {
LABEL_3:
      v9 = *(_QWORD *)&result[4 * v7 + 2];
      if (!v9)
        return result;
      v12 = *(_QWORD *)(v9 + 24);
      v11 = (uint64_t *)(v9 + 24);
      v10 = v12;
      if (v12
        || (result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v11, 8u, 0), (v10 = *v11) != 0))
      {
        v13 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        v13 = 0;
      }
      v14 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = v13 & (v15 ^ HIWORD(v15));
      v17 = (int *)(v10 + 4 * v16);
      v18 = *v17;
      if (*v17 == -1)
      {
LABEL_7:
        *v17 = a3;
        v19 = *v11;
        if (*v11)
          v20 = *(_DWORD *)(v19 - 12) + 1;
        else
          v20 = 1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v11;
        if (*v11)
          v22 = *(_DWORD *)(v21 - 12);
        else
          v22 = 0;
        v23 = (*(_DWORD *)(v21 - 16) + v22);
        v24 = *(unsigned int *)(v21 - 4);
        if (v24 <= 0x400)
        {
          if (3 * v24 > 4 * v23)
            return result;
          if (!(_DWORD)v24)
          {
            v28 = 8;
            return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v11, v28, v17);
          }
LABEL_30:
          v28 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
          return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v11, v28, v17);
        }
        if (v24 <= 2 * v23)
          goto LABEL_30;
      }
      else
      {
        v26 = 0;
        v27 = 1;
        while (v18 != a3)
        {
          if (v18 == -2)
            v26 = v17;
          v16 = (v16 + v27) & v13;
          v17 = (int *)(v10 + 4 * v16);
          v18 = *v17;
          ++v27;
          if (*v17 == -1)
          {
            if (v26)
            {
              *v26 = -1;
              --*(_DWORD *)(*v11 - 16);
              v17 = v26;
            }
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      v25 = 1;
      while (v8 != 0x7FFFFFFF)
      {
        v7 = ((_DWORD)v7 + v25) & v4;
        v8 = result[4 * v7];
        ++v25;
        if (v8 == a2)
          goto LABEL_3;
      }
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitPutById(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  signed int v20;
  signed int v21;
  signed int v22;
  unsigned int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;

  v12 = JSC::BytecodeGenerator::addConstant(a1, a4, a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = v12;
  v20 = *(_DWORD *)(a2 + 4);
  v21 = *(_DWORD *)(a3 + 4);
  v22 = *(_DWORD *)(a5 + 4);
  v23 = *(unsigned __int8 *)(a1 + 712);
  v24 = (v20 - 1073741808) < 0x80;
  if (v20 <= 0x3FFFFFFF)
    v24 = (v20 + 128) < 0x90;
  if (!v24)
    goto LABEL_41;
  v25 = (v21 - 1073741808) < 0x80;
  if (v21 <= 0x3FFFFFFF)
    v25 = (v21 + 128) < 0x90;
  if (v12 > 0xFF || !v25)
    goto LABEL_41;
  v26 = (v22 - 1073741808) < 0x80;
  if (v22 <= 0x3FFFFFFF)
    v26 = (v22 + 128) < 0x90;
  if (v26)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x38, v13, v14, v15, v16, v17, v18);
    v83 = 56;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = *(unsigned int *)(a1 + 16);
    if (v27 > v28)
    {
      *(_DWORD *)(a1 + 16) = v28 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v28) = 56;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v27 == *(_DWORD *)(a1 + 8))
      {
        v77 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v83);
        v27 = *(unsigned int *)(a1 + 12);
        v29 = *(_QWORD *)a1;
        v30 = *v77;
      }
      else
      {
        v29 = *(_QWORD *)a1;
        v30 = 56;
      }
      *(_BYTE *)(v29 + v27) = v30;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v33 = v20 + 16;
    if (v20 <= 0x3FFFFFFF)
      v33 = v20;
    v84 = v33;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v33;
      v36 = *(_DWORD *)(a1 + 12);
      v37 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v34 = v31;
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        v78 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v84);
        v34 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        v33 = *v78;
      }
      else
      {
        v35 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v35 + v34) = v33;
      v36 = *(_DWORD *)(a1 + 12) + 1;
      v37 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v36;
      *(_DWORD *)(a1 + 16) = v37;
    }
    v38 = v21 + 16;
    if (v21 <= 0x3FFFFFFF)
      v38 = v21;
    v85 = v38;
    if (v36 > v37)
    {
      *(_DWORD *)(a1 + 16) = v37 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v37) = v38;
      v41 = *(_DWORD *)(a1 + 12);
      v42 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v39 = v36;
      if (v36 == *(_DWORD *)(a1 + 8))
      {
        v79 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v85);
        v39 = *(unsigned int *)(a1 + 12);
        v40 = *(_QWORD *)a1;
        v38 = *v79;
      }
      else
      {
        v40 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v40 + v39) = v38;
      v41 = *(_DWORD *)(a1 + 12) + 1;
      v42 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v41;
      *(_DWORD *)(a1 + 16) = v42;
    }
    v86 = v19;
    if (v41 > v42)
    {
      *(_DWORD *)(a1 + 16) = v42 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v42) = v19;
      v43 = *(_DWORD *)(a1 + 12);
      v44 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v41 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v86);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v41) = v19;
      v43 = *(_DWORD *)(a1 + 12) + 1;
      v44 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v43;
      *(_DWORD *)(a1 + 16) = v44;
    }
    v45 = v22 + 16;
    if (v22 <= 0x3FFFFFFF)
      v45 = v22;
    v87 = v45;
    if (v43 > v44)
    {
      *(_DWORD *)(a1 + 16) = v44 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v44) = v45;
      v48 = *(_DWORD *)(a1 + 12);
      v49 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v46 = v43;
      if (v43 == *(_DWORD *)(a1 + 8))
      {
        v80 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v87);
        v46 = *(unsigned int *)(a1 + 12);
        v47 = *(_QWORD *)a1;
        v45 = *v80;
      }
      else
      {
        v47 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v47 + v46) = v45;
      v48 = *(_DWORD *)(a1 + 12) + 1;
      v49 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v48;
      *(_DWORD *)(a1 + 16) = v49;
    }
    v88 = v23;
    if (v48 > v49)
    {
      *(_DWORD *)(a1 + 16) = v49 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v49) = v23;
    }
    else
    {
      if (v48 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v88);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v48) = v23;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_41:
    if (v20 <= 0x3FFFFFFF)
      v50 = (v20 + 0x8000) >> 6 < 0x201;
    else
      v50 = (v20 - 1073741760) < 0x8000;
    if (!v50)
      goto LABEL_67;
    v51 = (v21 - 1073741760) < 0x8000;
    if (v21 <= 0x3FFFFFFF)
      v51 = (v21 + 0x8000) >> 6 < 0x201;
    if (HIWORD(v12) || !v51)
      goto LABEL_67;
    v52 = (v22 - 1073741760) < 0x8000;
    if (v22 <= 0x3FFFFFFF)
      v52 = (v22 + 0x8000) >> 6 < 0x201;
    if (v52)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x38, v13, v14, v15, v16, v17, v18);
      v89 = 0x80;
      v53 = *(unsigned int *)(a1 + 12);
      v54 = *(unsigned int *)(a1 + 16);
      if (v53 > v54)
      {
        *(_DWORD *)(a1 + 16) = v54 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v54) = 0x80;
        v57 = *(_DWORD *)(a1 + 12);
        v58 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v53 == *(_DWORD *)(a1 + 8))
        {
          v81 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v89);
          v53 = *(unsigned int *)(a1 + 12);
          v55 = *(_QWORD *)a1;
          v56 = *v81;
        }
        else
        {
          v55 = *(_QWORD *)a1;
          v56 = 0x80;
        }
        *(_BYTE *)(v55 + v53) = v56;
        v57 = *(_DWORD *)(a1 + 12) + 1;
        v58 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v57;
        *(_DWORD *)(a1 + 16) = v58;
      }
      v59 = 56;
      v90 = 56;
      if (v57 > v58)
      {
        *(_DWORD *)(a1 + 16) = v58 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v58) = 56;
      }
      else
      {
        v60 = v57;
        if (v57 == *(_DWORD *)(a1 + 8))
        {
          v82 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v57 + 1), (unint64_t)&v90);
          v60 = *(unsigned int *)(a1 + 12);
          v61 = *(_QWORD *)a1;
          v59 = *v82;
        }
        else
        {
          v61 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v61 + v60) = v59;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v62 = v20 + 64;
      if (v20 <= 0x3FFFFFFF)
        v62 = v20;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v62);
      v63 = v21 + 64;
      if (v21 <= 0x3FFFFFFF)
        v63 = v21;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v63);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v19);
      v64 = v22 + 64;
      if (v22 <= 0x3FFFFFFF)
        v64 = v22;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v64);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
    }
    else
    {
LABEL_67:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x38, v13, v14, v15, v16, v17, v18);
      v91 = -126;
      v65 = *(unsigned int *)(a1 + 12);
      v66 = *(unsigned int *)(a1 + 16);
      if (v65 > v66)
      {
        *(_DWORD *)(a1 + 16) = v66 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v66) = -126;
        v69 = *(_DWORD *)(a1 + 12);
        v70 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v65 == *(_DWORD *)(a1 + 8))
        {
          v75 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v91);
          v65 = *(unsigned int *)(a1 + 12);
          v67 = *(_QWORD *)a1;
          v68 = *v75;
        }
        else
        {
          v67 = *(_QWORD *)a1;
          v68 = -126;
        }
        *(_BYTE *)(v67 + v65) = v68;
        v69 = *(_DWORD *)(a1 + 12) + 1;
        v70 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v69;
        *(_DWORD *)(a1 + 16) = v70;
      }
      v71 = 56;
      v92 = 56;
      if (v69 > v70)
      {
        *(_DWORD *)(a1 + 16) = v70 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v70) = 56;
      }
      else
      {
        v72 = v69;
        if (v69 == *(_DWORD *)(a1 + 8))
        {
          v76 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v69 + 1), (unint64_t)&v92);
          v72 = *(unsigned int *)(a1 + 12);
          v73 = *(_QWORD *)a1;
          v71 = *v76;
        }
        else
        {
          v73 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v73 + v72) = v71;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v20);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
    }
  }
  return a5;
}

uint64_t JSC::BytecodeGenerator::emitDirectPutById(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  int v59;
  int *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int v73;
  unsigned int v74;

  v12 = *a3;
  if (*a3)
    *(_DWORD *)v12 += 2;
  v13 = (uint64_t *)(a1 + 640);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  v15 = *(_QWORD *)(a1 + 640);
  if (v15
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), 8u, 0), (v15 = *v13) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = *((_DWORD *)v12 + 4);
  if ((v17 & 0x20) != 0)
    v17 = *((_DWORD *)v12 + 8);
  v18 = v16 & (v17 >> 8);
  v19 = v15 + 16 * v18;
  v20 = *(WTF::StringImpl **)v19;
  if (!*(_QWORD *)v19)
  {
LABEL_15:
    *(_QWORD *)v19 = v12;
    *(_DWORD *)(v19 + 8) = v14;
    v23 = *v13;
    if (*v13)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v13;
    if (*v13)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_21;
    }
    else
    {
      if (3 * v28 > 4 * v27)
      {
LABEL_21:
        v29 = *(_QWORD *)(a1 + 24);
        v30 = (uint64_t *)(v29 + 32);
        v31 = *(unsigned int *)(v29 + 44);
        if ((_DWORD)v31 == *(_DWORD *)(v29 + 40))
        {
          v70 = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)a3);
          v31 = *(unsigned int *)(v29 + 44);
          v71 = *(_QWORD *)(v29 + 32);
          v72 = *v70;
          if (*v70)
            *v72 += 2;
          *(_QWORD *)(v71 + 8 * v31) = v72;
        }
        else
        {
          v32 = *v30;
          v33 = *a3;
          if (*a3)
            *(_DWORD *)v33 += 2;
          *(_QWORD *)(v32 + 8 * v31) = v33;
        }
        *(_DWORD *)(v29 + 44) = v31 + 1;
        goto LABEL_29;
      }
      if (!(_DWORD)v28)
      {
        v74 = 8;
LABEL_67:
        v19 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), v74, (WTF::StringImpl **)v19);
        goto LABEL_21;
      }
    }
    v74 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
    goto LABEL_67;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != v12)
  {
    if (v20 == (WTF::StringImpl *)-1)
      v21 = v19;
    v18 = (v18 + v22) & v16;
    v19 = v15 + 16 * v18;
    v20 = *(WTF::StringImpl **)v19;
    ++v22;
    if (!*(_QWORD *)v19)
    {
      if (v21)
      {
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 8) = 0x7FFFFFFF;
        --*(_DWORD *)(*v13 - 16);
        v19 = v21;
      }
      goto LABEL_15;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
LABEL_29:
  v34 = *(unsigned int *)(v19 + 8);
  v35 = *(_QWORD *)(a1 + 688);
  if (v35)
  {
    v36 = *((_DWORD *)a2 + 1);
    v37 = *(_DWORD *)(v35 - 8);
    v38 = 9 * ((v36 + ~(v36 << 15)) ^ ((v36 + ~(v36 << 15)) >> 10));
    v39 = (v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11);
    v40 = v37 & (v39 ^ HIWORD(v39));
    v41 = *(_DWORD *)(v35 + 16 * v40);
    if (v41 == v36)
    {
LABEL_31:
      v42 = *(_QWORD *)(v35 + 16 * v40 + 8);
      if (v42)
      {
        v45 = *(_QWORD *)(v42 + 24);
        v44 = (uint64_t *)(v42 + 24);
        v43 = v45;
        if (v45
          || (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v44, 8u, 0), (v43 = *v44) != 0))
        {
          v46 = *(_DWORD *)(v43 - 8);
        }
        else
        {
          v46 = 0;
        }
        v47 = 9 * ((v34 + ~((_DWORD)v34 << 15)) ^ ((v34 + ~((_DWORD)v34 << 15)) >> 10));
        v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
        v49 = v46 & (v48 ^ HIWORD(v48));
        v50 = (int *)(v43 + 4 * v49);
        v51 = *v50;
        if (*v50 == -1)
        {
LABEL_35:
          *v50 = v34;
          v52 = *v44;
          if (*v44)
            v53 = *(_DWORD *)(v52 - 12) + 1;
          else
            v53 = 1;
          *(_DWORD *)(v52 - 12) = v53;
          v54 = *v44;
          if (*v44)
            v55 = *(_DWORD *)(v54 - 12);
          else
            v55 = 0;
          v56 = (*(_DWORD *)(v54 - 16) + v55);
          v57 = *(unsigned int *)(v54 - 4);
          if (v57 > 0x400)
          {
            if (v57 > 2 * v56)
              goto LABEL_41;
          }
          else
          {
            if (3 * v57 > 4 * v56)
              goto LABEL_41;
            if (!(_DWORD)v57)
            {
              v73 = 8;
              goto LABEL_72;
            }
          }
          v73 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
LABEL_72:
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v44, v73, v50);
          goto LABEL_41;
        }
        v60 = 0;
        v61 = 1;
        while (v51 != (_DWORD)v34)
        {
          if (v51 == -2)
            v60 = v50;
          v49 = (v49 + v61) & v46;
          v50 = (int *)(v43 + 4 * v49);
          v51 = *v50;
          ++v61;
          if (*v50 == -1)
          {
            if (v60)
            {
              *v60 = -1;
              --*(_DWORD *)(*v44 - 16);
              v50 = v60;
            }
            goto LABEL_35;
          }
        }
      }
    }
    else
    {
      v59 = 1;
      while (v41 != 0x7FFFFFFF)
      {
        v40 = ((_DWORD)v40 + v59) & v37;
        v41 = *(_DWORD *)(v35 + 16 * v40);
        ++v59;
        if (v41 == v36)
          goto LABEL_31;
      }
    }
  }
LABEL_41:
  JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, (void *)*((unsigned int *)a2 + 1), v34, *(unsigned int *)(a4 + 4), ((unint64_t)*(unsigned __int8 *)(a1 + 712) << 8) | 1, a6, a7, a8);
  return a4;
}

uint64_t JSC::BytecodeGenerator::emitPutGetterById(uint64_t a1, uint64_t a2, WTF::AtomStringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = JSC::BytecodeGenerator::addConstant(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a1 + 688), *(_DWORD *)(a2 + 4), v12);
  return JSC::OpPutGetterById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), v12, a4, *(_DWORD *)(a5 + 4), v13, v14, v15);
}

uint64_t JSC::BytecodeGenerator::emitPutSetterById(uint64_t a1, uint64_t a2, WTF::AtomStringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = JSC::BytecodeGenerator::addConstant(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a1 + 688), *(_DWORD *)(a2 + 4), v12);
  return JSC::OpPutSetterById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), v12, a4, *(_DWORD *)(a5 + 4), v13, v14, v15);
}

uint64_t JSC::BytecodeGenerator::emitPutGeneratorFields(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4);
  v10 = a2;
  result = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v9, 2, a2, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v9, 2, v10, v12, v13, v14, v15);
    if ((result & 1) == 0)
      result = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v9, 2, v10, v12, v13, v14, v15);
  }
  if (*(_BYTE *)(a1 + 713) != 1 || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) != 11)
  {
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4);
    v17 = *(unsigned int *)(a1 + 224);
    result = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v16, 3, v17, v12, v13, v14, v15);
    if ((result & 1) == 0)
    {
      result = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v16, 3, v17, v18, v19, v20, v21);
      if ((result & 1) == 0)
        return JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v16, 3, v17, v22, v23, v24, v25);
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitPutAsyncGeneratorFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  JSC::BytecodeGenerator::emitPutInternalField(a1, *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4), 2, a2, a5, a6, a7, a8);
  return JSC::BytecodeGenerator::emitPutInternalField(a1, *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4), 3, a1 + 220, v9, v10, v11, v12);
}

uint64_t JSC::BytecodeGenerator::emitDeleteById(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v8 = a3;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = JSC::BytecodeGenerator::addConstant(a1, a4, a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = v12;
  v20 = *(unsigned __int8 *)(a1 + 712);
  v21 = (v11 - 1073741808) < 0x80;
  if (v11 <= 0x3FFFFFFF)
    v21 = (v11 + 128) < 0x90;
  if (v21
    && (v8 <= 0x3FFFFFFF ? (v22 = (v8 + 128) < 0x90) : (v22 = (v8 - 1073741808) < 0x80),
        v22 && v12 <= 0xFF))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x39, v13, v14, v15, v16, v17, v18);
    v48 = 57;
    v23 = *(unsigned int *)(a1 + 12);
    v24 = *(unsigned int *)(a1 + 16);
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = 57;
      v27 = *(_DWORD *)(a1 + 12);
      v28 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v48);
        v23 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v26 = *v45;
      }
      else
      {
        v25 = *(_QWORD *)a1;
        v26 = 57;
      }
      *(_BYTE *)(v25 + v23) = v26;
      v27 = *(_DWORD *)(a1 + 12) + 1;
      v28 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 16) = v28;
    }
    v29 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v29 = v11;
    v49 = v29;
    if (v27 > v28)
    {
      *(_DWORD *)(a1 + 16) = v28 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v28) = v29;
      v32 = *(_DWORD *)(a1 + 12);
      v33 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v30 = v27;
      if (v27 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v49);
        v30 = *(unsigned int *)(a1 + 12);
        v31 = *(_QWORD *)a1;
        v29 = *v46;
      }
      else
      {
        v31 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v31 + v30) = v29;
      v32 = *(_DWORD *)(a1 + 12) + 1;
      v33 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v32;
      *(_DWORD *)(a1 + 16) = v33;
    }
    v34 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v34 = v8;
    v50 = v34;
    if (v32 > v33)
    {
      *(_DWORD *)(a1 + 16) = v33 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
      v37 = *(_DWORD *)(a1 + 12);
      v38 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v35 = v32;
      if (v32 == *(_DWORD *)(a1 + 8))
      {
        v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v50);
        v35 = *(unsigned int *)(a1 + 12);
        v36 = *(_QWORD *)a1;
        v34 = *v47;
      }
      else
      {
        v36 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v36 + v35) = v34;
      v37 = *(_DWORD *)(a1 + 12) + 1;
      v38 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v37;
      *(_DWORD *)(a1 + 16) = v38;
    }
    v51 = v19;
    if (v37 > v38)
    {
      *(_DWORD *)(a1 + 16) = v38 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v19;
      v39 = *(_DWORD *)(a1 + 12);
      v40 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v37 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v51);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v37) = v19;
      v39 = *(_DWORD *)(a1 + 12) + 1;
      v40 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v39;
      *(_DWORD *)(a1 + 16) = v40;
    }
    v52 = v20;
    if (v39 > v40)
    {
      *(_DWORD *)(a1 + 16) = v40 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v20;
    }
    else
    {
      if (v39 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v39) = v20;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else if ((JSC::OpDelById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, v8, v12, *(unsigned __int8 *)(a1 + 712), v16, v17, v18) & 1) == 0)
  {
    JSC::OpDelById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v8, v19, v20, v42, v43, v44);
  }
  return a2;
}

_DWORD *JSC::BytecodeGenerator::emitGetByVal(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;

  v12 = 8 * *(unsigned int *)(a1 + 476) - 8;
  do
  {
    if (v12 == -8)
    {
      JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
      v13 = a2[1];
      v14 = *(unsigned int *)(a3 + 4);
      v15 = *(unsigned int *)(a4 + 4);
      v16 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
      *(_BYTE *)(v16 + 4) |= 1u;
      v17 = (*(_DWORD *)(v16 + 8) + 1);
      *(_DWORD *)(v16 + 8) = v17;
      v18 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
      *(_BYTE *)(v18 + 4) |= 1u;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(unsigned int *)(v19 + 128);
      *(_DWORD *)(v19 + 128) = v20 + 1;
      if ((JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v13, v14, v15, v17, v20, v21, v22) & 1) == 0&& (JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v13, v14, v15, v17, v20, v23, v24) & 1) == 0)
      {
        JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v13, v14, v15, v17, v20, v57, v58);
      }
      return a2;
    }
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 464) + v12);
    v12 -= 8;
  }
  while (*(_QWORD *)(v26 + 8) != a4);
  JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
  v27 = a2[1];
  v28 = *(_DWORD *)(a3 + 4);
  v29 = *(_DWORD *)(*(_QWORD *)(v26 + 40) + 4);
  v30 = *(_DWORD *)(a4 + 4);
  v61 = *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4);
  v62 = *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4);
  v31 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v31 + 4) |= 1u;
  v32 = *(_DWORD *)(v31 + 8) + 1;
  *(_DWORD *)(v31 + 8) = v32;
  v33 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v33 + 4) |= 1u;
  v34 = *(_QWORD *)(v33 + 16);
  v35 = *(_DWORD *)(v34 + 172);
  *(_DWORD *)(v34 + 172) = v35 + 1;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2B, v36, v37, v38, v39, v40, v41);
  v64 = -126;
  v42 = *(unsigned int *)(a1 + 12);
  v43 = *(unsigned int *)(a1 + 16);
  if (v42 > v43)
  {
    *(_DWORD *)(a1 + 16) = v43 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v43) = -126;
    v46 = *(_DWORD *)(a1 + 12);
    v47 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v42 == *(_DWORD *)(a1 + 8))
    {
      v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v64);
      v42 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      v45 = *v59;
    }
    else
    {
      v44 = *(_QWORD *)a1;
      v45 = -126;
    }
    *(_BYTE *)(v44 + v42) = v45;
    v46 = *(_DWORD *)(a1 + 12) + 1;
    v47 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v46;
    *(_DWORD *)(a1 + 16) = v47;
  }
  v48 = 43;
  v65 = 43;
  if (v46 > v47)
  {
    *(_DWORD *)(a1 + 16) = v47 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v47) = 43;
  }
  else
  {
    v49 = v46;
    if (v46 == *(_DWORD *)(a1 + 8))
    {
      v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v65);
      v49 = *(unsigned int *)(a1 + 12);
      v50 = *(_QWORD *)a1;
      v48 = *v60;
    }
    else
    {
      v50 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v50 + v49) = v48;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v61);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v62);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v35);
  v51 = *(_DWORD *)(a4 + 4);
  v52 = (uint64_t *)(v26 + 120);
  LODWORD(v63) = *(_DWORD *)(a1 + 48);
  HIDWORD(v63) = v51;
  v53 = *(unsigned int *)(v26 + 132);
  if ((_DWORD)v53 == *(_DWORD *)(v26 + 128))
  {
    v54 = (uint64_t *)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v63);
    v53 = *(unsigned int *)(v26 + 132);
    v55 = *(_QWORD *)(v26 + 120);
    v56 = *v54;
  }
  else
  {
    v55 = *v52;
    v56 = v63;
  }
  *(_QWORD *)(v55 + 8 * v53) = v56;
  ++*(_DWORD *)(v26 + 132);
  return a2;
}

{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = a2[1];
  v14 = *(_DWORD *)(a3 + 4);
  v15 = *(_DWORD *)(a4 + 4);
  v16 = *(_DWORD *)(a5 + 4);
  v17 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v17 + 4) |= 1u;
  v18 = (*(_DWORD *)(v17 + 8) + 1);
  *(_DWORD *)(v17 + 8) = v18;
  JSC::OpGetByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v13, v14, v15, v16, v18);
  return a2;
}

uint64_t JSC::OpGetByVal::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  v12 = a4;
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(unsigned int *)(v14 + 128);
  *(_DWORD *)(v14 + 128) = v15 + 1;
  result = JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, v15, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, a5, v15, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, a5, v15, v19, v20);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitGetPrototypeOf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char *v33;
  char *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v8 = a3;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v12 + 4) |= 1u;
  v13 = (*(_DWORD *)(v12 + 8) + 1);
  *(_DWORD *)(v12 + 8) = v13;
  v14 = (v11 - 1073741808) < 0x80;
  if (v11 <= 0x3FFFFFFF)
    v14 = (v11 + 128) < 0x90;
  if (!v14)
    goto LABEL_33;
  v15 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v15 = (a3 + 128) < 0x90;
  if (v15 && v13 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x31, a3, a4, a5, a6, a7, a8);
    v41 = 49;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = 49;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v41);
        v16 = *(unsigned int *)(a1 + 12);
        v18 = *(_QWORD *)a1;
        v19 = *v33;
      }
      else
      {
        v18 = *(_QWORD *)a1;
        v19 = 49;
      }
      *(_BYTE *)(v18 + v16) = v19;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    v22 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v22 = v11;
    v42 = v22;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
      v25 = *(_DWORD *)(a1 + 12);
      v26 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v23 = v20;
      if (v20 == *(_DWORD *)(a1 + 8))
      {
        v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v42);
        v23 = *(unsigned int *)(a1 + 12);
        v24 = *(_QWORD *)a1;
        v22 = *v34;
      }
      else
      {
        v24 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v24 + v23) = v22;
      v25 = *(_DWORD *)(a1 + 12) + 1;
      v26 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v25;
      *(_DWORD *)(a1 + 16) = v26;
    }
    v27 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v27 = v8;
    v43 = v27;
    if (v25 > v26)
    {
      *(_DWORD *)(a1 + 16) = v26 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v28 = v25;
      if (v25 == *(_DWORD *)(a1 + 8))
      {
        v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v43);
        v28 = *(unsigned int *)(a1 + 12);
        v29 = *(_QWORD *)a1;
        v27 = *v35;
      }
      else
      {
        v29 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v29 + v28) = v27;
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    v44 = v13;
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v13;
    }
    else
    {
      if (v30 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v44);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v30) = v13;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_33:
    v36 = a3;
    if ((JSC::OpGetPrototypeOf::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, a3, v13, a5, a6, a7, a8) & 1) == 0)JSC::OpGetPrototypeOf::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v36, v13, v37, v38, v39, v40);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitPutByVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  for (i = 8 * *(unsigned int *)(a1 + 476) - 8; i != -8; i -= 8)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 464) + i);
    if (*(_QWORD *)(v23 + 8) == a3)
    {
      JSC::BytecodeGenerator::emitEnumeratorPutByVal(a1, v23, *(unsigned int *)(a2 + 4), a3, a4, a6, a7, a8);
      return a4;
    }
  }
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *(unsigned int *)(a3 + 4);
  v13 = *(unsigned int *)(a4 + 4);
  v14 = *(unsigned __int8 *)(a1 + 712);
  v15 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v15 + 4) |= 1u;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(unsigned int *)(v16 + 140);
  *(_DWORD *)(v16 + 140) = v17 + 1;
  if ((JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v11, v12, v13, v14, v17, a7, a8) & 1) == 0
    && (JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, v12, v13, v14, v17, v18, v19) & 1) == 0)
  {
    JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v12, v13, v14, v17, v21, v22);
  }
  return a4;
}

uint64_t JSC::BytecodeGenerator::emitEnumeratorPutByVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  char *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  char v42;

  v10 = a3;
  v13 = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4);
  v14 = *(_DWORD *)(a4 + 4);
  v15 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4);
  v16 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  v38 = *(_DWORD *)(a5 + 4);
  v39 = *(unsigned __int8 *)(a1 + 712);
  v17 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v17 + 4) |= 1u;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(_DWORD *)(v18 + 164);
  *(_DWORD *)(v18 + 164) = v19 + 1;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x29, a3, a4, a5, a6, a7, a8);
  v41 = -126;
  v20 = *(unsigned int *)(a1 + 12);
  v21 = *(unsigned int *)(a1 + 16);
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = -126;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
    {
      v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v41);
      v20 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v23 = *v36;
    }
    else
    {
      v22 = *(_QWORD *)a1;
      v23 = -126;
    }
    *(_BYTE *)(v22 + v20) = v23;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = 41;
  v42 = 41;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = 41;
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v42);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      v26 = *v37;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v38);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v39);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
  v29 = *(_DWORD *)(a4 + 4);
  v30 = (uint64_t *)(a2 + 136);
  LODWORD(v40) = *(_DWORD *)(a1 + 48);
  HIDWORD(v40) = v29;
  v31 = *(unsigned int *)(a2 + 148);
  if ((_DWORD)v31 == *(_DWORD *)(a2 + 144))
  {
    v32 = (uint64_t *)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v40);
    v31 = *(unsigned int *)(a2 + 148);
    v33 = *(_QWORD *)(a2 + 136);
    v34 = *v32;
  }
  else
  {
    v33 = *v30;
    v34 = v40;
  }
  *(_QWORD *)(v33 + 8 * v31) = v34;
  ++*(_DWORD *)(a2 + 148);
  return a5;
}

uint64_t JSC::OpPutByVal::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(unsigned int *)(v14 + 140);
  *(_DWORD *)(v14 + 140) = v15 + 1;
  result = JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, v15, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, v11, v12, v15, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, v11, v12, v15, v19, v20);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitGetPrivateName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a2 + 4);
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = (*(_DWORD *)(v13 + 8) + 1);
  *(_DWORD *)(v13 + 8) = v14;
  v15 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v15 + 4) |= 1u;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(unsigned int *)(v16 + 136);
  *(_DWORD *)(v16 + 136) = v17 + 1;
  v18 = (v12 - 1073741808) < 0x80;
  if (v12 <= 0x3FFFFFFF)
    v18 = (v12 + 128) < 0x90;
  if (!v18)
    goto LABEL_49;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    goto LABEL_49;
  v20 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v20 = (a4 + 128) < 0x90;
  if (v20 && (v17 | v14) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x22, a3, a4, a5, a6, a7, a8);
    v53 = 34;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = *(unsigned int *)(a1 + 16);
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = 34;
      v25 = *(_DWORD *)(a1 + 12);
      v26 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v53);
        v21 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v24 = *v45;
      }
      else
      {
        v23 = *(_QWORD *)a1;
        v24 = 34;
      }
      *(_BYTE *)(v23 + v21) = v24;
      v25 = *(_DWORD *)(a1 + 12) + 1;
      v26 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v25;
      *(_DWORD *)(a1 + 16) = v26;
    }
    v27 = v12 + 16;
    if (v12 <= 0x3FFFFFFF)
      v27 = v12;
    v54 = v27;
    if (v25 > v26)
    {
      *(_DWORD *)(a1 + 16) = v26 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v28 = v25;
      if (v25 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v54);
        v28 = *(unsigned int *)(a1 + 12);
        v29 = *(_QWORD *)a1;
        v27 = *v46;
      }
      else
      {
        v29 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v29 + v28) = v27;
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    v32 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v32 = v9;
    v55 = v32;
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v32;
      v35 = *(_DWORD *)(a1 + 12);
      v36 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v33 = v30;
      if (v30 == *(_DWORD *)(a1 + 8))
      {
        v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v55);
        v33 = *(unsigned int *)(a1 + 12);
        v34 = *(_QWORD *)a1;
        v32 = *v47;
      }
      else
      {
        v34 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v34 + v33) = v32;
      v35 = *(_DWORD *)(a1 + 12) + 1;
      v36 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v35;
      *(_DWORD *)(a1 + 16) = v36;
    }
    v37 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v37 = v8;
    v56 = v37;
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = v37;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v38 = v35;
      if (v35 == *(_DWORD *)(a1 + 8))
      {
        v48 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v56);
        v38 = *(unsigned int *)(a1 + 12);
        v39 = *(_QWORD *)a1;
        v37 = *v48;
      }
      else
      {
        v39 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v39 + v38) = v37;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v57 = v14;
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v14;
      v42 = *(_DWORD *)(a1 + 12);
      v43 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v40 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v14;
      v42 = *(_DWORD *)(a1 + 12) + 1;
      v43 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v42;
      *(_DWORD *)(a1 + 16) = v43;
    }
    v58 = v17;
    if (v42 > v43)
    {
      *(_DWORD *)(a1 + 16) = v43 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v17;
    }
    else
    {
      if (v42 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v58);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v42) = v17;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_49:
    v49 = a3;
    v50 = a4;
    if ((JSC::OpGetPrivateName::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v12, a3, a4, v14, v17, a7, a8) & 1) == 0)JSC::OpGetPrivateName::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v12, v49, v50, v14, v17, v51, v52);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitHasPrivateName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v8;
  signed int v9;
  signed int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a2 + 4);
  v13 = (v12 - 1073741808) < 0x80;
  if (v12 <= 0x3FFFFFFF)
    v13 = (v12 + 128) < 0x90;
  if (!v13)
    goto LABEL_32;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (!v14)
    goto LABEL_32;
  v15 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 128) < 0x90;
  if (v15)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x36, a3, a4, a5, a6, a7, a8);
    v68 = 54;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = 54;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v68);
        v16 = *(unsigned int *)(a1 + 12);
        v18 = *(_QWORD *)a1;
        v19 = *v62;
      }
      else
      {
        v18 = *(_QWORD *)a1;
        v19 = 54;
      }
      *(_BYTE *)(v18 + v16) = v19;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    v22 = v12 + 16;
    if (v12 <= 0x3FFFFFFF)
      v22 = v12;
    v69 = v22;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
      v25 = *(_DWORD *)(a1 + 12);
      v26 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v23 = v20;
      if (v20 == *(_DWORD *)(a1 + 8))
      {
        v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v69);
        v23 = *(unsigned int *)(a1 + 12);
        v24 = *(_QWORD *)a1;
        v22 = *v63;
      }
      else
      {
        v24 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v24 + v23) = v22;
      v25 = *(_DWORD *)(a1 + 12) + 1;
      v26 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v25;
      *(_DWORD *)(a1 + 16) = v26;
    }
    v27 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v27 = v9;
    v70 = v27;
    if (v25 > v26)
    {
      *(_DWORD *)(a1 + 16) = v26 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v28 = v25;
      if (v25 == *(_DWORD *)(a1 + 8))
      {
        v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v70);
        v28 = *(unsigned int *)(a1 + 12);
        v29 = *(_QWORD *)a1;
        v27 = *v64;
      }
      else
      {
        v29 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v29 + v28) = v27;
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    v32 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v32 = v8;
    v71 = v32;
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v32;
    }
    else
    {
      v33 = v30;
      if (v30 == *(_DWORD *)(a1 + 8))
      {
        v65 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v71);
        v33 = *(unsigned int *)(a1 + 12);
        v34 = *(_QWORD *)a1;
        v32 = *v65;
      }
      else
      {
        v34 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v34 + v33) = v32;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_32:
    if (v12 <= 0x3FFFFFFF)
      v35 = (v12 + 0x8000) >> 6 < 0x201;
    else
      v35 = (v12 - 1073741760) < 0x8000;
    if (!v35)
      goto LABEL_57;
    v36 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v36 = (a3 + 0x8000) >> 6 < 0x201;
    if (!v36)
      goto LABEL_57;
    v37 = (a4 - 1073741760) < 0x8000;
    if ((int)a4 <= 0x3FFFFFFF)
      v37 = (a4 + 0x8000) >> 6 < 0x201;
    if (v37)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x36, a3, a4, a5, a6, a7, a8);
      v72 = 0x80;
      v38 = *(unsigned int *)(a1 + 12);
      v39 = *(unsigned int *)(a1 + 16);
      if (v38 > v39)
      {
        *(_DWORD *)(a1 + 16) = v39 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v39) = 0x80;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v38 == *(_DWORD *)(a1 + 8))
        {
          v66 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v72);
          v38 = *(unsigned int *)(a1 + 12);
          v40 = *(_QWORD *)a1;
          v41 = *v66;
        }
        else
        {
          v40 = *(_QWORD *)a1;
          v41 = 0x80;
        }
        *(_BYTE *)(v40 + v38) = v41;
        v42 = *(_DWORD *)(a1 + 12) + 1;
        v43 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v42;
        *(_DWORD *)(a1 + 16) = v43;
      }
      v44 = 54;
      v73 = 54;
      if (v42 > v43)
      {
        *(_DWORD *)(a1 + 16) = v43 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v43) = 54;
      }
      else
      {
        v45 = v42;
        if (v42 == *(_DWORD *)(a1 + 8))
        {
          v67 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v73);
          v45 = *(unsigned int *)(a1 + 12);
          v46 = *(_QWORD *)a1;
          v44 = *v67;
        }
        else
        {
          v46 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v46 + v45) = v44;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v47 = v12 + 64;
      if (v12 <= 0x3FFFFFFF)
        v47 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v47);
      v48 = v9 + 64;
      if (v9 <= 0x3FFFFFFF)
        v48 = v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v48);
      v49 = v8 + 64;
      if (v8 <= 0x3FFFFFFF)
        v49 = v8;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v49);
    }
    else
    {
LABEL_57:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x36, a3, a4, a5, a6, a7, a8);
      v74 = -126;
      v50 = *(unsigned int *)(a1 + 12);
      v51 = *(unsigned int *)(a1 + 16);
      if (v50 > v51)
      {
        *(_DWORD *)(a1 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v51) = -126;
        v54 = *(_DWORD *)(a1 + 12);
        v55 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v50 == *(_DWORD *)(a1 + 8))
        {
          v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v74);
          v50 = *(unsigned int *)(a1 + 12);
          v52 = *(_QWORD *)a1;
          v53 = *v60;
        }
        else
        {
          v52 = *(_QWORD *)a1;
          v53 = -126;
        }
        *(_BYTE *)(v52 + v50) = v53;
        v54 = *(_DWORD *)(a1 + 12) + 1;
        v55 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v54;
        *(_DWORD *)(a1 + 16) = v55;
      }
      v56 = 54;
      v75 = 54;
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = 54;
      }
      else
      {
        v57 = v54;
        if (v54 == *(_DWORD *)(a1 + 8))
        {
          v61 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v75);
          v57 = *(unsigned int *)(a1 + 12);
          v58 = *(_QWORD *)a1;
          v56 = *v61;
        }
        else
        {
          v58 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v58 + v57) = v56;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
    }
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitDirectPutByVal(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;

  v9 = a3;
  v12 = *(unsigned int *)(a4 + 4);
  v13 = *(unsigned __int8 *)(a1 + 712);
  v14 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v14 + 4) |= 1u;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(unsigned int *)(v15 + 144);
  *(_DWORD *)(v15 + 144) = v16 + 1;
  v17 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v17 = (a2 + 128) < 0x90;
  if (!v17)
    goto LABEL_4;
  v34 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v34 = (a3 + 128) < 0x90;
  if (!v34)
    goto LABEL_4;
  v35 = (v12 - 1073741808) < 0x80;
  if ((int)v12 <= 0x3FFFFFFF)
    v35 = (v12 + 128) < 0x90;
  if (v35 && v16 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x24, a3, a4, a5, a6, a7, a8);
    v65 = 36;
    v36 = *(unsigned int *)(a1 + 12);
    v37 = *(unsigned int *)(a1 + 16);
    if (v36 > v37)
    {
      *(_DWORD *)(a1 + 16) = v37 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v37) = 36;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v36 == *(_DWORD *)(a1 + 8))
      {
        v61 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v65);
        v36 = *(unsigned int *)(a1 + 12);
        v38 = *(_QWORD *)a1;
        v39 = *v61;
      }
      else
      {
        v38 = *(_QWORD *)a1;
        v39 = 36;
      }
      *(_BYTE *)(v38 + v36) = v39;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v42 = a2;
    v66 = v42;
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v42;
      v45 = *(_DWORD *)(a1 + 12);
      v46 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v66);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        v42 = *v62;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      v45 = *(_DWORD *)(a1 + 12) + 1;
      v46 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v45;
      *(_DWORD *)(a1 + 16) = v46;
    }
    v47 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v47 = v9;
    v67 = v47;
    if (v45 > v46)
    {
      *(_DWORD *)(a1 + 16) = v46 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v46) = v47;
      v50 = *(_DWORD *)(a1 + 12);
      v51 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v48 = v45;
      if (v45 == *(_DWORD *)(a1 + 8))
      {
        v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v67);
        v48 = *(unsigned int *)(a1 + 12);
        v49 = *(_QWORD *)a1;
        v47 = *v63;
      }
      else
      {
        v49 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v49 + v48) = v47;
      v50 = *(_DWORD *)(a1 + 12) + 1;
      v51 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v50;
      *(_DWORD *)(a1 + 16) = v51;
    }
    v52 = v12 + 16;
    if ((int)v12 <= 0x3FFFFFFF)
      v52 = v12;
    v68 = v52;
    if (v50 > v51)
    {
      *(_DWORD *)(a1 + 16) = v51 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v51) = v52;
      v55 = *(_DWORD *)(a1 + 12);
      v56 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v53 = v50;
      if (v50 == *(_DWORD *)(a1 + 8))
      {
        v64 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v68);
        v53 = *(unsigned int *)(a1 + 12);
        v54 = *(_QWORD *)a1;
        v52 = *v64;
      }
      else
      {
        v54 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v54 + v53) = v52;
      v55 = *(_DWORD *)(a1 + 12) + 1;
      v56 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v55;
      *(_DWORD *)(a1 + 16) = v56;
    }
    v69 = v13;
    if (v55 > v56)
    {
      *(_DWORD *)(a1 + 16) = v56 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v56) = v13;
      v57 = *(_DWORD *)(a1 + 12);
      v58 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v55 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v55 + 1), (unint64_t)&v69);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v55) = v13;
      v57 = *(_DWORD *)(a1 + 12) + 1;
      v58 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v57;
      *(_DWORD *)(a1 + 16) = v58;
    }
    v70 = v16;
    if (v57 > v58)
    {
      *(_DWORD *)(a1 + 16) = v58 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v58) = v16;
    }
    else
    {
      if (v57 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v57 + 1), (unint64_t)&v70);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v57) = v16;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_4:
    if (a2 <= 0x3FFFFFFF)
      v18 = (a2 + 0x8000) >> 6 < 0x201;
    else
      v18 = (a2 - 1073741760) < 0x8000;
    if (!v18)
      goto LABEL_76;
    v19 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v19 = (a3 + 0x8000) >> 6 < 0x201;
    if (!v19)
      goto LABEL_76;
    v20 = (v12 - 1073741760) < 0x8000;
    if ((int)v12 <= 0x3FFFFFFF)
      v20 = (v12 + 0x8000) >> 6 < 0x201;
    if (v20 && !WORD1(v16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x24, a3, a4, a5, a6, a7, a8);
      v71 = 0x80;
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(unsigned int *)(a1 + 16);
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = 0x80;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
        {
          v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v71);
          v21 = *(unsigned int *)(a1 + 12);
          v23 = *(_QWORD *)a1;
          v24 = *v59;
        }
        else
        {
          v23 = *(_QWORD *)a1;
          v24 = 0x80;
        }
        *(_BYTE *)(v23 + v21) = v24;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      v27 = 36;
      v72 = 36;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = 36;
      }
      else
      {
        v28 = v25;
        if (v25 == *(_DWORD *)(a1 + 8))
        {
          v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v72);
          v28 = *(unsigned int *)(a1 + 12);
          v29 = *(_QWORD *)a1;
          v27 = *v60;
        }
        else
        {
          v29 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v29 + v28) = v27;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v30 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v30 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
      v31 = v9 + 64;
      if (v9 <= 0x3FFFFFFF)
        v31 = v9;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
      v32 = v12 + 64;
      if ((int)v12 <= 0x3FFFFFFF)
        v32 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v16);
    }
    else
    {
LABEL_76:
      JSC::OpPutByValDirect::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, a3, v12, v13, v16, a7, a8);
    }
  }
  return a4;
}

uint64_t JSC::BytecodeGenerator::emitGetInternalField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v36;
  char *v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v9 = a3;
  v12 = *(_DWORD *)(a2 + 4);
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = (*(_DWORD *)(v13 + 8) + 1);
  *(_DWORD *)(v13 + 8) = v14;
  v15 = (v12 - 1073741808) < 0x80;
  if (v12 <= 0x3FFFFFFF)
    v15 = (v12 + 128) < 0x90;
  if (!v15)
    goto LABEL_38;
  v16 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v16 = (a3 + 128) < 0x90;
  if (v16 && (v14 | a4) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x32, a3, a4, a5, a6, a7, a8);
    v43 = 50;
    v17 = *(unsigned int *)(a1 + 12);
    v18 = *(unsigned int *)(a1 + 16);
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = 50;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
      {
        v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v43);
        v17 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v20 = *v36;
      }
      else
      {
        v19 = *(_QWORD *)a1;
        v20 = 50;
      }
      *(_BYTE *)(v19 + v17) = v20;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v23 = v12 + 16;
    if (v12 <= 0x3FFFFFFF)
      v23 = v12;
    v44 = v23;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v24 = v21;
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v44);
        v24 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v23 = *v37;
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v25 + v24) = v23;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v28 = v9;
    v45 = v28;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v45);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        v28 = *v38;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v46 = a4;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = a4;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = a4;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v47 = v14;
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = v14;
    }
    else
    {
      if (v33 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v47);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v14;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_38:
    v39 = a3;
    if ((JSC::OpGetInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v12, a3, a4, v14, a6, a7, a8) & 1) == 0)JSC::OpGetInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v12, v39, a4, v14, v40, v41, v42);
  }
  return a2;
}

uint64_t JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(unsigned int *)(v14 + 132);
  *(_DWORD *)(v14 + 132) = v15 + 1;
  v16 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v16 = (a2 + 128) < 0x90;
  if (!v16)
    goto LABEL_43;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    goto LABEL_43;
  v18 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v18 = (a4 + 128) < 0x90;
  if (v18 && v15 <= 0xFF)
  {
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x21, a3, a4, a5, a6, a7, a8);
    v49 = 33;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = *(unsigned int *)(a1 + 16);
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = 33;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v49);
        v20 = *(unsigned int *)(a1 + 12);
        v22 = *(_QWORD *)a1;
        v23 = *(_BYTE *)result;
      }
      else
      {
        v22 = *(_QWORD *)a1;
        v23 = 33;
      }
      *(_BYTE *)(v22 + v20) = v23;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v26 = a2;
    v50 = v26;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v50);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        v26 = *(_BYTE *)result;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v31 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v31 = v10;
    v51 = v31;
    if (v29 > v30)
    {
      *(_DWORD *)(a1 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v31;
      v34 = *(_DWORD *)(a1 + 12);
      v35 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v32 = v29;
      if (v29 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v51);
        v32 = *(unsigned int *)(a1 + 12);
        v33 = *(_QWORD *)a1;
        v31 = *(_BYTE *)result;
      }
      else
      {
        v33 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v33 + v32) = v31;
      v34 = *(_DWORD *)(a1 + 12) + 1;
      v35 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v34;
      *(_DWORD *)(a1 + 16) = v35;
    }
    v36 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v36 = v9;
    v52 = v36;
    if (v34 > v35)
    {
      *(_DWORD *)(a1 + 16) = v35 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v35) = v36;
      v39 = *(_DWORD *)(a1 + 12);
      v40 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v37 = v34;
      if (v34 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v52);
        v37 = *(unsigned int *)(a1 + 12);
        v38 = *(_QWORD *)a1;
        v36 = *(_BYTE *)result;
      }
      else
      {
        v38 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v38 + v37) = v36;
      v39 = *(_DWORD *)(a1 + 12) + 1;
      v40 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v39;
      *(_DWORD *)(a1 + 16) = v40;
    }
    v53 = v8;
    if (v39 > v40)
    {
      *(_DWORD *)(a1 + 16) = v40 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v8;
      v41 = *(_DWORD *)(a1 + 12);
      v42 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v39 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v53);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v39) = v8;
      }
      v41 = *(_DWORD *)(a1 + 12) + 1;
      v42 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v41;
      *(_DWORD *)(a1 + 16) = v42;
    }
    v54 = v15;
    if (v41 > v42)
    {
      *(_DWORD *)(a1 + 16) = v42 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v42) = v15;
    }
    else
    {
      if (v41 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v54);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v41) = v15;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_43:
    v44 = a3;
    v45 = a4;
    v46 = a5;
    result = JSC::OpPutPrivateName::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, v15, a7, a8);
    if ((result & 1) == 0)
      return JSC::OpPutPrivateName::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v44, v45, v46, v15, v47, v48);
  }
  return result;
}

void JSC::BytecodeGenerator::emitCreatePrivateBrand(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  WTF::StringImpl *v62[5];
  _BYTE v63[8];
  int **v64;

  v12 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0xC8u, (uint64_t)a4, a5, a6, a7, a8);
  v13 = v12;
  if (v12)
    ++*v12;
  JSC::CallArguments::CallArguments((uint64_t)v63, a1, 0, 1);
  JSC::BytecodeGenerator::emitLoad(a1, *v64, 10, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41968))
    v24 = 7;
  else
    v24 = 6;
  JSC::BytecodeGenerator::emitLoad(a1, v64[1], v24, v19, v20, v21, v22, v23);
  v25 = JSC::BytecodeGenerator::finalDestination(a1, 0, (uint64_t)v13);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, v25, (uint64_t)v13, 0, (uint64_t)v63, a2, a3, a4, 0);
  JSC::Symbols::privateBrandPrivateName[0] += 2;
  v61 = JSC::Symbols::privateBrandPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v62, a1, (uint64_t)&v61, 0, v26, v27, v28, v29);
  if (JSC::Symbols::privateBrandPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, v30, v31, v32, v33, v34, v35, v36);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    JSC::Symbols::privateBrandPrivateName[0] -= 2;
  }
  JSC::BytecodeGenerator::emitPutToScope(a1, *(_QWORD *)(a1 + 248), (uint64_t)v62, v25, 1, 1, v35, v36);
  v44 = v62[0];
  v62[0] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)v63, v37, v38, v39, v40, v41, v42, v43);
  if (v13)
    --*v13;
}

_DWORD *JSC::BytecodeGenerator::emitGetPrivateBrand(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;

  v8 = a4;
  JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = a2[1];
  v19 = *(unsigned int *)(a3 + 4);
  v20 = JSC::Symbols::privateBrandPrivateName;
  if (v8)
    v20 = JSC::Symbols::privateClassBrandPrivateName;
  *v20 += 2;
  v43 = (WTF::StringImpl *)v20;
  v21 = JSC::BytecodeGenerator::addConstant(a1, (WTF::AtomStringImpl *)&v43, v12, v13, v14, v15, v16, v17);
  v22 = *(unsigned __int8 *)(a1 + 712);
  v23 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v23 + 4) |= 1u;
  v24 = (*(_DWORD *)(v23 + 8) + 1);
  *(_DWORD *)(v23 + 8) = v24;
  if (v22)
    v25 = 2052;
  else
    v25 = 1073743876;
  JSC::OpGetFromScope::emit<JSC::BytecodeGenerator>(a1, v18, v19, v21, v25, 0, v8 ^ 1u, v24);
  v33 = v43;
  v43 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  return a2;
}

void JSC::BytecodeGenerator::emitInstallPrivateClassBrand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  WTF::StringImpl *v42[5];

  JSC::Symbols::privateClassBrandPrivateName[0] += 2;
  v41 = JSC::Symbols::privateClassBrandPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v42, a1, (uint64_t)&v41, 0, a5, a6, a7, a8);
  if (JSC::Symbols::privateClassBrandPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    JSC::Symbols::privateClassBrandPrivateName[0] -= 2;
  }
  JSC::BytecodeGenerator::emitPutToScope(a1, *(_QWORD *)(a1 + 248), (uint64_t)v42, a2, 1, 1, v15, v16);
  v24 = v42[0];
  v42[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

uint64_t JSC::BytecodeGenerator::emitHasPrivateBrand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  signed int v45;
  signed int v46;
  signed int v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  _BOOL4 v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  unsigned int v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  _DWORD *v118;
  int v119;

  if ((_DWORD)a5)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v118, a1, a3, a4, a5, a6, a7, a8);
    v12 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v13 = *(_DWORD *)(v12 + 4);
    v14 = *(unsigned int *)(a3 + 4);
    if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v13, v14, v15, v16, v17, v18, v19) & 1) == 0&& (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v13, v14, v20, v21, v22, v23, v24) & 1) == 0)
    {
      JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v13, v14, v20, v21, v22, v23, v24);
    }
    v25 = v118;
    JSC::BytecodeGenerator::emitJumpIfTrue(a1, v12, (uint64_t)v118, v20, v21, v22, v23, v24);
    JSC::BytecodeGenerator::emitThrowTypeError(a1, "Cannot access static private method or accessor of a non-Object", 0x40uLL, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a1 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v25, a1, v31, v32, v33, v34, v35, v36);
    v42 = *(_QWORD *)(a1 + 24);
    v43 = *(unsigned int *)(v42 + 28);
    if (!(_DWORD)v43 || v31 != *(_DWORD *)(*(_QWORD *)(v42 + 16) + 4 * v43 - 4))
    {
      v119 = v31;
      v44 = (_QWORD *)(v42 + 16);
      if ((_DWORD)v43 == *(_DWORD *)(v42 + 24))
        *(_DWORD *)(*(_QWORD *)(v42 + 16) + 4 * *(unsigned int *)(v42 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v43 + 1, (unint64_t)&v119);
      else
        *(_DWORD *)(*v44 + 4 * v43) = v31;
      ++*(_DWORD *)(v42 + 28);
      *(_DWORD *)(a1 + 36) = 115;
    }
    if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, a2, a3, a4, v37, v38, v39, v40, v41) & 1) == 0)
    {
      v98 = *(_DWORD *)(a2 + 4);
      v99 = *(unsigned int *)(a3 + 4);
      v100 = *(unsigned int *)(a4 + 4);
      if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v98, v99, v100, v94, v95, v96, v97) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v98, v99, v100, v101, v102, v103, v104) & 1) == 0)
      {
        JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v98, v99, v100, v108, v109, v110, v111);
      }
    }
    --*v25;
  }
  else
  {
    v45 = *(_DWORD *)(a2 + 4);
    v46 = *(_DWORD *)(a3 + 4);
    v47 = *(_DWORD *)(a4 + 4);
    v48 = (v45 - 1073741808) < 0x80;
    if (v45 <= 0x3FFFFFFF)
      v48 = (v45 + 128) < 0x90;
    if (!v48)
      goto LABEL_38;
    v49 = (v46 - 1073741808) < 0x80;
    if (v46 <= 0x3FFFFFFF)
      v49 = (v46 + 128) < 0x90;
    if (!v49)
      goto LABEL_38;
    v50 = (v47 - 1073741808) < 0x80;
    if (v47 <= 0x3FFFFFFF)
      v50 = (v47 + 128) < 0x90;
    if (v50)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x37, a3, a4, a5, a6, a7, a8);
      LOBYTE(v118) = 55;
      v51 = *(unsigned int *)(a1 + 12);
      v52 = *(unsigned int *)(a1 + 16);
      if (v51 > v52)
      {
        *(_DWORD *)(a1 + 16) = v52 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v52) = 55;
        v55 = *(_DWORD *)(a1 + 12);
        v56 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v51 == *(_DWORD *)(a1 + 8))
        {
          v112 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v118);
          v51 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          v54 = *v112;
        }
        else
        {
          v53 = *(_QWORD *)a1;
          v54 = 55;
        }
        *(_BYTE *)(v53 + v51) = v54;
        v55 = *(_DWORD *)(a1 + 12) + 1;
        v56 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v55;
        *(_DWORD *)(a1 + 16) = v56;
      }
      v57 = v45 + 16;
      if (v45 <= 0x3FFFFFFF)
        v57 = v45;
      LOBYTE(v118) = v57;
      if (v55 > v56)
      {
        *(_DWORD *)(a1 + 16) = v56 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v56) = v57;
        v60 = *(_DWORD *)(a1 + 12);
        v61 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v58 = v55;
        if (v55 == *(_DWORD *)(a1 + 8))
        {
          v113 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v55 + 1), (unint64_t)&v118);
          v58 = *(unsigned int *)(a1 + 12);
          v59 = *(_QWORD *)a1;
          v57 = *v113;
        }
        else
        {
          v59 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v59 + v58) = v57;
        v60 = *(_DWORD *)(a1 + 12) + 1;
        v61 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v60;
        *(_DWORD *)(a1 + 16) = v61;
      }
      v62 = v46 + 16;
      if (v46 <= 0x3FFFFFFF)
        v62 = v46;
      LOBYTE(v118) = v62;
      if (v60 > v61)
      {
        *(_DWORD *)(a1 + 16) = v61 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v61) = v62;
        v65 = *(_DWORD *)(a1 + 12);
        v66 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v63 = v60;
        if (v60 == *(_DWORD *)(a1 + 8))
        {
          v114 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v60 + 1), (unint64_t)&v118);
          v63 = *(unsigned int *)(a1 + 12);
          v64 = *(_QWORD *)a1;
          v62 = *v114;
        }
        else
        {
          v64 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v64 + v63) = v62;
        v65 = *(_DWORD *)(a1 + 12) + 1;
        v66 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v65;
        *(_DWORD *)(a1 + 16) = v66;
      }
      v67 = v47 + 16;
      if (v47 <= 0x3FFFFFFF)
        v67 = v47;
      LOBYTE(v118) = v67;
      if (v65 > v66)
      {
        *(_DWORD *)(a1 + 16) = v66 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v66) = v67;
      }
      else
      {
        v68 = v65;
        if (v65 == *(_DWORD *)(a1 + 8))
        {
          v115 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v118);
          v68 = *(unsigned int *)(a1 + 12);
          v69 = *(_QWORD *)a1;
          v67 = *v115;
        }
        else
        {
          v69 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v69 + v68) = v67;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_38:
      if (v45 <= 0x3FFFFFFF)
        v70 = (v45 + 0x8000) >> 6 < 0x201;
      else
        v70 = (v45 - 1073741760) < 0x8000;
      if (!v70)
        goto LABEL_63;
      v71 = (v46 - 1073741760) < 0x8000;
      if (v46 <= 0x3FFFFFFF)
        v71 = (v46 + 0x8000) >> 6 < 0x201;
      if (!v71)
        goto LABEL_63;
      v72 = (v47 - 1073741760) < 0x8000;
      if (v47 <= 0x3FFFFFFF)
        v72 = (v47 + 0x8000) >> 6 < 0x201;
      if (v72)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x37, a3, a4, a5, a6, a7, a8);
        LOBYTE(v118) = 0x80;
        v73 = *(unsigned int *)(a1 + 12);
        v74 = *(unsigned int *)(a1 + 16);
        if (v73 > v74)
        {
          *(_DWORD *)(a1 + 16) = v74 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v74) = 0x80;
          v77 = *(_DWORD *)(a1 + 12);
          v78 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v73 == *(_DWORD *)(a1 + 8))
          {
            v116 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v73 + 1), (unint64_t)&v118);
            v73 = *(unsigned int *)(a1 + 12);
            v75 = *(_QWORD *)a1;
            v76 = *v116;
          }
          else
          {
            v75 = *(_QWORD *)a1;
            v76 = 0x80;
          }
          *(_BYTE *)(v75 + v73) = v76;
          v77 = *(_DWORD *)(a1 + 12) + 1;
          v78 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v77;
          *(_DWORD *)(a1 + 16) = v78;
        }
        v79 = 55;
        LOBYTE(v118) = 55;
        if (v77 > v78)
        {
          *(_DWORD *)(a1 + 16) = v78 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v78) = 55;
        }
        else
        {
          v80 = v77;
          if (v77 == *(_DWORD *)(a1 + 8))
          {
            v117 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v118);
            v80 = *(unsigned int *)(a1 + 12);
            v81 = *(_QWORD *)a1;
            v79 = *v117;
          }
          else
          {
            v81 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v81 + v80) = v79;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        v82 = v45 + 64;
        if (v45 <= 0x3FFFFFFF)
          v82 = v45;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v82);
        v83 = v46 + 64;
        if (v46 <= 0x3FFFFFFF)
          v83 = v46;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v83);
        v84 = v47 + 64;
        if (v47 <= 0x3FFFFFFF)
          v84 = v47;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v84);
      }
      else
      {
LABEL_63:
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x37, a3, a4, a5, a6, a7, a8);
        LOBYTE(v118) = -126;
        v85 = *(unsigned int *)(a1 + 12);
        v86 = *(unsigned int *)(a1 + 16);
        if (v85 > v86)
        {
          *(_DWORD *)(a1 + 16) = v86 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v86) = -126;
          v89 = *(_DWORD *)(a1 + 12);
          v90 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v85 == *(_DWORD *)(a1 + 8))
          {
            v106 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v85 + 1), (unint64_t)&v118);
            v85 = *(unsigned int *)(a1 + 12);
            v87 = *(_QWORD *)a1;
            v88 = *v106;
          }
          else
          {
            v87 = *(_QWORD *)a1;
            v88 = -126;
          }
          *(_BYTE *)(v87 + v85) = v88;
          v89 = *(_DWORD *)(a1 + 12) + 1;
          v90 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v89;
          *(_DWORD *)(a1 + 16) = v90;
        }
        v91 = 55;
        LOBYTE(v118) = 55;
        if (v89 > v90)
        {
          *(_DWORD *)(a1 + 16) = v90 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v90) = 55;
        }
        else
        {
          v92 = v89;
          if (v89 == *(_DWORD *)(a1 + 8))
          {
            v107 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v89 + 1), (unint64_t)&v118);
            v92 = *(unsigned int *)(a1 + 12);
            v93 = *(_QWORD *)a1;
            v91 = *v107;
          }
          else
          {
            v93 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v93 + v92) = v91;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v45);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v46);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v47);
      }
    }
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitIsObject(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, a2, a3, a4, a5, a6, a7, a8, a9) & 1) == 0)
  {
    v17 = *(_DWORD *)(a2 + 4);
    v18 = *(unsigned int *)(a3 + 4);
    v19 = *(unsigned int *)(a4 + 4);
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v17, v18, v19, v13, v14, v15, v16) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v17, v18, v19, v20, v21, v22, v23) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v17, v18, v19, v25, v26, v27, v28);
    }
  }
  return a2;
}

_DWORD *JSC::BytecodeGenerator::emitCheckPrivateBrand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;

  if (!(_DWORD)a4)
    return (_DWORD *)JSC::OpCheckPrivateBrand::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a3 + 4), a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v41, a1, a3, a4, a5, a6, a7, a8);
  JSC::OpCheckTdz::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v12, v13, v14, v15, v16, v17);
  v18 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v18, a2, a3, v19, v20, v21, v22, v23);
  v24 = v41;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v18, (uint64_t)v41, v25, v26, v27, v28, v29);
  JSC::BytecodeGenerator::emitThrowTypeError(a1, "Cannot access static private method or accessor", 0x30uLL, v30, v31, v32, v33, v34);
  result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v24, v35, v36, v37, v38, v39, v40);
  --*v24;
  return result;
}

uint64_t JSC::OpCheckTdz::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitTDZCheck(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

BOOL JSC::BytecodeGenerator::needsTDZCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  JSC::CompactTDZEnvironment *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;

  v9 = *(unsigned int *)(a1 + 156);
  while (v9)
  {
    --v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16 * v9);
    if (v10)
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if ((v12 & 0x20) != 0)
        v12 = *(_DWORD *)(v11 + 32);
      v13 = *(_DWORD *)(v10 - 8);
      v14 = v13 & (v12 >> 8);
      v15 = *(_QWORD *)(v10 + 16 * v14);
      if (v15 != v11)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v13;
          v15 = *(_QWORD *)(v10 + 16 * v14);
          ++v16;
          if (v15 == v11)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      v17 = v10 + 16 * v14;
      v10 += 16 * *(unsigned int *)(v10 - 4);
    }
    else
    {
      v17 = 0;
    }
    if (v17 != v10)
      return *(_DWORD *)(v17 + 8) != 0;
  }
  v19 = *(_QWORD *)(a1 + 128);
  if (v19)
  {
    while (1)
    {
      v20 = *(_QWORD *)a2;
      v21 = *(JSC::CompactTDZEnvironment **)(v19 + 8);
      if (*((_DWORD *)v21 + 4) != 1)
        JSC::CompactTDZEnvironment::toTDZEnvironmentSlow(v21, a2, a3, a4, a5, a6, a7, a8);
      v22 = *(_QWORD *)v21;
      if (*(_QWORD *)v21)
      {
        v23 = *(_DWORD *)(v20 + 16);
        if ((v23 & 0x20) != 0)
          v23 = *(_DWORD *)(v20 + 32);
        v24 = *(_DWORD *)(v22 - 8);
        v25 = v24 & (v23 >> 8);
        v26 = *(_QWORD *)(v22 + 8 * v25);
        if (v26 == v20)
          return 1;
        v27 = 1;
        while (v26)
        {
          v25 = (v25 + v27) & v24;
          v26 = *(_QWORD *)(v22 + 8 * v25);
          ++v27;
          result = 1;
          if (v26 == v20)
            return result;
        }
      }
      result = 0;
      v19 = *(_QWORD *)(v19 + 24);
      if (!v19)
        return result;
    }
  }
  return 0;
}

void JSC::BytecodeGenerator::emitTDZCheckIfNecessary(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::CompactTDZEnvironment *v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;

  v12 = *(unsigned int *)(a1 + 156);
  while (v12)
  {
    --v12;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16 * v12);
    if (v13)
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if ((v15 & 0x20) != 0)
        v15 = *(_DWORD *)(v14 + 32);
      v16 = *(_DWORD *)(v13 - 8);
      v17 = v16 & (v15 >> 8);
      v18 = *(_QWORD *)(v13 + 16 * v17);
      if (v18 != v14)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v16;
          v18 = *(_QWORD *)(v13 + 16 * v17);
          ++v19;
          if (v18 == v14)
            goto LABEL_12;
        }
        v17 = *(unsigned int *)(v13 - 4);
      }
LABEL_12:
      v20 = v13 + 16 * v17;
      v13 += 16 * *(unsigned int *)(v13 - 4);
    }
    else
    {
      v20 = 0;
    }
    if (v20 != v13)
    {
      if (*(_DWORD *)(v20 + 8))
      {
LABEL_15:
        if (a3)
        {
          v21 = *(_DWORD *)(a3 + 4);
          if (!JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v21, a3, a4, a5, a6, a7, a8)&& !JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v21, v22, v23, v24, v25, v26, v27))
          {
            JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v21, v28, v29, v30, v31, v32, v33);
          }
        }
        else
        {
          if (!a4 || a2[8] == 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198246F34);
          }
          v35 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
          v39 = JSC::BytecodeGenerator::emitGetFromScope(a1, v35, a4, (unint64_t)a2, 1, v36, v37, v38);
          v46 = v39;
          if (v39)
            ++*v39;
          v47 = v39[1];
          if (!JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v47, v40, v41, v42, v43, v44, v45)&& !JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v47, v48, v49, v50, v51, v52, v53))
          {
            JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v47, v54, v55, v56, v57, v58, v59);
          }
          --*v46;
        }
      }
      return;
    }
  }
  for (i = *(_QWORD *)(a1 + 128); i; i = *(_QWORD *)(i + 24))
  {
    v60 = *(_QWORD *)a2;
    v61 = *(JSC::CompactTDZEnvironment **)(i + 8);
    if (*((_DWORD *)v61 + 4) != 1)
      JSC::CompactTDZEnvironment::toTDZEnvironmentSlow(v61, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v62 = *(_QWORD *)v61;
    if (*(_QWORD *)v61)
    {
      v63 = *(_DWORD *)(v60 + 16);
      if ((v63 & 0x20) != 0)
        v63 = *(_DWORD *)(v60 + 32);
      v64 = *(_DWORD *)(v62 - 8);
      v65 = v64 & (v63 >> 8);
      v66 = *(_QWORD *)(v62 + 8 * v65);
      if (v66 == v60)
        goto LABEL_15;
      v67 = 1;
      while (v66)
      {
        v65 = (v65 + v67) & v64;
        v66 = *(_QWORD *)(v62 + 8 * v65);
        ++v67;
        if (v66 == v60)
          goto LABEL_15;
      }
    }
  }
}

uint64_t JSC::BytecodeGenerator::getPrivateTraits(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v3 = a2;
  do
  {
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198247074);
    }
    --v3;
    v4 = *(_QWORD *)(a1 + 8 * v3);
    if (v4)
    {
      v5 = *(_DWORD *)(a3 + 16);
      if ((v5 & 0x20) != 0)
        v5 = *(_DWORD *)(a3 + 32);
      v6 = *(_DWORD *)(v4 - 8);
      v7 = v6 & (v5 >> 8);
      v8 = *(_QWORD *)(v4 + 16 * v7);
      if (v8 != a3)
      {
        v11 = 1;
        while (v8)
        {
          v7 = ((_DWORD)v7 + v11) & v6;
          v8 = *(_QWORD *)(v4 + 16 * v7);
          ++v11;
          if (v8 == a3)
            goto LABEL_7;
        }
        v7 = *(unsigned int *)(v4 - 4);
      }
LABEL_7:
      v9 = v4 + 16 * v7;
      v4 += 16 * *(unsigned int *)(v4 - 4);
    }
    else
    {
      v9 = 0;
    }
  }
  while (v9 == v4);
  return *(unsigned __int16 *)(v9 + 8);
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::add<JSC::BytecodeGenerator::TDZNecessityLevel>(uint64_t result, uint64_t *a2, WTF::StringImpl **a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *((_DWORD *)*a3 + 4);
  if ((v12 & 0x20) != 0)
    v12 = *((_DWORD *)v11 + 8);
  v13 = v10 & (v12 >> 8);
  v14 = v8 + 16 * v13;
  v15 = *(WTF::StringImpl **)v14;
  if (!*(_QWORD *)v14)
    goto LABEL_7;
  v24 = 0;
  v25 = 1;
  do
  {
    if (v15 == v11)
    {
      if ((v9 & 1) != 0)
        v27 = 0;
      else
        v27 = *(unsigned int *)(v8 - 4);
      v23 = 0;
      v22 = v8 + 16 * v27;
      goto LABEL_15;
    }
    if (v15 == (WTF::StringImpl *)-1)
      v24 = v14;
    v13 = (v13 + v25) & v10;
    v14 = v8 + 16 * v13;
    v15 = *(WTF::StringImpl **)v14;
    ++v25;
  }
  while (*(_QWORD *)v14);
  if (v24)
  {
    *(_QWORD *)v24 = 0;
    *(_DWORD *)(v24 + 8) = 0;
    --*(_DWORD *)(*a2 - 16);
    v11 = *a3;
    v14 = v24;
  }
  if (v11)
LABEL_7:
    *(_DWORD *)v11 += 2;
  *(_QWORD *)v14 = v11;
  *(_DWORD *)(v14 + 8) = *a4;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_14;
    goto LABEL_28;
  }
  if (3 * v21 <= 4 * v20)
  {
    if (!(_DWORD)v21)
    {
      v26 = 8;
LABEL_31:
      result = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a2, v26, (WTF::StringImpl **)v14);
      v14 = result;
      v18 = *a2;
      if (*a2)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
      goto LABEL_14;
    }
LABEL_28:
    v26 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
    goto LABEL_31;
  }
LABEL_14:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_15:
  *(_QWORD *)v7 = v14;
  *(_QWORD *)(v7 + 8) = v22;
  *(_BYTE *)(v7 + 16) = v23;
  return result;
}

WTF::StringImpl ***std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>::~pair(WTF::StringImpl ***a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::TDZEnvironmentLink *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = (JSC::TDZEnvironmentLink *)a1[1];
  a1[1] = 0;
  if (v9)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v9);
  v10 = *a1;
  if (*a1)
  {
    v11 = *((unsigned int *)v10 - 1);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
              WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
            }
            else
            {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::BytecodeGenerator::getAvailablePrivateAccessNames(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];
  _BYTE v32[24];
  uint64_t v33;
  uint64_t v34;

  v9 = 0;
  v33 = 0;
  v34 = 0;
  v10 = *(_DWORD *)(a2 + 172);
  if (!v10)
    goto LABEL_2;
  do
  {
    if (*(_DWORD *)(a2 + 172) <= --v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1982474E0);
    }
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v10);
    if (!v24)
    {
      v25 = 0;
      v26 = 0;
LABEL_19:
      v27 = v24 + 16 * v26;
      goto LABEL_20;
    }
    v26 = *(unsigned int *)(v24 - 4);
    v27 = v24 + 16 * v26;
    if (!*(_DWORD *)(v24 - 12))
    {
      v25 = v24 + 16 * v26;
      goto LABEL_19;
    }
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v10);
    if ((_DWORD)v26)
    {
      v30 = 16 * v26;
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v10);
      while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
      {
        v25 += 16;
        v30 -= 16;
        if (!v30)
        {
          v25 = v27;
          break;
        }
      }
    }
LABEL_20:
    if (v24)
      v28 = v24 + 16 * *(unsigned int *)(v24 - 4);
    else
      v28 = 0;
    while (v25 != v28)
    {
      v31[0] = *(_QWORD *)v25;
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v33, v31, a4, a5, a6, a7, a8, (uint64_t)v32);
      if (v32[16])
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>(&v34, (WTF::StringImpl **)v25, (_WORD *)(v25 + 8), (uint64_t)v31);
      v29 = v25 + 16;
      v25 = v27;
      if (v29 != v27)
      {
        v25 = v29;
        while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
        {
          v25 += 16;
          if (v25 == v27)
          {
            v25 = v27;
            break;
          }
        }
      }
    }
  }
  while (v10);
  v9 = v34;
  if (!v34 || !*(_DWORD *)(v34 - 12))
  {
LABEL_2:
    v11 = 0;
    *(_BYTE *)this = 0;
    goto LABEL_3;
  }
  v34 = 0;
  *(_QWORD *)this = v9;
  v11 = 1;
  v9 = 0;
LABEL_3:
  *((_BYTE *)this + 8) = v11;
  if (v33)
  {
    WTF::fastFree(v33 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
    v9 = v34;
  }
  if (v9)
  {
    v12 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)v9;
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v9 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

_QWORD *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[2 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v3];
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v5 -= 16;
      if (!v5)
        return v4;
    }
  }
  return result;
}

WTF::StringImpl ***WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::~HashMap(WTF::StringImpl ***a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *a1;
  if (*a1)
  {
    v11 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
              WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
            }
            else
            {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((unint64_t)(v9 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::BytecodeGenerator::getVariablesUnderTDZ(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::TDZEnvironmentLink *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _DWORD *v14;
  JSC::TDZEnvironmentLink *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::AtomStringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  JSC::TDZEnvironmentLink *v36;
  WTF::AtomStringImpl *v37;
  WTF::StringImpl **v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  _OWORD v67[2];
  WTF::StringImpl *v68;
  WTF::StringImpl **v69;

  v10 = *(JSC::TDZEnvironmentLink **)(a2 + 128);
  if (v10)
    ++*(_DWORD *)v10;
  v11 = *(unsigned int *)(a2 + 156);
  if (!(_DWORD)v11)
  {
LABEL_4:
    *(_QWORD *)this = v10;
    return;
  }
  v12 = *(uint64_t **)(a2 + 144);
  v13 = &v12[2 * v11];
  v14 = (_DWORD *)*(v13 - 1);
  if (!v14)
  {
    while (1)
    {
      v15 = v10;
      v10 = (JSC::TDZEnvironmentLink *)v12[1];
      if (!v10)
        break;
LABEL_41:
      ++*(_DWORD *)v10;
LABEL_42:
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v15);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      v12 += 2;
      if (v12 == v13)
        goto LABEL_4;
    }
    v69 = 0;
    v16 = *v12;
    if (*v12)
    {
      v17 = *(unsigned int *)(v16 - 4);
      v18 = v16 + 16 * v17;
      if (*(_DWORD *)(v16 - 12))
      {
        v19 = *v12;
        if ((_DWORD)v17)
        {
          v20 = 16 * v17;
          v19 = *v12;
          while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
          {
            v19 += 16;
            v20 -= 16;
            if (!v20)
            {
              v19 = v18;
              break;
            }
          }
        }
LABEL_17:
        if (v16)
          v21 = v16 + 16 * *(unsigned int *)(v16 - 4);
        else
          v21 = 0;
        while (v19 != v21)
        {
          if (*(_DWORD *)(v19 + 8))
          {
            v30 = *(WTF::StringImpl **)v19;
            if (*(_QWORD *)v19)
              *(_DWORD *)v30 += 2;
            v68 = v30;
            WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)&v69, (WTF::AtomStringImpl *)&v68, a3, a4, a5, a6, a7, a8, (uint64_t)v67);
            v32 = v68;
            v68 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
              {
                WTF::StringImpl::~StringImpl(v32, v31, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
              }
              else
              {
                *(_DWORD *)v32 -= 2;
              }
            }
          }
          v33 = v19 + 16;
          v19 = v18;
          if (v33 != v18)
          {
            v19 = v33;
            while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
            {
              v19 += 16;
              if (v19 == v18)
              {
                v19 = v18;
                break;
              }
            }
          }
        }
        JSC::CompactTDZEnvironmentMap::get(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93064), &v69, &v66);
        if (v15)
          ++*(_DWORD *)v15;
        v34 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)v34 = 1;
        v35 = v66;
        v66 = 0u;
        *(_OWORD *)(v34 + 8) = v35;
        v67[0] = 0u;
        *(_QWORD *)(v34 + 24) = v15;
        JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)v67);
        v36 = (JSC::TDZEnvironmentLink *)v12[1];
        v12[1] = v34;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
          {
            JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v36);
            WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          }
          else
          {
            --*(_DWORD *)v36;
          }
        }
        JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)&v66);
        v38 = v69;
        if (v69)
        {
          v47 = *((unsigned int *)v69 - 1);
          if ((_DWORD)v47)
          {
            v48 = v69;
            do
            {
              v49 = *v48;
              if (*v48 != (WTF::StringImpl *)-1)
              {
                *v48 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v49, v37, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
                  }
                  else
                  {
                    *(_DWORD *)v49 -= 2;
                  }
                }
              }
              ++v48;
              --v47;
            }
            while (v47);
          }
          WTF::fastFree((unint64_t)(v38 - 2), v37, a3, a4, a5, a6, a7, a8);
        }
        v10 = (JSC::TDZEnvironmentLink *)v12[1];
        if (!v10)
          goto LABEL_42;
        goto LABEL_41;
      }
      v19 = v16 + 16 * v17;
    }
    else
    {
      v19 = 0;
      v17 = 0;
    }
    v18 = v16 + 16 * v17;
    goto LABEL_17;
  }
  ++*v14;
  *(_QWORD *)this = v14;
  if (v10)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v10);
}

void WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  WTF::AtomStringImpl *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  JSC::TDZEnvironmentLink *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  _DWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;

  if (a2 != a1)
  {
    v10 = *(_DWORD *)(a1 + 12);
    v11 = (WTF::AtomStringImpl *)*(unsigned int *)(a2 + 12);
    if (v10 > v11)
    {
      WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v11, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 8);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, 0, a3, a4, a5, a6, a7, a8);
          v63 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v63, v11, a3, a4, a5, a6, a7, a8);
          }
        }
        v47 = *(unsigned int *)(a2 + 12);
        if (*(_DWORD *)(a1 + 8) < v47)
        {
          if (v47 >> 28)
          {
            __break(0xC471u);
            return;
          }
          v48 = *(_QWORD *)a1;
          v49 = *(unsigned int *)(a1 + 12);
          v50 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v47));
          *(_DWORD *)(a1 + 8) = v47;
          *(_QWORD *)a1 = v50;
          if ((_DWORD)v49)
          {
            v64 = v48 + 16 * v49;
            v65 = v48;
            do
            {
              *v50 = 0;
              v66 = *(WTF::StringImpl ***)v65;
              *(_QWORD *)v65 = 0;
              *v50 = v66;
              v67 = *(_QWORD *)(v65 + 8);
              *(_QWORD *)(v65 + 8) = 0;
              v50[1] = v67;
              v68 = v50;
              std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>::~pair((WTF::StringImpl ***)v65, v51, v52, v53, v54, v55, v56, v57);
              v65 += 16;
              v50 = v68 + 2;
            }
            while (v65 != v64);
          }
          if (v48)
          {
            if (*(_QWORD *)a1 == v48)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v48, v51, v52, v53, v54, v55, v56, v57);
          }
        }
      }
    }
    v13 = *(_QWORD **)a2;
    v14 = *(unsigned int *)(a1 + 12);
    v15 = *(uint64_t **)a1;
    if ((_DWORD)v14)
    {
      v16 = &v13[2 * v14];
      do
      {
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(&v69, v13);
        v24 = *v15;
        *v15 = v69;
        v69 = v24;
        if (v24)
        {
          v27 = *(unsigned int *)(v24 - 4);
          if ((_DWORD)v27)
          {
            v28 = (WTF::StringImpl **)v24;
            do
            {
              v29 = *v28;
              if (*v28 != (WTF::StringImpl *)-1)
              {
                *v28 = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
                    WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
                  }
                  else
                  {
                    *(_DWORD *)v29 -= 2;
                  }
                }
              }
              v28 += 2;
              --v27;
            }
            while (v27);
          }
          WTF::fastFree(v24 - 16, v17, v18, v19, v20, v21, v22, v23);
        }
        v25 = (_DWORD *)v13[1];
        if (v25)
          ++*v25;
        v26 = (JSC::TDZEnvironmentLink *)v15[1];
        v15[1] = (uint64_t)v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
          {
            JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v26);
            WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
          }
          else
          {
            --*(_DWORD *)v26;
          }
        }
        v13 += 2;
        v15 += 2;
      }
      while (v13 != v16);
      v13 = *(_QWORD **)a2;
      LODWORD(v14) = *(_DWORD *)(a1 + 12);
      v15 = *(uint64_t **)a1;
    }
    v46 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v14 != (_DWORD)v46)
    {
      v58 = &v15[2 * v14];
      v59 = &v13[2 * v14];
      v60 = 16 * v46 - 16 * v14;
      do
      {
        v61 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(v58, v59);
        v62 = (_DWORD *)v59[1];
        if (v62)
          ++*v62;
        v61[1] = (uint64_t)v62;
        v58 = v61 + 2;
        v59 += 2;
        v60 -= 16;
      }
      while (v60);
      LODWORD(v14) = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v14;
  }
}

uint64_t JSC::BytecodeGenerator::emitNewObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  unsigned int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  char *v88;
  char *v89;
  _BYTE *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  WTF *v95;
  int v96;
  _QWORD v97[2];
  char v98;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v11 + 4) |= 1u;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_DWORD *)(v12 + 116);
  *(_DWORD *)(v12 + 116) = v13 + 1;
  v14 = (v10 - 1073741808) < 0x80;
  if (v10 <= 0x3FFFFFFF)
    v14 = (v10 + 128) < 0x90;
  if (v14 && v13 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1D, a3, a4, a5, a6, a7, a8);
    LOBYTE(v97[0]) = 29;
    v64 = *(unsigned int *)(a1 + 12);
    v65 = *(unsigned int *)(a1 + 16);
    if (v64 > v65)
    {
      *(_DWORD *)(a1 + 16) = v65 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v65) = 29;
      v68 = *(_DWORD *)(a1 + 12);
      v69 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v64 == *(_DWORD *)(a1 + 8))
      {
        v91 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v64 + 1), (unint64_t)v97);
        v64 = *(unsigned int *)(a1 + 12);
        v66 = *(_QWORD *)a1;
        v67 = *v91;
      }
      else
      {
        v66 = *(_QWORD *)a1;
        v67 = 29;
      }
      *(_BYTE *)(v66 + v64) = v67;
      v68 = *(_DWORD *)(a1 + 12) + 1;
      v69 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v68;
      *(_DWORD *)(a1 + 16) = v69;
    }
    v70 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v70 = v10;
    LOBYTE(v97[0]) = v70;
    if (v68 > v69)
    {
      *(_DWORD *)(a1 + 16) = v69 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v69) = v70;
      v73 = *(_DWORD *)(a1 + 12);
      v74 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v71 = v68;
      if (v68 == *(_DWORD *)(a1 + 8))
      {
        v92 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v68 + 1), (unint64_t)v97);
        v71 = *(unsigned int *)(a1 + 12);
        v72 = *(_QWORD *)a1;
        v70 = *v92;
      }
      else
      {
        v72 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v72 + v71) = v70;
      v73 = *(_DWORD *)(a1 + 12) + 1;
      v74 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v73;
      *(_DWORD *)(a1 + 16) = v74;
    }
    LOBYTE(v97[0]) = 0;
    if (v73 > v74)
    {
      *(_DWORD *)(a1 + 16) = v74 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v74) = 0;
      v75 = *(_DWORD *)(a1 + 12);
      v76 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v73 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v73 + 1), (unint64_t)v97);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v73) = 0;
      v75 = *(_DWORD *)(a1 + 12) + 1;
      v76 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v75;
      *(_DWORD *)(a1 + 16) = v76;
    }
    LOBYTE(v97[0]) = v13;
    if (v75 <= v76)
    {
      v41 = v75;
      if (v75 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v75) = v13;
        goto LABEL_44;
      }
      goto LABEL_95;
    }
    *(_DWORD *)(a1 + 16) = v76 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v76) = v13;
  }
  else
  {
    if (v10 <= 0x3FFFFFFF)
      v15 = (v10 + 0x8000) >> 6 < 0x201;
    else
      v15 = (v10 - 1073741760) < 0x8000;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1D, a3, a4, a5, a6, a7, a8);
    if (!v15 || HIWORD(v13))
    {
      LOBYTE(v97[0]) = -126;
      v78 = *(unsigned int *)(a1 + 12);
      v79 = *(unsigned int *)(a1 + 16);
      if (v78 > v79)
      {
        *(_DWORD *)(a1 + 16) = v79 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v79) = -126;
        v82 = *(_DWORD *)(a1 + 12);
        v83 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v78 == *(_DWORD *)(a1 + 8))
        {
          v93 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v78 + 1), (unint64_t)v97);
          v78 = *(unsigned int *)(a1 + 12);
          v80 = *(_QWORD *)a1;
          v81 = *v93;
        }
        else
        {
          v80 = *(_QWORD *)a1;
          v81 = -126;
        }
        *(_BYTE *)(v80 + v78) = v81;
        v82 = *(_DWORD *)(a1 + 12) + 1;
        v83 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v82;
        *(_DWORD *)(a1 + 16) = v83;
      }
      v84 = 29;
      LOBYTE(v97[0]) = 29;
      if (v82 > v83)
      {
        *(_DWORD *)(a1 + 16) = v83 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v83) = 29;
      }
      else
      {
        v85 = v82;
        if (v82 == *(_DWORD *)(a1 + 8))
        {
          v94 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v82 + 1), (unint64_t)v97);
          v85 = *(unsigned int *)(a1 + 12);
          v86 = *(_QWORD *)a1;
          v84 = *v94;
        }
        else
        {
          v86 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v86 + v85) = v84;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 0);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
    }
    else
    {
      LOBYTE(v97[0]) = 0x80;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v88 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)v97);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v88;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 0x80;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = 29;
      LOBYTE(v97[0]) = 29;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = 29;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v89 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)v97);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v89;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      LOBYTE(v97[0]) = v10;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v10;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v25 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)v97);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v25) = v10;
        v27 = *(_DWORD *)(a1 + 12) + 1;
        v28 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v27;
        *(_DWORD *)(a1 + 16) = v28;
      }
      v29 = v10 >> 8;
      LOBYTE(v97[0]) = BYTE1(v10);
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v10);
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v30 = v27;
        if (v27 == *(_DWORD *)(a1 + 8))
        {
          v90 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)v97);
          v30 = *(unsigned int *)(a1 + 12);
          v31 = *(_QWORD *)a1;
          LOBYTE(v29) = *v90;
        }
        else
        {
          v31 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v31 + v30) = v29;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      LOBYTE(v97[0]) = 0;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = 0;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v32 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)v97);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v32) = 0;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      LOBYTE(v97[0]) = 0;
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = 0;
        v36 = *(_DWORD *)(a1 + 12);
        v37 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v34 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)v97);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v34) = 0;
        v36 = *(_DWORD *)(a1 + 12) + 1;
        v37 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v36;
        *(_DWORD *)(a1 + 16) = v37;
      }
      LOBYTE(v97[0]) = v13;
      if (v36 > v37)
      {
        *(_DWORD *)(a1 + 16) = v37 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v37) = v13;
        v38 = *(_DWORD *)(a1 + 12);
        v39 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v36 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)v97);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v36) = v13;
        v38 = *(_DWORD *)(a1 + 12) + 1;
        v39 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v38;
        *(_DWORD *)(a1 + 16) = v39;
      }
      v40 = v13 >> 8;
      LOBYTE(v97[0]) = BYTE1(v13);
      if (v38 <= v39)
      {
        v41 = v38;
        if (v38 != *(_DWORD *)(a1 + 8))
        {
          v42 = *(_QWORD *)a1;
LABEL_43:
          *(_BYTE *)(v42 + v41) = v40;
LABEL_44:
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          goto LABEL_45;
        }
LABEL_95:
        v87 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)v97);
        v41 = *(unsigned int *)(a1 + 12);
        v42 = *(_QWORD *)a1;
        LOBYTE(v40) = *v87;
        goto LABEL_43;
      }
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = BYTE1(v13);
    }
  }
LABEL_45:
  v43 = (uint64_t *)(a1 + 688);
  v44 = *(_QWORD *)(a1 + 40);
  v45 = *(_DWORD *)(a1 + 48);
  v46 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v46 + 8) = v44;
  *(_DWORD *)(v46 + 16) = v45;
  *(_QWORD *)(v46 + 24) = 0;
  v96 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v46 = 2;
  v95 = (WTF *)v46;
  WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>((uint64_t)v97, v43, &v96, (uint64_t *)&v95, v47, v48, v49, v50);
  if (v95)
    WTF::RefCounted<JSC::StaticPropertyAnalysis>::deref(v95, v51, v52, v53, v54, v55, v56, v57);
  if (v98)
  {
    v59 = v46;
LABEL_82:
    WTF::RefCounted<JSC::StaticPropertyAnalysis>::deref((WTF *)v59, v51, v52, v53, v54, v55, v56, v57);
    return a2;
  }
  v58 = v97[0];
  v59 = *(_QWORD *)(v97[0] + 8);
  if (!v59)
  {
    *(_QWORD *)(v97[0] + 8) = v46;
    return a2;
  }
  if (*(_DWORD *)v59 != 1)
  {
    *(_QWORD *)(v97[0] + 8) = v46;
    goto LABEL_82;
  }
  v60 = (unsigned __int8 *)(**(_QWORD **)(v59 + 8) + *(unsigned int *)(v59 + 16));
  v61 = *(_QWORD *)(v59 + 24);
  if (v61)
    LODWORD(v61) = *(_DWORD *)(v61 - 12);
  v62 = *v60;
  v63 = v62;
  if ((v62 | 2) == 0x82)
    v63 = v60[1];
  if (v63 == 29)
  {
    if (v62 == 128)
    {
      if (v61 >= 0x10000)
        LOWORD(v61) = 255;
      *((_WORD *)v60 + 2) = v61;
    }
    else if (v62 == 130)
    {
      *(_DWORD *)(v60 + 6) = v61;
    }
    else
    {
      if (v61 >= 0xFF)
        LOBYTE(v61) = -1;
      v60[2] = v61;
    }
  }
  else if (v63 == 28)
  {
    if (v62 == 128)
    {
      if (v61 >= 0x10000)
        LOWORD(v61) = 255;
      *((_WORD *)v60 + 3) = v61;
    }
    else if (v62 == 130)
    {
      *(_DWORD *)(v60 + 10) = v61;
    }
    else
    {
      if (v61 >= 0xFF)
        LOBYTE(v61) = -1;
      v60[3] = v61;
    }
  }
  v59 = *(_QWORD *)(v58 + 8);
  *(_QWORD *)(v58 + 8) = v46;
  if (v59)
    goto LABEL_82;
  return a2;
}

uint64_t JSC::BytecodeGenerator::addStringConstant(uint64_t a1, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;

  v10 = (uint64_t *)(a1 + 656);
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a1 + 656);
  if (v12
    || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a1 + 656), 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_DWORD *)(v11 + 16);
  if ((v14 & 0x20) != 0)
    v14 = *(_DWORD *)(v11 + 32);
  v15 = v13 & (v14 >> 8);
  v16 = (_QWORD *)(v12 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_13:
    *v16 = v11;
    v16[1] = 0;
    v20 = *v10;
    if (*v10)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_19;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        goto LABEL_19;
      if (!(_DWORD)v25)
      {
        v28 = 8;
        goto LABEL_30;
      }
    }
    v28 = ((_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25)));
LABEL_30:
    v16 = WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v10, v28, (uint64_t)v16, a4, a5, a6, a7, a8);
    goto LABEL_19;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v13;
    v16 = (_QWORD *)(v12 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v10 - 16);
        v16 = v18;
      }
      goto LABEL_13;
    }
  }
LABEL_19:
  result = v16[1];
  if (!result)
  {
    v27 = JSC::jsString(*(JSC **)(a1 + 696), a2, a3, a4, a5, a6, a7, a8);
    v16[1] = v27;
    JSC::BytecodeGenerator::addConstantValue(a1, v27);
    return v16[1];
  }
  return result;
}

_QWORD *JSC::BytecodeGenerator::addTemplateObjectConstant(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *result;
  unint64_t v17;
  _QWORD v18[3];
  unint64_t v19;
  _QWORD v20[3];
  _BYTE v21[28];
  int v22;

  v22 = a3;
  WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::add((uint64_t)v21, (uint64_t *)(a1 + 672), a2, a4, a5, a6, a7, a8);
  v18[0] = a1;
  v18[1] = v21;
  v18[2] = &v22;
  v19 = a3;
  WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::ensure<JSC::BytecodeGenerator::addTemplateObjectConstant(WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>> &&,int)::$_0>((uint64_t)v20, (uint64_t *)(a1 + 680), &v19, (uint64_t)v18, v10, v11, v12, v13);
  v14 = *(_QWORD *)(v20[0] + 8);
  v15 = JSC::BytecodeGenerator::addConstantIndex(a1);
  result = JSC::UnlinkedCodeBlockGenerator::addConstant(*(_QWORD *)(a1 + 24), v14);
  v17 = (unint64_t)v15 >> 5;
  if (v17 < *(unsigned int *)(a1 + 404))
    return (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v17) + 12 * (v15 & 0x1F));
  __break(0xC471u);
  return result;
}

void WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::ensure<JSC::BytecodeGenerator::addTemplateObjectConstant(WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>> &&,int)::$_0>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  __n128 *v20;
  unint64_t v21;
  __n128 *v22;
  int v23;
  uint64_t v24;
  JSC::TemplateObjectDescriptor *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  JSC::TemplateObjectDescriptor *v43;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::expand(a2, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *a3 + ~(*a3 << 32);
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (__n128 *)(v12 + 16 * v19);
  v21 = v20->n128_u64[0];
  if (v20->n128_u64[0] != -1)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v36 = 0;
        else
          v36 = *(unsigned int *)(v12 - 4);
        v42 = 0;
        v41 = v12 + 16 * v36;
        goto LABEL_29;
      }
      if (v21 == -2)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (__n128 *)(v12 + 16 * v19);
      v21 = v20->n128_u64[0];
      ++v23;
    }
    while (v20->n128_u64[0] != -1);
    if (v22)
    {
      v22->n128_u64[0] = -1;
      v22->n128_u64[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  v20->n128_u64[0] = v15;
  v24 = *(_QWORD *)(*(_QWORD *)a4 + 696);
  v25 = ***(JSC::TemplateObjectDescriptor ****)(a4 + 8);
  ++*(_DWORD *)v25;
  v43 = v25;
  v33 = JSC::JSTemplateObjectDescriptor::create(v24, (uint64_t *)&v43, **(unsigned int **)(a4 + 16), a4, a5, a6, a7, a8);
  if (v43)
    WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(v43, v26, v27, v28, v29, v30, v31, v32);
  v20->n128_u64[1] = v33;
  v34 = *a2;
  if (*a2)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v37 = *a2;
  if (*a2)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 <= 2 * v39)
    {
LABEL_24:
      v20 = (__n128 *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::expand(a2, v20);
      v37 = *a2;
      if (*a2)
        v40 = *(unsigned int *)(v37 - 4);
      else
        v40 = 0;
    }
  }
  else if (3 * v40 <= 4 * v39)
  {
    goto LABEL_24;
  }
  v41 = v37 + 16 * v40;
  v42 = 1;
LABEL_29:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v41;
  *(_BYTE *)(a1 + 16) = v42;
}

_DWORD *JSC::BytecodeGenerator::emitNewArray(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  int v12;
  int v13;
  _DWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  WTF *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  _BYTE v57[136];

  v8 = a5;
  v55 = (WTF *)v57;
  v56 = 16;
  if (a3 && a4)
  {
    v11 = a3;
    HIDWORD(v54) = a5;
    v12 = a4 - 1;
    do
    {
      v13 = v12;
      result = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      v20 = result;
      v21 = HIDWORD(v56);
      if (HIDWORD(v56) == (_DWORD)v56)
      {
        v47 = HIDWORD(v56) + ((unint64_t)HIDWORD(v56) >> 2);
        if (v47 >= 0x10)
          v48 = v47 + 1;
        else
          v48 = 16;
        if (v48 <= (unint64_t)HIDWORD(v56) + 1)
          v49 = HIDWORD(v56) + 1;
        else
          v49 = v48;
        v50 = v55;
        if (v49 < 0x11)
        {
          v55 = (WTF *)v57;
          LODWORD(v56) = 16;
          v51 = (WTF *)v57;
        }
        else
        {
          if (v49 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v51 = (WTF *)WTF::fastMalloc((WTF *)(8 * v49));
          LODWORD(v56) = v49;
          v55 = v51;
        }
        memcpy(v51, v50, 8 * v21);
        if (v57 != (_BYTE *)v50 && v50)
        {
          if (v55 == v50)
          {
            v55 = 0;
            LODWORD(v56) = 0;
          }
          WTF::fastFree((unint64_t)v50, v52, v53, v15, v16, v17, v18, v19);
        }
        v21 = HIDWORD(v56);
        v22 = v55;
        if (v20)
          ++*v20;
        v23 = (_QWORD *)((char *)v22 + 8 * v21);
      }
      else
      {
        v22 = v55;
        v23 = (_QWORD *)((char *)v55 + 8 * HIDWORD(v56));
        if (result)
          ++*result;
      }
      *v23 = v20;
      HIDWORD(v56) = v21 + 1;
      v24 = *((_QWORD *)v22 + (v21 + 1) - 1);
      v25 = (_BYTE *)v11[1];
      v26 = *(_BYTE *)(a1 + 709);
      v27 = *(_BYTE *)(a1 + 710);
      *(_WORD *)(a1 + 709) = 0;
      if ((unint64_t)&v54 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
      {
        *(_BYTE *)(a1 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      }
      else
      {
        if (v25[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, (uint64_t)(v25 + 8), v15, v16, v17, v18, v19);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a1, v24);
      }
      *(_BYTE *)(a1 + 710) = v27;
      *(_BYTE *)(a1 + 709) = v26;
      v11 = (_QWORD *)*v11;
      if (!v11)
        break;
      v12 = v13 - 1;
    }
    while (v13);
    v28 = HIDWORD(v56);
    v29 = *(_DWORD *)(a2 + 4);
    if (HIDWORD(v56))
      v30 = *(unsigned int *)(*(_QWORD *)v55 + 4);
    else
      v30 = 0;
    v8 = HIDWORD(v54);
  }
  else
  {
    v30 = 0;
    v28 = 0;
    v29 = *(_DWORD *)(a2 + 4);
  }
  v31 = v29;
  v32 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v32 + 4) |= 1u;
  v33 = *(_QWORD *)(v32 + 16);
  v34 = *(unsigned int *)(v33 + 120);
  *(_DWORD *)(v33 + 120) = v34 + 1;
  if ((JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v31, v30, v28, v8, v34, a7, a8) & 1) == 0
    && (JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v31, v30, v28, v8, v34, v40, v41) & 1) == 0)
  {
    JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v31, v30, v28, v8, v34, v40, v41);
  }
  if (HIDWORD(v56))
  {
    v42 = v55;
    v43 = 8 * HIDWORD(v56);
    do
    {
      v44 = *(_DWORD **)v42;
      *(_QWORD *)v42 = 0;
      if (v44)
        --*v44;
      v42 = (WTF *)((char *)v42 + 8);
      v43 -= 8;
    }
    while (v43);
  }
  v45 = v55;
  if (v57 != (_BYTE *)v55 && v55 != 0)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    WTF::fastFree((unint64_t)v45, v35, v36, v37, v38, v39, v40, v41);
  }
  return (_DWORD *)a2;
}

uint64_t JSC::OpSpread::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::OpSpread::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpSpread::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpSpread::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitNewArrayWithSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v8 = a3;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v12 + 4) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(unsigned int *)(v13 + 64);
  *(_DWORD *)(v13 + 64) = v14 + 1;
  v15 = (v11 - 1073741808) < 0x80;
  if (v11 <= 0x3FFFFFFF)
    v15 = (v11 + 128) < 0x90;
  if (!v15)
    goto LABEL_29;
  v16 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v16 = (a3 + 128) < 0x90;
  if (v16 && v14 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x10, a3, a4, a5, a6, a7, a8);
    v42 = 16;
    v17 = *(unsigned int *)(a1 + 12);
    v18 = *(unsigned int *)(a1 + 16);
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = 16;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
      {
        v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
        v17 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v20 = *v39;
      }
      else
      {
        v19 = *(_QWORD *)a1;
        v20 = 16;
      }
      *(_BYTE *)(v19 + v17) = v20;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v23 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v23 = v11;
    v43 = v23;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v24 = v21;
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v43);
        v24 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v23 = *v40;
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v25 + v24) = v23;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v28 = v8;
    v44 = v28;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v44);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        v28 = *v41;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v45 = v14;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v14;
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v45);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v14;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_29:
    v34 = a3;
    if ((JSC::OpNewArrayWithSize::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, a3, v14, a5, a6, a7, a8) & 1) == 0)JSC::OpNewArrayWithSize::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v34, v14, v35, v36, v37, v38);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitNewArrayWithSpecies(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v6 + 4) |= 1u;
  v7 = (*(_DWORD *)(v6 + 8) + 1);
  *(_DWORD *)(v6 + 8) = v7;
  JSC::OpNewArrayWithSpecies::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v5, a3, a4, v7);
  return a2;
}

void JSC::BytecodeGenerator::emitNewClassFieldInitializerFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  JSC::VM *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::TDZEnvironmentLink *v26;
  int v27;
  WTF::StringImpl **v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::UnlinkedFunctionExecutable *v36;
  WTF::StringImpl **v37;
  WTF *v38;
  JSC::TDZEnvironmentLink *v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  _DWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl **v91;
  WTF *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl **v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl **v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl **v141;
  char v142;
  WTF *v143;
  int v144;
  unsigned int v145;
  char v146;
  JSC::TDZEnvironmentLink *v147;
  _QWORD v148[2];
  __int128 v149;
  char v150;
  __int16 v151;
  char v152;
  int v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _DWORD *v159;
  __int128 v160;
  _DWORD *v161;
  uint64_t v162;
  __int128 v163;
  int v164;
  WTF::StringImpl **v165;
  unsigned __int8 v166;
  JSC::TDZEnvironmentLink *v167;

  v8 = a4;
  JSC::BytecodeGenerator::getVariablesUnderTDZ((JSC::BytecodeGenerator *)&v167, a1, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGenerator::getAvailablePrivateAccessNames((JSC::BytecodeGenerator *)&v165, a1, v12, v13, v14, v15, v16, v17);
  v18 = *(_QWORD *)(a1 + 192);
  if (v8)
    v19 = 2;
  else
    v19 = 0;
  v149 = xmmword_199124400;
  v150 = 0;
  v148[0] = &off_1E3596470;
  v148[1] = &unk_1E3596490;
  if (v8)
    v20 = 5;
  else
    v20 = 21;
  v151 = v20;
  v152 = 19;
  v156 = 0;
  v157 = 0;
  v155 = 0;
  v158 = 0;
  v161 = 0;
  v162 = 0;
  v163 = xmmword_199154590;
  v164 = 0;
  v21 = (JSC::VM *)(v18 + 168);
  v22 = *(_DWORD **)(v18 + 168);
  if (v22)
    ++v22[2];
  v160 = *(_OWORD *)(v18 + 176);
  v159 = v22;
  v154 = 0;
  v153 = 3;
  v23 = *(_QWORD *)(a1 + 696);
  v24 = *(unsigned __int8 *)(a1 + 707);
  v25 = (*(unsigned __int16 *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 28) >> 2) & 1;
  v26 = v167;
  v167 = 0;
  v147 = v26;
  LOBYTE(v143) = 0;
  v146 = 0;
  LOBYTE(v141) = 0;
  v142 = 0;
  v27 = v166;
  if (v166)
  {
    v28 = v165;
    v165 = 0;
    v141 = v28;
    v142 = 1;
  }
  v36 = (JSC::UnlinkedFunctionExecutable *)JSC::UnlinkedFunctionExecutable::create(v23, v21, (uint64_t)v148, v24, 1, 1, v25, &v147, (uint64_t)&v143, (uint64_t)&v141, v19, 0, 0, 0);
  if (v142)
  {
    v37 = v141;
    if (v141)
    {
      v119 = *((unsigned int *)v141 - 1);
      if ((_DWORD)v119)
      {
        v120 = v141;
        do
        {
          v121 = *v120;
          if (*v120 != (WTF::StringImpl *)-1)
          {
            *v120 = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 2)
              {
                WTF::StringImpl::~StringImpl(v121, v29, v30, v31, v32, v33, v34, v35);
                WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
              }
              else
              {
                *(_DWORD *)v121 -= 2;
              }
            }
          }
          v120 += 2;
          --v119;
        }
        while (v119);
      }
      WTF::fastFree((unint64_t)(v37 - 2), v29, v30, v31, v32, v33, v34, v35);
    }
  }
  if (v146)
  {
    if (v145)
    {
      v92 = v143;
      v93 = 8 * v145;
      do
      {
        v94 = *(WTF::StringImpl **)v92;
        *(_QWORD *)v92 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
          {
            WTF::StringImpl::~StringImpl(v94, v29, v30, v31, v32, v33, v34, v35);
            WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
          }
          else
          {
            *(_DWORD *)v94 -= 2;
          }
        }
        v92 = (WTF *)((char *)v92 + 8);
        v93 -= 8;
      }
      while (v93);
    }
    v38 = v143;
    if (v143)
    {
      v143 = 0;
      v144 = 0;
      WTF::fastFree((unint64_t)v38, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  v39 = v147;
  v147 = 0;
  if (v39)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v39);
  v40 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v40)
  {
    v41 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v42 = (_DWORD *)WTF::fastMalloc((WTF *)(40 * v40 + 8));
    v46 = v42;
    v47 = 0;
    *v42 = v40;
    do
    {
      v48 = &v42[v47 / 4];
      v49 = (_QWORD *)(v41 + v47);
      v50 = *(_QWORD *)(v41 + v47);
      *v49 = 0;
      *((_QWORD *)v48 + 1) = v50;
      v51 = *(_OWORD *)(v41 + v47 + 8);
      *(_OWORD *)((char *)v48 + 29) = *(_OWORD *)(v41 + v47 + 21);
      *((_OWORD *)v48 + 1) = v51;
      v47 += 40;
    }
    while (v49 + 5 != (_QWORD *)(v41 + 40 * v40));
    v52 = 0;
    v53 = 40 * v40;
    do
    {
      v54 = *(WTF::StringImpl **)(v41 + v52);
      *(_QWORD *)(v41 + v52) = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v43, v44, v45, v32, v33, v34, v35);
          WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      v52 += 40;
    }
    while (v53 != v52);
    if (v41)
      WTF::fastFree(v41, v43, v44, v45, v32, v33, v34, v35);
    v63 = *((_QWORD *)v36 + 11);
    if (!v63)
      v63 = JSC::UnlinkedFunctionExecutable::ensureRareDataSlow(v36);
    v64 = *(unsigned int **)(v63 + 56);
    *(_QWORD *)(v63 + 56) = v46;
    if (v64)
    {
      WTF::VectorTypeOperations<JSC::UnlinkedFunctionExecutable::ClassElementDefinition>::destruct((WTF::StringImpl **)v64 + 1, (WTF::AtomStringImpl *)&v64[10 * *v64 + 2], v44, v45, v32, v33, v34, v35);
      WTF::fastFree((unint64_t)v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
  v72 = *(_QWORD *)(a1 + 24);
  v73 = (_QWORD *)(v72 + 96);
  v143 = 0;
  v74 = *(unsigned int *)(v72 + 108);
  if ((_DWORD)v74 == *(_DWORD *)(v72 + 104))
    *(_QWORD *)(*(_QWORD *)(v72 + 96) + 8 * *(unsigned int *)(v72 + 108)) = *(_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72 + 96, v74 + 1, (unint64_t)&v143);
  else
    *(_QWORD *)(*v73 + 8 * v74) = 0;
  v75 = *(_DWORD *)(v72 + 108);
  v76 = __CFADD__(v75, 1);
  v77 = v75 + 1;
  *(_DWORD *)(v72 + 108) = v77;
  if (v76)
  {
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)(*v73 + 8 * v77 - 8) = v36;
    v78 = *(_DWORD *)(a2 + 4);
    v79 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
    if ((JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v78, v79, v74, v32, v33, v34, v35) & 1) == 0&& (JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v78, v79, v74, v83, v84, v85, v86) & 1) == 0)
    {
      JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v78, v79, v74, v83, v84, v85, v86);
    }
    v87 = v161;
    v161 = 0;
    if (v87)
    {
      if (v87[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v87 + 8))(v87);
      else
        --v87[2];
    }
    v88 = v159;
    v159 = 0;
    if (v88)
    {
      if (v88[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 8))(v88);
      else
        --v88[2];
    }
    v89 = v155;
    v155 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
      {
        WTF::StringImpl::~StringImpl(v89, v80, v81, v82, v83, v84, v85, v86);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v89 -= 2;
      }
    }
    v90 = v154;
    v154 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v80, v81, v82, v83, v84, v85, v86);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    if (v27)
    {
      v91 = v165;
      if (v165)
      {
        v130 = *((unsigned int *)v165 - 1);
        if ((_DWORD)v130)
        {
          v131 = v165;
          do
          {
            v132 = *v131;
            if (*v131 != (WTF::StringImpl *)-1)
            {
              *v131 = 0;
              if (v132)
              {
                if (*(_DWORD *)v132 == 2)
                {
                  WTF::StringImpl::~StringImpl(v132, v80, v81, v82, v83, v84, v85, v86);
                  WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
                }
                else
                {
                  *(_DWORD *)v132 -= 2;
                }
              }
            }
            v131 += 2;
            --v130;
          }
          while (v130);
        }
        WTF::fastFree((unint64_t)(v91 - 2), v80, v81, v82, v83, v84, v85, v86);
      }
    }
  }
}

char *JSC::OpNewAsyncGeneratorFunc::emit<JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  signed int v9;
  signed int v10;
  _BOOL4 v12;
  _BOOL4 v13;
  char *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  WTF *v74;
  char *v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v12 = (a2 + 128) < 0x90;
  if (!v12)
    goto LABEL_27;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v13)
  {
    result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x63, a3, a4, a5, a6, a7, a8);
    v76 = 99;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 99;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v76);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *result;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 99;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v21 = v10;
    v77 = v21;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v77);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *result;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v26 = v9;
    v78 = v26;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v78);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        v26 = *result;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v79 = v8;
    if (v29 <= v30)
    {
      if (v29 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v8;
LABEL_71:
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        return result;
      }
      v74 = (WTF *)(v29 + 1);
      v75 = &v79;
      goto LABEL_95;
    }
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v8;
  }
  else
  {
LABEL_27:
    if (a2 <= 0x3FFFFFFF)
      v31 = (a2 + 0x8000) >> 6 < 0x201;
    else
      v31 = (a2 - 1073741760) < 0x8000;
    if (!v31)
      goto LABEL_72;
    v32 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v32 = (a3 + 0x8000) >> 6 < 0x201;
    if (!WORD1(a4) && v32)
    {
      result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x63, a3, a4, a5, a6, a7, a8);
      v80 = 0x80;
      v33 = *(unsigned int *)(a1 + 12);
      v34 = *(unsigned int *)(a1 + 16);
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = 0x80;
        v37 = *(_DWORD *)(a1 + 12);
        v38 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v33 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v80);
          v33 = *(unsigned int *)(a1 + 12);
          v35 = *(_QWORD *)a1;
          v36 = *result;
        }
        else
        {
          v35 = *(_QWORD *)a1;
          v36 = 0x80;
        }
        *(_BYTE *)(v35 + v33) = v36;
        v37 = *(_DWORD *)(a1 + 12) + 1;
        v38 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v37;
        *(_DWORD *)(a1 + 16) = v38;
      }
      v39 = 99;
      v81 = 99;
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = 99;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v40 = v37;
        if (v37 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v81);
          v40 = *(unsigned int *)(a1 + 12);
          v41 = *(_QWORD *)a1;
          v39 = *result;
        }
        else
        {
          v41 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v41 + v40) = v39;
        v42 = *(_DWORD *)(a1 + 12) + 1;
        v43 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v42;
        *(_DWORD *)(a1 + 16) = v43;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v82 = v10;
      if (v42 > v43)
      {
        *(_DWORD *)(a1 + 16) = v43 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v43) = v10;
        v44 = *(_DWORD *)(a1 + 12);
        v45 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v42 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v82);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v42) = v10;
        }
        v44 = *(_DWORD *)(a1 + 12) + 1;
        v45 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v44;
        *(_DWORD *)(a1 + 16) = v45;
      }
      v46 = v10 >> 8;
      v83 = BYTE1(v10);
      if (v44 > v45)
      {
        *(_DWORD *)(a1 + 16) = v45 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v45) = BYTE1(v10);
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v47 = v44;
        if (v44 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v83);
          v47 = *(unsigned int *)(a1 + 12);
          v48 = *(_QWORD *)a1;
          LOBYTE(v46) = *result;
        }
        else
        {
          v48 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v48 + v47) = v46;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      if (v9 > 0x3FFFFFFF)
        v9 += 64;
      v84 = v9;
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = v9;
        v51 = *(_DWORD *)(a1 + 12);
        v52 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v84);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v49) = v9;
        }
        v51 = *(_DWORD *)(a1 + 12) + 1;
        v52 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v51;
        *(_DWORD *)(a1 + 16) = v52;
      }
      v53 = v9 >> 8;
      v85 = BYTE1(v9);
      if (v51 > v52)
      {
        *(_DWORD *)(a1 + 16) = v52 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v52) = BYTE1(v9);
        v56 = *(_DWORD *)(a1 + 12);
        v57 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v54 = v51;
        if (v51 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v85);
          v54 = *(unsigned int *)(a1 + 12);
          v55 = *(_QWORD *)a1;
          LOBYTE(v53) = *result;
        }
        else
        {
          v55 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v55 + v54) = v53;
        v56 = *(_DWORD *)(a1 + 12) + 1;
        v57 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v56;
        *(_DWORD *)(a1 + 16) = v57;
      }
      v86 = v8;
      if (v56 > v57)
      {
        *(_DWORD *)(a1 + 16) = v57 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v57) = v8;
        v58 = *(_DWORD *)(a1 + 12);
        v59 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v56 == *(_DWORD *)(a1 + 8))
        {
          result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v56 + 1), (unint64_t)&v86);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v56) = v8;
        }
        v58 = *(_DWORD *)(a1 + 12) + 1;
        v59 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v58;
        *(_DWORD *)(a1 + 16) = v59;
      }
      v60 = v8 >> 8;
      v87 = BYTE1(v8);
      if (v58 <= v59)
      {
        v61 = v58;
        if (v58 != *(_DWORD *)(a1 + 8))
        {
          v62 = *(_QWORD *)a1;
LABEL_70:
          *(_BYTE *)(v62 + v61) = v60;
          goto LABEL_71;
        }
        v74 = (WTF *)(v58 + 1);
        v75 = &v87;
LABEL_95:
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v74, (unint64_t)v75);
        v61 = *(unsigned int *)(a1 + 12);
        v62 = *(_QWORD *)a1;
        LOBYTE(v60) = *result;
        goto LABEL_70;
      }
      *(_DWORD *)(a1 + 16) = v59 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v59) = BYTE1(v8);
    }
    else
    {
LABEL_72:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x63, a3, a4, a5, a6, a7, a8);
      v88 = -126;
      v63 = *(unsigned int *)(a1 + 12);
      v64 = *(unsigned int *)(a1 + 16);
      if (v63 > v64)
      {
        *(_DWORD *)(a1 + 16) = v64 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v64) = -126;
        v67 = *(_DWORD *)(a1 + 12);
        v68 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v63 == *(_DWORD *)(a1 + 8))
        {
          v72 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v63 + 1), (unint64_t)&v88);
          v63 = *(unsigned int *)(a1 + 12);
          v65 = *(_QWORD *)a1;
          v66 = *v72;
        }
        else
        {
          v65 = *(_QWORD *)a1;
          v66 = -126;
        }
        *(_BYTE *)(v65 + v63) = v66;
        v67 = *(_DWORD *)(a1 + 12) + 1;
        v68 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v67;
        *(_DWORD *)(a1 + 16) = v68;
      }
      v69 = 99;
      v89 = 99;
      if (v67 > v68)
      {
        *(_DWORD *)(a1 + 16) = v68 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v68) = 99;
      }
      else
      {
        v70 = v67;
        if (v67 == *(_DWORD *)(a1 + 8))
        {
          v73 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v67 + 1), (unint64_t)&v89);
          v70 = *(unsigned int *)(a1 + 12);
          v71 = *(_QWORD *)a1;
          v69 = *v73;
        }
        else
        {
          v71 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v71 + v70) = v69;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
      return (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::shouldSetFunctionName(JSC::BytecodeGenerator *this, JSC::ExpressionNode *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if ((*(unsigned int (**)(JSC::ExpressionNode *))(*(_QWORD *)a2 + 152))(a2))
  {
    v5 = *((_QWORD *)a2 + 4);
    v6 = *(_QWORD *)(v5 + 40);
    return (!v6 || !*(_DWORD *)(v6 + 4)) && !*(_QWORD *)(v5 + 48);
  }
  result = (*(uint64_t (**)(JSC::ExpressionNode *))(*(_QWORD *)a2 + 176))(a2);
  if ((_DWORD)result)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 21);
    if (!v7)
      v7 = (_QWORD *)*((_QWORD *)a2 + 20);
    if (!*v7)
    {
      v8 = *((_QWORD *)a2 + 24);
      if (!v8
        || (JSC::PropertyListNode::hasStaticallyNamedProperty(v8, (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 1968)) & 1) == 0)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitSetFunctionName(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int *v21;
  unsigned int v22;

  v6 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v12 = JSC::BytecodeGenerator::emitLoad(a1, v6, a3, v7, v8, v9, v10, v11);
  v13 = v12;
  v14 = *(_DWORD *)(a2 + 4);
  if (v12)
    *v12 += 2;
  v21 = v12;
  JSC::VirtualRegister::VirtualRegister(&v22, (uint64_t)&v21);
  result = JSC::OpSetFunctionName::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v14, v22, v15, v16, v17, v18, v19);
  if (v21)
    --*v21;
  if (v13)
    --*v13;
  return result;
}

uint64_t JSC::BytecodeGenerator::emitCall<JSC::OpCall>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, unsigned __int8 a9)
{
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  signed int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  _BOOL4 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  WTF *v98;
  WTF *v99;
  uint64_t v100;
  _DWORD *v101;
  WTF *v102;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  __int16 v117;
  _DWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  unsigned int v168;
  _DWORD *v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  uint64_t v173;
  _BYTE v174[40];
  _DWORD *v175;
  int v176;

  v169 = a8;
  v170 = a3;
  v168 = a4;
  v171 = a2;
  LODWORD(v167) = a9;
  v13 = *(uint64_t **)a5;
  if (!*(_QWORD *)a5 || (v14 = *v13) == 0)
  {
LABEL_9:
    v19 = 0;
    v172 = (WTF *)v174;
    v173 = 5;
    v20 = (uint64_t *)(a1 + 88);
    do
    {
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(unsigned int *)(a1 + 100);
      if (v21)
      {
        v23 = *v20;
        do
        {
          v24 = v21 - 1;
          v25 = (v21 - 1) >> 5;
          if (v25 >= v22)
          {
            __break(0xC471u);
            JUMPOUT(0x19824AAE8);
          }
          if (*(_DWORD *)(*(_QWORD *)(v23 + 8 * v25) + 12 * (v24 & 0x1F)))
            break;
          *(_QWORD *)(a1 + 80) = v24;
          --v21;
        }
        while (v24);
      }
      v26 = v21 + 1;
      *(_QWORD *)(a1 + 80) = v21 + 1;
      v27 = v21 >> 5;
      if (v21 >> 5 >= v22)
      {
        v118 = (_DWORD *)WTF::fastMalloc((WTF *)0x180);
        v175 = v118;
        v119 = *(unsigned int *)(a1 + 100);
        if ((_DWORD)v119 == *(_DWORD *)(a1 + 96))
        {
          v120 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v119 + 1, (unint64_t)&v175);
          v119 = *(unsigned int *)(a1 + 100);
          *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v119) = *v120;
        }
        else
        {
          *(_QWORD *)(*v20 + 8 * v119) = v118;
        }
        v22 = (v119 + 1);
        *(_DWORD *)(a1 + 100) = v22;
        v26 = *(_QWORD *)(a1 + 80);
        v28 = v26 - 1;
        v27 = (v26 - 1) >> 5;
      }
      else
      {
        v28 = v21;
      }
      if (v27 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19824AAF0);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v27) + 12 * (v28 & 0x1F);
      *(_DWORD *)v29 = 0;
      *(_DWORD *)(v29 + 4) = ~(_DWORD)v21;
      *(_BYTE *)(v29 + 8) = 0;
      v30 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
      v31 = *(_QWORD *)(v30 + 20);
      if ((v31 & 0x7FFFFFFF) > v26)
        v26 = v31 & 0x7FFFFFFF;
      v32 = v26 + 1;
      *(_QWORD *)(v30 + 20) = v31 & 0xFFFFFFFF80000000 | v32 & 0x7FFFFFFE;
      if ((v32 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL))
      {
        __break(0xC471u);
        JUMPOUT(0x19824A678);
      }
      v33 = *(_QWORD *)(a1 + 80) - 1;
      if (v33 >> 5 >= *(unsigned int *)(a1 + 100))
      {
        __break(0xC471u);
        JUMPOUT(0x19824AAF8);
      }
      v34 = *(_QWORD *)(*v20 + 8 * (v33 >> 5)) + 12 * (v33 & 0x1F);
      *(_BYTE *)(v34 + 8) = 1;
      v175 = (_DWORD *)v34;
      v35 = HIDWORD(v173);
      if (HIDWORD(v173) == (_DWORD)v173)
      {
        WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v172, &v175);
      }
      else
      {
        v36 = v172;
        ++*(_DWORD *)v34;
        *((_QWORD *)v36 + v35) = v34;
        HIDWORD(v173) = v35 + 1;
      }
      ++v19;
    }
    while (v19 != 5);
    if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707) && (v167 & 1) != 0)
      JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)a7, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
    v167 = (WTF *)v174;
    v37 = a6[1];
    v38 = a6[2];
    if (*a6 != -1 || v37 != -1 || v38 != -1)
    {
      v39 = a7[1];
      if (*a7 != -1 || v39 != -1 || a7[2] != -1)
      {
        v40 = v169[1];
        if ((*v169 != -1 || v40 != -1 || v169[2] != -1) && !*(_BYTE *)(a1 + 707))
        {
          v41 = *(_QWORD *)(a1 + 192);
          v42 = *(_DWORD *)(v41 + 176);
          a3 = v37 - v42;
          v43 = v38 >= v42;
          v44 = v38 - v42;
          if (!v43)
            v44 = 0;
          v43 = a3 >= v44;
          v45 = a3 - v44;
          if (v43)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, v37 - v39, v40 - v37, (*a6 + ~*(_DWORD *)(v41 + 184)) | (unint64_t)(v45 << 32));
        }
      }
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v175, a1, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
    v46 = v175;
    v48 = v170;
    v47 = v171;
    v57 = JSC::BytecodeGenerator::emitExpectedFunctionSnippet(a1, v171, v170, v168, a5, (uint64_t)v175, v49, v50);
    v58 = *(_DWORD *)(v47 + 4);
    v59 = *(unsigned int *)(v48 + 4);
    v60 = (*(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 88));
    v61 = (5 - *(_DWORD *)(**(_QWORD **)(a5 + 8) + 4));
    v62 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v62 + 4) |= 1u;
    v63 = (*(_DWORD *)(v62 + 8) + 1);
    *(_DWORD *)(v62 + 8) = v63;
    v64 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v64 + 4) |= 1u;
    v65 = *(_QWORD *)(v64 + 16);
    v66 = *(unsigned int *)(v65 + 92);
    *(_DWORD *)(v65 + 92) = v66 + 1;
    v67 = (v58 - 1073741808) < 0x80;
    if (v58 <= 0x3FFFFFFF)
      v67 = (v58 + 128) < 0x90;
    if (!v67)
      goto LABEL_92;
    v68 = (v59 - 1073741808) < 0x80;
    if ((int)v59 <= 0x3FFFFFFF)
      v68 = (v59 + 128) < 0x90;
    if (v68 && (v61 | v60 | v63 | v66) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x17, v51, v52, v53, v54, v55, v56);
      LOBYTE(v176) = 23;
      v76 = *(unsigned int *)(a1 + 12);
      v77 = *(unsigned int *)(a1 + 16);
      if (v76 > v77)
      {
        *(_DWORD *)(a1 + 16) = v77 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v77) = 23;
        v80 = *(_DWORD *)(a1 + 12);
        v81 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v76 == *(_DWORD *)(a1 + 8))
        {
          v121 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v76 + 1), (unint64_t)&v176);
          v76 = *(unsigned int *)(a1 + 12);
          v78 = *(_QWORD *)a1;
          v79 = *v121;
        }
        else
        {
          v78 = *(_QWORD *)a1;
          v79 = 23;
        }
        *(_BYTE *)(v78 + v76) = v79;
        v80 = *(_DWORD *)(a1 + 12) + 1;
        v81 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v80;
        *(_DWORD *)(a1 + 16) = v81;
      }
      v82 = v58 + 16;
      if (v58 <= 0x3FFFFFFF)
        v82 = v58;
      LOBYTE(v176) = v82;
      if (v80 > v81)
      {
        *(_DWORD *)(a1 + 16) = v81 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v81) = v82;
        v85 = *(_DWORD *)(a1 + 12);
        v86 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v83 = v80;
        if (v80 == *(_DWORD *)(a1 + 8))
        {
          v122 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v80 + 1), (unint64_t)&v176);
          v83 = *(unsigned int *)(a1 + 12);
          v84 = *(_QWORD *)a1;
          v82 = *v122;
        }
        else
        {
          v84 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v84 + v83) = v82;
        v85 = *(_DWORD *)(a1 + 12) + 1;
        v86 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v85;
        *(_DWORD *)(a1 + 16) = v86;
      }
      v87 = v59 + 16;
      if ((int)v59 <= 0x3FFFFFFF)
        v87 = v59;
      LOBYTE(v176) = v87;
      if (v85 > v86)
      {
        *(_DWORD *)(a1 + 16) = v86 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v86) = v87;
        v90 = *(_DWORD *)(a1 + 12);
        v91 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v88 = v85;
        if (v85 == *(_DWORD *)(a1 + 8))
        {
          v123 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v85 + 1), (unint64_t)&v176);
          v88 = *(unsigned int *)(a1 + 12);
          v89 = *(_QWORD *)a1;
          v87 = *v123;
        }
        else
        {
          v89 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v89 + v88) = v87;
        v90 = *(_DWORD *)(a1 + 12) + 1;
        v91 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v90;
        *(_DWORD *)(a1 + 16) = v91;
      }
      LOBYTE(v176) = v60;
      if (v90 > v91)
      {
        *(_DWORD *)(a1 + 16) = v91 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v91) = v60;
        v92 = *(_DWORD *)(a1 + 12);
        v93 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v90 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v90 + 1), (unint64_t)&v176);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v90) = v60;
        v92 = *(_DWORD *)(a1 + 12) + 1;
        v93 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v92;
        *(_DWORD *)(a1 + 16) = v93;
      }
      LOBYTE(v176) = v61;
      if (v92 > v93)
      {
        *(_DWORD *)(a1 + 16) = v93 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v93) = v61;
        v94 = *(_DWORD *)(a1 + 12);
        v95 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v92 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v92 + 1), (unint64_t)&v176);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v92) = v61;
        v94 = *(_DWORD *)(a1 + 12) + 1;
        v95 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v94;
        *(_DWORD *)(a1 + 16) = v95;
      }
      LOBYTE(v176) = v63;
      if (v94 > v95)
      {
        *(_DWORD *)(a1 + 16) = v95 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v95) = v63;
        v96 = *(_DWORD *)(a1 + 12);
        v97 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v94 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v94 + 1), (unint64_t)&v176);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v94) = v63;
        v96 = *(_DWORD *)(a1 + 12) + 1;
        v97 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v96;
        *(_DWORD *)(a1 + 16) = v97;
      }
      LOBYTE(v176) = v66;
      if (v96 > v97)
      {
        *(_DWORD *)(a1 + 16) = v97 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v97) = v66;
      }
      else
      {
        if (v96 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v96 + 1), (unint64_t)&v176);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v96) = v66;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_92:
      if (v58 <= 0x3FFFFFFF)
        v105 = (v58 + 0x8000) >> 6 < 0x201;
      else
        v105 = (v58 - 1073741760) < 0x8000;
      if (!v105)
        goto LABEL_177;
      v106 = (v59 - 1073741760) < 0x8000;
      if ((int)v59 <= 0x3FFFFFFF)
        v106 = (v59 + 0x8000) >> 6 < 0x201;
      if (v106 && !((v61 | v60 | v63 | v66) >> 16))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x17, v51, v52, v53, v54, v55, v56);
        LOBYTE(v176) = 0x80;
        v107 = *(unsigned int *)(a1 + 12);
        v108 = *(unsigned int *)(a1 + 16);
        if (v107 > v108)
        {
          *(_DWORD *)(a1 + 16) = v108 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v108) = 0x80;
          v111 = *(_DWORD *)(a1 + 12);
          v112 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v107 == *(_DWORD *)(a1 + 8))
          {
            v128 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v107 + 1), (unint64_t)&v176);
            v107 = *(unsigned int *)(a1 + 12);
            v109 = *(_QWORD *)a1;
            v110 = *v128;
          }
          else
          {
            v109 = *(_QWORD *)a1;
            v110 = 0x80;
          }
          *(_BYTE *)(v109 + v107) = v110;
          v111 = *(_DWORD *)(a1 + 12) + 1;
          v112 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v111;
          *(_DWORD *)(a1 + 16) = v112;
        }
        v113 = 23;
        LOBYTE(v176) = 23;
        if (v111 > v112)
        {
          *(_DWORD *)(a1 + 16) = v112 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v112) = 23;
        }
        else
        {
          v114 = v111;
          if (v111 == *(_DWORD *)(a1 + 8))
          {
            v129 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v111 + 1), (unint64_t)&v176);
            v114 = *(unsigned int *)(a1 + 12);
            v115 = *(_QWORD *)a1;
            v113 = *v129;
          }
          else
          {
            v115 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v115 + v114) = v113;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        v116 = v58 + 64;
        if (v58 <= 0x3FFFFFFF)
          v116 = v58;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v116);
        v117 = v59 + 64;
        if ((int)v59 <= 0x3FFFFFFF)
          v117 = v59;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v117);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v60);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v61);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v63);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v66);
      }
      else
      {
LABEL_177:
        JSC::OpCall::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v58, v59, v60, v61, v63, v66, v56);
      }
    }
    if (v57)
    {
      v124 = *(_DWORD *)(a1 + 16);
      JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v46, a1, v124, v71, v72, v73, v74, v75);
      v125 = *(_QWORD *)(a1 + 24);
      v126 = *(unsigned int *)(v125 + 28);
      if (!(_DWORD)v126 || v124 != *(_DWORD *)(*(_QWORD *)(v125 + 16) + 4 * v126 - 4))
      {
        v176 = v124;
        v127 = (_QWORD *)(v125 + 16);
        if ((_DWORD)v126 == *(_DWORD *)(v125 + 24))
          *(_DWORD *)(*(_QWORD *)(v125 + 16) + 4 * *(unsigned int *)(v125 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v127, v126 + 1, (unint64_t)&v176);
        else
          *(_DWORD *)(*v127 + 4 * v126) = v124;
        ++*(_DWORD *)(v125 + 28);
        *(_DWORD *)(a1 + 36) = 115;
      }
    }
    --*v46;
    v98 = v167;
    if (HIDWORD(v173))
    {
      v99 = v172;
      v100 = 8 * HIDWORD(v173);
      do
      {
        v101 = *(_DWORD **)v99;
        *(_QWORD *)v99 = 0;
        if (v101)
          --*v101;
        v99 = (WTF *)((char *)v99 + 8);
        v100 -= 8;
      }
      while (v100);
    }
    v102 = v172;
    if (v98 != v172 && v172 != 0)
    {
      v172 = 0;
      LODWORD(v173) = 0;
      WTF::fastFree((unint64_t)v102, v69, v70, v71, v72, v73, v74, v75);
    }
    return v171;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 232))(*(_QWORD *)(v14 + 40)))
  {
    v15 = *(_BYTE *)(a1 + 709);
    v16 = *(_BYTE *)(a1 + 710);
    v17 = 1;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8 * v17);
      *(_WORD *)(a1 + 709) = 0;
      if ((unint64_t)&v166 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
      {
        *(_BYTE *)(a1 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      }
      else
      {
        if (*(_BYTE *)(v14 + 24)
          && (*(_BYTE *)(a1 + 104) & 1) != 0
          && !*(_BYTE *)(a1 + 707)
          && (*(_DWORD *)(a1 + 736) != *(_DWORD *)(v14 + 8)
           || *(_DWORD *)(a1 + 740) != *(_DWORD *)(v14 + 12)
           || *(_DWORD *)(a1 + 744) != *(_DWORD *)(v14 + 16)
           || *(_DWORD *)(a1 + 748) != 5))
        {
          v130 = *(_QWORD *)(v14 + 8);
          *(_DWORD *)(a1 + 744) = *(_DWORD *)(v14 + 16);
          *(_QWORD *)(a1 + 736) = v130;
          *(_DWORD *)(a1 + 748) = 5;
          v131 = *(_DWORD *)(v14 + 8);
          v132 = *(_DWORD *)(v14 + 12);
          v133 = *(_DWORD *)(v14 + 16);
          if (v131 != -1 || v132 != -1 || v133 != -1)
          {
            v134 = *(_QWORD *)(a1 + 192);
            v135 = *(_DWORD *)(v134 + 176);
            a3 = v132 - v135;
            v136 = v133 - v135;
            if (v133 < v135)
              v136 = 0;
            v43 = a3 >= v136;
            v137 = a3 - v136;
            if (v43)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, 0, 0, (v131 + ~*(_DWORD *)(v134 + 184)) | (unint64_t)(v137 << 32));
          }
          JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, 5, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a1, v18);
      }
      *(_BYTE *)(a1 + 710) = v16;
      *(_BYTE *)(a1 + 709) = v15;
      v14 = *(_QWORD *)(v14 + 32);
      ++v17;
    }
    while (v14);
    goto LABEL_9;
  }
  if (*(_QWORD *)(v14 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x19824AAE0);
  }
  v138 = *(_QWORD **)(*(_QWORD *)(v14 + 40) + 64);
  if ((*(unsigned int (**)(_QWORD *))(*v138 + 56))(v138))
  {
    v139 = (_QWORD *)v138[4];
    if (v139)
    {
      if (!*v139 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v139[1] + 232))(v139[1]))
      {
        v145 = JSC::BytecodeGenerator::emitNode(a1, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), *(_QWORD *)(v139[1] + 64), v140, v141, v142, v143, v144);
        v146 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a1, v145);
        v152 = v146;
        if (v146)
          ++*v146;
        JSC::OpSpread::emit<JSC::BytecodeGenerator>(a1, v146[1], v146[1], v147, v148, v149, v150, v151);
        v153 = **(_QWORD **)(a5 + 8);
        v154 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(a1, v171, v170, v153, (uint64_t)v152, v154, 0, a6, a7, v169, (char)v167);
LABEL_155:
        --*v152;
        return v171;
      }
    }
  }
  v155 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v138 + 16))(v138, a1, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8));
  v152 = v155;
  if (v155)
    ++*v155;
  v156 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v162 = **(_QWORD **)(a5 + 8);
  if ((int *)(a1 + 208) == v156)
  {
    v163 = 0;
  }
  else
  {
    v163 = v156;
    if (v156 && v156 != (int *)v162)
    {
      JSC::BytecodeGenerator::emitMove(a1, v156, **(_QWORD **)(a5 + 8), v157, v158, v159, v160, v161);
      v162 = **(_QWORD **)(a5 + 8);
LABEL_164:
      v164 = 0;
      ++*v163;
      goto LABEL_165;
    }
    v163 = **(int ***)(a5 + 8);
    if (v162)
      goto LABEL_164;
  }
  v164 = 1;
LABEL_165:
  v165 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(a1, v171, v170, v162, (uint64_t)v152, v165, 0, a6, a7, v169, (char)v167);
  if ((v164 & 1) == 0)
    --*v163;
  if (v152)
    goto LABEL_155;
  return v171;
}

int *JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, unsigned __int8 a9)
{
  uint64_t *v14;
  uint64_t v15;
  char v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  int *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  signed int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  WTF *v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;
  _DWORD *v93;
  WTF *v94;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  unsigned int v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  unsigned int v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  _BYTE *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  int v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  WTF *v196;
  unsigned int v197;
  uint64_t v198;
  int *v199;
  WTF *v200;
  uint64_t v201;
  _BYTE v202[40];
  _DWORD *v203;
  char v204;

  v197 = a4;
  v198 = a3;
  v199 = (int *)a2;
  v195 = a9;
  v14 = *(uint64_t **)a5;
  if (!*(_QWORD *)a5)
    goto LABEL_9;
  v15 = *v14;
  if (!*v14)
    goto LABEL_9;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 232))(*(_QWORD *)(v15 + 40)))
  {
    v16 = *(_BYTE *)(a1 + 709);
    v17 = *(_BYTE *)(a1 + 710);
    v18 = 1;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8 * v18);
      *(_WORD *)(a1 + 709) = 0;
      if ((unint64_t)&v194 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
      {
        *(_BYTE *)(a1 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      }
      else
      {
        if (*(_BYTE *)(v15 + 24)
          && (*(_BYTE *)(a1 + 104) & 1) != 0
          && !*(_BYTE *)(a1 + 707)
          && (*(_DWORD *)(a1 + 736) != *(_DWORD *)(v15 + 8)
           || *(_DWORD *)(a1 + 740) != *(_DWORD *)(v15 + 12)
           || *(_DWORD *)(a1 + 744) != *(_DWORD *)(v15 + 16)
           || *(_DWORD *)(a1 + 748) != 5))
        {
          v196 = (WTF *)v19;
          v157 = *(_QWORD *)(v15 + 8);
          *(_DWORD *)(a1 + 744) = *(_DWORD *)(v15 + 16);
          *(_QWORD *)(a1 + 736) = v157;
          *(_DWORD *)(a1 + 748) = 5;
          v158 = *(_DWORD *)(v15 + 8);
          v159 = *(_DWORD *)(v15 + 12);
          v160 = *(_DWORD *)(v15 + 16);
          if (v158 != -1 || v159 != -1 || v160 != -1)
          {
            v161 = *(_QWORD *)(a1 + 192);
            v162 = *(_DWORD *)(v161 + 176);
            v19 = v159 - v162;
            v163 = v160 - v162;
            if (v160 < v162)
              v163 = 0;
            v45 = v19 >= v163;
            v164 = v19 - v163;
            if (v45)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v19, 0, 0, (v158 + ~*(_DWORD *)(v161 + 184)) | (unint64_t)(v164 << 32));
          }
          JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, 5, v19, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
          v19 = (uint64_t)v196;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a1, v19);
      }
      *(_BYTE *)(a1 + 710) = v17;
      *(_BYTE *)(a1 + 709) = v16;
      v15 = *(_QWORD *)(v15 + 32);
      ++v18;
    }
    while (v15);
LABEL_9:
    v20 = 0;
    v196 = (WTF *)v202;
    v200 = (WTF *)v202;
    v201 = 5;
    v21 = (uint64_t *)(a1 + 88);
    do
    {
      v22 = *(_QWORD *)(a1 + 80);
      v23 = *(unsigned int *)(a1 + 100);
      if (v22)
      {
        v24 = *v21;
        do
        {
          v25 = v22 - 1;
          v26 = (v22 - 1) >> 5;
          if (v26 >= v23)
          {
            __break(0xC471u);
            JUMPOUT(0x19824BAF0);
          }
          if (*(_DWORD *)(*(_QWORD *)(v24 + 8 * v26) + 12 * (v25 & 0x1F)))
            break;
          *(_QWORD *)(a1 + 80) = v25;
          --v22;
        }
        while (v25);
      }
      v27 = v22 + 1;
      *(_QWORD *)(a1 + 80) = v22 + 1;
      v28 = v22 >> 5;
      if (v22 >> 5 >= v23)
      {
        v144 = (_DWORD *)WTF::fastMalloc((WTF *)0x180);
        v203 = v144;
        v145 = *(unsigned int *)(a1 + 100);
        if ((_DWORD)v145 == *(_DWORD *)(a1 + 96))
        {
          v146 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v145 + 1, (unint64_t)&v203);
          v145 = *(unsigned int *)(a1 + 100);
          *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v145) = *v146;
        }
        else
        {
          *(_QWORD *)(*v21 + 8 * v145) = v144;
        }
        v23 = (v145 + 1);
        *(_DWORD *)(a1 + 100) = v23;
        v27 = *(_QWORD *)(a1 + 80);
        v29 = v27 - 1;
        v28 = (v27 - 1) >> 5;
      }
      else
      {
        v29 = v22;
      }
      if (v28 >= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x19824BAF8);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v28) + 12 * (v29 & 0x1F);
      *(_DWORD *)v30 = 0;
      *(_DWORD *)(v30 + 4) = ~(_DWORD)v22;
      *(_BYTE *)(v30 + 8) = 0;
      v31 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
      v32 = *(_QWORD *)(v31 + 20);
      if ((v32 & 0x7FFFFFFF) > v27)
        v27 = v32 & 0x7FFFFFFF;
      v33 = v27 + 1;
      *(_QWORD *)(v31 + 20) = v32 & 0xFFFFFFFF80000000 | v33 & 0x7FFFFFFE;
      if ((v33 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL))
      {
        __break(0xC471u);
        JUMPOUT(0x19824B60CLL);
      }
      v34 = *(_QWORD *)(a1 + 80) - 1;
      if (v34 >> 5 >= *(unsigned int *)(a1 + 100))
      {
        __break(0xC471u);
        JUMPOUT(0x19824BB00);
      }
      v35 = *(_QWORD *)(*v21 + 8 * (v34 >> 5)) + 12 * (v34 & 0x1F);
      *(_BYTE *)(v35 + 8) = 1;
      v203 = (_DWORD *)v35;
      v36 = HIDWORD(v201);
      if (HIDWORD(v201) == (_DWORD)v201)
      {
        WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v200, &v203);
      }
      else
      {
        v37 = v200;
        ++*(_DWORD *)v35;
        *((_QWORD *)v37 + v36) = v35;
        HIDWORD(v201) = v36 + 1;
      }
      ++v20;
    }
    while (v20 != 5);
    if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707) && (v195 & 1) != 0)
      JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)a7, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
    v38 = a6[1];
    v39 = a6[2];
    v40 = v199;
    if (*a6 != -1 || v38 != -1 || v39 != -1)
    {
      v41 = a7[1];
      if (*a7 != -1 || v41 != -1 || a7[2] != -1)
      {
        v42 = a8[1];
        if ((*a8 != -1 || v42 != -1 || a8[2] != -1) && !*(_BYTE *)(a1 + 707))
        {
          v43 = *(_QWORD *)(a1 + 192);
          v44 = *(_DWORD *)(v43 + 176);
          a3 = v38 - v44;
          v45 = v39 >= v44;
          v46 = v39 - v44;
          if (!v45)
            v46 = 0;
          v45 = a3 >= v46;
          v47 = a3 - v46;
          if (v45)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, v38 - v41, v42 - v38, (*a6 + ~*(_DWORD *)(v43 + 184)) | (unint64_t)(v47 << 32));
        }
      }
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v203, a1, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
    v48 = v203;
    v49 = v198;
    v58 = JSC::BytecodeGenerator::emitExpectedFunctionSnippet(a1, (uint64_t)v40, v198, v197, a5, (uint64_t)v203, v50, v51);
    v59 = *(_DWORD *)(v49 + 4);
    v60 = *(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 88);
    v61 = 5 - *(_DWORD *)(**(_QWORD **)(a5 + 8) + 4);
    v62 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v62 + 4) |= 1u;
    v63 = *(_QWORD *)(v62 + 16);
    v64 = *(_DWORD *)(v63 + 96);
    *(_DWORD *)(v63 + 96) = v64 + 1;
    v65 = (v59 - 1073741808) < 0x80;
    if (v59 <= 0x3FFFFFFF)
      v65 = (v59 + 128) < 0x90;
    v66 = v61 | v60 | v64;
    if (v65 && v66 <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x18, v52, v53, v54, v55, v56, v57);
      v204 = 24;
      v74 = *(unsigned int *)(a1 + 12);
      v75 = *(unsigned int *)(a1 + 16);
      if (v74 > v75)
      {
        *(_DWORD *)(a1 + 16) = v75 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v75) = 24;
        v79 = *(_DWORD *)(a1 + 12);
        v80 = *(_DWORD *)(a1 + 16);
        v78 = v196;
      }
      else
      {
        if ((_DWORD)v74 == *(_DWORD *)(a1 + 8))
        {
          v148 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v74 + 1), (unint64_t)&v204);
          v74 = *(unsigned int *)(a1 + 12);
          v76 = *(_QWORD *)a1;
          v77 = *v148;
        }
        else
        {
          v76 = *(_QWORD *)a1;
          v77 = 24;
        }
        *(_BYTE *)(v76 + v74) = v77;
        v78 = v196;
        v79 = *(_DWORD *)(a1 + 12) + 1;
        v80 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v79;
        *(_DWORD *)(a1 + 16) = v80;
      }
      v81 = v59 + 16;
      if (v59 <= 0x3FFFFFFF)
        v81 = v59;
      v204 = v81;
      if (v79 > v80)
      {
        *(_DWORD *)(a1 + 16) = v80 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v80) = v81;
        v84 = *(_DWORD *)(a1 + 12);
        v85 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v82 = v79;
        if (v79 == *(_DWORD *)(a1 + 8))
        {
          v149 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v204);
          v82 = *(unsigned int *)(a1 + 12);
          v83 = *(_QWORD *)a1;
          v81 = *v149;
        }
        else
        {
          v83 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v83 + v82) = v81;
        v84 = *(_DWORD *)(a1 + 12) + 1;
        v85 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v84;
        *(_DWORD *)(a1 + 16) = v85;
      }
      v204 = v60;
      if (v84 > v85)
      {
        *(_DWORD *)(a1 + 16) = v85 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v85) = v60;
        v86 = *(_DWORD *)(a1 + 12);
        v87 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v84 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v204);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v84) = v60;
        v86 = *(_DWORD *)(a1 + 12) + 1;
        v87 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v86;
        *(_DWORD *)(a1 + 16) = v87;
      }
      v204 = v61;
      if (v86 > v87)
      {
        *(_DWORD *)(a1 + 16) = v87 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v87) = v61;
        v88 = *(_DWORD *)(a1 + 12);
        v89 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v86 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v86 + 1), (unint64_t)&v204);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v86) = v61;
        v88 = *(_DWORD *)(a1 + 12) + 1;
        v89 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v88;
        *(_DWORD *)(a1 + 16) = v89;
      }
      v204 = v64;
      if (v88 > v89)
      {
        *(_DWORD *)(a1 + 16) = v89 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v89) = v64;
        goto LABEL_67;
      }
      v90 = v88;
      if (v88 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v88) = v64;
LABEL_66:
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
LABEL_67:
        if ((*(_BYTE *)(a1 + 104) & 2) != 0)
          JSC::BytecodeGenerator::emitLoad(a1, v40, 10, v69, v70, v71, v72, v73);
        if (v58)
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v48, v68, v69, v70, v71, v72, v73);
        --*v48;
        if (HIDWORD(v201))
        {
          v91 = v200;
          v92 = 8 * HIDWORD(v201);
          do
          {
            v93 = *(_DWORD **)v91;
            *(_QWORD *)v91 = 0;
            if (v93)
              --*v93;
            v91 = (WTF *)((char *)v91 + 8);
            v92 -= 8;
          }
          while (v92);
        }
        v94 = v200;
        if (v78 != v200 && v200 != 0)
        {
          v200 = 0;
          LODWORD(v201) = 0;
          WTF::fastFree((unint64_t)v94, v67, v68, v69, v70, v71, v72, v73);
        }
        return v40;
      }
    }
    else
    {
      if (v59 <= 0x3FFFFFFF)
        v97 = (v59 + 0x8000) >> 6 < 0x201;
      else
        v97 = (v59 - 1073741760) < 0x8000;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x18, v52, v53, v54, v55, v56, v57);
      if (!v97 || HIWORD(v66))
      {
        v204 = -126;
        v135 = *(unsigned int *)(a1 + 12);
        v136 = *(unsigned int *)(a1 + 16);
        v78 = v196;
        if (v135 > v136)
        {
          *(_DWORD *)(a1 + 16) = v136 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v136) = -126;
          v139 = *(_DWORD *)(a1 + 12);
          v140 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v135 == *(_DWORD *)(a1 + 8))
          {
            v150 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v135 + 1), (unint64_t)&v204);
            v135 = *(unsigned int *)(a1 + 12);
            v137 = *(_QWORD *)a1;
            v138 = *v150;
          }
          else
          {
            v137 = *(_QWORD *)a1;
            v138 = -126;
          }
          *(_BYTE *)(v137 + v135) = v138;
          v139 = *(_DWORD *)(a1 + 12) + 1;
          v140 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v139;
          *(_DWORD *)(a1 + 16) = v140;
        }
        v141 = 24;
        v204 = 24;
        if (v139 > v140)
        {
          *(_DWORD *)(a1 + 16) = v140 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v140) = 24;
        }
        else
        {
          v142 = v139;
          if (v139 == *(_DWORD *)(a1 + 8))
          {
            v151 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v139 + 1), (unint64_t)&v204);
            v142 = *(unsigned int *)(a1 + 12);
            v143 = *(_QWORD *)a1;
            v141 = *v151;
          }
          else
          {
            v143 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v143 + v142) = v141;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v59);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v60);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v61);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v64);
        goto LABEL_67;
      }
      v204 = 0x80;
      v98 = *(unsigned int *)(a1 + 12);
      v99 = *(unsigned int *)(a1 + 16);
      if (v98 > v99)
      {
        *(_DWORD *)(a1 + 16) = v99 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v99) = 0x80;
        v102 = *(_DWORD *)(a1 + 12);
        v103 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v98 == *(_DWORD *)(a1 + 8))
        {
          v152 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v98 + 1), (unint64_t)&v204);
          v98 = *(unsigned int *)(a1 + 12);
          v100 = *(_QWORD *)a1;
          v101 = *v152;
        }
        else
        {
          v100 = *(_QWORD *)a1;
          v101 = 0x80;
        }
        *(_BYTE *)(v100 + v98) = v101;
        v102 = *(_DWORD *)(a1 + 12) + 1;
        v103 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v102;
        *(_DWORD *)(a1 + 16) = v103;
      }
      v104 = 24;
      v204 = 24;
      if (v102 > v103)
      {
        *(_DWORD *)(a1 + 16) = v103 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v103) = 24;
        v107 = *(_DWORD *)(a1 + 12);
        v108 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v105 = v102;
        if (v102 == *(_DWORD *)(a1 + 8))
        {
          v153 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v102 + 1), (unint64_t)&v204);
          v105 = *(unsigned int *)(a1 + 12);
          v106 = *(_QWORD *)a1;
          v104 = *v153;
        }
        else
        {
          v106 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v106 + v105) = v104;
        v107 = *(_DWORD *)(a1 + 12) + 1;
        v108 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v107;
        *(_DWORD *)(a1 + 16) = v108;
      }
      if (v59 <= 0x3FFFFFFF)
        v109 = v59;
      else
        v109 = v59 + 64;
      v204 = v109;
      if (v107 > v108)
      {
        *(_DWORD *)(a1 + 16) = v108 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v108) = v109;
        v110 = *(_DWORD *)(a1 + 12);
        v111 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v107 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v107 + 1), (unint64_t)&v204);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v107) = v109;
        v110 = *(_DWORD *)(a1 + 12) + 1;
        v111 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v110;
        *(_DWORD *)(a1 + 16) = v111;
      }
      v112 = v109 >> 8;
      v204 = BYTE1(v109);
      if (v110 > v111)
      {
        *(_DWORD *)(a1 + 16) = v111 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v111) = BYTE1(v109);
        v115 = *(_DWORD *)(a1 + 12);
        v116 = *(_DWORD *)(a1 + 16);
        v78 = v196;
      }
      else
      {
        v113 = v110;
        v78 = v196;
        if (v110 == *(_DWORD *)(a1 + 8))
        {
          v154 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v110 + 1), (unint64_t)&v204);
          v113 = *(unsigned int *)(a1 + 12);
          v114 = *(_QWORD *)a1;
          LOBYTE(v112) = *v154;
        }
        else
        {
          v114 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v114 + v113) = v112;
        v115 = *(_DWORD *)(a1 + 12) + 1;
        v116 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v115;
        *(_DWORD *)(a1 + 16) = v116;
      }
      v204 = v60;
      if (v115 > v116)
      {
        *(_DWORD *)(a1 + 16) = v116 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v116) = v60;
        v117 = *(_DWORD *)(a1 + 12);
        v118 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v115 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v115 + 1), (unint64_t)&v204);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v115) = v60;
        v117 = *(_DWORD *)(a1 + 12) + 1;
        v118 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v117;
        *(_DWORD *)(a1 + 16) = v118;
      }
      v119 = v60 >> 8;
      v204 = BYTE1(v60);
      if (v117 > v118)
      {
        *(_DWORD *)(a1 + 16) = v118 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v118) = BYTE1(v60);
        v122 = *(_DWORD *)(a1 + 12);
        v123 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v120 = v117;
        if (v117 == *(_DWORD *)(a1 + 8))
        {
          v155 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v117 + 1), (unint64_t)&v204);
          v120 = *(unsigned int *)(a1 + 12);
          v121 = *(_QWORD *)a1;
          LOBYTE(v119) = *v155;
        }
        else
        {
          v121 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v121 + v120) = v119;
        v122 = *(_DWORD *)(a1 + 12) + 1;
        v123 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v122;
        *(_DWORD *)(a1 + 16) = v123;
      }
      v204 = v61;
      if (v122 > v123)
      {
        *(_DWORD *)(a1 + 16) = v123 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v123) = v61;
        v124 = *(_DWORD *)(a1 + 12);
        v125 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v122 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v122 + 1), (unint64_t)&v204);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v122) = v61;
        v124 = *(_DWORD *)(a1 + 12) + 1;
        v125 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v124;
        *(_DWORD *)(a1 + 16) = v125;
      }
      v126 = v61 >> 8;
      v204 = BYTE1(v61);
      if (v124 > v125)
      {
        *(_DWORD *)(a1 + 16) = v125 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v125) = BYTE1(v61);
        v129 = *(_DWORD *)(a1 + 12);
        v130 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v127 = v124;
        if (v124 == *(_DWORD *)(a1 + 8))
        {
          v156 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v124 + 1), (unint64_t)&v204);
          v127 = *(unsigned int *)(a1 + 12);
          v128 = *(_QWORD *)a1;
          LOBYTE(v126) = *v156;
        }
        else
        {
          v128 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v128 + v127) = v126;
        v129 = *(_DWORD *)(a1 + 12) + 1;
        v130 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v129;
        *(_DWORD *)(a1 + 16) = v130;
      }
      v204 = v64;
      if (v129 > v130)
      {
        *(_DWORD *)(a1 + 16) = v130 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v130) = v64;
        v131 = *(_DWORD *)(a1 + 12);
        v132 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v129 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v129 + 1), (unint64_t)&v204);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v129) = v64;
        v131 = *(_DWORD *)(a1 + 12) + 1;
        v132 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v131;
        *(_DWORD *)(a1 + 16) = v132;
      }
      v133 = v64 >> 8;
      v204 = BYTE1(v64);
      if (v131 > v132)
      {
        *(_DWORD *)(a1 + 16) = v132 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v132) = BYTE1(v64);
        goto LABEL_67;
      }
      v90 = v131;
      if (v131 != *(_DWORD *)(a1 + 8))
      {
        v134 = *(_QWORD *)a1;
LABEL_129:
        *(_BYTE *)(v134 + v90) = v133;
        goto LABEL_66;
      }
    }
    v147 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v90 + 1), (unint64_t)&v204);
    v90 = *(unsigned int *)(a1 + 12);
    v134 = *(_QWORD *)a1;
    LOBYTE(v133) = *v147;
    goto LABEL_129;
  }
  if (*(_QWORD *)(v15 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x19824BAE8);
  }
  v165 = *(_QWORD **)(*(_QWORD *)(v15 + 40) + 64);
  v40 = v199;
  if ((*(unsigned int (**)(_QWORD *))(*v165 + 56))(v165))
  {
    v166 = (_QWORD *)v165[4];
    if (v166)
    {
      if (!*v166 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v166[1] + 232))(v166[1]))
      {
        v172 = JSC::BytecodeGenerator::emitNode(a1, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), *(_QWORD *)(v166[1] + 64), v167, v168, v169, v170, v171);
        v173 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a1, v172);
        v179 = v173;
        if (v173)
          ++*v173;
        JSC::OpSpread::emit<JSC::BytecodeGenerator>(a1, v173[1], v173[1], v174, v175, v176, v177, v178);
        v180 = **(_QWORD **)(a5 + 8);
        v181 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(a1, (uint64_t)v40, v198, v180, (uint64_t)v179, v181, 0, a6, a7, a8, v195);
LABEL_183:
        --*v179;
        return v40;
      }
    }
  }
  v182 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v165 + 16))(v165, a1, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8));
  v179 = v182;
  if (v182)
    ++*v182;
  v183 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v189 = **(_QWORD **)(a5 + 8);
  if ((int *)(a1 + 208) == v183)
  {
    v191 = **(_QWORD **)(a5 + 8);
    v190 = 0;
  }
  else
  {
    v190 = v183;
    if (v183 && v183 != (int *)v189)
    {
      JSC::BytecodeGenerator::emitMove(a1, v183, v189, v184, v185, v186, v187, v188);
      v191 = **(_QWORD **)(a5 + 8);
LABEL_191:
      v192 = 0;
      ++*v190;
      goto LABEL_192;
    }
    v190 = **(int ***)(a5 + 8);
    v191 = (uint64_t)v190;
    if (v189)
      goto LABEL_191;
  }
  v192 = 1;
LABEL_192:
  v193 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v40 = v199;
  JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(a1, (uint64_t)v199, v198, v191, (uint64_t)v179, v193, 0, a6, a7, a8, v195);
  if ((v192 & 1) == 0)
    --*v190;
  if (v179)
    goto LABEL_183;
  return v40;
}

uint64_t JSC::BytecodeGenerator::emitCallInTailPosition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v10;
  __int16 v11;
  char v12;

  if (*(_BYTE *)(a1 + 709))
  {
    v10 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
    v11 = *(_WORD *)(v10 + 28);
    v10 += 28;
    v12 = *(_BYTE *)(v10 + 2);
    *(_WORD *)v10 = v11 | 0x20;
    *(_BYTE *)(v10 + 2) = v12;
    JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else if (*(_BYTE *)(a1 + 710))
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a1, a2, a3, a4, a5, a6, a7, a8, 1u);
  }
  else
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, a2, a3, a4, a5, a6, a7, a8, 1u);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  uint64_t v32;
  WTF *v33;
  _DWORD *v34;
  uint64_t v35;
  WTF *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  _BOOL4 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  _DWORD *v104;
  WTF *v105;
  char *v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  WTF *v145;
  uint64_t v146;
  _BYTE v147[47];
  char v148;

  v141 = a8;
  v142 = a3;
  v140 = a4;
  v143 = a2;
  v12 = *(uint64_t **)a5;
  if (!*(_QWORD *)a5 || (v13 = *v12) == 0)
  {
LABEL_10:
    v145 = (WTF *)v147;
    v146 = 5;
    v23 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v144 = v23;
    v24 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v145, &v144);
    }
    else
    {
      v25 = v145;
      if (v23)
        ++*v23;
      *((_QWORD *)v25 + v24) = v23;
      HIDWORD(v146) = v24 + 1;
    }
    v26 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v144 = v26;
    v27 = HIDWORD(v146);
    v29 = v142;
    v28 = v143;
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v145, &v144);
    }
    else
    {
      v30 = v145;
      if (v26)
        ++*v26;
      *((_QWORD *)v30 + v27) = v26;
      HIDWORD(v146) = v27 + 1;
    }
    v31 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v144 = v31;
    v32 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v145, &v144);
    }
    else
    {
      v33 = v145;
      if (v31)
        ++*v31;
      *((_QWORD *)v33 + v32) = v31;
      HIDWORD(v146) = v32 + 1;
    }
    v34 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v144 = v34;
    v35 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v145, &v144);
    }
    else
    {
      v36 = v145;
      if (v34)
        ++*v34;
      *((_QWORD *)v36 + v35) = v34;
      HIDWORD(v146) = v35 + 1;
    }
    v37 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v144 = v37;
    v44 = HIDWORD(v146);
    if (HIDWORD(v146) == (_DWORD)v146)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v145, &v144);
    }
    else
    {
      v45 = v145;
      if (v37)
        ++*v37;
      *((_QWORD *)v45 + v44) = v37;
      HIDWORD(v146) = v44 + 1;
    }
    if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
      JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)a7, v39, v40, v41, v42, v43);
    v46 = a6[1];
    v47 = a6[2];
    if (*a6 != -1 || v46 != -1 || v47 != -1)
    {
      v48 = a7[1];
      if (*a7 != -1 || v48 != -1 || a7[2] != -1)
      {
        v49 = v141[1];
        if ((*v141 != -1 || v49 != -1 || v141[2] != -1) && !*(_BYTE *)(a1 + 707))
        {
          v50 = *(_QWORD *)(a1 + 192);
          v51 = *(_DWORD *)(v50 + 176);
          v38 = v46 - v51;
          v52 = v47 >= v51;
          v53 = v47 - v51;
          if (!v52)
            v53 = 0;
          v52 = v38 >= v53;
          v54 = v38 - v53;
          if (v52)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v38, v46 - v48, v49 - v46, (*a6 + ~*(_DWORD *)(v50 + 184)) | (unint64_t)(v54 << 32));
        }
      }
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v144, a1, v38, v39, v40, v41, v42, v43);
    v55 = v144;
    v64 = JSC::BytecodeGenerator::emitExpectedFunctionSnippet(a1, v28, v29, v140, a5, (uint64_t)v144, v56, v57);
    if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707) || byte_1ECF4C27A)
      JSC::OpLogShadowChickenTail::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(a1 + 224), *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4), v59, v60, v61, v62, v63);
    v65 = *(_DWORD *)(v28 + 4);
    v66 = *(unsigned int *)(v29 + 4);
    v67 = (*(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 88));
    v68 = (5 - *(_DWORD *)(**(_QWORD **)(a5 + 8) + 4));
    v69 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v69 + 4) |= 1u;
    v70 = *(_QWORD *)(v69 + 16);
    v71 = *(unsigned int *)(v70 + 36);
    *(_DWORD *)(v70 + 36) = v71 + 1;
    v72 = (v65 - 1073741808) < 0x80;
    if (v65 <= 0x3FFFFFFF)
      v72 = (v65 + 128) < 0x90;
    if (!v72)
      goto LABEL_124;
    v73 = (v66 - 1073741808) < 0x80;
    if ((int)v66 <= 0x3FFFFFFF)
      v73 = (v66 + 128) < 0x90;
    if (v73 && (v68 | v67 | v71) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)9, v58, v59, v60, v61, v62, v63);
      v148 = 9;
      v81 = *(unsigned int *)(a1 + 12);
      v82 = *(unsigned int *)(a1 + 16);
      if (v81 > v82)
      {
        *(_DWORD *)(a1 + 16) = v82 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v82) = 9;
        v85 = *(_DWORD *)(a1 + 12);
        v86 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v81 == *(_DWORD *)(a1 + 8))
        {
          v108 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v81 + 1), (unint64_t)&v148);
          v81 = *(unsigned int *)(a1 + 12);
          v83 = *(_QWORD *)a1;
          v84 = *v108;
        }
        else
        {
          v83 = *(_QWORD *)a1;
          v84 = 9;
        }
        *(_BYTE *)(v83 + v81) = v84;
        v85 = *(_DWORD *)(a1 + 12) + 1;
        v86 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v85;
        *(_DWORD *)(a1 + 16) = v86;
      }
      v87 = v65 + 16;
      if (v65 <= 0x3FFFFFFF)
        v87 = v65;
      v148 = v87;
      if (v85 > v86)
      {
        *(_DWORD *)(a1 + 16) = v86 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v86) = v87;
        v90 = *(_DWORD *)(a1 + 12);
        v91 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v88 = v85;
        if (v85 == *(_DWORD *)(a1 + 8))
        {
          v109 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v85 + 1), (unint64_t)&v148);
          v88 = *(unsigned int *)(a1 + 12);
          v89 = *(_QWORD *)a1;
          v87 = *v109;
        }
        else
        {
          v89 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v89 + v88) = v87;
        v90 = *(_DWORD *)(a1 + 12) + 1;
        v91 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v90;
        *(_DWORD *)(a1 + 16) = v91;
      }
      v92 = v66 + 16;
      if ((int)v66 <= 0x3FFFFFFF)
        v92 = v66;
      v148 = v92;
      if (v90 > v91)
      {
        *(_DWORD *)(a1 + 16) = v91 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v91) = v92;
        v95 = *(_DWORD *)(a1 + 12);
        v96 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v93 = v90;
        if (v90 == *(_DWORD *)(a1 + 8))
        {
          v110 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v90 + 1), (unint64_t)&v148);
          v93 = *(unsigned int *)(a1 + 12);
          v94 = *(_QWORD *)a1;
          v92 = *v110;
        }
        else
        {
          v94 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v94 + v93) = v92;
        v95 = *(_DWORD *)(a1 + 12) + 1;
        v96 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v95;
        *(_DWORD *)(a1 + 16) = v96;
      }
      v148 = v67;
      if (v95 > v96)
      {
        *(_DWORD *)(a1 + 16) = v96 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v96) = v67;
        v97 = *(_DWORD *)(a1 + 12);
        v98 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v95 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v95 + 1), (unint64_t)&v148);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v95) = v67;
        v97 = *(_DWORD *)(a1 + 12) + 1;
        v98 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v97;
        *(_DWORD *)(a1 + 16) = v98;
      }
      v148 = v68;
      if (v97 > v98)
      {
        *(_DWORD *)(a1 + 16) = v98 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v98) = v68;
        v99 = *(_DWORD *)(a1 + 12);
        v100 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v97 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v97 + 1), (unint64_t)&v148);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v97) = v68;
        v99 = *(_DWORD *)(a1 + 12) + 1;
        v100 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v99;
        *(_DWORD *)(a1 + 16) = v100;
      }
      v148 = v71;
      if (v99 > v100)
      {
        *(_DWORD *)(a1 + 16) = v100 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v100) = v71;
      }
      else
      {
        if (v99 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v99 + 1), (unint64_t)&v148);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v99) = v71;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_124:
      if ((JSC::OpTailCall::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v65, v66, v67, v68, v71, v62, v63) & 1) == 0)JSC::OpTailCall::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v65, v66, v67, v68, v71, v79, v80);
    }
    if (v64)
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v55, v75, v76, v77, v78, v79, v80);
    --*v55;
    v101 = v143;
    if (HIDWORD(v146))
    {
      v102 = v145;
      v103 = 8 * HIDWORD(v146);
      do
      {
        v104 = *(_DWORD **)v102;
        *(_QWORD *)v102 = 0;
        if (v104)
          --*v104;
        v102 = (WTF *)((char *)v102 + 8);
        v103 -= 8;
      }
      while (v103);
    }
    v105 = v145;
    if (v147 != (_BYTE *)v145 && v145 != 0)
    {
      v145 = 0;
      LODWORD(v146) = 0;
      WTF::fastFree((unint64_t)v105, v74, v75, v76, v77, v78, v79, v80);
    }
    return v101;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 232))(*(_QWORD *)(v13 + 40)))
  {
    v19 = *(_BYTE *)(a1 + 709);
    v20 = *(_BYTE *)(a1 + 710);
    v21 = 1;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8 * v21);
      *(_WORD *)(a1 + 709) = 0;
      if ((unint64_t)&v139 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
      {
        *(_BYTE *)(a1 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      }
      else
      {
        if (*(_BYTE *)(v13 + 24))
          JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, v13 + 8, v14, v15, v16, v17, v18);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a1, v22);
      }
      *(_BYTE *)(a1 + 710) = v20;
      *(_BYTE *)(a1 + 709) = v19;
      v13 = *(_QWORD *)(v13 + 32);
      ++v21;
    }
    while (v13);
    goto LABEL_10;
  }
  if (*(_QWORD *)(v13 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x19824C54CLL);
  }
  v111 = *(_QWORD **)(*(_QWORD *)(v13 + 40) + 64);
  v101 = v143;
  if ((*(unsigned int (**)(_QWORD *))(*v111 + 56))(v111))
  {
    v112 = (_QWORD *)v111[4];
    if (v112)
    {
      if (!*v112 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v112[1] + 232))(v112[1]))
      {
        v118 = JSC::BytecodeGenerator::emitNode(a1, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), *(_QWORD *)(v112[1] + 64), v113, v114, v115, v116, v117);
        v119 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a1, v118);
        v125 = v119;
        if (v119)
          ++*v119;
        JSC::OpSpread::emit<JSC::BytecodeGenerator>(a1, v119[1], v119[1], v120, v121, v122, v123, v124);
        v126 = **(_QWORD **)(a5 + 8);
        v127 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::BytecodeGenerator::emitCallVarargs<JSC::OpTailCallVarargs>(a1, v101, v142, v126, (uint64_t)v125, v127, 0, a6, a7, v141);
LABEL_110:
        --*v125;
        return v101;
      }
    }
  }
  v128 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v111 + 16))(v111, a1, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8));
  v125 = v128;
  if (v128)
    ++*v128;
  v129 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v135 = **(_QWORD **)(a5 + 8);
  if ((int *)(a1 + 208) == v129)
  {
    v136 = 0;
  }
  else
  {
    v136 = v129;
    if (v129 && v129 != (int *)v135)
    {
      JSC::BytecodeGenerator::emitMove(a1, v129, **(_QWORD **)(a5 + 8), v130, v131, v132, v133, v134);
      v135 = **(_QWORD **)(a5 + 8);
LABEL_119:
      v137 = 0;
      ++*v136;
      goto LABEL_120;
    }
    v136 = **(int ***)(a5 + 8);
    if (v135)
      goto LABEL_119;
  }
  v137 = 1;
LABEL_120:
  v138 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitCallVarargs<JSC::OpTailCallVarargs>(a1, v101, v142, v135, (uint64_t)v125, v138, 0, a6, a7, v141);
  if ((v137 & 1) == 0)
    --*v136;
  if (v125)
    goto LABEL_110;
  return v101;
}

uint64_t JSC::BytecodeGenerator::emitCall<JSC::OpCallDirectEval>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  _DWORD *v25;
  uint64_t v26;
  WTF *v27;
  _DWORD *v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  uint64_t v32;
  WTF *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  WTF *v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  WTF *v123;
  uint64_t v124;
  _DWORD *v125;
  WTF *v126;
  char v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  int v135;
  WTF *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  WTF *v141;
  uint64_t v142;
  _BYTE v143[40];
  _DWORD *v144;

  v137 = a3;
  v138 = a7;
  v139 = a2;
  v11 = *(uint64_t **)a4;
  if (*(_QWORD *)a4)
  {
    v12 = *v11;
    if (*v11)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 232))(*(_QWORD *)(v12 + 40)))
      {
        if (!*(_QWORD *)(v12 + 32))
        {
          __break(0xC471u);
          JUMPOUT(0x19824CE74);
        }
        __break(0xC471u);
        JUMPOUT(0x19824CFB0);
      }
      v18 = *(_BYTE *)(a1 + 709);
      v19 = *(_BYTE *)(a1 + 710);
      v20 = 1;
      do
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v20);
        *(_WORD *)(a1 + 709) = 0;
        if ((unint64_t)&v135 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
        {
          *(_BYTE *)(a1 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        }
        else
        {
          if (*(_BYTE *)(v12 + 24))
            JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, v12 + 8, v13, v14, v15, v16, v17);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a1, v21);
        }
        *(_BYTE *)(a1 + 710) = v19;
        *(_BYTE *)(a1 + 709) = v18;
        v12 = *(_QWORD *)(v12 + 32);
        ++v20;
      }
      while (v12);
    }
  }
  v136 = (WTF *)v143;
  v141 = (WTF *)v143;
  v142 = 5;
  v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v144 = v22;
  v23 = HIDWORD(v142);
  if (HIDWORD(v142) == (_DWORD)v142)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v141, &v144);
  }
  else
  {
    v24 = v141;
    if (v22)
      ++*v22;
    *((_QWORD *)v24 + v23) = v22;
    HIDWORD(v142) = v23 + 1;
  }
  v25 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v144 = v25;
  v26 = HIDWORD(v142);
  if (HIDWORD(v142) == (_DWORD)v142)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v141, &v144);
  }
  else
  {
    v27 = v141;
    if (v25)
      ++*v25;
    *((_QWORD *)v27 + v26) = v25;
    HIDWORD(v142) = v26 + 1;
  }
  v28 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v144 = v28;
  v29 = HIDWORD(v142);
  if (HIDWORD(v142) == (_DWORD)v142)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v141, &v144);
  }
  else
  {
    v30 = v141;
    if (v28)
      ++*v28;
    *((_QWORD *)v30 + v29) = v28;
    HIDWORD(v142) = v29 + 1;
  }
  v31 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v144 = v31;
  v32 = HIDWORD(v142);
  if (HIDWORD(v142) == (_DWORD)v142)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v141, &v144);
  }
  else
  {
    v33 = v141;
    if (v31)
      ++*v31;
    *((_QWORD *)v33 + v32) = v31;
    HIDWORD(v142) = v32 + 1;
  }
  v34 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v144 = v34;
  v41 = HIDWORD(v142);
  if (HIDWORD(v142) == (_DWORD)v142)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v141, &v144);
    v43 = (_DWORD *)v138;
  }
  else
  {
    v42 = v141;
    v43 = (_DWORD *)v138;
    if (v34)
      ++*v34;
    *((_QWORD *)v42 + v41) = v34;
    HIDWORD(v142) = v41 + 1;
  }
  v44 = a5[1];
  v45 = a5[2];
  if (*a5 != -1 || v44 != -1 || v45 != -1)
  {
    v46 = a6[1];
    if (*a6 != -1 || v46 != -1 || a6[2] != -1)
    {
      v47 = v43[1];
      if ((*v43 != -1 || v47 != -1 || v43[2] != -1) && !*(_BYTE *)(a1 + 707))
      {
        v48 = *(_QWORD *)(a1 + 192);
        v49 = *(_DWORD *)(v48 + 176);
        v35 = v44 - v49;
        v50 = v45 >= v49;
        v51 = v45 - v49;
        if (!v50)
          v51 = 0;
        v50 = v35 >= v51;
        v52 = v35 - v51;
        if (v50)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v35, v44 - v46, v47 - v44, (*a5 + ~*(_DWORD *)(v48 + 184)) | (unint64_t)(v52 << 32));
      }
    }
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v140, a1, v35, v36, v37, v38, v39, v40);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v144, a1, v53, v54, v55, v56, v57, v58);
  if (v144)
    --*v144;
  v65 = *(_DWORD *)(v139 + 4);
  v66 = *(unsigned int *)(v137 + 4);
  v67 = (*(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 88));
  v68 = (5 - *(_DWORD *)(**(_QWORD **)(a4 + 8) + 4));
  v69 = *(unsigned int *)(a1 + 224);
  v70 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
  v138 = *(unsigned __int8 *)(a1 + 712);
  v71 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v71 + 4) |= 1u;
  v72 = *(_DWORD *)(v71 + 8) + 1;
  *(_DWORD *)(v71 + 8) = v72;
  v73 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v73 + 4) |= 1u;
  v74 = *(_QWORD *)(v73 + 16);
  v75 = *(_DWORD *)(v74 + 40);
  *(_DWORD *)(v74 + 40) = v75 + 1;
  v76 = (v65 - 1073741808) < 0x80;
  if (v65 <= 0x3FFFFFFF)
    v76 = (v65 + 128) < 0x90;
  if (!v76)
    goto LABEL_123;
  v77 = (int)v66 <= 0x3FFFFFFF ? (v66 + 128) < 0x90 : (v66 - 1073741808) < 0x80;
  if (!v77 || (v68 | v67) > 0xFF)
    goto LABEL_123;
  v78 = (v69 - 1073741808) < 0x80;
  if ((int)v69 <= 0x3FFFFFFF)
    v78 = (v69 + 128) < 0x90;
  if (!v78)
    goto LABEL_123;
  v79 = (v70 - 1073741808) < 0x80;
  if ((int)v70 <= 0x3FFFFFFF)
    v79 = (v70 + 128) < 0x90;
  if (v79 && (v75 | v72) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA, v59, v60, v61, v62, v63, v64);
    LOBYTE(v144) = 10;
    v87 = *(unsigned int *)(a1 + 12);
    v88 = *(unsigned int *)(a1 + 16);
    if (v87 > v88)
    {
      *(_DWORD *)(a1 + 16) = v88 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v88) = 10;
      v92 = *(_DWORD *)(a1 + 12);
      v93 = *(_DWORD *)(a1 + 16);
      v91 = v136;
    }
    else
    {
      if ((_DWORD)v87 == *(_DWORD *)(a1 + 8))
      {
        v130 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v87 + 1), (unint64_t)&v144);
        v87 = *(unsigned int *)(a1 + 12);
        v89 = *(_QWORD *)a1;
        v90 = *v130;
      }
      else
      {
        v89 = *(_QWORD *)a1;
        v90 = 10;
      }
      *(_BYTE *)(v89 + v87) = v90;
      v91 = v136;
      v92 = *(_DWORD *)(a1 + 12) + 1;
      v93 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v92;
      *(_DWORD *)(a1 + 16) = v93;
    }
    v94 = v65 + 16;
    if (v65 <= 0x3FFFFFFF)
      v94 = v65;
    LOBYTE(v144) = v94;
    if (v92 > v93)
    {
      *(_DWORD *)(a1 + 16) = v93 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v93) = v94;
      v97 = *(_DWORD *)(a1 + 12);
      v98 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v95 = v92;
      if (v92 == *(_DWORD *)(a1 + 8))
      {
        v131 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v92 + 1), (unint64_t)&v144);
        v95 = *(unsigned int *)(a1 + 12);
        v96 = *(_QWORD *)a1;
        v94 = *v131;
      }
      else
      {
        v96 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v96 + v95) = v94;
      v97 = *(_DWORD *)(a1 + 12) + 1;
      v98 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v97;
      *(_DWORD *)(a1 + 16) = v98;
    }
    v99 = v66 + 16;
    if ((int)v66 <= 0x3FFFFFFF)
      v99 = v66;
    LOBYTE(v144) = v99;
    if (v97 > v98)
    {
      *(_DWORD *)(a1 + 16) = v98 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v98) = v99;
      v102 = *(_DWORD *)(a1 + 12);
      v103 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v100 = v97;
      if (v97 == *(_DWORD *)(a1 + 8))
      {
        v132 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v97 + 1), (unint64_t)&v144);
        v100 = *(unsigned int *)(a1 + 12);
        v101 = *(_QWORD *)a1;
        v99 = *v132;
      }
      else
      {
        v101 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v101 + v100) = v99;
      v102 = *(_DWORD *)(a1 + 12) + 1;
      v103 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v102;
      *(_DWORD *)(a1 + 16) = v103;
    }
    LOBYTE(v144) = v67;
    if (v102 > v103)
    {
      *(_DWORD *)(a1 + 16) = v103 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v103) = v67;
      v104 = *(_DWORD *)(a1 + 12);
      v105 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v102 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v102 + 1), (unint64_t)&v144);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v102) = v67;
      v104 = *(_DWORD *)(a1 + 12) + 1;
      v105 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v104;
      *(_DWORD *)(a1 + 16) = v105;
    }
    LOBYTE(v144) = v68;
    if (v104 > v105)
    {
      *(_DWORD *)(a1 + 16) = v105 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v105) = v68;
      v106 = *(_DWORD *)(a1 + 12);
      v107 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v104 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v104 + 1), (unint64_t)&v144);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v104) = v68;
      v106 = *(_DWORD *)(a1 + 12) + 1;
      v107 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v106;
      *(_DWORD *)(a1 + 16) = v107;
    }
    v108 = v69 + 16;
    if ((int)v69 <= 0x3FFFFFFF)
      v108 = v69;
    LOBYTE(v144) = v108;
    if (v106 > v107)
    {
      *(_DWORD *)(a1 + 16) = v107 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v107) = v108;
      v111 = *(_DWORD *)(a1 + 12);
      v112 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v109 = v106;
      if (v106 == *(_DWORD *)(a1 + 8))
      {
        v133 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v106 + 1), (unint64_t)&v144);
        v109 = *(unsigned int *)(a1 + 12);
        v110 = *(_QWORD *)a1;
        v108 = *v133;
      }
      else
      {
        v110 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v110 + v109) = v108;
      v111 = *(_DWORD *)(a1 + 12) + 1;
      v112 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v111;
      *(_DWORD *)(a1 + 16) = v112;
    }
    v113 = v70 + 16;
    if ((int)v70 <= 0x3FFFFFFF)
      v113 = v70;
    LOBYTE(v144) = v113;
    if (v111 > v112)
    {
      *(_DWORD *)(a1 + 16) = v112 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v112) = v113;
      v117 = *(_DWORD *)(a1 + 12);
      v118 = *(_DWORD *)(a1 + 16);
      v115 = v138;
    }
    else
    {
      v114 = v111;
      v115 = v138;
      if (v111 == *(_DWORD *)(a1 + 8))
      {
        v134 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v111 + 1), (unint64_t)&v144);
        v114 = *(unsigned int *)(a1 + 12);
        v116 = *(_QWORD *)a1;
        v113 = *v134;
      }
      else
      {
        v116 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v116 + v114) = v113;
      v117 = *(_DWORD *)(a1 + 12) + 1;
      v118 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v117;
      *(_DWORD *)(a1 + 16) = v118;
    }
    LOBYTE(v144) = v115;
    if (v117 > v118)
    {
      *(_DWORD *)(a1 + 16) = v118 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v118) = v115;
      v119 = *(_DWORD *)(a1 + 12);
      v120 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v117 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v117 + 1), (unint64_t)&v144);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v117) = v115;
      v119 = *(_DWORD *)(a1 + 12) + 1;
      v120 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v119;
      *(_DWORD *)(a1 + 16) = v120;
    }
    LOBYTE(v144) = v72;
    if (v119 > v120)
    {
      *(_DWORD *)(a1 + 16) = v120 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v120) = v72;
      v121 = *(_DWORD *)(a1 + 12);
      v122 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v119 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v119 + 1), (unint64_t)&v144);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v119) = v72;
      v121 = *(_DWORD *)(a1 + 12) + 1;
      v122 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v121;
      *(_DWORD *)(a1 + 16) = v122;
    }
    LOBYTE(v144) = v75;
    if (v121 > v122)
    {
      *(_DWORD *)(a1 + 16) = v122 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v122) = v75;
    }
    else
    {
      if (v121 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v121 + 1), (unint64_t)&v144);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v121) = v75;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_123:
    v129 = JSC::OpCallDirectEval::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v65, v66, v67, v68, v69, v70, v138, v72, v75);
    v91 = v136;
    if ((v129 & 1) == 0)
      JSC::OpCallDirectEval::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v65, v66, v67, v68, v69, v70, v138, v72, v75);
  }
  if (v140)
    --*v140;
  if (HIDWORD(v142))
  {
    v123 = v141;
    v124 = 8 * HIDWORD(v142);
    do
    {
      v125 = *(_DWORD **)v123;
      *(_QWORD *)v123 = 0;
      if (v125)
        --*v125;
      v123 = (WTF *)((char *)v123 + 8);
      v124 -= 8;
    }
    while (v124);
  }
  v126 = v141;
  if (v91 != v141 && v141 != 0)
  {
    v141 = 0;
    LODWORD(v142) = 0;
    WTF::fastFree((unint64_t)v126, v80, v81, v82, v83, v84, v85, v86);
  }
  return v139;
}

uint64_t JSC::BytecodeGenerator::expectedFunctionForIdentifier(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952);
  v9 = *(int **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(v8 + 696))
    return 1;
  v10 = JSC::Symbols::ObjectPrivateName[0];
  JSC::Symbols::ObjectPrivateName[0] += 2;
  if (!v10)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ObjectPrivateName, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    if (v9 != JSC::Symbols::ObjectPrivateName)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952);
      v9 = *(int **)a2;
      goto LABEL_4;
    }
    return 1;
  }
  JSC::Symbols::ObjectPrivateName[0] = v10;
  if (v9 == JSC::Symbols::ObjectPrivateName)
    return 1;
LABEL_4:
  if (v9 == *(int **)(v8 + 504))
    return 2;
  v11 = JSC::Symbols::ArrayPrivateName[0];
  JSC::Symbols::ArrayPrivateName[0] += 2;
  if (v11)
  {
    JSC::Symbols::ArrayPrivateName[0] = v11;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ArrayPrivateName, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  if (v9 == JSC::Symbols::ArrayPrivateName)
    return 2;
  else
    return 0;
}

uint64_t JSC::BytecodeGenerator::emitExpectedFunctionSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int16 v69;
  char v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;

  v8 = a6;
  v10 = a4;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v71, a1, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v10 == 2)
  {
    if ((*(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 88)) <= 2)
    {
      v20 = *(_DWORD *)(a3 + 4);
      v24 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0xC4u, v14, v15, v16, v17, v18)[1];
      v25 = v71;
      *(_BYTE *)(v71 + 8) = 1;
      v26 = *(unsigned int *)(v25 + 4);
      if ((_DWORD)v26 == -1)
        v27 = v25;
      else
        v27 = *(unsigned int *)(v25 + 4);
      if ((_DWORD)v26 == -1)
        v28 = 1;
      else
        v28 = 2;
      v68 = v28;
      if (v26 == 0xFFFFFFFFLL)
        v29 = 1;
      else
        v29 = 2;
      v30 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
      *(_BYTE *)(v30 + 4) |= 1u;
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(unsigned int *)(v31 + 184);
      *(_DWORD *)(v31 + 184) = v32 + 1;
      LOBYTE(v72) = v29;
      v73 = 0;
      v74 = a1;
      v75 = v27;
      if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v20, v24, (unsigned __int8 *)&v72, v32, v21, v22, v23) & 1) == 0)
      {
        LOBYTE(v72) = v68;
        v73 = 0;
        v74 = a1;
        v75 = v27;
        if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v20, v24, (unsigned __int8 *)&v72, v32, v36, v37, v38) & 1) == 0)
        {
          LOBYTE(v72) = v68;
          v73 = 0;
          v74 = a1;
          v75 = v27;
          JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v20, v24, (unsigned __int8 *)&v72, v32, v36, v37, v38);
        }
      }
      if (a1 + 208 != a2)
      {
        if (*(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 88) == 2)
        {
          JSC::BytecodeGenerator::emitNewArrayWithSize(a1, a2, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 4), v34, v35, v36, v37, v38);
        }
        else
        {
          v52 = *(_DWORD *)(a2 + 4);
          v53 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
          *(_BYTE *)(v53 + 4) |= 1u;
          v54 = *(_QWORD *)(v53 + 16);
          v55 = *(unsigned int *)(v54 + 120);
          *(_DWORD *)(v54 + 120) = v55 + 1;
          if ((JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v52, 0, 0, 3, v55, v37, v38) & 1) == 0&& (JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v52, 0, 0, 3, v55, v37, v38) & 1) == 0)
          {
            JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v52, 0, 0, 3, v55, v37, v38);
          }
        }
      }
      goto LABEL_21;
    }
LABEL_3:
    v10 = 0;
    goto LABEL_4;
  }
  if ((_DWORD)v10 != 1 || (*(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 88)) > 1)
    goto LABEL_3;
  v56 = *(_DWORD *)(a3 + 4);
  v60 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0xC3u, v14, v15, v16, v17, v18)[1];
  v25 = v71;
  *(_BYTE *)(v71 + 8) = 1;
  v61 = *(unsigned int *)(v25 + 4);
  if ((_DWORD)v61 == -1)
    v62 = v25;
  else
    v62 = *(unsigned int *)(v25 + 4);
  if ((_DWORD)v61 == -1)
    v63 = 1;
  else
    v63 = 2;
  if (v61 == 0xFFFFFFFFLL)
    v64 = 1;
  else
    v64 = 2;
  v65 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v65 + 4) |= 1u;
  v66 = *(_QWORD *)(v65 + 16);
  v67 = *(unsigned int *)(v66 + 184);
  *(_DWORD *)(v66 + 184) = v67 + 1;
  LOBYTE(v72) = v64;
  v73 = 0;
  v74 = a1;
  v75 = v62;
  if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v56, v60, (unsigned __int8 *)&v72, v67, v57, v58, v59) & 1) == 0)
  {
    LOBYTE(v72) = v63;
    v73 = 0;
    v74 = a1;
    v75 = v62;
    if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v56, v60, (unsigned __int8 *)&v72, v67, v36, v37, v38) & 1) == 0)
    {
      LOBYTE(v72) = v63;
      v73 = 0;
      v74 = a1;
      v75 = v62;
      JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v56, v60, (unsigned __int8 *)&v72, v67, v36, v37, v38);
    }
  }
  if (a1 + 208 != a2)
    JSC::BytecodeGenerator::emitNewObject(a1, a2, v33, v34, v35, v36, v37, v38);
LABEL_21:
  *(_BYTE *)(v8 + 8) = 1;
  v39 = *(unsigned int *)(v8 + 4);
  if ((_DWORD)v39 == -1)
  {
    v40 = 1;
  }
  else
  {
    v8 = *(unsigned int *)(v8 + 4);
    v40 = 2;
  }
  if (v39 == 0xFFFFFFFFLL)
    v41 = 1;
  else
    v41 = 2;
  LOBYTE(v72) = v41;
  *(_WORD *)((char *)&v72 + 1) = v69;
  HIBYTE(v72) = v70;
  v73 = 0;
  v74 = a1;
  v75 = v8;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v72, v33, v34, v35, v36, v37, v38) & 1) == 0)
  {
    LOBYTE(v72) = v40;
    *(_WORD *)((char *)&v72 + 1) = v69;
    HIBYTE(v72) = v70;
    v73 = 0;
    v74 = a1;
    v75 = v8;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v72, v42, v43, v44, v45, v46, v47) & 1) == 0)
    {
      LOBYTE(v72) = v40;
      *(_WORD *)((char *)&v72 + 1) = v69;
      HIBYTE(v72) = v70;
      v73 = 0;
      v74 = a1;
      v75 = v8;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, (uint64_t)&v72);
    }
  }
  v48 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v25, a1, v48, v43, v44, v45, v46, v47);
  v49 = *(_QWORD *)(a1 + 24);
  v50 = *(unsigned int *)(v49 + 28);
  if (!(_DWORD)v50 || v48 != *(_DWORD *)(*(_QWORD *)(v49 + 16) + 4 * v50 - 4))
  {
    v72 = v48;
    v51 = (_QWORD *)(v49 + 16);
    if ((_DWORD)v50 == *(_DWORD *)(v49 + 24))
      *(_DWORD *)(*(_QWORD *)(v49 + 16) + 4 * *(unsigned int *)(v49 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v50 + 1, (unint64_t)&v72);
    else
      *(_DWORD *)(*v51 + 4 * v50) = v48;
    ++*(_DWORD *)(v49 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
LABEL_4:
  if (v71)
    --*(_DWORD *)v71;
  return v10;
}

uint64_t JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, char a11)
{
  uint64_t v16;
  int v19;
  unsigned int v20;
  int v23;
  BOOL v24;
  int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  signed int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  __int16 v46;
  unsigned int v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v90;
  int v91;
  unsigned int v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  unsigned int v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  _BYTE *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  _BYTE *v168;
  _BYTE *v169;
  _BYTE *v170;
  _BYTE *v171;
  _BYTE *v172;
  _BYTE *v173;
  char v175;

  v16 = a3;
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707) && a11 != 0)
    JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)a9, a4, a5, a6, a7, (uint64_t)a8);
  v19 = a8[1];
  v20 = a8[2];
  if (*a8 != -1 || v19 != -1 || v20 != -1)
  {
    v23 = a9[1];
    v24 = *a9 == -1 && v23 == -1;
    if (!v24 || a9[2] != -1)
    {
      v26 = a10[1];
      v27 = *a10 == -1 && v26 == -1;
      v28 = v27 && a10[2] == -1;
      if (!v28 && !*(_BYTE *)(a1 + 707))
      {
        v29 = *(_QWORD *)(a1 + 192);
        v30 = *(_DWORD *)(v29 + 176);
        a3 = v19 - v30;
        v31 = v20 >= v30;
        v32 = v20 - v30;
        if (!v31)
          v32 = 0;
        v31 = a3 >= v32;
        v33 = a3 - v32;
        if (v31)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, v19 - v23, v26 - v19, (*a8 + ~*(_DWORD *)(v29 + 184)) | (unint64_t)(v33 << 32));
      }
    }
  }
  v34 = *(_DWORD *)(a2 + 4);
  v35 = *(unsigned int *)(v16 + 4);
  v36 = *(unsigned int *)(a4 + 4);
  if (a5)
    v37 = *(_DWORD *)(a5 + 4);
  else
    v37 = 0;
  v38 = *(unsigned int *)(a6 + 4);
  v39 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v39 + 4) |= 1u;
  v40 = (*(_DWORD *)(v39 + 8) + 1);
  *(_DWORD *)(v39 + 8) = v40;
  v41 = v37;
  v42 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v42 + 4) |= 1u;
  v43 = *(_QWORD *)(v42 + 16);
  v44 = *(_DWORD *)(v43 + 4);
  *(_DWORD *)(v43 + 4) = v44 + 1;
  v45 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v46 = *(_WORD *)(v45 + 28);
  v45 += 28;
  v47 = ((*(unsigned __int8 *)(v45 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v45 = v46;
  *(_BYTE *)(v45 + 2) = v47;
  v48 = (v34 - 1073741808) < 0x80;
  if (v34 <= 0x3FFFFFFF)
    v48 = (v34 + 128) < 0x90;
  if (!v48)
    goto LABEL_95;
  v49 = (v35 - 1073741808) < 0x80;
  if ((int)v35 <= 0x3FFFFFFF)
    v49 = (v35 + 128) < 0x90;
  if (!v49)
    goto LABEL_95;
  v50 = (v36 - 1073741808) < 0x80;
  if ((int)v36 <= 0x3FFFFFFF)
    v50 = (v36 + 128) < 0x90;
  if (!v50)
    goto LABEL_95;
  if (!((int)v41 <= 0x3FFFFFFF ? (v41 + 128) < 0x90 : (v41 - 1073741808) < 0x80))
    goto LABEL_95;
  v52 = (v38 - 1073741808) < 0x80;
  if ((int)v38 <= 0x3FFFFFFF)
    v52 = (v38 + 128) < 0x90;
  if (!v52 || (v40 | ((_DWORD)a7 + 128) | v44) > 0xFF)
  {
LABEL_95:
    v90 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
    v91 = *(unsigned __int16 *)(v90 + 28);
    v90 += 28;
    v92 = (v91 | (*(unsigned __int8 *)(v90 + 2) << 16) | 0x20000u) >> 16;
    *(_WORD *)v90 = v91;
    *(_BYTE *)(v90 + 2) = v92;
    if (v34 <= 0x3FFFFFFF)
      v93 = (v34 + 0x8000) >> 6 < 0x201;
    else
      v93 = (v34 - 1073741760) < 0x8000;
    if (!v93)
      goto LABEL_204;
    v94 = (v35 - 1073741760) < 0x8000;
    if ((int)v35 <= 0x3FFFFFFF)
      v94 = (v35 + 0x8000) >> 6 < 0x201;
    if (!v94)
      goto LABEL_204;
    if (!((int)v36 <= 0x3FFFFFFF ? (v36 + 0x8000) >> 6 < 0x201 : (v36 - 1073741760) < 0x8000))
      goto LABEL_204;
    v96 = (v41 - 1073741760) < 0x8000;
    if ((int)v41 <= 0x3FFFFFFF)
      v96 = (v41 + 0x8000) >> 6 < 0x201;
    if (!v96)
      goto LABEL_204;
    v97 = (v38 - 1073741760) < 0x8000;
    if ((int)v38 <= 0x3FFFFFFF)
      v97 = (v38 + 0x8000) >> 6 < 0x201;
    if (!v97 || (v40 | ((_DWORD)a7 + 0x8000) | v44) >> 16)
    {
LABEL_204:
      JSC::OpCallVarargs::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v34, v35, v36, v41, v38, a7, v40, v44);
      return a2;
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)1, a3, a4, a5, a6, a7, (uint64_t)a8);
    v175 = 0x80;
    v98 = *(unsigned int *)(a1 + 12);
    v99 = *(unsigned int *)(a1 + 16);
    if (v98 > v99)
    {
      *(_DWORD *)(a1 + 16) = v99 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v99) = 0x80;
      v102 = *(_DWORD *)(a1 + 12);
      v103 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v98 == *(_DWORD *)(a1 + 8))
      {
        v166 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v98 + 1), (unint64_t)&v175);
        v98 = *(unsigned int *)(a1 + 12);
        v100 = *(_QWORD *)a1;
        v101 = *v166;
      }
      else
      {
        v100 = *(_QWORD *)a1;
        v101 = 0x80;
      }
      *(_BYTE *)(v100 + v98) = v101;
      v102 = *(_DWORD *)(a1 + 12) + 1;
      v103 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v102;
      *(_DWORD *)(a1 + 16) = v103;
    }
    v104 = 1;
    v175 = 1;
    if (v102 > v103)
    {
      *(_DWORD *)(a1 + 16) = v103 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v103) = 1;
      v107 = *(_DWORD *)(a1 + 12);
      v108 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v105 = v102;
      if (v102 == *(_DWORD *)(a1 + 8))
      {
        v167 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v102 + 1), (unint64_t)&v175);
        v105 = *(unsigned int *)(a1 + 12);
        v106 = *(_QWORD *)a1;
        v104 = *v167;
      }
      else
      {
        v106 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v106 + v105) = v104;
      v107 = *(_DWORD *)(a1 + 12) + 1;
      v108 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v107;
      *(_DWORD *)(a1 + 16) = v108;
    }
    if (v34 > 0x3FFFFFFF)
      v34 += 64;
    v175 = v34;
    if (v107 > v108)
    {
      *(_DWORD *)(a1 + 16) = v108 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v108) = v34;
      v109 = *(_DWORD *)(a1 + 12);
      v110 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v107 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v107 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v107) = v34;
      v109 = *(_DWORD *)(a1 + 12) + 1;
      v110 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v109;
      *(_DWORD *)(a1 + 16) = v110;
    }
    v111 = v34 >> 8;
    v175 = BYTE1(v34);
    if (v109 > v110)
    {
      *(_DWORD *)(a1 + 16) = v110 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v110) = BYTE1(v34);
      v114 = *(_DWORD *)(a1 + 12);
      v115 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v112 = v109;
      if (v109 == *(_DWORD *)(a1 + 8))
      {
        v168 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v109 + 1), (unint64_t)&v175);
        v112 = *(unsigned int *)(a1 + 12);
        v113 = *(_QWORD *)a1;
        LOBYTE(v111) = *v168;
      }
      else
      {
        v113 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v113 + v112) = v111;
      v114 = *(_DWORD *)(a1 + 12) + 1;
      v115 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v114;
      *(_DWORD *)(a1 + 16) = v115;
    }
    if ((int)v35 > 0x3FFFFFFF)
      LODWORD(v35) = v35 + 64;
    v175 = v35;
    if (v114 > v115)
    {
      *(_DWORD *)(a1 + 16) = v115 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v115) = v35;
      v116 = *(_DWORD *)(a1 + 12);
      v117 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v114 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v114 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v114) = v35;
      v116 = *(_DWORD *)(a1 + 12) + 1;
      v117 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v116;
      *(_DWORD *)(a1 + 16) = v117;
    }
    v118 = v35 >> 8;
    v175 = BYTE1(v35);
    if (v116 > v117)
    {
      *(_DWORD *)(a1 + 16) = v117 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v117) = BYTE1(v35);
      v121 = *(_DWORD *)(a1 + 12);
      v122 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v119 = v116;
      if (v116 == *(_DWORD *)(a1 + 8))
      {
        v169 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v116 + 1), (unint64_t)&v175);
        v119 = *(unsigned int *)(a1 + 12);
        v120 = *(_QWORD *)a1;
        LOBYTE(v118) = *v169;
      }
      else
      {
        v120 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v120 + v119) = v118;
      v121 = *(_DWORD *)(a1 + 12) + 1;
      v122 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v121;
      *(_DWORD *)(a1 + 16) = v122;
    }
    if ((int)v36 > 0x3FFFFFFF)
      LODWORD(v36) = v36 + 64;
    v175 = v36;
    if (v121 > v122)
    {
      *(_DWORD *)(a1 + 16) = v122 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v122) = v36;
      v123 = *(_DWORD *)(a1 + 12);
      v124 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v121 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v121 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v121) = v36;
      v123 = *(_DWORD *)(a1 + 12) + 1;
      v124 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v123;
      *(_DWORD *)(a1 + 16) = v124;
    }
    v125 = v36 >> 8;
    v175 = BYTE1(v36);
    if (v123 > v124)
    {
      *(_DWORD *)(a1 + 16) = v124 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v124) = BYTE1(v36);
      v128 = *(_DWORD *)(a1 + 12);
      v129 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v126 = v123;
      if (v123 == *(_DWORD *)(a1 + 8))
      {
        v170 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v123 + 1), (unint64_t)&v175);
        v126 = *(unsigned int *)(a1 + 12);
        v127 = *(_QWORD *)a1;
        LOBYTE(v125) = *v170;
      }
      else
      {
        v127 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v127 + v126) = v125;
      v128 = *(_DWORD *)(a1 + 12) + 1;
      v129 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v128;
      *(_DWORD *)(a1 + 16) = v129;
    }
    if ((int)v41 > 0x3FFFFFFF)
      LODWORD(v41) = v41 + 64;
    v175 = v41;
    if (v128 > v129)
    {
      *(_DWORD *)(a1 + 16) = v129 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v129) = v41;
      v130 = *(_DWORD *)(a1 + 12);
      v131 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v128 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v128 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v128) = v41;
      v130 = *(_DWORD *)(a1 + 12) + 1;
      v131 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v130;
      *(_DWORD *)(a1 + 16) = v131;
    }
    v132 = v41 >> 8;
    v175 = BYTE1(v41);
    if (v130 > v131)
    {
      *(_DWORD *)(a1 + 16) = v131 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v131) = BYTE1(v41);
      v135 = *(_DWORD *)(a1 + 12);
      v136 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v133 = v130;
      if (v130 == *(_DWORD *)(a1 + 8))
      {
        v171 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v130 + 1), (unint64_t)&v175);
        v133 = *(unsigned int *)(a1 + 12);
        v134 = *(_QWORD *)a1;
        LOBYTE(v132) = *v171;
      }
      else
      {
        v134 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v134 + v133) = v132;
      v135 = *(_DWORD *)(a1 + 12) + 1;
      v136 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v135;
      *(_DWORD *)(a1 + 16) = v136;
    }
    if ((int)v38 > 0x3FFFFFFF)
      LODWORD(v38) = v38 + 64;
    v175 = v38;
    if (v135 > v136)
    {
      *(_DWORD *)(a1 + 16) = v136 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v136) = v38;
      v137 = *(_DWORD *)(a1 + 12);
      v138 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v135 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v135 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v135) = v38;
      v137 = *(_DWORD *)(a1 + 12) + 1;
      v138 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v137;
      *(_DWORD *)(a1 + 16) = v138;
    }
    v139 = v38 >> 8;
    v175 = BYTE1(v38);
    if (v137 > v138)
    {
      *(_DWORD *)(a1 + 16) = v138 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v138) = BYTE1(v38);
      v142 = *(_DWORD *)(a1 + 12);
      v143 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v140 = v137;
      if (v137 == *(_DWORD *)(a1 + 8))
      {
        v172 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v137 + 1), (unint64_t)&v175);
        v140 = *(unsigned int *)(a1 + 12);
        v141 = *(_QWORD *)a1;
        LOBYTE(v139) = *v172;
      }
      else
      {
        v141 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v141 + v140) = v139;
      v142 = *(_DWORD *)(a1 + 12) + 1;
      v143 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v142;
      *(_DWORD *)(a1 + 16) = v143;
    }
    v175 = a7;
    if (v142 > v143)
    {
      *(_DWORD *)(a1 + 16) = v143 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v143) = a7;
      v144 = *(_DWORD *)(a1 + 12);
      v145 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v142 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v142 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v142) = a7;
      v144 = *(_DWORD *)(a1 + 12) + 1;
      v145 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v144;
      *(_DWORD *)(a1 + 16) = v145;
    }
    v175 = 0;
    if (v144 > v145)
    {
      *(_DWORD *)(a1 + 16) = v145 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v145) = 0;
      v146 = *(_DWORD *)(a1 + 12);
      v147 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v144 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v144 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v144) = 0;
      v146 = *(_DWORD *)(a1 + 12) + 1;
      v147 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v146;
      *(_DWORD *)(a1 + 16) = v147;
    }
    v175 = v40;
    if (v146 > v147)
    {
      *(_DWORD *)(a1 + 16) = v147 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v147) = v40;
      v148 = *(_DWORD *)(a1 + 12);
      v149 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v146 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v146 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v146) = v40;
      v148 = *(_DWORD *)(a1 + 12) + 1;
      v149 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v148;
      *(_DWORD *)(a1 + 16) = v149;
    }
    v150 = v40 >> 8;
    v175 = BYTE1(v40);
    if (v148 > v149)
    {
      *(_DWORD *)(a1 + 16) = v149 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v149) = BYTE1(v40);
      v153 = *(_DWORD *)(a1 + 12);
      v154 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v151 = v148;
      if (v148 == *(_DWORD *)(a1 + 8))
      {
        v173 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v148 + 1), (unint64_t)&v175);
        v151 = *(unsigned int *)(a1 + 12);
        v152 = *(_QWORD *)a1;
        LOBYTE(v150) = *v173;
      }
      else
      {
        v152 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v152 + v151) = v150;
      v153 = *(_DWORD *)(a1 + 12) + 1;
      v154 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v153;
      *(_DWORD *)(a1 + 16) = v154;
    }
    v175 = v44;
    if (v153 > v154)
    {
      *(_DWORD *)(a1 + 16) = v154 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v154) = v44;
      v155 = *(_DWORD *)(a1 + 12);
      v156 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v153 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v153 + 1), (unint64_t)&v175);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v153) = v44;
      v155 = *(_DWORD *)(a1 + 12) + 1;
      v156 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v155;
      *(_DWORD *)(a1 + 16) = v156;
    }
    v157 = v44 >> 8;
    v175 = BYTE1(v44);
    if (v155 > v156)
    {
      *(_DWORD *)(a1 + 16) = v156 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v156) = BYTE1(v44);
      return a2;
    }
    v88 = v155;
    if (v155 != *(_DWORD *)(a1 + 8))
    {
      v158 = *(_QWORD *)a1;
LABEL_194:
      *(_BYTE *)(v158 + v88) = v157;
      goto LABEL_93;
    }
LABEL_195:
    v159 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v88 + 1), (unint64_t)&v175);
    v88 = *(unsigned int *)(a1 + 12);
    v158 = *(_QWORD *)a1;
    LOBYTE(v157) = *v159;
    goto LABEL_194;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)1, a3, a4, a5, a6, a7, (uint64_t)a8);
  v53 = 1;
  v175 = 1;
  v54 = *(unsigned int *)(a1 + 12);
  v55 = *(unsigned int *)(a1 + 16);
  if (v54 > v55)
  {
    *(_DWORD *)(a1 + 16) = v55 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v55) = 1;
    v57 = *(_DWORD *)(a1 + 12);
    v58 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v54 == *(_DWORD *)(a1 + 8))
    {
      v160 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v175);
      v54 = *(unsigned int *)(a1 + 12);
      v56 = *(_QWORD *)a1;
      v53 = *v160;
    }
    else
    {
      v56 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v56 + v54) = v53;
    v57 = *(_DWORD *)(a1 + 12) + 1;
    v58 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v57;
    *(_DWORD *)(a1 + 16) = v58;
  }
  v59 = v34 + 16;
  if (v34 <= 0x3FFFFFFF)
    v59 = v34;
  v175 = v59;
  if (v57 > v58)
  {
    *(_DWORD *)(a1 + 16) = v58 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v58) = v59;
    v62 = *(_DWORD *)(a1 + 12);
    v63 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v60 = v57;
    if (v57 == *(_DWORD *)(a1 + 8))
    {
      v161 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v57 + 1), (unint64_t)&v175);
      v60 = *(unsigned int *)(a1 + 12);
      v61 = *(_QWORD *)a1;
      v59 = *v161;
    }
    else
    {
      v61 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v61 + v60) = v59;
    v62 = *(_DWORD *)(a1 + 12) + 1;
    v63 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v62;
    *(_DWORD *)(a1 + 16) = v63;
  }
  v64 = v35 + 16;
  if ((int)v35 <= 0x3FFFFFFF)
    v64 = v35;
  v175 = v64;
  if (v62 > v63)
  {
    *(_DWORD *)(a1 + 16) = v63 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v63) = v64;
    v67 = *(_DWORD *)(a1 + 12);
    v68 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v65 = v62;
    if (v62 == *(_DWORD *)(a1 + 8))
    {
      v162 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v62 + 1), (unint64_t)&v175);
      v65 = *(unsigned int *)(a1 + 12);
      v66 = *(_QWORD *)a1;
      v64 = *v162;
    }
    else
    {
      v66 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v66 + v65) = v64;
    v67 = *(_DWORD *)(a1 + 12) + 1;
    v68 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v67;
    *(_DWORD *)(a1 + 16) = v68;
  }
  v69 = v36 + 16;
  if ((int)v36 <= 0x3FFFFFFF)
    v69 = v36;
  v175 = v69;
  if (v67 > v68)
  {
    *(_DWORD *)(a1 + 16) = v68 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v68) = v69;
    v72 = *(_DWORD *)(a1 + 12);
    v73 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v70 = v67;
    if (v67 == *(_DWORD *)(a1 + 8))
    {
      v163 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v67 + 1), (unint64_t)&v175);
      v70 = *(unsigned int *)(a1 + 12);
      v71 = *(_QWORD *)a1;
      v69 = *v163;
    }
    else
    {
      v71 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v71 + v70) = v69;
    v72 = *(_DWORD *)(a1 + 12) + 1;
    v73 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v72;
    *(_DWORD *)(a1 + 16) = v73;
  }
  v74 = v41 + 16;
  if ((int)v41 <= 0x3FFFFFFF)
    v74 = v41;
  v175 = v74;
  if (v72 > v73)
  {
    *(_DWORD *)(a1 + 16) = v73 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v73) = v74;
    v77 = *(_DWORD *)(a1 + 12);
    v78 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v75 = v72;
    if (v72 == *(_DWORD *)(a1 + 8))
    {
      v164 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v72 + 1), (unint64_t)&v175);
      v75 = *(unsigned int *)(a1 + 12);
      v76 = *(_QWORD *)a1;
      v74 = *v164;
    }
    else
    {
      v76 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v76 + v75) = v74;
    v77 = *(_DWORD *)(a1 + 12) + 1;
    v78 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v77;
    *(_DWORD *)(a1 + 16) = v78;
  }
  v79 = v38 + 16;
  if ((int)v38 <= 0x3FFFFFFF)
    v79 = v38;
  v175 = v79;
  if (v77 > v78)
  {
    *(_DWORD *)(a1 + 16) = v78 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v78) = v79;
    v82 = *(_DWORD *)(a1 + 12);
    v83 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v80 = v77;
    if (v77 == *(_DWORD *)(a1 + 8))
    {
      v165 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v175);
      v80 = *(unsigned int *)(a1 + 12);
      v81 = *(_QWORD *)a1;
      v79 = *v165;
    }
    else
    {
      v81 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v81 + v80) = v79;
    v82 = *(_DWORD *)(a1 + 12) + 1;
    v83 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v82;
    *(_DWORD *)(a1 + 16) = v83;
  }
  v175 = a7;
  if (v82 > v83)
  {
    *(_DWORD *)(a1 + 16) = v83 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v83) = a7;
    v84 = *(_DWORD *)(a1 + 12);
    v85 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v82 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v82 + 1), (unint64_t)&v175);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v82) = a7;
    v84 = *(_DWORD *)(a1 + 12) + 1;
    v85 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v84;
    *(_DWORD *)(a1 + 16) = v85;
  }
  v175 = v40;
  if (v84 > v85)
  {
    *(_DWORD *)(a1 + 16) = v85 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v85) = v40;
    v86 = *(_DWORD *)(a1 + 12);
    v87 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v84 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v175);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v84) = v40;
    v86 = *(_DWORD *)(a1 + 12) + 1;
    v87 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v86;
    *(_DWORD *)(a1 + 16) = v87;
  }
  v175 = v44;
  if (v86 > v87)
  {
    *(_DWORD *)(a1 + 16) = v87 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v87) = v44;
    return a2;
  }
  v88 = v86;
  if (v86 == *(_DWORD *)(a1 + 8))
    goto LABEL_195;
  *(_BYTE *)(*(_QWORD *)a1 + v86) = v44;
LABEL_93:
  *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitCallVarargsInTailPosition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, _DWORD *a10)
{
  if (*(_BYTE *)(a1 + 709))
    JSC::BytecodeGenerator::emitCallVarargs<JSC::OpTailCallVarargs>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  else
    JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitCallVarargs<JSC::OpTailCallVarargs>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v15;
  int v18;
  unsigned int v19;
  int v22;
  BOOL v23;
  int v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  unsigned int v44;
  _BOOL4 v45;
  _BOOL4 v47;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;

  v15 = a3;
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)a9, a4, a5, a6, a7, (uint64_t)a8);
  v18 = a8[1];
  v19 = a8[2];
  if (*a8 != -1 || v18 != -1 || v19 != -1)
  {
    v22 = a9[1];
    v23 = *a9 == -1 && v22 == -1;
    if (!v23 || a9[2] != -1)
    {
      v25 = a10[1];
      v26 = *a10 == -1 && v25 == -1;
      v27 = v26 && a10[2] == -1;
      if (!v27 && !*(_BYTE *)(a1 + 707))
      {
        v28 = *(_QWORD *)(a1 + 192);
        v29 = *(_DWORD *)(v28 + 176);
        a3 = v18 - v29;
        v30 = v19 >= v29;
        v31 = v19 - v29;
        if (!v30)
          v31 = 0;
        v30 = a3 >= v31;
        v32 = a3 - v31;
        if (v30)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, v18 - v22, v25 - v18, (*a8 + ~*(_DWORD *)(v28 + 184)) | (unint64_t)(v32 << 32));
      }
    }
  }
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707) || byte_1ECF4C27A)
    JSC::OpLogShadowChickenTail::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(a1 + 224), *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4), a4, a5, a6, a7, (uint64_t)a8);
  v33 = *(_DWORD *)(a2 + 4);
  v34 = *(unsigned int *)(v15 + 4);
  v35 = *(unsigned int *)(a4 + 4);
  if (a5)
    v36 = *(_DWORD *)(a5 + 4);
  else
    v36 = 0;
  v37 = *(unsigned int *)(a6 + 4);
  v38 = v36;
  v39 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v39 + 4) |= 1u;
  v40 = *(_DWORD **)(v39 + 16);
  v41 = *v40;
  *v40 = v41 + 1;
  v42 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v43 = *(_WORD *)(v42 + 28);
  v42 += 28;
  v44 = ((*(unsigned __int8 *)(v42 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v42 = v43;
  *(_BYTE *)(v42 + 2) = v44;
  v45 = (v33 - 1073741808) < 0x80;
  if (v33 <= 0x3FFFFFFF)
    v45 = (v33 + 128) < 0x90;
  if (!v45)
    goto LABEL_94;
  if (!((int)v34 <= 0x3FFFFFFF ? (v34 + 128) < 0x90 : (v34 - 1073741808) < 0x80))
    goto LABEL_94;
  v47 = (v35 - 1073741808) < 0x80;
  if ((int)v35 <= 0x3FFFFFFF)
    v47 = (v35 + 128) < 0x90;
  if (!v47)
    goto LABEL_94;
  if (!((int)v38 <= 0x3FFFFFFF ? (v38 + 128) < 0x90 : (v38 - 1073741808) < 0x80))
    goto LABEL_94;
  v49 = (v37 - 1073741808) < 0x80;
  if ((int)v37 <= 0x3FFFFFFF)
    v49 = (v37 + 128) < 0x90;
  if (v49 && (v41 | ((_DWORD)a7 + 128)) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, 0, a3, a4, a5, a6, a7, (uint64_t)a8);
    v87 = 0;
    v50 = *(unsigned int *)(a1 + 12);
    v51 = *(unsigned int *)(a1 + 16);
    if (v50 > v51)
    {
      *(_DWORD *)(a1 + 16) = v51 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v51) = 0;
      v52 = *(_DWORD *)(a1 + 12);
      v53 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v50 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v87);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v50) = 0;
      v52 = *(_DWORD *)(a1 + 12) + 1;
      v53 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v52;
      *(_DWORD *)(a1 + 16) = v53;
    }
    v54 = v33 + 16;
    if (v33 <= 0x3FFFFFFF)
      v54 = v33;
    v88 = v54;
    if (v52 > v53)
    {
      *(_DWORD *)(a1 + 16) = v53 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v53) = v54;
      v57 = *(_DWORD *)(a1 + 12);
      v58 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v55 = v52;
      if (v52 == *(_DWORD *)(a1 + 8))
      {
        v82 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v52 + 1), (unint64_t)&v88);
        v55 = *(unsigned int *)(a1 + 12);
        v56 = *(_QWORD *)a1;
        v54 = *v82;
      }
      else
      {
        v56 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v56 + v55) = v54;
      v57 = *(_DWORD *)(a1 + 12) + 1;
      v58 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v57;
      *(_DWORD *)(a1 + 16) = v58;
    }
    v59 = v34 + 16;
    if ((int)v34 <= 0x3FFFFFFF)
      v59 = v34;
    v89 = v59;
    if (v57 > v58)
    {
      *(_DWORD *)(a1 + 16) = v58 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v58) = v59;
      v62 = *(_DWORD *)(a1 + 12);
      v63 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v60 = v57;
      if (v57 == *(_DWORD *)(a1 + 8))
      {
        v83 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v57 + 1), (unint64_t)&v89);
        v60 = *(unsigned int *)(a1 + 12);
        v61 = *(_QWORD *)a1;
        v59 = *v83;
      }
      else
      {
        v61 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v61 + v60) = v59;
      v62 = *(_DWORD *)(a1 + 12) + 1;
      v63 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v62;
      *(_DWORD *)(a1 + 16) = v63;
    }
    v64 = v35 + 16;
    if ((int)v35 <= 0x3FFFFFFF)
      v64 = v35;
    v90 = v64;
    if (v62 > v63)
    {
      *(_DWORD *)(a1 + 16) = v63 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v63) = v64;
      v67 = *(_DWORD *)(a1 + 12);
      v68 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v65 = v62;
      if (v62 == *(_DWORD *)(a1 + 8))
      {
        v84 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v62 + 1), (unint64_t)&v90);
        v65 = *(unsigned int *)(a1 + 12);
        v66 = *(_QWORD *)a1;
        v64 = *v84;
      }
      else
      {
        v66 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v66 + v65) = v64;
      v67 = *(_DWORD *)(a1 + 12) + 1;
      v68 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v67;
      *(_DWORD *)(a1 + 16) = v68;
    }
    v69 = v38 + 16;
    if ((int)v38 <= 0x3FFFFFFF)
      v69 = v38;
    v91 = v69;
    if (v67 > v68)
    {
      *(_DWORD *)(a1 + 16) = v68 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v68) = v69;
      v72 = *(_DWORD *)(a1 + 12);
      v73 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v70 = v67;
      if (v67 == *(_DWORD *)(a1 + 8))
      {
        v85 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v67 + 1), (unint64_t)&v91);
        v70 = *(unsigned int *)(a1 + 12);
        v71 = *(_QWORD *)a1;
        v69 = *v85;
      }
      else
      {
        v71 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v71 + v70) = v69;
      v72 = *(_DWORD *)(a1 + 12) + 1;
      v73 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v72;
      *(_DWORD *)(a1 + 16) = v73;
    }
    v74 = v37 + 16;
    if ((int)v37 <= 0x3FFFFFFF)
      v74 = v37;
    v92 = v74;
    if (v72 > v73)
    {
      *(_DWORD *)(a1 + 16) = v73 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v73) = v74;
      v77 = *(_DWORD *)(a1 + 12);
      v78 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v75 = v72;
      if (v72 == *(_DWORD *)(a1 + 8))
      {
        v86 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v72 + 1), (unint64_t)&v92);
        v75 = *(unsigned int *)(a1 + 12);
        v76 = *(_QWORD *)a1;
        v74 = *v86;
      }
      else
      {
        v76 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v76 + v75) = v74;
      v77 = *(_DWORD *)(a1 + 12) + 1;
      v78 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v77;
      *(_DWORD *)(a1 + 16) = v78;
    }
    v93 = a7;
    if (v77 > v78)
    {
      *(_DWORD *)(a1 + 16) = v78 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v78) = a7;
      v79 = *(_DWORD *)(a1 + 12);
      v80 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v77 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v93);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v77) = a7;
      v79 = *(_DWORD *)(a1 + 12) + 1;
      v80 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v79;
      *(_DWORD *)(a1 + 16) = v80;
    }
    v94 = v41;
    if (v79 > v80)
    {
      *(_DWORD *)(a1 + 16) = v80 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v80) = v41;
    }
    else
    {
      if (v79 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v94);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v79) = v41;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_94:
    if ((JSC::OpTailCallVarargs::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v33, v34, v35, v38, v37, a7, v41) & 1) == 0)JSC::OpTailCallVarargs::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v33, v34, v35, v38, v37, a7, v41);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitCallVarargs<JSC::OpConstructVarargs>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v12;
  int v15;
  unsigned int v16;
  int v19;
  BOOL v20;
  int v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  unsigned int v43;
  _BOOL4 v44;
  _BOOL4 v46;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;

  v12 = a3;
  v15 = a7[1];
  v16 = a7[2];
  if (*a7 != -1 || v15 != -1 || v16 != -1)
  {
    v19 = a8[1];
    v20 = *a8 == -1 && v19 == -1;
    if (!v20 || a8[2] != -1)
    {
      v22 = a9[1];
      v23 = *a9 == -1 && v22 == -1;
      v24 = v23 && a9[2] == -1;
      if (!v24 && !*(_BYTE *)(a1 + 707))
      {
        v25 = *(_QWORD *)(a1 + 192);
        v26 = *(_DWORD *)(v25 + 176);
        a3 = v15 - v26;
        v27 = v16 >= v26;
        v28 = v16 - v26;
        if (!v27)
          v28 = 0;
        v27 = a3 >= v28;
        v29 = a3 - v28;
        if (v27)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, v15 - v19, v22 - v15, (*a7 + ~*(_DWORD *)(v25 + 184)) | (unint64_t)(v29 << 32));
      }
    }
  }
  v30 = *(_DWORD *)(a2 + 4);
  v31 = *(unsigned int *)(v12 + 4);
  v32 = *(unsigned int *)(a4 + 4);
  if (a5)
    v33 = *(_DWORD *)(a5 + 4);
  else
    v33 = 0;
  v34 = *(unsigned int *)(a6 + 4);
  v35 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v35 + 4) |= 1u;
  v36 = (*(_DWORD *)(v35 + 8) + 1);
  *(_DWORD *)(v35 + 8) = v36;
  v37 = v33;
  v38 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v38 + 4) |= 1u;
  v39 = *(_QWORD *)(v38 + 16);
  v40 = *(unsigned int *)(v39 + 12);
  *(_DWORD *)(v39 + 12) = v40 + 1;
  v41 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v42 = *(_WORD *)(v41 + 28);
  v41 += 28;
  v43 = ((*(unsigned __int8 *)(v41 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v41 = v42;
  *(_BYTE *)(v41 + 2) = v43;
  v44 = (v30 - 1073741808) < 0x80;
  if (v30 <= 0x3FFFFFFF)
    v44 = (v30 + 128) < 0x90;
  if (!v44)
    goto LABEL_95;
  if (!((int)v31 <= 0x3FFFFFFF ? (v31 + 128) < 0x90 : (v31 - 1073741808) < 0x80))
    goto LABEL_95;
  v46 = (v32 - 1073741808) < 0x80;
  if ((int)v32 <= 0x3FFFFFFF)
    v46 = (v32 + 128) < 0x90;
  if (!v46)
    goto LABEL_95;
  if (!((int)v37 <= 0x3FFFFFFF ? (v37 + 128) < 0x90 : (v37 - 1073741808) < 0x80))
    goto LABEL_95;
  v48 = (v34 - 1073741808) < 0x80;
  if ((int)v34 <= 0x3FFFFFFF)
    v48 = (v34 + 128) < 0x90;
  if (v48 && (v40 | v36) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)3, a3, a4, a5, a6, (uint64_t)a7, (uint64_t)a8);
    v91 = 3;
    v49 = *(unsigned int *)(a1 + 12);
    v50 = *(unsigned int *)(a1 + 16);
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = 3;
      v53 = *(_DWORD *)(a1 + 12);
      v54 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v49 == *(_DWORD *)(a1 + 8))
      {
        v85 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v91);
        v49 = *(unsigned int *)(a1 + 12);
        v51 = *(_QWORD *)a1;
        v52 = *v85;
      }
      else
      {
        v51 = *(_QWORD *)a1;
        v52 = 3;
      }
      *(_BYTE *)(v51 + v49) = v52;
      v53 = *(_DWORD *)(a1 + 12) + 1;
      v54 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v53;
      *(_DWORD *)(a1 + 16) = v54;
    }
    v55 = v30 + 16;
    if (v30 <= 0x3FFFFFFF)
      v55 = v30;
    v92 = v55;
    if (v53 > v54)
    {
      *(_DWORD *)(a1 + 16) = v54 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v54) = v55;
      v58 = *(_DWORD *)(a1 + 12);
      v59 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v56 = v53;
      if (v53 == *(_DWORD *)(a1 + 8))
      {
        v86 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v92);
        v56 = *(unsigned int *)(a1 + 12);
        v57 = *(_QWORD *)a1;
        v55 = *v86;
      }
      else
      {
        v57 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v57 + v56) = v55;
      v58 = *(_DWORD *)(a1 + 12) + 1;
      v59 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v58;
      *(_DWORD *)(a1 + 16) = v59;
    }
    v60 = v31 + 16;
    if ((int)v31 <= 0x3FFFFFFF)
      v60 = v31;
    v93 = v60;
    if (v58 > v59)
    {
      *(_DWORD *)(a1 + 16) = v59 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v59) = v60;
      v63 = *(_DWORD *)(a1 + 12);
      v64 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v61 = v58;
      if (v58 == *(_DWORD *)(a1 + 8))
      {
        v87 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v58 + 1), (unint64_t)&v93);
        v61 = *(unsigned int *)(a1 + 12);
        v62 = *(_QWORD *)a1;
        v60 = *v87;
      }
      else
      {
        v62 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v62 + v61) = v60;
      v63 = *(_DWORD *)(a1 + 12) + 1;
      v64 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v63;
      *(_DWORD *)(a1 + 16) = v64;
    }
    v65 = v32 + 16;
    if ((int)v32 <= 0x3FFFFFFF)
      v65 = v32;
    v94 = v65;
    if (v63 > v64)
    {
      *(_DWORD *)(a1 + 16) = v64 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v64) = v65;
      v68 = *(_DWORD *)(a1 + 12);
      v69 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v66 = v63;
      if (v63 == *(_DWORD *)(a1 + 8))
      {
        v88 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v63 + 1), (unint64_t)&v94);
        v66 = *(unsigned int *)(a1 + 12);
        v67 = *(_QWORD *)a1;
        v65 = *v88;
      }
      else
      {
        v67 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v67 + v66) = v65;
      v68 = *(_DWORD *)(a1 + 12) + 1;
      v69 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v68;
      *(_DWORD *)(a1 + 16) = v69;
    }
    v70 = v37 + 16;
    if ((int)v37 <= 0x3FFFFFFF)
      v70 = v37;
    v95 = v70;
    if (v68 > v69)
    {
      *(_DWORD *)(a1 + 16) = v69 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v69) = v70;
      v73 = *(_DWORD *)(a1 + 12);
      v74 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v71 = v68;
      if (v68 == *(_DWORD *)(a1 + 8))
      {
        v89 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v68 + 1), (unint64_t)&v95);
        v71 = *(unsigned int *)(a1 + 12);
        v72 = *(_QWORD *)a1;
        v70 = *v89;
      }
      else
      {
        v72 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v72 + v71) = v70;
      v73 = *(_DWORD *)(a1 + 12) + 1;
      v74 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v73;
      *(_DWORD *)(a1 + 16) = v74;
    }
    v75 = v34 + 16;
    if ((int)v34 <= 0x3FFFFFFF)
      v75 = v34;
    v96 = v75;
    if (v73 > v74)
    {
      *(_DWORD *)(a1 + 16) = v74 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v74) = v75;
      v78 = *(_DWORD *)(a1 + 12);
      v79 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v76 = v73;
      if (v73 == *(_DWORD *)(a1 + 8))
      {
        v90 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v73 + 1), (unint64_t)&v96);
        v76 = *(unsigned int *)(a1 + 12);
        v77 = *(_QWORD *)a1;
        v75 = *v90;
      }
      else
      {
        v77 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v77 + v76) = v75;
      v78 = *(_DWORD *)(a1 + 12) + 1;
      v79 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v78;
      *(_DWORD *)(a1 + 16) = v79;
    }
    v97 = 0;
    if (v78 > v79)
    {
      *(_DWORD *)(a1 + 16) = v79 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v79) = 0;
      v80 = *(_DWORD *)(a1 + 12);
      v81 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v78 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v78 + 1), (unint64_t)&v97);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v78) = 0;
      v80 = *(_DWORD *)(a1 + 12) + 1;
      v81 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v80;
      *(_DWORD *)(a1 + 16) = v81;
    }
    v98 = v36;
    if (v80 > v81)
    {
      *(_DWORD *)(a1 + 16) = v81 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v81) = v36;
      v82 = *(_DWORD *)(a1 + 12);
      v83 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v80 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v80 + 1), (unint64_t)&v98);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v80) = v36;
      v82 = *(_DWORD *)(a1 + 12) + 1;
      v83 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v82;
      *(_DWORD *)(a1 + 16) = v83;
    }
    v99 = v40;
    if (v82 > v83)
    {
      *(_DWORD *)(a1 + 16) = v83 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v83) = v40;
    }
    else
    {
      if (v82 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v82 + 1), (unint64_t)&v99);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v82) = v40;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_95:
    if ((JSC::OpConstructVarargs::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v30, v31, v32, v37, v34, v36, v40) & 1) == 0)JSC::OpConstructVarargs::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v30, v31, v32, v37, v34, v36, v40);
  }
  return a2;
}

char *JSC::OpLogShadowChickenPrologue::emit<JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v8;
  _BOOL4 v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  char *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v8 = a2;
  v10 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v10 = (a2 + 128) < 0x90;
  if (v10)
  {
    result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7A, a3, a4, a5, a6, a7, a8);
    v47 = 122;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = 122;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v47);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *result;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = 122;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    LOBYTE(v18) = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      LOBYTE(v18) = v8;
    v48 = v18;
    if (v16 <= v17)
    {
      v19 = v16;
      if (v16 == *(_DWORD *)(a1 + 8))
      {
        v20 = (WTF *)(v16 + 1);
        v21 = &v48;
LABEL_49:
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v20, (unint64_t)v21);
        v19 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        LOBYTE(v18) = *result;
        goto LABEL_34;
      }
      goto LABEL_33;
    }
LABEL_52:
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
    return result;
  }
  if (a2 <= 0x3FFFFFFF)
    v22 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v22 = (a2 - 1073741760) < 0x8000;
  result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7A, a3, a4, a5, a6, a7, a8);
  if (v22)
  {
    v49 = 0x80;
    v23 = *(unsigned int *)(a1 + 12);
    v24 = *(unsigned int *)(a1 + 16);
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = 0x80;
      v27 = *(_DWORD *)(a1 + 12);
      v28 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v49);
        v23 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v26 = *result;
      }
      else
      {
        v25 = *(_QWORD *)a1;
        v26 = 0x80;
      }
      *(_BYTE *)(v25 + v23) = v26;
      v27 = *(_DWORD *)(a1 + 12) + 1;
      v28 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 16) = v28;
    }
    v29 = 122;
    v50 = 122;
    if (v27 > v28)
    {
      *(_DWORD *)(a1 + 16) = v28 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v28) = 122;
      v32 = *(_DWORD *)(a1 + 12);
      v33 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v30 = v27;
      if (v27 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v50);
        v30 = *(unsigned int *)(a1 + 12);
        v31 = *(_QWORD *)a1;
        v29 = *result;
      }
      else
      {
        v31 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v31 + v30) = v29;
      v32 = *(_DWORD *)(a1 + 12) + 1;
      v33 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v32;
      *(_DWORD *)(a1 + 16) = v33;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v51 = v8;
    if (v32 > v33)
    {
      *(_DWORD *)(a1 + 16) = v33 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v8;
      v34 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v32 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v51);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v32) = v8;
      }
      v34 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v34;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v18 = v8 >> 8;
    v52 = BYTE1(v8);
    if (v34 <= v17)
    {
      v19 = v34;
      if (v34 == *(_DWORD *)(a1 + 8))
      {
        v20 = (WTF *)(v34 + 1);
        v21 = &v52;
        goto LABEL_49;
      }
LABEL_33:
      v35 = *(_QWORD *)a1;
LABEL_34:
      *(_BYTE *)(v35 + v19) = v18;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      return result;
    }
    goto LABEL_52;
  }
  v53 = -126;
  v36 = *(unsigned int *)(a1 + 12);
  v37 = *(unsigned int *)(a1 + 16);
  if (v36 > v37)
  {
    *(_DWORD *)(a1 + 16) = v37 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v37) = -126;
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v36 == *(_DWORD *)(a1 + 8))
    {
      v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v53);
      v36 = *(unsigned int *)(a1 + 12);
      v38 = *(_QWORD *)a1;
      v39 = *v45;
    }
    else
    {
      v38 = *(_QWORD *)a1;
      v39 = -126;
    }
    *(_BYTE *)(v38 + v36) = v39;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  v42 = 122;
  v54 = 122;
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = 122;
  }
  else
  {
    v43 = v40;
    if (v40 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v54);
      v43 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      v42 = *v46;
    }
    else
    {
      v44 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v44 + v43) = v42;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

char *JSC::OpLogShadowChickenTail::emit<JSC::BytecodeGenerator>(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v8;
  _BOOL4 v11;
  _BOOL4 v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v8 = a3;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (!v11)
    goto LABEL_23;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (v12)
  {
    result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7B, a3, a4, a5, a6, a7, a8);
    v54 = 123;
    v14 = *(unsigned int *)(a1 + 12);
    v15 = *(unsigned int *)(a1 + 16);
    if (v14 > v15)
    {
      *(_DWORD *)(a1 + 16) = v15 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v15) = 123;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v54);
        v14 = *(unsigned int *)(a1 + 12);
        v16 = *(_QWORD *)a1;
        v17 = *result;
      }
      else
      {
        v16 = *(_QWORD *)a1;
        v17 = 123;
      }
      *(_BYTE *)(v16 + v14) = v17;
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    v20 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v20 = a2;
    v55 = v20;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v21 = v18;
      if (v18 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v55);
        v21 = *(unsigned int *)(a1 + 12);
        v22 = *(_QWORD *)a1;
        v20 = *result;
      }
      else
      {
        v22 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v22 + v21) = v20;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v25 = v8;
    v56 = v25;
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v56);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v25 = *result;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_23:
    if (a2 <= 0x3FFFFFFF)
      v28 = (a2 + 0x8000) >> 6 < 0x201;
    else
      v28 = (a2 - 1073741760) < 0x8000;
    if (!v28)
      goto LABEL_43;
    v29 = (a3 - 1073741760) < 0x8000;
    if ((int)a3 <= 0x3FFFFFFF)
      v29 = (a3 + 0x8000) >> 6 < 0x201;
    if (v29)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7B, a3, a4, a5, a6, a7, a8);
      v57 = 0x80;
      v30 = *(unsigned int *)(a1 + 12);
      v31 = *(unsigned int *)(a1 + 16);
      if (v30 > v31)
      {
        *(_DWORD *)(a1 + 16) = v31 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v31) = 0x80;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v30 == *(_DWORD *)(a1 + 8))
        {
          v52 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v57);
          v30 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          v33 = *v52;
        }
        else
        {
          v32 = *(_QWORD *)a1;
          v33 = 0x80;
        }
        *(_BYTE *)(v32 + v30) = v33;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      v36 = 123;
      v58 = 123;
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = 123;
      }
      else
      {
        v37 = v34;
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v58);
          v37 = *(unsigned int *)(a1 + 12);
          v38 = *(_QWORD *)a1;
          v36 = *v53;
        }
        else
        {
          v38 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v38 + v37) = v36;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v39 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v39 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v39);
      v40 = v8 + 64;
      if (v8 <= 0x3FFFFFFF)
        v40 = v8;
      return (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v40);
    }
    else
    {
LABEL_43:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7B, a3, a4, a5, a6, a7, a8);
      v59 = -126;
      v41 = *(unsigned int *)(a1 + 12);
      v42 = *(unsigned int *)(a1 + 16);
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = -126;
        v45 = *(_DWORD *)(a1 + 12);
        v46 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v41 == *(_DWORD *)(a1 + 8))
        {
          v50 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v59);
          v41 = *(unsigned int *)(a1 + 12);
          v43 = *(_QWORD *)a1;
          v44 = *v50;
        }
        else
        {
          v43 = *(_QWORD *)a1;
          v44 = -126;
        }
        *(_BYTE *)(v43 + v41) = v44;
        v45 = *(_DWORD *)(a1 + 12) + 1;
        v46 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v45;
        *(_DWORD *)(a1 + 16) = v46;
      }
      v47 = 123;
      v60 = 123;
      if (v45 > v46)
      {
        *(_DWORD *)(a1 + 16) = v46 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v46) = 123;
      }
      else
      {
        v48 = v45;
        if (v45 == *(_DWORD *)(a1 + 8))
        {
          v51 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v60);
          v48 = *(unsigned int *)(a1 + 12);
          v49 = *(_QWORD *)a1;
          v47 = *v51;
        }
        else
        {
          v49 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v49 + v48) = v47;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
      return (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitCallDefineProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;

  if ((a5 & 1) != 0)
    v12 = 41;
  else
    v12 = 42;
  v13 = v12 & 0xB;
  if (a4)
    v12 &= 0xBu;
  v14 = v13 | 0x10;
  if ((a5 & 2) != 0)
    v12 = v14;
  if (a4)
    v15 = v12 | 0x40;
  else
    v15 = v12;
  v16 = a6[1];
  v17 = a6[2];
  v19 = *a6 == -1 && v16 == -1 && v17 == -1;
  if (!v19 && !*(_BYTE *)(a1 + 707))
  {
    v20 = *(_QWORD *)(a1 + 192);
    v21 = *(_DWORD *)(v20 + 176);
    v22 = v16 - v21;
    v23 = v17 - v21;
    if (v17 < v21)
      v23 = 0;
    v24 = v22 >= v23;
    v25 = v22 - v23;
    if (v24)
      JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v22, 0, 0, (*a6 + ~*(_DWORD *)(v20 + 184)) | (unint64_t)(v25 << 32));
  }
  v26 = *(_DWORD *)(a2 + 4);
  v27 = *(unsigned int *)(a3 + 4);
  v28 = *(unsigned int *)(a4 + 4);
  v35 = JSC::BytecodeGenerator::emitLoad(a1, 0, v15 | 0xFFFE000000000000, a4, a5, (uint64_t)a6, a7, a8)[1];
  v36 = (v26 - 1073741808) < 0x80;
  if (v26 <= 0x3FFFFFFF)
    v36 = (v26 + 128) < 0x90;
  if (!v36)
    goto LABEL_58;
  v37 = (v27 - 1073741808) < 0x80;
  if ((int)v27 <= 0x3FFFFFFF)
    v37 = (v27 + 128) < 0x90;
  if (!v37)
    goto LABEL_58;
  v38 = (v28 - 1073741808) < 0x80;
  if ((int)v28 <= 0x3FFFFFFF)
    v38 = (v28 + 128) < 0x90;
  if (v38
    && ((int)v35 <= 0x3FFFFFFF
      ? (v39 = (v35 + 128) < 0x90)
      : (v39 = (v35 - 1073741808) < 0x80),
        v39))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x41, v29, v30, v31, v32, v33, v34);
    v79 = 65;
    v40 = *(unsigned int *)(a1 + 12);
    v41 = *(unsigned int *)(a1 + 16);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = 65;
      v44 = *(_DWORD *)(a1 + 12);
      v45 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v40 == *(_DWORD *)(a1 + 8))
      {
        v74 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v79);
        v40 = *(unsigned int *)(a1 + 12);
        v42 = *(_QWORD *)a1;
        v43 = *v74;
      }
      else
      {
        v42 = *(_QWORD *)a1;
        v43 = 65;
      }
      *(_BYTE *)(v42 + v40) = v43;
      v44 = *(_DWORD *)(a1 + 12) + 1;
      v45 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v44;
      *(_DWORD *)(a1 + 16) = v45;
    }
    v46 = v26 + 16;
    if (v26 <= 0x3FFFFFFF)
      v46 = v26;
    v80 = v46;
    if (v44 > v45)
    {
      *(_DWORD *)(a1 + 16) = v45 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v45) = v46;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v47 = v44;
      if (v44 == *(_DWORD *)(a1 + 8))
      {
        v75 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v80);
        v47 = *(unsigned int *)(a1 + 12);
        v48 = *(_QWORD *)a1;
        v46 = *v75;
      }
      else
      {
        v48 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v48 + v47) = v46;
      v49 = *(_DWORD *)(a1 + 12) + 1;
      v50 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v49;
      *(_DWORD *)(a1 + 16) = v50;
    }
    v51 = v27 + 16;
    if ((int)v27 <= 0x3FFFFFFF)
      v51 = v27;
    v81 = v51;
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = v51;
    }
    else
    {
      v52 = v49;
      if (v49 == *(_DWORD *)(a1 + 8))
      {
        v76 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v81);
        v52 = *(unsigned int *)(a1 + 12);
        v53 = *(_QWORD *)a1;
        v51 = *v76;
      }
      else
      {
        v53 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v53 + v52) = v51;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v54 = v28 + 16;
    if ((int)v28 <= 0x3FFFFFFF)
      v54 = v28;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v54);
    v55 = v35 + 16;
    if ((int)v35 <= 0x3FFFFFFF)
      v55 = v35;
    return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v55);
  }
  else
  {
LABEL_58:
    if (v26 <= 0x3FFFFFFF)
      v57 = (v26 + 0x8000) >> 6 < 0x201;
    else
      v57 = (v26 - 1073741760) < 0x8000;
    if (!v57)
      return JSC::OpDefineDataProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v26, v27, v28, v35, v32, v33, v34);
    v58 = (v27 - 1073741760) < 0x8000;
    if ((int)v27 <= 0x3FFFFFFF)
      v58 = (v27 + 0x8000) >> 6 < 0x201;
    if (!v58)
      return JSC::OpDefineDataProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v26, v27, v28, v35, v32, v33, v34);
    if (!((int)v28 <= 0x3FFFFFFF ? (v28 + 0x8000) >> 6 < 0x201 : (v28 - 1073741760) < 0x8000))
      return JSC::OpDefineDataProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v26, v27, v28, v35, v32, v33, v34);
    v60 = (v35 - 1073741760) < 0x8000;
    if ((int)v35 <= 0x3FFFFFFF)
      v60 = (v35 + 0x8000) >> 6 < 0x201;
    if (v60)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x41, v29, v30, v31, v32, v33, v34);
      v82 = 0x80;
      v61 = *(unsigned int *)(a1 + 12);
      v62 = *(unsigned int *)(a1 + 16);
      if (v61 > v62)
      {
        *(_DWORD *)(a1 + 16) = v62 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v62) = 0x80;
        v65 = *(_DWORD *)(a1 + 12);
        v66 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v61 == *(_DWORD *)(a1 + 8))
        {
          v77 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v61 + 1), (unint64_t)&v82);
          v61 = *(unsigned int *)(a1 + 12);
          v63 = *(_QWORD *)a1;
          v64 = *v77;
        }
        else
        {
          v63 = *(_QWORD *)a1;
          v64 = 0x80;
        }
        *(_BYTE *)(v63 + v61) = v64;
        v65 = *(_DWORD *)(a1 + 12) + 1;
        v66 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v65;
        *(_DWORD *)(a1 + 16) = v66;
      }
      v67 = 65;
      v83 = 65;
      if (v65 > v66)
      {
        *(_DWORD *)(a1 + 16) = v66 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v66) = 65;
      }
      else
      {
        v68 = v65;
        if (v65 == *(_DWORD *)(a1 + 8))
        {
          v78 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v83);
          v68 = *(unsigned int *)(a1 + 12);
          v69 = *(_QWORD *)a1;
          v67 = *v78;
        }
        else
        {
          v69 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v69 + v68) = v67;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v70 = v26 + 64;
      if (v26 <= 0x3FFFFFFF)
        v70 = v26;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v70);
      v71 = v27 + 64;
      if ((int)v27 <= 0x3FFFFFFF)
        v71 = v27;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v71);
      v72 = v28 + 64;
      if ((int)v28 <= 0x3FFFFFFF)
        v72 = v28;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v72);
      v73 = v35 + 64;
      if ((int)v35 <= 0x3FFFFFFF)
        v73 = v35;
      return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v73);
    }
    else
    {
      return JSC::OpDefineDataProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v26, v27, v28, v35, v32, v33, v34);
    }
  }
}

_DWORD *JSC::BytecodeGenerator::emitExpressionInfo(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v4;
  unsigned int v5;
  int v8;
  BOOL v9;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;

  v4 = a2[1];
  v5 = a2[2];
  if (*a2 != -1 || v4 != -1 || v5 != -1)
  {
    v8 = a3[1];
    v9 = *a3 == -1 && v8 == -1;
    if (!v9 || a3[2] != -1)
    {
      v11 = a4[1];
      v12 = *a4 == -1 && v11 == -1;
      v13 = v12 && a4[2] == -1;
      if (!v13 && !*((_BYTE *)result + 707))
      {
        v14 = *((_QWORD *)result + 24);
        v15 = *(_DWORD *)(v14 + 176);
        v16 = v4 - v15;
        v17 = v5 >= v15;
        v18 = v5 - v15;
        if (!v17)
          v18 = 0;
        v17 = v16 >= v18;
        v19 = v16 - v18;
        if (v17)
          return JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*((_QWORD *)result + 3), result[3], v16, v4 - v8, v11 - v4, (*a2 + ~*(_DWORD *)(v14 + 184)) | (unint64_t)(v19 << 32));
      }
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::ensureThis(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = **(_QWORD **)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v9 + 28) & 0xC0) == 0x80 || *((_BYTE *)this + 713) == 1)
  {
    if ((*((_BYTE *)this + 711) & 1) != 0
      && ((v24 = *((_QWORD *)this + 24), (*(_BYTE *)(v24 + 167) & 9) != 0) || (*(_WORD *)(v24 + 164) & 1) != 0)
      || *(_BYTE *)(v9 + 42) == 8)
    {
      JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment(this, a2, a3, a4, a5, a6, a7, a8);
    }
    v11 = *((_DWORD *)this + 56);
    if (!JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, v11, a3, a4, a5, a6, a7, a8)&& !JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)this, v11, v12, v13, v14, v15, v16, v17))
    {
      JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, v11, v18, v19, v20, v21, v22, v23);
    }
  }
  return (uint64_t)this + 220;
}

uint64_t JSC::BytecodeGenerator::emitConstruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  _DWORD *v30;
  uint64_t v31;
  WTF *v32;
  _DWORD *v33;
  uint64_t v34;
  WTF *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  signed int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  WTF *v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  uint64_t v100;
  _DWORD *v101;
  WTF *v102;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  __int16 v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  char v132;
  char v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  int *v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  _DWORD *v160;
  char v161;
  uint64_t v162;
  char *v163;
  char *v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF *v174;
  unsigned int v175;
  uint64_t v176;
  _DWORD *v177;
  _DWORD *v178;
  uint64_t v179;
  _DWORD *v180;
  WTF *v181;
  uint64_t v182;
  _BYTE v183[44];
  int v184;

  v177 = a7;
  v178 = a8;
  v175 = a5;
  v176 = a3;
  v179 = a2;
  v12 = *(uint64_t **)a6;
  if (!*(_QWORD *)a6 || (v13 = *v12) == 0)
  {
LABEL_11:
    v19 = **(int ***)(a6 + 8);
    if ((int *)(a1 + 208) != v19 && v19 != 0 && v19 != (int *)a4)
      JSC::BytecodeGenerator::emitMove(a1, v19, a4, a4, a5, a6, (uint64_t)a7, (uint64_t)a8);
    v174 = (WTF *)v183;
    v181 = (WTF *)v183;
    v182 = 5;
    v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v180 = v22;
    v23 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v181, &v180);
    }
    else
    {
      v24 = v181;
      if (v22)
        ++*v22;
      *((_QWORD *)v24 + v23) = v22;
      HIDWORD(v182) = v23 + 1;
    }
    v26 = v177;
    v25 = v178;
    v27 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v180 = v27;
    v28 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v181, &v180);
    }
    else
    {
      v29 = v181;
      if (v27)
        ++*v27;
      *((_QWORD *)v29 + v28) = v27;
      HIDWORD(v182) = v28 + 1;
    }
    v30 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v180 = v30;
    v31 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v181, &v180);
    }
    else
    {
      v32 = v181;
      if (v30)
        ++*v30;
      *((_QWORD *)v32 + v31) = v30;
      HIDWORD(v182) = v31 + 1;
    }
    v33 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v180 = v33;
    v34 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v181, &v180);
    }
    else
    {
      v35 = v181;
      if (v33)
        ++*v33;
      *((_QWORD *)v35 + v34) = v33;
      HIDWORD(v182) = v34 + 1;
    }
    v36 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v180 = v36;
    v43 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v181, &v180);
    }
    else
    {
      v44 = v181;
      if (v36)
        ++*v36;
      *((_QWORD *)v44 + v43) = v36;
      HIDWORD(v182) = v43 + 1;
    }
    v45 = v26[1];
    v46 = v26[2];
    if (*v26 != -1 || v45 != -1 || v46 != -1)
    {
      v47 = v25[1];
      if (*v25 != -1 || v47 != -1 || v25[2] != -1)
      {
        v48 = a9[1];
        if ((*a9 != -1 || v48 != -1 || a9[2] != -1) && !*(_BYTE *)(a1 + 707))
        {
          v49 = *(_QWORD *)(a1 + 192);
          v50 = *(_DWORD *)(v49 + 176);
          v37 = v45 - v50;
          v51 = v46 >= v50;
          v52 = v46 - v50;
          if (!v51)
            v52 = 0;
          v51 = v37 >= v52;
          v53 = v37 - v52;
          if (v51)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v37, v45 - v47, v48 - v45, (*v26 + ~*(_DWORD *)(v49 + 184)) | (unint64_t)(v53 << 32));
        }
      }
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v180, a1, v37, v38, v39, v40, v41, v42);
    v54 = v179;
    v55 = v180;
    v56 = v176;
    v65 = JSC::BytecodeGenerator::emitExpectedFunctionSnippet(a1, v179, v176, v175, a6, (uint64_t)v180, v57, v58);
    v66 = *(_DWORD *)(v54 + 4);
    v67 = *(unsigned int *)(v56 + 4);
    v68 = (*(_DWORD *)(a6 + 20) - *(_DWORD *)(a6 + 88));
    v69 = (5 - *(_DWORD *)(**(_QWORD **)(a6 + 8) + 4));
    v70 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v70 + 4) |= 1u;
    v71 = (*(_DWORD *)(v70 + 8) + 1);
    *(_DWORD *)(v70 + 8) = v71;
    v72 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v72 + 4) |= 1u;
    v73 = *(_QWORD *)(v72 + 16);
    v74 = *(unsigned int *)(v73 + 32);
    *(_DWORD *)(v73 + 32) = v74 + 1;
    v75 = (v66 - 1073741808) < 0x80;
    if (v66 <= 0x3FFFFFFF)
      v75 = (v66 + 128) < 0x90;
    if (!v75)
      goto LABEL_97;
    v76 = (v67 - 1073741808) < 0x80;
    if ((int)v67 <= 0x3FFFFFFF)
      v76 = (v67 + 128) < 0x90;
    if (v76 && (v69 | v68 | v71 | v74) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)8, v59, v60, v61, v62, v63, v64);
      LOBYTE(v184) = 8;
      v77 = *(unsigned int *)(a1 + 12);
      v78 = *(unsigned int *)(a1 + 16);
      if (v77 > v78)
      {
        *(_DWORD *)(a1 + 16) = v78 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v78) = 8;
      }
      else
      {
        if ((_DWORD)v77 == *(_DWORD *)(a1 + 8))
        {
          v122 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v184);
          v77 = *(unsigned int *)(a1 + 12);
          v79 = *(_QWORD *)a1;
          v80 = *v122;
        }
        else
        {
          v79 = *(_QWORD *)a1;
          v80 = 8;
        }
        *(_BYTE *)(v79 + v77) = v80;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v81 = v66 + 16;
      if (v66 <= 0x3FFFFFFF)
        v81 = v66;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v81);
      v82 = v67 + 16;
      if ((int)v67 <= 0x3FFFFFFF)
        v82 = v67;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v82);
      LOBYTE(v184) = v68;
      v90 = *(unsigned int *)(a1 + 12);
      v91 = *(unsigned int *)(a1 + 16);
      if (v90 > v91)
      {
        *(_DWORD *)(a1 + 16) = v91 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v91) = v68;
        v92 = *(_DWORD *)(a1 + 12);
        v93 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v90 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v90 + 1), (unint64_t)&v184);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v90) = v68;
        v92 = *(_DWORD *)(a1 + 12) + 1;
        v93 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v92;
        *(_DWORD *)(a1 + 16) = v93;
      }
      LOBYTE(v184) = v69;
      if (v92 > v93)
      {
        *(_DWORD *)(a1 + 16) = v93 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v93) = v69;
        v94 = *(_DWORD *)(a1 + 12);
        v95 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v92 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v92 + 1), (unint64_t)&v184);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v92) = v69;
        v94 = *(_DWORD *)(a1 + 12) + 1;
        v95 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v94;
        *(_DWORD *)(a1 + 16) = v95;
      }
      LOBYTE(v184) = v71;
      if (v94 > v95)
      {
        *(_DWORD *)(a1 + 16) = v95 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v95) = v71;
        v97 = *(_DWORD *)(a1 + 12);
        v98 = *(_DWORD *)(a1 + 16);
        v96 = v174;
      }
      else
      {
        if (v94 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v94 + 1), (unint64_t)&v184);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v94) = v71;
        v96 = v174;
        v97 = *(_DWORD *)(a1 + 12) + 1;
        v98 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v97;
        *(_DWORD *)(a1 + 16) = v98;
      }
      LOBYTE(v184) = v74;
      if (v97 > v98)
      {
        *(_DWORD *)(a1 + 16) = v98 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v98) = v74;
      }
      else
      {
        if (v97 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v97 + 1), (unint64_t)&v184);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v97) = v74;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_97:
      if (v66 <= 0x3FFFFFFF)
        v105 = (v66 + 0x8000) >> 6 < 0x201;
      else
        v105 = (v66 - 1073741760) < 0x8000;
      if (!v105)
        goto LABEL_168;
      v106 = (v67 - 1073741760) < 0x8000;
      if ((int)v67 <= 0x3FFFFFFF)
        v106 = (v67 + 0x8000) >> 6 < 0x201;
      if (v106 && !((v69 | v68 | v71 | v74) >> 16))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)8, v59, v60, v61, v62, v63, v64);
        LOBYTE(v184) = 0x80;
        v107 = *(unsigned int *)(a1 + 12);
        v108 = *(unsigned int *)(a1 + 16);
        if (v107 > v108)
        {
          *(_DWORD *)(a1 + 16) = v108 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v108) = 0x80;
          v111 = *(_DWORD *)(a1 + 12);
          v112 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v107 == *(_DWORD *)(a1 + 8))
          {
            v163 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v107 + 1), (unint64_t)&v184);
            v107 = *(unsigned int *)(a1 + 12);
            v109 = *(_QWORD *)a1;
            v110 = *v163;
          }
          else
          {
            v109 = *(_QWORD *)a1;
            v110 = 0x80;
          }
          *(_BYTE *)(v109 + v107) = v110;
          v111 = *(_DWORD *)(a1 + 12) + 1;
          v112 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v111;
          *(_DWORD *)(a1 + 16) = v112;
        }
        v113 = 8;
        LOBYTE(v184) = 8;
        if (v111 > v112)
        {
          *(_DWORD *)(a1 + 16) = v112 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v112) = 8;
        }
        else
        {
          v114 = v111;
          if (v111 == *(_DWORD *)(a1 + 8))
          {
            v164 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v111 + 1), (unint64_t)&v184);
            v114 = *(unsigned int *)(a1 + 12);
            v115 = *(_QWORD *)a1;
            v113 = *v164;
          }
          else
          {
            v115 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v115 + v114) = v113;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        v116 = v66 + 64;
        if (v66 <= 0x3FFFFFFF)
          v116 = v66;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v116);
        v117 = v67 + 64;
        if ((int)v67 <= 0x3FFFFFFF)
          v117 = v67;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v117);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v68);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v69);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v71);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)v74);
      }
      else
      {
LABEL_168:
        JSC::OpConstruct::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v66, v67, v68, v69, v71, v74, v64);
      }
      v96 = v174;
    }
    if (v65)
    {
      v118 = *(_DWORD *)(a1 + 16);
      JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v55, a1, v118, v85, v86, v87, v88, v89);
      v119 = *(_QWORD *)(a1 + 24);
      v120 = *(unsigned int *)(v119 + 28);
      if (!(_DWORD)v120 || v118 != *(_DWORD *)(*(_QWORD *)(v119 + 16) + 4 * v120 - 4))
      {
        v184 = v118;
        v121 = (_QWORD *)(v119 + 16);
        if ((_DWORD)v120 == *(_DWORD *)(v119 + 24))
          *(_DWORD *)(*(_QWORD *)(v119 + 16) + 4 * *(unsigned int *)(v119 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v120 + 1, (unint64_t)&v184);
        else
          *(_DWORD *)(*v121 + 4 * v120) = v118;
        ++*(_DWORD *)(v119 + 28);
        *(_DWORD *)(a1 + 36) = 115;
      }
    }
    --*v55;
    if (HIDWORD(v182))
    {
      v99 = v181;
      v100 = 8 * HIDWORD(v182);
      do
      {
        v101 = *(_DWORD **)v99;
        *(_QWORD *)v99 = 0;
        if (v101)
          --*v101;
        v99 = (WTF *)((char *)v99 + 8);
        v100 -= 8;
      }
      while (v100);
    }
    v102 = v181;
    if (v96 != v181 && v181 != 0)
    {
      v181 = 0;
      LODWORD(v182) = 0;
      WTF::fastFree((unint64_t)v102, v83, v84, v85, v86, v87, v88, v89);
    }
    return v179;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 232))(*(_QWORD *)(v13 + 40)))
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(_BYTE *)(a1 + 709);
      v16 = *(_BYTE *)(a1 + 710);
      v17 = 1;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8 * v17);
        *(_WORD *)(a1 + 709) = 0;
        if ((unint64_t)&v173 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
        {
          *(_BYTE *)(a1 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        }
        else
        {
          if (*(_BYTE *)(v14 + 24))
            JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, v14 + 8, a4, a5, a6, (uint64_t)a7, (uint64_t)a8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a1, v18);
        }
        *(_BYTE *)(a1 + 710) = v16;
        *(_BYTE *)(a1 + 709) = v15;
        v14 = *(_QWORD *)(v14 + 32);
        ++v17;
      }
      while (v14);
    }
    goto LABEL_11;
  }
  if (*(_QWORD *)(v13 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x198250FE0);
  }
  v123 = *(_QWORD **)(*(_QWORD *)(v13 + 40) + 64);
  if ((*(unsigned int (**)(_QWORD *))(*v123 + 56))(v123))
  {
    v124 = (_QWORD *)v123[4];
    if (v124)
    {
      if (!*v124 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v124[1] + 232))(v124[1]))
      {
        v130 = *(_BYTE **)(v124[1] + 64);
        v131 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
        v132 = *(_BYTE *)(a1 + 709);
        v133 = *(_BYTE *)(a1 + 710);
        *(_WORD *)(a1 + 709) = 0;
        v134 = v177;
        if ((unint64_t)&v173 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
        {
          *(_BYTE *)(a1 + 706) = 1;
          v135 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        }
        else
        {
          if (v130[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, (uint64_t)(v130 + 8), v125, v126, v127, v128, v129);
          v135 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, a1, v131);
        }
        *(_BYTE *)(a1 + 710) = v133;
        *(_BYTE *)(a1 + 709) = v132;
        v136 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a1, v135);
        v142 = v136;
        if (v136)
          ++*v136;
        v143 = v136[1];
        v144 = JSC::OpSpread::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v136[1], v143, v137, v138, v139, v140, v141);
        v150 = v178;
        if ((v144 & 1) == 0
          && (JSC::OpSpread::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v143, v143, v145, v146, v147, v148, v149) & 1) == 0)
        {
          JSC::OpSpread::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v143, v143, v145, v146, v147, v148, v149);
        }
        v151 = **(int ***)(a6 + 8);
        if ((int *)(a1 + 208) != v151 && v151 && v151 != (int *)a4)
          JSC::BytecodeGenerator::emitMove(a1, v151, a4, v145, v146, v147, v148, v149);
        v152 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        v158 = *(uint64_t **)(a6 + 8);
        v159 = *v158;
        if ((int *)(a1 + 208) == v152)
        {
          v160 = 0;
        }
        else
        {
          v160 = v152;
          if (v152 && v152 != (int *)v159)
          {
            JSC::BytecodeGenerator::emitMove(a1, v152, *v158, v153, v154, v155, v156, v157);
            v159 = **(_QWORD **)(a6 + 8);
LABEL_151:
            v161 = 0;
            ++*v160;
            goto LABEL_152;
          }
          v160 = (_DWORD *)*v158;
          if (v159)
            goto LABEL_151;
        }
        v161 = 1;
LABEL_152:
        v162 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::BytecodeGenerator::emitCallVarargs<JSC::OpConstructVarargs>(a1, v179, v176, v159, (uint64_t)v142, v162, v134, v150, a9);
        if ((v161 & 1) == 0)
          --*v160;
LABEL_154:
        --*v142;
        return v179;
      }
    }
  }
  v165 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v123 + 16))(v123, a1, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  v142 = v165;
  if (v165)
    ++*v165;
  v171 = **(_QWORD **)(a6 + 8);
  if (a1 + 208 == v171)
  {
    v171 = a1 + 208;
  }
  else if (v171 && v171 != a4)
  {
    JSC::BytecodeGenerator::emitMove(a1, **(int ***)(a6 + 8), a4, v166, v167, v168, v169, v170);
    v171 = **(_QWORD **)(a6 + 8);
  }
  v172 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitCallVarargs<JSC::OpConstructVarargs>(a1, v179, v176, v171, (uint64_t)v142, v172, v177, v178, a9);
  if (v142)
    goto LABEL_154;
  return v179;
}

uint64_t JSC::BytecodeGenerator::emitToPropertyKeyOrNumber(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

__n128 JSC::BytecodeGenerator::emitPushWithScope(uint64_t a1, uint64_t a2)
{
  int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unsigned int v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  unint64_t v18;

  JSC::BytecodeGenerator::pushLocalControlFlowScope(a1);
  v4 = (int *)JSC::BytecodeGenerator::newBlockScopeVariable(a1);
  v5 = v4[1];
  ++*v4;
  JSC::OpPushWithScope::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v5, *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4), *(_DWORD *)(a2 + 4));
  v11 = *(int **)(a1 + 248);
  if ((int *)(a1 + 208) != v11 && v11 != 0 && v11 != v4)
    JSC::BytecodeGenerator::emitMove(a1, v11, (uint64_t)v4, v6, v7, v8, v9, v10);
  v17.n128_u64[0] = 0;
  v17.n128_u64[1] = (unint64_t)v4;
  LOBYTE(v18) = 1;
  HIDWORD(v18) = 0;
  v14 = *(_DWORD *)(a1 + 124);
  if (v14 == *(_DWORD *)(a1 + 120))
  {
    result.n128_u64[0] = WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeGenerator::LexicalScopeStackEntry>(a1 + 112, (unint64_t)&v17).n128_u64[0];
  }
  else
  {
    v16 = (__n128 *)(*(_QWORD *)(a1 + 112) + 24 * v14);
    result = v17;
    v16[1].n128_u64[0] = v18;
    *v16 = result;
    ++*(_DWORD *)(a1 + 124);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitPopWithScope(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;

  result = JSC::BytecodeGenerator::emitGetParentScope((uint64_t)this, *((_QWORD *)this + 31), *(_DWORD *)(*((_QWORD *)this + 31) + 4), a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 53) - 1;
  if (*((unsigned int *)this + 111) <= v10 >> 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198251270);
  }
  *((_QWORD *)this + 53) = v10;
  --*((_DWORD *)this + 103);
  v11 = *((_DWORD *)this + 31);
  if (!v11
    || (v12 = *((_QWORD *)this + 14) + 24 * v11,
        v13 = *(_DWORD **)(v12 - 16),
        LODWORD(v12) = *(unsigned __int8 *)(v12 - 8),
        *((_DWORD *)this + 31) = v11 - 1,
        --*v13,
        !(_DWORD)v12))
  {
    __break(0xC471u);
    JUMPOUT(0x198251268);
  }
  return result;
}

char *JSC::BytecodeGenerator::emitDebugHook(char *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  if ((result[104] & 1) != 0
    && !result[707]
    && (*((_DWORD *)result + 184) != *(_DWORD *)a3
     || *((_DWORD *)result + 185) != *(_DWORD *)(a3 + 4)
     || *((_DWORD *)result + 186) != *(_DWORD *)(a3 + 8)
     || *((_DWORD *)result + 187) != a2))
  {
    v8 = *(_QWORD *)a3;
    *((_DWORD *)result + 186) = *(_DWORD *)(a3 + 8);
    *((_QWORD *)result + 92) = v8;
    v17 = a2;
    v18 = (uint64_t)result;
    *((_DWORD *)result + 187) = a2;
    v9 = *(_DWORD *)a3;
    v10 = *(_DWORD *)(a3 + 4);
    v11 = *(_DWORD *)(a3 + 8);
    if (*(_DWORD *)a3 != -1 || v10 != -1 || v11 != -1)
    {
      v12 = *((_QWORD *)result + 24);
      v13 = *(_DWORD *)(v12 + 176);
      a3 = v10 - v13;
      v14 = v11 - v13;
      if (v11 < v13)
        v14 = 0;
      v15 = a3 >= v14;
      v16 = a3 - v14;
      if (v15)
        JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*((_QWORD *)result + 3), *((unsigned int *)result + 3), a3, 0, 0, (v9 + ~*(_DWORD *)(v12 + 184)) | (unint64_t)(v16 << 32));
    }
    return JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v18, v17, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitDebugHook(JSC::BytecodeGenerator *this, JSC::StatementNode *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;

  result = (*(uint64_t (**)(JSC::StatementNode *))(*(_QWORD *)a2 + 48))(a2);
  if ((result & 1) == 0
    && (*((_BYTE *)this + 104) & 1) != 0
    && !*((_BYTE *)this + 707)
    && (*((_DWORD *)this + 184) != *((_DWORD *)a2 + 2)
     || *((_DWORD *)this + 185) != *((_DWORD *)a2 + 3)
     || *((_DWORD *)this + 186) != *((_DWORD *)a2 + 4)
     || *((_DWORD *)this + 187) != 5))
  {
    v11 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 186) = *((_DWORD *)a2 + 4);
    *((_QWORD *)this + 92) = v11;
    *((_DWORD *)this + 187) = 5;
    v12 = *((_DWORD *)a2 + 2);
    v13 = *((_DWORD *)a2 + 3);
    v14 = *((_DWORD *)a2 + 4);
    if (v12 != -1 || v13 != -1 || v14 != -1)
    {
      v15 = *((_QWORD *)this + 24);
      v16 = *(_DWORD *)(v15 + 176);
      v5 = v13 - v16;
      v17 = v14 - v16;
      if (v14 < v16)
        v17 = 0;
      v18 = v5 >= v17;
      v19 = v5 - v17;
      if (v18)
        JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*((_QWORD *)this + 3), *((unsigned int *)this + 3), v5, 0, 0, (v12 + ~*(_DWORD *)(v15 + 184)) | (unint64_t)(v19 << 32));
    }
    return (uint64_t)JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, 5, v5, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::pushFinallyControlFlowScope(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 124);
  v5 = *(_QWORD *)(result + 424);
  *(_QWORD *)(result + 424) = v5 + 1;
  v6 = v5 >> 4;
  v7 = *(unsigned int *)(result + 444);
  if (v5 >> 4 >= v7)
  {
    v8 = (_QWORD *)(result + 432);
    result = WTF::fastMalloc((WTF *)0x100);
    v11 = result;
    v9 = *(unsigned int *)(v3 + 444);
    if ((_DWORD)v9 == *(_DWORD *)(v3 + 440))
    {
      result = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 432, v9 + 1, (unint64_t)&v11);
      v9 = *(unsigned int *)(v3 + 444);
      *(_QWORD *)(*(_QWORD *)(v3 + 432) + 8 * v9) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*v8 + 8 * v9) = result;
    }
    v7 = (v9 + 1);
    *(_DWORD *)(v3 + 444) = v7;
    v5 = *(_QWORD *)(v3 + 424) - 1;
    v6 = v5 >> 4;
  }
  if (v6 >= v7)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 432) + 8 * v6) + 16 * (v5 & 0xF);
    *(_BYTE *)v10 = 1;
    *(_DWORD *)(v10 + 4) = v4 - 1;
    *(_QWORD *)(v10 + 8) = a2;
    ++*(_DWORD *)(v3 + 408);
    *(_QWORD *)(v3 + 328) = a2;
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::breakTarget(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *(_QWORD *)(a1 + 360);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(a1 + 380);
  while (1)
  {
    v4 = v2 - 1;
    v5 = (v2 - 1) >> 5;
    if (v5 >= v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1982516D0);
    }
    v6 = *(_QWORD *)(a1 + 368);
    v7 = *(_QWORD *)(v6 + 8 * v5);
    if (*(_DWORD *)(v7 + 40 * (v4 & 0x1F)))
      break;
    v8 = v7 + 40 * (v4 & 0x1F);
    v9 = *(_DWORD **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    if (v9)
      --*v9;
    v10 = v7 + 40 * (v4 & 0x1F);
    v11 = *(_DWORD **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (v11)
      --*v11;
    v12 = 0;
    *(_QWORD *)(a1 + 360) = v4;
    v2 = v4;
    if (!v4)
      return v12;
  }
  v13 = *a2;
  if (!*a2 || !*(_DWORD *)(v13 + 4))
  {
    while ((v4 & 0x80000000) == 0)
    {
      v14 = (unint64_t)v4 >> 5;
      if (v14 >= v3)
      {
LABEL_28:
        __break(0xC471u);
        JUMPOUT(0x1982516C8);
      }
      v15 = *(_QWORD *)(v6 + 8 * v14);
      v16 = v4 & 0x1F;
      LODWORD(v4) = v4 - 1;
      if (*(_DWORD *)(v15 + 40 * v16 + 4) != 2)
        return v15 + 40 * v16;
    }
    return 0;
  }
  if ((int)v2 - 1 < 0)
    return 0;
  while (1)
  {
    v2 = (v2 - 1);
    if (v2 >> 5 >= v3)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * (v2 >> 5));
    v18 = *(_QWORD **)(v17 + 40 * (v2 & 0x1F) + 8);
    if (v18)
    {
      if (*v18 == v13)
        return v17 + 40 * (v2 & 0x1F);
    }
    v12 = 0;
    if ((int)v2 < 1)
      return v12;
  }
}

uint64_t JSC::BytecodeGenerator::continueTarget(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(a1 + 360);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(a1 + 380);
  while (1)
  {
    v4 = v2 - 1;
    v5 = (v2 - 1) >> 5;
    if (v5 >= v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198251828);
    }
    v6 = *(_QWORD *)(a1 + 368);
    v7 = *(_QWORD *)(v6 + 8 * v5);
    if (*(_DWORD *)(v7 + 40 * (v4 & 0x1F)))
      break;
    v8 = v7 + 40 * (v4 & 0x1F);
    v9 = *(_DWORD **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    if (v9)
      --*v9;
    v10 = v7 + 40 * (v4 & 0x1F);
    v11 = *(_DWORD **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (v11)
      --*v11;
    v12 = 0;
    *(_QWORD *)(a1 + 360) = v4;
    v2 = v4;
    if (!v4)
      return v12;
  }
  v13 = *a2;
  if (!*a2 || !*(_DWORD *)(v13 + 4))
  {
    while ((v4 & 0x80000000) == 0)
    {
      v14 = (unint64_t)v4 >> 5;
      if (v14 >= v3)
      {
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x198251820);
      }
      v15 = *(_QWORD *)(v6 + 8 * v14);
      v16 = v4 & 0x1F;
      LODWORD(v4) = v4 - 1;
      if (!*(_DWORD *)(v15 + 40 * v16 + 4))
        return v15 + 40 * v16;
    }
    return 0;
  }
  if ((int)v2 - 1 < 0)
    return 0;
  v17 = 0;
  while (1)
  {
    v2 = (v2 - 1);
    if (v2 >> 5 >= v3)
      goto LABEL_31;
    v18 = *(_QWORD *)(v6 + 8 * (v2 >> 5)) + 40 * (v2 & 0x1F);
    if (!*(_DWORD *)(v18 + 4))
      v17 = *(_QWORD *)(v6 + 8 * (v2 >> 5)) + 40 * (v2 & 0x1F);
    v19 = *(_QWORD **)(v18 + 8);
    if (v19)
    {
      if (*v19 == v13)
        return v17;
    }
    v12 = 0;
    if ((int)v2 < 1)
      return v12;
  }
}

uint64_t JSC::BytecodeGenerator::pushTry(uint64_t a1, _DWORD *a2, _DWORD *a3, char a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _DWORD *v26;
  _QWORD *v28;
  _QWORD v29[2];

  ++*a3;
  v8 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v8 + 1;
  v9 = v8 >> 3;
  v10 = *(unsigned int *)(a1 + 612);
  if (v8 >> 3 >= v10)
  {
    v11 = (_QWORD *)(a1 + 600);
    v12 = WTF::fastMalloc((WTF *)0x80);
    v29[0] = v12;
    v13 = *(unsigned int *)(a1 + 612);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 608))
    {
      v14 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 600, v13 + 1, (unint64_t)v29);
      v13 = *(unsigned int *)(a1 + 612);
      *(_QWORD *)(*(_QWORD *)(a1 + 600) + 8 * v13) = *v14;
    }
    else
    {
      *(_QWORD *)(*v11 + 8 * v13) = v12;
    }
    v10 = (v13 + 1);
    *(_DWORD *)(a1 + 612) = v10;
    v8 = *(_QWORD *)(a1 + 592) - 1;
    v9 = v8 >> 3;
  }
  if (v9 >= v10
    || (v15 = *(_QWORD *)(a1 + 600),
        v16 = *(_QWORD *)(v15 + 8 * v9),
        v17 = v8 & 7,
        v18 = v16 + 16 * v17,
        *(_QWORD *)v18 = a3,
        *(_BYTE *)(v18 + 8) = a4,
        v19 = v8 >> 3,
        v19 >= v10))
  {
    __break(0xC471u);
    JUMPOUT(0x1982519B0);
  }
  v20 = *(_QWORD *)(v15 + 8 * v19) + 16 * v17;
  ++*a2;
  v29[0] = a2;
  v29[1] = v20;
  v21 = *(unsigned int *)(a1 + 492);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 488))
  {
    v22 = (__int128 *)WTF::Vector<JSC::TryContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 480, v21 + 1, (unint64_t)v29);
    v23 = *(unsigned int *)(a1 + 492);
    v24 = *(_QWORD *)(a1 + 480);
    v25 = *v22;
    *(_QWORD *)v22 = 0;
    *(_OWORD *)(v24 + 16 * v23) = v25;
    v26 = (_DWORD *)v29[0];
    *(_DWORD *)(a1 + 492) = v23 + 1;
    if (v26)
      --*v26;
  }
  else
  {
    v28 = (_QWORD *)(*(_QWORD *)(a1 + 480) + 16 * v21);
    *v28 = a2;
    v28[1] = v20;
    *(_DWORD *)(a1 + 492) = v21 + 1;
  }
  return v20;
}

unint64_t JSC::BytecodeGenerator::popTry(unint64_t result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  *(_BYTE *)(result + 705) = 1;
  v2 = *(unsigned int *)(result + 492);
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  v3 = result;
  v4 = *(_QWORD *)(result + 480) + 16 * v2;
  v5 = *(_DWORD **)(v4 - 16);
  ++*v5;
  ++*a2;
  v19 = v5;
  v20 = a2;
  v6 = *(_QWORD *)(v4 - 8);
  v21 = v6;
  v7 = *(unsigned int *)(result + 588);
  if ((_DWORD)v7 == *(_DWORD *)(result + 584))
  {
    result = WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 576, v7 + 1, (unint64_t)&v19);
    v8 = *(_DWORD *)(v3 + 588);
    v9 = *(_QWORD *)(v3 + 576) + 24 * v8;
    v10 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)v9 = v10;
    v11 = *(_OWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    *(_OWORD *)(v9 + 8) = v11;
    v12 = v20;
    *(_DWORD *)(v3 + 588) = v8 + 1;
    if (v12)
      --*v12;
  }
  else
  {
    v17 = *(_QWORD *)(result + 576);
    v19 = 0;
    v18 = (_QWORD *)(v17 + 24 * v7);
    *v18 = v5;
    v18[1] = a2;
    v18[2] = v6;
    *(_DWORD *)(result + 588) = v7 + 1;
  }
  if (v19)
    --*v19;
  v13 = *(unsigned int *)(v3 + 492);
  if (!(_DWORD)v13)
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198251AF0);
  }
  v14 = v13 - 1;
  v15 = *(_QWORD *)(v3 + 480);
  v16 = *(_DWORD **)(v15 + 16 * v14);
  *(_QWORD *)(v15 + 16 * v14) = 0;
  if (v16)
    --*v16;
  *(_DWORD *)(v3 + 492) = v14;
  return result;
}

uint64_t JSC::BytecodeGenerator::emitOutOfLineFinallyHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v8 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (a3)
    v9 = *(_DWORD *)(a3 + 4);
  else
    v9 = 0x3FFFFFFF;
  result = a1 + 720;
  *(_QWORD *)&v15 = a4;
  DWORD2(v15) = *(_DWORD *)(a2 + 4);
  HIDWORD(v15) = *(_DWORD *)(v8 + 4);
  LODWORD(v16) = v9;
  v11 = *(unsigned int *)(a1 + 732);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 728))
  {
    result = WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v11 + 1, (unint64_t)&v15);
    v12 = *(_QWORD *)(a1 + 720) + 24 * *(unsigned int *)(a1 + 732);
    v13 = *(_OWORD *)result;
    v14 = *(_QWORD *)(result + 16);
  }
  else
  {
    v12 = *(_QWORD *)result + 24 * v11;
    v13 = v15;
    v14 = v16;
  }
  *(_QWORD *)(v12 + 16) = v14;
  *(_OWORD *)v12 = v13;
  ++*(_DWORD *)(a1 + 732);
  return result;
}

uint64_t JSC::BytecodeGenerator::restoreScopeRegister(uint64_t this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 != -2)
  {
    v8 = this;
    if (a2 != -1)
    {
      v9 = a2 + 1;
      if (v9 - 1 >= (unint64_t)*(unsigned int *)(this + 124))
      {
        __break(0xC471u);
        return this;
      }
      v10 = v9 + 1;
      v11 = (uint64_t *)(*(_QWORD *)(this + 112) + 24 * (int)v9 - 16);
      while (--v10)
      {
        v12 = *v11;
        v11 -= 3;
        a3 = v12;
        if (v12)
        {
          v13 = *(int **)(this + 248);
          if ((int *)(this + 208) != v13 && v13 != 0 && v13 != (int *)a3)
            return (uint64_t)JSC::BytecodeGenerator::emitMove(this, v13, a3, a4, a5, a6, a7, a8);
          return this;
        }
      }
    }
    v16 = *(_DWORD *)(*(_QWORD *)(this + 248) + 4);
    this = JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(this, v16, a3, a4, a5, a6, a7, a8);
    if ((this & 1) == 0)
    {
      this = JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v8, v16, v17, v18, v19, v20, v21, v22);
      if ((this & 1) == 0)
        return JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v8, v16, v23, v24, v25, v26, v27, v28);
    }
  }
  return this;
}

uint64_t JSC::BytecodeGenerator::emitThrow(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)(a1 + 705) = 1;
  result = JSC::OpThrow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpThrow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpThrow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitArgumentCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *(_DWORD *)(a2 + 4);
  if (!JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8)
    && !JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16))
  {
    JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v18, v19, v20, v21, v22, v23);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitThrowStaticError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (v6)
  {
    v12 = v6;
    ++*v6;
    JSC::BytecodeGenerator::emitToString(a1, (uint64_t)v6, *(_DWORD *)(a3 + 4), v7, v8, v9, v10, v11);
    result = JSC::OpThrowStaticError::emit<JSC::BytecodeGenerator>(a1, v12[1], a2, v13, v14, v15, v16, v17);
    --*v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitToString(a1, 0, *(_DWORD *)(a3 + 4), v7, v8, v9, v10, v11);
    return JSC::OpThrowStaticError::emit<JSC::BytecodeGenerator>(a1, MEMORY[4], a2, v19, v20, v21, v22, v23);
  }
  return result;
}

uint64_t JSC::OpThrowStaticError::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, a3, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitThrowStaticError(uint64_t a1, uint64_t a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = JSC::BytecodeGenerator::addStringConstant(a1, a3, a3, a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue(a1, v10) + 4);
  result = JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v11, a2, v12, v13, v14, v15, v16);
  if ((result & 1) == 0)
  {
    result = JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, a2, v18, v19, v20, v21, v22);
    if ((result & 1) == 0)
      return JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, a2, v23, v24, v25, v26, v27);
  }
  return result;
}

void JSC::BytecodeGenerator::emitThrowReferenceError(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  if (a3)
  {
    if (a3 == 2)
    {
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(*(_QWORD *)(a1 + 696) + 41968), *a2, a4, a5, a6, a7, a8, &v39);
      goto LABEL_3;
    }
    --a3;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)a2, a3, a4, a5, a6, a7, a8, &v39);
LABEL_3:
  v38 = v39;
  v15 = JSC::BytecodeGenerator::addStringConstant(a1, (JSC::VM *)&v38, v9, v10, v11, v12, v13, v14);
  v16 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue(a1, v15) + 4);
  if (!JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v16, 3, v17, v18, v19, v20, v21)&& !JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v16, 3, v24, v25, v26, v27, v28))
  {
    JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v16, 3, v24, v25, v26, v27, v28);
  }
  v29 = v38;
  v38 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
}

uint64_t JSC::BytecodeGenerator::emitThrowTypeError(uint64_t a1, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = JSC::BytecodeGenerator::addStringConstant(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue(a1, v9) + 4);
  result = JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, 5, v11, v12, v13, v14, v15);
  if ((result & 1) == 0)
  {
    result = JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, 5, v17, v18, v19, v20, v21);
    if ((result & 1) == 0)
      return JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, 5, v22, v23, v24, v25, v26);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  if (!*(_BYTE *)(a1 + 712) || (result = 0, (a2 & 2) != 0) && a3)
  {
    JSC::Identifier::add(*(_QWORD *)(a1 + 696), "Attempted to assign to readonly property.", 42, a4, a5, a6, a7, a8, &v32);
    JSC::BytecodeGenerator::emitThrowTypeError(a1, (JSC::VM *)&v32, v10, v11, v12, v13, v14, v15);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    return 1;
  }
  return result;
}

void JSC::BytecodeGenerator::emitGenericEnumeration(unint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  _BOOL4 v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *AsyncIterator;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _DWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _DWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _DWORD *v280;
  _DWORD *v281;
  _DWORD *v282;
  _DWORD *v284;
  _DWORD *v285;
  _DWORD *v286;
  _DWORD *v287;
  _DWORD *v288;
  _DWORD *v289;
  unsigned int v290;
  _DWORD *v291;
  _DWORD *v292;
  _DWORD *v293;
  _DWORD *v294;
  _DWORD *v295;
  _DWORD *v296;
  uint64_t v297;
  _BYTE v298[40];
  uint64_t v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD *v302;
  _DWORD *v303;
  _DWORD *v304;
  _DWORD *v305;
  _DWORD *v306;

  if (a5)
    v10 = *(_BYTE *)(a5 + 152) != 0;
  else
    v10 = 0;
  v11 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v17 = (uint64_t)v11;
  if (v11)
    ++*v11;
  JSC::BytecodeGenerator::emitNode(a1, (uint64_t)v11, a3, v12, v13, v14, v15, v16);
  v291 = a2;
  if (v10)
    AsyncIterator = JSC::BytecodeGenerator::emitGetAsyncIterator(a1, v17, a2);
  else
    AsyncIterator = JSC::BytecodeGenerator::emitGetGenericIterator(a1, v17, a2);
  v19 = (uint64_t)AsyncIterator;
  if (AsyncIterator)
    ++*AsyncIterator;
  v20 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v20, v19, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2000), v21, v22, v23, v24);
  if (v20)
    ++*v20;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v306, a1, v25, v26, v27, v28, v29, v30);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v305, a1, v31, v32, v33, v34, v35, v36);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v304, a1, v37, v38, v39, v40, v41, v42);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v303, a1, v43, v44, v45, v46, v47, v48);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v302, a1, v49, v50, v51, v52, v53, v54);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v301, a1, v55, v56, v57, v58, v59, v60);
  v289 = v303;
  JSC::FinallyContext::FinallyContext((uint64_t)v298, (JSC::BytecodeGenerator *)a1, (uint64_t)v303);
  JSC::BytecodeGenerator::pushFinallyControlFlowScope(a1, (uint64_t)v298);
  JSC::BytecodeGenerator::newLabelScope(&v297, a1, 0, 0, v61, v62, v63, v64);
  v65 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v71 = v65;
  if (v65)
    ++*v65;
  JSC::BytecodeGenerator::emitLoad(a1, v65, 10, v66, v67, v68, v69, v70);
  v72 = v297;
  JSC::BytecodeGenerator::emitJump(a1, *(_QWORD *)(v297 + 32), v73, v74, v75, v76, v77, v78);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v296, a1, v79, v80, v81, v82, v83, v84);
  v288 = v296;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v296, v85, v86, v87, v88, v89, v90);
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a1, v91, v92, v93, v94, v95, v96, v97);
  v98 = v305;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v305, v99, v100, v101, v102, v103, v104);
  v105 = v304;
  v282 = v98;
  v106 = JSC::BytecodeGenerator::pushTry(a1, v98, v304, 3);
  (*(void (**)(_QWORD, unint64_t, int *))a4)(*(_QWORD *)(a4 + 8), a1, v71);
  JSC::BytecodeGenerator::emitJump(a1, *(_QWORD *)(v72 + 32), v107, v108, v109, v110, v111, v112);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v105, v113, v114, v115, v116, v117, v118);
  v281 = v105;
  JSC::BytecodeGenerator::popTry(a1, v105);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v295, a1, v119, v120, v121, v122, v123, v124);
  v125 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v126 = (uint64_t)v125;
  if (v125)
    ++*v125;
  v290 = v10;
  v284 = v20;
  v286 = (_DWORD *)v17;
  JSC::BytecodeGenerator::emitOutOfLineFinallyHandler(a1, v300, v299, v106);
  if (a1 + 208 != v126)
  {
    if (v126)
    {
      v127 = v300;
      if (v126 != v300)
        JSC::BytecodeGenerator::emitMove(a1, (int *)v126, v300, v128, v129, v130, v131, v132);
    }
  }
  v133 = v295;
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v295, v127, v128, v129, v130, v131, v132);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v289, v134, v135, v136, v137, v138, v139);
  JSC::BytecodeGenerator::moveEmptyValue((JSC::BytecodeGenerator *)a1, (int *)v126);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v133, v140, v141, v142, v143, v144, v145);
  JSC::BytecodeGenerator::restoreScopeRegister(a1, *(_DWORD *)(a1 + 124) - 1, v146, v147, v148, v149, v150, v151);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v294, a1, v152, v153, v154, v155, v156, v157);
  v158 = v294;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v294, v159, v160, v161, v162, v163, v164);
  v165 = v302;
  v166 = JSC::BytecodeGenerator::pushTry(a1, v158, v302, 2);
  v285 = (_DWORD *)v19;
  JSC::BytecodeGenerator::emitIteratorGenericClose(a1, v19, v291, v290, v167, v168, v169, v170);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newEmittedLabel((uint64_t *)&v293, a1, v171, v172, v173, v174, v175, v176);
  v287 = v301;
  JSC::BytecodeGenerator::emitFinallyCompletion(a1, (uint64_t)v298, (uint64_t)v301);
  v177 = v293;
  JSC::BytecodeGenerator::popTry(a1, v293);
  v280 = v165;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v165, v178, v179, v180, v181, v182, v183);
  v184 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v185 = v184;
  if (v184)
    ++*v184;
  JSC::BytecodeGenerator::emitOutOfLineFinallyHandler(a1, (uint64_t)v184, v299, v166);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v292, a1, v186, v187, v188, v189, v190, v191);
  v192 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsEmpty(a1, v192, *(_DWORD *)(v126 + 4), v193, v194, v195, v196, v197);
  v198 = v292;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v192, (uint64_t)v292, v199, v200, v201, v202, v203);
  if (v185 && v185 != (int *)v126 && (int *)(a1 + 208) != v185)
    JSC::BytecodeGenerator::emitMove(a1, v185, v126, v205, v206, v207, v208, v209);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v198, v204, v205, v206, v207, v208, v209);
  JSC::BytecodeGenerator::emitThrow(a1, v185[1], v210, v211, v212, v213, v214, v215);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v287, v216, v217, v218, v219, v220, v221);
  --*v198;
  --*v185;
  --*v177;
  --*v158;
  --*(_DWORD *)v126;
  --*v133;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, *(_QWORD *)(v72 + 32), v222, v223, v224, v225, v226, v227);
  if (a5)
  {
    JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(a1, (JSC::VariableEnvironment *)(a5 + 80), a6, v228, v229, v230, v231, v232);
    JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, *(_QWORD *)(a5 + 128) + 8, v233, v234, v235, v236, v237);
  }
  JSC::BytecodeGenerator::emitIteratorGenericNext(a1, (uint64_t)v71, (uint64_t)v284, (uint64_t)v285, v291, v290);
  v238 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v238, (uint64_t)v71, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 1200), v239, v240, v241, v242);
  v243 = v306;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, (uint64_t)v238, (uint64_t)v306, v244, v245, v246, v247, v248);
  JSC::BytecodeGenerator::emitGetById(a1, v71, (uint64_t)v71, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2608), v249, v250, v251, v252);
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v288, v253, v254, v255, v256, v257, v258);
  v265 = *(_QWORD *)(v72 + 24);
  if (*(_DWORD *)v72 == 1 && *(_DWORD *)v265 == 1 && !*(_BYTE *)(v265 + 8))
  {
    *(_QWORD *)(a1 + 328) = **(_QWORD **)(a1 + 328);
    --*(_DWORD *)(a1 + 408);
    v266 = *(_QWORD *)(a1 + 424) - 1;
    if (*(unsigned int *)(a1 + 444) > v266 >> 4)
    {
      *(_QWORD *)(a1 + 424) = v266;
      goto LABEL_32;
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x198252790);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, v265, v259, v260, v261, v262, v263, v264);
  *(_QWORD *)(a1 + 328) = **(_QWORD **)(a1 + 328);
  --*(_DWORD *)(a1 + 408);
  v278 = *(_QWORD *)(a1 + 424) - 1;
  if (*(unsigned int *)(a1 + 444) <= v278 >> 4)
    goto LABEL_45;
  *(_QWORD *)(a1 + 424) = v278;
  JSC::BytecodeGenerator::emitIteratorGenericClose(a1, (uint64_t)v285, v291, v290, v274, v275, v276, v277);
LABEL_32:
  --*v288;
  if (v71)
    --*v71;
  --*(_DWORD *)v72;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v243, v259, v260, v261, v262, v263, v264);
  JSC::FinallyContext::~FinallyContext((JSC::FinallyContext *)v298, v267, v268, v269, v270, v271, v272, v273);
  --*v287;
  --*v280;
  --*v289;
  --*v281;
  --*v282;
  --*v243;
  if (v284)
    --*v284;
  if (v285)
    --*v285;
  if (v286)
    --*v286;
}

int *JSC::BytecodeGenerator::emitGetAsyncIterator(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *GenericIterator;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int **v84;
  int *v85;
  int *v86;
  uint64_t v87;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  int v117;
  char v118[8];
  int **v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;

  v6 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v6, a2, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2704), v7, v8, v9, v10);
  if (v6)
    ++*v6;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v122, a1, v11, v12, v13, v14, v15, v16);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v121, a1, v17, v18, v19, v20, v21, v22);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v120, a1, v23, v24, v25, v26, v27, v28);
  v29 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsUndefinedOrNull(a1, v29, v6[1], v30, v31, v32, v33, v34);
  v35 = v122;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v29, (uint64_t)v122, v36, v37, v38, v39, v40);
  v41 = v121;
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v121, v42, v43, v44, v45, v46, v47);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v35, v48, v49, v50, v51, v52, v53);
  GenericIterator = JSC::BytecodeGenerator::emitGetGenericIterator(a1, a2, a3);
  v60 = GenericIterator;
  if (GenericIterator)
    ++*GenericIterator;
  v61 = (int *)(a1 + 208);
  if (v6 && v61 != v6 && v6 != GenericIterator)
    JSC::BytecodeGenerator::emitMove(a1, v6, (uint64_t)GenericIterator, v55, v56, v57, v58, v59);
  v62 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v62, (uint64_t)v6, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2000), v63, v64, v65, v66);
  if (v62)
    ++*v62;
  v72 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0x1Du, v67, v68, v69, v70, v71);
  v73 = v72;
  if (v72)
    ++*v72;
  JSC::CallArguments::CallArguments((uint64_t)v118, a1, 0, 2);
  JSC::BytecodeGenerator::emitLoad(a1, *v119, 10, v74, v75, v76, v77, v78);
  v84 = v119;
  v85 = v119[1];
  if (v61 != v85 && v85 && v85 != v6)
  {
    JSC::BytecodeGenerator::emitMove(a1, v85, (uint64_t)v6, v79, v80, v81, v82, v83);
    v84 = v119;
  }
  v86 = v84[2];
  if (v61 != v86 && v86 && v86 != v62)
    JSC::BytecodeGenerator::emitMove(a1, v86, (uint64_t)v62, v79, v80, v81, v82, v83);
  v87 = *(_QWORD *)(a1 + 192);
  v88 = *(_DWORD *)(v87 + 16);
  v116 = *(_QWORD *)(v87 + 8);
  v117 = v88;
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, (uint64_t)v6, (uint64_t)v73, 0, (uint64_t)v118, &v116, &v116, &v116, 0);
  v89 = v120;
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v120, v90, v91, v92, v93, v94, v95);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v41, v96, v97, v98, v99, v100, v101);
  JSC::BytecodeGenerator::emitCallIterator(a1, (uint64_t)v6, a2, a3);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v89, v102, v103, v104, v105, v106, v107);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)v118, v108, v109, v110, v111, v112, v113, v114);
  if (v73)
    --*v73;
  if (v62)
    --*v62;
  if (v60)
    --*v60;
  --*v89;
  --*v41;
  --*v35;
  --*v6;
  return v6;
}

_DWORD *JSC::BytecodeGenerator::emitGetGenericIterator(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v6, a2, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2712), v7, v8, v9, v10);
  if (v6)
  {
    ++*v6;
    JSC::BytecodeGenerator::emitCallIterator(a1, (uint64_t)v6, a2, a3);
    --*v6;
  }
  else
  {
    JSC::BytecodeGenerator::emitCallIterator(a1, 0, a2, a3);
  }
  return v6;
}

void JSC::BytecodeGenerator::emitIteratorGenericClose(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  WTF *v80;
  uint64_t v81;
  _DWORD *v82;
  WTF *v83;
  _BYTE v85[8];
  WTF *v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;

  v8 = a4;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v90, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v12, a2, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 384), v13, v14, v15, v16);
  if (v12)
    ++*v12;
  v17 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v18 = *(_DWORD *)(v17 + 4);
  v19 = v12[1];
  if ((JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v18, v19, v20, v21, v22, v23, v24) & 1) == 0&& (JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v18, v19, v25, v26, v27, v28, v29) & 1) == 0)
  {
    JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v18, v19, v25, v26, v27, v28, v29);
  }
  v30 = v90;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v17, (uint64_t)v90, v25, v26, v27, v28, v29);
  v31 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v32 = (uint64_t)v31;
  if (v31)
    ++*v31;
  JSC::CallArguments::CallArguments((uint64_t)v85, a1, 0, 0);
  v38 = *(int **)v86;
  if (a1 + 208 != *(_QWORD *)v86 && v38 != 0 && v38 != (int *)a2)
    JSC::BytecodeGenerator::emitMove(a1, v38, a2, v33, v34, v35, v36, v37);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, v32, (uint64_t)v12, 0, (uint64_t)v85, a3, a3 + 3, a3 + 6, 0);
  if (v8)
    JSC::BytecodeGenerator::emitAwait(a1, (int *)v32, v32, v41, v42, v43, v44, v45);
  v46 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v47 = *(_DWORD *)(v46 + 4);
  v48 = *(unsigned int *)(v32 + 4);
  if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v47, v48, v49, v50, v51, v52, v53) & 1) == 0
    && (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v47, v48, v54, v55, v56, v57, v58) & 1) == 0)
  {
    JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v47, v48, v54, v55, v56, v57, v58);
  }
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v46, (uint64_t)v30, v54, v55, v56, v57, v58);
  JSC::BytecodeGenerator::emitThrowTypeError(a1, "Iterator result interface is not an object.", 0x2CuLL, v59, v60, v61, v62, v63);
  v64 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v30, a1, v64, v65, v66, v67, v68, v69);
  v77 = *(_QWORD *)(a1 + 24);
  v78 = *(unsigned int *)(v77 + 28);
  if (!(_DWORD)v78 || v64 != *(_DWORD *)(*(_QWORD *)(v77 + 16) + 4 * v78 - 4))
  {
    v91 = v64;
    v79 = (_QWORD *)(v77 + 16);
    if ((_DWORD)v78 == *(_DWORD *)(v77 + 24))
      *(_DWORD *)(*(_QWORD *)(v77 + 16) + 4 * *(unsigned int *)(v77 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, v78 + 1, (unint64_t)&v91);
    else
      *(_DWORD *)(*v79 + 4 * v78) = v64;
    ++*(_DWORD *)(v77 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  if (v88)
  {
    v80 = v86;
    v81 = 8 * v88;
    do
    {
      v82 = *(_DWORD **)v80;
      *(_QWORD *)v80 = 0;
      if (v82)
        --*v82;
      v80 = (WTF *)((char *)v80 + 8);
      v81 -= 8;
    }
    while (v81);
  }
  v83 = v86;
  if (&v89 != (uint64_t *)v86 && v86 != 0)
  {
    v86 = 0;
    v87 = 0;
    WTF::fastFree((unint64_t)v83, v70, v71, v72, v73, v74, v75, v76);
  }
  if (v32)
    --*(_DWORD *)v32;
  if (v12)
    --*v12;
  --*v30;
}

_DWORD *JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newEmittedLabel(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *result;
  _DWORD *v18;
  uint64_t v19;
  int v20;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *a1;
  v11 = *(_DWORD *)(a2 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v10, a2, v11, v12, v13, v14, v15, v16);
  v18 = *(_DWORD **)(a2 + 24);
  v19 = v18[7];
  if (!(_DWORD)v19 || v11 != *(_DWORD *)(*((_QWORD *)v18 + 2) + 4 * v19 - 4))
  {
    v20 = v11;
    result = v18 + 4;
    if ((_DWORD)v19 == v18[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v19 + 1, (unint64_t)&v20);
      *(_DWORD *)(*((_QWORD *)v18 + 2) + 4 * v18[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v19) = v11;
    }
    ++v18[7];
    *(_DWORD *)(a2 + 36) = 115;
  }
  return result;
}

void JSC::BytecodeGenerator::emitFinallyCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x16_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int8x16_t v189;
  _DWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  _DWORD *v227;
  int v228;

  if (*(_DWORD *)(a2 + 16))
    v6 = 0;
  else
    v6 = *(_BYTE *)(a2 + 20) == 0;
  if (v6)
    goto LABEL_6;
  v42 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v43 = *(_QWORD *)(a2 + 40);
  v49 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000000, v44, v45, v46, v47, v48);
  v55 = JSC::BytecodeGenerator::emitEqualityOpImpl(a1, v42, v43, (uint64_t)v49, v50, v51, v52, v53, v54);
  if ((v55 & 1) == 0)
  {
    v61 = *(_DWORD *)(v42 + 4);
    v62 = *(unsigned int *)(v43 + 4);
    v63 = v49[1];
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v61, v62, v63, v57, v58, v59, v60) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v61, v62, v63, v57, v58, v59, v60) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v61, v62, v63, v57, v58, v59, v60);
    }
  }
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v42, a3, v56, v57, v58, v59, v60);
  v70 = *(uint64_t **)a2;
  v71 = *(unsigned int *)(a2 + 36);
  if (!(_DWORD)v71)
  {
LABEL_13:
    if (v70)
    {
      if (*(_BYTE *)(a2 + 20))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v227, a1, v64, v65, v66, v67, v68, v69);
        v109 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        v110 = *(_QWORD *)(a2 + 40);
        v116 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000002, v111, v112, v113, v114, v115);
        JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v109, v110, (uint64_t)v116, v117, v118, v119, v120, v121);
        v122 = v227;
        JSC::BytecodeGenerator::emitJumpIfFalse(a1, v109, (uint64_t)v227, v123, v124, v125, v126, v127);
        v134 = (int *)v70[5];
        if ((int *)(a1 + 208) != v134)
        {
          if (v134)
          {
            v128 = *(_QWORD *)(a2 + 40);
            if (v134 != (int *)v128)
              JSC::BytecodeGenerator::emitMove(a1, v134, v128, v129, v130, v131, v132, v133);
          }
        }
        v135 = (int *)v70[6];
        if ((int *)(a1 + 208) != v135)
        {
          if (v135)
          {
            v128 = *(_QWORD *)(a2 + 48);
            if (v135 != (int *)v128)
              JSC::BytecodeGenerator::emitMove(a1, v135, v128, v129, v130, v131, v132, v133);
          }
        }
        JSC::BytecodeGenerator::emitJump(a1, v70[1], v128, v129, v130, v131, v132, v133);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v122, v136, v137, v138, v139, v140, v141);
        --*v122;
      }
      if (v71 >= *(_DWORD *)(a2 + 16))
        goto LABEL_6;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v227, a1, v64, v65, v66, v67, v68, v69);
      v142 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      v143 = *(_QWORD *)(a2 + 40);
      v149 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000001, v144, v145, v146, v147, v148);
      JSC::OpBeloweq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(v142 + 4), *(_DWORD *)(v143 + 4), v149[1]);
      v93 = v227;
      JSC::BytecodeGenerator::emitJumpIfTrue(a1, v142, (uint64_t)v227, v150, v151, v152, v153, v154);
      v161 = (int *)v70[5];
      if ((int *)(a1 + 208) != v161)
      {
        if (v161)
        {
          v155 = *(_QWORD *)(a2 + 40);
          if (v161 != (int *)v155)
            JSC::BytecodeGenerator::emitMove(a1, v161, v155, v156, v157, v158, v159, v160);
        }
      }
      JSC::BytecodeGenerator::emitJump(a1, v70[1], v155, v156, v157, v158, v159, v160);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v93, v162, v163, v164, v165, v166, v167);
    }
    else
    {
      if (!*(_BYTE *)(a2 + 20))
        goto LABEL_6;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v227, a1, v64, v65, v66, v67, v68, v69);
      v72 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      v73 = *(_QWORD *)(a2 + 40);
      v79 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000002, v74, v75, v76, v77, v78);
      if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, v72, v73, (uint64_t)v79, v80, v81, v82, v83, v84) & 1) == 0)
      {
        v90 = *(_DWORD *)(v72 + 4);
        v91 = *(unsigned int *)(v73 + 4);
        v92 = v79[1];
        if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v90, v91, v92, v86, v87, v88, v89) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v90, v91, v92, v86, v87, v88, v89) & 1) == 0)
        {
          JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v90, v91, v92, v86, v87, v88, v89);
        }
      }
      v93 = v227;
      JSC::BytecodeGenerator::emitJumpIfFalse(a1, v72, (uint64_t)v227, v85, v86, v87, v88, v89);
      if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
      {
        v219 = *(_DWORD **)(a1 + 192);
        v220 = v219[7];
        v221 = v219[3];
        v222 = v219[4];
        if (*(_DWORD *)(a1 + 736) != v220
          || *(_DWORD *)(a1 + 740) != v221
          || *(_DWORD *)(a1 + 744) != v222
          || *(_DWORD *)(a1 + 748) != 4)
        {
          *(_DWORD *)(a1 + 736) = v220;
          *(_DWORD *)(a1 + 740) = v221;
          *(_DWORD *)(a1 + 744) = v222;
          *(_DWORD *)(a1 + 748) = 4;
          if (v220 != -1 || v221 != -1 || v222 != -1)
          {
            v223 = v219[44];
            v94 = v221 - v223;
            v224 = v222 - v223;
            if (v222 < v223)
              v224 = 0;
            v225 = v94 >= v224;
            v226 = v94 - v224;
            if (v225)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v94, 0, 0, (v220 + ~v219[46]) | (unint64_t)(v226 << 32));
          }
          JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, 4, v94, v95, v96, v97, v98, v99);
        }
      }
      JSC::BytecodeGenerator::emitReturn(a1, *(_QWORD *)(a2 + 48), v94, v95, v96, v97, v98, v99);
      v100 = *(_DWORD *)(a1 + 16);
      JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v93, a1, v100, v101, v102, v103, v104, v105);
      v106 = *(_QWORD *)(a1 + 24);
      v107 = *(unsigned int *)(v106 + 28);
      if (!(_DWORD)v107 || v100 != *(_DWORD *)(*(_QWORD *)(v106 + 16) + 4 * v107 - 4))
      {
        v228 = v100;
        v108 = (_QWORD *)(v106 + 16);
        if ((_DWORD)v107 == *(_DWORD *)(v106 + 24))
          *(_DWORD *)(*(_QWORD *)(v106 + 16) + 4 * *(unsigned int *)(v106 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v107 + 1, (unint64_t)&v228);
        else
          *(_DWORD *)(*v108 + 4 * v107) = v100;
        ++*(_DWORD *)(v106 + 28);
        *(_DWORD *)(a1 + 36) = 115;
      }
    }
    --*v93;
LABEL_6:
    v7 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v8 = *(_QWORD *)(a2 + 40);
    v14 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000001, v9, v10, v11, v12, v13);
    if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, v7, v8, (uint64_t)v14, v15, v16, v17, v18, v19) & 1) == 0)
    {
      v25 = *(_DWORD *)(v7 + 4);
      v26 = *(unsigned int *)(v8 + 4);
      v27 = v14[1];
      if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v25, v26, v27, v21, v22, v23, v24) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v25, v26, v27, v21, v22, v23, v24) & 1) == 0)
      {
        JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v25, v26, v27, v21, v22, v23, v24);
      }
    }
    JSC::BytecodeGenerator::emitJumpIfFalse(a1, v7, a3, v20, v21, v22, v23, v24);
    v28 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 705) = 1;
    v29 = *(_DWORD *)(v28 + 4);
    if (!JSC::OpThrow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v29, v30, v31, v32, v33, v34, v35)
      && !JSC::OpThrow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v29, v36, v37, v38, v39, v40, v41))
    {
      JSC::OpThrow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v29, v168, v169, v170, v171, v172, v173);
    }
    return;
  }
  v174 = 0;
  v175 = 0;
  while (1)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v227, a1, v64, v65, v66, v67, v68, v69);
    if (v175 >= *(unsigned int *)(a2 + 36))
      break;
    v176 = (unsigned int *)(*(_QWORD *)(a2 + 24) + v174);
    v177 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v178 = *(_QWORD *)(a2 + 40);
    v184 = JSC::BytecodeGenerator::emitLoad(a1, 0, *v176 | 0xFFFE000000000000, v179, v180, v181, v182, v183);
    JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v177, v178, (uint64_t)v184, v185, v186, v187, v188, v189);
    v190 = v227;
    JSC::BytecodeGenerator::emitJumpIfFalse(a1, v177, (uint64_t)v227, v191, v192, v193, v194, v195);
    JSC::BytecodeGenerator::restoreScopeRegister(a1, v176[1], v196, v197, v198, v199, v200, v201);
    JSC::BytecodeGenerator::emitLoad(a1, *(int **)(a2 + 40), 0xFFFE000000000000, v202, v203, v204, v205, v206);
    JSC::BytecodeGenerator::emitJump(a1, *((_QWORD *)v176 + 1), v207, v208, v209, v210, v211, v212);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v190, v213, v214, v215, v216, v217, v218);
    --*v190;
    ++v175;
    v174 += 16;
    if (16 * v71 == v174)
      goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t JSC::BytecodeGenerator::emitIsEmpty(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::ForOfNode::isForOfNode(JSC::ForOfNode *this)
{
  return 1;
}

uint64_t JSC::BytecodeGenerator::emitIteratorGenericNext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v57;
  int **v58;

  JSC::CallArguments::CallArguments((uint64_t)&v57, a1, 0, 0);
  v17 = *v58;
  if ((int *)(a1 + 208) != *v58 && v17 != 0 && v17 != (int *)a4)
    JSC::BytecodeGenerator::emitMove(a1, v17, a4, v12, v13, v14, v15, v16);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, a2, a3, 0, (uint64_t)&v57, a5, a5 + 3, a5 + 6, 0);
  if (a6)
    JSC::BytecodeGenerator::emitAwait(a1, (int *)a2, a2, v22, v23, v24, v25, v26);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v57, v20, v21, v22, v23, v24, v25, v26);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v57, a1, v27, v28, v29, v30, v31, v32);
  v33 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsObject(a1, v33, *(_DWORD *)(a2 + 4), v34, v35, v36, v37, v38);
  v39 = v57;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v33, (uint64_t)v57, v40, v41, v42, v43, v44);
  JSC::BytecodeGenerator::emitThrowTypeError(a1, "Iterator result interface is not an object.", 0x2CuLL, v45, v46, v47, v48, v49);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v39, v50, v51, v52, v53, v54, v55);
  --*v39;
  return a2;
}

void JSC::FinallyContext::~FinallyContext(JSC::FinallyContext *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;

  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    --*v9;
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    --*v10;
  v11 = *((unsigned int *)this + 9);
  if ((_DWORD)v11)
  {
    v13 = 16 * v11;
    v14 = (_DWORD **)(*((_QWORD *)this + 3) + 8);
    do
    {
      v15 = *v14;
      *v14 = 0;
      if (v15)
        --*v15;
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::BytecodeGenerator::emitEnumeration(unint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4, uint64_t a5, int *a6)
{
  _DWORD *v10;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD **v43;
  uint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  _DWORD *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  _DWORD *v217;
  _DWORD *v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _DWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _DWORD *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _DWORD *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _DWORD *v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _DWORD *v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  int *v297;
  int *v298;
  _DWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  _DWORD *v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _DWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _DWORD *v359;
  uint64_t v360;
  unint64_t v361;
  _DWORD *v362;
  _DWORD *v363;
  _DWORD *v364;
  _DWORD *v365;
  _DWORD *v366;
  int v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  _DWORD *v378;
  _DWORD *v379;
  int *v380;
  WTF *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _DWORD **v389;
  _DWORD *v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  int v394;
  unsigned int v395;
  uint64_t v396;
  unsigned int v397;
  BOOL v398;
  unsigned int v399;
  uint64_t v400;
  _QWORD *v401;
  _DWORD *v402;
  _DWORD *v403;
  _DWORD *v404;
  uint64_t v405;
  _DWORD *v406;
  _DWORD *v407;
  _DWORD *v408;
  _DWORD *v409;
  int *v410;
  _DWORD *v411;
  uint64_t v412;
  _DWORD *v413;
  int *v414;
  _DWORD *v415;
  _DWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _BYTE v420[24];
  WTF *v421;
  int v422;
  unsigned int v423;
  _DWORD *v424;
  _DWORD *v425;
  _DWORD *v426;
  _DWORD *v427;
  _DWORD *v428;
  _DWORD *v429;
  _DWORD *v430;
  uint64_t v431;
  __int128 v432;
  _DWORD *v433;
  _BYTE v434[76];
  _DWORD v435[3];

  v10 = a2;
  if (!byte_1ECF4C284 || a5 && *(_BYTE *)(a5 + 152))
  {
    JSC::BytecodeGenerator::emitGenericEnumeration(a1, a2, (uint64_t)a3, a4, a5, a6);
    return;
  }
  v12 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v18 = (uint64_t)v12;
  if (v12)
    ++*v12;
  v19 = *(_BYTE *)(a1 + 709);
  v20 = *(_BYTE *)(a1 + 710);
  *(_WORD *)(a1 + 709) = 0;
  if ((unint64_t)&v401 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
  {
    *(_BYTE *)(a1 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  }
  else
  {
    if (a3[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, (uint64_t)(a3 + 8), v13, v14, v15, v16, v17);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, a1, v18);
  }
  *(_BYTE *)(a1 + 710) = v20;
  *(_BYTE *)(a1 + 709) = v19;
  v21 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v22 = (uint64_t)v21;
  if (v21)
    ++*v21;
  v23 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v24 = (uint64_t)v23;
  if (v23)
    ++*v23;
  v25 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v25, v18, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2712), v26, v27, v28, v29);
  if (v25)
    ++*v25;
  JSC::CallArguments::CallArguments((uint64_t)&v432, a1, 0, 0);
  v35 = (int *)**((_QWORD **)&v432 + 1);
  v410 = (int *)(a1 + 208);
  if ((int *)(a1 + 208) != v35 && v35 && v35 != (int *)v18)
    JSC::BytecodeGenerator::emitMove(a1, v35, v18, v30, v31, v32, v33, v34);
  JSC::BytecodeGenerator::emitIteratorOpen(a1, v24, v22, (uint64_t)v25, (uint64_t)&v432, v10);
  if (HIDWORD(v433))
  {
    v43 = (_DWORD **)*((_QWORD *)&v432 + 1);
    v44 = 8 * HIDWORD(v433);
    do
    {
      v45 = *v43;
      *v43 = 0;
      if (v45)
        --*v45;
      ++v43;
      v44 -= 8;
    }
    while (v44);
  }
  v46 = *((_QWORD *)&v432 + 1);
  if (v434 != *((_BYTE **)&v432 + 1) && *((_QWORD *)&v432 + 1) != 0)
  {
    *((_QWORD *)&v432 + 1) = 0;
    LODWORD(v433) = 0;
    WTF::fastFree(v46, v36, v37, v38, v39, v40, v41, v42);
  }
  if (v25)
    --*v25;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v431, a1, v37, v38, v39, v40, v41, v42);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v430, a1, v48, v49, v50, v51, v52, v53);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v429, a1, v54, v55, v56, v57, v58, v59);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v428, a1, v60, v61, v62, v63, v64, v65);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v427, a1, v66, v67, v68, v69, v70, v71);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v426, a1, v72, v73, v74, v75, v76, v77);
  v78 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (v78)
    ++*v78;
  v414 = v78;
  JSC::BytecodeGenerator::emitLoad(a1, v78, 10, v79, v80, v81, v82, v83);
  v413 = v428;
  JSC::FinallyContext::FinallyContext((uint64_t)v420, (JSC::BytecodeGenerator *)a1, (uint64_t)v428);
  v88 = *(_DWORD *)(a1 + 124);
  v89 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v89 + 1;
  v90 = v89 >> 4;
  v91 = *(unsigned int *)(a1 + 444);
  if (v89 >> 4 >= v91)
  {
    v92 = WTF::fastMalloc((WTF *)0x100);
    *(_QWORD *)&v432 = v92;
    v93 = *(unsigned int *)(a1 + 444);
    if ((_DWORD)v93 == *(_DWORD *)(a1 + 440))
    {
      v94 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 432, v93 + 1, (unint64_t)&v432);
      v93 = *(unsigned int *)(a1 + 444);
      *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v93) = *v94;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v93) = v92;
    }
    v91 = (v93 + 1);
    *(_DWORD *)(a1 + 444) = v91;
    v89 = *(_QWORD *)(a1 + 424) - 1;
    v90 = v89 >> 4;
  }
  if (v90 >= v91)
    goto LABEL_241;
  v95 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v90) + 16 * (v89 & 0xF);
  *(_BYTE *)v95 = 1;
  *(_DWORD *)(v95 + 4) = v88 - 1;
  *(_QWORD *)(v95 + 8) = v420;
  ++*(_DWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 328) = v420;
  JSC::BytecodeGenerator::newLabelScope(&v419, a1, 0, 0, v84, v85, v86, v87);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v418, a1, v96, v97, v98, v99, v100, v101);
  v102 = *(_DWORD *)(a1 + 16);
  v412 = v418;
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v418, a1, v102, v103, v104, v105, v106, v107);
  v113 = *(_QWORD *)(a1 + 24);
  v114 = *(unsigned int *)(v113 + 28);
  if (!(_DWORD)v114 || v102 != *(_DWORD *)(*(_QWORD *)(v113 + 16) + 4 * v114 - 4))
  {
    LODWORD(v432) = v102;
    v115 = (_QWORD *)(v113 + 16);
    if ((_DWORD)v114 == *(_DWORD *)(v113 + 24))
      *(_DWORD *)(*(_QWORD *)(v113 + 16) + 4 * *(unsigned int *)(v113 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v114 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v115 + 4 * v114) = v102;
    ++*(_DWORD *)(v113 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v405 = v419;
  v116 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v419 + 32), a1, v116, v108, v109, v110, v111, v112);
  v124 = *(_QWORD *)(a1 + 24);
  v125 = *(unsigned int *)(v124 + 28);
  if (!(_DWORD)v125 || v116 != *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * v125 - 4))
  {
    LODWORD(v432) = v116;
    v126 = (_QWORD *)(v124 + 16);
    if ((_DWORD)v125 == *(_DWORD *)(v124 + 24))
      *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * *(unsigned int *)(v124 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v126, v125 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v126 + 4 * v125) = v116;
    ++*(_DWORD *)(v124 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a1, v117, v118, v119, v120, v121, v122, v123);
  v407 = (_DWORD *)v22;
  v408 = (_DWORD *)v18;
  v406 = (_DWORD *)v24;
  v409 = v10;
  if (a5)
  {
    JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(a1, (JSC::VariableEnvironment *)(a5 + 80), a6, v127, v128, v129, v130, v131);
    if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    {
      v391 = *(_QWORD *)(a5 + 128);
      if (*(_DWORD *)(a1 + 736) != *(_DWORD *)(v391 + 8)
        || *(_DWORD *)(a1 + 740) != *(_DWORD *)(v391 + 12)
        || *(_DWORD *)(a1 + 744) != *(_DWORD *)(v391 + 16)
        || *(_DWORD *)(a1 + 748) != 5)
      {
        v392 = *(_QWORD *)(v391 + 8);
        *(_DWORD *)(a1 + 744) = *(_DWORD *)(v391 + 16);
        *(_QWORD *)(a1 + 736) = v392;
        *(_DWORD *)(a1 + 748) = 5;
        v393 = *(_DWORD *)(v391 + 8);
        v394 = *(_DWORD *)(v391 + 12);
        v395 = *(_DWORD *)(v391 + 16);
        if (v393 != -1 || v394 != -1 || v395 != -1)
        {
          v396 = *(_QWORD *)(a1 + 192);
          v397 = *(_DWORD *)(v396 + 176);
          v132 = v394 - v397;
          v398 = v395 >= v397;
          v399 = v395 - v397;
          if (!v398)
            v399 = 0;
          v398 = v132 >= v399;
          v400 = v132 - v399;
          if (v398)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v132, 0, 0, (v393 + ~*(_DWORD *)(v396 + 184)) | (unint64_t)(v400 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, 5, v132, v133, v134, v135, v136, v137);
        v22 = (uint64_t)v407;
        v18 = (uint64_t)v408;
        v24 = (uint64_t)v406;
        v10 = v409;
      }
    }
  }
  v138 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v139 = v138;
  v140 = (uint64_t)v414;
  if (v138)
    ++*v138;
  JSC::CallArguments::CallArguments((uint64_t)&v432, a1, 0, 0);
  v146 = (int *)**((_QWORD **)&v432 + 1);
  v147 = v410;
  if (v410 != **((int ***)&v432 + 1) && v146 && v146 != (int *)v24)
    JSC::BytecodeGenerator::emitMove(a1, v146, v24, v141, v142, v143, v144, v145);
  JSC::BytecodeGenerator::emitIteratorNext(a1, (uint64_t)v139, v140, v18, v22, (uint64_t)&v432, v10);
  v148 = v431;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, (uint64_t)v139, v431, v149, v150, v151, v152, v153);
  if (HIDWORD(v433))
  {
    v161 = (_DWORD **)*((_QWORD *)&v432 + 1);
    v162 = 8 * HIDWORD(v433);
    do
    {
      v163 = *v161;
      *v161 = 0;
      if (v163)
        --*v163;
      ++v161;
      v162 -= 8;
    }
    while (v162);
  }
  v164 = *((_QWORD *)&v432 + 1);
  if (v434 != *((_BYTE **)&v432 + 1) && *((_QWORD *)&v432 + 1) != 0)
  {
    *((_QWORD *)&v432 + 1) = 0;
    LODWORD(v433) = 0;
    WTF::fastFree(v164, v154, v155, v156, v157, v158, v159, v160);
  }
  if (v139)
    --*v139;
  v166 = v430;
  v167 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v430, a1, v167, v156, v157, v158, v159, v160);
  v168 = *(_QWORD *)(a1 + 24);
  v169 = *(unsigned int *)(v168 + 28);
  if (!(_DWORD)v169 || v167 != *(_DWORD *)(*(_QWORD *)(v168 + 16) + 4 * v169 - 4))
  {
    LODWORD(v432) = v167;
    v170 = (_QWORD *)(v168 + 16);
    if ((_DWORD)v169 == *(_DWORD *)(v168 + 24))
      *(_DWORD *)(*(_QWORD *)(v168 + 16) + 4 * *(unsigned int *)(v168 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v170, v169 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v170 + 4 * v169) = v167;
    ++*(_DWORD *)(v168 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v171 = v429;
  v172 = JSC::BytecodeGenerator::pushTry(a1, v166, v429, 3);
  (*(void (**)(_QWORD, unint64_t, uint64_t))a4)(*(_QWORD *)(a4 + 8), a1, v140);
  v179 = v412;
  *(_BYTE *)(v412 + 8) = 1;
  v180 = *(unsigned int *)(v179 + 4);
  if ((_DWORD)v180 == -1)
    v181 = v179;
  else
    v181 = *(unsigned int *)(v179 + 4);
  if ((_DWORD)v180 == -1)
    v182 = 1;
  else
    v182 = 2;
  if (v180 == 0xFFFFFFFFLL)
    v183 = 1;
  else
    v183 = 2;
  LOBYTE(v432) = v183;
  DWORD1(v432) = 0;
  *((_QWORD *)&v432 + 1) = a1;
  v433 = (_DWORD *)v181;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v432, v173, v174, v175, v176, v177, v178) & 1) == 0)
  {
    LOBYTE(v432) = v182;
    DWORD1(v432) = 0;
    *((_QWORD *)&v432 + 1) = a1;
    v433 = (_DWORD *)v181;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v432, v184, v185, v186, v187, v188, v189) & 1) == 0)
    {
      LOBYTE(v432) = v182;
      DWORD1(v432) = 0;
      *((_QWORD *)&v432 + 1) = a1;
      v433 = (_DWORD *)v181;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, (uint64_t)&v432);
    }
  }
  v190 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v171, a1, v190, v185, v186, v187, v188, v189);
  v191 = *(_QWORD *)(a1 + 24);
  v192 = *(unsigned int *)(v191 + 28);
  if (!(_DWORD)v192 || v190 != *(_DWORD *)(*(_QWORD *)(v191 + 16) + 4 * v192 - 4))
  {
    LODWORD(v432) = v190;
    v193 = (_QWORD *)(v191 + 16);
    if ((_DWORD)v192 == *(_DWORD *)(v191 + 24))
      *(_DWORD *)(*(_QWORD *)(v191 + 16) + 4 * *(unsigned int *)(v191 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v193, v192 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v193 + 4 * v192) = v190;
    ++*(_DWORD *)(v191 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  JSC::BytecodeGenerator::popTry(a1, v171);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v417, a1, v194, v195, v196, v197, v198, v199);
  v200 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v201 = (uint64_t)v200;
  if (v200)
    ++*v200;
  v203 = v424;
  v202 = (uint64_t)v425;
  v204 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (v203)
    v211 = v203[1];
  else
    v211 = 0x3FFFFFFF;
  *(_QWORD *)&v432 = v172;
  DWORD2(v432) = *(_DWORD *)(v202 + 4);
  HIDWORD(v432) = *(_DWORD *)(v204 + 4);
  LODWORD(v433) = v211;
  v212 = *(unsigned int *)(a1 + 732);
  v213 = *(_DWORD *)(a1 + 728);
  v401 = (_QWORD *)(a1 + 720);
  if ((_DWORD)v212 == v213)
  {
    v214 = WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 720, v212 + 1, (unint64_t)&v432);
    v215 = *(_QWORD *)(a1 + 720) + 24 * *(unsigned int *)(a1 + 732);
    v216 = *(_OWORD *)v214;
    v217 = *(_DWORD **)(v214 + 16);
  }
  else
  {
    v215 = *(_QWORD *)(a1 + 720) + 24 * v212;
    v216 = v432;
    v217 = v433;
  }
  *(_QWORD *)(v215 + 16) = v217;
  *(_OWORD *)v215 = v216;
  v402 = v171;
  ++*(_DWORD *)(a1 + 732);
  if (v147 != (int *)v201)
  {
    if (v201)
    {
      v205 = (uint64_t)v425;
      if ((_DWORD *)v201 != v425)
        JSC::BytecodeGenerator::emitMove(a1, (int *)v201, (uint64_t)v425, v206, v207, v208, v209, v210);
    }
  }
  v218 = (_DWORD *)v417;
  *(_BYTE *)(v417 + 8) = 1;
  v219 = v218[1];
  if ((_DWORD)v219 == -1)
    v220 = (unint64_t)v218;
  else
    v220 = v218[1];
  if ((_DWORD)v219 == -1)
    v221 = 1;
  else
    v221 = 2;
  if (v219 == 0xFFFFFFFFLL)
    v222 = 1;
  else
    v222 = 2;
  LOBYTE(v432) = v222;
  DWORD1(v432) = 0;
  *((_QWORD *)&v432 + 1) = a1;
  v433 = (_DWORD *)v220;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v432, v205, v206, v207, v208, v209, v210) & 1) == 0)
  {
    LOBYTE(v432) = v221;
    DWORD1(v432) = 0;
    *((_QWORD *)&v432 + 1) = a1;
    v433 = (_DWORD *)v220;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v432, v223, v224, v225, v226, v227, v228) & 1) == 0)
    {
      LOBYTE(v432) = v221;
      DWORD1(v432) = 0;
      *((_QWORD *)&v432 + 1) = a1;
      v433 = (_DWORD *)v220;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, (uint64_t)&v432);
    }
  }
  v229 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v413, a1, v229, v224, v225, v226, v227, v228);
  v230 = *(_QWORD *)(a1 + 24);
  v231 = *(unsigned int *)(v230 + 28);
  if (!(_DWORD)v231 || v229 != *(_DWORD *)(*(_QWORD *)(v230 + 16) + 4 * v231 - 4))
  {
    LODWORD(v432) = v229;
    v232 = (_QWORD *)(v230 + 16);
    if ((_DWORD)v231 == *(_DWORD *)(v230 + 24))
      *(_DWORD *)(*(_QWORD *)(v230 + 16) + 4 * *(unsigned int *)(v230 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v232, v231 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v232 + 4 * v231) = v229;
    ++*(_DWORD *)(v230 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v233 = (_DWORD *)JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a1);
  v239 = v233;
  if (v233)
    ++*v233;
  if (v147 != (int *)v201 && v201 && v233 != (_DWORD *)v201)
    JSC::BytecodeGenerator::emitMove(a1, (int *)v201, (uint64_t)v233, v234, v235, v236, v237, v238);
  if (v239)
    --*v239;
  v240 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v218, a1, v240, v234, v235, v236, v237, v238);
  v247 = *(_QWORD *)(a1 + 24);
  v248 = *(unsigned int *)(v247 + 28);
  if (!(_DWORD)v248 || v240 != *(_DWORD *)(*(_QWORD *)(v247 + 16) + 4 * v248 - 4))
  {
    LODWORD(v432) = v240;
    v249 = (_QWORD *)(v247 + 16);
    if ((_DWORD)v248 == *(_DWORD *)(v247 + 24))
      *(_DWORD *)(*(_QWORD *)(v247 + 16) + 4 * *(unsigned int *)(v247 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v249, v248 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v249 + 4 * v248) = v240;
    ++*(_DWORD *)(v247 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  JSC::BytecodeGenerator::restoreScopeRegister(a1, *(_DWORD *)(a1 + 124) - 1, v241, v242, v243, v244, v245, v246);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v416, a1, v250, v251, v252, v253, v254, v255);
  v256 = v416;
  v257 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v416, a1, v257, v258, v259, v260, v261, v262);
  v263 = *(_QWORD *)(a1 + 24);
  v264 = *(unsigned int *)(v263 + 28);
  if (!(_DWORD)v264 || v257 != *(_DWORD *)(*(_QWORD *)(v263 + 16) + 4 * v264 - 4))
  {
    LODWORD(v432) = v257;
    v265 = (_QWORD *)(v263 + 16);
    if ((_DWORD)v264 == *(_DWORD *)(v263 + 24))
      *(_DWORD *)(*(_QWORD *)(v263 + 16) + 4 * *(unsigned int *)(v263 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v265, v264 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v265 + 4 * v264) = v257;
    ++*(_DWORD *)(v263 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v403 = v166;
  v411 = v427;
  v266 = JSC::BytecodeGenerator::pushTry(a1, v256, v427, 2);
  JSC::BytecodeGenerator::emitIteratorGenericClose(a1, v24, v409, 0, v267, v268, v269, v270);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v415, a1, v271, v272, v273, v274, v275, v276);
  v277 = v415;
  v278 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v415, a1, v278, v279, v280, v281, v282, v283);
  v284 = *(_QWORD *)(a1 + 24);
  v285 = *(unsigned int *)(v284 + 28);
  if (!(_DWORD)v285 || v278 != *(_DWORD *)(*(_QWORD *)(v284 + 16) + 4 * v285 - 4))
  {
    LODWORD(v432) = v278;
    v286 = (_QWORD *)(v284 + 16);
    if ((_DWORD)v285 == *(_DWORD *)(v284 + 24))
      *(_DWORD *)(*(_QWORD *)(v284 + 16) + 4 * *(unsigned int *)(v284 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v286, v285 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v286 + 4 * v285) = v278;
    ++*(_DWORD *)(v284 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v404 = (_DWORD *)v148;
  v287 = v426;
  JSC::BytecodeGenerator::emitFinallyCompletion(a1, (uint64_t)v420, (uint64_t)v426);
  JSC::BytecodeGenerator::popTry(a1, v277);
  v288 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v411, a1, v288, v289, v290, v291, v292, v293);
  v294 = *(_QWORD *)(a1 + 24);
  v295 = *(unsigned int *)(v294 + 28);
  if (!(_DWORD)v295 || v288 != *(_DWORD *)(*(_QWORD *)(v294 + 16) + 4 * v295 - 4))
  {
    LODWORD(v432) = v288;
    v296 = (_QWORD *)(v294 + 16);
    if ((_DWORD)v295 == *(_DWORD *)(v294 + 24))
      *(_DWORD *)(*(_QWORD *)(v294 + 16) + 4 * *(unsigned int *)(v294 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v296, v295 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v296 + 4 * v295) = v288;
    ++*(_DWORD *)(v294 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v297 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v298 = v297;
  if (v297)
    ++*v297;
  v299 = v424;
  v300 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (v299)
    v307 = v299[1];
  else
    v307 = 0x3FFFFFFF;
  *(_QWORD *)&v432 = v266;
  DWORD2(v432) = v298[1];
  HIDWORD(v432) = *(_DWORD *)(v300 + 4);
  LODWORD(v433) = v307;
  v308 = *(unsigned int *)(a1 + 732);
  if ((_DWORD)v308 == *(_DWORD *)(a1 + 728))
  {
    v309 = WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v401, v308 + 1, (unint64_t)&v432);
    v310 = *(_QWORD *)(a1 + 720) + 24 * *(unsigned int *)(a1 + 732);
    v311 = *(_OWORD *)v309;
    v312 = *(_DWORD **)(v309 + 16);
  }
  else
  {
    v310 = *v401 + 24 * v308;
    v311 = v432;
    v312 = v433;
  }
  *(_QWORD *)(v310 + 16) = v312;
  *(_OWORD *)v310 = v311;
  ++*(_DWORD *)(a1 + 732);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v432, a1, v301, v302, v303, v304, v305, v306);
  v313 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v314 = *(_DWORD *)(v313 + 4);
  v315 = *(unsigned int *)(v201 + 4);
  if ((JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v314, v315, v316, v317, v318, v319, v320) & 1) == 0&& (JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v314, v315, v321, v322, v323, v324, v325) & 1) == 0)
  {
    JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v314, v315, v321, v322, v323, v324, v325);
  }
  v326 = (_DWORD *)v432;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v313, v432, v321, v322, v323, v324, v325);
  if (v298 && v298 != (int *)v201 && v410 != v298)
    JSC::BytecodeGenerator::emitMove(a1, v298, v201, v327, v328, v329, v330, v331);
  v332 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v326, a1, v332, v327, v328, v329, v330, v331);
  v339 = *(_QWORD *)(a1 + 24);
  v340 = *(unsigned int *)(v339 + 28);
  if (!(_DWORD)v340 || v332 != *(_DWORD *)(*(_QWORD *)(v339 + 16) + 4 * v340 - 4))
  {
    v435[0] = v332;
    v341 = (_QWORD *)(v339 + 16);
    if ((_DWORD)v340 == *(_DWORD *)(v339 + 24))
      *(_DWORD *)(*(_QWORD *)(v339 + 16) + 4 * *(unsigned int *)(v339 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v341, v340 + 1, (unint64_t)v435);
    else
      *(_DWORD *)(*v341 + 4 * v340) = v332;
    ++*(_DWORD *)(v339 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  *(_BYTE *)(a1 + 705) = 1;
  v342 = v298[1];
  if (!JSC::OpThrow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v342, v333, v334, v335, v336, v337, v338)&& !JSC::OpThrow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v342, v343, v344, v345, v346, v347, v348))
  {
    JSC::OpThrow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v342, v387, v344, v345, v346, v347, v348);
  }
  v349 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v287, a1, v349, v344, v345, v346, v347, v348);
  v356 = *(_QWORD *)(a1 + 24);
  v357 = *(unsigned int *)(v356 + 28);
  if (!(_DWORD)v357 || v349 != *(_DWORD *)(*(_QWORD *)(v356 + 16) + 4 * v357 - 4))
  {
    v435[0] = v349;
    v358 = (_QWORD *)(v356 + 16);
    if ((_DWORD)v357 == *(_DWORD *)(v356 + 24))
      *(_DWORD *)(*(_QWORD *)(v356 + 16) + 4 * *(unsigned int *)(v356 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v358, v357 + 1, (unint64_t)v435);
    else
      *(_DWORD *)(*v358 + 4 * v357) = v349;
    ++*(_DWORD *)(v356 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  --*v326;
  --*v298;
  --*v277;
  --*v256;
  --*(_DWORD *)v201;
  --*v218;
  v359 = (_DWORD *)v405;
  v360 = *(_QWORD *)(v405 + 24);
  if (*(_DWORD *)v405 == 1 && *(_DWORD *)v360 == 1 && !*(_BYTE *)(v360 + 8))
  {
    *(_QWORD *)(a1 + 328) = **(_QWORD **)(a1 + 328);
    --*(_DWORD *)(a1 + 408);
    v361 = *(_QWORD *)(a1 + 424) - 1;
    v363 = v407;
    v362 = v408;
    v364 = v406;
    v365 = v404;
    v366 = v402;
    if (*(unsigned int *)(a1 + 444) <= v361 >> 4)
    {
      __break(0xC471u);
      JUMPOUT(0x198254ABCLL);
    }
    *(_QWORD *)(a1 + 424) = v361;
    goto LABEL_169;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, v360, v350, v351, v352, v353, v354, v355);
  *(_QWORD *)(a1 + 328) = **(_QWORD **)(a1 + 328);
  --*(_DWORD *)(a1 + 408);
  v386 = *(_QWORD *)(a1 + 424) - 1;
  v363 = v407;
  v362 = v408;
  v364 = v406;
  v365 = v404;
  v366 = v402;
  if (*(unsigned int *)(a1 + 444) <= v386 >> 4)
  {
LABEL_241:
    __break(0xC471u);
    JUMPOUT(0x198254AB4);
  }
  *(_QWORD *)(a1 + 424) = v386;
  JSC::BytecodeGenerator::emitIteratorGenericClose(a1, (uint64_t)v364, v409, 0, v382, v383, v384, v385);
LABEL_169:
  --*(_DWORD *)v412;
  --*v359;
  v367 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v365, a1, v367, v351, v352, v353, v354, v355);
  v375 = *(_QWORD *)(a1 + 24);
  v376 = *(unsigned int *)(v375 + 28);
  if (!(_DWORD)v376 || v367 != *(_DWORD *)(*(_QWORD *)(v375 + 16) + 4 * v376 - 4))
  {
    LODWORD(v432) = v367;
    v377 = (_QWORD *)(v375 + 16);
    if ((_DWORD)v376 == *(_DWORD *)(v375 + 24))
      *(_DWORD *)(*(_QWORD *)(v375 + 16) + 4 * *(unsigned int *)(v375 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v377, v376 + 1, (unint64_t)&v432);
    else
      *(_DWORD *)(*v377 + 4 * v376) = v367;
    ++*(_DWORD *)(v375 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v378 = v425;
  v425 = 0;
  if (v378)
    --*v378;
  v379 = v424;
  v424 = 0;
  v380 = v414;
  if (v379)
    --*v379;
  if (v423)
  {
    v388 = 16 * v423;
    v389 = (_DWORD **)((char *)v421 + 8);
    do
    {
      v390 = *v389;
      *v389 = 0;
      if (v390)
        --*v390;
      v389 += 2;
      v388 -= 16;
    }
    while (v388);
  }
  v381 = v421;
  if (v421)
  {
    v421 = 0;
    v422 = 0;
    WTF::fastFree((unint64_t)v381, v368, v369, v370, v371, v372, v373, v374);
  }
  if (v380)
    --*v380;
  --*v287;
  --*v411;
  --*v413;
  --*v366;
  --*v403;
  --*v365;
  if (v364)
    --*v364;
  if (v363)
    --*v363;
  if (v362)
    --*v362;
}

void JSC::BytecodeGenerator::emitIteratorOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  _DWORD *v12;
  _DWORD *v13;
  WTF *v14;
  _DWORD *v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int16 v54;
  unsigned int v55;
  _BOOL4 v56;
  _BOOL4 v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  WTF *v86;
  uint64_t v87;
  _DWORD *v88;
  WTF *v89;
  char *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  unsigned int v96;
  _DWORD *v97;
  WTF *v98;
  uint64_t v99;
  _QWORD v100[5];

  v98 = (WTF *)v100;
  v99 = 5;
  v12 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v97 = v12;
  if (v12)
    ++*v12;
  v100[0] = v12;
  HIDWORD(v99) = 1;
  v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v97 = v13;
  if ((_DWORD)v99 == 1)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v98, &v97);
  }
  else
  {
    v14 = v98;
    if (v13)
      ++*v13;
    *((_QWORD *)v14 + 1) = v13;
    HIDWORD(v99) = 2;
  }
  v15 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v97 = v15;
  v16 = HIDWORD(v99);
  if (HIDWORD(v99) == (_DWORD)v99)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v98, &v97);
  }
  else
  {
    v17 = v98;
    if (v15)
      ++*v15;
    *((_QWORD *)v17 + v16) = v15;
    HIDWORD(v99) = v16 + 1;
  }
  v18 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v97 = v18;
  v19 = HIDWORD(v99);
  if (HIDWORD(v99) == (_DWORD)v99)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v98, &v97);
  }
  else
  {
    v20 = v98;
    if (v18)
      ++*v18;
    *((_QWORD *)v20 + v19) = v18;
    HIDWORD(v99) = v19 + 1;
  }
  v21 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v97 = v21;
  v28 = HIDWORD(v99);
  if (HIDWORD(v99) == (_DWORD)v99)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v98, &v97);
  }
  else
  {
    v29 = v98;
    if (v21)
      ++*v21;
    *((_QWORD *)v29 + v28) = v21;
    HIDWORD(v99) = v28 + 1;
  }
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)(a6 + 3), v23, v24, v25, v26, v27);
  v30 = a6[1];
  v31 = a6[2];
  if (*a6 != -1 || v30 != -1 || v31 != -1)
  {
    v32 = a6[4];
    if (a6[3] != -1 || v32 != -1 || a6[5] != -1)
    {
      v33 = a6[7];
      if ((a6[6] != -1 || v33 != -1 || a6[8] != -1) && !*(_BYTE *)(a1 + 707))
      {
        v34 = *(_QWORD *)(a1 + 192);
        v35 = *(_DWORD *)(v34 + 176);
        v22 = v30 - v35;
        v36 = v31 >= v35;
        v37 = v31 - v35;
        if (!v36)
          v37 = 0;
        v36 = v22 >= v37;
        v38 = v22 - v37;
        if (v36)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v22, v30 - v32, v33 - v30, (*a6 + ~*(_DWORD *)(v34 + 184)) | (unint64_t)(v38 << 32));
      }
    }
  }
  v39 = *(_DWORD *)(a2 + 4);
  v40 = *(unsigned int *)(a3 + 4);
  v41 = *(unsigned int *)(a4 + 4);
  v42 = *(unsigned int *)(**(_QWORD **)(a5 + 8) + 4);
  v43 = 5 - v42;
  v44 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v44 + 4) |= 1u;
  v45 = (*(_DWORD *)(v44 + 8) + 1);
  *(_DWORD *)(v44 + 8) = v45;
  v46 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v46 + 4) |= 1u;
  v47 = (*(_DWORD *)(v46 + 8) + 1);
  *(_DWORD *)(v46 + 8) = v47;
  v48 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v48 + 4) |= 1u;
  v49 = *(_DWORD *)(v48 + 8) + 1;
  *(_DWORD *)(v48 + 8) = v49;
  v50 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v50 + 4) |= 1u;
  v51 = *(_QWORD *)(v50 + 16);
  v52 = *(_DWORD *)(v51 + 16);
  *(_DWORD *)(v51 + 16) = v52 + 1;
  v53 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v54 = *(_WORD *)(v53 + 28);
  v53 += 28;
  v55 = ((*(unsigned __int8 *)(v53 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v53 = v54;
  *(_BYTE *)(v53 + 2) = v55;
  v56 = (v39 - 1073741808) < 0x80;
  if (v39 <= 0x3FFFFFFF)
    v56 = (v39 + 128) < 0x90;
  v96 = v52;
  if (!v56)
    goto LABEL_92;
  if (!((int)v40 <= 0x3FFFFFFF ? (v40 + 128) < 0x90 : (v40 - 1073741808) < 0x80))
    goto LABEL_92;
  v58 = (v41 - 1073741808) < 0x80;
  if ((int)v41 <= 0x3FFFFFFF)
    v58 = (v41 + 128) < 0x90;
  if (!v58)
    goto LABEL_92;
  v59 = (v42 - 1073741808) < 0x80;
  if ((int)v42 <= 0x3FFFFFFF)
    v59 = (v42 + 128) < 0x90;
  if (v59 && (v45 | v43 | v47 | v49 | v52) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)4, v22, v23, v24, v25, v26, v27);
    LOBYTE(v97) = 4;
    v60 = *(unsigned int *)(a1 + 12);
    v61 = *(unsigned int *)(a1 + 16);
    if (v60 > v61)
    {
      *(_DWORD *)(a1 + 16) = v61 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v61) = 4;
    }
    else
    {
      if ((_DWORD)v60 == *(_DWORD *)(a1 + 8))
      {
        v91 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v60 + 1), (unint64_t)&v97);
        v60 = *(unsigned int *)(a1 + 12);
        v62 = *(_QWORD *)a1;
        v63 = *v91;
      }
      else
      {
        v62 = *(_QWORD *)a1;
        v63 = 4;
      }
      *(_BYTE *)(v62 + v60) = v63;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v64 = v39 + 16;
    if (v39 <= 0x3FFFFFFF)
      v64 = v39;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v64);
    v65 = v40 + 16;
    if ((int)v40 <= 0x3FFFFFFF)
      v65 = v40;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v65);
    v66 = v41 + 16;
    if ((int)v41 <= 0x3FFFFFFF)
      v66 = v41;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v66);
    v67 = v42 + 16;
    if ((int)v42 <= 0x3FFFFFFF)
      v67 = v42;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v67);
    LOBYTE(v97) = 5 - v42;
    v75 = *(unsigned int *)(a1 + 12);
    v76 = *(unsigned int *)(a1 + 16);
    if (v75 > v76)
    {
      *(_DWORD *)(a1 + 16) = v76 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v76) = v43;
      v78 = *(_DWORD *)(a1 + 12);
      v79 = *(_DWORD *)(a1 + 16);
      v77 = v96;
    }
    else
    {
      v77 = v96;
      if ((_DWORD)v75 == *(_DWORD *)(a1 + 8))
      {
        v92 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v75 + 1), (unint64_t)&v97);
        v77 = v96;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v92;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v75) = v43;
      }
      v78 = *(_DWORD *)(a1 + 12) + 1;
      v79 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v78;
      *(_DWORD *)(a1 + 16) = v79;
    }
    LOBYTE(v97) = v45;
    if (v78 > v79)
    {
      *(_DWORD *)(a1 + 16) = v79 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v79) = v45;
      v80 = *(_DWORD *)(a1 + 12);
      v81 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v78 == *(_DWORD *)(a1 + 8))
      {
        v93 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v78 + 1), (unint64_t)&v97);
        v77 = v96;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v93;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v78) = v45;
      }
      v80 = *(_DWORD *)(a1 + 12) + 1;
      v81 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v80;
      *(_DWORD *)(a1 + 16) = v81;
    }
    LOBYTE(v97) = v47;
    if (v80 > v81)
    {
      *(_DWORD *)(a1 + 16) = v81 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v81) = v47;
      v82 = *(_DWORD *)(a1 + 12);
      v83 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v80 == *(_DWORD *)(a1 + 8))
      {
        v94 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v80 + 1), (unint64_t)&v97);
        v77 = v96;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v94;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v80) = v47;
      }
      v82 = *(_DWORD *)(a1 + 12) + 1;
      v83 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v82;
      *(_DWORD *)(a1 + 16) = v83;
    }
    LOBYTE(v97) = v49;
    if (v82 > v83)
    {
      *(_DWORD *)(a1 + 16) = v83 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v83) = v49;
      v84 = *(_DWORD *)(a1 + 12);
      v85 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v82 == *(_DWORD *)(a1 + 8))
      {
        v95 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v82 + 1), (unint64_t)&v97);
        v77 = v96;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v95;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v82) = v49;
      }
      v84 = *(_DWORD *)(a1 + 12) + 1;
      v85 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v84;
      *(_DWORD *)(a1 + 16) = v85;
    }
    LOBYTE(v97) = v77;
    if (v84 > v85)
    {
      *(_DWORD *)(a1 + 16) = v85 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v85) = v77;
    }
    else
    {
      if (v84 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v97);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v84) = v77;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_92:
    if (!JSC::OpIteratorOpen::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v39, v40, v41, v42, 5 - v42, v45, v47, v49, v52))JSC::OpIteratorOpen::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v39, v40, v41, v42, (5 - v42), v45, v47,
        v49,
        v96);
  }
  if (HIDWORD(v99))
  {
    v86 = v98;
    v87 = 8 * HIDWORD(v99);
    do
    {
      v88 = *(_DWORD **)v86;
      *(_QWORD *)v86 = 0;
      if (v88)
        --*v88;
      v86 = (WTF *)((char *)v86 + 8);
      v87 -= 8;
    }
    while (v87);
  }
  v89 = v98;
  if (v100 != (_QWORD *)v98 && v98 != 0)
  {
    v98 = 0;
    LODWORD(v99) = 0;
    WTF::fastFree((unint64_t)v89, v68, v69, v70, v71, v72, v73, v74);
  }
}

void JSC::BytecodeGenerator::emitIteratorNext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  _DWORD *v14;
  _DWORD *v15;
  WTF *v16;
  _DWORD *v17;
  uint64_t v18;
  WTF *v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  unsigned int v58;
  _BOOL4 v59;
  _BOOL4 v61;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  WTF *v92;
  uint64_t v93;
  _DWORD *v94;
  WTF *v95;
  char *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  unsigned int v102;
  unsigned int v103;
  _DWORD *v104;
  WTF *v105;
  uint64_t v106;
  _QWORD v107[5];

  v105 = (WTF *)v107;
  v106 = 5;
  v14 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v104 = v14;
  if (v14)
    ++*v14;
  v107[0] = v14;
  HIDWORD(v106) = 1;
  v15 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v104 = v15;
  if ((_DWORD)v106 == 1)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
  }
  else
  {
    v16 = v105;
    if (v15)
      ++*v15;
    *((_QWORD *)v16 + 1) = v15;
    HIDWORD(v106) = 2;
  }
  v17 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v104 = v17;
  v18 = HIDWORD(v106);
  if (HIDWORD(v106) == (_DWORD)v106)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
  }
  else
  {
    v19 = v105;
    if (v17)
      ++*v17;
    *((_QWORD *)v19 + v18) = v17;
    HIDWORD(v106) = v18 + 1;
  }
  v20 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v104 = v20;
  v21 = HIDWORD(v106);
  if (HIDWORD(v106) == (_DWORD)v106)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
  }
  else
  {
    v22 = v105;
    if (v20)
      ++*v20;
    *((_QWORD *)v22 + v21) = v20;
    HIDWORD(v106) = v21 + 1;
  }
  v23 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v104 = v23;
  v30 = HIDWORD(v106);
  if (HIDWORD(v106) == (_DWORD)v106)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
  }
  else
  {
    v31 = v105;
    if (v23)
      ++*v23;
    *((_QWORD *)v31 + v30) = v23;
    HIDWORD(v106) = v30 + 1;
  }
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    JSC::BytecodeGenerator::emitDebugHook((char *)a1, 6, (uint64_t)(a7 + 3), v25, v26, v27, v28, v29);
  v32 = a7[1];
  v33 = a7[2];
  if (*a7 != -1 || v32 != -1 || v33 != -1)
  {
    v34 = a7[4];
    if (a7[3] != -1 || v34 != -1 || a7[5] != -1)
    {
      v35 = a7[7];
      if ((a7[6] != -1 || v35 != -1 || a7[8] != -1) && !*(_BYTE *)(a1 + 707))
      {
        v36 = *(_QWORD *)(a1 + 192);
        v37 = *(_DWORD *)(v36 + 176);
        v24 = v32 - v37;
        v38 = v33 >= v37;
        v39 = v33 - v37;
        if (!v38)
          v39 = 0;
        v38 = v24 >= v39;
        v40 = v24 - v39;
        if (v38)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v24, v32 - v34, v35 - v32, (*a7 + ~*(_DWORD *)(v36 + 184)) | (unint64_t)(v40 << 32));
      }
    }
  }
  v41 = *(_DWORD *)(a2 + 4);
  v42 = *(unsigned int *)(a3 + 4);
  v43 = *(unsigned int *)(a4 + 4);
  v44 = *(unsigned int *)(a5 + 4);
  v45 = *(unsigned int *)(**(_QWORD **)(a6 + 8) + 4);
  v46 = 5 - v45;
  v47 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v47 + 4) |= 1u;
  v48 = (*(_DWORD *)(v47 + 8) + 1);
  *(_DWORD *)(v47 + 8) = v48;
  v49 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v49 + 4) |= 1u;
  v50 = *(_DWORD *)(v49 + 8) + 1;
  *(_DWORD *)(v49 + 8) = v50;
  v51 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v51 + 4) |= 1u;
  v52 = *(_DWORD *)(v51 + 8) + 1;
  *(_DWORD *)(v51 + 8) = v52;
  v53 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v53 + 4) |= 1u;
  v54 = *(_QWORD *)(v53 + 16);
  v55 = *(_DWORD *)(v54 + 8);
  *(_DWORD *)(v54 + 8) = v55 + 1;
  v56 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v57 = *(_WORD *)(v56 + 28);
  v56 += 28;
  v58 = ((*(unsigned __int8 *)(v56 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v56 = v57;
  *(_BYTE *)(v56 + 2) = v58;
  v59 = (v41 - 1073741808) < 0x80;
  if (v41 <= 0x3FFFFFFF)
    v59 = (v41 + 128) < 0x90;
  v102 = v52;
  v103 = v55;
  if (!v59)
    goto LABEL_98;
  if (!((int)v42 <= 0x3FFFFFFF ? (v42 + 128) < 0x90 : (v42 - 1073741808) < 0x80))
    goto LABEL_98;
  v61 = (v43 - 1073741808) < 0x80;
  if ((int)v43 <= 0x3FFFFFFF)
    v61 = (v43 + 128) < 0x90;
  if (!v61)
    goto LABEL_98;
  if (!((int)v44 <= 0x3FFFFFFF ? (v44 + 128) < 0x90 : (v44 - 1073741808) < 0x80))
    goto LABEL_98;
  v63 = (v45 - 1073741808) < 0x80;
  if ((int)v45 <= 0x3FFFFFFF)
    v63 = (v45 + 128) < 0x90;
  if (v63 && (v48 | v46 | v50 | v52 | v55) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)2, v24, v25, v26, v27, v28, v29);
    LOBYTE(v104) = 2;
    v64 = *(unsigned int *)(a1 + 12);
    v65 = *(unsigned int *)(a1 + 16);
    if (v64 > v65)
    {
      *(_DWORD *)(a1 + 16) = v65 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v65) = 2;
    }
    else
    {
      if ((_DWORD)v64 == *(_DWORD *)(a1 + 8))
      {
        v97 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v64 + 1), (unint64_t)&v104);
        v64 = *(unsigned int *)(a1 + 12);
        v66 = *(_QWORD *)a1;
        v67 = *v97;
      }
      else
      {
        v66 = *(_QWORD *)a1;
        v67 = 2;
      }
      *(_BYTE *)(v66 + v64) = v67;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v68 = v41 + 16;
    if (v41 <= 0x3FFFFFFF)
      v68 = v41;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v68);
    v69 = v42 + 16;
    if ((int)v42 <= 0x3FFFFFFF)
      v69 = v42;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v69);
    v70 = v43 + 16;
    if ((int)v43 <= 0x3FFFFFFF)
      v70 = v43;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v70);
    v71 = v44 + 16;
    if ((int)v44 <= 0x3FFFFFFF)
      v71 = v44;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v71);
    v72 = v45 + 16;
    if ((int)v45 <= 0x3FFFFFFF)
      v72 = v45;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v72);
    LOBYTE(v104) = 5 - v45;
    v80 = *(unsigned int *)(a1 + 12);
    v81 = *(unsigned int *)(a1 + 16);
    if (v80 > v81)
    {
      *(_DWORD *)(a1 + 16) = v81 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v81) = v46;
      v84 = *(_DWORD *)(a1 + 12);
      v85 = *(_DWORD *)(a1 + 16);
      v83 = v102;
      v82 = v103;
    }
    else
    {
      v83 = v102;
      v82 = v103;
      if ((_DWORD)v80 == *(_DWORD *)(a1 + 8))
      {
        v98 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v80 + 1), (unint64_t)&v104);
        v83 = v102;
        v82 = v103;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v98;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v80) = v46;
      }
      v84 = *(_DWORD *)(a1 + 12) + 1;
      v85 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v84;
      *(_DWORD *)(a1 + 16) = v85;
    }
    LOBYTE(v104) = v48;
    if (v84 > v85)
    {
      *(_DWORD *)(a1 + 16) = v85 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v85) = v48;
      v86 = *(_DWORD *)(a1 + 12);
      v87 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v84 == *(_DWORD *)(a1 + 8))
      {
        v99 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v104);
        v83 = v102;
        v82 = v103;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v99;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v84) = v48;
      }
      v86 = *(_DWORD *)(a1 + 12) + 1;
      v87 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v86;
      *(_DWORD *)(a1 + 16) = v87;
    }
    LOBYTE(v104) = v50;
    if (v86 > v87)
    {
      *(_DWORD *)(a1 + 16) = v87 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v87) = v50;
      v88 = *(_DWORD *)(a1 + 12);
      v89 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v86 == *(_DWORD *)(a1 + 8))
      {
        v100 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v86 + 1), (unint64_t)&v104);
        v83 = v102;
        v82 = v103;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v100;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v86) = v50;
      }
      v88 = *(_DWORD *)(a1 + 12) + 1;
      v89 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v88;
      *(_DWORD *)(a1 + 16) = v89;
    }
    LOBYTE(v104) = v83;
    if (v88 > v89)
    {
      *(_DWORD *)(a1 + 16) = v89 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v89) = v83;
      v90 = *(_DWORD *)(a1 + 12);
      v91 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v88 == *(_DWORD *)(a1 + 8))
      {
        v101 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v88 + 1), (unint64_t)&v104);
        v82 = v103;
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *v101;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v88) = v83;
      }
      v90 = *(_DWORD *)(a1 + 12) + 1;
      v91 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v90;
      *(_DWORD *)(a1 + 16) = v91;
    }
    LOBYTE(v104) = v82;
    if (v90 > v91)
    {
      *(_DWORD *)(a1 + 16) = v91 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v91) = v82;
    }
    else
    {
      if (v90 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v90 + 1), (unint64_t)&v104);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v90) = v82;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_98:
    if (!JSC::OpIteratorNext::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v41, v42, v43, v44, v45, 5 - v45, v48, v50, v52, v55))JSC::OpIteratorNext::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v41, v42, v43, v44, v45, (5 - v45),
        v48,
        v50,
        v102,
        v103);
  }
  if (HIDWORD(v106))
  {
    v92 = v105;
    v93 = 8 * HIDWORD(v106);
    do
    {
      v94 = *(_DWORD **)v92;
      *(_QWORD *)v92 = 0;
      if (v94)
        --*v94;
      v92 = (WTF *)((char *)v92 + 8);
      v93 -= 8;
    }
    while (v93);
  }
  v95 = v105;
  if (v107 != (_QWORD *)v105 && v105 != 0)
  {
    v105 = 0;
    LODWORD(v106) = 0;
    WTF::fastFree((unint64_t)v95, v73, v74, v75, v76, v77, v78, v79);
  }
}

_DWORD *JSC::BytecodeGenerator::emitGetTemplateObject(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v5;
  JSC::TemplateObjectDescriptor *v6;
  uint64_t v7;
  uint64_t *v8;
  JSC::TemplateObjectDescriptor **v9;
  JSC::TemplateObjectDescriptor *v10;
  uint64_t v11;
  uint64_t *v12;
  JSC::TemplateObjectDescriptor **v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v38;
  JSC::TemplateObjectDescriptor *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = &v45;
  v44 = 4;
  v40 = &v42;
  v41 = 4;
  for (i = *(_QWORD **)(*(_QWORD *)(a2 + 72) + 32); i; i = (_QWORD *)*i)
  {
    v5 = i[1];
    v6 = **(JSC::TemplateObjectDescriptor ***)(v5 + 40);
    v39 = v6;
    v7 = HIDWORD(v44);
    if (HIDWORD(v44) == (_DWORD)v44)
    {
      WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *>((uint64_t)&v43, (_DWORD **)&v39);
    }
    else
    {
      v8 = v43;
      if (v6)
        *(_DWORD *)v6 += 2;
      v8[v7] = (uint64_t)v6;
      HIDWORD(v44) = v7 + 1;
    }
    v9 = *(JSC::TemplateObjectDescriptor ***)(v5 + 32);
    if (v9)
    {
      v10 = *v9;
      v39 = v10;
      v11 = HIDWORD(v41);
      if (HIDWORD(v41) == (_DWORD)v41)
      {
        WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *>((uint64_t)&v40, (_DWORD **)&v39);
        continue;
      }
      v12 = v40;
      if (v10)
        *(_DWORD *)v10 += 2;
      v13 = (JSC::TemplateObjectDescriptor **)&v12[2 * v11];
      *v13 = v10;
      v14 = v11 + 1;
      *((_BYTE *)v13 + 8) = 1;
    }
    else
    {
      if (HIDWORD(v41) == (_DWORD)v41)
      {
        WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::nullopt_t const&>((uint64_t)&v40);
        continue;
      }
      v38 = &v40[2 * HIDWORD(v41)];
      *(_BYTE *)v38 = 0;
      *((_BYTE *)v38 + 8) = 0;
      v14 = HIDWORD(v41) + 1;
    }
    HIDWORD(v41) = v14;
  }
  v15 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
  v39 = (JSC::TemplateObjectDescriptor *)JSC::TemplateObjectDescriptor::TemplateObjectDescriptor(v15, (uint64_t)&v43, (uint64_t)&v40);
  v21 = JSC::BytecodeGenerator::addTemplateObjectConstant(a1, (uint64_t *)&v39, *(_DWORD *)(a2 + 20), v16, v17, v18, v19, v20);
  v29 = v21;
  if (v21)
    ++*(_DWORD *)v21;
  if (v39)
    WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(v39, v22, v23, v24, v25, v26, v27, v28);
  if (v29)
    --*v29;
  WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v22, v23, v24, v25, v26, v27, v28);
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v30, v31, v32, v33, v34, v35, v36);
  return v29;
}

uint64_t JSC::BytecodeGenerator::emitEnumeratorHasOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v21;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  char v44;
  char v45;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v15 = *(_DWORD *)(a2 + 4);
  v16 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v16 + 4) |= 1u;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = *(unsigned int *)(v17 + 160);
  *(_DWORD *)(v17 + 160) = v18 + 1;
  v19 = (v15 - 1073741808) < 0x80;
  if (v15 <= 0x3FFFFFFF)
    v19 = (v15 + 128) < 0x90;
  if (!v19)
    goto LABEL_43;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    goto LABEL_43;
  v21 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v21 = (a4 + 128) < 0x90;
  if (!v21)
    goto LABEL_43;
  if (!((int)a5 <= 0x3FFFFFFF ? (a5 + 128) < 0x90 : (a5 - 1073741808) < 0x80))
    goto LABEL_43;
  v23 = (a6 - 1073741808) < 0x80;
  if ((int)a6 <= 0x3FFFFFFF)
    v23 = (a6 + 128) < 0x90;
  if (!v23)
    goto LABEL_43;
  v24 = (a7 - 1073741808) < 0x80;
  if ((int)a7 <= 0x3FFFFFFF)
    v24 = (a7 + 128) < 0x90;
  if (v24 && v18 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x28, a3, a4, a5, a6, a7, a8);
    v44 = 40;
    v25 = *(unsigned int *)(a1 + 12);
    v26 = *(unsigned int *)(a1 + 16);
    if (v25 > v26)
    {
      *(_DWORD *)(a1 + 16) = v26 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v26) = 40;
    }
    else
    {
      if ((_DWORD)v25 == *(_DWORD *)(a1 + 8))
      {
        v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v44);
        v25 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v28 = *v43;
      }
      else
      {
        v27 = *(_QWORD *)a1;
        v28 = 40;
      }
      *(_BYTE *)(v27 + v25) = v28;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v29 = v15 + 16;
    if (v15 <= 0x3FFFFFFF)
      v29 = v15;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
    v30 = v12 + 16;
    if (v12 <= 0x3FFFFFFF)
      v30 = v12;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
    v31 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v31 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
    v32 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v32 = v10;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
    v33 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v33 = v9;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v33);
    v34 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v34 = v8;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v34);
    v45 = v18;
    v35 = *(unsigned int *)(a1 + 12);
    v36 = *(unsigned int *)(a1 + 16);
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = v18;
    }
    else
    {
      if ((_DWORD)v35 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v45);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v18;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_43:
    v38 = a3;
    v39 = a4;
    v40 = a5;
    v41 = a6;
    v42 = a7;
    if (!JSC::OpEnumeratorHasOwnProperty::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v15, a3, a4, a5, a6, a7, v18))JSC::OpEnumeratorHasOwnProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v15, v38, v39, v40, v41, v42, v18);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitIsCellWithType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = *(_DWORD *)(a2 + 4);
  v12 = a3;
  if ((JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v11, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, v12, a4, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v12, a4, v18, v19, v20, v21);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitIsConstructor(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitIsUndefinedOrNull(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitLoadArrowFunctionLexicalEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32[5];

  JSC::BytecodeGenerator::variable((uint64_t)v32, a1, a2, 1, a5, a6, a7, a8);
  v21 = JSC::BytecodeGenerator::emitResolveScope(a1, 0, (unsigned __int8 *)v32, v9, v10, v11, v12, v13);
  v22 = v32[0];
  v32[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return v21;
}

_DWORD *JSC::BytecodeGenerator::emitLoadDerivedConstructorFromArrowFunctionLexicalEnvironment(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ArrowFunctionLexicalEnvironment;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  WTF::StringImpl *v62[5];

  JSC::Symbols::derivedConstructorPrivateName[0] += 2;
  v61 = JSC::Symbols::derivedConstructorPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v62, (uint64_t)this, (uint64_t)&v61, 0, a5, a6, a7, a8);
  if (JSC::Symbols::derivedConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    JSC::Symbols::derivedConstructorPrivateName[0] -= 2;
  }
  v16 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  JSC::Symbols::derivedConstructorPrivateName[0] += 2;
  v61 = JSC::Symbols::derivedConstructorPrivateName;
  ArrowFunctionLexicalEnvironment = JSC::BytecodeGenerator::emitLoadArrowFunctionLexicalEnvironment((uint64_t)this, (uint64_t)&v61, v17, v18, v19, v20, v21, v22);
  v34 = JSC::BytecodeGenerator::emitGetFromScope((uint64_t)this, v16, ArrowFunctionLexicalEnvironment, (unint64_t)v62, 0, v24, v25, v26);
  if (JSC::Symbols::derivedConstructorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName, v27, v28, v29, v30, v31, v32, v33);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    JSC::Symbols::derivedConstructorPrivateName[0] -= 2;
  }
  v35 = v62[0];
  v62[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  return v34;
}

void JSC::BytecodeGenerator::pushForInScope(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::ForInContext *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[29];
  JSC::ForInContext *v48;

  if (a2)
  {
    v14 = *(_DWORD *)(a1 + 12);
    v15 = WTF::fastMalloc((WTF *)0xA8);
    v23 = *(unsigned __int8 *)(a7 + 40);
    if (*(_BYTE *)(a7 + 40))
    {
      v24 = *(WTF::StringImpl **)a7;
      if (*(_QWORD *)a7)
        *(_DWORD *)v24 += 2;
      *(_OWORD *)v47 = *(_OWORD *)(a7 + 8);
      *(_OWORD *)&v47[13] = *(_OWORD *)(a7 + 21);
    }
    else
    {
      v24 = 0;
    }
    *(_DWORD *)v15 = 1;
    ++*a2;
    *(_QWORD *)(v15 + 8) = a2;
    if (a3)
      ++*a3;
    *(_QWORD *)(v15 + 16) = a3;
    if (a4)
      ++*a4;
    *(_QWORD *)(v15 + 24) = a4;
    if (a5)
      ++*a5;
    *(_QWORD *)(v15 + 32) = a5;
    if (a6)
      ++*a6;
    *(_QWORD *)(v15 + 40) = a6;
    *(_BYTE *)(v15 + 48) = 0;
    *(_BYTE *)(v15 + 88) = 0;
    if (v23)
    {
      if (v24)
        *(_DWORD *)v24 += 2;
      *(_QWORD *)(v15 + 48) = v24;
      *(_OWORD *)(v15 + 56) = *(_OWORD *)v47;
      *(_OWORD *)(v15 + 69) = *(_OWORD *)&v47[13];
      *(_BYTE *)(v15 + 88) = 1;
    }
    *(_BYTE *)(v15 + 96) = 1;
    *(_DWORD *)(v15 + 100) = v14;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    *(_OWORD *)(v15 + 136) = 0u;
    *(_OWORD *)(v15 + 152) = 0u;
    v48 = (JSC::ForInContext *)v15;
    v25 = *(unsigned int *)(a1 + 476);
    if ((_DWORD)v25 == *(_DWORD *)(a1 + 472))
    {
      v26 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 464, v25 + 1, (unint64_t)&v48);
      v27 = *(unsigned int *)(a1 + 476);
      v28 = *(_QWORD *)(a1 + 464);
      v29 = *v26;
      *v26 = 0;
      *(_QWORD *)(v28 + 8 * v27) = v29;
      v30 = v48;
      *(_DWORD *)(a1 + 476) = v27 + 1;
      v48 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          JSC::ForInContext::~ForInContext(v30, v16, v17, v18, v19, v20, v21, v22);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 464) + 8 * v25) = v15;
      *(_DWORD *)(a1 + 476) = v25 + 1;
      v48 = 0;
    }
    if (v23 && v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    *(_DWORD *)(a1 + 36) = 115;
  }
}

uint64_t JSC::BytecodeGenerator::emitRestParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  signed int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  signed int v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v13 = v6;
  if (v6)
    ++*v6;
  v14 = v6[1];
  v15 = (v14 - 1073741808) < 0x80;
  if (v14 <= 0x3FFFFFFF)
    v15 = (v14 + 128) < 0x90;
  if (a3 <= 0xFF && v15)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x77, v7, v8, v9, v10, v11, v12);
    v63 = 119;
    v22 = *(unsigned int *)(a1 + 12);
    v23 = *(unsigned int *)(a1 + 16);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = 119;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v22 == *(_DWORD *)(a1 + 8))
      {
        v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v63);
        v22 = *(unsigned int *)(a1 + 12);
        v24 = *(_QWORD *)a1;
        v25 = *v54;
      }
      else
      {
        v24 = *(_QWORD *)a1;
        v25 = 119;
      }
      *(_BYTE *)(v24 + v22) = v25;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v14 + 16;
    if (v14 <= 0x3FFFFFFF)
      v28 = v14;
    v64 = v28;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v64);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        v28 = *v55;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v65 = a3;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = a3;
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v65);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = a3;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else if (!JSC::OpGetRestLength::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v6[1], a3, v8, v9, v10, v11, v12))
  {
    JSC::OpGetRestLength::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v14, a3, v17, v18, v19, v20, v21);
  }
  v33 = *(_DWORD *)(a2 + 4);
  v34 = v13[1];
  v35 = (v33 - 1073741808) < 0x80;
  if (v33 <= 0x3FFFFFFF)
    v35 = (v33 + 128) < 0x90;
  if (v35
    && ((int)v34 <= 0x3FFFFFFF
      ? (v36 = (v34 + 128) < 0x90)
      : (v36 = (v34 - 1073741808) < 0x80),
        a3 <= 0xFF && v36))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x76, v16, v17, v18, v19, v20, v21);
    v66 = 118;
    v37 = *(unsigned int *)(a1 + 12);
    v38 = *(unsigned int *)(a1 + 16);
    if (v37 > v38)
    {
      *(_DWORD *)(a1 + 16) = v38 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v38) = 118;
      v41 = *(_DWORD *)(a1 + 12);
      v42 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v37 == *(_DWORD *)(a1 + 8))
      {
        v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v66);
        v37 = *(unsigned int *)(a1 + 12);
        v39 = *(_QWORD *)a1;
        v40 = *v56;
      }
      else
      {
        v39 = *(_QWORD *)a1;
        v40 = 118;
      }
      *(_BYTE *)(v39 + v37) = v40;
      v41 = *(_DWORD *)(a1 + 12) + 1;
      v42 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v41;
      *(_DWORD *)(a1 + 16) = v42;
    }
    v43 = v33 + 16;
    if (v33 <= 0x3FFFFFFF)
      v43 = v33;
    v67 = v43;
    if (v41 > v42)
    {
      *(_DWORD *)(a1 + 16) = v42 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v42) = v43;
      v46 = *(_DWORD *)(a1 + 12);
      v47 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v44 = v41;
      if (v41 == *(_DWORD *)(a1 + 8))
      {
        v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v67);
        v44 = *(unsigned int *)(a1 + 12);
        v45 = *(_QWORD *)a1;
        v43 = *v57;
      }
      else
      {
        v45 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v45 + v44) = v43;
      v46 = *(_DWORD *)(a1 + 12) + 1;
      v47 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v46;
      *(_DWORD *)(a1 + 16) = v47;
    }
    v48 = v34 + 16;
    if ((int)v34 <= 0x3FFFFFFF)
      v48 = v34;
    v68 = v48;
    if (v46 > v47)
    {
      *(_DWORD *)(a1 + 16) = v47 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v47) = v48;
      v51 = *(_DWORD *)(a1 + 12);
      v52 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v49 = v46;
      if (v46 == *(_DWORD *)(a1 + 8))
      {
        v58 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v68);
        v49 = *(unsigned int *)(a1 + 12);
        v50 = *(_QWORD *)a1;
        v48 = *v58;
      }
      else
      {
        v50 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v50 + v49) = v48;
      v51 = *(_DWORD *)(a1 + 12) + 1;
      v52 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v51;
      *(_DWORD *)(a1 + 16) = v52;
    }
    v69 = a3;
    if (v51 > v52)
    {
      *(_DWORD *)(a1 + 16) = v52 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v52) = a3;
    }
    else
    {
      if (v51 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v69);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v51) = a3;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else if ((JSC::OpCreateRest::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), v13[1], a3, v18, v19, v20, v21) & 1) == 0)
  {
    JSC::OpCreateRest::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v33, v34, a3, v59, v60, v61, v62);
  }
  --*v13;
  return a2;
}

_DWORD *JSC::BytecodeGenerator::emitRequireObjectCoercible(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *result;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v37, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a2 + 4);
  v18 = (_DWORD *)v37;
  *(_BYTE *)(v37 + 8) = 1;
  v19 = v18[1];
  if ((_DWORD)v19 == -1)
    v20 = (unint64_t)v18;
  else
    v20 = v18[1];
  if ((_DWORD)v19 == -1)
    v21 = 1;
  else
    v21 = 2;
  if (v19 == 0xFFFFFFFFLL)
    v22 = 1;
  else
    v22 = 2;
  LOBYTE(v38) = v22;
  v39 = 0;
  v40 = a1;
  v41 = (_DWORD *)v20;
  if ((JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v17, (unsigned __int8 *)&v38, v12, v13, v14, v15, v16) & 1) == 0)
  {
    LOBYTE(v38) = v21;
    v39 = 0;
    v40 = a1;
    v41 = (_DWORD *)v20;
    if ((JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v17, (unsigned __int8 *)&v38) & 1) == 0)
    {
      LOBYTE(v38) = v21;
      v39 = 0;
      v40 = a1;
      v41 = (_DWORD *)v20;
      JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v17, (unsigned __int8 *)&v38, v23, v24, v25, v26, v27);
    }
  }
  JSC::BytecodeGenerator::emitThrowTypeError(a1, a3, a4, v23, v24, v25, v26, v27);
  v28 = *(_DWORD *)(a1 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v18, a1, v28, v29, v30, v31, v32, v33);
  v35 = *(_DWORD **)(a1 + 24);
  v36 = v35[7];
  if (!(_DWORD)v36 || v28 != *(_DWORD *)(*((_QWORD *)v35 + 2) + 4 * v36 - 4))
  {
    v38 = v28;
    result = v35 + 4;
    if ((_DWORD)v36 == v35[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v36 + 1, (unint64_t)&v38);
      *(_DWORD *)(*((_QWORD *)v35 + 2) + 4 * v35[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v36) = v28;
    }
    ++v35[7];
    *(_DWORD *)(a1 + 36) = 115;
  }
  --*v18;
  return result;
}

void JSC::BytecodeGenerator::emitYieldPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _DWORD *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  unsigned int v88;
  _QWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _DWORD **v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v105, a1, a3, a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a1 + 496);
  v12 = v11 + 1;
  *(_DWORD *)(a1 + 496) = v12;
  v18 = JSC::BytecodeGenerator::emitLoad(a1, 0, v12 | 0xFFFE000000000000, v13, v14, v15, v16, v17);
  v19 = (0xFFFF9FFF >> *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42)) & 1;
  v20 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4);
  v21 = v18[1];
  if ((JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v20, v19, v21, v22, v23, v24, v25) & 1) == 0&& (JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v20, v19, v21, v28, v29, v30, v31) & 1) == 0)
  {
    JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v20, v19, v21, v28, v29, v30, v31);
  }
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) == 15)
  {
    v91 = *(_QWORD *)(a1 + 272);
    v92 = JSC::BytecodeGenerator::emitLoad(a1, 0, v8 | 0xFFFE000000000000, v27, v28, v29, v30, v31);
    JSC::BytecodeGenerator::emitPutInternalField(a1, *(_DWORD *)(v91 + 4), 5, (uint64_t)v92, v93, v94, v95, v96);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v104, a1, v26, v27, v28, v29, v30, v31);
  v32 = v104;
  v33 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v104, a1, v33, v34, v35, v36, v37, v38);
  v45 = *(_QWORD *)(a1 + 24);
  v46 = *(unsigned int *)(v45 + 28);
  if (!(_DWORD)v46 || v33 != *(_DWORD *)(*(_QWORD *)(v45 + 16) + 4 * v46 - 4))
  {
    LODWORD(v101) = v33;
    v47 = (_QWORD *)(v45 + 16);
    if ((_DWORD)v46 == *(_DWORD *)(v45 + 24))
      *(_DWORD *)(*(_QWORD *)(v45 + 16) + 4 * *(unsigned int *)(v45 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v46 + 1, (unint64_t)&v101);
    else
      *(_DWORD *)(*v47 + 4 * v46) = v33;
    ++*(_DWORD *)(v45 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  v48 = *(_DWORD *)(a1 + 492);
  if (v48)
  {
    v80 = v105;
    v81 = v48 - 1;
    v82 = 16 * (v48 - 1);
    while (*(_DWORD *)(a1 + 492) > v81)
    {
      v83 = *(_QWORD *)(a1 + 480);
      v84 = *(_DWORD **)(v83 + v82);
      ++*v84;
      v101 = v84;
      ++*v32;
      v102 = v32;
      v85 = *(_QWORD *)(v83 + v82 + 8);
      v103 = v85;
      v86 = *(_DWORD *)(a1 + 588);
      if (v86 == *(_DWORD *)(a1 + 584))
      {
        WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::TryRange>(a1 + 576, (unint64_t)&v101);
      }
      else
      {
        v88 = v86 + 1;
        v89 = (_QWORD *)(*(_QWORD *)(a1 + 576) + 24 * v86);
        v101 = 0;
        *v89 = v84;
        v90 = v102;
        v102 = 0;
        v89[1] = v90;
        v89[2] = v85;
        *(_DWORD *)(a1 + 588) = v88;
      }
      if (v102)
        --*v102;
      if (v101)
        --*v101;
      ++*v80;
      v87 = *(_DWORD **)(v83 + v82);
      *(_QWORD *)(v83 + v82) = v80;
      if (v87)
        --*v87;
      v82 -= 16;
      if (--v81 == -1)
      {
        v49 = *(_DWORD *)(a1 + 492);
        goto LABEL_11;
      }
    }
    __break(0xC471u);
  }
  else
  {
    v49 = 0;
LABEL_11:
    v50 = *(_QWORD *)(a1 + 480);
    v51 = *(_DWORD *)(a1 + 488);
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    v52 = *(unsigned int *)(a2 + 4);
    if (v11 > 0xFF)
      goto LABEL_57;
    v53 = (v52 - 1073741808) < 0x80;
    if ((int)v52 <= 0x3FFFFFFF)
      v53 = (v52 + 128) < 0x90;
    if (v53)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x78, v39, v40, v41, v42, v43, v44);
      LOBYTE(v101) = 120;
      v54 = *(unsigned int *)(a1 + 12);
      v55 = *(unsigned int *)(a1 + 16);
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = 120;
        v58 = *(_DWORD *)(a1 + 12);
        v59 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v54 == *(_DWORD *)(a1 + 8))
        {
          v97 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v101);
          v54 = *(unsigned int *)(a1 + 12);
          v56 = *(_QWORD *)a1;
          v57 = *v97;
        }
        else
        {
          v56 = *(_QWORD *)a1;
          v57 = 120;
        }
        *(_BYTE *)(v56 + v54) = v57;
        v58 = *(_DWORD *)(a1 + 12) + 1;
        v59 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v58;
        *(_DWORD *)(a1 + 16) = v59;
      }
      LOBYTE(v101) = v11;
      if (v58 > v59)
      {
        *(_DWORD *)(a1 + 16) = v59 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v59) = v11;
      }
      else
      {
        if (v58 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v58 + 1), (unint64_t)&v101);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v58) = v11;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v60 = v52 + 16;
      if ((int)v52 <= 0x3FFFFFFF)
        v60 = v52;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v60);
    }
    else
    {
LABEL_57:
      if ((JSC::OpYield::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, v52, v40, v41, v42, v43, v44) & 1) == 0)JSC::OpYield::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v52, v61, v62, v63, v64, v65);
    }
    v66 = *(_QWORD *)(a1 + 480);
    *(_QWORD *)(a1 + 480) = v50;
    *(_DWORD *)(a1 + 488) = v51;
    v67 = *(unsigned int *)(a1 + 492);
    *(_DWORD *)(a1 + 492) = v49;
    v68 = v105;
    v69 = *(_DWORD *)(a1 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v105, a1, v69, v61, v62, v63, v64, v65);
    v77 = *(_QWORD *)(a1 + 24);
    v78 = *(unsigned int *)(v77 + 28);
    if (!(_DWORD)v78 || v69 != *(_DWORD *)(*(_QWORD *)(v77 + 16) + 4 * v78 - 4))
    {
      LODWORD(v101) = v69;
      v79 = (_QWORD *)(v77 + 16);
      if ((_DWORD)v78 == *(_DWORD *)(v77 + 24))
        *(_DWORD *)(*(_QWORD *)(v77 + 16) + 4 * *(unsigned int *)(v77 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, v78 + 1, (unint64_t)&v101);
      else
        *(_DWORD *)(*v79 + 4 * v78) = v69;
      ++*(_DWORD *)(v77 + 28);
      *(_DWORD *)(a1 + 36) = 115;
    }
    if ((_DWORD)v67)
    {
      v98 = 16 * v67;
      v99 = (_DWORD **)v66;
      do
      {
        v100 = *v99;
        *v99 = 0;
        if (v100)
          --*v100;
        v99 += 2;
        v98 -= 16;
      }
      while (v98);
    }
    if (v66)
      WTF::fastFree(v66, v70, v71, v72, v73, v74, v75, v76);
    if (v32)
      --*v32;
    if (v68)
      --*v68;
  }
}

uint64_t JSC::BytecodeGenerator::emitYield(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v90;
  _DWORD *v91;

  JSC::BytecodeGenerator::emitYieldPoint(a1, a2, 0xFFFFFFFFLL, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v91, a1, v9, v10, v11, v12, v13, v14);
  v15 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  v21 = v15;
  v22 = **(_QWORD **)(a1 + 344) + 48;
  v23 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000000, v16, v17, v18, v19, v20);
  JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v21, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
  v29 = v91;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v21, (uint64_t)v91, v30, v31, v32, v33, v34);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v90, a1, v35, v36, v37, v38, v39, v40);
  v41 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    JUMPOUT(0x1982572F0);
  }
  v47 = v41;
  v48 = **(_QWORD **)(a1 + 344) + 48;
  v49 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000002, v42, v43, v44, v45, v46);
  JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v47, v48, (uint64_t)v49, v50, v51, v52, v53, v54);
  v55 = v90;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v47, (uint64_t)v90, v56, v57, v58, v59, v60);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    JUMPOUT(0x1982572F8);
  }
  v67 = **(_QWORD **)(a1 + 344);
  v69 = *(_DWORD *)(v67 + 36);
  v68 = (_DWORD *)(v67 + 36);
  *v68 = v69 + 1;
  if ((JSC::BytecodeGenerator::emitReturnViaFinallyIfNeeded(a1, (uint64_t)v68, v61, v62, v63, v64, v65, v66) & 1) == 0)
    JSC::BytecodeGenerator::emitReturn(a1, (uint64_t)v68, v70, v71, v72, v73, v74, v75);
  --*v68;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v55, v70, v71, v72, v73, v74, v75);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    JUMPOUT(0x198257300);
  }
  JSC::BytecodeGenerator::emitThrow(a1, *(_DWORD *)(**(_QWORD **)(a1 + 344) + 40), v76, v77, v78, v79, v80, v81);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v29, v82, v83, v84, v85, v86, v87);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x1982572E8);
  }
  v88 = **(_QWORD **)(a1 + 344);
  --*v55;
  --*v29;
  return v88 + 36;
}

uint64_t JSC::BytecodeGenerator::emitReturnViaFinallyIfNeeded(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(result + 424);
  if (!v8)
    return 0;
  v11 = result;
  v12 = 0;
  v13 = *(unsigned int *)(result + 444);
  v14 = v8 - 1;
  do
  {
    if (v14 >> 4 >= v13)
    {
      __break(0xC471u);
      return result;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(result + 432) + 8 * (v14 >> 4));
    if (*(_BYTE *)(v15 + 16 * (v14 & 0xF)) == 1)
    {
      v34 = *(_QWORD *)(v15 + 16 * (v14 & 0xF) + 8);
      if (!v12)
        v12 = v34;
      *(_BYTE *)(v34 + 20) = 1;
    }
    --v14;
  }
  while (v14 != -1);
  if (!v12)
    return 0;
  JSC::BytecodeGenerator::emitLoad(result, *(int **)(v12 + 40), 0xFFFE000000000002, a4, a5, a6, a7, a8);
  v22 = *(int **)(v12 + 48);
  if ((int *)(v11 + 208) != v22 && v22 && v22 != (int *)a2)
    JSC::BytecodeGenerator::emitMove(v11, v22, a2, v17, v18, v19, v20, v21);
  v23 = *(_QWORD *)(v12 + 8);
  v9 = 1;
  *(_BYTE *)(v23 + 8) = 1;
  v24 = *(unsigned int *)(v23 + 4);
  if ((_DWORD)v24 == -1)
    v25 = v23;
  else
    v25 = *(unsigned int *)(v23 + 4);
  if ((_DWORD)v24 == -1)
    v26 = 1;
  else
    v26 = 2;
  if (v24 == 0xFFFFFFFFLL)
    v27 = 1;
  else
    v27 = 2;
  v35[0] = v27;
  v36 = 0;
  v37 = v11;
  v38 = v25;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v11, v35, v16, v17, v18, v19, v20, v21) & 1) == 0)
  {
    v35[0] = v26;
    v36 = 0;
    v37 = v11;
    v38 = v25;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v11, v35, v28, v29, v30, v31, v32, v33) & 1) == 0)
    {
      v35[0] = v26;
      v36 = 0;
      v37 = v11;
      v38 = v25;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v11, (uint64_t)v35);
    }
  }
  return v9;
}

int *JSC::BytecodeGenerator::emitAwait(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  _DWORD *v66;
  int v67;

  JSC::BytecodeGenerator::emitYieldPoint(a1, a3, 4294967294, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v66, a1, v10, v11, v12, v13, v14, v15);
  v16 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (!*(_DWORD *)(a1 + 356))
    goto LABEL_26;
  v22 = v16;
  v23 = **(_QWORD **)(a1 + 344);
  v24 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000000, v17, v18, v19, v20, v21);
  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, v22, v23 + 48, (uint64_t)v24, v25, v26, v27, v28, v29) & 1) == 0)
  {
    v35 = *(_DWORD *)(v22 + 4);
    v36 = *(unsigned int *)(v23 + 52);
    v37 = v24[1];
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v35, v36, v37, v31, v32, v33, v34) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v35, v36, v37, v31, v32, v33, v34) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v35, v36, v37, v31, v32, v33, v34);
    }
  }
  v38 = v66;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v22, (uint64_t)v66, v30, v31, v32, v33, v34);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    JUMPOUT(0x1982576A4);
  }
  v45 = **(_QWORD **)(a1 + 344);
  *(_BYTE *)(a1 + 705) = 1;
  v46 = *(_DWORD *)(v45 + 40);
  if (!JSC::OpThrow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v46, v39, v40, v41, v42, v43, v44)
    && !JSC::OpThrow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v46, v47, v48, v49, v50, v51, v52))
  {
    JSC::OpThrow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v46, v65, v48, v49, v50, v51, v52);
  }
  v53 = *(_DWORD *)(a1 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v38, a1, v53, v48, v49, v50, v51, v52);
  v59 = *(_QWORD *)(a1 + 24);
  v60 = *(unsigned int *)(v59 + 28);
  if (!(_DWORD)v60 || v53 != *(_DWORD *)(*(_QWORD *)(v59 + 16) + 4 * v60 - 4))
  {
    v67 = v53;
    v61 = (_QWORD *)(v59 + 16);
    if ((_DWORD)v60 == *(_DWORD *)(v59 + 24))
      *(_DWORD *)(*(_QWORD *)(v59 + 16) + 4 * *(unsigned int *)(v59 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v60 + 1, (unint64_t)&v67);
    else
      *(_DWORD *)(*v61 + 4 * v60) = v53;
    ++*(_DWORD *)(v59 + 28);
    *(_DWORD *)(a1 + 36) = 115;
  }
  if (!*(_DWORD *)(a1 + 356))
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x19825769CLL);
  }
  if ((int *)(a1 + 208) == a2)
  {
    a2 = 0;
  }
  else
  {
    v62 = **(_QWORD **)(a1 + 344);
    v63 = v62 + 36;
    if (!a2 || (int *)v63 == a2)
      a2 = (int *)(v62 + 36);
    else
      JSC::BytecodeGenerator::emitMove(a1, a2, v63, v54, v55, v56, v57, v58);
  }
  --*v38;
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitCallIterator(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[8];
  int **v25;

  JSC::CallArguments::CallArguments((uint64_t)v24, a1, 0, 0);
  v13 = *v25;
  if ((int *)(a1 + 208) != *v25 && v13 != 0 && v13 != (int *)a3)
    JSC::BytecodeGenerator::emitMove(a1, v13, a3, v8, v9, v10, v11, v12);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, a2, a2, 0, (uint64_t)v24, a4, a4 + 3, a4 + 6, 0);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)v24, v16, v17, v18, v19, v20, v21, v22);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitIteratorGenericNextWithValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int **v17;
  int *v18;
  int *v21;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[8];
  int **v33;

  JSC::CallArguments::CallArguments((uint64_t)v32, a1, 0, 1);
  v17 = v33;
  v18 = *v33;
  if ((int *)(a1 + 208) != *v33 && v18 != 0 && v18 != (int *)a4)
  {
    JSC::BytecodeGenerator::emitMove(a1, v18, a4, v12, v13, v14, v15, v16);
    v17 = v33;
  }
  v21 = v17[1];
  if ((int *)(a1 + 208) != v21 && v21 != 0 && v21 != (int *)a5)
    JSC::BytecodeGenerator::emitMove(a1, v21, a5, v12, v13, v14, v15, v16);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, a2, a3, 0, (uint64_t)v32, a6, a6 + 3, a6 + 6, 0);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)v32, v24, v25, v26, v27, v28, v29, v30);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitDelegateYield(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  int *AsyncIterator;
  int *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int8x16_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int **v164;
  int *v165;
  int *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _DWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int **v233;
  int *v234;
  int *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _DWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _DWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _DWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _DWORD *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _DWORD *v400;
  _DWORD *v401;
  _DWORD *v402;
  _DWORD *v403;
  _DWORD *v404;
  _DWORD *v405;
  _DWORD *v406;
  _DWORD *v407;
  _DWORD *v408;
  _DWORD *v409;
  int **v410;
  _DWORD *v411;
  _DWORD *v412;
  uint64_t v413;
  _DWORD *v414;
  _DWORD *v415;
  uint64_t v416;
  _DWORD *v417;

  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v7 = (uint64_t)v6;
  if (v6)
    ++*v6;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) == 15)
    AsyncIterator = JSC::BytecodeGenerator::emitGetAsyncIterator(a1, a2, a3);
  else
    AsyncIterator = JSC::BytecodeGenerator::emitGetGenericIterator(a1, a2, a3);
  v9 = AsyncIterator;
  v405 = a3;
  if (AsyncIterator)
    ++*AsyncIterator;
  v10 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v10, (uint64_t)v9, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2000), v11, v12, v13, v14);
  if (v10)
    ++*v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v417, a1, v15, v16, v17, v18, v19, v20);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v416, a1, v21, v22, v23, v24, v25, v26);
  JSC::BytecodeGenerator::emitLoad(a1, (int *)v7, 10, v27, v28, v29, v30, v31);
  v32 = v416;
  JSC::BytecodeGenerator::emitJump(a1, v416, v33, v34, v35, v36, v37, v38);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v415, a1, v39, v40, v41, v42, v43, v44);
  v404 = v415;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v415, v45, v46, v47, v48, v49, v50);
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a1, v51, v52, v53, v54, v55, v56, v57);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v414, a1, v58, v59, v60, v61, v62, v63);
  JSC::BytecodeGenerator::emitYieldPoint(a1, v7, 0xFFFFFFFFLL, v64, v65, v66, v67, v68);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    goto LABEL_53;
  }
  v75 = (int *)(a1 + 208);
  if (a1 + 208 != v7)
  {
    if (v7)
    {
      v69 = **(_QWORD **)(a1 + 344) + 36;
      if (v7 != v69)
        JSC::BytecodeGenerator::emitMove(a1, (int *)v7, v69, v70, v71, v72, v73, v74);
    }
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v413, a1, v69, v70, v71, v72, v73, v74);
  v76 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
    JUMPOUT(0x19825811CLL);
  }
  v82 = v76;
  v83 = **(_QWORD **)(a1 + 344) + 48;
  v84 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000000, v77, v78, v79, v80, v81);
  JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v82, v83, (uint64_t)v84, v85, v86, v87, v88, v89);
  v90 = v413;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v82, v413, v91, v92, v93, v94, v95);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v412, a1, v96, v97, v98, v99, v100, v101);
  v102 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  if (!*(_DWORD *)(a1 + 356))
  {
    __break(0xC471u);
LABEL_53:
    JUMPOUT(0x198258114);
  }
  v108 = v102;
  v401 = (_DWORD *)v90;
  v109 = **(_QWORD **)(a1 + 344) + 48;
  v110 = JSC::BytecodeGenerator::emitLoad(a1, 0, 0xFFFE000000000001, v103, v104, v105, v106, v107);
  JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, v108, v109, (uint64_t)v110, v111, v112, v113, v114, v115);
  v403 = v412;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v108, (uint64_t)v412, v116, v117, v118, v119, v120);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v411, a1, v121, v122, v123, v124, v125, v126);
  v127 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v127, (uint64_t)v9, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 424), v128, v129, v130, v131);
  if (v127)
    ++*v127;
  v132 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsUndefinedOrNull(a1, v132, v127[1], v133, v134, v135, v136, v137);
  v138 = v411;
  JSC::BytecodeGenerator::emitJumpIfFalse(a1, v132, (uint64_t)v411, v139, v140, v141, v142, v143);
  JSC::BytecodeGenerator::emitIteratorGenericClose(a1, (uint64_t)v9, v405, *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) == 15, v144, v145, v146, v147);
  JSC::BytecodeGenerator::emitThrowTypeError(a1, "The iterator, to which yield* delegated iteration, does not have a 'throw' method.", 0x53uLL, v148, v149, v150, v151, v152);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v138, v153, v154, v155, v156, v157, v158);
  JSC::CallArguments::CallArguments((uint64_t)&v409, a1, 0, 1);
  v164 = v410;
  v165 = *v410;
  if (v75 != *v410 && v165 && v165 != v9)
  {
    JSC::BytecodeGenerator::emitMove(a1, v165, (uint64_t)v9, v159, v160, v161, v162, v163);
    v164 = v410;
  }
  v402 = (_DWORD *)v32;
  v166 = v164[1];
  if (v75 != v166 && v166 && v166 != (int *)v7)
    JSC::BytecodeGenerator::emitMove(a1, v166, v7, v159, v160, v161, v162, v163);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, v7, (uint64_t)v127, 0, (uint64_t)&v409, v405, v405 + 3, v405 + 6, 0);
  v400 = v414;
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v414, v167, v168, v169, v170, v171, v172);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v409, v173, v174, v175, v176, v177, v178, v179);
  --*v127;
  --*v138;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v403, v180, v181, v182, v183, v184, v185);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v411, a1, v186, v187, v188, v189, v190, v191);
  v192 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v192, (uint64_t)v9, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 384), v193, v194, v195, v196);
  if (v192)
    ++*v192;
  v197 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsUndefinedOrNull(a1, v197, v192[1], v198, v199, v200, v201, v202);
  v203 = v411;
  JSC::BytecodeGenerator::emitJumpIfFalse(a1, v197, (uint64_t)v411, v204, v205, v206, v207, v208);
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) == 15)
    JSC::BytecodeGenerator::emitAwait(a1, (int *)v7, v7, v210, v211, v212, v213, v214);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v408, a1, v209, v210, v211, v212, v213, v214);
  v215 = v408;
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v408, v216, v217, v218, v219, v220, v221);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v203, v222, v223, v224, v225, v226, v227);
  JSC::CallArguments::CallArguments((uint64_t)&v409, a1, 0, 1);
  v233 = v410;
  v234 = *v410;
  if (v75 != *v410 && v234 && v234 != v9)
  {
    JSC::BytecodeGenerator::emitMove(a1, v234, (uint64_t)v9, v228, v229, v230, v231, v232);
    v233 = v410;
  }
  v235 = v233[1];
  if (v75 != v235 && v235 && v235 != (int *)v7)
    JSC::BytecodeGenerator::emitMove(a1, v235, v7, v228, v229, v230, v231, v232);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a1, v7, (uint64_t)v192, 0, (uint64_t)&v409, v405, v405 + 3, v405 + 6, 0);
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) == 15)
    JSC::BytecodeGenerator::emitAwait(a1, (int *)v7, v7, v237, v238, v239, v240, v241);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v407, a1, v236, v237, v238, v239, v240, v241);
  v242 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsObject(a1, v242, *(_DWORD *)(v7 + 4), v243, v244, v245, v246, v247);
  v248 = v407;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v242, (uint64_t)v407, v249, v250, v251, v252, v253);
  JSC::BytecodeGenerator::emitThrowTypeError(a1, "Iterator result interface is not an object.", 0x2CuLL, v254, v255, v256, v257, v258);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v248, v259, v260, v261, v262, v263, v264);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v406, a1, v265, v266, v267, v268, v269, v270);
  v271 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v271, v7, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 1200), v272, v273, v274, v275);
  v276 = v406;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, (uint64_t)v271, (uint64_t)v406, v277, v278, v279, v280, v281);
  JSC::BytecodeGenerator::emitGetById(a1, (_DWORD *)v7, v7, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2608), v282, v283, v284, v285);
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v404, v286, v287, v288, v289, v290, v291);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v276, v292, v293, v294, v295, v296, v297);
  JSC::BytecodeGenerator::emitGetById(a1, (_DWORD *)v7, v7, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2608), v298, v299, v300, v301);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v215, v302, v303, v304, v305, v306, v307);
  if ((JSC::BytecodeGenerator::emitReturnViaFinallyIfNeeded(a1, v7, v308, v309, v310, v311, v312, v313) & 1) == 0)
    JSC::BytecodeGenerator::emitReturn(a1, v7, v315, v316, v317, v318, v319, v320);
  --*v276;
  --*v248;
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v409, v314, v315, v316, v317, v318, v319, v320);
  --*v215;
  --*v192;
  --*v203;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v401, v321, v322, v323, v324, v325, v326);
  --*v403;
  --*v401;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v402, v327, v328, v329, v330, v331, v332);
  JSC::BytecodeGenerator::emitIteratorGenericNextWithValue(a1, v7, (uint64_t)v10, (uint64_t)v9, v7, v405);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v400, v333, v334, v335, v336, v337, v338);
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42) == 15)
    JSC::BytecodeGenerator::emitAwait(a1, (int *)v7, v7, v340, v341, v342, v343, v344);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v409, a1, v339, v340, v341, v342, v343, v344);
  v345 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitIsObject(a1, v345, *(_DWORD *)(v7 + 4), v346, v347, v348, v349, v350);
  v351 = v409;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, v345, (uint64_t)v409, v352, v353, v354, v355, v356);
  JSC::BytecodeGenerator::emitThrowTypeError(a1, "Iterator result interface is not an object.", 0x2CuLL, v357, v358, v359, v360, v361);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v351, v362, v363, v364, v365, v366, v367);
  v368 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitGetById(a1, v368, v7, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 1200), v369, v370, v371, v372);
  v373 = v417;
  JSC::BytecodeGenerator::emitJumpIfTrue(a1, (uint64_t)v368, (uint64_t)v417, v374, v375, v376, v377, v378);
  JSC::BytecodeGenerator::emitGetById(a1, (_DWORD *)v7, v7, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2608), v379, v380, v381, v382);
  JSC::BytecodeGenerator::emitJump(a1, (uint64_t)v404, v383, v384, v385, v386, v387, v388);
  --*v351;
  --*v400;
  --*v404;
  --*v402;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v373, v389, v390, v391, v392, v393, v394);
  --*v373;
  if (v10)
    --*v10;
  if (v9)
    --*v9;
  JSC::BytecodeGenerator::emitGetById(a1, (_DWORD *)v7, v7, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2608), v395, v396, v397, v398);
  --*(_DWORD *)v7;
  return v7;
}

uint64_t JSC::BytecodeGenerator::emitJumpViaFinallyIfNeeded(uint64_t a1, int a2, _DWORD *a3)
{
  int v3;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v3 = *(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 412);
  if (v3 == a2)
    return 0;
  result = 0;
  v6 = 0;
  v7 = *(unsigned int *)(a1 + 444);
  v8 = a2 - (uint64_t)v3;
  v9 = *(_QWORD *)(a1 + 424) - 1;
  do
  {
    if (v9 >> 4 >= v7)
      goto LABEL_18;
    v10 = *(_QWORD *)(a1 + 432);
    v11 = *(_QWORD *)(v10 + 8 * (v9 >> 4));
    if (*(_BYTE *)(v11 + 16 * (v9 & 0xF)) == 1)
    {
      result = *(_QWORD *)(v11 + 16 * (v9 & 0xF) + 8);
      v26 = *(_DWORD *)(result + 16);
      if (v26 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198258248);
      }
      if (!v6)
        v6 = result;
      *(_DWORD *)(result + 16) = v26 + 1;
    }
    --v9;
  }
  while (!__CFADD__(v8++, 1));
  if (result)
  {
    v13 = (unint64_t)a2 >> 4;
    if (v13 >= v7)
    {
LABEL_18:
      __break(0xC471u);
      JUMPOUT(0x198258240);
    }
    v14 = (*(_DWORD *)(a1 + 12) + 3);
    JSC::FinallyContext::registerJump((_QWORD *)result, *(_DWORD *)(a1 + 12) + 3, *(_DWORD *)(*(_QWORD *)(v10 + 8 * v13) + 16 * (a2 & 0xF) + 4), a3);
    JSC::BytecodeGenerator::emitLoad(a1, *(int **)(v6 + 40), v14 | 0xFFFE000000000000, v15, v16, v17, v18, v19);
    JSC::BytecodeGenerator::emitJump(a1, *(_QWORD *)(v6 + 8), v20, v21, v22, v23, v24, v25);
    return 1;
  }
  return result;
}

_QWORD *JSC::FinallyContext::registerJump(_QWORD *result, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *v7;

  v6 = __PAIR64__(a3, a2);
  ++*a4;
  v7 = a4;
  v4 = *((unsigned int *)result + 9);
  if ((_DWORD)v4 == *((_DWORD *)result + 8))
  {
    result = WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FinallyJump>((uint64_t)(result + 3), (unint64_t)&v6);
    if (v7)
      --*v7;
  }
  else
  {
    v5 = (unint64_t *)(result[3] + 16 * v4);
    *v5 = v6;
    v5[1] = (unint64_t)a4;
    ++*((_DWORD *)result + 9);
  }
  return result;
}

void JSC::BytecodeGenerator::pushOptionalChainTarget(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v15, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  v9 = *((unsigned int *)this + 157);
  if ((_DWORD)v9 == *((_DWORD *)this + 156))
  {
    v10 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 616, v9 + 1, (unint64_t)&v15);
    v11 = *((unsigned int *)this + 157);
    v12 = *((_QWORD *)this + 77);
    v13 = *v10;
    *v10 = 0;
    *(_QWORD *)(v12 + 8 * v11) = v13;
    v14 = v15;
    *((_DWORD *)this + 157) = v11 + 1;
    if (v14)
      --*v14;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 77) + 8 * v9) = v15;
    *((_DWORD *)this + 157) = v9 + 1;
  }
}

uint64_t JSC::BytecodeGenerator::popOptionalChainTarget(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v8 = *(unsigned int *)(this + 628);
  if ((_DWORD)v8)
  {
    v9 = this;
    v10 = v8 - 1;
    v11 = *(_QWORD *)(this + 616);
    v12 = *(_DWORD **)(v11 + 8 * v10);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    v13 = *(_QWORD *)(this + 616);
    v14 = *(_DWORD **)(v13 + 8 * v10);
    *(_QWORD *)(v13 + 8 * v10) = 0;
    if (v14)
      --*v14;
    *(_DWORD *)(this + 628) = v10;
    v15 = *(_DWORD *)(this + 16);
    this = JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v12, this, v15, a4, a5, a6, a7, a8);
    v16 = *(_QWORD *)(v9 + 24);
    v17 = *(unsigned int *)(v16 + 28);
    if (!(_DWORD)v17 || v15 != *(_DWORD *)(*(_QWORD *)(v16 + 16) + 4 * v17 - 4))
    {
      v18 = v15;
      this = v16 + 16;
      if ((_DWORD)v17 == *(_DWORD *)(v16 + 24))
      {
        this = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v17 + 1, (unint64_t)&v18);
        *(_DWORD *)(*(_QWORD *)(v16 + 16) + 4 * *(unsigned int *)(v16 + 28)) = *(_DWORD *)this;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)this + 4 * v17) = v15;
      }
      ++*(_DWORD *)(v16 + 28);
      *(_DWORD *)(v9 + 36) = 115;
    }
    if (v12)
      --*v12;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t JSC::BytecodeGenerator::emitOptionalCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v5 = *(_DWORD *)(v4 + 4);
  v6 = *(unsigned int *)(a2 + 4);
  result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v5, v6, v7, v8, v9, v10, v11);
  if ((result & 1) == 0)
  {
    result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v5, v6, v13, v14, v15, v16, v17);
    if ((result & 1) == 0)
      result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v5, v6, v13, v14, v15, v16, v17);
  }
  v18 = *(unsigned int *)(a1 + 628);
  if ((_DWORD)v18)
    return JSC::BytecodeGenerator::emitJumpIfTrue(a1, v4, *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v18 - 8), v13, v14, v15, v16, v17);
  __break(0xC471u);
  return result;
}

char *JSC::OpNop::emit<(JSC::OpcodeSize)1,JSC::BytecodeGenerator,(JSC::FitsAssertion)0,true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7E, a3, a4, a5, a6, a7, a8);
  v14 = 126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = 126;
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v14);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *result;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = 126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return result;
}

_DWORD *JSC::BytecodeGenerator::emitToThis(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = a2[1];
  v17 = *(unsigned __int8 *)(a1 + 712);
  v18 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v18 + 4) |= 1u;
  v19 = (*(_DWORD *)(v18 + 8) + 1);
  *(_DWORD *)(v18 + 8) = v19;
  v20 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v20 + 4) |= 1u;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = *(unsigned int *)(v21 + 168);
  *(_DWORD *)(v21 + 168) = v22 + 1;
  v23 = (v16 - 1073741808) < 0x80;
  if (v16 <= 0x3FFFFFFF)
    v23 = (v16 + 128) < 0x90;
  if (v23 && (v22 | v19) <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2A, v10, v11, v12, v13, v14, v15);
    v45 = 42;
    v24 = *(unsigned int *)(a1 + 12);
    v25 = *(unsigned int *)(a1 + 16);
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = 42;
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
      {
        v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v45);
        v24 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        v27 = *v40;
      }
      else
      {
        v26 = *(_QWORD *)a1;
        v27 = 42;
      }
      *(_BYTE *)(v26 + v24) = v27;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    v30 = v16 + 16;
    if (v16 <= 0x3FFFFFFF)
      v30 = v16;
    v46 = v30;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v30;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v31 = v28;
      if (v28 == *(_DWORD *)(a1 + 8))
      {
        v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v46);
        v31 = *(unsigned int *)(a1 + 12);
        v32 = *(_QWORD *)a1;
        v30 = *v41;
      }
      else
      {
        v32 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v32 + v31) = v30;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v47 = v17;
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = v17;
      v35 = *(_DWORD *)(a1 + 12);
      v36 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v33 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v47);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v17;
      v35 = *(_DWORD *)(a1 + 12) + 1;
      v36 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v35;
      *(_DWORD *)(a1 + 16) = v36;
    }
    v48 = v19;
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = v19;
      v37 = *(_DWORD *)(a1 + 12);
      v38 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v35 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v48);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v19;
      v37 = *(_DWORD *)(a1 + 12) + 1;
      v38 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v37;
      *(_DWORD *)(a1 + 16) = v38;
    }
    v49 = v22;
    if (v37 > v38)
    {
      *(_DWORD *)(a1 + 16) = v38 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v22;
    }
    else
    {
      if (v37 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v49);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v37) = v22;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else if (!JSC::OpToThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v16, v17, v19, v22, v13, v14, v15))
  {
    JSC::OpToThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v16, v17, v19, v22, v42, v43, v44);
  }
  return a2;
}

uint64_t JSC::ExpressionNode::emitBytecodeInConditionContext(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v8 = a5;
  v12 = *(_BYTE *)(a2 + 709);
  v13 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v22 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v15 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (a1[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(a1 + 8), a4, a5, a6, a7, a8);
    v15 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v13;
  *(_BYTE *)(a2 + 709) = v12;
  if (v8)
    return JSC::BytecodeGenerator::emitJumpIfTrue(a2, v15, a3, v16, v17, v18, v19, v20);
  else
    return JSC::BytecodeGenerator::emitJumpIfFalse(a2, v15, a4, v16, v17, v18, v19, v20);
}

uint64_t JSC::BytecodeGenerator::emitNode(JSC::BytecodeGenerator *this, JSC::ExpressionNode *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  char v10;
  uint64_t result;
  uint64_t v13;

  v9 = *((_BYTE *)this + 709);
  v10 = *((_BYTE *)this + 710);
  *(_WORD *)((char *)this + 709) = 0;
  if ((unint64_t)&v13 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
  {
    *((_BYTE *)this + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  }
  else
  {
    if (*((_BYTE *)a2 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)this, 5, (uint64_t)a2 + 8, a4, a5, a6, a7, a8);
    result = (*(uint64_t (**)(JSC::ExpressionNode *, JSC::BytecodeGenerator *, _QWORD))(*(_QWORD *)a2 + 16))(a2, this, 0);
  }
  *((_BYTE *)this + 710) = v10;
  *((_BYTE *)this + 709) = v9;
  return result;
}

uint64_t JSC::ThrowableExpressionData::emitThrowReferenceError(_DWORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  unsigned int v13;
  int v16;
  BOOL v17;
  int v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;

  v12 = a1[1];
  v13 = a1[2];
  if (*a1 != -1 || v12 != -1 || v13 != -1)
  {
    v16 = a1[4];
    v17 = a1[3] == -1 && v16 == -1;
    if (!v17 || a1[5] != -1)
    {
      v19 = a1[7];
      if ((a1[6] & v19 & a1[8]) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
      {
        v21 = *(_QWORD *)(a2 + 192);
        v22 = *(_DWORD *)(v21 + 176);
        v23 = v12 - v22;
        v24 = v13 >= v22;
        v25 = v13 - v22;
        if (!v24)
          v25 = 0;
        v24 = v23 >= v25;
        v26 = v23 - v25;
        if (v24)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v23, v12 - v16, v19 - v12, (*a1 + ~*(_DWORD *)(v21 + 184)) | (unint64_t)(v26 << 32));
      }
    }
  }
  JSC::BytecodeGenerator::emitThrowReferenceError(a2, a3, a4, a4, a5, a6, a7, a8);
  if (a5)
    return a5;
  else
    return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
}

unint64_t JSC::ConstantNode::emitBytecodeInConditionContext(_BYTE *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  BOOL v29;
  _BOOL4 v30;
  unsigned __int8 v31[4];
  int v32;
  char *v33;
  uint64_t v34;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 368))(a1);
  if (!result)
    return JSC::ExpressionNode::emitBytecodeInConditionContext(a1, (uint64_t)a2, a3, a4, a5, v14, v15, v16);
  if (result < 0xFFFE000000000000)
  {
    *(_QWORD *)&v28 = result - 0x2000000000000;
    if (result - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v29 = v28 <= 0.0;
      v30 = v28 < 0.0;
      v17 = !v29 || v30;
    }
    else if ((result & 0xFFFE000000000002) != 0)
    {
      v17 = result == 7;
    }
    else
    {
      result = JSC::JSCell::pureToBoolean((JSC::JSCell *)result);
      v17 = result;
    }
  }
  else
  {
    v17 = result != 0;
  }
  if (a1[24])
  {
    if (v17 != 2)
    {
      result = (unint64_t)JSC::BytecodeGenerator::emitDebugHook(a2, 5, (uint64_t)(a1 + 8), v12, v13, v14, v15, v16);
      goto LABEL_6;
    }
    return JSC::ExpressionNode::emitBytecodeInConditionContext(a1, (uint64_t)a2, a3, a4, a5, v14, v15, v16);
  }
  if (v17 == 2)
    return JSC::ExpressionNode::emitBytecodeInConditionContext(a1, (uint64_t)a2, a3, a4, a5, v14, v15, v16);
LABEL_6:
  if ((_DWORD)a5 == 1 && v17 == 1)
  {
    *(_BYTE *)(a3 + 8) = 1;
    v18 = *(unsigned int *)(a3 + 4);
    if ((_DWORD)v18 == -1)
      v19 = a3;
    else
      v19 = *(unsigned int *)(a3 + 4);
    if ((_DWORD)v18 == -1)
      v20 = 1;
    else
      v20 = 2;
    if (v18 == 0xFFFFFFFFLL)
      v21 = 1;
    else
      v21 = 2;
    v31[0] = v21;
    v32 = 0;
    v33 = a2;
    v34 = v19;
    result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)a2, v31, v11, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
    {
      v31[0] = v20;
      v32 = 0;
      v33 = a2;
      v34 = v19;
      result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)a2, v31, v22, v23, v24, v25, v26, v27);
      if ((result & 1) == 0)
      {
        v31[0] = v20;
        v32 = 0;
        v33 = a2;
        v34 = v19;
        return JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)a2, (uint64_t)v31);
      }
    }
  }
  else if (!(v17 | a5))
  {
    return JSC::BytecodeGenerator::emitJump((uint64_t)a2, a4, v11, v12, v13, v14, v15, v16);
  }
  return result;
}

uint64_t JSC::ConstantNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  char v57;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v3 = a3;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1);
  if (v5)
  {
    v11 = v5;
    v12 = *(_DWORD *)(a2 + 632);
    v13 = (uint64_t *)(a2 + 648);
    v14 = *(_QWORD *)(a2 + 648);
    if (v14
      || (WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a2 + 648), 8u), (v14 = *v13) != 0))
    {
      v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((0xD7862706ELL
                * (unint64_t)(277951225 * ((v18 >> 31) ^ v18) - 3301266)) >> 4);
    v20 = (uint64_t *)(v14 + 24 * v19);
    v21 = *v20;
    v22 = *((unsigned __int8 *)v20 + 8);
    if (*v20)
      v23 = 0;
    else
      v23 = v22 == 0;
    if (v23)
      goto LABEL_24;
    v24 = 0;
    v25 = 1;
    do
    {
      if (v21 == v11 && !v22)
      {
        v12 = *((_DWORD *)v20 + 4);
        goto LABEL_39;
      }
      if (*((_BYTE *)v20 + 8))
        v26 = v24;
      else
        v26 = v20;
      if (v21 == 4)
        v24 = v26;
      v19 = (v19 + v25) & v15;
      v20 = (uint64_t *)(v14 + 24 * v19);
      v21 = *v20;
      v22 = *((unsigned __int8 *)v20 + 8);
      ++v25;
      if (*v20)
        v27 = 0;
      else
        v27 = v22 == 0;
    }
    while (!v27);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      *((_DWORD *)v24 + 4) = 0;
      --*(_DWORD *)(*v13 - 16);
      v20 = v24;
    }
LABEL_24:
    *v20 = v11;
    *((_BYTE *)v20 + 8) = 0;
    *((_DWORD *)v20 + 4) = *(_DWORD *)(a2 + 632);
    v28 = *(_QWORD *)(a2 + 648);
    if (v28)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v13;
    if (*v13)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_30;
    }
    else
    {
      if (3 * v33 > 4 * v32)
        goto LABEL_30;
      if (!(_DWORD)v33)
      {
        v55 = 8;
LABEL_58:
        WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a2 + 648), v55);
LABEL_30:
        v34 = *(_DWORD *)(a2 + 632);
        v35 = *(_QWORD *)(a2 + 384);
        *(_QWORD *)(a2 + 384) = v35 + 1;
        v36 = v35 >> 5;
        v37 = *(unsigned int *)(a2 + 404);
        if (v35 >> 5 >= v37)
        {
          v51 = WTF::fastMalloc((WTF *)0x180);
          v56 = v51;
          v52 = *(unsigned int *)(a2 + 404);
          if ((_DWORD)v52 == *(_DWORD *)(a2 + 400))
          {
            v53 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 392, v52 + 1, (unint64_t)&v56);
            v52 = *(unsigned int *)(a2 + 404);
            *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v52) = *v53;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v52) = v51;
          }
          v37 = (v52 + 1);
          *(_DWORD *)(a2 + 404) = v37;
          v35 = *(_QWORD *)(a2 + 384) - 1;
          v36 = v35 >> 5;
        }
        if (v36 >= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x19825912CLL);
        }
        v38 = *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v36) + 12 * (v35 & 0x1F);
        *(_DWORD *)v38 = 0;
        *(_DWORD *)(v38 + 4) = v34 + 0x40000000;
        *(_BYTE *)(v38 + 8) = 0;
        ++*(_DWORD *)(a2 + 632);
        v39 = *(_QWORD *)(a2 + 24);
        v57 = 0;
        v40 = (_QWORD *)(v39 + 48);
        v56 = 0;
        v41 = *(unsigned int *)(v39 + 60);
        if ((_DWORD)v41 == *(_DWORD *)(v39 + 56))
          *(_QWORD *)(*(_QWORD *)(v39 + 48) + 8 * *(unsigned int *)(v39 + 60)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v56);
        else
          *(_QWORD *)(*v40 + 8 * v41) = 0;
        v42 = *(_DWORD *)(v39 + 60);
        v43 = __CFADD__(v42, 1);
        v44 = v42 + 1;
        *(_DWORD *)(v39 + 60) = v44;
        if (v43)
          goto LABEL_64;
        *(_QWORD *)(*(_QWORD *)(v39 + 48) + 8 * v44 - 8) = v11;
        v45 = (_QWORD *)(v39 + 64);
        v46 = *(unsigned int *)(v39 + 76);
        if ((_DWORD)v46 == *(_DWORD *)(v39 + 72))
        {
          v54 = (_BYTE *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, (WTF *)(v46 + 1), (unint64_t)&v57);
          v46 = *(unsigned int *)(v39 + 76);
          *(_BYTE *)(*(_QWORD *)(v39 + 64) + v46) = *v54;
        }
        else
        {
          *(_BYTE *)(*v45 + v46) = 0;
        }
        *(_DWORD *)(v39 + 76) = v46 + 1;
LABEL_39:
        v47 = (unint64_t)v12 >> 5;
        if (v47 >= *(unsigned int *)(a2 + 404))
        {
LABEL_64:
          __break(0xC471u);
          JUMPOUT(0x198259124);
        }
        v48 = *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v47);
        v49 = v48 + 12 * (v12 & 0x1F);
        if (!v3)
          return v48 + 12 * (v12 & 0x1F);
        if ((int *)v49 != v3)
          JSC::BytecodeGenerator::emitMove(a2, v3, v49, v6, v7, v8, v9, v10);
        return (uint64_t)v3;
      }
    }
    v55 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
    goto LABEL_58;
  }
  *(_BYTE *)(a2 + 706) = 1;
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
}

uint64_t JSC::StringNode::jsValue(JSC::StringNode *this, JSC::BytecodeGenerator *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;

  v9 = (JSC::VM *)*((_QWORD *)this + 4);
  v10 = (uint64_t *)((char *)a2 + 656);
  v11 = *(_QWORD *)v9;
  v12 = *((_QWORD *)a2 + 82);
  if (v12
    || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)a2 + 82, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_DWORD *)(v11 + 16);
  if ((v14 & 0x20) != 0)
    v14 = *(_DWORD *)(v11 + 32);
  v15 = v13 & (v14 >> 8);
  v16 = (_QWORD *)(v12 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_13:
    *v16 = v11;
    v16[1] = 0;
    v20 = *v10;
    if (*v10)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_19;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        goto LABEL_19;
      if (!(_DWORD)v25)
      {
        v28 = 8;
        goto LABEL_30;
      }
    }
    v28 = ((_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25)));
LABEL_30:
    v16 = WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v10, v28, (uint64_t)v16, a4, a5, a6, a7, a8);
    goto LABEL_19;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v13;
    v16 = (_QWORD *)(v12 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v10 - 16);
        v16 = v18;
      }
      goto LABEL_13;
    }
  }
LABEL_19:
  result = v16[1];
  if (!result)
  {
    v27 = JSC::jsString(*((JSC **)a2 + 87), v9, a3, a4, a5, a6, a7, a8);
    v16[1] = v27;
    JSC::BytecodeGenerator::addConstantValue((uint64_t)a2, v27);
    return v16[1];
  }
  return result;
}

uint64_t JSC::BigIntNode::jsValue(JSC::BigIntNode *this, JSC::BytecodeGenerator *a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int8x8_t v16;
  int32x2_t v17;
  int8x8_t v18;
  int32x2_t v19;
  unint64_t v20;
  int i;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  JSC::JSBigInt *v34;
  JSC::JSBigInt *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int32x2_t v66;
  int8x8_t v67;
  int8x8_t v68;
  int32x2_t v69;
  int8x8_t v70;
  int32x2_t v71;
  unsigned int v72;
  int j;
  uint64_t v74;
  BOOL v75;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;

  v3 = (uint64_t *)*((_QWORD *)this + 4);
  v4 = *((unsigned __int8 *)this + 40);
  v5 = *((unsigned __int8 *)this + 41);
  v6 = *v3;
  v7 = *((_QWORD *)a2 + 83);
  if (v7)
    goto LABEL_3;
  v8 = (_OWORD *)WTF::fastMalloc((WTF *)0xD0);
  v8[1] = 0u;
  v8[2] = 0u;
  ++v8;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  *((_QWORD *)a2 + 83) = v8;
  *((_DWORD *)v8 - 1) = 8;
  *(_DWORD *)(*((_QWORD *)a2 + 83) - 8) = 7;
  *(_DWORD *)(*((_QWORD *)a2 + 83) - 16) = 0;
  *(_DWORD *)(*((_QWORD *)a2 + 83) - 12) = 0;
  v7 = *((_QWORD *)a2 + 83);
  if (v7)
LABEL_3:
    v9 = *(_DWORD *)(v7 - 8);
  else
    v9 = 0;
  v10 = 0;
  v11 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  if ((_DWORD)v5)
    v15 = -32768;
  else
    v15 = -1;
  v16 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v15, ~(v4 << 15) + v4), 0xAuLL), (int8x8_t)__PAIR64__(v15, ~(v4 << 15) + v4)), (int32x2_t)0x900000009);
  v17 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v16, 6uLL), v16);
  v18 = (int8x8_t)vadd_s32(v17, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v17, 0xBuLL)));
  v19 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 0x10uLL), v18), (int32x2_t)0x5AC73FE109132F9);
  v20 = (0xD7862706ELL
       * (unint64_t)(95187966
                          * ((0xD7862706ELL * (unint64_t)vadd_s32(v19, vdup_lane_s32(v19, 1)).u32[0]) >> 4)
                          + 277951225 * v14)) >> 4;
  for (i = 1; ; ++i)
  {
    v22 = v20 & v9;
    v23 = (uint64_t *)(v7 + 24 * v22);
    v24 = *v23;
    v25 = *((unsigned __int8 *)v23 + 8);
    v26 = !*v23 && v25 == 0;
    if (v26 && !*((_BYTE *)v23 + 9))
      break;
    if (v24 == v6 && v25 == v4 && *((unsigned __int8 *)v23 + 9) == (_DWORD)v5)
      return v23[2];
    if (v24 == -1)
      v10 = (uint64_t *)(v7 + 24 * v22);
    LODWORD(v20) = i + v22;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    --*(_DWORD *)(*((_QWORD *)a2 + 83) - 16);
    v23 = v10;
  }
  *v23 = v6;
  *((_BYTE *)v23 + 8) = v4;
  *((_BYTE *)v23 + 9) = v5;
  v28 = *((_QWORD *)a2 + 87);
  v29 = *(_DWORD *)(v28 + 88);
  *(_DWORD *)(v28 + 88) = v29 + 1;
  if (!v29)
  {
    v30 = *(_QWORD *)(v28 + 16);
    if (v30)
    {
      if (*(_QWORD *)(v28 + 24) == v30)
      {
        *(_QWORD *)(v28 + 16) = 0;
        v77 = (unsigned int *)(v28 + 80);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 & 0xFFFFFFEF, v77));
        *(_BYTE *)(v28 + 86) = 1;
      }
    }
  }
  v31 = *v3;
  if (!*v3)
  {
    v32 = 0;
    v33 = 0;
    goto LABEL_31;
  }
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(unsigned int *)(v31 + 4);
  if ((*(_BYTE *)(v31 + 16) & 4) != 0)
  {
LABEL_31:
    v34 = JSC::JSBigInt::parseInt<unsigned char>(0, (JSC::JSGlobalObject *)v28, v32, v33, 0, v4, 0, v5, 0);
    goto LABEL_32;
  }
  v34 = JSC::JSBigInt::parseInt<char16_t>(0, (JSC::JSGlobalObject *)v28, v32, v33, 0, v4, 0, v5, 0);
LABEL_32:
  v35 = v34;
  JSC::BytecodeGenerator::addConstantValue((uint64_t)a2, (uint64_t)v34);
  v36 = *(_DWORD *)(v28 + 88) - 1;
  *(_DWORD *)(v28 + 88) = v36;
  if (!v36 && *(_BYTE *)(v28 + 93441))
  {
    v79 = *(_QWORD *)(v28 + 24);
    *(_QWORD *)(v28 + 16) = v79;
    *(_QWORD *)(v28 + 32) = v79;
    if (v79)
    {
      v80 = (unsigned int *)(v28 + 80);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 | 0x10, v80));
    }
    if (*(_BYTE *)(v28 + 93443))
      *(_BYTE *)(v28 + 93442) = 1;
    *(_BYTE *)(v28 + 86) = 0;
  }
  v23[2] = (uint64_t)v35;
  v37 = *((_QWORD *)a2 + 83);
  if (v37)
    v38 = *(_DWORD *)(v37 - 12) + 1;
  else
    v38 = 1;
  *(_DWORD *)(v37 - 12) = v38;
  v39 = *((_QWORD *)a2 + 83);
  if (v39)
    v40 = *(_DWORD *)(v39 - 12);
  else
    v40 = 0;
  v41 = (*(_DWORD *)(v39 - 16) + v40);
  v42 = *(unsigned int *)(v39 - 4);
  if (v42 > 0x400)
  {
    if (v42 > 2 * v41)
      return v23[2];
  }
  else
  {
    if (3 * v42 > 4 * v41)
      return v23[2];
    if (!(_DWORD)v42)
    {
      v43 = *(_DWORD *)(v39 - 12);
      v44 = 8;
      goto LABEL_45;
    }
  }
  v43 = *(_DWORD *)(v39 - 12);
  v44 = (_DWORD)v42 << (6 * v43 >= (2 * v42));
LABEL_45:
  v45 = WTF::fastMalloc((WTF *)(24 * v44 + 16));
  v54 = v45;
  v55 = v45 + 16;
  if (v44)
    bzero((void *)(v45 + 16), 24 * v44);
  *((_QWORD *)a2 + 83) = v55;
  *(_DWORD *)(v54 + 12) = v44;
  *(_DWORD *)(*((_QWORD *)a2 + 83) - 8) = v44 - 1;
  *(_DWORD *)(*((_QWORD *)a2 + 83) - 16) = 0;
  *(_DWORD *)(*((_QWORD *)a2 + 83) - 12) = v43;
  if ((_DWORD)v42)
  {
    v56 = 0;
    v57 = 0;
    v46 = 0xD7862706ELL;
    v47 = 277951225;
    v48 = 95187966;
    do
    {
      v58 = (uint64_t *)(v39 + 24 * v56);
      v59 = *v58;
      if (*v58 != -1)
      {
        v60 = !v59 && *((_BYTE *)v58 + 8) == 0;
        if (!v60 || *((_BYTE *)v58 + 9))
        {
          v61 = *((_QWORD *)a2 + 83);
          if (v61)
            v62 = *(_DWORD *)(v61 - 8);
          else
            v62 = 0;
          v63 = (~(v59 << 32) + v59) ^ ((unint64_t)(~(v59 << 32) + v59) >> 22);
          v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
          v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
          LOBYTE(v53) = *((_BYTE *)v58 + 9);
          DWORD1(v53) = *((unsigned __int8 *)v58 + 8);
          v66 = (int32x2_t)vand_s8(*(int8x8_t *)&v53, (int8x8_t)0xFF000000FFLL);
          v67 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v66, 0xFuLL)), v66);
          v68 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v67, 0xAuLL), v67), (int32x2_t)0x900000009);
          v69 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v68, 6uLL), v68);
          v70 = (int8x8_t)vadd_s32(v69, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v69, 0xBuLL)));
          v71 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v70, 0x10uLL), v70), (int32x2_t)0x109132F905AC73FELL);
          v72 = v62 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v65 >> 31) ^ v65)
                                         + 95187966
                                         * ((0xD7862706ELL
                                                         * (unint64_t)vadd_s32(v71, vdup_lane_s32(v71, 1)).u32[0]) >> 4))) >> 4);
          for (j = 1; ; ++j)
          {
            v74 = v61 + 24 * v72;
            v75 = !*(_QWORD *)v74 && *(_BYTE *)(v74 + 8) == 0;
            if (v75 && !*(_BYTE *)(v74 + 9))
              break;
            v72 = (v72 + j) & v62;
          }
          v53 = *(_OWORD *)v58;
          *(_QWORD *)(v74 + 16) = v58[2];
          *(_OWORD *)v74 = v53;
          if (v58 == v23)
            v57 = (uint64_t *)(v61 + 24 * v72);
        }
      }
      ++v56;
    }
    while (v56 != v42);
  }
  else
  {
    v57 = 0;
  }
  WTF::fastFree(v39 - 16, (void *)v46, v47, v48, v49, v50, v51, v52);
  v23 = v57;
  return v23[2];
}

int *JSC::NumberNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  int v28;
  unint64_t *v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _BYTE *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 v59;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
  if (v7)
    v13 = 1;
  else
    v13 = 2;
  if (v6)
  {
    if (v6 < 0xFFFE000000000000)
      v14 = 1;
    else
      v14 = v7;
    if ((v14 & 1) == 0)
      v6 = COERCE__INT64((double)(int)v6) + 0x2000000000000;
    v15 = *(_DWORD *)(a2 + 632);
    v16 = (uint64_t *)(a2 + 648);
    v17 = *(_QWORD *)(a2 + 648);
    if (v17
      || (WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a2 + 648), 8u), (v17 = *v16) != 0))
    {
      v18 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    LODWORD(v20) = ~(v13 << 15) + v13;
    LODWORD(v20) = (9 * (v20 ^ (v20 >> 10))) ^ ((9 * (v20 ^ (v20 >> 10))) >> 6);
    v22 = v18 & ((0xD7862706ELL
                * (unint64_t)(95187966
                                   * (((_DWORD)v20 + ~((_DWORD)v20 << 11)) ^ ((v20 + ~((_DWORD)v20 << 11)) >> 16))
                                   + 277951225 * ((v21 >> 31) ^ v21))) >> 4);
    v23 = (unint64_t *)(v17 + 24 * v22);
    v24 = *v23;
    v25 = *((unsigned __int8 *)v23 + 8);
    if (*v23)
      v26 = 0;
    else
      v26 = v25 == 0;
    if (!v26)
    {
      v27 = 0;
      v28 = 1;
      while (v24 != v6 || v25 != v13)
      {
        if (*((_BYTE *)v23 + 8))
          v29 = (unint64_t *)v27;
        else
          v29 = v23;
        if (v24 == 4)
          v27 = (uint64_t *)v29;
        v22 = (v22 + v28) & v18;
        v23 = (unint64_t *)(v17 + 24 * v22);
        v24 = *v23;
        v25 = *((unsigned __int8 *)v23 + 8);
        ++v28;
        if (*v23)
          v30 = 0;
        else
          v30 = v25 == 0;
        if (v30)
        {
          if (v27)
          {
            *v27 = 0;
            v27[1] = 0;
            *((_DWORD *)v27 + 4) = 0;
            --*(_DWORD *)(*v16 - 16);
            v23 = (unint64_t *)v27;
          }
          goto LABEL_32;
        }
      }
      v15 = *((_DWORD *)v23 + 4);
      goto LABEL_47;
    }
LABEL_32:
    *v23 = v6;
    *((_BYTE *)v23 + 8) = v13;
    *((_DWORD *)v23 + 4) = *(_DWORD *)(a2 + 632);
    v31 = *(_QWORD *)(a2 + 648);
    if (v31)
      v32 = *(_DWORD *)(v31 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *v16;
    if (*v16)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
        goto LABEL_38;
    }
    else
    {
      if (3 * v36 > 4 * v35)
      {
LABEL_38:
        v37 = *(_DWORD *)(a2 + 632);
        v38 = *(_QWORD *)(a2 + 384);
        *(_QWORD *)(a2 + 384) = v38 + 1;
        v39 = v38 >> 5;
        v40 = *(unsigned int *)(a2 + 404);
        if (v38 >> 5 >= v40)
        {
          v53 = WTF::fastMalloc((WTF *)0x180);
          v58 = v53;
          v54 = *(unsigned int *)(a2 + 404);
          if ((_DWORD)v54 == *(_DWORD *)(a2 + 400))
          {
            v55 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 392, v54 + 1, (unint64_t)&v58);
            v54 = *(unsigned int *)(a2 + 404);
            *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v54) = *v55;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v54) = v53;
          }
          v40 = (v54 + 1);
          *(_DWORD *)(a2 + 404) = v40;
          v38 = *(_QWORD *)(a2 + 384) - 1;
          v39 = v38 >> 5;
        }
        if (v39 >= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x198259CD8);
        }
        v41 = *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v39) + 12 * (v38 & 0x1F);
        *(_DWORD *)v41 = 0;
        *(_DWORD *)(v41 + 4) = v37 + 0x40000000;
        *(_BYTE *)(v41 + 8) = 0;
        ++*(_DWORD *)(a2 + 632);
        v42 = *(_QWORD *)(a2 + 24);
        v59 = v13;
        v43 = (_QWORD *)(v42 + 48);
        v58 = 0;
        v44 = *(unsigned int *)(v42 + 60);
        if ((_DWORD)v44 == *(_DWORD *)(v42 + 56))
          *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * *(unsigned int *)(v42 + 60)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v58);
        else
          *(_QWORD *)(*v43 + 8 * v44) = 0;
        v45 = *(_DWORD *)(v42 + 60);
        v46 = __CFADD__(v45, 1);
        v47 = v45 + 1;
        *(_DWORD *)(v42 + 60) = v47;
        if (v46)
          goto LABEL_73;
        *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v47 - 8) = v6;
        v48 = (_QWORD *)(v42 + 64);
        v49 = *(unsigned int *)(v42 + 76);
        if ((_DWORD)v49 == *(_DWORD *)(v42 + 72))
        {
          v56 = (_BYTE *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, (WTF *)(v49 + 1), (unint64_t)&v59);
          v49 = *(unsigned int *)(v42 + 76);
          *(_BYTE *)(*(_QWORD *)(v42 + 64) + v49) = *v56;
        }
        else
        {
          *(_BYTE *)(*v48 + v49) = v13;
        }
        *(_DWORD *)(v42 + 76) = v49 + 1;
LABEL_47:
        v50 = (unint64_t)v15 >> 5;
        if (v50 < *(unsigned int *)(a2 + 404))
        {
          v51 = *(_QWORD *)(*(_QWORD *)(a2 + 392) + 8 * v50) + 12 * (v15 & 0x1F);
          goto LABEL_49;
        }
LABEL_73:
        __break(0xC471u);
        JUMPOUT(0x198259CD0);
      }
      if (!(_DWORD)v36)
      {
        v57 = 8;
        goto LABEL_67;
      }
    }
    v57 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_67:
    WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a2 + 648), v57);
    goto LABEL_38;
  }
  v51 = JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a2);
LABEL_49:
  if (!v3)
    return (int *)v51;
  if ((int *)v51 != v3)
    JSC::BytecodeGenerator::emitMove(a2, v3, v51, v8, v9, v10, v11, v12);
  return v3;
}

int *JSC::RegExpNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  size_t v69;
  unint64_t v70;
  uint64_t v71;
  JSC::VM *v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;

  if (a2 + 208 == a3)
    return 0;
  v7 = **(_QWORD **)(a1 + 72);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 16);
    v9 = *(unsigned __int16 **)(v7 + 8);
    LODWORD(v7) = *(_DWORD *)(v7 + 4);
    v10 = (v8 >> 2) & 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = JSC::Yarr::parseFlags(v9, v7 | (unint64_t)(v10 << 32));
  if ((v11 & 0xFF0000) == 0)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_86;
  }
  v16 = JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93032), *(_QWORD *)(a2 + 696), *(const WTF::StringImpl **)(a1 + 64), (unsigned __int16)v11, v12, v13, v14, v15);
  if (*(_BYTE *)(v16 + 20))
  {
    v61 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(*(_QWORD *)(a2 + 192) + 48));
    v3 = *(_QWORD *)(a2 + 696);
    v62 = (const char *)JSC::Yarr::errorMessage(*(unsigned __int8 *)(v16 + 20));
    if (v62)
    {
      v68 = (WTF::AtomStringImpl *)v62;
      v69 = strlen(v62);
      if (v69)
      {
        v70 = v69;
        if (*(char *)v68 < 0)
        {
          JSC::Identifier::fromString(v3, v68, v69, v63, v64, v65, v66, v67, (rlim_t *)&v118);
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v61, (uint64_t *)&v118);
          v108 = v118;
          v118 = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2)
            {
              WTF::StringImpl::~StringImpl(v108, v106, v107, v63, v64, v65, v66, v67);
              WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
            }
            else
            {
              *(_DWORD *)v108 -= 2;
            }
          }
          v109 = *v61 - 1;
          if (v109 >> 6 < *((unsigned int *)v61 + 5))
          {
            v72 = (JSC::VM *)(*(_QWORD *)(v61[1] + 8 * (v109 >> 6)) + 8 * (v109 & 0x3F));
            goto LABEL_77;
          }
        }
        else
        {
          v71 = *(unsigned __int8 *)v68;
          if (v69 == 1)
          {
            v72 = (JSC::VM *)v61[v71 + 3];
            if (v72)
            {
LABEL_77:
              JSC::BytecodeGenerator::emitThrowStaticError(a2, 4, v72, v63, v64, v65, v66, v67);
              v84 = (int *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
              return JSC::BytecodeGenerator::emitLoad(a2, v84, 10, v85, v86, v87, v88, v89);
            }
            JSC::Identifier::fromString(v3, v68, 1uLL, v63, v64, v65, v66, v67, (rlim_t *)&v118);
            WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v61, (uint64_t *)&v118);
            v75 = v118;
            v118 = 0;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, v73, v74, v63, v64, v65, v66, v67);
                WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
              }
              else
              {
                *(_DWORD *)v75 -= 2;
              }
            }
            v76 = *v61 - 1;
            v77 = v76 >> 6;
            if (v76 >> 6 >= *((unsigned int *)v61 + 5))
            {
              __break(0xC471u);
            }
            else if ((*(char *)v68 & 0x80000000) == 0)
            {
              v78 = v61[1];
              v79 = 8 * (v76 & 0x3F);
              v61[*(unsigned __int8 *)v68 + 3] = *(_QWORD *)(v78 + 8 * v77) + v79;
LABEL_76:
              v72 = (JSC::VM *)(*(_QWORD *)(v78 + 8 * v77) + v79);
              goto LABEL_77;
            }
LABEL_94:
            __break(1u);
            goto LABEL_95;
          }
          v72 = (JSC::VM *)v61[v71 + 131];
          if (v72 && WTF::equalInternal<unsigned char>(*(_QWORD *)v72, (unint64_t)v68, v69))
            goto LABEL_77;
          JSC::Identifier::fromString(v3, v68, v70, v63, v64, v65, v66, v67, (rlim_t *)&v118);
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v61, (uint64_t *)&v118);
          v82 = v118;
          v118 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
            {
              WTF::StringImpl::~StringImpl(v82, v80, v81, v63, v64, v65, v66, v67);
              WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
            }
            else
            {
              *(_DWORD *)v82 -= 2;
            }
          }
          v83 = *v61 - 1;
          v77 = v83 >> 6;
          if (v83 >> 6 < *((unsigned int *)v61 + 5))
          {
            if ((*(char *)v68 & 0x80000000) == 0)
            {
              v78 = v61[1];
              v79 = 8 * (v83 & 0x3F);
              v61[*(unsigned __int8 *)v68 + 131] = *(_QWORD *)(v78 + 8 * v77) + v79;
              goto LABEL_76;
            }
            goto LABEL_94;
          }
        }
LABEL_95:
        __break(0xC471u);
        JUMPOUT(0x19825A380);
      }
    }
LABEL_86:
    v72 = (JSC::VM *)(*(_QWORD *)(v3 + 41952) + 8);
    goto LABEL_77;
  }
  v17 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v18 = *(_DWORD *)(v17 + 4);
  v25 = *(unsigned int *)(JSC::BytecodeGenerator::addConstantValue(a2, v16) + 4);
  v26 = (v18 - 1073741808) < 0x80;
  if (v18 <= 0x3FFFFFFF)
    v26 = (v18 + 128) < 0x90;
  if (!v26)
    goto LABEL_29;
  v27 = (v25 - 1073741808) < 0x80;
  if ((int)v25 <= 0x3FFFFFFF)
    v27 = (v25 + 128) < 0x90;
  if (v27)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x8E, v19, v20, v21, v22, v23, v24);
    LOBYTE(v118) = -114;
    v28 = *(unsigned int *)(a2 + 12);
    v29 = *(unsigned int *)(a2 + 16);
    if (v28 > v29)
    {
      *(_DWORD *)(a2 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v29) = -114;
      v32 = *(_DWORD *)(a2 + 12);
      v33 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if ((_DWORD)v28 == *(_DWORD *)(a2 + 8))
      {
        v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v28 + 1), (unint64_t)&v118);
        v28 = *(unsigned int *)(a2 + 12);
        v30 = *(_QWORD *)a2;
        v31 = *v56;
      }
      else
      {
        v30 = *(_QWORD *)a2;
        v31 = -114;
      }
      *(_BYTE *)(v30 + v28) = v31;
      v32 = *(_DWORD *)(a2 + 12) + 1;
      v33 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v32;
      *(_DWORD *)(a2 + 16) = v33;
    }
    v34 = v18 + 16;
    if (v18 <= 0x3FFFFFFF)
      v34 = v18;
    LOBYTE(v118) = v34;
    if (v32 > v33)
    {
      *(_DWORD *)(a2 + 16) = v33 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v33) = v34;
      v37 = *(_DWORD *)(a2 + 12);
      v38 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v35 = v32;
      if (v32 == *(_DWORD *)(a2 + 8))
      {
        v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v32 + 1), (unint64_t)&v118);
        v35 = *(unsigned int *)(a2 + 12);
        v36 = *(_QWORD *)a2;
        v34 = *v57;
      }
      else
      {
        v36 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v36 + v35) = v34;
      v37 = *(_DWORD *)(a2 + 12) + 1;
      v38 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v37;
      *(_DWORD *)(a2 + 16) = v38;
    }
    v39 = v25 + 16;
    if ((int)v25 <= 0x3FFFFFFF)
      v39 = v25;
    LOBYTE(v118) = v39;
    if (v37 > v38)
    {
      *(_DWORD *)(a2 + 16) = v38 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v38) = v39;
    }
    else
    {
      v40 = v37;
      if (v37 == *(_DWORD *)(a2 + 8))
      {
        v58 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v37 + 1), (unint64_t)&v118);
        v40 = *(unsigned int *)(a2 + 12);
        v41 = *(_QWORD *)a2;
        v39 = *v58;
      }
      else
      {
        v41 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v41 + v40) = v39;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_29:
    if (v18 <= 0x3FFFFFFF)
      v43 = (v18 + 0x8000) >> 6 < 0x201;
    else
      v43 = (v18 - 1073741760) < 0x8000;
    if (!v43)
      goto LABEL_67;
    v44 = (v25 - 1073741760) < 0x8000;
    if ((int)v25 <= 0x3FFFFFFF)
      v44 = (v25 + 0x8000) >> 6 < 0x201;
    if (v44)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x8E, v19, v20, v21, v22, v23, v24);
      LOBYTE(v118) = 0x80;
      v45 = *(unsigned int *)(a2 + 12);
      v46 = *(unsigned int *)(a2 + 16);
      if (v45 > v46)
      {
        *(_DWORD *)(a2 + 16) = v46 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v46) = 0x80;
        v49 = *(_DWORD *)(a2 + 12);
        v50 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v45 == *(_DWORD *)(a2 + 8))
        {
          v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v45 + 1), (unint64_t)&v118);
          v45 = *(unsigned int *)(a2 + 12);
          v47 = *(_QWORD *)a2;
          v48 = *v59;
        }
        else
        {
          v47 = *(_QWORD *)a2;
          v48 = 0x80;
        }
        *(_BYTE *)(v47 + v45) = v48;
        v49 = *(_DWORD *)(a2 + 12) + 1;
        v50 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v49;
        *(_DWORD *)(a2 + 16) = v50;
      }
      v51 = -114;
      LOBYTE(v118) = -114;
      if (v49 > v50)
      {
        *(_DWORD *)(a2 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v50) = -114;
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a2 + 8))
        {
          v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v49 + 1), (unint64_t)&v118);
          v52 = *(unsigned int *)(a2 + 12);
          v53 = *(_QWORD *)a2;
          v51 = *v60;
        }
        else
        {
          v53 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v53 + v52) = v51;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      v54 = v18 + 64;
      if (v18 <= 0x3FFFFFFF)
        v54 = v18;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v54);
      v55 = v25 + 64;
      if ((int)v25 <= 0x3FFFFFFF)
        v55 = v25;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v55);
    }
    else
    {
LABEL_67:
      JSC::OpNewRegexp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v18, v25, v20, v21, v22, v23, v24);
    }
  }
  return (int *)v17;
}

JSC::BytecodeGenerator *JSC::ThisNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BytecodeGenerator *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::BytecodeGenerator *v16;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE v26[28];
  uint64_t v27;
  int v28;

  v8 = (JSC::BytecodeGenerator *)a3;
  JSC::BytecodeGenerator::ensureThis(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  if ((JSC::BytecodeGenerator *)((char *)this + 208) == v8)
    return 0;
  v16 = (JSC::BytecodeGenerator *)((char *)this + 220);
  if (!v8 || v16 == v8)
    v8 = (JSC::BytecodeGenerator *)((char *)this + 220);
  else
    JSC::BytecodeGenerator::emitMove((uint64_t)this, (int *)v8, (uint64_t)v16, v11, v12, v13, v14, v15);
  if ((*((_BYTE *)this + 104) & 2) != 0)
  {
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *((_DWORD *)this + 56);
    v20 = JSC::BytecodeGenerator::resolveType(this);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>((uint64_t)this, v19, 0, 2, 0, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *((_DWORD *)this + 3) - 1;
    v25 = *((_QWORD *)this + 3);
    HIDWORD(v27) = v18 + 3;
    v28 = v24;
    LODWORD(v27) = v23;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v25 + 232), &v28, &v27, (uint64_t)v26);
  }
  return v8;
}

uint64_t JSC::SuperNode::emitBytecode(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;

  v10 = JSC::emitHomeObjectForCallee(a2, a2, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
  JSC::BytecodeGenerator::emitGetPrototypeOf((uint64_t)a2, v12, v11[1], v13, v14, v15, v16, v17);
  --*v11;
  v18 = (int *)JSC::BytecodeGenerator::finalDestination((uint64_t)a2, a3, 0);
  if ((int *)((char *)a2 + 208) == v18)
    return 0;
  v24 = v18;
  if (!v18 || v18 == (int *)v12)
    return v12;
  JSC::BytecodeGenerator::emitMove((uint64_t)a2, v18, v12, v19, v20, v21, v22, v23);
  return (uint64_t)v24;
}

uint64_t JSC::emitSuperBaseForCallee(JSC *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = JSC::emitHomeObjectForCallee(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = v9;
  if (v9)
    ++*v9;
  v11 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  JSC::BytecodeGenerator::emitGetPrototypeOf((uint64_t)this, v11, v10[1], v12, v13, v14, v15, v16);
  --*v10;
  return v11;
}

uint64_t JSC::ImportNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _BYTE v66[16];
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[8];
  WTF *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;

  v11 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0x6Du, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  if (*(_QWORD *)(a1 + 72))
    v13 = 2;
  else
    v13 = 1;
  JSC::CallArguments::CallArguments((uint64_t)v69, a2, 0, v13);
  JSC::BytecodeGenerator::emitLoad(a2, *(int **)v70, 10, v14, v15, v16, v17, v18);
  v24 = *((_QWORD *)v70 + 1);
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_BYTE *)(a2 + 709);
  v27 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v66 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v25 + 24)
      && (*(_BYTE *)(a2 + 104) & 1) != 0
      && !*(_BYTE *)(a2 + 707)
      && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v25 + 8)
       || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v25 + 12)
       || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v25 + 16)
       || *(_DWORD *)(a2 + 748) != 5))
    {
      v67 = v25;
      v68 = v24;
      v49 = *(_QWORD *)(v25 + 8);
      *(_DWORD *)(a2 + 744) = *(_DWORD *)(v25 + 16);
      *(_QWORD *)(a2 + 736) = v49;
      *(_DWORD *)(a2 + 748) = 5;
      v50 = *(_DWORD *)(v25 + 8);
      v51 = *(_DWORD *)(v25 + 12);
      v52 = *(_DWORD *)(v25 + 16);
      if (v50 != -1 || v51 != -1 || v52 != -1)
      {
        v53 = *(_QWORD *)(a2 + 192);
        v54 = *(_DWORD *)(v53 + 176);
        v24 = v51 - v54;
        v55 = v52 - v54;
        if (v52 < v54)
          v55 = 0;
        v56 = v24 >= v55;
        v57 = v24 - v55;
        if (v56)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v24, 0, 0, (v50 + ~*(_DWORD *)(v53 + 184)) | (unint64_t)(v57 << 32));
      }
      JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v24, v19, v20, v21, v22, v23);
      v25 = v67;
      v24 = v68;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a2, v24);
  }
  *(_BYTE *)(a2 + 710) = v27;
  *(_BYTE *)(a2 + 709) = v26;
  v33 = *(_QWORD *)(a1 + 72);
  if (v33)
  {
    v34 = *((_QWORD *)v70 + 2);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v66 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(v33 + 24)
        && (*(_BYTE *)(a2 + 104) & 1) != 0
        && !*(_BYTE *)(a2 + 707)
        && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v33 + 8)
         || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v33 + 12)
         || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v33 + 16)
         || *(_DWORD *)(a2 + 748) != 5))
      {
        v67 = v33;
        v68 = v34;
        v58 = *(_QWORD *)(v33 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v33 + 16);
        *(_QWORD *)(a2 + 736) = v58;
        *(_DWORD *)(a2 + 748) = 5;
        v59 = *(_DWORD *)(v33 + 8);
        v60 = *(_DWORD *)(v33 + 12);
        v61 = *(_DWORD *)(v33 + 16);
        if (v59 != -1 || v60 != -1 || v61 != -1)
        {
          v62 = *(_QWORD *)(a2 + 192);
          v63 = *(_DWORD *)(v62 + 176);
          v34 = v60 - v63;
          v64 = v61 - v63;
          if (v61 < v63)
            v64 = 0;
          v56 = v34 >= v64;
          v65 = v34 - v64;
          if (v56)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v34, 0, 0, (v59 + ~*(_DWORD *)(v62 + 184)) | (unint64_t)(v65 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v34, v28, v29, v30, v31, v32);
        v33 = v67;
        v34 = v68;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, a2, v34);
    }
    *(_BYTE *)(a2 + 710) = v27;
    *(_BYTE *)(a2 + 709) = v26;
  }
  v35 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v12);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, v35, (uint64_t)v12, 0, (uint64_t)v69, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52), 0);
  if (v72)
  {
    v43 = v70;
    v44 = 8 * v72;
    do
    {
      v45 = *(_DWORD **)v43;
      *(_QWORD *)v43 = 0;
      if (v45)
        --*v45;
      v43 = (WTF *)((char *)v43 + 8);
      v44 -= 8;
    }
    while (v44);
  }
  v46 = v70;
  if (&v73 == (uint64_t *)v70 || v70 == 0)
  {
    if (!v12)
      return v35;
LABEL_25:
    --*v12;
    return v35;
  }
  v70 = 0;
  v71 = 0;
  WTF::fastFree((unint64_t)v46, v36, v37, v38, v39, v40, v41, v42);
  if (v12)
    goto LABEL_25;
  return v35;
}

int *JSC::NewTargetNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v9;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = a3;
  v9 = *(_QWORD *)(a2 + 288);
  if (!v8 || (int *)v9 == v8)
    return *(int **)(a2 + 288);
  JSC::BytecodeGenerator::emitMove(a2, v8, v9, a4, a5, a6, a7, a8);
  return v8;
}

uint64_t JSC::ImportMetaNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a2 + 709);
  v11 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v23 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v9 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v9 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v9 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v9 + 16) ? (v13 = *(_DWORD *)(a2 + 748) == 5) : (v13 = 0), !v13))
      {
        v23[0] = v9;
        v23[1] = a3;
        v14 = *(_QWORD *)(v9 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v9 + 16);
        *(_QWORD *)(a2 + 736) = v14;
        *(_DWORD *)(a2 + 748) = 5;
        v15 = *(_DWORD *)(v9 + 8);
        v16 = *(_DWORD *)(v9 + 12);
        v17 = *(_DWORD *)(v9 + 16);
        if (v15 != -1 || v16 != -1 || v17 != -1)
        {
          v18 = *(_QWORD *)(a2 + 192);
          v19 = *(_DWORD *)(v18 + 176);
          a3 = v16 - v19;
          v20 = v17 - v19;
          if (v17 < v19)
            v20 = 0;
          v21 = a3 >= v20;
          v22 = a3 - v20;
          if (v21)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v15 + ~*(_DWORD *)(v18 + 184)) | (unint64_t)(v22 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
        v9 = v23[0];
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2);
  }
  *(_BYTE *)(a2 + 710) = v11;
  *(_BYTE *)(a2 + 709) = v10;
  return result;
}

BOOL JSC::ResolveNode::isPure(JSC::ResolveNode *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned __int8 v26;

  JSC::BytecodeGenerator::variable((uint64_t)&v25, (uint64_t)a2, *((_QWORD *)this + 4), 0, a5, a6, a7, a8);
  v15 = v26;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return v15 == 2;
}

uint64_t JSC::ResolveNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  _QWORD *v69;
  int v70;
  int v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  WTF::StringImpl *v119;
  uint64_t *v121;
  int v122;
  _BYTE *v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t i;
  uint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t *v164;
  _DWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _BOOL4 v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  unsigned int *v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned int v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  unint64_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  unsigned __int8 *v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t **v230;
  uint64_t *j;
  uint64_t *v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  JSC::CompactTDZEnvironment *v237;
  uint64_t v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  WTF::StringImpl *v242;
  int v243;
  WTF::StringImpl *v244;
  JSC::CompactTDZEnvironment *v245;
  uint64_t v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  WTF::StringImpl *v250;
  int v251;
  int v252;
  int v253;
  WTF *v254;
  WTF *v255;
  uint64_t *v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD v262[2];
  uint64_t v263;
  char v264;
  char v265;
  char v266;
  char v267;
  char v268;
  unint64_t v269;
  int v270;

  v9 = *(WTF::StringImpl ***)(a1 + 32);
  v10 = JSC::Symbols::thisPrivateName[0];
  JSC::Symbols::thisPrivateName[0] += 2;
  if (*v9 == (WTF::StringImpl *)JSC::Symbols::thisPrivateName)
  {
    v43 = a3;
    v42 = a1;
    if (v10)
    {
      JSC::Symbols::thisPrivateName[0] = v10;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
    }
    v149 = a2 + 220;
    LODWORD(v170) = *(_DWORD *)(a2 + 224);
    v171 = v170 != 0x3FFFFFFF;
    if ((_DWORD)v170 == 0x3FFFFFFF)
      v170 = 0xFFFFFFFFLL;
    else
      v170 = v170;
    v172 = (2 * v171) | (v170 << 32);
    v150 = *v9;
    if (*v9)
      *(_DWORD *)v150 += 2;
    v259 = v150;
    v260 = v172;
    v261 = a2 + 220;
    v262[0] = 0x100000002;
    LODWORD(v262[1]) = 0;
    BYTE4(v262[1]) = 0;
LABEL_167:
    v151 = *(unsigned int *)(a2 + 156);
    while (v151)
    {
      --v151;
      v152 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * v151);
      if (v152)
      {
        v153 = *((_DWORD *)v150 + 4);
        if ((v153 & 0x20) != 0)
          v153 = *((_DWORD *)v150 + 8);
        v154 = *(_DWORD *)(v152 - 8);
        v155 = v154 & (v153 >> 8);
        v156 = *(WTF::StringImpl **)(v152 + 16 * v155);
        if (v156 != v150)
        {
          v157 = 1;
          while (v156)
          {
            v155 = ((_DWORD)v155 + v157) & v154;
            v156 = *(WTF::StringImpl **)(v152 + 16 * v155);
            ++v157;
            if (v156 == v150)
              goto LABEL_178;
          }
          v155 = *(unsigned int *)(v152 - 4);
        }
LABEL_178:
        v158 = v152 + 16 * v155;
        v152 += 16 * *(unsigned int *)(v152 - 4);
      }
      else
      {
        v158 = 0;
      }
      if (v158 != v152)
      {
        if (*(_DWORD *)(v158 + 8))
        {
LABEL_181:
          v159 = *(_DWORD *)(v149 + 4);
          if (!JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v159, a3, a4, a5, a6, a7, a8)&& !JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v159, a3, a4, a5, a6, a7, a8))
          {
            JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v159, a3, a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_185;
      }
    }
    for (i = *(_QWORD *)(a2 + 128); i; i = *(_QWORD *)(i + 24))
    {
      v237 = *(JSC::CompactTDZEnvironment **)(i + 8);
      if (*((_DWORD *)v237 + 4) != 1)
        JSC::CompactTDZEnvironment::toTDZEnvironmentSlow(v237, a2, a3, a4, a5, a6, a7, a8);
      v238 = *(_QWORD *)v237;
      if (*(_QWORD *)v237)
      {
        v239 = *((_DWORD *)v150 + 4);
        if ((v239 & 0x20) != 0)
          v239 = *((_DWORD *)v150 + 8);
        v240 = *(_DWORD *)(v238 - 8);
        v241 = v240 & (v239 >> 8);
        v242 = *(WTF::StringImpl **)(v238 + 8 * v241);
        if (v242 == v150)
          goto LABEL_181;
        v243 = 1;
        while (v242)
        {
          v241 = (v241 + v243) & v240;
          v242 = *(WTF::StringImpl **)(v238 + 8 * v241);
          ++v243;
          if (v242 == v150)
            goto LABEL_181;
        }
      }
    }
LABEL_185:
    if (a2 + 208 == v43)
    {
      v43 = 0;
    }
    else
    {
      v161 = **(_QWORD **)(v42 + 32);
      if (v161)
        v162 = *(_DWORD *)(v161 + 4) - 1;
      else
        v162 = -1;
      if ((*(_BYTE *)(a2 + 104) & 2) != 0)
      {
        v211 = *(_DWORD *)(v42 + 12);
        if (v261 || v260 == 1)
        {
          v212 = LODWORD(v262[1]) - 0x40000000;
          v213 = 1;
        }
        else
        {
          v213 = 0;
          v212 = *(_DWORD *)(a2 + 412);
        }
        v214 = *(_DWORD *)(v149 + 4);
        v215 = JSC::BytecodeGenerator::addConstant(a2, (WTF::AtomStringImpl *)&v259, a3, a4, a5, a6, a7, a8);
        v216 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
        JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v214, v212, v213, v215, v216, v217, v218);
        v219 = *(_DWORD *)(a1 + 12);
        v220 = *(_QWORD *)(a2 + 24);
        v270 = *(_DWORD *)(a2 + 12) - 1;
        LODWORD(v269) = v219;
        HIDWORD(v269) = v211 + v162;
        WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v220 + 232), &v270, (uint64_t *)&v269, (uint64_t)&v263);
        v43 = a3;
      }
      if (!v43 || v149 == v43)
        v43 = v149;
      else
        JSC::BytecodeGenerator::emitMove(a2, (int *)v43, v149, a4, a5, a6, a7, a8);
    }
    goto LABEL_130;
  }
  if (v10)
  {
    JSC::Symbols::thisPrivateName[0] = v10;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
  }
  v11 = *(unsigned int *)(a2 + 124);
  v258 = (uint64_t *)(a2 + 88);
  do
  {
    if (!v11)
      goto LABEL_47;
    if (--v11 >= (unint64_t)*(unsigned int *)(a2 + 124))
    {
      __break(0xC471u);
      JUMPOUT(0x19825BC04);
    }
    v12 = *(_QWORD *)(a2 + 112);
    if (*(_BYTE *)(v12 + 24 * v11 + 16))
    {
LABEL_47:
      v41 = *v9;
      if (*v9)
        *(_DWORD *)v41 += 2;
      v43 = a3;
      v42 = a1;
      v259 = v41;
      LOBYTE(v260) = 0;
      HIDWORD(v260) = -1;
      v261 = 0;
      memset(v262, 0, 13);
      goto LABEL_50;
    }
    v13 = *(_QWORD *)(v12 + 24 * v11);
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      goto LABEL_42;
    v15 = *v9;
    v16 = *((_DWORD *)*v9 + 4);
    if ((v16 & 0x20) != 0)
      v16 = *((_DWORD *)v15 + 8);
    v17 = *(_DWORD *)(v14 - 8);
    v18 = v17 & (v16 >> 8);
    v19 = *(WTF::StringImpl **)(v14 + 16 * v18);
    if (v19 != v15)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v17;
        v19 = *(WTF::StringImpl **)(v14 + 16 * v18);
        ++v20;
        if (v19 == v15)
          goto LABEL_15;
      }
LABEL_42:
      v263 = 1;
      v23 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v21 = v14 + 16 * v18;
    v24 = *(_QWORD *)(v21 + 8);
    v22 = (_QWORD **)(v21 + 8);
    v23 = v24;
    v263 = 1;
    if ((v24 & 1) != 0)
    {
      v263 = v23;
    }
    else
    {
      v173 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v23 = (uint64_t)v173;
      v174 = *v22;
      *v173 = **v22;
      v175 = (unsigned int *)v174[1];
      if (v175)
      {
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 + 1, v175));
        v177 = v263;
        v173[1] = v175;
        if ((v177 & 1) == 0 && v177)
        {
          v221 = *(_QWORD *)(v177 + 8);
          v255 = (WTF *)v177;
          *(_QWORD *)(v177 + 8) = 0;
          if (v221)
          {
            do
            {
              v222 = __ldaxr((unsigned int *)v221);
              v223 = v222 - 1;
            }
            while (__stlxr(v223, (unsigned int *)v221));
            if (!v223)
            {
              atomic_store(1u, (unsigned int *)v221);
              v230 = (uint64_t **)(v221 + 8);
              for (j = *(uint64_t **)(v221 + 8); j != (uint64_t *)v230; j = *v230)
              {
                v233 = *j;
                v232 = (uint64_t *)j[1];
                *v232 = *j;
                *(_QWORD *)(v233 + 8) = v232;
                *j = 0;
                j[1] = 0;
              }
              WTF::fastFree(v221, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
          }
          WTF::fastFree((unint64_t)v255, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      else
      {
        v173[1] = 0;
      }
      v263 = v23;
    }
LABEL_17:
    if ((v23 & 1) != 0)
      v25 = (unint64_t *)&v263;
    else
      v25 = (unint64_t *)v23;
    v26 = *v25;
    if (*v25 < 2)
      goto LABEL_38;
    v27 = (*(unsigned __int8 *)(v13 + 21) >> 2) & 7;
    if (v27 != 5)
    {
      v28 = *(_DWORD *)(v12 + 24 * v11 + 20);
      v29 = v26 & 0x30;
      v30 = v26 >> 6;
      if (v29 == 32)
      {
        v31 = (v26 >> 6);
        if ((v30 & 0x80000000) != 0)
        {
          v32 = v31 ^ 0xFFFFFFFFLL;
          v33 = v32 >> 5;
          if (v32 >> 5 >= *(unsigned int *)(a2 + 100))
          {
            __break(0xC471u);
            JUMPOUT(0x19825BC14);
          }
          v34 = (_QWORD *)(a2 + 88);
          goto LABEL_26;
        }
        if ((_DWORD)v30 == 3)
        {
          v35 = a2 + 232;
        }
        else
        {
          v32 = (int)v31 - 5;
          v33 = v32 >> 5;
          if (v32 >> 5 >= *(unsigned int *)(a2 + 356))
          {
            __break(0xC471u);
            goto LABEL_292;
          }
          v34 = (_QWORD *)(a2 + 344);
LABEL_26:
          v35 = *(_QWORD *)(*v34 + 8 * v33) + 12 * (v32 & 0x1F);
        }
      }
      else
      {
        v35 = 0;
      }
      v36 = v26 & 2;
      if ((v26 & 4) != 0)
        v36 = v26 & 2 | 4;
      v37 = *v9;
      if (*v9)
        *(_DWORD *)v37 += 2;
      v38 = v27 == 2;
      if (v29 == 32)
        v39 = 2;
      else
        v39 = 3;
      if (v29 <= 0x10)
        v40 = 1;
      else
        v40 = v39;
      v259 = v37;
      v260 = v40 | (v30 << 32);
      v261 = v35;
      v262[0] = v36;
      LODWORD(v262[1]) = v28;
      BYTE4(v262[1]) = v38;
      goto LABEL_38;
    }
    if (!*(_BYTE *)(a2 + 708))
    {
      v178 = *(_DWORD *)(v12 + 24 * v11 + 20);
      v179 = v26 & 0x30;
      v180 = v26 >> 6;
      if (v179 == 32)
      {
        v181 = (v26 >> 6);
        if ((v180 & 0x80000000) != 0)
        {
          v182 = v181 ^ 0xFFFFFFFFLL;
          v183 = v182 >> 5;
          if (v182 >> 5 >= *(unsigned int *)(a2 + 100))
            goto LABEL_293;
          v184 = (_QWORD *)(a2 + 88);
        }
        else
        {
          if ((_DWORD)v180 == 3)
          {
            v185 = a2 + 232;
            goto LABEL_228;
          }
          v182 = (int)v181 - 5;
          v183 = v182 >> 5;
          if (v182 >> 5 >= *(unsigned int *)(a2 + 356))
          {
            __break(0xC471u);
            JUMPOUT(0x19825BC2CLL);
          }
          v184 = (_QWORD *)(a2 + 344);
        }
        v185 = *(_QWORD *)(*v184 + 8 * v183) + 12 * (v182 & 0x1F);
      }
      else
      {
        v185 = 0;
      }
LABEL_228:
      if ((v26 & 4) != 0)
        v186 = 6;
      else
        v186 = 2;
      v187 = *v9;
      if (*v9)
        *(_DWORD *)v187 += 2;
      v188 = 2;
      if (v179 != 32)
        v188 = 3;
      if (v179 <= 0x10)
        v189 = 1;
      else
        v189 = v188;
      v259 = v187;
      v260 = v189 | (v180 << 32);
      v261 = v185;
      LODWORD(v262[1]) = v178;
      BYTE4(v262[1]) = 0;
      v262[0] = v186;
      goto LABEL_38;
    }
    v210 = *v9;
    if (*v9)
      *(_DWORD *)v210 += 2;
    v259 = v210;
    LOBYTE(v260) = 0;
    HIDWORD(v260) = -1;
    v261 = 0;
    memset(v262, 0, 13);
LABEL_38:
    if ((v23 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v263, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  while (v26 < 2);
  v149 = v261;
  v43 = a3;
  v42 = a1;
  if (v261)
  {
    v150 = v259;
    goto LABEL_167;
  }
LABEL_50:
  v44 = **(_QWORD **)(v42 + 32);
  if (v44)
    v45 = *(_DWORD *)(v44 + 4);
  else
    v45 = 0;
  v46 = *(_DWORD *)(v42 + 40);
  v47 = *(_DWORD *)(v42 + 44);
  v48 = v47 + v45;
  v49 = *(_DWORD *)(v42 + 48);
  if ((v46 != -1 || v48 != -1 || v49 != -1) && (v46 & v47 & v49) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
  {
    v51 = *(_QWORD *)(a2 + 192);
    v52 = *(_DWORD *)(v51 + 176);
    v53 = v48 - v52;
    v54 = v49 - v52;
    if (v49 < v52)
      v54 = 0;
    v55 = v53 - v54;
    if (v53 >= v54)
    {
      v56 = v46 + ~*(_DWORD *)(v51 + 184);
      v57 = *(_DWORD *)(a2 + 12);
      v58 = *(_QWORD *)(a2 + 24);
      BYTE5(v263) = 2;
      v264 = 2;
      v265 = 2;
      v266 = 2;
      v267 = 2;
      v268 = 2;
      v254 = (WTF *)(v58 + 160);
      v59 = *(_DWORD *)(v58 + 172);
      if ((v59 - *(_DWORD *)(v58 + 136)) >> 4 > 0x270)
      {
        v269 = __PAIR64__(v59, v57);
        v198 = *(unsigned int *)(v58 + 156);
        if ((_DWORD)v198 == *(_DWORD *)(v58 + 152))
        {
          WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::Chapter>(v58 + 144, (unint64_t)&v269);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v58 + 144) + 8 * v198) = v269;
          ++*(_DWORD *)(v58 + 156);
        }
        *(_DWORD *)(v58 + 136) = v59;
        if (v57 >= 0x7FFFFF)
          v62 = 0x7FFFFF;
        else
          v62 = v57;
        LODWORD(v269) = v62 | 0xF8000000;
        v199 = *(unsigned int *)(v58 + 172);
        if ((_DWORD)v199 == *(_DWORD *)(v58 + 168))
        {
          WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v254, (unint64_t)&v269);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v58 + 160) + 4 * v199) = v62 | 0xF8000000;
          ++*(_DWORD *)(v58 + 172);
        }
        v61 = 0;
        v60 = 0;
        *(_QWORD *)(v58 + 124) = 0;
        *(_QWORD *)(v58 + 116) = 0;
        *(_DWORD *)(v58 + 132) = 0;
        *(_DWORD *)(v58 + 112) = v62;
      }
      else
      {
        v60 = *(_DWORD *)(v58 + 124);
        v62 = *(_DWORD *)(v58 + 112);
        v61 = *(_DWORD *)(v58 + 116);
      }
      v63 = v57 - v62;
      v64 = v56 - v61;
      if (v56 == v61)
      {
        v65 = *(_DWORD *)(v58 + 120);
      }
      else
      {
        v65 = 0;
        *(_DWORD *)(v58 + 120) = 0;
      }
      v66 = v53 - v60;
      if (v63 >= 0x1E)
      {
        LODWORD(v263) = v57 - v62;
        WORD2(v263) = 512;
        v67 = 1;
        v63 = 0;
      }
      else
      {
        v67 = 0;
      }
      if ((v66 - 64) <= 0xFFFFFF7F)
      {
        v252 = 0;
        v163 = &v263 + v67++;
        *(_DWORD *)v163 = v66;
        *((_WORD *)v163 + 2) = 513;
      }
      else
      {
        v252 = v66;
      }
      if (v45 >= 0x40)
      {
        v166 = &v263 + v67++;
        *(_DWORD *)v166 = v45;
        *((_WORD *)v166 + 2) = 514;
        v45 = 0;
      }
      v68 = v55 - v65;
      if ((v64 - 4) <= 0xFFFFFFF7)
      {
        v164 = &v263 + v67++;
        *(_DWORD *)v164 = v64;
        *((_WORD *)v164 + 2) = 516;
        v64 = 0;
      }
      v253 = v64;
      if (v68 == v66)
      {
        v68 = 0x7FFFFFFF;
        goto LABEL_77;
      }
      if ((v68 - 15) <= 0xFFFFFFE0)
      {
        v121 = &v263 + v67;
        *(_DWORD *)v121 = v68;
        *((_WORD *)v121 + 2) = 517;
        ++v67;
        *(_DWORD *)(v58 + 112) = v57;
        *(_DWORD *)(v58 + 116) = v56;
        *(_DWORD *)(v58 + 120) = v55;
        *(_DWORD *)(v58 + 124) = v53;
        v68 = 0;
LABEL_137:
        v122 = 0;
        v123 = (char *)&v263 + 8 * v67 - 3;
        v124 = v67 - 1;
        v125 = v67;
        while (2)
        {
          v126 = *(_DWORD *)(v123 - 1);
          if (v126 > 5u)
            goto LABEL_221;
          v127 = *(_DWORD *)(v123 - 5);
          if (((1 << v126) & 0x32) != 0)
          {
            if (v127 + 512 < 0x400)
              goto LABEL_141;
LABEL_145:
            if (v126 == 1)
            {
LABEL_146:
              if (v127 + 0x400000 < 0x800000)
                goto LABEL_147;
LABEL_221:
              *v123 = 2;
            }
            else
            {
              if (v126 > 5u)
                goto LABEL_221;
              if (((1 << v126) & 0xD) == 0)
              {
                if (((1 << v126) & 0x30) != 0)
                  goto LABEL_146;
                goto LABEL_221;
              }
              if (v127 >> 23)
                goto LABEL_221;
LABEL_147:
              *v123 = 0;
            }
          }
          else
          {
            if (v127 > 0x3FF)
              goto LABEL_145;
LABEL_141:
            *v123 = 1;
            ++v122;
            v125 = v124;
          }
          v123 -= 8;
          if (--v124 == -1)
          {
            if ((v122 & 1) == 0)
              goto LABEL_151;
            if (v125 < 6)
            {
              *((_BYTE *)&v263 + 8 * v125 + 5) = 0;
LABEL_151:
              std::__introsort<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,false>(&v263, (unsigned __int8 *)&v263 + 8 * v67, 126 - 2 * __clz(v67), 1);
              v128 = 0;
              v69 = (_QWORD *)(v58 + 160);
              while (v128 < 6)
              {
                v129 = v128;
                v130 = &v263 + v128;
                if (!*((_BYTE *)v130 + 5))
                {
                  v131 = *(_DWORD *)v130 & 0x7FFFFF | (*((unsigned __int8 *)&v263 + 8 * v128 + 4) << 23) | 0xF0000000;
                  goto LABEL_155;
                }
                if (*((_BYTE *)v130 + 5) == 1)
                {
                  if (v128 >= 5)
                    break;
                  ++v128;
                  v131 = (*((unsigned __int8 *)&v263 + 8 * v129 + 4) << 23) | ((*(_DWORD *)v130 & 0x3FF) << 13) | (*((unsigned __int8 *)&v263 + 8 * v128 + 4) << 10) | *(_DWORD *)(&v263 + v128) & 0x3FF | 0xF4000000;
LABEL_155:
                  LODWORD(v269) = v131;
                  v132 = *(unsigned int *)(v58 + 172);
                  if ((_DWORD)v132 == *(_DWORD *)(v58 + 168))
                  {
                    v69 = (_QWORD *)(v58 + 160);
                    *(_DWORD *)(*(_QWORD *)(v58 + 160) + 4 * *(unsigned int *)(v58 + 172)) = *v165;
                  }
                  else
                  {
                    *(_DWORD *)(*v69 + 4 * v132) = v131;
                  }
                  ++*(_DWORD *)(v58 + 172);
                }
                else
                {
                  v224 = v67 - v128;
                  v225 = ((_DWORD)v224 << 18) | 0xF7800000;
                  if (v67 != v128)
                  {
                    v226 = (unsigned __int8 *)&v263 + 8 * v128 + 4;
                    v227 = 15;
                    do
                    {
                      v228 = *v226;
                      v226 += 8;
                      v225 |= v228 << v227;
                      v227 -= 3;
                      --v224;
                    }
                    while (v224);
                  }
                  LODWORD(v269) = v225;
                  v229 = *(unsigned int *)(v58 + 172);
                  if ((_DWORD)v229 == *(_DWORD *)(v58 + 168))
                  {
                    WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v254, (unint64_t)&v269);
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)(v58 + 160) + 4 * v229) = v225;
                    ++*(_DWORD *)(v58 + 172);
                  }
                  if (v67 > v128)
                  {
                    do
                    {
                      v235 = *(_DWORD *)v130++;
                      v234 = v235;
                      LODWORD(v269) = v235;
                      v236 = *(unsigned int *)(v58 + 172);
                      if ((_DWORD)v236 == *(_DWORD *)(v58 + 168))
                      {
                        WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v254, (unint64_t)&v269);
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)(v58 + 160) + 4 * v236) = v234;
                        ++*(_DWORD *)(v58 + 172);
                      }
                      ++v128;
                    }
                    while (v67 != v128);
                    v128 = v67;
                  }
                  v69 = (_QWORD *)(v58 + 160);
                }
                if (++v128 >= v67)
                  goto LABEL_79;
                continue;
              }
            }
LABEL_292:
            __break(1u);
LABEL_293:
            __break(0xC471u);
            JUMPOUT(0x19825BC24);
          }
          continue;
        }
      }
LABEL_77:
      *(_DWORD *)(v58 + 112) = v57;
      *(_DWORD *)(v58 + 116) = v56;
      *(_DWORD *)(v58 + 120) = v55;
      *(_DWORD *)(v58 + 124) = v53;
      if (v67)
        goto LABEL_137;
      std::__introsort<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,false>(&v263, (unsigned __int8 *)&v263, 0, 1);
      v69 = (_QWORD *)(v58 + 160);
LABEL_79:
      v43 = a3;
      v70 = v68 + 16;
      if (v68 == 0x7FFFFFFF)
        v70 = 31;
      v71 = (32 * v253 + 128) | v70 | ((v252 << 20) + 0x4000000) | (v63 << 27) | (v45 << 14);
      LODWORD(v269) = v71;
      v72 = *(unsigned int *)(v58 + 172);
      if ((_DWORD)v72 == *(_DWORD *)(v58 + 168))
      else
        *(_DWORD *)(*v69 + 4 * v72) = v71;
      v42 = a1;
      ++*(_DWORD *)(v58 + 172);
    }
  }
  v73 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, (_BYTE *)v43, (unsigned __int8 *)&v259, a4, a5, a6, a7, a8);
  v81 = v73;
  if (v73)
    ++*v73;
  v82 = a2 + 208;
  if (!v43 || v82 == v43)
  {
    v83 = *(_QWORD *)(a2 + 80);
    v84 = *(unsigned int *)(a2 + 100);
    if (v83)
    {
      v85 = *v258;
      do
      {
        v86 = v83 - 1;
        v87 = (v83 - 1) >> 5;
        if (v87 >= v84)
        {
          __break(0xC471u);
          JUMPOUT(0x19825BC0CLL);
        }
        if (*(_DWORD *)(*(_QWORD *)(v85 + 8 * v87) + 12 * (v86 & 0x1F)))
          break;
        *(_QWORD *)(a2 + 80) = v86;
        --v83;
      }
      while (v86);
    }
    v88 = v83 + 1;
    *(_QWORD *)(a2 + 80) = v83 + 1;
    v89 = v83 >> 5;
    if (v83 >> 5 >= v84)
    {
      v167 = WTF::fastMalloc((WTF *)0x180);
      v263 = v167;
      v168 = *(unsigned int *)(a2 + 100);
      if ((_DWORD)v168 == *(_DWORD *)(a2 + 96))
      {
        v169 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v258, v168 + 1, (unint64_t)&v263);
        v168 = *(unsigned int *)(a2 + 100);
        *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v168) = *v169;
      }
      else
      {
        *(_QWORD *)(*v258 + 8 * v168) = v167;
      }
      v84 = (v168 + 1);
      *(_DWORD *)(a2 + 100) = v84;
      v88 = *(_QWORD *)(a2 + 80);
      v90 = v88 - 1;
      v89 = (v88 - 1) >> 5;
    }
    else
    {
      v90 = v83;
    }
    if (v89 >= v84)
    {
      __break(0xC471u);
      JUMPOUT(0x19825BC34);
    }
    v91 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v89) + 12 * (v90 & 0x1F);
    *(_DWORD *)v91 = 0;
    *(_DWORD *)(v91 + 4) = ~(_DWORD)v83;
    *(_BYTE *)(v91 + 8) = 0;
    v92 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v93 = *(_QWORD *)(v92 + 20);
    if ((v93 & 0x7FFFFFFF) > v88)
      v88 = v93 & 0x7FFFFFFF;
    v94 = v88 + 1;
    *(_QWORD *)(v92 + 20) = v93 & 0xFFFFFFFF80000000 | v94 & 0x7FFFFFFE;
    if ((v94 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 20) & 0x7FFFFFFFLL))
    {
      __break(0xC471u);
      JUMPOUT(0x19825B888);
    }
    v95 = *(_QWORD *)(a2 + 80) - 1;
    if (v95 >> 5 >= *(unsigned int *)(a2 + 100))
    {
      __break(0xC471u);
      JUMPOUT(0x19825BC3CLL);
    }
    v43 = *(_QWORD *)(*v258 + 8 * (v95 >> 5)) + 12 * (v95 & 0x1F);
    *(_BYTE *)(v43 + 8) = 1;
  }
  v96 = *(unsigned int *)(a2 + 156);
  while (2)
  {
    if (!v96)
    {
      v116 = *(_QWORD *)(a2 + 128);
      if (v116)
      {
        while (1)
        {
          v244 = v259;
          v245 = *(JSC::CompactTDZEnvironment **)(v116 + 8);
          if (*((_DWORD *)v245 + 4) != 1)
            JSC::CompactTDZEnvironment::toTDZEnvironmentSlow(v245, v74, v75, v76, v77, v78, v79, v80);
          v246 = *(_QWORD *)v245;
          if (*(_QWORD *)v245)
          {
            v247 = *((_DWORD *)v244 + 4);
            if ((v247 & 0x20) != 0)
              v247 = *((_DWORD *)v244 + 8);
            v248 = *(_DWORD *)(v246 - 8);
            v249 = v248 & (v247 >> 8);
            v250 = *(WTF::StringImpl **)(v246 + 8 * v249);
            if (v250 == v244)
              goto LABEL_115;
            v251 = 1;
            while (v250)
            {
              v249 = (v249 + v251) & v248;
              v250 = *(WTF::StringImpl **)(v246 + 8 * v249);
              ++v251;
              if (v250 == v244)
                goto LABEL_115;
            }
          }
          v116 = *(_QWORD *)(v116 + 24);
          if (!v116)
            goto LABEL_124;
        }
      }
      goto LABEL_124;
    }
    --v96;
    v97 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * v96);
    if (v97)
    {
      v98 = *((_DWORD *)v259 + 4);
      if ((v98 & 0x20) != 0)
        v98 = *((_DWORD *)v259 + 8);
      v99 = *(_DWORD *)(v97 - 8);
      v100 = v99 & (v98 >> 8);
      v101 = *(WTF::StringImpl **)(v97 + 16 * v100);
      if (v101 != v259)
      {
        v102 = 1;
        while (v101)
        {
          v100 = ((_DWORD)v100 + v102) & v99;
          v101 = *(WTF::StringImpl **)(v97 + 16 * v100);
          ++v102;
          if (v101 == v259)
            goto LABEL_112;
        }
        v100 = *(unsigned int *)(v97 - 4);
      }
LABEL_112:
      v103 = v97 + 16 * v100;
      v97 += 16 * *(unsigned int *)(v97 - 4);
    }
    else
    {
      v103 = 0;
    }
    if (v103 == v97)
      continue;
    break;
  }
  if (!*(_DWORD *)(v103 + 8))
  {
LABEL_124:
    JSC::BytecodeGenerator::emitGetFromScope(a2, (_DWORD *)v43, (uint64_t)v81, (unint64_t)&v259, 0, v78, v79, v80);
    goto LABEL_125;
  }
LABEL_115:
  v104 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v108 = v104;
  if (v104)
    ++*v104;
  JSC::BytecodeGenerator::emitGetFromScope(a2, v104, (uint64_t)v81, (unint64_t)&v259, 0, v105, v106, v107);
  v109 = v108[1];
  if (!JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v109, v110, v111, v112, v113, v114, v115)&& !JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v109, a3, a4, a5, a6, a7, a8))
  {
    JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v109, a3, a4, a5, a6, a7, a8);
  }
  if (v82 != v43 && v43 && (_DWORD *)v43 != v108)
    JSC::BytecodeGenerator::emitMove(a2, (int *)v43, (uint64_t)v108, a4, a5, a6, a7, a8);
  --*v108;
LABEL_125:
  v117 = **(_QWORD **)(v42 + 32);
  if (v117)
    v118 = *(_DWORD *)(v117 + 4) - 1;
  else
    v118 = -1;
  if ((*(_BYTE *)(a2 + 104) & 2) != 0 && v43)
  {
    v200 = *(_DWORD *)(v42 + 12);
    if (v261 || v260 == 1)
    {
      v201 = LODWORD(v262[1]) - 0x40000000;
      v202 = 1;
    }
    else
    {
      v202 = 0;
      v201 = *(_DWORD *)(a2 + 412);
    }
    v203 = *(_DWORD *)(v43 + 4);
    v204 = JSC::BytecodeGenerator::addConstant(a2, (WTF::AtomStringImpl *)&v259, a3, a4, a5, a6, a7, a8);
    v205 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v203, v201, v202, v204, v205, v206, v207);
    v208 = *(_DWORD *)(a1 + 12);
    v209 = *(_QWORD *)(a2 + 24);
    v270 = *(_DWORD *)(a2 + 12) - 1;
    LODWORD(v269) = v208;
    HIDWORD(v269) = v200 + v118;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v209 + 232), &v270, (uint64_t *)&v269, (uint64_t)&v263);
  }
  if (v81)
    --*v81;
LABEL_130:
  v119 = v259;
  v259 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  return v43;
}

int *JSC::TemplateStringNode::emitBytecode(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((const WTF::String *)(a2 + 208) == a3)
    return 0;
  v10 = JSC::BytecodeGenerator::addStringConstant(a2, *(JSC::VM **)(a1 + 32), a3, a4, a5, a6, a7, a8);
  return JSC::BytecodeGenerator::emitLoad(a2, (int *)a3, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::TemplateLiteralNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  unsigned int v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  _DWORD *v70;
  WTF *v71;
  _BYTE *v73;
  char v74;
  char v75;
  uint64_t v76;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  WTF *v86;
  uint64_t v87;
  _BYTE *v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  _DWORD *v104;
  WTF *v105;
  uint64_t v106;
  _BYTE v107[136];

  v10 = *(_QWORD **)(a1 + 40);
  if (v10)
  {
    v105 = (WTF *)v107;
    v106 = 16;
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = **(_QWORD **)(v11[1] + 32);
      if (v12 && *(_DWORD *)(v12 + 4))
      {
        v38 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v104 = v38;
        v44 = HIDWORD(v106);
        if (HIDWORD(v106) == (_DWORD)v106)
        {
          WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
          v46 = HIDWORD(v106);
        }
        else
        {
          v45 = v105;
          if (v38)
            ++*v38;
          v46 = v44 + 1;
          *((_QWORD *)v45 + v44) = v38;
          HIDWORD(v106) = v44 + 1;
        }
        if (!v46)
        {
          __break(0xC471u);
          JUMPOUT(0x19825C36CLL);
        }
        v47 = *((_QWORD *)v105 + v46 - 1);
        v48 = (_BYTE *)v11[1];
        v49 = *(_BYTE *)(a2 + 709);
        v50 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v104 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v48[24])
          {
            v102 = v48;
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v48 + 8), v39, v40, v41, v42, v43);
            v48 = v102;
          }
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, a2, v47);
        }
        *(_BYTE *)(a2 + 710) = v50;
        *(_BYTE *)(a2 + 709) = v49;
      }
      v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v104 = v13;
      v19 = HIDWORD(v106);
      if (HIDWORD(v106) == (_DWORD)v106)
      {
        WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
        v21 = HIDWORD(v106);
      }
      else
      {
        v20 = v105;
        if (v13)
          ++*v13;
        v21 = v19 + 1;
        *((_QWORD *)v20 + v19) = v13;
        HIDWORD(v106) = v19 + 1;
      }
      if (!v21)
        goto LABEL_79;
      v22 = *((_QWORD *)v105 + v21 - 1);
      v23 = (_BYTE *)v10[1];
      v24 = *(_BYTE *)(a2 + 709);
      v25 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v104 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v23[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v23 + 8), v14, v15, v16, v17, v18);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, a2, v22);
      }
      *(_BYTE *)(a2 + 710) = v25;
      *(_BYTE *)(a2 + 709) = v24;
      if (!HIDWORD(v106))
      {
        __break(0xC471u);
        JUMPOUT(0x19825C364);
      }
      v31 = *((_QWORD *)v105 + HIDWORD(v106) - 1);
      v32 = *(unsigned int *)(v31 + 4);
      if ((JSC::OpToString::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, *(_DWORD *)(v31 + 4), v32, v26, v27, v28, v29, v30) & 1) == 0&& (JSC::OpToString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v32, v32, v33, v34, v35, v36, v37) & 1) == 0)
      {
        JSC::OpToString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v32, v32, v91, v92, v93, v94, v95);
      }
      v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)*v11;
    }
    while (v10);
    v51 = **(_QWORD **)(v11[1] + 32);
    if (v51 && *(_DWORD *)(v51 + 4))
    {
      v78 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v104 = v78;
      v84 = HIDWORD(v106);
      if (HIDWORD(v106) == (_DWORD)v106)
      {
        WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v105, &v104);
        v85 = HIDWORD(v106);
      }
      else
      {
        v85 = HIDWORD(v106) + 1;
        v86 = v105;
        if (v78)
          ++*v78;
        *((_QWORD *)v86 + v84) = v78;
        HIDWORD(v106) = v84 + 1;
      }
      if (!v85)
      {
        __break(0xC471u);
        JUMPOUT(0x19825C384);
      }
      v87 = *((_QWORD *)v105 + v85 - 1);
      v88 = (_BYTE *)v11[1];
      v89 = *(_BYTE *)(a2 + 709);
      v90 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v104 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v88[24])
        {
          v103 = v88;
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v88 + 8), v79, v80, v81, v82, v83);
          v88 = v103;
        }
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, a2, v87);
      }
      *(_BYTE *)(a2 + 710) = v90;
      *(_BYTE *)(a2 + 709) = v89;
    }
    if (HIDWORD(v106) == 1)
    {
      v96 = JSC::BytecodeGenerator::finalDestination(a2, a3, *(_QWORD *)v105);
      if (!HIDWORD(v106))
      {
LABEL_79:
        __break(0xC471u);
        JUMPOUT(0x19825C35CLL);
      }
      v58 = v96;
      JSC::BytecodeGenerator::emitToString(a2, v96, *(_DWORD *)(*(_QWORD *)v105 + 4), v97, v98, v99, v100, v101);
    }
    else
    {
      if (!HIDWORD(v106))
      {
        __break(0xC471u);
        JUMPOUT(0x19825C374);
      }
      v52 = JSC::BytecodeGenerator::finalDestination(a2, a3, *(_QWORD *)v105);
      v57 = HIDWORD(v106);
      if (!HIDWORD(v106))
      {
        __break(0xC471u);
        JUMPOUT(0x19825C37CLL);
      }
      v58 = v52;
      v59 = *(_DWORD *)(v52 + 4);
      v60 = *(unsigned int *)(*(_QWORD *)v105 + 4);
      if ((JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v59, v60, HIDWORD(v106), v53, v54, v55, v56) & 1) == 0&& (JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v59, v60, v57, v64, v65, v66, v67) & 1) == 0)
      {
        JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v59, v60, v57, v64, v65, v66, v67);
      }
    }
    if (HIDWORD(v106))
    {
      v68 = v105;
      v69 = 8 * HIDWORD(v106);
      do
      {
        v70 = *(_DWORD **)v68;
        *(_QWORD *)v68 = 0;
        if (v70)
          --*v70;
        v68 = (WTF *)((char *)v68 + 8);
        v69 -= 8;
      }
      while (v69);
    }
    v71 = v105;
    if (v107 != (_BYTE *)v105 && v105 != 0)
    {
      v105 = 0;
      LODWORD(v106) = 0;
      WTF::fastFree((unint64_t)v71, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  else
  {
    v73 = *(_BYTE **)(*(_QWORD *)(a1 + 32) + 8);
    v74 = *(_BYTE *)(a2 + 709);
    v75 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v104 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v76 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v73[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v73 + 8), a4, a5, a6, a7, a8);
      v76 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, a2, a3);
    }
    v58 = v76;
    *(_BYTE *)(a2 + 710) = v75;
    *(_BYTE *)(a2 + 709) = v74;
  }
  return v58;
}

uint64_t JSC::TaggedTemplateNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int *TemplateObject;
  int *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int *v64;
  _QWORD *v67;
  char v68;
  char v69;
  unsigned int v70;
  int *v71;
  _BYTE *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *PropertyValue;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  int *v119;
  int *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  int v140[2];
  _DWORD *v141;
  WTF::StringImpl *v142;
  int **v143;
  uint64_t v144;
  unint64_t v145;
  int v146;

  *(_QWORD *)v140 = a3;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 88))(*(_QWORD *)(a1 + 64)) & 1) == 0)
  {
    v112 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v98 = v112;
    if (v112)
      ++*v112;
    v118 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v112, *(_QWORD *)(a1 + 64), v113, v114, v115, v116, v117);
    v24 = v118;
    if (v118)
      ++*v118;
    v26 = 0;
    if (v98)
      goto LABEL_66;
    goto LABEL_72;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 112))(*(_QWORD *)(a1 + 64));
  v12 = *(_QWORD **)(a1 + 64);
  if (!v11)
  {
    v90 = (*(uint64_t (**)(_QWORD *))(*v12 + 128))(v12);
    v91 = *(uint64_t **)(a1 + 64);
    v92 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v98 = v92;
    if (!v90)
    {
      if (v92)
        ++*v92;
      v99 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v105 = v99;
      if (v99)
        ++*v99;
      v106 = (int *)JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v99, v91[4], v100, v101, v102, v103, v104);
      v26 = v106;
      if (v106)
        ++*v106;
      if (v105)
        --*v105;
      PropertyValue = JSC::BaseDotNode::emitGetPropertyValue((uint64_t)v91, a2, v98, (uint64_t)v106, v107, v108, v109, v110);
      v24 = PropertyValue;
      if (PropertyValue)
        ++*PropertyValue;
LABEL_65:
      if (v98)
      {
LABEL_66:
        v139 = 0;
        --*v98;
        goto LABEL_18;
      }
LABEL_72:
      v139 = 0;
      goto LABEL_18;
    }
    if (v92)
      ++*v92;
    v120 = (int *)JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v92, v91[8], v93, v94, v95, v96, v97);
    v26 = v120;
    if (v120)
      ++*v120;
    if (v98)
      --*v98;
    v121 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v91[9]);
    v98 = v121;
    if (v121)
      ++*v121;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v91[8] + 240))(v91[8]))
    {
      v129 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v122, v123, v124, v125, v126, v127, v128);
      ++*v129;
      v24 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetByVal(a2, v24, (uint64_t)v26, (uint64_t)v129, (uint64_t)v98, v130, v131, v132);
      if (v24)
        ++*v24;
      v133 = -1;
    }
    else
    {
      v129 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetByVal(a2, v129, (uint64_t)v26, (uint64_t)v98, v134, v135, v136, v137);
      if (!v129)
      {
        v24 = 0;
        goto LABEL_65;
      }
      v133 = 1;
      v24 = v129;
    }
    *v129 += v133;
    goto LABEL_65;
  }
  v13 = (WTF::AtomStringImpl *)v12[4];
  v139 = JSC::BytecodeGenerator::expectedFunctionForIdentifier(a2, v13, v5, v6, v7, v8, v9, v10);
  JSC::BytecodeGenerator::variable((uint64_t)&v142, a2, (uint64_t)v13, 0, v14, v15, v16, v17);
  v22 = v144;
  if (v144)
  {
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, &v142, v144, 0, v18, v19, v20, v21);
    v119 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    if ((int *)(a2 + 208) == v119)
    {
      v24 = 0;
      v26 = 0;
    }
    else
    {
      v24 = v119;
      if (!v119 || v119 == (int *)v22)
        v24 = (_DWORD *)v22;
      else
        JSC::BytecodeGenerator::emitMove(a2, v119, v22, v46, v47, v48, v49, v50);
      v26 = 0;
      ++*v24;
    }
  }
  else
  {
    v23 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v24 = v23;
    if (v23)
      ++*v23;
    v25 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v26 = v25;
    if (v25)
      ++*v25;
    v27 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
    v28 = *(_DWORD *)(a1 + 48);
    v145 = *(unsigned int *)(a1 + 40) | ((unint64_t)(*(_DWORD *)(a1 + 44) + v27) << 32);
    v146 = v28;
    JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, &v145, (_DWORD *)(a1 + 40), &v145);
    v34 = JSC::BytecodeGenerator::emitResolveScope(a2, v26, (unsigned __int8 *)&v142, v29, v30, v31, v32, v33);
    if ((int *)(a2 + 208) != v26 && v26 && v26 != (int *)v34)
      JSC::BytecodeGenerator::emitMove(a2, v26, v34, v35, v36, v37, v38, v39);
    JSC::BytecodeGenerator::emitGetFromScope(a2, v24, (uint64_t)v26, (unint64_t)&v142, 0, v37, v38, v39);
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, &v142, (uint64_t)v24, 0, v40, v41, v42, v43);
  }
  v51 = v142;
  v142 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
LABEL_18:
  TemplateObject = JSC::BytecodeGenerator::emitGetTemplateObject(a2, a1);
  v53 = TemplateObject;
  if (TemplateObject)
    ++*TemplateObject;
  v54 = 0;
  v55 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 40);
  do
  {
    v55 = (_QWORD *)*v55;
    ++v54;
  }
  while (v55);
  JSC::CallArguments::CallArguments((uint64_t)&v142, a2, 0, v54);
  v61 = *v143;
  if (v26)
  {
    if ((int *)(a2 + 208) != v61 && v61 != 0 && v61 != v26)
      JSC::BytecodeGenerator::emitMove(a2, v61, (uint64_t)v26, v56, v57, v58, v59, v60);
  }
  else
  {
    JSC::BytecodeGenerator::emitLoad(a2, v61, 10, v56, v57, v58, v59, v60);
  }
  v64 = v143[1];
  if ((int *)(a2 + 208) != v64 && v64 != 0 && v64 != v53)
    JSC::BytecodeGenerator::emitMove(a2, v64, (uint64_t)v53, v56, v57, v58, v59, v60);
  v141 = (_DWORD *)a1;
  v67 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 40);
  if (v67)
  {
    v68 = *(_BYTE *)(a2 + 709);
    v69 = *(_BYTE *)(a2 + 710);
    v70 = 2;
    do
    {
      v71 = v143[v70];
      v72 = (_BYTE *)v67[1];
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v138 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v72[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v72 + 8), v56, v57, v58, v59, v60);
        (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v72 + 16))(v72, a2, v71);
      }
      *(_BYTE *)(a2 + 710) = v69;
      *(_BYTE *)(a2 + 709) = v68;
      v67 = (_QWORD *)*v67;
      ++v70;
    }
    while (v67);
  }
  v73 = JSC::BytecodeGenerator::finalDestination(a2, *(uint64_t *)v140, (uint64_t)v24);
  JSC::BytecodeGenerator::emitCallInTailPosition(a2, v73, (uint64_t)v24, v139, (uint64_t)&v142, v141 + 7, v141 + 10, v141 + 13);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v142, v74, v75, v76, v77, v78, v79, v80);
  if (v53)
    --*v53;
  if (v26)
    --*v26;
  if (v24)
    --*v24;
  return v73;
}

_DWORD *JSC::BaseDotNode::emitGetPropertyValue(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;
  _DWORD *v9;

  v9 = 0;
  result = JSC::BaseDotNode::emitGetPropertyValue(a1, a2, a3, a4, &v9, a6, a7, a8);
  if (v9)
    --*v9;
  return result;
}

uint64_t JSC::ArrayNode::emitBytecode(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  WTF *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  const WTF::BitVector *v72;
  WTF::BitVector *v73;
  uint64_t v74;
  signed int v75;
  uint64_t v76;
  _BOOL4 v77;
  _BOOL4 v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  unsigned int v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  WTF *v104;
  uint64_t v105;
  _DWORD *v106;
  WTF *v107;
  char *v109;
  char *v110;
  char *v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  char v127;
  char v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  int v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE **v172;
  _DWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  char v203;
  _DWORD *v204;
  WTF *v205;
  uint64_t v206;
  int *v207;
  int *v208;
  _QWORD v209[2];

  v203 = 3;
  v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v3 = 3;
    while (!*((_DWORD *)v7 + 4) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[1] + 232))(v7[1]) & 1) == 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[1] + 80))(v7[1])
        && (v10 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7[1] + 368))(v7[1], a2)) != 0)
      {
        if (v10 > 0xFFFDFFFFFFFFFFFFLL)
        {
          v11 = 4;
        }
        else if (v10 >> 49 && BYTE1(dword_1ECF4C5C0))
        {
          v11 = 6;
        }
        else
        {
          v11 = 8;
        }
        v12 = v11 | v3 & 1;
        if (v3 <= v12)
          v3 = v12;
        else
          v3 = v3;
        v203 = v3;
      }
      else
      {
        v8 = 1;
      }
      v9 = (v9 + 1);
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_21;
    }
    v201 = &v203;
    v202 = a2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[1] + 232))(v7[1]) && !*(_DWORD *)(a1 + 40))
    {
      v18 = v7;
      do
      {
        if (*((_DWORD *)v18 + 4))
          goto LABEL_135;
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      v19 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
      v20 = *(uint64_t **)(a1 + 32);
      v209[0] = 0x8000000000000000;
      v205 = (WTF *)&v207;
      v206 = 16;
      if (!v20)
      {
        __break(0xC471u);
        goto LABEL_215;
      }
      v13 = v19;
      v21 = 0;
      v22 = (uint64_t **)v20;
      while (1)
      {
        v23 = v21;
        if ((*(unsigned int (**)(uint64_t *))(*v22[1] + 232))(v22[1]))
        {
          v24 = v209[0];
          if ((v209[0] & 0x8000000000000000) != 0)
            v25 = 63;
          else
            v25 = *(_QWORD *)(2 * v209[0]);
          if (v25 <= v23)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v209, v23 + 1, 0);
            v24 = v209[0];
          }
          if (v24 >= 0)
            v26 = (_QWORD *)(2 * v24 + 8);
          else
            v26 = v209;
          v27 = (v23 >> 3) & 0x1FFFFFF8;
          v28 = *(_QWORD *)((char *)v26 + v27) | (1 << v23);
        }
        else
        {
          v32 = (unint64_t *)(2 * v209[0]);
          if ((v209[0] & 0x8000000000000000) != 0)
            v33 = 63;
          else
            v33 = *v32;
          if (v33 <= v23)
            goto LABEL_41;
          v34 = v32 + 1;
          if (v209[0] >= 0)
            v26 = v34;
          else
            v26 = v209;
          v27 = (v23 >> 3) & 0x1FFFFFF8;
          v28 = *(_QWORD *)((char *)v26 + v27) & ~(1 << v23);
        }
        *(_QWORD *)((char *)v26 + v27) = v28;
LABEL_41:
        v29 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v204 = v29;
        v30 = HIDWORD(v206);
        if (HIDWORD(v206) == (_DWORD)v206)
        {
          WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v205, &v204);
          v21 = HIDWORD(v206);
        }
        else
        {
          v31 = v205;
          if (v29)
            ++*v29;
          v21 = v30 + 1;
          *((_QWORD *)v31 + v30) = v29;
          HIDWORD(v206) = v30 + 1;
        }
        if (v21 != 1)
        {
          if (!v21)
          {
            __break(0xC471u);
            JUMPOUT(0x19825D714);
          }
          if (*(_DWORD *)(*((_QWORD *)v205 + v21 - 1) + 4) != *(_DWORD *)(*((_QWORD *)v205 + v21 - 2) + 4) - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19825D644);
          }
        }
        v22 = (uint64_t **)*v22;
        if (!v22)
        {
          v35 = 0;
          do
          {
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20[1] + 232))(v20[1]);
            v42 = v20[1];
            if (v36)
            {
              v43 = *(_BYTE **)(v42 + 64);
              v44 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
              v50 = v44;
              if (v44)
                ++*v44;
              v51 = *(_BYTE *)(a2 + 709);
              v52 = *(_BYTE *)(a2 + 710);
              *(_WORD *)(a2 + 709) = 0;
              if ((unint64_t)&v201 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
              {
                *(_BYTE *)(a2 + 706) = 1;
                JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
              }
              else
              {
                if (v43[24])
                  JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v43 + 8), v45, v46, v47, v48, v49);
                (*(void (**)(_BYTE *, unint64_t, _DWORD *))(*(_QWORD *)v43 + 16))(v43, a2, v50);
              }
              *(_BYTE *)(a2 + 710) = v52;
              *(_BYTE *)(a2 + 709) = v51;
              if (v35 >= HIDWORD(v206))
              {
                __break(0xC471u);
                JUMPOUT(0x19825D71CLL);
              }
              v58 = *(_DWORD *)(*((_QWORD *)v205 + v35) + 4);
              v59 = v50[1];
              if ((JSC::OpSpread::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v58, v59, v53, v54, v55, v56, v57) & 1) == 0&& (JSC::OpSpread::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v58, v59, v61, v62, v63, v64, v65) & 1) == 0)
              {
                JSC::OpSpread::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v58, v59, v61, v62, v63, v64, v65);
              }
              --*v50;
            }
            else
            {
              if (v35 >= HIDWORD(v206))
              {
                __break(0xC471u);
                JUMPOUT(0x19825D724);
              }
              v66 = *((_QWORD *)v205 + v35);
              v67 = *(_BYTE *)(a2 + 709);
              v68 = *(_BYTE *)(a2 + 710);
              *(_WORD *)(a2 + 709) = 0;
              if ((unint64_t)&v201 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
              {
                *(_BYTE *)(a2 + 706) = 1;
                JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
              }
              else
              {
                if (*(_BYTE *)(v42 + 24))
                  JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v42 + 8, v37, v38, v39, v40, v41);
                (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, a2, v66);
              }
              *(_BYTE *)(a2 + 710) = v68;
              *(_BYTE *)(a2 + 709) = v67;
            }
            ++v35;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
          v69 = *(_QWORD *)(a2 + 24);
          v70 = (_QWORD *)(v69 + 256);
          v71 = *(unsigned int *)(v69 + 268);
          if ((_DWORD)v71 == *(_DWORD *)(v69 + 264))
          {
            v72 = (const WTF::BitVector *)WTF::Vector<WTF::BitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)v209);
            v71 = *(unsigned int *)(v69 + 268);
            v73 = (WTF::BitVector *)(*(_QWORD *)(v69 + 256) + 8 * v71);
            *(_QWORD *)v73 = 0x8000000000000000;
            if ((*(_QWORD *)v72 & 0x8000000000000000) != 0)
            {
              *(_QWORD *)v73 = *(_QWORD *)v72;
              goto LABEL_81;
            }
LABEL_204:
            WTF::BitVector::setSlow(v73, v72, v60, v61, v62, v63, v64, v65);
            v71 = *(unsigned int *)(v69 + 268);
          }
          else
          {
            v73 = (WTF::BitVector *)(*v70 + 8 * v71);
            *(_QWORD *)v73 = 0x8000000000000000;
            if ((v209[0] & 0x8000000000000000) == 0)
            {
              v72 = (const WTF::BitVector *)v209;
              goto LABEL_204;
            }
            *(_QWORD *)v73 = v209[0];
          }
LABEL_81:
          *(_DWORD *)(v69 + 268) = v71 + 1;
          v74 = HIDWORD(v206);
          if (HIDWORD(v206))
          {
            v75 = *(_DWORD *)(v13 + 4);
            v76 = *(unsigned int *)(*(_QWORD *)v205 + 4);
            v77 = (v75 - 1073741808) < 0x80;
            if (v75 <= 0x3FFFFFFF)
              v77 = (v75 + 128) < 0x90;
            if (!v77)
              goto LABEL_193;
            v78 = (v76 - 1073741808) < 0x80;
            if ((int)v76 <= 0x3FFFFFFF)
              v78 = (v76 + 128) < 0x90;
            if ((HIDWORD(v206) | v71) <= 0xFF && v78)
            {
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x8C, v60, v61, v62, v63, v64, v65);
              LOBYTE(v204) = -116;
              v86 = *(unsigned int *)(a2 + 12);
              v87 = *(unsigned int *)(a2 + 16);
              if (v86 > v87)
              {
                *(_DWORD *)(a2 + 16) = v87 + 1;
                *(_BYTE *)(*(_QWORD *)a2 + v87) = -116;
                v90 = *(_DWORD *)(a2 + 12);
                v91 = *(_DWORD *)(a2 + 16);
              }
              else
              {
                if ((_DWORD)v86 == *(_DWORD *)(a2 + 8))
                {
                  v109 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v86 + 1), (unint64_t)&v204);
                  v86 = *(unsigned int *)(a2 + 12);
                  v88 = *(_QWORD *)a2;
                  v89 = *v109;
                }
                else
                {
                  v88 = *(_QWORD *)a2;
                  v89 = -116;
                }
                *(_BYTE *)(v88 + v86) = v89;
                v90 = *(_DWORD *)(a2 + 12) + 1;
                v91 = *(_DWORD *)(a2 + 16) + 1;
                *(_DWORD *)(a2 + 12) = v90;
                *(_DWORD *)(a2 + 16) = v91;
              }
              v92 = v75 + 16;
              if (v75 <= 0x3FFFFFFF)
                v92 = v75;
              LOBYTE(v204) = v92;
              if (v90 > v91)
              {
                *(_DWORD *)(a2 + 16) = v91 + 1;
                *(_BYTE *)(*(_QWORD *)a2 + v91) = v92;
                v95 = *(_DWORD *)(a2 + 12);
                v96 = *(_DWORD *)(a2 + 16);
              }
              else
              {
                v93 = v90;
                if (v90 == *(_DWORD *)(a2 + 8))
                {
                  v110 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v90 + 1), (unint64_t)&v204);
                  v93 = *(unsigned int *)(a2 + 12);
                  v94 = *(_QWORD *)a2;
                  v92 = *v110;
                }
                else
                {
                  v94 = *(_QWORD *)a2;
                }
                *(_BYTE *)(v94 + v93) = v92;
                v95 = *(_DWORD *)(a2 + 12) + 1;
                v96 = *(_DWORD *)(a2 + 16) + 1;
                *(_DWORD *)(a2 + 12) = v95;
                *(_DWORD *)(a2 + 16) = v96;
              }
              v97 = v76 + 16;
              if ((int)v76 <= 0x3FFFFFFF)
                v97 = v76;
              LOBYTE(v204) = v97;
              if (v95 > v96)
              {
                *(_DWORD *)(a2 + 16) = v96 + 1;
                *(_BYTE *)(*(_QWORD *)a2 + v96) = v97;
                v100 = *(_DWORD *)(a2 + 12);
                v101 = *(_DWORD *)(a2 + 16);
              }
              else
              {
                v98 = v95;
                if (v95 == *(_DWORD *)(a2 + 8))
                {
                  v111 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v95 + 1), (unint64_t)&v204);
                  v98 = *(unsigned int *)(a2 + 12);
                  v99 = *(_QWORD *)a2;
                  v97 = *v111;
                }
                else
                {
                  v99 = *(_QWORD *)a2;
                }
                *(_BYTE *)(v99 + v98) = v97;
                v100 = *(_DWORD *)(a2 + 12) + 1;
                v101 = *(_DWORD *)(a2 + 16) + 1;
                *(_DWORD *)(a2 + 12) = v100;
                *(_DWORD *)(a2 + 16) = v101;
              }
              LOBYTE(v204) = v74;
              if (v100 > v101)
              {
                *(_DWORD *)(a2 + 16) = v101 + 1;
                *(_BYTE *)(*(_QWORD *)a2 + v101) = v74;
                v102 = *(_DWORD *)(a2 + 12);
                v103 = *(_DWORD *)(a2 + 16);
              }
              else
              {
                if (v100 == *(_DWORD *)(a2 + 8))
                  *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v100 + 1), (unint64_t)&v204);
                else
                  *(_BYTE *)(*(_QWORD *)a2 + v100) = v74;
                v102 = *(_DWORD *)(a2 + 12) + 1;
                v103 = *(_DWORD *)(a2 + 16) + 1;
                *(_DWORD *)(a2 + 12) = v102;
                *(_DWORD *)(a2 + 16) = v103;
              }
              LOBYTE(v204) = v71;
              if (v102 > v103)
              {
                *(_DWORD *)(a2 + 16) = v103 + 1;
                *(_BYTE *)(*(_QWORD *)a2 + v103) = v71;
              }
              else
              {
                if (v102 == *(_DWORD *)(a2 + 8))
                  *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v102 + 1), (unint64_t)&v204);
                else
                  *(_BYTE *)(*(_QWORD *)a2 + v102) = v71;
                *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
              }
            }
            else
            {
LABEL_193:
              if ((JSC::OpNewArrayWithSpread::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, *(_DWORD *)(v13 + 4), *(unsigned int *)(*(_QWORD *)v205 + 4), HIDWORD(v206), v71, v63, v64, v65) & 1) == 0)JSC::OpNewArrayWithSpread::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v75, v76, v74, v71, v83, v84, v85);
            }
            if (HIDWORD(v206))
            {
              v104 = v205;
              v105 = 8 * HIDWORD(v206);
              do
              {
                v106 = *(_DWORD **)v104;
                *(_QWORD *)v104 = 0;
                if (v106)
                  --*v106;
                v104 = (WTF *)((char *)v104 + 8);
                v105 -= 8;
              }
              while (v105);
            }
            v107 = v205;
            if (&v207 != (int **)v205 && v205 != 0)
            {
              v205 = 0;
              LODWORD(v206) = 0;
              WTF::fastFree((unint64_t)v107, v79, v80, v81, v82, v83, v84, v85);
            }
            if ((v209[0] & 0x8000000000000000) == 0)
              WTF::fastFree(2 * v209[0], v79, v80, v81, v82, v83, v84, v85);
            return v13;
          }
          __break(0xC471u);
LABEL_215:
          JUMPOUT(0x19825D09CLL);
        }
      }
    }
  }
  else
  {
    v9 = 0;
    v8 = 0;
LABEL_21:
    v201 = &v203;
    v202 = a2;
    if (!*(_DWORD *)(a1 + 40))
    {
      v13 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
      JSC::ArrayNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()((unsigned __int8 **)&v201, v13, *(_QWORD **)(a1 + 32), v9, v8 & 1, v14, v15, v16);
      return v13;
    }
    v7 = 0;
  }
LABEL_135:
  v112 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  JSC::ArrayNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()((unsigned __int8 **)&v201, (uint64_t)v112, *(_QWORD **)(a1 + 32), v9, v8 & 1, v113, v114, v115);
  if (v112)
    ++*v112;
  if (v7)
  {
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[1] + 232))(v7[1]) & 1) == 0)
    {
      v126 = (_BYTE *)v7[1];
      v127 = *(_BYTE *)(a2 + 709);
      v128 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v201 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v129 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v126[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v126 + 8), v121, v122, v123, v124, v125);
        v129 = (_DWORD *)(*(uint64_t (**)(_BYTE *, unint64_t, _QWORD))(*(_QWORD *)v126 + 16))(v126, a2, 0);
      }
      v3 = (uint64_t)v129;
      *(_BYTE *)(a2 + 710) = v128;
      *(_BYTE *)(a2 + 709) = v127;
      if (v129)
        ++*v129;
      v135 = *((_DWORD *)v7 + 4);
      v136 = (v135 + v9);
      if (v135 + (int)v9 < 0)
        v137 = COERCE__INT64((double)v136) + 0x2000000000000;
      else
        v137 = v136 | 0xFFFE000000000000;
      v138 = JSC::BytecodeGenerator::emitLoad(a2, 0, v137, v130, v131, v132, v133, v134);
      if (v138)
      {
        v143 = v138;
        v144 = v138[1];
        ++*v138;
        JSC::BytecodeGenerator::emitDirectPutByVal(a2, v112[1], v144, v3, v139, v140, v141, v142);
        --*v143;
      }
      else
      {
        JSC::BytecodeGenerator::emitDirectPutByVal(a2, v112[1], MEMORY[4], v3, v139, v140, v141, v142);
      }
      if (v3)
        --*(_DWORD *)v3;
      LODWORD(v9) = v136 + 1;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_152;
    }
    v146 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    if ((int)v9 < 0)
      v152 = COERCE__INT64((double)v9) + 0x2000000000000;
    else
      v152 = v9 | 0xFFFE000000000000;
    v153 = JSC::BytecodeGenerator::emitLoad(a2, v146, v152, v147, v148, v149, v150, v151);
    v159 = v153;
    if (v153)
      ++*v153;
    if (v112)
      ++*v112;
    if (v153)
      ++*v153;
    v205 = (WTF *)WTF::ScopedLambdaFunctor<void ()(JSC::BytecodeGenerator &,JSC::RegisterID *),JSC::ArrayNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_1>::implFunction;
    v206 = (uint64_t)&v205;
    v207 = v112;
    v208 = v153;
    do
    {
      v160 = *((unsigned int *)v7 + 4);
      if ((_DWORD)v160)
      {
        v161 = JSC::BytecodeGenerator::emitLoad(a2, 0, v160 | 0xFFFE000000000000, v154, v155, v156, v157, v158);
        v3 = v3 & 0xFFFFFFFFFFFF0000 | 0x303;
        JSC::BytecodeGenerator::emitBinaryOp<JSC::OpAdd>(a2, (uint64_t)v159, v159[1], v161[1], v3, v162, v163, v164);
      }
      v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[1] + 232))(v7[1]);
      v172 = (_BYTE **)v7[1];
      if (v165)
      {
        v173 = (_DWORD *)v172 + 7;
        if (!v172)
          v173 = 0;
        JSC::BytecodeGenerator::emitEnumeration(a2, v173, v172[8], (uint64_t)&v205, 0, 0);
      }
      else
      {
        v174 = JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, (JSC::ExpressionNode *)v172, v166, v167, v168, v169, v170, v171);
        JSC::BytecodeGenerator::emitDirectPutByVal(a2, v112[1], v159[1], v174, v175, v176, v177, v178);
        JSC::BytecodeGenerator::emitInc(a2, (uint64_t)v159, v179, v180, v181, v182, v183, v184);
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    v185 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v185)
    {
      v186 = JSC::BytecodeGenerator::emitLoad(a2, 0, v185 | 0xFFFE000000000000, v154, v155, v156, v157, v158);
      JSC::BytecodeGenerator::emitBinaryOp<JSC::OpAdd>(a2, (uint64_t)v159, v159[1], v186[1], 0x303uLL, v187, v188, v189);
      JSC::BytecodeGenerator::emitPutById(a2, (uint64_t)v112, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 1768), (uint64_t)v159, v190, v191, v192, v193);
    }
    if ((int *)(a2 + 208) == a3)
    {
      v13 = 0;
    }
    else
    {
      v13 = (uint64_t)v112;
      if (a3)
      {
        v13 = (uint64_t)v112;
        if (v112 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v112, v154, v155, v156, v157, v158);
          v13 = (uint64_t)a3;
        }
      }
    }
    if (v208)
      --*v208;
    if (v207)
      --*v207;
    if (v159)
      --*v159;
  }
  else
  {
LABEL_152:
    v145 = *(_DWORD *)(a1 + 40);
    if (v145)
    {
      v194 = (v145 + v9);
      if ((int)v194 < 0)
        v195 = COERCE__INT64((double)v194) + 0x2000000000000;
      else
        v195 = v194 | 0xFFFE000000000000;
      v196 = JSC::BytecodeGenerator::emitLoad(a2, 0, v195, v116, v117, v118, v119, v120);
      JSC::BytecodeGenerator::emitPutById(a2, (uint64_t)v112, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 1768), (uint64_t)v196, v197, v198, v199, v200);
    }
    if ((int *)(a2 + 208) == a3)
    {
      v13 = 0;
    }
    else
    {
      v13 = (uint64_t)v112;
      if (a3)
      {
        v13 = (uint64_t)v112;
        if (v112 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v112, v116, v117, v118, v119, v120);
          v13 = (uint64_t)a3;
        }
      }
    }
  }
  if (v112)
    --*v112;
  return v13;
}

uint64_t JSC::ArrayNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(unsigned __int8 **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  signed int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  signed int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;

  v8 = a3;
  if (!(_DWORD)a4)
  {
    v12 = (uint64_t)a1[1];
    v13 = **a1;
    goto LABEL_5;
  }
  v11 = a4;
  if ((_DWORD)a5)
  {
    v12 = (uint64_t)a1[1];
    v13 = **a1;
LABEL_5:
    JSC::BytecodeGenerator::emitNewArray(v12, a2, a3, a4, v13, a6, a7, a8);
    return a2;
  }
  **a1 |= 0x10u;
  v14 = JSC::JSImmutableButterfly::create(*((JSC::JSImmutableButterfly **)a1[1] + 87), (JSC::VM *)**a1, a4, a4, a5, a6, a7, a8);
  v15 = 0;
  v16 = 8 * v11;
  do
  {
    v17 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v8[1] + 368))(v8[1], a1[1]);
    if ((*(_BYTE *)(v14 + 4) & 0xE) == 6)
    {
      v20 = (double)(int)v17;
      if (v17 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v20 = v17 - 0x2000000000000;
      *(double *)(v14 + v15 + 16) = v20;
    }
    else
    {
      v18 = *((_QWORD *)a1[1] + 87);
      *(_QWORD *)(v14 + v15 + 16) = v17;
      if (v17)
        v19 = (v17 & 0xFFFE000000000002) == 0;
      else
        v19 = 0;
      if (v19 && *(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v14 + 7))
        JSC::Heap::writeBarrierSlowPath(v18 + 192, v14);
    }
    v8 = (_QWORD *)*v8;
    v15 += 8;
  }
  while (v16 != v15);
  v21 = (uint64_t)a1[1];
  v22 = **a1;
  v23 = *(_DWORD *)(a2 + 4);
  v30 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue(v21, v14) + 4);
  v31 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v21 + 24) + 8) + 72);
  *(_BYTE *)(v31 + 4) |= 1u;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(_DWORD *)(v32 + 68);
  *(_DWORD *)(v32 + 68) = v33 + 1;
  v34 = (v23 - 1073741808) < 0x80;
  if (v23 <= 0x3FFFFFFF)
    v34 = (v23 + 128) < 0x90;
  if (!v34)
    goto LABEL_50;
  v35 = (v30 - 1073741808) < 0x80;
  if (v30 <= 0x3FFFFFFF)
    v35 = (v30 + 128) < 0x90;
  if (v35 && v33 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v21, (void *)0x11, v24, v25, v26, v27, v28, v29);
    v84 = 17;
    v36 = *(unsigned int *)(v21 + 12);
    v37 = *(unsigned int *)(v21 + 16);
    if (v36 > v37)
    {
      *(_DWORD *)(v21 + 16) = v37 + 1;
      *(_BYTE *)(*(_QWORD *)v21 + v37) = 17;
      v40 = *(_DWORD *)(v21 + 12);
      v41 = *(_DWORD *)(v21 + 16);
    }
    else
    {
      if ((_DWORD)v36 == *(_DWORD *)(v21 + 8))
      {
        v70 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v36 + 1), (unint64_t)&v84);
        v36 = *(unsigned int *)(v21 + 12);
        v38 = *(_QWORD *)v21;
        v39 = *v70;
      }
      else
      {
        v38 = *(_QWORD *)v21;
        v39 = 17;
      }
      *(_BYTE *)(v38 + v36) = v39;
      v40 = *(_DWORD *)(v21 + 12) + 1;
      v41 = *(_DWORD *)(v21 + 16) + 1;
      *(_DWORD *)(v21 + 12) = v40;
      *(_DWORD *)(v21 + 16) = v41;
    }
    v42 = v23 + 16;
    if (v23 <= 0x3FFFFFFF)
      v42 = v23;
    v85 = v42;
    if (v40 > v41)
    {
      *(_DWORD *)(v21 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)v21 + v41) = v42;
      v45 = *(_DWORD *)(v21 + 12);
      v46 = *(_DWORD *)(v21 + 16);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(v21 + 8))
      {
        v71 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v40 + 1), (unint64_t)&v85);
        v43 = *(unsigned int *)(v21 + 12);
        v44 = *(_QWORD *)v21;
        v42 = *v71;
      }
      else
      {
        v44 = *(_QWORD *)v21;
      }
      *(_BYTE *)(v44 + v43) = v42;
      v45 = *(_DWORD *)(v21 + 12) + 1;
      v46 = *(_DWORD *)(v21 + 16) + 1;
      *(_DWORD *)(v21 + 12) = v45;
      *(_DWORD *)(v21 + 16) = v46;
    }
    v47 = v30 + 16;
    if (v30 <= 0x3FFFFFFF)
      v47 = v30;
    v86 = v47;
    if (v45 > v46)
    {
      *(_DWORD *)(v21 + 16) = v46 + 1;
      *(_BYTE *)(*(_QWORD *)v21 + v46) = v47;
      v50 = *(_DWORD *)(v21 + 12);
      v51 = *(_DWORD *)(v21 + 16);
    }
    else
    {
      v48 = v45;
      if (v45 == *(_DWORD *)(v21 + 8))
      {
        v72 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v45 + 1), (unint64_t)&v86);
        v48 = *(unsigned int *)(v21 + 12);
        v49 = *(_QWORD *)v21;
        v47 = *v72;
      }
      else
      {
        v49 = *(_QWORD *)v21;
      }
      *(_BYTE *)(v49 + v48) = v47;
      v50 = *(_DWORD *)(v21 + 12) + 1;
      v51 = *(_DWORD *)(v21 + 16) + 1;
      *(_DWORD *)(v21 + 12) = v50;
      *(_DWORD *)(v21 + 16) = v51;
    }
    v87 = v22;
    if (v50 > v51)
    {
      *(_DWORD *)(v21 + 16) = v51 + 1;
      *(_BYTE *)(*(_QWORD *)v21 + v51) = v22;
      v52 = *(_DWORD *)(v21 + 12);
      v53 = *(_DWORD *)(v21 + 16);
    }
    else
    {
      if (v50 == *(_DWORD *)(v21 + 8))
        *(_BYTE *)(*(_QWORD *)v21 + *(unsigned int *)(v21 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v50 + 1), (unint64_t)&v87);
      else
        *(_BYTE *)(*(_QWORD *)v21 + v50) = v22;
      v52 = *(_DWORD *)(v21 + 12) + 1;
      v53 = *(_DWORD *)(v21 + 16) + 1;
      *(_DWORD *)(v21 + 12) = v52;
      *(_DWORD *)(v21 + 16) = v53;
    }
    v88 = v33;
    if (v52 > v53)
    {
      *(_DWORD *)(v21 + 16) = v53 + 1;
      *(_BYTE *)(*(_QWORD *)v21 + v53) = v33;
    }
    else
    {
      if (v52 == *(_DWORD *)(v21 + 8))
        *(_BYTE *)(*(_QWORD *)v21 + *(unsigned int *)(v21 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v52 + 1), (unint64_t)&v88);
      else
        *(_BYTE *)(*(_QWORD *)v21 + v52) = v33;
      *(int32x2_t *)(v21 + 12) = vadd_s32(*(int32x2_t *)(v21 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_50:
    if (v23 <= 0x3FFFFFFF)
      v54 = (v23 + 0x8000) >> 6 < 0x201;
    else
      v54 = (v23 - 1073741760) < 0x8000;
    if (!v54)
      goto LABEL_79;
    v55 = (v30 - 1073741760) < 0x8000;
    if (v30 <= 0x3FFFFFFF)
      v55 = (v30 + 0x8000) >> 6 < 0x201;
    if (v55 && !HIWORD(v33))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v21, (void *)0x11, v24, v25, v26, v27, v28, v29);
      v89 = 0x80;
      v56 = *(unsigned int *)(v21 + 12);
      v57 = *(unsigned int *)(v21 + 16);
      if (v56 > v57)
      {
        *(_DWORD *)(v21 + 16) = v57 + 1;
        *(_BYTE *)(*(_QWORD *)v21 + v57) = 0x80;
        v60 = *(_DWORD *)(v21 + 12);
        v61 = *(_DWORD *)(v21 + 16);
      }
      else
      {
        if ((_DWORD)v56 == *(_DWORD *)(v21 + 8))
        {
          v68 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v56 + 1), (unint64_t)&v89);
          v56 = *(unsigned int *)(v21 + 12);
          v58 = *(_QWORD *)v21;
          v59 = *v68;
        }
        else
        {
          v58 = *(_QWORD *)v21;
          v59 = 0x80;
        }
        *(_BYTE *)(v58 + v56) = v59;
        v60 = *(_DWORD *)(v21 + 12) + 1;
        v61 = *(_DWORD *)(v21 + 16) + 1;
        *(_DWORD *)(v21 + 12) = v60;
        *(_DWORD *)(v21 + 16) = v61;
      }
      v62 = 17;
      v90 = 17;
      if (v60 > v61)
      {
        *(_DWORD *)(v21 + 16) = v61 + 1;
        *(_BYTE *)(*(_QWORD *)v21 + v61) = 17;
      }
      else
      {
        v63 = v60;
        if (v60 == *(_DWORD *)(v21 + 8))
        {
          v69 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v60 + 1), (unint64_t)&v90);
          v63 = *(unsigned int *)(v21 + 12);
          v64 = *(_QWORD *)v21;
          v62 = *v69;
        }
        else
        {
          v64 = *(_QWORD *)v21;
        }
        *(_BYTE *)(v64 + v63) = v62;
        *(int32x2_t *)(v21 + 12) = vadd_s32(*(int32x2_t *)(v21 + 12), (int32x2_t)0x100000001);
      }
      v65 = v23 + 64;
      if (v23 <= 0x3FFFFFFF)
        v65 = v23;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v65);
      v66 = v30 + 64;
      if (v30 <= 0x3FFFFFFF)
        v66 = v30;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v66);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v22);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, (unsigned __int16)v33);
    }
    else
    {
LABEL_79:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(v21, (void *)0x11, v24, v25, v26, v27, v28, v29);
      v91 = -126;
      v73 = *(unsigned int *)(v21 + 12);
      v74 = *(unsigned int *)(v21 + 16);
      if (v73 > v74)
      {
        *(_DWORD *)(v21 + 16) = v74 + 1;
        *(_BYTE *)(*(_QWORD *)v21 + v74) = -126;
        v77 = *(_DWORD *)(v21 + 12);
        v78 = *(_DWORD *)(v21 + 16);
      }
      else
      {
        if ((_DWORD)v73 == *(_DWORD *)(v21 + 8))
        {
          v82 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v73 + 1), (unint64_t)&v91);
          v73 = *(unsigned int *)(v21 + 12);
          v75 = *(_QWORD *)v21;
          v76 = *v82;
        }
        else
        {
          v75 = *(_QWORD *)v21;
          v76 = -126;
        }
        *(_BYTE *)(v75 + v73) = v76;
        v77 = *(_DWORD *)(v21 + 12) + 1;
        v78 = *(_DWORD *)(v21 + 16) + 1;
        *(_DWORD *)(v21 + 12) = v77;
        *(_DWORD *)(v21 + 16) = v78;
      }
      v79 = 17;
      v92 = 17;
      if (v77 > v78)
      {
        *(_DWORD *)(v21 + 16) = v78 + 1;
        *(_BYTE *)(*(_QWORD *)v21 + v78) = 17;
      }
      else
      {
        v80 = v77;
        if (v77 == *(_DWORD *)(v21 + 8))
        {
          v83 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v77 + 1), (unint64_t)&v92);
          v80 = *(unsigned int *)(v21 + 12);
          v81 = *(_QWORD *)v21;
          v79 = *v83;
        }
        else
        {
          v81 = *(_QWORD *)v21;
        }
        *(_BYTE *)(v81 + v80) = v79;
        *(int32x2_t *)(v21 + 12) = vadd_s32(*(int32x2_t *)(v21 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v23);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v30);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v22);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(v21, v33);
    }
  }
  return a2;
}

BOOL JSC::ArrayNode::isSimpleArray(JSC::ArrayNode *this)
{
  char *v1;
  _BOOL8 v2;

  if (*((_DWORD *)this + 10))
    return 0;
  v1 = (char *)this + 32;
  do
  {
    v1 = *(char **)v1;
    v2 = v1 == 0;
  }
  while (v1
       && !*((_DWORD *)v1 + 4)
       && !(*(unsigned int (**)(_QWORD))(**((_QWORD **)v1 + 1) + 232))(*((_QWORD *)v1 + 1)));
  return v2;
}

uint64_t JSC::ObjectLiteralNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char v49;
  char v50;
  int *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  void *v61;
  WTF *v62;
  uint64_t v63;
  _DWORD *v64;
  WTF *v65;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  int *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  _DWORD *v94;
  WTF *v95;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  BOOL v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  _BYTE v129[16];
  char v130[8];
  WTF *v131;
  int v132;
  unsigned int v133;
  _BYTE v134[72];

  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
    if ((int *)(a2 + 208) == a3)
      return 0;
    v31 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
    JSC::BytecodeGenerator::emitNewObject(a2, v31, v32, v33, v34, v35, v36, v37);
    return v31;
  }
  if ((*(_WORD *)(*(_QWORD *)(v10 + 32) + 24) & 0x20) == 0)
  {
LABEL_3:
    v11 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
    JSC::BytecodeGenerator::emitNewObject(a2, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
    if (v11)
      ++*v11;
LABEL_5:
    v24 = *(_BYTE *)(a2 + 709);
    v25 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v129 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(v10 + 24)
        && (*(_BYTE *)(a2 + 104) & 1) != 0
        && !*(_BYTE *)(a2 + 707)
        && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
         || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
         || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v10 + 16)
         || *(_DWORD *)(a2 + 748) != 5))
      {
        v98 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v98;
        *(_DWORD *)(a2 + 748) = 5;
        v99 = *(_DWORD *)(v10 + 8);
        v100 = *(_DWORD *)(v10 + 12);
        v101 = *(_DWORD *)(v10 + 16);
        if (v99 != -1 || v100 != -1 || v101 != -1)
        {
          v102 = *(_QWORD *)(a2 + 192);
          v103 = *(_DWORD *)(v102 + 176);
          v18 = v100 - v103;
          v104 = v101 - v103;
          if (v101 < v103)
            v104 = 0;
          v105 = v18 >= v104;
          v106 = v18 - v104;
          if (v105)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v18, 0, 0, (v99 + ~*(_DWORD *)(v102 + 184)) | (unint64_t)(v106 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v18, v19, v20, v21, v22, v23);
      }
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v10 + 16))(v10, a2, v11);
    }
    *(_BYTE *)(a2 + 710) = v25;
    *(_BYTE *)(a2 + 709) = v24;
    if ((int *)(a2 + 208) == a3)
    {
      v31 = 0;
    }
    else
    {
      v31 = (uint64_t)v11;
      if (a3)
      {
        v31 = (uint64_t)v11;
        if (v11 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v11, v26, v27, v28, v29, v30);
          v31 = (uint64_t)a3;
        }
      }
    }
    goto LABEL_75;
  }
  v39 = *(_QWORD *)(v10 + 40);
  if (v39)
  {
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(v39 + 32) + 24) & 0x29) == 0)
        goto LABEL_3;
      v39 = *(_QWORD *)(v39 + 40);
    }
    while (v39);
    v40 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0x80u, a4, a5, a6, a7, a8);
    v47 = v40;
    if (v40)
      ++*v40;
    v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) + 64);
    v49 = *(_BYTE *)(a2 + 709);
    v50 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v129 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v51 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(v48 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
      {
        if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v48 + 8)
          || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v48 + 12)
          || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v48 + 16) ? (v118 = *(_DWORD *)(a2 + 748) == 5) : (v118 = 0), !v118))
        {
          v119 = *(_QWORD *)(v48 + 8);
          *(_DWORD *)(a2 + 744) = *(_DWORD *)(v48 + 16);
          *(_QWORD *)(a2 + 736) = v119;
          *(_DWORD *)(a2 + 748) = 5;
          v120 = *(_DWORD *)(v48 + 8);
          v121 = *(_DWORD *)(v48 + 12);
          v122 = *(_DWORD *)(v48 + 16);
          if (v120 != -1 || v121 != -1 || v122 != -1)
          {
            v125 = *(_QWORD *)(a2 + 192);
            v126 = *(_DWORD *)(v125 + 176);
            v41 = v121 - v126;
            v127 = v122 - v126;
            if (v122 < v126)
              v127 = 0;
            v105 = v41 >= v127;
            v128 = v41 - v127;
            if (v105)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v41, 0, 0, (v120 + ~*(_DWORD *)(v125 + 184)) | (unint64_t)(v128 << 32));
          }
          JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v41, v42, v43, v44, v45, v46);
        }
      }
      v51 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v48 + 16))(v48, a2, 0);
    }
    v52 = v51;
    *(_BYTE *)(a2 + 710) = v50;
    *(_BYTE *)(a2 + 709) = v49;
    if (v51)
      ++*v51;
    JSC::CallArguments::CallArguments((uint64_t)v130, a2, 0, 0);
    v58 = *(int **)v131;
    if (a2 + 208 != *(_QWORD *)v131 && v58 != 0 && v58 != v52)
      JSC::BytecodeGenerator::emitMove(a2, v58, (uint64_t)v52, v53, v54, v55, v56, v57);
    v11 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
    JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v11, (uint64_t)v47, 0, (uint64_t)v130, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), 0);
    if (v11)
      ++*v11;
    v10 = *(_QWORD *)(v10 + 40);
    if (v133)
    {
      v62 = v131;
      v63 = 8 * v133;
      do
      {
        v64 = *(_DWORD **)v62;
        *(_QWORD *)v62 = 0;
        if (v64)
          --*v64;
        v62 = (WTF *)((char *)v62 + 8);
        v63 -= 8;
      }
      while (v63);
    }
    v65 = v131;
    if (v134 == (_BYTE *)v131 || v131 == 0)
    {
      if (!v52)
        goto LABEL_46;
    }
    else
    {
      v131 = 0;
      v132 = 0;
      WTF::fastFree((unint64_t)v65, v61, v18, v19, v20, v21, v22, v23);
      if (!v52)
      {
LABEL_46:
        if (v47)
          --*v47;
        if (v11)
          goto LABEL_5;
        goto LABEL_3;
      }
    }
    --*v52;
    goto LABEL_46;
  }
  v67 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0x80u, a4, a5, a6, a7, a8);
  v11 = v67;
  if (v67)
    ++*v67;
  v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) + 64);
  v75 = *(_BYTE *)(a2 + 709);
  v76 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v129 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v77 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v74 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v74 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v74 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v74 + 16) ? (v107 = *(_DWORD *)(a2 + 748) == 5) : (v107 = 0), !v107))
      {
        v108 = *(_QWORD *)(v74 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v74 + 16);
        *(_QWORD *)(a2 + 736) = v108;
        *(_DWORD *)(a2 + 748) = 5;
        v109 = *(_DWORD *)(v74 + 8);
        v110 = *(_DWORD *)(v74 + 12);
        v111 = *(_DWORD *)(v74 + 16);
        if (v109 != -1 || v110 != -1 || v111 != -1)
        {
          v114 = *(_QWORD *)(a2 + 192);
          v115 = *(_DWORD *)(v114 + 176);
          v68 = v110 - v115;
          v116 = v111 - v115;
          if (v111 < v115)
            v116 = 0;
          v105 = v68 >= v116;
          v117 = v68 - v116;
          if (v105)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v68, 0, 0, (v109 + ~*(_DWORD *)(v114 + 184)) | (unint64_t)(v117 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v68, v69, v70, v71, v72, v73);
      }
    }
    v77 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v74 + 16))(v74, a2, 0);
  }
  v78 = v77;
  *(_BYTE *)(a2 + 710) = v76;
  *(_BYTE *)(a2 + 709) = v75;
  if (v77)
    ++*v77;
  JSC::CallArguments::CallArguments((uint64_t)v130, a2, 0, 0);
  v84 = *(int **)v131;
  if (a2 + 208 != *(_QWORD *)v131 && v84 && v84 != v78)
    JSC::BytecodeGenerator::emitMove(a2, v84, (uint64_t)v78, v79, v80, v81, v82, v83);
  v31 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, (uint64_t)v11);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, v31, (uint64_t)v11, 0, (uint64_t)v130, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), 0);
  if (v133)
  {
    v92 = v131;
    v93 = 8 * v133;
    do
    {
      v94 = *(_DWORD **)v92;
      *(_QWORD *)v92 = 0;
      if (v94)
        --*v94;
      v92 = (WTF *)((char *)v92 + 8);
      v93 -= 8;
    }
    while (v93);
  }
  v95 = v131;
  if (v134 == (_BYTE *)v131 || v131 == 0)
  {
    if (!v78)
      goto LABEL_75;
    goto LABEL_73;
  }
  v131 = 0;
  v132 = 0;
  WTF::fastFree((unint64_t)v95, v85, v86, v87, v88, v89, v90, v91);
  if (v78)
LABEL_73:
    --*v78;
LABEL_75:
  if (v11)
    --*v11;
  return v31;
}

uint64_t *WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::add<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>&>(uint64_t *result, uint64_t *a2, uint64_t *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  int v29;
  unint64_t v30;
  unsigned int v31;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = *(_DWORD *)(*a3 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *(_DWORD *)(v15 + 32);
  v17 = v14 & (v16 >> 8);
  v18 = v12 + 24 * v17;
  v19 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      if (v19 == v15)
      {
        if ((v13 & 1) != 0)
          v31 = 0;
        else
          v31 = *(_DWORD *)(v12 - 4);
        v27 = 0;
        v26 = v12 + 24 * v31;
        goto LABEL_14;
      }
      if (v19 == -1)
        v28 = (_QWORD *)v18;
      v17 = (v17 + v29) & v14;
      v18 = v12 + 24 * v17;
      v19 = *(_QWORD *)v18;
      ++v29;
    }
    while (*(_QWORD *)v18);
    if (v28)
    {
      *v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v18 = (uint64_t)v28;
    }
  }
  *(_QWORD *)v18 = v15;
  *(_OWORD *)(v18 + 8) = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_13;
    goto LABEL_25;
  }
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v30 = 8;
LABEL_28:
      result = WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a2, v30, v18, (uint64_t)a4, a5, a6, a7, a8);
      v18 = (uint64_t)result;
      v22 = *a2;
      if (*a2)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
      goto LABEL_13;
    }
LABEL_25:
    v30 = ((_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25)));
    goto LABEL_28;
  }
LABEL_13:
  v26 = v22 + 24 * v25;
  v27 = 1;
LABEL_14:
  *v11 = v18;
  v11[1] = v26;
  *((_BYTE *)v11 + 16) = v27;
  return result;
}

_QWORD *WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

void JSC::PropertyListNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *,JSC::RegisterID *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;

  v10 = **(_QWORD **)(a1 + 8 * ((*(_WORD *)(a2 + 24) & 0x3000) != 4096));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_BYTE *)(v11 + 709);
  *(_BYTE *)(v11 + 709) = 0;
  v14 = *(_BYTE *)(v11 + 710);
  *(_BYTE *)(v11 + 710) = 0;
  if ((unint64_t)&v67 < *(_QWORD *)(*(_QWORD *)(v11 + 696) + 93104))
  {
    *(_BYTE *)(v11 + 706) = 1;
    v15 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v11);
  }
  else
  {
    if (*(_BYTE *)(v12 + 24)
      && (*(_BYTE *)(v11 + 104) & 1) != 0
      && !*(_BYTE *)(v11 + 707)
      && (*(_DWORD *)(v11 + 736) != *(_DWORD *)(v12 + 8)
       || *(_DWORD *)(v11 + 740) != *(_DWORD *)(v12 + 12)
       || *(_DWORD *)(v11 + 744) != *(_DWORD *)(v12 + 16)
       || *(_DWORD *)(v11 + 748) != 5))
    {
      v58 = *(_QWORD *)(v12 + 8);
      *(_DWORD *)(v11 + 744) = *(_DWORD *)(v12 + 16);
      *(_QWORD *)(v11 + 736) = v58;
      *(_DWORD *)(v11 + 748) = 5;
      v59 = *(_DWORD *)(v12 + 8);
      v60 = *(_DWORD *)(v12 + 12);
      v61 = *(_DWORD *)(v12 + 16);
      if (v59 != -1 || v60 != -1 || v61 != -1)
      {
        v62 = *(_QWORD *)(v11 + 192);
        v63 = *(_DWORD *)(v62 + 176);
        a3 = v60 - v63;
        v64 = v61 - v63;
        if (v61 < v63)
          v64 = 0;
        v65 = a3 >= v64;
        v66 = a3 - v64;
        if (v65)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(v11 + 24), *(unsigned int *)(v11 + 12), a3, 0, 0, (v59 + ~*(_DWORD *)(v62 + 184)) | (unint64_t)(v66 << 32));
      }
      JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v11, 5, a3, a4, a5, a6, a7, a8);
    }
    v15 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, v11, 0);
  }
  v22 = v15;
  *(_BYTE *)(v11 + 710) = v14;
  *(_BYTE *)(v11 + 709) = v13;
  if (v15)
    ++*v15;
  v23 = *(_WORD *)(a2 + 24);
  if ((v23 & 0x800) != 0)
  {
    v24 = *(_QWORD *)(a1 + 16);
    JSC::Symbols::homeObjectPrivateName += 2;
    v68 = (WTF::StringImpl *)&JSC::Symbols::homeObjectPrivateName;
    v25 = JSC::BytecodeGenerator::addConstant(v24, (WTF::AtomStringImpl *)&v68, v16, v17, v18, v19, v20, v21);
    JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(v24 + 688), v22[1], v25);
    JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(v24, (void *)v22[1], v25, *(unsigned int *)(v10 + 4), (unint64_t)*(unsigned __int8 *)(v24 + 712) << 8, v26, v27, v28);
    v32 = v68;
    v68 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v29, v30, v31, v18, v19, v20, v21);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    v23 = *(_WORD *)(a2 + 24);
  }
  if ((v23 & 0x200) != 0)
    v33 = &JSC::Symbols::getPrivateName;
  else
    v33 = &JSC::Symbols::setPrivateName;
  *v33 += 2;
  v68 = (WTF::StringImpl *)v33;
  JSC::BytecodeGenerator::emitDirectPutById(*(_QWORD *)(a1 + 16), **(WTF::AtomStringImpl ***)(a1 + 24), &v68, (uint64_t)v22, v18, v19, v20, v21);
  v41 = v68;
  v68 = 0;
  if (!v41)
  {
LABEL_17:
    if (!v22)
      return;
    goto LABEL_18;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
  WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
  if (v22)
LABEL_18:
    --*v22;
}

void JSC::PropertyListNode::emitSaveComputedFieldName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char v18;
  char v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  _DWORD *v106;
  WTF::StringImpl *v107[5];
  int v108;

  v16.n128_f64[0] = JSC::BytecodeGenerator::variable((uint64_t)v107, a1, *(_QWORD *)a2, 0, a5, a6, a7, a8);
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_BYTE *)(a1 + 709);
  v19 = *(_BYTE *)(a1 + 710);
  *(_WORD *)(a1 + 709) = 0;
  if ((unint64_t)&v105 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
  {
    *(_BYTE *)(a1 + 706) = 1;
    v20 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  }
  else
  {
    if (*(_BYTE *)(v17 + 24) && (*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    {
      if (*(_DWORD *)(a1 + 736) != *(_DWORD *)(v17 + 8)
        || *(_DWORD *)(a1 + 740) != *(_DWORD *)(v17 + 12)
        || (*(_DWORD *)(a1 + 744) == *(_DWORD *)(v17 + 16) ? (v93 = *(_DWORD *)(a1 + 748) == 5) : (v93 = 0), !v93))
      {
        v94 = *(_QWORD *)(v17 + 8);
        *(_DWORD *)(a1 + 744) = *(_DWORD *)(v17 + 16);
        *(_QWORD *)(a1 + 736) = v94;
        *(_DWORD *)(a1 + 748) = 5;
        v95 = *(_DWORD *)(v17 + 8);
        v96 = *(_DWORD *)(v17 + 12);
        v97 = *(_DWORD *)(v17 + 16);
        if (v95 != -1 || v96 != -1 || v97 != -1)
        {
          v98 = *(_QWORD *)(a1 + 192);
          v99 = *(_DWORD *)(v98 + 176);
          v10 = v96 - v99;
          v100 = v97 - v99;
          if (v97 < v99)
            v100 = 0;
          v101 = v10 >= v100;
          v102 = v10 - v100;
          if (v101)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), v10, 0, 0, (v95 + ~*(_DWORD *)(v98 + 184)) | (unint64_t)(v102 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, 5, v10, v11, v12, v13, v14, v15);
      }
    }
    v20 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)v17 + 16))(v17, a1, 0, v16);
  }
  v21 = v20;
  *(_BYTE *)(a1 + 710) = v19;
  *(_BYTE *)(a1 + 709) = v18;
  if (v20)
    ++*v20;
  v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::OpToPropertyKey::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v22[1], v21[1], v23, v24, v25, v26, v27);
  ++*v22;
  if ((*(_WORD *)(a2 + 24) & 0x3000) == 0x2000 && (*(_WORD *)(a2 + 24) & 0x800) == 0)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v106, a1, v28, v29, v30, v31, v32, v33);
    v60 = JSC::BytecodeGenerator::addStringConstant(a1, (JSC::VM *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 2160), v54, v55, v56, v57, v58, v59);
    v66 = JSC::BytecodeGenerator::emitLoad(a1, 0, v60, v61, v62, v63, v64, v65);
    v67 = v66;
    if (v66)
      ++*v66;
    v68 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    JSC::OpStricteq::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(v68 + 4), v67[1], v22[1], v69, v70, v71, v72);
    v73 = v106;
    JSC::BytecodeGenerator::emitJumpIfFalse(a1, v68, (uint64_t)v106, v74, v75, v76, v77, v78);
    JSC::BytecodeGenerator::emitThrowTypeError(a1, "Cannot declare a static field named 'prototype'", 0x30uLL, v79, v80, v81, v82, v83);
    v84 = *(_DWORD *)(a1 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v73, a1, v84, v85, v86, v87, v88, v89);
    v90 = *(_QWORD *)(a1 + 24);
    v91 = *(unsigned int *)(v90 + 28);
    if (!(_DWORD)v91 || v84 != *(_DWORD *)(*(_QWORD *)(v90 + 16) + 4 * v91 - 4))
    {
      v108 = v84;
      v92 = (_QWORD *)(v90 + 16);
      if ((_DWORD)v91 == *(_DWORD *)(v90 + 24))
      {
        v103 = v90;
        v104 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v91 + 1, (unint64_t)&v108);
        v90 = v103;
        *(_DWORD *)(*(_QWORD *)(v103 + 16) + 4 * *(unsigned int *)(v103 + 28)) = *v104;
      }
      else
      {
        *(_DWORD *)(*v92 + 4 * v91) = v84;
      }
      ++*(_DWORD *)(v90 + 28);
      *(_DWORD *)(a1 + 36) = 115;
    }
    --*v67;
    --*v73;
  }
  v34 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a1, 0, (unsigned __int8 *)v107, v29, v30, v31, v32, v33);
  if (v34)
  {
    v37 = v34;
    ++*v34;
    JSC::BytecodeGenerator::emitPutToScope(a1, (uint64_t)v34, (uint64_t)v107, (uint64_t)v22, 0, 1, v35, v36);
    --*v37;
  }
  else
  {
    JSC::BytecodeGenerator::emitPutToScope(a1, 0, (uint64_t)v107, (uint64_t)v22, 0, 1, v35, v36);
  }
  --*v22;
  --*v21;
  v45 = v107[0];
  v107[0] = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
}

uint64_t JSC::PropertyListNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *,JSC::RegisterID *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *)::$_1::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _DWORD *v6;
  uint64_t v7;
  _BYTE v8[11];

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 8);
    *(_QWORD *)v8 = *(_QWORD *)(v3 + 9);
    *(_DWORD *)&v8[7] = *(_DWORD *)(v3 + 16);
    LOBYTE(v3) = 1;
  }
  else
  {
    v4 = 0;
  }
  if ((*(_WORD *)(v2 + 24) & 0x400) != 0)
  {
    v5 = 3;
  }
  else
  {
    v5 = 2 * ((*(_WORD *)(v2 + 24) & 0x3C0) != 0);
    if (*(_QWORD *)(v2 + 8))
      v5 = 1;
  }
  v6 = **(_DWORD ***)v2;
  if (v6)
    *v6 += 2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(result + 20) = v4;
  *(_QWORD *)(result + 21) = *(_QWORD *)v8;
  *(_DWORD *)(result + 28) = *(_DWORD *)&v8[7];
  *(_BYTE *)(result + 32) = v3;
  *(_BYTE *)(result + 36) = v5;
  return result;
}

void JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition(WTF::StringImpl **this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *this;
  *this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

void JSC::PropertyListNode::emitPutConstantProperty(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  char v23;
  char v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int16 *v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  int v91;
  int *v92;
  int v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD **v109;
  uint64_t v110;
  _DWORD *v111;
  unsigned int v112;
  JSC::VM *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  int *v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  char v147;
  char v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::AtomStringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned int v180;
  unint64_t v181;
  int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  WTF::StringImpl *v188[5];
  uint64_t v189;

  if (!*(_QWORD *)a4
    || (**(_QWORD **)a4 == *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 16)
      ? (v12 = (*(_WORD *)(a4 + 24) & 0x3FFF) == 1)
      : (v12 = 0),
        !v12))
  {
    v13 = *(_QWORD **)(a4 + 16);
    if ((*(unsigned int (**)(_QWORD *))(*v13 + 152))(v13))
    {
      v107 = v13[4];
      v108 = *(_QWORD *)(v107 + 40);
      if ((!v108 || !*(_DWORD *)(v108 + 4)) && !*(_QWORD *)(v107 + 48))
      {
LABEL_96:
        v20 = 1;
LABEL_9:
        if (*(_QWORD *)a4)
        {
          v21 = 0;
        }
        else
        {
          v139 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
          v21 = v139;
          if (v139)
            ++*v139;
          v146 = *(_BYTE **)(a4 + 8);
          if (v20)
          {
            v162 = JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(a4 + 8), v140, v141, v142, v143, v144, v145);
            JSC::OpToPropertyKey::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, v21[1], *(_DWORD *)(v162 + 4), v163, v164, v165, v166, v167);
          }
          else
          {
            v147 = *((_BYTE *)this + 709);
            v148 = *((_BYTE *)this + 710);
            *(_WORD *)((char *)this + 709) = 0;
            if ((unint64_t)v188 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
            {
              *((_BYTE *)this + 706) = 1;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
            }
            else
            {
              if (v146[24])
                JSC::BytecodeGenerator::emitDebugHook((char *)this, 5, (uint64_t)(v146 + 8), v141, v142, v143, v144, v145);
              (*(void (**)(_BYTE *, JSC::BytecodeGenerator *, int *))(*(_QWORD *)v146 + 16))(v146, this, v21);
            }
            *((_BYTE *)this + 710) = v148;
            *((_BYTE *)this + 709) = v147;
          }
        }
        v22 = *(_QWORD *)(a4 + 16);
        v23 = *((_BYTE *)this + 709);
        v24 = *((_BYTE *)this + 710);
        *(_WORD *)((char *)this + 709) = 0;
        if ((unint64_t)v188 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
        {
          *((_BYTE *)this + 706) = 1;
          v25 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
        }
        else
        {
          if (*(_BYTE *)(v22 + 24)
            && (*((_BYTE *)this + 104) & 1) != 0
            && !*((_BYTE *)this + 707)
            && (*((_DWORD *)this + 184) != *(_DWORD *)(v22 + 8)
             || *((_DWORD *)this + 185) != *(_DWORD *)(v22 + 12)
             || *((_DWORD *)this + 186) != *(_DWORD *)(v22 + 16)
             || *((_DWORD *)this + 187) != 5))
          {
            v123 = *(_QWORD *)(v22 + 8);
            *((_DWORD *)this + 186) = *(_DWORD *)(v22 + 16);
            *((_QWORD *)this + 92) = v123;
            *((_DWORD *)this + 187) = 5;
            v124 = *(_DWORD *)(v22 + 8);
            v125 = *(_DWORD *)(v22 + 12);
            v126 = *(_DWORD *)(v22 + 16);
            if (v124 != -1 || v125 != -1 || v126 != -1)
            {
              v127 = *((_QWORD *)this + 24);
              v128 = *(_DWORD *)(v127 + 176);
              v14 = v125 - v128;
              v129 = v126 - v128;
              if (v126 < v128)
                v129 = 0;
              v90 = v14 >= v129;
              v130 = v14 - v129;
              if (v90)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*((_QWORD *)this + 3), *((unsigned int *)this + 3), v14, 0, 0, (v124 + ~*(_DWORD *)(v127 + 184)) | (unint64_t)(v130 << 32));
            }
            JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, 5, v14, v15, v16, v17, v18, v19);
          }
          v25 = (_DWORD *)(*(uint64_t (**)(uint64_t, JSC::BytecodeGenerator *, _QWORD))(*(_QWORD *)v22 + 16))(v22, this, 0);
        }
        v26 = v25;
        *((_BYTE *)this + 710) = v24;
        *((_BYTE *)this + 709) = v23;
        if (v25)
          ++*v25;
        v27 = *(_QWORD **)(a4 + 16);
        if ((*(unsigned int (**)(_QWORD *))(*v27 + 152))(v27))
        {
          if ((*(_WORD *)(v27[4] + 33) & 0x10) == 0)
          {
            JSC::Symbols::homeObjectPrivateName += 2;
            v188[0] = (WTF::StringImpl *)&JSC::Symbols::homeObjectPrivateName;
            v102 = JSC::BytecodeGenerator::addConstant((uint64_t)this, (WTF::AtomStringImpl *)v188, v29, v30, v31, v32, v33, v34);
            JSC::StaticPropertyAnalyzer::putById(*((_DWORD **)this + 86), v26[1], v102);
            JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, (void *)v26[1], v102, *(unsigned int *)(a3 + 4), (unint64_t)*((unsigned __int8 *)this + 712) << 8, v103, v104, v105);
            v106 = v188[0];
            v188[0] = 0;
            if (v106)
            {
              if (*(_DWORD *)v106 == 2)
              {
                WTF::StringImpl::~StringImpl(v106, v28, v29, v30, v31, v32, v33, v34);
                WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
              }
              else
              {
                *(_DWORD *)v106 -= 2;
              }
            }
          }
        }
        v35 = *(_WORD *)(a4 + 24);
        if ((v35 & 0x3000) != 0)
        {
          if ((v35 & 0x80) != 0)
          {
            JSC::BytecodeGenerator::variable((uint64_t)v188, (uint64_t)this, *(_QWORD *)a4, 0, v31, v32, v33, v34);
            JSC::BytecodeGenerator::emitPutToScope((uint64_t)this, *((_QWORD *)this + 31), (uint64_t)v188, (uint64_t)v26, 1, 1, v152, v153);
            v161 = v188[0];
            v188[0] = 0;
            if (v161)
            {
              if (*(_DWORD *)v161 == 2)
              {
                WTF::StringImpl::~StringImpl(v161, v154, v155, v156, v157, v158, v159, v160);
                WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
              }
              else
              {
                *(_DWORD *)v161 -= 2;
              }
            }
          }
          else
          {
            v113 = *(JSC::VM **)a4;
            if (v113)
            {
              v189 = *(_QWORD *)v113;
              WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::add<decltype(nullptr)>(v188, (uint64_t *)this + 82, &v189, v30, v31, v32, v33, v34);
              v119 = v188[0];
              v120 = *((_QWORD *)v188[0] + 1);
              if (!v120)
              {
                v120 = JSC::jsOwnedString(*((JSC **)this + 87), v113, 0, v114, v115, v116, v117, v118);
                *((_QWORD *)v119 + 1) = v120;
              }
              v121 = JSC::BytecodeGenerator::emitLoad((uint64_t)this, 0, v120, v114, v115, v116, v117, v118);
              if (v121)
                ++*v121;
              if (v21)
                --*v21;
              v21 = v121;
            }
            if (v20)
              JSC::OpSetFunctionName::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, v26[1], v21[1], v30, v31, v32, v33, v34);
            JSC::BytecodeGenerator::emitCallDefineProperty((uint64_t)this, a3, (uint64_t)v21, (uint64_t)v26, 3, (_DWORD *)(a1 + 8), v33, v34);
          }
        }
        else
        {
          v36 = *(WTF::StringImpl ***)a4;
          if (*(_QWORD *)a4)
          {
            v37 = *v36;
            if (!*v36)
            {
LABEL_25:
              v42 = (uint64_t *)((char *)this + 640);
              v43 = *(_DWORD *)(*((_QWORD *)this + 3) + 44);
              v44 = *((_QWORD *)this + 80);
              if (v44
                || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)this + 80, 8u, 0), (v44 = *v42) != 0))
              {
                v45 = *(_DWORD *)(v44 - 8);
              }
              else
              {
                v45 = 0;
              }
              v46 = *((_DWORD *)v37 + 4);
              if ((v46 & 0x20) != 0)
                v46 = *((_DWORD *)v37 + 8);
              v47 = v45 & (v46 >> 8);
              v48 = v44 + 16 * v47;
              v49 = *(WTF::StringImpl **)v48;
              if (*(_QWORD *)v48)
              {
                v50 = 0;
                v51 = 1;
                while (v49 != v37)
                {
                  if (v49 == (WTF::StringImpl *)-1)
                    v50 = v48;
                  v47 = (v47 + v51) & v45;
                  v48 = v44 + 16 * v47;
                  v49 = *(WTF::StringImpl **)v48;
                  ++v51;
                  if (!*(_QWORD *)v48)
                  {
                    if (v50)
                    {
                      *(_QWORD *)v50 = 0;
                      *(_DWORD *)(v50 + 8) = 0x7FFFFFFF;
                      --*(_DWORD *)(*v42 - 16);
                      v48 = v50;
                    }
                    goto LABEL_37;
                  }
                }
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v37, v28, v29, v30, v31, v32, v33, v34);
                    WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
                  }
                  else
                  {
                    *(_DWORD *)v37 -= 2;
                  }
                }
                goto LABEL_51;
              }
LABEL_37:
              *(_QWORD *)v48 = v37;
              *(_DWORD *)(v48 + 8) = v43;
              v52 = *v42;
              if (*v42)
                v53 = *(_DWORD *)(v52 - 12) + 1;
              else
                v53 = 1;
              *(_DWORD *)(v52 - 12) = v53;
              v54 = *v42;
              if (*v42)
                v55 = *(_DWORD *)(v54 - 12);
              else
                v55 = 0;
              v56 = (*(_DWORD *)(v54 - 16) + v55);
              v57 = *(unsigned int *)(v54 - 4);
              if (v57 > 0x400)
              {
                if (v57 > 2 * v56)
                  goto LABEL_43;
              }
              else
              {
                if (3 * v57 > 4 * v56)
                {
LABEL_43:
                  v58 = *((_QWORD *)this + 3);
                  v59 = (uint64_t *)(v58 + 32);
                  v60 = *(unsigned int *)(v58 + 44);
                  if ((_DWORD)v60 == *(_DWORD *)(v58 + 40))
                  {
                    v109 = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)v36);
                    v60 = *(unsigned int *)(v58 + 44);
                    v110 = *(_QWORD *)(v58 + 32);
                    v111 = *v109;
                    if (*v109)
                      *v111 += 2;
                    *(_QWORD *)(v110 + 8 * v60) = v111;
                  }
                  else
                  {
                    v61 = *v59;
                    v62 = *v36;
                    if (*v36)
                      *(_DWORD *)v62 += 2;
                    *(_QWORD *)(v61 + 8 * v60) = v62;
                  }
                  *(_DWORD *)(v58 + 44) = v60 + 1;
LABEL_51:
                  v63 = *(unsigned int *)(v48 + 8);
                  v64 = *((_QWORD *)this + 86);
                  if (!v64)
                    goto LABEL_63;
                  v65 = *(_DWORD *)(a3 + 4);
                  v66 = *(_DWORD *)(v64 - 8);
                  v67 = 9 * ((v65 + ~(v65 << 15)) ^ ((v65 + ~(v65 << 15)) >> 10));
                  v68 = (v67 ^ (v67 >> 6)) + ~((v67 ^ (v67 >> 6)) << 11);
                  v69 = v66 & (v68 ^ HIWORD(v68));
                  v70 = *(_DWORD *)(v64 + 16 * v69);
                  if (v70 != v65)
                  {
                    v91 = 1;
                    while (v70 != 0x7FFFFFFF)
                    {
                      v69 = ((_DWORD)v69 + v91) & v66;
                      v70 = *(_DWORD *)(v64 + 16 * v69);
                      ++v91;
                      if (v70 == v65)
                        goto LABEL_53;
                    }
                    goto LABEL_63;
                  }
LABEL_53:
                  v71 = *(_QWORD *)(v64 + 16 * v69 + 8);
                  if (!v71)
                  {
LABEL_63:
                    JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, (void *)*(unsigned int *)(a3 + 4), v63, v26[1], ((unint64_t)*((unsigned __int8 *)this + 712) << 8) | 1, v32, v33, v34);
                    goto LABEL_64;
                  }
                  v74 = *(_QWORD *)(v71 + 24);
                  v73 = (uint64_t *)(v71 + 24);
                  v72 = v74;
                  if (v74
                    || (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v73, 8u, 0), (v72 = *v73) != 0))
                  {
                    v75 = *(_DWORD *)(v72 - 8);
                  }
                  else
                  {
                    v75 = 0;
                  }
                  v76 = 9 * ((v63 + ~((_DWORD)v63 << 15)) ^ ((v63 + ~((_DWORD)v63 << 15)) >> 10));
                  v77 = (v76 ^ (v76 >> 6)) + ~((v76 ^ (v76 >> 6)) << 11);
                  v78 = v75 & (v77 ^ HIWORD(v77));
                  v79 = (int *)(v72 + 4 * v78);
                  v80 = *v79;
                  if (*v79 != -1)
                  {
                    v92 = 0;
                    v93 = 1;
                    while (v80 != (_DWORD)v63)
                    {
                      if (v80 == -2)
                        v92 = v79;
                      v78 = (v78 + v93) & v75;
                      v79 = (int *)(v72 + 4 * v78);
                      v80 = *v79;
                      ++v93;
                      if (*v79 == -1)
                      {
                        if (v92)
                        {
                          *v92 = -1;
                          --*(_DWORD *)(*v73 - 16);
                          v79 = v92;
                        }
                        goto LABEL_57;
                      }
                    }
                    goto LABEL_63;
                  }
LABEL_57:
                  *v79 = v63;
                  v81 = *v73;
                  if (*v73)
                    v82 = *(_DWORD *)(v81 - 12) + 1;
                  else
                    v82 = 1;
                  *(_DWORD *)(v81 - 12) = v82;
                  v83 = *v73;
                  if (*v73)
                    v84 = *(_DWORD *)(v83 - 12);
                  else
                    v84 = 0;
                  v85 = (*(_DWORD *)(v83 - 16) + v84);
                  v86 = *(unsigned int *)(v83 - 4);
                  if (v86 > 0x400)
                  {
                    if (v86 > 2 * v85)
                      goto LABEL_63;
                  }
                  else
                  {
                    if (3 * v86 > 4 * v85)
                      goto LABEL_63;
                    if (!(_DWORD)v86)
                    {
                      v112 = 8;
                      goto LABEL_125;
                    }
                  }
                  v112 = (_DWORD)v86 << (6 * *(_DWORD *)(v83 - 12) >= (2 * v86));
LABEL_125:
                  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v73, v112, v79);
                  goto LABEL_63;
                }
                if (!(_DWORD)v57)
                {
                  v122 = 8;
LABEL_120:
                  v48 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)this + 80, v122, (WTF::StringImpl **)v48);
                  goto LABEL_43;
                }
              }
              v122 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
              goto LABEL_120;
            }
            v38 = *((_DWORD *)v37 + 4);
            if ((v38 & 0x20) == 0)
            {
              v39 = (_BYTE *)*((_QWORD *)v37 + 1);
              v40 = *((unsigned int *)v37 + 1);
              if ((v38 & 4) != 0)
              {
                if ((_DWORD)v40)
                {
                  v41 = *v39 - 48;
                  if (v41 <= 9 && (v40 < 2 || *v39 != 48))
                  {
                    v178 = v40 - 1;
                    v179 = v39 + 1;
                    while (v178)
                    {
                      if (v41 <= 0x19999999)
                      {
                        v180 = *v179 - 48;
                        if (v180 <= 9)
                        {
                          v90 = __CFADD__(v180, 10 * v41);
                          v41 = v180 + 10 * v41;
                          --v178;
                          ++v179;
                          if (!v90)
                            continue;
                        }
                      }
                      goto LABEL_24;
                    }
LABEL_186:
                    if (v41 != -1)
                    {
                      if ((v41 & 0x80000000) != 0)
                        v181 = COERCE__INT64((double)v41) + 0x2000000000000;
                      else
                        v181 = v41 | 0xFFFE000000000000;
                      v182 = JSC::BytecodeGenerator::emitLoad((uint64_t)this, 0, v181, v30, v31, v32, v33, v34);
                      v187 = v182;
                      if (v182)
                        ++*v182;
                      if (v21)
                        --*v21;
                      JSC::BytecodeGenerator::emitDirectPutByVal((uint64_t)this, *(_DWORD *)(a3 + 4), v182[1], (uint64_t)v26, v183, v184, v185, v186);
                      v21 = v187;
                      goto LABEL_194;
                    }
                  }
                }
              }
              else if ((_DWORD)v40)
              {
                v41 = *(unsigned __int16 *)v39 - 48;
                if (v41 <= 9 && (*(_WORD *)v39 != 48 || v40 <= 1))
                {
                  v87 = (unsigned __int16 *)(v39 + 2);
                  v88 = v40 - 1;
                  while (v88)
                  {
                    if (v41 <= 0x19999999)
                    {
                      v89 = *v87 - 48;
                      if (v89 <= 9)
                      {
                        v90 = __CFADD__(v89, 10 * v41);
                        v41 = v89 + 10 * v41;
                        ++v87;
                        --v88;
                        if (!v90)
                          continue;
                      }
                    }
                    goto LABEL_24;
                  }
                  goto LABEL_186;
                }
              }
            }
LABEL_24:
            *(_DWORD *)v37 += 2;
            goto LABEL_25;
          }
          if (v20)
            JSC::OpSetFunctionName::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, v26[1], v21[1], v30, v31, v32, v33, v34);
          JSC::BytecodeGenerator::emitDirectPutByVal((uint64_t)this, *(_DWORD *)(a3 + 4), v21[1], (uint64_t)v26, v31, v32, v33, v34);
        }
LABEL_194:
        if (!v26)
        {
LABEL_65:
          if (!v21)
            return;
          goto LABEL_66;
        }
LABEL_64:
        --*v26;
        goto LABEL_65;
      }
    }
    else if ((*(unsigned int (**)(_QWORD *))(*v13 + 176))(v13))
    {
      v176 = (_QWORD *)v13[21];
      if (!v176)
        v176 = (_QWORD *)v13[20];
      if (!*v176)
      {
        v177 = v13[24];
        if (!v177
          || (JSC::PropertyListNode::hasStaticallyNamedProperty(v177, (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 1968)) & 1) == 0)
        {
          goto LABEL_96;
        }
      }
    }
    v20 = 0;
    goto LABEL_9;
  }
  v149 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(a4 + 16), a3, a4, a5, a6, a7, a8);
  if (!v149)
  {
    JSC::BytecodeGenerator::emitDirectSetPrototypeOf<(JSC::InvalidPrototypeMode)1>((uint64_t)this, a3, 0, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), v150, v151);
    return;
  }
  v21 = v149;
  ++*v149;
  JSC::BytecodeGenerator::emitDirectSetPrototypeOf<(JSC::InvalidPrototypeMode)1>((uint64_t)this, a3, (uint64_t)v149, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), v150, v151);
LABEL_66:
  --*v21;
}

void JSC::emitPutHomeObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  JSC::Symbols::homeObjectPrivateName += 2;
  v31 = (WTF::StringImpl *)&JSC::Symbols::homeObjectPrivateName;
  v11 = JSC::BytecodeGenerator::addConstant(a1, (WTF::AtomStringImpl *)&v31, a3, a4, a5, a6, a7, a8);
  JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a1 + 688), *(_DWORD *)(a2 + 4), v11);
  JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, (void *)*(unsigned int *)(a2 + 4), v11, *(unsigned int *)(a3 + 4), (unint64_t)*(unsigned __int8 *)(a1 + 712) << 8, v12, v13, v14);
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
}

uint64_t JSC::BytecodeGenerator::emitDirectSetPrototypeOf<(JSC::InvalidPrototypeMode)1>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int **v21;
  int *v22;
  int *v25;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[8];
  int **v38;

  v14 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0x7Du, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  v15 = v14;
  if (v14)
    ++*v14;
  JSC::CallArguments::CallArguments((uint64_t)v37, a1, 0, 1);
  v21 = v38;
  v22 = *v38;
  if ((int *)(a1 + 208) != *v38 && v22 != 0 && v22 != (int *)a2)
  {
    JSC::BytecodeGenerator::emitMove(a1, v22, a2, v16, v17, v18, v19, v20);
    v21 = v38;
  }
  v25 = v21[1];
  if ((int *)(a1 + 208) != v25 && v25 != 0 && v25 != (int *)a3)
    JSC::BytecodeGenerator::emitMove(a1, v25, a3, v16, v17, v18, v19, v20);
  v28 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a1, v28, (uint64_t)v15, 0, (uint64_t)v37, a4, a5, a6, 0);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)v37, v29, v30, v31, v32, v33, v34, v35);
  if (v15)
    --*v15;
  return a2;
}

_DWORD *JSC::BracketAccessorNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _DWORD *v7;
  JSC::ExpressionNode *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  JSC::BytecodeGenerator *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  JSC::ExpressionNode *v83;
  _DWORD *v84;
  int isNonIndexStringElement;
  uint64_t v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[28];
  uint64_t v108;
  int v109;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64));
  v7 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v15 = v7;
  if (v6)
  {
    if (v7)
      ++*v7;
    v39 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    ++*v39;
    v82 = (_DWORD *)JSC::emitSuperBaseForCallee((JSC *)a2, v75, v76, v77, v78, v79, v80, v81);
    v84 = v82;
    if (v82)
      ++*v82;
    isNonIndexStringElement = JSC::isNonIndexStringElement(*(JSC **)(a1 + 72), v83);
    v86 = *(_QWORD *)(a1 + 72);
    if (isNonIndexStringElement)
    {
      v87 = *(WTF::AtomStringImpl **)(v86 + 32);
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
      JSC::BytecodeGenerator::emitGetById(a2, v15, (uint64_t)v84, (uint64_t)v39, v87, v88, v89, v90);
    }
    else
    {
      v91 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v86);
      if (v91)
      {
        v92 = v91;
        ++*v91;
        JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
        JSC::BytecodeGenerator::emitGetByVal(a2, v15, (uint64_t)v84, (uint64_t)v39, (uint64_t)v92, v93, v94, v95);
        --*v92;
      }
      else
      {
        JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
        JSC::BytecodeGenerator::emitGetByVal(a2, v15, (uint64_t)v84, (uint64_t)v39, 0, v103, v104, v105);
      }
    }
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v15, a1 + 40, a1 + 52);
    if (v84)
      --*v84;
    goto LABEL_37;
  }
  if (v7)
    ++*v7;
  v22 = JSC::isNonIndexStringElement(*(JSC **)(a1 + 72), v8);
  v23 = *(_BYTE **)(a1 + 64);
  if (v22)
  {
    v39 = (_DWORD *)JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(a1 + 64), v16, v17, v18, v19, v20, v21);
    if (v39)
LABEL_15:
      ++*v39;
  }
  else
  {
    v24 = *(unsigned __int8 *)(a1 + 80);
    v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), a2);
    v31 = *(_BYTE *)(a2 + 416) == 2 && v24 == 0;
    if (v31 || (v25 & 1) != 0)
    {
      v32 = *(_BYTE *)(a2 + 709);
      v33 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v106 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v34 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v23[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v23 + 8), v26, v27, v28, v29, v30);
        v34 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, a2, 0);
      }
      v39 = (_DWORD *)v34;
      *(_BYTE *)(a2 + 710) = v33;
      *(_BYTE *)(a2 + 709) = v32;
      if (v34)
        goto LABEL_15;
    }
    else
    {
      v57 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v39 = v57;
      if (v57)
        ++*v57;
      v63 = *(_BYTE *)(a2 + 709);
      v64 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v106 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v23[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v23 + 8), v58, v59, v60, v61, v62);
        (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v23 + 16))(v23, a2, v39);
      }
      *(_BYTE *)(a2 + 710) = v64;
      *(_BYTE *)(a2 + 709) = v63;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 26))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v39);
  if (v22)
  {
    v66 = *(_DWORD *)(a1 + 28);
    v65 = *(_DWORD *)(a1 + 32);
    v67 = *(_DWORD *)(a1 + 36);
    if (v66 != -1 || v65 != -1 || v67 != -1)
    {
      v68 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v68 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v69 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v69 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v70 = *(_QWORD *)(a2 + 192);
          v71 = *(_DWORD *)(v70 + 176);
          v72 = v65 - v71;
          v53 = v67 >= v71;
          v73 = v67 - v71;
          if (!v53)
            v73 = 0;
          v53 = v72 >= v73;
          v74 = v72 - v73;
          if (v53)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v72, v65 - v68, v69 - v65, (v66 + ~*(_DWORD *)(v70 + 184)) | (unint64_t)(v74 << 32));
        }
      }
    }
    JSC::BytecodeGenerator::emitGetById(a2, v15, (uint64_t)v39, *(WTF::AtomStringImpl **)(*(_QWORD *)(a1 + 72) + 32), v35, v36, v37, v38);
  }
  else
  {
    v44 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, *(_QWORD *)(a1 + 72));
    v46 = *(_DWORD *)(a1 + 28);
    v45 = *(_DWORD *)(a1 + 32);
    v47 = *(_DWORD *)(a1 + 36);
    if (v46 != -1 || v45 != -1 || v47 != -1)
    {
      v48 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v48 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v49 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v49 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v50 = *(_QWORD *)(a2 + 192);
          v51 = *(_DWORD *)(v50 + 176);
          v52 = v45 - v51;
          v53 = v47 >= v51;
          v54 = v47 - v51;
          if (!v53)
            v54 = 0;
          v53 = v52 >= v54;
          v55 = v52 - v54;
          if (v53)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v52, v45 - v48, v49 - v45, (v46 + ~*(_DWORD *)(v50 + 184)) | (unint64_t)(v55 << 32));
        }
      }
    }
    JSC::BytecodeGenerator::emitGetByVal(a2, v15, (uint64_t)v39, (uint64_t)v44, v40, v41, v42, v43);
  }
  if (v15 && (*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    v96 = v15[1];
    v97 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v96, 0, 2, 0, v97, v98, v99);
    v100 = *(_DWORD *)(a1 + 44);
    v101 = *(_DWORD *)(a2 + 12) - 1;
    v102 = *(_QWORD *)(a2 + 24);
    HIDWORD(v108) = *(_DWORD *)(a1 + 56) - 1;
    v109 = v101;
    LODWORD(v108) = v100;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v102 + 232), &v109, &v108, (uint64_t)v107);
  }
  if (v39)
LABEL_37:
    --*v39;
  if (v15)
    --*v15;
  return v15;
}

uint64_t JSC::isNonIndexStringElement(JSC *this, JSC::ExpressionNode *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;

  result = (*(uint64_t (**)(JSC *, JSC::ExpressionNode *))(*(_QWORD *)this + 32))(this, a2);
  if ((_DWORD)result)
  {
    v4 = **((_QWORD **)this + 4);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 16);
      if ((v5 & 0x20) == 0)
      {
        v6 = *(_BYTE **)(v4 + 8);
        v7 = *(unsigned int *)(v4 + 4);
        if ((v5 & 4) != 0)
        {
          if ((_DWORD)v7)
          {
            v8 = *v6 - 48;
            if (v8 <= 9 && (v7 < 2 || *v6 != 48))
            {
              v15 = v7 - 1;
              v16 = v6 + 1;
              result = 1;
              while (v15)
              {
                if (v8 > 0x19999999)
                  return 1;
                v17 = *v16 - 48;
                if (v17 > 9)
                  return 1;
                v13 = __CFADD__(v17, 10 * v8);
                v8 = v17 + 10 * v8;
                --v15;
                ++v16;
                if (v13)
                  return result;
              }
              return v8 == -1;
            }
          }
        }
        else if ((_DWORD)v7)
        {
          v8 = *(unsigned __int16 *)v6 - 48;
          if (v8 <= 9 && (*(_WORD *)v6 != 48 || v7 <= 1))
          {
            v10 = (unsigned __int16 *)(v6 + 2);
            v11 = v7 - 1;
            result = 1;
            while (v11)
            {
              if (v8 > 0x19999999)
                return 1;
              v12 = *v10 - 48;
              if (v12 > 9)
                return 1;
              v13 = __CFADD__(v12, 10 * v8);
              v8 = v12 + 10 * v8;
              ++v10;
              --v11;
              if (v13)
                return result;
            }
            return v8 == -1;
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t JSC::DotAccessorNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::BytecodeGenerator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  _DWORD *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87[3];
  uint64_t v88;
  int v89;

  v5 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v6 = v5;
  if (v5)
    ++*v5;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 192) + 56))(*(_QWORD *)(a2 + 192))
    && (*(_BYTE *)(a2 + 711) & 2) == 0
    && (*(_WORD *)(*(_QWORD *)(a2 + 192) + 164) & 0x20) == 0
    && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 336))(a1, *(_QWORD *)(a2 + 696))
    && ((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42)) & 0x89C2) == 0)
  {
    v62 = v6[1];
    v69 = JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v62, v7, v8, v9, v10, v11, v12);
    result = (uint64_t)v6;
    if (!v69)
    {
      v76 = JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v62, v63, v64, v65, v66, v67, v68);
      result = (uint64_t)v6;
      if (!v76)
      {
        JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v62, v70, v71, v72, v73, v74, v75);
        result = (uint64_t)v6;
      }
    }
LABEL_35:
    --*v6;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32)))
  {
    v77 = (_DWORD *)JSC::emitSuperBaseForCallee((JSC *)a2, v13, v14, v15, v16, v17, v18, v19);
    v27 = v77;
    if (v77)
      ++*v77;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_BYTE *)(a2 + 709);
    v22 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v86 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v23 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(v20 + 24)
        && (*(_BYTE *)(a2 + 104) & 1) != 0
        && !*(_BYTE *)(a2 + 707)
        && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v20 + 8)
         || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v20 + 12)
         || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v20 + 16)
         || *(_DWORD *)(a2 + 748) != 5))
      {
        v54 = *(_QWORD *)(v20 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v20 + 16);
        *(_QWORD *)(a2 + 736) = v54;
        *(_DWORD *)(a2 + 748) = 5;
        v55 = *(_DWORD *)(v20 + 8);
        v56 = *(_DWORD *)(v20 + 12);
        v57 = *(_DWORD *)(v20 + 16);
        if (v55 != -1 || v56 != -1 || v57 != -1)
        {
          v58 = *(_QWORD *)(a2 + 192);
          v59 = *(_DWORD *)(v58 + 176);
          v14 = v56 - v59;
          v60 = v57 - v59;
          if (v57 < v59)
            v60 = 0;
          v36 = v14 >= v60;
          v61 = v14 - v60;
          if (v36)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v14, 0, 0, (v55 + ~*(_DWORD *)(v58 + 184)) | (unint64_t)(v61 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v14, v15, v16, v17, v18, v19);
      }
      v23 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, a2, 0);
    }
    v27 = v23;
    *(_BYTE *)(a2 + 710) = v22;
    *(_BYTE *)(a2 + 709) = v21;
    if (v23)
      ++*v23;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 26))
    {
      v40 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v41 = *(_DWORD *)(v40 + 4);
      v42 = v27[1];
      result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v41, v42, v43, v44, v45, v46, v47);
      if ((result & 1) == 0)
      {
        result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v41, v42, v48, v49, v50, v51, v52);
        if ((result & 1) == 0)
          result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v41, v42, v48, v49, v50, v51, v52);
      }
      v53 = *(unsigned int *)(a2 + 628);
      if (!(_DWORD)v53)
      {
        __break(0xC471u);
        return result;
      }
      JSC::BytecodeGenerator::emitJumpIfTrue(a2, v40, *(_QWORD *)(*(_QWORD *)(a2 + 616) + 8 * v53 - 8), v48, v49, v50, v51, v52);
    }
  }
  v29 = *(_DWORD *)(a1 + 52);
  v28 = *(_DWORD *)(a1 + 56);
  v30 = *(_DWORD *)(a1 + 60);
  if (v29 != -1 || v28 != -1 || v30 != -1)
  {
    v31 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v31 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v32 = *(_DWORD *)(a1 + 80);
      if ((*(_DWORD *)(a1 + 76) & v32 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v33 = *(_QWORD *)(a2 + 192);
        v34 = *(_DWORD *)(v33 + 176);
        v35 = v28 - v34;
        v36 = v30 >= v34;
        v37 = v30 - v34;
        if (!v36)
          v37 = 0;
        v36 = v35 >= v37;
        v38 = v35 - v37;
        if (v36)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v35, v28 - v31, v32 - v28, (v29 + ~*(_DWORD *)(v33 + 184)) | (unint64_t)(v38 << 32));
      }
    }
  }
  v87[0] = 0;
  result = (uint64_t)JSC::BaseDotNode::emitGetPropertyValue(a1, a2, v6, (uint64_t)v27, v87, v24, v25, v26);
  if (v87[0])
    --*v87[0];
  if (v6 && (*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    v78 = v6[1];
    v79 = result;
    v80 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v78, 0, 2, 0, v80, v81, v82);
    v83 = *(_DWORD *)(a1 + 68);
    v84 = *(_DWORD *)(a2 + 12) - 1;
    v85 = *(_QWORD *)(a2 + 24);
    HIDWORD(v88) = *(_DWORD *)(a1 + 80) - 1;
    v89 = v84;
    LODWORD(v88) = v83;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v85 + 232), &v89, &v88, (uint64_t)v87);
    result = v79;
  }
  if (v27)
    --*v27;
  if (v6)
    goto LABEL_35;
  return result;
}

_DWORD *JSC::BaseDotNode::emitGetPropertyValue(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  int **v176;
  unsigned __int8 v177[40];
  WTF::StringImpl *v178;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32)))
    {
      v20 = *a5;
      if (!*a5)
      {
        v20 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v13, v14, 0, v15, v16, v17, v18);
        ++*v20;
        v21 = *a5;
        *a5 = v20;
        if (v21)
          --*v21;
      }
      JSC::BytecodeGenerator::emitGetById(a2, a3, a4, (uint64_t)v20, *(WTF::AtomStringImpl **)(a1 + 40), v16, v17, v18);
    }
    else
    {
      JSC::BytecodeGenerator::emitGetById(a2, a3, a4, *(WTF::AtomStringImpl **)(a1 + 40), v15, v16, v17, v18);
    }
    return a3;
  }
  v22 = *(WTF::StringImpl ***)(a1 + 40);
  v23 = *v22;
  if (*v22)
    *(_DWORD *)v23 += 2;
  v178 = v23;
  v24 = *(unsigned int *)(a2 + 172);
  do
  {
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x1982629B8);
    }
    --v24;
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v24);
    if (v25)
    {
      v26 = *((_DWORD *)v23 + 4);
      if ((v26 & 0x20) != 0)
        v26 = *((_DWORD *)v23 + 8);
      v27 = *(_DWORD *)(v25 - 8);
      v28 = v27 & (v26 >> 8);
      v29 = *(WTF::StringImpl **)(v25 + 16 * v28);
      if (v29 != v23)
      {
        v89 = 1;
        while (v29)
        {
          v28 = ((_DWORD)v28 + v89) & v27;
          v29 = *(WTF::StringImpl **)(v25 + 16 * v28);
          ++v89;
          if (v29 == v23)
            goto LABEL_17;
        }
        v28 = *(unsigned int *)(v25 - 4);
      }
LABEL_17:
      v30 = v25 + 16 * v28;
      v25 += 16 * *(unsigned int *)(v25 - 4);
    }
    else
    {
      v30 = 0;
    }
  }
  while (v30 == v25);
  v31 = *(unsigned __int16 *)(v30 + 8);
  if ((v31 & 1) != 0)
  {
    JSC::BytecodeGenerator::variable((uint64_t)&v175, a2, (uint64_t)&v178, 0, (uint64_t)a5, a6, a7, a8);
    v61 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v175, v56, v57, v58, v59, v60);
    v38 = v61;
    if (v61)
      ++*v61;
    v43 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v43, (uint64_t)v38, (v31 >> 3) & 1, v62, v63, v64, v65);
    if (v43)
      ++*v43;
    JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a4, (uint64_t)v43, (v31 >> 3) & 1, v66, v67, v68, v69);
    a3 = JSC::BytecodeGenerator::emitGetFromScope(a2, a3, (uint64_t)v38, (unint64_t)&v175, 0, v70, v71, v72);
    if (v43)
      goto LABEL_26;
    goto LABEL_27;
  }
  if ((v31 & 2) == 0)
  {
    if ((v31 & 4) != 0)
    {
      JSC::BytecodeGenerator::variable((uint64_t)&v175, a2, (uint64_t)&v178, 0, (uint64_t)a5, a6, a7, a8);
      v144 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v175, v139, v140, v141, v142, v143);
      v38 = v144;
      if (v144)
        ++*v144;
      v43 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v43, (uint64_t)v38, (v31 >> 3) & 1, v145, v146, v147, v148);
      if (v43)
      {
        ++*v43;
        JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a4, (uint64_t)v43, (v31 >> 3) & 1, v149, v150, v151, v152);
        JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private getter", 0x2DuLL, v153, v154, v155, v156, v157);
        goto LABEL_26;
      }
      JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a4, 0, (v31 >> 3) & 1, v149, v150, v151, v152);
      JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private getter", 0x2DuLL, v170, v171, v172, v173, v174);
    }
    else
    {
      JSC::BytecodeGenerator::variable((uint64_t)&v175, a2, (uint64_t)v22, 0, (uint64_t)a5, a6, a7, a8);
      v37 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v175, v32, v33, v34, v35, v36);
      v38 = v37;
      if (v37)
        ++*v37;
      v39 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      if (v39)
      {
        v43 = v39;
        ++*v39;
        JSC::BytecodeGenerator::emitGetFromScope(a2, v39, (uint64_t)v38, (unint64_t)&v175, 1, v40, v41, v42);
        JSC::BytecodeGenerator::emitGetPrivateName(a2, (uint64_t)a3, *(unsigned int *)(a4 + 4), v43[1], v44, v45, v46, v47);
LABEL_26:
        --*v43;
        goto LABEL_27;
      }
      JSC::BytecodeGenerator::emitGetFromScope(a2, 0, (uint64_t)v38, (unint64_t)&v175, 1, v40, v41, v42);
      JSC::BytecodeGenerator::emitGetPrivateName(a2, (uint64_t)a3, *(unsigned int *)(a4 + 4), MEMORY[4], v166, v167, v168, v169);
    }
LABEL_27:
    if (v38)
      --*v38;
    v55 = v175;
    v175 = 0;
    if (!v55)
      goto LABEL_32;
    goto LABEL_30;
  }
  JSC::BytecodeGenerator::variable((uint64_t)v177, a2, (uint64_t)&v178, 0, (uint64_t)a5, a6, a7, a8);
  v95 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, v177, v90, v91, v92, v93, v94);
  v96 = v95;
  if (v95)
    ++*v95;
  v97 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v98 = (v31 >> 3) & 1;
  JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v97, (uint64_t)v96, v98, v99, v100, v101, v102);
  if (v97)
    ++*v97;
  JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a4, (uint64_t)v97, v98, v103, v104, v105, v106);
  v107 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v111 = JSC::BytecodeGenerator::emitGetFromScope(a2, v107, (uint64_t)v96, (unint64_t)v177, 0, v108, v109, v110);
  v112 = v111;
  if (v111)
    ++*v111;
  v113 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::Symbols::getPrivateName += 2;
  v175 = (WTF::StringImpl *)&JSC::Symbols::getPrivateName;
  JSC::BytecodeGenerator::emitDirectGetById(a2, v113, (uint64_t)v112, (WTF::AtomStringImpl *)&v175, v114, v115, v116, v117);
  if (v113)
    ++*v113;
  v125 = v175;
  v175 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v118, v119, v120, v121, v122, v123, v124);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  JSC::CallArguments::CallArguments((uint64_t)&v175, a2, 0, 0);
  v131 = *v176;
  if ((int *)(a2 + 208) != *v176 && v131 && v131 != (int *)a4)
    JSC::BytecodeGenerator::emitMove(a2, v131, a4, v126, v127, v128, v129, v130);
  JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)a3, (uint64_t)v113, 0, (uint64_t)&v175, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), 1u);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v175, v132, v133, v134, v135, v136, v137, v138);
  if (v113)
    --*v113;
  if (v112)
    --*v112;
  if (v97)
    --*v97;
  if (v96)
    --*v96;
  v55 = *(WTF::StringImpl **)v177;
  *(_QWORD *)v177 = 0;
  if (!v55)
    goto LABEL_32;
LABEL_30:
  if (*(_DWORD *)v55 == 2)
  {
    WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
    WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
  }
  else
  {
    *(_DWORD *)v55 -= 2;
  }
LABEL_32:
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return a3;
}

uint64_t JSC::BaseDotNode::emitPutProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  unsigned int PrivateTraits;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::AtomStringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int **v130;
  int *v131;
  int *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  int **v158;
  unsigned __int8 v159[40];
  _QWORD v160[2];

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32)))
    {
      v87 = *a5;
      if (!*a5)
      {
        v87 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v10, 0, v12, v13, v14, v15, v16);
        ++*v87;
        v88 = *a5;
        *a5 = v87;
        if (v88)
          --*v88;
      }
      JSC::BytecodeGenerator::emitPutById(a2, a3, (uint64_t)v87, *(WTF::AtomStringImpl **)(a1 + 40), a4, v14, v15, v16);
    }
    else
    {
      v17 = JSC::BytecodeGenerator::addConstant(a2, *(WTF::AtomStringImpl **)(a1 + 40), v11, v12, v13, v14, v15, v16);
      JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a2 + 688), *(_DWORD *)(a3 + 4), v17);
      JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, (void *)*(unsigned int *)(a3 + 4), v17, *(unsigned int *)(a4 + 4), (unint64_t)*(unsigned __int8 *)(a2 + 712) << 8, v18, v19, v20);
    }
    return a4;
  }
  v22 = **(WTF::StringImpl ***)(a1 + 40);
  if (v22)
    *(_DWORD *)v22 += 2;
  v160[0] = v22;
  PrivateTraits = JSC::BytecodeGenerator::getPrivateTraits(*(_QWORD *)(a2 + 160), *(_DWORD *)(a2 + 172), (uint64_t)v22);
  v28 = PrivateTraits;
  if ((PrivateTraits & 4) == 0)
  {
    if ((PrivateTraits & 3) != 0)
    {
      JSC::BytecodeGenerator::variable((uint64_t)&v157, a2, (uint64_t)v160, 0, v24, v25, v26, v27);
      v73 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v157, v68, v69, v70, v71, v72);
      v35 = v73;
      if (v73)
        ++*v73;
      v40 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v40, (uint64_t)v35, (v28 >> 3) & 1, v74, v75, v76, v77);
      if (v40)
      {
        ++*v40;
        JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a3, (uint64_t)v40, (v28 >> 3) & 1, v78, v79, v80, v81);
        JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private setter", 0x2DuLL, v82, v83, v84, v85, v86);
        goto LABEL_13;
      }
      JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a3, 0, (v28 >> 3) & 1, v78, v79, v80, v81);
      JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private setter", 0x2DuLL, v152, v153, v154, v155, v156);
    }
    else
    {
      JSC::BytecodeGenerator::variable((uint64_t)&v157, a2, *(_QWORD *)(a1 + 40), 0, v24, v25, v26, v27);
      v34 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v157, v29, v30, v31, v32, v33);
      v35 = v34;
      if (v34)
        ++*v34;
      v36 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      if (v36)
      {
        v40 = v36;
        ++*v36;
        JSC::BytecodeGenerator::emitGetFromScope(a2, v36, (uint64_t)v35, (unint64_t)&v157, 1, v37, v38, v39);
        JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(a2, *(_DWORD *)(a3 + 4), v40[1], *(unsigned int *)(a4 + 4), 1, v41, v42, v43);
LABEL_13:
        --*v40;
        goto LABEL_14;
      }
      JSC::BytecodeGenerator::emitGetFromScope(a2, 0, (uint64_t)v35, (unint64_t)&v157, 1, v37, v38, v39);
      JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(a2, *(_DWORD *)(a3 + 4), MEMORY[4], *(unsigned int *)(a4 + 4), 1, v149, v150, v151);
    }
LABEL_14:
    if (v35)
      --*v35;
    v51 = v157;
    v157 = 0;
    if (!v51)
      goto LABEL_19;
    goto LABEL_17;
  }
  JSC::BytecodeGenerator::variable((uint64_t)v159, a2, (uint64_t)v160, 0, v24, v25, v26, v27);
  v94 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, v159, v89, v90, v91, v92, v93);
  v95 = v94;
  if (v94)
    ++*v94;
  v96 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v97 = (v28 >> 3) & 1;
  JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v96, (uint64_t)v95, v97, v98, v99, v100, v101);
  if (v96)
    ++*v96;
  JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, a3, (uint64_t)v96, v97, v102, v103, v104, v105);
  v106 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v110 = JSC::BytecodeGenerator::emitGetFromScope(a2, v106, (uint64_t)v95, (unint64_t)v159, 0, v107, v108, v109);
  v111 = v110;
  if (v110)
    ++*v110;
  v112 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::Symbols::setPrivateName += 2;
  v157 = (WTF::StringImpl *)&JSC::Symbols::setPrivateName;
  JSC::BytecodeGenerator::emitDirectGetById(a2, v112, (uint64_t)v111, (WTF::AtomStringImpl *)&v157, v113, v114, v115, v116);
  if (v112)
    ++*v112;
  v124 = v157;
  v157 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v117, v118, v119, v120, v121, v122, v123);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  JSC::CallArguments::CallArguments((uint64_t)&v157, a2, 0, 1);
  v130 = v158;
  v131 = *v158;
  if ((int *)(a2 + 208) != *v158 && v131 && v131 != (int *)a3)
  {
    JSC::BytecodeGenerator::emitMove(a2, v131, a3, v125, v126, v127, v128, v129);
    v130 = v158;
  }
  v132 = v130[1];
  if ((int *)(a2 + 208) != v132 && v132 && v132 != (int *)a4)
    JSC::BytecodeGenerator::emitMove(a2, v132, a4, v125, v126, v127, v128, v129);
  v133 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v133, (uint64_t)v112, 0, (uint64_t)&v157, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), 1u);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v157, v134, v135, v136, v137, v138, v139, v140);
  if (v112)
    --*v112;
  if (v111)
    --*v111;
  if (v96)
    --*v96;
  if (v95)
    --*v95;
  v51 = *(WTF::StringImpl **)v159;
  *(_QWORD *)v159 = 0;
  if (!v51)
    goto LABEL_19;
LABEL_17:
  if (*(_DWORD *)v51 == 2)
  {
    WTF::StringImpl::~StringImpl(v51, v44, v45, v46, v47, v48, v49, v50);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v51 -= 2;
  }
LABEL_19:
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return a4;
}

uint64_t JSC::BaseDotNode::emitPutProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v6;

  v6 = 0;
  JSC::BaseDotNode::emitPutProperty(a1, a2, a3, a4, &v6);
  if (v6)
    --*v6;
  return a4;
}

uint64_t JSC::ArgumentListNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a2 + 709);
  v11 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v23 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v9 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v9 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v9 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v9 + 16) ? (v13 = *(_DWORD *)(a2 + 748) == 5) : (v13 = 0), !v13))
      {
        v23[0] = v9;
        v23[1] = a3;
        v14 = *(_QWORD *)(v9 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v9 + 16);
        *(_QWORD *)(a2 + 736) = v14;
        *(_DWORD *)(a2 + 748) = 5;
        v15 = *(_DWORD *)(v9 + 8);
        v16 = *(_DWORD *)(v9 + 12);
        v17 = *(_DWORD *)(v9 + 16);
        if (v15 != -1 || v16 != -1 || v17 != -1)
        {
          v18 = *(_QWORD *)(a2 + 192);
          v19 = *(_DWORD *)(v18 + 176);
          a3 = v16 - v19;
          v20 = v17 - v19;
          if (v17 < v19)
            v20 = 0;
          v21 = a3 >= v20;
          v22 = a3 - v20;
          if (v21)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v15 + ~*(_DWORD *)(v18 + 184)) | (unint64_t)(v22 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
        v9 = v23[0];
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2);
  }
  *(_BYTE *)(a2 + 710) = v11;
  *(_BYTE *)(a2 + 709) = v10;
  return result;
}

_DWORD *JSC::NewExprNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _BYTE *v21;
  char v22;
  char v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  _DWORD *v37;
  WTF *v38;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  _BYTE v59[8];
  WTF *v60;
  int v61;
  unsigned int v62;
  uint64_t v63;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 112))(*(_QWORD *)(a1 + 64)))
    goto LABEL_9;
  v13 = *(int ***)(*(_QWORD *)(a1 + 64) + 32);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952);
  v15 = *v13;
  if (*v13 == *(int **)(v14 + 696))
    goto LABEL_44;
  v16 = JSC::Symbols::ObjectPrivateName[0];
  JSC::Symbols::ObjectPrivateName[0] += 2;
  if (!v16)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ObjectPrivateName, v6, v7, v8, v9, v10, v11, v12);
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    if (v15 != JSC::Symbols::ObjectPrivateName)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952);
      v15 = *v13;
      goto LABEL_5;
    }
LABEL_44:
    v18 = 1;
    goto LABEL_10;
  }
  JSC::Symbols::ObjectPrivateName[0] = v16;
  if (v15 == JSC::Symbols::ObjectPrivateName)
    goto LABEL_44;
LABEL_5:
  if (v15 == *(int **)(v14 + 504))
    goto LABEL_38;
  v17 = JSC::Symbols::ArrayPrivateName[0];
  JSC::Symbols::ArrayPrivateName[0] += 2;
  if (v17)
  {
    JSC::Symbols::ArrayPrivateName[0] = v17;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ArrayPrivateName, v6, v7, v8, v9, v10, v11, v12);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
  if (v15 == JSC::Symbols::ArrayPrivateName)
  {
LABEL_38:
    v18 = 2;
    goto LABEL_10;
  }
LABEL_9:
  v18 = 0;
LABEL_10:
  v19 = *(_QWORD *)(a1 + 72);
  if (v19 && *(_BYTE *)(v19 + 8))
  {
    v57 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v20 = v57;
    if (v57)
      ++*v57;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_BYTE **)(a1 + 64);
  v22 = *(_BYTE *)(a2 + 709);
  v23 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v58 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v24 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v21[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v21 + 8), v8, v9, v10, v11, v12);
    v24 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v21 + 16))(v21, a2, v20);
  }
  v25 = v24;
  *(_BYTE *)(a2 + 710) = v23;
  *(_BYTE *)(a2 + 709) = v22;
  if (v24)
    ++*v24;
  if (v20)
    --*v20;
  v26 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v24);
  v27 = v26;
  if (v26)
    ++*v26;
  JSC::CallArguments::CallArguments((uint64_t)v59, a2, *(uint64_t **)(a1 + 72), 0);
  JSC::BytecodeGenerator::emitConstruct(a2, (uint64_t)v27, (uint64_t)v25, (uint64_t)v25, v18, (uint64_t)v59, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
  if (v62)
  {
    v35 = v60;
    v36 = 8 * v62;
    do
    {
      v37 = *(_DWORD **)v35;
      *(_QWORD *)v35 = 0;
      if (v37)
        --*v37;
      v35 = (WTF *)((char *)v35 + 8);
      v36 -= 8;
    }
    while (v36);
  }
  v38 = v60;
  if (&v63 != (uint64_t *)v60 && v60 != 0)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v38, v28, v29, v30, v31, v32, v33, v34);
  }
  if (v27)
    --*v27;
  if (v25)
    --*v25;
  return v27;
}

uint64_t JSC::CallArguments::CallArguments(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  void *v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  const void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  const void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v6 = (void *)(a1 + 24);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 88) = 0;
  v7 = (a4 + 1);
  if (a3)
  {
    for (i = *a3; i; i = *(_QWORD *)(i + 32))
      ++v7;
  }
  if (v7 >= 9)
  {
    if (v7 <= 0x10)
      v65 = 16;
    else
      v65 = v7;
    if (v65 >> 29)
    {
      __break(0xC471u);
LABEL_84:
      JUMPOUT(0x19826388CLL);
    }
    v10 = WTF::fastMalloc((WTF *)(8 * v65));
    *(_DWORD *)(a1 + 16) = v65;
    *(_QWORD *)(a1 + 8) = v10;
    v9 = *(unsigned int *)(a1 + 20);
  }
  else
  {
    v9 = 0;
    v10 = a1 + 24;
  }
  bzero((void *)(v10 + 8 * v9), 8 * v7 - 8 * v9);
  *(_DWORD *)(a1 + 20) = v7;
  v11 = (v7 - 1);
  if ((int)v7 - 1 < 0)
    goto LABEL_25;
  v12 = (uint64_t *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(unsigned int *)(a2 + 100);
  do
  {
    if (v13)
    {
      v15 = *v12;
      do
      {
        v16 = v13 - 1;
        v17 = (v13 - 1) >> 5;
        if (v17 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1982638B4);
        }
        if (*(_DWORD *)(*(_QWORD *)(v15 + 8 * v17) + 12 * (v16 & 0x1F)))
          break;
        *(_QWORD *)(a2 + 80) = v16;
        --v13;
      }
      while (v16);
    }
    v18 = v13 + 1;
    *(_QWORD *)(a2 + 80) = v13 + 1;
    v19 = v13 >> 5;
    if (v13 >> 5 >= v14)
    {
      v38 = WTF::fastMalloc((WTF *)0x180);
      v66 = v38;
      v39 = *(unsigned int *)(a2 + 100);
      if ((_DWORD)v39 == *(_DWORD *)(a2 + 96))
      {
        v40 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 88, v39 + 1, (unint64_t)&v66);
        v39 = *(unsigned int *)(a2 + 100);
        *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v39) = *v40;
      }
      else
      {
        *(_QWORD *)(*v12 + 8 * v39) = v38;
      }
      v14 = (v39 + 1);
      *(_DWORD *)(a2 + 100) = v14;
      v18 = *(_QWORD *)(a2 + 80);
      v20 = v18 - 1;
      v19 = (v18 - 1) >> 5;
    }
    else
    {
      v20 = v13;
    }
    if (v19 >= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1982638BCLL);
    }
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v19) + 12 * (v20 & 0x1F);
    *(_DWORD *)v21 = 0;
    *(_DWORD *)(v21 + 4) = ~(_DWORD)v13;
    *(_BYTE *)(v21 + 8) = 0;
    v22 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v23 = *(_QWORD *)(v22 + 20);
    if ((v23 & 0x7FFFFFFF) > v18)
      v18 = v23 & 0x7FFFFFFF;
    v24 = v18 + 1;
    *(_QWORD *)(v22 + 20) = v23 & 0xFFFFFFFF80000000 | v24 & 0x7FFFFFFE;
    if ((v24 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 20) & 0x7FFFFFFFLL))
    {
      __break(0xC471u);
      goto LABEL_84;
    }
    v13 = *(_QWORD *)(a2 + 80);
    v25 = (v13 - 1) >> 5;
    v14 = *(unsigned int *)(a2 + 100);
    if (v25 >= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1982638C4);
    }
    v26 = *(_QWORD *)(*v12 + 8 * v25) + 12 * (((_BYTE)v13 - 1) & 0x1F);
    *(_BYTE *)(v26 + 8) = 1;
    v27 = *(_QWORD *)(a1 + 8);
    ++*(_DWORD *)v26;
    v28 = *(_DWORD **)(v27 + 8 * v11);
    *(_QWORD *)(v27 + 8 * v11) = v26;
    if (v28)
      --*v28;
  }
  while (v11-- > 0);
  LODWORD(v7) = *(_DWORD *)(a1 + 20);
LABEL_25:
  if ((v7 & 1) == 0)
  {
    do
    {
      v31 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v32 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v32 == *(_DWORD *)(a1 + 16))
      {
        v41 = v32 + (v32 >> 2);
        if (v41 >= 0x10)
          v42 = v41 + 1;
        else
          v42 = 16;
        if (v42 <= v32 + 1)
          v43 = v32 + 1;
        else
          v43 = v42;
        v44 = *(const void **)(a1 + 8);
        if (v43 < 9)
        {
          *(_QWORD *)(a1 + 8) = v6;
          *(_DWORD *)(a1 + 16) = 8;
          v45 = v6;
        }
        else
        {
          if (v43 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1982638CCLL);
          }
          v45 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
          *(_DWORD *)(a1 + 16) = v43;
          *(_QWORD *)(a1 + 8) = v45;
        }
        memcpy(v45, v44, 8 * v32);
        if (v6 != v44 && v44)
        {
          if (*(const void **)(a1 + 8) == v44)
          {
            *(_QWORD *)(a1 + 8) = 0;
            *(_DWORD *)(a1 + 16) = 0;
          }
          WTF::fastFree((unint64_t)v44, v46, v47, v48, v49, v50, v51, v52);
        }
      }
      v33 = *(_QWORD **)(a1 + 8);
      memmove(v33 + 1, v33, 8 * *(unsigned int *)(a1 + 20));
      if (v31)
        ++*v31;
      *v33 = v31;
      v34 = *(_DWORD *)(a1 + 20) + 1;
      *(_DWORD *)(a1 + 20) = v34;
      ++*(_DWORD *)(a1 + 88);
    }
    while ((v34 & 1) == 0);
  }
  for (; ((1 - *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4)) & 1) != 0; ++*(_DWORD *)(a1 + 88))
  {
    v35 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v36 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v36 == *(_DWORD *)(a1 + 16))
    {
      v53 = v36 + (v36 >> 2);
      if (v53 >= 0x10)
        v54 = v53 + 1;
      else
        v54 = 16;
      if (v54 <= v36 + 1)
        v55 = v36 + 1;
      else
        v55 = v54;
      v56 = *(const void **)(a1 + 8);
      if (v55 < 9)
      {
        *(_QWORD *)(a1 + 8) = v6;
        *(_DWORD *)(a1 + 16) = 8;
        v57 = v6;
      }
      else
      {
        if (v55 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1982638D4);
        }
        v57 = (void *)WTF::fastMalloc((WTF *)(8 * v55));
        *(_DWORD *)(a1 + 16) = v55;
        *(_QWORD *)(a1 + 8) = v57;
      }
      memcpy(v57, v56, 8 * v36);
      if (v6 != v56 && v56)
      {
        if (*(const void **)(a1 + 8) == v56)
        {
          *(_QWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 16) = 0;
        }
        WTF::fastFree((unint64_t)v56, v58, v59, v60, v61, v62, v63, v64);
      }
    }
    v37 = *(_QWORD **)(a1 + 8);
    memmove(v37 + 1, v37, 8 * *(unsigned int *)(a1 + 20));
    if (v35)
      ++*v35;
    *v37 = v35;
    ++*(_DWORD *)(a1 + 20);
  }
  return a1;
}

_DWORD *JSC::EvalFunctionCallNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  WTF::StringImpl *v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int **v89;
  int *v90;
  int *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int **v157;
  _DWORD *v158;
  _DWORD *v159;
  char v160[8];
  WTF *v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned __int8 v165[16];
  int *v166;

  if ((*(_WORD *)(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 28) & 0xC0) == 0x80
    && (*((_BYTE *)this + 711) & 1) != 0)
  {
    v62 = *((_QWORD *)this + 24);
    if ((*(_BYTE *)(v62 + 167) & 0x1D) != 0 || (*(_WORD *)(v62 + 164) & 1) != 0)
      JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  }
  JSC::BytecodeGenerator::variable((uint64_t)v165, (uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 1248, 0, a5, a6, a7, a8);
  v15 = v166;
  if (v166)
  {
    ++*v166;
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary((uint64_t)this, v165, (uint64_t)v15, 0, v11, v12, v13, v14);
    v16 = (int *)JSC::BytecodeGenerator::tempDestination((uint64_t)this, a3);
    if ((int *)((char *)this + 208) == v16)
    {
      v23 = 0;
    }
    else
    {
      v22 = v16;
      v23 = v15;
      if (v16)
      {
        v23 = v15;
        if (v16 != v15)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, v16, (uint64_t)v15, v17, v18, v19, v20, v21);
          v23 = v22;
        }
      }
      ++*v23;
    }
    v24 = (uint64_t **)(a1 + 64);
    JSC::CallArguments::CallArguments((uint64_t)v160, (uint64_t)this, *(uint64_t **)(a1 + 64), 0);
    JSC::BytecodeGenerator::emitLoad((uint64_t)this, *(int **)v161, 10, v25, v26, v27, v28, v29);
  }
  else
  {
    v126 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
    v23 = v126;
    if (v126)
      ++*v126;
    v24 = (uint64_t **)(a1 + 64);
    JSC::CallArguments::CallArguments((uint64_t)v160, (uint64_t)this, *(uint64_t **)(a1 + 64), 0);
    v132 = *(_DWORD *)(a1 + 40);
    v133 = *(_DWORD *)(a1 + 44);
    v134 = v133 + 4;
    v135 = *(_DWORD *)(a1 + 48);
    if ((v132 != -1 || v133 != -5 || v135 != -1) && (v132 & v133 & v135) != 0xFFFFFFFF && *((_BYTE *)this + 707) == 0)
    {
      v137 = *((_QWORD *)this + 24);
      v138 = *(_DWORD *)(v137 + 176);
      v139 = v134 - v138;
      v140 = v135 - v138;
      if (v135 < v138)
        v140 = 0;
      v141 = v139 >= v140;
      v142 = v139 - v140;
      if (v141)
        JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*((_QWORD *)this + 3), *((unsigned int *)this + 3), v139, 4u, 0, (v132 + ~*(_DWORD *)(v137 + 184)) | (unint64_t)(v142 << 32));
    }
    v143 = *(int **)v161;
    v144 = JSC::BytecodeGenerator::emitResolveScope((uint64_t)this, *(_BYTE **)v161, v165, v127, v128, v129, v130, v131);
    if ((int *)((char *)this + 208) != v143 && v143 != 0 && v143 != (int *)v144)
      JSC::BytecodeGenerator::emitMove((uint64_t)this, v143, v144, v145, v146, v147, v148, v149);
    JSC::BytecodeGenerator::emitGetFromScope((uint64_t)this, v23, *(_QWORD *)v161, (unint64_t)v165, 0, v147, v148, v149);
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary((uint64_t)this, v165, (uint64_t)v23, 0, v152, v153, v154, v155);
  }
  v30 = (_DWORD *)JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, (uint64_t)v23);
  v31 = v30;
  if (v30)
    ++*v30;
  v32 = **v24;
  if (v32
    && (v33 = *(_QWORD *)(v32 + 40)) != 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 232))(v33))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v159, (uint64_t)this, v34, v35, v36, v37, v38, v39);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v158, (uint64_t)this, v63, v64, v65, v66, v67, v68);
    v69 = v159;
    JSC::BytecodeGenerator::emitJumpIfNotEvalFunction((uint64_t)this, v23[1], (uint64_t)v159, v70, v71, v72, v73, v74);
    v75 = *(_QWORD *)(**v24 + 40);
    v82 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v75 + 64), v76, v77, v78, v79, v80, v81);
    v83 = v82;
    if (v82)
      ++*v82;
    JSC::BytecodeGenerator::emitExpressionInfo(this, (_DWORD *)(v75 + 28), (_DWORD *)(v75 + 40), (_DWORD *)(v75 + 52));
    JSC::CallArguments::CallArguments((uint64_t)&v156, (uint64_t)this, 0, 1);
    v89 = v157;
    v90 = *v157;
    if ((int *)((char *)this + 208) != *v157 && v90 && v90 != *(int **)v161)
    {
      JSC::BytecodeGenerator::emitMove((uint64_t)this, v90, *(_QWORD *)v161, v84, v85, v86, v87, v88);
      v89 = v157;
    }
    v91 = v89[1];
    v92 = JSC::BytecodeGenerator::emitLoad((uint64_t)this, 0, 0xFFFE000000000000, v84, v85, v86, v87, v88);
    JSC::BytecodeGenerator::emitGetByVal((uint64_t)this, v91, (uint64_t)v83, (uint64_t)v92, v93, v94, v95, v96);
    v97 = (_DWORD *)(a1 + 28);
    v98 = (_DWORD *)(a1 + 40);
    v99 = (_DWORD *)(a1 + 52);
    JSC::BytecodeGenerator::emitCall<JSC::OpCallDirectEval>((uint64_t)this, (uint64_t)v31, (uint64_t)v23, (uint64_t)&v156, v97, v98, (uint64_t)v99);
    v100 = v158;
    JSC::BytecodeGenerator::emitJump((uint64_t)this, (uint64_t)v158, v101, v102, v103, v104, v105, v106);
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v156, v107, v108, v109, v110, v111, v112, v113);
    if (v83)
      --*v83;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel((uint64_t)this, (uint64_t)v69, v114, v115, v116, v117, v118, v119);
    JSC::BytecodeGenerator::emitCallInTailPosition((uint64_t)this, (uint64_t)v31, (uint64_t)v23, 0, (uint64_t)v160, v97, v98, v99);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel((uint64_t)this, (uint64_t)v100, v120, v121, v122, v123, v124, v125);
    --*v100;
    --*v69;
  }
  else
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCallDirectEval>((uint64_t)this, (uint64_t)v31, (uint64_t)v23, (uint64_t)v160, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), a1 + 52);
  }
  if (v31)
    --*v31;
  if (v163)
  {
    v47 = v161;
    v48 = 8 * v163;
    do
    {
      v49 = *(_DWORD **)v47;
      *(_QWORD *)v47 = 0;
      if (v49)
        --*v49;
      v47 = (WTF *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
  }
  v50 = v161;
  if (&v164 != (uint64_t *)v161 && v161 != 0)
  {
    v161 = 0;
    v162 = 0;
    WTF::fastFree((unint64_t)v50, v40, v41, v42, v43, v44, v45, v46);
  }
  if (v23)
    --*v23;
  if (v15)
    --*v15;
  v52 = *(WTF::StringImpl **)v165;
  *(_QWORD *)v165 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v31;
}

_DWORD *JSC::FunctionCallValueNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  char v14;
  char v15;
  _DWORD *v16;
  _DWORD *DerivedConstructorFromArrowFunctionLexicalEnvironment;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  _DWORD *v37;
  WTF *v38;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  __int16 v98;
  char v99;
  _DWORD *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  _BYTE v113[8];
  WTF *v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118[3];
  uint64_t v119;
  int v120[3];

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64)))
  {
    v11 = *(_QWORD *)(a1 + 72);
    if (v11 && *(_BYTE *)(v11 + 8))
    {
      v100 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v12 = v100;
      if (v100)
        ++*v100;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_BYTE **)(a1 + 64);
    v14 = *(_BYTE *)(a2 + 709);
    v15 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v111 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v16 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v13[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), v6, v7, v8, v9, v10);
      v16 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v13 + 16))(v13, a2, v12);
    }
    DerivedConstructorFromArrowFunctionLexicalEnvironment = v16;
    *(_BYTE *)(a2 + 710) = v15;
    *(_BYTE *)(a2 + 709) = v14;
    if (v16)
      ++*v16;
    if (v12)
      --*v12;
    v18 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v16);
    v19 = v18;
    if (v18)
      ++*v18;
    if (*(_BYTE *)(a1 + 80))
      JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)DerivedConstructorFromArrowFunctionLexicalEnvironment);
    JSC::CallArguments::CallArguments((uint64_t)v113, a2, *(uint64_t **)(a1 + 72), 0);
    JSC::BytecodeGenerator::emitLoad(a2, *(int **)v114, 10, v20, v21, v22, v23, v24);
    v25 = (_DWORD *)(a1 + 28);
    v26 = (_DWORD *)(a1 + 40);
    v27 = (_DWORD *)(a1 + 52);
    if (*(_BYTE *)(a2 + 709))
    {
      v97 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
      v98 = *(_WORD *)(v97 + 28);
      v97 += 28;
      v99 = *(_BYTE *)(v97 + 2);
      *(_WORD *)v97 = v98 | 0x20;
      *(_BYTE *)(v97 + 2) = v99;
      JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v19, (uint64_t)DerivedConstructorFromArrowFunctionLexicalEnvironment, 0, (uint64_t)v113, v25, v26, v27);
    }
    else if (*(_BYTE *)(a2 + 710))
    {
      JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v19, (uint64_t)DerivedConstructorFromArrowFunctionLexicalEnvironment, 0, (uint64_t)v113, v25, v26, v27, 1u);
    }
    else
    {
      JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v19, (uint64_t)DerivedConstructorFromArrowFunctionLexicalEnvironment, 0, (uint64_t)v113, v25, v26, v27, 1u);
    }
    if (v19 && (*(_BYTE *)(a2 + 104) & 2) != 0)
    {
      v104 = v19[1];
      v105 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
      JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v104, 0, 2, 0, v105, v106, v107);
      v108 = *(_DWORD *)(a1 + 44);
      v109 = *(_DWORD *)(a2 + 12) - 1;
      v110 = *(_QWORD *)(a2 + 24);
      HIDWORD(v119) = *(_DWORD *)(a1 + 56) - 1;
      v120[0] = v109;
      LODWORD(v119) = v108;
      WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v110 + 232), v120, &v119, (uint64_t)v118);
    }
    if (v116)
    {
      v35 = v114;
      v36 = 8 * v116;
      do
      {
        v37 = *(_DWORD **)v35;
        *(_QWORD *)v35 = 0;
        if (v37)
          --*v37;
        v35 = (WTF *)((char *)v35 + 8);
        v36 -= 8;
      }
      while (v36);
    }
    goto LABEL_28;
  }
  v41 = *(unsigned __int8 *)(a2 + 713);
  v49 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  if (v41 == 1)
    v50 = JSC::BytecodeGenerator::emitLoadDerivedConstructorFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a2, v42, v43, v44, v45, v46, v47, v48)[1];
  else
    v50 = 3;
  JSC::BytecodeGenerator::emitGetPrototypeOf(a2, (uint64_t)v49, v50, v44, v45, v46, v47, v48);
  if (v49)
    ++*v49;
  v51 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v49);
  v19 = v51;
  if (v51)
    ++*v51;
  JSC::CallArguments::CallArguments((uint64_t)v113, a2, *(uint64_t **)(a1 + 72), 0);
  v52 = (_DWORD *)(a1 + 28);
  v53 = (_DWORD *)(a1 + 40);
  JSC::BytecodeGenerator::emitConstruct(a2, (uint64_t)v19, (uint64_t)v49, *(_QWORD *)(a2 + 288), 0, (uint64_t)v113, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
  v61 = *(_WORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 28) & 0xC0;
  v112 = (_DWORD *)(a1 + 52);
  if (v61 != 128)
  {
    v62 = 0;
    if (*(_BYTE *)(a2 + 713) != 1)
      goto LABEL_49;
    goto LABEL_94;
  }
  if (*(_BYTE *)(a2 + 713) == 1)
  {
    v62 = *(_BYTE *)(a2 + 711) & 1;
    goto LABEL_94;
  }
  if ((*(_BYTE *)(a2 + 711) & 1) != 0)
  {
    v103 = *(_QWORD *)(a2 + 192);
    if ((*(_BYTE *)(v103 + 167) & 9) != 0)
    {
      v62 = 1;
    }
    else
    {
      v62 = 1;
      if ((*(_WORD *)(v103 + 164) & 1) == 0)
        goto LABEL_49;
    }
LABEL_94:
    JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a2, v54, v55, v56, v57, v58, v59, v60);
    goto LABEL_49;
  }
  v62 = 0;
LABEL_49:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v118, a2, v55, v56, v57, v58, v59, v60);
  v63 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v64 = *(_DWORD *)(v63 + 4);
  v65 = *(unsigned int *)(a2 + 224);
  if ((JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v64, v65, v66, v67, v68, v69, v70) & 1) == 0
    && (JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v64, v65, v71, v72, v73, v74, v75) & 1) == 0)
  {
    JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v64, v65, v71, v72, v73, v74, v75);
  }
  v76 = (_DWORD *)v118[0];
  JSC::BytecodeGenerator::emitJumpIfTrue(a2, v63, v118[0], v71, v72, v73, v74, v75);
  JSC::BytecodeGenerator::emitThrowReferenceError(a2, "'super()' can't be called more than once in a constructor.", 0x3BuLL, v77, v78, v79, v80, v81);
  v82 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v76, a2, v82, v83, v84, v85, v86, v87);
  v88 = *(_QWORD *)(a2 + 24);
  v89 = *(unsigned int *)(v88 + 28);
  if (!(_DWORD)v89 || v82 != *(_DWORD *)(*(_QWORD *)(v88 + 16) + 4 * v89 - 4))
  {
    LODWORD(v119) = v82;
    v90 = (_QWORD *)(v88 + 16);
    if ((_DWORD)v89 == *(_DWORD *)(v88 + 24))
      *(_DWORD *)(*(_QWORD *)(v88 + 16) + 4 * *(unsigned int *)(v88 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v89 + 1, (unint64_t)&v119);
    else
      *(_DWORD *)(*v90 + 4 * v89) = v82;
    ++*(_DWORD *)(v88 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((_DWORD *)(a2 + 220) != v19)
    JSC::BytecodeGenerator::emitMove(a2, (int *)(a2 + 220), (uint64_t)v19, v30, v31, v32, v33, v34);
  if (*(_BYTE *)(a2 + 713) == 1)
    v91 = 1;
  else
    v91 = v62;
  if (v91 == 1)
    JSC::BytecodeGenerator::emitPutThisToArrowFunctionContextScope((JSC::BytecodeGenerator *)a2, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
  v92 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
  v93 = *(_QWORD *)(v92 + 152);
  if (!v93)
    goto LABEL_63;
  v101 = *(_BYTE *)(v93 + 56);
  if ((v101 & 2) != 0)
  {
    JSC::BytecodeGenerator::emitInstallPrivateBrand(a2, a2 + 220, v29, v30, v31, v32, v33, v34);
    v92 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v102 = *(_QWORD *)(v92 + 152);
    if (!v102)
      goto LABEL_63;
    v101 = *(_BYTE *)(v102 + 56);
  }
  if ((v101 & 1) != 0)
  {
    if ((*(_WORD *)(v92 + 28) & 0xC0) == 0x80)
    {
      DerivedConstructorFromArrowFunctionLexicalEnvironment = (_DWORD *)(a2 + 232);
    }
    else
    {
      DerivedConstructorFromArrowFunctionLexicalEnvironment = JSC::BytecodeGenerator::emitLoadDerivedConstructorFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a2, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      if (!DerivedConstructorFromArrowFunctionLexicalEnvironment)
        goto LABEL_81;
    }
    ++*DerivedConstructorFromArrowFunctionLexicalEnvironment;
LABEL_81:
    if (v49)
      --*v49;
    JSC::BytecodeGenerator::emitInstanceFieldInitializationIfNeeded(a2, a2 + 220, (uint64_t)DerivedConstructorFromArrowFunctionLexicalEnvironment, v52, v53, v112);
    goto LABEL_64;
  }
LABEL_63:
  DerivedConstructorFromArrowFunctionLexicalEnvironment = v49;
LABEL_64:
  --*v76;
  if (v116)
  {
    v94 = v114;
    v95 = 8 * v116;
    do
    {
      v96 = *(_DWORD **)v94;
      *(_QWORD *)v94 = 0;
      if (v96)
        --*v96;
      v94 = (WTF *)((char *)v94 + 8);
      v95 -= 8;
    }
    while (v95);
  }
LABEL_28:
  v38 = v114;
  if (&v117 != (uint64_t *)v114 && v114 != 0)
  {
    v114 = 0;
    v115 = 0;
    WTF::fastFree((unint64_t)v38, v28, v29, v30, v31, v32, v33, v34);
  }
  if (v19)
    --*v19;
  if (DerivedConstructorFromArrowFunctionLexicalEnvironment)
    --*DerivedConstructorFromArrowFunctionLexicalEnvironment;
  return v19;
}

uint64_t JSC::FunctionCallValueNode::isOptionalCall(JSC::FunctionCallValueNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

_DWORD *JSC::StaticBlockFunctionCallNode::emitBytecode(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int **v56;

  v11 = JSC::emitHomeObjectForCallee(a2, a2, a3, a4, a5, a6, a7, a8);
  v18 = v11;
  if (v11)
    ++*v11;
  v19 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, *(JSC::ExpressionNode **)(a1 + 64), v12, v13, v14, v15, v16, v17);
  v25 = v19;
  if (v19)
    ++*v19;
  JSC::emitPutHomeObject((uint64_t)a2, (uint64_t)v19, (uint64_t)v18, v20, v21, v22, v23, v24);
  v26 = (_DWORD *)JSC::BytecodeGenerator::finalDestination((uint64_t)a2, a3, (uint64_t)v25);
  v27 = v26;
  if (v26)
    ++*v26;
  JSC::CallArguments::CallArguments((uint64_t)&v55, (uint64_t)a2, 0, 0);
  v33 = *v56;
  v34 = (uint64_t)a2 + 220;
  if ((int *)((char *)a2 + 208) != *v56 && v33 != 0 && v33 != (int *)v34)
    JSC::BytecodeGenerator::emitMove((uint64_t)a2, v33, v34, v28, v29, v30, v31, v32);
  v37 = (_DWORD *)(a1 + 28);
  v38 = (_DWORD *)(a1 + 40);
  v39 = (_DWORD *)(a1 + 52);
  JSC::BytecodeGenerator::emitCallInTailPosition((uint64_t)a2, (uint64_t)v27, (uint64_t)v25, 0, (uint64_t)&v55, v37, v38, v39);
  if (v27)
  {
    ++*v27;
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v27, (uint64_t)v38, (uint64_t)v39);
    --*v27;
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v55, v40, v41, v42, v43, v44, v45, v46);
    --*v27;
  }
  else
  {
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, 0, (uint64_t)v38, (uint64_t)v39);
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v55, v48, v49, v50, v51, v52, v53, v54);
  }
  if (v25)
    --*v25;
  if (v18)
    --*v18;
  return v27;
}

_DWORD *JSC::emitHomeObjectForCallee(JSC *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *DerivedConstructorFromArrowFunctionLexicalEnvironment;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  char v38;

  if (*((unsigned __int8 *)this + 713) - 1 > 1
    || *(_BYTE *)(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 42) == 19)
  {
    v38 = 0;
    v37 = 0x300000000;
    v9 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
    JSC::Symbols::homeObjectPrivateName += 2;
    v36 = (WTF::StringImpl *)&JSC::Symbols::homeObjectPrivateName;
    JSC::BytecodeGenerator::emitGetById((uint64_t)this, v9, (uint64_t)&v37, (WTF::AtomStringImpl *)&v36, v10, v11, v12, v13);
    v21 = v36;
    v36 = 0;
    if (!v21)
      return v9;
  }
  else
  {
    DerivedConstructorFromArrowFunctionLexicalEnvironment = JSC::BytecodeGenerator::emitLoadDerivedConstructorFromArrowFunctionLexicalEnvironment(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v9 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
    JSC::Symbols::homeObjectPrivateName += 2;
    v37 = (uint64_t)&JSC::Symbols::homeObjectPrivateName;
    JSC::BytecodeGenerator::emitGetById((uint64_t)this, v9, (uint64_t)DerivedConstructorFromArrowFunctionLexicalEnvironment, (WTF::AtomStringImpl *)&v37, v32, v33, v34, v35);
    v21 = (WTF::StringImpl *)v37;
    v37 = 0;
    if (!v21)
      return v9;
  }
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  return v9;
}

int *JSC::FunctionCallResolveNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  int **v11;
  int v12;
  int *v13;
  int **v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  WTF::StringImpl *v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  char v133[8];
  WTF *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  WTF::StringImpl *v138[2];
  int *v139;
  char v140[28];
  uint64_t v141;
  int v142;

  v8 = (int *)a3;
  v11 = *(int ***)(a1 + 64);
  v12 = JSC::Symbols::assertPrivateName[0];
  JSC::Symbols::assertPrivateName[0] += 2;
  v13 = *v11;
  if (v12)
  {
    JSC::Symbols::assertPrivateName[0] = v12;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::assertPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  if (v13 == JSC::Symbols::assertPrivateName)
  {
    v92 = JSC::BytecodeGenerator::emitLoad(a2, 0, 10, a4, a5, a6, a7, a8);
    if ((int *)(a2 + 208) == v8)
      return 0;
    if (!v8 || v92 == v8)
      return v92;
    JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v92, v93, v94, v95, v96, v97);
    return v8;
  }
  v14 = *(int ***)(a1 + 64);
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952);
  v16 = *v14;
  if (*v14 == *(int **)(v15 + 696))
    goto LABEL_57;
  v17 = JSC::Symbols::ObjectPrivateName[0];
  JSC::Symbols::ObjectPrivateName[0] += 2;
  if (!v17)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ObjectPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    if (v16 != JSC::Symbols::ObjectPrivateName)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952);
      v16 = *v14;
      goto LABEL_7;
    }
LABEL_57:
    v19 = 1;
    goto LABEL_12;
  }
  JSC::Symbols::ObjectPrivateName[0] = v17;
  if (v16 == JSC::Symbols::ObjectPrivateName)
    goto LABEL_57;
LABEL_7:
  if (v16 == *(int **)(v15 + 504))
    goto LABEL_45;
  v18 = JSC::Symbols::ArrayPrivateName[0];
  JSC::Symbols::ArrayPrivateName[0] += 2;
  if (v18)
  {
    JSC::Symbols::ArrayPrivateName[0] = v18;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::ArrayPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
  }
  if (v16 == JSC::Symbols::ArrayPrivateName)
LABEL_45:
    v19 = 2;
  else
    v19 = 0;
LABEL_12:
  JSC::BytecodeGenerator::variable((uint64_t)v138, a2, *(_QWORD *)(a1 + 64), 0, a5, a6, a7, a8);
  v24 = v139;
  if (v139)
  {
    ++*v139;
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v138, (uint64_t)v24, 0, v20, v21, v22, v23);
    v25 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v25 + 8))
    {
      v85 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
      if ((int *)(a2 + 208) == v85)
      {
        JSC::CallArguments::CallArguments((uint64_t)v133, a2, *(uint64_t **)(a1 + 72), 0);
        v31 = 0;
      }
      else
      {
        v91 = v85;
        v31 = v24;
        if (v85)
        {
          v31 = v24;
          if (v85 != v24)
          {
            JSC::BytecodeGenerator::emitMove(a2, v85, (uint64_t)v24, v86, v87, v88, v89, v90);
            v31 = v91;
          }
        }
        ++*v31;
        JSC::CallArguments::CallArguments((uint64_t)v133, a2, *(uint64_t **)(a1 + 72), 0);
      }
    }
    else
    {
      ++*v24;
      JSC::CallArguments::CallArguments((uint64_t)v133, a2, (uint64_t *)v25, 0);
      v31 = v24;
    }
    JSC::BytecodeGenerator::emitLoad(a2, *(int **)v134, 10, v26, v27, v28, v29, v30);
    v19 = 0;
  }
  else
  {
    v98 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
    v31 = v98;
    if (v98)
      ++*v98;
    JSC::CallArguments::CallArguments((uint64_t)v133, a2, *(uint64_t **)(a1 + 72), 0);
    v103 = **(_QWORD **)(a1 + 64);
    if (v103)
      v104 = *(unsigned int *)(v103 + 4);
    else
      v104 = 0;
    v105 = *(_DWORD *)(a1 + 40);
    v106 = *(_DWORD *)(a1 + 44);
    v107 = v106 + v104;
    v108 = *(_DWORD *)(a1 + 48);
    if ((v105 != -1 || v107 != -1 || v108 != -1) && (v105 & v106 & v108) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
    {
      v109 = *(_QWORD *)(a2 + 192);
      v110 = *(_DWORD *)(v109 + 176);
      v111 = v107 - v110;
      v112 = v108 - v110;
      if (v108 < v110)
        v112 = 0;
      v113 = v111 >= v112;
      v114 = v111 - v112;
      if (v113)
        JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v111, v104, 0, (v105 + ~*(_DWORD *)(v109 + 184)) | (unint64_t)(v114 << 32));
    }
    v115 = *(int **)v134;
    v116 = JSC::BytecodeGenerator::emitResolveScope(a2, *(_BYTE **)v134, (unsigned __int8 *)v138, v104, v99, v100, v101, v102);
    if ((int *)(a2 + 208) != v115 && v115 && v115 != (int *)v116)
      JSC::BytecodeGenerator::emitMove(a2, v115, v116, v117, v118, v119, v120, v121);
    JSC::BytecodeGenerator::emitGetFromScope(a2, v31, *(_QWORD *)v134, (unint64_t)v138, 0, v119, v120, v121);
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v138, (uint64_t)v31, 0, v122, v123, v124, v125);
  }
  v32 = (int *)JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)v8, (uint64_t)v31);
  v8 = v32;
  if (v32)
    ++*v32;
  if (*(_BYTE *)(a1 + 80))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v31);
  v33 = (_DWORD *)(a1 + 28);
  v34 = (_DWORD *)(a1 + 40);
  v35 = (_DWORD *)(a1 + 52);
  if (*(_BYTE *)(a2 + 709))
  {
    v82 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v83 = *(_WORD *)(v82 + 28);
    v82 += 28;
    v84 = *(_BYTE *)(v82 + 2);
    *(_WORD *)v82 = v83 | 0x20;
    *(_BYTE *)(v82 + 2) = v84;
    JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v8, (uint64_t)v31, v19, (uint64_t)v133, v33, v34, v35);
  }
  else if (*(_BYTE *)(a2 + 710))
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v8, (uint64_t)v31, v19, (uint64_t)v133, v33, v34, v35, 1u);
  }
  else
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v8, (uint64_t)v31, v19, (uint64_t)v133, v33, v34, v35, 1u);
  }
  if ((*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    if (!v8)
      goto LABEL_27;
    v126 = v8[1];
    v127 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v126, 0, 2, 0, v127, v128, v129);
    v130 = *(_DWORD *)(a1 + 44);
    v131 = *(_DWORD *)(a2 + 12) - 1;
    v132 = *(_QWORD *)(a2 + 24);
    HIDWORD(v141) = *(_DWORD *)(a1 + 56) - 1;
    v142 = v131;
    LODWORD(v141) = v130;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v132 + 232), &v142, &v141, (uint64_t)v140);
    goto LABEL_26;
  }
  if (v8)
LABEL_26:
    --*v8;
LABEL_27:
  if (v136)
  {
    v43 = v134;
    v44 = 8 * v136;
    do
    {
      v45 = *(_DWORD **)v43;
      *(_QWORD *)v43 = 0;
      if (v45)
        --*v45;
      v43 = (WTF *)((char *)v43 + 8);
      v44 -= 8;
    }
    while (v44);
  }
  v46 = v134;
  if (&v137 != (uint64_t *)v134 && v134 != 0)
  {
    v134 = 0;
    v135 = 0;
    WTF::fastFree((unint64_t)v46, v36, v37, v38, v39, v40, v41, v42);
  }
  if (v31)
    --*v31;
  if (v24)
    --*v24;
  v48 = v138[0];
  v138[0] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  return v8;
}

uint64_t JSC::FunctionCallResolveNode::isOptionalCall(JSC::FunctionCallResolveNode *this)
{
  return *((unsigned __int8 *)this + 80);
}

int *JSC::BytecodeIntrinsicNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;

  if (*(_BYTE *)(a1 + 80))
  {
    if ((int *)(a2 + 208) == a3)
      return 0;
    else
      return JSC::BytecodeGenerator::moveLinkTimeConstant(a2, a3, *(_DWORD *)(a1 + 64), a4, a5, a6, a7, a8);
  }
  else
  {
    v8 = *(uint64_t (**)(_QWORD *))(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
    v10 = (_QWORD *)(a1 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(uint64_t (**)(_QWORD *))(*v10 + v8);
    return (int *)v8(v10);
  }
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_getByIdDirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::AtomStringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v8 = a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v34 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v22 = *(_DWORD *)(a2 + 748) == 5) : (v22 = 0), !v22))
      {
        v23 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v23;
        *(_DWORD *)(a2 + 748) = 5;
        v24 = *(_DWORD *)(v10 + 8);
        v25 = *(_DWORD *)(v10 + 12);
        v26 = *(_DWORD *)(v10 + 16);
        if (v24 != -1 || v25 != -1 || v26 != -1)
        {
          v29 = *(_QWORD *)(a2 + 192);
          v30 = *(_DWORD *)(v29 + 176);
          a3 = v25 - v30;
          v31 = v26 - v30;
          if (v26 < v30)
            v31 = 0;
          v32 = a3 >= v31;
          v33 = a3 - v31;
          if (v32)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v24 + ~*(_DWORD *)(v29 + 184)) | (unint64_t)(v33 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(WTF::AtomStringImpl **)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 32);
  v16 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, v8, 0);
  JSC::BytecodeGenerator::emitDirectGetById(a2, v16, (uint64_t)v14, v15, v17, v18, v19, v20);
  if (v14)
    --*v14;
  return v16;
}

void JSC::BytecodeIntrinsicNode::emit_intrinsic_getByIdDirectPrivate(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  unint64_t *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = (WTF::StringImpl *)JSC::BuiltinNames::lookUpPrivateName(*(JSC::BuiltinNames **)(*(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 48), **(WTF::StringImpl ***)(*(_QWORD *)(*((_QWORD *)v10 + 4) + 40) + 32));
  v14 = (_DWORD *)JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
  v15 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(*((_QWORD *)this + 24) + 48));
  *(_DWORD *)v13 += 2;
  v33 = v13;
  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v15, (uint64_t *)&v33);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *v15 - 1;
  if (v24 >> 6 >= *((unsigned int *)v15 + 5))
  {
    __break(0xC471u);
  }
  else
  {
    JSC::BytecodeGenerator::emitDirectGetById((uint64_t)this, v14, (uint64_t)v12, (WTF::AtomStringImpl *)(*(_QWORD *)(v15[1] + 8 * (v24 >> 6)) + 8 * (v24 & 0x3F)), v19, v20, v21, v22);
    if (v12)
      --*v12;
  }
}

uint64_t JSC::BuiltinNames::lookUpPrivateName(JSC::BuiltinNames *a1, WTF::StringImpl *a2)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (a2)
    *(_DWORD *)a2 += 2;
  v20 = a2;
  v9 = JSC::BuiltinNames::lookUpPrivateName(a1, (const WTF::String *)&v20);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, v2, v3, v4, v5, v6, v7, v8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return v9;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_getByValWithThis(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t *v19;
  _DWORD *v20;
  _DWORD *v21;
  int *v22;
  int *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v18 = v11;
  if (v11)
    ++*v11;
  v19 = (uint64_t *)*((_QWORD *)v10 + 4);
  v20 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, (JSC::ExpressionNode *)v19, v12, v13, v14, v15, v16, v17);
  v21 = v20;
  if (v20)
    ++*v20;
  v22 = JSC::BytecodeGenerator::emitNodeForProperty((uint64_t)this, 0, v19[4]);
  v23 = v22;
  if (v22)
    ++*v22;
  v24 = (_DWORD *)JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
  JSC::BytecodeGenerator::emitGetByVal((uint64_t)this, v24, (uint64_t)v18, (uint64_t)v21, (uint64_t)v23, v25, v26, v27);
  if (v23)
    --*v23;
  if (v21)
    --*v21;
  if (v18)
    --*v18;
  return v24;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putByValWithThisSloppy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  unsigned int v29;
  BOOL v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;

  v8 = a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v54 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v31 = *(_DWORD *)(a2 + 748) == 5) : (v31 = 0), !v31))
      {
        v32 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v32;
        *(_DWORD *)(a2 + 748) = 5;
        v33 = *(_DWORD *)(v10 + 8);
        v34 = *(_DWORD *)(v10 + 12);
        v35 = *(_DWORD *)(v10 + 16);
        if (v33 != -1 || v34 != -1 || v35 != -1)
        {
          v38 = *(_QWORD *)(a2 + 192);
          v39 = *(_DWORD *)(v38 + 176);
          a3 = v34 - v39;
          v40 = v35 - v39;
          if (v35 < v39)
            v40 = 0;
          v41 = a3 >= v40;
          v42 = a3 - v40;
          if (v41)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v33 + ~*(_DWORD *)(v38 + 184)) | (unint64_t)(v42 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v20 = v13;
  if (v13)
    ++*v13;
  v21 = *(_QWORD *)(v10 + 32);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v54 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v21 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v21 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v21 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v21 + 16) ? (v43 = *(_DWORD *)(a2 + 748) == 5) : (v43 = 0), !v43))
      {
        v44 = *(_QWORD *)(v21 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v21 + 16);
        *(_QWORD *)(a2 + 736) = v44;
        *(_DWORD *)(a2 + 748) = 5;
        v45 = *(_DWORD *)(v21 + 8);
        v46 = *(_DWORD *)(v21 + 12);
        v47 = *(_DWORD *)(v21 + 16);
        if (v45 != -1 || v46 != -1 || v47 != -1)
        {
          v50 = *(_QWORD *)(a2 + 192);
          v51 = *(_DWORD *)(v50 + 176);
          v14 = v46 - v51;
          v52 = v47 - v51;
          if (v47 < v51)
            v52 = 0;
          v41 = v14 >= v52;
          v53 = v14 - v52;
          if (v41)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v14, 0, 0, (v45 + ~*(_DWORD *)(v50 + 184)) | (unint64_t)(v53 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v14, v15, v16, v17, v18, v19);
      }
    }
    v22 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, a2, 0);
  }
  v23 = v22;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v22)
    ++*v22;
  v24 = *(_QWORD *)(v21 + 32);
  v25 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v24);
  v26 = v25;
  if (v25)
    ++*v25;
  v27 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, *(_QWORD *)(v24 + 32));
  if (v27)
  {
    v28 = v27;
    v29 = v27[1];
    ++*v27;
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v20[1], v23[1], v26[1], v29, 1u);
    --*v28;
  }
  else
  {
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v20[1], v23[1], v26[1], MEMORY[4], 1u);
  }
  --*v26;
  --*v23;
  --*v20;
  return v8;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putByValWithThisStrict(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  JSC::ExpressionNode *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  unsigned int v27;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v18 = v11;
  if (v11)
    ++*v11;
  v19 = (JSC::ExpressionNode *)*((_QWORD *)v10 + 4);
  v20 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v19, v12, v13, v14, v15, v16, v17);
  v21 = v20;
  if (v20)
    ++*v20;
  v22 = *((_QWORD *)v19 + 4);
  v23 = JSC::BytecodeGenerator::emitNodeForProperty((uint64_t)this, 0, v22);
  v24 = v23;
  if (v23)
    ++*v23;
  v25 = JSC::BytecodeGenerator::emitNodeForProperty((uint64_t)this, 0, *(_QWORD *)(v22 + 32));
  if (v25)
  {
    v26 = v25;
    v27 = v25[1];
    ++*v25;
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, v18[1], v21[1], v24[1], v27, 0);
    --*v26;
  }
  else
  {
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, v18[1], v21[1], v24[1], MEMORY[4], 0);
  }
  --*v24;
  --*v21;
  --*v18;
  return a3;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getPrototypeOf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;

  v8 = a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v35 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v22 = *(_DWORD *)(a2 + 748) == 5) : (v22 = 0), !v22))
      {
        v23 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v23;
        *(_DWORD *)(a2 + 748) = 5;
        v24 = *(_DWORD *)(v10 + 8);
        v25 = *(_DWORD *)(v10 + 12);
        v26 = v10;
        v27 = *(_DWORD *)(v10 + 16);
        if (v24 != -1 || v25 != -1 || v27 != -1)
        {
          v30 = *(_QWORD *)(a2 + 192);
          v31 = *(_DWORD *)(v30 + 176);
          a3 = v25 - v31;
          v32 = v27 - v31;
          if (v27 < v31)
            v32 = 0;
          v33 = a3 >= v32;
          v34 = a3 - v32;
          if (v33)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v24 + ~*(_DWORD *)(v30 + 184)) | (unint64_t)(v34 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
        v10 = v26;
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::finalDestination(a2, v8, 0);
  JSC::BytecodeGenerator::emitGetPrototypeOf(a2, v15, v14[1], v16, v17, v18, v19, v20);
  --*v14;
  return v15;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getPromiseInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::promiseInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1633;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::promiseInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  uint64_t result;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFieldFlags && (v3 & 1) != 0)
    return 0;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFieldReactionsOrResult)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 1;
  result = 1512;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getGeneratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::generatorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1646;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::generatorInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  uint64_t result;
  char v5;
  char v6;
  char v7;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldState && (v3 & 1) != 0)
    return 1;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldNext)
    v5 = v3;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
    return 2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldThis)
    v6 = v3;
  else
    v6 = 0;
  if ((v6 & 1) != 0)
    return 3;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldFrame)
    v7 = v3;
  else
    v7 = 0;
  if ((v7 & 1) != 0)
    return 4;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldContext)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 5;
  result = 1529;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getProxyInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::proxyInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1659;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::proxyInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  uint64_t result;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_proxyFieldTarget && (v3 & 1) != 0)
    return 0;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_proxyFieldHandler)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 1;
  result = 1624;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getAsyncGeneratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::asyncGeneratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1672;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::asyncGeneratorInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t result;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldState && (v3 & 1) != 0)
    return 1;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldNext)
    v4 = v3;
  else
    v4 = 0;
  if ((v4 & 1) != 0)
    return 2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldThis)
    v5 = v3;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
    return 3;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldFrame)
    v6 = v3;
  else
    v6 = 0;
  if ((v6 & 1) != 0)
    return 4;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldSuspendReason)
    v7 = v3;
  else
    v7 = 0;
  if ((v7 & 1) != 0)
    return 5;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldQueueFirst)
    v8 = v3;
  else
    v8 = 0;
  if ((v8 & 1) != 0)
    return 6;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldQueueLast)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 7;
  result = 1550;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getAbstractModuleRecordInternalField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *(*v18)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;

  v8 = a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v40 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v28 = *(_DWORD *)(a2 + 748) == 5) : (v28 = 0), !v28))
      {
        v29 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v29;
        *(_DWORD *)(a2 + 748) = 5;
        v30 = *(_DWORD *)(v10 + 8);
        v31 = *(_DWORD *)(v10 + 12);
        v32 = *(_DWORD *)(v10 + 16);
        if (v30 != -1 || v31 != -1 || v32 != -1)
        {
          v35 = *(_QWORD *)(a2 + 192);
          v36 = *(_DWORD *)(v35 + 176);
          a3 = v31 - v36;
          v37 = v32 - v36;
          if (v32 < v36)
            v37 = 0;
          v38 = a3 >= v37;
          v39 = a3 - v37;
          if (v38)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v30 + ~*(_DWORD *)(v35 + 184)) | (unint64_t)(v39 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(_QWORD *)(v10 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 280))(*(_QWORD *)(v15 + 40)) & 1) == 0
    || ((v16 = *(_QWORD *)(v15 + 40),
         v18 = *(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 64),
         v17 = *(_QWORD *)(v16 + 72),
         v20 = v17 == 0,
         v19 = v17 & 1 | (unint64_t)v18,
         !v20)
      ? (v20 = v19 == 0)
      : (v20 = 1),
        !v20 ? (v21 = 0) : (v21 = 1),
        v18 != JSC::BytecodeIntrinsicNode::emit_intrinsic_abstractModuleRecordFieldState || (v21 & 1) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x198265F8CLL);
  }
  v22 = JSC::BytecodeGenerator::finalDestination(a2, v8, 0);
  JSC::BytecodeGenerator::emitGetInternalField(a2, v22, v14[1], 0, v23, v24, v25, v26);
  --*v14;
  return v22;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getArrayIteratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::arrayIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1698;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::arrayIteratorInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  uint64_t result;
  char v5;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldIndex && (v3 & 1) != 0)
    return 0;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldIteratedObject)
    v5 = v3;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
    return 1;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldKind)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 2;
  result = 1572;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getStringIteratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::stringIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1711;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::stringIteratorInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  uint64_t result;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_stringIteratorFieldIndex && (v3 & 1) != 0)
    return 0;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_stringIteratorFieldIteratedString)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 1;
  result = 1583;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getMapIteratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::mapIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1724;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::mapIteratorInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  char v4;
  char v5;
  uint64_t result;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldEntry && (v3 & 1) != 0)
    return 0;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldIteratedObject)
    v4 = v3;
  else
    v4 = 0;
  if ((v4 & 1) != 0)
    return 1;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldStorage)
    v5 = v3;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
    return 2;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldKind)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 3;
  result = 1598;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_getSetIteratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::setIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
    JSC::BytecodeGenerator::emitGetInternalField((uint64_t)this, v15, v12[1], v14, v16, v17, v18, v19);
    --*v12;
    return v15;
  }
  else
  {
    result = 1737;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::setIteratorInternalFieldIndex(int *(*a1)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2)
{
  BOOL v2;
  char v3;
  char v4;
  char v5;
  uint64_t result;

  if (a2)
    v2 = (a2 & 1 | (unint64_t)a1) == 0;
  else
    v2 = 1;
  v3 = v2;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldEntry && (v3 & 1) != 0)
    return 0;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldIteratedObject)
    v4 = v3;
  else
    v4 = 0;
  if ((v4 & 1) != 0)
    return 1;
  if (a1 == JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldStorage)
    v5 = v3;
  else
    v5 = 0;
  if ((v5 & 1) != 0)
    return 2;
  if (a1 != JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldKind)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 3;
  result = 1613;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_argument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (int)*(double *)(*(_QWORD *)(**(_QWORD **)(a1 + 96) + 40) + 32);
  v5 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v6 = *(_DWORD *)(v5 + 4);
  v7 = (v4 + 1);
  v8 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
  *(_BYTE *)(v8 + 4) |= 1u;
  v9 = (*(_DWORD *)(v8 + 8) + 1);
  *(_DWORD *)(v8 + 8) = v9;
  if ((JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v6, v7, v9, v10, v11, v12, v13) & 1) == 0
    && (JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v6, v7, v9, v14, v15, v16, v17) & 1) == 0)
  {
    JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v6, v7, v9, v19, v20, v21, v22);
  }
  return v5;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_argumentCount(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v5 = *(_DWORD *)(v4 + 4);
  if (!JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v5, v6, v7, v8, v9, v10, v11)
    && !JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v5, v12, v13, v14, v15, v16, v17))
  {
    JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v5, v19, v20, v21, v22, v23, v24);
  }
  return v4;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayPush(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *result;

  v10 = **(JSC::ExpressionNode ****)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, (JSC::ExpressionNode *)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = v11;
  if (v11)
    ++*v11;
  v19 = (int *)JSC::BytecodeGenerator::emitNode(this, v10[4], v12, v13, v14, v15, v16, v17);
  v20 = v19;
  if (v19)
    ++*v19;
  v21 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  JSC::BytecodeGenerator::emitGetLength((uint64_t)this, v21, (uint64_t)v18, v22, v23, v24, v25, v26);
  if (v21)
    ++*v21;
  JSC::BytecodeGenerator::emitDirectPutByVal((uint64_t)this, v18[1], v21[1], (uint64_t)v20, v27, v28, v29, v30);
  if ((int *)((char *)this + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v20;
    if (a3)
    {
      result = v20;
      if (v20 != a3)
      {
        JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v20, v31, v32, v33, v34, v35);
        result = a3;
      }
    }
  }
  --*v21;
  if (v20)
    --*v20;
  --*v18;
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_putByIdDirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v10;
  char v11;
  char v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *result;
  BOOL v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;

  v8 = (int *)a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v60 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (WTF::AtomStringImpl *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v36 = *(_DWORD *)(a2 + 748) == 5) : (v36 = 0), !v36))
      {
        v37 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v37;
        *(_DWORD *)(a2 + 748) = 5;
        v38 = *(_DWORD *)(v10 + 8);
        v39 = *(_DWORD *)(v10 + 12);
        v40 = *(_DWORD *)(v10 + 16);
        if (v38 != -1 || v39 != -1 || v40 != -1)
        {
          v43 = *(_QWORD *)(a2 + 192);
          v44 = *(_DWORD *)(v43 + 176);
          a3 = v39 - v44;
          v45 = v40 - v44;
          if (v40 < v44)
            v45 = 0;
          v46 = a3 >= v45;
          v47 = a3 - v45;
          if (v46)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v38 + ~*(_DWORD *)(v43 + 184)) | (unint64_t)(v47 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = (WTF::AtomStringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v20 = v13;
  if (v13)
    ++*(_DWORD *)v13;
  v21 = *(_QWORD *)(v10 + 32);
  v22 = *(_QWORD *)(v21 + 32);
  v23 = *(WTF::StringImpl ***)(*(_QWORD *)(v21 + 40) + 32);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v60 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v24 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v22 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v22 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v22 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v22 + 16) ? (v48 = *(_DWORD *)(a2 + 748) == 5) : (v48 = 0), !v48))
      {
        v49 = *(_QWORD *)(v22 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v22 + 16);
        *(_QWORD *)(a2 + 736) = v49;
        *(_DWORD *)(a2 + 748) = 5;
        v50 = *(_DWORD *)(v22 + 8);
        v51 = *(_DWORD *)(v22 + 12);
        v52 = v22;
        v53 = *(_DWORD *)(v22 + 16);
        if (v50 != -1 || v51 != -1 || v53 != -1)
        {
          v56 = *(_QWORD *)(a2 + 192);
          v57 = *(_DWORD *)(v56 + 176);
          v14 = v51 - v57;
          v58 = v53 - v57;
          if (v53 < v57)
            v58 = 0;
          v46 = v14 >= v58;
          v59 = v14 - v58;
          if (v46)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v14, 0, 0, (v50 + ~*(_DWORD *)(v56 + 184)) | (unint64_t)(v59 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v14, v15, v16, v17, v18, v19);
        v22 = v52;
      }
    }
    v24 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, a2, 0);
  }
  v29 = v24;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v24)
    ++*v24;
  JSC::BytecodeGenerator::emitDirectPutById(a2, v20, v23, (uint64_t)v24, v25, v26, v27, v28);
  if ((int *)(a2 + 208) == v8)
  {
    result = 0;
    if (v29)
LABEL_16:
      --*v29;
  }
  else
  {
    result = v29;
    if (v8)
    {
      result = v29;
      if (v29 != v8)
      {
        JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v29, v30, v31, v32, v33, v34);
        result = v8;
      }
    }
    if (v29)
      goto LABEL_16;
  }
  if (v20)
    --*(_DWORD *)v20;
  return result;
}

void JSC::BytecodeIntrinsicNode::emit_intrinsic_putByIdDirectPrivate(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  WTF::AtomStringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  unint64_t *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (WTF::AtomStringImpl *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*(_DWORD *)v11;
  v13 = *((_QWORD *)v10 + 4);
  v14 = (WTF::StringImpl *)JSC::BuiltinNames::lookUpPrivateName(*(JSC::BuiltinNames **)(*(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 48), **(WTF::StringImpl ***)(*(_QWORD *)(v13 + 40) + 32));
  v21 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v13 + 32), v15, v16, v17, v18, v19, v20);
  v22 = v21;
  if (v21)
    ++*v21;
  v23 = JSC::ParserArena::identifierArena((JSC::ParserArena *)(*((_QWORD *)this + 24) + 48));
  *(_DWORD *)v14 += 2;
  v46 = v14;
  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)v23, (uint64_t *)&v46);
  v31 = v46;
  v46 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = *v23 - 1;
  if (v32 >> 6 >= *((unsigned int *)v23 + 5))
  {
    __break(0xC471u);
  }
  else
  {
    JSC::BytecodeGenerator::emitDirectPutById((uint64_t)this, v12, (WTF::StringImpl **)(*(_QWORD *)(v23[1] + 8 * (v32 >> 6)) + 8 * (v32 & 0x3F)), (uint64_t)v22, v27, v28, v29, v30);
    if ((int *)((char *)this + 208) != a3 && a3 && v22 != a3)
      JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v22, v33, v34, v35, v36, v37);
    if (v22)
      --*v22;
    if (v12)
      --*(_DWORD *)v12;
  }
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_putByValDirect(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _BYTE *v23;
  char v24;
  char v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *result;
  uint64_t v38;

  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v38 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v10 + 8, a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(_QWORD *)(v10 + 32);
  v16 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v15);
  v22 = v16;
  if (v16)
    ++*v16;
  v23 = *(_BYTE **)(v15 + 32);
  v24 = *(_BYTE *)(a2 + 709);
  v25 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v38 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v26 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v23[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v23 + 8), v17, v18, v19, v20, v21);
    v26 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, a2, 0);
  }
  v31 = v26;
  *(_BYTE *)(a2 + 710) = v25;
  *(_BYTE *)(a2 + 709) = v24;
  if (v26)
    ++*v26;
  JSC::BytecodeGenerator::emitDirectPutByVal(a2, v14[1], v22[1], (uint64_t)v26, v27, v28, v29, v30);
  if ((int *)(a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v31;
    if (a3)
    {
      result = v31;
      if (v31 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v31, v32, v33, v34, v35, v36);
        result = a3;
      }
    }
  }
  if (v31)
    --*v31;
  --*v22;
  --*v14;
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putPromiseInternalField(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::promiseInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v21 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v13 + 32), v15, v16, v17, v18, v19, v20);
    v26 = v21;
    if (v21)
      ++*v21;
    JSC::BytecodeGenerator::emitPutInternalField((uint64_t)this, v12[1], v14, (uint64_t)v21, v22, v23, v24, v25);
    if ((int *)((char *)this + 208) == a3)
    {
      result = 0;
    }
    else
    {
      result = (uint64_t)v26;
      if (a3)
      {
        result = (uint64_t)v26;
        if (v26 != a3)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v26, v27, v28, v29, v30, v31);
          result = (uint64_t)a3;
        }
      }
    }
    if (v26)
      --*v26;
    --*v12;
  }
  else
  {
    result = 1832;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putGeneratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::generatorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v21 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v13 + 32), v15, v16, v17, v18, v19, v20);
    v26 = v21;
    if (v21)
      ++*v21;
    JSC::BytecodeGenerator::emitPutInternalField((uint64_t)this, v12[1], v14, (uint64_t)v21, v22, v23, v24, v25);
    if ((int *)((char *)this + 208) == a3)
    {
      result = 0;
    }
    else
    {
      result = (uint64_t)v26;
      if (a3)
      {
        result = (uint64_t)v26;
        if (v26 != a3)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v26, v27, v28, v29, v30, v31);
          result = (uint64_t)a3;
        }
      }
    }
    if (v26)
      --*v26;
    --*v12;
  }
  else
  {
    result = 1848;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putAsyncGeneratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::asyncGeneratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v21 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v13 + 32), v15, v16, v17, v18, v19, v20);
    v26 = v21;
    if (v21)
      ++*v21;
    JSC::BytecodeGenerator::emitPutInternalField((uint64_t)this, v12[1], v14, (uint64_t)v21, v22, v23, v24, v25);
    if ((int *)((char *)this + 208) == a3)
    {
      result = 0;
    }
    else
    {
      result = (uint64_t)v26;
      if (a3)
      {
        result = (uint64_t)v26;
        if (v26 != a3)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v26, v27, v28, v29, v30, v31);
          result = (uint64_t)a3;
        }
      }
    }
    if (v26)
      --*v26;
    --*v12;
  }
  else
  {
    result = 1864;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putArrayIteratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::arrayIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v21 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v13 + 32), v15, v16, v17, v18, v19, v20);
    v26 = v21;
    if (v21)
      ++*v21;
    JSC::BytecodeGenerator::emitPutInternalField((uint64_t)this, v12[1], v14, (uint64_t)v21, v22, v23, v24, v25);
    if ((int *)((char *)this + 208) == a3)
    {
      result = 0;
    }
    else
    {
      result = (uint64_t)v26;
      if (a3)
      {
        result = (uint64_t)v26;
        if (v26 != a3)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v26, v27, v28, v29, v30, v31);
          result = (uint64_t)a3;
        }
      }
    }
    if (v26)
      --*v26;
    --*v12;
  }
  else
  {
    result = 1880;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_putStringIteratorInternalField(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40)) & 1) != 0)
  {
    v14 = JSC::stringIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v13 + 40) + 72));
    v21 = (int *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(v13 + 32), v15, v16, v17, v18, v19, v20);
    v26 = v21;
    if (v21)
      ++*v21;
    JSC::BytecodeGenerator::emitPutInternalField((uint64_t)this, v12[1], v14, (uint64_t)v21, v22, v23, v24, v25);
    if ((int *)((char *)this + 208) == a3)
    {
      result = 0;
    }
    else
    {
      result = (uint64_t)v26;
      if (a3)
      {
        result = (uint64_t)v26;
        if (v26 != a3)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v26, v27, v28, v29, v30, v31);
          result = (uint64_t)a3;
        }
      }
    }
    if (v26)
      --*v26;
    --*v12;
  }
  else
  {
    result = 1896;
    __break(0xC471u);
  }
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_putMapIteratorInternalField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *result;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;

  v8 = (int *)a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v64 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v40 = *(_DWORD *)(a2 + 748) == 5) : (v40 = 0), !v40))
      {
        v41 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v41;
        *(_DWORD *)(a2 + 748) = 5;
        v42 = *(_DWORD *)(v10 + 8);
        v43 = *(_DWORD *)(v10 + 12);
        v44 = *(_DWORD *)(v10 + 16);
        if (v42 != -1 || v43 != -1 || v44 != -1)
        {
          v47 = *(_QWORD *)(a2 + 192);
          v48 = *(_DWORD *)(v47 + 176);
          a3 = v43 - v48;
          v49 = v44 - v48;
          if (v44 < v48)
            v49 = 0;
          v50 = a3 >= v49;
          v51 = a3 - v49;
          if (v50)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v42 + ~*(_DWORD *)(v47 + 184)) | (unint64_t)(v51 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(_QWORD *)(v10 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 280))(*(_QWORD *)(v15 + 40)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198267724);
  }
  v22 = JSC::mapIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v15 + 40) + 72));
  v23 = *(_QWORD *)(v15 + 32);
  v24 = *(_BYTE *)(a2 + 709);
  v25 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v64 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v26 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v23 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v23 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v23 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v23 + 16) ? (v52 = *(_DWORD *)(a2 + 748) == 5) : (v52 = 0), !v52))
      {
        v53 = *(_QWORD *)(v23 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v23 + 16);
        *(_QWORD *)(a2 + 736) = v53;
        *(_DWORD *)(a2 + 748) = 5;
        v54 = *(_DWORD *)(v23 + 8);
        v55 = *(_DWORD *)(v23 + 12);
        v56 = v23;
        v57 = *(_DWORD *)(v23 + 16);
        if (v54 != -1 || v55 != -1 || v57 != -1)
        {
          v60 = *(_QWORD *)(a2 + 192);
          v61 = *(_DWORD *)(v60 + 176);
          v16 = v55 - v61;
          v62 = v57 - v61;
          if (v57 < v61)
            v62 = 0;
          v50 = v16 >= v62;
          v63 = v16 - v62;
          if (v50)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v16, 0, 0, (v54 + ~*(_DWORD *)(v60 + 184)) | (unint64_t)(v63 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v16, v17, v18, v19, v20, v21);
        v23 = v56;
      }
    }
    v26 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, a2, 0);
  }
  v31 = v26;
  *(_BYTE *)(a2 + 710) = v25;
  *(_BYTE *)(a2 + 709) = v24;
  if (v26)
    ++*v26;
  v32 = v14[1];
  v33 = v26[1];
  if ((JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v32, v22, v33, v27, v28, v29, v30) & 1) == 0&& (JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v32, v22, v33, v35, v36, v37, v38) & 1) == 0)
  {
    JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v32, v22, v33, v35, v36, v37, v38);
  }
  if ((int *)(a2 + 208) == v8)
  {
    result = 0;
  }
  else
  {
    result = v31;
    if (v8)
    {
      result = v31;
      if (v31 != v8)
      {
        JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v31, v34, v35, v36, v37, v38);
        result = v8;
      }
    }
  }
  --*v31;
  --*v14;
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_putSetIteratorInternalField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *result;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;

  v8 = (int *)a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v64 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v40 = *(_DWORD *)(a2 + 748) == 5) : (v40 = 0), !v40))
      {
        v41 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v41;
        *(_DWORD *)(a2 + 748) = 5;
        v42 = *(_DWORD *)(v10 + 8);
        v43 = *(_DWORD *)(v10 + 12);
        v44 = *(_DWORD *)(v10 + 16);
        if (v42 != -1 || v43 != -1 || v44 != -1)
        {
          v47 = *(_QWORD *)(a2 + 192);
          v48 = *(_DWORD *)(v47 + 176);
          a3 = v43 - v48;
          v49 = v44 - v48;
          if (v44 < v48)
            v49 = 0;
          v50 = a3 >= v49;
          v51 = a3 - v49;
          if (v50)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v42 + ~*(_DWORD *)(v47 + 184)) | (unint64_t)(v51 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(_QWORD *)(v10 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 280))(*(_QWORD *)(v15 + 40)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198267AF0);
  }
  v22 = JSC::setIteratorInternalFieldIndex(*(int *(**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v15 + 40) + 72));
  v23 = *(_QWORD *)(v15 + 32);
  v24 = *(_BYTE *)(a2 + 709);
  v25 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v64 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v26 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v23 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v23 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v23 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v23 + 16) ? (v52 = *(_DWORD *)(a2 + 748) == 5) : (v52 = 0), !v52))
      {
        v53 = *(_QWORD *)(v23 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v23 + 16);
        *(_QWORD *)(a2 + 736) = v53;
        *(_DWORD *)(a2 + 748) = 5;
        v54 = *(_DWORD *)(v23 + 8);
        v55 = *(_DWORD *)(v23 + 12);
        v56 = v23;
        v57 = *(_DWORD *)(v23 + 16);
        if (v54 != -1 || v55 != -1 || v57 != -1)
        {
          v60 = *(_QWORD *)(a2 + 192);
          v61 = *(_DWORD *)(v60 + 176);
          v16 = v55 - v61;
          v62 = v57 - v61;
          if (v57 < v61)
            v62 = 0;
          v50 = v16 >= v62;
          v63 = v16 - v62;
          if (v50)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v16, 0, 0, (v54 + ~*(_DWORD *)(v60 + 184)) | (unint64_t)(v63 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v16, v17, v18, v19, v20, v21);
        v23 = v56;
      }
    }
    v26 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, a2, 0);
  }
  v31 = v26;
  *(_BYTE *)(a2 + 710) = v25;
  *(_BYTE *)(a2 + 709) = v24;
  if (v26)
    ++*v26;
  v32 = v14[1];
  v33 = v26[1];
  if ((JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v32, v22, v33, v27, v28, v29, v30) & 1) == 0&& (JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v32, v22, v33, v35, v36, v37, v38) & 1) == 0)
  {
    JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v32, v22, v33, v35, v36, v37, v38);
  }
  if ((int *)(a2 + 208) == v8)
  {
    result = 0;
  }
  else
  {
    result = v31;
    if (v8)
    {
      result = v31;
      if (v31 != v8)
      {
        JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v31, v34, v35, v36, v37, v38);
        result = v8;
      }
    }
  }
  --*v31;
  --*v14;
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_superSamplerBegin(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v21;
  char v22;

  JSC::BytecodeGenerator::emitLoad(a2, a3, 10, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x7F, v10, v11, v12, v13, v14, v15);
  v22 = 127;
  v16 = *(unsigned int *)(a2 + 12);
  v17 = *(unsigned int *)(a2 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a2 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v17) = 127;
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v16 + 1), (unint64_t)&v22);
      v16 = *(unsigned int *)(a2 + 12);
      v18 = *(_QWORD *)a2;
      v19 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a2;
      v19 = 127;
    }
    *(_BYTE *)(v18 + v16) = v19;
    *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
  }
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_superSamplerEnd(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v20;
  char v21;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x81, (uint64_t)a3, a4, a5, a6, a7, a8);
  v21 = -127;
  v15 = *(unsigned int *)(a2 + 12);
  v16 = *(unsigned int *)(a2 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a2 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v16) = -127;
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a2 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v15 + 1), (unint64_t)&v21);
      v15 = *(unsigned int *)(a2 + 12);
      v17 = *(_QWORD *)a2;
      v18 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)a2;
      v18 = -127;
    }
    *(_BYTE *)(v17 + v15) = v18;
    *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v10, v11, v12, v13, v14);
  return a3;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_tailCallForwardArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char v12;
  char v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _BYTE *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;

  v11 = **(_QWORD **)(a1 + 96);
  v12 = *(_BYTE *)(a2 + 709);
  v13 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v91 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v14 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v11 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v11 + 8, a4, a5, a6, a7, a8);
    v14 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, a2, 0);
  }
  v20 = v14;
  if (v14)
    ++*v14;
  v21 = *(_BYTE **)(v11 + 32);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v91 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v21[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v21 + 8), v15, v16, v17, v18, v19);
    v22 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, a2, 0);
  }
  v23 = v22;
  *(_BYTE *)(a2 + 710) = v13;
  *(_BYTE *)(a2 + 709) = v12;
  if (v22)
    ++*v22;
  v24 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v25 = v24;
  if (v24)
    ++*v24;
  v32 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v34 = *(_DWORD *)(a1 + 28);
  v33 = *(_DWORD *)(a1 + 32);
  v35 = *(_DWORD *)(a1 + 36);
  if (v34 != -1 || v33 != -1 || v35 != -1)
  {
    v36 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v36 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v37 = *(_DWORD *)(a1 + 56);
      if ((*(_DWORD *)(a1 + 52) & v37 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v38 = *(_QWORD *)(a2 + 192);
        v39 = *(_DWORD *)(v38 + 176);
        v26 = v33 - v39;
        v40 = v35 >= v39;
        v41 = v35 - v39;
        if (!v40)
          v41 = 0;
        v40 = v26 >= v41;
        v42 = v26 - v41;
        if (v40)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v26, v33 - v36, v37 - v33, (v34 + ~*(_DWORD *)(v38 + 184)) | (unint64_t)(v42 << 32));
      }
    }
  }
  v43 = v25[1];
  v44 = v20[1];
  v45 = v23[1];
  v46 = *(unsigned int *)(v32 + 4);
  v47 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
  *(_BYTE *)(v47 + 4) |= 1u;
  v48 = *(_QWORD *)(v47 + 16);
  v49 = *(unsigned int *)(v48 + 44);
  *(_DWORD *)(v48 + 44) = v49 + 1;
  v50 = (v43 - 1073741808) < 0x80;
  if (v43 <= 0x3FFFFFFF)
    v50 = (v43 + 128) < 0x90;
  if (!v50)
    goto LABEL_83;
  if (!((int)v44 <= 0x3FFFFFFF ? (v44 + 128) < 0x90 : (v44 - 1073741808) < 0x80))
    goto LABEL_83;
  v52 = (v45 - 1073741808) < 0x80;
  if ((int)v45 <= 0x3FFFFFFF)
    v52 = (v45 + 128) < 0x90;
  if (!v52)
    goto LABEL_83;
  v53 = (v46 - 1073741808) < 0x80;
  if ((int)v46 <= 0x3FFFFFFF)
    v53 = (v46 + 128) < 0x90;
  if (v53 && v49 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xB, v26, v27, v28, v29, v30, v31);
    v92 = 11;
    v54 = *(unsigned int *)(a2 + 12);
    v55 = *(unsigned int *)(a2 + 16);
    if (v54 > v55)
    {
      *(_DWORD *)(a2 + 16) = v55 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v55) = 11;
      v58 = *(_DWORD *)(a2 + 12);
      v59 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if ((_DWORD)v54 == *(_DWORD *)(a2 + 8))
      {
        v86 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v54 + 1), (unint64_t)&v92);
        v54 = *(unsigned int *)(a2 + 12);
        v56 = *(_QWORD *)a2;
        v57 = *v86;
      }
      else
      {
        v56 = *(_QWORD *)a2;
        v57 = 11;
      }
      *(_BYTE *)(v56 + v54) = v57;
      v58 = *(_DWORD *)(a2 + 12) + 1;
      v59 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v58;
      *(_DWORD *)(a2 + 16) = v59;
    }
    v60 = v43 + 16;
    if (v43 <= 0x3FFFFFFF)
      v60 = v43;
    v93 = v60;
    if (v58 > v59)
    {
      *(_DWORD *)(a2 + 16) = v59 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v59) = v60;
      v63 = *(_DWORD *)(a2 + 12);
      v64 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v61 = v58;
      if (v58 == *(_DWORD *)(a2 + 8))
      {
        v87 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v58 + 1), (unint64_t)&v93);
        v61 = *(unsigned int *)(a2 + 12);
        v62 = *(_QWORD *)a2;
        v60 = *v87;
      }
      else
      {
        v62 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v62 + v61) = v60;
      v63 = *(_DWORD *)(a2 + 12) + 1;
      v64 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v63;
      *(_DWORD *)(a2 + 16) = v64;
    }
    v65 = v44 + 16;
    if ((int)v44 <= 0x3FFFFFFF)
      v65 = v44;
    v94 = v65;
    if (v63 > v64)
    {
      *(_DWORD *)(a2 + 16) = v64 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v64) = v65;
      v68 = *(_DWORD *)(a2 + 12);
      v69 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v66 = v63;
      if (v63 == *(_DWORD *)(a2 + 8))
      {
        v88 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v63 + 1), (unint64_t)&v94);
        v66 = *(unsigned int *)(a2 + 12);
        v67 = *(_QWORD *)a2;
        v65 = *v88;
      }
      else
      {
        v67 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v67 + v66) = v65;
      v68 = *(_DWORD *)(a2 + 12) + 1;
      v69 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v68;
      *(_DWORD *)(a2 + 16) = v69;
    }
    v70 = v45 + 16;
    if ((int)v45 <= 0x3FFFFFFF)
      v70 = v45;
    v95 = v70;
    if (v68 > v69)
    {
      *(_DWORD *)(a2 + 16) = v69 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v69) = v70;
      v73 = *(_DWORD *)(a2 + 12);
      v74 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v71 = v68;
      if (v68 == *(_DWORD *)(a2 + 8))
      {
        v89 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v68 + 1), (unint64_t)&v95);
        v71 = *(unsigned int *)(a2 + 12);
        v72 = *(_QWORD *)a2;
        v70 = *v89;
      }
      else
      {
        v72 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v72 + v71) = v70;
      v73 = *(_DWORD *)(a2 + 12) + 1;
      v74 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v73;
      *(_DWORD *)(a2 + 16) = v74;
    }
    v96 = 0;
    if (v73 > v74)
    {
      *(_DWORD *)(a2 + 16) = v74 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v74) = 0;
      v75 = *(_DWORD *)(a2 + 12);
      v76 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if (v73 == *(_DWORD *)(a2 + 8))
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v73 + 1), (unint64_t)&v96);
      else
        *(_BYTE *)(*(_QWORD *)a2 + v73) = 0;
      v75 = *(_DWORD *)(a2 + 12) + 1;
      v76 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v75;
      *(_DWORD *)(a2 + 16) = v76;
    }
    v77 = v46 + 16;
    if ((int)v46 <= 0x3FFFFFFF)
      v77 = v46;
    v97 = v77;
    if (v75 > v76)
    {
      *(_DWORD *)(a2 + 16) = v76 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v76) = v77;
      v80 = *(_DWORD *)(a2 + 12);
      v81 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v78 = v75;
      if (v75 == *(_DWORD *)(a2 + 8))
      {
        v90 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v75 + 1), (unint64_t)&v97);
        v78 = *(unsigned int *)(a2 + 12);
        v79 = *(_QWORD *)a2;
        v77 = *v90;
      }
      else
      {
        v79 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v79 + v78) = v77;
      v80 = *(_DWORD *)(a2 + 12) + 1;
      v81 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v80;
      *(_DWORD *)(a2 + 16) = v81;
    }
    v98 = 0;
    if (v80 > v81)
    {
      *(_DWORD *)(a2 + 16) = v81 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v81) = 0;
      v82 = *(_DWORD *)(a2 + 12);
      v83 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if (v80 == *(_DWORD *)(a2 + 8))
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v80 + 1), (unint64_t)&v98);
      else
        *(_BYTE *)(*(_QWORD *)a2 + v80) = 0;
      v82 = *(_DWORD *)(a2 + 12) + 1;
      v83 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v82;
      *(_DWORD *)(a2 + 16) = v83;
    }
    v99 = v49;
    if (v82 > v83)
    {
      *(_DWORD *)(a2 + 16) = v83 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v83) = v49;
    }
    else
    {
      if (v82 == *(_DWORD *)(a2 + 8))
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v82 + 1), (unint64_t)&v99);
      else
        *(_BYTE *)(*(_QWORD *)a2 + v82) = v49;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_83:
    if ((JSC::OpTailCallForwardArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v43, v44, v45, 0, v46, v49, v31) & 1) == 0)JSC::OpTailCallForwardArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v43, v44, v45, 0, v46, v49, v85);
  }
  --*v25;
  --*v23;
  --*v20;
  return v25;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_throwTypeError(uint64_t a1, JSC::BytecodeGenerator *a2, uint64_t a3)
{
  JSC::ExpressionNode *v5;
  const WTF::String *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;

  v5 = **(JSC::ExpressionNode ***)(a1 + 96);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v5 + 5) + 32))(*((_QWORD *)v5 + 5)))
  {
    v12 = JSC::BytecodeGenerator::addStringConstant((uint64_t)a2, *(JSC::VM **)(*((_QWORD *)v5 + 5) + 32), v6, v7, v8, v9, v10, v11);
    v13 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue((uint64_t)a2, v12) + 4);
    if (!JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)a2, v13, 5, v14, v15, v16, v17, v18)&& !JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)a2, v13, 5, v19, v20, v21, v22, v23))
    {
      JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)a2, v13, 5, v25, v26, v27, v28, v29);
    }
  }
  else
  {
    v30 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, v5, (uint64_t)v6, v7, v8, v9, v10, v11);
    if (v30)
    {
      v31 = v30;
      ++*v30;
      JSC::BytecodeGenerator::emitThrowStaticError((uint64_t)a2, 5, (uint64_t)v30);
      --*v31;
    }
    else
    {
      JSC::BytecodeGenerator::emitThrowStaticError((uint64_t)a2, 5, 0);
    }
  }
  return a3;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_throwRangeError(uint64_t a1, JSC::BytecodeGenerator *a2, uint64_t a3)
{
  JSC::ExpressionNode *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v13;
  _DWORD *v14;

  v5 = **(JSC::ExpressionNode ***)(a1 + 96);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v5 + 5) + 32))(*((_QWORD *)v5 + 5)))
  {
    JSC::BytecodeGenerator::emitThrowStaticError((uint64_t)a2, 2, *(JSC::VM **)(*((_QWORD *)v5 + 5) + 32), v7, v8, v9, v10, v11);
  }
  else
  {
    v13 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, v5, v6, v7, v8, v9, v10, v11);
    if (v13)
    {
      v14 = v13;
      ++*v13;
      JSC::BytecodeGenerator::emitThrowStaticError((uint64_t)a2, 2, (uint64_t)v13);
      --*v14;
    }
    else
    {
      JSC::BytecodeGenerator::emitThrowStaticError((uint64_t)a2, 2, 0);
    }
  }
  return a3;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_throwOutOfMemoryError(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BytecodeGenerator::emitThrowStaticError(a2, 8, (JSC::VM *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 8), a4, a5, a6, a7, a8);
  return a3;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_tryGetById(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::AtomStringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v23;

  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v23 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v10 + 8, a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(WTF::AtomStringImpl **)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 32);
  v16 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v21 = v16;
  if (v16)
  {
    ++*v16;
    JSC::BytecodeGenerator::emitTryGetById(a2, v16, (uint64_t)v14, v15, v17, v18, v19, v20);
    --*v21;
  }
  else
  {
    JSC::BytecodeGenerator::emitTryGetById(a2, 0, (uint64_t)v14, v15, v17, v18, v19, v20);
  }
  if (v14)
    --*v14;
  return v21;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_tryGetByIdWithWellKnownSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  JSC::BuiltinNames *v15;
  WTF::StringImpl *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;

  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v72 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v10 + 8, a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = *(JSC::BuiltinNames **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 48);
  v16 = **(WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 32);
  if (v16)
    *(_DWORD *)v16 += 2;
  v73 = v16;
  v24 = (_DWORD *)JSC::BuiltinNames::lookUpWellKnownSymbol(v15, (const WTF::String *)&v73);
  v25 = v73;
  v73 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (!v24)
    goto LABEL_34;
  v26 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v31 = v26;
  if (v26)
    ++*v26;
  v32 = *(_QWORD *)(a2 + 192);
  v33 = *(_QWORD *)(v32 + 64);
  if (!v33)
  {
    v33 = WTF::fastMalloc((WTF *)0x818);
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)v33 = 0;
    WTF::SegmentedVector<JSC::Identifier,64ul>::clear((unint64_t *)v33, v53, v54, v55, v56, v57, v58, v59);
    bzero((void *)(v33 + 24), 0x800uLL);
    v63 = *(unint64_t **)(v32 + 64);
    *(_QWORD *)(v32 + 64) = v33;
    if (v63)
    {
      WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v63, v60, v61, v62, v27, v28, v29, v30);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      v33 = *(_QWORD *)(v32 + 64);
    }
  }
  *v24 += 2;
  v34 = (*(_QWORD *)v33)++;
  v35 = v34 >> 6;
  v36 = *(unsigned int *)(v33 + 20);
  if (v34 >> 6 >= v36)
  {
    v50 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
    v73 = v50;
    v51 = *(unsigned int *)(v33 + 20);
    if ((_DWORD)v51 == *(_DWORD *)(v33 + 16))
    {
      v52 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33 + 8, v51 + 1, (unint64_t)&v73);
      v51 = *(unsigned int *)(v33 + 20);
      *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v51) = *v52;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v51) = v50;
    }
    v36 = (v51 + 1);
    *(_DWORD *)(v33 + 20) = v36;
    v34 = *(_QWORD *)v33 - 1;
    v35 = v34 >> 6;
  }
  if (v35 >= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x198268B68);
  }
  v37 = *(_QWORD *)(v33 + 8);
  v38 = *(_QWORD *)(v37 + 8 * v35);
  v39 = v34 & 0x3F;
  *(_QWORD *)(v38 + 8 * v39) = v24;
  v40 = v34 >> 6;
  if (v40 >= v36)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x198268B0CLL);
  }
  JSC::BytecodeGenerator::emitTryGetById(a2, v31, (uint64_t)v14, (WTF::AtomStringImpl *)(*(_QWORD *)(v37 + 8 * v40) + 8 * v39), v27, v28, v29, v30);
  if (v31)
    --*v31;
  if (v14)
    --*v14;
  return v31;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_toNumber(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitToNumber((uint64_t)this, v12, v11[1], v13, v14, v15, v16, v17);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v18, v19, v20, v21, v22);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_toString(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v10 = **(_BYTE ***)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v29 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = v14[1];
  if ((JSC::OpToString::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v16, v17, v18, v19, v20, v21, v22) & 1) == 0
    && (JSC::OpToString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v16, v17, v23, v24, v25, v26, v27) & 1) == 0)
  {
    JSC::OpToString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v16, v17, v23, v24, v25, v26, v27);
  }
  if ((int *)(a2 + 208) == a3)
  {
    a3 = 0;
  }
  else if (!a3 || (int *)v15 == a3)
  {
    a3 = (int *)v15;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, a3, v15, v23, v24, v25, v26, v27);
  }
  --*v14;
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_toPropertyKey(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::OpToPropertyKey::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, *(_DWORD *)(v12 + 4), v11[1], v13, v14, v15, v16, v17);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v18, v19, v20, v21, v22);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_toObject(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *result;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *((_QWORD *)v10 + 4);
  v14 = (int *)JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)a3);
  v19 = v14;
  if (v14)
    ++*v14;
  if (v13)
    v20 = *(WTF::AtomStringImpl **)(*(_QWORD *)(v13 + 40) + 32);
  else
    v20 = (WTF::AtomStringImpl *)(*(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 8);
  JSC::BytecodeGenerator::emitToObject((uint64_t)this, (uint64_t)v14, v12[1], v20, v15, v16, v17, v18);
  if ((int *)((char *)this + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v19;
    if (a3)
    {
      result = v19;
      if (v19 != a3)
      {
        JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v19, v21, v22, v23, v24, v25);
        result = a3;
      }
    }
  }
  if (v19)
    --*v19;
  --*v12;
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_toThis(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *result;

  v10 = (int *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = v10;
  if (v10)
    ++*v10;
  JSC::BytecodeGenerator::emitToThis((uint64_t)this, v10, v11, v12, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v17;
    if (a3)
    {
      result = v17;
      if (v17 != a3)
      {
        JSC::BytecodeGenerator::emitMove((uint64_t)this, a3, (uint64_t)v17, v18, v19, v20, v21, v22);
        result = a3;
      }
    }
  }
  if (v17)
    --*v17;
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_idWithProfile(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  _DWORD *v26;
  JSC *v27;
  void *v28;
  uint64_t v29;
  signed int v30;
  _BOOL4 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  int *result;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  BOOL v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;

  v5 = **(_QWORD **)(a1 + 96);
  v6 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v13 = v6;
  if (v6)
    ++*v6;
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v5 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v5 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v5 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v5 + 16) ? (v78 = *(_DWORD *)(a2 + 748) == 5) : (v78 = 0), !v78))
      {
        v79 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v5 + 16);
        *(_QWORD *)(a2 + 736) = v79;
        *(_DWORD *)(a2 + 748) = 5;
        v80 = *(_DWORD *)(v5 + 8);
        v81 = *(_DWORD *)(v5 + 12);
        v82 = *(_DWORD *)(v5 + 16);
        if (v80 != -1 || v81 != -1 || v82 != -1)
        {
          v85 = *(_QWORD *)(a2 + 192);
          v86 = *(_DWORD *)(v85 + 176);
          v7 = v81 - v86;
          v87 = v82 - v86;
          if (v82 < v86)
            v87 = 0;
          v88 = v7 >= v87;
          v89 = v7 - v87;
          if (v88)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v7, 0, 0, (v80 + ~*(_DWORD *)(v85 + 184)) | (unint64_t)(v89 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v7, v8, v9, v10, v11, v12);
      }
    }
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v5 + 16))(v5, a2, v13);
  }
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  v23 = *(_QWORD *)(v5 + 32);
  if (v23)
  {
    v24 = 0;
    do
    {
      WTF::String::utf8(*(uint64_t **)(*(_QWORD *)(v23 + 40) + 32), 0, v17, v18, v19, v20, v21, &v91, v22);
      v26 = v91;
      if (v91)
        v27 = (JSC *)(v91 + 4);
      else
        v27 = 0;
      v29 = JSC::speculationFromString(v27, v25);
      if (v26)
      {
        if (*v26 == 1)
          WTF::fastFree((unint64_t)v26, v28, v16, v17, v18, v19, v20, v21);
        else
          --*v26;
      }
      v24 |= v29;
      v23 = *(_QWORD *)(v23 + 32);
    }
    while (v23);
  }
  else
  {
    v24 = 0;
  }
  v30 = v13[1];
  v31 = (v30 - 1073741808) < 0x80;
  if (v30 <= 0x3FFFFFFF)
    v31 = (v30 + 128) < 0x90;
  v32 = HIDWORD(v24) | v24;
  if (v31 && v32 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xB9, v16, v17, v18, v19, v20, v21);
    LOBYTE(v91) = -71;
    v38 = *(unsigned int *)(a2 + 12);
    v39 = *(unsigned int *)(a2 + 16);
    if (v38 > v39)
    {
      *(_DWORD *)(a2 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v39) = -71;
      v42 = *(_DWORD *)(a2 + 12);
      v43 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if ((_DWORD)v38 == *(_DWORD *)(a2 + 8))
      {
        v72 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v38 + 1), (unint64_t)&v91);
        v38 = *(unsigned int *)(a2 + 12);
        v40 = *(_QWORD *)a2;
        v41 = *v72;
      }
      else
      {
        v40 = *(_QWORD *)a2;
        v41 = -71;
      }
      *(_BYTE *)(v40 + v38) = v41;
      v42 = *(_DWORD *)(a2 + 12) + 1;
      v43 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v42;
      *(_DWORD *)(a2 + 16) = v43;
    }
    v44 = v30 + 16;
    if (v30 <= 0x3FFFFFFF)
      v44 = v30;
    LOBYTE(v91) = v44;
    if (v42 > v43)
    {
      *(_DWORD *)(a2 + 16) = v43 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v43) = v44;
      v47 = *(_DWORD *)(a2 + 12);
      v48 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v45 = v42;
      if (v42 == *(_DWORD *)(a2 + 8))
      {
        v73 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v42 + 1), (unint64_t)&v91);
        v45 = *(unsigned int *)(a2 + 12);
        v46 = *(_QWORD *)a2;
        v44 = *v73;
      }
      else
      {
        v46 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v46 + v45) = v44;
      v47 = *(_DWORD *)(a2 + 12) + 1;
      v48 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v47;
      *(_DWORD *)(a2 + 16) = v48;
    }
    LOBYTE(v91) = BYTE4(v24);
    if (v47 > v48)
    {
      *(_DWORD *)(a2 + 16) = v48 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v48) = BYTE4(v24);
      v49 = *(_DWORD *)(a2 + 12);
      v50 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if (v47 == *(_DWORD *)(a2 + 8))
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v47 + 1), (unint64_t)&v91);
      else
        *(_BYTE *)(*(_QWORD *)a2 + v47) = BYTE4(v24);
      v49 = *(_DWORD *)(a2 + 12) + 1;
      v50 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v49;
      *(_DWORD *)(a2 + 16) = v50;
    }
    LOBYTE(v91) = v24;
    if (v49 > v50)
    {
      *(_DWORD *)(a2 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v50) = v24;
    }
    else
    {
      if (v49 == *(_DWORD *)(a2 + 8))
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v49 + 1), (unint64_t)&v91);
      else
        *(_BYTE *)(*(_QWORD *)a2 + v49) = v24;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
    if (v30 <= 0x3FFFFFFF)
      v51 = (v30 + 0x8000) >> 6 < 0x201;
    else
      v51 = (v30 - 1073741760) < 0x8000;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xB9, v16, v17, v18, v19, v20, v21);
    if (!v51 || HIWORD(v32))
    {
      LOBYTE(v91) = -126;
      v62 = *(unsigned int *)(a2 + 12);
      v63 = *(unsigned int *)(a2 + 16);
      if (v62 > v63)
      {
        *(_DWORD *)(a2 + 16) = v63 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v63) = -126;
        v66 = *(_DWORD *)(a2 + 12);
        v67 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v62 == *(_DWORD *)(a2 + 8))
        {
          v76 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v62 + 1), (unint64_t)&v91);
          v62 = *(unsigned int *)(a2 + 12);
          v64 = *(_QWORD *)a2;
          v65 = *v76;
        }
        else
        {
          v64 = *(_QWORD *)a2;
          v65 = -126;
        }
        *(_BYTE *)(v64 + v62) = v65;
        v66 = *(_DWORD *)(a2 + 12) + 1;
        v67 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v66;
        *(_DWORD *)(a2 + 16) = v67;
      }
      v68 = -71;
      LOBYTE(v91) = -71;
      if (v66 > v67)
      {
        *(_DWORD *)(a2 + 16) = v67 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v67) = -71;
      }
      else
      {
        v69 = v66;
        if (v66 == *(_DWORD *)(a2 + 8))
        {
          v77 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v66 + 1), (unint64_t)&v91);
          v69 = *(unsigned int *)(a2 + 12);
          v70 = *(_QWORD *)a2;
          v68 = *v77;
        }
        else
        {
          v70 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v70 + v69) = v68;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v30);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, HIDWORD(v24));
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v24);
    }
    else
    {
      LOBYTE(v91) = 0x80;
      v52 = *(unsigned int *)(a2 + 12);
      v53 = *(unsigned int *)(a2 + 16);
      if (v52 > v53)
      {
        *(_DWORD *)(a2 + 16) = v53 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v53) = 0x80;
        v56 = *(_DWORD *)(a2 + 12);
        v57 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v52 == *(_DWORD *)(a2 + 8))
        {
          v74 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v52 + 1), (unint64_t)&v91);
          v52 = *(unsigned int *)(a2 + 12);
          v54 = *(_QWORD *)a2;
          v55 = *v74;
        }
        else
        {
          v54 = *(_QWORD *)a2;
          v55 = 0x80;
        }
        *(_BYTE *)(v54 + v52) = v55;
        v56 = *(_DWORD *)(a2 + 12) + 1;
        v57 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v56;
        *(_DWORD *)(a2 + 16) = v57;
      }
      v58 = -71;
      LOBYTE(v91) = -71;
      if (v56 > v57)
      {
        *(_DWORD *)(a2 + 16) = v57 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v57) = -71;
      }
      else
      {
        v59 = v56;
        if (v56 == *(_DWORD *)(a2 + 8))
        {
          v75 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v56 + 1), (unint64_t)&v91);
          v59 = *(unsigned int *)(a2 + 12);
          v60 = *(_QWORD *)a2;
          v58 = *v75;
        }
        else
        {
          v60 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v60 + v59) = v58;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      v61 = v30 + 64;
      if (v30 <= 0x3FFFFFFF)
        v61 = v30;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v61);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, WORD2(v24));
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, (unsigned __int16)v24);
    }
  }
  if ((int *)(a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v13;
    if (a3)
    {
      result = v13;
      if (v13 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v13, v33, v34, v35, v36, v37);
        result = a3;
      }
    }
  }
  --*v13;
  return result;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isObject(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v10 = **(_BYTE ***)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v29 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = v14[1];
  if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v16, v17, v18, v19, v20, v21, v22) & 1) == 0
    && (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v16, v17, v23, v24, v25, v26, v27) & 1) == 0)
  {
    JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v16, v17, v23, v24, v25, v26, v27);
  }
  if ((int *)(a2 + 208) == a3)
  {
    a3 = 0;
  }
  else if (!a3 || (int *)v15 == a3)
  {
    a3 = (int *)v15;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, a3, v15, v23, v24, v25, v26, v27);
  }
  --*v14;
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isCallable(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  char v40;

  v10 = **(_BYTE ***)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v39 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v21 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v22 = *(_DWORD *)(v21 + 4);
  v23 = v14[1];
  v24 = (v22 - 1073741808) < 0x80;
  if (v22 <= 0x3FFFFFFF)
    v24 = (v22 + 128) < 0x90;
  if (v24
    && ((int)v23 <= 0x3FFFFFFF
      ? (v25 = (v23 + 128) < 0x90)
      : (v25 = (v23 - 1073741808) < 0x80),
        v25))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xB3, v15, v16, v17, v18, v19, v20);
    v40 = -77;
    v26 = *(unsigned int *)(a2 + 12);
    v27 = *(unsigned int *)(a2 + 16);
    if (v26 > v27)
    {
      *(_DWORD *)(a2 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v27) = -77;
    }
    else
    {
      if ((_DWORD)v26 == *(_DWORD *)(a2 + 8))
      {
        v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v26 + 1), (unint64_t)&v40);
        v26 = *(unsigned int *)(a2 + 12);
        v28 = *(_QWORD *)a2;
        v29 = *v38;
      }
      else
      {
        v28 = *(_QWORD *)a2;
        v29 = -77;
      }
      *(_BYTE *)(v28 + v26) = v29;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
    v30 = v22 + 16;
    if (v22 <= 0x3FFFFFFF)
      v30 = v22;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v30);
    v31 = v23 + 16;
    if ((int)v23 <= 0x3FFFFFFF)
      v31 = v23;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v31);
  }
  else if ((JSC::OpIsCallable::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v22, v14[1], v16, v17, v18, v19, v20) & 1) == 0)
  {
    JSC::OpIsCallable::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v22, v23, v32, v33, v34, v35, v36);
  }
  if ((int *)(a2 + 208) == a3)
  {
    a3 = 0;
  }
  else if (!a3 || (int *)v21 == a3)
  {
    a3 = (int *)v21;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, a3, v21, v32, v33, v34, v35, v36);
  }
  --*v14;
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isConstructor(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsConstructor((uint64_t)this, v12, v11[1], v13, v14, v15, v16, v17);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v18, v19, v20, v21, v22);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isJSArray(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v10 = **(_BYTE ***)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v28 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = v14[1];
  if ((JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v16, v17, 36, v18, v19, v20, v21) & 1) == 0&& (JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v16, v17, 36, v23, v24, v25, v26) & 1) == 0)
  {
    JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v16, v17, 36, v23, v24, v25, v26);
  }
  if ((int *)(a2 + 208) == a3)
  {
    a3 = 0;
  }
  else if (!a3 || (int *)v15 == a3)
  {
    a3 = (int *)v15;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, a3, v15, v22, v23, v24, v25, v26);
  }
  --*v14;
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isProxyObject(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 61, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isDerivedArray(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 37, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isGenerator(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 62, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isAsyncGenerator(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 63, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isPromise(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 68, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isRegExpObject(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v10 = **(_BYTE ***)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v28 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = v14[1];
  if ((JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v16, v17, 59, v18, v19, v20, v21) & 1) == 0&& (JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v16, v17, 59, v23, v24, v25, v26) & 1) == 0)
  {
    JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v16, v17, 59, v23, v24, v25, v26);
  }
  if ((int *)(a2 + 208) == a3)
  {
    a3 = 0;
  }
  else if (!a3 || (int *)v15 == a3)
  {
    a3 = (int *)v15;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, a3, v15, v22, v23, v24, v25, v26);
  }
  --*v14;
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isMap(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 69, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isSet(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 70, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isShadowRealm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  v8 = (int *)a3;
  v10 = **(_QWORD **)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v39 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v26 = *(_DWORD *)(a2 + 748) == 5) : (v26 = 0), !v26))
      {
        v27 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v27;
        *(_DWORD *)(a2 + 748) = 5;
        v28 = *(_DWORD *)(v10 + 8);
        v29 = *(_DWORD *)(v10 + 12);
        v30 = v10;
        v31 = *(_DWORD *)(v10 + 16);
        if (v28 != -1 || v29 != -1 || v31 != -1)
        {
          v34 = *(_QWORD *)(a2 + 192);
          v35 = *(_DWORD *)(v34 + 176);
          a3 = v29 - v35;
          v36 = v31 - v35;
          if (v31 < v35)
            v36 = 0;
          v37 = a3 >= v36;
          v38 = a3 - v36;
          if (v37)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v28 + ~*(_DWORD *)(v34 + 184)) | (unint64_t)(v38 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
        v10 = v30;
      }
    }
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType(a2, v15, v14[1], 58, v16, v17, v18, v19);
  if ((int *)(a2 + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v15 == v8)
  {
    v8 = (int *)v15;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, v8, v15, v20, v21, v22, v23, v24);
  }
  --*v14;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isStringIterator(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 67, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isArrayIterator(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 64, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isMapIterator(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 65, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isSetIterator(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::BytecodeGenerator::emitIsCellWithType((uint64_t)this, v12, v11[1], 66, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_isUndefinedOrNull(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v10 = **(_BYTE ***)(a1 + 96);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v29 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v14 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v15 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = v14[1];
  if ((JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v16, v17, v18, v19, v20, v21, v22) & 1) == 0&& (JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v16, v17, v23, v24, v25, v26, v27) & 1) == 0)
  {
    JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v16, v17, v23, v24, v25, v26, v27);
  }
  if ((int *)(a2 + 208) == a3)
  {
    a3 = 0;
  }
  else if (!a3 || (int *)v15 == a3)
  {
    a3 = (int *)v15;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, a3, v15, v23, v24, v25, v26, v27);
  }
  --*v14;
  return a3;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_mustValidateResultOfProxyGetAndSetTraps(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::OpHasStructureWithFlags::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, *(_DWORD *)(v12 + 4), v11[1], 0x80000000, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_mustValidateResultOfProxyTrapsExceptGetAndSet(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)a3;
  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = JSC::BytecodeGenerator::tempDestination((uint64_t)this, (uint64_t)v8);
  JSC::OpHasStructureWithFlags::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, *(_DWORD *)(v12 + 4), v11[1], 1074790400, v13, v14, v15, v16);
  if ((int *)((char *)this + 208) == v8)
  {
    v8 = 0;
  }
  else if (!v8 || (int *)v12 == v8)
  {
    v8 = (int *)v12;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove((uint64_t)this, v8, v12, v17, v18, v19, v20, v21);
  }
  --*v11;
  return v8;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_newArrayWithSize(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v10 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, **(JSC::ExpressionNode ***)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (v10)
    ++*v10;
  v12 = (_DWORD *)JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
  v18 = v12;
  if (v12)
  {
    ++*v12;
    JSC::BytecodeGenerator::emitNewArrayWithSize((uint64_t)this, (uint64_t)v12, v11[1], v13, v14, v15, v16, v17);
    --*v18;
  }
  else
  {
    JSC::BytecodeGenerator::emitNewArrayWithSize((uint64_t)this, 0, v11[1], v13, v14, v15, v16, v17);
  }
  --*v11;
  return v18;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_newArrayWithSpecies(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;

  v10 = **(JSC::ExpressionNode ****)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, (JSC::ExpressionNode *)v10, a3, a4, a5, a6, a7, a8);
  v18 = v11;
  if (v11)
    ++*v11;
  v19 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10[4], v12, v13, v14, v15, v16, v17);
  v20 = v19;
  if (v19)
    ++*v19;
  v21 = (_DWORD *)JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
  v22 = v21;
  if (v21)
  {
    ++*v21;
    JSC::BytecodeGenerator::emitNewArrayWithSpecies((uint64_t)this, (uint64_t)v21, v18[1], v20[1]);
    --*v22;
  }
  else
  {
    JSC::BytecodeGenerator::emitNewArrayWithSpecies((uint64_t)this, 0, v18[1], v20[1]);
  }
  --*v20;
  --*v18;
  return v22;
}

uint64_t JSC::BytecodeIntrinsicNode::emit_intrinsic_createPromise(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = **(JSC::ExpressionNode ***)(a1 + 96);
  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, v10, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v10 + 4) + 40) + 27);
  v14 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, a3, 0);
  JSC::OpCreatePromise::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)this, *(_DWORD *)(v14 + 4), v12[1], v13, v15, v16, v17, v18);
  --*v12;
  return v14;
}

_DWORD *JSC::BytecodeIntrinsicNode::emit_intrinsic_newPromise(int a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v11 = v4;
  if (v4)
  {
    ++*v4;
    JSC::BytecodeGenerator::emitNewPromise(a2, (uint64_t)v4, v5, v6, v7, v8, v9, v10);
    --*v11;
  }
  else
  {
    JSC::BytecodeGenerator::emitNewPromise(a2, 0, v5, v6, v7, v8, v9, v10);
  }
  return v11;
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_undefined(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 32);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_Infinity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::InfinityValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_iterationKindKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::iterationKindKeyValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_iterationKindValue(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::iterationKindValueValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_iterationKindEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::iterationKindEntriesValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_MAX_ARRAY_INDEX(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::MAX_ARRAY_INDEXValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_MAX_STRING_LENGTH(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 80);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_MAX_SAFE_INTEGER(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::MAX_SAFE_INTEGERValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleFetch(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  Value = JSC::BytecodeIntrinsicRegistry::ModuleFetchValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, Value, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleTranslate(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 104);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleInstantiate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::ModuleInstantiateValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleSatisfy(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::ModuleSatisfyValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleLink(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::ModuleLinkValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_ModuleReady(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t ready;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  ready = JSC::BytecodeIntrinsicRegistry::ModuleReadyValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, ready, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseRejectionReject(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 144);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseRejectionHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::promiseRejectionHandleValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStatePending(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::promiseStatePendingValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStateFulfilled(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::promiseStateFulfilledValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStateRejected(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::promiseStateRejectedValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseStateMask(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::promiseStateMaskValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFlagsIsHandled(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t IsHandledValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  IsHandledValue = JSC::BytecodeIntrinsicRegistry::promiseFlagsIsHandledValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, IsHandledValue, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFlagsIsFirstResolvingFunctionCalled(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t IsFirstResolvingFunctionCalledValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  IsFirstResolvingFunctionCalledValue = JSC::BytecodeIntrinsicRegistry::promiseFlagsIsFirstResolvingFunctionCalledValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, IsFirstResolvingFunctionCalledValue, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFieldFlags(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 208);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_promiseFieldReactionsOrResult(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 216);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_proxyFieldTarget(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 224);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_proxyFieldHandler(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 232);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldState(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 240);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldNext(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 248);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldThis(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 256);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldFrame(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 264);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_generatorFieldContext(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 272);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorResumeModeNormal(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::GeneratorResumeModeNormalValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorResumeModeThrow(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 288);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorResumeModeReturn(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::GeneratorResumeModeReturnValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorStateCompleted(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::GeneratorStateCompletedValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_GeneratorStateExecuting(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::GeneratorStateExecutingValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldIndex(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 320);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldIteratedObject(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 328);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_arrayIteratorFieldKind(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 336);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldEntry(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 344);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldIteratedObject(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 352);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldStorage(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 360);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_mapIteratorFieldKind(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 368);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldEntry(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 376);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldIteratedObject(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 384);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldStorage(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 392);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_setIteratorFieldKind(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 400);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_stringIteratorFieldIndex(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 408);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_stringIteratorFieldIteratedString(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 416);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldSuspendReason(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 424);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldQueueFirst(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 432);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_asyncGeneratorFieldQueueLast(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 440);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateCompleted(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateCompletedValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateExecuting(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateExecutingValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateAwaitingReturn(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateAwaitingReturnValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateSuspendedStart(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t started;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  started = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorStateSuspendedStartValue(*(_QWORD *)(*(_QWORD *)(a2 + 696)
                                                                                             + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, started, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorStateSuspendedYield(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 480);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorSuspendReasonYield(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorSuspendReasonYieldValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorSuspendReasonAwait(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorSuspendReasonAwaitValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_AsyncGeneratorSuspendReasonNone(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v5 = JSC::BytecodeIntrinsicRegistry::AsyncGeneratorSuspendReasonNoneValue(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392));
  return JSC::BytecodeGenerator::emitLoad(a2, a3, v5, v6, v7, v8, v9, v10);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_abstractModuleRecordFieldState(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  if ((int *)(a2 + 208) == a3)
    return 0;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 93392) + 512);
  if (v8)
    v8 = (_QWORD *)*v8;
  return JSC::BytecodeGenerator::emitLoad(a2, a3, (uint64_t)v8, a4, a5, a6, a7, a8);
}

int *JSC::BytecodeIntrinsicNode::emit_intrinsic_orderedHashTableSentinel(uint64_t a1, JSC::BytecodeGenerator *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((int *)((char *)a2 + 208) == a3)
    return 0;
  v10 = JSC::BytecodeIntrinsicRegistry::orderedHashTableSentinelValue(*(JSC::BytecodeIntrinsicRegistry **)(*((_QWORD *)a2 + 87) + 93392), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return JSC::BytecodeGenerator::emitLoad((uint64_t)a2, a3, v10, v11, v12, v13, v14, v15);
}

_DWORD *JSC::FunctionCallBracketNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  JSC::ExpressionNode *v11;
  int isNonIndexStringElement;
  JSC::BytecodeGenerator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  int v22;
  char v23;
  BOOL v24;
  char v25;
  char v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  _DWORD *v72;
  WTF *v73;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  __int16 v97;
  char v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  char v114;
  char v115[8];
  WTF *v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  char v120[28];
  uint64_t v121;
  int v122;

  v6 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
  v7 = v6;
  if (v6)
    ++*v6;
  v8 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v6);
  v9 = v8;
  if (v8)
    ++*v8;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72));
  isNonIndexStringElement = JSC::isNonIndexStringElement(*(JSC **)(a1 + 80), v11);
  v20 = isNonIndexStringElement;
  if (!v10)
  {
    v21 = *(_BYTE **)(a1 + 72);
    if (isNonIndexStringElement)
    {
      v25 = *(_BYTE *)(a2 + 709);
      v26 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104);
    }
    else
    {
      v22 = *(unsigned __int8 *)(a1 + 96);
      v23 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80), a2);
      v24 = *(_BYTE *)(a2 + 416) == 2 && v22 == 0;
      if (!v24 && (v23 & 1) == 0)
      {
        v76 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v32 = v76;
        if (v76)
          ++*v76;
        v82 = *(_BYTE *)(a2 + 709);
        v83 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v114 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v21[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v21 + 8), v77, v78, v79, v80, v81);
          (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v21 + 16))(v21, a2, v32);
        }
        *(_BYTE *)(a2 + 710) = v83;
        *(_BYTE *)(a2 + 709) = v82;
        goto LABEL_19;
      }
      v25 = *(_BYTE *)(a2 + 709);
      v26 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104);
    }
    if ((unint64_t)&v114 < v27)
    {
      *(_BYTE *)(a2 + 706) = 1;
      v28 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v21[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v21 + 8), v15, v16, v17, v18, v19);
      v28 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, a2, 0);
    }
    v32 = v28;
    *(_BYTE *)(a2 + 710) = v26;
    *(_BYTE *)(a2 + 709) = v25;
    if (v28)
      ++*v28;
LABEL_19:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 26))
      JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v32);
    v33 = 0;
    goto LABEL_22;
  }
  v99 = (int *)JSC::emitSuperBaseForCallee((JSC *)a2, v13, v14, v15, v16, v17, v18, v19);
  v32 = v99;
  if (v99)
    ++*v99;
  v33 = (int *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v100, v101, v102, v103, v104, v105, v106);
  ++*v33;
LABEL_22:
  if (v20)
  {
    v84 = *(_DWORD *)(a1 + 28) - *(unsigned __int16 *)(a1 + 68);
    v85 = *(_DWORD *)(a1 + 32) - *(unsigned __int16 *)(a1 + 64);
    v86 = *(_DWORD *)(a1 + 36) - *(unsigned __int16 *)(a1 + 70);
    if (v84 != -1 || v85 != -1 || v86 != -1)
    {
      v87 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v87 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v88 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 66);
        if ((*(_DWORD *)(a1 + 52) & v88 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v89 = *(_QWORD *)(a2 + 192);
          v90 = *(_DWORD *)(v89 + 176);
          v91 = v85 - v90;
          v48 = v86 >= v90;
          v92 = v86 - v90;
          if (!v48)
            v92 = 0;
          v48 = v91 >= v92;
          v93 = v91 - v92;
          if (v48)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v91, v85 - v87, v88 - v85, (v84 + ~*(_DWORD *)(v89 + 184)) | (unint64_t)(v93 << 32));
        }
      }
    }
    v94 = *(_QWORD *)(a1 + 80);
    v95 = *(WTF::AtomStringImpl **)(v94 + 32);
    if (v10)
      JSC::BytecodeGenerator::emitGetById(a2, v7, (uint64_t)v32, (uint64_t)v33, v95, v29, v30, v31);
    else
      JSC::BytecodeGenerator::emitGetById(a2, v7, (uint64_t)v32, *(WTF::AtomStringImpl **)(v94 + 32), (uint64_t)v95, v29, v30, v31);
  }
  else
  {
    v34 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, *(_QWORD *)(a1 + 80));
    v39 = v34;
    if (v34)
      ++*v34;
    v40 = *(_DWORD *)(a1 + 28) - *(unsigned __int16 *)(a1 + 68);
    v41 = *(_DWORD *)(a1 + 32) - *(unsigned __int16 *)(a1 + 64);
    v42 = *(_DWORD *)(a1 + 36) - *(unsigned __int16 *)(a1 + 70);
    if (v40 != -1 || v41 != -1 || v42 != -1)
    {
      v43 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v43 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v44 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 66);
        if ((*(_DWORD *)(a1 + 52) & v44 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v45 = *(_QWORD *)(a2 + 192);
          v46 = *(_DWORD *)(v45 + 176);
          v47 = v41 - v46;
          v48 = v42 >= v46;
          v49 = v42 - v46;
          if (!v48)
            v49 = 0;
          v48 = v47 >= v49;
          v50 = v47 - v49;
          if (v48)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v47, v41 - v43, v44 - v41, (v40 + ~*(_DWORD *)(v45 + 184)) | (unint64_t)(v50 << 32));
        }
      }
    }
    if (v10)
      JSC::BytecodeGenerator::emitGetByVal(a2, v7, (uint64_t)v32, (uint64_t)v33, (uint64_t)v39, v36, v37, v38);
    else
      JSC::BytecodeGenerator::emitGetByVal(a2, v7, (uint64_t)v32, (uint64_t)v39, v35, v36, v37, v38);
    if (v39)
      --*v39;
  }
  if (*(_BYTE *)(a1 + 97))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v7);
  JSC::CallArguments::CallArguments((uint64_t)v115, a2, *(uint64_t **)(a1 + 88), 0);
  if (v10)
  {
    JSC::BytecodeGenerator::emitTDZCheck(a2, *(_DWORD *)(a2 + 224), v51, v52, v53, v54, v55, v56);
    v57 = *(int **)v116;
    if (a2 + 208 == *(_QWORD *)v116 || !v57 || v57 == v33)
      goto LABEL_50;
    v58 = a2;
    v59 = (uint64_t)v33;
  }
  else
  {
    v57 = *(int **)v116;
    if (a2 + 208 == *(_QWORD *)v116 || !v57 || v57 == v32)
      goto LABEL_50;
    v58 = a2;
    v59 = (uint64_t)v32;
  }
  JSC::BytecodeGenerator::emitMove(v58, v57, v59, v52, v53, v54, v55, v56);
LABEL_50:
  v60 = (_DWORD *)(a1 + 28);
  v61 = (_DWORD *)(a1 + 40);
  v62 = (_DWORD *)(a1 + 52);
  if (*(_BYTE *)(a2 + 709))
  {
    v96 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v97 = *(_WORD *)(v96 + 28);
    v96 += 28;
    v98 = *(_BYTE *)(v96 + 2);
    *(_WORD *)v96 = v97 | 0x20;
    *(_BYTE *)(v96 + 2) = v98;
    JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v9, (uint64_t)v7, 0, (uint64_t)v115, v60, v61, v62);
  }
  else if (*(_BYTE *)(a2 + 710))
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v9, (uint64_t)v7, 0, (uint64_t)v115, v60, v61, v62, 1u);
  }
  else
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v9, (uint64_t)v7, 0, (uint64_t)v115, v60, v61, v62, 1u);
  }
  if (v9 && (*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    v107 = v9[1];
    v108 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v107, 0, 2, 0, v108, v109, v110);
    v111 = *(_DWORD *)(a1 + 44);
    v112 = *(_DWORD *)(a2 + 12) - 1;
    v113 = *(_QWORD *)(a2 + 24);
    HIDWORD(v121) = *(_DWORD *)(a1 + 56) - 1;
    v122 = v112;
    LODWORD(v121) = v111;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v113 + 232), &v122, &v121, (uint64_t)v120);
  }
  if (v118)
  {
    v70 = v116;
    v71 = 8 * v118;
    do
    {
      v72 = *(_DWORD **)v70;
      *(_QWORD *)v70 = 0;
      if (v72)
        --*v72;
      v70 = (WTF *)((char *)v70 + 8);
      v71 -= 8;
    }
    while (v71);
  }
  v73 = v116;
  if (&v119 != (uint64_t *)v116 && v116 != 0)
  {
    v116 = 0;
    v117 = 0;
    WTF::fastFree((unint64_t)v73, v63, v64, v65, v66, v67, v68, v69);
  }
  if (v33)
    --*v33;
  if (v32)
    --*v32;
  if (v9)
    --*v9;
  if (v7)
    --*v7;
  return v9;
}

uint64_t JSC::FunctionCallBracketNode::isOptionalCall(JSC::FunctionCallBracketNode *this)
{
  return *((unsigned __int8 *)this + 97);
}

uint64_t JSC::FunctionCallDotNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  int *v19;
  _BYTE *v20;
  char v21;
  char v22;
  JSC::BytecodeGenerator *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  int *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  _DWORD *v50;
  WTF *v51;
  uint64_t result;
  uint64_t v54;
  __int16 v55;
  char v56;
  uint64_t v57;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  char v89;
  _BYTE v90[8];
  WTF *v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  _DWORD *v95[3];
  uint64_t v96;
  int v97;

  v6 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
  v7 = v6;
  if (v6)
    ++*v6;
  v8 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v6);
  v9 = v8;
  if (v8)
    ++*v8;
  JSC::CallArguments::CallArguments((uint64_t)v90, a2, *(uint64_t **)(a1 + 96), 0);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 192) + 56))(*(_QWORD *)(a2 + 192))
    && (*(_BYTE *)(a2 + 711) & 2) == 0
    && (*(_WORD *)(*(_QWORD *)(a2 + 192) + 164) & 0x20) == 0
    && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 336))(a1, *(_QWORD *)(a2 + 696)))
  {
    v18 = ((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42)) & 0x940) == 0
       && ((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42)) & 0x8182) == 0;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(int **)v91;
  if (v10)
  {
    v57 = JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v11, v12, v13, v14, v15, v16, v17);
    if ((int *)(a2 + 208) != v19 && v19 != 0 && v19 != (int *)v57)
      JSC::BytecodeGenerator::emitMove(a2, v19, v57, v25, v26, v27, v28, v29);
  }
  else if (v18)
  {
    JSC::BytecodeGenerator::emitLoad(a2, *(int **)v91, 10, v13, v14, v15, v16, v17);
  }
  else
  {
    v20 = *(_BYTE **)(a1 + 32);
    v21 = *(_BYTE *)(a2 + 709);
    v22 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v89 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v20[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v20 + 8), v13, v14, v15, v16, v17);
      (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v20 + 16))(v20, a2, v19);
    }
    *(_BYTE *)(a2 + 710) = v22;
    *(_BYTE *)(a2 + 709) = v21;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 26))
    {
      v67 = *(int **)v91;
      v68 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v69 = *(_DWORD *)(v68 + 4);
      v70 = v67[1];
      result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v69, v70, v71, v72, v73, v74, v75);
      if ((result & 1) == 0)
      {
        result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v69, v70, v76, v77, v78, v79, v80);
        if ((result & 1) == 0)
          result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v69, v70, v76, v77, v78, v79, v80);
      }
      v81 = *(unsigned int *)(a2 + 628);
      if (!(_DWORD)v81)
      {
        __break(0xC471u);
        return result;
      }
      JSC::BytecodeGenerator::emitJumpIfTrue(a2, v68, *(_QWORD *)(*(_QWORD *)(a2 + 616) + 8 * v81 - 8), v76, v77, v78, v79, v80);
    }
  }
  v30 = *(_DWORD *)(a1 + 52) - *(unsigned __int16 *)(a1 + 92);
  v31 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 88);
  v32 = *(_DWORD *)(a1 + 60) - *(unsigned __int16 *)(a1 + 94);
  if (v30 != -1 || v31 != -1 || v32 != -1)
  {
    v33 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v33 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v34 = *(_DWORD *)(a1 + 80) - *(unsigned __int16 *)(a1 + 90);
      if ((*(_DWORD *)(a1 + 76) & v34 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v35 = *(_QWORD *)(a2 + 192);
        v36 = *(_DWORD *)(v35 + 176);
        v24 = v31 - v36;
        v37 = v32 >= v36;
        v38 = v32 - v36;
        if (!v37)
          v38 = 0;
        v37 = v24 >= v38;
        v39 = v24 - v38;
        if (v37)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v24, v31 - v33, v34 - v31, (v30 + ~*(_DWORD *)(v35 + 184)) | (unint64_t)(v39 << 32));
      }
    }
  }
  if (v18)
  {
    JSC::BytecodeGenerator::emitArgumentCount(a2, (uint64_t)v7, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    if (v10)
    {
      v60 = JSC::emitHomeObjectForCallee((JSC *)a2, v23, v24, v25, v26, v27, v28, v29);
      v61 = v60;
      if (v60)
        ++*v60;
      v40 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetPrototypeOf(a2, (uint64_t)v40, v61[1], v62, v63, v64, v65, v66);
      --*v61;
    }
    else
    {
      v40 = *(int **)v91;
    }
    if (v40)
      ++*v40;
    v95[0] = 0;
    JSC::BaseDotNode::emitGetPropertyValue(a1, a2, v7, (uint64_t)v40, v95, v27, v28, v29);
    if (v95[0])
      --*v95[0];
    if (v40)
      --*v40;
  }
  if (*(_BYTE *)(a1 + 104))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v7);
  if (*(_BYTE *)(a2 + 709))
  {
    v54 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v55 = *(_WORD *)(v54 + 28);
    v54 += 28;
    v56 = *(_BYTE *)(v54 + 2);
    *(_WORD *)v54 = v55 | 0x20;
    *(_BYTE *)(v54 + 2) = v56;
    JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v9, (uint64_t)v7, 0, (uint64_t)v90, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76));
  }
  else if (*(_BYTE *)(a2 + 710))
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v9, (uint64_t)v7, 0, (uint64_t)v90, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76), 1u);
  }
  else
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v9, (uint64_t)v7, 0, (uint64_t)v90, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76), 1u);
  }
  if (v9 && (*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    v82 = v9[1];
    v83 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v82, 0, 2, 0, v83, v84, v85);
    v86 = *(_DWORD *)(a1 + 68);
    v87 = *(_DWORD *)(a2 + 12) - 1;
    v88 = *(_QWORD *)(a2 + 24);
    HIDWORD(v96) = *(_DWORD *)(a1 + 80) - 1;
    v97 = v87;
    LODWORD(v96) = v86;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v88 + 232), &v97, &v96, (uint64_t)v95);
  }
  if (v93)
  {
    v48 = v91;
    v49 = 8 * v93;
    do
    {
      v50 = *(_DWORD **)v48;
      *(_QWORD *)v48 = 0;
      if (v50)
        --*v50;
      v48 = (WTF *)((char *)v48 + 8);
      v49 -= 8;
    }
    while (v49);
  }
  v51 = v91;
  if (&v94 != (uint64_t *)v91 && v91 != 0)
  {
    v91 = 0;
    v92 = 0;
    WTF::fastFree((unint64_t)v51, v41, v42, v43, v44, v45, v46, v47);
  }
  if (v9)
    --*v9;
  if (v7)
    --*v7;
  return (uint64_t)v9;
}

uint64_t JSC::FunctionCallDotNode::isOptionalCall(JSC::FunctionCallDotNode *this)
{
  return *((unsigned __int8 *)this + 104);
}

int *JSC::CallFunctionCallDotNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _BYTE *v12;
  char v13;
  char v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  _BYTE *v86;
  int v87;
  int v88;
  _DWORD *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  WTF *v98;
  uint64_t v99;
  _DWORD *v100;
  WTF *v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  _DWORD *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  _DWORD *v134;
  WTF *v135;
  int v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v142;
  __int16 v143;
  char v144;
  uint64_t v145;
  __int16 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  _DWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int *v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  int *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  _DWORD *v211;
  _DWORD *v212;
  uint64_t v213;
  _DWORD *v214;
  int v215;
  int v216;
  WTF *v217;
  _DWORD *v218;
  _BYTE v219[72];
  uint64_t v220[5];
  _DWORD *v221;
  int *v222;
  int *v223;
  uint64_t v224;
  int v225[3];

  v223 = a3;
  v5 = (int *)JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
  v11 = v5;
  if (v5)
    ++*v5;
  v12 = *(_BYTE **)(a1 + 32);
  v13 = *(_BYTE *)(a2 + 709);
  v14 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v208 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v15 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v12[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v12 + 8), v6, v7, v8, v9, v10);
    v15 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v14;
  *(_BYTE *)(a2 + 709) = v13;
  if (v15)
    ++*v15;
  v222 = v15;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 26))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v15);
  v22 = *(_DWORD *)(a1 + 52) - *(unsigned __int16 *)(a1 + 92);
  v23 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 88);
  v24 = *(_DWORD *)(a1 + 60) - *(unsigned __int16 *)(a1 + 94);
  v212 = (_DWORD *)(a1 + 64);
  if (v22 != -1 || v23 != -1 || v24 != -1)
  {
    v25 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v25 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v26 = *(_DWORD *)(a1 + 80) - *(unsigned __int16 *)(a1 + 90);
      if ((*(_DWORD *)(a1 + 76) & v26 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v27 = *(_QWORD *)(a2 + 192);
        v28 = *(_DWORD *)(v27 + 176);
        v16 = v23 - v28;
        v29 = v24 >= v28;
        v30 = v24 - v28;
        if (!v29)
          v30 = 0;
        v29 = v16 >= v30;
        v31 = v16 - v30;
        if (v29)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v16, v23 - v25, v26 - v23, (v22 + ~*(_DWORD *)(v27 + 184)) | (unint64_t)(v31 << 32));
      }
    }
  }
  v221 = 0;
  v220[0] = a1;
  v220[1] = a2;
  v220[2] = (uint64_t)&v221;
  v220[3] = (uint64_t)&v223;
  v220[4] = (uint64_t)&v222;
  v32 = *(unsigned __int8 *)(a2 + 707);
  if (*(_BYTE *)(a2 + 707) || *(_QWORD *)(a1 + 112) < 3uLL)
  {
    v211 = (_DWORD *)(a1 + 76);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v214, a2, v16, v17, v18, v19, v20, v21);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v213, a2, v33, v34, v35, v36, v37, v38);
    v210 = v32;
    if (!v32)
    {
      JSC::CallFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(v220);
      v39 = v214;
      v40 = v221[1];
      v49 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0xC6u, v41, v42, v43, v44, v45)[1];
      *((_BYTE *)v39 + 8) = 1;
      v50 = v39[1];
      v51 = (_DWORD)v50 == -1 ? v39 : (_DWORD *)v39[1];
      v52 = (_DWORD)v50 == -1 ? 1 : 2;
      v53 = v50 == 0xFFFFFFFFLL ? 1 : 2;
      v54 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
      *(_BYTE *)(v54 + 4) |= 1u;
      v55 = *(_QWORD *)(v54 + 16);
      v56 = *(unsigned int *)(v55 + 184);
      *(_DWORD *)(v55 + 184) = v56 + 1;
      LOBYTE(v215) = v53;
      v216 = 0;
      v217 = (WTF *)a2;
      v218 = v51;
      if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v40, v49, (unsigned __int8 *)&v215, v56, v46, v47, v48) & 1) == 0)
      {
        LOBYTE(v215) = v52;
        v216 = 0;
        v217 = (WTF *)a2;
        v218 = v51;
        if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v40, v49, (unsigned __int8 *)&v215, v56, v57, v58, v59) & 1) == 0)
        {
          LOBYTE(v215) = v52;
          v216 = 0;
          v217 = (WTF *)a2;
          v218 = v51;
          JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v40, v49, (unsigned __int8 *)&v215, v56, v148, v149, v150);
        }
      }
    }
    v60 = **(_QWORD **)(a1 + 96);
    if (v60)
    {
      v61 = *(_QWORD *)(v60 + 40);
      if (v61)
      {
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 232))(v61);
        v69 = *(uint64_t **)(a1 + 96);
        v70 = *v69;
        if (v62)
        {
          v171 = *(_QWORD *)(v70 + 40);
          v172 = (int *)JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(v171 + 64), v63, v64, v65, v66, v67, v68);
          v78 = v172;
          if (v172)
            ++*v172;
          JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(v171 + 28), (_DWORD *)(v171 + 40), (_DWORD *)(v171 + 52));
          v173 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          v179 = JSC::BytecodeGenerator::emitLoad(a2, 0, 0xFFFE000000000000, v174, v175, v176, v177, v178);
          JSC::BytecodeGenerator::emitGetByVal(a2, v173, (uint64_t)v78, (uint64_t)v179, v180, v181, v182, v183);
          v97 = v210;
          if (v173)
          {
            ++*v173;
            v184 = v222;
            v185 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            JSC::BytecodeGenerator::emitCallVarargsInTailPosition(a2, (uint64_t)v11, (uint64_t)v184, (uint64_t)v173, (uint64_t)v78, v185, 1, (_DWORD *)(a1 + 52), v212, v211);
            --*v173;
          }
          else
          {
            v206 = v222;
            v207 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            JSC::BytecodeGenerator::emitCallVarargsInTailPosition(a2, (uint64_t)v11, (uint64_t)v206, 0, (uint64_t)v78, v207, 1, (_DWORD *)(a1 + 52), v212, v211);
          }
          v89 = v211;
          if (!v78)
            goto LABEL_68;
LABEL_67:
          --*v78;
LABEL_68:
          if (!v97)
          {
            v103 = v213;
            *(_BYTE *)(v213 + 8) = 1;
            v104 = *(unsigned int *)(v103 + 4);
            if ((_DWORD)v104 == -1)
              v105 = v103;
            else
              v105 = *(unsigned int *)(v103 + 4);
            if ((_DWORD)v104 == -1)
              v106 = 1;
            else
              v106 = 2;
            if (v104 == 0xFFFFFFFFLL)
              v107 = 1;
            else
              v107 = 2;
            LOBYTE(v215) = v107;
            v216 = 0;
            v217 = (WTF *)a2;
            v218 = (_DWORD *)v105;
            if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v215, v91, v92, v93, v94, v95, v96) & 1) == 0)
            {
              LOBYTE(v215) = v106;
              v216 = 0;
              v217 = (WTF *)a2;
              v218 = (_DWORD *)v105;
              if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v215, v108, v109, v110, v111, v112, v113) & 1) == 0)
              {
                LOBYTE(v215) = v106;
                v216 = 0;
                v217 = (WTF *)a2;
                v218 = (_DWORD *)v105;
                JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v215);
              }
            }
            v114 = *(_DWORD *)(a2 + 16);
            JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v214, a2, v114, v109, v110, v111, v112, v113);
            v115 = *(_QWORD *)(a2 + 24);
            v116 = *(unsigned int *)(v115 + 28);
            if (!(_DWORD)v116 || v114 != *(_DWORD *)(*(_QWORD *)(v115 + 16) + 4 * v116 - 4))
            {
              v215 = v114;
              v117 = (_QWORD *)(v115 + 16);
              if ((_DWORD)v116 == *(_DWORD *)(v115 + 24))
                *(_DWORD *)(*(_QWORD *)(v115 + 16) + 4 * *(unsigned int *)(v115 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v116 + 1, (unint64_t)&v215);
              else
                *(_DWORD *)(*v117 + 4 * v116) = v114;
              ++*(_DWORD *)(v115 + 28);
              *(_DWORD *)(a2 + 36) = 115;
            }
            JSC::CallArguments::CallArguments((uint64_t)&v215, a2, *(uint64_t **)(a1 + 96), 0);
            v123 = *(int **)v217;
            if (a2 + 208 != *(_QWORD *)v217 && v123 && v123 != v222)
              JSC::BytecodeGenerator::emitMove(a2, v123, (uint64_t)v222, v118, v119, v120, v121, v122);
            v124 = v221;
            if (*(_BYTE *)(a2 + 709))
            {
              v145 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
              v146 = *(_WORD *)(v145 + 28);
              v145 += 28;
              v147 = *(_BYTE *)(v145 + 2);
              *(_WORD *)v145 = v146 | 0x20;
              *(_BYTE *)(v145 + 2) = v147;
              JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v11, (uint64_t)v124, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v89);
            }
            else if (*(_BYTE *)(a2 + 710))
            {
              JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v11, (uint64_t)v221, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v89, 1u);
            }
            else
            {
              JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v11, (uint64_t)v221, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v89, 1u);
            }
            if (HIDWORD(v218))
            {
              v132 = v217;
              v133 = 8 * HIDWORD(v218);
              do
              {
                v134 = *(_DWORD **)v132;
                *(_QWORD *)v132 = 0;
                if (v134)
                  --*v134;
                v132 = (WTF *)((char *)v132 + 8);
                v133 -= 8;
              }
              while (v133);
            }
            v135 = v217;
            if (v219 != (_BYTE *)v217 && v217 != 0)
            {
              v217 = 0;
              LODWORD(v218) = 0;
              WTF::fastFree((unint64_t)v135, v125, v126, v127, v128, v129, v130, v131);
            }
            v137 = *(_DWORD *)(a2 + 16);
            JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v103, a2, v137, v127, v128, v129, v130, v131);
            v138 = *(_QWORD *)(a2 + 24);
            v139 = *(unsigned int *)(v138 + 28);
            if (!(_DWORD)v139 || v137 != *(_DWORD *)(*(_QWORD *)(v138 + 16) + 4 * v139 - 4))
            {
              v215 = v137;
              v140 = (_QWORD *)(v138 + 16);
              if ((_DWORD)v139 == *(_DWORD *)(v138 + 24))
                *(_DWORD *)(*(_QWORD *)(v138 + 16) + 4 * *(unsigned int *)(v138 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, v139 + 1, (unint64_t)&v215);
              else
                *(_DWORD *)(*v140 + 4 * v139) = v137;
              ++*(_DWORD *)(v138 + 28);
              *(_DWORD *)(a2 + 36) = 115;
            }
          }
          if (v11 && (*(_BYTE *)(a2 + 104) & 2) != 0)
          {
            v199 = v11[1];
            v200 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
            JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v199, 0, 2, 0, v200, v201, v202);
            v203 = *(_DWORD *)(a1 + 68);
            v204 = *(_DWORD *)(a2 + 12) - 1;
            v205 = *(_QWORD *)(a2 + 24);
            HIDWORD(v224) = *(_DWORD *)(a1 + 80) - 1;
            v225[0] = v204;
            LODWORD(v224) = v203;
            WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v205 + 232), v225, &v224, (uint64_t)&v215);
          }
          if (v213)
            --*(_DWORD *)v213;
          if (v214)
            --*v214;
          goto LABEL_114;
        }
        if (v70 && *(_QWORD *)(v70 + 40))
        {
          *v69 = *(_QWORD *)(v70 + 32);
          v71 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v223);
          if ((int *)(a2 + 208) == v71)
          {
            v79 = (uint64_t)v11;
            v78 = 0;
          }
          else
          {
            v77 = v71;
            v78 = v222;
            if (v71 && v71 != v222)
            {
              v79 = (uint64_t)v11;
              JSC::BytecodeGenerator::emitMove(a2, v71, (uint64_t)v222, v72, v73, v74, v75, v76);
              v78 = v77;
LABEL_47:
              v209 = 0;
              ++*v78;
              goto LABEL_48;
            }
            v79 = (uint64_t)v11;
            if (v222)
              goto LABEL_47;
          }
          v209 = 1;
LABEL_48:
          JSC::CallArguments::CallArguments((uint64_t)&v215, a2, *(uint64_t **)(a1 + 96), 0);
          v85 = *(int **)v217;
          v86 = *(_BYTE **)(v70 + 40);
          v87 = *(unsigned __int8 *)(a2 + 709);
          v88 = *(unsigned __int8 *)(a2 + 710);
          *(_WORD *)(a2 + 709) = 0;
          if ((unint64_t)&v208 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
          {
            *(_BYTE *)(a2 + 706) = 1;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          }
          else
          {
            if (v86[24])
              JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v86 + 8), v80, v81, v82, v83, v84);
            (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v86 + 16))(v86, a2, v85);
          }
          *(_BYTE *)(a2 + 710) = v88;
          *(_BYTE *)(a2 + 709) = v87;
          v89 = v211;
          if (v87)
          {
            v142 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
            v143 = *(_WORD *)(v142 + 28);
            v142 += 28;
            v144 = *(_BYTE *)(v142 + 2);
            *(_WORD *)v142 = v143 | 0x20;
            *(_BYTE *)(v142 + 2) = v144;
            v11 = (int *)v79;
            JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, v79, (uint64_t)v78, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v89);
          }
          else if (v88)
          {
            v11 = (int *)v79;
            JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v79, (uint64_t)v78, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v211, 1u);
          }
          else
          {
            v11 = (int *)v79;
            JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, v79, (uint64_t)v78, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v211, 1u);
          }
          **(_QWORD **)(a1 + 96) = v70;
          v97 = v210;
          if (HIDWORD(v218))
          {
            v98 = v217;
            v99 = 8 * HIDWORD(v218);
            do
            {
              v100 = *(_DWORD **)v98;
              *(_QWORD *)v98 = 0;
              if (v100)
                --*v100;
              v98 = (WTF *)((char *)v98 + 8);
              v99 -= 8;
            }
            while (v99);
          }
          v101 = v217;
          if (v219 != (_BYTE *)v217 && v217 != 0)
          {
            v217 = 0;
            LODWORD(v218) = 0;
            WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
          }
          if ((v209 & 1) != 0)
            goto LABEL_68;
          goto LABEL_67;
        }
      }
    }
    v151 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v223);
    if ((int *)(a2 + 208) == v151)
    {
      v78 = 0;
      v158 = 1;
      v89 = v211;
      v97 = v210;
    }
    else
    {
      v157 = v151;
      v78 = v222;
      v89 = v211;
      if (v151 && v151 != v222)
      {
        JSC::BytecodeGenerator::emitMove(a2, v151, (uint64_t)v222, v152, v153, v154, v155, v156);
        v78 = v157;
        v97 = v210;
LABEL_138:
        v158 = 0;
        ++*v78;
        goto LABEL_139;
      }
      v97 = v210;
      if (v222)
        goto LABEL_138;
      v158 = 1;
    }
LABEL_139:
    JSC::CallArguments::CallArguments((uint64_t)&v215, a2, *(uint64_t **)(a1 + 96), 0);
    JSC::BytecodeGenerator::emitLoad(a2, *(int **)v217, 10, v159, v160, v161, v162, v163);
    JSC::BytecodeGenerator::emitCallInTailPosition(a2, (uint64_t)v11, (uint64_t)v78, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, v89);
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v215, v164, v165, v166, v167, v168, v169, v170);
    if ((v158 & 1) != 0)
      goto LABEL_68;
    goto LABEL_67;
  }
  JSC::CallFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(v220);
  JSC::CallArguments::CallArguments((uint64_t)&v215, a2, *(uint64_t **)(a1 + 96), 0);
  v191 = *(int **)v217;
  if (a2 + 208 != *(_QWORD *)v217 && v191 && v191 != v222)
    JSC::BytecodeGenerator::emitMove(a2, v191, (uint64_t)v222, v186, v187, v188, v189, v190);
  JSC::BytecodeGenerator::emitCallInTailPosition(a2, (uint64_t)v11, (uint64_t)v221, 0, (uint64_t)&v215, (_DWORD *)(a1 + 52), v212, (_DWORD *)(a1 + 76));
  v198 = v223;
  if ((int *)(a2 + 208) != v223 && v223 && v223 != v11)
    JSC::BytecodeGenerator::emitMove(a2, v223, (uint64_t)v11, v193, v194, v195, v196, v197);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v215, v198, v192, v193, v194, v195, v196, v197);
LABEL_114:
  if (v221)
    --*v221;
  if (v222)
    --*v222;
  if (v11)
    --*v11;
  return v11;
}

uint64_t JSC::CallFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _DWORD **v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *a1;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 32) + 240))(*(_QWORD *)(*a1 + 32));
  v11 = a1[1];
  if (v3)
  {
    v12 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a1[1], v4, v5, v6, v7, v8, v9, v10);
    ++*v12;
    v13 = a1[1];
    v14 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(v13, *(_QWORD *)a1[3]);
    result = (uint64_t)JSC::BytecodeGenerator::emitGetById(v13, v14, *(_QWORD *)a1[4], (uint64_t)v12, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 696) + 41952) + 48)+ 320), v15, v16, v17);
    v19 = (_DWORD **)a1[2];
    if (v14)
      ++*v14;
    v20 = *v19;
    *v19 = v14;
    if (v20)
      --*v20;
LABEL_9:
    --*v12;
    goto LABEL_10;
  }
  v21 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a1[1], *(_QWORD *)a1[3]);
  result = (uint64_t)JSC::BytecodeGenerator::emitGetById(v11, v21, *(_QWORD *)a1[4], (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 696) + 41952) + 48) + 320), v22, v23, v24, v25);
  v26 = (_DWORD **)a1[2];
  if (v21)
    ++*v21;
  v12 = *v26;
  *v26 = v21;
  if (v12)
    goto LABEL_9;
LABEL_10:
  if (*(_BYTE *)(v2 + 104))
  {
    v27 = a1[1];
    v28 = *(_QWORD *)a1[2];
    v29 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v27);
    v30 = *(_DWORD *)(v29 + 4);
    v31 = *(unsigned int *)(v28 + 4);
    result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v27, v30, v31, v32, v33, v34, v35, v36);
    if ((result & 1) == 0)
    {
      result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v27, v30, v31, v37, v38, v39, v40, v41);
      if ((result & 1) == 0)
        result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v27, v30, v31, v37, v38, v39, v40, v41);
    }
    v42 = *(unsigned int *)(v27 + 628);
    if ((_DWORD)v42)
      return JSC::BytecodeGenerator::emitJumpIfTrue(v27, v29, *(_QWORD *)(*(_QWORD *)(v27 + 616) + 8 * v42 - 8), v37, v38, v39, v40, v41);
    else
      __break(0xC471u);
  }
  return result;
}

_DWORD *JSC::HasOwnPropertyFunctionCallDotNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _BYTE *v12;
  char v13;
  char v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::AtomStringImpl *v125;
  BOOL v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  _DWORD *v145;
  WTF *v146;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  char v159;
  _DWORD *v160;
  WTF *v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  int v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _DWORD *v170;
  unsigned int v171;
  uint64_t *v172;
  uint64_t v173;
  WTF::StringImpl **v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  int *v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int16 v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[4];
  unsigned int v214;
  int v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  WTF *v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  char v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  char v228;
  uint64_t v229;
  uint64_t v230[2];

  v5 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v11 = v5;
  if (v5)
    ++*v5;
  v12 = *(_BYTE **)(a1 + 32);
  v13 = *(_BYTE *)(a2 + 709);
  v14 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v213 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v15 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v12[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v12 + 8), v6, v7, v8, v9, v10);
    v15 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, a2, 0);
  }
  v16 = v15;
  *(_BYTE *)(a2 + 710) = v14;
  *(_BYTE *)(a2 + 709) = v13;
  if (v15)
    ++*v15;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 26))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v15);
  v17 = *(_DWORD *)(a1 + 52) - *(unsigned __int16 *)(a1 + 92);
  v18 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 88);
  v19 = *(_DWORD *)(a1 + 60) - *(unsigned __int16 *)(a1 + 94);
  if (v17 != -1 || v18 != -1 || v19 != -1)
  {
    v20 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v20 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v21 = *(_DWORD *)(a1 + 80) - *(unsigned __int16 *)(a1 + 90);
      if ((*(_DWORD *)(a1 + 76) & v21 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v22 = *(_QWORD *)(a2 + 192);
        v23 = *(_DWORD *)(v22 + 176);
        v24 = v18 - v23;
        v25 = v19 >= v23;
        v26 = v19 - v23;
        if (!v25)
          v26 = 0;
        v25 = v24 >= v26;
        v27 = v24 - v26;
        if (v25)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v24, v18 - v20, v21 - v18, (v17 + ~*(_DWORD *)(v22 + 184)) | (unint64_t)(v27 << 32));
      }
    }
  }
  v28 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::BytecodeGenerator::emitGetById(a2, v28, (uint64_t)v16, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 1464), v29, v30, v31, v32);
  if (v28)
    ++*v28;
  if (*(_BYTE *)(a1 + 104))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v28);
  v33 = **(_QWORD **)(a1 + 96);
  if (!v33 || (v34 = *(_QWORD *)(v33 + 40)) == 0 || *(_QWORD *)(v33 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x19826E428);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 112))(v34) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19826E470);
  }
  v39.n128_f64[0] = JSC::BytecodeGenerator::variable((uint64_t)&v227, a2, *(_QWORD *)(v34 + 32), 0, v35, v36, v37, v38);
  if (v228 != 2)
    goto LABEL_104;
  v40 = 8 * *(unsigned int *)(a2 + 476) - 8;
  do
  {
    if (v40 == -8)
      goto LABEL_104;
    v41 = *(_QWORD *)(*(_QWORD *)(a2 + 464) + v40);
    v40 -= 8;
  }
  while (*(_QWORD *)(v41 + 8) != v229);
  if (!*(_BYTE *)(v41 + 88))
    goto LABEL_104;
  if (!(*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32), v39))
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 224))(*(_QWORD *)(a1 + 32)))
      goto LABEL_104;
    JSC::Symbols::thisPrivateName[0] += 2;
    v230[0] = (uint64_t)JSC::Symbols::thisPrivateName;
    JSC::BytecodeGenerator::variable((uint64_t)&v219, a2, (uint64_t)v230, 0, v121, v122, v123, v124);
    if (*(_BYTE *)(v41 + 88))
    {
      v127 = v219 == *(WTF::StringImpl **)(v41 + 48)
          && (v220 == *(unsigned __int8 *)(v41 + 56)
            ? (v126 = HIDWORD(v220) == *(_DWORD *)(v41 + 60))
            : (v126 = 0),
              v126
           && v221 == *(_QWORD *)(v41 + 64)
           && v222 == *(_DWORD *)(v41 + 72)
           && v223 == *(_DWORD *)(v41 + 76)
           && v224 == *(_DWORD *)(v41 + 80))
          && v225 == *(_BYTE *)(v41 + 84);
      if (v219)
      {
        if (*(_DWORD *)v219 == 2)
        {
          LODWORD(v218) = v127;
          WTF::StringImpl::~StringImpl(v219, v125, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
          v127 = v218;
        }
        else
        {
          *(_DWORD *)v219 -= 2;
        }
      }
      if (JSC::Symbols::thisPrivateName[0] == 2)
      {
        LODWORD(v218) = v127;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, v125, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
        v127 = v218;
      }
      else
      {
        JSC::Symbols::thisPrivateName[0] -= 2;
      }
      if (v127)
        goto LABEL_54;
LABEL_104:
      JSC::CallArguments::CallArguments((uint64_t)&v219, a2, *(uint64_t **)(a1 + 96), 0);
      v133 = *(int **)v220;
      if (a2 + 208 != *(_QWORD *)v220 && v133 != 0 && v133 != v16)
        JSC::BytecodeGenerator::emitMove(a2, v133, (uint64_t)v16, v128, v129, v130, v131, v132);
      if (*(_BYTE *)(a2 + 709))
      {
        v157 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
        v158 = *(_WORD *)(v157 + 28);
        v157 += 28;
        v159 = *(_BYTE *)(v157 + 2);
        *(_WORD *)v157 = v158 | 0x20;
        *(_BYTE *)(v157 + 2) = v159;
        JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v11, (uint64_t)v28, 0, (uint64_t)&v219, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76));
      }
      else if (*(_BYTE *)(a2 + 710))
      {
        JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v11, (uint64_t)v28, 0, (uint64_t)&v219, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76), 1u);
      }
      else
      {
        JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v11, (uint64_t)v28, 0, (uint64_t)&v219, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76), 1u);
      }
      if (HIDWORD(v221))
      {
        v143 = v220;
        v144 = 8 * HIDWORD(v221);
        do
        {
          v145 = *(_DWORD **)v143;
          *(_QWORD *)v143 = 0;
          if (v145)
            --*v145;
          v143 = (WTF *)((char *)v143 + 8);
          v144 -= 8;
        }
        while (v144);
      }
      v146 = v220;
      if (&v222 != (int *)v220 && v220 != 0)
      {
        v220 = 0;
        LODWORD(v221) = 0;
        WTF::fastFree((unint64_t)v146, v136, v137, v138, v139, v140, v141, v142);
      }
      goto LABEL_126;
    }
LABEL_181:
    v212 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_DWORD *)JSC::ApplyFunctionCallDotNode::emitBytecode(v212);
  }
  JSC::BytecodeGenerator::variable((uint64_t)&v219, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), 0, v42, v43, v44, v45);
  if (!*(_BYTE *)(v41 + 88))
    goto LABEL_181;
  v54 = v219 == *(WTF::StringImpl **)(v41 + 48)
     && (v220 == *(unsigned __int8 *)(v41 + 56)
       ? (v53 = HIDWORD(v220) == *(_DWORD *)(v41 + 60))
       : (v53 = 0),
         v53
      && v221 == *(_QWORD *)(v41 + 64)
      && v222 == *(_DWORD *)(v41 + 72)
      && v223 == *(_DWORD *)(v41 + 76)
      && v224 == *(_DWORD *)(v41 + 80))
     && v225 == *(_BYTE *)(v41 + 84);
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
    {
      LODWORD(v218) = v54;
      WTF::StringImpl::~StringImpl(v219, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
      LOBYTE(v54) = v218;
    }
    else
    {
      *(_DWORD *)v219 -= 2;
    }
  }
  if ((v54 & 1) == 0)
    goto LABEL_104;
LABEL_54:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v230, a2, v47, v48, v49, v50, v51, v52);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v226, a2, v55, v56, v57, v58, v59, v60);
  v217 = v28[1];
  v218 = v230[0];
  v66 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0xC7u, v61, v62, v63, v64, v65)[1];
  v70 = v218;
  *(_BYTE *)(v218 + 8) = 1;
  v71 = *(unsigned int *)(v70 + 4);
  if ((_DWORD)v71 != -1)
    v70 = *(unsigned int *)(v70 + 4);
  if (v71 == 0xFFFFFFFFLL)
    v72 = 1;
  else
    v72 = 2;
  v73 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
  *(_BYTE *)(v73 + 4) |= 1u;
  v74 = *(_QWORD *)(v73 + 16);
  v75 = *(unsigned int *)(v74 + 184);
  *(_DWORD *)(v74 + 184) = v75 + 1;
  LOBYTE(v219) = v72;
  HIDWORD(v219) = 0;
  v220 = (WTF *)a2;
  v221 = v70;
  JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v217, v66, (unsigned __int8 *)&v219, v75, v67, v68, v69);
  v81 = *(_DWORD *)(a2 + 48);
  v217 = *(_QWORD *)(v41 + 40);
  v216 = *(unsigned __int8 *)(a2 + 709);
  v82 = *(unsigned __int8 *)(a2 + 710);
  v214 = v81;
  v215 = v82;
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v213 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v83 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v34 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v34 + 8, v76, v77, v78, v79, v80);
    v83 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(v34, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v215;
  *(_BYTE *)(a2 + 709) = v216;
  JSC::BytecodeGenerator::emitEnumeratorHasOwnProperty(a2, (uint64_t)v11, v16[1], *(unsigned int *)(v217 + 4), *(unsigned int *)(v83 + 4), *(unsigned int *)(*(_QWORD *)(v41 + 24) + 4), *(unsigned int *)(*(_QWORD *)(v41 + 32) + 4), v84);
  v91 = (_DWORD *)v226;
  *(_BYTE *)(v226 + 8) = 1;
  v92 = v91[1];
  v217 = (unint64_t)v91;
  if ((_DWORD)v92 == -1)
    v93 = (uint64_t)v91;
  else
    v93 = v92;
  if ((_DWORD)v92 == -1)
    v94 = 1;
  else
    v94 = 2;
  v216 = v94;
  if (v92 == 0xFFFFFFFFLL)
    v95 = 1;
  else
    v95 = 2;
  LOBYTE(v219) = v95;
  HIDWORD(v219) = 0;
  v220 = (WTF *)a2;
  v221 = v93;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v219, v85, v86, v87, v88, v89, v90) & 1) == 0)
  {
    LOBYTE(v219) = v216;
    HIDWORD(v219) = 0;
    v220 = (WTF *)a2;
    v221 = v93;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v219, v96, v97, v98, v99, v100, v101) & 1) == 0)
    {
      LOBYTE(v219) = v216;
      HIDWORD(v219) = 0;
      v220 = (WTF *)a2;
      v221 = v93;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v219);
    }
  }
  v102 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v218, a2, v102, v97, v98, v99, v100, v101);
  v103 = v102;
  v104 = *(_QWORD *)(a2 + 24);
  v105 = *(unsigned int *)(v104 + 28);
  if (!(_DWORD)v105 || v103 != *(_DWORD *)(*(_QWORD *)(v104 + 16) + 4 * v105 - 4))
  {
    LODWORD(v219) = v103;
    v106 = (uint64_t *)(v104 + 16);
    if ((_DWORD)v105 == *(_DWORD *)(v104 + 24))
    {
      v177 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v105 + 1, (unint64_t)&v219);
      v105 = *(unsigned int *)(v104 + 28);
      v107 = *(_QWORD *)(v104 + 16);
      v103 = *v177;
    }
    else
    {
      v107 = *v106;
    }
    *(_DWORD *)(v107 + 4 * v105) = v103;
    ++*(_DWORD *)(v104 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::CallArguments::CallArguments((uint64_t)&v219, a2, *(uint64_t **)(a1 + 96), 0);
  v113 = *(int **)v220;
  if (a2 + 208 != *(_QWORD *)v220 && v113 && v113 != v16)
    JSC::BytecodeGenerator::emitMove(a2, v113, (uint64_t)v16, v108, v109, v110, v111, v112);
  if (*(_BYTE *)(a2 + 709))
  {
    v202 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
    v203 = *(_WORD *)(v202 + 28);
    v202 += 28;
    v204 = *(_BYTE *)(v202 + 2);
    *(_WORD *)v202 = v203 | 0x20;
    *(_BYTE *)(v202 + 2) = v204;
    JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)v11, (uint64_t)v28, 0, (uint64_t)&v219, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76));
  }
  else if (*(_BYTE *)(a2 + 710))
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)v11, (uint64_t)v28, 0, (uint64_t)&v219, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76), 1u);
  }
  else
  {
    JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v11, (uint64_t)v28, 0, (uint64_t)&v219, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76), 1u);
  }
  v160 = (_DWORD *)v217;
  if (HIDWORD(v221))
  {
    v161 = v220;
    v162 = 8 * HIDWORD(v221);
    do
    {
      v163 = *(_DWORD **)v161;
      *(_QWORD *)v161 = 0;
      if (v163)
        --*v163;
      v161 = (WTF *)((char *)v161 + 8);
      v162 -= 8;
    }
    while (v162);
  }
  v164 = v220;
  if (&v222 != (int *)v220 && v220 != 0)
  {
    v220 = 0;
    LODWORD(v221) = 0;
    WTF::fastFree((unint64_t)v164, v114, v115, v116, v117, v118, v119, v120);
  }
  v166 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v160, a2, v166, v116, v117, v118, v119, v120);
  v167 = *(_QWORD *)(a2 + 24);
  v168 = *(unsigned int *)(v167 + 28);
  if (!(_DWORD)v168 || v166 != *(_DWORD *)(*(_QWORD *)(v167 + 16) + 4 * v168 - 4))
  {
    LODWORD(v219) = v166;
    v169 = (_QWORD *)(v167 + 16);
    if ((_DWORD)v168 == *(_DWORD *)(v167 + 24))
      *(_DWORD *)(*(_QWORD *)(v167 + 16) + 4 * *(unsigned int *)(v167 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v169, v168 + 1, (unint64_t)&v219);
    else
      *(_DWORD *)(*v169 + 4 * v168) = v166;
    ++*(_DWORD *)(v167 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v170 = (_DWORD *)v218;
  if (!*(_BYTE *)(v218 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x19826E638);
  }
  v171 = *(_DWORD *)(v218 + 4);
  if (v171 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19826E66CLL);
  }
  *(_BYTE *)(v218 + 8) = 1;
  v172 = (uint64_t *)(v41 + 152);
  v219 = (WTF::StringImpl *)__PAIR64__(v171, v214);
  v173 = *(unsigned int *)(v41 + 164);
  if ((_DWORD)v173 == *(_DWORD *)(v41 + 160))
  {
    v174 = (WTF::StringImpl **)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v172, v173 + 1, (unint64_t)&v219);
    v173 = *(unsigned int *)(v41 + 164);
    v175 = *(_QWORD *)(v41 + 152);
    v176 = *v174;
  }
  else
  {
    v175 = *v172;
    v176 = v219;
  }
  *(_QWORD *)(v175 + 8 * v173) = v176;
  ++*(_DWORD *)(v41 + 164);
  if (v160)
    --*v160;
  --*v170;
LABEL_126:
  if (v11 && (*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    v205 = v11[1];
    v206 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v205, 0, 2, 0, v206, v207, v208);
    v209 = *(_DWORD *)(a1 + 68);
    v210 = *(_DWORD *)(a1 + 80) - 1;
    v211 = *(_QWORD *)(a2 + 24);
    LODWORD(v226) = *(_DWORD *)(a2 + 12) - 1;
    v230[0] = __PAIR64__(v210, v209);
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v211 + 232), (int *)&v226, v230, (uint64_t)&v219);
  }
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
    {
      WTF::StringImpl::~StringImpl(v227, (WTF::AtomStringImpl *)v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v227 -= 2;
    }
  }
  if (v28)
    --*v28;
  if (v16)
    --*v16;
  if (v11)
    --*v11;
  return v11;
}

int *JSC::ApplyFunctionCallDotNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *i;
  _BYTE *v16;
  char v17;
  char v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int *v74;
  uint64_t v75;
  char v76;
  _BYTE *v77;
  char v78;
  char v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  _BYTE *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  WTF *v145;
  uint64_t v146;
  _DWORD *v147;
  WTF *v148;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  _QWORD *v165;
  uint64_t v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  int *v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  _BYTE *v182;
  int v183;
  int v184;
  void *v185;
  WTF *v186;
  uint64_t v187;
  _DWORD *v188;
  WTF *v189;
  uint64_t v191;
  __int16 v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  uint64_t v227;
  __int16 v228;
  char v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int *v250;
  int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int *v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int *v264;
  int *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int *v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  int v298;
  _DWORD *v299;
  _DWORD *v300;
  uint64_t v301;
  int *v302;
  int *v303;
  uint64_t v304;
  _DWORD *v305;
  _DWORD *(*v306)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  WTF *v307;
  int **v308;
  _QWORD v309[9];
  uint64_t v310[5];
  _DWORD *v311;
  int *v312;
  int *v313;
  uint64_t v314[2];

  v313 = a3;
  v6 = **(_QWORD **)(a1 + 96);
  if (v6 && *(_QWORD *)(v6 + 40) && (v7 = *(_QWORD *)(v6 + 32)) != 0)
  {
    if (*(_QWORD *)(v7 + 32))
      v8 = 0;
    else
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 40) + 192))(*(_QWORD *)(v7 + 40));
  }
  else
  {
    v8 = 1;
  }
  v9 = (int *)JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
  i = v9;
  if (v9)
    ++*v9;
  v16 = *(_BYTE **)(a1 + 32);
  v17 = *(_BYTE *)(a2 + 709);
  v18 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v295 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v19 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v16[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v16 + 8), v10, v11, v12, v13, v14);
    v19 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v18;
  *(_BYTE *)(a2 + 709) = v17;
  if (v19)
    ++*v19;
  v312 = v19;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 26))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v19);
  v310[0] = a1;
  v310[1] = a2;
  v310[2] = (uint64_t)&v311;
  v310[3] = (uint64_t)&v313;
  v310[4] = (uint64_t)&v312;
  v311 = 0;
  v26 = *(unsigned __int8 *)(a2 + 707);
  if (*(_BYTE *)(a2 + 707) || *(_QWORD *)(a1 + 112) < 3uLL)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v305, a2, v20, v21, v22, v23, v24, v25);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v304, a2, v27, v28, v29, v30, v31, v32);
    v33 = (_DWORD *)(a1 + 52);
    v34 = *(_DWORD *)(a1 + 52) - *(unsigned __int16 *)(a1 + 92);
    v35 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 88);
    v36 = *(_DWORD *)(a1 + 60) - *(unsigned __int16 *)(a1 + 94);
    v37 = *(_DWORD *)(a1 + 76);
    v300 = (_DWORD *)(a1 + 76);
    if (v34 != -1 || v35 != -1 || v36 != -1)
    {
      v38 = *(_DWORD *)(a1 + 68);
      if (*(_DWORD *)(a1 + 64) != -1 || v38 != -1 || *(_DWORD *)(a1 + 72) != -1)
      {
        v39 = *(_DWORD *)(a1 + 80) - *(unsigned __int16 *)(a1 + 90);
        if ((v37 & v39 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v40 = *(_QWORD *)(a2 + 192);
          v41 = *(_DWORD *)(v40 + 176);
          v42 = v35 - v41;
          v43 = v36 >= v41;
          v44 = v36 - v41;
          if (!v43)
            v44 = 0;
          v43 = v42 >= v44;
          v45 = v42 - v44;
          if (v43)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v42, v35 - v38, v39 - v35, (v34 + ~*(_DWORD *)(v40 + 184)) | (unint64_t)(v45 << 32));
        }
      }
    }
    v301 = a1;
    v299 = (_DWORD *)(a1 + 64);
    v298 = v26;
    if (!v26)
    {
      JSC::ApplyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(v310);
      v46 = (unint64_t)v305;
      v47 = v311[1];
      v56 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0xC5u, v48, v49, v50, v51, v52)[1];
      *(_BYTE *)(v46 + 8) = 1;
      v57 = *(unsigned int *)(v46 + 4);
      if ((_DWORD)v57 == -1)
      {
        v58 = 1;
      }
      else
      {
        v46 = *(unsigned int *)(v46 + 4);
        v58 = 2;
      }
      v59 = v57 == 0xFFFFFFFFLL ? 1 : 2;
      v60 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
      *(_BYTE *)(v60 + 4) |= 1u;
      v61 = *(_QWORD *)(v60 + 16);
      v62 = *(unsigned int *)(v61 + 184);
      *(_DWORD *)(v61 + 184) = v62 + 1;
      LOBYTE(v306) = v59;
      HIDWORD(v306) = 0;
      v307 = (WTF *)a2;
      v308 = (int **)v46;
      if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v47, v56, (unsigned __int8 *)&v306, v62, v53, v54, v55) & 1) == 0)
      {
        LOBYTE(v306) = v58;
        HIDWORD(v306) = 0;
        v307 = (WTF *)a2;
        v308 = (int **)v46;
        if ((JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v47, v56, (unsigned __int8 *)&v306, v62, v63, v64, v65) & 1) == 0)
        {
          LOBYTE(v306) = v58;
          HIDWORD(v306) = 0;
          v307 = (WTF *)a2;
          v308 = (int **)v46;
          JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v47, v56, (unsigned __int8 *)&v306, v62, v194, v195, v196);
        }
      }
    }
    if (!v8)
    {
      v66 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v313);
      v72 = v301;
      if ((int *)(a2 + 208) == v66)
      {
        v75 = (uint64_t)i;
        v74 = 0;
      }
      else
      {
        v73 = v66;
        v74 = v312;
        if (v66 && v66 != v312)
        {
          v75 = (uint64_t)i;
          JSC::BytecodeGenerator::emitMove(a2, v66, (uint64_t)v312, v67, v68, v69, v70, v71);
          v74 = v73;
LABEL_45:
          v76 = 0;
          ++*v74;
          goto LABEL_46;
        }
        v75 = (uint64_t)i;
        if (v312)
          goto LABEL_45;
      }
      v76 = 1;
LABEL_46:
      v77 = *(_BYTE **)(**(_QWORD **)(v72 + 96) + 40);
      v78 = *(_BYTE *)(a2 + 709);
      v79 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v295 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v80 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v77[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v77 + 8), v67, v68, v69, v70, v71);
        v80 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v77 + 16))(v77, a2, 0);
      }
      v86 = v80;
      if (v80)
        ++*v80;
      v87 = *(_QWORD *)(**(_QWORD **)(v72 + 96) + 32);
      v88 = *(_BYTE **)(v87 + 40);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v295 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v89 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v88[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v88 + 8), v81, v82, v83, v84, v85);
        v89 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v88 + 16))(v88, a2, 0);
      }
      v96 = v89;
      *(_BYTE *)(a2 + 710) = v79;
      *(_BYTE *)(a2 + 709) = v78;
      if (v89)
        ++*v89;
      v97 = *(_QWORD *)(v87 + 32);
      for (i = (int *)v75; v97; v97 = *(_QWORD *)(v97 + 32))
        JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(v97 + 40), v90, v91, v92, v93, v94, v95);
      v98 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      if (*(_BYTE *)(a2 + 709))
        JSC::BytecodeGenerator::emitCallVarargs<JSC::OpTailCallVarargs>(a2, v75, (uint64_t)v74, (uint64_t)v86, (uint64_t)v96, v98, 0, v33, v299, v300);
      else
        JSC::BytecodeGenerator::emitCallVarargs<JSC::OpCallVarargs>(a2, v75, (uint64_t)v74, (uint64_t)v86, (uint64_t)v96, v98, 0, v33, v299, v300, 1);
      if (v96)
        --*v96;
      if (v86)
        --*v86;
      v105 = v301;
      v106 = v298;
      if ((v76 & 1) != 0)
        goto LABEL_67;
LABEL_66:
      --*v74;
LABEL_67:
      if (!v106)
      {
        v107 = v304;
        *(_BYTE *)(v304 + 8) = 1;
        v108 = *(unsigned int *)(v107 + 4);
        if ((_DWORD)v108 == -1)
          v109 = v107;
        else
          v109 = *(unsigned int *)(v107 + 4);
        if ((_DWORD)v108 == -1)
          v110 = 1;
        else
          v110 = 2;
        if (v108 == 0xFFFFFFFFLL)
          v111 = 1;
        else
          v111 = 2;
        LOBYTE(v306) = v111;
        HIDWORD(v306) = 0;
        v307 = (WTF *)a2;
        v308 = (int **)v109;
        if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v306, v99, v100, v101, v102, v103, v104) & 1) == 0)
        {
          LOBYTE(v306) = v110;
          HIDWORD(v306) = 0;
          v307 = (WTF *)a2;
          v308 = (int **)v109;
          if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v306, v112, v113, v114, v115, v116, v117) & 1) == 0)
          {
            LOBYTE(v306) = v110;
            HIDWORD(v306) = 0;
            v307 = (WTF *)a2;
            v308 = (int **)v109;
            JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v306);
          }
        }
        v118 = *(_DWORD *)(a2 + 16);
        JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v305, a2, v118, v113, v114, v115, v116, v117);
        v119 = *(_QWORD *)(a2 + 24);
        v120 = *(unsigned int *)(v119 + 28);
        if (!(_DWORD)v120 || v118 != *(_DWORD *)(*(_QWORD *)(v119 + 16) + 4 * v120 - 4))
        {
          LODWORD(v306) = v118;
          v121 = (_QWORD *)(v119 + 16);
          if ((_DWORD)v120 == *(_DWORD *)(v119 + 24))
            *(_DWORD *)(*(_QWORD *)(v119 + 16) + 4 * *(unsigned int *)(v119 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v120 + 1, (unint64_t)&v306);
          else
            *(_DWORD *)(*v121 + 4 * v120) = v118;
          ++*(_DWORD *)(v119 + 28);
          *(_DWORD *)(a2 + 36) = 115;
        }
        JSC::CallArguments::CallArguments((uint64_t)&v306, a2, *(uint64_t **)(v105 + 96), 0);
        v127 = *(int **)v307;
        if (a2 + 208 != *(_QWORD *)v307 && v127 && v127 != v312)
          JSC::BytecodeGenerator::emitMove(a2, v127, (uint64_t)v312, v122, v123, v124, v125, v126);
        v128 = v311;
        if (*(_BYTE *)(a2 + 709))
        {
          v191 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
          v192 = *(_WORD *)(v191 + 28);
          v191 += 28;
          v193 = *(_BYTE *)(v191 + 2);
          *(_WORD *)v191 = v192 | 0x20;
          *(_BYTE *)(v191 + 2) = v193;
          JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)i, (uint64_t)v128, 0, (uint64_t)&v306, v33, v299, v300);
        }
        else if (*(_BYTE *)(a2 + 710))
        {
          JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)i, (uint64_t)v311, 0, (uint64_t)&v306, v33, v299, v300, 1u);
        }
        else
        {
          JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)i, (uint64_t)v311, 0, (uint64_t)&v306, v33, v299, v300, 1u);
        }
        v134 = *(_DWORD *)(a2 + 16);
        JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v107, a2, v134, v129, v130, v131, v132, v133);
        v142 = *(_QWORD *)(a2 + 24);
        v143 = *(unsigned int *)(v142 + 28);
        if (!(_DWORD)v143 || v134 != *(_DWORD *)(*(_QWORD *)(v142 + 16) + 4 * v143 - 4))
        {
          LODWORD(v314[0]) = v134;
          v144 = (_QWORD *)(v142 + 16);
          if ((_DWORD)v143 == *(_DWORD *)(v142 + 24))
            *(_DWORD *)(*(_QWORD *)(v142 + 16) + 4 * *(unsigned int *)(v142 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v144, v143 + 1, (unint64_t)v314);
          else
            *(_DWORD *)(*v144 + 4 * v143) = v134;
          ++*(_DWORD *)(v142 + 28);
          *(_DWORD *)(a2 + 36) = 115;
        }
        if (HIDWORD(v308))
        {
          v145 = v307;
          v146 = 8 * HIDWORD(v308);
          do
          {
            v147 = *(_DWORD **)v145;
            *(_QWORD *)v145 = 0;
            if (v147)
              --*v147;
            v145 = (WTF *)((char *)v145 + 8);
            v146 -= 8;
          }
          while (v146);
        }
        v148 = v307;
        if (v309 != (_QWORD *)v307 && v307 != 0)
        {
          v307 = 0;
          LODWORD(v308) = 0;
          WTF::fastFree((unint64_t)v148, v135, v136, v137, v138, v139, v140, v141);
        }
      }
      if (i && (*(_BYTE *)(a2 + 104) & 2) != 0)
      {
        v288 = i[1];
        v289 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
        JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v288, 0, 2, 0, v289, v290, v291);
        v292 = *(_DWORD *)(v105 + 68);
        v293 = *(_DWORD *)(v105 + 80) - 1;
        v294 = *(_QWORD *)(a2 + 24);
        LODWORD(v303) = *(_DWORD *)(a2 + 12) - 1;
        v314[0] = __PAIR64__(v293, v292);
        WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v294 + 232), (int *)&v303, v314, (uint64_t)&v306);
      }
      if (v304)
        --*(_DWORD *)v304;
      if (v305)
        --*v305;
      goto LABEL_113;
    }
    v105 = v301;
    v151 = **(_QWORD **)(v301 + 96);
    if (v151)
    {
      v152 = *(_QWORD *)(v151 + 40);
      if (v152)
      {
        v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 232))(v152);
        v154 = *(uint64_t **)(v105 + 96);
        v155 = *v154;
        if (!v153)
        {
          v156 = *(_QWORD *)(v155 + 32);
          if (v156)
          {
            v157 = i;
            v158 = *(_QWORD *)(*(_QWORD *)(v156 + 40) + 32);
            v297 = v151;
            if (v158)
            {
              v159 = v151;
              v160 = *(_QWORD *)(a2 + 192);
              v161 = (uint64_t *)(v160 + 48);
              v162 = *(_QWORD *)(v160 + 48);
              if ((unint64_t)(*(_QWORD *)(v160 + 56) - v162) <= 0x2F)
              {
                JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)(v160 + 48));
                v162 = *v161;
              }
              *v161 = v162 + 48;
              v163 = *(_QWORD *)(v158 + 8);
              v164 = xmmword_199124400;
              *(_OWORD *)(v162 + 8) = xmmword_199124400;
              *(_BYTE *)(v162 + 24) = 0;
              *(_BYTE *)(v162 + 25) = 126;
              *(_BYTE *)(v162 + 26) = 0;
              *(_QWORD *)v162 = &off_1E3585948;
              *(_QWORD *)(v162 + 32) = 0;
              *(_QWORD *)(v162 + 40) = v163;
              v165 = *(_QWORD **)v158;
              if (v165)
              {
                v204 = v162;
                do
                {
                  v205 = *(_QWORD *)(v160 + 48);
                  if ((unint64_t)(*(_QWORD *)(v160 + 56) - v205) <= 0x2F)
                  {
                    v296 = v164;
                    JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)(v160 + 48));
                    v164 = v296;
                    v205 = *v161;
                  }
                  *v161 = v205 + 48;
                  v206 = v165[1];
                  *(_OWORD *)(v205 + 8) = v164;
                  *(_BYTE *)(v205 + 24) = 0;
                  *(_WORD *)(v205 + 25) = 126;
                  *(_QWORD *)v205 = &off_1E3585948;
                  *(_QWORD *)(v205 + 32) = 0;
                  *(_QWORD *)(v205 + 40) = v206;
                  *(_QWORD *)(v204 + 32) = v205;
                  v165 = (_QWORD *)*v165;
                  v204 = v205;
                }
                while (v165);
                v151 = v297;
              }
              else
              {
                v151 = v159;
              }
            }
            else
            {
              v162 = 0;
            }
            v166 = v301;
            **(_QWORD **)(v301 + 96) = v162;
            v167 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v313);
            if ((int *)(a2 + 208) == v167)
            {
              v174 = 0;
              v175 = 1;
              i = v157;
            }
            else
            {
              v173 = v167;
              v174 = v312;
              if (v167 && v167 != v312)
              {
                JSC::BytecodeGenerator::emitMove(a2, v167, (uint64_t)v312, v168, v169, v170, v171, v172);
                v174 = v173;
                i = v157;
LABEL_141:
                v175 = 0;
                ++*v174;
                goto LABEL_142;
              }
              i = v157;
              if (v312)
                goto LABEL_141;
              v175 = 1;
            }
LABEL_142:
            JSC::CallArguments::CallArguments((uint64_t)&v306, a2, *(uint64_t **)(v166 + 96), 0);
            v181 = *(int **)v307;
            v182 = *(_BYTE **)(v151 + 40);
            v183 = *(unsigned __int8 *)(a2 + 709);
            v184 = *(unsigned __int8 *)(a2 + 710);
            *(_WORD *)(a2 + 709) = 0;
            if ((unint64_t)&v295 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
            {
              *(_BYTE *)(a2 + 706) = 1;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            }
            else
            {
              if (v182[24])
                JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v182 + 8), v176, v177, v178, v179, v180);
              (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v182 + 16))(v182, a2, v181);
            }
            *(_BYTE *)(a2 + 710) = v184;
            *(_BYTE *)(a2 + 709) = v183;
            v105 = v301;
            v106 = v298;
            if (v183)
            {
              v227 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
              v228 = *(_WORD *)(v227 + 28);
              v227 += 28;
              v229 = *(_BYTE *)(v227 + 2);
              *(_WORD *)v227 = v228 | 0x20;
              *(_BYTE *)(v227 + 2) = v229;
              JSC::BytecodeGenerator::emitCall<JSC::OpTailCall>(a2, (uint64_t)i, (uint64_t)v174, 0, (uint64_t)&v306, v33, v299, v300);
            }
            else if (v184)
            {
              JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, (uint64_t)i, (uint64_t)v174, 0, (uint64_t)&v306, v33, v299, v300, 1u);
            }
            else
            {
              JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)i, (uint64_t)v174, 0, (uint64_t)&v306, v33, v299, v300, 1u);
            }
            v151 = v297;
            if (HIDWORD(v308))
            {
              v186 = v307;
              v187 = 8 * HIDWORD(v308);
              do
              {
                v188 = *(_DWORD **)v186;
                *(_QWORD *)v186 = 0;
                if (v188)
                  --*v188;
                v186 = (WTF *)((char *)v186 + 8);
                v187 -= 8;
              }
              while (v187);
            }
            v189 = v307;
            if (v309 != (_QWORD *)v307 && v307 != 0)
            {
              v307 = 0;
              LODWORD(v308) = 0;
              WTF::fastFree((unint64_t)v189, v185, v99, v100, v101, v102, v103, v104);
            }
            if ((v175 & 1) != 0)
              goto LABEL_162;
LABEL_161:
            --*v174;
LABEL_162:
            **(_QWORD **)(v105 + 96) = v151;
            goto LABEL_67;
          }
          *v154 = 0;
          v197 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v313);
          if ((int *)(a2 + 208) == v197)
          {
            v174 = 0;
            v207 = 1;
            v106 = v298;
          }
          else
          {
            v203 = v197;
            v174 = v312;
            if (!v197 || v197 == v312)
            {
              v106 = v298;
              if (!v312)
              {
                v207 = 1;
                goto LABEL_179;
              }
            }
            else
            {
              JSC::BytecodeGenerator::emitMove(a2, v197, (uint64_t)v312, v198, v199, v200, v201, v202);
              v174 = v203;
              v106 = v298;
            }
            v207 = 0;
            ++*v174;
          }
LABEL_179:
          JSC::CallArguments::CallArguments((uint64_t)&v306, a2, *(uint64_t **)(v105 + 96), 0);
          JSC::BytecodeGenerator::emitNode(a2, *(_QWORD *)v307, *(_QWORD *)(v151 + 40), v208, v209, v210, v211, v212);
          JSC::BytecodeGenerator::emitCallInTailPosition(a2, (uint64_t)i, (uint64_t)v174, 0, (uint64_t)&v306, v33, v299, v300);
          JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v306, v213, v214, v215, v216, v217, v218, v219);
          goto LABEL_180;
        }
        v243 = *(_QWORD *)(v155 + 40);
        v244 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        if ((int *)(a2 + 208) == v244)
        {
          v174 = 0;
        }
        else
        {
          v250 = v244;
          v174 = v312;
          if (v244 && v244 != v312)
          {
            JSC::BytecodeGenerator::emitMove(a2, v244, (uint64_t)v312, v245, v246, v247, v248, v249);
            v174 = v250;
LABEL_204:
            v207 = 0;
            ++*v174;
LABEL_205:
            v251 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            v257 = JSC::BytecodeGenerator::emitLoad(a2, v251, 0xFFFE000000000000, v252, v253, v254, v255, v256);
            if (v257)
              ++*v257;
            v314[0] = (uint64_t)v257;
            v258 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            v264 = JSC::BytecodeGenerator::emitLoad(a2, v258, 10, v259, v260, v261, v262, v263);
            if (v264)
              ++*v264;
            v303 = v264;
            v265 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            v271 = JSC::BytecodeGenerator::emitLoad(a2, v265, 10, v266, v267, v268, v269, v270);
            if (v271)
              ++*v271;
            v302 = v271;
            v306 = WTF::ScopedLambdaFunctor<void ()(JSC::BytecodeGenerator &,JSC::RegisterID *),JSC::ApplyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_1>::implFunction;
            v307 = (WTF *)&v306;
            v308 = &v303;
            v309[0] = &v302;
            v309[1] = v314;
            JSC::BytecodeGenerator::emitEnumeration(a2, v33, *(_BYTE **)(v243 + 64), (uint64_t)&v306, 0, 0);
            v273 = (uint64_t)v302;
            v272 = (uint64_t)v303;
            v274 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            JSC::BytecodeGenerator::emitCallVarargsInTailPosition(a2, (uint64_t)i, (uint64_t)v174, v272, v273, v274, 0, v33, v299, v300);
            if (v302)
              --*v302;
            v105 = v301;
            v106 = v298;
            if (v303)
              --*v303;
            if (v314[0])
              --*(_DWORD *)v314[0];
LABEL_180:
            if ((v207 & 1) != 0)
              goto LABEL_162;
            goto LABEL_161;
          }
          if (v312)
            goto LABEL_204;
        }
        v207 = 1;
        goto LABEL_205;
      }
    }
    v220 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v313);
    if ((int *)(a2 + 208) == v220)
    {
      v74 = 0;
      v230 = 1;
      v106 = v298;
    }
    else
    {
      v226 = v220;
      v74 = v312;
      if (v220 && v220 != v312)
      {
        JSC::BytecodeGenerator::emitMove(a2, v220, (uint64_t)v312, v221, v222, v223, v224, v225);
        v74 = v226;
        v106 = v298;
LABEL_192:
        v230 = 0;
        ++*v74;
        goto LABEL_193;
      }
      v106 = v298;
      if (v312)
        goto LABEL_192;
      v230 = 1;
    }
LABEL_193:
    JSC::CallArguments::CallArguments((uint64_t)&v306, a2, *(uint64_t **)(v105 + 96), 0);
    JSC::BytecodeGenerator::emitLoad(a2, *(int **)v307, 10, v231, v232, v233, v234, v235);
    JSC::BytecodeGenerator::emitCallInTailPosition(a2, (uint64_t)i, (uint64_t)v74, 0, (uint64_t)&v306, v33, v299, v300);
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v306, v236, v237, v238, v239, v240, v241, v242);
    if ((v230 & 1) != 0)
      goto LABEL_67;
    goto LABEL_66;
  }
  JSC::ApplyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(v310);
  JSC::CallArguments::CallArguments((uint64_t)&v306, a2, *(uint64_t **)(a1 + 96), 0);
  v280 = *(int **)v307;
  if (a2 + 208 != *(_QWORD *)v307 && v280 && v280 != v312)
    JSC::BytecodeGenerator::emitMove(a2, v280, (uint64_t)v312, v275, v276, v277, v278, v279);
  JSC::BytecodeGenerator::emitCallInTailPosition(a2, (uint64_t)i, (uint64_t)v311, 0, (uint64_t)&v306, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76));
  v287 = v313;
  if ((int *)(a2 + 208) != v313 && v313 && v313 != i)
    JSC::BytecodeGenerator::emitMove(a2, v313, (uint64_t)i, v282, v283, v284, v285, v286);
  JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v306, v287, v281, v282, v283, v284, v285, v286);
LABEL_113:
  if (v311)
    --*v311;
  if (v312)
    --*v312;
  if (i)
    --*i;
  return i;
}

uint64_t JSC::ApplyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _DWORD **v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *a1;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 32) + 240))(*(_QWORD *)(*a1 + 32));
  v11 = a1[1];
  if (v3)
  {
    v12 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a1[1], v4, v5, v6, v7, v8, v9, v10);
    ++*v12;
    v13 = a1[1];
    v14 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(v13, *(_QWORD *)a1[3]);
    result = (uint64_t)JSC::BytecodeGenerator::emitGetById(v13, v14, *(_QWORD *)a1[4], (uint64_t)v12, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 696) + 41952) + 48)+ 80), v15, v16, v17);
    v19 = (_DWORD **)a1[2];
    if (v14)
      ++*v14;
    v20 = *v19;
    *v19 = v14;
    if (v20)
      --*v20;
LABEL_9:
    --*v12;
    goto LABEL_10;
  }
  v21 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a1[1], *(_QWORD *)a1[3]);
  result = (uint64_t)JSC::BytecodeGenerator::emitGetById(v11, v21, *(_QWORD *)a1[4], (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 696) + 41952) + 48) + 80), v22, v23, v24, v25);
  v26 = (_DWORD **)a1[2];
  if (v21)
    ++*v21;
  v12 = *v26;
  *v26 = v21;
  if (v12)
    goto LABEL_9;
LABEL_10:
  if (*(_BYTE *)(v2 + 104))
  {
    v27 = a1[1];
    v28 = *(_QWORD *)a1[2];
    v29 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(v27);
    v30 = *(_DWORD *)(v29 + 4);
    v31 = *(unsigned int *)(v28 + 4);
    result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v27, v30, v31, v32, v33, v34, v35, v36);
    if ((result & 1) == 0)
    {
      result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(v27, v30, v31, v37, v38, v39, v40, v41);
      if ((result & 1) == 0)
        result = JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(v27, v30, v31, v37, v38, v39, v40, v41);
    }
    v42 = *(unsigned int *)(v27 + 628);
    if ((_DWORD)v42)
      return JSC::BytecodeGenerator::emitJumpIfTrue(v27, v29, *(_QWORD *)(*(_QWORD *)(v27 + 616) + 8 * v42 - 8), v37, v38, v39, v40, v41);
    else
      __break(0xC471u);
  }
  return result;
}

int *JSC::PostfixNode::emitResolve(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  int v51;
  int v52;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  int *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int *v88;
  WTF::StringImpl *v89[2];
  int *v90;
  int v91;
  char v92;

  v11 = (int *)(a2 + 208);
  if ((int *)(a2 + 208) == a3)
    return JSC::PrefixNode::emitResolve(a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGenerator::variable((uint64_t)v89, a2, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32), 0, a5, a6, a7, a8);
  v18 = v90;
  if (v90)
  {
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v89, (uint64_t)v90, 0, v14, v15, v16, v17);
    ++*v18;
    if ((v91 & 2) != 0)
    {
      JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v91, v92, v19, v20, v21, v22, v23);
      v81 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
      if (v11 == v81)
      {
        v88 = 0;
      }
      else
      {
        v87 = v81;
        v88 = v18;
        if (v81)
        {
          v88 = v18;
          if (v81 != v18)
          {
            JSC::BytecodeGenerator::emitMove(a2, v81, (uint64_t)v18, v82, v83, v84, v85, v86);
            v88 = v87;
          }
        }
        ++*v88;
      }
      --*v18;
      v18 = v88;
    }
    v24 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
    v25 = (_DWORD *)JSC::emitPostIncOrDec(a2, v24, (uint64_t)v18, *(unsigned __int8 *)(a1 + 80));
    v29 = v25;
    if (v25)
    {
      ++*v25;
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v18, (uint64_t)v89, a1 + 40, a1 + 52, v26, v27, v28);
      --*v29;
    }
    else
    {
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v18, (uint64_t)v89, a1 + 40, a1 + 52, v26, v27, v28);
    }
  }
  else
  {
    v47 = *(_DWORD *)(a1 + 28);
    v46 = *(_DWORD *)(a1 + 32);
    v48 = *(_DWORD *)(a1 + 36);
    if (v47 != -1 || v46 != -1 || v48 != -1)
    {
      v51 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v51 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v52 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v52 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
        {
          v54 = *(_QWORD *)(a2 + 192);
          v55 = *(_DWORD *)(v54 + 176);
          v56 = v46 - v55;
          v57 = v48 >= v55;
          v58 = v48 - v55;
          if (!v57)
            v58 = 0;
          v57 = v56 >= v58;
          v59 = v56 - v58;
          if (v57)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v56, v46 - v51, v52 - v46, (v47 + ~*(_DWORD *)(v54 + 184)) | (unint64_t)(v59 << 32));
        }
      }
    }
    v60 = (int *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v89, v13, v14, v15, v16, v17);
    v18 = v60;
    if (v60)
      ++*v60;
    v61 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v65 = JSC::BytecodeGenerator::emitGetFromScope(a2, v61, (uint64_t)v18, (unint64_t)v89, 0, v62, v63, v64);
    v70 = v65;
    if (v65)
      ++*v65;
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v89, (uint64_t)v65, 0, v66, v67, v68, v69);
    if ((v91 & 2) == 0
      || (v29 = v70,
          (JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v91, v92, v71, v72, v73, v74, v75) & 1) == 0))
    {
      v76 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
      v77 = (_DWORD *)JSC::emitPostIncOrDec(a2, v76, (uint64_t)v70, *(unsigned __int8 *)(a1 + 80));
      v29 = v77;
      if (v77)
        ++*v77;
      if ((v91 & 2) == 0)
      {
        JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v18, (uint64_t)v89, (uint64_t)v70, *(_BYTE *)(a2 + 712) != 0, 2, v35, v36);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v70, (uint64_t)v89, a1 + 40, a1 + 52, v78, v79, v80);
      }
      if (v29)
        --*v29;
    }
    if (v70)
      --*v70;
  }
  if (v18)
    --*v18;
  v37 = v89[0];
  v89[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  return v29;
}

int *JSC::PrefixNode::emitResolve(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v45;
  BOOL v46;
  int v48;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  int *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int *v71;
  int *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  int *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87[2];
  int *v88;
  int v89;
  char v90;

  JSC::BytecodeGenerator::variable((uint64_t)v87, a2, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32), 0, a5, a6, a7, a8);
  v16 = v88;
  if (!v88)
  {
    v41 = *(_DWORD *)(a1 + 28);
    v40 = *(_DWORD *)(a1 + 32);
    v42 = *(_DWORD *)(a1 + 36);
    if (v41 != -1 || v40 != -1 || v42 != -1)
    {
      v45 = *(_DWORD *)(a1 + 44);
      v46 = *(_DWORD *)(a1 + 40) == -1 && v45 == -1;
      if (!v46 || *(_DWORD *)(a1 + 48) != -1)
      {
        v48 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v48 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
        {
          v50 = *(_QWORD *)(a2 + 192);
          v51 = *(_DWORD *)(v50 + 176);
          v52 = v40 - v51;
          v53 = v42 >= v51;
          v54 = v42 - v51;
          if (!v53)
            v54 = 0;
          v53 = v52 >= v54;
          v55 = v52 - v54;
          if (v53)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v52, v40 - v45, v48 - v40, (v41 + ~*(_DWORD *)(v50 + 184)) | (unint64_t)(v55 << 32));
        }
      }
    }
    v56 = (int *)JSC::BytecodeGenerator::emitResolveScope(a2, a3, (unsigned __int8 *)v87, v11, v12, v13, v14, v15);
    v16 = v56;
    if (v56)
      ++*v56;
    v57 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v61 = JSC::BytecodeGenerator::emitGetFromScope(a2, v57, (uint64_t)v16, (unint64_t)v87, 0, v58, v59, v60);
    v66 = v61;
    if (v61)
      ++*v61;
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v87, (uint64_t)v61, 0, v62, v63, v64, v65);
    if ((v89 & 2) == 0
      || (v29 = v66,
          (JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v89, v90, v24, v25, v26, v27, v28) & 1) == 0))
    {
      JSC::emitIncOrDec(a2, (uint64_t)v66, *(unsigned __int8 *)(a1 + 80), v24, v25, v26, v27, v28);
      if ((v89 & 2) == 0)
      {
        JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v16, (uint64_t)v87, (uint64_t)v66, *(_BYTE *)(a2 + 712) != 0, 2, v27, v28);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v66, (uint64_t)v87, a1 + 40, a1 + 52, v67, v68, v69);
      }
      if ((int *)(a2 + 208) == a3)
      {
        v29 = 0;
      }
      else
      {
        v29 = v66;
        if (a3)
        {
          v29 = v66;
          if (v66 != a3)
          {
            JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v66, v24, v25, v26, v27, v28);
            v29 = a3;
          }
        }
      }
    }
    if (v66)
      --*v66;
LABEL_8:
    if (!v16)
      goto LABEL_10;
    goto LABEL_9;
  }
  JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v87, (uint64_t)v88, 0, v12, v13, v14, v15);
  ++*v16;
  if ((v89 & 2) != 0)
  {
    JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v89, v90, v17, v18, v19, v20, v21);
    v70 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
    if ((int *)(a2 + 208) == v70)
    {
      v72 = 0;
    }
    else
    {
      v71 = v70;
      v72 = v16;
      if (v70)
      {
        v72 = v16;
        if (v70 != v16)
        {
          JSC::BytecodeGenerator::emitMove(a2, v70, (uint64_t)v16, v17, v18, v19, v20, v21);
          v72 = v71;
        }
      }
      ++*v72;
    }
    --*v16;
    v16 = v72;
    goto LABEL_4;
  }
  if ((*(_BYTE *)(a2 + 104) & 2) == 0)
  {
LABEL_4:
    JSC::emitIncOrDec(a2, (uint64_t)v16, *(unsigned __int8 *)(a1 + 80), v17, v18, v19, v20, v21);
    if ((int *)(a2 + 208) == a3)
    {
      v29 = 0;
    }
    else
    {
      v29 = v16;
      if (a3)
      {
        v29 = v16;
        if (v16 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v16, v24, v25, v26, v27, v28);
          v29 = a3;
        }
      }
    }
    goto LABEL_8;
  }
  v73 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v79 = v73;
  if (v73)
  {
    ++*v73;
    v80 = (int *)(a2 + 208);
    v81 = v73 == v16;
    if (v73 != v16 && v80 != v73)
    {
      JSC::BytecodeGenerator::emitMove(a2, v73, (uint64_t)v16, v74, v75, v76, v77, v78);
      v81 = 0;
    }
  }
  else
  {
    v81 = 0;
    v80 = (int *)(a2 + 208);
  }
  JSC::emitIncOrDec(a2, (uint64_t)v79, *(unsigned __int8 *)(a1 + 80), v74, v75, v76, v77, v78);
  if (!v81 && v80 != v16)
    JSC::BytecodeGenerator::emitMove(a2, v16, (uint64_t)v79, v82, v83, v84, v85, v86);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v16, (uint64_t)v87, a1 + 40, a1 + 52, v84, v85, v86);
  if (v80 == a3)
  {
    v29 = 0;
  }
  else
  {
    v29 = v79;
    if (a3)
    {
      v29 = v79;
      if (v79 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v79, v24, v25, v26, v27, v28);
        v29 = a3;
      }
    }
  }
  if (v79)
    --*v79;
LABEL_9:
  --*v16;
LABEL_10:
  v30 = v87[0];
  v87[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  return v29;
}

uint64_t JSC::emitPostIncOrDec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a2 == a3)
  {
    v34 = JSC::BytecodeGenerator::finalDestination(a1, a2, 0);
    JSC::BytecodeGenerator::emitToNumeric(a1, v34, *(_DWORD *)(a2 + 4), v40, v41, v42, v43, v44);
  }
  else
  {
    v8 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    v9 = v8[1];
    v10 = *(unsigned int *)(a3 + 4);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(unsigned int *)(v11 + 292);
    *(_DWORD *)(v11 + 292) = v12 + 1;
    if ((JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v9, v10, v12, v13, v14, v15, v16) & 1) == 0&& (JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v9, v10, v12, v17, v18, v19, v20) & 1) == 0)
    {
      JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v9, v10, v12, v36, v37, v38, v39);
    }
    ++*v8;
    v21 = (int *)JSC::BytecodeGenerator::tempDestination(a1, a3);
    v27 = v21;
    if (v21)
    {
      ++*v21;
      v28 = (int *)(a1 + 208);
      if (v21 != v8 && v28 != v21)
        JSC::BytecodeGenerator::emitMove(a1, v21, (uint64_t)v8, v22, v23, v24, v25, v26);
    }
    else
    {
      v28 = (int *)(a1 + 208);
    }
    JSC::emitIncOrDec(a1, (uint64_t)v27, a4, v22, v23, v24, v25, v26);
    if (v27 != (int *)a3 && v28 != (int *)a3)
      JSC::BytecodeGenerator::emitMove(a1, (int *)a3, (uint64_t)v27, v29, v30, v31, v32, v33);
    if (v28 == (int *)a2)
    {
      v34 = 0;
    }
    else
    {
      v34 = (uint64_t)v8;
      if (a2)
      {
        v34 = (uint64_t)v8;
        if (v8 != (int *)a2)
        {
          JSC::BytecodeGenerator::emitMove(a1, (int *)a2, (uint64_t)v8, v29, v30, v31, v32, v33);
          v34 = a2;
        }
      }
    }
    if (v27)
      --*v27;
    --*v8;
  }
  return v34;
}

int *JSC::PostfixNode::emitBracket(uint64_t a1, JSC::BytecodeGenerator *a2, int *a3)
{
  int *v3;
  uint64_t v7;
  JSC::ExpressionNode *v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v3 = a3;
  if ((int *)((char *)a2 + 208) == a3)
    return JSC::PrefixNode::emitBracket(a1, a2, a3);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(JSC::ExpressionNode **)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (*(uint64_t (**)(uint64_t, JSC::BytecodeGenerator *))(*(_QWORD *)v9 + 72))(v9, a2);
  v18 = *((_BYTE *)a2 + 416) == 2 && v10 == 0;
  if (v18 || (v11 & 1) != 0)
  {
    v19 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, v8, v12, v13, v14, v15, v16, v17);
    v20 = v19;
    if (v19)
      ++*v19;
  }
  else
  {
    v59 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
    v20 = v59;
    if (v59)
      ++*v59;
    JSC::BytecodeGenerator::emitNode((uint64_t)a2, (uint64_t)v59, (uint64_t)v8, v60, v61, v62, v63, v64);
  }
  v21 = JSC::BytecodeGenerator::emitNodeForProperty((uint64_t)a2, 0, v9);
  v22 = v21;
  if (v21)
    ++*v21;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) & 1) != 0)
  {
    v27 = v22;
  }
  else
  {
    JSC::BytecodeGenerator::emitRequireObjectCoercible((uint64_t)a2, (uint64_t)v20, "Cannot access property of undefined or null", 0x2CuLL, v23, v24, v25, v26);
    v27 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
    JSC::BytecodeGenerator::emitToPropertyKeyOrNumber((uint64_t)a2, (uint64_t)v27, v22[1], v65, v66, v67, v68, v69);
    if (v27)
      ++*v27;
    --*v22;
  }
  JSC::BytecodeGenerator::emitExpressionInfo(a2, (_DWORD *)(v7 + 28), (_DWORD *)(v7 + 40), (_DWORD *)(v7 + 52));
  if (!(*(unsigned int (**)(JSC::ExpressionNode *))(*(_QWORD *)v8 + 240))(v8))
  {
    v36 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
    JSC::BytecodeGenerator::emitGetByVal((uint64_t)a2, v36, (uint64_t)v20, (uint64_t)v27, v41, v42, v43, v44);
    v35 = 0;
    v40 = 0;
    if (!v36)
      goto LABEL_20;
LABEL_19:
    ++*v36;
    v40 = v36;
    goto LABEL_20;
  }
  v35 = (_DWORD *)JSC::BytecodeGenerator::ensureThis(a2, v28, v29, v30, v31, v32, v33, v34);
  ++*v35;
  v36 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
  JSC::BytecodeGenerator::emitGetByVal((uint64_t)a2, v36, (uint64_t)v20, (uint64_t)v35, (uint64_t)v27, v37, v38, v39);
  if (v36)
    goto LABEL_19;
  v40 = 0;
LABEL_20:
  v45 = JSC::BytecodeGenerator::tempDestination((uint64_t)a2, (uint64_t)v3);
  v46 = JSC::emitPostIncOrDec((uint64_t)a2, v45, (uint64_t)v40, *(unsigned __int8 *)(a1 + 80));
  v47 = (_DWORD *)(a1 + 28);
  v48 = (_DWORD *)(a1 + 40);
  v49 = (_DWORD *)(a1 + 52);
  JSC::BytecodeGenerator::emitExpressionInfo(a2, v47, v48, v49);
  if ((*(unsigned int (**)(JSC::ExpressionNode *))(*(_QWORD *)v8 + 240))(v8))
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)a2, v20[1], v35[1], v27[1], v40[1], *((_BYTE *)a2 + 712));
  else
    JSC::BytecodeGenerator::emitPutByVal((uint64_t)a2, (uint64_t)v20, (uint64_t)v27, (uint64_t)v40, v50, v51, v52, v53);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v40, (uint64_t)v48, (uint64_t)v49);
  if (!v3 || (int *)v46 == v3)
    v3 = (int *)v46;
  else
    JSC::BytecodeGenerator::emitMove((uint64_t)a2, v3, v46, v54, v55, v56, v57, v58);
  if (v35)
    --*v35;
  if (v40)
    --*v40;
  if (v27)
    --*v27;
  if (v20)
    --*v20;
  return v3;
}

int *JSC::PrefixNode::emitBracket(uint64_t a1, JSC::BytecodeGenerator *a2, int *a3)
{
  uint64_t v6;
  JSC::ExpressionNode *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _DWORD *v18;
  _DWORD *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *result;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(JSC::ExpressionNode **)(v6 + 64);
  v8 = *(_QWORD *)(v6 + 72);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  v17 = *((_BYTE *)a2 + 416) == 2 && v9 == 0;
  if (v17 || (v10 & 1) != 0)
  {
    v18 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, v7, v11, v12, v13, v14, v15, v16);
    v19 = v18;
    if (v18)
      ++*v18;
  }
  else
  {
    v60 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
    v19 = v60;
    if (v60)
      ++*v60;
    JSC::BytecodeGenerator::emitNode((uint64_t)a2, (uint64_t)v60, (uint64_t)v7, v61, v62, v63, v64, v65);
  }
  v20 = JSC::BytecodeGenerator::emitNodeForProperty((uint64_t)a2, 0, v8);
  v21 = v20;
  if (v20)
    ++*v20;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8) & 1) != 0)
  {
    v26 = v21;
  }
  else
  {
    JSC::BytecodeGenerator::emitRequireObjectCoercible((uint64_t)a2, (uint64_t)v19, "Cannot access property of undefined or null", 0x2CuLL, v22, v23, v24, v25);
    v26 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
    JSC::BytecodeGenerator::emitToPropertyKeyOrNumber((uint64_t)a2, (uint64_t)v26, v21[1], v27, v28, v29, v30, v31);
    if (v26)
      ++*v26;
    --*v21;
  }
  v32 = (int *)JSC::BytecodeGenerator::tempDestination((uint64_t)a2, (uint64_t)a3);
  v33 = v32;
  if (v32)
    ++*v32;
  JSC::BytecodeGenerator::emitExpressionInfo(a2, (_DWORD *)(v6 + 28), (_DWORD *)(v6 + 40), (_DWORD *)(v6 + 52));
  if ((*(unsigned int (**)(JSC::ExpressionNode *))(*(_QWORD *)v7 + 240))(v7))
  {
    v46 = (_DWORD *)JSC::BytecodeGenerator::ensureThis(a2, v34, v35, v36, v37, v38, v39, v40);
    ++*v46;
    JSC::BytecodeGenerator::emitGetByVal((uint64_t)a2, v33, (uint64_t)v19, (uint64_t)v46, (uint64_t)v26, v66, v67, v68);
  }
  else
  {
    JSC::BytecodeGenerator::emitGetByVal((uint64_t)a2, v33, (uint64_t)v19, (uint64_t)v26, v37, v38, v39, v40);
    v46 = 0;
  }
  JSC::emitIncOrDec((uint64_t)a2, (uint64_t)v33, *(unsigned __int8 *)(a1 + 80), v41, v42, v43, v44, v45);
  v47 = (_DWORD *)(a1 + 28);
  v48 = (_DWORD *)(a1 + 40);
  v49 = (_DWORD *)(a1 + 52);
  JSC::BytecodeGenerator::emitExpressionInfo(a2, v47, v48, v49);
  if ((*(unsigned int (**)(JSC::ExpressionNode *))(*(_QWORD *)v7 + 240))(v7))
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>((uint64_t)a2, v19[1], v46[1], v26[1], v33[1], *((_BYTE *)a2 + 712));
  else
    JSC::BytecodeGenerator::emitPutByVal((uint64_t)a2, (uint64_t)v19, (uint64_t)v26, (uint64_t)v33, v50, v51, v52, v53);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v33, (uint64_t)v48, (uint64_t)v49);
  if ((int *)((char *)a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v33;
    if (a3)
    {
      result = v33;
      if (v33 != a3)
      {
        JSC::BytecodeGenerator::emitMove((uint64_t)a2, a3, (uint64_t)v33, v54, v55, v56, v57, v58);
        result = a3;
      }
    }
  }
  if (v46)
    --*v46;
  if (v33)
    --*v33;
  if (v26)
    --*v26;
  if (v19)
    --*v19;
  return result;
}

int *JSC::PostfixNode::emitDot(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  int *v11;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::AtomStringImpl *v21;
  char v22;
  char v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  unsigned int v35;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int PrivateTraits;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  int *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::AtomStringImpl *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  int *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  int *v207;
  int *v208;
  _DWORD *v209;
  _DWORD *v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _DWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _DWORD *v221;
  uint64_t v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WTF::AtomStringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int **v241;
  int *v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int *v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  int v290;
  uint64_t v291;
  char v292;
  _DWORD *v293;
  _DWORD *v294;
  _DWORD *v295;
  _DWORD *v296;
  _DWORD *v297;
  WTF::StringImpl *v298;
  int **v299;
  uint64_t v300[5];
  int v301[3];

  v8 = a3;
  v11 = (int *)(a2 + 208);
  if ((int *)(a2 + 208) == a3)
    return JSC::PrefixNode::emitDot(a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE **)(v13 + 32);
  v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 240))(v14);
  v21 = *(WTF::AtomStringImpl **)(v13 + 40);
  v22 = *(_BYTE *)(a2 + 709);
  v23 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v292 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v24 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v14[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v14 + 8), v15, v16, v17, v18, v19);
    v24 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, a2, 0);
  }
  v32 = v24;
  *(_BYTE *)(a2 + 710) = v23;
  *(_BYTE *)(a2 + 709) = v22;
  if (v24)
    ++*v24;
  v34 = *(_DWORD *)(v13 + 52);
  v33 = *(_DWORD *)(v13 + 56);
  v35 = *(_DWORD *)(v13 + 60);
  if (v34 != -1 || v33 != -1 || v35 != -1)
  {
    v38 = *(_DWORD *)(v13 + 68);
    if (*(_DWORD *)(v13 + 64) != -1 || v38 != -1 || *(_DWORD *)(v13 + 72) != -1)
    {
      v39 = *(_DWORD *)(v13 + 80);
      if ((*(_DWORD *)(v13 + 76) & v39 & *(_DWORD *)(v13 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v40 = *(_QWORD *)(a2 + 192);
        v41 = *(_DWORD *)(v40 + 176);
        v26 = v33 - v41;
        v42 = v35 >= v41;
        v43 = v35 - v41;
        if (!v42)
          v43 = 0;
        v42 = v26 >= v43;
        v44 = v26 - v43;
        if (v42)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v26, v33 - v38, v39 - v33, (v34 + ~*(_DWORD *)(v40 + 184)) | (unint64_t)(v44 << 32));
      }
    }
  }
  if (*(_DWORD *)(v13 + 48) != 1)
  {
    if (v20)
    {
      v50 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v25, v26, v27, v28, v29, v30, v31);
      ++*v50;
      v45 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetById(a2, v45, (uint64_t)v32, (uint64_t)v50, v21, v113, v114, v115);
      if (!v45)
      {
        v51 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      v45 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitGetById(a2, v45, (uint64_t)v32, v21, v46, v47, v48, v49);
      v50 = 0;
      v51 = 0;
      if (!v45)
      {
LABEL_30:
        v52 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
        v59 = JSC::emitPostIncOrDec(a2, v52, (uint64_t)v51, *(unsigned __int8 *)(a1 + 80));
        v61 = *(_DWORD *)(a1 + 28);
        v60 = *(_DWORD *)(a1 + 32);
        v62 = *(_DWORD *)(a1 + 36);
        if (v61 != -1 || v60 != -1 || v62 != -1)
        {
          v63 = *(_DWORD *)(a1 + 44);
          if (*(_DWORD *)(a1 + 40) != -1 || v63 != -1 || *(_DWORD *)(a1 + 48) != -1)
          {
            v64 = *(_DWORD *)(a1 + 56);
            if ((*(_DWORD *)(a1 + 52) & v64 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
            {
              v65 = *(_QWORD *)(a2 + 192);
              v66 = *(_DWORD *)(v65 + 176);
              v53 = v60 - v66;
              v42 = v62 >= v66;
              v67 = v62 - v66;
              if (!v42)
                v67 = 0;
              v42 = v53 >= v67;
              v68 = v53 - v67;
              if (v42)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v53, v60 - v63, v64 - v60, (v61 + ~*(_DWORD *)(v65 + 184)) | (unint64_t)(v68 << 32));
            }
          }
        }
        if (v20)
        {
          JSC::BytecodeGenerator::emitPutById(a2, (uint64_t)v32, (uint64_t)v50, v21, (uint64_t)v51, v56, v57, v58);
        }
        else
        {
          v69 = JSC::BytecodeGenerator::addConstant(a2, v21, v53, v54, v55, v56, v57, v58);
          JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a2 + 688), v32[1], v69);
          JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, (void *)v32[1], v69, v51[1], (unint64_t)*(unsigned __int8 *)(a2 + 712) << 8, v70, v71, v72);
        }
        if ((*(_BYTE *)(a2 + 104) & 2) != 0 && v51)
        {
          v285 = v51[1];
          v286 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
          JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v285, 0, 2, 0, v286, v287, v288);
          v289 = *(_DWORD *)(a1 + 44);
          v290 = *(_DWORD *)(a1 + 56) - 1;
          v291 = *(_QWORD *)(a2 + 24);
          v301[0] = *(_DWORD *)(a2 + 12) - 1;
          v300[0] = __PAIR64__(v290, v289);
          WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v291 + 232), v301, v300, (uint64_t)&v298);
        }
        if (!v8 || (int *)v59 == v8)
          v8 = (int *)v59;
        else
          JSC::BytecodeGenerator::emitMove(a2, v8, v59, v73, v74, v75, v76, v77);
        if (v50)
          --*v50;
        if (v51)
          --*v51;
        v78 = (uint64_t)v8;
        goto LABEL_55;
      }
    }
    ++*v45;
    v51 = v45;
    goto LABEL_30;
  }
  PrivateTraits = JSC::BytecodeGenerator::getPrivateTraits(*(_QWORD *)(a2 + 160), *(_DWORD *)(a2 + 172), *(_QWORD *)v21);
  if ((PrivateTraits & 7) == 0)
  {
    JSC::BytecodeGenerator::variable((uint64_t)&v298, a2, (uint64_t)v21, 0, v80, v81, v82, v83);
    v121 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v298, v116, v117, v118, v119, v120);
    v122 = v121;
    if (v121)
      ++*v121;
    v123 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v127 = v123;
    if (v123)
      ++*v123;
    JSC::BytecodeGenerator::emitGetFromScope(a2, v123, (uint64_t)v122, (unint64_t)&v298, 1, v124, v125, v126);
    v128 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitGetPrivateName(a2, (uint64_t)v128, v32[1], v127[1], v129, v130, v131, v132);
    if (v128)
      ++*v128;
    v133 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
    v134 = (int *)JSC::emitPostIncOrDec(a2, v133, (uint64_t)v128, *(unsigned __int8 *)(a1 + 80));
    v135 = v134;
    if (v134)
      ++*v134;
    v136 = (_DWORD *)(a1 + 28);
    v137 = (_DWORD *)(a1 + 40);
    v138 = (_DWORD *)(a1 + 52);
    JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v136, v137, v138);
    JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(a2, v32[1], v127[1], v128[1], 1, v139, v140, v141);
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v128, (uint64_t)v137, (uint64_t)v138);
    v78 = (uint64_t)v135;
    if (v8)
    {
      v78 = (uint64_t)v135;
      if (v135 != v8)
      {
        JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v135, v144, v145, v146, v147, v148);
        v78 = (uint64_t)v8;
      }
    }
    if (v135)
      --*v135;
    --*v128;
    --*v127;
    if (v122)
      --*v122;
    v149 = v298;
    v298 = 0;
    if (v149)
    {
      if (*(_DWORD *)v149 == 2)
      {
        WTF::StringImpl::~StringImpl(v149, v142, v143, v144, v145, v146, v147, v148);
        WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
      }
      else
      {
        *(_DWORD *)v149 -= 2;
      }
    }
    goto LABEL_56;
  }
  v84 = PrivateTraits;
  if ((PrivateTraits & 1) != 0)
  {
    JSC::BytecodeGenerator::variable((uint64_t)&v298, a2, (uint64_t)v21, 0, v80, v81, v82, v83);
    v155 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v298, v150, v151, v152, v153, v154);
    v156 = v155;
    if (v155)
      ++*v155;
    v157 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v157, (uint64_t)v156, (v84 >> 3) & 1, v158, v159, v160, v161);
    if (v157)
      ++*v157;
    JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, (uint64_t)v32, (uint64_t)v157, (v84 >> 3) & 1, v162, v163, v164, v165);
    JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
    JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private setter", 0x2DuLL, v166, v167, v168, v169, v170);
    v78 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
    if (v157)
      --*v157;
    if (v156)
      --*v156;
    v171 = v298;
    v298 = 0;
    if (v171)
      goto LABEL_154;
  }
  else
  {
    JSC::BytecodeGenerator::variable((uint64_t)v300, a2, (uint64_t)v21, 0, v80, v81, v82, v83);
    v90 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v300, v85, v86, v87, v88, v89);
    v91 = v90;
    if (v90)
      ++*v90;
    v92 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v92, (uint64_t)v91, (v84 >> 3) & 1, v93, v94, v95, v96);
    if (v92)
      ++*v92;
    JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, (uint64_t)v32, (uint64_t)v92, (v84 >> 3) & 1, v97, v98, v99, v100);
    if ((v84 & 2) != 0)
    {
      v172 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v176 = JSC::BytecodeGenerator::emitGetFromScope(a2, v172, (uint64_t)v91, (unint64_t)v300, 0, v173, v174, v175);
      v177 = v176;
      if (v176)
        ++*v176;
      v178 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::Symbols::getPrivateName += 2;
      v298 = (WTF::StringImpl *)&JSC::Symbols::getPrivateName;
      JSC::BytecodeGenerator::emitDirectGetById(a2, v178, (uint64_t)v177, (WTF::AtomStringImpl *)&v298, v179, v180, v181, v182);
      if (v178)
        ++*v178;
      v190 = v298;
      v298 = 0;
      if (v190)
      {
        if (*(_DWORD *)v190 == 2)
        {
          WTF::StringImpl::~StringImpl(v190, v183, v184, v185, v186, v187, v188, v189);
          WTF::fastFree(v269, v270, v271, v272, v273, v274, v275, v276);
        }
        else
        {
          *(_DWORD *)v190 -= 2;
        }
      }
      v297 = v91;
      JSC::CallArguments::CallArguments((uint64_t)&v298, a2, 0, 0);
      v196 = *v299;
      if (v11 != *v299 && v196 && v196 != v32)
        JSC::BytecodeGenerator::emitMove(a2, v196, (uint64_t)v32, v191, v192, v193, v194, v195);
      v197 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v296 = (_DWORD *)(a1 + 8);
      JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v197, (uint64_t)v178, 0, (uint64_t)&v298, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), 1u);
      if (v197)
        ++*v197;
      JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v298, v198, v199, v200, v201, v202, v203, v204);
      if (v178)
        --*v178;
      if (v177)
        --*v177;
      v205 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
      v206 = v197;
      v207 = (int *)JSC::emitPostIncOrDec(a2, v205, (uint64_t)v197, *(unsigned __int8 *)(a1 + 80));
      v208 = v207;
      if (v207)
        ++*v207;
      v209 = (_DWORD *)(a1 + 28);
      v210 = (_DWORD *)(a1 + 40);
      v211 = (_DWORD *)(a1 + 52);
      v295 = v210;
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v209, v210, v211);
      v91 = v297;
      if ((v84 & 4) != 0)
      {
        v293 = v211;
        v217 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v221 = JSC::BytecodeGenerator::emitGetFromScope(a2, v217, (uint64_t)v91, (unint64_t)v300, 0, v218, v219, v220);
        v222 = (uint64_t)v221;
        if (v221)
          ++*v221;
        v223 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        JSC::Symbols::setPrivateName += 2;
        v298 = (WTF::StringImpl *)&JSC::Symbols::setPrivateName;
        v294 = (_DWORD *)v222;
        JSC::BytecodeGenerator::emitDirectGetById(a2, v223, v222, (WTF::AtomStringImpl *)&v298, v224, v225, v226, v227);
        if (v223)
          ++*v223;
        v235 = v298;
        v298 = 0;
        if (v235)
        {
          if (*(_DWORD *)v235 == 2)
          {
            WTF::StringImpl::~StringImpl(v235, v228, v229, v230, v231, v232, v233, v234);
            WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
          }
          else
          {
            *(_DWORD *)v235 -= 2;
          }
        }
        JSC::CallArguments::CallArguments((uint64_t)&v298, a2, 0, 1);
        v241 = v299;
        v242 = *v299;
        if (v11 == *v299 || !v242)
        {
          v243 = (uint64_t)v293;
        }
        else
        {
          v243 = (uint64_t)v293;
          if (v242 != v32)
          {
            JSC::BytecodeGenerator::emitMove(a2, v242, (uint64_t)v32, v236, v237, v238, v239, v240);
            v241 = v299;
          }
        }
        v252 = v241[1];
        if (v11 != v252 && v252 && v252 != v206)
          JSC::BytecodeGenerator::emitMove(a2, v252, (uint64_t)v206, v236, v237, v238, v239, v240);
        v253 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v253, (uint64_t)v223, 0, (uint64_t)&v298, v296, v296, v296, 1u);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v206, (uint64_t)v295, v243);
        v78 = (uint64_t)v208;
        if (v8)
        {
          v78 = (uint64_t)v208;
          if (v208 != v8)
          {
            JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v208, v256, v257, v258, v259, v260);
            v78 = (uint64_t)v8;
          }
        }
        JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v298, v254, v255, v256, v257, v258, v259, v260);
        if (v223)
          --*v223;
        if (v294)
          --*v294;
      }
      else
      {
        JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private getter", 0x2DuLL, v212, v213, v214, v215, v216);
        v78 = (uint64_t)v208;
        if (v8)
        {
          v78 = (uint64_t)v208;
          if (v208 != v8)
          {
            JSC::BytecodeGenerator::emitMove(a2, v8, (uint64_t)v208, v108, v109, v110, v111, v112);
            v78 = (uint64_t)v8;
          }
        }
      }
      if (v208)
        --*v208;
      if (v206)
        --*v206;
    }
    else
    {
      JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private getter", 0x2DuLL, v101, v102, v103, v104, v105);
      v78 = JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v8);
    }
    if (v92)
      --*v92;
    if (v91)
      --*v91;
    v171 = (WTF::StringImpl *)v300[0];
    v300[0] = 0;
    if (v171)
    {
LABEL_154:
      if (*(_DWORD *)v171 == 2)
      {
        WTF::StringImpl::~StringImpl(v171, v106, v107, v108, v109, v110, v111, v112);
        WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
      }
      else
      {
        *(_DWORD *)v171 -= 2;
      }
    }
  }
LABEL_55:
  if (v32)
LABEL_56:
    --*v32;
  return (int *)v78;
}

int *JSC::PrefixNode::emitDot(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  _BYTE *v13;
  char v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v25;
  BOOL v26;
  int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  unsigned int PrivateTraits;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::AtomStringImpl *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  _DWORD *v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _DWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _DWORD *v229;
  _DWORD *v230;
  _DWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF::AtomStringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int **v249;
  int *v250;
  int *v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  int v289;
  uint64_t v290;
  char v291;
  _DWORD *v292;
  int *v293;
  WTF::StringImpl *v294;
  int **v295;
  uint64_t v296[5];
  int v297[3];

  v11 = *(_QWORD *)(a1 + 72);
  v13 = *(_BYTE **)(v11 + 32);
  v12 = *(WTF::AtomStringImpl **)(v11 + 40);
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v291 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v16 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v13[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), a4, a5, a6, a7, a8);
    v16 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, a2, 0);
  }
  v17 = v16;
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  if (v16)
    ++*v16;
  v18 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v19 = v18;
  if (v18)
    ++*v18;
  v21 = *(_DWORD *)(v11 + 52);
  v20 = *(_DWORD *)(v11 + 56);
  v22 = *(_DWORD *)(v11 + 60);
  if (v21 != -1 || v20 != -1 || v22 != -1)
  {
    v25 = *(_DWORD *)(v11 + 68);
    v26 = *(_DWORD *)(v11 + 64) == -1 && v25 == -1;
    if (!v26 || *(_DWORD *)(v11 + 72) != -1)
    {
      v28 = *(_DWORD *)(v11 + 80);
      if ((*(_DWORD *)(v11 + 76) & v28 & *(_DWORD *)(v11 + 84)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
      {
        v30 = *(_QWORD *)(a2 + 192);
        v31 = *(_DWORD *)(v30 + 176);
        v32 = v20 - v31;
        v33 = v22 >= v31;
        v34 = v22 - v31;
        if (!v33)
          v34 = 0;
        v33 = v32 >= v34;
        v35 = v32 - v34;
        if (v33)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v32, v20 - v25, v28 - v20, (v21 + ~*(_DWORD *)(v30 + 184)) | (unint64_t)(v35 << 32));
      }
    }
  }
  if (*(_DWORD *)(v11 + 48) != 1)
  {
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v13 + 240))(v13))
    {
      v48 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v36, v37, v38, v39, v40, v41, v42);
      ++*v48;
      JSC::BytecodeGenerator::emitGetById(a2, v19, (uint64_t)v17, (uint64_t)v48, v12, v112, v113, v114);
    }
    else
    {
      JSC::BytecodeGenerator::emitGetById(a2, v19, (uint64_t)v17, v12, v39, v40, v41, v42);
      v48 = 0;
    }
    JSC::emitIncOrDec(a2, (uint64_t)v19, *(unsigned __int8 *)(a1 + 80), v43, v44, v45, v46, v47);
    v50 = *(_DWORD *)(a1 + 28);
    v49 = *(_DWORD *)(a1 + 32);
    v51 = *(_DWORD *)(a1 + 36);
    if (v50 != -1 || v49 != -1 || v51 != -1)
    {
      v52 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v52 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v53 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v53 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v54 = *(_QWORD *)(a2 + 192);
          v55 = *(_DWORD *)(v54 + 176);
          v56 = v49 - v55;
          v33 = v51 >= v55;
          v57 = v51 - v55;
          if (!v33)
            v57 = 0;
          v33 = v56 >= v57;
          v58 = v56 - v57;
          if (v33)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v56, v49 - v52, v53 - v49, (v50 + ~*(_DWORD *)(v54 + 184)) | (unint64_t)(v58 << 32));
        }
      }
    }
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v13 + 240))(v13))
    {
      JSC::BytecodeGenerator::emitPutById(a2, (uint64_t)v17, (uint64_t)v48, v12, (uint64_t)v19, v62, v63, v64);
    }
    else
    {
      v65 = JSC::BytecodeGenerator::addConstant(a2, v12, v59, v60, v61, v62, v63, v64);
      JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a2 + 688), v17[1], v65);
      JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, (void *)v17[1], v65, v19[1], (unint64_t)*(unsigned __int8 *)(a2 + 712) << 8, v66, v67, v68);
    }
    if (v19 && (*(_BYTE *)(a2 + 104) & 2) != 0)
    {
      v284 = v19[1];
      v285 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
      JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v284, 0, 2, 0, v285, v286, v287);
      v288 = *(_DWORD *)(a1 + 44);
      v289 = *(_DWORD *)(a1 + 56) - 1;
      v290 = *(_QWORD *)(a2 + 24);
      v297[0] = *(_DWORD *)(a2 + 12) - 1;
      v296[0] = __PAIR64__(v289, v288);
      WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v290 + 232), v297, v296, (uint64_t)&v294);
    }
    if ((int *)(a2 + 208) == a3)
    {
      v74 = 0;
    }
    else
    {
      v74 = v19;
      if (a3)
      {
        v74 = v19;
        if (v19 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v19, v69, v70, v71, v72, v73);
          v74 = a3;
        }
      }
    }
    if (v48)
      --*v48;
    goto LABEL_60;
  }
  PrivateTraits = JSC::BytecodeGenerator::getPrivateTraits(*(_QWORD *)(a2 + 160), *(_DWORD *)(a2 + 172), *(_QWORD *)v12);
  if ((PrivateTraits & 7) != 0)
  {
    v81 = PrivateTraits;
    if ((PrivateTraits & 1) != 0)
    {
      JSC::BytecodeGenerator::variable((uint64_t)&v294, a2, (uint64_t)v12, 0, v77, v78, v79, v80);
      v155 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v294, v150, v151, v152, v153, v154);
      v156 = v155;
      if (v155)
        ++*v155;
      v157 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v158 = (v81 >> 3) & 1;
      JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v157, (uint64_t)v156, v158, v159, v160, v161, v162);
      if (v157)
        ++*v157;
      JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, (uint64_t)v17, (uint64_t)v157, v158, v163, v164, v165, v166);
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52));
      JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private setter", 0x2DuLL, v167, v168, v169, v170, v171);
      if ((int *)(a2 + 208) == a3)
      {
        v74 = 0;
      }
      else
      {
        v74 = v19;
        if (a3)
        {
          v74 = v19;
          if (v19 != a3)
          {
            JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v19, v105, v106, v107, v108, v109);
            v74 = a3;
          }
        }
      }
      if (v157)
        --*v157;
      if (v156)
        --*v156;
      v111 = v294;
      v294 = 0;
      if (!v111)
      {
LABEL_60:
        if (!v19)
          goto LABEL_62;
        goto LABEL_61;
      }
LABEL_113:
      if (*(_DWORD *)v111 == 2)
      {
        WTF::StringImpl::~StringImpl(v111, v103, v104, v105, v106, v107, v108, v109);
        WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
      }
      else
      {
        *(_DWORD *)v111 -= 2;
      }
      goto LABEL_60;
    }
    JSC::BytecodeGenerator::variable((uint64_t)v296, a2, (uint64_t)v12, 0, v77, v78, v79, v80);
    v87 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v296, v82, v83, v84, v85, v86);
    v88 = v87;
    if (v87)
      ++*v87;
    v89 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v89, (uint64_t)v88, (v81 >> 3) & 1, v90, v91, v92, v93);
    if (v89)
      ++*v89;
    JSC::BytecodeGenerator::emitCheckPrivateBrand(a2, (uint64_t)v17, (uint64_t)v89, (v81 >> 3) & 1, v94, v95, v96, v97);
    if ((v81 & 2) != 0)
    {
      v172 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v176 = JSC::BytecodeGenerator::emitGetFromScope(a2, v172, (uint64_t)v88, (unint64_t)v296, 0, v173, v174, v175);
      v177 = v176;
      if (v176)
        ++*v176;
      v178 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::Symbols::getPrivateName += 2;
      v294 = (WTF::StringImpl *)&JSC::Symbols::getPrivateName;
      JSC::BytecodeGenerator::emitDirectGetById(a2, v178, (uint64_t)v177, (WTF::AtomStringImpl *)&v294, v179, v180, v181, v182);
      if (v178)
        ++*v178;
      v190 = v294;
      v294 = 0;
      if (v190)
      {
        if (*(_DWORD *)v190 == 2)
        {
          WTF::StringImpl::~StringImpl(v190, v183, v184, v185, v186, v187, v188, v189);
          WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
        }
        else
        {
          *(_DWORD *)v190 -= 2;
        }
      }
      JSC::CallArguments::CallArguments((uint64_t)&v294, a2, 0, 0);
      v196 = *v295;
      v293 = (int *)(a2 + 208);
      if ((int *)(a2 + 208) != v196 && v196 && v196 != v17)
        JSC::BytecodeGenerator::emitMove(a2, v196, (uint64_t)v17, v191, v192, v193, v194, v195);
      v292 = (_DWORD *)(a1 + 8);
      JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v19, (uint64_t)v178, 0, (uint64_t)&v294, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), 1u);
      JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v294, v197, v198, v199, v200, v201, v202, v203);
      if (v178)
        --*v178;
      if (v177)
        --*v177;
      JSC::emitIncOrDec(a2, (uint64_t)v19, *(unsigned __int8 *)(a1 + 80), v204, v205, v206, v207, v208);
      v209 = (_DWORD *)(a1 + 28);
      v210 = (_DWORD *)(a1 + 40);
      v211 = (_DWORD *)(a1 + 52);
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v209, v210, v211);
      if ((v81 & 4) != 0)
      {
        v225 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v229 = JSC::BytecodeGenerator::emitGetFromScope(a2, v225, (uint64_t)v88, (unint64_t)v296, 0, v226, v227, v228);
        v230 = v229;
        if (v229)
          ++*v229;
        v231 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        JSC::Symbols::setPrivateName += 2;
        v294 = (WTF::StringImpl *)&JSC::Symbols::setPrivateName;
        JSC::BytecodeGenerator::emitDirectGetById(a2, v231, (uint64_t)v230, (WTF::AtomStringImpl *)&v294, v232, v233, v234, v235);
        if (v231)
          ++*v231;
        v243 = v294;
        v294 = 0;
        if (v243)
        {
          if (*(_DWORD *)v243 == 2)
          {
            WTF::StringImpl::~StringImpl(v243, v236, v237, v238, v239, v240, v241, v242);
            WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
          }
          else
          {
            *(_DWORD *)v243 -= 2;
          }
        }
        JSC::CallArguments::CallArguments((uint64_t)&v294, a2, 0, 1);
        v249 = v295;
        v250 = *v295;
        if (v293 != *v295 && v250 && v250 != v17)
        {
          JSC::BytecodeGenerator::emitMove(a2, v250, (uint64_t)v17, v244, v245, v246, v247, v248);
          v249 = v295;
        }
        v251 = v249[1];
        if (v293 != v251 && v251 && v251 != v19)
          JSC::BytecodeGenerator::emitMove(a2, v251, (uint64_t)v19, v244, v245, v246, v247, v248);
        v252 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v252, (uint64_t)v231, 0, (uint64_t)&v294, v292, v292, v292, 1u);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v19, (uint64_t)v210, (uint64_t)v211);
        if (v293 == a3)
        {
          v74 = 0;
        }
        else
        {
          v74 = v19;
          if (a3)
          {
            v74 = v19;
            if (v19 != a3)
            {
              JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v19, v255, v256, v257, v258, v259);
              v74 = a3;
            }
          }
        }
        JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v294, v253, v254, v255, v256, v257, v258, v259);
        if (v231)
          --*v231;
        if (v230)
          --*v230;
LABEL_78:
        if (v89)
          --*v89;
        if (v88)
          --*v88;
        v111 = (WTF::StringImpl *)v296[0];
        v296[0] = 0;
        if (!v111)
          goto LABEL_60;
        goto LABEL_113;
      }
      JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private getter", 0x2DuLL, v212, v213, v214, v215, v216);
      v110 = v293;
    }
    else
    {
      JSC::BytecodeGenerator::emitThrowTypeError(a2, "Trying to access an undefined private getter", 0x2DuLL, v98, v99, v100, v101, v102);
      v110 = (int *)(a2 + 208);
    }
    if (v110 == a3)
    {
      v74 = 0;
    }
    else
    {
      v74 = v19;
      if (a3)
      {
        v74 = v19;
        if (v19 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v19, v105, v106, v107, v108, v109);
          v74 = a3;
        }
      }
    }
    goto LABEL_78;
  }
  JSC::BytecodeGenerator::variable((uint64_t)&v294, a2, (uint64_t)v12, 0, v77, v78, v79, v80);
  v120 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)&v294, v115, v116, v117, v118, v119);
  v121 = v120;
  if (v120)
    ++*v120;
  v122 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v126 = v122;
  if (v122)
    ++*v122;
  JSC::BytecodeGenerator::emitGetFromScope(a2, v122, (uint64_t)v121, (unint64_t)&v294, 1, v123, v124, v125);
  JSC::BytecodeGenerator::emitGetPrivateName(a2, (uint64_t)v19, v17[1], v126[1], v127, v128, v129, v130);
  JSC::emitIncOrDec(a2, (uint64_t)v19, *(unsigned __int8 *)(a1 + 80), v131, v132, v133, v134, v135);
  v136 = (_DWORD *)(a1 + 28);
  v137 = (_DWORD *)(a1 + 40);
  v138 = (_DWORD *)(a1 + 52);
  JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v136, v137, v138);
  JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(a2, v17[1], v126[1], v19[1], 1, v139, v140, v141);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v19, (uint64_t)v137, (uint64_t)v138);
  if ((int *)(a2 + 208) == a3)
  {
    v74 = 0;
  }
  else
  {
    v74 = v19;
    if (a3)
    {
      v74 = v19;
      if (v19 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v19, v144, v145, v146, v147, v148);
        v74 = a3;
      }
    }
  }
  --*v126;
  if (v121)
    --*v121;
  v149 = v294;
  v294 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v142, v143, v144, v145, v146, v147, v148);
      WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
LABEL_61:
  --*v19;
LABEL_62:
  if (v17)
    --*v17;
  return v74;
}

int *JSC::PostfixNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72)))
    return JSC::PostfixNode::emitResolve(a1, (uint64_t)a2, a3, v6, v7, v8, v9, v10);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 128))(*(_QWORD *)(a1 + 72)))
    return JSC::PostfixNode::emitBracket(a1, a2, a3);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 136))(*(_QWORD *)(a1 + 72)))
    return JSC::PostfixNode::emitDot(a1, (uint64_t)a2, a3, v12, v13, v14, v15, v16);
  if (*(_BYTE *)(a1 + 80) == 5)
    v17 = "Postfix ++ operator applied to value that is not a reference.";
  else
    v17 = "Postfix -- operator applied to value that is not a reference.";
  return (int *)JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 28), (uint64_t)a2, (unsigned __int8 *)v17, 0x3EuLL, (uint64_t)a3, v14, v15, v16);
}

uint64_t JSC::DeleteResolveNode::emitBytecode(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v35;
  BOOL v36;
  int v38;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62[5];

  JSC::BytecodeGenerator::variable((uint64_t)v62, a2, *(_QWORD *)(a1 + 64), 0, a5, a6, a7, a8);
  if (v62[2])
  {
    v16 = (int *)JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
    v29 = (uint64_t)JSC::BytecodeGenerator::emitLoad(a2, v16, 6, v17, v18, v19, v20, v21);
  }
  else
  {
    v31 = *(_DWORD *)(a1 + 28);
    v30 = *(_DWORD *)(a1 + 32);
    v32 = *(_DWORD *)(a1 + 36);
    if (v31 != -1 || v30 != -1 || v32 != -1)
    {
      v35 = *(_DWORD *)(a1 + 44);
      v36 = *(_DWORD *)(a1 + 40) == -1 && v35 == -1;
      if (!v36 || *(_DWORD *)(a1 + 48) != -1)
      {
        v38 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v38 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
        {
          v40 = *(_QWORD *)(a2 + 192);
          v41 = *(_DWORD *)(v40 + 176);
          v42 = v30 - v41;
          v43 = v32 >= v41;
          v44 = v32 - v41;
          if (!v43)
            v44 = 0;
          v43 = v42 >= v44;
          v45 = v42 - v44;
          if (v43)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v42, v30 - v35, v38 - v30, (v31 + ~*(_DWORD *)(v40 + 184)) | (unint64_t)(v45 << 32));
        }
      }
    }
    v46 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, a3, (unsigned __int8 *)v62, v11, v12, v13, v14, v15);
    v47 = v46;
    if (v46)
      ++*v46;
    v29 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, (uint64_t)v46);
    JSC::BytecodeGenerator::emitDeleteById(a2, v29, v47[1], *(WTF::AtomStringImpl **)(a1 + 64), v48, v49, v50, v51);
    --*v47;
  }
  v52 = v62[0];
  v62[0] = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v29;
}

_DWORD *JSC::DeleteBracketNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  char v14;
  char v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _BYTE *v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  signed int v45;
  uint64_t v46;
  _BOOL4 v47;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  _DWORD *result;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _BYTE v80[11];
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;

  v6 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v12 = v6;
  if (v6)
    ++*v6;
  v13 = *(_BYTE **)(a1 + 64);
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v80 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v16 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v13[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), v7, v8, v9, v10, v11);
    v16 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, a2, 0);
  }
  v22 = v16;
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  if (v16)
    ++*v16;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 26))
  {
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v16);
    v14 = *(_BYTE *)(a2 + 709);
    v15 = *(_BYTE *)(a2 + 710);
  }
  v23 = *(_BYTE **)(a1 + 72);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v80 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v24 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v23[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v23 + 8), v17, v18, v19, v20, v21);
    v24 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, a2, 0);
  }
  v25 = v24;
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  if (v24)
    ++*v24;
  v27 = *(_DWORD *)(a1 + 28);
  v26 = *(_DWORD *)(a1 + 32);
  v28 = *(_DWORD *)(a1 + 36);
  if (v27 != -1 || v26 != -1 || v28 != -1)
  {
    v29 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v29 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v30 = *(_DWORD *)(a1 + 56);
      if ((*(_DWORD *)(a1 + 52) & v30 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v31 = *(_QWORD *)(a2 + 192);
        v32 = *(_DWORD *)(v31 + 176);
        v33 = v26 - v32;
        v34 = v28 >= v32;
        v35 = v28 - v32;
        if (!v34)
          v35 = 0;
        v34 = v33 >= v35;
        v36 = v33 - v35;
        if (v34)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v33, v26 - v29, v30 - v26, (v27 + ~*(_DWORD *)(v31 + 184)) | (unint64_t)(v36 << 32));
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64)) & 1) == 0)
  {
    v43 = v22[1];
    v44 = v25[1];
    v45 = v12[1];
    v46 = *(unsigned __int8 *)(a2 + 712);
    v47 = (v45 - 1073741808) < 0x80;
    if (v45 <= 0x3FFFFFFF)
      v47 = (v45 + 128) < 0x90;
    if (!v47)
      goto LABEL_79;
    if (!((int)v43 <= 0x3FFFFFFF ? (v43 + 128) < 0x90 : (v43 - 1073741808) < 0x80))
      goto LABEL_79;
    v49 = (v44 - 1073741808) < 0x80;
    if ((int)v44 <= 0x3FFFFFFF)
      v49 = (v44 + 128) < 0x90;
    if (v49)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x3B, v37, v38, v39, v40, v41, v42);
      v81 = 59;
      v50 = *(unsigned int *)(a2 + 12);
      v51 = *(unsigned int *)(a2 + 16);
      if (v50 > v51)
      {
        *(_DWORD *)(a2 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v51) = 59;
        v54 = *(_DWORD *)(a2 + 12);
        v55 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v50 == *(_DWORD *)(a2 + 8))
        {
          v72 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v50 + 1), (unint64_t)&v81);
          v50 = *(unsigned int *)(a2 + 12);
          v52 = *(_QWORD *)a2;
          v53 = *v72;
        }
        else
        {
          v52 = *(_QWORD *)a2;
          v53 = 59;
        }
        *(_BYTE *)(v52 + v50) = v53;
        v54 = *(_DWORD *)(a2 + 12) + 1;
        v55 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v54;
        *(_DWORD *)(a2 + 16) = v55;
      }
      v56 = v45 + 16;
      if (v45 <= 0x3FFFFFFF)
        v56 = v45;
      v82 = v56;
      if (v54 > v55)
      {
        *(_DWORD *)(a2 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v55) = v56;
        v59 = *(_DWORD *)(a2 + 12);
        v60 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v57 = v54;
        if (v54 == *(_DWORD *)(a2 + 8))
        {
          v73 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v54 + 1), (unint64_t)&v82);
          v57 = *(unsigned int *)(a2 + 12);
          v58 = *(_QWORD *)a2;
          v56 = *v73;
        }
        else
        {
          v58 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v58 + v57) = v56;
        v59 = *(_DWORD *)(a2 + 12) + 1;
        v60 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v59;
        *(_DWORD *)(a2 + 16) = v60;
      }
      v61 = v43 + 16;
      if ((int)v43 <= 0x3FFFFFFF)
        v61 = v43;
      v83 = v61;
      if (v59 > v60)
      {
        *(_DWORD *)(a2 + 16) = v60 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v60) = v61;
        v64 = *(_DWORD *)(a2 + 12);
        v65 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v62 = v59;
        if (v59 == *(_DWORD *)(a2 + 8))
        {
          v74 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v59 + 1), (unint64_t)&v83);
          v62 = *(unsigned int *)(a2 + 12);
          v63 = *(_QWORD *)a2;
          v61 = *v74;
        }
        else
        {
          v63 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v63 + v62) = v61;
        v64 = *(_DWORD *)(a2 + 12) + 1;
        v65 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v64;
        *(_DWORD *)(a2 + 16) = v65;
      }
      v66 = v44 + 16;
      if ((int)v44 <= 0x3FFFFFFF)
        v66 = v44;
      v84 = v66;
      if (v64 > v65)
      {
        *(_DWORD *)(a2 + 16) = v65 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v65) = v66;
        v69 = *(_DWORD *)(a2 + 12);
        v70 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v67 = v64;
        if (v64 == *(_DWORD *)(a2 + 8))
        {
          v75 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v64 + 1), (unint64_t)&v84);
          v67 = *(unsigned int *)(a2 + 12);
          v68 = *(_QWORD *)a2;
          v66 = *v75;
        }
        else
        {
          v68 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v68 + v67) = v66;
        v69 = *(_DWORD *)(a2 + 12) + 1;
        v70 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v69;
        *(_DWORD *)(a2 + 16) = v70;
      }
      v85 = v46;
      if (v69 > v70)
      {
        *(_DWORD *)(a2 + 16) = v70 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v70) = v46;
      }
      else
      {
        if (v69 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v69 + 1), (unint64_t)&v85);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v69) = v46;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
    }
    else
    {
LABEL_79:
      v79 = JSC::OpDelByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v12[1], v22[1], v25[1], *(unsigned __int8 *)(a2 + 712), v40, v41, v42);
      result = v12;
      if ((v79 & 1) != 0)
        goto LABEL_68;
      JSC::OpDelByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v45, v43, v44, v46, v76, v77, v78);
    }
    result = v12;
LABEL_68:
    --*v25;
    goto LABEL_69;
  }
  result = (_DWORD *)JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 28), a2, "Cannot delete a super property", 0x1FuLL, a3, v40, v41, v42);
  if (v25)
    goto LABEL_68;
LABEL_69:
  if (v22)
    --*v22;
  if (v12)
    --*v12;
  return result;
}

_DWORD *JSC::DeleteDotNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  char v14;
  char v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *result;
  uint64_t v34;

  v6 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v12 = v6;
  if (v6)
    ++*v6;
  v13 = *(_BYTE **)(a1 + 64);
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v34 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v16 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v13[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), v7, v8, v9, v10, v11);
    v16 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, a2, 0);
  }
  v17 = v16;
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  if (v16)
    ++*v16;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 26))
    JSC::BytecodeGenerator::emitOptionalCheck(a2, (uint64_t)v16);
  v19 = *(_DWORD *)(a1 + 28);
  v18 = *(_DWORD *)(a1 + 32);
  v20 = *(_DWORD *)(a1 + 36);
  if (v19 != -1 || v18 != -1 || v20 != -1)
  {
    v21 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v21 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v22 = *(_DWORD *)(a1 + 56);
      if ((*(_DWORD *)(a1 + 52) & v22 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v23 = *(_QWORD *)(a2 + 192);
        v24 = *(_DWORD *)(v23 + 176);
        v25 = v18 - v24;
        v26 = v20 >= v24;
        v27 = v20 - v24;
        if (!v26)
          v27 = 0;
        v26 = v25 >= v27;
        v28 = v25 - v27;
        if (v26)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v25, v18 - v21, v22 - v18, (v19 + ~*(_DWORD *)(v23 + 184)) | (unint64_t)(v28 << 32));
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64)) & 1) == 0)
  {
    JSC::BytecodeGenerator::emitDeleteById(a2, (uint64_t)v12, v17[1], *(WTF::AtomStringImpl **)(a1 + 72), v29, v30, v31, v32);
    result = v12;
LABEL_26:
    --*v17;
    goto LABEL_27;
  }
  result = (_DWORD *)JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 28), a2, "Cannot delete a super property", 0x1FuLL, a3, v30, v31, v32);
  if (v17)
    goto LABEL_26;
LABEL_27:
  if (v12)
    --*v12;
  return result;
}

int *JSC::DeleteValueNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a2 + 709);
  *(_BYTE *)(a2 + 709) = 0;
  v12 = *(_BYTE *)(a2 + 710);
  *(_BYTE *)(a2 + 710) = *(_BYTE *)(a2 + 704);
  if ((unint64_t)&v31 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v13 = a2 + 208;
    if (*(_BYTE *)(v10 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v10 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v10 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v10 + 16) ? (v21 = *(_DWORD *)(a2 + 748) == 5) : (v21 = 0), !v21))
      {
        v31 = v10;
        v32 = a2 + 208;
        v22 = *(_QWORD *)(v10 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v10 + 16);
        *(_QWORD *)(a2 + 736) = v22;
        *(_DWORD *)(a2 + 748) = 5;
        v23 = *(_DWORD *)(v10 + 8);
        v24 = *(_DWORD *)(v10 + 12);
        v25 = *(_DWORD *)(v10 + 16);
        if (v23 != -1 || v24 != -1 || v25 != -1)
        {
          v26 = *(_QWORD *)(a2 + 192);
          v27 = *(_DWORD *)(v26 + 176);
          v13 = v24 - v27;
          v28 = v25 - v27;
          if (v25 < v27)
            v28 = 0;
          v29 = v13 >= v28;
          v30 = v13 - v28;
          if (v29)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v13, 0, 0, (v23 + ~*(_DWORD *)(v26 + 184)) | (unint64_t)(v30 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v13, a4, a5, a6, a7, a8);
        v10 = v31;
        v13 = v32;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, v13);
  }
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  v14 = (int *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  return JSC::BytecodeGenerator::emitLoad(a2, v14, 7, v15, v16, v17, v18, v19);
}

uint64_t JSC::BytecodeGenerator::emitNodeInIgnoreResultPosition(JSC::BytecodeGenerator *this, JSC::ExpressionNode *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  char v10;
  uint64_t result;
  uint64_t v13;

  v9 = *((_BYTE *)this + 709);
  *((_BYTE *)this + 709) = 0;
  v10 = *((_BYTE *)this + 710);
  *((_BYTE *)this + 710) = *((_BYTE *)this + 704);
  if ((unint64_t)&v13 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
  {
    *((_BYTE *)this + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  }
  else
  {
    if (*((_BYTE *)a2 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)this, 5, (uint64_t)a2 + 8, a4, a5, a6, a7, a8);
    result = (*(uint64_t (**)(JSC::ExpressionNode *, JSC::BytecodeGenerator *, char *))(*(_QWORD *)a2 + 16))(a2, this, (char *)this + 208);
  }
  *((_BYTE *)this + 710) = v10;
  *((_BYTE *)this + 709) = v9;
  return result;
}

int *JSC::VoidNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v9;
  char v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *result;
  uint64_t v21;

  v9 = *(JSC::ExpressionNode **)(a1 + 32);
  if ((int *)((char *)this + 208) == a3)
  {
    JSC::BytecodeGenerator::emitNodeInIgnoreResultPosition(this, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  else
  {
    v11 = *((_BYTE *)this + 709);
    v12 = *((_BYTE *)this + 710);
    *(_WORD *)((char *)this + 709) = 0;
    if ((unint64_t)&v21 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
    {
      *((_BYTE *)this + 706) = 1;
      v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
    }
    else
    {
      if (*((_BYTE *)v9 + 24))
        JSC::BytecodeGenerator::emitDebugHook((char *)this, 5, (uint64_t)v9 + 8, a4, a5, a6, a7, a8);
      v13 = (_DWORD *)(*(uint64_t (**)(JSC::ExpressionNode *, JSC::BytecodeGenerator *, _QWORD))(*(_QWORD *)v9 + 16))(v9, this, 0);
    }
    v19 = v13;
    *((_BYTE *)this + 710) = v12;
    *((_BYTE *)this + 709) = v11;
    if (v13)
    {
      ++*v13;
      result = JSC::BytecodeGenerator::emitLoad((uint64_t)this, a3, 10, v14, v15, v16, v17, v18);
      --*v19;
    }
    else
    {
      return JSC::BytecodeGenerator::emitLoad((uint64_t)this, a3, 10, v14, v15, v16, v17, v18);
    }
  }
  return result;
}

uint64_t JSC::TypeOfResolveNode::emitBytecode(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60[2];
  uint64_t v61;

  JSC::BytecodeGenerator::variable((uint64_t)v60, a2, *(_QWORD *)(a1 + 32), 0, a5, a6, a7, a8);
  v15 = v61;
  if (v61)
  {
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v60, v61, 0, v11, v12, v13, v14);
    if ((_BYTE *)(a2 + 208) == a3)
    {
      v23 = 0;
    }
    else
    {
      v23 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
      v24 = *(_DWORD *)(v23 + 4);
      v25 = *(unsigned int *)(v15 + 4);
      if ((JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v24, v25, v26, v27, v28, v29, v30) & 1) == 0&& (JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v24, v25, v18, v19, v20, v21, v22) & 1) == 0)
      {
        JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v24, v25, v18, v19, v20, v21, v22);
      }
    }
    goto LABEL_14;
  }
  v31 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, a3, (unsigned __int8 *)v60, v10, v11, v12, v13, v14);
  v32 = v31;
  if (v31)
    ++*v31;
  v33 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v37 = JSC::BytecodeGenerator::emitGetFromScope(a2, v33, (uint64_t)v32, (unint64_t)v60, 1, v34, v35, v36);
  v42 = v37;
  if (v37)
  {
    ++*v37;
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v60, (uint64_t)v37, 0, v38, v39, v40, v41);
    if ((_BYTE *)(a2 + 208) == a3)
    {
      v23 = 0;
LABEL_11:
      --*v42;
      goto LABEL_12;
    }
LABEL_10:
    v23 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, (uint64_t)v32);
    v43 = *(_DWORD *)(v23 + 4);
    v44 = v42[1];
    if ((JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v43, v44, v45, v46, v47, v48, v49) & 1) == 0
      && (JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v43, v44, v18, v19, v20, v21, v22) & 1) == 0)
    {
      JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v43, v44, v18, v19, v20, v21, v22);
    }
    goto LABEL_11;
  }
  JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v60, 0, 0, v38, v39, v40, v41);
  if ((_BYTE *)(a2 + 208) != a3)
    goto LABEL_10;
  v23 = 0;
LABEL_12:
  if (v32)
    --*v32;
LABEL_14:
  v50 = v60[0];
  v60[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::TypeOfValueNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, JSC::BytecodeGenerator *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ExpressionNode *v9;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *(JSC::ExpressionNode **)(a1 + 32);
  if ((JSC::BytecodeGenerator *)((char *)this + 208) == a3)
  {
    JSC::BytecodeGenerator::emitNodeInIgnoreResultPosition(this, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  else
  {
    v11 = *((_BYTE *)this + 709);
    v12 = *((_BYTE *)this + 710);
    *(_WORD *)((char *)this + 709) = 0;
    if ((unint64_t)&v34 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
    {
      *((_BYTE *)this + 706) = 1;
      v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
    }
    else
    {
      if (*((_BYTE *)v9 + 24))
        JSC::BytecodeGenerator::emitDebugHook((char *)this, 5, (uint64_t)v9 + 8, a4, a5, a6, a7, a8);
      v13 = (_DWORD *)(*(uint64_t (**)(JSC::ExpressionNode *, JSC::BytecodeGenerator *, _QWORD))(*(_QWORD *)v9 + 16))(v9, this, 0);
    }
    v14 = v13;
    *((_BYTE *)this + 710) = v12;
    *((_BYTE *)this + 709) = v11;
    if (v13)
      ++*v13;
    v15 = JSC::BytecodeGenerator::finalDestination((uint64_t)this, (uint64_t)a3, 0);
    v16 = *(_DWORD *)(v15 + 4);
    v17 = v14[1];
    if ((JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, v16, v17, v18, v19, v20, v21, v22) & 1) == 0&& (JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)this, v16, v17, v23, v24, v25, v26, v27) & 1) == 0)
    {
      JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, v16, v17, v29, v30, v31, v32, v33);
    }
    --*v14;
  }
  return v15;
}

uint64_t JSC::emitIncOrDec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 292);
  *(_DWORD *)(v11 + 292) = v12 + 1;
  if ((_DWORD)a3 == 5)
  {
    if (!JSC::OpInc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, v12, a4, a5, a6, a7, a8)
      && !JSC::OpInc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v12, v13, v14, v15, v16, v17))
    {
      JSC::OpInc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v12, v34, v35, v36, v37, v38);
    }
  }
  else
  {
    v19 = (v10 - 1073741808) < 0x80;
    if (v10 <= 0x3FFFFFFF)
      v19 = (v10 + 128) < 0x90;
    if (v12 > 0xFF || !v19)
    {
      if (!JSC::OpDec::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v12, a4, a5, a6, a7, a8))
        JSC::OpDec::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v12, v39, v40, v41, v42, v43);
    }
    else
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB6, a3, a4, a5, a6, a7, a8);
      v44 = -74;
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(unsigned int *)(a1 + 16);
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = -74;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
        {
          v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v44);
          v21 = *(unsigned int *)(a1 + 12);
          v23 = *(_QWORD *)a1;
          v24 = *v32;
        }
        else
        {
          v23 = *(_QWORD *)a1;
          v24 = -74;
        }
        *(_BYTE *)(v23 + v21) = v24;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      v27 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v27 = v10;
      v45 = v27;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
        v30 = *(_DWORD *)(a1 + 12);
        v31 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v28 = v25;
        if (v25 == *(_DWORD *)(a1 + 8))
        {
          v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
          v28 = *(unsigned int *)(a1 + 12);
          v29 = *(_QWORD *)a1;
          v27 = *v33;
        }
        else
        {
          v29 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v29 + v28) = v27;
        v30 = *(_DWORD *)(a1 + 12) + 1;
        v31 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v30;
        *(_DWORD *)(a1 + 16) = v31;
      }
      v46 = v12;
      if (v30 > v31)
      {
        *(_DWORD *)(a1 + 16) = v31 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v12;
      }
      else
      {
        if (v30 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v46);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v30) = v12;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
    }
  }
  return a2;
}

uint64_t JSC::PrefixNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72)))
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 368);
    return v6(a1, a2, a3);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 128))(*(_QWORD *)(a1 + 72)))
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 376);
    return v6(a1, a2, a3);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 136))(*(_QWORD *)(a1 + 72)))
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 384);
    return v6(a1, a2, a3);
  }
  if (*(_BYTE *)(a1 + 80) == 5)
    v11 = "Prefix ++ operator applied to value that is not a reference.";
  else
    v11 = "Prefix -- operator applied to value that is not a reference.";
  return JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 28), a2, (unsigned __int8 *)v11, 0x3DuLL, a3, v8, v9, v10);
}

uint64_t JSC::UnaryOpNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  char v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  unsigned int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  WTF *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;

  v11 = *(_BYTE **)(a1 + 32);
  v12 = *(_BYTE *)(a2 + 709);
  v13 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v118 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v14 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v11[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v11 + 8), a4, a5, a6, a7, a8);
    v14 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, a2, 0);
  }
  v15 = v14;
  *(_BYTE *)(a2 + 710) = v13;
  *(_BYTE *)(a2 + 709) = v12;
  if (v14)
    ++*v14;
  v16 = *(_DWORD *)(a1 + 8);
  v17 = *(_DWORD *)(a1 + 12);
  v18 = *(_DWORD *)(a1 + 16);
  if ((v16 & v17 & v18) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
  {
    v20 = *(_QWORD *)(a2 + 192);
    v21 = *(_DWORD *)(v20 + 176);
    v22 = v17 - v21;
    v23 = v18 - v21;
    if (v18 < v21)
      v23 = 0;
    v24 = v22 >= v23;
    v25 = v22 - v23;
    if (v24)
      JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v22, 0, 0, (v16 + ~*(_DWORD *)(v20 + 184)) | (unint64_t)(v25 << 32));
  }
  v26 = *(_DWORD *)(a1 + 40);
  v27 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v34 = v27;
  if (v26 == 184)
  {
    v35 = *(_DWORD *)(v27 + 4);
    v36 = v15[1];
    if ((JSC::OpNot::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v35, v36, v29, v30, v31, v32, v33) & 1) == 0
      && (JSC::OpNot::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v35, v36, v37, v38, v39, v40, v41) & 1) == 0)
    {
      JSC::OpNot::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v35, v36, v90, v91, v92, v93, v94);
    }
    goto LABEL_19;
  }
  if (v26 > 191)
  {
    switch(v26)
    {
      case 194:
        v68 = *(_DWORD *)(v27 + 4);
        v69 = v15[1];
        v70 = *(_QWORD *)(a2 + 24);
        v71 = *(unsigned int *)(v70 + 292);
        *(_DWORD *)(v70 + 292) = v71 + 1;
        v72 = (v68 - 1073741808) < 0x80;
        if (v68 <= 0x3FFFFFFF)
          v72 = (v68 + 128) < 0x90;
        if (!v72)
          goto LABEL_102;
        v73 = (v69 - 1073741808) < 0x80;
        if ((int)v69 <= 0x3FFFFFFF)
          v73 = (v69 + 128) < 0x90;
        if (v71 > 0xFF || !v73)
        {
LABEL_102:
          if ((JSC::OpBitnot::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v68, v69, v71, v30, v31, v32, v33) & 1) == 0)JSC::OpBitnot::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v68, v69, v71, v114, v115, v116, v117);
          goto LABEL_19;
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xC2, v28, v29, v30, v31, v32, v33);
        v123 = -62;
        v74 = *(unsigned int *)(a2 + 12);
        v75 = *(unsigned int *)(a2 + 16);
        if (v74 > v75)
        {
          *(_DWORD *)(a2 + 16) = v75 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v75) = -62;
          v78 = *(_DWORD *)(a2 + 12);
          v79 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          if ((_DWORD)v74 == *(_DWORD *)(a2 + 8))
          {
            v103 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v74 + 1), (unint64_t)&v123);
            v74 = *(unsigned int *)(a2 + 12);
            v76 = *(_QWORD *)a2;
            v77 = *v103;
          }
          else
          {
            v76 = *(_QWORD *)a2;
            v77 = -62;
          }
          *(_BYTE *)(v76 + v74) = v77;
          v78 = *(_DWORD *)(a2 + 12) + 1;
          v79 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v78;
          *(_DWORD *)(a2 + 16) = v79;
        }
        v80 = v68 + 16;
        if (v68 <= 0x3FFFFFFF)
          v80 = v68;
        v124 = v80;
        if (v78 > v79)
        {
          *(_DWORD *)(a2 + 16) = v79 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v79) = v80;
          v83 = *(_DWORD *)(a2 + 12);
          v84 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          v81 = v78;
          if (v78 == *(_DWORD *)(a2 + 8))
          {
            v104 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v78 + 1), (unint64_t)&v124);
            v81 = *(unsigned int *)(a2 + 12);
            v82 = *(_QWORD *)a2;
            v80 = *v104;
          }
          else
          {
            v82 = *(_QWORD *)a2;
          }
          *(_BYTE *)(v82 + v81) = v80;
          v83 = *(_DWORD *)(a2 + 12) + 1;
          v84 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v83;
          *(_DWORD *)(a2 + 16) = v84;
        }
        v85 = v69 + 16;
        if ((int)v69 <= 0x3FFFFFFF)
          v85 = v69;
        v125 = v85;
        if (v83 > v84)
        {
          *(_DWORD *)(a2 + 16) = v84 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v84) = v85;
          v88 = *(_DWORD *)(a2 + 12);
          v89 = *(_DWORD *)(a2 + 16);
        }
        else
        {
          v86 = v83;
          if (v83 == *(_DWORD *)(a2 + 8))
          {
            v105 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v83 + 1), (unint64_t)&v125);
            v86 = *(unsigned int *)(a2 + 12);
            v87 = *(_QWORD *)a2;
            v85 = *v105;
          }
          else
          {
            v87 = *(_QWORD *)a2;
          }
          *(_BYTE *)(v87 + v86) = v85;
          v88 = *(_DWORD *)(a2 + 12) + 1;
          v89 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 12) = v88;
          *(_DWORD *)(a2 + 16) = v89;
        }
        v126 = v71;
        if (v88 > v89)
        {
          *(_DWORD *)(a2 + 16) = v89 + 1;
          *(_BYTE *)(*(_QWORD *)a2 + v89) = v71;
          goto LABEL_19;
        }
        if (v88 != *(_DWORD *)(a2 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a2 + v88) = v71;
          goto LABEL_53;
        }
        v98 = (WTF *)(v88 + 1);
        v99 = &v126;
LABEL_88:
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v98, (unint64_t)v99);
        goto LABEL_53;
      case 192:
        v110 = *(_DWORD *)(v27 + 4);
        v111 = v15[1];
        v112 = *(_QWORD *)(a2 + 24);
        v113 = *(unsigned int *)(v112 + 292);
        *(_DWORD *)(v112 + 292) = v113 + 1;
        JSC::OpToNumber::emit<JSC::BytecodeGenerator>(a2, v110, v111, v113, v30, v31, v32, v33);
        goto LABEL_19;
      case 193:
        v106 = *(_DWORD *)(v27 + 4);
        v107 = v15[1];
        v108 = *(_QWORD *)(a2 + 24);
        v109 = *(unsigned int *)(v108 + 292);
        *(_DWORD *)(v108 + 292) = v109 + 1;
        JSC::OpToNumeric::emit<JSC::BytecodeGenerator>(a2, v106, v107, v109, v30, v31, v32, v33);
        goto LABEL_19;
    }
LABEL_100:
    if (!v15)
      return v34;
    goto LABEL_19;
  }
  if (v26 != 183)
    goto LABEL_100;
  v43 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 25);
  v44 = *(_DWORD *)(v27 + 4);
  v45 = v15[1];
  v46 = *(_QWORD *)(a2 + 24);
  v47 = *(unsigned int *)(v46 + 292);
  *(_DWORD *)(v46 + 292) = v47 + 1;
  v48 = (v44 - 1073741808) < 0x80;
  if (v44 <= 0x3FFFFFFF)
    v48 = (v44 + 128) < 0x90;
  if (!v48)
    goto LABEL_89;
  v49 = (v45 - 1073741808) < 0x80;
  if ((int)v45 <= 0x3FFFFFFF)
    v49 = (v45 + 128) < 0x90;
  if (v47 > 0xFF || !v49)
  {
LABEL_89:
    if ((JSC::OpNegate::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v44, v45, v47, v43, v31, v32, v33) & 1) == 0)
      JSC::OpNegate::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v44, v45, v47, v43, v100, v101, v102);
    goto LABEL_19;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xB7, v28, v29, v30, v31, v32, v33);
  HIBYTE(v118) = -73;
  v50 = *(unsigned int *)(a2 + 12);
  v51 = *(unsigned int *)(a2 + 16);
  if (v50 > v51)
  {
    *(_DWORD *)(a2 + 16) = v51 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v51) = -73;
    v54 = *(_DWORD *)(a2 + 12);
    v55 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if ((_DWORD)v50 == *(_DWORD *)(a2 + 8))
    {
      v95 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v50 + 1), (unint64_t)&v118 + 7);
      v50 = *(unsigned int *)(a2 + 12);
      v52 = *(_QWORD *)a2;
      v53 = *v95;
    }
    else
    {
      v52 = *(_QWORD *)a2;
      v53 = -73;
    }
    *(_BYTE *)(v52 + v50) = v53;
    v54 = *(_DWORD *)(a2 + 12) + 1;
    v55 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v54;
    *(_DWORD *)(a2 + 16) = v55;
  }
  v56 = v44 + 16;
  if (v44 <= 0x3FFFFFFF)
    v56 = v44;
  v119 = v56;
  if (v54 > v55)
  {
    *(_DWORD *)(a2 + 16) = v55 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v55) = v56;
    v59 = *(_DWORD *)(a2 + 12);
    v60 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v57 = v54;
    if (v54 == *(_DWORD *)(a2 + 8))
    {
      v96 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v54 + 1), (unint64_t)&v119);
      v57 = *(unsigned int *)(a2 + 12);
      v58 = *(_QWORD *)a2;
      v56 = *v96;
    }
    else
    {
      v58 = *(_QWORD *)a2;
    }
    *(_BYTE *)(v58 + v57) = v56;
    v59 = *(_DWORD *)(a2 + 12) + 1;
    v60 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v59;
    *(_DWORD *)(a2 + 16) = v60;
  }
  v61 = v45 + 16;
  if ((int)v45 <= 0x3FFFFFFF)
    v61 = v45;
  v120 = v61;
  if (v59 > v60)
  {
    *(_DWORD *)(a2 + 16) = v60 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v60) = v61;
    v64 = *(_DWORD *)(a2 + 12);
    v65 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v62 = v59;
    if (v59 == *(_DWORD *)(a2 + 8))
    {
      v97 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v59 + 1), (unint64_t)&v120);
      v62 = *(unsigned int *)(a2 + 12);
      v63 = *(_QWORD *)a2;
      v61 = *v97;
    }
    else
    {
      v63 = *(_QWORD *)a2;
    }
    *(_BYTE *)(v63 + v62) = v61;
    v64 = *(_DWORD *)(a2 + 12) + 1;
    v65 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v64;
    *(_DWORD *)(a2 + 16) = v65;
  }
  v121 = v47;
  if (v64 > v65)
  {
    *(_DWORD *)(a2 + 16) = v65 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v65) = v47;
    v66 = *(_DWORD *)(a2 + 12);
    v67 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (v64 == *(_DWORD *)(a2 + 8))
      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v64 + 1), (unint64_t)&v121);
    else
      *(_BYTE *)(*(_QWORD *)a2 + v64) = v47;
    v66 = *(_DWORD *)(a2 + 12) + 1;
    v67 = *(_DWORD *)(a2 + 16) + 1;
    *(_DWORD *)(a2 + 12) = v66;
    *(_DWORD *)(a2 + 16) = v67;
  }
  v122 = v43;
  if (v66 > v67)
  {
    *(_DWORD *)(a2 + 16) = v67 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v67) = v43;
    goto LABEL_19;
  }
  if (v66 == *(_DWORD *)(a2 + 8))
  {
    v98 = (WTF *)(v66 + 1);
    v99 = &v122;
    goto LABEL_88;
  }
  *(_BYTE *)(*(_QWORD *)a2 + v66) = v43;
LABEL_53:
  *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
LABEL_19:
  --*v15;
  return v34;
}

uint64_t JSC::UnaryPlusNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  char v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = *(_BYTE **)(a1 + 32);
  v12 = *(_BYTE *)(a2 + 709);
  v13 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v44 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v14 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v11[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v11 + 8), a4, a5, a6, a7, a8);
    v14 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, a2, 0);
  }
  v15 = v14;
  *(_BYTE *)(a2 + 710) = v13;
  *(_BYTE *)(a2 + 709) = v12;
  if (v14)
    ++*v14;
  v16 = *(_DWORD *)(a1 + 8);
  v17 = *(_DWORD *)(a1 + 12);
  v18 = *(_DWORD *)(a1 + 16);
  if ((v16 & v17 & v18) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
  {
    v20 = *(_QWORD *)(a2 + 192);
    v21 = *(_DWORD *)(v20 + 176);
    v22 = v17 - v21;
    v23 = v18 - v21;
    if (v18 < v21)
      v23 = 0;
    v24 = v22 >= v23;
    v25 = v22 - v23;
    if (v24)
      JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v22, 0, 0, (v16 + ~*(_DWORD *)(v20 + 184)) | (unint64_t)(v25 << 32));
  }
  v26 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v27 = *(_DWORD *)(v26 + 4);
  v28 = v15[1];
  v29 = *(_QWORD *)(a2 + 24);
  v30 = *(unsigned int *)(v29 + 292);
  *(_DWORD *)(v29 + 292) = v30 + 1;
  if ((JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v27, v28, v30, v31, v32, v33, v34) & 1) == 0
    && (JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v27, v28, v30, v35, v36, v37, v38) & 1) == 0)
  {
    JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v27, v28, v30, v40, v41, v42, v43);
  }
  --*v15;
  return v26;
}

uint64_t JSC::LogicalNotNode::emitBytecodeInConditionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v14;

  v8 = a5;
  if (*(_BYTE *)(a1 + 24))
    JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, a1 + 8, a4, a5, a6, a7, a8);
  if ((unint64_t)&v14 >= *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, BOOL))(**(_QWORD **)(a1 + 32) + 352))(*(_QWORD *)(a1 + 32), a2, a4, a3, v8 == 0);
  *(_BYTE *)(a2 + 706) = 1;
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
}

uint64_t JSC::BinaryOpNode::emitStrcat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  WTF *v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _BYTE *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  _DWORD *v85;
  WTF *v86;
  WTF *v88;
  _DWORD *v91;
  uint64_t v92;
  WTF *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  BOOL v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129[2];
  _DWORD *v130;
  WTF *v131;
  uint64_t v132;
  _BYTE v133[128];
  WTF *v134;
  uint64_t v135;
  _QWORD v136[17];

  *(_QWORD *)v129 = a4;
  v9 = a1;
  v134 = (WTF *)v136;
  v136[0] = a2;
  v135 = 0x100000010;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1))
  {
    do
    {
      if ((*(_BYTE *)(v9 + 25) & 0x7E) != 4)
        break;
      v10 = (_QWORD *)(v9 + 48);
      v11 = HIDWORD(v135);
      if (HIDWORD(v135) == (_DWORD)v135)
      {
        WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionNode *&>((uint64_t)&v134, (unint64_t)v10);
      }
      else
      {
        *((_QWORD *)v134 + HIDWORD(v135)) = *v10;
        HIDWORD(v135) = v11 + 1;
      }
      v9 = *(_QWORD *)(v9 + 40);
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 200))(v9) & 1) != 0);
  }
  v131 = (WTF *)v133;
  v132 = 16;
  if (a5)
  {
    v91 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
    v130 = v91;
    v92 = HIDWORD(v132);
    v93 = v131;
    if (v91)
      ++*v91;
    *((_QWORD *)v93 + v92) = v91;
    HIDWORD(v132) = v92 + 1;
  }
  v12 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
  v130 = v12;
  v18 = HIDWORD(v132);
  if (HIDWORD(v132) == (_DWORD)v132)
  {
    WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v131, &v130);
    v19 = HIDWORD(v132);
  }
  else
  {
    v19 = HIDWORD(v132) + 1;
    v20 = v131;
    if (v12)
      ++*v12;
    *((_QWORD *)v20 + v18) = v12;
    HIDWORD(v132) = v18 + 1;
  }
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198274584);
  }
  v21 = *((_QWORD *)v131 + v19 - 1);
  v22 = *(_BYTE *)(a3 + 709);
  v23 = *(_BYTE *)(a3 + 710);
  *(_WORD *)(a3 + 709) = 0;
  if ((unint64_t)&v128 < *(_QWORD *)(*(_QWORD *)(a3 + 696) + 93104))
  {
    *(_BYTE *)(a3 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
  }
  else
  {
    if (*(_BYTE *)(v9 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a3, 5, v9 + 8, v13, v14, v15, v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a3, v21);
  }
  *(_BYTE *)(a3 + 710) = v23;
  *(_BYTE *)(a3 + 709) = v22;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  if (HIDWORD(v135))
  {
    if (v24)
      v30 = 0;
    else
      v30 = v21;
    v31 = (_BYTE *)*((_QWORD *)v134 + HIDWORD(v135) - 1);
    --HIDWORD(v135);
    v32 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
    v130 = v32;
    v38 = HIDWORD(v132);
    if (HIDWORD(v132) == (_DWORD)v132)
    {
      WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v131, &v130);
      v39 = HIDWORD(v132);
    }
    else
    {
      v39 = HIDWORD(v132) + 1;
      v40 = v131;
      if (v32)
        ++*v32;
      *((_QWORD *)v40 + v38) = v32;
      HIDWORD(v132) = v38 + 1;
    }
    if (!v39)
      goto LABEL_109;
    v41 = *((_QWORD *)v131 + v39 - 1);
    v42 = *(_BYTE *)(a3 + 709);
    v43 = *(_BYTE *)(a3 + 710);
    *(_WORD *)(a3 + 709) = 0;
    if ((unint64_t)&v128 < *(_QWORD *)(*(_QWORD *)(a3 + 696) + 93104))
    {
      *(_BYTE *)(a3 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
    }
    else
    {
      if (v31[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a3, 5, (uint64_t)(v31 + 8), v33, v34, v35, v36, v37);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, a3, v41);
    }
    *(_BYTE *)(a3 + 710) = v43;
    *(_BYTE *)(a3 + 709) = v42;
    if (v30)
    {
      v117 = *(unsigned int *)(v30 + 4);
      if ((JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a3, *(_DWORD *)(v30 + 4), v117, v44, v45, v46, v47, v48) & 1) == 0&& (JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a3, v117, v117, v118, v119, v120, v121, v122) & 1) == 0)
      {
        JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a3, v117, v117, v123, v124, v125, v126, v127);
      }
    }
    if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v31 + 32))(v31) & 1) == 0)
    {
      if (!HIDWORD(v132))
      {
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x19827457CLL);
      }
      v49 = *((_QWORD *)v131 + HIDWORD(v132) - 1);
      v50 = *(unsigned int *)(v49 + 4);
      if ((JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a3, *(_DWORD *)(v49 + 4), v50, v25, v26, v27, v28, v29) & 1) == 0&& (JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a3, v50, v50, v25, v26, v27, v28, v29) & 1) == 0)
      {
        JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a3, v50, v50, v25, v26, v27, v28, v29);
      }
    }
    v51 = HIDWORD(v135);
    if (HIDWORD(v135))
    {
      while (1)
      {
        v52 = (_BYTE *)*((_QWORD *)v134 + v51 - 1);
        HIDWORD(v135) = v51 - 1;
        v53 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
        v130 = v53;
        v59 = HIDWORD(v132);
        if (HIDWORD(v132) == (_DWORD)v132)
        {
          WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>((uint64_t)&v131, &v130);
          v61 = HIDWORD(v132);
        }
        else
        {
          v60 = v131;
          if (v53)
            ++*v53;
          v61 = v59 + 1;
          *((_QWORD *)v60 + v59) = v53;
          HIDWORD(v132) = v59 + 1;
        }
        if (!v61)
          break;
        v62 = *((_QWORD *)v131 + v61 - 1);
        v63 = *(_BYTE *)(a3 + 709);
        v64 = *(_BYTE *)(a3 + 710);
        *(_WORD *)(a3 + 709) = 0;
        if ((unint64_t)&v128 < *(_QWORD *)(*(_QWORD *)(a3 + 696) + 93104))
        {
          *(_BYTE *)(a3 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a3);
        }
        else
        {
          if (v52[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a3, 5, (uint64_t)(v52 + 8), v54, v55, v56, v57, v58);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, a3, v62);
        }
        *(_BYTE *)(a3 + 710) = v64;
        *(_BYTE *)(a3 + 709) = v63;
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v52 + 32))(v52) & 1) == 0)
        {
          if (!HIDWORD(v132))
            goto LABEL_105;
          v65 = *((_QWORD *)v131 + HIDWORD(v132) - 1);
          v66 = *(unsigned int *)(v65 + 4);
          if ((JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a3, *(_DWORD *)(v65 + 4), v66, v25, v26, v27, v28, v29) & 1) == 0&& (JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a3, v66, v66, v25, v26, v27, v28, v29) & 1) == 0)
          {
            JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a3, v66, v66, v25, v26, v27, v28, v29);
          }
        }
        v51 = HIDWORD(v135);
        if (!HIDWORD(v135))
          goto LABEL_47;
      }
LABEL_109:
      __break(0xC471u);
      JUMPOUT(0x198274574);
    }
  }
LABEL_47:
  if (a6)
  {
    v107 = a6[7];
    v106 = a6[8];
    v108 = a6[9];
    if (v107 != -1 || v106 != -1 || v108 != -1)
    {
      v109 = a6[11];
      if (a6[10] != -1 || v109 != -1 || a6[12] != -1)
      {
        v110 = a6[14];
        if ((a6[13] & v110 & a6[15]) != 0xFFFFFFFF && !*(_BYTE *)(a3 + 707))
        {
          v111 = *(_QWORD *)(a3 + 192);
          v112 = *(_DWORD *)(v111 + 176);
          v113 = v106 - v112;
          v114 = v108 >= v112;
          v115 = v108 - v112;
          if (!v114)
            v115 = 0;
          v114 = v113 >= v115;
          v116 = v113 - v115;
          if (v114)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a3 + 24), *(unsigned int *)(a3 + 12), v113, v106 - v109, v110 - v106, (v107 + ~*(_DWORD *)(v111 + 184)) | (unint64_t)(v116 << 32));
        }
      }
    }
  }
  if (a5)
  {
    if (!HIDWORD(v132))
      goto LABEL_109;
    v94 = *(_DWORD *)(*(_QWORD *)v131 + 4);
    v95 = *(unsigned int *)(a5 + 4);
    if ((JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a3, v94, v95, v25, v26, v27, v28, v29) & 1) == 0&& (JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a3, v94, v95, v96, v97, v98, v99, v100) & 1) == 0)
    {
      JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a3, v94, v95, v101, v102, v103, v104, v105);
    }
  }
  if (!HIDWORD(v132))
  {
    __break(0xC471u);
    JUMPOUT(0x19827458CLL);
  }
  v67 = JSC::BytecodeGenerator::finalDestination(a3, *(uint64_t *)v129, *(_QWORD *)v131);
  v72 = HIDWORD(v132);
  if (!HIDWORD(v132))
  {
    __break(0xC471u);
    JUMPOUT(0x198274594);
  }
  v73 = v67;
  v74 = *(_DWORD *)(v67 + 4);
  v75 = *(unsigned int *)(*(_QWORD *)v131 + 4);
  if ((JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a3, v74, v75, HIDWORD(v132), v68, v69, v70, v71) & 1) == 0&& (JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a3, v74, v75, v72, v79, v80, v81, v82) & 1) == 0)
  {
    JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a3, v74, v75, v72, v79, v80, v81, v82);
  }
  if (HIDWORD(v132))
  {
    v83 = v131;
    v84 = 8 * HIDWORD(v132);
    do
    {
      v85 = *(_DWORD **)v83;
      *(_QWORD *)v83 = 0;
      if (v85)
        --*v85;
      v83 = (WTF *)((char *)v83 + 8);
      v84 -= 8;
    }
    while (v84);
  }
  v86 = v131;
  if (v133 != (_BYTE *)v131 && v131 != 0)
  {
    v131 = 0;
    LODWORD(v132) = 0;
    WTF::fastFree((unint64_t)v86, v76, v77, v78, v79, v80, v81, v82);
  }
  v88 = v134;
  if (v136 != (_QWORD *)v134 && v134 != 0)
  {
    v134 = 0;
    LODWORD(v135) = 0;
    WTF::fastFree((unint64_t)v88, v76, v77, v78, v79, v80, v81, v82);
  }
  return v73;
}

uint64_t JSC::BinaryOpNode::emitBytecodeInConditionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _BYTE **v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  char v23;
  int v24;
  BOOL v25;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  BOOL v39;
  int v40;
  BOOL v41;
  uint64_t v42;

  v10 = a1 + 40;
  v16 = (_QWORD *)(a1 + 48);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v18 = (_BYTE **)(v10 + 8);
    v16 = (_QWORD *)v10;
  }
  else
  {
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 80))(*v16);
    v18 = (_BYTE **)v10;
    if (!v17)
    {
      v19 = 0;
LABEL_16:
      v27 = 2;
      goto LABEL_17;
    }
  }
  v20 = *v16;
  v19 = *v18;
  if (!*v16)
    goto LABEL_16;
  v21 = *(_DWORD *)(a1 + 32);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 368))(v20, a2);
  if (!v22)
    goto LABEL_16;
  v23 = v19[25];
  if ((v23 & 0x7E) != 0x20)
    goto LABEL_8;
  if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_41;
  if (v22 >= 0xFFFE000000000000 && (v22 & 0xFFFFFFFE) == 0)
  {
    if ((v21 & 0xFFFFFFFE) != 0x90)
      goto LABEL_16;
  }
  else
  {
LABEL_8:
    v24 = v23 & 1;
    if ((_DWORD)v22)
      v25 = 0;
    else
      v25 = v22 >= 0xFFFE000000000000;
    if (!v25 || v24 == 0)
      goto LABEL_16;
  }
LABEL_41:
  if ((v21 & 0xFFFFFFFD) == 0x90)
  {
    if (v22 >= 0xFFFE000000000000)
    {
      v39 = (_DWORD)v22 == 0;
      goto LABEL_44;
    }
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      v39 = JSC::JSCell::pureToBoolean((JSC::JSCell *)v22) == 0;
LABEL_44:
      v27 = !v39;
      goto LABEL_17;
    }
    v41 = v22 == 7;
  }
  else
  {
    if ((v21 & 0xFFFFFFFD) != 0x91)
      goto LABEL_16;
    if (v22 < 0xFFFE000000000000)
    {
      if ((v22 & 0xFFFE000000000002) != 0)
        v40 = v22 == 7;
      else
        v40 = JSC::JSCell::pureToBoolean((JSC::JSCell *)v22);
    }
    else
    {
      v40 = v22 != 0;
    }
    v41 = v40 == 0;
  }
  v27 = v41;
LABEL_17:
  if (*(_BYTE *)(a1 + 24))
  {
    if (v27 == 2)
      goto LABEL_19;
    v37 = v27;
    JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, a1 + 8, v11, v12, v13, v14, v15);
    v27 = v37;
  }
  if (v27 == 2)
  {
LABEL_19:
    v28 = *(_BYTE *)(a2 + 709);
    v29 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v42 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v30 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(a1 + 24))
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, a1 + 8, v11, v12, v13, v14, v15);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a2, 0);
    }
    *(_BYTE *)(a2 + 710) = v29;
    *(_BYTE *)(a2 + 709) = v28;
    if ((_DWORD)a5)
      return JSC::BytecodeGenerator::emitJumpIfTrue(a2, v30, a3, v31, v32, v33, v34, v35);
    else
      return JSC::BytecodeGenerator::emitJumpIfFalse(a2, v30, a4, v31, v32, v33, v34, v35);
  }
  if (v27 == 1)
  {
    if ((unint64_t)&v42 >= *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 352))(v19, a2, a3, a4, a5);
  }
  else if ((unint64_t)&v42 >= *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v19 + 352))(v19, a2, a4, a3, (_DWORD)a5 == 0);
  }
  *(_BYTE *)(a2 + 706) = 1;
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
}

uint64_t JSC::BinaryOpNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  double *v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  double v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  double *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  char v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  double v73;
  int v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  _DWORD *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  char v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  _BOOL4 v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  char v150;
  _DWORD *v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int8x16_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int8x16_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _DWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  unsigned int v245;
  char v246;

  v6 = *(_DWORD *)(a1 + 32);
  if ((v6 & 0xFFFFFFFC) == 0x94)
  {
    v7 = *(double **)(a1 + 40);
    if ((*(unsigned int (**)(double *))(*(_QWORD *)v7 + 288))(v7) && *((_DWORD *)v7 + 8) == 156)
    {
      v8 = 1;
    }
    else
    {
      if (!(*(unsigned int (**)(double *))(*(_QWORD *)v7 + 24))(v7)
        || !(*(unsigned int (**)(double *))(*(_QWORD *)v7 + 376))(v7)
        || ((v14 = v7[4], (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
         || (v15 = (int)v14, v14 != (double)(int)v14)
         || !v15 && (*(_QWORD *)&v14 & 0x8000000000000000) != 0)
        && (v15 = *((_QWORD *)v7 + 4), (unint64_t)(*(_QWORD *)&v14 + 0x2000000000000) < 0xFFFE000000000000)
        || v15 < 0)
      {
        v9 = 0;
        v8 = 1;
        goto LABEL_43;
      }
      v8 = 0;
    }
    v9 = 1;
LABEL_43:
    v31 = *(double **)(a1 + 48);
    if ((*(unsigned int (**)(double *))(*(_QWORD *)v31 + 288))(v31) && *((_DWORD *)v31 + 8) == 156)
    {
      v32 = 1;
    }
    else
    {
      if (!(*(unsigned int (**)(double *))(*(_QWORD *)v31 + 24))(v31)
        || !(*(unsigned int (**)(double *))(*(_QWORD *)v31 + 376))(v31)
        || ((v73 = v31[4], (*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
         || (v74 = (int)v73, v73 != (double)(int)v73)
         || !v74 && (*(_QWORD *)&v73 & 0x8000000000000000) != 0)
        && (v74 = *((_QWORD *)v31 + 4), (unint64_t)(*(_QWORD *)&v73 + 0x2000000000000) < 0xFFFE000000000000)
        || v74 < 0)
      {
LABEL_89:
        v243 = 0;
        v12 = 0;
        v11 = *(unsigned __int8 **)(a1 + 40);
        v13 = *(unsigned __int8 **)(a1 + 48);
        goto LABEL_90;
      }
      v32 = 0;
    }
    if ((v9 & (v8 | v32)) == 1)
    {
      v34 = *(unsigned __int8 **)(a1 + 40);
      v33 = *(unsigned __int8 **)(a1 + 48);
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v34 + 288))(v34))
        v34[28] = 0;
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v33 + 288))(v33))
        v33[28] = 0;
      v35 = *(unsigned __int8 *)(a1 + 27);
      v36 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v33 + 72))(v33, a2);
      v42 = *(_BYTE *)(a2 + 416) == 2 && v35 == 0;
      if (v42 || (v36 & 1) != 0)
      {
        v43 = *(_BYTE *)(a2 + 709);
        v44 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          v45 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v34[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v34 + 8), v37, v38, v39, v40, v41);
          v45 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(v34, a2, 0);
        }
        v51 = v45;
        if (v45)
          ++*v45;
      }
      else
      {
        v214 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v51 = v214;
        if (v214)
          ++*v214;
        v43 = *(_BYTE *)(a2 + 709);
        v44 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v34[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v34 + 8), v215, v216, v217, v218, v219);
          (*(void (**)(unsigned __int8 *, uint64_t, _DWORD *))(*(_QWORD *)v34 + 16))(v34, a2, v51);
        }
      }
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v52 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v33[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v33 + 8), v46, v47, v48, v49, v50);
        v52 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v33 + 16))(v33, a2, 0);
      }
      v53 = v52;
      *(_BYTE *)(a2 + 710) = v44;
      *(_BYTE *)(a2 + 709) = v43;
      if (v52)
        ++*v52;
      v54 = *(_DWORD *)(a1 + 8);
      v55 = *(_DWORD *)(a1 + 12);
      v56 = *(_DWORD *)(a1 + 16);
      if ((v54 & v55 & v56) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v57 = *(_QWORD *)(a2 + 192);
        v58 = *(_DWORD *)(v57 + 176);
        v59 = v55 - v58;
        v60 = v56 - v58;
        if (v56 < v58)
          v60 = 0;
        v28 = v59 >= v60;
        v61 = v59 - v60;
        if (v28)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v59, 0, 0, (v54 + ~*(_DWORD *)(v57 + 184)) | (unint64_t)(v61 << 32));
      }
      v62 = 152;
      v64 = v6 - 148;
      v63 = v34;
      v65 = v53;
      switch(v64)
      {
        case 0u:
          goto LABEL_76;
        case 1u:
          v62 = 153;
          v63 = v34;
          v65 = v53;
          goto LABEL_76;
        case 2u:
          goto LABEL_195;
        case 3u:
          v62 = 153;
LABEL_195:
          v63 = v33;
          v33 = v34;
          v65 = v51;
          v51 = v53;
LABEL_76:
          v66 = v33[25];
          v67 = v63[25];
          v68 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v51);
          v72 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v62, v68, (uint64_t)v51, (uint64_t)v65, v67 | (v66 << 8), v69, v70, v71);
          if (v65)
            --*v65;
          if (v51)
            --*v51;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198275658);
      }
      return v72;
    }
    goto LABEL_89;
  }
  if (v6 != 157)
  {
    if (v6 == 145)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40)) & 1) != 0
        || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48)) & 1) != 0)
      {
        v123 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
        v124 = v123;
        if (v123)
          ++*v123;
        v125 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
        v131 = 40;
        if (v125)
          v131 = 48;
        v132 = *(_BYTE **)(a1 + v131);
        v133 = *(_BYTE *)(a2 + 709);
        v134 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v132[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v132 + 8), v126, v127, v128, v129, v130);
          (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v132 + 16))(v132, a2, v124);
        }
        *(_BYTE *)(a2 + 710) = v134;
        *(_BYTE *)(a2 + 709) = v133;
        v72 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v124);
        v141 = *(_DWORD *)(v72 + 4);
        v142 = v124[1];
        v143 = (v141 - 1073741808) < 0x80;
        if (v141 <= 0x3FFFFFFF)
          v143 = (v141 + 128) < 0x90;
        if (v143
          && ((int)v142 <= 0x3FFFFFFF
            ? (v144 = (v142 + 128) < 0x90)
            : (v144 = (v142 - 1073741808) < 0x80),
              v144))
        {
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xA7, v135, v136, v137, v138, v139, v140);
          v246 = -89;
          v145 = *(unsigned int *)(a2 + 12);
          v146 = *(unsigned int *)(a2 + 16);
          if (v145 > v146)
          {
            *(_DWORD *)(a2 + 16) = v146 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v146) = -89;
          }
          else
          {
            if ((_DWORD)v145 == *(_DWORD *)(a2 + 8))
            {
              v228 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v145 + 1), (unint64_t)&v246);
              v145 = *(unsigned int *)(a2 + 12);
              v147 = *(_QWORD *)a2;
              v148 = *v228;
            }
            else
            {
              v147 = *(_QWORD *)a2;
              v148 = -89;
            }
            *(_BYTE *)(v147 + v145) = v148;
            *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
          }
          v149 = v141 + 16;
          if (v141 <= 0x3FFFFFFF)
            v149 = v141;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v149);
          v150 = v142 + 16;
          if ((int)v142 <= 0x3FFFFFFF)
            v150 = v142;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v150);
        }
        else if ((JSC::OpNeqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v141, v124[1], v136, v137, v138, v139, v140) & 1) == 0)
        {
          JSC::OpNeqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v141, v142, v234, v235, v236, v237, v238);
        }
        --*v124;
        return v72;
      }
      v17 = 0;
      v11 = *(unsigned __int8 **)(a1 + 40);
      v13 = *(unsigned __int8 **)(a1 + 48);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      v11 = *(unsigned __int8 **)(a1 + 40);
      v13 = *(unsigned __int8 **)(a1 + 48);
      if (v6 != 147)
      {
        v243 = 0;
        v12 = 0;
        goto LABEL_90;
      }
      v17 = 1;
    }
    v12 = v16;
    v18 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v11 + 32))(v11);
    if (v18)
      v19 = v13;
    else
      v19 = v11;
    if (v18)
      v13 = v11;
    v243 = v17;
    v11 = v19;
    goto LABEL_90;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 200))(*(_QWORD *)(a1 + 40));
  v11 = *(unsigned __int8 **)(a1 + 40);
  if (!v10 || (v11[25] & 0x7E) != 4)
  {
    v243 = 0;
    v12 = 0;
    v13 = *(unsigned __int8 **)(a1 + 48);
LABEL_90:
    v245 = v6;
    v75 = *(unsigned __int8 *)(a1 + 27);
    v76 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v13 + 72))(v13, a2);
    v82 = *(_BYTE *)(a2 + 416) == 2 && v75 == 0;
    v244 = v12;
    if (v82 || (v76 & 1) != 0)
    {
      v83 = a3;
      v84 = *(_BYTE *)(a2 + 709);
      v85 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v86 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v11[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v11 + 8), v77, v78, v79, v80, v81);
        v86 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, a2, 0);
      }
      v93 = v86;
      if (v86)
        ++*v86;
    }
    else
    {
      v83 = a3;
      v117 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v93 = v117;
      if (v117)
        ++*v117;
      v84 = *(_BYTE *)(a2 + 709);
      v85 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v11[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v11 + 8), v118, v119, v120, v121, v122);
        (*(void (**)(unsigned __int8 *, uint64_t, _DWORD *))(*(_QWORD *)v11 + 16))(v11, a2, v93);
      }
    }
    v94 = *(_DWORD *)(a2 + 36);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v243 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v95 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v13[24]
        && (*(_BYTE *)(a2 + 104) & 1) != 0
        && !*(_BYTE *)(a2 + 707)
        && (*(_DWORD *)(a2 + 736) != *((_DWORD *)v13 + 2)
         || *(_DWORD *)(a2 + 740) != *((_DWORD *)v13 + 3)
         || *(_DWORD *)(a2 + 744) != *((_DWORD *)v13 + 4)
         || *(_DWORD *)(a2 + 748) != 5))
      {
        v220 = *((_QWORD *)v13 + 1);
        *(_DWORD *)(a2 + 744) = *((_DWORD *)v13 + 4);
        *(_QWORD *)(a2 + 736) = v220;
        *(_DWORD *)(a2 + 748) = 5;
        v221 = *((_DWORD *)v13 + 2);
        v222 = *((_DWORD *)v13 + 3);
        v223 = *((_DWORD *)v13 + 4);
        if (v221 != -1 || v222 != -1 || v223 != -1)
        {
          v224 = *(_QWORD *)(a2 + 192);
          v225 = *(_DWORD *)(v224 + 176);
          v87 = v222 - v225;
          v226 = v223 - v225;
          if (v223 < v225)
            v226 = 0;
          v28 = v87 >= v226;
          v227 = v87 - v226;
          if (v28)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v87, 0, 0, (v221 + ~*(_DWORD *)(v224 + 184)) | (unint64_t)(v227 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v87, v88, v89, v90, v91, v92);
      }
      v95 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, a2, 0);
    }
    v96 = v95;
    *(_BYTE *)(a2 + 710) = v85;
    *(_BYTE *)(a2 + 709) = v84;
    if (v95)
      ++*v95;
    v97 = *(_DWORD *)(a1 + 8);
    v98 = *(_DWORD *)(a1 + 12);
    v99 = *(_DWORD *)(a1 + 16);
    v100 = v83;
    if ((v97 & v98 & v99) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
    {
      v101 = *(_QWORD *)(a2 + 192);
      v102 = *(_DWORD *)(v101 + 176);
      v103 = v98 - v102;
      v104 = v99 - v102;
      if (v99 < v102)
        v104 = 0;
      v28 = v103 >= v104;
      v105 = v103 - v104;
      if (v28)
        JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v103, 0, 0, (v97 + ~*(_DWORD *)(v101 + 184)) | (unint64_t)(v105 << 32));
    }
    v106 = (WTF::AtomStringImpl *)v245;
    if (v94 == 189 && (v245 | 2) == 0x93)
    {
      v151 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, v100);
      v152 = v151;
      if (v151)
        ++*v151;
      if (v244)
      {
        v153 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)v151, (uint64_t)v93);
        if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v153, (uint64_t)v93, (uint64_t)v96, v154, v155, v156, v157, v158) & 1) == 0)
        {
          v163 = *(_DWORD *)(v153 + 4);
          v164 = v93[1];
          v165 = v96[1];
          if ((JSC::OpEq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v163, v164, v165, v159, v160, v161, v162) & 1) == 0&& (JSC::OpEq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v163, v164, v165, v166, v167, v168, v169) & 1) == 0)
          {
            JSC::OpEq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v163, v164, v165, v170, v171, v172, v173);
          }
        }
      }
      else
      {
        if (!v243)
        {
          __break(0xC471u);
          JUMPOUT(0x198275678);
        }
        v185 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)v151, (uint64_t)v93);
        if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v185, (uint64_t)v93, (uint64_t)v96, v186, v187, v188, v189, v190) & 1) == 0)
        {
          v195 = *(_DWORD *)(v185 + 4);
          v196 = v93[1];
          v197 = v96[1];
          if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v195, v196, v197, v191, v192, v193, v194) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v195, v196, v197, v198, v199, v200, v201) & 1) == 0)
          {
            JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v195, v196, v197, v239, v240, v241, v242);
          }
        }
      }
      v72 = JSC::BytecodeGenerator::finalDestination(a2, v100, (uint64_t)v152);
      v202 = *(_DWORD *)(v72 + 4);
      v203 = v152[1];
      if ((JSC::OpNot::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v202, v203, v204, v205, v206, v207, v208) & 1) == 0&& (JSC::OpNot::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v202, v203, v209, v210, v211, v212, v213) & 1) == 0)
      {
        JSC::OpNot::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v202, v203, v229, v230, v231, v232, v233);
      }
      --*v152;
    }
    else
    {
      v107 = JSC::BytecodeGenerator::finalDestination(a2, v100, (uint64_t)v93);
      v111 = JSC::BytecodeGenerator::emitBinaryOp(a2, v106, v107, (uint64_t)v93, (uint64_t)v96, v11[25] | ((unint64_t)v13[25] << 8), v108, v109, v110);
      v72 = v111;
      if ((_DWORD)v106 == 156)
      {
        if (*(_BYTE *)(a1 + 28))
        {
          if (a2 + 208 != v100)
          {
            v174 = *(unsigned int *)(v111 + 4);
            if ((JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, *(_DWORD *)(v111 + 4), v174, v112, v113, v114, v115, v116) & 1) == 0&& (JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v174, v174, v175, v176, v177, v178, v179) & 1) == 0)
            {
              JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v174, v174, v180, v181, v182, v183, v184);
            }
          }
        }
      }
    }
    if (v96)
      --*v96;
    if (v93)
      --*v93;
    return v72;
  }
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_DWORD *)(a1 + 12);
  v22 = *(_DWORD *)(a1 + 16);
  if ((v20 & v21 & v22) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
  {
    v24 = *(_QWORD *)(a2 + 192);
    v25 = *(_DWORD *)(v24 + 176);
    v26 = v21 - v25;
    v27 = v22 - v25;
    if (v22 < v25)
      v27 = 0;
    v28 = v26 >= v27;
    v29 = v26 - v27;
    if (v28)
    {
      JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v26, 0, 0, (v20 + ~*(_DWORD *)(v24 + 184)) | (unint64_t)(v29 << 32));
      v11 = *(unsigned __int8 **)(a1 + 40);
    }
  }
  return JSC::BinaryOpNode::emitStrcat((uint64_t)v11, *(_QWORD *)(a1 + 48), a2, a3, 0, 0);
}

uint64_t JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *(_DWORD *)(a2 + 4);
  v11 = a3;
  if ((JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, a3, a4, a5, a6, a7, a8) & 1) == 0
    && (JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, v11, v18, v19, v20, v21, v22);
  }
  return a2;
}

uint64_t JSC::EqualNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  _BYTE *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  char v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _BOOL4 v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[15];
  char v91;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40)) & 1) != 0
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48)))
  {
    v57 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
    v26 = v57;
    if (v57)
      ++*v57;
    v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
    v64 = 40;
    if (v58)
      v64 = 48;
    v65 = *(_BYTE **)(a1 + v64);
    v66 = *(_BYTE *)(a2 + 709);
    v67 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v65[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v65 + 8), v59, v60, v61, v62, v63);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v65 + 16))(v65, a2, v26);
    }
    *(_BYTE *)(a2 + 710) = v67;
    *(_BYTE *)(a2 + 709) = v66;
    v29 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v26);
    v74 = *(_DWORD *)(v29 + 4);
    v75 = v26[1];
    v76 = (v74 - 1073741808) < 0x80;
    if (v74 <= 0x3FFFFFFF)
      v76 = (v74 + 128) < 0x90;
    if (v76
      && ((int)v75 <= 0x3FFFFFFF
        ? (v77 = (v75 + 128) < 0x90)
        : (v77 = (v75 - 1073741808) < 0x80),
          v77))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xA6, v68, v69, v70, v71, v72, v73);
      v91 = -90;
      v78 = *(unsigned int *)(a2 + 12);
      v79 = *(unsigned int *)(a2 + 16);
      if (v78 > v79)
      {
        *(_DWORD *)(a2 + 16) = v79 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v79) = -90;
      }
      else
      {
        if ((_DWORD)v78 == *(_DWORD *)(a2 + 8))
        {
          v84 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v78 + 1), (unint64_t)&v91);
          v78 = *(unsigned int *)(a2 + 12);
          v80 = *(_QWORD *)a2;
          v81 = *v84;
        }
        else
        {
          v80 = *(_QWORD *)a2;
          v81 = -90;
        }
        *(_BYTE *)(v80 + v78) = v81;
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
      }
      v82 = v74 + 16;
      if (v74 <= 0x3FFFFFFF)
        v82 = v74;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v82);
      v83 = v75 + 16;
      if ((int)v75 <= 0x3FFFFFFF)
        v83 = v75;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v83);
    }
    else if ((JSC::OpEqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v74, v26[1], v69, v70, v71, v72, v73) & 1) == 0)
    {
      JSC::OpEqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v74, v75, v85, v86, v87, v88, v89);
    }
    goto LABEL_32;
  }
  v6 = *(_BYTE **)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 48);
  v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 32))(v6);
  if (v8)
    v9 = v7;
  else
    v9 = v6;
  if (v8)
    v7 = v6;
  v10 = *(unsigned __int8 *)(a1 + 27);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48), a2);
  v17 = *(_BYTE *)(a2 + 416) == 2 && v10 == 0;
  if (v17 || (v11 & 1) != 0)
  {
    v18 = *(_BYTE *)(a2 + 709);
    v19 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v20 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v9[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v9 + 8), v12, v13, v14, v15, v16);
      v20 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, a2, 0);
    }
    v26 = v20;
    if (v20)
      ++*v20;
  }
  else
  {
    v51 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v26 = v51;
    if (v51)
      ++*v51;
    v18 = *(_BYTE *)(a2 + 709);
    v19 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v9[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v9 + 8), v52, v53, v54, v55, v56);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v9 + 16))(v9, a2, v26);
    }
  }
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v27 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v7[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v7 + 8), v21, v22, v23, v24, v25);
    v27 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a2, 0);
  }
  v28 = v27;
  *(_BYTE *)(a2 + 710) = v19;
  *(_BYTE *)(a2 + 709) = v18;
  if (v27)
    ++*v27;
  v29 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v26);
  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v29, (uint64_t)v26, (uint64_t)v28, v30, v31, v32, v33, v34) & 1) != 0)
  {
    if (!v28)
      goto LABEL_31;
  }
  else
  {
    v39 = *(_DWORD *)(v29 + 4);
    v40 = v26[1];
    v41 = v28[1];
    if ((JSC::OpEq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v39, v40, v41, v35, v36, v37, v38) & 1) == 0
      && (JSC::OpEq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v39, v40, v41, v42, v43, v44, v45) & 1) == 0)
    {
      JSC::OpEq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v39, v40, v41, v46, v47, v48, v49);
    }
  }
  --*v28;
LABEL_31:
  if (v26)
LABEL_32:
    --*v26;
  return v29;
}

uint64_t JSC::StrictEqualNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  _BYTE *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  char v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *(_BYTE **)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 48);
  v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 32))(v6);
  if (v8)
    v9 = v6;
  else
    v9 = v7;
  if (v8)
    v6 = v7;
  v10 = *(unsigned __int8 *)(a1 + 27);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48), a2);
  v17 = *(_BYTE *)(a2 + 416) == 2 && v10 == 0;
  if (v17 || (v11 & 1) != 0)
  {
    v18 = *(_BYTE *)(a2 + 709);
    v19 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v57 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v20 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v6[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v6 + 8), v12, v13, v14, v15, v16);
      v20 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, a2, 0);
    }
    v26 = v20;
    if (v20)
      ++*v20;
  }
  else
  {
    v47 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v26 = v47;
    if (v47)
      ++*v47;
    v18 = *(_BYTE *)(a2 + 709);
    v19 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v57 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v6[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v6 + 8), v48, v49, v50, v51, v52);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v6 + 16))(v6, a2, v26);
    }
  }
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v57 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v27 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v9[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v9 + 8), v21, v22, v23, v24, v25);
    v27 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, a2, 0);
  }
  v28 = v27;
  *(_BYTE *)(a2 + 710) = v19;
  *(_BYTE *)(a2 + 709) = v18;
  if (v27)
    ++*v27;
  v29 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v26);
  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v29, (uint64_t)v26, (uint64_t)v28, v30, v31, v32, v33, v34) & 1) == 0)
  {
    v39 = *(_DWORD *)(v29 + 4);
    v40 = v26[1];
    v41 = v28[1];
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v39, v40, v41, v35, v36, v37, v38) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v39, v40, v41, v42, v43, v44, v45) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v39, v40, v41, v53, v54, v55, v56);
    }
    goto LABEL_25;
  }
  if (v28)
LABEL_25:
    --*v28;
  if (v26)
    --*v26;
  return v29;
}

int *JSC::InstanceOfNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  char v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  BOOL v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  signed int v112;
  _BOOL4 v113;
  _BOOL4 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _DWORD *v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  signed int v222;
  _BOOL4 v223;
  _BOOL4 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  _DWORD *v236;
  unsigned int v237;
  unsigned int v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _DWORD *v270;
  _QWORD *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  uint64_t v292;
  unsigned int v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  signed int v299;
  _BOOL4 v300;
  _BOOL4 v302;
  _BOOL4 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  unsigned int v313;
  unsigned int v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  char v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  unsigned int v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD *v337;
  _QWORD *v338;
  _DWORD *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  char v359;
  char v360;
  uint64_t v361;
  _DWORD *v362;
  _DWORD *v363;
  _DWORD *v364;
  _DWORD *v365;
  _DWORD *v366;
  _DWORD *v367;
  _DWORD *v368;
  uint64_t v369;
  _DWORD *v370;
  uint64_t v371;
  int v372;
  int v373;
  uint64_t v374;
  uint64_t v375;

  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v7 = v6;
  if (v6)
    ++*v6;
  v8 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v9 = v8;
  if (v8)
    ++*v8;
  v366 = v7;
  v10 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  if (v10)
    ++*v10;
  v365 = v10;
  v11 = *(unsigned __int8 *)(a1 + 27);
  v12 = *(_BYTE **)(a1 + 40);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48), a2);
  v19 = *(_BYTE *)(a2 + 416) == 2 && v11 == 0;
  if (v19 || (v13 & 1) != 0)
  {
    v20 = *(_BYTE *)(a2 + 709);
    v21 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v361 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v28 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v22 = v366;
    }
    else
    {
      v22 = v366;
      if (v12[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v12 + 8), v14, v15, v16, v17, v18);
      v28 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, a2, 0);
    }
    if (v28)
      ++*v28;
  }
  else
  {
    v340 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v28 = v340;
    if (v340)
      ++*v340;
    v20 = *(_BYTE *)(a2 + 709);
    v21 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    v22 = v366;
    if ((unint64_t)&v361 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v12[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v12 + 8), v341, v342, v343, v344, v345);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v12 + 16))(v12, a2, v28);
    }
  }
  v29 = *(_BYTE **)(a1 + 48);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v361 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v30 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v29[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v29 + 8), v23, v24, v25, v26, v27);
    v30 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, a2, 0);
  }
  v31 = v30;
  *(_BYTE *)(a2 + 710) = v21;
  *(_BYTE *)(a2 + 709) = v20;
  if (v30)
    ++*v30;
  v32 = (int *)JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v28);
  v39 = v32;
  if (v32)
    ++*v32;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v371, a2, v33, v34, v35, v36, v37, v38);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v370, a2, v40, v41, v42, v43, v44, v45);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v369, a2, v46, v47, v48, v49, v50, v51);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v368, a2, v52, v53, v54, v55, v56, v57);
  v64 = *(_DWORD *)(a1 + 56);
  v63 = *(_DWORD *)(a1 + 60);
  v65 = *(_DWORD *)(a1 + 64);
  if (v64 != -1 || v63 != -1 || v65 != -1)
  {
    v66 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v66 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v67 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v67 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v68 = *(_QWORD *)(a2 + 192);
        v69 = *(_DWORD *)(v68 + 176);
        v70 = v63 - v69;
        v71 = v65 >= v69;
        v72 = v65 - v69;
        if (!v71)
          v72 = 0;
        v71 = v70 >= v72;
        v73 = v70 - v72;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v70, v63 - v66, v67 - v63, (v64 + ~*(_DWORD *)(v68 + 184)) | (unint64_t)(v73 << 32));
      }
    }
  }
  v74 = v9[1];
  v75 = v31[1];
  if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v74, v75, v58, v59, v60, v61, v62) & 1) == 0
    && (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v74, v75, v76, v77, v78, v79, v80) & 1) == 0)
  {
    JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v74, v75, v76, v77, v78, v79, v80);
  }
  v364 = v368;
  JSC::BytecodeGenerator::emitJumpIfFalse(a2, (uint64_t)v9, (uint64_t)v368, v76, v77, v78, v79, v80);
  v86 = *(_DWORD *)(a1 + 56);
  v85 = *(_DWORD *)(a1 + 60);
  v87 = *(_DWORD *)(a1 + 64);
  if (v86 != -1 || v85 != -1 || v87 != -1)
  {
    v88 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v88 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v89 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v89 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v90 = *(_QWORD *)(a2 + 192);
        v91 = *(_DWORD *)(v90 + 176);
        v92 = v85 - v91;
        v71 = v87 >= v91;
        v93 = v87 - v91;
        if (!v71)
          v93 = 0;
        v71 = v92 >= v93;
        v94 = v92 - v93;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v92, v85 - v88, v89 - v85, (v86 + ~*(_DWORD *)(v90 + 184)) | (unint64_t)(v94 << 32));
      }
    }
  }
  v367 = v28;
  JSC::BytecodeGenerator::emitGetById(a2, v22, (uint64_t)v31, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 2688), v81, v82, v83, v84);
  v102 = *(_DWORD *)(a1 + 56);
  v101 = *(_DWORD *)(a1 + 60);
  v103 = *(_DWORD *)(a1 + 64);
  if (v102 != -1 || v101 != -1 || v103 != -1)
  {
    v104 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v104 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v105 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v105 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v106 = *(_QWORD *)(a2 + 192);
        v107 = *(_DWORD *)(v106 + 176);
        v95 = v101 - v107;
        v71 = v103 >= v107;
        v108 = v103 - v107;
        if (!v71)
          v108 = 0;
        v71 = v95 >= v108;
        v109 = v95 - v108;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v95, v101 - v104, v105 - v101, (v102 + ~*(_DWORD *)(v106 + 184)) | (unint64_t)(v109 << 32));
      }
    }
  }
  v110 = v31[1];
  v111 = v22[1];
  v112 = v9[1];
  v113 = (v112 - 1073741808) < 0x80;
  if (v112 <= 0x3FFFFFFF)
    v113 = (v112 + 128) < 0x90;
  if (!v113)
    goto LABEL_299;
  if (!((int)v110 <= 0x3FFFFFFF ? (v110 + 128) < 0x90 : (v110 - 1073741808) < 0x80))
    goto LABEL_299;
  v115 = (v111 - 1073741808) < 0x80;
  if ((int)v111 <= 0x3FFFFFFF)
    v115 = (v111 + 128) < 0x90;
  if (v115)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xBA, v95, v96, v97, v98, v99, v100);
    LOBYTE(v372) = -70;
    v121 = *(unsigned int *)(a2 + 12);
    v122 = *(unsigned int *)(a2 + 16);
    if (v121 > v122)
    {
      *(_DWORD *)(a2 + 16) = v122 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v122) = -70;
      v126 = *(_DWORD *)(a2 + 12);
      v127 = *(_DWORD *)(a2 + 16);
      v125 = v367;
    }
    else
    {
      if ((_DWORD)v121 == *(_DWORD *)(a2 + 8))
      {
        v346 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v121 + 1), (unint64_t)&v372);
        v121 = *(unsigned int *)(a2 + 12);
        v123 = *(_QWORD *)a2;
        v124 = *v346;
      }
      else
      {
        v123 = *(_QWORD *)a2;
        v124 = -70;
      }
      *(_BYTE *)(v123 + v121) = v124;
      v125 = v367;
      v126 = *(_DWORD *)(a2 + 12) + 1;
      v127 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v126;
      *(_DWORD *)(a2 + 16) = v127;
    }
    v128 = v112 + 16;
    if (v112 <= 0x3FFFFFFF)
      v128 = v112;
    LOBYTE(v372) = v128;
    if (v126 > v127)
    {
      *(_DWORD *)(a2 + 16) = v127 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v127) = v128;
      v131 = *(_DWORD *)(a2 + 12);
      v132 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v129 = v126;
      if (v126 == *(_DWORD *)(a2 + 8))
      {
        v347 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v126 + 1), (unint64_t)&v372);
        v129 = *(unsigned int *)(a2 + 12);
        v130 = *(_QWORD *)a2;
        v128 = *v347;
      }
      else
      {
        v130 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v130 + v129) = v128;
      v131 = *(_DWORD *)(a2 + 12) + 1;
      v132 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v131;
      *(_DWORD *)(a2 + 16) = v132;
    }
    v133 = v110 + 16;
    if ((int)v110 <= 0x3FFFFFFF)
      v133 = v110;
    LOBYTE(v372) = v133;
    if (v131 > v132)
    {
      *(_DWORD *)(a2 + 16) = v132 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v132) = v133;
      v136 = *(_DWORD *)(a2 + 12);
      v137 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v134 = v131;
      if (v131 == *(_DWORD *)(a2 + 8))
      {
        v348 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v131 + 1), (unint64_t)&v372);
        v134 = *(unsigned int *)(a2 + 12);
        v135 = *(_QWORD *)a2;
        v133 = *v348;
      }
      else
      {
        v135 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v135 + v134) = v133;
      v136 = *(_DWORD *)(a2 + 12) + 1;
      v137 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v136;
      *(_DWORD *)(a2 + 16) = v137;
    }
    v138 = v111 + 16;
    if ((int)v111 <= 0x3FFFFFFF)
      v138 = v111;
    LOBYTE(v372) = v138;
    if (v136 > v137)
    {
      *(_DWORD *)(a2 + 16) = v137 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v137) = v138;
    }
    else
    {
      v139 = v136;
      if (v136 == *(_DWORD *)(a2 + 8))
      {
        v349 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v136 + 1), (unint64_t)&v372);
        v139 = *(unsigned int *)(a2 + 12);
        v140 = *(_QWORD *)a2;
        v138 = *v349;
      }
      else
      {
        v140 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v140 + v139) = v138;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_299:
    v359 = JSC::OpOverridesHasInstance::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v9[1], v31[1], v22[1], v97, v98, v99, v100);
    v125 = v367;
    if ((v359 & 1) == 0)
      JSC::OpOverridesHasInstance::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v112, v110, v111, v117, v118, v119, v120);
  }
  v363 = v370;
  JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v9, (uint64_t)v370, v116, v117, v118, v119, v120);
  v147 = *(_DWORD *)(a1 + 56);
  v146 = *(_DWORD *)(a1 + 60);
  v148 = *(_DWORD *)(a1 + 64);
  if (v147 != -1 || v146 != -1 || v148 != -1)
  {
    v149 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v149 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v150 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v150 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v151 = *(_QWORD *)(a2 + 192);
        v152 = *(_DWORD *)(v151 + 176);
        v153 = v146 - v152;
        v71 = v148 >= v152;
        v154 = v148 - v152;
        if (!v71)
          v154 = 0;
        v71 = v153 >= v154;
        v155 = v153 - v154;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v153, v146 - v149, v150 - v146, (v147 + ~*(_DWORD *)(v151 + 184)) | (unint64_t)(v155 << 32));
      }
    }
  }
  v156 = v9[1];
  v157 = v125[1];
  if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v156, v157, v141, v142, v143, v144, v145) & 1) == 0&& (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v156, v157, v158, v159, v160, v161, v162) & 1) == 0)
  {
    JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v156, v157, v158, v159, v160, v161, v162);
  }
  v163 = v371;
  JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v9, v371, v158, v159, v160, v161, v162);
  JSC::BytecodeGenerator::emitLoad(a2, v39, 6, v164, v165, v166, v167, v168);
  v175 = v369;
  *(_BYTE *)(v369 + 8) = 1;
  v176 = *(unsigned int *)(v175 + 4);
  if ((_DWORD)v176 == -1)
    v177 = v175;
  else
    v177 = *(unsigned int *)(v175 + 4);
  if ((_DWORD)v176 == -1)
    v178 = 1;
  else
    v178 = 2;
  if (v176 == 0xFFFFFFFFLL)
    v179 = 1;
  else
    v179 = 2;
  LOBYTE(v372) = v179;
  v373 = 0;
  v374 = a2;
  v375 = v177;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v372, v169, v170, v171, v172, v173, v174) & 1) == 0)
  {
    LOBYTE(v372) = v178;
    v373 = 0;
    v374 = a2;
    v375 = v177;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v372, v180, v181, v182, v183, v184, v185) & 1) == 0)
    {
      LOBYTE(v372) = v178;
      v373 = 0;
      v374 = a2;
      v375 = v177;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v372);
    }
  }
  v186 = *(_DWORD *)(a2 + 16);
  v362 = (_DWORD *)v163;
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v163, a2, v186, v181, v182, v183, v184, v185);
  v191 = *(_QWORD *)(a2 + 24);
  v192 = *(unsigned int *)(v191 + 28);
  if (!(_DWORD)v192 || v186 != *(_DWORD *)(*(_QWORD *)(v191 + 16) + 4 * v192 - 4))
  {
    v372 = v186;
    v193 = (_QWORD *)(v191 + 16);
    if ((_DWORD)v192 == *(_DWORD *)(v191 + 24))
      *(_DWORD *)(*(_QWORD *)(v191 + 16) + 4 * *(unsigned int *)(v191 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v193, v192 + 1, (unint64_t)&v372);
    else
      *(_DWORD *)(*v193 + 4 * v192) = v186;
    ++*(_DWORD *)(v191 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v195 = *(_DWORD *)(a1 + 56);
  v194 = *(_DWORD *)(a1 + 60);
  v196 = *(_DWORD *)(a1 + 64);
  if (v195 != -1 || v194 != -1 || v196 != -1)
  {
    v197 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v197 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v198 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v198 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v199 = *(_QWORD *)(a2 + 192);
        v200 = *(_DWORD *)(v199 + 176);
        v201 = v194 - v200;
        v71 = v196 >= v200;
        v202 = v196 - v200;
        if (!v71)
          v202 = 0;
        v71 = v201 >= v202;
        v203 = v201 - v202;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v201, v194 - v197, v198 - v194, (v195 + ~*(_DWORD *)(v199 + 184)) | (unint64_t)(v203 << 32));
      }
    }
  }
  v204 = v365;
  JSC::BytecodeGenerator::emitGetById(a2, v365, (uint64_t)v31, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 2160), v187, v188, v189, v190);
  v212 = *(_DWORD *)(a1 + 56);
  v211 = *(_DWORD *)(a1 + 60);
  v213 = *(_DWORD *)(a1 + 64);
  if (v212 != -1 || v211 != -1 || v213 != -1)
  {
    v214 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v214 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v215 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v215 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v216 = *(_QWORD *)(a2 + 192);
        v217 = *(_DWORD *)(v216 + 176);
        v205 = v211 - v217;
        v71 = v213 >= v217;
        v218 = v213 - v217;
        if (!v71)
          v218 = 0;
        v71 = v205 >= v218;
        v219 = v205 - v218;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v205, v211 - v214, v215 - v211, (v212 + ~*(_DWORD *)(v216 + 184)) | (unint64_t)(v219 << 32));
      }
    }
  }
  v220 = v125[1];
  v221 = v204[1];
  v222 = v39[1];
  v223 = (v222 - 1073741808) < 0x80;
  if (v222 <= 0x3FFFFFFF)
    v223 = (v222 + 128) < 0x90;
  if (!v223)
    goto LABEL_301;
  if (!((int)v220 <= 0x3FFFFFFF ? (v220 + 128) < 0x90 : (v220 - 1073741808) < 0x80))
    goto LABEL_301;
  v225 = (v221 - 1073741808) < 0x80;
  if ((int)v221 <= 0x3FFFFFFF)
    v225 = (v221 + 128) < 0x90;
  if (v225)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xBB, v205, v206, v207, v208, v209, v210);
    LOBYTE(v372) = -69;
    v232 = *(unsigned int *)(a2 + 12);
    v233 = *(unsigned int *)(a2 + 16);
    if (v232 > v233)
    {
      *(_DWORD *)(a2 + 16) = v233 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v233) = -69;
      v237 = *(_DWORD *)(a2 + 12);
      v238 = *(_DWORD *)(a2 + 16);
      v236 = v366;
    }
    else
    {
      if ((_DWORD)v232 == *(_DWORD *)(a2 + 8))
      {
        v350 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v232 + 1), (unint64_t)&v372);
        v232 = *(unsigned int *)(a2 + 12);
        v234 = *(_QWORD *)a2;
        v235 = *v350;
      }
      else
      {
        v234 = *(_QWORD *)a2;
        v235 = -69;
      }
      *(_BYTE *)(v234 + v232) = v235;
      v236 = v366;
      v237 = *(_DWORD *)(a2 + 12) + 1;
      v238 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v237;
      *(_DWORD *)(a2 + 16) = v238;
    }
    v239 = v222 + 16;
    if (v222 <= 0x3FFFFFFF)
      v239 = v222;
    LOBYTE(v372) = v239;
    if (v237 > v238)
    {
      *(_DWORD *)(a2 + 16) = v238 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v238) = v239;
      v242 = *(_DWORD *)(a2 + 12);
      v243 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v240 = v237;
      if (v237 == *(_DWORD *)(a2 + 8))
      {
        v351 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v237 + 1), (unint64_t)&v372);
        v240 = *(unsigned int *)(a2 + 12);
        v241 = *(_QWORD *)a2;
        v239 = *v351;
      }
      else
      {
        v241 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v241 + v240) = v239;
      v242 = *(_DWORD *)(a2 + 12) + 1;
      v243 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v242;
      *(_DWORD *)(a2 + 16) = v243;
    }
    v244 = v220 + 16;
    if ((int)v220 <= 0x3FFFFFFF)
      v244 = v220;
    LOBYTE(v372) = v244;
    if (v242 > v243)
    {
      *(_DWORD *)(a2 + 16) = v243 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v243) = v244;
      v247 = *(_DWORD *)(a2 + 12);
      v248 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v245 = v242;
      if (v242 == *(_DWORD *)(a2 + 8))
      {
        v352 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v242 + 1), (unint64_t)&v372);
        v245 = *(unsigned int *)(a2 + 12);
        v246 = *(_QWORD *)a2;
        v244 = *v352;
      }
      else
      {
        v246 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v246 + v245) = v244;
      v247 = *(_DWORD *)(a2 + 12) + 1;
      v248 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v247;
      *(_DWORD *)(a2 + 16) = v248;
    }
    v249 = v221 + 16;
    if ((int)v221 <= 0x3FFFFFFF)
      v249 = v221;
    LOBYTE(v372) = v249;
    if (v247 > v248)
    {
      *(_DWORD *)(a2 + 16) = v248 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v248) = v249;
    }
    else
    {
      v250 = v247;
      if (v247 == *(_DWORD *)(a2 + 8))
      {
        v353 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v247 + 1), (unint64_t)&v372);
        v250 = *(unsigned int *)(a2 + 12);
        v251 = *(_QWORD *)a2;
        v249 = *v353;
      }
      else
      {
        v251 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v251 + v250) = v249;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_301:
    v360 = JSC::OpInstanceof::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v39[1], v220, v221, v207, v208, v209, v210);
    v236 = v366;
    if ((v360 & 1) == 0)
      JSC::OpInstanceof::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v222, v220, v221, v228, v229, v230, v231);
  }
  *(_BYTE *)(v175 + 8) = 1;
  v252 = *(unsigned int *)(v175 + 4);
  if ((_DWORD)v252 == -1)
    v253 = v175;
  else
    v253 = *(unsigned int *)(v175 + 4);
  if ((_DWORD)v252 == -1)
    v254 = 1;
  else
    v254 = 2;
  if (v252 == 0xFFFFFFFFLL)
    v255 = 1;
  else
    v255 = 2;
  LOBYTE(v372) = v255;
  v373 = 0;
  v374 = a2;
  v375 = v253;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v372, v226, v227, v228, v229, v230, v231) & 1) == 0)
  {
    LOBYTE(v372) = v254;
    v373 = 0;
    v374 = a2;
    v375 = v253;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v372, v256, v257, v258, v259, v260, v261) & 1) == 0)
    {
      LOBYTE(v372) = v254;
      v373 = 0;
      v374 = a2;
      v375 = v253;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v372);
    }
  }
  v262 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v364, a2, v262, v257, v258, v259, v260, v261);
  v268 = *(_QWORD *)(a2 + 24);
  v269 = *(unsigned int *)(v268 + 28);
  v270 = v367;
  if (!(_DWORD)v269 || v262 != *(_DWORD *)(*(_QWORD *)(v268 + 16) + 4 * v269 - 4))
  {
    v372 = v262;
    v271 = (_QWORD *)(v268 + 16);
    if ((_DWORD)v269 == *(_DWORD *)(v268 + 24))
      *(_DWORD *)(*(_QWORD *)(v268 + 16) + 4 * *(unsigned int *)(v268 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v271, v269 + 1, (unint64_t)&v372);
    else
      *(_DWORD *)(*v271 + 4 * v269) = v262;
    ++*(_DWORD *)(v268 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::emitThrowTypeError(a2, "Right hand side of instanceof is not an object", 0x2FuLL, v263, v264, v265, v266, v267);
  v272 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v363, a2, v272, v273, v274, v275, v276, v277);
  v284 = *(_QWORD *)(a2 + 24);
  v285 = *(unsigned int *)(v284 + 28);
  if (!(_DWORD)v285 || v272 != *(_DWORD *)(*(_QWORD *)(v284 + 16) + 4 * v285 - 4))
  {
    v372 = v272;
    v286 = (_QWORD *)(v284 + 16);
    if ((_DWORD)v285 == *(_DWORD *)(v284 + 24))
      *(_DWORD *)(*(_QWORD *)(v284 + 16) + 4 * *(unsigned int *)(v284 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v286, v285 + 1, (unint64_t)&v372);
    else
      *(_DWORD *)(*v286 + 4 * v285) = v272;
    ++*(_DWORD *)(v284 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v288 = *(_DWORD *)(a1 + 56);
  v287 = *(_DWORD *)(a1 + 60);
  v289 = *(_DWORD *)(a1 + 64);
  if (v288 != -1 || v287 != -1 || v289 != -1)
  {
    v290 = *(_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68) != -1 || v290 != -1 || *(_DWORD *)(a1 + 76) != -1)
    {
      v291 = *(_DWORD *)(a1 + 84);
      if ((*(_DWORD *)(a1 + 80) & v291 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v292 = *(_QWORD *)(a2 + 192);
        v293 = *(_DWORD *)(v292 + 176);
        v278 = v287 - v293;
        v71 = v289 >= v293;
        v294 = v289 - v293;
        if (!v71)
          v294 = 0;
        v71 = v278 >= v294;
        v295 = v278 - v294;
        if (v71)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v278, v287 - v290, v291 - v287, (v288 + ~*(_DWORD *)(v292 + 184)) | (unint64_t)(v295 << 32));
      }
    }
  }
  v296 = v270[1];
  v297 = v31[1];
  v298 = v236[1];
  v299 = v39[1];
  v300 = (v299 - 1073741808) < 0x80;
  if (v299 <= 0x3FFFFFFF)
    v300 = (v299 + 128) < 0x90;
  if (!v300)
    goto LABEL_297;
  if (!((int)v296 <= 0x3FFFFFFF ? (v296 + 128) < 0x90 : (v296 - 1073741808) < 0x80))
    goto LABEL_297;
  v302 = (v297 - 1073741808) < 0x80;
  if ((int)v297 <= 0x3FFFFFFF)
    v302 = (v297 + 128) < 0x90;
  if (v302
    && ((int)v298 <= 0x3FFFFFFF
      ? (v303 = (v298 + 128) < 0x90)
      : (v303 = (v298 - 1073741808) < 0x80),
        v303))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0xBC, v278, v279, v280, v281, v282, v283);
    LOBYTE(v372) = -68;
    v309 = *(unsigned int *)(a2 + 12);
    v310 = *(unsigned int *)(a2 + 16);
    if (v309 > v310)
    {
      *(_DWORD *)(a2 + 16) = v310 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v310) = -68;
      v313 = *(_DWORD *)(a2 + 12);
      v314 = *(_DWORD *)(a2 + 16);
      v236 = v366;
    }
    else
    {
      if ((_DWORD)v309 == *(_DWORD *)(a2 + 8))
      {
        v354 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v309 + 1), (unint64_t)&v372);
        v309 = *(unsigned int *)(a2 + 12);
        v311 = *(_QWORD *)a2;
        v312 = *v354;
      }
      else
      {
        v311 = *(_QWORD *)a2;
        v312 = -68;
      }
      *(_BYTE *)(v311 + v309) = v312;
      v236 = v366;
      v313 = *(_DWORD *)(a2 + 12) + 1;
      v314 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v313;
      *(_DWORD *)(a2 + 16) = v314;
    }
    v315 = v299 + 16;
    if (v299 <= 0x3FFFFFFF)
      v315 = v299;
    LOBYTE(v372) = v315;
    if (v313 > v314)
    {
      *(_DWORD *)(a2 + 16) = v314 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v314) = v315;
      v318 = *(_DWORD *)(a2 + 12);
      v319 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v316 = v313;
      if (v313 == *(_DWORD *)(a2 + 8))
      {
        v355 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v313 + 1), (unint64_t)&v372);
        v316 = *(unsigned int *)(a2 + 12);
        v317 = *(_QWORD *)a2;
        v315 = *v355;
      }
      else
      {
        v317 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v317 + v316) = v315;
      v318 = *(_DWORD *)(a2 + 12) + 1;
      v319 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v318;
      *(_DWORD *)(a2 + 16) = v319;
    }
    v320 = v296 + 16;
    if ((int)v296 <= 0x3FFFFFFF)
      v320 = v296;
    LOBYTE(v372) = v320;
    if (v318 > v319)
    {
      *(_DWORD *)(a2 + 16) = v319 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v319) = v320;
      v323 = *(_DWORD *)(a2 + 12);
      v324 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v321 = v318;
      if (v318 == *(_DWORD *)(a2 + 8))
      {
        v356 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v318 + 1), (unint64_t)&v372);
        v321 = *(unsigned int *)(a2 + 12);
        v322 = *(_QWORD *)a2;
        v320 = *v356;
      }
      else
      {
        v322 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v322 + v321) = v320;
      v323 = *(_DWORD *)(a2 + 12) + 1;
      v324 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v323;
      *(_DWORD *)(a2 + 16) = v324;
    }
    v325 = v297 + 16;
    if ((int)v297 <= 0x3FFFFFFF)
      v325 = v297;
    LOBYTE(v372) = v325;
    if (v323 > v324)
    {
      *(_DWORD *)(a2 + 16) = v324 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v324) = v325;
      v328 = *(_DWORD *)(a2 + 12);
      v329 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v326 = v323;
      if (v323 == *(_DWORD *)(a2 + 8))
      {
        v357 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v323 + 1), (unint64_t)&v372);
        v326 = *(unsigned int *)(a2 + 12);
        v327 = *(_QWORD *)a2;
        v325 = *v357;
      }
      else
      {
        v327 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v327 + v326) = v325;
      v328 = *(_DWORD *)(a2 + 12) + 1;
      v329 = *(_DWORD *)(a2 + 16) + 1;
      *(_DWORD *)(a2 + 12) = v328;
      *(_DWORD *)(a2 + 16) = v329;
    }
    v330 = v298 + 16;
    if ((int)v298 <= 0x3FFFFFFF)
      v330 = v298;
    LOBYTE(v372) = v330;
    if (v328 > v329)
    {
      *(_DWORD *)(a2 + 16) = v329 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v329) = v330;
    }
    else
    {
      v331 = v328;
      if (v328 == *(_DWORD *)(a2 + 8))
      {
        v358 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v328 + 1), (unint64_t)&v372);
        v331 = *(unsigned int *)(a2 + 12);
        v332 = *(_QWORD *)a2;
        v330 = *v358;
      }
      else
      {
        v332 = *(_QWORD *)a2;
      }
      *(_BYTE *)(v332 + v331) = v330;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_297:
    if ((JSC::OpInstanceofCustom::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v39[1], v296, v31[1], v236[1], v281, v282, v283) & 1) == 0)JSC::OpInstanceofCustom::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v299, v296, v297, v298, v306, v307, v308);
  }
  v333 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v175, a2, v333, v304, v305, v306, v307, v308);
  v334 = *(_QWORD *)(a2 + 24);
  v335 = *(unsigned int *)(v334 + 28);
  v336 = v367;
  v337 = v362;
  if (!(_DWORD)v335 || v333 != *(_DWORD *)(*(_QWORD *)(v334 + 16) + 4 * v335 - 4))
  {
    v372 = v333;
    v338 = (_QWORD *)(v334 + 16);
    if ((_DWORD)v335 == *(_DWORD *)(v334 + 24))
      *(_DWORD *)(*(_QWORD *)(v334 + 16) + 4 * *(unsigned int *)(v334 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v338, v335 + 1, (unint64_t)&v372);
    else
      *(_DWORD *)(*v338 + 4 * v335) = v333;
    ++*(_DWORD *)(v334 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  --*v364;
  --*(_DWORD *)v175;
  --*v363;
  --*v337;
  --*v39;
  --*v31;
  --*v336;
  --*v365;
  --*v9;
  --*v236;
  return v39;
}

uint64_t JSC::InNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::ExpressionNode *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  char v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  signed int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v71;
  _BYTE *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  char v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _DWORD *v89;
  _DWORD *v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  unsigned int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t *v128;
  uint64_t v129;
  WTF::StringImpl **v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  _BOOL4 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  unsigned int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  _DWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  _BYTE *v185;
  _BYTE *v186;
  char *v187;
  char *v188;
  _DWORD *v189;
  WTF::StringImpl *v190;
  unsigned int PrivateTraits;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  _DWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _DWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  WTF::AtomStringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _DWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  WTF::StringImpl *v247[5];
  WTF::StringImpl *v248;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 328))(*(_QWORD *)(a1 + 40)))
  {
    if (!JSC::isNonIndexStringElement(*(JSC **)(a1 + 40), v6))
    {
      v71 = *(unsigned __int8 *)(a1 + 27);
      v72 = *(_BYTE **)(a1 + 40);
      v73 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48), a2);
      v79 = *(_BYTE *)(a2 + 416) == 2 && v71 == 0;
      if (v79 || (v73 & 1) != 0)
      {
        v80 = *(_BYTE *)(a2 + 709);
        v81 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v244 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          v82 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v72[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v72 + 8), v74, v75, v76, v77, v78);
          v82 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v72 + 16))(v72, a2, 0);
        }
        v22 = v82;
        if (v82)
          ++*v82;
      }
      else
      {
        v173 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v22 = v173;
        if (v173)
          ++*v173;
        v80 = *(_BYTE *)(a2 + 709);
        v81 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v244 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v72[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v72 + 8), v174, v175, v176, v177, v178);
          (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v72 + 16))(v72, a2, v22);
        }
      }
      v88 = *(_BYTE **)(a1 + 48);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v244 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v89 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v88[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v88 + 8), v83, v84, v85, v86, v87);
        v89 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v88 + 16))(v88, a2, 0);
      }
      v90 = v89;
      *(_BYTE *)(a2 + 710) = v81;
      *(_BYTE *)(a2 + 709) = v80;
      if (v89)
        ++*v89;
      v92 = *(_DWORD *)(a1 + 56);
      v91 = *(_DWORD *)(a1 + 60);
      v93 = *(_DWORD *)(a1 + 64);
      if (v92 != -1 || v91 != -1 || v93 != -1)
      {
        v94 = *(_DWORD *)(a1 + 72);
        if (*(_DWORD *)(a1 + 68) != -1 || v94 != -1 || *(_DWORD *)(a1 + 76) != -1)
        {
          v95 = *(_DWORD *)(a1 + 84);
          if ((*(_DWORD *)(a1 + 80) & v95 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
          {
            v96 = *(_QWORD *)(a2 + 192);
            v97 = *(_DWORD *)(v96 + 176);
            v98 = v91 - v97;
            v31 = v93 >= v97;
            v99 = v93 - v97;
            if (!v31)
              v99 = 0;
            v31 = v98 >= v99;
            v100 = v98 - v99;
            if (v31)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v98, v91 - v94, v95 - v91, (v92 + ~*(_DWORD *)(v96 + 184)) | (unint64_t)(v100 << 32));
          }
        }
      }
      v101 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v22);
      v34 = v101;
      v108 = 8 * *(unsigned int *)(a2 + 476) - 8;
      while (v108 != -8)
      {
        v109 = *(_QWORD *)(*(_QWORD *)(a2 + 464) + v108);
        v108 -= 8;
        if (*(_DWORD **)(v109 + 8) == v22)
        {
          v110 = *(_DWORD *)(v101 + 4);
          v111 = v90[1];
          v112 = *(_DWORD *)(*(_QWORD *)(v109 + 40) + 4);
          v113 = v22[1];
          v114 = *(_DWORD *)(*(_QWORD *)(v109 + 32) + 4);
          v245 = *(_DWORD *)(*(_QWORD *)(v109 + 24) + 4);
          v246 = v114;
          v115 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
          *(_BYTE *)(v115 + 4) |= 1u;
          v116 = *(_QWORD *)(v115 + 16);
          v117 = *(_DWORD *)(v116 + 156);
          *(_DWORD *)(v116 + 156) = v117 + 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x27, v102, v103, v104, v105, v106, v107);
          LOBYTE(v247[0]) = -126;
          v118 = *(unsigned int *)(a2 + 12);
          v119 = *(unsigned int *)(a2 + 16);
          if (v118 > v119)
          {
            *(_DWORD *)(a2 + 16) = v119 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v119) = -126;
            v122 = *(_DWORD *)(a2 + 12);
            v123 = *(_DWORD *)(a2 + 16);
          }
          else
          {
            if ((_DWORD)v118 == *(_DWORD *)(a2 + 8))
            {
              v187 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v118 + 1), (unint64_t)v247);
              v118 = *(unsigned int *)(a2 + 12);
              v120 = *(_QWORD *)a2;
              v121 = *v187;
            }
            else
            {
              v120 = *(_QWORD *)a2;
              v121 = -126;
            }
            *(_BYTE *)(v120 + v118) = v121;
            v122 = *(_DWORD *)(a2 + 12) + 1;
            v123 = *(_DWORD *)(a2 + 16) + 1;
            *(_DWORD *)(a2 + 12) = v122;
            *(_DWORD *)(a2 + 16) = v123;
          }
          v124 = 39;
          LOBYTE(v247[0]) = 39;
          if (v122 > v123)
          {
            *(_DWORD *)(a2 + 16) = v123 + 1;
            *(_BYTE *)(*(_QWORD *)a2 + v123) = 39;
          }
          else
          {
            v125 = v122;
            if (v122 == *(_DWORD *)(a2 + 8))
            {
              v188 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v122 + 1), (unint64_t)v247);
              v125 = *(unsigned int *)(a2 + 12);
              v126 = *(_QWORD *)a2;
              v124 = *v188;
            }
            else
            {
              v126 = *(_QWORD *)a2;
            }
            *(_BYTE *)(v126 + v125) = v124;
            *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
          }
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v110);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v111);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v112);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v113);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v245);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v246);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v117);
          v127 = v22[1];
          v128 = (uint64_t *)(v109 + 104);
          LODWORD(v247[0]) = *(_DWORD *)(a2 + 48);
          HIDWORD(v247[0]) = v127;
          v129 = *(unsigned int *)(v109 + 116);
          if ((_DWORD)v129 == *(_DWORD *)(v109 + 112))
          {
            v130 = (WTF::StringImpl **)WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)v247);
            v129 = *(unsigned int *)(v109 + 116);
            v131 = *(_QWORD *)(v109 + 104);
            v132 = *v130;
          }
          else
          {
            v131 = *v128;
            v132 = v247[0];
          }
          *(_QWORD *)(v131 + 8 * v129) = v132;
          ++*(_DWORD *)(v109 + 116);
          goto LABEL_96;
        }
      }
      v133 = *(_DWORD *)(v101 + 4);
      v134 = v90[1];
      v135 = v22[1];
      v136 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
      *(_BYTE *)(v136 + 4) |= 1u;
      v137 = *(_QWORD *)(v136 + 16);
      v138 = *(unsigned int *)(v137 + 148);
      *(_DWORD *)(v137 + 148) = v138 + 1;
      if ((JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v133, v134, v135, v138, v105, v106, v107) & 1) == 0&& (JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v133, v134, v135, v138, v139, v140, v141) & 1) == 0)
      {
        JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v133, v134, v135, v138, v219, v220, v221);
      }
LABEL_96:
      --*v90;
      goto LABEL_49;
    }
    v18 = *(_BYTE **)(a1 + 48);
    v19 = *(_BYTE *)(a2 + 709);
    v20 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v244 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v21 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v18[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v18 + 8), v13, v14, v15, v16, v17);
      v21 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, a2, 0);
    }
    v22 = v21;
    *(_BYTE *)(a2 + 710) = v20;
    *(_BYTE *)(a2 + 709) = v19;
    if (v21)
      ++*v21;
    v24 = *(_DWORD *)(a1 + 56);
    v23 = *(_DWORD *)(a1 + 60);
    v25 = *(_DWORD *)(a1 + 64);
    if (v24 != -1 || v23 != -1 || v25 != -1)
    {
      v26 = *(_DWORD *)(a1 + 72);
      if (*(_DWORD *)(a1 + 68) != -1 || v26 != -1 || *(_DWORD *)(a1 + 76) != -1)
      {
        v27 = *(_DWORD *)(a1 + 84);
        if ((*(_DWORD *)(a1 + 80) & v27 & *(_DWORD *)(a1 + 88)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v28 = *(_QWORD *)(a2 + 192);
          v29 = *(_DWORD *)(v28 + 176);
          v30 = v23 - v29;
          v31 = v25 >= v29;
          v32 = v25 - v29;
          if (!v31)
            v32 = 0;
          v31 = v30 >= v32;
          v33 = v30 - v32;
          if (v31)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v30, v23 - v26, v27 - v23, (v24 + ~*(_DWORD *)(v28 + 184)) | (unint64_t)(v33 << 32));
        }
      }
    }
    v34 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v22);
    v35 = v22[1];
    v36 = *(_DWORD *)(v34 + 4);
    v43 = JSC::BytecodeGenerator::addConstant(a2, *(WTF::AtomStringImpl **)(*(_QWORD *)(a1 + 40) + 32), v37, v38, v39, v40, v41, v42);
    v50 = v43;
    v51 = (v36 - 1073741808) < 0x80;
    if (v36 <= 0x3FFFFFFF)
      v51 = (v36 + 128) < 0x90;
    if (!v51)
      goto LABEL_97;
    v52 = (v35 - 1073741808) < 0x80;
    if ((int)v35 <= 0x3FFFFFFF)
      v52 = (v35 + 128) < 0x90;
    if (v52 && v43 <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x35, v44, v45, v46, v47, v48, v49);
      LOBYTE(v247[0]) = 53;
      v53 = *(unsigned int *)(a2 + 12);
      v54 = *(unsigned int *)(a2 + 16);
      if (v53 > v54)
      {
        *(_DWORD *)(a2 + 16) = v54 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v54) = 53;
        v57 = *(_DWORD *)(a2 + 12);
        v58 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v53 == *(_DWORD *)(a2 + 8))
        {
          v180 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v53 + 1), (unint64_t)v247);
          v53 = *(unsigned int *)(a2 + 12);
          v55 = *(_QWORD *)a2;
          v56 = *v180;
        }
        else
        {
          v55 = *(_QWORD *)a2;
          v56 = 53;
        }
        *(_BYTE *)(v55 + v53) = v56;
        v57 = *(_DWORD *)(a2 + 12) + 1;
        v58 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v57;
        *(_DWORD *)(a2 + 16) = v58;
      }
      v59 = v36 + 16;
      if (v36 <= 0x3FFFFFFF)
        v59 = v36;
      LOBYTE(v247[0]) = v59;
      if (v57 > v58)
      {
        *(_DWORD *)(a2 + 16) = v58 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v58) = v59;
        v62 = *(_DWORD *)(a2 + 12);
        v63 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v60 = v57;
        if (v57 == *(_DWORD *)(a2 + 8))
        {
          v181 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v57 + 1), (unint64_t)v247);
          v60 = *(unsigned int *)(a2 + 12);
          v61 = *(_QWORD *)a2;
          v59 = *v181;
        }
        else
        {
          v61 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v61 + v60) = v59;
        v62 = *(_DWORD *)(a2 + 12) + 1;
        v63 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v62;
        *(_DWORD *)(a2 + 16) = v63;
      }
      v64 = v35 + 16;
      if ((int)v35 <= 0x3FFFFFFF)
        v64 = v35;
      LOBYTE(v247[0]) = v64;
      if (v62 > v63)
      {
        *(_DWORD *)(a2 + 16) = v63 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v63) = v64;
        v67 = *(_DWORD *)(a2 + 12);
        v68 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v65 = v62;
        if (v62 == *(_DWORD *)(a2 + 8))
        {
          v182 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v62 + 1), (unint64_t)v247);
          v65 = *(unsigned int *)(a2 + 12);
          v66 = *(_QWORD *)a2;
          v64 = *v182;
        }
        else
        {
          v66 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v66 + v65) = v64;
        v67 = *(_DWORD *)(a2 + 12) + 1;
        v68 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v67;
        *(_DWORD *)(a2 + 16) = v68;
      }
      LOBYTE(v247[0]) = v50;
      if (v67 > v68)
      {
        *(_DWORD *)(a2 + 16) = v68 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v68) = v50;
        goto LABEL_49;
      }
      v69 = v67;
      if (v67 != *(_DWORD *)(a2 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a2 + v67) = v50;
LABEL_48:
        *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
LABEL_49:
        --*v22;
        return v34;
      }
    }
    else
    {
LABEL_97:
      if (v36 <= 0x3FFFFFFF)
        v142 = (v36 + 0x8000) >> 6 < 0x201;
      else
        v142 = (v36 - 1073741760) < 0x8000;
      if (!v142)
        goto LABEL_174;
      v143 = (v35 - 1073741760) < 0x8000;
      if ((int)v35 <= 0x3FFFFFFF)
        v143 = (v35 + 0x8000) >> 6 < 0x201;
      if (!v143 || WORD1(v43))
      {
LABEL_174:
        JSC::OpInById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v36, v35, v43, v46, v47, v48, v49);
        goto LABEL_49;
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x35, v44, v45, v46, v47, v48, v49);
      LOBYTE(v247[0]) = 0x80;
      v144 = *(unsigned int *)(a2 + 12);
      v145 = *(unsigned int *)(a2 + 16);
      if (v144 > v145)
      {
        *(_DWORD *)(a2 + 16) = v145 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v145) = 0x80;
        v148 = *(_DWORD *)(a2 + 12);
        v149 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if ((_DWORD)v144 == *(_DWORD *)(a2 + 8))
        {
          v183 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v144 + 1), (unint64_t)v247);
          v144 = *(unsigned int *)(a2 + 12);
          v146 = *(_QWORD *)a2;
          v147 = *v183;
        }
        else
        {
          v146 = *(_QWORD *)a2;
          v147 = 0x80;
        }
        *(_BYTE *)(v146 + v144) = v147;
        v148 = *(_DWORD *)(a2 + 12) + 1;
        v149 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v148;
        *(_DWORD *)(a2 + 16) = v149;
      }
      v150 = 53;
      LOBYTE(v247[0]) = 53;
      if (v148 > v149)
      {
        *(_DWORD *)(a2 + 16) = v149 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v149) = 53;
        v153 = *(_DWORD *)(a2 + 12);
        v154 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v151 = v148;
        if (v148 == *(_DWORD *)(a2 + 8))
        {
          v184 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v148 + 1), (unint64_t)v247);
          v151 = *(unsigned int *)(a2 + 12);
          v152 = *(_QWORD *)a2;
          v150 = *v184;
        }
        else
        {
          v152 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v152 + v151) = v150;
        v153 = *(_DWORD *)(a2 + 12) + 1;
        v154 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v153;
        *(_DWORD *)(a2 + 16) = v154;
      }
      if (v36 > 0x3FFFFFFF)
        v36 += 64;
      LOBYTE(v247[0]) = v36;
      if (v153 > v154)
      {
        *(_DWORD *)(a2 + 16) = v154 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v154) = v36;
        v155 = *(_DWORD *)(a2 + 12);
        v156 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v153 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v153 + 1), (unint64_t)v247);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v153) = v36;
        v155 = *(_DWORD *)(a2 + 12) + 1;
        v156 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v155;
        *(_DWORD *)(a2 + 16) = v156;
      }
      v157 = v36 >> 8;
      LOBYTE(v247[0]) = BYTE1(v36);
      if (v155 > v156)
      {
        *(_DWORD *)(a2 + 16) = v156 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v156) = BYTE1(v36);
        v160 = *(_DWORD *)(a2 + 12);
        v161 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v158 = v155;
        if (v155 == *(_DWORD *)(a2 + 8))
        {
          v185 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v155 + 1), (unint64_t)v247);
          v158 = *(unsigned int *)(a2 + 12);
          v159 = *(_QWORD *)a2;
          LOBYTE(v157) = *v185;
        }
        else
        {
          v159 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v159 + v158) = v157;
        v160 = *(_DWORD *)(a2 + 12) + 1;
        v161 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v160;
        *(_DWORD *)(a2 + 16) = v161;
      }
      if ((int)v35 > 0x3FFFFFFF)
        LODWORD(v35) = v35 + 64;
      LOBYTE(v247[0]) = v35;
      if (v160 > v161)
      {
        *(_DWORD *)(a2 + 16) = v161 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v161) = v35;
        v162 = *(_DWORD *)(a2 + 12);
        v163 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v160 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v160 + 1), (unint64_t)v247);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v160) = v35;
        v162 = *(_DWORD *)(a2 + 12) + 1;
        v163 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v162;
        *(_DWORD *)(a2 + 16) = v163;
      }
      v164 = v35 >> 8;
      LOBYTE(v247[0]) = BYTE1(v35);
      if (v162 > v163)
      {
        *(_DWORD *)(a2 + 16) = v163 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v163) = BYTE1(v35);
        v167 = *(_DWORD *)(a2 + 12);
        v168 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v165 = v162;
        if (v162 == *(_DWORD *)(a2 + 8))
        {
          v186 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v162 + 1), (unint64_t)v247);
          v165 = *(unsigned int *)(a2 + 12);
          v166 = *(_QWORD *)a2;
          LOBYTE(v164) = *v186;
        }
        else
        {
          v166 = *(_QWORD *)a2;
        }
        *(_BYTE *)(v166 + v165) = v164;
        v167 = *(_DWORD *)(a2 + 12) + 1;
        v168 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v167;
        *(_DWORD *)(a2 + 16) = v168;
      }
      LOBYTE(v247[0]) = v50;
      if (v167 > v168)
      {
        *(_DWORD *)(a2 + 16) = v168 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v168) = v50;
        v169 = *(_DWORD *)(a2 + 12);
        v170 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        if (v167 == *(_DWORD *)(a2 + 8))
          *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v167 + 1), (unint64_t)v247);
        else
          *(_BYTE *)(*(_QWORD *)a2 + v167) = v50;
        v169 = *(_DWORD *)(a2 + 12) + 1;
        v170 = *(_DWORD *)(a2 + 16) + 1;
        *(_DWORD *)(a2 + 12) = v169;
        *(_DWORD *)(a2 + 16) = v170;
      }
      v171 = v50 >> 8;
      LOBYTE(v247[0]) = BYTE1(v50);
      if (v169 > v170)
      {
        *(_DWORD *)(a2 + 16) = v170 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v170) = BYTE1(v50);
        goto LABEL_49;
      }
      v69 = v169;
      if (v169 != *(_DWORD *)(a2 + 8))
      {
        v172 = *(_QWORD *)a2;
LABEL_140:
        *(_BYTE *)(v172 + v69) = v171;
        goto LABEL_48;
      }
    }
    v179 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v69 + 1), (unint64_t)v247);
    v69 = *(unsigned int *)(a2 + 12);
    v172 = *(_QWORD *)a2;
    LOBYTE(v171) = *v179;
    goto LABEL_140;
  }
  v189 = (_DWORD *)JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(a1 + 48), v7, v8, v9, v10, v11, v12);
  v22 = v189;
  if (v189)
    ++*v189;
  v190 = **(WTF::StringImpl ***)(*(_QWORD *)(a1 + 40) + 32);
  if (v190)
    *(_DWORD *)v190 += 2;
  v248 = v190;
  PrivateTraits = JSC::BytecodeGenerator::getPrivateTraits(*(_QWORD *)(a2 + 160), *(_DWORD *)(a2 + 172), (uint64_t)v190);
  JSC::BytecodeGenerator::variable((uint64_t)v247, a2, (uint64_t)&v248, 0, v192, v193, v194, v195);
  v201 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v247, v196, v197, v198, v199, v200);
  v202 = v201;
  if (v201)
    ++*v201;
  v207 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  if ((PrivateTraits & 7) == 0)
  {
    v222 = JSC::BytecodeGenerator::emitGetFromScope(a2, v207, (uint64_t)v202, (unint64_t)v247, 1, v204, v205, v206);
    v207 = v222;
    if (v222)
      ++*v222;
    v34 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v22);
    JSC::BytecodeGenerator::emitHasPrivateName(a2, v34, v22[1], v207[1], v223, v224, v225, v226);
    goto LABEL_179;
  }
  v208 = (PrivateTraits >> 3) & 1;
  JSC::BytecodeGenerator::emitGetPrivateBrand(a2, v207, (uint64_t)v202, v208, v203, v204, v205, v206);
  if (v207)
    ++*v207;
  v34 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v22);
  JSC::BytecodeGenerator::emitHasPrivateBrand(a2, v34, (uint64_t)v22, (uint64_t)v207, v208, v209, v210, v211);
  if (v207)
LABEL_179:
    --*v207;
  if (v202)
    --*v202;
  v227 = v247[0];
  v247[0] = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
    {
      WTF::StringImpl::~StringImpl(v227, v212, v213, v214, v215, v216, v217, v218);
      WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
    }
    else
    {
      *(_DWORD *)v227 -= 2;
    }
  }
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, v212, v213, v214, v215, v216, v217, v218);
      WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
  }
  if (v22)
    goto LABEL_49;
  return v34;
}

int *JSC::LogicalOpNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int *result;
  _DWORD *v49;
  int v50;

  v6 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v13 = v6;
  if (v6)
    ++*v6;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v49, a2, v7, v8, v9, v10, v11, v12);
  v19 = *(_BYTE **)(a1 + 32);
  v20 = *(_BYTE *)(a2 + 709);
  v21 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v49 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v19[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v19 + 8), v14, v15, v16, v17, v18);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v19 + 16))(v19, a2, v13);
  }
  *(_BYTE *)(a2 + 710) = v21;
  *(_BYTE *)(a2 + 709) = v20;
  v27 = v49;
  if (*(_BYTE *)(a1 + 27))
    JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v13, (uint64_t)v49, v22, v23, v24, v25, v26);
  else
    JSC::BytecodeGenerator::emitJumpIfFalse(a2, (uint64_t)v13, (uint64_t)v49, v22, v23, v24, v25, v26);
  if ((unint64_t)&v49 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v33 = *(_BYTE **)(a1 + 40);
    if (v33[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v33 + 8), v28, v29, v30, v31, v32);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v33 + 16))(v33, a2, v13);
  }
  v39 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v27, a2, v39, v34, v35, v36, v37, v38);
  v45 = *(_QWORD *)(a2 + 24);
  v46 = *(unsigned int *)(v45 + 28);
  if (!(_DWORD)v46 || v39 != *(_DWORD *)(*(_QWORD *)(v45 + 16) + 4 * v46 - 4))
  {
    v50 = v39;
    v47 = (_QWORD *)(v45 + 16);
    if ((_DWORD)v46 == *(_DWORD *)(v45 + 24))
      *(_DWORD *)(*(_QWORD *)(v45 + 16) + 4 * *(unsigned int *)(v45 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v46 + 1, (unint64_t)&v50);
    else
      *(_DWORD *)(*v47 + 4 * v46) = v39;
    ++*(_DWORD *)(v45 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((int *)(a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v13;
    if (a3)
    {
      result = v13;
      if (v13 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v13, v40, v41, v42, v43, v44);
        result = a3;
      }
    }
  }
  if (v27)
    --*v27;
  if (v13)
    --*v13;
  return result;
}

uint64_t JSC::LogicalOpNode::emitBytecodeInConditionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  _DWORD *v27;
  int v28;

  if (*(_BYTE *)(a1 + 24))
    JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, a1 + 8, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v27, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = v27;
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104);
  if (*(_BYTE *)(a1 + 27))
  {
    if ((unint64_t)&v27 >= v15)
    {
      v16 = *(void (**)(void))(*(_QWORD *)v13 + 352);
      goto LABEL_6;
    }
LABEL_21:
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    goto LABEL_7;
  }
  if ((unint64_t)&v27 < v15)
    goto LABEL_21;
  v16 = *(void (**)(void))(*(_QWORD *)v13 + 352);
LABEL_6:
  v16();
LABEL_7:
  v22 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v14, a2, v22, v17, v18, v19, v20, v21);
  v23 = *(_QWORD *)(a2 + 24);
  v24 = *(unsigned int *)(v23 + 28);
  if (!(_DWORD)v24 || v22 != *(_DWORD *)(*(_QWORD *)(v23 + 16) + 4 * v24 - 4))
  {
    v28 = v22;
    v25 = (_QWORD *)(v23 + 16);
    if ((_DWORD)v24 == *(_DWORD *)(v23 + 24))
      *(_DWORD *)(*(_QWORD *)(v23 + 16) + 4 * *(unsigned int *)(v23 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v24 + 1, (unint64_t)&v28);
    else
      *(_DWORD *)(*v25 + 4 * v24) = v22;
    ++*(_DWORD *)(v23 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((unint64_t)&v27 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 352))(*(_QWORD *)(a1 + 40), a2, a3, a4, a5);
  }
  if (v14)
    --*v14;
  return result;
}

int *JSC::CoalesceNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int *result;
  _DWORD *v61;
  int v62;

  v6 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v13 = v6;
  if (v6)
    ++*v6;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v61, a2, v7, v8, v9, v10, v11, v12);
  if (*(_BYTE *)(a1 + 48))
    JSC::BytecodeGenerator::pushOptionalChainTarget((JSC::BytecodeGenerator *)a2, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_BYTE **)(a1 + 32);
  v22 = *(_BYTE *)(a2 + 709);
  v23 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v61 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v21[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v21 + 8), v16, v17, v18, v19, v20);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v21 + 16))(v21, a2, v13);
  }
  *(_BYTE *)(a2 + 710) = v23;
  *(_BYTE *)(a2 + 709) = v22;
  v24 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v25 = *(_DWORD *)(v24 + 4);
  v26 = v13[1];
  if ((JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v25, v26, v27, v28, v29, v30, v31) & 1) == 0&& (JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v25, v26, v32, v33, v34, v35, v36) & 1) == 0)
  {
    JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v25, v26, v32, v33, v34, v35, v36);
  }
  v37 = v61;
  JSC::BytecodeGenerator::emitJumpIfFalse(a2, v24, (uint64_t)v61, v32, v33, v34, v35, v36);
  if (*(_BYTE *)(a1 + 48))
    JSC::BytecodeGenerator::popOptionalChainTarget(a2, v38, v39, v40, v41, v42, v43, v44);
  if ((unint64_t)&v61 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v45 = *(_BYTE **)(a1 + 40);
    if (v45[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v45 + 8), v40, v41, v42, v43, v44);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v45 + 16))(v45, a2, v13);
  }
  v51 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v37, a2, v51, v46, v47, v48, v49, v50);
  v57 = *(_QWORD *)(a2 + 24);
  v58 = *(unsigned int *)(v57 + 28);
  if (!(_DWORD)v58 || v51 != *(_DWORD *)(*(_QWORD *)(v57 + 16) + 4 * v58 - 4))
  {
    v62 = v51;
    v59 = (_QWORD *)(v57 + 16);
    if ((_DWORD)v58 == *(_DWORD *)(v57 + 24))
      *(_DWORD *)(*(_QWORD *)(v57 + 16) + 4 * *(unsigned int *)(v57 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v58 + 1, (unint64_t)&v62);
    else
      *(_DWORD *)(*v59 + 4 * v58) = v51;
    ++*(_DWORD *)(v57 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((int *)(a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v13;
    if (a3)
    {
      result = v13;
      if (v13 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v13, v52, v53, v54, v55, v56);
        result = a3;
      }
    }
  }
  --*v37;
  --*v13;
  return result;
}

int *JSC::OptionalChainNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;

  v5 = (int *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v12 = v5;
  if (v5)
    ++*v5;
  if (*(_BYTE *)(a1 + 40))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v62, a2, v6, v7, v8, v9, v10, v11);
    v13 = *(unsigned int *)(a2 + 628);
    if ((_DWORD)v13 == *(_DWORD *)(a2 + 624))
    {
      v14 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 616, v13 + 1, (unint64_t)&v62);
      v15 = *(unsigned int *)(a2 + 628);
      v16 = *(_QWORD *)(a2 + 616);
      v17 = *v14;
      *v14 = 0;
      *(_QWORD *)(v16 + 8 * v15) = v17;
      v18 = v62;
      *(_DWORD *)(a2 + 628) = v15 + 1;
      if (v18)
        --*v18;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 616) + 8 * v13) = v62;
      *(_DWORD *)(a2 + 628) = v13 + 1;
    }
  }
  if ((unint64_t)&v61 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v19 = *(_BYTE **)(a1 + 32);
    if (v19[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v19 + 8), v7, v8, v9, v10, v11);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v19 + 16))(v19, a2, v12);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v61, a2, v21, v22, v23, v24, v25, v26);
    v33 = (_DWORD *)v61;
    *(_BYTE *)(v61 + 8) = 1;
    v34 = v33[1];
    if ((_DWORD)v34 == -1)
      v35 = (unint64_t)v33;
    else
      v35 = v33[1];
    if ((_DWORD)v34 == -1)
      v36 = 1;
    else
      v36 = 2;
    if (v34 == 0xFFFFFFFFLL)
      v37 = 1;
    else
      v37 = 2;
    LOBYTE(v62) = v37;
    HIDWORD(v62) = 0;
    v63 = a2;
    v64 = (_DWORD *)v35;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v62, v27, v28, v29, v30, v31, v32) & 1) == 0)
    {
      LOBYTE(v62) = v36;
      HIDWORD(v62) = 0;
      v63 = a2;
      v64 = (_DWORD *)v35;
      if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v62, v39, v40, v41, v42, v43, v44) & 1) == 0)
      {
        LOBYTE(v62) = v36;
        HIDWORD(v62) = 0;
        v63 = a2;
        v64 = (_DWORD *)v35;
        JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v62);
      }
    }
    JSC::BytecodeGenerator::popOptionalChainTarget(a2, v38, v39, v40, v41, v42, v43, v44);
    if (v20)
      v50 = 7;
    else
      v50 = 10;
    JSC::BytecodeGenerator::emitLoad(a2, v12, v50, v45, v46, v47, v48, v49);
    v51 = *(_DWORD *)(a2 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v33, a2, v51, v52, v53, v54, v55, v56);
    v57 = *(_QWORD *)(a2 + 24);
    v58 = *(unsigned int *)(v57 + 28);
    if (!(_DWORD)v58 || v51 != *(_DWORD *)(*(_QWORD *)(v57 + 16) + 4 * v58 - 4))
    {
      LODWORD(v62) = v51;
      v59 = (_QWORD *)(v57 + 16);
      if ((_DWORD)v58 == *(_DWORD *)(v57 + 24))
        *(_DWORD *)(*(_QWORD *)(v57 + 16) + 4 * *(unsigned int *)(v57 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v58 + 1, (unint64_t)&v62);
      else
        *(_DWORD *)(*v59 + 4 * v58) = v51;
      ++*(_DWORD *)(v57 + 28);
      *(_DWORD *)(a2 + 36) = 115;
    }
    --*v33;
  }
  if (v12)
    --*v12;
  return v12;
}

_DWORD *JSC::ConditionalNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unsigned int v87;
  int v88;
  int v89;
  _DWORD *v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  int v94;
  uint64_t v95;
  _DWORD *v96;

  v5 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  v12 = v5;
  if (v5)
    ++*v5;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v92, a2, v6, v7, v8, v9, v10, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v91, a2, v13, v14, v15, v16, v17, v18);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v90, a2, v19, v20, v21, v22, v23, v24);
  v25 = v90;
  v26 = v92;
  if ((unint64_t)&v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _DWORD *, _DWORD *, _QWORD))(**(_QWORD **)(a1 + 32) + 352))(*(_QWORD *)(a1 + 32), a2, v90, v92, 0);
  }
  v32 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v25, a2, v32, v27, v28, v29, v30, v31);
  v39 = *(_QWORD *)(a2 + 24);
  v40 = *(unsigned int *)(v39 + 28);
  if (!(_DWORD)v40 || v32 != *(_DWORD *)(*(_QWORD *)(v39 + 16) + 4 * v40 - 4))
  {
    v93 = v32;
    v41 = (_QWORD *)(v39 + 16);
    if ((_DWORD)v40 == *(_DWORD *)(v39 + 24))
      *(_DWORD *)(*(_QWORD *)(v39 + 16) + 4 * *(unsigned int *)(v39 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v40 + 1, (unint64_t)&v93);
    else
      *(_DWORD *)(*v41 + 4 * v40) = v32;
    ++*(_DWORD *)(v39 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v42 = *(_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v87 = *(_DWORD *)(v42 + 12);
    if ((v87 & 0x80000000) != 0)
      goto LABEL_64;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v87, v33, v34, v35, v36, v37, v38);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v42 = *(_QWORD *)(a1 + 40);
  }
  if ((unint64_t)&v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v42 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v42 + 8, v34, v35, v36, v37, v38);
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v42 + 16))(v42, a2, v12);
  }
  v49 = (_DWORD *)v91;
  *(_BYTE *)(v91 + 8) = 1;
  v50 = v49[1];
  if ((_DWORD)v50 == -1)
    v51 = (unint64_t)v49;
  else
    v51 = v49[1];
  if ((_DWORD)v50 == -1)
    v52 = 1;
  else
    v52 = 2;
  if (v50 == 0xFFFFFFFFLL)
    v53 = 1;
  else
    v53 = 2;
  LOBYTE(v93) = v53;
  v94 = 0;
  v95 = a2;
  v96 = (_DWORD *)v51;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v93, v43, v44, v45, v46, v47, v48) & 1) == 0)
  {
    LOBYTE(v93) = v52;
    v94 = 0;
    v95 = a2;
    v96 = (_DWORD *)v51;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v93, v54, v55, v56, v57, v58, v59) & 1) == 0)
    {
      LOBYTE(v93) = v52;
      v94 = 0;
      v95 = a2;
      v96 = (_DWORD *)v51;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v93);
    }
  }
  v60 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v26, a2, v60, v55, v56, v57, v58, v59);
  v67 = *(_QWORD *)(a2 + 24);
  v68 = *(unsigned int *)(v67 + 28);
  if (!(_DWORD)v68 || v60 != *(_DWORD *)(*(_QWORD *)(v67 + 16) + 4 * v68 - 4))
  {
    v93 = v60;
    v69 = (_QWORD *)(v67 + 16);
    if ((_DWORD)v68 == *(_DWORD *)(v67 + 24))
      *(_DWORD *)(*(_QWORD *)(v67 + 16) + 4 * *(unsigned int *)(v67 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v68 + 1, (unint64_t)&v93);
    else
      *(_DWORD *)(*v69 + 4 * v68) = v60;
    ++*(_DWORD *)(v67 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v88 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20);
    if (v88 <= -2)
    {
      __break(0xC471u);
      JUMPOUT(0x1982791DCLL);
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v88 + 1, v61, v62, v63, v64, v65, v66);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
  }
  if ((unint64_t)&v90 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v70 = *(_BYTE **)(a1 + 48);
    if (v70[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v70 + 8), v62, v63, v64, v65, v66);
    (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v70 + 16))(v70, a2, v12);
  }
  v76 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v49, a2, v76, v71, v72, v73, v74, v75);
  v83 = *(_QWORD *)(a2 + 24);
  v84 = *(unsigned int *)(v83 + 28);
  if (!(_DWORD)v84 || v76 != *(_DWORD *)(*(_QWORD *)(v83 + 16) + 4 * v84 - 4))
  {
    v93 = v76;
    v85 = (_QWORD *)(v83 + 16);
    if ((_DWORD)v84 == *(_DWORD *)(v83 + 24))
      *(_DWORD *)(*(_QWORD *)(v83 + 16) + 4 * *(unsigned int *)(v83 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v84 + 1, (unint64_t)&v93);
    else
      *(_DWORD *)(*v85 + 4 * v84) = v76;
    ++*(_DWORD *)(v83 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v89 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 20);
    if (v89 > -2)
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v89 + 1, v77, v78, v79, v80, v81, v82);
      JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
      goto LABEL_41;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1982791BCLL);
  }
LABEL_41:
  if (v25)
    --*v25;
  --*v49;
  if (v26)
    --*v26;
  if (v12)
    --*v12;
  return v12;
}

int *JSC::ReadModifyResolveNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int *v60;
  int *v61;
  WTF::StringImpl *v62;
  int v64;
  int v67;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int8x16_t v105;
  unint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int8x16_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  JSC::ExpressionNode *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  int *v191;
  WTF::StringImpl *v192[2];
  int *v193;
  int v194;
  char v195;
  _BYTE v196[28];
  uint64_t v197;
  int v198;

  v11 = a1 + 40;
  v12 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)v12)
    v13 = *(_DWORD *)(*(_QWORD *)v12 + 4);
  else
    v13 = 0;
  v14 = *(_DWORD *)(a1 + 40);
  v15 = *(_DWORD *)(a1 + 44);
  v16 = *(_DWORD *)(a1 + 48);
  JSC::BytecodeGenerator::variable((uint64_t)v192, a2, v12, 0, a5, a6, a7, a8);
  v22 = v193;
  if (v193)
  {
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v192, (uint64_t)v193, 0, v18, v19, v20, v21);
    if ((v194 & 2) == 0)
    {
      v23 = *(unsigned __int8 *)(a1 + 81);
      v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), a2);
      v30 = *(_BYTE *)(a2 + 416) == 2 && v23 == 0;
      if (!v30 && (v24 & 1) == 0)
      {
        v31 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v37 = v31;
        v191 = a3;
        if (v31)
        {
          ++*v31;
          v38 = (int *)(a2 + 208);
          v39 = v31 == v22;
          if (v31 != v22 && v38 != v31)
          {
            JSC::BytecodeGenerator::emitMove(a2, v31, (uint64_t)v22, v32, v33, v34, v35, v36);
            v39 = 0;
          }
        }
        else
        {
          v39 = 0;
          v38 = (int *)(a2 + 208);
        }
        v40 = *(_QWORD *)(a1 + 72);
        v41 = *(unsigned __int8 *)(a1 + 80);
        v42 = *(unsigned __int8 *)(v40 + 25);
        v190 = v38;
        LODWORD(v189) = v39;
        if (v41 == 1)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 200))(v40)
            && (*(_BYTE *)(v40 + 25) & 0x7E) == 4)
          {
            JSC::BinaryOpNode::emitStrcat(*(_QWORD *)(v40 + 40), *(_QWORD *)(v40 + 48), a2, (uint64_t)v37, (uint64_t)v37, 0);
LABEL_23:
            if (v38 == v22)
              v59 = 1;
            else
              v59 = v39;
            v60 = v191;
            if ((v59 & 1) == 0)
              JSC::BytecodeGenerator::emitMove(a2, v22, (uint64_t)v37, v54, v55, v56, v57, v58);
            if ((*(_BYTE *)(a2 + 104) & 2) != 0)
            {
              v171 = v22[1];
              v172 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
              JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v171, 0, 2, 0, v172, v173, v174);
              v175 = *(_DWORD *)(a1 + 44);
              v176 = *(_DWORD *)(a2 + 12) - 1;
              v177 = *(_QWORD *)(a2 + 24);
              HIDWORD(v197) = *(_DWORD *)(a1 + 56) - 1;
              v198 = v176;
              LODWORD(v197) = v175;
              WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v177 + 232), &v198, &v197, (uint64_t)v196);
            }
            if (v38 == v60)
            {
              v61 = 0;
            }
            else
            {
              v61 = v37;
              if (v60)
              {
                v61 = v37;
                if (v37 != v60)
                {
                  JSC::BytecodeGenerator::emitMove(a2, v60, (uint64_t)v37, v54, v55, v56, v57, v58);
                  v61 = v60;
                }
              }
            }
            if (v37)
              --*v37;
            goto LABEL_36;
          }
          v43 = 157;
        }
        else
        {
          v43 = 158;
          switch(v41)
          {
            case 2:
              v43 = 160;
              break;
            case 3:
              break;
            case 4:
              v43 = 159;
              break;
            case 7:
              v43 = 161;
              break;
            case 8:
              v43 = 163;
              break;
            case 9:
              v43 = 162;
              break;
            case 10:
              v43 = 154;
              break;
            case 11:
              v43 = 155;
              break;
            case 15:
              v43 = 164;
              break;
            case 16:
              v43 = 165;
              break;
            case 17:
              v43 = 156;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198279B94);
          }
        }
        v44 = (v42 << 8) | 0x7E;
        v45 = *(_BYTE *)(a2 + 709);
        v46 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v188 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          v47 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (*(_BYTE *)(v40 + 24))
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v40 + 8, v32, v33, v34, v35, v36);
          v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v40 + 16))(v40, a2, 0);
        }
        *(_BYTE *)(a2 + 710) = v46;
        *(_BYTE *)(a2 + 709) = v45;
        v51 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v43, (uint64_t)v37, (uint64_t)v37, v47, v44, v48, v49, v50);
        v38 = v190;
        LOBYTE(v39) = v189;
        if (v41 == 17)
          JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(a2, v51, *(_DWORD *)(v51 + 4), v54, v55, v56, v57, v58);
        goto LABEL_23;
      }
      v120 = *(_QWORD *)(a1 + 72);
      v121 = *(unsigned __int8 *)(a1 + 80);
      v122 = *(unsigned __int8 *)(v120 + 25);
      if (v121 == 1)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v120 + 200))(*(_QWORD *)(a1 + 72))
          && (*(_BYTE *)(v120 + 25) & 0x7E) == 4)
        {
          v61 = (int *)JSC::BinaryOpNode::emitStrcat(*(_QWORD *)(v120 + 40), *(_QWORD *)(v120 + 48), a2, (uint64_t)v22, (uint64_t)v22, 0);
LABEL_103:
          if ((*(_BYTE *)(a2 + 104) & 2) != 0 && v61)
          {
            v178 = v61[1];
            v179 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
            JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v178, 0, 2, 0, v179, v180, v181);
            v182 = *(_DWORD *)(a1 + 44);
            v183 = *(_DWORD *)(a2 + 12) - 1;
            v184 = *(_QWORD *)(a2 + 24);
            HIDWORD(v197) = *(_DWORD *)(a1 + 56) - 1;
            v198 = v183;
            LODWORD(v197) = v182;
            WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v184 + 232), &v198, &v197, (uint64_t)v196);
          }
          if ((int *)(a2 + 208) == a3)
          {
            v61 = 0;
          }
          else if (a3 && v61 != a3)
          {
            JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v61, v54, v55, v56, v57, v58);
            v61 = a3;
          }
          goto LABEL_36;
        }
        v123 = 157;
      }
      else
      {
        v123 = 158;
        switch(*(_BYTE *)(a1 + 80))
        {
          case 2:
            v123 = 160;
            break;
          case 3:
            break;
          case 4:
            v123 = 159;
            break;
          case 7:
            v123 = 161;
            break;
          case 8:
            v123 = 163;
            break;
          case 9:
            v123 = 162;
            break;
          case 0xA:
            v123 = 154;
            break;
          case 0xB:
            v123 = 155;
            break;
          case 0xF:
            v123 = 164;
            break;
          case 0x10:
            v123 = 165;
            break;
          case 0x11:
            v123 = 156;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198279C3CLL);
        }
      }
      v124 = (v122 << 8) | 0x7E;
      v125 = *(_BYTE *)(a2 + 709);
      v126 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v188 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v127 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (*(_BYTE *)(v120 + 24))
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v120 + 8, v25, v26, v27, v28, v29);
        v127 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v120 + 16))(v120, a2, 0);
      }
      *(_BYTE *)(a2 + 710) = v126;
      *(_BYTE *)(a2 + 709) = v125;
      v131 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v123, (uint64_t)v22, (uint64_t)v22, v127, v124, v128, v129, v130);
      v61 = (int *)v131;
      if (v121 == 17)
        JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(a2, v131, *(_DWORD *)(v131 + 4), v54, v55, v56, v57, v58);
      goto LABEL_103;
    }
    v146 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, 0);
    v147 = *(JSC::ExpressionNode **)(a1 + 72);
    v148 = *(unsigned __int8 *)(a1 + 80);
    v149 = *((unsigned __int8 *)v147 + 25);
    if (v148 == 1)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v147 + 200))(*(_QWORD *)(a1 + 72))
        && (*((_BYTE *)v147 + 25) & 0x7E) == 4)
      {
        v151 = JSC::BinaryOpNode::emitStrcat(*((_QWORD *)v147 + 5), *((_QWORD *)v147 + 6), a2, v146, (uint64_t)v22, 0);
        JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v194, v195, v166, v167, v168, v169, v170);
LABEL_158:
        v61 = (int *)v151;
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v151, v11, a1 + 52);
        goto LABEL_36;
      }
      v150 = 157;
    }
    else
    {
      v150 = 158;
      switch(*(_BYTE *)(a1 + 80))
      {
        case 2:
          v150 = 160;
          break;
        case 3:
          break;
        case 4:
          v150 = 159;
          break;
        case 7:
          v150 = 161;
          break;
        case 8:
          v150 = 163;
          break;
        case 9:
          v150 = 162;
          break;
        case 0xA:
          v150 = 154;
          break;
        case 0xB:
          v150 = 155;
          break;
        case 0xF:
          v150 = 164;
          break;
        case 0x10:
          v150 = 165;
          break;
        case 0x11:
          v150 = 156;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198279DACLL);
      }
    }
    v151 = JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, v147, v140, v141, v142, v143, v144, v145);
    if ((JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v194, v195, v152, v153, v154, v155, v156) & 1) == 0)
    {
      v160 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v150, v146, (uint64_t)v22, v151, (v149 << 8) | 0x7E, v157, v158, v159);
      v151 = v160;
      if (v148 == 17)
        JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(a2, v160, *(_DWORD *)(v160 + 4), v161, v162, v163, v164, v165);
    }
    goto LABEL_158;
  }
  v64 = v15 + v13;
  if (v14 != -1 || v64 != -1 || v16 != -1)
  {
    v67 = *(_DWORD *)(a1 + 44);
    if ((*(_DWORD *)(a1 + 40) & v67 & *(_DWORD *)(a1 + 48)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
    {
      v69 = *(_QWORD *)(a2 + 192);
      v70 = *(_DWORD *)(v69 + 176);
      v71 = v64 - v70;
      v72 = v16 >= v70;
      v73 = v16 - v70;
      if (!v72)
        v73 = 0;
      v72 = v71 >= v73;
      v74 = v71 - v73;
      if (v72)
        JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v71, v64 - v67, 0, (v14 + ~*(_DWORD *)(v69 + 184)) | (unint64_t)(v74 << 32));
    }
  }
  v75 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v192, v17, v18, v19, v20, v21);
  v76 = v75;
  if (v75)
    ++*v75;
  v189 = v11;
  v77 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v81 = JSC::BytecodeGenerator::emitGetFromScope(a2, v77, (uint64_t)v76, (unint64_t)v192, 0, v78, v79, v80);
  v86 = v81;
  if (v81)
    ++*v81;
  JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v192, (uint64_t)v81, 0, v82, v83, v84, v85);
  v87 = JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, (uint64_t)v86);
  v93 = *(_QWORD *)(a1 + 72);
  v94 = *(unsigned __int8 *)(a1 + 80);
  v95 = *(unsigned __int8 *)(v93 + 25);
  v96 = v194;
  v191 = (int *)v87;
  if (v94 == 1)
  {
    v97 = v87;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 200))(v93) && (*(_BYTE *)(v93 + 25) & 0x7E) == 4)
    {
      v61 = (int *)JSC::BinaryOpNode::emitStrcat(*(_QWORD *)(v93 + 40), *(_QWORD *)(v93 + 48), a2, v97, (uint64_t)v86, (_DWORD *)a1);
      if ((v96 & 2) != 0)
        JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v194, v195, v54, v55, v56, v57, v58);
      goto LABEL_83;
    }
    v98 = 157;
  }
  else
  {
    v98 = 158;
    switch(v94)
    {
      case 2:
        v98 = 160;
        break;
      case 3:
        break;
      case 4:
        v98 = 159;
        break;
      case 7:
        v98 = 161;
        break;
      case 8:
        v98 = 163;
        break;
      case 9:
        v98 = 162;
        break;
      case 10:
        v98 = 154;
        break;
      case 11:
        v98 = 155;
        break;
      case 15:
        v98 = 164;
        break;
      case 16:
        v98 = 165;
        break;
      case 17:
        v98 = 156;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198279C0CLL);
    }
  }
  LODWORD(v190) = v98;
  v99 = *(_BYTE *)(a2 + 709);
  v100 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v188 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v101 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v93 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v93 + 8, v88, v89, v90, v91, v92);
    v101 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v93 + 16))(v93, a2, 0);
  }
  v61 = (int *)v101;
  *(_BYTE *)(a2 + 710) = v100;
  *(_BYTE *)(a2 + 709) = v99;
  if ((v96 & 2) == 0
    || (JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v194, v195, v102, v103, v104, v57, v58) & 1) == 0)
  {
    v106 = (v95 << 8) | 0x7E;
    v108 = *(_DWORD *)(a1 + 28);
    v107 = *(_DWORD *)(a1 + 32);
    v109 = *(_DWORD *)(a1 + 36);
    v110 = (uint64_t)v191;
    if (v108 != -1 || v107 != -1 || v109 != -1)
    {
      v111 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v111 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v112 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v112 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v113 = *(_QWORD *)(a2 + 192);
          v114 = *(_DWORD *)(v113 + 176);
          v115 = v107 - v114;
          v72 = v109 >= v114;
          v116 = v109 - v114;
          if (!v72)
            v116 = 0;
          v72 = v115 >= v116;
          v117 = v115 - v116;
          if (v72)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v115, v107 - v111, v112 - v107, (v108 + ~*(_DWORD *)(v113 + 184)) | (unint64_t)(v117 << 32));
        }
      }
    }
    v118 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v190, v110, (uint64_t)v86, (uint64_t)v61, v106, v57, v58, v105);
    v61 = (int *)v118;
    if (v94 == 17)
    {
      JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(a2, v118, *(_DWORD *)(v118 + 4), v54, v55, v56, v57, v58);
      v119 = v61 == 0;
      goto LABEL_85;
    }
  }
LABEL_83:
  if (!v61)
  {
    v119 = 1;
    goto LABEL_86;
  }
  v119 = 0;
LABEL_85:
  ++*v61;
LABEL_86:
  if ((v194 & 2) == 0)
  {
    JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v76, (uint64_t)v192, (uint64_t)v61, *(_BYTE *)(a2 + 712) != 0, 2, v57, v58);
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v61, (uint64_t)v192, v189, a1 + 52, v185, v186, v187);
  }
  if (!v119)
    --*v61;
  if (v86)
    --*v86;
  if (v76)
    --*v76;
LABEL_36:
  v62 = v192[0];
  v192[0] = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  return v61;
}

int *JSC::ShortCircuitReadModifyResolveNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  WTF::StringImpl *v86;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _DWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  int *v209;
  _DWORD *v210;
  WTF::StringImpl *v211[2];
  _DWORD *v212;
  int v213;
  char v214;
  unint64_t v215;
  int v216;

  v11 = (_DWORD *)(a1 + 40);
  v12 = *(uint64_t **)(a1 + 64);
  v13 = *v12;
  if (*v12)
    LODWORD(v13) = *(_DWORD *)(v13 + 4);
  v14 = *(_DWORD *)(a1 + 48);
  v215 = *(unsigned int *)(a1 + 40) | ((unint64_t)(*(_DWORD *)(a1 + 44) + v13) << 32);
  v216 = v14;
  JSC::BytecodeGenerator::variable((uint64_t)v211, a2, (uint64_t)v12, 0, a5, a6, a7, a8);
  v19 = v213;
  v20 = (uint64_t)v212;
  if (v212)
  {
    ++*v212;
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v211, v20, 0, v15, v16, v17, v18);
    if ((v19 & 2) == 0)
    {
      v27 = *(unsigned __int8 *)(a1 + 81);
      v28 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), a2);
      v35 = *(_BYTE *)(a2 + 416) == 2 && v27 == 0;
      if (!v35 && (v28 & 1) == 0)
      {
        v36 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
        v43 = v36;
        if (v36)
        {
          ++*v36;
          v44 = (int *)(a2 + 208);
          v45 = v36 == (int *)v20;
          if (v36 != (int *)v20 && v44 != v36)
          {
            JSC::BytecodeGenerator::emitMove(a2, v36, v20, v38, v39, v40, v41, v42);
            v45 = 0;
          }
        }
        else
        {
          v45 = 0;
          v44 = (int *)(a2 + 208);
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v210, a2, v37, v38, v39, v40, v41, v42);
        v51 = *(unsigned __int8 *)(a1 + 80);
        v52 = v210;
        switch(v51)
        {
          case 12:
            v53 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            JSC::BytecodeGenerator::emitIsUndefinedOrNull(a2, v53, v43[1], v54, v55, v56, v57, v58);
            v59 = a2;
            v60 = v53;
LABEL_16:
            JSC::BytecodeGenerator::emitJumpIfFalse(v59, v60, (uint64_t)v52, v46, v47, v48, v49, v50);
            goto LABEL_17;
          case 13:
            JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v43, (uint64_t)v210, v46, v47, v48, v49, v50);
LABEL_17:
            JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v43, *(_QWORD *)(a1 + 72), v61, v62, v63, v64, v65);
            v71 = v44 == (int *)v20 || v45;
            if ((v71 & 1) == 0)
              JSC::BytecodeGenerator::emitMove(a2, (int *)v20, (uint64_t)v43, v66, v67, v68, v69, v70);
            JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v43, (uint64_t)v211, (uint64_t)v11, a1 + 52, v68, v69, v70);
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v52, v72, v73, v74, v75, v76, v77);
            if (v44 == a3)
            {
              v85 = 0;
            }
            else
            {
              v85 = v43;
              if (a3)
              {
                v85 = v43;
                if (v43 != a3)
                {
                  JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v43, v80, v81, v82, v83, v84);
                  v85 = a3;
                }
              }
            }
            --*v52;
            if (!v43)
              goto LABEL_28;
            goto LABEL_27;
          case 14:
            v59 = a2;
            v60 = (uint64_t)v43;
            goto LABEL_16;
        }
LABEL_90:
        __break(0xC471u);
        JUMPOUT(0x19827A354);
      }
      ++*(_DWORD *)v20;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v210, a2, v29, v30, v31, v32, v33, v34);
      v132 = *(unsigned __int8 *)(a1 + 80);
      v102 = v210;
      switch(v132)
      {
        case 12:
          v133 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          JSC::BytecodeGenerator::emitIsUndefinedOrNull(a2, v133, *(_DWORD *)(v20 + 4), v134, v135, v136, v137, v138);
          v139 = a2;
          v140 = v133;
          break;
        case 13:
          JSC::BytecodeGenerator::emitJumpIfTrue(a2, v20, (uint64_t)v210, v127, v128, v129, v130, v131);
          goto LABEL_46;
        case 14:
          v139 = a2;
          v140 = v20;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19827A3A8);
      }
      JSC::BytecodeGenerator::emitJumpIfFalse(v139, v140, (uint64_t)v102, v127, v128, v129, v130, v131);
LABEL_46:
      JSC::BytecodeGenerator::emitNode(a2, v20, *(_QWORD *)(a1 + 72), v141, v142, v143, v144, v145);
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v20, (uint64_t)v211, (uint64_t)v11, a1 + 52, v146, v147, v148);
LABEL_47:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v102, v121, v122, v123, v124, v125, v126);
      if ((int *)(a2 + 208) == a3)
      {
        v85 = 0;
      }
      else
      {
        v85 = (int *)v20;
        if (a3)
        {
          v85 = (int *)v20;
          if ((int *)v20 != a3)
          {
            JSC::BytecodeGenerator::emitMove(a2, a3, v20, v80, v81, v82, v83, v84);
            v85 = a3;
          }
        }
      }
      --*v102;
      v43 = (int *)v20;
LABEL_27:
      --*v43;
LABEL_28:
      --*(_DWORD *)v20;
      goto LABEL_29;
    }
    ++*(_DWORD *)v20;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v210, a2, v21, v22, v23, v24, v25, v26);
    v101 = *(unsigned __int8 *)(a1 + 80);
    v102 = v210;
    switch(v101)
    {
      case 12:
        v103 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        JSC::BytecodeGenerator::emitIsUndefinedOrNull(a2, v103, *(_DWORD *)(v20 + 4), v104, v105, v106, v107, v108);
        v109 = a2;
        v110 = v103;
        break;
      case 13:
        JSC::BytecodeGenerator::emitJumpIfTrue(a2, v20, (uint64_t)v210, v96, v97, v98, v99, v100);
LABEL_41:
        JSC::BytecodeGenerator::emitNode(a2, v20, *(_QWORD *)(a1 + 72), v111, v112, v113, v114, v115);
        if ((JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v213, v214, v116, v117, v118, v119, v120) & 1) == 0)
          JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v20, (uint64_t)v11, a1 + 52);
        goto LABEL_47;
      case 14:
        v109 = a2;
        v110 = v20;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19827A388);
    }
    JSC::BytecodeGenerator::emitJumpIfFalse(v109, v110, (uint64_t)v102, v96, v97, v98, v99, v100);
    goto LABEL_41;
  }
  JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, &v215, v11, &v215);
  v154 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v211, v149, v150, v151, v152, v153);
  v20 = (uint64_t)v154;
  if (v154)
    ++*v154;
  v155 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v159 = v155;
  if (v155)
    ++*v155;
  JSC::BytecodeGenerator::emitGetFromScope(a2, v155, v20, (unint64_t)v211, 0, v156, v157, v158);
  JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v211, (uint64_t)v159, 0, v160, v161, v162, v163);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v210, a2, v164, v165, v166, v167, v168, v169);
  v175 = *(unsigned __int8 *)(a1 + 80);
  v176 = v210;
  if (v175 == 12)
  {
    v177 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitIsUndefinedOrNull(a2, v177, v159[1], v178, v179, v180, v181, v182);
    v183 = a2;
    v184 = v177;
LABEL_71:
    JSC::BytecodeGenerator::emitJumpIfFalse(v183, v184, (uint64_t)v176, v170, v171, v172, v173, v174);
    goto LABEL_72;
  }
  if (v175 != 13)
  {
    if (v175 != 14)
      goto LABEL_90;
    v183 = a2;
    v184 = (uint64_t)v159;
    goto LABEL_71;
  }
  JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v159, (uint64_t)v210, v170, v171, v172, v173, v174);
LABEL_72:
  v190 = (_DWORD *)(a1 + 28);
  JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v159, *(_QWORD *)(a1 + 72), v185, v186, v187, v188, v189);
  if ((v19 & 2) != 0)
  {
    if ((JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v213, v214, v191, v192, v193, v194, v195) & 1) == 0)
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 28), v11, (_DWORD *)(a1 + 52));
  }
  else
  {
    v196 = (_DWORD *)(a1 + 52);
    JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v190, v11, v196);
    JSC::BytecodeGenerator::emitPutToScope(a2, v20, (uint64_t)v211, (uint64_t)v159, *(_BYTE *)(a2 + 712) != 0, 2, v197, v198);
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v159, (uint64_t)v211, (uint64_t)v11, (uint64_t)v196, v199, v200, v201);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v176, v202, v203, v204, v205, v206, v207);
  v208 = (int *)JSC::BytecodeGenerator::finalDestination(a2, (uint64_t)a3, (uint64_t)v159);
  if ((int *)(a2 + 208) == v208)
  {
    v85 = 0;
  }
  else
  {
    v209 = v208;
    v85 = v159;
    if (v208)
    {
      v85 = v159;
      if (v208 != v159)
      {
        JSC::BytecodeGenerator::emitMove(a2, v208, (uint64_t)v159, v80, v81, v82, v83, v84);
        v85 = v209;
      }
    }
  }
  --*v176;
  if (v159)
    --*v159;
  if (v20)
    goto LABEL_28;
LABEL_29:
  v86 = v211[0];
  v211[0] = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  return v85;
}

int *JSC::AssignResolveNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int *v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  _BOOL4 v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int *v51;
  _BYTE *v52;
  char v53;
  char v54;
  int *v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  _BYTE *v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149[2];
  int *v150;
  int v151;
  int v152;
  char v153;

  JSC::BytecodeGenerator::variable((uint64_t)v149, a2, *(_QWORD *)(a1 + 64), 0, a5, a6, a7, a8);
  v17 = v151;
  if ((v151 & 2) != 0)
  {
    v19 = (_BYTE *)(a1 + 80);
    v94 = *(unsigned __int8 *)(a1 + 80);
    v43 = v94 != 1;
    v18 = v150;
    if (v150)
    {
      if (v94 != 1)
      {
        v27 = (int *)JSC::BytecodeGenerator::emitNode(a2, (uint64_t)a3, *(_QWORD *)(a1 + 72), v12, v13, v14, v15, v16);
        if (*(_BYTE *)(a1 + 80) == 2)
        {
          JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v149, (uint64_t)v18, 0, v96, v97, v98, v99);
          v17 = v151;
        }
        JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v17, v153, v95, v96, v97, v98, v99);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v27, (uint64_t)v149, a1 + 40, a1 + 52, v100, v101, v102);
LABEL_13:
        if (*(unsigned __int8 *)(a1 + 80) <= 1u)
        {
          v35 = v149[0];
          if (v149[0])
            *(_DWORD *)v149[0] += 2;
          v36 = *(unsigned int *)(a2 + 156);
          while (v36)
          {
            --v36;
            v37 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * v36);
            if (v37)
            {
              v38 = *((_DWORD *)v35 + 4);
              if ((v38 & 0x20) != 0)
                v38 = *((_DWORD *)v35 + 8);
              v39 = *(_DWORD *)(v37 - 8);
              v40 = v39 & (v38 >> 8);
              v41 = *(WTF::StringImpl **)(v37 + 16 * v40);
              if (v41 != v35)
              {
                v111 = 1;
                while (v41)
                {
                  v40 = ((_DWORD)v40 + v111) & v39;
                  v41 = *(WTF::StringImpl **)(v37 + 16 * v40);
                  ++v111;
                  if (v41 == v35)
                    goto LABEL_22;
                }
                v40 = *(unsigned int *)(v37 - 4);
              }
LABEL_22:
              v42 = v37 + 16 * v40;
              v37 += 16 * *(unsigned int *)(v37 - 4);
            }
            else
            {
              v42 = 0;
            }
            if (v42 != v37)
            {
              if (*(_DWORD *)(v42 + 8) == 1)
                *(_DWORD *)(v42 + 8) = 0;
              break;
            }
          }
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
              WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
        }
        goto LABEL_79;
      }
      goto LABEL_5;
    }
  }
  else
  {
    v18 = v150;
    if (v150)
    {
      v19 = (_BYTE *)(a1 + 80);
      if (*(_BYTE *)(a1 + 80) == 2
        && JSC::BytecodeGenerator::needsTDZCheck(a2, (uint64_t)v149, v11, v12, v13, v14, v15, v16))
      {
LABEL_115:
        v121 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
        v127 = v121;
        if (v121)
          ++*v121;
        v128 = *(_BYTE **)(a1 + 72);
        v129 = *(_BYTE *)(a2 + 709);
        v130 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v148 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v128[24])
            JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v128 + 8), v122, v123, v124, v125, v126);
          (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v128 + 16))(v128, a2, v127);
        }
        *(_BYTE *)(a2 + 710) = v130;
        *(_BYTE *)(a2 + 709) = v129;
        if (*v19 == 2)
          JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v149, (uint64_t)v18, 0, v132, v133, v134, v135);
        if ((int *)(a2 + 208) != v18 && v18 != v127)
          JSC::BytecodeGenerator::emitMove(a2, v18, (uint64_t)v127, v131, v132, v133, v134, v135);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v18, (uint64_t)v149, a1 + 40, a1 + 52, v133, v134, v135);
        if ((int *)(a2 + 208) == a3)
        {
          v27 = 0;
        }
        else
        {
          v27 = v127;
          if (a3)
          {
            v27 = v127;
            if (v127 != a3)
            {
              JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v127, v30, v31, v32, v33, v34);
              v27 = a3;
            }
          }
        }
        if (v127)
          --*v127;
        goto LABEL_13;
      }
LABEL_5:
      if (!v152)
      {
        v20 = *(_QWORD *)(a1 + 72);
        v21 = *(_BYTE *)(a2 + 709);
        v22 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v148 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          v23 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (*(_BYTE *)(v20 + 24)
            && (*(_BYTE *)(a2 + 104) & 1) != 0
            && !*(_BYTE *)(a2 + 707)
            && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v20 + 8)
             || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v20 + 12)
             || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v20 + 16)
             || *(_DWORD *)(a2 + 748) != 5))
          {
            v136 = *(_QWORD *)(v20 + 8);
            *(_DWORD *)(a2 + 744) = *(_DWORD *)(v20 + 16);
            *(_QWORD *)(a2 + 736) = v136;
            *(_DWORD *)(a2 + 748) = 5;
            v137 = *(_DWORD *)(v20 + 8);
            v138 = *(_DWORD *)(v20 + 12);
            v139 = *(_DWORD *)(v20 + 16);
            if (v137 != -1 || v138 != -1 || v139 != -1)
            {
              v140 = *(_QWORD *)(a2 + 192);
              v141 = *(_DWORD *)(v140 + 176);
              v11 = v138 - v141;
              v142 = v139 - v141;
              if (v139 < v141)
                v142 = 0;
              v63 = v11 >= v142;
              v143 = v11 - v142;
              if (v63)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v11, 0, 0, (v137 + ~*(_DWORD *)(v140 + 184)) | (unint64_t)(v143 << 32));
            }
            JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v11, v12, v13, v14, v15, v16);
          }
          v23 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v20 + 16))(v20, a2, v18);
        }
        v27 = (int *)v23;
        *(_BYTE *)(a2 + 710) = v22;
        *(_BYTE *)(a2 + 709) = v21;
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v23, (uint64_t)v149, a1 + 40, a1 + 52, v24, v25, v26);
        if ((int *)(a2 + 208) == a3)
        {
          v27 = 0;
        }
        else if (a3 && v27 != a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v27, v30, v31, v32, v33, v34);
          v27 = a3;
        }
        goto LABEL_13;
      }
      goto LABEL_115;
    }
    v43 = 0;
  }
  if (!*(_BYTE *)(a2 + 712))
  {
    v77 = *(_DWORD *)(a1 + 28);
    v76 = *(_DWORD *)(a1 + 32);
    v78 = *(_DWORD *)(a1 + 36);
    if (v77 != -1 || v76 != -1 || v78 != -1)
    {
      v79 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v79 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v80 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v80 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v81 = *(_QWORD *)(a2 + 192);
          v82 = *(_DWORD *)(v81 + 176);
          v83 = v76 - v82;
          v63 = v78 >= v82;
          v84 = v78 - v82;
          if (!v63)
            v84 = 0;
          v63 = v83 >= v84;
          v85 = v83 - v84;
          if (v63)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v83, v76 - v79, v80 - v76, (v77 + ~*(_DWORD *)(v81 + 184)) | (unint64_t)(v85 << 32));
        }
      }
    }
  }
  v44 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v149, v12, v13, v14, v15, v16);
  v50 = v44;
  if (v44)
    ++*v44;
  if (*(_BYTE *)(a1 + 80) == 2)
    JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v149, 0, (uint64_t)v44, v46, v47, v48, v49);
  if ((int *)(a2 + 208) == a3)
    v51 = 0;
  else
    v51 = a3;
  v52 = *(_BYTE **)(a1 + 72);
  v53 = *(_BYTE *)(a2 + 709);
  v54 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v148 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v55 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v52[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v52 + 8), v45, v46, v47, v48, v49);
    v55 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v52 + 16))(v52, a2, v51);
  }
  v27 = v55;
  *(_BYTE *)(a2 + 710) = v54;
  *(_BYTE *)(a2 + 709) = v53;
  if (v55)
    ++*v55;
  if (!v43 || (JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v151, v153, v30, v31, v32, v33, v34) & 1) == 0)
  {
    v57 = *(_DWORD *)(a1 + 28);
    v56 = *(_DWORD *)(a1 + 32);
    v58 = *(_DWORD *)(a1 + 36);
    if (v57 != -1 || v56 != -1 || v58 != -1)
    {
      v59 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v59 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v60 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v60 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v61 = *(_QWORD *)(a2 + 192);
          v62 = *(_DWORD *)(v61 + 176);
          v29 = v56 - v62;
          v63 = v58 >= v62;
          v64 = v58 - v62;
          if (!v63)
            v64 = 0;
          v63 = v29 >= v64;
          v65 = v29 - v64;
          if (v63)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v29, v56 - v59, v60 - v56, (v57 + ~*(_DWORD *)(v61 + 184)) | (unint64_t)(v65 << 32));
        }
      }
    }
    if (!v43)
    {
      if (*(unsigned __int8 *)(a1 + 80) >= 2u)
        v144 = 2;
      else
        v144 = *(unsigned __int8 *)(a1 + 80);
      JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v50, (uint64_t)v149, (uint64_t)v27, *(_BYTE *)(a2 + 712) != 0, v144, v33, v34);
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v27, (uint64_t)v149, a1 + 40, a1 + 52, v145, v146, v147);
    }
    if (*(unsigned __int8 *)(a1 + 80) <= 1u)
    {
      v66 = v149[0];
      if (v149[0])
        *(_DWORD *)v149[0] += 2;
      v67 = *(unsigned int *)(a2 + 156);
      while (v67)
      {
        --v67;
        v68 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * v67);
        if (v68)
        {
          v69 = *((_DWORD *)v66 + 4);
          if ((v69 & 0x20) != 0)
            v69 = *((_DWORD *)v66 + 8);
          v70 = *(_DWORD *)(v68 - 8);
          v71 = v70 & (v69 >> 8);
          v72 = *(WTF::StringImpl **)(v68 + 16 * v71);
          if (v72 != v66)
          {
            v120 = 1;
            while (v72)
            {
              v71 = ((_DWORD)v71 + v120) & v70;
              v72 = *(WTF::StringImpl **)(v68 + 16 * v71);
              ++v120;
              if (v72 == v66)
                goto LABEL_68;
            }
            v71 = *(unsigned int *)(v68 - 4);
          }
LABEL_68:
          v73 = v68 + 16 * v71;
          v68 += 16 * *(unsigned int *)(v68 - 4);
        }
        else
        {
          v73 = 0;
        }
        if (v73 != v68)
        {
          if (*(_DWORD *)(v73 + 8) == 1)
            *(_DWORD *)(v73 + 8) = 0;
          break;
        }
      }
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
        {
          WTF::StringImpl::~StringImpl(v66, v28, v29, v30, v31, v32, v33, v34);
          WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
        }
        else
        {
          *(_DWORD *)v66 -= 2;
        }
      }
    }
  }
  if (v27)
    --*v27;
  if (v50)
    --*v50;
LABEL_79:
  v74 = v149[0];
  v149[0] = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  return v27;
}

int *JSC::AssignDotNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int *v25;
  int v26;
  _BYTE *v27;
  char v28;
  char v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  int *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int *result;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  _BYTE v73[4];
  int v74;
  _DWORD *v75[3];
  uint64_t v76;
  int v77;

  v6 = *(_BYTE **)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 96);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 72))(*(_QWORD *)(a1 + 88));
  v14 = *(_BYTE *)(a2 + 416) == 2 && v7 == 0;
  if (v14 || (v8 & 1) != 0)
  {
    v15 = *(_BYTE *)(a2 + 709);
    v16 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v73 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v17 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v6[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v6 + 8), v9, v10, v11, v12, v13);
      v17 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, a2, 0);
    }
    v23 = v17;
    *(_BYTE *)(a2 + 710) = v16;
    *(_BYTE *)(a2 + 709) = v15;
    if (v17)
      ++*v17;
  }
  else
  {
    v52 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v23 = v52;
    if (v52)
      ++*v52;
    v58 = *(_BYTE *)(a2 + 709);
    v59 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v73 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v6[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v6 + 8), v53, v54, v55, v56, v57);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v6 + 16))(v6, a2, v23);
    }
    *(_BYTE *)(a2 + 710) = v59;
    *(_BYTE *)(a2 + 709) = v58;
  }
  v24 = 0;
  v25 = (int *)(a2 + 208);
  v26 = 1;
  if (a3)
  {
    if (v25 != (int *)a3)
    {
      v24 = (_DWORD *)a3;
      if (*(_BYTE *)(a3 + 8)
        || (v24 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2)) != 0)
      {
        v26 = 0;
        ++*v24;
      }
    }
  }
  v27 = *(_BYTE **)(a1 + 88);
  v28 = *(_BYTE *)(a2 + 709);
  v29 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v73 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v30 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v27[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v27 + 8), v18, v19, v20, v21, v22);
    v30 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v27 + 16))(v27, a2, v24);
  }
  v31 = v30;
  *(_BYTE *)(a2 + 710) = v29;
  *(_BYTE *)(a2 + 709) = v28;
  if (v30)
    ++*v30;
  v33 = *(_DWORD *)(a1 + 52);
  v32 = *(_DWORD *)(a1 + 56);
  v34 = *(_DWORD *)(a1 + 60);
  if (v33 != -1 || v32 != -1 || v34 != -1)
  {
    v35 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v35 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v36 = *(_DWORD *)(a1 + 80);
      if ((*(_DWORD *)(a1 + 76) & v36 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v37 = *(_QWORD *)(a2 + 192);
        v38 = *(_DWORD *)(v37 + 176);
        v39 = v32 - v38;
        v40 = v34 >= v38;
        v41 = v34 - v38;
        if (!v40)
          v41 = 0;
        v40 = v39 >= v41;
        v42 = v39 - v41;
        if (v40)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v39, v32 - v35, v36 - v32, (v33 + ~*(_DWORD *)(v37 + 184)) | (unint64_t)(v42 << 32));
      }
    }
  }
  if (v25 != (int *)a3)
  {
    v60 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v31);
    if (v25 == v60)
    {
      v43 = 0;
      goto LABEL_71;
    }
    v43 = v60;
    if (v60 && v60 != v31)
    {
      JSC::BytecodeGenerator::emitMove(a2, v60, (uint64_t)v31, v61, v62, v63, v64, v65);
      goto LABEL_35;
    }
  }
  v43 = v31;
  if (v31)
  {
LABEL_35:
    v44 = 0;
    ++*v43;
    goto LABEL_36;
  }
LABEL_71:
  v44 = 1;
LABEL_36:
  v75[0] = 0;
  JSC::BaseDotNode::emitPutProperty(a1, a2, (uint64_t)v23, (uint64_t)v43, v75);
  if (v75[0])
    --*v75[0];
  if ((*(_BYTE *)(a2 + 104) & 2) != 0)
    v50 = v44;
  else
    v50 = 1;
  if ((v50 & 1) == 0)
  {
    v74 = v26;
    v26 = v43[1];
    v66 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    v67 = v26;
    LOBYTE(v26) = v74;
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v67, 0, 2, 0, v66, v68, v69);
    v70 = *(_DWORD *)(a1 + 68);
    v71 = *(_DWORD *)(a2 + 12) - 1;
    v72 = *(_QWORD *)(a2 + 24);
    HIDWORD(v76) = *(_DWORD *)(a1 + 80) - 1;
    v77 = v71;
    LODWORD(v76) = v70;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v72 + 232), &v77, &v76, (uint64_t)v75);
  }
  if (v25 == (int *)a3)
  {
    result = 0;
  }
  else
  {
    result = v43;
    if (a3)
    {
      result = v43;
      if (v43 != (int *)a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, (int *)a3, (uint64_t)v43, v45, v46, v47, v48, v49);
        result = (int *)a3;
      }
    }
  }
  if ((v44 & 1) == 0)
    --*v43;
  if (v31)
    --*v31;
  if ((v26 & 1) == 0)
    --*v24;
  if (v23)
    --*v23;
  return result;
}

_DWORD *JSC::ReadModifyDotNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *PropertyValue;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  _BYTE v91[28];
  uint64_t v92;
  int v93;

  v6 = *(_BYTE **)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 105) & 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
  v14 = *(_BYTE *)(a2 + 416) == 2 && v7 == 0;
  if (v14 || (v8 & 1) != 0)
  {
    v15 = *(_BYTE *)(a2 + 709);
    v16 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v88 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v17 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v6[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v6 + 8), v9, v10, v11, v12, v13);
      v17 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, a2, 0);
    }
    v18 = v17;
    *(_BYTE *)(a2 + 710) = v16;
    *(_BYTE *)(a2 + 709) = v15;
    if (v17)
      ++*v17;
  }
  else
  {
    v73 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v18 = v73;
    if (v73)
      ++*v73;
    v79 = *(_BYTE *)(a2 + 709);
    v80 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v88 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v6[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v6 + 8), v74, v75, v76, v77, v78);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v6 + 16))(v6, a2, v18);
    }
    *(_BYTE *)(a2 + 710) = v80;
    *(_BYTE *)(a2 + 709) = v79;
  }
  v19 = *(_DWORD *)(a1 + 52) - *(unsigned __int16 *)(a1 + 92);
  v20 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 88);
  v21 = *(_DWORD *)(a1 + 60) - *(unsigned __int16 *)(a1 + 94);
  if (v19 != -1 || v20 != -1 || v21 != -1)
  {
    v22 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v22 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v23 = *(_DWORD *)(a1 + 80) - *(unsigned __int16 *)(a1 + 90);
      if ((*(_DWORD *)(a1 + 76) & v23 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v24 = *(_QWORD *)(a2 + 192);
        v25 = *(_DWORD *)(v24 + 176);
        v26 = v20 - v25;
        v27 = v21 >= v25;
        v28 = v21 - v25;
        if (!v27)
          v28 = 0;
        v27 = v26 >= v28;
        v29 = v26 - v28;
        if (v27)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v26, v20 - v22, v23 - v20, (v19 + ~*(_DWORD *)(v24 + 184)) | (unint64_t)(v29 << 32));
      }
    }
  }
  v90 = 0;
  v30 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
  PropertyValue = JSC::BaseDotNode::emitGetPropertyValue(a1, a2, v30, (uint64_t)v18, &v90, v31, v32, v33);
  v35 = PropertyValue;
  if (PropertyValue)
    ++*PropertyValue;
  v36 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)PropertyValue);
  v42 = *(_QWORD *)(a1 + 96);
  v43 = *(unsigned __int8 *)(a1 + 104);
  v44 = *(unsigned __int8 *)(v42 + 25);
  v89 = v36;
  if (v43 == 1)
  {
    v45 = v36;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 200))(v42) && (*(_BYTE *)(v42 + 25) & 0x7E) == 4)
    {
      v60 = (_DWORD *)JSC::BinaryOpNode::emitStrcat(*(_QWORD *)(v42 + 40), *(_QWORD *)(v42 + 48), a2, v45, (uint64_t)v35, 0);
      goto LABEL_36;
    }
    v46 = 157;
  }
  else
  {
    v46 = 158;
    switch(v43)
    {
      case 2:
        v46 = 160;
        break;
      case 3:
        break;
      case 4:
        v46 = 159;
        break;
      case 7:
        v46 = 161;
        break;
      case 8:
        v46 = 163;
        break;
      case 9:
        v46 = 162;
        break;
      case 10:
        v46 = 154;
        break;
      case 11:
        v46 = 155;
        break;
      case 15:
        v46 = 164;
        break;
      case 16:
        v46 = 165;
        break;
      case 17:
        v46 = 156;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19827B8ACLL);
    }
  }
  v47 = (v44 << 8) | 0x7E;
  v48 = *(_BYTE *)(a2 + 709);
  v49 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v88 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v50 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v42 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v42 + 8, v37, v38, v39, v40, v41);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v42 + 16))(v42, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v49;
  *(_BYTE *)(a2 + 709) = v48;
  v54 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v46, v89, (uint64_t)v35, v50, v47, v51, v52, v53);
  v60 = (_DWORD *)v54;
  if (v43 == 17)
    JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(a2, v54, *(_DWORD *)(v54 + 4), v55, v56, v57, v58, v59);
LABEL_36:
  v62 = *(_DWORD *)(a1 + 52);
  v61 = *(_DWORD *)(a1 + 56);
  v63 = *(_DWORD *)(a1 + 60);
  if (v62 != -1 || v61 != -1 || v63 != -1)
  {
    v64 = *(_DWORD *)(a1 + 68);
    if (*(_DWORD *)(a1 + 64) != -1 || v64 != -1 || *(_DWORD *)(a1 + 72) != -1)
    {
      v65 = *(_DWORD *)(a1 + 80);
      if ((*(_DWORD *)(a1 + 76) & v65 & *(_DWORD *)(a1 + 84)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v66 = *(_QWORD *)(a2 + 192);
        v67 = *(_DWORD *)(v66 + 176);
        v68 = v61 - v67;
        v27 = v63 >= v67;
        v69 = v63 - v67;
        if (!v27)
          v69 = 0;
        v27 = v68 >= v69;
        v70 = v68 - v69;
        if (v27)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v68, v61 - v64, v65 - v61, (v62 + ~*(_DWORD *)(v66 + 184)) | (unint64_t)(v70 << 32));
      }
    }
  }
  JSC::BaseDotNode::emitPutProperty(a1, a2, (uint64_t)v18, (uint64_t)v60, &v90);
  if (v60)
  {
    v71 = (*v60)++;
    if ((*(_BYTE *)(a2 + 104) & 2) != 0)
    {
      v81 = v60[1];
      v82 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
      JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v81, 0, 2, 0, v82, v83, v84);
      v85 = *(_DWORD *)(a1 + 68);
      v86 = *(_DWORD *)(a2 + 12) - 1;
      v87 = *(_QWORD *)(a2 + 24);
      HIDWORD(v92) = *(_DWORD *)(a1 + 80) - 1;
      v93 = v86;
      LODWORD(v92) = v85;
      WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v87 + 232), &v93, &v92, (uint64_t)v91);
      v71 = *v60 - 1;
    }
    *v60 = v71;
  }
  if (v35)
    --*v35;
  if (v90)
    --*v90;
  if (v18)
    --*v18;
  return v60;
}

uint64_t JSC::ShortCircuitReadModifyDotNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *a2, int *a3)
{
  JSC::ExpressionNode *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  _DWORD *v76;

  v6 = *(JSC::ExpressionNode **)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 105) & 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
  v15 = *((_BYTE *)a2 + 416) == 2 && v7 == 0;
  if (v15 || (v8 & 1) != 0)
  {
    v16 = (_DWORD *)JSC::BytecodeGenerator::emitNode(a2, v6, v9, v10, v11, v12, v13, v14);
    v17 = v16;
    if (v16)
      ++*v16;
  }
  else
  {
    v64 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
    v17 = v64;
    if (v64)
      ++*v64;
    JSC::BytecodeGenerator::emitNode((uint64_t)a2, (uint64_t)v64, (uint64_t)v6, v65, v66, v67, v68, v69);
  }
  v76 = 0;
  v18 = (int *)JSC::BytecodeGenerator::tempDestination((uint64_t)a2, (uint64_t)a3);
  v19 = v18;
  if (v18)
    ++*v18;
  v20 = *(_DWORD *)(a1 + 60) - *(unsigned __int16 *)(a1 + 94);
  v74 = (*(_DWORD *)(a1 + 52) - *(unsigned __int16 *)(a1 + 92)) | ((unint64_t)(*(_DWORD *)(a1 + 56)
                                                                                                  - *(unsigned __int16 *)(a1 + 88)) << 32);
  v75 = v20;
  v21 = *(_DWORD *)(a1 + 72);
  v72 = *(_QWORD *)(a1 + 64);
  v73 = v21;
  v22 = *(_DWORD *)(a1 + 84);
  v70 = *(unsigned int *)(a1 + 76) | ((unint64_t)(*(_DWORD *)(a1 + 80)
                                                       - *(unsigned __int16 *)(a1 + 90)) << 32);
  v71 = v22;
  JSC::BytecodeGenerator::emitExpressionInfo(a2, &v74, &v72, &v70);
  JSC::BaseDotNode::emitGetPropertyValue(a1, (uint64_t)a2, v19, (uint64_t)v17, &v76, v23, v24, v25);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v74, (uint64_t)a2, v26, v27, v28, v29, v30, v31);
  v37 = *(unsigned __int8 *)(a1 + 104);
  v38 = (_DWORD *)v74;
  switch(v37)
  {
    case 12:
      v39 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
      JSC::BytecodeGenerator::emitIsUndefinedOrNull((uint64_t)a2, v39, v19[1], v40, v41, v42, v43, v44);
      v45 = (uint64_t)a2;
      v46 = v39;
      break;
    case 13:
      JSC::BytecodeGenerator::emitJumpIfTrue((uint64_t)a2, (uint64_t)v19, v74, v32, v33, v34, v35, v36);
      goto LABEL_13;
    case 14:
      v45 = (uint64_t)a2;
      v46 = (uint64_t)v19;
      break;
    default:
      result = 3742;
      __break(0xC471u);
      return result;
  }
  JSC::BytecodeGenerator::emitJumpIfFalse(v45, v46, (uint64_t)v38, v32, v33, v34, v35, v36);
LABEL_13:
  JSC::BytecodeGenerator::emitNode((uint64_t)a2, (uint64_t)v19, *(_QWORD *)(a1 + 96), v47, v48, v49, v50, v51);
  JSC::BytecodeGenerator::emitExpressionInfo(a2, (_DWORD *)(a1 + 52), (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 76));
  JSC::BaseDotNode::emitPutProperty(a1, (uint64_t)a2, (uint64_t)v17, (uint64_t)v19, &v76);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v19, a1 + 64, a1 + 76);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel((uint64_t)a2, (uint64_t)v38, v52, v53, v54, v55, v56, v57);
  if ((int *)((char *)a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = (uint64_t)v19;
    if (a3)
    {
      result = (uint64_t)v19;
      if (v19 != a3)
      {
        JSC::BytecodeGenerator::emitMove((uint64_t)a2, a3, (uint64_t)v19, v58, v59, v60, v61, v62);
        result = (uint64_t)a3;
      }
    }
  }
  --*v38;
  if (v19)
    --*v19;
  if (v76)
    --*v76;
  if (v17)
    --*v17;
  return result;
}

uint64_t JSC::AssignErrorNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 28), a2, "Left side of assignment is not a reference.", 0x2CuLL, a3, a6, a7, a8);
}

uint64_t JSC::AssignBracketNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  _BYTE *v38;
  char v39;
  char v40;
  int *v41;
  JSC::ExpressionNode *v42;
  int *v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int isNonIndexStringElement;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  _BYTE v120[12];
  int v121;
  int *v122;
  WTF::StringImpl *v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  int v127;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72)))
  {
    JSC::BytecodeGenerator::variable((uint64_t)&v123, a2, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32), 0, v6, v7, v8, v9);
    if (v124 == 2)
    {
      v79 = 8 * *(unsigned int *)(a2 + 476) - 8;
      while (v79 != -8)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 464) + v79);
        v79 -= 8;
        if (*(_QWORD *)(v10 + 8) == v125)
          goto LABEL_71;
      }
    }
    v10 = 0;
LABEL_71:
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
      {
        WTF::StringImpl::~StringImpl(v123, v72, v73, v74, v75, v76, v77, v78);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *(_DWORD *)v123 -= 2;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_BYTE *)(a1 + 88) & 3;
  v12 = *(_BYTE **)(a1 + 64);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), a2);
  if (v13)
    LOBYTE(v13) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80), a2);
  v19 = *(_BYTE *)(a2 + 416) == 2 && v11 == 0;
  if (v19 || (v13 & 1) != 0)
  {
    v20 = *(_BYTE *)(a2 + 709);
    v21 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v120 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v12[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v12 + 8), v14, v15, v16, v17, v18);
      v22 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, a2, 0);
    }
    v23 = v22;
    *(_BYTE *)(a2 + 710) = v21;
    *(_BYTE *)(a2 + 709) = v20;
    if (v22)
      ++*v22;
  }
  else
  {
    v81 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v23 = v81;
    if (v81)
      ++*v81;
    v87 = *(_BYTE *)(a2 + 709);
    v88 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v120 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v12[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v12 + 8), v82, v83, v84, v85, v86);
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v12 + 16))(v12, a2, v23);
    }
    *(_BYTE *)(a2 + 710) = v88;
    *(_BYTE *)(a2 + 709) = v87;
  }
  v24 = *(_BYTE *)(a1 + 88) & 2;
  v25 = *(_QWORD *)(a1 + 72);
  v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80), a2);
  v27 = *(_BYTE *)(a2 + 416) == 2 && v24 == 0;
  if (v27 || (v26 & 1) != 0)
  {
    v80 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v25);
    v29 = v80;
    if (v80)
      ++*v80;
  }
  else
  {
    v28 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v29 = v28;
    if (v28)
      ++*v28;
    JSC::BytecodeGenerator::emitNodeForProperty(a2, v28, v25);
  }
  v35 = 0;
  v36 = 1;
  v122 = (int *)(a2 + 208);
  if (a3 && a2 + 208 != a3)
  {
    v35 = (_DWORD *)a3;
    if (*(_BYTE *)(a3 + 8)
      || (v35 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2)) != 0)
    {
      v36 = 0;
      ++*v35;
    }
    else
    {
      v36 = 1;
    }
  }
  v121 = v36;
  v37 = v10;
  v38 = *(_BYTE **)(a1 + 80);
  v39 = *(_BYTE *)(a2 + 709);
  v40 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v120 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v41 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v38[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v38 + 8), v30, v31, v32, v33, v34);
    v41 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v38 + 16))(v38, a2, v35);
  }
  v43 = v41;
  *(_BYTE *)(a2 + 710) = v40;
  *(_BYTE *)(a2 + 709) = v39;
  if (v41)
    ++*v41;
  v45 = *(_DWORD *)(a1 + 28);
  v44 = *(_DWORD *)(a1 + 32);
  v46 = *(_DWORD *)(a1 + 36);
  if (v45 != -1 || v44 != -1 || v46 != -1)
  {
    v47 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v47 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v48 = *(_DWORD *)(a1 + 56);
      if ((*(_DWORD *)(a1 + 52) & v48 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v49 = *(_QWORD *)(a2 + 192);
        v50 = *(_DWORD *)(v49 + 176);
        v51 = v44 - v50;
        v52 = v46 >= v50;
        v53 = v46 - v50;
        if (!v52)
          v53 = 0;
        v52 = v51 >= v53;
        v54 = v51 - v53;
        if (v52)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v51, v44 - v47, v48 - v44, (v45 + ~*(_DWORD *)(v49 + 184)) | (unint64_t)(v54 << 32));
      }
    }
  }
  v55 = (uint64_t)v43;
  if (v122 != (int *)a3)
  {
    v89 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)v43);
    if (v122 == v89)
    {
      v55 = 0;
    }
    else
    {
      v95 = v89;
      v55 = (uint64_t)v43;
      if (v89)
      {
        v55 = (uint64_t)v43;
        if (v89 != v43)
        {
          JSC::BytecodeGenerator::emitMove(a2, v89, (uint64_t)v43, v90, v91, v92, v93, v94);
          v55 = (uint64_t)v95;
        }
      }
    }
  }
  isNonIndexStringElement = JSC::isNonIndexStringElement(*(JSC **)(a1 + 72), v42);
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64));
  if (isNonIndexStringElement)
  {
    if (!v57)
    {
      v104 = JSC::BytecodeGenerator::addConstant(a2, *(WTF::AtomStringImpl **)(*(_QWORD *)(a1 + 72) + 32), v59, v60, v61, v62, v63, v64);
      JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a2 + 688), v23[1], v104);
      JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, (void *)v23[1], v104, *(unsigned int *)(v55 + 4), (unint64_t)*(unsigned __int8 *)(a2 + 712) << 8, v105, v106, v107);
      goto LABEL_50;
    }
    v108 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v58, v59, v60, v61, v62, v63, v64);
    ++*v108;
    JSC::BytecodeGenerator::emitPutById(a2, (uint64_t)v23, (uint64_t)v108, *(WTF::AtomStringImpl **)(*(_QWORD *)(a1 + 72) + 32), v55, v110, v111, v112);
LABEL_102:
    --*v108;
    goto LABEL_50;
  }
  if (v57)
  {
    v108 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v58, v59, v60, v61, v62, v63, v64);
    v109 = v108[1];
    ++*v108;
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v23[1], v109, v29[1], *(_DWORD *)(v55 + 4), *(_BYTE *)(a2 + 712));
    goto LABEL_102;
  }
  if (v37)
    JSC::BytecodeGenerator::emitEnumeratorPutByVal(a2, v37, v23[1], (uint64_t)v29, v55, v62, v63, v64);
  else
    JSC::BytecodeGenerator::emitPutByVal(a2, (uint64_t)v23, (uint64_t)v29, v55, v61, v62, v63, v64);
LABEL_50:
  v70 = v121;
  if ((*(_BYTE *)(a2 + 104) & 2) != 0 && v55)
  {
    v113 = *(_DWORD *)(v55 + 4);
    v114 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v113, 0, 2, 0, v114, v115, v116);
    v117 = *(_DWORD *)(a1 + 44);
    v118 = *(_DWORD *)(a2 + 12) - 1;
    v119 = *(_QWORD *)(a2 + 24);
    HIDWORD(v126) = *(_DWORD *)(a1 + 56) - 1;
    v127 = v118;
    LODWORD(v126) = v117;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v119 + 232), &v127, &v126, (uint64_t)&v123);
  }
  if (v122 == (int *)a3)
  {
    a3 = 0;
  }
  else if (!a3 || v55 == a3)
  {
    a3 = v55;
  }
  else
  {
    JSC::BytecodeGenerator::emitMove(a2, (int *)a3, v55, v65, v66, v67, v68, v69);
  }
  if (v43)
    --*v43;
  if ((v70 & 1) == 0)
    --*v35;
  if (v29)
    --*v29;
  if (v23)
    --*v23;
  return a3;
}

uint64_t JSC::ReadModifyBracketNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  int *v23;
  int *v24;
  _DWORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _BYTE v135[28];
  uint64_t v136;
  int v137;

  v6 = *(_BYTE *)(a1 + 97) & 3;
  v7 = *(_BYTE **)(a1 + 72);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
  if (v8)
    LOBYTE(v8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 72))(*(_QWORD *)(a1 + 88), a2);
  v14 = *(_BYTE *)(a2 + 416) == 2 && v6 == 0;
  if (v14 || (v8 & 1) != 0)
  {
    v15 = *(_BYTE *)(a2 + 709);
    v16 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v132 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v17 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v7[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v7 + 8), v9, v10, v11, v12, v13);
      v17 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a2, 0);
    }
    v18 = (uint64_t)v17;
    *(_BYTE *)(a2 + 710) = v16;
    *(_BYTE *)(a2 + 709) = v15;
    if (v17)
      ++*v17;
  }
  else
  {
    v109 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v18 = (uint64_t)v109;
    if (v109)
      ++*v109;
    v115 = *(_BYTE *)(a2 + 709);
    v116 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v132 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v7[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v7 + 8), v110, v111, v112, v113, v114);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, v18);
    }
    *(_BYTE *)(a2 + 710) = v116;
    *(_BYTE *)(a2 + 709) = v115;
  }
  v19 = *(_BYTE *)(a1 + 97) & 2;
  v20 = *(_QWORD *)(a1 + 80);
  v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 72))(*(_QWORD *)(a1 + 88), a2);
  v22 = *(_BYTE *)(a2 + 416) == 2 && v19 == 0;
  if (v22 || (v21 & 1) != 0)
  {
    v108 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v20);
    v24 = v108;
    if (v108)
      ++*v108;
  }
  else
  {
    v23 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v24 = v23;
    if (v23)
      ++*v23;
    JSC::BytecodeGenerator::emitNodeForProperty(a2, v23, v20);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80)) & 1) != 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    v25 = v24;
  }
  else
  {
    JSC::BytecodeGenerator::emitRequireObjectCoercible(a2, v18, "Cannot access property of undefined or null", 0x2CuLL, v92, v93, v94, v95);
    v25 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v96 = v25[1];
    v97 = v24[1];
    if ((JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v96, v97, v98, v99, v100, v101, v102) & 1) == 0&& (JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v96, v97, v103, v104, v105, v106, v107) & 1) == 0)
    {
      JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v96, v97, v117, v118, v119, v120, v121);
    }
    ++*v25;
    --*v24;
  }
  v26 = *(_DWORD *)(a1 + 28) - *(unsigned __int16 *)(a1 + 68);
  v27 = *(_DWORD *)(a1 + 32) - *(unsigned __int16 *)(a1 + 64);
  v28 = *(_DWORD *)(a1 + 36) - *(unsigned __int16 *)(a1 + 70);
  if (v26 != -1 || v27 != -1 || v28 != -1)
  {
    v29 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v29 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v30 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 66);
      if ((*(_DWORD *)(a1 + 52) & v30 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v31 = *(_QWORD *)(a2 + 192);
        v32 = *(_DWORD *)(v31 + 176);
        v33 = v27 - v32;
        v34 = v28 >= v32;
        v35 = v28 - v32;
        if (!v34)
          v35 = 0;
        v34 = v33 >= v35;
        v36 = v33 - v35;
        if (v34)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v33, v27 - v29, v30 - v27, (v26 + ~*(_DWORD *)(v31 + 184)) | (unint64_t)(v36 << 32));
      }
    }
  }
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72));
  v134 = (_DWORD *)v18;
  if (!v37)
  {
    v45 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
    JSC::BytecodeGenerator::emitGetByVal(a2, v45, v18, (uint64_t)v25, v46, v47, v48, v49);
    v50 = 0;
    v51 = 0;
    if (!v45)
      goto LABEL_40;
    goto LABEL_39;
  }
  v50 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v38, v39, v40, v41, v42, v43, v44);
  ++*v50;
  v45 = (_DWORD *)JSC::BytecodeGenerator::tempDestination(a2, a3);
  JSC::BytecodeGenerator::emitGetByVal(a2, v45, v18, (uint64_t)v50, (uint64_t)v25, v122, v123, v124);
  if (v45)
  {
LABEL_39:
    ++*v45;
    v51 = v45;
    goto LABEL_40;
  }
  v51 = 0;
LABEL_40:
  v57 = JSC::BytecodeGenerator::finalDestination(a2, a3, (uint64_t)v51);
  v58 = *(_QWORD *)(a1 + 88);
  v59 = *(unsigned __int8 *)(a1 + 96);
  v60 = *(unsigned __int8 *)(v58 + 25);
  v132 = v50;
  v133 = v25;
  if (v59 == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 200))(v58) && (*(_BYTE *)(v58 + 25) & 0x7E) == 4)
    {
      v75 = JSC::BinaryOpNode::emitStrcat(*(_QWORD *)(v58 + 40), *(_QWORD *)(v58 + 48), a2, v57, (uint64_t)v51, 0);
      goto LABEL_50;
    }
    v61 = 157;
  }
  else
  {
    v61 = 158;
    switch(v59)
    {
      case 2:
        v61 = 160;
        break;
      case 3:
        break;
      case 4:
        v61 = 159;
        break;
      case 7:
        v61 = 161;
        break;
      case 8:
        v61 = 163;
        break;
      case 9:
        v61 = 162;
        break;
      case 10:
        v61 = 154;
        break;
      case 11:
        v61 = 155;
        break;
      case 15:
        v61 = 164;
        break;
      case 16:
        v61 = 165;
        break;
      case 17:
        v61 = 156;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19827CA8CLL);
    }
  }
  v62 = (v60 << 8) | 0x7E;
  v63 = *(_BYTE *)(a2 + 709);
  v64 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v132 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v65 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v58 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v58 + 8, v52, v53, v54, v55, v56);
    v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v64;
  *(_BYTE *)(a2 + 709) = v63;
  v69 = JSC::BytecodeGenerator::emitBinaryOp(a2, (WTF::AtomStringImpl *)v61, v57, (uint64_t)v51, v65, v62, v66, v67, v68);
  v75 = v69;
  if (v59 == 17)
    JSC::BytecodeGenerator::emitUnaryOp<JSC::OpUnsigned,void>(a2, v69, *(_DWORD *)(v69 + 4), v70, v71, v72, v73, v74);
  v50 = v132;
  v25 = v133;
LABEL_50:
  v76 = v134;
  v78 = *(_DWORD *)(a1 + 28);
  v77 = *(_DWORD *)(a1 + 32);
  v79 = *(_DWORD *)(a1 + 36);
  if (v78 != -1 || v77 != -1 || v79 != -1)
  {
    v80 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v80 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v81 = *(_DWORD *)(a1 + 56);
      if ((*(_DWORD *)(a1 + 52) & v81 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v82 = *(_QWORD *)(a2 + 192);
        v83 = *(_DWORD *)(v82 + 176);
        v84 = v77 - v83;
        v34 = v79 >= v83;
        v85 = v79 - v83;
        if (!v34)
          v85 = 0;
        v34 = v84 >= v85;
        v86 = v84 - v85;
        if (v34)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v84, v77 - v80, v81 - v77, (v78 + ~*(_DWORD *)(v82 + 184)) | (unint64_t)(v86 << 32));
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72)))
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v76[1], v50[1], v25[1], *(_DWORD *)(v75 + 4), *(_BYTE *)(a2 + 712));
  else
    JSC::BytecodeGenerator::emitPutByVal(a2, (uint64_t)v76, (uint64_t)v25, v75, v87, v88, v89, v90);
  if ((*(_BYTE *)(a2 + 104) & 2) != 0 && v75)
  {
    v125 = *(_DWORD *)(v75 + 4);
    v126 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v125, 0, 2, 0, v126, v127, v128);
    v129 = *(_DWORD *)(a1 + 44);
    v130 = *(_DWORD *)(a2 + 12) - 1;
    v131 = *(_QWORD *)(a2 + 24);
    HIDWORD(v136) = *(_DWORD *)(a1 + 56) - 1;
    v137 = v130;
    LODWORD(v136) = v129;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v131 + 232), &v137, &v136, (uint64_t)v135);
  }
  if (v50)
    --*v50;
  if (v51)
    --*v51;
  if (v25)
    --*v25;
  if (v76)
    --*v76;
  return v75;
}

int *JSC::ShortCircuitReadModifyBracketNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  char v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  int *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int *result;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  _DWORD v169[7];
  uint64_t v170;
  int v171;

  v6 = *(_BYTE *)(a1 + 97) & 3;
  v7 = *(_QWORD *)(a1 + 72);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 72))(*(_QWORD *)(a1 + 80));
  if (v8)
    LOBYTE(v8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 72))(*(_QWORD *)(a1 + 88), a2);
  v15 = *(_BYTE *)(a2 + 416) == 2 && v6 == 0;
  if (v15 || (v8 & 1) != 0)
  {
    v16 = *(_BYTE *)(a2 + 709);
    v17 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v166 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v18 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(v7 + 24)
        && (*(_BYTE *)(a2 + 104) & 1) != 0
        && !*(_BYTE *)(a2 + 707)
        && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v7 + 8)
         || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v7 + 12)
         || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v7 + 16)
         || *(_DWORD *)(a2 + 748) != 5))
      {
        v137 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v7 + 16);
        *(_QWORD *)(a2 + 736) = v137;
        *(_DWORD *)(a2 + 748) = 5;
        v138 = *(_DWORD *)(v7 + 8);
        v139 = *(_DWORD *)(v7 + 12);
        v140 = *(_DWORD *)(v7 + 16);
        if (v138 != -1 || v139 != -1 || v140 != -1)
        {
          v141 = *(_QWORD *)(a2 + 192);
          v142 = *(_DWORD *)(v141 + 176);
          v9 = v139 - v142;
          v143 = v140 - v142;
          if (v140 < v142)
            v143 = 0;
          v56 = v9 >= v143;
          v144 = v9 - v143;
          if (v56)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v9, 0, 0, (v138 + ~*(_DWORD *)(v141 + 184)) | (unint64_t)(v144 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v9, v10, v11, v12, v13, v14);
      }
      v18 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a2, 0);
    }
    v19 = v18;
    *(_BYTE *)(a2 + 710) = v17;
    *(_BYTE *)(a2 + 709) = v16;
    if (v18)
      ++*v18;
  }
  else
  {
    v20 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v19 = v20;
    if (v20)
      ++*v20;
    v27 = *(_BYTE *)(a2 + 709);
    v28 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)&v166 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (*(_BYTE *)(v7 + 24)
        && (*(_BYTE *)(a2 + 104) & 1) != 0
        && !*(_BYTE *)(a2 + 707)
        && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v7 + 8)
         || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v7 + 12)
         || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v7 + 16)
         || *(_DWORD *)(a2 + 748) != 5))
      {
        v145 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v7 + 16);
        *(_QWORD *)(a2 + 736) = v145;
        *(_DWORD *)(a2 + 748) = 5;
        v146 = *(_DWORD *)(v7 + 8);
        v147 = *(_DWORD *)(v7 + 12);
        v148 = *(_DWORD *)(v7 + 16);
        if (v146 != -1 || v147 != -1 || v148 != -1)
        {
          v149 = *(_QWORD *)(a2 + 192);
          v150 = *(_DWORD *)(v149 + 176);
          v21 = v147 - v150;
          v151 = v148 - v150;
          if (v148 < v150)
            v151 = 0;
          v56 = v21 >= v151;
          v152 = v21 - v151;
          if (v56)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v21, 0, 0, (v146 + ~*(_DWORD *)(v149 + 184)) | (unint64_t)(v152 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v21, v22, v23, v24, v25, v26);
      }
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v7 + 16))(v7, a2, v19);
    }
    *(_BYTE *)(a2 + 710) = v28;
    *(_BYTE *)(a2 + 709) = v27;
  }
  v29 = *(_BYTE *)(a1 + 97) & 2;
  v30 = *(_QWORD *)(a1 + 80);
  v31 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 72))(*(_QWORD *)(a1 + 88), a2);
  v32 = *(_BYTE *)(a2 + 416) == 2 && v29 == 0;
  if (v32 || (v31 & 1) != 0)
  {
    v35 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v30);
    v34 = v35;
    if (v35)
      ++*v35;
  }
  else
  {
    v33 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v34 = v33;
    if (v33)
      ++*v33;
    JSC::BytecodeGenerator::emitNodeForProperty(a2, v33, v30);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80)) & 1) != 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    v40 = v34;
  }
  else
  {
    JSC::BytecodeGenerator::emitRequireObjectCoercible(a2, (uint64_t)v19, "Cannot access property of undefined or null", 0x2CuLL, v36, v37, v38, v39);
    v40 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitToPropertyKeyOrNumber(a2, (uint64_t)v40, v34[1], v41, v42, v43, v44, v45);
    if (v40)
      ++*v40;
    --*v34;
  }
  v46 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v47 = v46;
  if (v46)
    ++*v46;
  v48 = *(_DWORD *)(a1 + 28) - *(unsigned __int16 *)(a1 + 68);
  v49 = *(_DWORD *)(a1 + 32) - *(unsigned __int16 *)(a1 + 64);
  v50 = *(_DWORD *)(a1 + 36) - *(unsigned __int16 *)(a1 + 70);
  if (v48 != -1 || v49 != -1 || v50 != -1)
  {
    v51 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v51 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v52 = *(_DWORD *)(a1 + 56) - *(unsigned __int16 *)(a1 + 66);
      if ((*(_DWORD *)(a1 + 52) & v52 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v53 = *(_QWORD *)(a2 + 192);
        v54 = *(_DWORD *)(v53 + 176);
        v55 = v49 - v54;
        v56 = v50 >= v54;
        v57 = v50 - v54;
        if (!v56)
          v57 = 0;
        v56 = v55 >= v57;
        v58 = v55 - v57;
        if (v56)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v55, v49 - v51, v52 - v49, (v48 + ~*(_DWORD *)(v53 + 184)) | (unint64_t)(v58 << 32));
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72)))
  {
    v66 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v59, v60, v61, v62, v63, v64, v65);
    ++*v66;
    JSC::BytecodeGenerator::emitGetByVal(a2, v47, (uint64_t)v19, (uint64_t)v66, (uint64_t)v40, v67, v68, v69);
  }
  else
  {
    JSC::BytecodeGenerator::emitGetByVal(a2, v47, (uint64_t)v19, (uint64_t)v40, v62, v63, v64, v65);
    v66 = 0;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v168, a2, v70, v71, v72, v73, v74, v75);
  v81 = *(unsigned __int8 *)(a1 + 96);
  v82 = v168;
  if (v81 == 12)
  {
    v83 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitIsUndefinedOrNull(a2, v83, v47[1], v84, v85, v86, v87, v88);
    v89 = a2;
    v90 = v83;
LABEL_58:
    JSC::BytecodeGenerator::emitJumpIfFalse(v89, v90, (uint64_t)v82, v76, v77, v78, v79, v80);
    goto LABEL_59;
  }
  if (v81 != 13)
  {
    if (v81 != 14)
    {
      __break(0xC471u);
      JUMPOUT(0x19827D1E8);
    }
    v89 = a2;
    v90 = (uint64_t)v47;
    goto LABEL_58;
  }
  JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v47, (uint64_t)v168, v76, v77, v78, v79, v80);
LABEL_59:
  v97 = *(_QWORD *)(a1 + 88);
  v98 = *(_BYTE *)(a2 + 709);
  v99 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v166 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v97 + 24)
      && (*(_BYTE *)(a2 + 104) & 1) != 0
      && !*(_BYTE *)(a2 + 707)
      && (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v97 + 8)
       || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v97 + 12)
       || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v97 + 16)
       || *(_DWORD *)(a2 + 748) != 5))
    {
      v129 = *(_QWORD *)(v97 + 8);
      *(_DWORD *)(a2 + 744) = *(_DWORD *)(v97 + 16);
      *(_QWORD *)(a2 + 736) = v129;
      *(_DWORD *)(a2 + 748) = 5;
      v130 = *(_DWORD *)(v97 + 8);
      v131 = *(_DWORD *)(v97 + 12);
      v167 = v97;
      v132 = *(_DWORD *)(v97 + 16);
      if (v130 != -1 || v131 != -1 || v132 != -1)
      {
        v133 = *(_QWORD *)(a2 + 192);
        v134 = *(_DWORD *)(v133 + 176);
        v91 = v131 - v134;
        v135 = v132 - v134;
        if (v132 < v134)
          v135 = 0;
        v56 = v91 >= v135;
        v136 = v91 - v135;
        if (v56)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v91, 0, 0, (v130 + ~*(_DWORD *)(v133 + 184)) | (unint64_t)(v136 << 32));
      }
      JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v91, v92, v93, v94, v95, v96);
      v97 = v167;
    }
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v97 + 16))(v97, a2, v47);
  }
  *(_BYTE *)(a2 + 710) = v99;
  *(_BYTE *)(a2 + 709) = v98;
  v101 = *(_DWORD *)(a1 + 28);
  v100 = *(_DWORD *)(a1 + 32);
  v102 = *(_DWORD *)(a1 + 36);
  if (v101 != -1 || v100 != -1 || v102 != -1)
  {
    v103 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 40) != -1 || v103 != -1 || *(_DWORD *)(a1 + 48) != -1)
    {
      v104 = *(_DWORD *)(a1 + 56);
      if ((*(_DWORD *)(a1 + 52) & v104 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v105 = *(_QWORD *)(a2 + 192);
        v106 = *(_DWORD *)(v105 + 176);
        v107 = v100 - v106;
        v56 = v102 >= v106;
        v108 = v102 - v106;
        if (!v56)
          v108 = 0;
        v56 = v107 >= v108;
        v109 = v107 - v108;
        if (v56)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v107, v100 - v103, v104 - v100, (v101 + ~*(_DWORD *)(v105 + 184)) | (unint64_t)(v109 << 32));
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72)))
  {
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v19[1], v66[1], v40[1], v47[1], *(_BYTE *)(a2 + 712));
    if (!v47)
      goto LABEL_80;
  }
  else
  {
    JSC::BytecodeGenerator::emitPutByVal(a2, (uint64_t)v19, (uint64_t)v40, (uint64_t)v47, v110, v111, v112, v113);
    if (!v47)
      goto LABEL_80;
  }
  if ((*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    v153 = v47[1];
    v154 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
    v155 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
    *(_BYTE *)(v155 + 4) |= 1u;
    v156 = *(_QWORD *)(v155 + 16);
    v157 = *(unsigned int *)(v156 + 80);
    *(_DWORD *)(v156 + 80) = v157 + 1;
    v167 = v153;
    v158 = v153;
    v159 = v154;
    if ((JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v158, 0, 2, 0, v154, v157, v160) & 1) == 0&& (JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v167, 0, 2, 0, v159, v157, v161) & 1) == 0)
    {
      JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v167, 0, 2, 0, v159, v157, v162);
    }
    v163 = *(_DWORD *)(a1 + 44);
    v164 = *(_DWORD *)(a2 + 12) - 1;
    v165 = *(_QWORD *)(a2 + 24);
    HIDWORD(v170) = *(_DWORD *)(a1 + 56) - 1;
    v171 = v164;
    LODWORD(v170) = v163;
    WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v165 + 232), &v171, &v170, (uint64_t)v169);
  }
LABEL_80:
  v119 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v82, a2, v119, v114, v115, v116, v117, v118);
  v125 = *(_QWORD *)(a2 + 24);
  v126 = *(unsigned int *)(v125 + 28);
  if (!(_DWORD)v126 || v119 != *(_DWORD *)(*(_QWORD *)(v125 + 16) + 4 * v126 - 4))
  {
    v169[0] = v119;
    v127 = (_QWORD *)(v125 + 16);
    if ((_DWORD)v126 == *(_DWORD *)(v125 + 24))
      *(_DWORD *)(*(_QWORD *)(v125 + 16) + 4 * *(unsigned int *)(v125 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v127, v126 + 1, (unint64_t)v169);
    else
      *(_DWORD *)(*v127 + 4 * v126) = v119;
    ++*(_DWORD *)(v125 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((int *)(a2 + 208) == a3)
  {
    result = 0;
    if (v82)
LABEL_92:
      --*v82;
  }
  else
  {
    result = v47;
    if (a3)
    {
      result = v47;
      if (v47 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v47, v120, v121, v122, v123, v124);
        result = a3;
      }
    }
    if (v82)
      goto LABEL_92;
  }
  if (v47)
    --*v47;
  if (v66)
    --*v66;
  if (v40)
    --*v40;
  if (v19)
    --*v19;
  return result;
}

uint64_t JSC::CommaNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  char v11;
  char v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;

  v10 = (uint64_t *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    v11 = *(_BYTE *)(a2 + 709);
    v12 = *(_BYTE *)(a2 + 710);
    do
    {
      v13 = *(_BYTE **)(a1 + 32);
      *(_BYTE *)(a2 + 709) = 0;
      *(_BYTE *)(a2 + 710) = *(_BYTE *)(a2 + 704);
      if ((unint64_t)&v18 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v13[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), a4, a5, a6, a7, a8);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a2 + 208);
      }
      *(_BYTE *)(a2 + 710) = v12;
      *(_BYTE *)(a2 + 709) = v11;
      a1 = *v10;
      v14 = *v10;
      v15 = *(_QWORD *)(v14 + 40);
      v10 = (uint64_t *)(v14 + 40);
    }
    while (v15);
  }
  if ((unint64_t)&v18 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v16 = *(_BYTE **)(a1 + 32);
    if (v16[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v16 + 8), a4, a5, a6, a7, a8);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a2, a3);
  }
}

void JSC::BlockNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE **v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 88))
  {
    v6 = (uint64_t *)(a1 + 48);
    v17 = 0;
    JSC::BytecodeGenerator::pushLexicalScopeInternal(a2, (JSC::VariableEnvironment *)(a1 + 48), 0, 0, (unint64_t *)&v17, 0, 2, 1);
    JSC::BytecodeGenerator::initializeBlockScopedFunctions(a2, v6, a1 + 72, v17);
    v13 = *(_BYTE ***)(a1 + 88);
    v14 = *v13;
    if (*(_BYTE *)(a2 + 416) == 2)
    {
      v15 = 0;
    }
    else
    {
      if (!v14)
      {
LABEL_12:
        JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, (JSC::VariableEnvironment *)v6, v7, v8, v9, v10, v11, v12);
        return;
      }
      v15 = 0;
      do
      {
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v14 + 24))(v14))
          v15 = v14;
        v14 = (_BYTE *)*((_QWORD *)v14 + 4);
      }
      while (v14);
      v14 = *v13;
    }
    for (; v14; v14 = (_BYTE *)*((_QWORD *)v14 + 4))
    {
      if (v14 == v15)
        JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v8, v9, v10, v11, v12);
      if ((unint64_t)&v16 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v14[24])
          JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v14);
        (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v14 + 16))(v14, a2, a3);
      }
    }
    goto LABEL_12;
  }
}

char *JSC::DebuggerStatementNode::emitBytecode(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::BytecodeGenerator::emitDebugHook(a2, 3, a1 + 8, a4, a5, a6, a7, a8);
}

uint64_t JSC::ExprStatementNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a2 + 709);
  *(_BYTE *)(a2 + 709) = 0;
  if ((unint64_t)v24 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v9 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
    {
      if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v9 + 8)
        || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v9 + 12)
        || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v9 + 16) ? (v12 = *(_DWORD *)(a2 + 748) == 5) : (v12 = 0), !v12))
      {
        v24[0] = v9;
        v24[1] = a3;
        v13 = *(_QWORD *)(v9 + 8);
        *(_DWORD *)(a2 + 744) = *(_DWORD *)(v9 + 16);
        *(_QWORD *)(a2 + 736) = v13;
        *(_DWORD *)(a2 + 748) = 5;
        v14 = *(_DWORD *)(v9 + 8);
        v15 = *(_DWORD *)(v9 + 12);
        v16 = *(_DWORD *)(v9 + 16);
        if (v14 != -1 || v15 != -1 || v16 != -1)
        {
          v19 = *(_QWORD *)(a2 + 192);
          v20 = *(_DWORD *)(v19 + 176);
          a3 = v15 - v20;
          v21 = v16 - v20;
          if (v16 < v20)
            v21 = 0;
          v22 = a3 >= v21;
          v23 = a3 - v21;
          if (v22)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), a3, 0, 0, (v14 + ~*(_DWORD *)(v19 + 184)) | (unint64_t)(v23 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, a3, a4, a5, a6, a7, a8);
        v9 = v24[0];
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2);
  }
  *(_BYTE *)(a2 + 709) = v10;
  return result;
}

uint64_t JSC::DeclarationStatement::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t v13;

  v9 = *(_BYTE **)(a1 + 40);
  v10 = *(_BYTE *)(a2 + 709);
  v11 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v13 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v9[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v9 + 8), a4, a5, a6, a7, a8);
    result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v11;
  *(_BYTE *)(a2 + 709) = v10;
  return result;
}

uint64_t JSC::EmptyVarExpression::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v47;
  int v48;
  WTF::StringImpl *v49[2];
  uint64_t v50;

  if ((*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    JSC::BytecodeGenerator::variable((uint64_t)v49, a2, *(_QWORD *)(a1 + 32), 0, a5, a6, a7, a8);
    if (v50)
    {
      v14 = **(_QWORD **)(a1 + 32);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 4);
      v15 = *(_DWORD *)(a1 + 16);
      v47 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + v14) << 32);
      v48 = v15;
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v50, (uint64_t)v49, a1 + 8, (uint64_t)&v47, v11, v12, v13);
    }
    else
    {
      v24 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v49, v9, v10, v11, v12, v13);
      v25 = v24;
      if (v24)
        ++*v24;
      v26 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v30 = JSC::BytecodeGenerator::emitGetFromScope(a2, v26, (uint64_t)v25, (unint64_t)v49, 1, v27, v28, v29);
      v34 = v30;
      if (v30)
        ++*v30;
      v35 = **(_QWORD **)(a1 + 32);
      if (v35)
        LODWORD(v35) = *(_DWORD *)(v35 + 4);
      v36 = *(_DWORD *)(a1 + 16);
      v47 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + v35) << 32);
      v48 = v36;
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v30, (uint64_t)v49, a1 + 8, (uint64_t)&v47, v31, v32, v33);
      if (v34)
        --*v34;
      if (v25)
        --*v25;
    }
    v23 = v49[0];
    v49[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  return 0;
}

uint64_t JSC::EmptyLetExpression::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  int v37;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  WTF::StringImpl *v74[2];
  int *v75;

  JSC::BytecodeGenerator::variable((uint64_t)v74, a2, *(_QWORD *)(a1 + 32), 0, a5, a6, a7, a8);
  v15 = v75;
  if (v75)
  {
    JSC::BytecodeGenerator::emitLoad(a2, v75, 10, v10, v11, v12, v13, v14);
    v19 = **(_QWORD **)(a1 + 32);
    if (v19)
      LODWORD(v19) = *(_DWORD *)(v19 + 4);
    v20 = *(_DWORD *)(a1 + 16);
    v72 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + v19) << 32);
    v73 = v20;
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v15, (uint64_t)v74, a1 + 8, (uint64_t)&v72, v16, v17, v18);
  }
  else
  {
    v39 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v74, v10, v11, v12, v13, v14);
    v45 = v39;
    if (v39)
      ++*v39;
    v46 = JSC::BytecodeGenerator::emitLoad(a2, 0, 10, v40, v41, v42, v43, v44);
    v49 = v46;
    if (v46)
      ++*v46;
    JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v45, (uint64_t)v74, (uint64_t)v46, *(_BYTE *)(a2 + 712) != 0, 0, v47, v48);
    v53 = **(_QWORD **)(a1 + 32);
    if (v53)
      LODWORD(v53) = *(_DWORD *)(v53 + 4);
    v54 = *(_DWORD *)(a1 + 16);
    v72 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + v53) << 32);
    v73 = v54;
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v49, (uint64_t)v74, a1 + 8, (uint64_t)&v72, v50, v51, v52);
    if (v49)
      --*v49;
    if (v45)
      --*v45;
  }
  v28 = v74[0];
  if (v74[0])
    *(_DWORD *)v74[0] += 2;
  v29 = *(unsigned int *)(a2 + 156);
  while (v29)
  {
    --v29;
    v30 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * v29);
    if (v30)
    {
      v31 = *((_DWORD *)v28 + 4);
      if ((v31 & 0x20) != 0)
        v31 = *((_DWORD *)v28 + 8);
      v32 = *(_DWORD *)(v30 - 8);
      v33 = v32 & (v31 >> 8);
      v34 = *(WTF::StringImpl **)(v30 + 16 * v33);
      if (v34 != v28)
      {
        v71 = 1;
        while (v34)
        {
          v33 = ((_DWORD)v33 + v71) & v32;
          v34 = *(WTF::StringImpl **)(v30 + 16 * v33);
          ++v71;
          if (v34 == v28)
            goto LABEL_13;
        }
        v33 = *(unsigned int *)(v30 - 4);
      }
LABEL_13:
      v35 = v30 + 16 * v33;
      v30 += 16 * *(unsigned int *)(v30 - 4);
    }
    else
    {
      v35 = 0;
    }
    if (v35 != v30)
    {
      if (*(_DWORD *)(v35 + 8) == 1)
        *(_DWORD *)(v35 + 8) = 0;
      break;
    }
  }
  if (v28)
  {
    v36 = *(_DWORD *)v28 - 2;
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      v28 = v74[0];
      v74[0] = 0;
      if (!v28)
        return 0;
      v36 = *(_DWORD *)v28;
    }
    else
    {
      *(_DWORD *)v28 = v36;
      v74[0] = 0;
    }
    v37 = v36 - 2;
    if (v37)
    {
      *(_DWORD *)v28 = v37;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
  }
  return 0;
}

_DWORD *JSC::IfElseNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _DWORD *v62;
  int v63;
  _DWORD *result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;

  if (*(_BYTE *)(a2 + 416) != 2
    && (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)) & 1) != 0
     || (v87 = *(_QWORD *)(a1 + 56)) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87)))
  {
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, a4, a5, a6, a7, a8);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v93, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v92, a2, v11, v12, v13, v14, v15, v16);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v91, a2, v17, v18, v19, v20, v21, v22);
  v24 = v92;
  v23 = v93;
  v25 = *(uint64_t ***)(a1 + 48);
  if (((unsigned int (*)(uint64_t **))(*v25)[13])(v25))
  {
    v26 = v25[11];
    if (!v26)
      goto LABEL_11;
    v25 = (uint64_t **)*v26;
    v27 = (uint64_t **)v26[1];
    if (!v25 || v25 != v27)
      goto LABEL_11;
  }
  if (((unsigned int (*)(uint64_t **))(*v25)[10])(v25))
  {
    if ((*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
      goto LABEL_11;
    v88 = JSC::BytecodeGenerator::breakTarget(a2, v25[10]);
    if (*(_DWORD *)(a2 + 408) + *(_DWORD *)(a2 + 412) != *(_DWORD *)(v88 + 16))
      goto LABEL_11;
    v30 = *(_DWORD **)(v88 + 24);
    if (!v30)
      goto LABEL_11;
  }
  else if (!((unsigned int (*)(uint64_t **))(*v25)[11])(v25)
         || (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707)
         || (v89 = JSC::BytecodeGenerator::continueTarget(a2, v25[10]),
             *(_DWORD *)(a2 + 408) + *(_DWORD *)(a2 + 412) != *(_DWORD *)(v89 + 16))
         || (v30 = *(_DWORD **)(v89 + 32)) == 0)
  {
LABEL_11:
    v29 = 0;
    v30 = v23;
    goto LABEL_12;
  }
  v29 = 1;
LABEL_12:
  if ((unint64_t)&v91 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _DWORD *, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 40) + 352))(*(_QWORD *)(a1 + 40), a2, v30, v24, v29);
  }
  v36 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v23, a2, v36, v31, v32, v33, v34, v35);
  v43 = *(_QWORD *)(a2 + 24);
  v44 = *(unsigned int *)(v43 + 28);
  if (!(_DWORD)v44 || v36 != *(_DWORD *)(*(_QWORD *)(v43 + 16) + 4 * v44 - 4))
  {
    v94 = v36;
    v45 = (_QWORD *)(v43 + 16);
    if ((_DWORD)v44 == *(_DWORD *)(v43 + 24))
      *(_DWORD *)(*(_QWORD *)(v43 + 16) + 4 * *(unsigned int *)(v43 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v44 + 1, (unint64_t)&v94);
    else
      *(_DWORD *)(*v45 + 4 * v44) = v36;
    ++*(_DWORD *)(v43 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v90 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12);
    if ((v90 & 0x80000000) != 0)
      goto LABEL_94;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v90, v37, v38, v39, v40, v41, v42);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
  }
  if ((v29 & 1) == 0)
  {
    if ((unint64_t)&v91 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      v46 = *(_BYTE **)(a1 + 48);
      if (v46[24])
        JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, *(JSC::StatementNode **)(a1 + 48));
      (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v46 + 16))(v46, a2, a3);
    }
    if (*(_QWORD *)(a1 + 56))
    {
      v81 = v91;
      *(_BYTE *)(v91 + 8) = 1;
      v82 = *(unsigned int *)(v81 + 4);
      v83 = (_DWORD)v82 == -1 ? v81 : *(unsigned int *)(v81 + 4);
      v84 = (_DWORD)v82 == -1 ? 1 : 2;
      v85 = v82 == 0xFFFFFFFFLL ? 1 : 2;
      LOBYTE(v94) = v85;
      v95 = 0;
      v96 = a2;
      v97 = v83;
      if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v94, v47, v38, v39, v40, v41, v42) & 1) == 0)
      {
        LOBYTE(v94) = v84;
        v95 = 0;
        v96 = a2;
        v97 = v83;
        if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v94, v86, v38, v39, v40, v41, v42) & 1) == 0)
        {
          LOBYTE(v94) = v84;
          v95 = 0;
          v96 = a2;
          v97 = v83;
          JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v94);
        }
      }
    }
  }
  v48 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v24, a2, v48, v38, v39, v40, v41, v42);
  v54 = *(_QWORD *)(a2 + 24);
  v55 = *(unsigned int *)(v54 + 28);
  if (!(_DWORD)v55 || v48 != *(_DWORD *)(*(_QWORD *)(v54 + 16) + 4 * v55 - 4))
  {
    v94 = v48;
    v56 = (_QWORD *)(v54 + 16);
    if ((_DWORD)v55 == *(_DWORD *)(v54 + 24))
      *(_DWORD *)(*(_QWORD *)(v54 + 16) + 4 * *(unsigned int *)(v54 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v55 + 1, (unint64_t)&v94);
    else
      *(_DWORD *)(*v56 + 4 * v55) = v48;
    ++*(_DWORD *)(v54 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v71 = *(_DWORD **)(a1 + 48);
    v72 = v71[5];
    v73 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v71 + 104))(v71);
    if ((*(_BYTE *)(a2 + 104) & 4) == 0)
      goto LABEL_48;
    if (((v72 + v73) & 0x80000000) == 0)
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v72 + v73, v74, v75, v76, v77, v78, v79);
      JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
LABEL_48:
      if ((unint64_t)&v91 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        v80 = *(_BYTE **)(a1 + 56);
        if (v80[24])
          JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, *(JSC::StatementNode **)(a1 + 56));
        (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v80 + 16))(v80, a2, a3);
      }
      goto LABEL_32;
    }
LABEL_94:
    __break(0xC471u);
    JUMPOUT(0x19827E414);
  }
LABEL_32:
  v57 = (_DWORD *)v91;
  v58 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v91, a2, v58, v49, v50, v51, v52, v53);
  v59 = *(_QWORD *)(a2 + 24);
  v60 = *(unsigned int *)(v59 + 28);
  if (!(_DWORD)v60 || v58 != *(_DWORD *)(*(_QWORD *)(v59 + 16) + 4 * v60 - 4))
  {
    v94 = v58;
    v61 = (_QWORD *)(v59 + 16);
    if ((_DWORD)v60 == *(_DWORD *)(v59 + 24))
      *(_DWORD *)(*(_QWORD *)(v59 + 16) + 4 * *(unsigned int *)(v59 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v60 + 1, (unint64_t)&v94);
    else
      *(_DWORD *)(*v61 + 4 * v60) = v58;
    ++*(_DWORD *)(v59 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v62 = *(_DWORD **)(a1 + 56);
  if (!v62)
    v62 = *(_DWORD **)(a1 + 48);
  v63 = v62[5];
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v62 + 104))(v62);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if (v63 + (_DWORD)result < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19827E434);
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v63 + (_DWORD)result, v65, v66, v67, v68, v69, v70);
    result = JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
  }
  if (v57)
    --*v57;
  if (v24)
    --*v24;
  if (v23)
    --*v23;
  return result;
}

uint64_t JSC::BytecodeGenerator::emitNodeInTailPosition(JSC::BytecodeGenerator *this, uint64_t a2, JSC::StatementNode *a3)
{
  uint64_t v7;

  if ((unint64_t)&v7 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
  {
    *((_BYTE *)this + 706) = 1;
    return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  }
  else
  {
    if (*((_BYTE *)a3 + 24))
      JSC::BytecodeGenerator::emitDebugHook(this, a3);
    return (*(uint64_t (**)(JSC::StatementNode *, JSC::BytecodeGenerator *, uint64_t))(*(_QWORD *)a3 + 16))(a3, this, a2);
  }
}

_DWORD *JSC::DoWhileNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *result;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;

  if (*(_BYTE *)(a2 + 416) != 2
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40)))
  {
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v54, a5, a6, a7, a8);
  }
  JSC::BytecodeGenerator::newLabelScope(&v57, a2, 0, 0, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v56, a2, v11, v12, v13, v14, v15, v16);
  v17 = v56;
  v18 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v56, a2, v18, v19, v20, v21, v22, v23);
  v31 = *(_QWORD *)(a2 + 24);
  v32 = *(unsigned int *)(v31 + 28);
  if (!(_DWORD)v32 || v18 != *(_DWORD *)(*(_QWORD *)(v31 + 16) + 4 * v32 - 4))
  {
    v58 = v18;
    v33 = (_QWORD *)(v31 + 16);
    if ((_DWORD)v32 == *(_DWORD *)(v31 + 24))
      *(_DWORD *)(*(_QWORD *)(v31 + 16) + 4 * *(unsigned int *)(v31 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v32 + 1, (unint64_t)&v58);
    else
      *(_DWORD *)(*v33 + 4 * v32) = v18;
    ++*(_DWORD *)(v31 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a2, v24, v25, v26, v27, v28, v29, v30);
  if ((unint64_t)&v55 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v34 = *(_BYTE **)(a1 + 40);
    if (v34[24])
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, *(JSC::StatementNode **)(a1 + 40));
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v34 + 16))(v34, a2, a3);
  }
  v40 = v57;
  v41 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v57 + 32), a2, v41, v35, v36, v37, v38, v39);
  v42 = *(_QWORD *)(a2 + 24);
  v43 = *(unsigned int *)(v42 + 28);
  if (!(_DWORD)v43 || v41 != *(_DWORD *)(*(_QWORD *)(v42 + 16) + 4 * v43 - 4))
  {
    v58 = v41;
    v44 = (_QWORD *)(v42 + 16);
    if ((_DWORD)v43 == *(_DWORD *)(v42 + 24))
      *(_DWORD *)(*(_QWORD *)(v42 + 16) + 4 * *(unsigned int *)(v42 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v43 + 1, (unint64_t)&v58);
    else
      *(_DWORD *)(*v44 + 4 * v43) = v41;
    ++*(_DWORD *)(v42 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((unint64_t)&v55 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _DWORD *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 352))(*(_QWORD *)(a1 + 48), a2, v17, *(_QWORD *)(v40 + 24), 1);
  }
  v50 = *(_DWORD *)(a2 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v40 + 24), a2, v50, v45, v46, v47, v48, v49);
  v52 = *(_DWORD **)(a2 + 24);
  v53 = v52[7];
  if (!(_DWORD)v53 || v50 != *(_DWORD *)(*((_QWORD *)v52 + 2) + 4 * v53 - 4))
  {
    v58 = v50;
    result = v52 + 4;
    if ((_DWORD)v53 == v52[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v53 + 1, (unint64_t)&v58);
      *(_DWORD *)(*((_QWORD *)v52 + 2) + 4 * v52[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v53) = v50;
    }
    ++v52[7];
    *(_DWORD *)(a2 + 36) = 115;
  }
  if (v17)
    --*v17;
  --*(_DWORD *)v40;
  return result;
}

_DWORD *JSC::WhileNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _DWORD *v60;
  int v61;
  _DWORD *result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  int v74;

  if (*(_BYTE *)(a2 + 416) != 2
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)))
  {
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v69, a5, a6, a7, a8);
  }
  JSC::BytecodeGenerator::newLabelScope(&v73, a2, 0, 0, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v72, a2, v11, v12, v13, v14, v15, v16);
  v17 = v72;
  v18 = v73;
  if ((unint64_t)&v71 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 352))(*(_QWORD *)(a1 + 40), a2, v72, *(_QWORD *)(v73 + 24), 0);
  }
  v24 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v17, a2, v24, v19, v20, v21, v22, v23);
  v32 = *(_QWORD *)(a2 + 24);
  v33 = *(unsigned int *)(v32 + 28);
  if (!(_DWORD)v33 || v24 != *(_DWORD *)(*(_QWORD *)(v32 + 16) + 4 * v33 - 4))
  {
    v74 = v24;
    v34 = (_QWORD *)(v32 + 16);
    if ((_DWORD)v33 == *(_DWORD *)(v32 + 24))
      *(_DWORD *)(*(_QWORD *)(v32 + 16) + 4 * *(unsigned int *)(v32 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v33 + 1, (unint64_t)&v74);
    else
      *(_DWORD *)(*v34 + 4 * v33) = v24;
    ++*(_DWORD *)(v32 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a2, v25, v26, v27, v28, v29, v30, v31);
  v41 = *(_QWORD *)(a1 + 48);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v70 = *(_DWORD *)(v41 + 12);
    if ((v70 & 0x80000000) != 0)
      goto LABEL_42;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v70, v35, v36, v37, v38, v39, v40);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v41 = *(_QWORD *)(a1 + 48);
  }
  if ((unint64_t)&v71 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v41 + 24))
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v41);
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v41 + 16))(v41, a2, a3);
  }
  v47 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v18 + 32), a2, v47, v42, v43, v44, v45, v46);
  v48 = *(_QWORD *)(a2 + 24);
  v49 = *(unsigned int *)(v48 + 28);
  if (!(_DWORD)v49 || v47 != *(_DWORD *)(*(_QWORD *)(v48 + 16) + 4 * v49 - 4))
  {
    v74 = v47;
    v50 = (_QWORD *)(v48 + 16);
    if ((_DWORD)v49 == *(_DWORD *)(v48 + 24))
      *(_DWORD *)(*(_QWORD *)(v48 + 16) + 4 * *(unsigned int *)(v48 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v49 + 1, (unint64_t)&v74);
    else
      *(_DWORD *)(*v50 + 4 * v49) = v47;
    ++*(_DWORD *)(v48 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((unint64_t)&v71 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _DWORD *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 352))(*(_QWORD *)(a1 + 40), a2, v17, *(_QWORD *)(v18 + 24), 1);
  }
  v56 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v18 + 24), a2, v56, v51, v52, v53, v54, v55);
  v57 = *(_QWORD *)(a2 + 24);
  v58 = *(unsigned int *)(v57 + 28);
  if (!(_DWORD)v58 || v56 != *(_DWORD *)(*(_QWORD *)(v57 + 16) + 4 * v58 - 4))
  {
    v74 = v56;
    v59 = (_QWORD *)(v57 + 16);
    if ((_DWORD)v58 == *(_DWORD *)(v57 + 24))
      *(_DWORD *)(*(_QWORD *)(v57 + 16) + 4 * *(unsigned int *)(v57 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v58 + 1, (unint64_t)&v74);
    else
      *(_DWORD *)(*v59 + 4 * v58) = v56;
    ++*(_DWORD *)(v57 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v60 = *(_DWORD **)(a1 + 48);
  v61 = v60[5];
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v60 + 104))(v60);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if (((v61 + (_DWORD)result) & 0x80000000) == 0)
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v61 + (_DWORD)result, v63, v64, v65, v66, v67, v68);
      result = JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
      goto LABEL_27;
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x19827EBB8);
  }
LABEL_27:
  if (v17)
    --*v17;
  --*(_DWORD *)v18;
  return result;
}

_DWORD *JSC::ForNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _BYTE *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _DWORD *v86;
  int v87;
  _DWORD *result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  if (*(_BYTE *)(a2 + 416) != 2
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)))
  {
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v95, a5, a6, a7, a8);
  }
  JSC::BytecodeGenerator::newLabelScope(&v104, a2, 0, 0, a5, a6, a7, a8);
  v105 = 0;
  JSC::BytecodeGenerator::pushLexicalScopeInternal(a2, (JSC::VariableEnvironment *)(a1 + 48), 0, 0, (unint64_t *)&v105, 0, 2, 1);
  JSC::BytecodeGenerator::initializeBlockScopedFunctions(a2, (uint64_t *)(a1 + 48), a1 + 72, v105);
  v17 = (int *)v105;
  v18 = *(_BYTE **)(a1 + 88);
  if (v18)
  {
    v19 = *(_BYTE *)(a2 + 709);
    *(_BYTE *)(a2 + 709) = 0;
    v20 = *(_BYTE *)(a2 + 710);
    *(_BYTE *)(a2 + 710) = *(_BYTE *)(a2 + 704);
    if ((unint64_t)&v102 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v18[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v18 + 8), v12, v13, v14, v15, v16);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a2, a2 + 208);
    }
    *(_BYTE *)(a2 + 710) = v20;
    *(_BYTE *)(a2 + 709) = v19;
    if (*(_BYTE *)(a1 + 120))
      JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(a2, (JSC::VariableEnvironment *)(a1 + 40), v17, v12, v13, v14, v15, v16);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v103, a2, v11, v12, v13, v14, v15, v16);
  v26 = *(_QWORD *)(a1 + 96);
  v27 = v103;
  if (v26)
  {
    if ((unint64_t)&v102 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 352))(v26, a2, v103, *(_QWORD *)(v104 + 24), 0);
    }
  }
  v28 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v27, a2, v28, v21, v22, v23, v24, v25);
  v36 = *(_QWORD *)(a2 + 24);
  v37 = *(unsigned int *)(v36 + 28);
  if (!(_DWORD)v37 || v28 != *(_DWORD *)(*(_QWORD *)(v36 + 16) + 4 * v37 - 4))
  {
    LODWORD(v105) = v28;
    v38 = (_QWORD *)(v36 + 16);
    if ((_DWORD)v37 == *(_DWORD *)(v36 + 24))
      *(_DWORD *)(*(_QWORD *)(v36 + 16) + 4 * *(unsigned int *)(v36 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v37 + 1, (unint64_t)&v105);
    else
      *(_DWORD *)(*v38 + 4 * v37) = v28;
    ++*(_DWORD *)(v36 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a2, v29, v30, v31, v32, v33, v34, v35);
  v45 = *(_QWORD *)(a1 + 112);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v101 = *(_DWORD *)(v45 + 12);
    if ((v101 & 0x80000000) != 0)
      goto LABEL_71;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v101, v39, v40, v41, v42, v43, v44);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v45 = *(_QWORD *)(a1 + 112);
  }
  if ((unint64_t)&v102 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v45 + 24))
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v45);
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v45 + 16))(v45, a2, a3);
  }
  v51 = v104;
  v52 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v104 + 32), a2, v52, v46, v47, v48, v49, v50);
  v58 = *(_QWORD *)(a2 + 24);
  v59 = *(unsigned int *)(v58 + 28);
  if (!(_DWORD)v59 || v52 != *(_DWORD *)(*(_QWORD *)(v58 + 16) + 4 * v59 - 4))
  {
    LODWORD(v105) = v52;
    v60 = (_QWORD *)(v58 + 16);
    if ((_DWORD)v59 == *(_DWORD *)(v58 + 24))
      *(_DWORD *)(*(_QWORD *)(v58 + 16) + 4 * *(unsigned int *)(v58 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v59 + 1, (unint64_t)&v105);
    else
      *(_DWORD *)(*v60 + 4 * v59) = v52;
    ++*(_DWORD *)(v58 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(a2, (JSC::VariableEnvironment *)(a1 + 40), v17, v53, v54, v55, v56, v57);
  v67 = *(_BYTE **)(a1 + 104);
  if (v67)
  {
    v68 = *(_BYTE *)(a2 + 709);
    *(_BYTE *)(a2 + 709) = 0;
    v69 = *(_BYTE *)(a2 + 710);
    *(_BYTE *)(a2 + 710) = *(_BYTE *)(a2 + 704);
    if ((unint64_t)&v102 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v67[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v67 + 8), v62, v63, v64, v65, v66);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, a2, a2 + 208);
    }
    *(_BYTE *)(a2 + 710) = v69;
    *(_BYTE *)(a2 + 709) = v68;
  }
  v70 = *(_QWORD *)(a1 + 96);
  if (v70)
  {
    if ((unint64_t)&v102 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v70 + 352))(v70, a2, v27, *(_QWORD *)(v51 + 24), 1);
    }
  }
  else
  {
    *(_BYTE *)(v27 + 8) = 1;
    v96 = *(unsigned int *)(v27 + 4);
    if ((_DWORD)v96 == -1)
      v97 = v27;
    else
      v97 = *(unsigned int *)(v27 + 4);
    if ((_DWORD)v96 == -1)
      v98 = 1;
    else
      v98 = 2;
    if (v96 == 0xFFFFFFFFLL)
      v99 = 1;
    else
      v99 = 2;
    LOBYTE(v105) = v99;
    HIDWORD(v105) = 0;
    v106 = a2;
    v107 = v97;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v105, v61, v62, v63, v64, v65, v66) & 1) == 0)
    {
      LOBYTE(v105) = v98;
      HIDWORD(v105) = 0;
      v106 = a2;
      v107 = v97;
      if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v105, v100, v71, v72, v73, v74, v75) & 1) == 0)
      {
        LOBYTE(v105) = v98;
        HIDWORD(v105) = 0;
        v106 = a2;
        v107 = v97;
        JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v105);
      }
    }
  }
  v76 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v51 + 24), a2, v76, v71, v72, v73, v74, v75);
  v83 = *(_QWORD *)(a2 + 24);
  v84 = *(unsigned int *)(v83 + 28);
  if (!(_DWORD)v84 || v76 != *(_DWORD *)(*(_QWORD *)(v83 + 16) + 4 * v84 - 4))
  {
    LODWORD(v105) = v76;
    v85 = (_QWORD *)(v83 + 16);
    if ((_DWORD)v84 == *(_DWORD *)(v83 + 24))
      *(_DWORD *)(*(_QWORD *)(v83 + 16) + 4 * *(unsigned int *)(v83 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v84 + 1, (unint64_t)&v105);
    else
      *(_DWORD *)(*v85 + 4 * v84) = v76;
    ++*(_DWORD *)(v83 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, (JSC::VariableEnvironment *)(a1 + 48), v77, v78, v79, v80, v81, v82);
  v86 = *(_DWORD **)(a1 + 112);
  v87 = v86[5];
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v86 + 104))(v86);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if (((v87 + (_DWORD)result) & 0x80000000) == 0)
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v87 + (_DWORD)result, v89, v90, v91, v92, v93, v94);
      result = JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
      goto LABEL_42;
    }
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x19827F1D8);
  }
LABEL_42:
  if (v27)
    --*(_DWORD *)v27;
  --*(_DWORD *)v51;
  return result;
}

void JSC::ForInNode::emitLoopHeader(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  int v25;
  BOOL v26;
  int v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v47;
  BOOL v48;
  int v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  WTF::StringImpl *v84[2];
  int *v85;
  int v86;
  char v87;

  v10 = *(_QWORD *)(a1 + 16);
  JSC::BytecodeGenerator::variable((uint64_t)v84, *(_QWORD *)a1, (uint64_t)a2, 0, a5, a6, a7, a8);
  v16 = v85;
  if (v85)
  {
    if ((v86 & 2) != 0)
      JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(*(_QWORD *)a1, v86, v87, v11, v12, v13, v14, v15);
    v17 = **(_QWORD **)(a1 + 8);
    if ((int *)(*(_QWORD *)a1 + 208) != v16 && v16 != (int *)v17)
      JSC::BytecodeGenerator::emitMove(*(_QWORD *)a1, v16, v17, v11, v12, v13, v14, v15);
  }
  else
  {
    v19 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 712))
    {
      v21 = *(_DWORD *)(v10 + 40);
      v20 = *(_DWORD *)(v10 + 44);
      v22 = *(_DWORD *)(v10 + 48);
      v23 = v21 == -1 && v20 == -1;
      if (!v23 || v22 != -1)
      {
        v25 = *(_DWORD *)(v10 + 56);
        v26 = *(_DWORD *)(v10 + 52) == -1 && v25 == -1;
        if (!v26 || *(_DWORD *)(v10 + 60) != -1)
        {
          v28 = *(_DWORD *)(v10 + 68);
          v29 = *(_DWORD *)(v10 + 64) == -1 && v28 == -1;
          v30 = v29 && *(_DWORD *)(v10 + 72) == -1;
          if (!v30 && !*(_BYTE *)(v19 + 707))
          {
            v31 = *(_QWORD *)(v19 + 192);
            v32 = *(_DWORD *)(v31 + 176);
            v33 = v20 - v32;
            v34 = v22 >= v32;
            v35 = v22 - v32;
            if (!v34)
              v35 = 0;
            v34 = v33 >= v35;
            v36 = v33 - v35;
            if (v34)
            {
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(v19 + 24), *(unsigned int *)(v19 + 12), v33, v20 - v25, v28 - v20, (v21 + ~*(_DWORD *)(v31 + 184)) | (unint64_t)(v36 << 32));
              v19 = *(_QWORD *)a1;
            }
          }
        }
      }
    }
    if ((v86 & 2) != 0)
    {
      JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(v19, v86, v87, v11, v12, v13, v14, v15);
      v19 = *(_QWORD *)a1;
    }
    v37 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(v19, 0, (unsigned __int8 *)v84, v11, v12, v13, v14, v15);
    v40 = v37;
    if (v37)
      ++*v37;
    v41 = *(_QWORD *)a1;
    v43 = *(_DWORD *)(v10 + 40);
    v42 = *(_DWORD *)(v10 + 44);
    v44 = *(_DWORD *)(v10 + 48);
    if (v43 != -1 || v42 != -1 || v44 != -1)
    {
      v47 = *(_DWORD *)(v10 + 56);
      v48 = *(_DWORD *)(v10 + 52) == -1 && v47 == -1;
      if (!v48 || *(_DWORD *)(v10 + 60) != -1)
      {
        v50 = *(_DWORD *)(v10 + 68);
        v51 = *(_DWORD *)(v10 + 64) == -1 && v50 == -1;
        v52 = v51 && *(_DWORD *)(v10 + 72) == -1;
        if (!v52 && !*(_BYTE *)(v41 + 707))
        {
          v53 = *(_QWORD *)(v41 + 192);
          v54 = *(_DWORD *)(v53 + 176);
          v55 = v42 - v54;
          v34 = v44 >= v54;
          v56 = v44 - v54;
          if (!v34)
            v56 = 0;
          v34 = v55 >= v56;
          v57 = v55 - v56;
          if (v34)
          {
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(v41 + 24), *(unsigned int *)(v41 + 12), v55, v42 - v47, v50 - v42, (v43 + ~*(_DWORD *)(v53 + 184)) | (unint64_t)(v57 << 32));
            v41 = *(_QWORD *)a1;
          }
        }
      }
    }
    JSC::BytecodeGenerator::emitPutToScope(v41, (uint64_t)v40, (uint64_t)v84, **(_QWORD **)(a1 + 8), *(_BYTE *)(v41 + 712) != 0, 2, v38, v39);
    if (v40)
      --*v40;
  }
  v58 = *(uint64_t **)a1;
  v59 = **(_QWORD **)(a1 + 8);
  v60 = *(unsigned int **)(v10 + 128);
  v61 = (uint64_t)(v60 + 2);
  v62 = *a2;
  if (*a2)
    LODWORD(v62) = *(_DWORD *)(v62 + 4);
  v63 = v60[2];
  v64 = v60[3];
  v65 = v60[4];
  v82 = v63 | ((unint64_t)(v64 + v62) << 32);
  v83 = v65;
  JSC::BytecodeGenerator::emitProfileType(v58, v59, (uint64_t)v84, v61, (uint64_t)&v82, v13, v14, v15);
  v73 = v84[0];
  v84[0] = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
}

void JSC::ForInNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _BYTE *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  __n128 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, int);
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _BOOL4 v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BOOL4 v147;
  _BOOL4 v149;
  _BOOL4 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char v156;
  char v157;
  char v158;
  char v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t **v187;
  _DWORD *v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t **v197;
  _DWORD *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __n128 v226;
  uint64_t v227;
  WTF::AtomStringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  JSC::StatementNode *v236;
  char v237;
  char v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int8x8_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t *v253;
  unsigned __int8 *v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  JSC::OpEnumeratorHasOwnProperty *v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  JSC::ForInContext *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  int *v291;
  int *v292;
  WTF::AtomStringImpl *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  WTF::AtomStringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  char *v354;
  char *v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int *v358;
  unsigned int v359;
  uint64_t v360;
  unint64_t v361;
  int *v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  unsigned int *v381;
  uint64_t v382;
  unsigned __int8 *v383;
  int v384;
  int v385;
  unsigned int v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned int v397;
  unsigned int *v398;
  unsigned int *v399;
  unsigned int v400;
  uint64_t v401;
  unint64_t v402;
  unsigned __int8 *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int v409;
  _DWORD *v410;
  _DWORD *v411;
  _DWORD *v412;
  _DWORD *v413;
  int *v414;
  int *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _DWORD *v425;
  unsigned int v426;
  unsigned int *v427;
  unsigned int *v428;
  unsigned int v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  int v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int v443;
  BOOL v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  WTF::AtomStringImpl *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _BYTE v467[12];
  unsigned int v468;
  int *v469;
  int v470;
  int v471;
  JSC::VariableEnvironment *v472;
  uint64_t (*v473)(uint64_t, int);
  _DWORD *v474;
  int v475;
  int v476;
  uint64_t v477;
  _DWORD *v478;
  int *v479;
  int *v480;
  _DWORD *v481;
  _DWORD *v482;
  uint64_t v483;
  WTF::StringImpl *v484;
  _OWORD v485[2];
  char v486;
  uint64_t v487;
  _OWORD v488[2];
  uint64_t (*v489)(uint64_t, int);
  _OWORD v490[2];
  _QWORD v491[3];
  uint64_t v492[2];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 120))(*(_QWORD *)(a1 + 128)) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 104))(*(_QWORD *)(a1 + 128)) & 1) == 0)
  {
    JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 40), a2, "Left side of for-in statement is not a reference.", 0x32uLL, 0, v6, v7, v8);
    return;
  }
  if (*(_BYTE *)(a2 + 416) != 2
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144)))
  {
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v348, v349, v350, v351, v352);
  }
  v489 = 0;
  JSC::BytecodeGenerator::pushLexicalScopeInternal(a2, (JSC::VariableEnvironment *)(a1 + 88), 0, 0, (unint64_t *)&v489, 0, 2, 1);
  v472 = (JSC::VariableEnvironment *)(a1 + 88);
  JSC::BytecodeGenerator::initializeBlockScopedFunctions(a2, (uint64_t *)(a1 + 88), a1 + 112, (uint64_t)v489);
  v9 = v489;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 120))(*(_QWORD *)(a1 + 128)))
    JSC::BytecodeGenerator::emitNodeInIgnoreResultPosition((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(a1 + 128), v10, v11, v12, v13, v14, v15);
  v16 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v22 = v16;
  if (v16)
    ++*v16;
  v23 = *(_BYTE **)(a1 + 136);
  v24 = *(_BYTE *)(a2 + 709);
  v25 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v467 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v23[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v23 + 8), v17, v18, v19, v20, v21);
    (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v23 + 16))(v23, a2, v22);
  }
  *(_BYTE *)(a2 + 710) = v25;
  *(_BYTE *)(a2 + 709) = v24;
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 112))(*(_QWORD *)(a1 + 128));
  v31 = *(uint64_t **)(a1 + 128);
  v483 = (uint64_t)v9;
  if (v30)
  {
    v32.n128_f64[0] = JSC::BytecodeGenerator::variable((uint64_t)&v489, a2, v31[4], 0, v26, v27, v28, v29);
    v46 = (_DWORD *)*((_QWORD *)&v490[0] + 1);
    v45 = (WTF::StringImpl *)v489;
    if (!v489)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (!(*(unsigned int (**)(uint64_t *))(*v31 + 144))(v31)
    || (v33 = *(uint64_t **)(*(_QWORD *)(a1 + 128) + 32), !(*(unsigned int (**)(uint64_t *))(*v33 + 40))(v33)))
  {
    v46 = 0;
    goto LABEL_266;
  }
  v32.n128_f64[0] = JSC::BytecodeGenerator::variable((uint64_t)&v489, a2, v33[4], 0, v34, v35, v36, v37);
  v45 = (WTF::StringImpl *)v489;
  if (DWORD1(v490[1]))
    v46 = 0;
  else
    v46 = (_DWORD *)*((_QWORD *)&v490[0] + 1);
  if (v489)
  {
LABEL_19:
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
LABEL_21:
  if (v46)
  {
    v476 = 0;
    ++*v46;
    goto LABEL_23;
  }
LABEL_266:
  v476 = 1;
LABEL_23:
  v47 = *(_QWORD **)(a1 + 136);
  v48 = (*(uint64_t (**)(_QWORD *, __n128))(*v47 + 112))(v47, v32);
  v469 = a3;
  if ((v48 & 1) != 0)
  {
LABEL_24:
    v53 = v47[4];
LABEL_25:
    JSC::BytecodeGenerator::variable((uint64_t)&v489, a2, v53, 0, v49, v50, v51, v52);
    v475 = 0;
    v54 = v489;
    v488[0] = v490[0];
    *(_OWORD *)((char *)v488 + 13) = *(_OWORD *)((char *)v490 + 13);
  }
  else
  {
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD *))(*v47 + 120))(v47))
      {
        v53 = v47[8];
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v47 + 224))(v47))
        break;
      if (!(*(unsigned int (**)(_QWORD *))(*v47 + 184))(v47))
      {
        v54 = 0;
        v475 = 1;
        goto LABEL_26;
      }
      do
      {
        v451 = v47;
        v47 = (_QWORD *)v47[5];
      }
      while (v47);
      v47 = (_QWORD *)v451[4];
      if (((*(uint64_t (**)(_QWORD *))(*v47 + 112))(v47) & 1) != 0)
        goto LABEL_24;
    }
    JSC::Symbols::thisPrivateName[0] += 2;
    v491[0] = JSC::Symbols::thisPrivateName;
    JSC::BytecodeGenerator::variable((uint64_t)&v489, a2, (uint64_t)v491, 0, v447, v448, v449, v450);
    v54 = v489;
    v488[0] = v490[0];
    *(_OWORD *)((char *)v488 + 13) = *(_OWORD *)((char *)v490 + 13);
    if (JSC::Symbols::thisPrivateName[0] == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, v452, v453, v454, v455, v456, v457, v458);
      WTF::fastFree(v459, v460, v461, v462, v463, v464, v465, v466);
    }
    else
    {
      JSC::Symbols::thisPrivateName[0] -= 2;
    }
    v475 = 0;
  }
LABEL_26:
  v55 = *(_DWORD **)(a1 + 144);
  v468 = v55[3];
  v471 = v55[5];
  v470 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 104))(v55);
  v56 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v57 = v56;
  if (v56)
    ++*v56;
  v58 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v64 = JSC::BytecodeGenerator::emitLoad(a2, v58, 0xFFFE000000000000, v59, v60, v61, v62, v63);
  if (v64)
    ++*v64;
  v480 = v64;
  v65 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v71 = JSC::BytecodeGenerator::emitLoad(a2, v65, 0xFFFE000000000000, v66, v67, v68, v69, v70);
  if (v71)
    ++*v71;
  v479 = v71;
  v474 = v46;
  v72 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v77 = v72;
  if (v72)
    ++*v72;
  JSC::BytecodeGenerator::newLabelScope(&v487, a2, 0, 0, v73, v74, v75, v76);
  v482 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v84 = v482[1];
  v85 = v22[1];
  v86 = (v84 - 1073741808) < 0x80;
  if (v84 <= 0x3FFFFFFF)
    v86 = (v84 + 128) < 0x90;
  if (v86
    && ((int)v85 <= 0x3FFFFFFF
      ? (v87 = (v85 + 128) < 0x90)
      : (v87 = (v85 - 1073741808) < 0x80),
        v87))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x74, v78, v79, v80, v81, v82, v83);
    LOBYTE(v489) = 116;
    v88 = *(unsigned int *)(a2 + 12);
    v89 = *(unsigned int *)(a2 + 16);
    if (v88 > v89)
    {
      *(_DWORD *)(a2 + 16) = v89 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v89) = 116;
    }
    else
    {
      if ((_DWORD)v88 == *(_DWORD *)(a2 + 8))
      {
        v354 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v88 + 1), (unint64_t)&v489);
        v88 = *(unsigned int *)(a2 + 12);
        v90 = *(_QWORD *)a2;
        v91 = *v354;
      }
      else
      {
        v90 = *(_QWORD *)a2;
        v91 = 116;
      }
      *(_BYTE *)(v90 + v88) = v91;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
    v92 = v84 + 16;
    if (v84 <= 0x3FFFFFFF)
      v92 = v84;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v92);
    v93 = v85 + 16;
    if ((int)v85 <= 0x3FFFFFFF)
      v93 = v85;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v93);
  }
  else if ((JSC::OpGetPropertyEnumerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v84, v22[1], v79, v80, v81, v82, v83) & 1) == 0)
  {
    JSC::OpGetPropertyEnumerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v84, v85, v94, v95, v96, v97, v98);
  }
  v473 = v54;
  ++*v482;
  if (v57)
    --*v57;
  v99 = v487;
  v100 = *(_QWORD *)(v487 + 24);
  v101 = v482[1];
  v106 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0xC9u, v94, v95, v96, v97, v98)[1];
  *(_BYTE *)(v100 + 8) = 1;
  v107 = *(unsigned int *)(v100 + 4);
  if ((_DWORD)v107 == -1)
  {
    v108 = 1;
  }
  else
  {
    v100 = *(unsigned int *)(v100 + 4);
    v108 = 2;
  }
  if (v107 == 0xFFFFFFFFLL)
    v109 = 1;
  else
    v109 = 2;
  LOBYTE(v489) = v109;
  HIDWORD(v489) = 0;
  *(_QWORD *)&v490[0] = a2;
  *((_QWORD *)&v490[0] + 1) = v100;
  if ((JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v101, v106, (unsigned __int8 *)&v489, v102, v103, v104, v105) & 1) == 0)
  {
    LOBYTE(v489) = v108;
    HIDWORD(v489) = 0;
    *(_QWORD *)&v490[0] = a2;
    *((_QWORD *)&v490[0] + 1) = v100;
    if ((JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v101, v106, (unsigned __int8 *)&v489) & 1) == 0)
    {
      LOBYTE(v489) = v108;
      HIDWORD(v489) = 0;
      *(_QWORD *)&v490[0] = a2;
      *((_QWORD *)&v490[0] + 1) = v100;
      JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v101, v106, (unsigned __int8 *)&v489, v111, v112, v113, v114);
    }
  }
  v477 = v99;
  v115 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v99 + 32), a2, v115, v110, v111, v112, v113, v114);
  v123 = *(_QWORD *)(a2 + 24);
  v124 = *(unsigned int *)(v123 + 28);
  v125 = (int *)v483;
  if (!(_DWORD)v124 || v115 != *(_DWORD *)(*(_QWORD *)(v123 + 16) + 4 * v124 - 4))
  {
    LODWORD(v489) = v115;
    v126 = (_QWORD *)(v123 + 16);
    if ((_DWORD)v124 == *(_DWORD *)(v123 + 24))
      *(_DWORD *)(*(_QWORD *)(v123 + 16) + 4 * *(unsigned int *)(v123 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v126, v124 + 1, (unint64_t)&v489);
    else
      *(_DWORD *)(*v126 + 4 * v124) = v115;
    ++*(_DWORD *)(v123 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v478 = v22;
  JSC::BytecodeGenerator::emitLoopHint((JSC::BytecodeGenerator *)a2, v116, v117, v118, v119, v120, v121, v122);
  JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(a2, (JSC::VariableEnvironment *)(a1 + 80), v125, v127, v128, v129, v130, v131);
  v138 = *(_BYTE *)(a2 + 104);
  v483 = a2;
  v481 = v77;
  if ((v138 & 1) != 0 && !*(_BYTE *)(a2 + 707))
  {
    v437 = *(_QWORD *)(a1 + 128);
    if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v437 + 8)
      || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v437 + 12)
      || *(_DWORD *)(a2 + 744) != *(_DWORD *)(v437 + 16)
      || *(_DWORD *)(a2 + 748) != 5)
    {
      v438 = *(_QWORD *)(v437 + 8);
      *(_DWORD *)(a2 + 744) = *(_DWORD *)(v437 + 16);
      *(_QWORD *)(a2 + 736) = v438;
      *(_DWORD *)(a2 + 748) = 5;
      v439 = *(_DWORD *)(v437 + 8);
      v440 = *(_DWORD *)(v437 + 12);
      v441 = *(_DWORD *)(v437 + 16);
      if (v439 != -1 || v440 != -1 || v441 != -1)
      {
        v442 = *(_QWORD *)(v483 + 192);
        v443 = *(_DWORD *)(v442 + 176);
        v132 = v440 - v443;
        v444 = v441 >= v443;
        v445 = v441 - v443;
        if (!v444)
          v445 = 0;
        v444 = v132 >= v445;
        v446 = v132 - v445;
        if (v444)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(v483 + 24), *(unsigned int *)(v483 + 12), v132, 0, 0, (v439 + ~*(_DWORD *)(v442 + 184)) | (unint64_t)(v446 << 32));
      }
      a2 = v483;
      JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(v483, 5, v132, v133, v134, v135, v136, v137);
      v77 = v481;
    }
  }
  v139 = v77[1];
  v140 = v480[1];
  v141 = v479[1];
  v142 = v478[1];
  v143 = v482[1];
  v144 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
  *(_BYTE *)(v144 + 4) |= 1u;
  v145 = *(_QWORD *)(v144 + 16);
  v146 = *(unsigned int *)(v145 + 152);
  *(_DWORD *)(v145 + 152) = v146 + 1;
  v147 = (v139 - 1073741808) < 0x80;
  if (v139 <= 0x3FFFFFFF)
    v147 = (v139 + 128) < 0x90;
  if (!v147)
    goto LABEL_235;
  if (!((int)v140 <= 0x3FFFFFFF ? (v140 + 128) < 0x90 : (v140 - 1073741808) < 0x80))
    goto LABEL_235;
  v149 = (v141 - 1073741808) < 0x80;
  if ((int)v141 <= 0x3FFFFFFF)
    v149 = (v141 + 128) < 0x90;
  if (!v149)
    goto LABEL_235;
  if (!((int)v142 <= 0x3FFFFFFF ? (v142 + 128) < 0x90 : (v142 - 1073741808) < 0x80))
    goto LABEL_235;
  v151 = (v143 - 1073741808) < 0x80;
  if ((int)v143 <= 0x3FFFFFFF)
    v151 = (v143 + 128) < 0x90;
  if (v151 && v146 <= 0xFF)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x26, v132, v133, v134, v135, v136, v137);
    LOBYTE(v489) = 38;
    v152 = *(unsigned int *)(a2 + 12);
    v153 = *(unsigned int *)(a2 + 16);
    if (v152 > v153)
    {
      *(_DWORD *)(a2 + 16) = v153 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v153) = 38;
    }
    else
    {
      if ((_DWORD)v152 == *(_DWORD *)(a2 + 8))
      {
        v355 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v152 + 1), (unint64_t)&v489);
        v152 = *(unsigned int *)(a2 + 12);
        v154 = *(_QWORD *)a2;
        v155 = *v355;
      }
      else
      {
        v154 = *(_QWORD *)a2;
        v155 = 38;
      }
      *(_BYTE *)(v154 + v152) = v155;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
    v156 = v139 + 16;
    if (v139 <= 0x3FFFFFFF)
      v156 = v139;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v156);
    v157 = v140 + 16;
    if ((int)v140 <= 0x3FFFFFFF)
      v157 = v140;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v157);
    v158 = v141 + 16;
    if ((int)v141 <= 0x3FFFFFFF)
      v158 = v141;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v158);
    v159 = v142 + 16;
    if ((int)v142 <= 0x3FFFFFFF)
      v159 = v142;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v159);
    v160 = v143 + 16;
    if ((int)v143 <= 0x3FFFFFFF)
      v160 = v143;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a2, v160);
    LOBYTE(v489) = v146;
    v166 = *(unsigned int *)(a2 + 12);
    v167 = *(unsigned int *)(a2 + 16);
    if (v166 > v167)
    {
      *(_DWORD *)(a2 + 16) = v167 + 1;
      *(_BYTE *)(*(_QWORD *)a2 + v167) = v146;
    }
    else
    {
      if ((_DWORD)v166 == *(_DWORD *)(a2 + 8))
        *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v166 + 1), (unint64_t)&v489);
      else
        *(_BYTE *)(*(_QWORD *)a2 + v166) = v146;
      *(int32x2_t *)(a2 + 12) = vadd_s32(*(int32x2_t *)(a2 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_235:
    if (!JSC::OpEnumeratorNext::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v139, v140, v141, v142, v143, v146))JSC::OpEnumeratorNext::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v139, v140, v141, v142, v143, v146, v165);
  }
  v168 = v477;
  v169 = *(_QWORD *)(v477 + 24);
  v170 = v481;
  v171 = v481[1];
  v176 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0xCAu, v161, v162, v163, v164, v165)[1];
  *(_BYTE *)(v169 + 8) = 1;
  v177 = *(unsigned int *)(v169 + 4);
  if ((_DWORD)v177 == -1)
  {
    v178 = 1;
  }
  else
  {
    v169 = *(unsigned int *)(v169 + 4);
    v178 = 2;
  }
  if (v177 == 0xFFFFFFFFLL)
    v179 = 1;
  else
    v179 = 2;
  LOBYTE(v489) = v179;
  HIDWORD(v489) = 0;
  *(_QWORD *)&v490[0] = a2;
  *((_QWORD *)&v490[0] + 1) = v169;
  if ((JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v171, v176, (unsigned __int8 *)&v489, v172, v173, v174, v175) & 1) == 0)
  {
    LOBYTE(v489) = v178;
    HIDWORD(v489) = 0;
    *(_QWORD *)&v490[0] = a2;
    *((_QWORD *)&v490[0] + 1) = v169;
    if ((JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v171, v176, (unsigned __int8 *)&v489) & 1) == 0)
    {
      LOBYTE(v489) = v178;
      HIDWORD(v489) = 0;
      *(_QWORD *)&v490[0] = a2;
      *((_QWORD *)&v490[0] + 1) = v169;
      JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v171, v176, (unsigned __int8 *)&v489, v376, v377, v378, v379);
    }
  }
  v491[2] = a1;
  v492[0] = (uint64_t)v170;
  v491[0] = a2;
  v491[1] = v492;
  v186 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 112))(*(_QWORD *)(a1 + 128));
  v187 = *(uint64_t ***)(a1 + 128);
  v188 = v478;
  v189 = (WTF::StringImpl *)v473;
  if (v186)
  {
    JSC::ForInNode::emitLoopHeader(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()((uint64_t)v491, v187[4], v180, v181, v182, v183, v184, v185);
    v198 = v474;
  }
  else
  {
    v196 = ((uint64_t (*)(uint64_t **))(*v187)[15])(v187);
    v197 = *(uint64_t ***)(a1 + 128);
    v198 = v474;
    if (v196)
    {
      JSC::ForInNode::emitLoopHeader(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0::operator()((uint64_t)v491, v197[8], v190, v191, v192, v193, v194, v195);
    }
    else
    {
      v199 = ((uint64_t (*)(uint64_t **))(*v197)[17])(v197);
      v206 = *(_QWORD *)(a1 + 128);
      if (!v199)
      {
        v207 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v206 + 128))(*(_QWORD *)(a1 + 128));
        v214 = *(_QWORD *)(a1 + 128);
        if (!v207)
        {
          if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v214 + 144))(*(_QWORD *)(a1 + 128)))
          {
            __break(0xC471u);
            JUMPOUT(0x198280948);
          }
          v215 = *(_QWORD *)(a1 + 128);
          v216 = *(uint64_t **)(v215 + 32);
          if (((*(uint64_t (**)(uint64_t *))(*v216 + 40))(v216) & 1) != 0)
          {
            v226.n128_f64[0] = JSC::BytecodeGenerator::variable((uint64_t)&v489, a2, v216[4], 0, v217, v218, v219, v220);
            v168 = v477;
            if (!*((_QWORD *)&v490[0] + 1) || DWORD1(v490[1]))
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v215 + 32) + 24))(*(_QWORD *)(v215 + 32), a2, v492[0], v226);
            }
            else
            {
              v227 = v492[0];
              if (a2 + 208 != *((_QWORD *)&v490[0] + 1) && *((_QWORD *)&v490[0] + 1) != v492[0])
              {
                JSC::BytecodeGenerator::emitMove(a2, *((int **)&v490[0] + 1), v492[0], v221, v222, v223, v224, v225);
                v227 = v492[0];
              }
              JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v227, (uint64_t)&v489, (uint64_t)(v216 + 1), (uint64_t)v216 + 20, v223, v224, v225);
            }
            v235 = (WTF::StringImpl *)v489;
            v489 = 0;
            if (v235)
            {
              if (*(_DWORD *)v235 == 2)
              {
                WTF::StringImpl::~StringImpl(v235, v228, v229, v230, v231, v232, v233, v234);
                WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
              }
              else
              {
                *(_DWORD *)v235 -= 2;
              }
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v215 + 32) + 24))(*(_QWORD *)(v215 + 32), a2, v492[0]);
            v168 = v477;
          }
          goto LABEL_123;
        }
        v412 = (_DWORD *)JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(v214 + 64), v208, v209, v210, v211, v212, v213);
        v413 = v412;
        if (v412)
          ++*v412;
        v414 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, *(_QWORD *)(v214 + 72));
        v415 = v414;
        if (v414)
          ++*v414;
        v416 = v214 + 40;
        v417 = v214 + 52;
        JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(v214 + 28), (_DWORD *)(v214 + 40), (_DWORD *)(v214 + 52));
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v214 + 64) + 240))(*(_QWORD *)(v214 + 64)))
        {
          v425 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v418, v419, v420, v421, v422, v423, v424);
          v426 = v425[1];
          ++*v425;
          JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v413[1], v426, v415[1], *(_DWORD *)(v492[0] + 4), *(_BYTE *)(a2 + 712));
          --*v425;
          JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v492[0], v416, v417);
          v168 = v477;
        }
        else
        {
          JSC::BytecodeGenerator::emitPutByVal(a2, (uint64_t)v413, (uint64_t)v415, v492[0], v421, v422, v423, v424);
          JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v492[0], v214 + 40, v214 + 52);
          v168 = v477;
          if (!v415)
            goto LABEL_291;
        }
        --*v415;
LABEL_291:
        v189 = (WTF::StringImpl *)v473;
        v198 = v474;
        if (v413)
          --*v413;
        goto LABEL_123;
      }
      v410 = (_DWORD *)JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, *(JSC::ExpressionNode **)(v206 + 32), v200, v201, v202, v203, v204, v205);
      if (v410)
      {
        v411 = v410;
        ++*v410;
        JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(v206 + 52), (_DWORD *)(v206 + 64), (_DWORD *)(v206 + 76));
        JSC::BaseDotNode::emitPutProperty(v206, a2, (uint64_t)v411, v492[0]);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v492[0], v206 + 64, v206 + 76);
        --*v411;
      }
      else
      {
        JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(v206 + 52), (_DWORD *)(v206 + 64), (_DWORD *)(v206 + 76));
        JSC::BaseDotNode::emitPutProperty(v206, a2, 0, v492[0]);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, v492[0], v206 + 64, v206 + 76);
      }
      v189 = (WTF::StringImpl *)v473;
      v198 = v474;
    }
  }
LABEL_123:
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if ((v468 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198280D0CLL);
    }
    a2 = v483;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(v483, v468, v229, v230, v231, v232, v233, v234);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v168 = v477;
    v188 = v478;
    v189 = (WTF::StringImpl *)v473;
    v198 = v474;
  }
  LOBYTE(v484) = 0;
  v486 = 0;
  if (v475)
  {
    JSC::BytecodeGenerator::pushForInScope(a2, v198, v481, v479, v482, v480, (uint64_t)&v484);
  }
  else if (v189)
  {
    *(_DWORD *)v189 += 2;
    v484 = v189;
    v485[0] = v488[0];
    *(_OWORD *)((char *)v485 + 13) = *(_OWORD *)((char *)v488 + 13);
    v486 = 1;
    JSC::BytecodeGenerator::pushForInScope(a2, v198, v481, v479, v482, v480, (uint64_t)&v484);
    v484 = 0;
    if (*(_DWORD *)v189 == 2)
    {
      WTF::StringImpl::~StringImpl(v189, v301, v302, v303, v304, v305, v306, v307);
      WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
    }
    else
    {
      *(_DWORD *)v189 -= 2;
    }
  }
  else
  {
    v484 = 0;
    v485[0] = v488[0];
    *(_OWORD *)((char *)v485 + 13) = *(_OWORD *)((char *)v488 + 13);
    v486 = 1;
    JSC::BytecodeGenerator::pushForInScope(a2, v198, v481, v479, v482, v480, (uint64_t)&v484);
    v484 = 0;
  }
  v236 = *(JSC::StatementNode **)(a1 + 144);
  v237 = *(_BYTE *)(a2 + 709);
  v238 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)v467 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*((_BYTE *)v236 + 24))
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, v236);
    (*(void (**)(JSC::StatementNode *, uint64_t, int *))(*(_QWORD *)v236 + 16))(v236, a2, v469);
  }
  *(_BYTE *)(a2 + 710) = v238;
  *(_BYTE *)(a2 + 709) = v237;
  if ((v476 & 1) == 0)
  {
    v247 = *(unsigned int *)(a2 + 476);
    if (!(_DWORD)v247)
    {
      __break(0xC471u);
      JUMPOUT(0x198280D54);
    }
    v248 = *(_DWORD *)(a2 + 12);
    v249 = *(_QWORD *)(*(_QWORD *)(a2 + 464) + 8 * v247 - 8);
    v250 = *(_QWORD *)(a2 + 24);
    LOBYTE(v492[0]) = 0;
    v251 = *(_DWORD *)(v249 + 100);
    if (v251 < v248)
    {
      v252 = *(_QWORD *)a2;
      v253 = (uint64_t *)v483;
      while (1)
      {
        v254 = (unsigned __int8 *)(v252 + v251);
        v255 = *v254;
        v256 = v255;
        if ((v255 | 2) == 0x82)
          v256 = v254[1];
        v257 = v251;
        if (v256 < 5)
        {
          v353 = *v254;
          if ((v255 | 2) == 0x82)
            v353 = v254[1];
          v258 = bytecodeCheckpointCountTable[v353];
          if (!(_BYTE)v258)
            goto LABEL_140;
        }
        else
        {
          v258 = 1;
        }
        do
        {
          --v258;
          v259 = (JSC::OpEnumeratorHasOwnProperty *)(*v253 + v257);
          v260 = *(_DWORD *)(**(_QWORD **)(v250 + 8) + 16) & 0x7FFFFFFF;
          v489 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),JSC::ForInContext::finalize(JSC::BytecodeGenerator &,JSC::UnlinkedCodeBlockGenerator *,unsigned int)::$_0>::implFunction;
          *(_QWORD *)&v490[0] = &v489;
          *((_QWORD *)&v490[0] + 1) = v249;
          *(_QWORD *)&v490[1] = v492;
          JSC::computeDefsForBytecodeIndexImpl(v260, v259, v258, (uint64_t)&v489, v246);
        }
        while ((_BYTE)v258);
        v252 = *v253;
        v255 = *(unsigned __int8 *)(*v253 + v257);
LABEL_140:
        v261 = v255;
        if ((v255 | 2) == 0x82)
          v261 = *(unsigned __int8 *)(v252 + v257 + 1);
        v262 = v255 == 128;
        if (v255 == 130)
          v262 = 2;
        if (v255 == 128 || v255 == 130)
          v264 = 2;
        else
          v264 = 1;
        if (!LOBYTE(v492[0]))
        {
          v251 = v264 + v257 + (JSC::opcodeLengths[v261] << v262);
          if (v251 < v248)
            continue;
        }
        a2 = v483;
        v168 = v477;
        v188 = v478;
        if (LOBYTE(v492[0]))
        {
          v356 = *(unsigned int *)(v249 + 132);
          if ((_DWORD)v356)
          {
            v357 = *(unsigned int **)(v249 + 120);
            v358 = &v357[2 * v356];
            do
            {
              v360 = *v357;
              v359 = v357[1];
              v361 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::size((unsigned __int8 *)(*(_QWORD *)v483 + v360)) + v360;
              *(_DWORD *)(v483 + 16) = v360;
              v362 = (int *)(*(_QWORD *)v483 + v360);
              a2 = v483;
              JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorGetByVal>(v362, (uint64_t)&v489);
              *(_DWORD *)(a2 + 36) = 115;
              v363 = v489;
              v364 = HIDWORD(v489);
              v365 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
              *(_BYTE *)(v365 + 4) |= 1u;
              v366 = (*(_DWORD *)(v365 + 8) + 1);
              *(_DWORD *)(v365 + 8) = v366;
              JSC::OpGetByVal::emit<JSC::BytecodeGenerator>(a2, v363, v364, v359, v366, v367, v368, v369);
              if (v361 > *(unsigned int *)(a2 + 16))
              {
                do
                {
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x7E, v240, v241, v242, v243, v244, v245);
                  LOBYTE(v491[0]) = 126;
                  v370 = *(unsigned int *)(a2 + 12);
                  v371 = *(unsigned int *)(a2 + 16);
                  if (v370 > v371)
                  {
                    *(_DWORD *)(a2 + 16) = v371 + 1;
                    *(_BYTE *)(*(_QWORD *)a2 + v371) = 126;
                    v372 = *(_DWORD *)(a2 + 16);
                  }
                  else
                  {
                    if ((_DWORD)v370 == *(_DWORD *)(a2 + 8))
                      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v370 + 1), (unint64_t)v491);
                    else
                      *(_BYTE *)(*(_QWORD *)a2 + v370) = 126;
                    v372 = *(_DWORD *)(a2 + 16) + 1;
                    ++*(_DWORD *)(a2 + 12);
                    *(_DWORD *)(a2 + 16) = v372;
                  }
                }
                while (v361 > v372);
              }
              v357 += 2;
            }
            while (v357 != v358);
          }
          v373 = *(unsigned int *)(v249 + 116);
          if ((_DWORD)v373)
          {
            v427 = *(unsigned int **)(v249 + 104);
            v428 = &v427[2 * v373];
            do
            {
              v430 = *v427;
              v429 = v427[1];
              v431 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::size((unsigned __int8 *)(*(_QWORD *)a2 + v430)) + v430;
              *(_DWORD *)(a2 + 16) = v430;
              JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorInByVal>((int *)(*(_QWORD *)a2 + v430), (uint64_t)&v489);
              *(_DWORD *)(a2 + 36) = 115;
              JSC::OpInByVal::emit<JSC::BytecodeGenerator>(a2, v489, HIDWORD(v489), v429, v432, v433, v434, v435);
              while (v431 > *(unsigned int *)(a2 + 16))
                JSC::OpNop::emit<(JSC::OpcodeSize)1,JSC::BytecodeGenerator,(JSC::FitsAssertion)0,true>(a2, (uint64_t)v239, v240, v241, v242, v243, v244, v245);
              v427 += 2;
            }
            while (v427 != v428);
          }
          v374 = *(unsigned int *)(v249 + 148);
          if ((_DWORD)v374)
          {
            v398 = *(unsigned int **)(v249 + 136);
            v399 = &v398[2 * v374];
            do
            {
              v401 = *v398;
              v400 = v398[1];
              v402 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::size((unsigned __int8 *)(*(_QWORD *)v483 + v401)) + v401;
              *(_DWORD *)(v483 + 16) = v401;
              v403 = (unsigned __int8 *)(*(_QWORD *)v483 + v401);
              a2 = v483;
              JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorPutByVal>(v403, (uint64_t)&v489);
              *(_DWORD *)(a2 + 36) = 115;
              JSC::OpPutByVal::emit<JSC::BytecodeGenerator>(a2, v489, v400, HIDWORD(v490[0]), v490[1], v404, v405, v406);
              if (v402 > *(unsigned int *)(a2 + 16))
              {
                do
                {
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x7E, v240, v241, v242, v243, v244, v245);
                  LOBYTE(v491[0]) = 126;
                  v407 = *(unsigned int *)(a2 + 12);
                  v408 = *(unsigned int *)(a2 + 16);
                  if (v407 > v408)
                  {
                    *(_DWORD *)(a2 + 16) = v408 + 1;
                    *(_BYTE *)(*(_QWORD *)a2 + v408) = 126;
                    v409 = *(_DWORD *)(a2 + 16);
                  }
                  else
                  {
                    if ((_DWORD)v407 == *(_DWORD *)(a2 + 8))
                      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v407 + 1), (unint64_t)v491);
                    else
                      *(_BYTE *)(*(_QWORD *)a2 + v407) = 126;
                    v409 = *(_DWORD *)(a2 + 16) + 1;
                    ++*(_DWORD *)(a2 + 12);
                    *(_DWORD *)(a2 + 16) = v409;
                  }
                }
                while (v402 > v409);
              }
              v398 += 2;
            }
            while (v398 != v399);
          }
          v375 = *(unsigned int *)(v249 + 164);
          v188 = v478;
          if ((_DWORD)v375)
          {
            v380 = *(unsigned int **)(v249 + 152);
            v381 = &v380[2 * v375];
            do
            {
              v382 = *v380;
              v383 = (unsigned __int8 *)(*(_QWORD *)a2 + v382);
              v384 = *v383;
              v385 = v384;
              if ((v384 | 2) == 0x82)
                v385 = v383[1];
              if (v385 != 46)
              {
                __break(0xC471u);
                JUMPOUT(0x198280B54);
              }
              if (v384 != 130)
              {
                __break(0xC471u);
                JUMPOUT(0x198280B74);
              }
              v386 = v380[1];
              v387 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::size(v383);
              *(_DWORD *)(a2 + 16) = v382;
              v388 = v387 + v382;
              *(_DWORD *)(a2 + 36) = 115;
              LOBYTE(v489) = 0;
              HIDWORD(v489) = 0;
              *(_QWORD *)&v490[0] = 0;
              DWORD2(v490[0]) = v386 - v382;
              JSC::OpJmp::emit<JSC::BytecodeGenerator>(a2, (__int128 *)&v489, v389, v390, v391, v392, v393, v394);
              v188 = v478;
              if (v388 > *(unsigned int *)(a2 + 16))
              {
                do
                {
                  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a2, (void *)0x7E, v240, v241, v242, v243, v244, v245);
                  LOBYTE(v491[0]) = 126;
                  v395 = *(unsigned int *)(a2 + 12);
                  v396 = *(unsigned int *)(a2 + 16);
                  if (v395 > v396)
                  {
                    *(_DWORD *)(a2 + 16) = v396 + 1;
                    *(_BYTE *)(*(_QWORD *)a2 + v396) = 126;
                    v397 = *(_DWORD *)(a2 + 16);
                  }
                  else
                  {
                    if ((_DWORD)v395 == *(_DWORD *)(a2 + 8))
                      *(_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (WTF *)(v395 + 1), (unint64_t)v491);
                    else
                      *(_BYTE *)(*(_QWORD *)a2 + v395) = 126;
                    v397 = *(_DWORD *)(a2 + 16) + 1;
                    ++*(_DWORD *)(a2 + 12);
                    *(_DWORD *)(a2 + 16) = v397;
                  }
                }
                while (v388 > v397);
              }
              v380 += 2;
            }
            while (v380 != v381);
          }
          *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 36) = 115;
          v168 = v477;
        }
        break;
      }
    }
    v265 = *(unsigned int *)(a2 + 476);
    if (!(_DWORD)v265)
    {
      __break(0xC471u);
      JUMPOUT(0x198280D5CLL);
    }
    v266 = v265 - 1;
    v267 = *(_QWORD *)(a2 + 464);
    v268 = *(JSC::ForInContext **)(v267 + 8 * v266);
    *(_QWORD *)(v267 + 8 * v266) = 0;
    v189 = (WTF::StringImpl *)v473;
    v198 = v474;
    if (v268)
    {
      if (*(_DWORD *)v268 == 1)
      {
        JSC::ForInContext::~ForInContext(v268, v239, v240, v241, v242, v243, v244, v245);
        WTF::fastFree(v340, v341, v342, v343, v344, v345, v346, v347);
      }
      else
      {
        --*(_DWORD *)v268;
      }
    }
    *(_DWORD *)(a2 + 476) = v266;
  }
  v269 = v471 + v470;
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if ((v269 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198280D2CLL);
    }
    a2 = v483;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(v483, v471 + v470, v240, v241, v242, v243, v244, v245);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v168 = v477;
    v188 = v478;
    v189 = (WTF::StringImpl *)v473;
    v198 = v474;
  }
  v270 = *(_QWORD *)(v168 + 32);
  *(_BYTE *)(v270 + 8) = 1;
  v271 = *(unsigned int *)(v270 + 4);
  if ((_DWORD)v271 == -1)
    v272 = v270;
  else
    v272 = *(unsigned int *)(v270 + 4);
  if ((_DWORD)v271 == -1)
    v273 = 1;
  else
    v273 = 2;
  if (v271 == 0xFFFFFFFFLL)
    v274 = 1;
  else
    v274 = 2;
  LOBYTE(v489) = v274;
  HIDWORD(v489) = 0;
  *(_QWORD *)&v490[0] = a2;
  *((_QWORD *)&v490[0] + 1) = v272;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v489, v240, v241, v242, v243, v244, v245) & 1) == 0)
  {
    LOBYTE(v489) = v273;
    HIDWORD(v489) = 0;
    *(_QWORD *)&v490[0] = a2;
    *((_QWORD *)&v490[0] + 1) = v272;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v489, v275, v276, v277, v278, v279, v280) & 1) == 0)
    {
      LOBYTE(v489) = v273;
      HIDWORD(v489) = 0;
      *(_QWORD *)&v490[0] = a2;
      *((_QWORD *)&v490[0] + 1) = v272;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v489);
    }
  }
  v281 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v168 + 24), a2, v281, v276, v277, v278, v279, v280);
  v288 = *(_QWORD *)(a2 + 24);
  v289 = *(unsigned int *)(v288 + 28);
  if (!(_DWORD)v289 || v281 != *(_DWORD *)(*(_QWORD *)(v288 + 16) + 4 * v289 - 4))
  {
    LODWORD(v489) = v281;
    v290 = (_QWORD *)(v288 + 16);
    if ((_DWORD)v289 == *(_DWORD *)(v288 + 24))
      *(_DWORD *)(*(_QWORD *)(v288 + 16) + 4 * *(unsigned int *)(v288 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v290, v289 + 1, (unint64_t)&v489);
    else
      *(_DWORD *)(*v290 + 4 * v289) = v281;
    ++*(_DWORD *)(v288 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  --*(_DWORD *)v168;
  v292 = v479;
  v291 = v480;
  if (v481)
    --*v481;
  if (v292)
    --*v292;
  if (v291)
    --*v291;
  --*v482;
  JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, v472, v282, v283, v284, v285, v286, v287);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if ((v269 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198280D4CLL);
    }
    v436 = v483;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(v483, v269, v294, v295, v296, v297, v298, v299);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(v436 + 24), *(_DWORD *)(v436 + 48));
    v188 = v478;
    v189 = (WTF::StringImpl *)v473;
    v198 = v474;
  }
  v300 = v475;
  if (!v189)
    v300 = 1;
  if ((v300 & 1) == 0)
  {
    if (*(_DWORD *)v189 == 2)
    {
      WTF::StringImpl::~StringImpl(v189, v293, v294, v295, v296, v297, v298, v299);
      WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
    }
    else
    {
      *(_DWORD *)v189 -= 2;
    }
  }
  if ((v476 & 1) == 0)
    --*v198;
  if (v188)
    --*v188;
}

uint64_t JSC::BytecodeGenerator::emitNode(JSC::BytecodeGenerator *this, uint64_t a2, JSC::StatementNode *a3)
{
  char v4;
  char v5;
  uint64_t result;
  uint64_t v9;

  v4 = *((_BYTE *)this + 709);
  v5 = *((_BYTE *)this + 710);
  *(_WORD *)((char *)this + 709) = 0;
  if ((unint64_t)&v9 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
  {
    *((_BYTE *)this + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  }
  else
  {
    if (*((_BYTE *)a3 + 24))
      JSC::BytecodeGenerator::emitDebugHook(this, a3);
    result = (*(uint64_t (**)(JSC::StatementNode *, JSC::BytecodeGenerator *, uint64_t))(*(_QWORD *)a3 + 16))(a3, this, a2);
  }
  *((_BYTE *)this + 710) = v5;
  *((_BYTE *)this + 709) = v4;
  return result;
}

uint64_t JSC::ForOfNode::emitBytecode(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30[4];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 104))(*(_QWORD *)(a1 + 128)) & 1) == 0)
    return JSC::ThrowableExpressionData::emitThrowReferenceError((_DWORD *)(a1 + 40), a2, "Left side of for-of statement is not a reference.", 0x32uLL, 0, v6, v7, v8);
  if (*(_BYTE *)(a2 + 416) != 2
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144)))
  {
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v25, v26, v27, v28, v29);
  }
  v30[0] = 0;
  JSC::BytecodeGenerator::pushLexicalScopeInternal(a2, (JSC::VariableEnvironment *)(a1 + 88), 0, 0, v30, 0, 2, 1);
  JSC::BytecodeGenerator::initializeBlockScopedFunctions(a2, (uint64_t *)(a1 + 88), a1 + 112, v30[0]);
  v9 = (int *)v30[0];
  v30[0] = (unint64_t)WTF::ScopedLambdaFunctor<void ()(JSC::BytecodeGenerator &,JSC::RegisterID *),JSC::ForOfNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0>::implFunction;
  v30[1] = (unint64_t)v30;
  v30[2] = a1;
  v30[3] = (unint64_t)a3;
  JSC::BytecodeGenerator::emitEnumeration(a2, (_DWORD *)(a1 + 40), *(_BYTE **)(a1 + 136), (uint64_t)v30, a1, v9);
  JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, (JSC::VariableEnvironment *)(a1 + 88), v10, v11, v12, v13, v14, v15);
  v16 = *(_DWORD **)(a1 + 144);
  v17 = v16[5];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 104))(v16);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    if (v17 + (_DWORD)result < 0)
    {
      result = 1921;
      __break(0xC471u);
    }
    else
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v17 + result, v19, v20, v21, v22, v23, v24);
      return (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    }
  }
  return result;
}

uint64_t JSC::ContinueNode::emitBytecode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned __int8 v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;

  v4 = JSC::BytecodeGenerator::continueTarget(a2, *(uint64_t **)(a1 + 80));
  result = JSC::BytecodeGenerator::emitJumpViaFinallyIfNeeded(a2, *(_DWORD *)(v4 + 16), *(_DWORD **)(v4 + 32));
  if ((result & 1) == 0)
  {
    v12 = *(int *)(v4 + 16);
    if (*(_DWORD *)(a2 + 408) + *(_DWORD *)(a2 + 412) == (_DWORD)v12)
    {
      v13 = -2;
    }
    else
    {
      if (v12 >> 4 >= *(unsigned int *)(a2 + 444))
      {
        __break(0xC471u);
        goto LABEL_24;
      }
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 432) + 8 * (v12 >> 4)) + 16 * (v12 & 0xF) + 4);
    }
    JSC::BytecodeGenerator::restoreScopeRegister(a2, v13, v6, v7, v8, v9, v10, v11);
    v20 = *(_QWORD *)(v4 + 32);
    *(_BYTE *)(v20 + 8) = 1;
    v21 = *(unsigned int *)(v20 + 4);
    if ((_DWORD)v21 == -1)
      v22 = v20;
    else
      v22 = *(unsigned int *)(v20 + 4);
    if ((_DWORD)v21 == -1)
      v23 = 1;
    else
      v23 = 2;
    if (v21 == 0xFFFFFFFFLL)
      v24 = 1;
    else
      v24 = 2;
    v26[0] = v24;
    v27 = 0;
    v28 = a2;
    v29 = v22;
    result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v26, v14, v15, v16, v17, v18, v19);
    if ((result & 1) == 0)
    {
      v26[0] = v23;
      v27 = 0;
      v28 = a2;
      v29 = v22;
      result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v26, v6, v7, v8, v9, v10, v11);
      if ((result & 1) == 0)
      {
        v26[0] = v23;
        v27 = 0;
        v28 = a2;
        v29 = v22;
        result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)v26);
      }
    }
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v25 = *(_DWORD *)(a1 + 20);
    if ((v25 & 0x80000000) == 0)
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v25, v6, v7, v8, v9, v10, v11);
      return (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    }
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x1982811E0);
  }
  return result;
}

uint64_t JSC::BreakNode::emitBytecode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned __int8 v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;

  v4 = JSC::BytecodeGenerator::breakTarget(a2, *(uint64_t **)(a1 + 80));
  result = JSC::BytecodeGenerator::emitJumpViaFinallyIfNeeded(a2, *(_DWORD *)(v4 + 16), *(_DWORD **)(v4 + 24));
  if ((result & 1) == 0)
  {
    v12 = *(int *)(v4 + 16);
    if (*(_DWORD *)(a2 + 408) + *(_DWORD *)(a2 + 412) == (_DWORD)v12)
    {
      v13 = -2;
    }
    else
    {
      if (v12 >> 4 >= *(unsigned int *)(a2 + 444))
      {
        __break(0xC471u);
        goto LABEL_24;
      }
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 432) + 8 * (v12 >> 4)) + 16 * (v12 & 0xF) + 4);
    }
    JSC::BytecodeGenerator::restoreScopeRegister(a2, v13, v6, v7, v8, v9, v10, v11);
    v20 = *(_QWORD *)(v4 + 24);
    *(_BYTE *)(v20 + 8) = 1;
    v21 = *(unsigned int *)(v20 + 4);
    if ((_DWORD)v21 == -1)
      v22 = v20;
    else
      v22 = *(unsigned int *)(v20 + 4);
    if ((_DWORD)v21 == -1)
      v23 = 1;
    else
      v23 = 2;
    if (v21 == 0xFFFFFFFFLL)
      v24 = 1;
    else
      v24 = 2;
    v26[0] = v24;
    v27 = 0;
    v28 = a2;
    v29 = v22;
    result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v26, v14, v15, v16, v17, v18, v19);
    if ((result & 1) == 0)
    {
      v26[0] = v23;
      v27 = 0;
      v28 = a2;
      v29 = v22;
      result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v26, v6, v7, v8, v9, v10, v11);
      if ((result & 1) == 0)
      {
        v26[0] = v23;
        v27 = 0;
        v28 = a2;
        v29 = v22;
        result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)v26);
      }
    }
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v25 = *(_DWORD *)(a1 + 20);
    if ((v25 & 0x80000000) == 0)
    {
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v25, v6, v7, v8, v9, v10, v11);
      return (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    }
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x19828134CLL);
  }
  return result;
}

uint64_t JSC::ReturnNode::emitBytecode(uint64_t a1, int32x4_t *a2, int32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  _BYTE *v11;
  __int8 v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  __int8 *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  __int32 v58;
  __int32 v59;
  unsigned __int32 v60;
  int32x4_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char v67[28];
  uint64_t v68;
  int v69;

  if (&a2[13] == a3)
    v10 = 0;
  else
    v10 = (int *)a3;
  v11 = *(_BYTE **)(a1 + 80);
  if (!v11)
  {
    v29 = JSC::BytecodeGenerator::emitLoad((uint64_t)a2, v10, 10, a4, a5, a6, a7, a8);
    v20 = v29;
    if (!v29)
    {
      v21 = &a2[6].i8[8];
      goto LABEL_13;
    }
    v30 = 1;
    goto LABEL_22;
  }
  v12 = a2[44].i8[6];
  a2[44].i8[6] = 0;
  if ((unint64_t)&v66 < *(_QWORD *)(a2[43].i64[1] + 93104))
  {
    a2[44].i8[2] = 1;
    v13 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
  }
  else
  {
    if (v11[24])
      JSC::BytecodeGenerator::emitDebugHook(a2->i8, 5, (uint64_t)(v11 + 8), a4, a5, a6, a7, a8);
    v13 = (int *)(*(uint64_t (**)(_BYTE *, int32x4_t *, int *))(*(_QWORD *)v11 + 16))(v11, a2, v10);
  }
  v20 = v13;
  a2[44].i8[6] = v12;
  if (v13)
    ++*v13;
  if (*(_BYTE *)(**(_QWORD **)(a2[1].i64[1] + 8) + 42) != 15)
    goto LABEL_12;
  v31 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
  v29 = JSC::BytecodeGenerator::emitAwait((uint64_t)a2, v31, (uint64_t)v20, v32, v33, v34, v35, v36);
  if (v29)
    ++*v29;
  if (v20)
  {
    v30 = -1;
LABEL_22:
    *v20 += v30;
  }
  v20 = v29;
LABEL_12:
  v21 = &a2[6].i8[8];
  if ((a2[6].i8[8] & 2) != 0)
  {
    if (v20)
    {
      v37 = v20[1];
      v38 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
      JSC::OpProfileType::emit<JSC::BytecodeGenerator>((uint64_t)a2, v37, 0, 4, 0, v38, v39, v40);
      v41 = *(_DWORD *)(a1 + 56);
      v42 = a2->i32[3] - 1;
      v43 = a2[1].i64[1];
      HIDWORD(v68) = *(_DWORD *)(a1 + 68) - 1;
      v69 = v42;
      LODWORD(v68) = v41;
      WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v43 + 232), &v69, &v68, (uint64_t)v67);
    }
    v21 = &a2[6].i8[8];
  }
LABEL_13:
  result = JSC::BytecodeGenerator::emitReturnViaFinallyIfNeeded((uint64_t)a2, (uint64_t)v20, v14, v15, v16, v17, v18, v19);
  if ((result & 1) == 0)
  {
    if ((a2[6].i8[8] & 1) != 0 && !a2[44].i8[3])
    {
      v57 = (_DWORD *)a2[12].i64[0];
      v58 = v57[7];
      v59 = v57[3];
      v60 = v57[4];
      v61.i64[0] = __PAIR64__(v59, v58);
      v61.i64[1] = v60 | 0x400000000;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(a2[46], v61)), 0xFuLL))) & 1) == 0)
      {
        a2[46].i32[0] = v58;
        a2[46].i32[1] = v59;
        a2[46].i32[2] = v60;
        a2[46].i32[3] = 4;
        if (v58 != -1 || v59 != -1 || v60 != -1)
        {
          v62 = v57[44];
          v23 = v59 - v62;
          v63 = v60 - v62;
          if (v60 < v62)
            v63 = 0;
          v64 = v23 >= v63;
          v65 = v23 - v63;
          if (v64)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(a2[1].i64[1], a2->u32[3], v23, 0, 0, (v58 + ~v57[46]) | (unint64_t)(v65 << 32));
        }
        JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)a2, 4, v23, v24, v25, v26, v27, v28);
      }
    }
    result = JSC::BytecodeGenerator::emitReturn((uint64_t)a2, (uint64_t)v20, v23, v24, v25, v26, v27, v28);
  }
  if ((*v21 & 4) != 0)
  {
    v44 = *(_DWORD *)(a1 + 20);
    if ((v44 & 0x80000000) != 0)
    {
      result = 1921;
      __break(0xC471u);
      return result;
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>((uint64_t)a2, v44, v23, v24, v25, v26, v27, v28);
    result = (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset((JSC::UnlinkedCodeBlockGenerator *)a2[1].i64[1], a2[3].i32[0]);
    if ((a2[6].i8[8] & 4) != 0)
    {
      v50 = JSC::BytecodeGenerator::emitLoad((uint64_t)a2, 0, 10, v45, v46, v47, v48, v49);
      result = JSC::BytecodeGenerator::emitReturn((uint64_t)a2, (uint64_t)v50, v51, v52, v53, v54, v55, v56);
    }
  }
  if (v20)
    --*v20;
  return result;
}

uint64_t JSC::WithNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;

  v11 = (_DWORD *)JSC::BytecodeGenerator::emitNode(this, *(JSC::ExpressionNode **)(a1 + 40), (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11)
    ++*v11;
  v13 = *(_DWORD *)(a1 + 64);
  v28 = *(unsigned int *)(a1 + 56) | ((unint64_t)(*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 68)) << 32);
  v29 = v13;
  JSC::BytecodeGenerator::emitExpressionInfo(this, (_DWORD *)(a1 + 56), &v28, (_DWORD *)(a1 + 56));
  v14 = JSC::BytecodeGenerator::emitPushWithScope((uint64_t)this, (uint64_t)v12);
  if (*((_BYTE *)this + 416) != 2
    && (*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v14))
  {
    JSC::BytecodeGenerator::emitLoad((uint64_t)this, a3, 10, v23, v24, v25, v26, v27);
  }
  JSC::BytecodeGenerator::emitNodeInTailPosition(this, (uint64_t)a3, *(JSC::StatementNode **)(a1 + 48));
  result = JSC::BytecodeGenerator::emitPopWithScope(this, v15, v16, v17, v18, v19, v20, v21);
  if (v12)
    --*v12;
  return result;
}

uint64_t JSC::processClauseList(uint64_t result, uint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6)
{
  uint64_t v11;
  double *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  double v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  _QWORD *v22;
  double *v23;

  if (result)
  {
    v11 = result;
    do
    {
      v23 = 0;
      v12 = **(double ***)v11;
      v23 = v12;
      v13 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v13 == *(_DWORD *)(a2 + 8))
      {
        v22 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v13 + 1, (unint64_t)&v23);
        v13 = *(unsigned int *)(a2 + 12);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = *v22;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v12;
      }
      *(_DWORD *)(a2 + 12) = v13 + 1;
      v14 = (*(uint64_t (**)(double *))(*(_QWORD *)v23 + 24))(v23);
      result = (uint64_t)v23;
      if (v14)
      {
        if (*a3 > 1u || (v18 = v23[4], v19 = (int)v18, v18 != (double)(int)v18))
        {
LABEL_34:
          *a3 = 3;
          return result;
        }
        if (*a5 > v19)
          *a5 = v19;
        if (*a6 < v19)
          *a6 = v19;
        *a3 = 1;
      }
      else
      {
        result = (*(uint64_t (**)(double *))(*(_QWORD *)v23 + 32))(v23);
        if (!(_DWORD)result || (*a3 & 0xFFFFFFFD) != 0)
          goto LABEL_34;
        v15 = **((_QWORD **)v23 + 4);
        if (v15)
        {
          v16 = *(_DWORD *)(v15 + 4) != 1 || *a4 == 0;
          v17 = !v16;
          *a4 = v17;
          if (!v16)
          {
            v20 = *(unsigned __int8 **)(v15 + 8);
            if ((*(_BYTE *)(v15 + 16) & 4) != 0)
              v21 = *v20;
            else
              v21 = *(unsigned __int16 *)v20;
            if (*a5 > v21)
              *a5 = v21;
            if (*a6 < v21)
              *a6 = v21;
          }
        }
        else
        {
          *a4 = 0;
        }
        *a3 = 2;
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
  }
  return result;
}

uint64_t JSC::CaseClauseNode::emitBytecode(uint64_t result, JSC::BytecodeGenerator *this, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _BYTE **v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;

  v10 = result;
  if ((*((_BYTE *)this + 104) & 4) != 0)
  {
    v14 = *(_DWORD *)(result + 16);
    if ((v14 & 0x80000000) != 0)
    {
      result = 1921;
      __break(0xC471u);
      return result;
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>((uint64_t)this, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
    result = (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*((JSC::UnlinkedCodeBlockGenerator **)this + 3), *((_DWORD *)this + 12));
  }
  v11 = *(_BYTE ***)(v10 + 8);
  if (v11)
  {
    v12 = *v11;
    if (*((_BYTE *)this + 416) == 2)
    {
      v13 = 0;
    }
    else
    {
      if (!v12)
        return result;
      v13 = 0;
      do
      {
        result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v12 + 24))(v12);
        if ((_DWORD)result)
          v13 = v12;
        v12 = (_BYTE *)*((_QWORD *)v12 + 4);
      }
      while (v12);
      v12 = *v11;
    }
    for (; v12; v12 = (_BYTE *)*((_QWORD *)v12 + 4))
    {
      if (v12 == v13)
        JSC::BytecodeGenerator::emitLoad((uint64_t)this, a3, 10, a4, a5, a6, a7, a8);
      if ((unint64_t)&v15 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
      {
        *((_BYTE *)this + 706) = 1;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
      }
      else
      {
        if (v12[24])
          JSC::BytecodeGenerator::emitDebugHook(this, (JSC::StatementNode *)v12);
        result = (*(uint64_t (**)(_BYTE *, JSC::BytecodeGenerator *, int *))(*(_QWORD *)v12 + 16))(v12, this, a3);
      }
    }
  }
  return result;
}

_DWORD *JSC::SwitchNode::emitBytecode(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  char v18;
  uint64_t (*v19)(_BYTE *, JSC::BytecodeGenerator *, _QWORD);
  _BYTE *v20;
  JSC::BytecodeGenerator *v21;
  _DWORD *v22;
  JSC::BytecodeGenerator *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  _BYTE *v42;
  JSC::BytecodeGenerator *v43;
  char v44;
  char v45;
  JSC::BytecodeGenerator *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  WTF *v56;
  _DWORD *v57;
  JSC::BytecodeGenerator *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  JSC::BytecodeGenerator *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  JSC::BytecodeGenerator *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  _BOOL4 v135;
  char v136;
  JSC::BytecodeGenerator *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  JSC::BytecodeGenerator *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *j;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _DWORD *v167;
  int v168;
  unint64_t v169;
  unsigned __int8 *v170;
  int v171;
  int v172;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t (*v175)(JSC *, JSC::ExpressionNode *);
  WTF *v176;
  WTF *v177;
  uint64_t v178;
  _DWORD *v179;
  WTF *v180;
  JSC::BytecodeGenerator *v182;
  _DWORD *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *result;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  JSC::BytecodeGenerator *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  unsigned __int8 *v204;
  int v205;
  __int16 v206;
  unsigned __int8 v207;
  unsigned __int8 *v208;
  int v209;
  int v210;
  unsigned __int8 v211;
  JSC::BytecodeGenerator *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  JSC::BytecodeGenerator *v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _DWORD *v230;
  uint64_t v231;
  WTF *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int8x16_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  int v247;
  int v248;
  unint64_t v249;
  uint64_t v250;
  int k;
  WTF::StringImpl *v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  int v271;
  WTF *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF::StringImpl **v276;
  WTF::StringImpl *v277;
  unsigned int v278;
  unsigned int v279;
  WTF::StringImpl *v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  WTF::StringImpl *v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  unint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  int v313;
  _BOOL4 v314;
  _QWORD *v315;
  uint64_t v316;
  WTF::StringImpl **v317;
  WTF::StringImpl *v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  WTF *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  BOOL v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  int *v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  JSC::BytecodeGenerator *v351;
  _BYTE v352[12];
  unsigned int v353;
  uint64_t v354;
  _QWORD *v355;
  int v356;
  _DWORD *v357;
  WTF *v358;
  WTF *v359;
  JSC::VariableEnvironment *v360;
  WTF *v361;
  uint64_t v362;
  _DWORD *v363;
  JSC::BytecodeGenerator *v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v368;
  WTF *v369;
  uint64_t v370;
  _BYTE v371[64];
  WTF *v372;
  uint64_t v373;
  _BYTE v374[64];
  _BYTE v375[24];
  unint64_t v376;
  _BYTE v377[24];
  JSC::BytecodeGenerator *v378;
  unint64_t *v379;
  _BYTE *v380;
  _BYTE v381[24];
  _BYTE v382[24];
  _BYTE v383[24];
  uint64_t v384;

  v384 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 416) != 2)
    JSC::BytecodeGenerator::emitLoad(a2, a3, 10, a4, a5, a6, a7, a8);
  JSC::BytecodeGenerator::newLabelScope(&v365, a2, 1, 0, a5, a6, a7, a8);
  v16 = (_BYTE *)a1[11];
  v17 = *(_BYTE *)(a2 + 709);
  v18 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  v364 = (JSC::BytecodeGenerator *)a2;
  if ((unint64_t)v352 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    v21 = v364;
    *((_BYTE *)v364 + 706) = 1;
    v22 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)v21);
  }
  else
  {
    if (v16[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)v364, 5, (uint64_t)(v16 + 8), v11, v12, v13, v14, v15);
    v19 = *(uint64_t (**)(_BYTE *, JSC::BytecodeGenerator *, _QWORD))(*(_QWORD *)v16 + 16);
    v20 = v16;
    v21 = v364;
    v22 = (_DWORD *)v19(v20, v364, 0);
  }
  *((_BYTE *)v21 + 710) = v18;
  *((_BYTE *)v21 + 709) = v17;
  if (v22)
    ++*v22;
  v363 = v22;
  v372 = 0;
  v23 = v364;
  JSC::BytecodeGenerator::pushLexicalScopeInternal((uint64_t)v364, (JSC::VariableEnvironment *)(a1 + 6), 1, 0, (unint64_t *)&v372, 0, 2, 1);
  v360 = (JSC::VariableEnvironment *)(a1 + 6);
  JSC::BytecodeGenerator::initializeBlockScopedFunctions((uint64_t)v23, a1 + 6, (uint64_t)(a1 + 9), (uint64_t)v372);
  v355 = a1;
  v30 = (uint64_t *)a1[12];
  v359 = (WTF *)v374;
  v372 = (WTF *)v374;
  v373 = 8;
  v358 = (WTF *)v371;
  v369 = (WTF *)v371;
  v370 = 8;
  v367 = 0x80000000;
  v368 = 0x7FFFFFFF;
  v31 = *v30;
  v32 = v30[2];
  v33 = 0;
  if (*v30)
  {
    v34 = *v30;
    do
    {
      ++v33;
      v34 = *(_QWORD *)(v34 + 8);
    }
    while (v34);
  }
  for (; v32; v32 = *(_QWORD *)(v32 + 8))
    ++v33;
  if (v33 <= 2)
    goto LABEL_16;
  *(_DWORD *)v381 = 0;
  v383[0] = 1;
  JSC::processClauseList(v31, (uint64_t)&v369, v381, v383, &v368, &v367);
  JSC::processClauseList(v30[2], (uint64_t)&v369, v381, v383, &v368, &v367);
  if (!*(_DWORD *)v381 || *(_DWORD *)v381 == 3)
    goto LABEL_16;
  if (*(_DWORD *)v381 != 1)
  {
    if (v383[0] && (v301 = v367 - v368, v367 >= v368) && v301 <= 1000 && v301 / (unint64_t)HIDWORD(v370) < 0xA)
      v100 = 2;
    else
      v100 = 3;
LABEL_59:
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v366, (uint64_t)v364, v24, v25, v26, v27, v28, v29);
    if (HIDWORD(v370))
    {
      v107 = 0;
      do
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v381, (uint64_t)v364, v101, v102, v103, v104, v105, v106);
        LODWORD(v108) = HIDWORD(v373);
        if (HIDWORD(v373) == (_DWORD)v373)
        {
          v110 = (uint64_t *)WTF::Vector<WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v372, HIDWORD(v373) + 1, (unint64_t)v381);
          v108 = HIDWORD(v373);
          v111 = v372;
          v112 = *v110;
          *v110 = 0;
          *((_QWORD *)v111 + v108) = v112;
        }
        else
        {
          v109 = *(_QWORD *)v381;
          *(_QWORD *)v381 = 0;
          *((_QWORD *)v372 + HIDWORD(v373)) = v109;
        }
        HIDWORD(v373) = v108 + 1;
        if (*(_QWORD *)v381)
          --**(_DWORD **)v381;
        ++v107;
      }
      while (HIDWORD(v370) > v107);
    }
    if (v100 == 3)
    {
      v126 = *((_QWORD *)v364 + 3);
      memset(v381, 0, sizeof(v381));
      v127 = *(unsigned int *)(v126 + 228);
      if ((_DWORD)v127 == *(_DWORD *)(v126 + 224))
      {
        v128 = WTF::Vector<JSC::UnlinkedStringJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126 + 216, v127 + 1, (unint64_t)v381);
        v130 = *(_QWORD *)(v126 + 216) + 24 * *(unsigned int *)(v126 + 228);
        *(_QWORD *)v130 = 0;
        *(_QWORD *)(v130 + 8) = 0;
        *(_QWORD *)(v130 + 13) = 0;
        v131 = *(_QWORD *)v128;
        *(_QWORD *)v128 = 0;
        *(_QWORD *)v130 = v131;
        LODWORD(v131) = *(_DWORD *)(v128 + 8);
        *(_DWORD *)(v128 + 8) = 0;
        *(_DWORD *)(v130 + 8) = v131;
        LODWORD(v131) = *(_DWORD *)(v128 + 12);
        *(_DWORD *)(v128 + 12) = 0;
        *(_DWORD *)(v130 + 12) = v131;
        LODWORD(v131) = *(_DWORD *)(v128 + 16);
        *(_DWORD *)(v128 + 16) = 0;
        *(_DWORD *)(v130 + 16) = v131;
        LOBYTE(v131) = *(_BYTE *)(v128 + 20);
        *(_BYTE *)(v128 + 20) = 0;
        *(_BYTE *)(v130 + 20) = v131;
        v132 = *(_QWORD *)v381;
        v133 = *(_DWORD *)(v126 + 228) + 1;
        *(_DWORD *)(v126 + 228) = v133;
        if (v132)
        {
          v316 = *(unsigned int *)&v381[8];
          if (*(_DWORD *)&v381[8])
          {
            v317 = (WTF::StringImpl **)v132;
            do
            {
              v318 = *v317;
              *v317 = 0;
              if (v318)
              {
                if (*(_DWORD *)v318 == 2)
                {
                  WTF::StringImpl::~StringImpl(v318, v129, v101, v102, v103, v104, v105, v106);
                  WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
                }
                else
                {
                  *(_DWORD *)v318 -= 2;
                }
              }
              v317 += 2;
              --v316;
            }
            while (v316);
          }
          WTF::fastFree(v132, v129, v101, v102, v103, v104, v105, v106);
          v133 = *(_DWORD *)(v126 + 228);
        }
      }
      else
      {
        v315 = (_QWORD *)(*(_QWORD *)(v126 + 216) + 24 * v127);
        v133 = v127 + 1;
        *v315 = 0;
        v315[1] = 0;
        *(_QWORD *)((char *)v315 + 13) = 0;
        *(_DWORD *)(v126 + 228) = v127 + 1;
      }
      if (!v133)
      {
        __break(0xC471u);
        JUMPOUT(0x1982837B0);
      }
      *(_DWORD *)&v383[11] = 0;
      *(_QWORD *)&v383[3] = 0;
      v134 = v363[1];
      if (v127 > 0xFF)
        goto LABEL_304;
      v135 = (v134 - 1073741808) < 0x80;
      if ((int)v134 <= 0x3FFFFFFF)
        v135 = (v134 + 128) < 0x90;
      if (!v135)
      {
LABEL_304:
        v381[0] = 0;
        *(_QWORD *)&v381[1] = *(_QWORD *)v383;
        *(_QWORD *)&v381[8] = *(_QWORD *)&v383[7];
        *(_DWORD *)&v381[16] = 0;
        v124 = v364;
        if ((JSC::OpSwitchString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v364, v127, v381, v134, v103, v104, v105, v106) & 1) == 0)
        {
          v381[0] = 0;
          *(_QWORD *)&v381[1] = *(_QWORD *)v383;
          *(_QWORD *)&v381[8] = *(_QWORD *)&v383[7];
          *(_DWORD *)&v381[16] = 0;
          JSC::OpSwitchString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v124, v127, v381, v134, v84, v85, v86, v87);
        }
        goto LABEL_95;
      }
      v136 = 92;
      v137 = v364;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)v364, (void *)0x5C, v101, v102, v103, v104, v105, v106);
      v381[0] = 92;
      v138 = *((unsigned int *)v137 + 3);
      v139 = *((unsigned int *)v137 + 4);
      if (v138 <= v139)
      {
        if ((_DWORD)v138 != *((_DWORD *)v137 + 2))
        {
          v140 = *(_QWORD *)v137;
          v141 = 92;
LABEL_87:
          *(_BYTE *)(v140 + v138) = v141;
          v142 = *((_DWORD *)v137 + 3) + 1;
          v143 = *((_DWORD *)v137 + 4) + 1;
          *((_DWORD *)v137 + 3) = v142;
          *((_DWORD *)v137 + 4) = v143;
LABEL_88:
          v381[0] = v127;
          if (v142 > v143)
          {
            v124 = v364;
            *((_DWORD *)v364 + 4) = v143 + 1;
            *(_BYTE *)(*(_QWORD *)v124 + v143) = v127;
          }
          else
          {
            v124 = v364;
            if (v142 == *((_DWORD *)v364 + 2))
              *(_BYTE *)(*(_QWORD *)v124 + *((unsigned int *)v124 + 3)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v364, (WTF *)(v142 + 1), (unint64_t)v381);
            else
              *(_BYTE *)(*(_QWORD *)v364 + v142) = v127;
            *(int32x2_t *)((char *)v124 + 12) = vadd_s32(*(int32x2_t *)((char *)v124 + 12), (int32x2_t)0x100000001);
          }
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)v124, 0);
          v144 = v134 + 16;
          if ((int)v134 <= 0x3FFFFFFF)
            v144 = v134;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write((uint64_t)v124, v144);
          goto LABEL_95;
        }
LABEL_289:
        v328 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, (WTF *)(v138 + 1), (unint64_t)v381);
        v138 = *((unsigned int *)v137 + 3);
        v140 = *(_QWORD *)v137;
        v141 = *v328;
        goto LABEL_87;
      }
    }
    else
    {
      if (v100 == 1)
      {
        v113 = *((_QWORD *)v364 + 3);
        *(_QWORD *)v381 = 0;
        *(_QWORD *)&v381[8] = 0;
        v114 = *(unsigned int *)(v113 + 212);
        if ((_DWORD)v114 == *(_DWORD *)(v113 + 208))
        {
          v115 = WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v113 + 200, v114 + 1, (unint64_t)v381);
          v119 = *(unsigned int *)(v113 + 212);
          v120 = *(_QWORD *)(v113 + 200) + 16 * v119;
          v121 = *(_QWORD *)v115;
          *(_QWORD *)v115 = 0;
          *(_QWORD *)v120 = v121;
          *(_DWORD *)(v120 + 8) = *(_DWORD *)(v115 + 8);
          v122 = *(_QWORD *)v381;
          v123 = v119 + 1;
          *(_DWORD *)(v113 + 212) = v123;
          *(_QWORD *)v381 = 0;
          if (v122)
          {
            WTF::fastFree(v122, v116, v117, v118, v103, v104, v105, v106);
            v123 = *(_DWORD *)(v113 + 212);
          }
        }
        else
        {
          v327 = *(_QWORD *)(v113 + 200) + 16 * v114;
          *(_QWORD *)v327 = 0;
          *(_DWORD *)(v327 + 8) = 0;
          v123 = v114 + 1;
          *(_DWORD *)(v113 + 212) = v114 + 1;
        }
        if (!v123)
        {
          __break(0xC471u);
          JUMPOUT(0x1982837B8);
        }
        *(_QWORD *)&v383[11] = 0;
        *(_QWORD *)&v383[3] = 0;
        v124 = v364;
        v125 = v363[1];
        v381[0] = 0;
        *(_OWORD *)&v381[1] = *(unsigned int *)v383;
        *(_DWORD *)&v381[16] = 0;
        if ((JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)v364, v114, v381, v125, v103, v104, v105, v106) & 1) == 0)
        {
          v381[0] = 0;
          *(_OWORD *)&v381[1] = *(_OWORD *)v383;
          *(_DWORD *)&v381[16] = *(_DWORD *)&v383[15];
          if ((JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v124, v114, v381, v125, v84, v85, v86, v87) & 1) == 0)
          {
            v381[0] = 0;
            *(_OWORD *)&v381[1] = *(_OWORD *)v383;
            *(_DWORD *)&v381[16] = *(_DWORD *)&v383[15];
            JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v124, v114, v381, v125, v84, v85, v86, v87);
          }
        }
LABEL_95:
        *(_QWORD *)v381 = 0;
        *(_DWORD *)v381 = *((_DWORD *)v124 + 12);
        v381[4] = v100;
        v145 = (uint64_t *)((char *)v124 + 448);
        v146 = *((unsigned int *)v124 + 115);
        if ((_DWORD)v146 == *((_DWORD *)v124 + 114))
        {
          v147 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v145, v146 + 1, (unint64_t)v381);
          v146 = *((unsigned int *)v124 + 115);
          v148 = *((_QWORD *)v124 + 56);
          v149 = *v147;
        }
        else
        {
          v148 = *v145;
          v149 = *(_QWORD *)v381;
        }
        *(_QWORD *)(v148 + 8 * v146) = v149;
        v76 = 0;
        ++*((_DWORD *)v124 + 115);
        goto LABEL_45;
      }
      v306 = *((_QWORD *)v364 + 3);
      *(_QWORD *)v381 = 0;
      *(_QWORD *)&v381[8] = 0;
      v127 = *(unsigned int *)(v306 + 212);
      if ((_DWORD)v127 == *(_DWORD *)(v306 + 208))
      {
        v307 = WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v306 + 200, v127 + 1, (unint64_t)v381);
        v309 = *(unsigned int *)(v306 + 212);
        v310 = *(_QWORD *)(v306 + 200) + 16 * v309;
        v311 = *(_QWORD *)v307;
        *(_QWORD *)v307 = 0;
        *(_QWORD *)v310 = v311;
        *(_DWORD *)(v310 + 8) = *(_DWORD *)(v307 + 8);
        v312 = *(_QWORD *)v381;
        v313 = v309 + 1;
        *(_DWORD *)(v306 + 212) = v313;
        *(_QWORD *)v381 = 0;
        if (v312)
        {
          WTF::fastFree(v312, v308, v101, v102, v103, v104, v105, v106);
          v313 = *(_DWORD *)(v306 + 212);
        }
      }
      else
      {
        v329 = *(_QWORD *)(v306 + 200) + 16 * v127;
        *(_QWORD *)v329 = 0;
        *(_DWORD *)(v329 + 8) = 0;
        v313 = v127 + 1;
        *(_DWORD *)(v306 + 212) = v127 + 1;
      }
      if (!v313)
        goto LABEL_336;
      *(_DWORD *)&v383[11] = 0;
      *(_QWORD *)&v383[3] = 0;
      v134 = v363[1];
      if (v127 > 0xFF)
        goto LABEL_306;
      v314 = (v134 - 1073741808) < 0x80;
      if ((int)v134 <= 0x3FFFFFFF)
        v314 = (v134 + 128) < 0x90;
      if (!v314)
      {
LABEL_306:
        v381[0] = 0;
        *(_QWORD *)&v381[1] = *(_QWORD *)v383;
        *(_QWORD *)&v381[8] = *(_QWORD *)&v383[7];
        *(_DWORD *)&v381[16] = 0;
        v124 = v364;
        if ((JSC::OpSwitchChar::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v364, v127, v381, v134, v103, v104, v105, v106) & 1) == 0)
        {
          v381[0] = 0;
          *(_QWORD *)&v381[1] = *(_QWORD *)v383;
          *(_QWORD *)&v381[8] = *(_QWORD *)&v383[7];
          *(_DWORD *)&v381[16] = 0;
          JSC::OpSwitchChar::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v124, v127, v381, v134, v84, v85, v86, v87);
        }
        goto LABEL_95;
      }
      v136 = 91;
      v137 = v364;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)v364, (void *)0x5B, v101, v102, v103, v104, v105, v106);
      v381[0] = 91;
      v138 = *((unsigned int *)v137 + 3);
      v139 = *((unsigned int *)v137 + 4);
      if (v138 <= v139)
      {
        if ((_DWORD)v138 != *((_DWORD *)v137 + 2))
        {
          v140 = *(_QWORD *)v137;
          v141 = 91;
          goto LABEL_87;
        }
        goto LABEL_289;
      }
    }
    *((_DWORD *)v137 + 4) = v139 + 1;
    *(_BYTE *)(*(_QWORD *)v137 + v139) = v136;
    v142 = *((_DWORD *)v137 + 3);
    v143 = *((_DWORD *)v137 + 4);
    goto LABEL_88;
  }
  v150 = v367 - v368;
  if (v367 >= v368 && v150 <= 1000 && v150 / (unint64_t)HIDWORD(v370) < 0xA)
  {
    v100 = 1;
    goto LABEL_59;
  }
LABEL_16:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v366, (uint64_t)v364, v24, v25, v26, v27, v28, v29);
  for (i = *v30; i; i = *(_QWORD *)(i + 8))
  {
    v42 = **(_BYTE ***)i;
    v43 = v364;
    v44 = *((_BYTE *)v364 + 709);
    v45 = *((_BYTE *)v364 + 710);
    *(_WORD *)((char *)v364 + 709) = 0;
    if ((unint64_t)v352 < *(_QWORD *)(*((_QWORD *)v43 + 87) + 93104))
    {
      v46 = v364;
      *((_BYTE *)v364 + 706) = 1;
      v47 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)v46);
    }
    else
    {
      if (v42[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)v364, 5, (uint64_t)(v42 + 8), v36, v37, v38, v39, v40);
      v46 = v364;
      v47 = (_DWORD *)(*(uint64_t (**)(_BYTE *, JSC::BytecodeGenerator *, _QWORD))(*(_QWORD *)v42 + 16))(v42, v364, 0);
    }
    v54 = v47;
    *((_BYTE *)v46 + 710) = v45;
    *((_BYTE *)v46 + 709) = v44;
    if (v47)
      ++*v47;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v381, (uint64_t)v364, v48, v49, v50, v51, v52, v53);
    v55 = HIDWORD(v373);
    if (HIDWORD(v373) == (_DWORD)v373)
    {
      v73 = (_QWORD *)WTF::Vector<WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v372, HIDWORD(v373) + 1, (unint64_t)v381);
      v55 = HIDWORD(v373);
      v56 = v372;
      v57 = (_DWORD *)*v73;
      ++*(_DWORD *)*v73;
    }
    else
    {
      v56 = v372;
      v57 = *(_DWORD **)v381;
      ++**(_DWORD **)v381;
    }
    *((_QWORD *)v56 + v55) = v57;
    HIDWORD(v373) = v55 + 1;
    v58 = v364;
    v59 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)v364);
    if ((JSC::BytecodeGenerator::emitEqualityOpImpl((uint64_t)v58, v59, (uint64_t)v54, (uint64_t)v363, v60, v61, v62, v63, v64) & 1) == 0)
    {
      v70 = *(_DWORD *)(v59 + 4);
      v71 = v54[1];
      v72 = v363[1];
      if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)v58, v70, v71, v72, v66, v67, v68, v69) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v58, v70, v71, v72, v66, v67, v68, v69) & 1) == 0)
      {
        JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v58, v70, v71, v72, v66, v67, v68, v69);
      }
    }
    JSC::BytecodeGenerator::emitJumpIfTrue((uint64_t)v58, v59, *(uint64_t *)v381, v65, v66, v67, v68, v69);
    if (*(_QWORD *)v381)
      --**(_DWORD **)v381;
    if (v54)
      --*v54;
  }
  v74 = v30[2];
  if (v74)
  {
    v222 = v364;
    do
    {
      v223 = (_DWORD *)JSC::BytecodeGenerator::emitNode(v364, **(JSC::ExpressionNode ***)v74, v35, v36, v37, v38, v39, v40);
      v230 = v223;
      if (v223)
        ++*v223;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v381, (uint64_t)v364, v224, v225, v226, v227, v228, v229);
      v231 = HIDWORD(v373);
      if (HIDWORD(v373) == (_DWORD)v373)
      {
        WTF::Vector<WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>&>((uint64_t)&v372, (unint64_t)v381);
      }
      else
      {
        v232 = v372;
        v233 = *(_QWORD *)v381;
        ++**(_DWORD **)v381;
        *((_QWORD *)v232 + v231) = v233;
        HIDWORD(v373) = v231 + 1;
      }
      v234 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)v222);
      JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>((uint64_t)v222, v234, (uint64_t)v230, (uint64_t)v363, v235, v236, v237, v238, v239);
      JSC::BytecodeGenerator::emitJumpIfTrue((uint64_t)v222, v234, *(uint64_t *)v381, v240, v241, v242, v243, v244);
      if (*(_QWORD *)v381)
        --**(_DWORD **)v381;
      if (v230)
        --*v230;
      v74 = *(_QWORD *)(v74 + 8);
    }
    while (v74);
  }
  v75 = v366;
  v76 = 1;
  *(_BYTE *)(v366 + 8) = 1;
  v77 = *(unsigned int *)(v75 + 4);
  if ((_DWORD)v77 == -1)
    v78 = v75;
  else
    v78 = *(unsigned int *)(v75 + 4);
  if ((_DWORD)v77 == -1)
    v79 = 1;
  else
    v79 = 2;
  if (v77 == 0xFFFFFFFFLL)
    v80 = 1;
  else
    v80 = 2;
  v381[0] = v80;
  *(_DWORD *)&v381[4] = 0;
  *(_QWORD *)&v381[8] = v364;
  *(_QWORD *)&v381[16] = v78;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)v364, v381, v35, v36, v37, v38, v39, v40) & 1) == 0)
  {
    v381[0] = v79;
    *(_DWORD *)&v381[4] = 0;
    *(_QWORD *)&v381[8] = v364;
    *(_QWORD *)&v381[16] = v78;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)v364, v381, v82, v83, v84, v85, v86, v87) & 1) == 0)
    {
      v381[0] = v79;
      *(_DWORD *)&v381[4] = 0;
      *(_QWORD *)&v381[8] = v364;
      *(_QWORD *)&v381[16] = v78;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)v364, (uint64_t)v381);
    }
  }
LABEL_45:
  v88 = (uint64_t *)*v30;
  if (*v30)
  {
    v89 = 0;
    do
    {
      if (v89 >= HIDWORD(v373))
      {
        __break(0xC471u);
        JUMPOUT(0x198283754);
      }
      v90 = v364;
      v91 = *((_DWORD *)v364 + 4);
      JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*((_QWORD *)v372 + v89), (uint64_t)v364, v91, v83, v84, v85, v86, v87);
      v97 = *((_QWORD *)v90 + 3);
      v98 = *(unsigned int *)(v97 + 28);
      if (!(_DWORD)v98 || v91 != *(_DWORD *)(*(_QWORD *)(v97 + 16) + 4 * v98 - 4))
      {
        *(_DWORD *)v381 = v91;
        v99 = (_QWORD *)(v97 + 16);
        if ((_DWORD)v98 == *(_DWORD *)(v97 + 24))
          *(_DWORD *)(*(_QWORD *)(v97 + 16) + 4 * *(unsigned int *)(v97 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v98 + 1, (unint64_t)v381);
        else
          *(_DWORD *)(*v99 + 4 * v98) = v91;
        ++*(_DWORD *)(v97 + 28);
        *((_DWORD *)v364 + 9) = 115;
      }
      JSC::CaseClauseNode::emitBytecode(*v88, v364, a3, v92, v93, v94, v95, v96);
      v88 = (uint64_t *)v88[1];
      ++v89;
    }
    while (v88);
  }
  else
  {
    v89 = 0;
  }
  if (v30[1])
  {
    v151 = v364;
    v152 = *((_DWORD *)v364 + 4);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v366, (uint64_t)v364, v152, v83, v84, v85, v86, v87);
    v158 = *((_QWORD *)v151 + 3);
    v159 = *(unsigned int *)(v158 + 28);
    if (!(_DWORD)v159 || v152 != *(_DWORD *)(*(_QWORD *)(v158 + 16) + 4 * v159 - 4))
    {
      *(_DWORD *)v381 = v152;
      v160 = (_QWORD *)(v158 + 16);
      if ((_DWORD)v159 == *(_DWORD *)(v158 + 24))
        *(_DWORD *)(*(_QWORD *)(v158 + 16) + 4 * *(unsigned int *)(v158 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, v159 + 1, (unint64_t)v381);
      else
        *(_DWORD *)(*v160 + 4 * v159) = v152;
      ++*(_DWORD *)(v158 + 28);
      *((_DWORD *)v364 + 9) = 115;
    }
    JSC::CaseClauseNode::emitBytecode(v30[1], v364, a3, v153, v154, v155, v156, v157);
  }
  for (j = (uint64_t *)v30[2]; j; ++v89)
  {
    if (v89 >= HIDWORD(v373))
    {
      __break(0xC471u);
      JUMPOUT(0x1982837C0);
    }
    v212 = v364;
    v213 = *((_DWORD *)v364 + 4);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*((_QWORD *)v372 + v89), (uint64_t)v364, v213, v83, v84, v85, v86, v87);
    v219 = *((_QWORD *)v212 + 3);
    v220 = *(unsigned int *)(v219 + 28);
    if (!(_DWORD)v220 || v213 != *(_DWORD *)(*(_QWORD *)(v219 + 16) + 4 * v220 - 4))
    {
      *(_DWORD *)v381 = v213;
      v221 = (_QWORD *)(v219 + 16);
      if ((_DWORD)v220 == *(_DWORD *)(v219 + 24))
        *(_DWORD *)(*(_QWORD *)(v219 + 16) + 4 * *(unsigned int *)(v219 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v221, v220 + 1, (unint64_t)v381);
      else
        *(_DWORD *)(*v221 + 4 * v220) = v213;
      ++*(_DWORD *)(v219 + 28);
      *((_DWORD *)v364 + 9) = 115;
    }
    JSC::CaseClauseNode::emitBytecode(*j, v364, a3, v214, v215, v216, v217, v218);
    j = (uint64_t *)j[1];
  }
  v162 = (_DWORD *)v366;
  if (!v30[1])
  {
    v199 = v364;
    v200 = *((_DWORD *)v364 + 4);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v366, (uint64_t)v364, v200, v83, v84, v85, v86, v87);
    v201 = *((_QWORD *)v199 + 3);
    v202 = *(unsigned int *)(v201 + 28);
    if (!(_DWORD)v202 || v200 != *(_DWORD *)(*(_QWORD *)(v201 + 16) + 4 * v202 - 4))
    {
      *(_DWORD *)v381 = v200;
      v203 = (_QWORD *)(v201 + 16);
      if ((_DWORD)v202 == *(_DWORD *)(v201 + 24))
        *(_DWORD *)(*(_QWORD *)(v201 + 16) + 4 * *(unsigned int *)(v201 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v203, v202 + 1, (unint64_t)v381);
      else
        *(_DWORD *)(*v203 + 4 * v202) = v200;
      ++*(_DWORD *)(v201 + 28);
      *((_DWORD *)v364 + 9) = 115;
    }
  }
  if ((v76 & 1) == 0)
  {
    v357 = v162;
    v163 = *((unsigned int *)v364 + 115);
    if (!(_DWORD)v163)
    {
      __break(0xC471u);
      JUMPOUT(0x198283784);
    }
    v362 = HIDWORD(v373);
    v361 = v369;
    v165 = v367;
    v164 = v368;
    v376 = *(_QWORD *)(*((_QWORD *)v364 + 56) + 8 * v163 - 8);
    v166 = v376;
    *((_DWORD *)v364 + 115) = v163 - 1;
    v167 = v357;
    *((_BYTE *)v357 + 8) = 1;
    v168 = v167[1];
    v169 = HIDWORD(v166);
    if (v168 == -1)
    {
      v339 = (uint64_t *)(v357 + 4);
      v340 = v357[7];
      if ((_DWORD)v340 == v357[6])
      {
        WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v339, v340 + 1);
        v340 = v357[7];
        v341 = *((_QWORD *)v357 + 2);
      }
      else
      {
        v341 = *v339;
      }
      v82 = 0;
      *(_DWORD *)(v341 + 4 * v340) = v166;
      ++v357[7];
      v375[0] = 0;
      *(_OWORD *)&v375[4] = 0uLL;
      LODWORD(v166) = v376;
    }
    else
    {
      v82 = (v168 - v166);
      v375[0] = 0;
      *(_DWORD *)&v375[4] = 0;
      *(_QWORD *)&v375[8] = 0;
      *(_DWORD *)&v375[16] = v168 - v166;
    }
    if (v169 == 3)
    {
      v204 = (unsigned __int8 *)(*(_QWORD *)v364 + v166);
      v205 = *v204;
      if (v205 == 128)
      {
        *(_OWORD *)v381 = *(_OWORD *)v375;
        *(_QWORD *)&v381[16] = *(_QWORD *)&v375[16];
        v206 = *(_WORD *)&v375[16];
        *(_DWORD *)&v381[4] = *(_DWORD *)&v375[16];
        if (*(_DWORD *)&v381[4] != *(__int16 *)&v381[4])
        {
          JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*((JSC::UnlinkedCodeBlockGenerator **)v364 + 3), v166, v82, v83, v84, v85, v86, v87);
          *(_QWORD *)&v383[11] = 0;
          *(_QWORD *)&v383[3] = 0;
          *(_OWORD *)&v381[1] = *(unsigned int *)v383;
          *(_DWORD *)&v381[16] = 0;
          v206 = (unint64_t)*(unsigned int *)v383 >> 24;
        }
        *((_WORD *)v204 + 2) = v206;
      }
      else if (v205 == 130)
      {
        *(_OWORD *)v381 = *(_OWORD *)v375;
        *(_QWORD *)&v381[16] = *(_QWORD *)&v375[16];
        *(_DWORD *)(v204 + 6) = *(_DWORD *)&v375[16];
      }
      else
      {
        *(_OWORD *)v381 = *(_OWORD *)v375;
        *(_QWORD *)&v381[16] = *(_QWORD *)&v375[16];
        v207 = v375[16];
        *(_DWORD *)&v381[4] = *(_DWORD *)&v375[16];
        if (*(_DWORD *)&v381[4] != v381[4])
        {
          JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*((JSC::UnlinkedCodeBlockGenerator **)v364 + 3), v166, v82, v83, v84, v85, v86, v87);
          *(_QWORD *)&v383[11] = 0;
          *(_QWORD *)&v383[3] = 0;
          *(_OWORD *)&v381[1] = *(unsigned int *)v383;
          *(_DWORD *)&v381[16] = 0;
          v207 = 0;
        }
        v204[2] = v207;
      }
      v245 = *((_QWORD *)v364 + 3);
      v246 = (unsigned __int8 *)(*(_QWORD *)v364 + v166);
      v247 = *v246;
      if (v247 == 130)
      {
        v248 = *(_DWORD *)(v246 + 2);
      }
      else if (v247 == 128)
      {
        v248 = *((unsigned __int16 *)v246 + 1);
      }
      else
      {
        v248 = v246[1];
      }
      if (*(unsigned int *)(v245 + 228) <= (unint64_t)v248)
      {
        __break(0xC471u);
        JUMPOUT(0x19828378CLL);
      }
      if ((_DWORD)v362)
      {
        v249 = 0;
        v250 = *(_QWORD *)(v245 + 216) + 24 * v248;
        k = v376;
        v356 = v376;
        do
        {
          v252 = **(WTF::StringImpl ***)(*((_QWORD *)v361 + v249) + 32);
          if (v252)
            *(_DWORD *)v252 += 2;
          if (v249 >= HIDWORD(v373))
          {
            __break(0xC471u);
            JUMPOUT(0x19828375CLL);
          }
          v253 = *((_QWORD *)v372 + v249);
          *(_BYTE *)(v253 + 8) = 1;
          v254 = *(_DWORD *)(v253 + 4);
          if (v254 == -1)
          {
            v335 = (uint64_t *)(v253 + 16);
            v336 = *(unsigned int *)(v253 + 28);
            if ((_DWORD)v336 == *(_DWORD *)(v253 + 24))
            {
              WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v335, v336 + 1);
              v336 = *(unsigned int *)(v253 + 28);
              v337 = *(_QWORD *)(v253 + 16);
            }
            else
            {
              v337 = *v335;
            }
            v255 = 0;
            k = v356;
            *(_DWORD *)(v337 + 4 * v336) = v356;
            ++*(_DWORD *)(v253 + 28);
          }
          else
          {
            v255 = (v254 - k);
          }
          v257 = *(unsigned int *)(v250 + 8);
          v256 = *(unsigned int *)(v250 + 12);
          if (20 * v256 >= 19 * (unint64_t)v257
            || *(_BYTE *)(v250 + 20) && v257 <= 2 * (int)v256)
          {
            if ((_DWORD)v257)
              v287 = 2 * v257;
            else
              v287 = 8;
            v288 = v255;
            WTF::RobinHoodHashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(v250, v287);
            v255 = v288;
            v257 = *(unsigned int *)(v250 + 8);
          }
          v258 = *(unsigned int *)(v250 + 16);
          v259 = *((_DWORD *)v252 + 4);
          if (v259 < 0x100)
          {
            v289 = v257;
            v290 = *(unsigned int *)(v250 + 16);
            v291 = v255;
            v292 = WTF::StringImpl::hashSlowCase(v252);
            v255 = v291;
            v258 = v290;
            v257 = v289;
            v260 = v292;
          }
          else
          {
            v260 = v259 >> 8;
          }
          v261 = v257 - 1;
          v262 = (v260 ^ v258) & ((_DWORD)v257 - 1);
          v263 = *(_QWORD *)v250;
          v264 = *(_QWORD *)v250 + 16 * v262;
          v265 = *(WTF::StringImpl **)v264;
          if (*(_QWORD *)v264)
          {
            v266 = 0;
            while (1)
            {
              v267 = *((_DWORD *)v265 + 4);
              if (v267 < 0x100)
              {
                v354 = v257;
                v270 = v258;
                v353 = v255;
                v268 = WTF::StringImpl::hashSlowCase(v265);
                v255 = v353;
                v258 = v270;
                v257 = v354;
              }
              else
              {
                v268 = v267 >> 8;
              }
              v269 = (v262 + v257 - ((v268 ^ v258) & v261)) & v261;
              if (v266 > v269)
                break;
              if (v268 == v260)
              {
                v330 = *(WTF **)v264;
                v331 = v257;
                v332 = v258;
                v333 = v255;
                v334 = WTF::equal(v330, v252, (const WTF::StringImpl *)v82);
                v255 = v333;
                v258 = v332;
                v257 = v331;
                if (v334)
                {
                  if (*(_DWORD *)v252 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v252, v81, v82, v83, v84, v85, v86, v87);
                    WTF::fastFree(v342, v343, v344, v345, v346, v347, v348, v349);
                  }
                  else
                  {
                    *(_DWORD *)v252 -= 2;
                  }
                  k = v356;
                  goto LABEL_232;
                }
              }
              v263 = *(_QWORD *)v250;
              v262 = ((_DWORD)v262 + 1) & v261;
              ++v266;
              v264 = *(_QWORD *)v250 + 16 * v262;
              v265 = *(WTF::StringImpl **)v264;
              if (!*(_QWORD *)v264)
              {
                if (v266 >= 0x80)
                  *(_BYTE *)(v250 + 20) = 1;
                k = v356;
                goto LABEL_230;
              }
            }
            if (v266 >= 0x80)
              *(_BYTE *)(v250 + 20) = 1;
            v272 = *(WTF **)v264;
            *(_QWORD *)v264 = 0;
            *(_QWORD *)v381 = v272;
            v273 = v263 + 16 * v262;
            *(_QWORD *)&v381[8] = *(_QWORD *)(v273 + 8);
            *(_QWORD *)v264 = v252;
            *(_QWORD *)(v264 + 8) = 0;
            *(_QWORD *)(v273 + 8) = v255;
            v274 = ((_DWORD)v262 + 1) & v261;
            v275 = *(_QWORD *)v250;
            v276 = (WTF::StringImpl **)(*(_QWORD *)v250 + 16 * v274);
            v277 = *v276;
            for (k = v356; *v276; v277 = *v276)
            {
              v278 = *((_DWORD *)v277 + 4);
              if (v278 < 0x100)
              {
                v284 = v257;
                v285 = v258;
                v279 = WTF::StringImpl::hashSlowCase(v277);
                v258 = v285;
                k = v356;
                v257 = v284;
              }
              else
              {
                v279 = v278 >> 8;
              }
              if (++v269 > (((_DWORD)v274 + (_DWORD)v257 - ((v279 ^ v258) & v261)) & v261))
              {
                v280 = *(WTF::StringImpl **)v381;
                v281 = *(_QWORD *)&v381[8];
                v282 = *v276;
                *v276 = 0;
                *(_QWORD *)v381 = v282;
                v283 = v275 + 16 * v274;
                *(_QWORD *)&v381[8] = *(_QWORD *)(v283 + 8);
                *v276 = v280;
                *(_QWORD *)(v283 + 8) = v281;
                v269 = (v274 + v257 - ((v279 ^ v258) & v261)) & v261;
              }
              v274 = ((_DWORD)v274 + 1) & v261;
              v275 = *(_QWORD *)v250;
              v276 = (WTF::StringImpl **)(*(_QWORD *)v250 + 16 * v274);
            }
            WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>,WTF::KeyValuePair<WTF::String,WTF::SymbolImpl *>>((uint64_t)v276, (WTF::AtomStringImpl *)v381, v82, v83, v84, v85, v86, v87);
            v286 = *(WTF::StringImpl **)v381;
            *(_QWORD *)v381 = 0;
            if (v286)
            {
              if (*(_DWORD *)v286 == 2)
              {
                WTF::StringImpl::~StringImpl(v286, v81, v82, v83, v84, v85, v86, v87);
                WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
              }
              else
              {
                *(_DWORD *)v286 -= 2;
              }
            }
          }
          else
          {
LABEL_230:
            *(_QWORD *)v264 = v252;
            *(_QWORD *)(v263 + 16 * v262 + 8) = v255;
          }
          v271 = *(_DWORD *)(v250 + 12);
          *(_DWORD *)(v250 + 12) = v271 + 1;
          *(_DWORD *)(v264 + 12) = v271;
LABEL_232:
          ++v249;
        }
        while (v249 != v362);
      }
      goto LABEL_128;
    }
    if (v169 == 1)
    {
      v170 = (unsigned __int8 *)(*(_QWORD *)v364 + v166);
      v171 = *v170;
      if (v171 == 130)
      {
        v172 = *(_DWORD *)(v170 + 2);
        *(_OWORD *)v381 = *(_OWORD *)v375;
        *(_QWORD *)&v381[16] = *(_QWORD *)&v375[16];
        _ZN3JSC11OpSwitchImm16setDefaultOffsetILNS_10OpcodeSizeE4EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_((uint64_t)v170, v381);
      }
      else if (v171 == 128)
      {
        v172 = *((unsigned __int16 *)v170 + 1);
        *(_OWORD *)v383 = *(_OWORD *)v375;
        *(_QWORD *)&v383[16] = *(_QWORD *)&v375[16];
        v378 = v364;
        v379 = &v376;
        v380 = v375;
        _ZN3JSC11OpSwitchImm16setDefaultOffsetILNS_10OpcodeSizeE2EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_(v170, v383, (uint64_t)&v378, v83, v84, v85, v86, v87);
      }
      else
      {
        v172 = v170[1];
        *(_OWORD *)v377 = *(_OWORD *)v375;
        *(_QWORD *)&v377[16] = *(_QWORD *)&v375[16];
        v173 = v375[16];
        *(_DWORD *)&v377[4] = *(_DWORD *)&v375[16];
        if (*(_DWORD *)&v377[4] != v377[4])
        {
          JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*((JSC::UnlinkedCodeBlockGenerator **)v364 + 3), v166, v82, v83, v84, v85, v86, v87);
          *(_QWORD *)&v382[11] = 0;
          *(_QWORD *)&v382[3] = 0;
          *(_OWORD *)&v377[1] = *(unsigned int *)v382;
          *(_DWORD *)&v377[16] = 0;
          v173 = 0;
        }
        v170[2] = v173;
      }
      v174 = *((_QWORD *)v364 + 3);
      if (*(unsigned int *)(v174 + 212) <= (unint64_t)v172)
      {
        __break(0xC471u);
        JUMPOUT(0x198283794);
      }
LABEL_124:
      if (BYTE4(v376) == 1)
        v175 = JSC::keyForImmediateSwitch;
      else
        v175 = JSC::keyForCharacterSwitch;
      JSC::prepareJumpTableForSwitch(*(_QWORD *)(v174 + 200) + 16 * v172, (void *)v376, v362, (uint64_t)&v372, (uint64_t)v361, v164, v165, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v175);
LABEL_128:
      v162 = v357;
      goto LABEL_129;
    }
    if (v169 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1982831FCLL);
    }
    v208 = (unsigned __int8 *)(*(_QWORD *)v364 + v166);
    v209 = *v208;
    if (v209 == 130)
    {
      v172 = *(_DWORD *)(v208 + 2);
      *(_OWORD *)v381 = *(_OWORD *)v375;
      *(_QWORD *)&v381[16] = *(_QWORD *)&v375[16];
      _ZN3JSC11OpSwitchImm16setDefaultOffsetILNS_10OpcodeSizeE4EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_((uint64_t)v208, v381);
    }
    else if (v209 == 128)
    {
      v172 = *((unsigned __int16 *)v208 + 1);
      *(_OWORD *)v383 = *(_OWORD *)v375;
      *(_QWORD *)&v383[16] = *(_QWORD *)&v375[16];
      v378 = v364;
      v379 = &v376;
      v380 = v375;
      _ZN3JSC12OpSwitchChar16setDefaultOffsetILNS_10OpcodeSizeE2EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_((uint64_t)v208, v383, (uint64_t)&v378);
    }
    else
    {
      v172 = v208[1];
      *(_OWORD *)v377 = *(_OWORD *)v375;
      *(_QWORD *)&v377[16] = *(_QWORD *)&v375[16];
      *(_QWORD *)v382 = v364;
      *(_QWORD *)&v382[8] = &v376;
      *(_QWORD *)&v382[16] = v375;
      v210 = v375[0];
      *(_DWORD *)&v377[4] = *(_DWORD *)&v375[16];
      if (*(_DWORD *)&v377[4] != v377[4])
      {
        _ZZZN3JSC17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS1_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEELm8ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPPNS_14ExpressionNodeERS6_iiENK3__0clINS_12OpSwitchCharESN_EEDaPT_T0_ENKUlvE_clEv((uint64_t)v377, (uint64_t)v382);
        v210 = v377[0];
      }
      if (v210 == 1)
      {
        v302 = *(_QWORD *)&v377[16];
        v303 = *(unsigned int *)(*(_QWORD *)&v377[16] + 28);
        if ((_DWORD)v303 == *(_DWORD *)(*(_QWORD *)&v377[16] + 24))
        {
          v338 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)&v377[16] + 16, v303 + 1, (unint64_t)&v377[4]);
          v211 = 0;
          v303 = *(unsigned int *)(v302 + 28);
          v304 = *(_QWORD *)(v302 + 16);
          v305 = *v338;
        }
        else
        {
          v211 = 0;
          v304 = *(_QWORD *)(*(_QWORD *)&v377[16] + 16);
          v305 = *(_DWORD *)&v377[4];
        }
        *(_DWORD *)(v304 + 4 * v303) = v305;
        ++*(_DWORD *)(v302 + 28);
      }
      else
      {
        v211 = v377[4];
      }
      v208[2] = v211;
    }
    v174 = *((_QWORD *)v364 + 3);
    if (*(unsigned int *)(v174 + 212) > (unint64_t)v172)
      goto LABEL_124;
LABEL_336:
    __break(0xC471u);
    JUMPOUT(0x198282868);
  }
LABEL_129:
  if (v162)
    --*v162;
  v176 = v369;
  if (v358 != v369 && v369)
  {
    v369 = 0;
    LODWORD(v370) = 0;
    WTF::fastFree((unint64_t)v176, v81, v82, v83, v84, v85, v86, v87);
  }
  if (HIDWORD(v373))
  {
    v177 = v372;
    v178 = 8 * HIDWORD(v373);
    do
    {
      v179 = *(_DWORD **)v177;
      *(_QWORD *)v177 = 0;
      if (v179)
        --*v179;
      v177 = (WTF *)((char *)v177 + 8);
      v178 -= 8;
    }
    while (v178);
  }
  v180 = v372;
  if (v359 != v372 && v372 != 0)
  {
    v372 = 0;
    LODWORD(v373) = 0;
    WTF::fastFree((unint64_t)v180, v81, v82, v83, v84, v85, v86, v87);
  }
  v182 = v364;
  JSC::BytecodeGenerator::popLexicalScopeInternal(v364, v360, v82, v83, v84, v85, v86, v87);
  v183 = (_DWORD *)v365;
  v184 = *((_DWORD *)v182 + 4);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v365 + 24), (uint64_t)v182, v184, v185, v186, v187, v188, v189);
  v197 = (_DWORD *)*((_QWORD *)v182 + 3);
  v198 = v197[7];
  if (!(_DWORD)v198 || v184 != *(_DWORD *)(*((_QWORD *)v197 + 2) + 4 * v198 - 4))
  {
    LODWORD(v372) = v184;
    result = v197 + 4;
    if ((_DWORD)v198 == v197[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v198 + 1, (unint64_t)&v372);
      *(_DWORD *)(*((_QWORD *)v197 + 2) + 4 * v197[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v198) = v184;
    }
    ++v197[7];
    *((_DWORD *)v364 + 9) = 115;
  }
  if ((*((_BYTE *)v364 + 104) & 4) != 0)
  {
    v350 = *((_DWORD *)v355 + 5);
    if ((v350 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19828377CLL);
    }
    v351 = v364;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>((uint64_t)v364, v350, v191, v192, v193, v194, v195, v196);
    result = JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*((JSC::UnlinkedCodeBlockGenerator **)v351 + 3), *((_DWORD *)v351 + 12));
  }
  if (v363)
    --*v363;
  --*v183;
  return result;
}

_DWORD *JSC::LabelNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::StatementNode *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  _DWORD *result;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  JSC::BytecodeGenerator::newLabelScope(&v22, a2, 2, *(_QWORD *)(a1 + 80), a5, a6, a7, a8);
  if ((unint64_t)&v22 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    v11 = *(JSC::StatementNode **)(a1 + 88);
    if (*((_BYTE *)v11 + 24))
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, v11);
    (*(void (**)(JSC::StatementNode *, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3);
  }
  v17 = (_DWORD *)v22;
  v18 = *(_DWORD *)(a2 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(*(_QWORD *)(v22 + 24), a2, v18, v12, v13, v14, v15, v16);
  v20 = *(_DWORD **)(a2 + 24);
  v21 = v20[7];
  if (!(_DWORD)v21 || v18 != *(_DWORD *)(*((_QWORD *)v20 + 2) + 4 * v21 - 4))
  {
    v23 = v18;
    result = v20 + 4;
    if ((_DWORD)v21 == v20[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v21 + 1, (unint64_t)&v23);
      *(_DWORD *)(*((_QWORD *)v20 + 2) + 4 * v20[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v21) = v18;
    }
    ++v20[7];
    *(_DWORD *)(a2 + 36) = 115;
  }
  --*v17;
  return result;
}

uint64_t JSC::ThrowNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  char v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;

  v10 = *(_BYTE **)(a1 + 80);
  v11 = *(_BYTE *)(a2 + 709);
  v12 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v40 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    v13 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v10[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v10 + 8), a4, a5, a6, a7, a8);
    v13 = (_DWORD *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, a2, 0);
  }
  v20 = v13;
  *(_BYTE *)(a2 + 710) = v12;
  *(_BYTE *)(a2 + 709) = v11;
  if (v13)
    ++*v13;
  v22 = *(_DWORD *)(a1 + 40);
  v21 = *(_DWORD *)(a1 + 44);
  v23 = *(_DWORD *)(a1 + 48);
  if (v22 != -1 || v21 != -1 || v23 != -1)
  {
    v24 = *(_DWORD *)(a1 + 56);
    if (*(_DWORD *)(a1 + 52) != -1 || v24 != -1 || *(_DWORD *)(a1 + 60) != -1)
    {
      v25 = *(_DWORD *)(a1 + 68);
      if ((*(_DWORD *)(a1 + 64) & v25 & *(_DWORD *)(a1 + 72)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v26 = *(_QWORD *)(a2 + 192);
        v27 = *(_DWORD *)(v26 + 176);
        v14 = v21 - v27;
        v28 = v23 >= v27;
        v29 = v23 - v27;
        if (!v28)
          v29 = 0;
        v28 = v14 >= v29;
        v30 = v14 - v29;
        if (v28)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v14, v21 - v24, v25 - v21, (v22 + ~*(_DWORD *)(v26 + 184)) | (unint64_t)(v30 << 32));
      }
    }
  }
  *(_BYTE *)(a2 + 705) = 1;
  v31 = v20[1];
  result = JSC::OpThrow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v31, v14, v15, v16, v17, v18, v19);
  if ((result & 1) == 0)
  {
    result = JSC::OpThrow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v31, v33, v34, v35, v36, v37, v38);
    if ((result & 1) == 0)
      result = JSC::OpThrow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v31, v33, v34, v35, v36, v37, v38);
  }
  if ((*(_BYTE *)(a2 + 104) & 4) == 0)
    goto LABEL_22;
  v39 = *(_DWORD *)(a1 + 20);
  if ((v39 & 0x80000000) == 0)
  {
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v39, v33, v34, v35, v36, v37, v38);
    result = (uint64_t)JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
LABEL_22:
    --*v20;
    return result;
  }
  result = 1921;
  __break(0xC471u);
  return result;
}

void JSC::TryNode::emitBytecode(uint64_t a1, unint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  JSC::StatementNode *v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  int *v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  _DWORD *v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  _BYTE *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  uint64_t v181;
  int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD **v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int *v203;
  int v204;
  int v205;
  uint64_t v206;
  _DWORD *v207;
  int *v208;
  _DWORD *v209;
  _DWORD *v210;
  _BYTE v211[24];
  WTF *v212;
  int v213;
  unsigned int v214;
  int *v215;
  _DWORD *v216;
  char v217;
  __int128 v218;
  uint64_t v219;

  if (a3)
    ++*a3;
  v11 = a3;
  if (*(_BYTE *)(a2 + 416) != 2)
  {
    v11 = a3;
    if (*(_QWORD *)(a1 + 112))
    {
      v203 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v11 = v203;
      if (v203)
        ++*v203;
      if (a3)
        --*a3;
      if (*(_QWORD *)(a1 + 112))
        goto LABEL_177;
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88)))
LABEL_177:
      JSC::BytecodeGenerator::emitLoad(a2, v11, 10, a4, a5, a6, a7, a8);
  }
  v211[0] = 0;
  v217 = 0;
  if (*(_QWORD *)(a1 + 112))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v218, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v12 = v218;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v218, a2, v121, v122, v123, v124, v125, v126);
    v13 = (_DWORD *)v218;
    JSC::FinallyContext::FinallyContext((uint64_t)v211, (JSC::BytecodeGenerator *)a2, v12);
    v217 = 1;
    v127 = *(_DWORD *)(a2 + 124);
    v128 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a2 + 424) = v128 + 1;
    v129 = v128 >> 4;
    v130 = *(unsigned int *)(a2 + 444);
    if (v128 >> 4 >= v130)
    {
      v131 = WTF::fastMalloc((WTF *)0x100);
      *(_QWORD *)&v218 = v131;
      v132 = *(unsigned int *)(a2 + 444);
      if ((_DWORD)v132 == *(_DWORD *)(a2 + 440))
      {
        v133 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 432, v132 + 1, (unint64_t)&v218);
        v132 = *(unsigned int *)(a2 + 444);
        *(_QWORD *)(*(_QWORD *)(a2 + 432) + 8 * v132) = *v133;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a2 + 432) + 8 * v132) = v131;
      }
      v130 = (v132 + 1);
      *(_DWORD *)(a2 + 444) = v130;
      v128 = *(_QWORD *)(a2 + 424) - 1;
      v129 = v128 >> 4;
    }
    if (v129 >= v130)
    {
      __break(0xC471u);
      goto LABEL_193;
    }
    v134 = *(_QWORD *)(*(_QWORD *)(a2 + 432) + 8 * v129) + 16 * (v128 & 0xF);
    *(_BYTE *)v134 = 1;
    *(_DWORD *)(v134 + 4) = v127 - 1;
    *(_QWORD *)(v134 + 8) = v211;
    ++*(_DWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 328) = v211;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v207 = v13;
  v208 = v11;
  if (*(_QWORD *)(a1 + 104))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v218, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v14 = (_DWORD *)v218;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v218, a2, v15, v16, v17, v18, v19, v20);
    v21 = v218;
  }
  else
  {
    v14 = 0;
    v21 = 0;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v210, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v22 = v210;
  v23 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v210, a2, v23, v24, v25, v26, v27, v28);
  v29 = *(_QWORD *)(a2 + 24);
  v30 = *(unsigned int *)(v29 + 28);
  if (!(_DWORD)v30 || v23 != *(_DWORD *)(*(_QWORD *)(v29 + 16) + 4 * v30 - 4))
  {
    LODWORD(v218) = v23;
    v31 = (_QWORD *)(v29 + 16);
    if ((_DWORD)v30 == *(_DWORD *)(v29 + 24))
      *(_DWORD *)(*(_QWORD *)(v29 + 16) + 4 * *(unsigned int *)(v29 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v30 + 1, (unint64_t)&v218);
    else
      *(_DWORD *)(*v31 + 4 * v30) = v23;
    ++*(_DWORD *)(v29 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v32 = *(_QWORD *)(a1 + 104);
  if (v32)
    v33 = v14;
  else
    v33 = (_DWORD *)v12;
  v34 = JSC::BytecodeGenerator::pushTry(a2, v22, v33, v32 == 0);
  v35 = v34;
  if (*(_QWORD *)(a1 + 104))
  {
    v206 = 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 112))
      v181 = v34;
    else
      v181 = 0;
    v206 = v181;
  }
  v36 = *(JSC::StatementNode **)(a1 + 88);
  v37 = *(_BYTE *)(a2 + 709);
  v38 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v206 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*((_BYTE *)v36 + 24))
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, v36);
    (*(void (**)(JSC::StatementNode *, unint64_t, int *))(*(_QWORD *)v36 + 16))(v36, a2, v208);
  }
  *(_BYTE *)(a2 + 710) = v38;
  *(_BYTE *)(a2 + 709) = v37;
  if (*(_QWORD *)(a1 + 112))
  {
    *(_BYTE *)(v12 + 8) = 1;
    v45 = *(unsigned int *)(v12 + 4);
    v46 = (_DWORD)v45 == -1;
    if ((_DWORD)v45 == -1)
      v47 = v12;
    else
      v47 = *(unsigned int *)(v12 + 4);
  }
  else
  {
    *(_BYTE *)(v21 + 8) = 1;
    v45 = *(unsigned int *)(v21 + 4);
    v46 = (_DWORD)v45 == -1;
    if ((_DWORD)v45 == -1)
      v47 = v21;
    else
      v47 = *(unsigned int *)(v21 + 4);
  }
  if (v46)
    v48 = 1;
  else
    v48 = 2;
  if (v45 == 0xFFFFFFFFLL)
    v49 = 1;
  else
    v49 = 2;
  LOBYTE(v218) = v49;
  DWORD1(v218) = 0;
  *((_QWORD *)&v218 + 1) = a2;
  v219 = v47;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v218, v39, v40, v41, v42, v43, v44) & 1) == 0)
  {
    LOBYTE(v218) = v48;
    DWORD1(v218) = 0;
    *((_QWORD *)&v218 + 1) = a2;
    v219 = v47;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v218, v50, v51, v52, v53, v54, v55) & 1) == 0)
    {
      LOBYTE(v218) = v48;
      DWORD1(v218) = 0;
      *((_QWORD *)&v218 + 1) = a2;
      v219 = v47;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v218);
    }
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v209, a2, v50, v51, v52, v53, v54, v55);
  v56 = v209;
  v57 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v209, a2, v57, v58, v59, v60, v61, v62);
  v63 = *(_QWORD *)(a2 + 24);
  v64 = *(unsigned int *)(v63 + 28);
  if (!(_DWORD)v64 || v57 != *(_DWORD *)(*(_QWORD *)(v63 + 16) + 4 * v64 - 4))
  {
    LODWORD(v218) = v57;
    v65 = (_QWORD *)(v63 + 16);
    if ((_DWORD)v64 == *(_DWORD *)(v63 + 24))
      *(_DWORD *)(*(_QWORD *)(v63 + 16) + 4 * *(unsigned int *)(v63 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v64 + 1, (unint64_t)&v218);
    else
      *(_DWORD *)(*v65 + 4 * v64) = v57;
    ++*(_DWORD *)(v63 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::popTry(a2, v56);
  if (!*(_QWORD *)(a1 + 104))
  {
    v92 = v208;
    goto LABEL_73;
  }
  v73 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v14, a2, v73, v68, v69, v70, v71, v72);
  v74 = *(_QWORD *)(a2 + 24);
  v75 = *(unsigned int *)(v74 + 28);
  if (!(_DWORD)v75 || v73 != *(_DWORD *)(*(_QWORD *)(v74 + 16) + 4 * v75 - 4))
  {
    LODWORD(v218) = v73;
    v76 = (_QWORD *)(v74 + 16);
    if ((_DWORD)v75 == *(_DWORD *)(v74 + 24))
      *(_DWORD *)(*(_QWORD *)(v74 + 16) + 4 * *(unsigned int *)(v74 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v76, v75 + 1, (unint64_t)&v218);
    else
      *(_DWORD *)(*v76 + 4 * v75) = v73;
    ++*(_DWORD *)(v74 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v77 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v78 = v77;
  if (v77)
    ++*v77;
  if (*(_QWORD *)(a1 + 112))
  {
    if (!v217)
      goto LABEL_193;
    v182 = v215;
    v79 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    if (v182)
    {
      v86 = v182[1];
      goto LABEL_49;
    }
  }
  else
  {
    v79 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  v86 = 0x3FFFFFFF;
LABEL_49:
  *(_QWORD *)&v218 = v35;
  DWORD2(v218) = *(_DWORD *)(v79 + 4);
  HIDWORD(v218) = v78[1];
  LODWORD(v219) = v86;
  v87 = *(unsigned int *)(a2 + 732);
  if ((_DWORD)v87 == *(_DWORD *)(a2 + 728))
  {
    v88 = WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 720, v87 + 1, (unint64_t)&v218);
    v89 = *(_QWORD *)(a2 + 720) + 24 * *(unsigned int *)(a2 + 732);
    v90 = *(_OWORD *)v88;
    v91 = *(_QWORD *)(v88 + 16);
  }
  else
  {
    v89 = *(_QWORD *)(a2 + 720) + 24 * v87;
    v90 = v218;
    v91 = v219;
  }
  *(_QWORD *)(v89 + 16) = v91;
  *(_OWORD *)v89 = v90;
  v92 = v208;
  ++*(_DWORD *)(a2 + 732);
  JSC::BytecodeGenerator::restoreScopeRegister(a2, *(_DWORD *)(a2 + 124) - 1, v80, v81, v82, v83, v84, v85);
  if (*(_QWORD *)(a1 + 112))
    v206 = JSC::BytecodeGenerator::pushTry(a2, v14, (_DWORD *)v12, 1);
  v99 = *(_QWORD *)(a1 + 96);
  if (v99)
  {
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 40))(v99);
    JSC::BytecodeGenerator::pushLexicalScopeInternal(a2, (JSC::VariableEnvironment *)(a1 + 48), 0, 1, 0, 0, v100, 1);
    (*(void (**)(_QWORD, unint64_t, int *))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), a2, v78);
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v204 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 20);
    if (v204 <= -2)
      goto LABEL_194;
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v204 + 1, v93, v94, v95, v96, v97, v98);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v92 = v208;
  }
  if (*(_BYTE *)(a2 + 416) != 2)
    JSC::BytecodeGenerator::emitLoad(a2, v92, 10, v94, v95, v96, v97, v98);
  v101 = *(_BYTE **)(a1 + 104);
  if (*(_QWORD *)(a1 + 112))
  {
    JSC::BytecodeGenerator::emitNode((JSC::BytecodeGenerator *)a2, (uint64_t)v92, *(JSC::StatementNode **)(a1 + 104));
  }
  else if ((unint64_t)&v206 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v101[24])
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, *(JSC::StatementNode **)(a1 + 104));
    (*(void (**)(_BYTE *, unint64_t, int *))(*(_QWORD *)v101 + 16))(v101, a2, v92);
  }
  JSC::BytecodeGenerator::emitLoad(a2, v78, 10, v102, v103, v104, v105, v106);
  if (*(_QWORD *)(a1 + 96))
    JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, (JSC::VariableEnvironment *)(a1 + 48), v107, v108, v109, v110, v111, v112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (!v217)
      goto LABEL_193;
    JSC::BytecodeGenerator::emitLoad(a2, v215, 0xFFFE000000000000, v108, v109, v110, v111, v112);
    JSC::BytecodeGenerator::emitJump(a2, v12, v183, v184, v185, v186, v187, v188);
    JSC::BytecodeGenerator::popTry(a2, (_DWORD *)v12);
  }
  v113 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v21, a2, v113, v108, v109, v110, v111, v112);
  v114 = *(_QWORD *)(a2 + 24);
  v115 = *(unsigned int *)(v114 + 28);
  if (!(_DWORD)v115 || v113 != *(_DWORD *)(*(_QWORD *)(v114 + 16) + 4 * v115 - 4))
  {
    LODWORD(v218) = v113;
    v116 = (_QWORD *)(v114 + 16);
    if ((_DWORD)v115 == *(_DWORD *)(v114 + 24))
      *(_DWORD *)(*(_QWORD *)(v114 + 16) + 4 * *(unsigned int *)(v114 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v115 + 1, (unint64_t)&v218);
    else
      *(_DWORD *)(*v116 + 4 * v115) = v113;
    ++*(_DWORD *)(v114 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v205 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20);
    if (v205 <= -2)
    {
      __break(0xC471u);
      JUMPOUT(0x1982848D8);
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v205 + 1, v67, v68, v69, v70, v71, v72);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v92 = v208;
  }
  --*v78;
LABEL_73:
  v117 = v207;
  if (!*(_QWORD *)(a1 + 112))
    goto LABEL_74;
  *(_QWORD *)(a2 + 328) = **(_QWORD **)(a2 + 328);
  --*(_DWORD *)(a2 + 408);
  v135 = *(_QWORD *)(a2 + 424) - 1;
  if (*(unsigned int *)(a2 + 444) <= v135 >> 4)
  {
LABEL_194:
    __break(0xC471u);
    JUMPOUT(0x1982848B8);
  }
  *(_QWORD *)(a2 + 424) = v135;
  if (!v217)
  {
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  v137 = v215;
  v136 = v216;
  v143 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  if (v137)
    v144 = v137[1];
  else
    v144 = 0x3FFFFFFF;
  v145 = (_QWORD *)(a2 + 720);
  *(_QWORD *)&v218 = v206;
  DWORD2(v218) = v136[1];
  HIDWORD(v218) = *(_DWORD *)(v143 + 4);
  LODWORD(v219) = v144;
  v146 = *(unsigned int *)(a2 + 732);
  if ((_DWORD)v146 == *(_DWORD *)(a2 + 728))
  {
    v147 = WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v145, v146 + 1, (unint64_t)&v218);
    v148 = *(_QWORD *)(a2 + 720) + 24 * *(unsigned int *)(a2 + 732);
    v149 = *(_OWORD *)v147;
    v150 = *(_QWORD *)(v147 + 16);
  }
  else
  {
    v148 = *v145 + 24 * v146;
    v149 = v218;
    v150 = v219;
  }
  *(_QWORD *)(v148 + 16) = v150;
  *(_OWORD *)v148 = v149;
  ++*(_DWORD *)(a2 + 732);
  v151 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v12, a2, v151, v138, v139, v140, v141, v142);
  v158 = *(_QWORD *)(a2 + 24);
  v159 = *(unsigned int *)(v158 + 28);
  if (!(_DWORD)v159 || v151 != *(_DWORD *)(*(_QWORD *)(v158 + 16) + 4 * v159 - 4))
  {
    LODWORD(v218) = v151;
    v160 = (_QWORD *)(v158 + 16);
    if ((_DWORD)v159 == *(_DWORD *)(v158 + 24))
      *(_DWORD *)(*(_QWORD *)(v158 + 16) + 4 * *(unsigned int *)(v158 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, v159 + 1, (unint64_t)&v218);
    else
      *(_DWORD *)(*v160 + 4 * v159) = v151;
    ++*(_DWORD *)(v158 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  JSC::BytecodeGenerator::restoreScopeRegister(a2, *(_DWORD *)(a2 + 124) - 1, v152, v153, v154, v155, v156, v157);
  v167 = *(_QWORD *)(a1 + 104);
  if (!v167)
    v167 = *(_QWORD *)(a1 + 88);
  v168 = *(_DWORD *)(v167 + 20);
  v169 = v168 + 1;
  if (*(_BYTE *)(a2 + 416) == 2)
  {
    if ((*(_BYTE *)(a2 + 104) & 4) != 0)
    {
      if (v168 <= -2)
      {
        __break(0xC471u);
        JUMPOUT(0x198284918);
      }
      JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v168 + 1, v161, v162, v163, v164, v165, v166);
      JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
      v117 = v207;
    }
    if ((unint64_t)&v206 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v92 = v208;
    }
    else
    {
      v170 = *(_BYTE **)(a1 + 112);
      v92 = v208;
      if (v170[24])
        JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, *(JSC::StatementNode **)(a1 + 112));
      (*(void (**)(_BYTE *, unint64_t, _QWORD))(*(_QWORD *)v170 + 16))(v170, a2, 0);
    }
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)))
      JSC::BytecodeGenerator::emitLoad(a2, a3, 10, v193, v194, v195, v196, v197);
    JSC::BytecodeGenerator::emitProfileControlFlow(a2, v169, v192, v193, v194, v195, v196, v197);
    JSC::BytecodeGenerator::emitNodeInTailPosition((JSC::BytecodeGenerator *)a2, (uint64_t)a3, *(JSC::StatementNode **)(a1 + 112));
    v92 = v208;
    if (a3 && (int *)(a2 + 208) != a3 && v208 != a3)
      JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v208, v198, v199, v200, v201, v202);
  }
  if (!v217)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_194;
  }
  JSC::BytecodeGenerator::emitFinallyCompletion(a2, (uint64_t)v211, (uint64_t)v117);
  v171 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v117, a2, v171, v172, v173, v174, v175, v176);
  v177 = *(_QWORD *)(a2 + 24);
  v178 = *(unsigned int *)(v177 + 28);
  if (!(_DWORD)v178 || v171 != *(_DWORD *)(*(_QWORD *)(v177 + 16) + 4 * v178 - 4))
  {
    LODWORD(v218) = v171;
    v179 = (_QWORD *)(v177 + 16);
    if ((_DWORD)v178 == *(_DWORD *)(v177 + 24))
      *(_DWORD *)(*(_QWORD *)(v177 + 16) + 4 * *(unsigned int *)(v177 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v179, v178 + 1, (unint64_t)&v218);
    else
      *(_DWORD *)(*v179 + 4 * v178) = v171;
    ++*(_DWORD *)(v177 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v180 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 20);
    if (v180 <= -2)
    {
      __break(0xC471u);
      JUMPOUT(0x1982848F8);
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v180 + 1, v67, v68, v69, v70, v71, v72);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v117 = v207;
    v92 = v208;
  }
LABEL_74:
  if (v209)
    --*v209;
  if (v210)
    --*v210;
  if (v217)
  {
    v118 = v216;
    v216 = 0;
    if (v118)
      --*v118;
    v119 = v215;
    v215 = 0;
    if (v119)
      --*v119;
    if (v214)
    {
      v189 = 16 * v214;
      v190 = (_DWORD **)((char *)v212 + 8);
      do
      {
        v191 = *v190;
        *v190 = 0;
        if (v191)
          --*v191;
        v190 += 2;
        v189 -= 16;
      }
      while (v189);
    }
    v120 = v212;
    if (v212)
    {
      v212 = 0;
      v213 = 0;
      WTF::fastFree((unint64_t)v120, v66, v67, v68, v69, v70, v71, v72);
    }
  }
  if (v117)
    --*v117;
  if (v12)
    --*(_DWORD *)v12;
  if (v21)
    --*(_DWORD *)v21;
  if (v14)
    --*v14;
  if (v92)
    --*v92;
}

uint64_t JSC::ProgramNode::emitBytecode(JSC::BytecodeGenerator *a1, JSC *a2, JSC::ScopeNode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::emitProgramNodeBytecode(a2, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::emitProgramNodeBytecode(JSC *this, JSC::BytecodeGenerator *a2, JSC::ScopeNode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BYTE v48[12];

  v10 = *((_DWORD *)a2 + 40);
  *(_QWORD *)v48 = *((_QWORD *)a2 + 19);
  *(_DWORD *)&v48[8] = v10;
  JSC::BytecodeGenerator::emitDebugHook((char *)this, 0, (uint64_t)v48, a4, a5, a6, a7, a8);
  v11 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
  v17 = v11;
  if (v11)
    ++*v11;
  JSC::BytecodeGenerator::emitLoad((uint64_t)this, v11, 10, v12, v13, v14, v15, v16);
  if ((*((_BYTE *)this + 104) & 4) != 0)
  {
    v47 = *((_DWORD *)a2 + 39);
    if ((v47 & 0x80000000) != 0)
    {
      result = 1921;
      __break(0xC471u);
      return result;
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>((uint64_t)this, v47, v18, v19, v20, v21, v22, v23);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*((JSC::UnlinkedCodeBlockGenerator **)this + 3), *((_DWORD *)this + 12));
  }
  v24 = (uint64_t *)*((_QWORD *)a2 + 28);
  if (v24)
  {
    v25 = *v24;
    if (*((_BYTE *)this + 416) == 2)
    {
      v26 = 0;
LABEL_7:
      while (v25)
      {
        if (v25 == v26)
          JSC::BytecodeGenerator::emitLoad((uint64_t)this, v17, 10, v19, v20, v21, v22, v23);
        if ((unint64_t)v48 < *(_QWORD *)(*((_QWORD *)this + 87) + 93104))
        {
          *((_BYTE *)this + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
        }
        else
        {
          if (*(_BYTE *)(v25 + 24))
            JSC::BytecodeGenerator::emitDebugHook(this, (JSC::StatementNode *)v25);
          (*(void (**)(uint64_t, JSC *, int *))(*(_QWORD *)v25 + 16))(v25, this, v17);
        }
        v25 = *(_QWORD *)(v25 + 32);
      }
      goto LABEL_15;
    }
    if (v25)
    {
      v26 = 0;
      do
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
          v26 = v25;
        v25 = *(_QWORD *)(v25 + 32);
      }
      while (v25);
      v25 = *v24;
      goto LABEL_7;
    }
  }
LABEL_15:
  *(_DWORD *)v48 = *((_DWORD *)a2 + 7);
  *(_QWORD *)&v48[4] = *(_QWORD *)((char *)a2 + 12);
  JSC::BytecodeGenerator::emitDebugHook((char *)this, 1, (uint64_t)v48, v19, v20, v21, v22, v23);
  v27 = v17[1];
  result = JSC::OpEnd::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, v27, v28, v29, v30, v31, v32, v33);
  if ((result & 1) == 0)
  {
    result = JSC::OpEnd::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)this, v27, v35, v36, v37, v38, v39, v40);
    if ((result & 1) == 0)
      result = JSC::OpEnd::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, v27, v41, v42, v43, v44, v45, v46);
  }
  --*v17;
  return result;
}

uint64_t JSC::ModuleProgramNode::emitBytecode(JSC::BytecodeGenerator *a1, JSC *this, JSC::ScopeNode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::emitProgramNodeBytecode(this, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::EvalNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE **v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[12];

  v10 = *(_DWORD *)(a1 + 160);
  *(_QWORD *)v46 = *(_QWORD *)(a1 + 152);
  *(_DWORD *)&v46[8] = v10;
  JSC::BytecodeGenerator::emitDebugHook((char *)a2, 0, (uint64_t)v46, a4, a5, a6, a7, a8);
  v11 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v17 = v11;
  if (v11)
    ++*v11;
  JSC::BytecodeGenerator::emitLoad(a2, v11, 10, v12, v13, v14, v15, v16);
  v23 = *(_BYTE ***)(a1 + 224);
  if (v23)
  {
    v24 = *v23;
    if (*(_BYTE *)(a2 + 416) == 2)
    {
      v25 = 0;
    }
    else
    {
      if (!v24)
        goto LABEL_14;
      v25 = 0;
      do
      {
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v24 + 24))(v24))
          v25 = v24;
        v24 = (_BYTE *)*((_QWORD *)v24 + 4);
      }
      while (v24);
      v24 = *v23;
    }
    for (; v24; v24 = (_BYTE *)*((_QWORD *)v24 + 4))
    {
      if (v24 == v25)
        JSC::BytecodeGenerator::emitLoad(a2, v17, 10, v18, v19, v20, v21, v22);
      if ((unint64_t)v46 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v24[24])
          JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v24);
        (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v24 + 16))(v24, a2, v17);
      }
    }
  }
LABEL_14:
  *(_DWORD *)v46 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)&v46[4] = *(_QWORD *)(a1 + 12);
  JSC::BytecodeGenerator::emitDebugHook((char *)a2, 1, (uint64_t)v46, v18, v19, v20, v21, v22);
  v26 = v17[1];
  result = JSC::OpEnd::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v26, v27, v28, v29, v30, v31, v32);
  if ((result & 1) == 0)
  {
    result = JSC::OpEnd::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v26, v34, v35, v36, v37, v38, v39);
    if ((result & 1) == 0)
      result = JSC::OpEnd::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v26, v40, v41, v42, v43, v44, v45);
  }
  --*v17;
  return result;
}

void JSC::FunctionNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE **v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t *v46;
  uint64_t v47;
  _BYTE *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  char v56;
  char v57;
  JSC::BytecodeGenerator *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD **v124;
  uint64_t v125;
  _DWORD *v126;
  unint64_t v127;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::BytecodeGenerator *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int8x16_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int8x16_t v205;
  uint64_t v206;
  _DWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE **v237;
  _BYTE *v238;
  _BYTE *v239;
  _DWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _DWORD *v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t i;
  uint64_t v254;
  _BYTE v255[16];
  _DWORD *v256;
  int v257;
  __int128 v258;
  int v259;
  unsigned int v260;
  uint64_t v261;

  v10 = *(_BYTE *)(a2 + 104);
  if ((v10 & 2) != 0)
  {
    v251 = *(_QWORD *)(a1 + 248);
    if (*(_BYTE *)(v251 + 72))
    {
      v252 = *(unsigned int *)(v251 + 20);
      if ((_DWORD)v252)
      {
        for (i = 0; i < v252; ++i)
        {
          if (i >= v252)
          {
            __break(0xC471u);
            JUMPOUT(0x1982856E8);
          }
          v254 = *(_QWORD *)(*(_QWORD *)(v251 + 8) + 16 * i);
          LODWORD(v258) = 0;
          DWORD1(v258) = i + 6;
          BYTE8(v258) = 0;
          JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)&v258, v254 + 8, v254 + 20);
          v251 = *(_QWORD *)(a1 + 248);
          v252 = *(unsigned int *)(v251 + 20);
        }
        v10 = *(_BYTE *)(a2 + 104);
      }
    }
  }
  v11 = *(_DWORD *)(a1 + 156);
  if ((v10 & 4) != 0)
  {
    if ((v11 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1982856C0);
    }
    JSC::OpProfileControlFlow::emit<JSC::BytecodeGenerator>(a2, v11, a3, a4, a5, a6, a7, a8);
    JSC::UnlinkedCodeBlockGenerator::addOpProfileControlFlowBytecodeOffset(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), *(_DWORD *)(a2 + 48));
    v11 = *(_DWORD *)(a1 + 156);
  }
  v12 = *(_DWORD *)(a1 + 160);
  LODWORD(v258) = *(_DWORD *)(a1 + 152);
  *(_QWORD *)((char *)&v258 + 4) = __PAIR64__(v12, v11);
  JSC::BytecodeGenerator::emitDebugHook((char *)a2, 2, (uint64_t)&v258, a4, a5, a6, a7, a8);
  switch(*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42))
  {
    case 1:
    case 0xF:
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v258, a2, v14, v15, v16, v17, v18, v19);
      v166 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      if (!*(_DWORD *)(a2 + 356))
      {
        __break(0xC471u);
        JUMPOUT(0x1982856C8);
      }
      v172 = v166;
      v173 = **(_QWORD **)(a2 + 344) + 48;
      v174 = JSC::BytecodeGenerator::emitLoad(a2, 0, 0xFFFE000000000000, v167, v168, v169, v170, v171);
      JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a2, v172, v173, (uint64_t)v174, v175, v176, v177, v178, v179);
      v180 = (_DWORD *)v258;
      JSC::BytecodeGenerator::emitJumpIfTrue(a2, v172, v258, v181, v182, v183, v184, v185);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v256, a2, v186, v187, v188, v189, v190, v191);
      v192 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      if (!*(_DWORD *)(a2 + 356))
      {
        __break(0xC471u);
        JUMPOUT(0x1982856D0);
      }
      v198 = v192;
      v199 = **(_QWORD **)(a2 + 344) + 48;
      v200 = JSC::BytecodeGenerator::emitLoad(a2, 0, 0xFFFE000000000002, v193, v194, v195, v196, v197);
      JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a2, v198, v199, (uint64_t)v200, v201, v202, v203, v204, v205);
      v206 = v198;
      v207 = v256;
      JSC::BytecodeGenerator::emitJumpIfTrue(a2, v206, (uint64_t)v256, v208, v209, v210, v211, v212);
      if (!*(_DWORD *)(a2 + 356))
      {
        __break(0xC471u);
        JUMPOUT(0x1982856D8);
      }
      JSC::BytecodeGenerator::emitReturn(a2, **(_QWORD **)(a2 + 344) + 36, v213, v214, v215, v216, v217, v218);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v207, v219, v220, v221, v222, v223, v224);
      if (!*(_DWORD *)(a2 + 356))
      {
        __break(0xC471u);
        JUMPOUT(0x1982856E0);
      }
      JSC::BytecodeGenerator::emitThrow(a2, *(_DWORD *)(**(_QWORD **)(a2 + 344) + 40), v225, v226, v227, v228, v229, v230);
      --*v207;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v180, v231, v232, v233, v234, v235, v236);
      --*v180;
      goto LABEL_97;
    case 2:
    case 0x10:
    case 0x11:
    case 0x12:
      v139 = *(uint64_t **)(a1 + 224);
      if (*v139 == v139[1])
        v140 = *v139;
      else
        v140 = 0;
      v141 = *(_QWORD *)(v140 + 40);
      v142 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v55 = v142;
      if (v142)
        ++*v142;
      JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v142, v141, v143, v144, v145, v146, v147);
      if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 28) & 2) == 0)
      {
        v240 = JSC::emitHomeObjectForCallee((JSC *)a2, v148, v149, v150, v151, v152, v153, v154);
        if (v240)
        {
          v246 = v240;
          ++*v240;
          JSC::emitPutHomeObject(a2, (uint64_t)v55, (uint64_t)v240, v241, v242, v243, v244, v245);
          --*v246;
        }
        else
        {
          JSC::emitPutHomeObject(a2, (uint64_t)v55, 0, v241, v242, v243, v244, v245);
        }
      }
      if (((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42)) & 0x40004) != 0)
        JSC::BytecodeGenerator::emitPutGeneratorFields(a2, v55[1], v149, v150, v151, v152, v153, v154);
      else
        JSC::BytecodeGenerator::emitPutAsyncGeneratorFields(a2, (uint64_t)v55, v149, v150, v151, v152, v153, v154);
      LODWORD(v258) = *(_DWORD *)(a1 + 28);
      *(_QWORD *)((char *)&v258 + 4) = *(_QWORD *)(a1 + 12);
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 4, (uint64_t)&v258, v155, v156, v157, v158, v159);
      JSC::BytecodeGenerator::emitReturn(a2, *(_QWORD *)(a2 + 272), v160, v161, v162, v163, v164, v165);
      goto LABEL_73;
    case 7:
    case 8:
LABEL_97:
      v237 = *(_BYTE ***)(a1 + 224);
      if (!v237)
        goto LABEL_108;
      v238 = *v237;
      if (*(_BYTE *)(a2 + 416) == 2)
      {
        v239 = 0;
      }
      else
      {
        if (!v238)
          goto LABEL_108;
        v239 = 0;
        do
        {
          if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v238 + 24))(v238))
            v239 = v238;
          v238 = (_BYTE *)*((_QWORD *)v238 + 4);
        }
        while (v238);
        v238 = *v237;
      }
      for (; v238; v238 = (_BYTE *)*((_QWORD *)v238 + 4))
      {
        if (v238 == v239)
          JSC::BytecodeGenerator::emitLoad(a2, (int *)(a2 + 208), 10, v15, v16, v17, v18, v19);
        if ((unint64_t)v255 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v238[24])
            JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v238);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v238 + 16))(v238, a2, a2 + 208);
        }
      }
LABEL_108:
      v45 = JSC::BytecodeGenerator::emitLoad(a2, 0, 10, v15, v16, v17, v18, v19);
      v44 = a2;
      goto LABEL_30;
    case 9:
    case 0xA:
    case 0xB:
      v46 = *(uint64_t **)(a1 + 224);
      if (*v46 == v46[1])
        v47 = *v46;
      else
        v47 = 0;
      v48 = *(_BYTE **)(v47 + 40);
      v49 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v55 = v49;
      if (v49)
        ++*v49;
      v56 = *(_BYTE *)(a2 + 709);
      v57 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)v255 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (v48[24])
          JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v48 + 8), v50, v51, v52, v53, v54);
        (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v48 + 16))(v48, a2, v55);
      }
      *(_BYTE *)(a2 + 710) = v57;
      *(_BYTE *)(a2 + 709) = v56;
      v65 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
      if ((*(_WORD *)(v65 + 28) & 2) == 0)
        goto LABEL_49;
      if (*(_BYTE *)(v65 + 42) != 11)
        goto LABEL_55;
      v129 = *(_QWORD *)(a2 + 192);
      if ((*(_BYTE *)(v129 + 167) & 0x19) == 0 && (*(_WORD *)(v129 + 164) & 1) == 0)
        goto LABEL_79;
LABEL_49:
      v66 = JSC::emitHomeObjectForCallee((JSC *)a2, v58, v59, v60, v61, v62, v63, v64);
      v73 = v66;
      if (v66)
        ++*v66;
      JSC::Symbols::homeObjectPrivateName += 2;
      *(_QWORD *)&v258 = &JSC::Symbols::homeObjectPrivateName;
      v74 = JSC::BytecodeGenerator::addConstant(a2, (WTF::AtomStringImpl *)&v258, v67, v68, v69, v70, v71, v72);
      JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a2 + 688), v55[1], v74);
      JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, (void *)v55[1], v74, v73[1], (unint64_t)*(unsigned __int8 *)(a2 + 712) << 8, v75, v76, v77);
      v78 = (WTF::StringImpl *)v258;
      *(_QWORD *)&v258 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
        {
          WTF::StringImpl::~StringImpl(v78, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v78 -= 2;
        }
      }
      --*v73;
      if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42) == 11)
      {
LABEL_79:
        v130 = *(_QWORD *)(a2 + 192);
        if ((*(_BYTE *)(v130 + 167) & 0x1D) != 0 || (*(_WORD *)(v130 + 164) & 1) != 0)
          JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a2, (uint64_t)v58, v59, v60, v61, v62, v63, v64);
      }
LABEL_55:
      JSC::BytecodeGenerator::emitPutGeneratorFields(a2, v55[1], v59, v60, v61, v62, v63, v64);
      LODWORD(v258) = *(_DWORD *)(a1 + 28);
      *(_QWORD *)((char *)&v258 + 4) = *(_QWORD *)(a1 + 12);
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 4, (uint64_t)&v258, v79, v80, v81, v82, v83);
      v89 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 7u, v84, v85, v86, v87, v88);
      v90 = v89;
      if (v89)
        ++*v89;
      JSC::CallArguments::CallArguments((uint64_t)&v258, a2, 0, 3);
      JSC::BytecodeGenerator::emitLoad(a2, **((int ***)&v258 + 1), 10, v91, v92, v93, v94, v95);
      v101 = *((_QWORD *)&v258 + 1);
      v102 = *(int **)(*((_QWORD *)&v258 + 1) + 8);
      if ((int *)(a2 + 208) != v102)
      {
        if (v102)
        {
          v103 = *(_QWORD *)(a2 + 272);
          if (v102 != (int *)v103)
          {
            JSC::BytecodeGenerator::emitMove(a2, v102, v103, v96, v97, v98, v99, v100);
            v101 = *((_QWORD *)&v258 + 1);
          }
        }
      }
      JSC::BytecodeGenerator::emitLoad(a2, *(int **)(v101 + 16), 10, v96, v97, v98, v99, v100);
      JSC::BytecodeGenerator::emitLoad(a2, *(int **)(*((_QWORD *)&v258 + 1) + 24), 0xFFFE000000000000, v104, v105, v106, v107, v108);
      v109 = *(_DWORD *)(a1 + 16);
      v256 = *(_DWORD **)(a1 + 8);
      v257 = v109;
      v110 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v110, (uint64_t)v90, 0, (uint64_t)&v258, &v256, &v256, &v256, 0);
      JSC::BytecodeGenerator::emitReturn(a2, *(_QWORD *)(a2 + 320), v111, v112, v113, v114, v115, v116);
      if (v260)
      {
        v124 = (_DWORD **)*((_QWORD *)&v258 + 1);
        v125 = 8 * v260;
        do
        {
          v126 = *v124;
          *v124 = 0;
          if (v126)
            --*v126;
          ++v124;
          v125 -= 8;
        }
        while (v125);
      }
      v127 = *((_QWORD *)&v258 + 1);
      if (&v261 != *((uint64_t **)&v258 + 1) && *((_QWORD *)&v258 + 1) != 0)
      {
        *((_QWORD *)&v258 + 1) = 0;
        v259 = 0;
        WTF::fastFree(v127, v117, v118, v119, v120, v121, v122, v123);
      }
      if (v90)
        --*v90;
LABEL_73:
      if (v55)
        --*v55;
      return;
    default:
      v20 = *(_BYTE ***)(a1 + 224);
      if (!v20)
        goto LABEL_25;
      v21 = *v20;
      if (*(_BYTE *)(a2 + 416) == 2)
      {
        v22 = 0;
      }
      else
      {
        if (!v21)
          goto LABEL_15;
        v22 = 0;
        do
        {
          if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v21 + 24))(v21))
            v22 = v21;
          v21 = (_BYTE *)*((_QWORD *)v21 + 4);
        }
        while (v21);
        v21 = *v20;
      }
      for (; v21; v21 = (_BYTE *)*((_QWORD *)v21 + 4))
      {
        if (v21 == v22)
          JSC::BytecodeGenerator::emitLoad(a2, (int *)(a2 + 208), 10, v15, v16, v17, v18, v19);
        if ((unint64_t)v255 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (v21[24])
            JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v21);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, a2, a2 + 208);
        }
      }
LABEL_15:
      v23 = *(_QWORD *)(a1 + 224);
      if (!v23
        || ((v25 = *(_QWORD **)v23, v24 = *(_QWORD **)(v23 + 8), v25) ? (v26 = v25 == v24) : (v26 = 0),
            !v26
         || !(*(unsigned int (**)(_QWORD *))(*v25 + 104))(v25)
         || (v27 = v25[11]) == 0
         || (v28 = *(_QWORD *)(v27 + 8)) == 0
         || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 64))(v28) & 1) == 0))
      {
LABEL_25:
        v29 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
        if ((*(_DWORD *)(v29 + 20) & 0x80000000) != 0 && (*(_WORD *)(v29 + 28) & 0xC0) != 0xC0)
          v30 = JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v13, v14, v15, v16, v17, v18, v19);
        else
          v30 = (uint64_t)JSC::BytecodeGenerator::emitLoad(a2, 0, 10, v15, v16, v17, v18, v19);
        v36 = (int *)v30;
        if ((*(_BYTE *)(a2 + 104) & 2) != 0 && v30)
        {
          v247 = *(_DWORD *)(v30 + 4);
          v248 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
          JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v247, 0, 4, 0, v248, v249, v250);
        }
        v37 = *(_QWORD *)(a2 + 192);
        LODWORD(v258) = *(_DWORD *)(v37 + 28);
        *(_QWORD *)((char *)&v258 + 4) = *(_QWORD *)(v37 + 12);
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 4, (uint64_t)&v258, v31, v32, v33, v34, v35);
        v44 = a2;
        v45 = v36;
LABEL_30:
        JSC::BytecodeGenerator::emitReturn(v44, (uint64_t)v45, v38, v39, v40, v41, v42, v43);
      }
      return;
  }
}

void JSC::FuncDeclNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  WTF::StringImpl *v96[5];
  WTF::StringImpl *v97;
  WTF::StringImpl *v98[2];
  _DWORD *v99;

  v8 = *(_QWORD *)(a1 + 40);
  if ((*(_WORD *)(v8 + 33) & 0x200) == 0)
    return;
  v10 = (uint64_t *)(v8 + 40);
  if (((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 42)) & 0x8182) != 0)
  {
    v60 = *(uint64_t **)(a2 + 136);
    if (!v60)
    {
      __break(0xC471u);
      goto LABEL_56;
    }
    if ((WTF::FixedVector<JSC::Identifier>::contains<JSC::Identifier>(*v60, *v10) & 1) != 0)
      return;
  }
  v95 = v10;
  JSC::BytecodeGenerator::variable((uint64_t)v98, a2, (uint64_t)v10, 0, a5, a6, a7, a8);
  v18 = v99;
  if (v99)
  {
    v19 = 1;
    v20 = v99;
LABEL_6:
    *v18 += v19;
    goto LABEL_7;
  }
  v61 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v98, v13, v14, v15, v16, v17);
  v18 = v61;
  if (v61)
    ++*v61;
  v62 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v66 = JSC::BytecodeGenerator::emitGetFromScope(a2, v62, (uint64_t)v18, (unint64_t)v98, 1, v63, v64, v65);
  v20 = v66;
  if (v66)
    ++*v66;
  if (v18)
  {
    v19 = -1;
    goto LABEL_6;
  }
LABEL_7:
  v21 = *(unsigned __int8 *)(a2 + 416);
  if (v21 == 2)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      v22 = *(_QWORD *)(a2 + 176);
      if (v22 >= *(unsigned int *)(a2 + 124))
      {
        __break(0xC471u);
        JUMPOUT(0x198285B4CLL);
      }
      v23 = *(_QWORD *)(a2 + 112) + 24 * v22;
      v24 = *(_QWORD *)(v23 + 8);
      v25 = *(_DWORD *)(v23 + 20);
      JSC::SymbolTable::get((unint64_t *)&v97, *(_QWORD *)(*(_QWORD *)v23 + 8), *v95);
      v26 = v97;
      if (*v95 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 880))
        goto LABEL_11;
      v75 = (v97 & 1) != 0 ? &v97 : (WTF::StringImpl **)v97;
      if ((unint64_t)*v75 > 1)
        goto LABEL_11;
      if (*(_BYTE *)(a2 + 184))
      {
        v76 = *(_QWORD *)(a2 + 176);
        if (v76)
        {
          v77 = v76 - 1;
          if (v77 < *(unsigned int *)(a2 + 124))
          {
            v78 = *(_QWORD *)(a2 + 112) + 24 * v77;
            v24 = *(_QWORD *)(v78 + 8);
            v25 = *(_DWORD *)(v78 + 20);
            JSC::SymbolTable::get((unint64_t *)v96, *(_QWORD *)(*(_QWORD *)v78 + 8), *v95);
            v86 = v97;
            v26 = v96[0];
            v97 = v96[0];
            v96[0] = v86;
            if ((v86 & 1) == 0)
            {
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)v96, v79, v80, v81, v82, v83, v84, v85);
              v26 = v97;
            }
LABEL_11:
            if ((v26 & 1) != 0)
              v26 = (WTF::StringImpl *)&v97;
            if (*(_QWORD *)v26 <= 1uLL)
            {
              __break(0xC471u);
              JUMPOUT(0x198285AF8);
            }
            JSC::BytecodeGenerator::variableForLocalEntry((uint64_t)v96, a2, (_DWORD *)*v95, (_QWORD **)&v97, v25, 0);
            JSC::BytecodeGenerator::emitPutToScope(a2, v24, (uint64_t)v96, (uint64_t)v20, 1, 2, v27, v28);
            v29 = v96[0];
            v96[0] = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
              {
                WTF::StringImpl::~StringImpl(v29, v11, v12, v13, v14, v15, v16, v17);
                WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
              }
              else
              {
                *(_DWORD *)v29 -= 2;
              }
            }
            if ((v97 & 1) == 0)
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v97, v11, v12, v13, v14, v15, v16, v17);
            goto LABEL_19;
          }
          __break(0xC471u);
LABEL_60:
          JUMPOUT(0x1982859C8);
        }
LABEL_57:
        __break(0xC471u);
        JUMPOUT(0x198285B44);
      }
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v21 < 2)
  {
    v31 = JSC::BytecodeGenerator::emitResolveScopeForHoistingFuncDeclInEval(a2, (WTF::AtomStringImpl *)v95);
    v32 = v31;
    if (v31)
      ++*v31;
    v33 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitIsUndefined(a2, (uint64_t)v33, (uint64_t)v32, v34, v35, v36, v37, v38);
    if (v33)
      ++*v33;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v96, a2, v39, v40, v41, v42, v43, v44);
    v45 = v96[0];
    JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v33, (uint64_t)v96[0], v46, v47, v48, v49, v50);
    JSC::BytecodeGenerator::emitPutToScopeDynamic(a2, v32[1], (WTF::AtomStringImpl *)v95, (uint64_t)v20, 1, v51, v52, v53);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v45, v54, v55, v56, v57, v58, v59);
    --*(_DWORD *)v45;
    if (v33)
      --*v33;
    --*v32;
    goto LABEL_19;
  }
  if (v21 == 3)
  {
    __break(0xC471u);
    goto LABEL_60;
  }
LABEL_19:
  if (v20)
    --*v20;
  v30 = v98[0];
  v98[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
}

uint64_t JSC::FuncExprNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  JSC::BytecodeGenerator::emitNewFunctionExpressionCommon(a2, v5, *(_QWORD *)(a1 + 32), v6, v7, v8, v9, v10);
  return v5;
}

uint64_t JSC::ArrowFuncExprNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  JSC::BytecodeGenerator::emitNewFunctionExpressionCommon(a2, v5, *(_QWORD *)(a1 + 32), v6, v7, v8, v9, v10);
  return v5;
}

uint64_t JSC::MethodDefinitionNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0);
  JSC::BytecodeGenerator::emitNewFunctionExpressionCommon(a2, v5, *(_QWORD *)(a1 + 32), v6, v7, v8, v9, v10);
  return v5;
}

int *JSC::YieldExprNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *result;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;

  if (*(_BYTE *)(a1 + 72))
  {
    v27 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v17 = v27;
    if (v27)
      ++*v27;
    JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v27, *(_QWORD *)(a1 + 64), v28, v29, v30, v31, v32);
    v24 = (int *)JSC::BytecodeGenerator::emitDelegateYield(a2, (uint64_t)v17, (_DWORD *)(a1 + 28));
  }
  else
  {
    if (*(_QWORD *)(a1 + 64))
    {
      v11 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v17 = v11;
      if (v11)
        ++*v11;
      JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v11, *(_QWORD *)(a1 + 64), v12, v13, v14, v15, v16);
    }
    else
    {
      v40 = JSC::BytecodeGenerator::emitLoad(a2, 0, 10, a4, a5, a6, a7, a8);
      v17 = v40;
      if (v40)
        ++*v40;
    }
    v24 = (int *)JSC::BytecodeGenerator::emitYield(a2, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  }
  v25 = v24;
  if (v24)
    ++*v24;
  if (a2 + 208 == a3 || (v33 = JSC::BytecodeGenerator::finalDestination(a2, a3, 0), a2 + 208 == v33))
  {
    result = 0;
  }
  else
  {
    v39 = (int *)v33;
    result = v25;
    if (v39)
    {
      result = v25;
      if (v39 != v25)
      {
        JSC::BytecodeGenerator::emitMove(a2, v39, (uint64_t)v25, v34, v35, v36, v37, v38);
        result = v39;
      }
    }
  }
  if (v25)
    --*v25;
  if (v17)
    --*v17;
  return result;
}

int *JSC::AwaitExprNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *result;
  uint64_t v22;

  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v12 = v6;
  if (v6)
    ++*v6;
  v13 = *(_BYTE **)(a1 + 64);
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v22 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v13[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), v7, v8, v9, v10, v11);
    (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v13 + 16))(v13, a2, v12);
  }
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  if (!a3)
    a3 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  result = JSC::BytecodeGenerator::emitAwait(a2, a3, (uint64_t)v12, v16, v17, v18, v19, v20);
  if (v12)
    --*v12;
  return result;
}

void JSC::DefineFieldNode::emitBytecode(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _BYTE *v11;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  WTF::StringImpl *v135[5];

  v4 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v10 = v4;
  if (v4)
    ++*v4;
  v11 = *(_BYTE **)(a1 + 48);
  if (!v11)
  {
    JSC::BytecodeGenerator::emitLoad(a2, v4, 10, v5, v6, v7, v8, v9);
    goto LABEL_10;
  }
  v12 = *(_BYTE *)(a2 + 709);
  v13 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v132 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v11[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v11 + 8), v5, v6, v7, v8, v9);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v11 + 16))(v11, a2, v10);
  }
  *(_BYTE *)(a2 + 710) = v13;
  *(_BYTE *)(a2 + 709) = v12;
  v14 = *(_QWORD **)(a1 + 48);
  if (!(*(unsigned int (**)(_QWORD *))(*v14 + 152))(v14))
  {
    if ((*(unsigned int (**)(_QWORD *))(*v14 + 176))(v14))
    {
      v127 = (_QWORD *)v14[21];
      if (!v127)
        v127 = (_QWORD *)v14[20];
      if (!*v127)
      {
        v128 = v14[24];
        if (!v128
          || (JSC::PropertyListNode::hasStaticallyNamedProperty(v128, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 1968)) & 1) == 0)
        {
          goto LABEL_50;
        }
      }
    }
LABEL_10:
    v20 = 0;
    goto LABEL_11;
  }
  v64 = v14[4];
  v65 = *(_QWORD *)(v64 + 40);
  if (v65 && *(_DWORD *)(v65 + 4) || *(_QWORD *)(v64 + 48))
    goto LABEL_10;
LABEL_50:
  if (*(_DWORD *)(a1 + 56) != 2)
    JSC::BytecodeGenerator::emitSetFunctionName(a2, (uint64_t)v10, (JSC::VM *)(a1 + 40));
  v20 = 1;
LABEL_11:
  v21 = *(_DWORD *)(a1 + 56);
  if (!v21)
  {
    v22 = *(_BYTE *)(a2 + 712);
    *(_BYTE *)(a2 + 712) = 0;
    v25 = *(_QWORD *)(a1 + 40);
    v24 = (WTF::StringImpl **)(a1 + 40);
    v23 = v25;
    if (!v25)
      goto LABEL_19;
    v26 = *(_DWORD *)(v23 + 16);
    if ((v26 & 0x20) != 0)
      goto LABEL_19;
    v27 = *(_BYTE **)(v23 + 8);
    v28 = *(unsigned int *)(v23 + 4);
    if ((v26 & 4) != 0)
    {
      if ((_DWORD)v28)
      {
        v29 = *v27 - 48;
        if (v29 <= 9 && (v28 < 2 || *v27 != 48))
        {
          v129 = v27 + 1;
          v130 = v28 - 1;
          while (v130)
          {
            if (v29 > 0x19999999)
              goto LABEL_17;
            v131 = *v129 - 48;
            if (v131 > 9)
              goto LABEL_17;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v38 = __CFADD__(v131, 10 * v29);
            v29 = v131 + 10 * v29;
            ++v129;
            --v130;
            if (v38)
              goto LABEL_18;
          }
          goto LABEL_96;
        }
      }
    }
    else if ((_DWORD)v28)
    {
      v29 = *(unsigned __int16 *)v27 - 48;
      if (v29 <= 9 && (*(_WORD *)v27 != 48 || v28 <= 1))
      {
        v35 = (unsigned __int16 *)(v27 + 2);
        v36 = v28 - 1;
        while (v36)
        {
          if (v29 > 0x19999999)
            goto LABEL_17;
          v37 = *v35 - 48;
          if (v37 > 9)
            goto LABEL_17;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v38 = __CFADD__(v37, 10 * v29);
          v29 = v37 + 10 * v29;
          ++v35;
          --v36;
          if (v38)
            goto LABEL_18;
        }
LABEL_96:
        v30 = 0x100000000;
        if (v29 == -1)
        {
          v30 = 0;
          v31 = 0;
        }
        else
        {
          v31 = v29;
        }
        if (v29 == -1)
          v32 = 0;
        else
          v32 = v29 & 0xFFFFFF00;
LABEL_18:
        v33 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
        {
          if ((v33 & 0x80000000) != 0)
            v108 = COERCE__INT64((double)v33) + 0x2000000000000;
          else
            v108 = v33 | 0xFFFE000000000000;
          v109 = JSC::BytecodeGenerator::emitLoad(a2, 0, v108, v15, v16, v17, v18, v19);
          if (v109)
          {
            v114 = v109;
            v115 = v109[1];
            ++*v109;
            JSC::BytecodeGenerator::emitDirectPutByVal(a2, *(_DWORD *)(a2 + 224), v115, (uint64_t)v10, v110, v111, v112, v113);
            --*v114;
          }
          else
          {
            JSC::BytecodeGenerator::emitDirectPutByVal(a2, *(_DWORD *)(a2 + 224), MEMORY[4], (uint64_t)v10, v110, v111, v112, v113);
          }
          goto LABEL_20;
        }
LABEL_19:
        JSC::BytecodeGenerator::emitDirectPutById(a2, (WTF::AtomStringImpl *)(a2 + 220), v24, (uint64_t)v10, v16, v17, v18, v19);
LABEL_20:
        *(_BYTE *)(a2 + 712) = v22;
        goto LABEL_21;
      }
    }
LABEL_17:
    v30 = 0;
    v31 = 0;
    v32 = 0;
    goto LABEL_18;
  }
  if (v21 != 1)
  {
    if (v21 == 2)
    {
      v74 = (uint64_t *)(a1 + 40);
      JSC::BytecodeGenerator::variable((uint64_t)v135, a2, a1 + 40, 0, v16, v17, v18, v19);
      v75 = *(_DWORD *)(a1 + 16);
      v133 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + 1) << 32);
      v134 = v75;
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), &v133);
      v81 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v135, v76, v77, v78, v79, v80);
      v82 = v81;
      if (v81)
        ++*v81;
      v83 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      v87 = v83;
      if (v83)
        ++*v83;
      JSC::BytecodeGenerator::emitGetFromScope(a2, v83, (uint64_t)v82, (unint64_t)v135, 0, v84, v85, v86);
      if (v20)
        JSC::OpSetFunctionName::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v10[1], v87[1], v88, v89, v90, v91, v92);
      v93 = *v74;
      if (*v74)
        LODWORD(v93) = *(_DWORD *)(v93 + 4);
      v94 = *(_DWORD *)(a1 + 16);
      v133 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + v93) << 32);
      v134 = v94;
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v87, (uint64_t)v135, a1 + 8, (uint64_t)&v133, v90, v91, v92);
      v95 = *(_BYTE *)(a2 + 712);
      *(_BYTE *)(a2 + 712) = 0;
      JSC::BytecodeGenerator::emitDirectPutByVal(a2, *(_DWORD *)(a2 + 224), v87[1], (uint64_t)v10, v96, v97, v98, v99);
      *(_BYTE *)(a2 + 712) = v95;
      --*v87;
      if (v82)
        --*v82;
      v107 = v135[0];
      v135[0] = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, v100, v101, v102, v103, v104, v105, v106);
          WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
    }
LABEL_21:
    if (!v10)
      return;
    goto LABEL_22;
  }
  JSC::BytecodeGenerator::variable((uint64_t)v135, a2, a1 + 40, 0, v16, v17, v18, v19);
  v39 = *(_QWORD *)(a1 + 40);
  if (v39)
    LODWORD(v39) = *(_DWORD *)(v39 + 4);
  v40 = *(_DWORD *)(a1 + 16);
  v133 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(_DWORD *)(a1 + 12) + v39) << 32);
  v134 = v40;
  JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), &v133);
  v46 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v135, v41, v42, v43, v44, v45);
  v47 = v46;
  if (v46)
    ++*v46;
  v48 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  if (v48)
  {
    v52 = v48;
    ++*v48;
    JSC::BytecodeGenerator::emitGetFromScope(a2, v48, (uint64_t)v47, (unint64_t)v135, 1, v49, v50, v51);
    JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(a2, *(_DWORD *)(a2 + 224), v52[1], v10[1], 2, v53, v54, v55);
    --*v52;
  }
  else
  {
    JSC::BytecodeGenerator::emitGetFromScope(a2, 0, (uint64_t)v47, (unint64_t)v135, 1, v49, v50, v51);
    JSC::OpPutPrivateName::emit<JSC::BytecodeGenerator>(a2, *(_DWORD *)(a2 + 224), MEMORY[4], v10[1], 2, v124, v125, v126);
  }
  if (v47)
    --*v47;
  v63 = v135[0];
  v135[0] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
LABEL_22:
  --*v10;
}

uint64_t JSC::ClassDeclNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t v13;

  v9 = *(_BYTE **)(a1 + 40);
  v10 = *(_BYTE *)(a2 + 709);
  v11 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v13 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v9[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v9 + 8), a4, a5, a6, a7, a8);
    result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, a2, 0);
  }
  *(_BYTE *)(a2 + 710) = v11;
  *(_BYTE *)(a2 + 709) = v10;
  return result;
}

int *JSC::ClassExprNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  unsigned int v10;
  int *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _DWORD *v29;
  __int16 v30;
  _BYTE *v31;
  char v32;
  char v33;
  int *v34;
  int *v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  WTF *v98;
  _QWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  WTF::AtomStringImpl *v110;
  WTF::StringImpl *v111;
  int *v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int *v121;
  WTF *v122;
  char v123;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  char v132;
  char v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int8x16_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  BOOL v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  WTF::StringImpl **v231;
  _DWORD **v232;
  uint64_t v233;
  uint64_t v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::UnlinkedFunctionExecutable *Executable;
  WTF *v243;
  _DWORD *v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  WTF::AtomStringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  WTF::StringImpl *v321;
  _DWORD *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  uint64_t v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  WTF *v349;
  WTF::StringImpl *v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _DWORD *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  void *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  WTF::StringImpl **v402;
  WTF::AtomStringImpl *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  WTF::StringImpl **v410;
  WTF::AtomStringImpl *v411;
  uint64_t v412;
  WTF::StringImpl **v413;
  WTF::StringImpl *v414;
  int v415;
  unint64_t v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char v425;
  _QWORD **v426;
  WTF::StringImpl **v427;
  WTF::AtomStringImpl *v428;
  uint64_t v429;
  uint64_t v430;
  WTF::StringImpl **v431;
  WTF::AtomStringImpl *v432;
  uint64_t v433;
  WTF::StringImpl **v434;
  WTF::StringImpl *v435;
  int v436;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  unint64_t v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _DWORD v465[4];
  _DWORD *v466;
  _DWORD *v467;
  _DWORD *v468;
  _DWORD *v469;
  int v470;
  int v471;
  int v472;
  int v473[2];
  _DWORD *v474;
  WTF *v475;
  uint64_t v476;
  WTF::StringImpl *v477[5];
  WTF *v478[13];

  v6 = *(unsigned __int8 *)(a2 + 712);
  *(_BYTE *)(a2 + 712) = 0;
  if (**(_QWORD **)(a1 + 160))
    JSC::BytecodeGenerator::pushLexicalScopeInternal(a2, (JSC::VariableEnvironment *)(a1 + 112), 0, 0, 0, 0, 2, 1);
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)v473 = a3;
  if (v7)
  {
    v125 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v8 = (uint64_t)v125;
    if (v125)
      ++*v125;
    v131 = *(_BYTE **)(a1 + 184);
    v132 = *(_BYTE *)(a2 + 709);
    v133 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v465 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v131[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v131 + 8), v126, v127, v128, v129, v130);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v131 + 16))(v131, a2, v8);
    }
    *(_BYTE *)(a2 + 710) = v133;
    *(_BYTE *)(a2 + 709) = v132;
    a3 = *(_QWORD *)v473;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a1 + 200))
    JSC::BytecodeGenerator::pushLexicalScope(a2, a1 + 64);
  v9 = *(_QWORD ***)(a1 + 88);
  v474 = (_DWORD *)v8;
  v472 = v6;
  if (!v9)
  {
    v10 = 0;
    v470 = 0;
    v471 = 1;
    goto LABEL_9;
  }
  if (*v9)
    v401 = *((_DWORD *)*v9 - 3);
  else
    v401 = 0;
  v402 = (WTF::StringImpl **)WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::begin(v9);
  v410 = v402;
  v411 = v403;
  v412 = **(_QWORD **)(a1 + 88);
  if (v412)
    v413 = (WTF::StringImpl **)(v412 + 16 * *(unsigned int *)(v412 - 4));
  else
    v413 = 0;
  if (v413 == v402)
  {
LABEL_252:
    v425 = 1;
  }
  else
  {
    while (1)
    {
      v414 = *v410;
      if (*v410)
        break;
      if (((_WORD)v410[1] & 7) != 0 && ((_WORD)v410[1] & 8) == 0)
        goto LABEL_281;
LABEL_245:
      while (1)
      {
        v410 += 2;
        if (v410 == (WTF::StringImpl **)v411)
          break;
        if ((unint64_t)*v410 + 1 > 1)
          goto LABEL_249;
      }
      v410 = (WTF::StringImpl **)v411;
LABEL_249:
      if (v410 == v413)
        goto LABEL_252;
    }
    v415 = *(_DWORD *)v414;
    *(_DWORD *)v414 += 2;
    if (((_WORD)v410[1] & 7) == 0 || ((_WORD)v410[1] & 8) != 0)
    {
      if (v415)
      {
        *(_DWORD *)v414 = v415;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v414, v403, v404, v405, v406, v407, v408, v409);
        WTF::fastFree(v417, v418, v419, v420, v421, v422, v423, v424);
      }
      goto LABEL_245;
    }
    if (v415)
    {
      v425 = 0;
      *(_DWORD *)v414 = v415;
      goto LABEL_253;
    }
    WTF::StringImpl::~StringImpl(v414, v403, v404, v405, v406, v407, v408, v409);
    WTF::fastFree(v446, v447, v448, v449, v450, v451, v452, v453);
LABEL_281:
    v425 = 0;
  }
LABEL_253:
  v426 = *(_QWORD ***)(a1 + 88);
  if (!v426)
  {
    v470 = 0;
    if (!v401)
    {
      v8 = (uint64_t)v474;
      goto LABEL_274;
    }
    v454 = 0;
LABEL_287:
    JSC::BytecodeGenerator::pushPrivateAccessNames((uint64_t *)a2, v454);
    v471 = 0;
    v10 = 0;
    a3 = *(_QWORD *)v473;
    v8 = (uint64_t)v474;
    if ((v425 & 1) != 0)
      goto LABEL_9;
    goto LABEL_288;
  }
  v427 = (WTF::StringImpl **)WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::begin(v426);
  v431 = v427;
  v432 = v428;
  v433 = **(_QWORD **)(a1 + 88);
  if (v433)
    v434 = (WTF::StringImpl **)(v433 + 16 * *(unsigned int *)(v433 - 4));
  else
    v434 = 0;
  if (v434 == v427)
  {
LABEL_272:
    v470 = 0;
  }
  else
  {
    while (1)
    {
      v435 = *v431;
      if (*v431)
        break;
      if (((_WORD)v431[1] & 7) != 0 && ((_WORD)v431[1] & 8) != 0)
        goto LABEL_285;
LABEL_265:
      while (1)
      {
        v431 += 2;
        if (v431 == (WTF::StringImpl **)v432)
          break;
        if ((unint64_t)*v431 + 1 > 1)
          goto LABEL_269;
      }
      v431 = (WTF::StringImpl **)v432;
LABEL_269:
      if (v431 == v434)
        goto LABEL_272;
    }
    v436 = *(_DWORD *)v435;
    *(_DWORD *)v435 += 2;
    if (((_WORD)v431[1] & 7) == 0 || ((_WORD)v431[1] & 8) == 0)
    {
      if (v436)
      {
        *(_DWORD *)v435 = v436;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v435, v428, v429, v430, v406, v407, v408, v409);
        WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
      }
      goto LABEL_265;
    }
    if (v436)
    {
      *(_DWORD *)v435 = v436;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v435, v428, v429, v430, v406, v407, v408, v409);
      WTF::fastFree(v455, v456, v457, v458, v459, v460, v461, v462);
    }
LABEL_285:
    v470 = 1;
  }
  v8 = (uint64_t)v474;
  if (v401)
  {
    v454 = *(_QWORD **)(a1 + 88);
    goto LABEL_287;
  }
LABEL_274:
  v471 = 1;
  a3 = *(_QWORD *)v473;
  if ((v425 & 1) != 0)
  {
    v10 = 0;
    goto LABEL_9;
  }
LABEL_288:
  JSC::BytecodeGenerator::emitCreatePrivateBrand(a2, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), v406, v407, v408, v409);
  v10 = 1;
LABEL_9:
  v11 = (int *)JSC::BytecodeGenerator::tempDestination(a2, a3);
  v19 = v11;
  if (v11)
    ++*v11;
  v20 = *(_QWORD *)(a1 + 192);
  if (v20)
  {
    do
    {
      v21 = *(_WORD *)(*(_QWORD *)(v20 + 32) + 24) & 0x3800;
      v22 = v21 == 4096;
      if (v21 == 4096)
        break;
      v20 = *(_QWORD *)(v20 + 40);
    }
    while (v20);
  }
  else
  {
    v22 = 0;
  }
  v23 = *(_QWORD *)(a1 + 176);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 32);
    v25 = *(_DWORD ***)(a1 + 168);
    if (!v25)
      v25 = *(_DWORD ***)(a1 + 160);
    v26 = *v25;
    if (v26)
      *v26 += 2;
    v27 = *(WTF::StringImpl **)(v24 + 48);
    *(_QWORD *)(v24 + 48) = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    v28 = *(_QWORD *)(a1 + 136);
    if (v28)
      ++*(_DWORD *)(v28 + 8);
    v29 = *(_DWORD **)(v24 + 104);
    *(_QWORD *)(v24 + 104) = v28;
    if (v29)
    {
      if (v29[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
      else
        --v29[2];
    }
    *(_QWORD *)(v24 + 112) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(v24 + 120) = *(_QWORD *)(a1 + 152);
    if (v22)
      v30 = 128;
    else
      v30 = 0;
    *(_WORD *)(v24 + 33) = v30 | *(_WORD *)(v24 + 33) & 0xFB7F | ((_WORD)v10 << 10);
    v31 = *(_BYTE **)(a1 + 176);
    v32 = *(_BYTE *)(a2 + 709);
    v33 = *(_BYTE *)(a2 + 710);
    *(_WORD *)(a2 + 709) = 0;
    if ((unint64_t)v465 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      v34 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      if (v31[24])
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v31 + 8), v14, v15, v16, v17, v18);
      v34 = (int *)(*(uint64_t (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v31 + 16))(v31, a2, v19);
    }
    v35 = v34;
    *(_BYTE *)(a2 + 710) = v33;
    *(_BYTE *)(a2 + 709) = v32;
    if (v34)
      ++*v34;
    if (v19)
      --*v19;
    if (*(_QWORD *)(a1 + 184))
      v36 = 1;
    else
      v36 = (*(_WORD *)(v24 + 33) & 0x10) == 0;
  }
  else
  {
    v231 = *(WTF::StringImpl ***)(a1 + 160);
    if (*(_QWORD *)(a1 + 168))
      v232 = *(_DWORD ***)(a1 + 168);
    else
      v232 = *(_DWORD ***)(a1 + 160);
    v233 = **(_QWORD **)(*(_QWORD *)(a2 + 696) + 93152);
    if (*(_QWORD *)(a1 + 184))
      v234 = 2;
    else
      v234 = 1;
    JSC::BuiltinExecutables::defaultConstructorSourceCode(v234, (uint64_t)v478);
    Executable = (JSC::UnlinkedFunctionExecutable *)JSC::BuiltinExecutables::createExecutable(v233, (unsigned int *)v478, v231, 0, v234, 0, (_DWORD *)1, v22, v10);
    v243 = v478[0];
    v478[0] = 0;
    if (v243)
    {
      if (*((_DWORD *)v243 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v243 + 8))(v243);
      else
        --*((_DWORD *)v243 + 2);
    }
    v244 = *v232;
    if (*v232)
      *v244 += 2;
    v245 = (WTF::StringImpl *)*((_QWORD *)Executable + 10);
    *((_QWORD *)Executable + 10) = v244;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2)
      {
        WTF::StringImpl::~StringImpl(v245, v235, v236, v237, v238, v239, v240, v241);
        WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
      }
      else
      {
        *(_DWORD *)v245 -= 2;
      }
    }
    v246 = *((_QWORD *)Executable + 11);
    if (!v246)
      v246 = JSC::UnlinkedFunctionExecutable::ensureRareDataSlow(Executable);
    v247 = *(_QWORD *)(a1 + 136);
    if (v247)
      ++*(_DWORD *)(v247 + 8);
    v248 = *(_DWORD **)v246;
    *(_QWORD *)v246 = v247;
    if (v248)
    {
      if (v248[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v248 + 8))(v248);
      else
        --v248[2];
    }
    *(_QWORD *)(v246 + 8) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(v246 + 16) = *(_QWORD *)(a1 + 152);
    v249 = *(_QWORD *)(a2 + 24);
    v250 = (_QWORD *)(v249 + 96);
    v478[0] = 0;
    v251 = *(unsigned int *)(v249 + 108);
    if ((_DWORD)v251 == *(_DWORD *)(v249 + 104))
      *(_QWORD *)(*(_QWORD *)(v249 + 96) + 8 * *(unsigned int *)(v249 + 108)) = *(_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v249 + 96, v251 + 1, (unint64_t)v478);
    else
      *(_QWORD *)(*v250 + 8 * v251) = 0;
    v252 = *(_DWORD *)(v249 + 108);
    v201 = __CFADD__(v252, 1);
    v253 = v252 + 1;
    *(_DWORD *)(v249 + 108) = v253;
    if (v201)
    {
      __break(0xC471u);
      JUMPOUT(0x198287888);
    }
    *(_QWORD *)(*v250 + 8 * v253 - 8) = Executable;
    v254 = v19[1];
    v255 = *(unsigned int *)(*(_QWORD *)(a2 + 248) + 4);
    if ((JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v254, v255, v251, v238, v239, v240, v241) & 1) == 0&& (JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v254, v255, v251, v256, v257, v258, v259) & 1) == 0)
    {
      JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v254, v255, v251, v284, v285, v286, v287);
    }
    v36 = 0;
    v35 = v19;
  }
  v37 = *(_DWORD **)(*(_QWORD *)(a2 + 696) + 41952);
  v38 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::BytecodeGenerator::emitNewObject(a2, (uint64_t)v38, v39, v40, v41, v42, v43, v44);
  if (v38)
    ++*v38;
  if (v8)
  {
    LODWORD(v468) = v36;
    v469 = v37;
    v134 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v140 = v134;
    if (v134)
      ++*v134;
    JSC::BytecodeGenerator::emitLoad(a2, v134, 2, v135, v136, v137, v138, v139);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v478, a2, v141, v142, v143, v144, v145, v146);
    v147 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v153 = JSC::BytecodeGenerator::emitLoad(a2, 0, 2, v148, v149, v150, v151, v152);
    if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v147, v8, (uint64_t)v153, v154, v155, v156, v157, v158) & 1) == 0)
    {
      v164 = *(_DWORD *)(v147 + 4);
      v165 = *(unsigned int *)(v8 + 4);
      v166 = v153[1];
      if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v164, v165, v166, v160, v161, v162, v163) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v164, v165, v166, v160, v161, v162, v163) & 1) == 0)
      {
        JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v164, v165, v166, v160, v161, v162, v163);
      }
    }
    v167 = v478[0];
    JSC::BytecodeGenerator::emitJumpIfTrue(a2, v147, (uint64_t)v478[0], v159, v160, v161, v162, v163);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(v477, a2, v168, v169, v170, v171, v172, v173);
    v174 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v175 = *(_DWORD *)(v174 + 4);
    v176 = *(unsigned int *)(v8 + 4);
    if ((JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v175, v176, v177, v178, v179, v180, v181) & 1) == 0&& (JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v175, v176, v182, v183, v184, v185, v186) & 1) == 0)
    {
      JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v175, v176, v182, v183, v184, v185, v186);
    }
    v187 = v477[0];
    JSC::BytecodeGenerator::emitJumpIfTrue(a2, v174, (uint64_t)v477[0], v182, v183, v184, v185, v186);
    v194 = *(_DWORD *)(a1 + 28);
    v193 = *(_DWORD *)(a1 + 32);
    v195 = *(_DWORD *)(a1 + 36);
    if (v194 != -1 || v193 != -1 || v195 != -1)
    {
      v196 = *(_DWORD *)(a1 + 44);
      if (*(_DWORD *)(a1 + 40) != -1 || v196 != -1 || *(_DWORD *)(a1 + 48) != -1)
      {
        v197 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 52) & v197 & *(_DWORD *)(a1 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
        {
          v198 = *(_QWORD *)(a2 + 192);
          v199 = *(_DWORD *)(v198 + 176);
          v200 = v193 - v199;
          v201 = v195 >= v199;
          v202 = v195 - v199;
          if (!v201)
            v202 = 0;
          v201 = v200 >= v202;
          v203 = v200 - v202;
          if (v201)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v200, v193 - v196, v197 - v193, (v194 + ~*(_DWORD *)(v198 + 184)) | (unint64_t)(v203 << 32));
        }
      }
    }
    v466 = (_DWORD *)(a1 + 52);
    v467 = (_DWORD *)(a1 + 40);
    JSC::BytecodeGenerator::emitThrowTypeError(a2, "The superclass is not a constructor.", 0x25uLL, v188, v189, v190, v191, v192);
    v204 = *(_DWORD *)(a2 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v187, a2, v204, v205, v206, v207, v208, v209);
    v214 = *(_QWORD *)(a2 + 24);
    v215 = *(unsigned int *)(v214 + 28);
    if (!(_DWORD)v215 || v204 != *(_DWORD *)(*(_QWORD *)(v214 + 16) + 4 * v215 - 4))
    {
      LODWORD(v475) = v204;
      v216 = (_QWORD *)(v214 + 16);
      if ((_DWORD)v215 == *(_DWORD *)(v214 + 24))
        *(_DWORD *)(*(_QWORD *)(v214 + 16) + 4 * *(unsigned int *)(v214 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v216, v215 + 1, (unint64_t)&v475);
      else
        *(_DWORD *)(*v216 + 4 * v215) = v204;
      ++*(_DWORD *)(v214 + 28);
      *(_DWORD *)(a2 + 36) = 115;
    }
    v217 = (uint64_t)v474;
    JSC::BytecodeGenerator::emitGetById(a2, v140, (uint64_t)v474, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 2160), v210, v211, v212, v213);
    JSC::BytecodeGenerator::emitDirectSetPrototypeOf<(JSC::InvalidPrototypeMode)0>(a2, (uint64_t)v35, v217, (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 8), v218, v219);
    v220 = *(_DWORD *)(a2 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v167, a2, v220, v221, v222, v223, v224, v225);
    v228 = *(_QWORD *)(a2 + 24);
    v229 = *(unsigned int *)(v228 + 28);
    if (!(_DWORD)v229 || v220 != *(_DWORD *)(*(_QWORD *)(v228 + 16) + 4 * v229 - 4))
    {
      LODWORD(v475) = v220;
      v230 = (_QWORD *)(v228 + 16);
      if ((_DWORD)v229 == *(_DWORD *)(v228 + 24))
        *(_DWORD *)(*(_QWORD *)(v228 + 16) + 4 * *(unsigned int *)(v228 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v230, v229 + 1, (unint64_t)&v475);
      else
        *(_DWORD *)(*v230 + 4 * v229) = v220;
      ++*(_DWORD *)(v228 + 28);
      *(_DWORD *)(a2 + 36) = 115;
    }
    JSC::BytecodeGenerator::emitDirectSetPrototypeOf<(JSC::InvalidPrototypeMode)0>(a2, (uint64_t)v38, (uint64_t)v140, (_DWORD *)(a1 + 28), v467, v466, v226, v227);
    --*(_DWORD *)v187;
    --*(_DWORD *)v167;
    v37 = v469;
    v36 = (int)v468;
    if (v140)
      --*v140;
  }
  if (v36)
  {
    JSC::Symbols::homeObjectPrivateName += 2;
    v478[0] = (WTF *)&JSC::Symbols::homeObjectPrivateName;
    v51 = JSC::BytecodeGenerator::addConstant(a2, (WTF::AtomStringImpl *)v478, v45, v46, v47, v48, v49, v50);
    JSC::StaticPropertyAnalyzer::putById(*(_DWORD **)(a2 + 688), v35[1], v51);
    JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, (void *)v35[1], v51, v38[1], (unint64_t)*(unsigned __int8 *)(a2 + 712) << 8, v52, v53, v54);
    v57 = v478[0];
    v478[0] = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::~StringImpl(v57, v55, v56, v46, v47, v48, v49, v50);
        WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  v477[0] = *((WTF::StringImpl **)v37 + 135);
  WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::add<decltype(nullptr)>(v478, (uint64_t *)(a2 + 656), (uint64_t *)v477, v46, v47, v48, v49, v50);
  v63 = v478[0];
  v64 = *((_QWORD *)v478[0] + 1);
  if (!v64)
  {
    v64 = JSC::jsOwnedString(*(JSC **)(a2 + 696), (JSC::VM *)(v37 + 270), 0, v58, v59, v60, v61, v62);
    *((_QWORD *)v63 + 1) = v64;
  }
  v65 = JSC::BytecodeGenerator::emitLoad(a2, 0, v64, v58, v59, v60, v61, v62);
  v68 = v65;
  if (v65)
    ++*v65;
  JSC::BytecodeGenerator::emitCallDefineProperty(a2, (uint64_t)v38, (uint64_t)v65, (uint64_t)v35, 3, (_DWORD *)(a1 + 8), v66, v67);
  v477[0] = *((WTF::StringImpl **)v37 + 270);
  WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::add<decltype(nullptr)>(v478, (uint64_t *)(a2 + 656), (uint64_t *)v477, v69, v70, v71, v72, v73);
  v79 = v478[0];
  v80 = *((_QWORD *)v478[0] + 1);
  if (!v80)
  {
    v80 = JSC::jsOwnedString(*(JSC **)(a2 + 696), (JSC::VM *)(v37 + 540), 0, v74, v75, v76, v77, v78);
    *((_QWORD *)v79 + 1) = v80;
  }
  v81 = JSC::BytecodeGenerator::emitLoad(a2, 0, v80, v74, v75, v76, v77, v78);
  v84 = v81;
  if (v81)
    ++*v81;
  v469 = (_DWORD *)(a1 + 8);
  JSC::BytecodeGenerator::emitCallDefineProperty(a2, (uint64_t)v35, (uint64_t)v81, (uint64_t)v38, 0, (_DWORD *)(a1 + 8), v82, v83);
  v475 = 0;
  v476 = 0;
  v90 = *(_QWORD *)(a1 + 192);
  if (v90)
  {
    v91 = 0;
    v92 = *(_DWORD **)(a2 + 248);
    v93 = *(_QWORD *)(a1 + 192);
    do
    {
      v94 = *(_QWORD *)(v93 + 32);
      if ((*(_WORD *)(v94 + 24) & 0x40) != 0)
      {
        v467 = v92;
        if (!v91)
        {
          v296 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0xC8u, v85, v86, v87, v88, v89);
          v91 = v296;
          if (v296)
            ++*v296;
        }
        v466 = (_DWORD *)(v90 + 8);
        JSC::CallArguments::CallArguments((uint64_t)v478, a2, 0, 1);
        JSC::BytecodeGenerator::emitLoad(a2, *(int **)v478[1], 10, v297, v298, v299, v300, v301);
        JSC::BytecodeGenerator::emitLoad(a2, *((int **)v478[1] + 1), *(JSC::VM **)v94, v302, v303, v304, v305, v306);
        v468 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a2, 0, (uint64_t)v91);
        JSC::BytecodeGenerator::emitCall<JSC::OpCall>(a2, (uint64_t)v468, (uint64_t)v91, 0, (uint64_t)v478, v466, v466, v466, 0);
        if (v468)
          ++*v468;
        JSC::BytecodeGenerator::variable((uint64_t)v477, a2, *(_QWORD *)v94, 0, v307, v308, v309, v310);
        v311 = v468;
        JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v467, (uint64_t)v477, (uint64_t)v468, 1, 1, v312, v313);
        v321 = v477[0];
        v477[0] = 0;
        if (v321)
        {
          if (*(_DWORD *)v321 == 2)
          {
            WTF::StringImpl::~StringImpl(v321, v314, v315, v316, v317, v318, v319, v320);
            WTF::fastFree(v385, v386, v387, v388, v389, v390, v391, v392);
          }
          else
          {
            *(_DWORD *)v321 -= 2;
          }
        }
        if (v311)
          --*v311;
        JSC::CallArguments::~CallArguments((JSC::CallArguments *)v478, v314, v315, v316, v317, v318, v319, v320);
        v92 = v467;
      }
      v93 = *(_QWORD *)(v93 + 40);
    }
    while (v93);
    if (v91)
      --*v91;
    v478[0] = 0;
    v478[1] = 0;
    if ((unint64_t)v465 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
    {
      *(_BYTE *)(a2 + 706) = 1;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    }
    else
    {
      v95 = *(_QWORD *)(a1 + 192);
      if (*(_BYTE *)(v95 + 24))
        JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, v95 + 8, v85, v86, v87, v88, v89);
      JSC::PropertyListNode::emitBytecode(v95, (WTF::AtomStringImpl *)a2, (uint64_t)v35, (uint64_t)v38, (uint64_t)v478, (uint64_t)&v475, v88, v89);
      if (HIDWORD(v478[1]))
      {
        v322 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        JSC::BytecodeGenerator::emitNewClassFieldInitializerFunction(a2, (uint64_t)v322, (uint64_t)v478, *(_QWORD *)(a1 + 184) != 0, v323, v324, v325, v326);
        if (v322)
          ++*v322;
        JSC::emitPutHomeObject(a2, (uint64_t)v322, (uint64_t)v38, v327, v328, v329, v330, v331);
        JSC::Symbols::instanceFieldInitializerPrivateName += 2;
        v477[0] = (WTF::StringImpl *)&JSC::Symbols::instanceFieldInitializerPrivateName;
        JSC::BytecodeGenerator::emitDirectPutById(a2, (WTF::AtomStringImpl *)v35, v477, (uint64_t)v322, v332, v333, v334, v335);
        v336 = v477[0];
        v477[0] = 0;
        if (v336)
        {
          if (*(_DWORD *)v336 == 2)
          {
            WTF::StringImpl::~StringImpl(v336, v96, v97, v85, v86, v87, v88, v89);
            WTF::fastFree(v393, v394, v395, v396, v397, v398, v399, v400);
          }
          else
          {
            *(_DWORD *)v336 -= 2;
          }
        }
        if (v322)
          --*v322;
        v98 = v478[0];
        if (HIDWORD(v478[1]))
        {
          v337 = 0;
          v338 = 40 * HIDWORD(v478[1]);
          do
          {
            v339 = *(WTF::StringImpl **)((char *)v98 + v337);
            *(_QWORD *)((char *)v98 + v337) = 0;
            if (v339)
            {
              if (*(_DWORD *)v339 == 2)
              {
                WTF::StringImpl::~StringImpl(v339, v96, v97, v85, v86, v87, v88, v89);
                WTF::fastFree(v340, v341, v342, v343, v344, v345, v346, v347);
              }
              else
              {
                *(_DWORD *)v339 -= 2;
              }
            }
            v337 += 40;
          }
          while (v338 != v337);
        }
        goto LABEL_66;
      }
    }
    v98 = v478[0];
LABEL_66:
    if (v98)
      WTF::fastFree((unint64_t)v98, v96, v97, v85, v86, v87, v88, v89);
  }
  v99 = *(_QWORD **)(a1 + 160);
  v100 = v474;
  if (*v99)
  {
    JSC::BytecodeGenerator::variable((uint64_t)v478, a2, (uint64_t)v99, 0, v86, v87, v88, v89);
    if (!LOBYTE(v478[1]))
    {
      __break(0xC471u);
      JUMPOUT(0x198287594);
    }
    v106 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v478, v101, v102, v103, v104, v105);
    if (v106)
    {
      v109 = v106;
      ++*v106;
      JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v106, (uint64_t)v478, (uint64_t)v35, 0, 0, v107, v108);
      --*v109;
    }
    else
    {
      JSC::BytecodeGenerator::emitPutToScope(a2, 0, (uint64_t)v478, (uint64_t)v35, 0, 0, v107, v108);
    }
    v111 = v478[0];
    v478[0] = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
      {
        WTF::StringImpl::~StringImpl(v111, v110, (uint64_t)v99, v85, v86, v87, v88, v89);
        WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
      }
      else
      {
        *(_DWORD *)v111 -= 2;
      }
    }
  }
  if (v470)
    JSC::BytecodeGenerator::emitInstallPrivateClassBrand(a2, (uint64_t)v35, (uint64_t)v99, v85, v86, v87, v88, v89);
  if (HIDWORD(v476))
  {
    v359 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitNewClassFieldInitializerFunction(a2, (uint64_t)v359, (uint64_t)&v475, *(_QWORD *)(a1 + 184) != 0, v360, v361, v362, v363);
    if (v359)
      ++*v359;
    JSC::emitPutHomeObject(a2, (uint64_t)v359, (uint64_t)v35, v364, v365, v366, v367, v368);
    JSC::CallArguments::CallArguments((uint64_t)v478, a2, 0, 0);
    v374 = *(int **)v478[1];
    if (a2 + 208 != *(_QWORD *)v478[1] && v374 && v374 != v35)
      JSC::BytecodeGenerator::emitMove(a2, v374, (uint64_t)v35, v369, v370, v371, v372, v373);
    v375 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v375, (uint64_t)v359, 0, (uint64_t)v478, v469, v469, v469, 0);
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)v478, v376, v377, v378, v379, v380, v381, v382);
    if (v359)
      --*v359;
  }
  if ((v471 & 1) == 0)
  {
    v383 = *(unsigned int *)(a2 + 172);
    if (!(_DWORD)v383)
    {
      __break(0xC471u);
      JUMPOUT(0x198287890);
    }
    v384 = v383 - 1;
    WTF::VectorTypeOperations<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>>::destruct((WTF::StringImpl ***)(*(_QWORD *)(a2 + 160) + 8 * (v383 - 1)), (WTF::AtomStringImpl *)(*(_QWORD *)(a2 + 160) + 8 * v383), (uint64_t)v99, v85, v86, v87, v88, v89);
    *(_DWORD *)(a2 + 172) = v384;
  }
  if (*(_BYTE *)(a1 + 200))
    JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, (JSC::VariableEnvironment *)(a1 + 72), (uint64_t)v99, v85, v86, v87, v88, v89);
  if (**(_QWORD **)(a1 + 160))
    JSC::BytecodeGenerator::popLexicalScopeInternal((JSC::BytecodeGenerator *)a2, (JSC::VariableEnvironment *)(a1 + 112), (uint64_t)v99, v85, v86, v87, v88, v89);
  v112 = (int *)JSC::BytecodeGenerator::finalDestination(a2, *(uint64_t *)v473, (uint64_t)v35);
  if ((int *)(a2 + 208) == v112)
  {
    v121 = 0;
  }
  else
  {
    v120 = v112;
    v121 = v35;
    if (v112)
    {
      v121 = v35;
      if (v112 != v35)
      {
        JSC::BytecodeGenerator::emitMove(a2, v112, (uint64_t)v35, v115, v116, v117, v118, v119);
        v121 = v120;
      }
    }
  }
  v122 = v475;
  if (HIDWORD(v476))
  {
    v348 = 40 * HIDWORD(v476);
    v349 = v475;
    do
    {
      v350 = *(WTF::StringImpl **)v349;
      *(_QWORD *)v349 = 0;
      if (v350)
      {
        if (*(_DWORD *)v350 == 2)
        {
          WTF::StringImpl::~StringImpl(v350, v113, v114, v115, v116, v117, v118, v119);
          WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
        }
        else
        {
          *(_DWORD *)v350 -= 2;
        }
      }
      v349 = (WTF *)((char *)v349 + 40);
      v348 -= 40;
    }
    while (v348);
  }
  if (v122)
    WTF::fastFree((unint64_t)v122, v113, v114, v115, v116, v117, v118, v119);
  if (v84)
    --*v84;
  if (v68)
    --*v68;
  v123 = v472;
  if (v38)
    --*v38;
  if (v35)
    --*v35;
  if (v100)
    --*v100;
  *(_BYTE *)(a2 + 712) = v123;
  return v121;
}

uint64_t JSC::BytecodeGenerator::emitDirectSetPrototypeOf<(JSC::InvalidPrototypeMode)0>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  int *v22;
  int *v25;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF *v39;
  _BYTE v42[8];
  WTF *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;

  v14 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0x7Eu, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  v15 = v14;
  if (v14)
    ++*v14;
  JSC::CallArguments::CallArguments((uint64_t)v42, a1, 0, 1);
  v21 = v43;
  v22 = *(int **)v43;
  if (a1 + 208 != *(_QWORD *)v43 && v22 != 0 && v22 != (int *)a2)
  {
    JSC::BytecodeGenerator::emitMove(a1, v22, a2, v16, v17, v18, v19, v20);
    v21 = v43;
  }
  v25 = (int *)*((_QWORD *)v21 + 1);
  if ((int *)(a1 + 208) != v25 && v25 != 0 && v25 != (int *)a3)
    JSC::BytecodeGenerator::emitMove(a1, v25, a3, v16, v17, v18, v19, v20);
  v28 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a1, v28, (uint64_t)v15, 0, (uint64_t)v42, a4, a5, a6, 0);
  if (v45)
  {
    v36 = v43;
    v37 = 8 * v45;
    do
    {
      v38 = *(_DWORD **)v36;
      *(_QWORD *)v36 = 0;
      if (v38)
        --*v38;
      v36 = (WTF *)((char *)v36 + 8);
      v37 -= 8;
    }
    while (v37);
  }
  v39 = v43;
  if (&v46 != (uint64_t *)v43 && v43 != 0)
  {
    v43 = 0;
    v44 = 0;
    WTF::fastFree((unint64_t)v39, v29, v30, v31, v32, v33, v34, v35);
  }
  if (v15)
    --*v15;
  return a2;
}

uint64_t JSC::ExportDefaultDeclarationNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3)
{
  return JSC::BytecodeGenerator::emitNode(this, a3, *(JSC::StatementNode **)(a1 + 40));
}

uint64_t JSC::ExportLocalDeclarationNode::emitBytecode(uint64_t a1, JSC::BytecodeGenerator *this, uint64_t a3)
{
  return JSC::BytecodeGenerator::emitNode(this, a3, *(JSC::StatementNode **)(a1 + 40));
}

int *JSC::DestructuringAssignmentNode::emitBytecode(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *result;
  uint64_t v22;

  v6 = (int *)JSC::BytecodeGenerator::tempDestination(a2, (uint64_t)a3);
  v12 = v6;
  if (v6)
    ++*v6;
  v13 = *(_BYTE **)(a1 + 40);
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v22 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v13[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), v7, v8, v9, v10, v11);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v13 + 16))(v13, a2, v12);
  }
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2, v12);
  if ((int *)(a2 + 208) == a3)
  {
    result = 0;
  }
  else
  {
    result = v12;
    if (a3)
    {
      result = v12;
      if (v12 != a3)
      {
        JSC::BytecodeGenerator::emitMove(a2, a3, (uint64_t)v12, v16, v17, v18, v19, v20);
        result = a3;
      }
    }
  }
  if (v12)
    --*v12;
  return result;
}

void JSC::ArrayPatternNode::bindValue(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  int *v6;
  int *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF *v33;
  int v35;
  _DWORD *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  WTF *v96;
  uint64_t v97;
  _DWORD *v98;
  WTF *v99;
  _BYTE *v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  int *v201;
  uint64_t v202;
  unsigned __int8 *v203;
  _DWORD *v204;
  _DWORD *v205;
  _DWORD *v206;
  _DWORD *v207;
  WTF *v208;
  int v209;
  unsigned int v210;
  _BYTE v211[76];
  _DWORD v212[3];

  v3 = a3;
  if (a3)
    ++*a3;
  v6 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v7 = v6;
  if (v6)
    ++*v6;
  v8 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v9 = v8;
  if (v8)
    ++*v8;
  v10 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::BytecodeGenerator::emitGetById(a2, v10, (uint64_t)v3, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a2 + 696) + 41952) + 2712), v11, v12, v13, v14);
  if (v10)
    ++*v10;
  JSC::CallArguments::CallArguments((uint64_t)&v207, a2, 0, 0);
  v20 = *(int **)v208;
  v202 = a2 + 208;
  if (a2 + 208 != *(_QWORD *)v208 && v20 != 0 && v20 != v3)
    JSC::BytecodeGenerator::emitMove(a2, v20, (uint64_t)v3, v15, v16, v17, v18, v19);
  v204 = (_DWORD *)(a1 + 16);
  JSC::BytecodeGenerator::emitIteratorOpen(a2, (uint64_t)v7, (uint64_t)v9, (uint64_t)v10, (uint64_t)&v207, (_DWORD *)(a1 + 16));
  if (v210)
  {
    v30 = v208;
    v31 = 8 * v210;
    do
    {
      v32 = *(_DWORD **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
        --*v32;
      v30 = (WTF *)((char *)v30 + 8);
      v31 -= 8;
    }
    while (v31);
  }
  v33 = v208;
  if (v211 != (_BYTE *)v208 && v208 != 0)
  {
    v208 = 0;
    v209 = 0;
    WTF::fastFree((unint64_t)v33, v23, v24, v25, v26, v27, v28, v29);
  }
  if (v10)
    --*v10;
  v35 = *(_DWORD *)(a1 + 68);
  if (v35)
  {
    v36 = 0;
    v37 = *(unsigned __int8 **)(a1 + 56);
    v203 = &v37[24 * v35];
    v201 = v7;
    do
    {
      v38 = *v37;
      if (v38 >= 2)
      {
        if (v38 == 2)
        {
          v121 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          JSC::BytecodeGenerator::emitNewArray(a2, (uint64_t)v121, 0, 0, 3, v122, v123, v124);
          if (v121)
            ++*v121;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v206, a2, v125, v126, v127, v128, v129, v130);
          if (v36)
          {
            JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v36, (uint64_t)v206, v131, v132, v133, v134, v135);
          }
          else
          {
            v199 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
            v36 = v199;
            if (v199)
              ++*v199;
          }
          v200 = (uint64_t)v36;
          v136 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          v142 = v136;
          if (v136)
            ++*v136;
          JSC::BytecodeGenerator::emitLoad(a2, v136, 0xFFFE000000000000, v137, v138, v139, v140, v141);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v205, a2, v143, v144, v145, v146, v147, v148);
          v149 = v205;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v205, v150, v151, v152, v153, v154, v155);
          v156 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          v157 = v156;
          if (v156)
            ++*v156;
          JSC::CallArguments::CallArguments((uint64_t)&v207, a2, 0, 0);
          v163 = *(int **)v208;
          if (v202 != *(_QWORD *)v208 && v163 && v163 != v7)
            JSC::BytecodeGenerator::emitMove(a2, v163, (uint64_t)v7, v158, v159, v160, v161, v162);
          JSC::BytecodeGenerator::emitIteratorNext(a2, v200, (uint64_t)v157, (uint64_t)v3, (uint64_t)v9, (uint64_t)&v207, v204);
          v164 = v206;
          JSC::BytecodeGenerator::emitJumpIfTrue(a2, v200, (uint64_t)v206, v165, v166, v167, v168, v169);
          JSC::CallArguments::~CallArguments((JSC::CallArguments *)&v207, v170, v171, v172, v173, v174, v175, v176);
          JSC::BytecodeGenerator::emitDirectPutByVal(a2, v121[1], v142[1], (uint64_t)v157, v177, v178, v179, v180);
          JSC::BytecodeGenerator::emitInc(a2, (uint64_t)v142, v181, v182, v183, v184, v185, v186);
          JSC::BytecodeGenerator::emitJump(a2, (uint64_t)v149, v187, v188, v189, v190, v191, v192);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a2, (uint64_t)v164, v193, v194, v195, v196, v197, v198);
          (*(void (**)(_QWORD, uint64_t, _DWORD *))(**((_QWORD **)v37 + 1) + 24))(*((_QWORD *)v37 + 1), a2, v121);
          if (v157)
            --*v157;
          --*v149;
          --*v142;
          --*v164;
          --*v121;
          v36 = (_DWORD *)v200;
        }
      }
      else
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v206, a2, v24, v25, v26, v27, v28, v29);
        if (v36)
        {
          JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v36, (uint64_t)v206, v39, v40, v41, v42, v43);
        }
        else
        {
          v44 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
          v36 = v44;
          if (v44)
            ++*v44;
        }
        v45 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        v52 = v45;
        if (v45)
          ++*v45;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v205, a2, v46, v47, v48, v49, v50, v51);
        JSC::CallArguments::CallArguments((uint64_t)&v207, a2, 0, 0);
        v58 = *(int **)v208;
        if (v202 != *(_QWORD *)v208 && v58 != 0 && v58 != v7)
          JSC::BytecodeGenerator::emitMove(a2, v58, (uint64_t)v7, v53, v54, v55, v56, v57);
        v61 = v3;
        v62 = (uint64_t)v3;
        v63 = v9;
        JSC::BytecodeGenerator::emitIteratorNext(a2, (uint64_t)v36, (uint64_t)v52, v62, (uint64_t)v9, (uint64_t)&v207, v204);
        v64 = v205;
        v65 = v36;
        JSC::BytecodeGenerator::emitJumpIfFalse(a2, (uint64_t)v36, (uint64_t)v205, v66, v67, v68, v69, v70);
        v71 = v206;
        v72 = *(_DWORD *)(a2 + 16);
        JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v206, a2, v72, v73, v74, v75, v76, v77);
        v83 = *(_QWORD *)(a2 + 24);
        v84 = *(unsigned int *)(v83 + 28);
        if (!(_DWORD)v84 || v72 != *(_DWORD *)(*(_QWORD *)(v83 + 16) + 4 * v84 - 4))
        {
          v212[0] = v72;
          v85 = (_QWORD *)(v83 + 16);
          if ((_DWORD)v84 == *(_DWORD *)(v83 + 24))
            *(_DWORD *)(*(_QWORD *)(v83 + 16) + 4 * *(unsigned int *)(v83 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v84 + 1, (unint64_t)v212);
          else
            *(_DWORD *)(*v85 + 4 * v84) = v72;
          ++*(_DWORD *)(v83 + 28);
          *(_DWORD *)(a2 + 36) = 115;
        }
        JSC::BytecodeGenerator::emitLoad(a2, v52, 10, v78, v79, v80, v81, v82);
        v86 = *(_DWORD *)(a2 + 16);
        JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v64, a2, v86, v87, v88, v89, v90, v91);
        v93 = *(_QWORD *)(a2 + 24);
        v94 = *(unsigned int *)(v93 + 28);
        if (!(_DWORD)v94 || v86 != *(_DWORD *)(*(_QWORD *)(v93 + 16) + 4 * v94 - 4))
        {
          v212[0] = v86;
          v95 = (_QWORD *)(v93 + 16);
          if ((_DWORD)v94 == *(_DWORD *)(v93 + 24))
            *(_DWORD *)(*(_QWORD *)(v93 + 16) + 4 * *(unsigned int *)(v93 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v94 + 1, (unint64_t)v212);
          else
            *(_DWORD *)(*v95 + 4 * v94) = v86;
          ++*(_DWORD *)(v93 + 28);
          *(_DWORD *)(a2 + 36) = 115;
        }
        v9 = v63;
        v3 = v61;
        v7 = v201;
        v36 = v65;
        if (v210)
        {
          v96 = v208;
          v97 = 8 * v210;
          do
          {
            v98 = *(_DWORD **)v96;
            *(_QWORD *)v96 = 0;
            if (v98)
              --*v98;
            v96 = (WTF *)((char *)v96 + 8);
            v97 -= 8;
          }
          while (v97);
        }
        v99 = v208;
        if (v211 != (_BYTE *)v208 && v208 != 0)
        {
          v208 = 0;
          v209 = 0;
          WTF::fastFree((unint64_t)v99, v92, v24, v25, v26, v27, v28, v29);
        }
        --*v64;
        if (*v37 == 1)
        {
          v101 = (_BYTE *)*((_QWORD *)v37 + 2);
          if (v101)
            JSC::assignDefaultValueIfUndefined(a2, (uint64_t)v52, v101, v25, v26, v27, v28, v29);
          (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)v37 + 1) + 24))(*((_QWORD *)v37 + 1), a2, v52);
        }
        if (v52)
          --*v52;
        if (v71)
          --*v71;
      }
      v37 += 24;
    }
    while (v37 != v203);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v207, a2, v24, v25, v26, v27, v28, v29);
    v102 = v207;
    JSC::BytecodeGenerator::emitJumpIfTrue(a2, (uint64_t)v36, (uint64_t)v207, v103, v104, v105, v106, v107);
    JSC::BytecodeGenerator::emitIteratorGenericClose(a2, (uint64_t)v7, v204, 0, v108, v109, v110, v111);
    v112 = *(_DWORD *)(a2 + 16);
    JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v102, a2, v112, v113, v114, v115, v116, v117);
    v118 = *(_QWORD *)(a2 + 24);
    v119 = *(unsigned int *)(v118 + 28);
    if (!(_DWORD)v119 || v112 != *(_DWORD *)(*(_QWORD *)(v118 + 16) + 4 * v119 - 4))
    {
      LODWORD(v206) = v112;
      v120 = (_QWORD *)(v118 + 16);
      if ((_DWORD)v119 == *(_DWORD *)(v118 + 24))
        *(_DWORD *)(*(_QWORD *)(v118 + 16) + 4 * *(unsigned int *)(v118 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v120, v119 + 1, (unint64_t)&v206);
      else
        *(_DWORD *)(*v120 + 4 * v119) = v112;
      ++*(_DWORD *)(v118 + 28);
      *(_DWORD *)(a2 + 36) = 115;
    }
    --*v102;
    if (v36)
      --*v36;
  }
  else
  {
    JSC::BytecodeGenerator::emitIteratorGenericClose(a2, (uint64_t)v7, v204, 0, v26, v27, v28, v29);
  }
  if (v9)
    --*v9;
  if (v7)
    --*v7;
  if (v3)
    --*v3;
}

_DWORD *JSC::assignDefaultValueIfUndefined(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _DWORD *result;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v48, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v17 = JSC::BytecodeGenerator::emitLoad(a1, 0, 10, v12, v13, v14, v15, v16);
  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, v11, a2, (uint64_t)v17, v18, v19, v20, v21, v22) & 1) == 0)
  {
    v28 = *(_DWORD *)(v11 + 4);
    v29 = *(unsigned int *)(a2 + 4);
    v30 = v17[1];
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v28, v29, v30, v24, v25, v26, v27) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v28, v29, v30, v24, v25, v26, v27) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v28, v29, v30, v24, v25, v26, v27);
    }
  }
  v31 = v48;
  JSC::BytecodeGenerator::emitJumpIfFalse(a1, v11, (uint64_t)v48, v23, v24, v25, v26, v27);
  v37 = *(_BYTE *)(a1 + 709);
  v38 = *(_BYTE *)(a1 + 710);
  *(_WORD *)(a1 + 709) = 0;
  if ((unint64_t)&v48 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
  {
    *(_BYTE *)(a1 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  }
  else
  {
    if (a3[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, (uint64_t)(a3 + 8), v32, v33, v34, v35, v36);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, a1, a2);
  }
  *(_BYTE *)(a1 + 710) = v38;
  *(_BYTE *)(a1 + 709) = v37;
  v44 = *(_DWORD *)(a1 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v31, a1, v44, v39, v40, v41, v42, v43);
  v46 = *(_DWORD **)(a1 + 24);
  v47 = v46[7];
  if (!(_DWORD)v47 || v44 != *(_DWORD *)(*((_QWORD *)v46 + 2) + 4 * v47 - 4))
  {
    v49 = v44;
    result = v46 + 4;
    if ((_DWORD)v47 == v46[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v47 + 1, (unint64_t)&v49);
      *(_DWORD *)(*((_QWORD *)v46 + 2) + 4 * v46[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v47) = v44;
    }
    ++v46[7];
    *(_DWORD *)(a1 + 36) = 115;
  }
  --*v31;
  return result;
}

uint64_t JSC::ArrayPatternNode::toString(uint64_t this, WTF::StringBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  int8x16_t v35;

  v9 = this;
  v35.i8[0] = 91;
  v10 = *((_QWORD *)a2 + 1);
  if (v10
    && ((v11 = *((unsigned int *)a2 + 4), v11 < *(_DWORD *)(v10 + 4))
      ? (v12 = *(_QWORD *)a2 == 0)
      : (v12 = 0),
        v12))
  {
    v13 = *(_DWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 8);
    *((_DWORD *)a2 + 4) = v11 + 1;
    if ((v13 & 4) != 0)
      *(_BYTE *)(v14 + v11) = 91;
    else
      *(_WORD *)(v14 + 2 * v11) = 91;
  }
  else
  {
    this = WTF::StringBuilder::append((uint64_t)a2, &v35, 1uLL, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v9 + 68))
  {
    v15 = 0;
    for (i = 0; i < *(unsigned int *)(v9 + 68); ++i)
    {
      v17 = *(_QWORD *)(v9 + 56);
      v18 = *(unsigned __int8 *)(v17 + v15);
      if (v18 == 2)
      {
        v23 = *((_DWORD *)a2 + 4);
        if ((v23 & 0x80000000) == 0)
        {
          v24 = *((_QWORD *)a2 + 1);
          if ((v24 || (v24 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v24 + 16) & 4) == 0)
          {
            v25 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)(v23 + 3), a3, a4, a5, a6, a7, a8);
            if (v25)
            {
              *(_DWORD *)v25 = 3014702;
              *(_WORD *)(v25 + 4) = 46;
            }
          }
          else
          {
            v29 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)(v23 + 3), a3, a4, a5, a6, a7, a8);
            if (v29)
            {
              *(_BYTE *)(v29 + 2) = 46;
              *(_WORD *)v29 = 11822;
            }
          }
        }
        this = (*(uint64_t (**)(_QWORD, WTF::StringBuilder *))(**(_QWORD **)(v17 + v15 + 8) + 32))(*(_QWORD *)(v17 + v15 + 8), a2);
        goto LABEL_38;
      }
      if (v18 == 1)
      {
        this = (*(uint64_t (**)(_QWORD, WTF::StringBuilder *))(**(_QWORD **)(v17 + v15 + 8) + 32))(*(_QWORD *)(v17 + v15 + 8), a2);
        if (i < (unint64_t)*(unsigned int *)(v9 + 68) - 1)
        {
          v35.i8[3] = 44;
          v19 = *((_QWORD *)a2 + 1);
          if (v19)
          {
            v20 = *((unsigned int *)a2 + 4);
            if (v20 < *(_DWORD *)(v19 + 4) && *(_QWORD *)a2 == 0)
            {
LABEL_33:
              v27 = *(_DWORD *)(v19 + 16);
              v28 = *(_QWORD *)(v19 + 8);
              *((_DWORD *)a2 + 4) = v20 + 1;
              if ((v27 & 4) != 0)
                *(_BYTE *)(v28 + v20) = 44;
              else
                *(_WORD *)(v28 + 2 * v20) = 44;
              goto LABEL_38;
            }
          }
          v22 = (int8x16_t *)((char *)v35.i32 + 3);
          goto LABEL_41;
        }
      }
      else if (!*(_BYTE *)(v17 + v15))
      {
        v35.i8[2] = 44;
        v19 = *((_QWORD *)a2 + 1);
        if (v19)
        {
          v20 = *((unsigned int *)a2 + 4);
          if (v20 < *(_DWORD *)(v19 + 4) && *(_QWORD *)a2 == 0)
            goto LABEL_33;
        }
        v22 = (int8x16_t *)&v35.i16[1];
LABEL_41:
        this = WTF::StringBuilder::append((uint64_t)a2, v22, 1uLL, a4, a5, a6, a7, a8);
      }
LABEL_38:
      v15 += 24;
    }
  }
  v35.i8[1] = 93;
  v30 = *((_QWORD *)a2 + 1);
  if (!v30)
    return WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v35.i8[1], 1uLL, a4, a5, a6, a7, a8);
  v31 = *((unsigned int *)a2 + 4);
  if (v31 >= *(_DWORD *)(v30 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v35.i8[1], 1uLL, a4, a5, a6, a7, a8);
  v33 = *(_DWORD *)(v30 + 16);
  v34 = *(_QWORD *)(v30 + 8);
  *((_DWORD *)a2 + 4) = v31 + 1;
  if ((v33 & 4) != 0)
    *(_BYTE *)(v34 + v31) = 93;
  else
    *(_WORD *)(v34 + 2 * v31) = 93;
  return this;
}

unsigned int *JSC::ArrayPatternNode::collectBoundIdentifiers(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = result[17];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 8;
    do
    {
      result = *(unsigned int **)(*((_QWORD *)v4 + 7) + v6);
      if (result)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, a2);
        v2 = v4[17];
      }
      ++v5;
      v6 += 24;
    }
    while (v5 < v2);
  }
  return result;
}

void JSC::ObjectPatternNode::toString(JSC::ObjectPatternNode *this, WTF::StringBuilder *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const WTF::String *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int8x16_t v41;

  v41.i8[0] = 123;
  v10 = *((_QWORD *)a2 + 1);
  if (v10
    && ((v11 = *((unsigned int *)a2 + 4), v11 < *(_DWORD *)(v10 + 4))
      ? (v12 = *(_QWORD *)a2 == 0)
      : (v12 = 0),
        v12))
  {
    v13 = *(_DWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 8);
    *((_DWORD *)a2 + 4) = v11 + 1;
    if ((v13 & 4) != 0)
      *(_BYTE *)(v14 + v11) = 123;
    else
      *(_WORD *)(v14 + 2 * v11) = 123;
  }
  else
  {
    WTF::StringBuilder::append((uint64_t)a2, &v41, 1uLL, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 17))
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = *((_QWORD *)this + 7) + v15;
      v18 = *(const WTF::String **)v17;
      if (*(_BYTE *)(v17 + 16))
        WTF::StringBuilder::appendQuotedJSONString(a2, v18, a3, a4, a5, a6, a7, a8);
      else
        WTF::StringBuilder::append((WTF::StringImpl **)a2, (WTF::StringImpl **)v18, a3, a4, a5, a6, a7, a8);
      v41.i8[2] = 58;
      v24 = *((_QWORD *)a2 + 1);
      if (v24
        && ((v25 = *((unsigned int *)a2 + 4), v25 < *(_DWORD *)(v24 + 4))
          ? (v26 = *(_QWORD *)a2 == 0)
          : (v26 = 0),
            v26))
      {
        v27 = *(_DWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 8);
        *((_DWORD *)a2 + 4) = v25 + 1;
        if ((v27 & 4) != 0)
          *(_BYTE *)(v28 + v25) = 58;
        else
          *(_WORD *)(v28 + 2 * v25) = 58;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v41.i16[1], 1uLL, v19, v20, v21, v22, v23);
      }
      if (v16 >= *((unsigned int *)this + 17))
        break;
      v29 = *(_QWORD *)(*((_QWORD *)this + 7) + v15 + 24);
      (*(void (**)(uint64_t, WTF::StringBuilder *))(*(_QWORD *)v29 + 32))(v29, a2);
      v30 = *((unsigned int *)this + 17);
      if (v16 < v30 - 1)
      {
        v41.i8[3] = 44;
        v31 = *((_QWORD *)a2 + 1);
        if (v31
          && ((v32 = *((unsigned int *)a2 + 4), v32 < *(_DWORD *)(v31 + 4))
            ? (v33 = *(_QWORD *)a2 == 0)
            : (v33 = 0),
              v33))
        {
          v34 = *(_DWORD *)(v31 + 16);
          v35 = *(_QWORD *)(v31 + 8);
          *((_DWORD *)a2 + 4) = v32 + 1;
          if ((v34 & 4) != 0)
            *(_BYTE *)(v35 + v32) = 44;
          else
            *(_WORD *)(v35 + 2 * v32) = 44;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)((char *)v41.i32 + 3), 1uLL, a4, a5, a6, a7, a8);
        }
        v30 = *((unsigned int *)this + 17);
      }
      ++v16;
      v15 += 48;
      if (v16 >= v30)
        goto LABEL_39;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_39:
    v41.i8[1] = 125;
    v36 = *((_QWORD *)a2 + 1);
    if (v36
      && ((v37 = *((unsigned int *)a2 + 4), v37 < *(_DWORD *)(v36 + 4))
        ? (v38 = *(_QWORD *)a2 == 0)
        : (v38 = 0),
          v38))
    {
      v39 = *(_DWORD *)(v36 + 16);
      v40 = *(_QWORD *)(v36 + 8);
      *((_DWORD *)a2 + 4) = v37 + 1;
      if ((v39 & 4) != 0)
        *(_BYTE *)(v40 + v37) = 125;
      else
        *(_WORD *)(v40 + 2 * v37) = 125;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)a2, (int8x16_t *)&v41.i8[1], 1uLL, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::ObjectPatternNode::bindValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  int v44;
  _WORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  void (*v60)(void);
  unint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  WTF::StringImpl *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  WTF *v111;
  int *v112;
  int *v115;
  int *v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  _DWORD *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  uint64_t v135;
  _DWORD *v136;
  WTF *v137;
  int *v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  char v157[24];
  WTF::StringImpl *v158;
  char v159[8];
  WTF *v160;
  int v161;
  unsigned int v162;
  _BYTE v163[72];
  unsigned __int8 v164;
  WTF::StringImpl **v165;
  _QWORD v166[3];

  JSC::BytecodeGenerator::emitRequireObjectCoercible(a2, a3, "Right side of assignment cannot be destructured", 0x30uLL, a5, a6, a7, a8);
  v166[0] = 0;
  v166[1] = 0;
  v12 = a2 + 144;
  WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v166, a2 + 144, v13, v14, v15, v16, v17, v18);
  v165 = 0;
  v159[0] = 0;
  v164 = 0;
  v26 = *(unsigned __int8 *)(a1 + 52);
  if (*(_BYTE *)(a1 + 52))
  {
    if (*(_BYTE *)(a1 + 53) && (v141 = *(unsigned int *)(a1 + 68), (_DWORD)v141))
    {
      v125 = 0;
      v142 = 48 * v141;
      v143 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 40);
      do
      {
        if (!*v143 && *((_QWORD *)v143 - 4))
          ++v125;
        v143 += 48;
        v142 -= 48;
      }
      while (v142);
    }
    else
    {
      v125 = 0;
    }
    v126 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    v27 = v126;
    if (v126)
      ++*v126;
    if (v164)
    {
      if (v162)
      {
        v134 = v160;
        v135 = 8 * v162;
        do
        {
          v136 = *(_DWORD **)v134;
          *(_QWORD *)v134 = 0;
          if (v136)
            --*v136;
          v134 = (WTF *)((char *)v134 + 8);
          v135 -= 8;
        }
        while (v135);
      }
      v137 = v160;
      if (v163 != (_BYTE *)v160 && v160 != 0)
      {
        v160 = 0;
        v161 = 0;
        WTF::fastFree((unint64_t)v137, v127, v128, v129, v130, v131, v132, v133);
      }
      v164 = 0;
    }
    JSC::CallArguments::CallArguments((uint64_t)v159, a2, 0, v125 + 2);
    v26 = 1;
    v164 = 1;
  }
  else
  {
    v27 = 0;
  }
  if (*(_DWORD *)(a1 + 68))
  {
    v156 = (uint64_t)v27;
    v28 = 0;
    v155 = 2;
    while (1)
    {
      v29 = *(_QWORD *)(a1 + 56);
      v30 = v29 + 48 * v28;
      if (*(_BYTE *)(v30 + 40))
      {
        JSC::BytecodeGenerator::emitNewObject(a2, v156, v20, v21, v22, v23, v24, v25);
        v109 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0x7Fu, v104, v105, v106, v107, v108);
        v37 = v109;
        if (v109)
          ++*v109;
        if (!v164)
        {
LABEL_152:
          __break(1u);
LABEL_153:
          JSC::BytecodeGenerator::emitGetByVal(a2, v37, a3, 0, v33, v34, v35, v36);
          goto LABEL_22;
        }
        v30 = a2 + 208;
        v111 = v160;
        v112 = *(int **)v160;
        if (a2 + 208 != *(_QWORD *)v160 && v112 != 0 && v112 != (int *)v156)
        {
          JSC::BytecodeGenerator::emitMove(a2, v112, v156, v110, v33, v34, v35, v36);
          if (!v164)
            goto LABEL_152;
          v111 = v160;
        }
        v115 = (int *)*((_QWORD *)v111 + 1);
        if ((int *)v30 != v115 && v115 != 0 && v115 != (int *)a3)
        {
          JSC::BytecodeGenerator::emitMove(a2, v115, a3, v110, v33, v34, v35, v36);
          if (!v164)
            goto LABEL_152;
          v111 = v160;
        }
        v118 = (int *)*((_QWORD *)v111 + 2);
        v8 = *(_QWORD *)(a2 + 24);
        v119 = (_QWORD *)(v8 + 272);
        v30 = *(unsigned int *)(v8 + 284);
        if ((_DWORD)v30 == *(_DWORD *)(v8 + 280))
        {
          v120 = (uint64_t *)WTF::Vector<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v119, v30 + 1, (unint64_t)&v165);
          v121 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * *(unsigned int *)(v8 + 284));
        }
        else
        {
          v121 = (uint64_t *)(*v119 + 8 * v30);
          v120 = (uint64_t *)&v165;
        }
        *v121 = 0;
        v122 = *v120;
        *v120 = 0;
        *v121 = v122;
        ++*(_DWORD *)(v8 + 284);
        if ((int)v30 < 0)
          v123 = COERCE__INT64((double)v30) + 0x2000000000000;
        else
          v123 = v30 | 0xFFFE000000000000;
        JSC::BytecodeGenerator::emitLoad(a2, v118, v123, v110, v33, v34, v35, v36);
        v124 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        if (v164)
        {
          JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v124, (uint64_t)v37, 0, (uint64_t)v159, (_DWORD *)(a1 + 16), (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), 0);
          v60 = *(void (**)(void))(**(_QWORD **)(v29 + 48 * v28 + 24) + 24);
          goto LABEL_44;
        }
        std::__throw_bad_optional_access[abi:sn180100]();
        goto LABEL_155;
      }
      if (!*(_BYTE *)(a1 + 52) || !*(_BYTE *)(a1 + 53) || !*(_QWORD *)(v29 + 48 * v28 + 8))
      {
        v31 = *(_QWORD *)(v29 + 48 * v28 + 32);
        if (!v31 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 80))(v31))
        {
          v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v29 + 48 * v28 + 24) + 64))(*(_QWORD *)(v29 + 48 * v28 + 24), a2);
          if (v32)
            break;
        }
      }
      v37 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      LOBYTE(v8) = 1;
      if (v37)
        goto LABEL_13;
LABEL_14:
      v38 = v29 + 48 * v28;
      v41 = *(_QWORD *)(v38 + 8);
      v40 = (_QWORD *)(v38 + 8);
      v39 = v41;
      if (!v41)
      {
        v42 = *(WTF::AtomStringImpl **)v30;
        v43 = **(_QWORD **)v30;
        if (!v43)
          goto LABEL_20;
        v44 = *(_DWORD *)(v43 + 16);
        if ((v44 & 0x20) != 0)
          goto LABEL_20;
        v45 = *(_WORD **)(v43 + 8);
        v46 = *(unsigned int *)(v43 + 4);
        if ((v44 & 4) == 0)
        {
          if ((_DWORD)v46)
          {
            v47 = (unsigned __int16)*v45 - 48;
            if (v47 <= 9 && (*v45 != 48 || v46 <= 1))
            {
              v56 = v45 + 1;
              v57 = v46 - 1;
              while (v57)
              {
                if (v47 <= 0x19999999)
                {
                  v58 = *v56 - 48;
                  if (v58 <= 9)
                  {
                    v59 = __CFADD__(v58, 10 * v47);
                    v47 = v58 + 10 * v47;
                    ++v56;
                    --v57;
                    if (!v59)
                      continue;
                  }
                }
                goto LABEL_20;
              }
              goto LABEL_45;
            }
          }
          goto LABEL_20;
        }
LABEL_155:
        if (!(_DWORD)v46)
          goto LABEL_20;
        v47 = *(unsigned __int8 *)v45 - 48;
        if (v47 > 9)
          goto LABEL_20;
        if (v46 >= 2 && *(_BYTE *)v45 == 48)
          goto LABEL_20;
        v151 = (unsigned __int8 *)v45 + 1;
        v152 = v46 - 1;
        while (v152)
        {
          if (v47 <= 0x19999999)
          {
            v153 = *v151 - 48;
            if (v153 <= 9)
            {
              v59 = __CFADD__(v153, 10 * v47);
              v47 = v153 + 10 * v47;
              ++v151;
              --v152;
              if (!v59)
                continue;
            }
          }
          goto LABEL_20;
        }
LABEL_45:
        if (v47 == -1)
        {
LABEL_20:
          JSC::BytecodeGenerator::emitGetById(a2, v37, a3, v42, v33, v34, v35, v36);
        }
        else
        {
          if ((v47 & 0x80000000) != 0)
            v61 = COERCE__INT64((double)v47) + 0x2000000000000;
          else
            v61 = v47 | 0xFFFE000000000000;
          v62 = JSC::BytecodeGenerator::emitLoad(a2, 0, v61, (uint64_t)v42, v33, v34, v35, v36);
          if (v62)
          {
            v67 = v62;
            ++*v62;
            JSC::BytecodeGenerator::emitGetByVal(a2, v37, a3, (uint64_t)v62, v63, v64, v65, v66);
            --*v67;
          }
          else
          {
            JSC::BytecodeGenerator::emitGetByVal(a2, v37, a3, 0, v63, v64, v65, v66);
          }
        }
        if (*(_BYTE *)(a1 + 52))
        {
          v68 = **(WTF::StringImpl ***)v30;
          if (v68)
            *(_DWORD *)v68 += 2;
          v158 = v68;
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)&v165, (WTF::AtomStringImpl *)&v158, v48, v49, v50, v51, v52, v53, (uint64_t)v157);
          v71 = v158;
          v158 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
            {
              WTF::StringImpl::~StringImpl(v71, v69, v70, v49, v50, v51, v52, v53);
              WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
            }
            else
            {
              *(_DWORD *)v71 -= 2;
            }
          }
        }
        goto LABEL_22;
      }
      if (!*(_BYTE *)(a1 + 52))
      {
        v139 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, v39);
        if (v139)
        {
          v140 = v139;
          ++*v139;
LABEL_132:
          JSC::BytecodeGenerator::emitGetByVal(a2, v37, a3, (uint64_t)v140, v33, v34, v35, v36);
LABEL_133:
          --*v140;
          goto LABEL_22;
        }
        goto LABEL_153;
      }
      if (!v164)
        goto LABEL_152;
      v144 = JSC::BytecodeGenerator::emitNodeForProperty(a2, *((int **)v160 + ++v155), v39);
      if (v144)
        ++*v144;
      v154 = (uint64_t)v144;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v40 + 24))(*v40) & 1) == 0
        && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v40 + 32))(*v40) & 1) == 0)
      {
        v140 = (_DWORD *)v154;
        JSC::BytecodeGenerator::emitToPropertyKeyOrNumber(a2, v154, *(_DWORD *)(v154 + 4), v149, v145, v146, v147, v148);
        goto LABEL_132;
      }
      v140 = (_DWORD *)v154;
      JSC::BytecodeGenerator::emitGetByVal(a2, v37, a3, v154, v145, v146, v147, v148);
      if (v154)
        goto LABEL_133;
LABEL_22:
      v54 = *(_BYTE **)(v29 + 48 * v28 + 32);
      if (v54)
        JSC::assignDefaultValueIfUndefined(a2, (uint64_t)v37, v54, v49, v50, v51, v52, v53);
      if ((v8 & 1) != 0)
      {
        v60 = *(void (**)(void))(**(_QWORD **)(v29 + 48 * v28 + 24) + 24);
LABEL_44:
        v60();
        goto LABEL_26;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v30 + 24) + 72))(*(_QWORD *)(v30 + 24), a2);
LABEL_26:
      if (v37)
        --*v37;
      if (++v28 >= (unint64_t)*(unsigned int *)(a1 + 68))
      {
        v26 = v164;
        v12 = a2 + 144;
        v27 = (_DWORD *)v156;
        goto LABEL_55;
      }
    }
    v37 = (_DWORD *)v32;
    LOBYTE(v8) = 0;
LABEL_13:
    ++*v37;
    goto LABEL_14;
  }
LABEL_55:
  if (v26)
  {
    v72 = v160;
    if (v162)
    {
      v73 = 8 * v162;
      do
      {
        v74 = *(_DWORD **)v72;
        *(_QWORD *)v72 = 0;
        if (v74)
          --*v74;
        v72 = (WTF *)((char *)v72 + 8);
        v73 -= 8;
      }
      while (v73);
      v72 = v160;
    }
    if (v163 != (_BYTE *)v72 && v72 != 0)
    {
      v160 = 0;
      v161 = 0;
      WTF::fastFree((unint64_t)v72, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  v76 = (uint64_t)v165;
  if (v165)
  {
    v85 = *((unsigned int *)v165 - 1);
    if ((_DWORD)v85)
    {
      v86 = v165;
      do
      {
        v87 = *v86;
        if (*v86 != (WTF::StringImpl *)-1)
        {
          *v86 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
              WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
            }
            else
            {
              *(_DWORD *)v87 -= 2;
            }
          }
        }
        ++v86;
        --v85;
      }
      while (v85);
    }
    WTF::fastFree(v76 - 16, v19, v20, v21, v22, v23, v24, v25);
  }
  if (v27)
    --*v27;
  WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v12, (uint64_t)v166, v20, v21, v22, v23, v24, v25);
  return WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v166, v77, v78, v79, v80, v81, v82, v83);
}

int *JSC::BytecodeGenerator::emitNodeForProperty(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int *result;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3))
    goto LABEL_2;
  v14 = **(_QWORD **)(a3 + 32);
  if (!v14)
    goto LABEL_2;
  v15 = *(_DWORD *)(v14 + 16);
  if ((v15 & 0x20) != 0)
    goto LABEL_2;
  v16 = *(_BYTE **)(v14 + 8);
  v17 = *(unsigned int *)(v14 + 4);
  if ((v15 & 4) != 0)
  {
    if ((_DWORD)v17)
    {
      v18 = *v16 - 48;
      if (v18 <= 9 && (v17 < 2 || *v16 != 48))
      {
        v29 = v17 - 1;
        v30 = v16 + 1;
        while (v29)
        {
          if (v18 > 0x19999999)
            goto LABEL_12;
          v31 = *v30 - 48;
          if (v31 > 9)
            goto LABEL_12;
          v19 = 0;
          LODWORD(v17) = 0;
          v20 = 0;
          v27 = __CFADD__(v31, 10 * v18);
          v18 = v31 + 10 * v18;
          --v29;
          ++v30;
          if (v27)
            goto LABEL_14;
        }
        goto LABEL_44;
      }
      goto LABEL_12;
    }
LABEL_50:
    v19 = 0;
    goto LABEL_13;
  }
  if (!(_DWORD)v17)
    goto LABEL_50;
  v18 = *(unsigned __int16 *)v16 - 48;
  if (v18 > 9 || (*(_WORD *)v16 == 48 ? (v23 = v17 > 1) : (v23 = 0), v23))
  {
LABEL_12:
    v19 = 0;
    LODWORD(v17) = 0;
LABEL_13:
    v20 = 0;
    goto LABEL_14;
  }
  v24 = (unsigned __int16 *)(v16 + 2);
  v25 = v17 - 1;
  while (v25)
  {
    if (v18 > 0x19999999)
      goto LABEL_12;
    v26 = *v24 - 48;
    if (v26 > 9)
      goto LABEL_12;
    v19 = 0;
    LODWORD(v17) = 0;
    v20 = 0;
    v27 = __CFADD__(v26, 10 * v18);
    v18 = v26 + 10 * v18;
    ++v24;
    --v25;
    if (v27)
      goto LABEL_14;
  }
LABEL_44:
  v19 = 0x100000000;
  if (v18 == -1)
  {
    v19 = 0;
    LODWORD(v17) = 0;
  }
  else
  {
    LODWORD(v17) = v18;
  }
  if (v18 == -1)
    v20 = 0;
  else
    v20 = v18 & 0xFFFFFF00;
LABEL_14:
  v21 = v20 | v17;
  if ((v19 & 0x100000000) != 0)
  {
    if ((v21 & 0x80000000) != 0)
      v22 = COERCE__INT64((double)v21) + 0x2000000000000;
    else
      v22 = v21 | 0xFFFE000000000000;
    return JSC::BytecodeGenerator::emitLoad(a1, a2, v22, v6, v7, v8, v9, v10);
  }
LABEL_2:
  v11 = *(_BYTE *)(a1 + 709);
  v12 = *(_BYTE *)(a1 + 710);
  *(_WORD *)(a1 + 709) = 0;
  if ((unint64_t)&v32 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
  {
    *(_BYTE *)(a1 + 706) = 1;
    result = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  }
  else
  {
    if (*(_BYTE *)(a3 + 24))
      JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, a3 + 8, v6, v7, v8, v9, v10);
    result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a3 + 16))(a3, a1, a2);
  }
  *(_BYTE *)(a1 + 710) = v12;
  *(_BYTE *)(a1 + 709) = v11;
  return result;
}

uint64_t JSC::ObjectPatternNode::collectBoundIdentifiers(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 68))
  {
    v3 = result;
    v4 = 0;
    v5 = 24;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 56) + v5) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 56) + v5), a2);
      ++v4;
      v5 += 48;
    }
    while (v4 < *(unsigned int *)(v3 + 68));
  }
  return result;
}

uint64_t JSC::BindingNode::writableDirectBindingIfPossible(JSC::BindingNode *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29[2];
  uint64_t v30;
  char v31;

  JSC::BytecodeGenerator::variable((uint64_t)v29, (uint64_t)a2, *((_QWORD *)this + 4), 0, a5, a6, a7, a8);
  v17 = 0;
  if ((v31 & 2) != 0)
    v17 = *((unsigned __int8 *)this + 40) != 1;
  v18 = v30;
  if (!v30
    || *((_BYTE *)this + 40) == 2
    && JSC::BytecodeGenerator::needsTDZCheck((uint64_t)a2, (uint64_t)v29, v11, v12, v13, v14, v15, v16))
  {
    v19 = 0;
  }
  else if (v17)
  {
    v19 = 0;
  }
  else
  {
    v19 = v18;
  }
  if (v29[0])
  {
    if (*(_DWORD *)v29[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v29[0], v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v29[0] -= 2;
    }
  }
  return v19;
}

void JSC::BindingNode::finishDirectBindingAssignment(JSC::BindingNode *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47[5];

  JSC::BytecodeGenerator::variable((uint64_t)v47, (uint64_t)a2, *((_QWORD *)this + 4), 0, a5, a6, a7, a8);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v47[2], (uint64_t)v47, (uint64_t)this + 8, (uint64_t)this + 20, v10, v11, v12);
  v20 = v47[0];
  if (*((unsigned __int8 *)this + 40) > 1u)
    goto LABEL_22;
  if (v47[0])
    *(_DWORD *)v47[0] += 2;
  v21 = *((unsigned int *)a2 + 39);
  while (v21)
  {
    --v21;
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 18) + 16 * v21);
    if (v22)
    {
      v23 = *((_DWORD *)v20 + 4);
      if ((v23 & 0x20) != 0)
        v23 = *((_DWORD *)v20 + 8);
      v24 = *(_DWORD *)(v22 - 8);
      v25 = v24 & (v23 >> 8);
      v26 = *(WTF::StringImpl **)(v22 + 16 * v25);
      if (v26 != v20)
      {
        v46 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v46) & v24;
          v26 = *(WTF::StringImpl **)(v22 + 16 * v25);
          ++v46;
          if (v26 == v20)
            goto LABEL_10;
        }
        v25 = *(unsigned int *)(v22 - 4);
      }
LABEL_10:
      v27 = v22 + 16 * v25;
      v22 += 16 * *(unsigned int *)(v22 - 4);
    }
    else
    {
      v27 = 0;
    }
    if (v27 != v22)
    {
      if (*(_DWORD *)(v27 + 8) == 1)
        *(_DWORD *)(v27 + 8) = 0;
      break;
    }
  }
  if (v20)
  {
    v28 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 != 2)
    {
      *(_DWORD *)v20 = v28;
      v47[0] = 0;
LABEL_17:
      v29 = v28 - 2;
      if (v29)
      {
        *(_DWORD *)v20 = v29;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      return;
    }
    WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    v20 = v47[0];
LABEL_22:
    v47[0] = 0;
    if (!v20)
      return;
    v28 = *(_DWORD *)v20;
    goto LABEL_17;
  }
}

void JSC::BindingNode::bindValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  WTF::StringImpl *v82[2];
  int *v83;
  int v84;
  char v85;

  JSC::BytecodeGenerator::variable((uint64_t)v82, a2, *(_QWORD *)(a1 + 32), 0, a5, a6, a7, a8);
  v16 = 0;
  if ((v84 & 2) != 0)
    v16 = *(unsigned __int8 *)(a1 + 40) != 1;
  v17 = v83;
  if (v83)
  {
    if (*(_BYTE *)(a1 + 40) == 2)
      JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v82, (uint64_t)v83, 0, v12, v13, v14, v15);
    if (v16)
    {
      JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v84, v85, v11, v12, v13, v14, v15);
    }
    else
    {
      if ((int *)(a2 + 208) != v17 && v17 != (int *)a3)
        JSC::BytecodeGenerator::emitMove(a2, v17, a3, v11, v12, v13, v14, v15);
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v17, (uint64_t)v82, a1 + 8, a1 + 20, v13, v14, v15);
      if (*(unsigned __int8 *)(a1 + 40) <= 1u)
      {
        v25 = v82[0];
        if (v82[0])
          *(_DWORD *)v82[0] += 2;
        v26 = *(unsigned int *)(a2 + 156);
        while (v26)
        {
          --v26;
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16 * v26);
          if (v27)
          {
            v28 = *((_DWORD *)v25 + 4);
            if ((v28 & 0x20) != 0)
              v28 = *((_DWORD *)v25 + 8);
            v29 = *(_DWORD *)(v27 - 8);
            v30 = v29 & (v28 >> 8);
            v31 = *(WTF::StringImpl **)(v27 + 16 * v30);
            if (v31 != v25)
            {
              v81 = 1;
              while (v31)
              {
                v30 = ((_DWORD)v30 + v81) & v29;
                v31 = *(WTF::StringImpl **)(v27 + 16 * v30);
                ++v81;
                if (v31 == v25)
                  goto LABEL_19;
              }
              v30 = *(unsigned int *)(v27 - 4);
            }
LABEL_19:
            v32 = v27 + 16 * v30;
            v27 += 16 * *(unsigned int *)(v27 - 4);
          }
          else
          {
            v32 = 0;
          }
          if (v32 != v27)
          {
            if (*(_DWORD *)(v32 + 8) == 1)
              *(_DWORD *)(v32 + 8) = 0;
            break;
          }
        }
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
      }
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 712))
    {
      v34 = *(_DWORD *)(a1 + 20);
      v35 = *(_DWORD *)(a1 + 24);
      v36 = *(_DWORD *)(a1 + 28);
      if (v34 != -1 || v35 != -1 || v36 != -1)
      {
        v37 = *(_DWORD *)(a1 + 12);
        if ((*(_DWORD *)(a1 + 8) & v37 & *(_DWORD *)(a1 + 16)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
        {
          v39 = *(_QWORD *)(a2 + 192);
          v40 = *(_DWORD *)(v39 + 176);
          v41 = v35 - v40;
          v42 = v36 >= v40;
          v43 = v36 - v40;
          if (!v42)
            v43 = 0;
          v42 = v41 >= v43;
          v44 = v41 - v43;
          if (v42)
            JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v41, v35 - v37, 0, (v34 + ~*(_DWORD *)(v39 + 184)) | (unint64_t)(v44 << 32));
        }
      }
    }
    v45 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v82, v11, v12, v13, v14, v15);
    v51 = v45;
    if (v45)
      ++*v45;
    v52 = *(_DWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 24);
    v54 = *(_DWORD *)(a1 + 28);
    if (v52 != -1 || v53 != -1 || v54 != -1)
    {
      v55 = *(_DWORD *)(a1 + 12);
      if ((*(_DWORD *)(a1 + 8) & v55 & *(_DWORD *)(a1 + 16)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
      {
        v56 = *(_QWORD *)(a2 + 192);
        v57 = *(_DWORD *)(v56 + 176);
        v58 = v53 - v57;
        v42 = v54 >= v57;
        v59 = v54 - v57;
        if (!v42)
          v59 = 0;
        v42 = v58 >= v59;
        v60 = v58 - v59;
        if (v42)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v58, v53 - v55, 0, (v52 + ~*(_DWORD *)(v56 + 184)) | (unint64_t)(v60 << 32));
      }
    }
    if (*(_BYTE *)(a1 + 40) == 2)
      JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v82, 0, (uint64_t)v51, v47, v48, v49, v50);
    if (v16)
    {
      JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v84, v85, v46, v47, v48, v49, v50);
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 40) >= 2u)
        v61 = 2;
      else
        v61 = *(unsigned __int8 *)(a1 + 40);
      JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v51, (uint64_t)v82, a3, *(_BYTE *)(a2 + 712) != 0, v61, v49, v50);
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v82, a1 + 8, a1 + 20, v62, v63, v64);
      if (*(unsigned __int8 *)(a1 + 40) <= 1u)
        JSC::BytecodeGenerator::liftTDZCheckIfPossible(a2, v82[0], v19, v20, v21, v22, v23, v24);
    }
    if (v51)
      --*v51;
  }
  v33 = v82[0];
  v82[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
}

void JSC::BindingNode::toString(WTF::StringImpl ***this, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringBuilder::append(a2, this[4], a3, a4, a5, a6, a7, a8);
}

_DWORD **JSC::BindingNode::collectBoundIdentifiers(_DWORD **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = result[4];
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3 == *(_DWORD *)(a2 + 8))
    return WTF::Vector<JSC::Identifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier const&>(a2, (unint64_t)v2);
  v4 = *(_QWORD *)a2;
  v5 = (_DWORD *)*v2;
  if (v5)
    *v5 += 2;
  *(_QWORD *)(v4 + 8 * v3) = v5;
  *(_DWORD *)(a2 + 12) = v3 + 1;
  return result;
}

uint64_t JSC::AssignmentElementNode::writableDirectBindingIfPossible(JSC::AssignmentElementNode *this, JSC::BytecodeGenerator *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29[2];
  uint64_t v30;
  int v31;

  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4)))
    return 0;
  JSC::BytecodeGenerator::variable((uint64_t)v29, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)this + 4) + 32), 0, v4, v5, v6, v7);
  v15 = v30;
  if (v30)
  {
    v16 = v31;
    v17 = JSC::BytecodeGenerator::needsTDZCheck((uint64_t)a2, (uint64_t)v29, v9, v10, v11, v12, v13, v14);
    if ((v16 & 2) != 0)
      v18 = 0;
    else
      v18 = v15;
    if (v17)
      v19 = 0;
    else
      v19 = v18;
  }
  else
  {
    v19 = 0;
  }
  if (v29[0])
  {
    if (*(_DWORD *)v29[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v29[0], v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v29[0] -= 2;
    }
  }
  return v19;
}

void JSC::AssignmentElementNode::finishDirectBindingAssignment(JSC::AssignmentElementNode *this, JSC::BytecodeGenerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25[5];

  JSC::BytecodeGenerator::variable((uint64_t)v25, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)this + 4) + 32), 0, a5, a6, a7, a8);
  JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, (uint64_t)v25[2], (uint64_t)this + 8, (uint64_t)this + 20);
  if (v25[0])
  {
    if (*(_DWORD *)v25[0] == 2)
    {
      WTF::StringImpl::~StringImpl(v25[0], v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v25[0] -= 2;
    }
  }
}

void JSC::AssignmentElementNode::bindValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  int *v90;
  int *v91;
  _DWORD *v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  _DWORD *v103;
  _DWORD *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  WTF::StringImpl *v112[2];
  int *v113;
  int v114;
  char v115;
  _BYTE v116[28];
  unint64_t v117;
  int v118;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32));
  v11 = *(uint64_t **)(a1 + 32);
  if (v10)
  {
    JSC::BytecodeGenerator::variable((uint64_t)v112, a2, v11[4], 0, v6, v7, v8, v9);
    v17 = v114;
    v18 = v113;
    if (v113)
    {
      JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v112, (uint64_t)v113, 0, v13, v14, v15, v16);
      if ((v17 & 2) != 0)
      {
        JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v114, v115, v21, v22, v23, v24, v25);
      }
      else
      {
        if ((int *)(a2 + 208) != v18 && v18 != (int *)a3)
          JSC::BytecodeGenerator::emitMove(a2, v18, a3, v21, v22, v23, v24, v25);
        if ((*(_BYTE *)(a2 + 104) & 2) != 0)
        {
          v105 = v18[1];
          v106 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
          JSC::OpProfileType::emit<JSC::BytecodeGenerator>(a2, v105, 0, 2, 0, v106, v107, v108);
          v109 = *(_DWORD *)(a1 + 12);
          v110 = *(_DWORD *)(a1 + 24) - 1;
          v111 = *(_QWORD *)(a2 + 24);
          v118 = *(_DWORD *)(a2 + 12) - 1;
          v117 = __PAIR64__(v110, v109);
          WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v111 + 232), &v118, (uint64_t *)&v117, (uint64_t)v116);
        }
      }
    }
    else
    {
      if (!*(_BYTE *)(a2 + 712))
      {
        v39 = *(_DWORD *)(a1 + 20);
        v40 = *(_DWORD *)(a1 + 24);
        v41 = *(_DWORD *)(a1 + 28);
        if (v39 != -1 || v40 != -1 || v41 != -1)
        {
          v42 = *(_DWORD *)(a1 + 12);
          if ((*(_DWORD *)(a1 + 8) & v42 & *(_DWORD *)(a1 + 16)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
          {
            v43 = *(_QWORD *)(a2 + 192);
            v44 = *(_DWORD *)(v43 + 176);
            v45 = v40 - v44;
            v46 = v41 >= v44;
            v47 = v41 - v44;
            if (!v46)
              v47 = 0;
            v46 = v45 >= v47;
            v48 = v45 - v47;
            if (v46)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v45, v40 - v42, 0, (v39 + ~*(_DWORD *)(v43 + 184)) | (unint64_t)(v48 << 32));
          }
        }
      }
      v49 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v112, v12, v13, v14, v15, v16);
      v54 = v49;
      if (v49)
        ++*v49;
      JSC::BytecodeGenerator::emitTDZCheckIfNecessary(a2, v112, 0, (uint64_t)v49, v50, v51, v52, v53);
      if ((v17 & 2) != 0)
      {
        if ((JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v114, v115, v55, v56, v57, v58, v59) & 1) == 0)
          JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, (_DWORD *)(a1 + 20), (_DWORD *)(a1 + 8), (_DWORD *)(a1 + 20));
      }
      else
      {
        v60 = *(_DWORD *)(a1 + 20);
        v61 = *(_DWORD *)(a1 + 24);
        v62 = *(_DWORD *)(a1 + 28);
        if (v60 != -1 || v61 != -1 || v62 != -1)
        {
          v63 = *(_DWORD *)(a1 + 12);
          if ((*(_DWORD *)(a1 + 8) & v63 & *(_DWORD *)(a1 + 16)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
          {
            v64 = *(_QWORD *)(a2 + 192);
            v65 = *(_DWORD *)(v64 + 176);
            v66 = v61 - v65;
            v46 = v62 >= v65;
            v67 = v62 - v65;
            if (!v46)
              v67 = 0;
            v46 = v66 >= v67;
            v68 = v66 - v67;
            if (v46)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v66, v61 - v63, 0, (v60 + ~*(_DWORD *)(v64 + 184)) | (unint64_t)(v68 << 32));
          }
        }
        JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v54, (uint64_t)v112, a3, *(_BYTE *)(a2 + 712) != 0, 2, v58, v59);
        JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v112, a1 + 8, a1 + 20, v69, v70, v71);
      }
      if (v54)
        --*v54;
    }
    v26 = v112[0];
    v112[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    return;
  }
  v27 = (*(uint64_t (**)(uint64_t *))(*v11 + 136))(v11);
  v28 = *(_QWORD **)(a1 + 32);
  if (v27)
  {
    v29 = v28[4];
    v30 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
    if (v30)
    {
      v36 = v30;
      ++*v30;
      JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v30, v29, v31, v32, v33, v34, v35);
      v37 = (_DWORD *)(a1 + 20);
      v38 = (_DWORD *)(a1 + 8);
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v37, v38, v37);
      JSC::BaseDotNode::emitPutProperty((uint64_t)v28, a2, (uint64_t)v36, a3);
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v38, (uint64_t)v37);
      --*v36;
    }
    else
    {
      JSC::BytecodeGenerator::emitNode(a2, 0, v29, v31, v32, v33, v34, v35);
      v103 = (_DWORD *)(a1 + 20);
      v104 = (_DWORD *)(a1 + 8);
      JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v103, v104, v103);
      JSC::BaseDotNode::emitPutProperty((uint64_t)v28, a2, 0, a3);
      JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v104, (uint64_t)v103);
    }
    return;
  }
  if (!(*(unsigned int (**)(_QWORD))(*v28 + 128))(*(_QWORD *)(a1 + 32)))
    return;
  v80 = *(_QWORD *)(a1 + 32);
  v81 = *(_QWORD *)(v80 + 64);
  v82 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v88 = v82;
  if (v82)
    ++*v82;
  JSC::BytecodeGenerator::emitNode(a2, (uint64_t)v82, v81, v83, v84, v85, v86, v87);
  v89 = *(_QWORD *)(v80 + 72);
  v90 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v91 = v90;
  if (v90)
    ++*v90;
  JSC::BytecodeGenerator::emitNodeForProperty(a2, v90, v89);
  v92 = (_DWORD *)(a1 + 20);
  v93 = (_DWORD *)(a1 + 8);
  JSC::BytecodeGenerator::emitExpressionInfo((_DWORD *)a2, v92, v93, v92);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v80 + 64) + 240))(*(_QWORD *)(v80 + 64)))
  {
    v101 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v94, v95, v96, v97, v98, v99, v100);
    v102 = v101[1];
    ++*v101;
    JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v88[1], v102, v91[1], *(_DWORD *)(a3 + 4), *(_BYTE *)(a2 + 712));
    --*v101;
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v93, (uint64_t)v92);
  }
  else
  {
    JSC::BytecodeGenerator::emitPutByVal(a2, (uint64_t)v88, (uint64_t)v91, a3, v97, v98, v99, v100);
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v93, (uint64_t)v92);
    if (!v91)
      goto LABEL_52;
  }
  --*v91;
LABEL_52:
  if (v88)
    --*v88;
}

void JSC::AssignmentElementNode::toString(JSC::AssignmentElementNode *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4)))
    WTF::StringBuilder::append(a2, *(WTF::StringImpl ***)(*((_QWORD *)this + 4) + 32), v4, v5, v6, v7, v8, v9);
}

uint64_t JSC::RestParameterNode::collectBoundIdentifiers(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t JSC::RestParameterNode::toString(JSC::RestParameterNode *this, WTF::StringBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *((_DWORD *)a2 + 4);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *((_QWORD *)a2 + 1);
    if ((v11 || (v11 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v11 + 16) & 4) == 0)
    {
      v12 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)(v10 + 3), a3, a4, a5, a6, a7, a8);
      if (v12)
      {
        *(_DWORD *)v12 = 3014702;
        *(_WORD *)(v12 + 4) = 46;
      }
    }
    else
    {
      v13 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)(v10 + 3), a3, a4, a5, a6, a7, a8);
      if (v13)
      {
        *(_BYTE *)(v13 + 2) = 46;
        *(_WORD *)v13 = 11822;
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, WTF::StringBuilder *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), a2);
}

void JSC::RestParameterNode::bindValue()
{
  __break(0xC471u);
}

void JSC::SpreadExpressionNode::emitBytecode()
{
  __break(0xC471u);
}

uint64_t JSC::ObjectSpreadExpressionNode::emitBytecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _BYTE *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  int *v29;
  int *v32;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  char v49;
  char v50[8];
  WTF *v51;
  int v52;
  unsigned int v53;
  uint64_t v54;

  v6 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v12 = v6;
  if (v6)
    ++*v6;
  v13 = *(_BYTE **)(a1 + 64);
  v14 = *(_BYTE *)(a2 + 709);
  v15 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v49 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (v13[24])
      JSC::BytecodeGenerator::emitDebugHook((char *)a2, 5, (uint64_t)(v13 + 8), v7, v8, v9, v10, v11);
    (*(void (**)(_BYTE *, uint64_t, int *))(*(_QWORD *)v13 + 16))(v13, a2, v12);
  }
  *(_BYTE *)(a2 + 710) = v15;
  *(_BYTE *)(a2 + 709) = v14;
  v21 = JSC::BytecodeGenerator::moveLinkTimeConstant(a2, 0, 0x7Fu, v16, v17, v18, v19, v20);
  v22 = v21;
  if (v21)
    ++*v21;
  JSC::CallArguments::CallArguments((uint64_t)v50, a2, 0, 1);
  v28 = v51;
  v29 = *(int **)v51;
  if (a2 + 208 != *(_QWORD *)v51 && v29 != 0 && v29 != (int *)a3)
  {
    JSC::BytecodeGenerator::emitMove(a2, v29, a3, v23, v24, v25, v26, v27);
    v28 = v51;
  }
  v32 = (int *)*((_QWORD *)v28 + 1);
  if ((int *)(a2 + 208) != v32 && v32 != 0 && v32 != v12)
    JSC::BytecodeGenerator::emitMove(a2, v32, (uint64_t)v12, v23, v24, v25, v26, v27);
  v35 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a2, v35, (uint64_t)v22, 0, (uint64_t)v50, (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 52), 0);
  if (v53)
  {
    v43 = v51;
    v44 = 8 * v53;
    do
    {
      v45 = *(_DWORD **)v43;
      *(_QWORD *)v43 = 0;
      if (v45)
        --*v45;
      v43 = (WTF *)((char *)v43 + 8);
      v44 -= 8;
    }
    while (v44);
  }
  v46 = v51;
  if (&v54 != (uint64_t *)v51 && v51 != 0)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree((unint64_t)v46, v36, v37, v38, v39, v40, v41, v42);
  }
  if (v22)
    --*v22;
  if (v12)
    --*v12;
  return a3;
}

void JSC::BigIntNode::~BigIntNode(JSC::BigIntNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BigIntNode::isBigInt(JSC::BigIntNode *this)
{
  return 1;
}

void JSC::StringNode::~StringNode(JSC::StringNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::StringNode::isString(JSC::StringNode *this)
{
  return 1;
}

void JSC::TemplateStringNode::~TemplateStringNode(JSC::TemplateStringNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::TemplateLiteralNode::~TemplateLiteralNode(JSC::TemplateLiteralNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::TaggedTemplateNode::~TaggedTemplateNode(JSC::TaggedTemplateNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::RegExpNode::~RegExpNode(JSC::RegExpNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ThisNode::~ThisNode(JSC::ThisNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ThisNode::isThisNode(JSC::ThisNode *this)
{
  return 1;
}

void JSC::SuperNode::~SuperNode(JSC::SuperNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::SuperNode::isSuperNode(JSC::SuperNode *this)
{
  return 1;
}

void JSC::ImportNode::~ImportNode(JSC::ImportNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ImportNode::isImportNode(JSC::ImportNode *this)
{
  return 1;
}

void JSC::NewTargetNode::~NewTargetNode(JSC::NewTargetNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::MetaPropertyNode::isMetaProperty(JSC::MetaPropertyNode *this)
{
  return 1;
}

uint64_t JSC::NewTargetNode::isNewTarget(JSC::NewTargetNode *this)
{
  return 1;
}

void JSC::ImportMetaNode::~ImportMetaNode(JSC::ImportMetaNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ImportMetaNode::isImportMeta(JSC::ImportMetaNode *this)
{
  return 1;
}

void JSC::ResolveNode::~ResolveNode(JSC::ResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ResolveNode::isLocation(JSC::ResolveNode *this)
{
  return 1;
}

uint64_t JSC::ResolveNode::isResolveNode(JSC::ResolveNode *this)
{
  return 1;
}

BOOL JSC::ResolveNode::isArguments(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 880);
}

void JSC::ArrayNode::~ArrayNode(JSC::ArrayNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ArrayNode::isArrayLiteral(JSC::ArrayNode *this)
{
  return 1;
}

void JSC::ObjectLiteralNode::~ObjectLiteralNode(JSC::ObjectLiteralNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ObjectLiteralNode::isObjectLiteral(JSC::ObjectLiteralNode *this)
{
  return 1;
}

void JSC::BracketAccessorNode::~BracketAccessorNode(JSC::BracketAccessorNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BracketAccessorNode::isLocation(JSC::BracketAccessorNode *this)
{
  return 1;
}

uint64_t JSC::BracketAccessorNode::isBracketAccessorNode(JSC::BracketAccessorNode *this)
{
  return 1;
}

void JSC::DotAccessorNode::~DotAccessorNode(JSC::DotAccessorNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DotAccessorNode::isLocation(JSC::DotAccessorNode *this)
{
  return 1;
}

BOOL JSC::DotAccessorNode::isPrivateLocation(JSC::DotAccessorNode *this)
{
  return *((_DWORD *)this + 12) == 1;
}

uint64_t JSC::DotAccessorNode::isDotAccessorNode(JSC::DotAccessorNode *this)
{
  return 1;
}

void JSC::SpreadExpressionNode::~SpreadExpressionNode(JSC::SpreadExpressionNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::SpreadExpressionNode::isSpreadExpression(JSC::SpreadExpressionNode *this)
{
  return 1;
}

void JSC::ObjectSpreadExpressionNode::~ObjectSpreadExpressionNode(JSC::ObjectSpreadExpressionNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ArgumentListNode::~ArgumentListNode(JSC::ArgumentListNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::NewExprNode::~NewExprNode(JSC::NewExprNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::EvalFunctionCallNode::~EvalFunctionCallNode(JSC::EvalFunctionCallNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::EvalFunctionCallNode::isFunctionCall(JSC::EvalFunctionCallNode *this)
{
  return 1;
}

void JSC::FunctionCallValueNode::~FunctionCallValueNode(JSC::FunctionCallValueNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FunctionCallValueNode::isFunctionCall(JSC::FunctionCallValueNode *this)
{
  return 1;
}

void JSC::StaticBlockFunctionCallNode::~StaticBlockFunctionCallNode(JSC::StaticBlockFunctionCallNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::StaticBlockFunctionCallNode::isFunctionCall(JSC::StaticBlockFunctionCallNode *this)
{
  return 1;
}

void JSC::FunctionCallResolveNode::~FunctionCallResolveNode(JSC::FunctionCallResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FunctionCallResolveNode::isFunctionCall(JSC::FunctionCallResolveNode *this)
{
  return 1;
}

void JSC::FunctionCallBracketNode::~FunctionCallBracketNode(JSC::FunctionCallBracketNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FunctionCallBracketNode::isFunctionCall(JSC::FunctionCallBracketNode *this)
{
  return 1;
}

void JSC::FunctionCallDotNode::~FunctionCallDotNode(JSC::FunctionCallDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FunctionCallDotNode::isFunctionCall(JSC::FunctionCallDotNode *this)
{
  return 1;
}

void JSC::BytecodeIntrinsicNode::~BytecodeIntrinsicNode(JSC::BytecodeIntrinsicNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BytecodeIntrinsicNode::isBytecodeIntrinsicNode(JSC::BytecodeIntrinsicNode *this)
{
  return 1;
}

BOOL JSC::BytecodeIntrinsicNode::isFunctionCall(JSC::BytecodeIntrinsicNode *this)
{
  return *((_BYTE *)this + 104) == 1;
}

void JSC::CallFunctionCallDotNode::~CallFunctionCallDotNode(JSC::CallFunctionCallDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ApplyFunctionCallDotNode::~ApplyFunctionCallDotNode(JSC::ApplyFunctionCallDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::HasOwnPropertyFunctionCallDotNode::~HasOwnPropertyFunctionCallDotNode(JSC::HasOwnPropertyFunctionCallDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::PrefixNode::~PrefixNode(JSC::PrefixNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::PostfixNode::~PostfixNode(JSC::PostfixNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::DeleteResolveNode::~DeleteResolveNode(JSC::DeleteResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DeleteResolveNode::isDeleteNode(JSC::DeleteResolveNode *this)
{
  return 1;
}

void JSC::DeleteBracketNode::~DeleteBracketNode(JSC::DeleteBracketNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DeleteBracketNode::isDeleteNode(JSC::DeleteBracketNode *this)
{
  return 1;
}

void JSC::DeleteDotNode::~DeleteDotNode(JSC::DeleteDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DeleteDotNode::isDeleteNode(JSC::DeleteDotNode *this)
{
  return 1;
}

void JSC::DeleteValueNode::~DeleteValueNode(JSC::DeleteValueNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DeleteValueNode::isDeleteNode(JSC::DeleteValueNode *this)
{
  return 1;
}

void JSC::VoidNode::~VoidNode(JSC::VoidNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::TypeOfResolveNode::~TypeOfResolveNode(JSC::TypeOfResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::TypeOfValueNode::~TypeOfValueNode(JSC::TypeOfValueNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::UnaryPlusNode::~UnaryPlusNode(JSC::UnaryPlusNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::UnaryPlusNode::stripUnaryPlus(JSC::UnaryPlusNode *this)
{
  return *((_QWORD *)this + 4);
}

void JSC::LogicalNotNode::~LogicalNotNode(JSC::LogicalNotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::InstanceOfNode::~InstanceOfNode(JSC::InstanceOfNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::InNode::~InNode(JSC::InNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::EqualNode::~EqualNode(JSC::EqualNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::StrictEqualNode::~StrictEqualNode(JSC::StrictEqualNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::LogicalOpNode::~LogicalOpNode(JSC::LogicalOpNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::CoalesceNode::~CoalesceNode(JSC::CoalesceNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::OptionalChainNode::~OptionalChainNode(JSC::OptionalChainNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::OptionalChainNode::isOptionalChain(JSC::OptionalChainNode *this)
{
  return 1;
}

void JSC::ConditionalNode::~ConditionalNode(JSC::ConditionalNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ReadModifyResolveNode::~ReadModifyResolveNode(JSC::ReadModifyResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ShortCircuitReadModifyResolveNode::~ShortCircuitReadModifyResolveNode(JSC::ShortCircuitReadModifyResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::AssignResolveNode::~AssignResolveNode(JSC::AssignResolveNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::AssignResolveNode::isAssignResolveNode(JSC::AssignResolveNode *this)
{
  return 1;
}

void JSC::ReadModifyBracketNode::~ReadModifyBracketNode(JSC::ReadModifyBracketNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ShortCircuitReadModifyBracketNode::~ShortCircuitReadModifyBracketNode(JSC::ShortCircuitReadModifyBracketNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::AssignBracketNode::~AssignBracketNode(JSC::AssignBracketNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::AssignDotNode::~AssignDotNode(JSC::AssignDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ReadModifyDotNode::~ReadModifyDotNode(JSC::ReadModifyDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ShortCircuitReadModifyDotNode::~ShortCircuitReadModifyDotNode(JSC::ShortCircuitReadModifyDotNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::AssignErrorNode::~AssignErrorNode(JSC::AssignErrorNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::CommaNode::~CommaNode(JSC::CommaNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::CommaNode::isCommaNode(JSC::CommaNode *this)
{
  return 1;
}

void JSC::EmptyStatementNode::~EmptyStatementNode(JSC::EmptyStatementNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::EmptyStatementNode::hasCompletionValue(JSC::EmptyStatementNode *this)
{
  return 0;
}

uint64_t JSC::EmptyStatementNode::isEmptyStatement(JSC::EmptyStatementNode *this)
{
  return 1;
}

void JSC::DebuggerStatementNode::~DebuggerStatementNode(JSC::DebuggerStatementNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DebuggerStatementNode::hasCompletionValue(JSC::DebuggerStatementNode *this)
{
  return 0;
}

uint64_t JSC::DebuggerStatementNode::isDebuggerStatement(JSC::DebuggerStatementNode *this)
{
  return 1;
}

void JSC::ExprStatementNode::~ExprStatementNode(JSC::ExprStatementNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ExprStatementNode::isExprStatement(JSC::ExprStatementNode *this)
{
  return 1;
}

void JSC::DeclarationStatement::~DeclarationStatement(JSC::DeclarationStatement *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DeclarationStatement::hasCompletionValue(JSC::DeclarationStatement *this)
{
  return 0;
}

void JSC::ImportDeclarationNode::~ImportDeclarationNode(JSC::ImportDeclarationNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ModuleDeclarationNode::hasCompletionValue(JSC::ModuleDeclarationNode *this)
{
  return 0;
}

uint64_t JSC::ModuleDeclarationNode::isModuleDeclarationNode(JSC::ModuleDeclarationNode *this)
{
  return 1;
}

void JSC::ExportAllDeclarationNode::~ExportAllDeclarationNode(JSC::ExportAllDeclarationNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ExportDefaultDeclarationNode::~ExportDefaultDeclarationNode(JSC::ExportDefaultDeclarationNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ExportLocalDeclarationNode::~ExportLocalDeclarationNode(JSC::ExportLocalDeclarationNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ExportNamedDeclarationNode::~ExportNamedDeclarationNode(JSC::ExportNamedDeclarationNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::EmptyVarExpression::~EmptyVarExpression(JSC::EmptyVarExpression *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::EmptyLetExpression::~EmptyLetExpression(JSC::EmptyLetExpression *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::IfElseNode::~IfElseNode(JSC::IfElseNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::DoWhileNode::~DoWhileNode(JSC::DoWhileNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::WhileNode::~WhileNode(JSC::WhileNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ForNode::~ForNode(JSC::ForNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::ForNode::~ForNode(JSC::ForNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ContinueNode::~ContinueNode(JSC::ContinueNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ContinueNode::hasCompletionValue(JSC::ContinueNode *this)
{
  return 0;
}

uint64_t JSC::ContinueNode::isContinue(JSC::ContinueNode *this)
{
  return 1;
}

void JSC::BreakNode::~BreakNode(JSC::BreakNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BreakNode::hasCompletionValue(JSC::BreakNode *this)
{
  return 0;
}

uint64_t JSC::BreakNode::isBreak(JSC::BreakNode *this)
{
  return 1;
}

void JSC::ReturnNode::~ReturnNode(JSC::ReturnNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ReturnNode::isReturnNode(JSC::ReturnNode *this)
{
  return 1;
}

void JSC::WithNode::~WithNode(JSC::WithNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::LabelNode::~LabelNode(JSC::LabelNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::LabelNode::hasCompletionValue(JSC::LabelNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11));
}

uint64_t JSC::LabelNode::isLabel(JSC::LabelNode *this)
{
  return 1;
}

void JSC::ThrowNode::~ThrowNode(JSC::ThrowNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::TryNode::~TryNode(JSC::TryNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::TryNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::TryNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::TryNode::~TryNode(JSC::TryNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::TryNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::TryNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::FuncExprNode::~FuncExprNode(JSC::FuncExprNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FuncExprNode::isFuncExprNode(JSC::FuncExprNode *this)
{
  return 1;
}

void JSC::FuncDeclNode::~FuncDeclNode(JSC::FuncDeclNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::FuncDeclNode::hasCompletionValue(JSC::FuncDeclNode *this)
{
  return 0;
}

uint64_t JSC::FuncDeclNode::isFuncDeclNode(JSC::FuncDeclNode *this)
{
  return 1;
}

void JSC::ArrowFuncExprNode::~ArrowFuncExprNode(JSC::ArrowFuncExprNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ArrowFuncExprNode::isArrowFuncExprNode(JSC::ArrowFuncExprNode *this)
{
  return 1;
}

void JSC::MethodDefinitionNode::~MethodDefinitionNode(JSC::MethodDefinitionNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::YieldExprNode::~YieldExprNode(JSC::YieldExprNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::AwaitExprNode::~AwaitExprNode(JSC::AwaitExprNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::DefineFieldNode::~DefineFieldNode(JSC::DefineFieldNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DefineFieldNode::isDefineFieldNode(JSC::DefineFieldNode *this)
{
  return 1;
}

void JSC::ClassDeclNode::~ClassDeclNode(JSC::ClassDeclNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ClassDeclNode::hasCompletionValue(JSC::ClassDeclNode *this)
{
  return 0;
}

void JSC::ClassExprNode::~ClassExprNode(JSC::ClassExprNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v9 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 112), a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 72), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
}

{
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v9 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 112), a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 72), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::ClassExprNode::isClassExprNode(JSC::ClassExprNode *this)
{
  return 1;
}

void `non-virtual thunk to'JSC::ClassExprNode::~ClassExprNode(JSC::ClassExprNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v9 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 48), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E357CA78;
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 8), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
}

{
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v9 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 48), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E357CA78;
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ClassExprNode *)((char *)this + 8), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::SwitchNode::~SwitchNode(JSC::SwitchNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::SwitchNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::SwitchNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::SwitchNode::~SwitchNode(JSC::SwitchNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::SwitchNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::SwitchNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BlockNode::~BlockNode(JSC::BlockNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::BlockNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *((_QWORD *)this + 5) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::BlockNode *)((char *)this + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BlockNode::isBlock(JSC::BlockNode *this)
{
  return 1;
}

void `non-virtual thunk to'JSC::BlockNode::~BlockNode(JSC::BlockNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::BlockNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::BlockNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ForInNode::~ForInNode(JSC::ForInNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *((_QWORD *)this + 10) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForInNode *)((char *)this + 88), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *((_QWORD *)this + 10) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForInNode *)((char *)this + 88), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::ForInNode::~ForInNode(JSC::ForInNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForInNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForInNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ForOfNode::~ForOfNode(JSC::ForOfNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *((_QWORD *)this + 10) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForOfNode *)((char *)this + 88), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *((_QWORD *)this + 10) = &off_1E357CA78;
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForOfNode *)((char *)this + 88), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::ForOfNode::~ForOfNode(JSC::ForOfNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForOfNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  *(_QWORD *)this = &off_1E357CA78;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ForOfNode *)((char *)this + 8), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ArrayPatternNode::~ArrayPatternNode(JSC::ArrayPatternNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DestructuringPatternNode::isBindingNode(JSC::DestructuringPatternNode *this)
{
  return 0;
}

uint64_t JSC::DestructuringPatternNode::isAssignmentElementNode(JSC::DestructuringPatternNode *this)
{
  return 0;
}

uint64_t JSC::DestructuringPatternNode::isRestParameter(JSC::DestructuringPatternNode *this)
{
  return 0;
}

uint64_t JSC::DestructuringPatternNode::writableDirectBindingIfPossible(JSC::DestructuringPatternNode *this, JSC::BytecodeGenerator *a2)
{
  return 0;
}

void `non-virtual thunk to'JSC::ArrayPatternNode::~ArrayPatternNode(JSC::ArrayPatternNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void JSC::ObjectPatternNode::~ObjectPatternNode(JSC::ObjectPatternNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::ObjectPatternNode::~ObjectPatternNode(JSC::ObjectPatternNode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;

  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

void JSC::BindingNode::~BindingNode(JSC::BindingNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::BindingNode::isBindingNode(JSC::BindingNode *this)
{
  return 1;
}

void JSC::AssignmentElementNode::~AssignmentElementNode(JSC::AssignmentElementNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::AssignmentElementNode::isAssignmentElementNode(JSC::AssignmentElementNode *this)
{
  return 1;
}

void JSC::RestParameterNode::~RestParameterNode(JSC::RestParameterNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::RestParameterNode::isRestParameter(JSC::RestParameterNode *this)
{
  return 1;
}

void JSC::DestructuringAssignmentNode::~DestructuringAssignmentNode(JSC::DestructuringAssignmentNode *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::DestructuringAssignmentNode::isAssignmentLocation(JSC::DestructuringAssignmentNode *this)
{
  return 1;
}

uint64_t JSC::DestructuringAssignmentNode::isDestructuringNode(JSC::DestructuringAssignmentNode *this)
{
  return 1;
}

void JSC::ProgramNode::~ProgramNode(JSC::ProgramNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 192), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 17);
  if (v17)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 112), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ProgramNode *)((char *)this + 48), v18, v19, v20, v21, v22, v23, v24);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 192), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 17);
  if (v17)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 112), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ProgramNode *)((char *)this + 48), v18, v19, v20, v21, v22, v23, v24);
  WTF::fastFree((unint64_t)this, v25, v26, v27, v28, v29, v30, v31);
}

void `non-virtual thunk to'JSC::ProgramNode::~ProgramNode(JSC::ProgramNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *((_QWORD *)this - 5) = off_1E3596CB0;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 152), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 72), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ProgramNode *)((char *)this + 8), v18, v19, v20, v21, v22, v23, v24);
}

{
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *((_QWORD *)this - 5) = off_1E3596CB0;
  v9 = (char *)this - 40;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 152), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v18 = *((_QWORD *)this + 12);
  if (v18)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 72), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ProgramNode *)((char *)this + 8), v19, v20, v21, v22, v23, v24, v25);
  WTF::fastFree((unint64_t)v9, v26, v27, v28, v29, v30, v31, v32);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *((_QWORD *)this - 13) = off_1E3596CB0;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 8), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ProgramNode *)((char *)this - 56), v18, v19, v20, v21, v22, v23, v24);
}

{
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *((_QWORD *)this - 13) = off_1E3596CB0;
  v9 = (char *)this - 104;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ProgramNode *)((char *)this + 8), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ProgramNode *)((char *)this - 56), v19, v20, v21, v22, v23, v24, v25);
  WTF::fastFree((unint64_t)v9, v26, v27, v28, v29, v30, v31, v32);
}

void JSC::ModuleProgramNode::~ModuleProgramNode(JSC::ModuleProgramNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)this + 31, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 192), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v24 = *((_QWORD *)this + 17);
  if (v24)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 112), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ModuleProgramNode *)((char *)this + 48), v25, v26, v27, v28, v29, v30, v31);
}

{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)this + 31, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 192), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v24 = *((_QWORD *)this + 17);
  if (v24)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 112), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ModuleProgramNode *)((char *)this + 48), v25, v26, v27, v28, v29, v30, v31);
  WTF::fastFree((unint64_t)this, v32, v33, v34, v35, v36, v37, v38);
}

void `non-virtual thunk to'JSC::ModuleProgramNode::~ModuleProgramNode(JSC::ModuleProgramNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)this + 26, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this - 5) = off_1E3596CB0;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 152), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v24 = *((_QWORD *)this + 12);
  if (v24)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 72), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ModuleProgramNode *)((char *)this + 8), v25, v26, v27, v28, v29, v30, v31);
}

{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)this + 26, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this - 5) = off_1E3596CB0;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 152), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v24 = *((_QWORD *)this + 12);
  if (v24)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 72), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ModuleProgramNode *)((char *)this + 8), v25, v26, v27, v28, v29, v30, v31);
  WTF::fastFree((unint64_t)this - 40, v32, v33, v34, v35, v36, v37, v38);
}

{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)this + 18, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this - 13) = off_1E3596CB0;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 88), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v24 = *((_QWORD *)this + 4);
  if (v24)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 8), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ModuleProgramNode *)((char *)this - 56), v25, v26, v27, v28, v29, v30, v31);
}

{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)this + 18, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this - 13) = off_1E3596CB0;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 88), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v24 = *((_QWORD *)this + 4);
  if (v24)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::ModuleProgramNode *)((char *)this + 8), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ModuleProgramNode *)((char *)this - 56), v25, v26, v27, v28, v29, v30, v31);
  WTF::fastFree((unint64_t)this - 104, v32, v33, v34, v35, v36, v37, v38);
}

void JSC::EvalNode::~EvalNode(JSC::EvalNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 192), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 17);
  if (v17)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 112), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::EvalNode *)((char *)this + 48), v18, v19, v20, v21, v22, v23, v24);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 192), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 17);
  if (v17)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 112), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::EvalNode *)((char *)this + 48), v18, v19, v20, v21, v22, v23, v24);
  WTF::fastFree((unint64_t)this, v25, v26, v27, v28, v29, v30, v31);
}

void `non-virtual thunk to'JSC::EvalNode::~EvalNode(JSC::EvalNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *((_QWORD *)this - 5) = off_1E3596CB0;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 152), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v17 = *((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 72), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::EvalNode *)((char *)this + 8), v18, v19, v20, v21, v22, v23, v24);
}

{
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *((_QWORD *)this - 5) = off_1E3596CB0;
  v9 = (char *)this - 40;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 152), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v18 = *((_QWORD *)this + 12);
  if (v18)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 72), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::EvalNode *)((char *)this + 8), v19, v20, v21, v22, v23, v24, v25);
  WTF::fastFree((unint64_t)v9, v26, v27, v28, v29, v30, v31, v32);
}

{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *((_QWORD *)this - 13) = off_1E3596CB0;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 8), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::EvalNode *)((char *)this - 56), v18, v19, v20, v21, v22, v23, v24);
}

{
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *((_QWORD *)this - 13) = off_1E3596CB0;
  v9 = (char *)this - 104;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::EvalNode *)((char *)this + 8), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::EvalNode *)((char *)this - 56), v19, v20, v21, v22, v23, v24, v25);
  WTF::fastFree((unint64_t)v9, v26, v27, v28, v29, v30, v31, v32);
}

void JSC::FunctionNode::~FunctionNode(JSC::FunctionNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 192), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v18 = *((_QWORD *)this + 17);
  if (v18)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 112), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::FunctionNode *)((char *)this + 48), v19, v20, v21, v22, v23, v24, v25);
}

{
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  *(_QWORD *)this = off_1E3596CB0;
  *((_QWORD *)this + 5) = &unk_1E3596D50;
  *((_QWORD *)this + 13) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 192), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *((_QWORD *)this + 13) = &off_1E357CA78;
  v18 = *((_QWORD *)this + 17);
  if (v18)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 112), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *((_QWORD *)this + 5) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::FunctionNode *)((char *)this + 48), v19, v20, v21, v22, v23, v24, v25);
  WTF::fastFree((unint64_t)this, v26, v27, v28, v29, v30, v31, v32);
}

uint64_t JSC::FunctionNode::isFunctionNode(JSC::FunctionNode *this)
{
  return 1;
}

void `non-virtual thunk to'JSC::FunctionNode::~FunctionNode(JSC::FunctionNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  *((_QWORD *)this - 5) = off_1E3596CB0;
  *(_QWORD *)this = &unk_1E3596D50;
  *((_QWORD *)this + 8) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 152), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *((_QWORD *)this + 8) = &off_1E357CA78;
  v18 = *((_QWORD *)this + 12);
  if (v18)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 72), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)this = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::FunctionNode *)((char *)this + 8), v19, v20, v21, v22, v23, v24, v25);
}

{
  JSC::FunctionNode::~FunctionNode((JSC::FunctionNode *)((char *)this - 40), a2, a3, a4, a5, a6, a7, a8);
}

{
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  *((_QWORD *)this - 13) = off_1E3596CB0;
  *((_QWORD *)this - 8) = &unk_1E3596D50;
  *(_QWORD *)this = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  v17 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  *(_QWORD *)this = &off_1E357CA78;
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::FunctionNode *)((char *)this + 8), (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
  *((_QWORD *)this - 8) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::FunctionNode *)((char *)this - 56), v19, v20, v21, v22, v23, v24, v25);
}

{
  JSC::FunctionNode::~FunctionNode((JSC::FunctionNode *)((char *)this - 104), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v16 = a2;
    v17 = (_QWORD *)(v8 + 24);
    do
    {
      *((_DWORD *)v17 - 2) = 0x7FFFFFFF;
      *v17 = 0;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (int *)(v5 + 16 * v18);
      v21 = *v20;
      if (*v20 == 0x7FFFFFFF)
      {
        v22 = *((_QWORD *)v20 + 1);
        *((_QWORD *)v20 + 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
          {
            v34 = *(_QWORD *)(v22 + 24);
            if (v34)
              WTF::fastFree(v34 - 16, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v22, v9, v10, v11, v12, v13, v14, v15);
          }
          else
          {
            --*(_DWORD *)v22;
          }
        }
      }
      else if (v21 != 2147483646)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 16 * v28) != 0x7FFFFFFF);
        v29 = v23 + 16 * v28;
        v30 = *(_QWORD *)(v29 + 8);
        *(_QWORD *)(v29 + 8) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
          {
            v35 = *(_QWORD *)(v30 + 24);
            if (v35)
              WTF::fastFree(v35 - 16, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v30, v9, v10, v11, v12, v13, v14, v15);
          }
          else
          {
            --*(_DWORD *)v30;
          }
        }
        *(_DWORD *)v29 = *v20;
        v31 = v5 + 16 * v18;
        v32 = *(_QWORD *)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v29 + 8) = v32;
        v33 = *(_QWORD *)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
          {
            v36 = *(_QWORD *)(v33 + 24);
            if (v36)
              WTF::fastFree(v36 - 16, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v33, v9, v10, v11, v12, v13, v14, v15);
          }
          else
          {
            --*(_DWORD *)v33;
          }
        }
        if (v20 == a3)
          v19 = v29;
      }
      ++v18;
    }
    while (v18 != v6);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

void WTF::RefCounted<JSC::StaticPropertyAnalysis>::deref(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (*(_DWORD *)this == 1)
  {
    v9 = *((_QWORD *)this + 3);
    if (v9)
      WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    --*(_DWORD *)this;
  }
}

uint64_t WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::UnlinkedStringJumpTable::~UnlinkedStringJumpTable(JSC::UnlinkedStringJumpTable *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(WTF::StringImpl ***)this;
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

_QWORD *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v1];
  if ((_DWORD)v1)
  {
    v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3)
        return v2;
    }
  }
  return result;
}

unsigned int **WTF::FixedVector<JSC::Identifier>::FixedVector<0ul,WTF::UnsafeVectorOverflow>(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *a1 = 0;
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v10 + 8));
    v13 = v12;
    v14 = 0;
    *v12 = v10;
    do
    {
      v15 = *(_QWORD *)(v9 + v14);
      *(_QWORD *)(v9 + v14) = 0;
      *(_QWORD *)&v12[v14 / 4 + 2] = v15;
      v14 += 8;
    }
    while (v11 != v14);
    v16 = 0;
    do
    {
      v17 = *(WTF::StringImpl **)(v9 + v16);
      *(_QWORD *)(v9 + v16) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      v16 += 8;
    }
    while (v11 != v16);
    if (v9)
    {
      WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
      v9 = 0;
    }
  }
  else
  {
    v13 = 0;
  }
  v26 = *a1;
  *a1 = v13;
  if (v26)
  {
    v28 = (WTF::StringImpl **)(v26 + 2);
    v27 = *v26;
    if ((_DWORD)v27)
    {
      v29 = 8 * v27;
      do
      {
        v30 = *v28;
        *v28 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    WTF::fastFree((unint64_t)v26, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v9)
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = *(_DWORD *)(a2 + 16);
  if ((v3 & 0x20) != 0)
    v3 = *(_DWORD *)(a2 + 32);
  v4 = v2 & (v3 >> 8);
  v5 = *(_QWORD *)(a1 + 16 * v4);
  if (v5 == a2)
    return a1 + 16 * v4;
  v6 = 1;
  while (v5)
  {
    v4 = ((_DWORD)v4 + v6) & v2;
    v5 = *(_QWORD *)(a1 + 16 * v4);
    ++v6;
    if (v5 == a2)
      return a1 + 16 * v4;
  }
  return a1 + 16 * *(unsigned int *)(a1 - 4);
}

void WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::deallocateTable(JSC::TemplateObjectDescriptor **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::TemplateObjectDescriptor **v10;
  JSC::TemplateObjectDescriptor *v11;

  v9 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v9)
  {
    v10 = a1;
    do
    {
      v11 = *v10;
      if (*v10 != (JSC::TemplateObjectDescriptor *)-1)
      {
        *v10 = 0;
        if (v11)
          WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree((unint64_t)(a1 - 2), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<std::tuple<unsigned int,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::FrequentExitSite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!HIDWORD(v9))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  int v4;

  v1 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v1 - 4)) != 0)
    v2 = v4 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v4));
  else
    v2 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a1, v2, 0);
}

uint64_t WTF::Vector<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl ***v22;
  WTF::StringImpl **v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = (WTF::StringImpl ***)v11;
      v20 = 8 * v10;
      v21 = (WTF::StringImpl ***)v5;
      v22 = (WTF::StringImpl ***)v5;
      do
      {
        *v19 = 0;
        v23 = *v21;
        *v22++ = 0;
        *v19++ = v23;
        WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(v21, v12, v13, v14, v15, v16, v17, v18);
        v21 = v22;
        v20 -= 8;
      }
      while (v20);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (WTF::StringImpl ***)v9;
        v18 = 8 * v8;
        v19 = (WTF::StringImpl ***)v7;
        v20 = (WTF::StringImpl ***)v7;
        do
        {
          *v17 = 0;
          v21 = *v19;
          *v20++ = 0;
          *v17++ = v21;
          WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(v19, v10, v11, v12, v13, v14, v15, v16);
          v19 = v20;
          v18 -= 8;
        }
        while (v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

JSC::SymbolTableEntry *JSC::SymbolTableEntry::operator=(JSC::SymbolTableEntry *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *a2;
  if ((*a2 & 1) != 0)
  {
    if ((*(_BYTE *)a1 & 1) == 0)
    {
      JSC::SymbolTableEntry::freeFatEntrySlow(a1, a2, a3, a4, a5, a6, a7, a8);
      v10 = *a2;
    }
    *(_QWORD *)a1 = v10;
  }
  else
  {
    JSC::SymbolTableEntry::copySlow((unint64_t *)a1, (_QWORD **)a2);
  }
  return a1;
}

void WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unsigned int v34;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 16 * v18;
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19 != 0x7FFFFFFF)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v12 - 4);
        v32 = 0;
        v31 = v12 + 16 * v33;
        goto LABEL_23;
      }
      if (v20 == 2147483646)
        v21 = v19;
      v18 = (v18 + v22) & v14;
      v19 = v12 + 16 * v18;
      v20 = *(_DWORD *)v19;
      ++v22;
    }
    while (*(_DWORD *)v19 != 0x7FFFFFFF);
    if (v21)
    {
      *(_DWORD *)v21 = 0x7FFFFFFF;
      *(_QWORD *)(v21 + 8) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v19 = v21;
    }
  }
  *(_DWORD *)v19 = v15;
  v23 = *a4;
  *a4 = 0;
  v24 = *(WTF **)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v23;
  if (v24)
    WTF::RefCounted<JSC::StaticPropertyAnalysis>::deref(v24, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_19;
    goto LABEL_30;
  }
  if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v34 = 8;
LABEL_33:
      v19 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a2, v34, (int *)v19);
      v27 = *a2;
      if (*a2)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
      goto LABEL_19;
    }
LABEL_30:
    v34 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
    goto LABEL_33;
  }
LABEL_19:
  v31 = v27 + 16 * v30;
  v32 = 1;
LABEL_23:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v31;
  *(_BYTE *)(a1 + 16) = v32;
}

unint64_t WTF::Vector<WTF::BitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::BitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::BitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WTF::BitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::BitVector *v14;
  uint64_t v15;
  const WTF::BitVector *v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19828DC0CLL);
    }
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    if ((_DWORD)v5)
    {
      v14 = (WTF::BitVector *)v6;
      v15 = 8 * v5;
      v16 = (const WTF::BitVector *)v4;
      do
      {
        *(_QWORD *)v14 = 0x8000000000000000;
        if ((*(_QWORD *)v16 & 0x8000000000000000) != 0)
          *(_QWORD *)v14 = *(_QWORD *)v16;
        else
          WTF::BitVector::setSlow(v14, v16, v8, v9, v10, v11, v12, v13);
        if ((*(_QWORD *)v16 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * *(_QWORD *)v16, v7, v8, v9, v10, v11, v12, v13);
        v14 = (WTF::BitVector *)((char *)v14 + 8);
        v16 = (const WTF::BitVector *)((char *)v16 + 8);
        v15 -= 8;
      }
      while (v15);
    }
    if (v4)
    {
      if (*(_QWORD *)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

void WTF::VectorTypeOperations<JSC::UnlinkedFunctionExecutable::ClassElementDefinition>::destruct(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != (WTF::StringImpl **)a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v9 += 5;
    }
    while (v9 != (WTF::StringImpl **)a2);
  }
}

void JSC::Identifier::add(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t StatusReg;
  uint64_t casual;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  _opaque_pthread_t *v32;
  unint64_t v34;
  char *stackaddr_np;
  _opaque_pthread_t *v36;
  unint64_t v37;
  int v38;
  _opaque_pthread_t *v39;
  rlim_t rlim_cur;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  rlimit v57;
  char v58;
  char v59;
  rlimit *v60;

  if (a3)
  {
    if (a3 == 2)
    {
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(a1 + 41968), *a2, a4, a5, a6, a7, a8, a9);
      return;
    }
    v10 = -1640531527;
    v50 = a3 - 1;
    v54 = a2;
    v55 = a3 - 1;
    if ((unint64_t)(a3 - 1) >= 2)
    {
      v51 = 0;
      do
      {
        v52 = ((v10 + a2[v51]) << 16) ^ (a2[v51 + 1] << 11) ^ (v10 + a2[v51]);
        v10 = v52 + (v52 >> 11);
        v53 = v51 + 3;
        v51 += 2;
      }
      while (v53 < v50);
      if ((v50 & 1) != 0)
        v10 = ((v10 + a2[a3 - 2]) ^ ((v10 + a2[a3 - 2]) << 11))
            + (((v10 + a2[a3 - 2]) ^ ((v10 + a2[a3 - 2]) << 11)) >> 17);
    }
  }
  else
  {
    v10 = -1640531527;
    v54 = a2;
    v55 = 0;
  }
  v11 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
  v13 = (v12 ^ (v12 << 10)) & 0xFFFFFF;
  if (!v13)
    v13 = 0x800000;
  v56 = v13;
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
    goto LABEL_8;
  }
  if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    goto LABEL_7;
LABEL_8:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  casual = *(_QWORD *)(StatusReg + 736);
  if (casual)
    goto LABEL_9;
  v25 = atomic_load(&WTF::initialize(void)::onceKey);
  if (v25 != -1)
  {
    v57.rlim_cur = (rlim_t)&v59;
    v60 = &v57;
    std::__call_once(&WTF::initialize(void)::onceKey, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
  }
  v26 = *(_QWORD *)(StatusReg + 752);
  if (!v26)
    goto LABEL_60;
  v27 = (_BYTE *)(v26 + 9408);
  *(_BYTE *)(v26 + 9408) = 1;
  v28 = *(unsigned int *)(v26 + 9424);
  if (!(_DWORD)v28)
  {
    v41 = *(_QWORD *)(v26 + 9448);
    v42 = *(_QWORD *)(v26 + 9432);
    if (v41)
    {
LABEL_50:
      v43 = __clz(v41);
      *(_QWORD *)(v26 + 9448) = v41 & ~(0x8000000000000000 >> v43);
      casual = v42 + 16 * v43;
      goto LABEL_23;
    }
    if (*(_BYTE *)(v26 + 9413) == 6)
    {
      v44 = *(_DWORD *)(v26 + 9444);
      v45 = *(unsigned int *)(v26 + 9440);
      if (v45 < v44)
      {
        *(_QWORD *)&v27[8 * v45 + 56] = 0;
        v46 = (unint64_t *)(v26 + 8 * v45 + 9472);
        v47 = v44 - 1 - v45;
        while (v47)
        {
          v42 += 1024;
          v49 = *v46++;
          v48 = v49;
          LODWORD(v45) = v45 + 1;
          --v47;
          if (v49)
          {
            v41 = __rbit64(v48);
            *(_DWORD *)(v26 + 9440) = v45;
            *(_QWORD *)(v26 + 9432) = v42;
            goto LABEL_50;
          }
        }
        *(_DWORD *)(v26 + 9440) = v44;
      }
    }
    *v27 = 0;
LABEL_60:
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_24;
  }
  *(_DWORD *)(v26 + 9424) = v28 - *(_DWORD *)(v26 + 9428);
  casual = *(_QWORD *)(v26 + 9416) - v28;
LABEL_23:
  *v27 = 0;
LABEL_24:
  *(_OWORD *)casual = 0u;
  *(_OWORD *)(casual + 16) = 0u;
  *(_QWORD *)(casual + 96) = 0;
  *(_OWORD *)(casual + 64) = 0u;
  *(_OWORD *)(casual + 80) = 0u;
  *(_OWORD *)(casual + 32) = 0u;
  *(_OWORD *)(casual + 48) = 0u;
  *(_DWORD *)casual = 1;
  *(_OWORD *)(casual + 8) = 0u;
  v29 = (unint64_t *)(casual + 8);
  *(_OWORD *)(casual + 24) = 0u;
  do
  {
    v30 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v31 = v30 + 1;
  }
  while (__stlxr(v31, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(casual + 48) = v31;
  *(_QWORD *)(casual + 52) = 0;
  *(_QWORD *)(casual + 68) = 0;
  *(_QWORD *)(casual + 60) = 0;
  *(_DWORD *)(casual + 76) = 0;
  *(_QWORD *)(casual + 88) = 0;
  *(_QWORD *)(casual + 96) = 0;
  v32 = pthread_self();
  if (__ldaxr(v29))
  {
    __clrex();
LABEL_28:
    WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
    goto LABEL_29;
  }
  if (__stxr(1uLL, v29))
    goto LABEL_28;
LABEL_29:
  *(_QWORD *)(casual + 40) = v32;
  *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v32);
  v34 = __ldxr(v29);
  if (v34 == 1)
  {
    if (!__stlxr(0, v29))
      goto LABEL_34;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
LABEL_34:
  stackaddr_np = *(char **)(casual + 16);
  if (!stackaddr_np)
  {
    v38 = pthread_main_np();
    v39 = pthread_self();
    stackaddr_np = (char *)pthread_get_stackaddr_np(v39);
    if (v38)
    {
      getrlimit(3, &v57);
      if (v57.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
        rlim_cur = 0x800000;
      else
        rlim_cur = v57.rlim_cur;
    }
    else
    {
      rlim_cur = pthread_get_stacksize_np(v39);
    }
    *(_QWORD *)(casual + 16) = stackaddr_np;
    *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
  }
  *(_QWORD *)(casual + 80) = stackaddr_np;
  *(_QWORD *)(casual + 56) = casual + 64;
  v36 = pthread_self();
  if (pthread_equal(v36, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
  {
    v37 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
    if (v37 != -1)
    {
      v57.rlim_cur = (rlim_t)&v59;
      v60 = &v57;
      std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
    }
    *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
  }
  *(_QWORD *)(StatusReg + 736) = casual;
  pthread_key_init_np();
LABEL_9:
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::BufferFromStaticDataTranslator<unsigned char>>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(uint64_t **)(casual + 56), (uint64_t)&v54, a4, a5, a6, a7, a8, (uint64_t)&v57);
  v23 = (_DWORD *)(16 * *(unsigned int *)v57.rlim_cur);
  if (!v58)
    *v23 += 2;
  *a9 = v23;
  v24 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v17, v18, v19, v20, v21, v22);
}

unint64_t WTF::Vector<JSC::UnlinkedStringJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::UnlinkedStringJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::UnlinkedStringJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::UnlinkedStringJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v6;
        v15 = v3;
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 13) = 0;
          v16 = *(_QWORD *)v15;
          *(_QWORD *)v15 = 0;
          *(_QWORD *)v14 = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 8);
          *(_DWORD *)(v15 + 8) = 0;
          *(_DWORD *)(v14 + 8) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 12);
          *(_DWORD *)(v15 + 12) = 0;
          *(_DWORD *)(v14 + 12) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v14 + 16) = v16;
          LOBYTE(v16) = *(_BYTE *)(v15 + 20);
          *(_BYTE *)(v15 + 20) = 0;
          *(_BYTE *)(v14 + 20) = v16;
          JSC::UnlinkedStringJumpTable::~UnlinkedStringJumpTable((JSC::UnlinkedStringJumpTable *)v15, v7, v8, v9, v10, v11, v12, v13);
          v15 = v17 + 24;
          v14 += 24;
        }
        while (v15 != v3 + 24 * v4);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void JSC::prepareJumpTableForSwitch(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t))
{
  unsigned int v12;
  int v13;
  int v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;

  v12 = a3;
  v13 = (int)a2;
  *(_DWORD *)(a1 + 8) = a6;
  v15 = a7 - a6 + 1;
  if ((_DWORD)a7 - (_DWORD)a6 == -1)
  {
    v16 = 0;
  }
  else
  {
    v16 = (char *)WTF::fastMalloc((WTF *)(4 * (a7 - a6 + 1) + 4));
    *(_DWORD *)v16 = v15;
  }
  v17 = *(char **)a1;
  *(_QWORD *)a1 = v16;
  if (v17)
  {
    WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
    v16 = *(char **)a1;
  }
  if (v16)
    v18 = v16 + 4;
  else
    v18 = 0;
  if (v16)
    v16 += 4 * *(unsigned int *)v16 + 4;
  v19 = v16 - v18;
  if (v19 >= 1)
    bzero(v18, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
  if (v12)
  {
    v20 = 0;
    v21 = v12;
    do
    {
      v22 = a8(*(_QWORD *)(a5 + 8 * v20), a6, a7);
      if (v20 >= *(unsigned int *)(a4 + 12))
        goto LABEL_28;
      v23 = v22;
      v24 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v20);
      *(_BYTE *)(v24 + 8) = 1;
      v25 = *(_DWORD *)(v24 + 4);
      if (v25 == -1)
      {
        v28 = (uint64_t *)(v24 + 16);
        v29 = *(unsigned int *)(v24 + 28);
        if ((_DWORD)v29 == *(_DWORD *)(v24 + 24))
        {
          WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1);
          v29 = *(unsigned int *)(v24 + 28);
          v30 = *(_QWORD *)(v24 + 16);
        }
        else
        {
          v30 = *v28;
        }
        v31 = (_DWORD *)(v30 + 4 * v29);
        v26 = 0;
        *v31 = v13;
        ++*(_DWORD *)(v24 + 28);
      }
      else
      {
        v26 = v25 - v13;
      }
      if (**(_DWORD **)a1 <= v23)
      {
LABEL_28:
        __break(0xC471u);
        JUMPOUT(0x19828E3F8);
      }
      v27 = *(_QWORD *)a1 + 4;
      if (!*(_DWORD *)(v27 + 4 * v23))
        *(_DWORD *)(v27 + 4 * v23) = v26;
      ++v20;
    }
    while (v21 != v20);
  }
}

uint64_t JSC::keyForImmediateSwitch(JSC *this, JSC::ExpressionNode *a2)
{
  return ((int)*((double *)this + 4) - (_DWORD)a2);
}

uint64_t JSC::keyForCharacterSwitch(JSC *this, JSC::ExpressionNode *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t result;

  v2 = **((_QWORD **)this + 4);
  if (*(_DWORD *)(v2 + 4))
  {
    v3 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      v4 = *v3;
    else
      v4 = *(unsigned __int16 *)v3;
    return (v4 - (_DWORD)a2);
  }
  else
  {
    result = 1161;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3JSC11OpSwitchImm16setDefaultOffsetILNS_10OpcodeSizeE4EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = *a2;
  if (!*a2)
  {
    v4 = *((_DWORD *)a2 + 4);
LABEL_3:
    *((_DWORD *)a2 + 1) = v4;
LABEL_8:
    *(_DWORD *)(v2 + 6) = v4;
    return result;
  }
  if (v3 == 1)
  {
    v5 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    *((_DWORD *)a2 + 1) = v5;
    v6 = *((_QWORD *)a2 + 2);
    v7 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v7 == *(_DWORD *)(v6 + 24))
    {
      result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 16, v7 + 1, (unint64_t)(a2 + 4));
      v4 = 0;
      *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * *(unsigned int *)(v6 + 28)) = *(_DWORD *)result;
    }
    else
    {
      v4 = 0;
      *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * v7) = v5;
    }
    ++*(_DWORD *)(v6 + 28);
    goto LABEL_8;
  }
  if (v3 == 2)
  {
    v4 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

_DWORD *_ZN3JSC11OpSwitchImm16setDefaultOffsetILNS_10OpcodeSizeE2EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_(_DWORD *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::UnlinkedCodeBlockGenerator *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned int v20;

  v9 = result;
  v10 = *a2;
  if (!*a2)
  {
    v11 = *((_DWORD *)a2 + 4);
    goto LABEL_3;
  }
  if (v10 != 1)
  {
    if (v10 != 2)
      goto LABEL_22;
    v11 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
LABEL_3:
    *((_DWORD *)a2 + 1) = v11;
    v12 = (unint64_t)(a2 + 4);
    if (v11 == (__int16)v11)
    {
      if (v10 != 1)
        goto LABEL_14;
      goto LABEL_8;
    }
    v15 = *(JSC::UnlinkedCodeBlockGenerator **)(*(_QWORD *)a3 + 24);
    v16 = **(_DWORD **)(a3 + 8);
    v17 = *(unsigned __int8 **)(a3 + 16);
    v18 = *v17;
    if (!*v17)
    {
      v19 = *((_DWORD *)v17 + 4);
LABEL_13:
      result = (_DWORD *)JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v15, v16, v19, a4, a5, a6, a7, a8);
      HIBYTE(v20) = 0;
      *a2 = 0;
      *(_OWORD *)(a2 + 1) = v20;
      *((_DWORD *)a2 + 4) = 0;
      v11 = *((_DWORD *)a2 + 1);
      goto LABEL_14;
    }
    if (v18 == 2)
    {
      v19 = *((_DWORD *)v17 + 4) - *(_DWORD *)(*((_QWORD *)v17 + 1) + 16);
      goto LABEL_13;
    }
    if (v18 == 1)
    {
      v19 = 0;
      goto LABEL_13;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x19828E720);
  }
  v11 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
  *((_DWORD *)a2 + 1) = v11;
  v12 = (unint64_t)(a2 + 4);
LABEL_8:
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(unsigned int *)(v13 + 28);
  if ((_DWORD)v14 == *(_DWORD *)(v13 + 24))
  {
    result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 16, v14 + 1, v12);
    LOWORD(v11) = 0;
    *(_DWORD *)(*(_QWORD *)(v13 + 16) + 4 * *(unsigned int *)(v13 + 28)) = *result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v13 + 16) + 4 * v14) = v11;
    LOWORD(v11) = 0;
  }
  ++*(_DWORD *)(v13 + 28);
LABEL_14:
  *((_WORD *)v9 + 2) = v11;
  return result;
}

uint64_t JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)4,std::integral_constant<BOOL,true>>::check(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(unsigned __int8 *)result;
  if (!*(_BYTE *)result)
  {
    v2 = *(_DWORD *)(result + 16);
LABEL_3:
    *(_DWORD *)(result + 4) = v2;
    return result;
  }
  if (v1 == 1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)(result + 8) + 16);
    goto LABEL_3;
  }
  if (v1 == 2)
  {
    v2 = *(_DWORD *)(result + 16) - *(_DWORD *)(*(_QWORD *)(result + 8) + 16);
    goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)4,std::integral_constant<BOOL,true>>::convert(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  if (*(_BYTE *)a1 != 1)
    return *(unsigned int *)(a1 + 4);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_DWORD *)(a1 + 4);
  v4 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 24))
  {
    v5 = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 16, v4 + 1, (unint64_t)v3);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * *(unsigned int *)(v2 + 28)) = *v5;
  }
  else
  {
    result = 0;
    *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v4) = *v3;
  }
  ++*(_DWORD *)(v2 + 28);
  return result;
}

uint64_t JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::check(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t result;

  v1 = *a1;
  if (!*a1)
  {
    v2 = *((_DWORD *)a1 + 4);
LABEL_3:
    v3 = v2;
LABEL_4:
    *((_DWORD *)a1 + 1) = v2;
    return v3 == (__int16)v3;
  }
  if (v1 == 1)
  {
    v3 = 0;
    v2 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 16);
    goto LABEL_4;
  }
  if (v1 == 2)
  {
    v2 = *((_DWORD *)a1 + 4) - *(_DWORD *)(*((_QWORD *)a1 + 1) + 16);
    goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert(uint64_t a1)
{
  int v1;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;

  if (*(_BYTE *)a1 == 1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = (int *)(a1 + 4);
    v5 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v5 == *(_DWORD *)(v3 + 24))
    {
      v8 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 16, v5 + 1, (unint64_t)v4);
      LOWORD(v1) = 0;
      v5 = *(unsigned int *)(v3 + 28);
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *v8;
    }
    else
    {
      LOWORD(v1) = 0;
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *v4;
    }
    *(_DWORD *)(v6 + 4 * v5) = v7;
    ++*(_DWORD *)(v3 + 28);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 4);
  }
  return (__int16)v1;
}

uint64_t JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)1,std::integral_constant<BOOL,true>>::check(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t result;

  v1 = *a1;
  if (!*a1)
  {
    v2 = *((_DWORD *)a1 + 4);
LABEL_3:
    v3 = v2;
LABEL_4:
    *((_DWORD *)a1 + 1) = v2;
    return v3 == (char)v3;
  }
  if (v1 == 1)
  {
    v3 = 0;
    v2 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 16);
    goto LABEL_4;
  }
  if (v1 == 2)
  {
    v2 = *((_DWORD *)a1 + 4) - *(_DWORD *)(*((_QWORD *)a1 + 1) + 16);
    goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)1,std::integral_constant<BOOL,true>>::convert(uint64_t a1)
{
  int v1;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;

  if (*(_BYTE *)a1 == 1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = (int *)(a1 + 4);
    v5 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v5 == *(_DWORD *)(v3 + 24))
    {
      v8 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 16, v5 + 1, (unint64_t)v4);
      LOBYTE(v1) = 0;
      v5 = *(unsigned int *)(v3 + 28);
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *v8;
    }
    else
    {
      LOBYTE(v1) = 0;
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *v4;
    }
    *(_DWORD *)(v6 + 4 * v5) = v7;
    ++*(_DWORD *)(v3 + 28);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 4);
  }
  return (char)v1;
}

uint64_t _ZN3JSC12OpSwitchChar16setDefaultOffsetILNS_10OpcodeSizeE2EZZNS_17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS4_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEELm8ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEPPNS_14ExpressionNodeERS9_iiENK3__0clIS0_S0_EEDaPT_T0_EUlvE_EEvNS_17GenericBoundLabelIS8_EEST_(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;

  v4 = result;
  v5 = *a2;
  if (!*a2)
  {
    v6 = *((_DWORD *)a2 + 4);
    goto LABEL_3;
  }
  if (v5 == 1)
  {
    *((_DWORD *)a2 + 1) = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    v7 = (int *)(a2 + 4);
    goto LABEL_9;
  }
  if (v5 == 2)
  {
    v6 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
LABEL_3:
    *((_DWORD *)a2 + 1) = v6;
    v7 = (int *)(a2 + 4);
    if (v6 != (__int16)v6)
    {
      result = _ZZZN3JSC17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS1_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEELm8ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPPNS_14ExpressionNodeERS6_iiENK3__0clINS_12OpSwitchCharESN_EEDaPT_T0_ENKUlvE_clEv((uint64_t)&v13, a3);
      *(_OWORD *)a2 = v13;
      *((_QWORD *)a2 + 2) = v14;
      v5 = *a2;
    }
    if (v5 != 1)
    {
      v8 = *v7;
LABEL_12:
      *(_WORD *)(v4 + 4) = v8;
      return result;
    }
LABEL_9:
    v9 = *((_QWORD *)a2 + 2);
    v10 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v10 == *(_DWORD *)(v9 + 24))
    {
      result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v10 + 1, (unint64_t)v7);
      LOWORD(v8) = 0;
      v10 = *(unsigned int *)(v9 + 28);
      v11 = *(_QWORD *)(v9 + 16);
      v12 = *(_DWORD *)result;
    }
    else
    {
      LOWORD(v8) = 0;
      v11 = *(_QWORD *)(v9 + 16);
      v12 = *v7;
    }
    *(_DWORD *)(v11 + 4 * v10) = v12;
    ++*(_DWORD *)(v9 + 28);
    goto LABEL_12;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t _ZZZN3JSC17BytecodeGenerator9endSwitchEjRKN3WTF6VectorINS1_3RefINS_12GenericLabelINS_17JSGeneratorTraitsEEENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEELm8ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPPNS_14ExpressionNodeERS6_iiENK3__0clINS_12OpSwitchCharESN_EEDaPT_T0_ENKUlvE_clEv(uint64_t a1, uint64_t a2)
{
  JSC::UnlinkedCodeBlockGenerator *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *(JSC::UnlinkedCodeBlockGenerator **)(*(_QWORD *)a2 + 24);
  v4 = **(_DWORD **)(a2 + 8);
  v5 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(*(unsigned __int8 **)(a2 + 16));
  result = JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(v3, v4, v5, v6, v7, v8, v9, v10);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  return result;
}

void WTF::RobinHoodHashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  void *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = (WTF *)(16 * a2);
  v7 = (void *)WTF::fastMalloc(v6);
  v15 = v7;
  if (a2)
    bzero(v7, (size_t)v6);
  *(_QWORD *)a1 = v15;
  *(_DWORD *)(a1 + 8) = a2;
  v16 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v18 >> 31) ^ v18;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v19 = (WTF::StringImpl **)v5;
    do
    {
      if (*v19)
      {
        WTF::RobinHoodHashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (uint64_t)v19, v9, v10, v11, v12, v13, v14);
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::~StringImpl(v20, v8, v9, v10, v11, v12, v13, v14);
            WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
          }
          else
          {
            *(_DWORD *)v20 -= 2;
          }
        }
      }
      else
      {
        *v19 = 0;
      }
      v19 += 2;
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return;
  }
  WTF::fastFree(v5, v8, v9, v10, v11, v12, v13, v14);
}

void WTF::RobinHoodHashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v10 = *((_DWORD *)a1 + 2);
  v11 = v10 - 1;
  v12 = *((_DWORD *)a1 + 4);
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v14 = v13 >> 8;
  v15 = (v14 ^ v12) & v11;
  v16 = *a1;
  v17 = (WTF::StringImpl **)(*a1 + 16 * v15);
  v18 = *v17;
  if (*v17)
  {
    v21 = 0;
    do
    {
      v22 = *((_DWORD *)v18 + 4);
      if (v22 < 0x100)
        v23 = WTF::StringImpl::hashSlowCase(v18);
      else
        v23 = v22 >> 8;
      v24 = (v15 + v10 - ((v23 ^ v12) & v11)) & v11;
      if (v21 > v24)
      {
        v26 = *(WTF::StringImpl **)a2;
        v25 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a2 = 0;
        v27 = *v17;
        *v17 = 0;
        v28 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            v58 = v25;
            WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
            v25 = v58;
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
        v29 = v16 + 16 * v15;
        v31 = *(_QWORD *)(v29 + 8);
        v30 = (_QWORD *)(v29 + 8);
        *(_QWORD *)(a2 + 8) = v31;
        v32 = *v17;
        *v17 = v26;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            v49 = v25;
            WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
            v25 = v49;
          }
          else
          {
            *(_DWORD *)v32 -= 2;
          }
        }
        *v30 = v25;
        v21 = v24;
      }
      v15 = ((_DWORD)v15 + 1) & v11;
      ++v21;
      v16 = *a1;
      v17 = (WTF::StringImpl **)(*a1 + 16 * v15);
      v18 = *v17;
    }
    while (*v17);
  }
  v19 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v20 = *v17;
  *v17 = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  *(_QWORD *)(v16 + 16 * v15 + 8) = *(_QWORD *)(a2 + 8);
}

_DWORD *JSC::TemplateObjectDescriptor::TemplateObjectDescriptor(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 1;
  v5 = (uint64_t)(a1 + 2);
  WTF::VectorBuffer<WTF::String,4ul,WTF::FastMalloc>::VectorBuffer((uint64_t)(a1 + 2), a2);
  WTF::VectorBuffer<std::optional<WTF::String>,4ul,WTF::FastMalloc>::VectorBuffer((uint64_t)(a1 + 14), a3, v6, v7, v8, v9, v10, v11);
  a1[34] = JSC::TemplateObjectDescriptor::calculateHash(v5);
  return a1;
}

uint64_t JSC::TemplateObjectDescriptor::calculateHash(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v13;
  unsigned __int16 v14;
  char v15;

  v13 = -1640531527;
  v14 = 0;
  v15 = 0;
  v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)a1;
    v3 = *(_QWORD *)a1 + 8 * v1;
    do
    {
      v4 = *v2;
      if (*v2)
      {
        v5 = *(unsigned __int16 **)(v4 + 8);
        v6 = *(_DWORD *)(v4 + 4);
        if ((*(_BYTE *)(v4 + 16) & 4) != 0)
        {
          if (v6)
          {
            if (v15)
            {
              v15 = 0;
              v11 = *(unsigned __int8 *)v5;
              v5 = (unsigned __int16 *)((char *)v5 + 1);
              v13 = ((v11 << 11) ^ ((v13 + v14) << 16) ^ (v13 + v14))
                  + (((v11 << 11) ^ ((v13 + v14) << 16) ^ (v13 + v14)) >> 11);
              --v6;
            }
            if (v6 >= 2)
            {
              v7 = v6 >> 1;
              v8 = v13;
              do
              {
                v9 = v8 + *(unsigned __int8 *)v5;
                v10 = (*((unsigned __int8 *)v5 + 1) << 11) ^ (v9 << 16);
                v8 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
                v13 = v8;
                ++v5;
                --v7;
              }
              while (v7);
            }
            if ((v6 & 1) != 0)
            {
              v14 = *(unsigned __int8 *)v5;
              v15 = 1;
            }
          }
        }
        else
        {
          WTF::SuperFastHash::addCharacters<char16_t,WTF::StringHasher::DefaultConverter>((uint64_t)&v13, v5, v6);
        }
      }
      ++v2;
    }
    while (v2 != (uint64_t *)v3);
  }
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v13);
}

uint64_t WTF::VectorBuffer<std::optional<WTF::String>,4ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  int v12;
  int v14;

  v10 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 4;
  v11 = *(WTF::AtomStringImpl **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    WTF::VectorMover<false,std::optional<WTF::String>>::move(v11, (WTF::AtomStringImpl *)((char *)v11 + 16 * *(unsigned int *)(a2 + 12)), v10, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)a1 = v11;
    v14 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 4;
    *(_DWORD *)(a1 + 8) = v14;
  }
  v12 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v12;
  return a1;
}

void WTF::VectorMover<false,std::optional<WTF::String>>::move(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v9 = a1;
    v10 = (_BYTE *)(a3 + 8);
    do
    {
      *(v10 - 8) = 0;
      *v10 = 0;
      if (*((_BYTE *)v9 + 8))
      {
        v11 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v10 - 1) = v11;
        *v10 = 1;
        if (*((_BYTE *)v9 + 8))
        {
          v12 = *(WTF::StringImpl **)v9;
          *(_QWORD *)v9 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
      }
      v9 = (WTF::AtomStringImpl *)((char *)v9 + 16);
      v10 += 16;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::SuperFastHash::hash(WTF::SuperFastHash *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD *)this;
  if (*((_BYTE *)this + 6))
    v1 = ((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11))
       + (((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11)) >> 17);
  v2 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v3 = (v2 ^ (4 * v2)) + ((v2 ^ (4 * v2)) >> 15);
  v4 = v3 ^ (v3 << 10);
  if (v4)
    return v4;
  else
    return 0x800000;
}

uint64_t WTF::SuperFastHash::addCharacters<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int16 *a2, unsigned int a3)
{
  int v3;
  int v4;

  if (a3)
  {
    if (*(_BYTE *)(result + 6))
    {
      *(_BYTE *)(result + 6) = 0;
      v3 = *a2++;
      v4 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)result = ((v3 << 11) ^ (v4 << 16) ^ v4) + (((v3 << 11) ^ (v4 << 16) ^ v4) >> 11);
      --a3;
    }
    return WTF::SuperFastHash::addCharactersAssumingAligned<char16_t,WTF::StringHasher::DefaultConverter>(result, a2, a3);
  }
  return result;
}

uint64_t WTF::SuperFastHash::addCharactersAssumingAligned<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v9;
  int v10;

  if (a3 >= 2)
  {
    v3 = a3 >> 1;
    v4 = *(_DWORD *)result;
    v5 = a2;
    do
    {
      v6 = v4 + *v5;
      v7 = (v6 << 16) ^ (v5[1] << 11);
      v4 = (v7 ^ v6) + ((v7 ^ v6) >> 11);
      v5 += 2;
      --v3;
    }
    while (v3);
    a2 += 2 * (a3 >> 1);
    *(_DWORD *)result = v4;
  }
  if ((a3 & 1) != 0)
  {
    v8 = *a2;
    if (*(_BYTE *)(result + 6))
    {
      v9 = 0;
      v10 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)result = ((v8 << 11) ^ (v10 << 16) ^ v10) + (((v8 << 11) ^ (v10 << 16) ^ v10) >> 11);
    }
    else
    {
      *(_WORD *)(result + 4) = v8;
      v9 = 1;
    }
    *(_BYTE *)(result + 6) = v9;
  }
  return result;
}

_QWORD *WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FinallyJump>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;

  result = (_QWORD *)WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  *v4 = *result;
  v5 = result[1];
  result[1] = 0;
  v4[1] = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::FinallyJump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = (_QWORD *)v4;
        do
        {
          *v6 = *v14;
          v15 = v14[1];
          v14[1] = 0;
          v6[1] = v15;
          v16 = (_DWORD *)v14[1];
          v14[1] = 0;
          if (v16)
            --*v16;
          v14 += 2;
          v6 += 2;
        }
        while (v14 != (_QWORD *)(v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t JSC::JSCell::pureToBoolean(JSC::JSCell *this)
{
  int v1;
  uint64_t v2;
  int *v3;
  int v4;

  v1 = *((unsigned __int8 *)this + 5);
  switch(v1)
  {
    case 3:
      v4 = *((_DWORD *)this + 2);
      return v4 != 0;
    case 2:
      v2 = *((_QWORD *)this + 1);
      if ((v2 & 1) != 0)
        v3 = (int *)((char *)this + 16);
      else
        v3 = (int *)(v2 + 4);
      v4 = *v3;
      return v4 != 0;
    case 4:
      return 1;
    default:
      return 2;
  }
}

unint64_t JSC::JSImmutableButterfly::create(JSC::JSImmutableButterfly *this, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t SlowCase;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = (a2 >> 1) & 7;
  if ((a2 & 0x10) != 0)
    v8 = ((a2 & 0xEu) + 10) >> 1;
  if (a3 > 0x10000000)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x19828F55CLL);
  }
  v11 = *((_QWORD *)this + v8 + 5198);
  v12 = 8 * a3;
  v13 = (v12 + 31) & 0xFFFFFFFF0;
  if (v13 <= 0x1F60 && (v14 = *(_QWORD *)((char *)this + (((v12 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
  {
    v15 = *(unsigned int *)(v14 + 60);
    v16 = *(_QWORD *)(v14 + 24);
    if (v16 < *(_QWORD *)(v14 + 32))
    {
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_8;
    }
    v16 = *(_QWORD *)(v14 + 40);
    if ((v16 & 1) == 0)
    {
      v20 = *(_QWORD *)(v16 + 8) ^ *(_QWORD *)(v14 + 48);
      *(_QWORD *)(v14 + 32) = v16 + HIDWORD(v20);
      *(_QWORD *)(v14 + 40) = v16 + (int)v20;
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_9;
    }
    v21 = v11;
    v22 = *(_QWORD *)((char *)this + (((v12 + 31) >> 1) & 0x7FFFFFFF8) + 10880);
    JSC::sanitizeStackForVM(this, a2, v13, a4, a5, a6, a7, a8);
    v23 = v22;
    v11 = v21;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v23, (char *)this + 192, v15, 0, 1);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 10792, this, v13, 0, a5, a6, a7, a8);
  }
  v16 = SlowCase;
LABEL_8:
  if (!v16)
    goto LABEL_17;
LABEL_9:
  *(_DWORD *)v16 = 0;
  v17 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)v16 = v11 >> 4;
  *(_DWORD *)(v16 + 4) = v17;
  *(_DWORD *)(v16 + 8) = a3;
  *(_DWORD *)(v16 + 12) = a3;
  if (a3 && (*(_BYTE *)(v16 + 4) & 0xE) == 8)
    bzero((void *)(v16 + 16), v12);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v16;
}

void WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(JSC::TemplateObjectDescriptor *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)a1 == 1)
  {
    JSC::TemplateObjectDescriptor::~TemplateObjectDescriptor(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::AtomStringImpl *v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorTypeOperations<std::optional<WTF::String>>::destruct(*(WTF::AtomStringImpl **)a1, (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 16 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(WTF::AtomStringImpl **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<std::optional<WTF::String>>::destruct(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      if (*((_BYTE *)v9 + 8))
      {
        v10 = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
          }
          else
          {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      v9 = (WTF::AtomStringImpl *)((char *)v9 + 16);
    }
    while (v9 != a2);
  }
}

_DWORD **WTF::Vector<JSC::Identifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t JSC::OpStricteq::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = a3;
  v11 = a4;
  result = JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, v11, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, v11, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 128) < 0x90;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x92, a3, a4, a5, a6, a7, a8);
  v39 = -110;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -110;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v39);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v35;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -110;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v21 = a2;
  v40 = v21;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v40);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v36;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  v41 = v26;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v41);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      v26 = *v37;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  v31 = v12 + 16;
  if (v12 <= 0x3FFFFFFF)
    v31 = v12;
  v42 = v31;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v31;
  }
  else
  {
    v32 = v29;
    if (v29 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v42);
      v32 = *(unsigned int *)(a1 + 12);
      v33 = *(_QWORD *)a1;
      v31 = *v38;
    }
    else
    {
      v33 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v33 + v32) = v31;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x92, a3, a4, a5, a6, a7, a8);
  v51 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v51);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v46;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -110;
  v52 = -110;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -110;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v52);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v47;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v53 = v8;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v53);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v8 >> 8;
  v54 = BYTE1(v8);
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v54);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      LOBYTE(v28) = *v48;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v55 = v10;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v55);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  v35 = v10 >> 8;
  v56 = BYTE1(v10);
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v10);
    v38 = *(_DWORD *)(a1 + 12);
    v39 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v36 = v33;
    if (v33 == *(_DWORD *)(a1 + 8))
    {
      v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v56);
      v36 = *(unsigned int *)(a1 + 12);
      v37 = *(_QWORD *)a1;
      LOBYTE(v35) = *v49;
    }
    else
    {
      v37 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v37 + v36) = v35;
    v38 = *(_DWORD *)(a1 + 12) + 1;
    v39 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v38;
    *(_DWORD *)(a1 + 16) = v39;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v57 = v12;
  if (v38 > v39)
  {
    *(_DWORD *)(a1 + 16) = v39 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v38 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v57);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v12;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  v42 = v12 >> 8;
  v58 = BYTE1(v12);
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v12);
  }
  else
  {
    v43 = v40;
    if (v40 == *(_DWORD *)(a1 + 8))
    {
      v50 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v58);
      v43 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      LOBYTE(v42) = *v50;
    }
    else
    {
      v44 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v44 + v43) = v42;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x92, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -110;
  v25 = -110;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -110;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCatch::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xF, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 15);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCatch::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xF, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 15;
  v25 = 15;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 15;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl ***v12;
  uint64_t v13;
  JSC::TDZEnvironmentLink *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(WTF::StringImpl ****)a1;
    v13 = *(_QWORD *)a1 + 16 * v9;
    do
    {
      v14 = (JSC::TDZEnvironmentLink *)v12[1];
      v12[1] = 0;
      if (v14)
        WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v14);
      v15 = *v12;
      if (*v12)
      {
        v16 = *((unsigned int *)v15 - 1);
        if ((_DWORD)v16)
        {
          v17 = *v12;
          do
          {
            v18 = *v17;
            if (*v17 != (WTF::StringImpl *)-1)
            {
              *v17 = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2)
                {
                  WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
                }
                else
                {
                  *(_DWORD *)v18 -= 2;
                }
              }
            }
            v17 += 2;
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((unint64_t)(v15 - 2), a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 2;
    }
    while (v12 != (WTF::StringImpl ***)v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>>::destruct(WTF::StringImpl ***a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != (WTF::StringImpl ***)a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *((unsigned int *)v10 - 1);
        if ((_DWORD)v11)
        {
          v12 = *v9;
          do
          {
            v13 = *v12;
            if (*v12 != (WTF::StringImpl *)-1)
            {
              *v12 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                {
                  WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
                }
                else
                {
                  *(_DWORD *)v13 -= 2;
                }
              }
            }
            v12 += 2;
            --v11;
          }
          while (v11);
        }
        WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
      }
      ++v9;
    }
    while (v9 != (WTF::StringImpl ***)a2);
  }
}

__n128 WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 16 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 16 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::ScopedLambdaFunctor<BOOL ()(WTF::UniquedStringImpl *),JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &,JSC::FunctionNode *,JSC::UnlinkedFunctionCodeBlock *,WTF::OptionSet<JSC::CodeGenerationMode>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>> const&,WTF::FixedVector<JSC::Identifier> const*,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits> const*)::$_0>::implFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (!**(_BYTE **)(a1 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(v2 + 711) & 2) == 0 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 696) + 41952) + 880) != a2)
  {
    v3 = **(_QWORD **)(a1 + 32);
    if (!*(_BYTE *)(v3 + 200))
    {
      v4 = *(_QWORD *)(v3 + 192);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 - 8);
        v6 = *(_DWORD *)(a2 + 16);
        if ((v6 & 0x20) != 0)
          v6 = *(_DWORD *)(a2 + 32);
        v7 = v5 & (v6 >> 8);
        v8 = *(_QWORD *)(v4 + 16 * v7);
        if (v8 != a2)
        {
          v9 = 1;
          while (v8)
          {
            v7 = ((_DWORD)v7 + v9) & v5;
            v8 = *(_QWORD *)(v4 + 16 * v7);
            ++v9;
            if (v8 == a2)
              goto LABEL_12;
          }
          v7 = *(unsigned int *)(v4 - 4);
        }
LABEL_12:
        if (v7 != *(_DWORD *)(v4 - 4))
          return *(_WORD *)(v4 + 16 * v7 + 8) & 1;
      }
      return 0;
    }
  }
  return 1;
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry&>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl **v30;
  int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a1, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *(WTF::StringImpl **)a2;
  v17 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v17 & 0x20) != 0)
    v17 = *((_DWORD *)v16 + 8);
  v18 = v15 & (v17 >> 8);
  v19 = (WTF::StringImpl **)(v13 + 16 * v18);
  v20 = *v19;
  if (*v19)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v20 == v16)
      {
        if ((v14 & 1) != 0)
          v40 = 0;
        else
          v40 = *(unsigned int *)(v13 - 4);
        *(_QWORD *)a9 = v19;
        *(_QWORD *)(a9 + 8) = v13 + 16 * v40;
        *(_BYTE *)(a9 + 16) = 0;
        JSC::SymbolTableEntry::operator=((JSC::SymbolTableEntry *)(v19 + 1), a3, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      }
      if (v20 == (WTF::StringImpl *)-1)
        v30 = v19;
      v18 = (v18 + v31) & v15;
      v19 = (WTF::StringImpl **)(v13 + 16 * v18);
      v20 = *v19;
      ++v31;
    }
    while (*v19);
    if (v30)
    {
      *v30 = 0;
      v30[1] = (WTF::StringImpl *)1;
      --*(_DWORD *)(*a1 - 16);
      v16 = *(WTF::StringImpl **)a2;
      v19 = v30;
    }
  }
  *(_QWORD *)a2 = 0;
  v21 = *v19;
  *v19 = v16;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = v19 + 1;
  v23 = *a3;
  if ((*a3 & 1) != 0)
  {
    if ((*v22 & 1) == 0)
    {
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)(v19 + 1), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *a3;
    }
    *(_QWORD *)v22 = v23;
  }
  else
  {
    JSC::SymbolTableEntry::copySlow((unint64_t *)v19 + 1, (_QWORD **)a3);
  }
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_19;
LABEL_31:
    v19 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a1, v19);
    v26 = *a1;
    if (*a1)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_19;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_31;
LABEL_19:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v26 + 16 * v29;
  *(_BYTE *)(a9 + 16) = 1;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v5, a2);
}

uint64_t JSC::OpCreateScopedArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x86, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -122;
  v42 = -122;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -122;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpCreateScopedArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x86, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -122;
  v24 = -122;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -122;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpCreateDirectArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  _BYTE *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x85, a3, a4, a5, a6, a7, a8);
    v31 = 0x80;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0x80;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v31);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v28;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 0x80;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = -123;
    v32 = -123;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -123;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v29;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v33 = v8;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v20 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v33);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v8;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = v8 >> 8;
    v34 = BYTE1(v8);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = BYTE1(v8);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v30 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        LOBYTE(v24) = *v30;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpCreateDirectArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x85, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = -123;
  v23 = -123;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -123;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

BOOL JSC::OpCreateClonedArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  _BYTE *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x87, a3, a4, a5, a6, a7, a8);
    v31 = 0x80;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0x80;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v31);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v28;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 0x80;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = -121;
    v32 = -121;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -121;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v29;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v33 = v8;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v20 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v33);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v8;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = v8 >> 8;
    v34 = BYTE1(v8);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = BYTE1(v8);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v30 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        LOBYTE(v24) = *v30;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpCreateClonedArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x87, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = -121;
  v23 = -121;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -121;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

uint64_t JSC::OpCreateGeneratorFrameEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v15)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6E, a3, a4, a5, a6, a7, a8);
  v61 = 0x80;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v61);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v55;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = 0x80;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = 110;
  v62 = 110;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = 110;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v62);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v56;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v63 = v8;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v26 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v63);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v28 = *(_DWORD *)(a1 + 12) + 1;
    v29 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v28;
    *(_DWORD *)(a1 + 16) = v29;
  }
  v30 = v8 >> 8;
  v64 = BYTE1(v8);
  if (v28 > v29)
  {
    *(_DWORD *)(a1 + 16) = v29 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v31 = v28;
    if (v28 == *(_DWORD *)(a1 + 8))
    {
      v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v64);
      v31 = *(unsigned int *)(a1 + 12);
      v32 = *(_QWORD *)a1;
      LOBYTE(v30) = *v57;
    }
    else
    {
      v32 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v32 + v31) = v30;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v65 = v10;
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
    v35 = *(_DWORD *)(a1 + 12);
    v36 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v33 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v65);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v35 = *(_DWORD *)(a1 + 12) + 1;
    v36 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v35;
    *(_DWORD *)(a1 + 16) = v36;
  }
  v37 = v10 >> 8;
  v66 = BYTE1(v10);
  if (v35 > v36)
  {
    *(_DWORD *)(a1 + 16) = v36 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v38 = v35;
    if (v35 == *(_DWORD *)(a1 + 8))
    {
      v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v66);
      v38 = *(unsigned int *)(a1 + 12);
      v39 = *(_QWORD *)a1;
      LOBYTE(v37) = *v58;
    }
    else
    {
      v39 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v39 + v38) = v37;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v67 = v12;
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = v12;
    v42 = *(_DWORD *)(a1 + 12);
    v43 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v40 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v67);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v12;
    v42 = *(_DWORD *)(a1 + 12) + 1;
    v43 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v42;
    *(_DWORD *)(a1 + 16) = v43;
  }
  v44 = v12 >> 8;
  v68 = BYTE1(v12);
  if (v42 > v43)
  {
    *(_DWORD *)(a1 + 16) = v43 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v12);
    v47 = *(_DWORD *)(a1 + 12);
    v48 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v45 = v42;
    if (v42 == *(_DWORD *)(a1 + 8))
    {
      v59 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v68);
      v45 = *(unsigned int *)(a1 + 12);
      v46 = *(_QWORD *)a1;
      LOBYTE(v44) = *v59;
    }
    else
    {
      v46 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v46 + v45) = v44;
    v47 = *(_DWORD *)(a1 + 12) + 1;
    v48 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v47;
    *(_DWORD *)(a1 + 16) = v48;
  }
  if (v14 > 0x3FFFFFFF)
    v14 += 64;
  v69 = v14;
  if (v47 > v48)
  {
    *(_DWORD *)(a1 + 16) = v48 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v48) = v14;
    v49 = *(_DWORD *)(a1 + 12);
    v50 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v47 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v69);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v47) = v14;
    v49 = *(_DWORD *)(a1 + 12) + 1;
    v50 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v49;
    *(_DWORD *)(a1 + 16) = v50;
  }
  v51 = v14 >> 8;
  v70 = BYTE1(v14);
  if (v49 > v50)
  {
    *(_DWORD *)(a1 + 16) = v50 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v50) = BYTE1(v14);
  }
  else
  {
    v52 = v49;
    if (v49 == *(_DWORD *)(a1 + 8))
    {
      v60 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v70);
      v52 = *(unsigned int *)(a1 + 12);
      v53 = *(_QWORD *)a1;
      LOBYTE(v51) = *v60;
    }
    else
    {
      v53 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v53 + v52) = v51;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpCreateGeneratorFrameEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6E, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 110;
  v26 = 110;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 110;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t *WTF::Vector<JSC::Identifier,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void JSC::SymbolTable::add<JSC::SymbolTableEntry>(uint64_t a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (*(_QWORD *)(a1 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x198291D48);
  }
  v10 = (unint64_t *)*a4;
  if ((*a4 & 1) != 0)
    v10 = (unint64_t *)a4;
  v11 = *v10;
  if ((v11 & 0x30) <= 0x10)
  {
    v12 = v11 >> 6;
    v13 = *(_DWORD *)(a1 + 16);
    if (v13 == -1 || v13 < v12)
      *(_DWORD *)(a1 + 16) = v12;
  }
  v15 = (uint64_t *)(a1 + 8);
  if (this)
    *(_DWORD *)this += 2;
  v16 = *v15;
  if (*v15
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 8), 8u, 0), (v16 = *v15) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = *((_DWORD *)this + 4);
  if ((v18 & 0x20) != 0)
    v18 = *((_DWORD *)this + 8);
  v19 = v17 & (v18 >> 8);
  v20 = v16 + 16 * v19;
  v21 = *(WTF::StringImpl **)v20;
  if (*(_QWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == this)
      {
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            WTF::StringImpl::~StringImpl(this, a2, v22, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          }
          else
          {
            *(_DWORD *)this -= 2;
          }
        }
        return;
      }
      if (v21 == (WTF::StringImpl *)-1)
        v22 = v20;
      v19 = (v19 + v23) & v17;
      v20 = v16 + 16 * v19;
      v21 = *(WTF::StringImpl **)v20;
      ++v23;
    }
    while (*(_QWORD *)v20);
    if (!v22)
      goto LABEL_23;
    v24 = 1;
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 1;
    --*(_DWORD *)(*v15 - 16);
    *(_QWORD *)v22 = this;
  }
  else
  {
LABEL_23:
    *(_QWORD *)v20 = this;
    v24 = *(_QWORD *)(v20 + 8);
    v22 = v20;
  }
  *(_QWORD *)(v22 + 8) = *a4;
  *a4 = v24;
  v25 = *v15;
  if (*v15)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v15;
  if (*v15)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 <= 0x400)
  {
    if (3 * v30 > 4 * v29)
      return;
    if (!(_DWORD)v30)
    {
      v31 = 8;
      goto LABEL_39;
    }
LABEL_34:
    v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_39:
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v15, v31, (WTF::StringImpl **)v22);
    return;
  }
  if (v30 <= 2 * v29)
    goto LABEL_34;
}

__n128 WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeGenerator::LexicalScopeStackEntry>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ArrayPatternNode::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 24 * v9);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

char *WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[16 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
      if (!(v10 >> 28))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(16 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 16 * v6);
        v19 = *a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *a1;
        }
        return &v19[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x198292044);
    }
  }
  v20 = *((unsigned int *)a1 + 2);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 28)
      goto LABEL_30;
    v24 = *((unsigned int *)a1 + 3);
    v25 = (char *)WTF::fastMalloc((WTF *)(16 * v23));
    *((_DWORD *)a1 + 2) = v23;
    *a1 = v25;
    memcpy(v25, v5, 16 * v24);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (char *)v3;
}

uint64_t JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  int *v26;
  char v27;
  char v28;

  v10 = *a2;
  if (!*a2)
  {
    v11 = *((_DWORD *)a2 + 4);
LABEL_3:
    *((_DWORD *)a2 + 1) = v11;
    if (v11 != (char)v11)
      return 0;
    goto LABEL_7;
  }
  if (v10 != 1)
  {
    if (v10 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v11 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    goto LABEL_3;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
LABEL_7:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x43, a3, a4, a5, a6, a7, a8);
  v27 = 67;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 67;
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v25;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 67;
    }
    *(_BYTE *)(v15 + v13) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a2 == 1)
  {
    v20 = *((_QWORD *)a2 + 2);
    v21 = (int *)(a2 + 4);
    v22 = *(unsigned int *)(v20 + 28);
    if ((_DWORD)v22 == *(_DWORD *)(v20 + 24))
    {
      v26 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20 + 16, v22 + 1, (unint64_t)v21);
      LOBYTE(v17) = 0;
      v22 = *(unsigned int *)(v20 + 28);
      v23 = *(_QWORD *)(v20 + 16);
      v24 = *v26;
    }
    else
    {
      LOBYTE(v17) = 0;
      v23 = *(_QWORD *)(v20 + 16);
      v24 = *v21;
    }
    *(_DWORD *)(v23 + 4 * v22) = v24;
    ++*(_DWORD *)(v20 + 28);
  }
  else
  {
    v17 = *((_DWORD *)a2 + 1);
  }
  v28 = v17;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v17;
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v28);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t result;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  int *v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v10 = *a2;
  if (!*a2)
  {
    v11 = *((_DWORD *)a2 + 4);
LABEL_3:
    *((_DWORD *)a2 + 1) = v11;
    if (v11 != (__int16)v11)
      return 0;
    goto LABEL_4;
  }
  if (v10 != 1)
  {
    if (v10 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v11 = *((_DWORD *)a2 + 4) - *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
    goto LABEL_3;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(*((_QWORD *)a2 + 1) + 16);
LABEL_4:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x43, a3, a4, a5, a6, a7, a8);
  v36 = 0x80;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = 0x80;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v36);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v33;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = 0x80;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 67;
  v37 = 67;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 67;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v37);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v34;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a2 == 1)
  {
    v28 = *((_QWORD *)a2 + 2);
    v29 = (int *)(a2 + 4);
    v30 = *(unsigned int *)(v28 + 28);
    if ((_DWORD)v30 == *(_DWORD *)(v28 + 24))
    {
      v35 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 16, v30 + 1, (unint64_t)v29);
      LOBYTE(v21) = 0;
      LOBYTE(v22) = 0;
      v30 = *(unsigned int *)(v28 + 28);
      v31 = *(_QWORD *)(v28 + 16);
      v32 = *v35;
    }
    else
    {
      LOBYTE(v21) = 0;
      LOBYTE(v22) = 0;
      v31 = *(_QWORD *)(v28 + 16);
      v32 = *v29;
    }
    *(_DWORD *)(v31 + 4 * v30) = v32;
    ++*(_DWORD *)(v28 + 28);
  }
  else
  {
    v21 = *((_DWORD *)a2 + 1);
    v22 = v21 >> 8;
  }
  v38 = v21;
  v23 = *(unsigned int *)(a1 + 12);
  v24 = *(unsigned int *)(a1 + 16);
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = v21;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v38);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v21;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v39 = v22;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v22;
  }
  else
  {
    if (v25 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v39);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)4,std::integral_constant<BOOL,true>>::check(a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x43, v4, v5, v6, v7, v8, v9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 130);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 67);
  v10 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)4,std::integral_constant<BOOL,true>>::convert(a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
}

uint64_t JSC::OpJless::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)4,std::integral_constant<BOOL,true>>::check(a4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4F, v8, v9, v10, v11, v12, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 130);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 79);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a3);
  v14 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)4,std::integral_constant<BOOL,true>>::convert(a4);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
}

uint64_t JSC::OpJlesseq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x50, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 80;
  v34 = 80;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 80;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJgreater::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x51, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 81;
  v34 = 81;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 81;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJgreatereq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x52, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 82);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, unsigned __int8 *a3)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v3 = (a1 + 0x8000) >> 6 < 0x201;
  if (!v3)
    return 0;
  v4 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 0x8000) >> 6 < 0x201;
  if (v4)
    return JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::check(a3);
  else
    return 0;
}

uint64_t JSC::OpJgreatereq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x52, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 82;
  v34 = 82;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 82;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJeq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (char)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4B, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = 75;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 75;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v43);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v39;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 75;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  v44 = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v44);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v40;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v45 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v41;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v34 = *((_QWORD *)a4 + 2);
    v35 = (int *)(a4 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v42 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v30) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v42;
    }
    else
    {
      LOBYTE(v30) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a4 + 1);
  }
  v46 = v30;
  v31 = *(unsigned int *)(a1 + 12);
  v32 = *(unsigned int *)(a1 + 16);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v30;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJeq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4B, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 75);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJeq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4B, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 75;
  v34 = 75;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 75;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (char)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4C, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = 76;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 76;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v43);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v39;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 76;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  v44 = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v44);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v40;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v45 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v41;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v34 = *((_QWORD *)a4 + 2);
    v35 = (int *)(a4 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v42 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v30) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v42;
    }
    else
    {
      LOBYTE(v30) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a4 + 1);
  }
  v46 = v30;
  v31 = *(unsigned int *)(a1 + 12);
  v32 = *(unsigned int *)(a1 + 16);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v30;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t result;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  _BYTE *v54;
  int *v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (__int16)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4C, a3, (uint64_t)a4, a5, a6, a7, a8);
  v56 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v51 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v56);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v51;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 76;
  v57 = 76;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 76;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v52 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v57);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v52;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v58 = v8;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v27 = *(_DWORD *)(a1 + 12);
    v28 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v25 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v58);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v27 = *(_DWORD *)(a1 + 12) + 1;
    v28 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v27;
    *(_DWORD *)(a1 + 16) = v28;
  }
  v29 = v8 >> 8;
  v59 = BYTE1(v8);
  if (v27 > v28)
  {
    *(_DWORD *)(a1 + 16) = v28 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v8);
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v30 = v27;
    if (v27 == *(_DWORD *)(a1 + 8))
    {
      v53 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v59);
      v30 = *(unsigned int *)(a1 + 12);
      v31 = *(_QWORD *)a1;
      LOBYTE(v29) = *v53;
    }
    else
    {
      v31 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v31 + v30) = v29;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v60 = v10;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v34 = *(_DWORD *)(a1 + 12);
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v32 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v60);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v34 = *(_DWORD *)(a1 + 12) + 1;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v34;
    *(_DWORD *)(a1 + 16) = v35;
  }
  v36 = v10 >> 8;
  v61 = BYTE1(v10);
  if (v34 > v35)
  {
    *(_DWORD *)(a1 + 16) = v35 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v35) = BYTE1(v10);
  }
  else
  {
    v37 = v34;
    if (v34 == *(_DWORD *)(a1 + 8))
    {
      v54 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v61);
      v37 = *(unsigned int *)(a1 + 12);
      v38 = *(_QWORD *)a1;
      LOBYTE(v36) = *v54;
    }
    else
    {
      v38 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v38 + v37) = v36;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v46 = *((_QWORD *)a4 + 2);
    v47 = (int *)(a4 + 4);
    v48 = *(unsigned int *)(v46 + 28);
    if ((_DWORD)v48 == *(_DWORD *)(v46 + 24))
    {
      v55 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46 + 16, v48 + 1, (unint64_t)v47);
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v48 = *(unsigned int *)(v46 + 28);
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *v55;
    }
    else
    {
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *v47;
    }
    *(_DWORD *)(v49 + 4 * v48) = v50;
    ++*(_DWORD *)(v46 + 28);
  }
  else
  {
    v39 = *((_DWORD *)a4 + 1);
    v40 = v39 >> 8;
  }
  v62 = v39;
  v41 = *(unsigned int *)(a1 + 12);
  v42 = *(unsigned int *)(a1 + 16);
  if (v41 > v42)
  {
    *(_DWORD *)(a1 + 16) = v42 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v42) = v39;
    v43 = *(_DWORD *)(a1 + 12);
    v44 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v41 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v62);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v39;
    v43 = *(_DWORD *)(a1 + 12) + 1;
    v44 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v43;
    *(_DWORD *)(a1 + 16) = v44;
  }
  v63 = v40;
  if (v43 > v44)
  {
    *(_DWORD *)(a1 + 16) = v44 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v44) = v40;
  }
  else
  {
    if (v43 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v63);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v40;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4C, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 76;
  v34 = 76;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 76;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJneq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (char)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4D, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = 77;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 77;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v43);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v39;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 77;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  v44 = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v44);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v40;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v45 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v41;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v34 = *((_QWORD *)a4 + 2);
    v35 = (int *)(a4 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v42 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v30) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v42;
    }
    else
    {
      LOBYTE(v30) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a4 + 1);
  }
  v46 = v30;
  v31 = *(unsigned int *)(a1 + 12);
  v32 = *(unsigned int *)(a1 + 16);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v30;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJneq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t result;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  _BYTE *v54;
  int *v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (__int16)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4D, a3, (uint64_t)a4, a5, a6, a7, a8);
  v56 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v51 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v56);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v51;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 77;
  v57 = 77;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 77;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v52 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v57);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v52;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v58 = v8;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v27 = *(_DWORD *)(a1 + 12);
    v28 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v25 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v58);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v27 = *(_DWORD *)(a1 + 12) + 1;
    v28 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v27;
    *(_DWORD *)(a1 + 16) = v28;
  }
  v29 = v8 >> 8;
  v59 = BYTE1(v8);
  if (v27 > v28)
  {
    *(_DWORD *)(a1 + 16) = v28 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v8);
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v30 = v27;
    if (v27 == *(_DWORD *)(a1 + 8))
    {
      v53 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v59);
      v30 = *(unsigned int *)(a1 + 12);
      v31 = *(_QWORD *)a1;
      LOBYTE(v29) = *v53;
    }
    else
    {
      v31 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v31 + v30) = v29;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v60 = v10;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v34 = *(_DWORD *)(a1 + 12);
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v32 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v60);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v34 = *(_DWORD *)(a1 + 12) + 1;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v34;
    *(_DWORD *)(a1 + 16) = v35;
  }
  v36 = v10 >> 8;
  v61 = BYTE1(v10);
  if (v34 > v35)
  {
    *(_DWORD *)(a1 + 16) = v35 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v35) = BYTE1(v10);
  }
  else
  {
    v37 = v34;
    if (v34 == *(_DWORD *)(a1 + 8))
    {
      v54 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v61);
      v37 = *(unsigned int *)(a1 + 12);
      v38 = *(_QWORD *)a1;
      LOBYTE(v36) = *v54;
    }
    else
    {
      v38 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v38 + v37) = v36;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v46 = *((_QWORD *)a4 + 2);
    v47 = (int *)(a4 + 4);
    v48 = *(unsigned int *)(v46 + 28);
    if ((_DWORD)v48 == *(_DWORD *)(v46 + 24))
    {
      v55 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46 + 16, v48 + 1, (unint64_t)v47);
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v48 = *(unsigned int *)(v46 + 28);
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *v55;
    }
    else
    {
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *v47;
    }
    *(_DWORD *)(v49 + 4 * v48) = v50;
    ++*(_DWORD *)(v46 + 28);
  }
  else
  {
    v39 = *((_DWORD *)a4 + 1);
    v40 = v39 >> 8;
  }
  v62 = v39;
  v41 = *(unsigned int *)(a1 + 12);
  v42 = *(unsigned int *)(a1 + 16);
  if (v41 > v42)
  {
    *(_DWORD *)(a1 + 16) = v42 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v42) = v39;
    v43 = *(_DWORD *)(a1 + 12);
    v44 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v41 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v62);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v39;
    v43 = *(_DWORD *)(a1 + 12) + 1;
    v44 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v43;
    *(_DWORD *)(a1 + 16) = v44;
  }
  v63 = v40;
  if (v43 > v44)
  {
    *(_DWORD *)(a1 + 16) = v44 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v44) = v40;
  }
  else
  {
    if (v43 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v63);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v40;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJneq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4D, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 77;
  v34 = 77;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 77;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (char)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4E, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = 78;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 78;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v43);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v39;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 78;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  v44 = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v44);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v40;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v45 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v41;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v34 = *((_QWORD *)a4 + 2);
    v35 = (int *)(a4 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v42 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v30) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v42;
    }
    else
    {
      LOBYTE(v30) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a4 + 1);
  }
  v46 = v30;
  v31 = *(unsigned int *)(a1 + 12);
  v32 = *(unsigned int *)(a1 + 16);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v30;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t result;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  _BYTE *v54;
  int *v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (__int16)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4E, a3, (uint64_t)a4, a5, a6, a7, a8);
  v56 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v51 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v56);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v51;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 78;
  v57 = 78;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 78;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v52 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v57);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v52;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v58 = v8;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v27 = *(_DWORD *)(a1 + 12);
    v28 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v25 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v58);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v27 = *(_DWORD *)(a1 + 12) + 1;
    v28 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v27;
    *(_DWORD *)(a1 + 16) = v28;
  }
  v29 = v8 >> 8;
  v59 = BYTE1(v8);
  if (v27 > v28)
  {
    *(_DWORD *)(a1 + 16) = v28 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v8);
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v30 = v27;
    if (v27 == *(_DWORD *)(a1 + 8))
    {
      v53 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v59);
      v30 = *(unsigned int *)(a1 + 12);
      v31 = *(_QWORD *)a1;
      LOBYTE(v29) = *v53;
    }
    else
    {
      v31 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v31 + v30) = v29;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v60 = v10;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v34 = *(_DWORD *)(a1 + 12);
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v32 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v60);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v34 = *(_DWORD *)(a1 + 12) + 1;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v34;
    *(_DWORD *)(a1 + 16) = v35;
  }
  v36 = v10 >> 8;
  v61 = BYTE1(v10);
  if (v34 > v35)
  {
    *(_DWORD *)(a1 + 16) = v35 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v35) = BYTE1(v10);
  }
  else
  {
    v37 = v34;
    if (v34 == *(_DWORD *)(a1 + 8))
    {
      v54 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v61);
      v37 = *(unsigned int *)(a1 + 12);
      v38 = *(_QWORD *)a1;
      LOBYTE(v36) = *v54;
    }
    else
    {
      v38 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v38 + v37) = v36;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v46 = *((_QWORD *)a4 + 2);
    v47 = (int *)(a4 + 4);
    v48 = *(unsigned int *)(v46 + 28);
    if ((_DWORD)v48 == *(_DWORD *)(v46 + 24))
    {
      v55 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46 + 16, v48 + 1, (unint64_t)v47);
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v48 = *(unsigned int *)(v46 + 28);
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *v55;
    }
    else
    {
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *v47;
    }
    *(_DWORD *)(v49 + 4 * v48) = v50;
    ++*(_DWORD *)(v46 + 28);
  }
  else
  {
    v39 = *((_DWORD *)a4 + 1);
    v40 = v39 >> 8;
  }
  v62 = v39;
  v41 = *(unsigned int *)(a1 + 12);
  v42 = *(unsigned int *)(a1 + 16);
  if (v41 > v42)
  {
    *(_DWORD *)(a1 + 16) = v42 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v42) = v39;
    v43 = *(_DWORD *)(a1 + 12);
    v44 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v41 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v62);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v39;
    v43 = *(_DWORD *)(a1 + 12) + 1;
    v44 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v43;
    *(_DWORD *)(a1 + 16) = v44;
  }
  v63 = v40;
  if (v43 > v44)
  {
    *(_DWORD *)(a1 + 16) = v44 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v44) = v40;
  }
  else
  {
    if (v43 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v63);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v40;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4E, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 78;
  v34 = 78;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 78;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJbelow::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = *a4;
  v14 = *((_QWORD *)a4 + 2);
  v7 = a3;
  result = JSC::OpJbelow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, (unsigned __int8 *)&v13);
  if ((result & 1) == 0)
  {
    v13 = *a4;
    v14 = *((_QWORD *)a4 + 2);
    result = JSC::OpJbelow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v7, (unsigned __int8 *)&v13);
    if ((result & 1) == 0)
    {
      v13 = *a4;
      v14 = *((_QWORD *)a4 + 2);
      return JSC::OpJbelow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v7, (unsigned __int8 *)&v13, v9, v10, v11, v12);
    }
  }
  return result;
}

uint64_t JSC::OpJbelow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v14 = JSC::OpJbelow::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x57, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 87);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)1,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJbelow::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(int a1, int a2, unsigned __int8 *a3)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = (a1 - 1073741808) < 0x80;
  if (a1 <= 0x3FFFFFFF)
    v3 = (a1 + 128) < 0x90;
  if (!v3)
    return 0;
  v4 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 128) < 0x90;
  if (v4)
    return JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)1,std::integral_constant<BOOL,true>>::check(a3);
  else
    return 0;
}

uint64_t JSC::OpJbelow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x57, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 87);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJbelow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x57, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 87;
  v34 = 87;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 87;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJbeloweq::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v20 = *a4;
  v21 = *((_QWORD *)a4 + 2);
  v10 = a3;
  v22 = *a4;
  v23 = *((_QWORD *)a4 + 2);
  result = JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, (unsigned __int8 *)&v22, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    v22 = v20;
    v23 = v21;
    result = JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, (unsigned __int8 *)&v22, v12, v13, v14, v15);
    if ((result & 1) == 0)
    {
      v22 = v20;
      v23 = v21;
      return JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, (unsigned __int8 *)&v22, v16, v17, v18, v19);
    }
  }
  return result;
}

uint64_t JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (char)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x58, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = 88;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 88;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v43);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v39;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 88;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  v44 = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v44);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v40;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v45 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v41;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v34 = *((_QWORD *)a4 + 2);
    v35 = (int *)(a4 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v42 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v30) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v42;
    }
    else
    {
      LOBYTE(v30) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a4 + 1);
  }
  v46 = v30;
  v31 = *(unsigned int *)(a1 + 12);
  v32 = *(unsigned int *)(a1 + 16);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v30;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  int *v36;
  char v37;
  char v38;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (__int16)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x58, a3, (uint64_t)a4, a5, a6, a7, a8);
  v37 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v37);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v34;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 88;
  v38 = 88;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 88;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v38);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v35;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  if (*a4 == 1)
  {
    v29 = *((_QWORD *)a4 + 2);
    v30 = (int *)(a4 + 4);
    v31 = *(unsigned int *)(v29 + 28);
    if ((_DWORD)v31 == *(_DWORD *)(v29 + 24))
    {
      v36 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 16, v31 + 1, (unint64_t)v30);
      LOWORD(v27) = 0;
      v31 = *(unsigned int *)(v29 + 28);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *v36;
    }
    else
    {
      LOWORD(v27) = 0;
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *v30;
    }
    *(_DWORD *)(v32 + 4 * v31) = v33;
    ++*(_DWORD *)(v29 + 28);
  }
  else
  {
    v27 = *((_DWORD *)a4 + 1);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (__int16)v27);
  return 1;
}

uint64_t JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x58, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 88;
  v34 = 88;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 88;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  int *v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
      goto LABEL_7;
    }
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  if (v13 != (char)v13)
    return 0;
LABEL_7:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x46, (uint64_t)a3, a4, a5, a6, a7, a8);
  v35 = 70;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 70;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v35);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v32;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 70;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v20 = a2;
  v36 = v20;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v36);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v33;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v27 = *((_QWORD *)a3 + 2);
    v28 = (int *)(a3 + 4);
    v29 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v29 == *(_DWORD *)(v27 + 24))
    {
      v34 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 16, v29 + 1, (unint64_t)v28);
      LOBYTE(v23) = 0;
      v29 = *(unsigned int *)(v27 + 28);
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v34;
    }
    else
    {
      LOBYTE(v23) = 0;
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v28;
    }
    *(_DWORD *)(v30 + 4 * v29) = v31;
    ++*(_DWORD *)(v27 + 28);
  }
  else
  {
    v23 = *((_DWORD *)a3 + 1);
  }
  v37 = v23;
  v24 = *(unsigned int *)(a1 + 12);
  v25 = *(unsigned int *)(a1 + 16);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v23;
  }
  else
  {
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v37);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3)
{
  _BOOL4 v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;

  v4 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v4)
    return 0;
  result = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::check(a3);
  if ((_DWORD)result)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x46, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 70);
    v14 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v14 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
    v15 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a3);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    return 1;
  }
  return result;
}

uint64_t JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  char *v29;
  char *v30;
  unsigned int *v31;
  char v32;
  char v33;

  v11 = *a3;
  if (*a3)
  {
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v11 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v12 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v12 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v12;
  v13 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x46, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v29;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 70;
  v33 = 70;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 70;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 24))
    {
      v31 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 16, v25 + 1, (unint64_t)v13);
      v23 = 0;
      v25 = *(unsigned int *)(v24 + 28);
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v31;
    }
    else
    {
      v23 = 0;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v13;
    }
    *(_DWORD *)(v26 + 4 * v25) = v27;
    ++*(_DWORD *)(v24 + 28);
  }
  else
  {
    v23 = *v13;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
}

uint64_t JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  int *v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
      goto LABEL_7;
    }
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  if (v13 != (char)v13)
    return 0;
LABEL_7:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x47, (uint64_t)a3, a4, a5, a6, a7, a8);
  v35 = 71;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 71;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v35);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v32;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 71;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v20 = a2;
  v36 = v20;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v36);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v33;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v27 = *((_QWORD *)a3 + 2);
    v28 = (int *)(a3 + 4);
    v29 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v29 == *(_DWORD *)(v27 + 24))
    {
      v34 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 16, v29 + 1, (unint64_t)v28);
      LOBYTE(v23) = 0;
      v29 = *(unsigned int *)(v27 + 28);
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v34;
    }
    else
    {
      LOBYTE(v23) = 0;
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v28;
    }
    *(_DWORD *)(v30 + 4 * v29) = v31;
    ++*(_DWORD *)(v27 + 28);
  }
  else
  {
    v23 = *((_DWORD *)a3 + 1);
  }
  v37 = v23;
  v24 = *(unsigned int *)(a1 + 12);
  v25 = *(unsigned int *)(a1 + 16);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v23;
  }
  else
  {
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v37);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3)
{
  _BOOL4 v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;

  v4 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v4)
    return 0;
  result = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::check(a3);
  if ((_DWORD)result)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x47, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 71);
    v14 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v14 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
    v15 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a3);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    return 1;
  }
  return result;
}

uint64_t JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  char *v29;
  char *v30;
  unsigned int *v31;
  char v32;
  char v33;

  v11 = *a3;
  if (*a3)
  {
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v11 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v12 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v12 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v12;
  v13 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x47, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v29;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 71;
  v33 = 71;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 71;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 24))
    {
      v31 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 16, v25 + 1, (unint64_t)v13);
      v23 = 0;
      v25 = *(unsigned int *)(v24 + 28);
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v31;
    }
    else
    {
      v23 = 0;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v13;
    }
    *(_DWORD *)(v26 + 4 * v25) = v27;
    ++*(_DWORD *)(v24 + 28);
  }
  else
  {
    v23 = *v13;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
}

uint64_t JSC::OpJundefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3)
{
  _BOOL4 v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;

  v4 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v4)
    return 0;
  result = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::check(a3);
  if ((_DWORD)result)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x48, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 72);
    v14 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v14 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
    v15 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a3);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    return 1;
  }
  return result;
}

uint64_t JSC::OpJundefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  char *v29;
  char *v30;
  unsigned int *v31;
  char v32;
  char v33;

  v11 = *a3;
  if (*a3)
  {
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v11 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v12 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v12 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v12;
  v13 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x48, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v29;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 72;
  v33 = 72;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 72;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 24))
    {
      v31 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 16, v25 + 1, (unint64_t)v13);
      v23 = 0;
      v25 = *(unsigned int *)(v24 + 28);
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v31;
    }
    else
    {
      v23 = 0;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v13;
    }
    *(_DWORD *)(v26 + 4 * v25) = v27;
    ++*(_DWORD *)(v24 + 28);
  }
  else
  {
    v23 = *v13;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
}

uint64_t JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  int *v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
      goto LABEL_7;
    }
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  if (v13 != (char)v13)
    return 0;
LABEL_7:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x44, (uint64_t)a3, a4, a5, a6, a7, a8);
  v35 = 68;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 68;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v35);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v32;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 68;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v20 = a2;
  v36 = v20;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v36);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v33;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v27 = *((_QWORD *)a3 + 2);
    v28 = (int *)(a3 + 4);
    v29 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v29 == *(_DWORD *)(v27 + 24))
    {
      v34 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 16, v29 + 1, (unint64_t)v28);
      LOBYTE(v23) = 0;
      v29 = *(unsigned int *)(v27 + 28);
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v34;
    }
    else
    {
      LOBYTE(v23) = 0;
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v28;
    }
    *(_DWORD *)(v30 + 4 * v29) = v31;
    ++*(_DWORD *)(v27 + 28);
  }
  else
  {
    v23 = *((_DWORD *)a3 + 1);
  }
  v37 = v23;
  v24 = *(unsigned int *)(a1 + 12);
  v25 = *(unsigned int *)(a1 + 16);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v23;
  }
  else
  {
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v37);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t result;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  int *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
      goto LABEL_7;
    }
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  if (v13 != (__int16)v13)
    return 0;
LABEL_7:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x44, (uint64_t)a3, a4, a5, a6, a7, a8);
  v46 = 0x80;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 0x80;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v46);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v42;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 0x80;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 68;
  v47 = 68;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 68;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v47);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v43;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    v23 = *(_DWORD *)(a1 + 12) + 1;
    v24 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v23;
    *(_DWORD *)(a1 + 16) = v24;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v48 = v8;
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v23 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v48);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v8 >> 8;
  v49 = BYTE1(v8);
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = BYTE1(v8);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v44 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v49);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      LOBYTE(v27) = *v44;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v37 = *((_QWORD *)a3 + 2);
    v38 = (int *)(a3 + 4);
    v39 = *(unsigned int *)(v37 + 28);
    if ((_DWORD)v39 == *(_DWORD *)(v37 + 24))
    {
      v45 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 16, v39 + 1, (unint64_t)v38);
      LOBYTE(v30) = 0;
      LOBYTE(v31) = 0;
      v39 = *(unsigned int *)(v37 + 28);
      v40 = *(_QWORD *)(v37 + 16);
      v41 = *v45;
    }
    else
    {
      LOBYTE(v30) = 0;
      LOBYTE(v31) = 0;
      v40 = *(_QWORD *)(v37 + 16);
      v41 = *v38;
    }
    *(_DWORD *)(v40 + 4 * v39) = v41;
    ++*(_DWORD *)(v37 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a3 + 1);
    v31 = v30 >> 8;
  }
  v50 = v30;
  v32 = *(unsigned int *)(a1 + 12);
  v33 = *(unsigned int *)(a1 + 16);
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v30;
    v34 = *(_DWORD *)(a1 + 12);
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v32 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v50);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
    v34 = *(_DWORD *)(a1 + 12) + 1;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v34;
    *(_DWORD *)(a1 + 16) = v35;
  }
  v51 = v31;
  if (v34 > v35)
  {
    *(_DWORD *)(a1 + 16) = v35 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v35) = v31;
  }
  else
  {
    if (v34 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v51);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v34) = v31;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  char *v29;
  char *v30;
  unsigned int *v31;
  char v32;
  char v33;

  v11 = *a3;
  if (*a3)
  {
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v11 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v12 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v12 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v12;
  v13 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x44, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v29;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 68;
  v33 = 68;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 68;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 24))
    {
      v31 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 16, v25 + 1, (unint64_t)v13);
      v23 = 0;
      v25 = *(unsigned int *)(v24 + 28);
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v31;
    }
    else
    {
      v23 = 0;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v13;
    }
    *(_DWORD *)(v26 + 4 * v25) = v27;
    ++*(_DWORD *)(v24 + 28);
  }
  else
  {
    v23 = *v13;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
}

uint64_t JSC::OpJnless::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x53, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 83;
  v34 = 83;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 83;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJnlesseq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x54, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 84);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJnlesseq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x54, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 84;
  v34 = 84;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 84;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJngreater::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x55, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 85);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJngreater::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x55, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 85;
  v34 = 85;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 85;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJngreatereq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x56, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 86);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJngreatereq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x56, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 86;
  v34 = 86;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 86;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t JSC::OpJfalse::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  char *v29;
  char *v30;
  unsigned int *v31;
  char v32;
  char v33;

  v11 = *a3;
  if (*a3)
  {
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v11 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v12 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v12 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v12;
  v13 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x45, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v29;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 69;
  v33 = 69;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 69;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 24))
    {
      v31 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 16, v25 + 1, (unint64_t)v13);
      v23 = 0;
      v25 = *(unsigned int *)(v24 + 28);
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v31;
    }
    else
    {
      v23 = 0;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v13;
    }
    *(_DWORD *)(v26 + 4 * v25) = v27;
    ++*(_DWORD *)(v24 + 28);
  }
  else
  {
    v23 = *v13;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
}

uint64_t JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t result;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  int *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v12 = a5;
  v15 = *a4;
  if (*a4)
  {
    if (v15 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      if (a5 < 0x100)
        goto LABEL_10;
      return 0;
    }
    if (v15 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v16 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v16 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v16;
  if (((v16 + 128) | a5) > 0xFF)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2E, a3, (uint64_t)a4, a5, a6, a7, a8);
  v46 = 46;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 46;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v46);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v42;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = 46;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  v47 = v23;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v47);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v43;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v28 = v10;
  v48 = v28;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v44 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v48);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      v28 = *v44;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v37 = *((_QWORD *)a4 + 2);
    v38 = (int *)(a4 + 4);
    v39 = *(unsigned int *)(v37 + 28);
    if ((_DWORD)v39 == *(_DWORD *)(v37 + 24))
    {
      v45 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 16, v39 + 1, (unint64_t)v38);
      LOBYTE(v31) = 0;
      v39 = *(unsigned int *)(v37 + 28);
      v40 = *(_QWORD *)(v37 + 16);
      v41 = *v45;
    }
    else
    {
      LOBYTE(v31) = 0;
      v40 = *(_QWORD *)(v37 + 16);
      v41 = *v38;
    }
    *(_DWORD *)(v40 + 4 * v39) = v41;
    ++*(_DWORD *)(v37 + 28);
  }
  else
  {
    v31 = *((_DWORD *)a4 + 1);
  }
  v49 = v31;
  v32 = *(unsigned int *)(a1 + 12);
  v33 = *(unsigned int *)(a1 + 16);
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = v31;
    v34 = *(_DWORD *)(a1 + 12);
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v32 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v49);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v31;
    v34 = *(_DWORD *)(a1 + 12) + 1;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v34;
    *(_DWORD *)(a1 + 16) = v35;
  }
  v50 = v12;
  if (v34 > v35)
  {
    *(_DWORD *)(a1 + 16) = v35 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v35) = v12;
  }
  else
  {
    if (v34 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v50);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v34) = v12;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  unsigned int v12;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  int *v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = a5;
  v15 = *a4;
  if (*a4)
  {
    if (v15 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      if (a5 < 0x10000)
        goto LABEL_10;
      return 0;
    }
    if (v15 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v16 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v16 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v16;
  if (((v16 + 0x8000) | a5) >> 16)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2E, a3, (uint64_t)a4, a5, a6, a7, a8);
  v65 = 0x80;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v65);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v59;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = 0x80;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = 46;
  v66 = 46;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = 46;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v66);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v60;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v67 = v8;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v26 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v67);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v28 = *(_DWORD *)(a1 + 12) + 1;
    v29 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v28;
    *(_DWORD *)(a1 + 16) = v29;
  }
  v30 = v8 >> 8;
  v68 = BYTE1(v8);
  if (v28 > v29)
  {
    *(_DWORD *)(a1 + 16) = v29 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v31 = v28;
    if (v28 == *(_DWORD *)(a1 + 8))
    {
      v61 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v68);
      v31 = *(unsigned int *)(a1 + 12);
      v32 = *(_QWORD *)a1;
      LOBYTE(v30) = *v61;
    }
    else
    {
      v32 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v32 + v31) = v30;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v69 = v10;
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
    v35 = *(_DWORD *)(a1 + 12);
    v36 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v33 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v69);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v35 = *(_DWORD *)(a1 + 12) + 1;
    v36 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v35;
    *(_DWORD *)(a1 + 16) = v36;
  }
  v37 = v10 >> 8;
  v70 = BYTE1(v10);
  if (v35 > v36)
  {
    *(_DWORD *)(a1 + 16) = v36 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
  }
  else
  {
    v38 = v35;
    if (v35 == *(_DWORD *)(a1 + 8))
    {
      v62 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v70);
      v38 = *(unsigned int *)(a1 + 12);
      v39 = *(_QWORD *)a1;
      LOBYTE(v37) = *v62;
    }
    else
    {
      v39 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v39 + v38) = v37;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v54 = *((_QWORD *)a4 + 2);
    v55 = (int *)(a4 + 4);
    v56 = *(unsigned int *)(v54 + 28);
    if ((_DWORD)v56 == *(_DWORD *)(v54 + 24))
    {
      v64 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54 + 16, v56 + 1, (unint64_t)v55);
      LOBYTE(v40) = 0;
      LOBYTE(v41) = 0;
      v56 = *(unsigned int *)(v54 + 28);
      v57 = *(_QWORD *)(v54 + 16);
      v58 = *v64;
    }
    else
    {
      LOBYTE(v40) = 0;
      LOBYTE(v41) = 0;
      v57 = *(_QWORD *)(v54 + 16);
      v58 = *v55;
    }
    *(_DWORD *)(v57 + 4 * v56) = v58;
    ++*(_DWORD *)(v54 + 28);
  }
  else
  {
    v40 = *((_DWORD *)a4 + 1);
    v41 = v40 >> 8;
  }
  v71 = v40;
  v42 = *(unsigned int *)(a1 + 12);
  v43 = *(unsigned int *)(a1 + 16);
  if (v42 > v43)
  {
    *(_DWORD *)(a1 + 16) = v43 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v43) = v40;
    v44 = *(_DWORD *)(a1 + 12);
    v45 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v42 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v71);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v42) = v40;
    v44 = *(_DWORD *)(a1 + 12) + 1;
    v45 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v44;
    *(_DWORD *)(a1 + 16) = v45;
  }
  v72 = v41;
  if (v44 > v45)
  {
    *(_DWORD *)(a1 + 16) = v45 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v45) = v41;
    v46 = *(_DWORD *)(a1 + 12);
    v47 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v44 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v72);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v44) = v41;
    v46 = *(_DWORD *)(a1 + 12) + 1;
    v47 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v46;
    *(_DWORD *)(a1 + 16) = v47;
  }
  v73 = v12;
  if (v46 > v47)
  {
    *(_DWORD *)(a1 + 16) = v47 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v47) = v12;
    v48 = *(_DWORD *)(a1 + 12);
    v49 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v46 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v73);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v46) = v12;
    v48 = *(_DWORD *)(a1 + 12) + 1;
    v49 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v48;
    *(_DWORD *)(a1 + 16) = v49;
  }
  v50 = v12 >> 8;
  v74 = BYTE1(v12);
  if (v48 > v49)
  {
    *(_DWORD *)(a1 + 16) = v49 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v49) = BYTE1(v12);
  }
  else
  {
    v51 = v48;
    if (v48 == *(_DWORD *)(a1 + 8))
    {
      v63 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v74);
      v51 = *(unsigned int *)(a1 + 12);
      v52 = *(_QWORD *)a1;
      LOBYTE(v50) = *v63;
    }
    else
    {
      v52 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v52 + v51) = v50;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

